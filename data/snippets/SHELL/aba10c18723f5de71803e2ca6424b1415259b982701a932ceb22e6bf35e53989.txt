#!/bin/bash

#This is a bash script that will check the given directory and its subdirectories for any file containing certain keywords and then print out the line numbers and the contents of the lines with those keywords.

#First, ask for user input of directory name and keyword
read -p "Enter directory name (default is current directory): " dir
read -p "Enter keyword to search: " keyword

#Set the default directory to current directory if user input is empty
if [[ -z $dir ]]
then
  dir="."
fi

#Use the find command to search for all files containing the keyword in the specified directory and its subdirectories
files=$(find "$dir" -type f -exec grep -l "$keyword" {} +)

#Loop through each file found and use the grep command to search for the keyword in each line of the file
for file in $files
do
  #Print the name of the file
  echo "File: $file"

  #Use the grep command to search for the keyword in each line of the file and store the output in a variable
  output=$(grep -n "$keyword" "$file")

  #Check if the output is not empty
  if [[ ! -z $output ]]
  then
    #Loop through each line of the output and print the line number and the line itself
    while IFS= read -r line
    do
      #Separate the line number from the line itself using IFS and store them in separate variables
      lineNumber=$(echo "$line" | cut -d ":" -f1)
      lineContent=$(echo "$line" | cut -d ":" -f2-)

      #Print the line number and the line with formatting
      echo "Line $lineNumber: $lineContent"
    done <<< "$output"
    
  else #If the output is empty, print a message
    echo "Keyword not found in file."
  fi
done