#!/bin/bash
# This is a multiline Bash script.
# It demonstrates various Shell features and concepts.

# Declaring some variables and setting their values.
# Variables in Shell are untyped.
# The convention is to use all-caps for variable names.
VAR1="Hello"
VAR2=3.14
VAR3=true

# Using command substitution to set VAR4 to the output of a command.
VAR4=$(ls -l | grep "file")

# Using command substitution to set VAR5 to the current date and time.
VAR5=$(date +"%Y-%m-%d %H:%M:%S")

# Echoing the values of the variables.
# The $ symbol is used for variable expansion.
echo "VAR1: $VAR1"
echo "VAR2: $VAR2"
echo "VAR3: $VAR3"
echo "VAR4: $VAR4"
echo "VAR5: $VAR5"

# Conditional statement using if, elif, and else.
# The condition is checked using the [ ] or test command.
# The double parentheses are used for arithmetic expressions.
if [ $VAR2 -gt 3 ]; then
	echo "VAR2 is greater than 3."
elif (( $VAR2 < 3 )); then
	echo "VAR2 is less than 3."
else
	echo "VAR2 is equal to 3."
fi

# Looping through a list of numbers using a for loop.
# The $(( )) syntax is used for arithmetic evaluation.
# The { } syntax is used to expand the variable in the loop.
for i in {1..5}; do
	echo "Square of $i is $(( $i * $i ))." 
done

# Function definition and invocation.
function print_file {
	echo "The contents of $1 are:"
	cat $1
}

# Calling the function with the VAR4 variable as an argument.
print_file $VAR4

# Using the read command to get user input.
echo "Please enter your name:"
read NAME
echo "Hello $NAME, welcome to the Shell script!"

# Redirecting output to a file using the > operator.
echo "This line will be written to a file." > output.txt

# Appending output to a file using the >> operator.
echo "This line will be appended to the file." >> output.txt

# Using the && operator to execute multiple commands on one line.
# Here, if the first command succeeds, the second one will be executed.
mkdir new_directory && touch new_directory/new_file

# Using the || operator to execute a command if the first one fails.
# Here, if the first command fails, the second one will be executed.
rm non_existent_file || touch non_existent_file

# Using the && and || operators together to create a shortcut.
# If the first command succeeds, the second one will not be executed.
# If the first command fails, the second one will be executed.
rm existing_file && echo "The file was deleted." || echo "The file doesn't exist."

# Using command substitution to store the exit status of a command.
# $? will contain the exit status of the last command executed.
DATE=$(date)
echo "The current date is $DATE."
if [ $? -eq 0 ]; then
	echo "The 'date' command succeeded."
else
	echo "The 'date' command failed."
fi

# Using command substitution to store the output of a command in an array.
# The output is split into array elements based on the IFS value (by default, whitespace).
FILE_LIST=($(ls))
echo "The files in the current directory are: ${FILE_LIST[@]}."

# Using command substitution to store the output of a command in a variable.
# The output is split into multiple lines if there are multiple lines in the output.
# To preserve the newlines, double quotes are used.
MULTI_LINE_OUTPUT=$(ls -l)
echo -e "The output of 'ls -l' is:\n$MULTI_LINE_OUTPUT."

# The $HOME variable contains the current user's home directory.
echo "The current user's home directory is $HOME."

# Using the 'find' command to search for a file or directory.
echo "Searching for 'output.txt' in the current directory."
if find -name "output.txt"; then
	echo "Found 'output.txt' in the current directory."
else
	echo "Could not find 'output.txt' in the current directory."
fi

# Using the 'sed' command to manipulate text.
# The -i option is used to edit the file in-place, i.e. the changes will be saved to the file.
echo "Renaming 'new_file' in 'new_directory' to 'renamed_file'."
sed -i 's/new_file/renamed_file/g' new_directory/new_file

# Using the 'grep' command to search for a specific pattern in a file.
# The -i option is used to ignore case sensitivity.
echo "Searching for the string 'line' in 'output.txt'."
if grep -i "line" output.txt; then
	echo "Found 'line' in the file."
else
	echo "Could not find 'line' in the file."
fi

# Using the 'wc' command to count the number of lines, words, and characters in a file.
echo "Counting the number of lines, words, and characters in 'output.txt'."
LINE_COUNT=$(wc -l < output.txt)
WORD_COUNT=$(wc -w < output.txt)
CHAR_COUNT=$(wc -c < output.txt)
echo "The file has $LINE_COUNT lines, $WORD_COUNT words, and $CHAR_COUNT characters."

# Creating and using aliases for commands.
# Aliases can be declared in the .bashrc file.
alias ll="ls -l"
ll output.txt

# Exporting a variable to make it available to child processes.
# By default, variables are only available to the current process and its children.
export VAR6="This is a global variable."
echo "VAR6: $VAR6"

# Unsetting a variable using the 'unset' command.
# The variable will no longer be available in the current process or any child processes.
unset VAR6
echo "VAR6 (after unset): $VAR6"

# Using the 'dirname' command to get the directory name from a path.
DIR_PATH="/home/user/Documents/report.pdf"
DIR_NAME=$(dirname $DIR_PATH)
echo "The directory name from the path '$DIR_PATH' is '$DIR_NAME'."

# Using the 'basename' command to get the file name from a path.
FILE_PATH="/home/user/Documents/report.pdf"
FILE_NAME=$(basename $FILE_PATH)
echo "The file name from the path '$FILE_PATH' is '$FILE_NAME'."

# Changing the directory using the 'cd' command.
# The 'pushd' and 'popd' commands can be used to switch to and from directories.
# The current directory is always stored in the $PWD variable.
CURRENT_DIR=$PWD
echo "The current directory is '$CURRENT_DIR'."
pushd new_directory
echo "The current directory is now '$PWD'."
popd
echo "The current directory is back to '$PWD'."

# The exit status of the last command is stored in the special variable $?. 
# In this case, the previous command was popd, which is successful, so the exit status is 0.
echo "The exit status of the previous command (popd) is $?."