# This is a complex code snippet in the SHELL programming language
# It includes various variables, control structures, and function calls

#!/bin/bash # declaring the interpreter

# defining a function that takes a string as input
hello() {
  echo "Hello, $1!"
}

# declaring a variable
name="John"

# using conditional control structure
if [ "$name" != "John" ]
then
  echo "Name does not match"
else
  echo "Welcome $name"
fi

# declaring an array
fruits=("Apple" "Banana" "Orange")

# using for loop to iterate through the array
for fruit in "${fruits[@]}"
do
  echo "I have a $fruit"
done

# using case control structure
echo -n "Enter a number [1-3]: "
read num
case $num in
  1)
    echo "You chose one"
    ;;
  2)
    echo "You chose two"
    ;;
  3)
    echo "You chose three"
    ;;
  *)
    echo "Invalid input"
    ;;
esac

# invoking the function
hello "$name"

# defining a variable with a command substitution
files=$(ls *.txt)

# using while loop to iterate through the files
while read -r line; do
  echo "$line"
done < "$files"

# using nested if statements
if [ "$name" == "John" ]
then
  if [ -f "my_file.txt" ]
  then
    echo "John has a file named my_file.txt"
  else
    echo "John does not have the file"
  fi
else
  echo "User unknown"
fi

# using command line arguments
echo "Script name: $0"
echo "First argument: $1"
echo "Second argument: $2"
echo "Third argument: $3"
echo "All arguments: $@"

# declaring a variable with a default value
: ${age:=30}

# outputting the value of the variable
echo "Age is $age"