#!/bin/bash

#This is a complex code snippet in SHELL
#Author: John Doe

#Variables
USERNAME="johndoe"
PASSWORD="password"
FILE="text.txt"

#Functions
print_divider() {
    # prints a divider for organization purposes
    printf "================================\n"
}

read_input() {
    # prompts user for input and stores it in variable
    read -p "Enter your name: " NAME
}

create_file() {
    # creates a new file with user-provided name
    touch "$FILE"
    print_divider
    printf "File '%s' successfully created!\n" "$FILE"
    print_divider
}

add_data() {
    # appends data to existing file
    printf "Enter any data to add to the file: "
    read DATA
    echo "$DATA" >> "$FILE"
    print_divider
    printf "Data successfully added to '%s' file!\n" "$FILE"
    print_divider
}

encrypt_file() {
    # encrypts the file using openssl
    printf "Encrypting file '%s'...\n" "$FILE"
    openssl enc -aes-256-cbc -salt -in "$FILE" -out "$FILE.enc" -k "$PASSWORD"
    print_divider
    printf "File successfully encrypted and saved as '%s.enc'!\n" "$FILE"
    print_divider
}

decrypt_file() {
    # decrypts the file using openssl
    printf "Decrypting file '%s'...\n" "$FILE"
    openssl enc -d -aes-256-cbc -in "$FILE.enc" -out "decrypted.txt" -k "$PASSWORD"
    print_divider
    printf "File successfully decrypted and saved as 'decrypted.txt'!\n"
    print_divider
}

# Main code
printf "Welcome to the file management system!\n"
printf "Please enter your login credentials to continue.\n"

# Verify login credentials
printf "Username: "
read INPUT_USERNAME
printf "Password: "
read -s INPUT_PASSWORD #hides user input
print_divider

# Check if login credentials match
if [ "$INPUT_USERNAME" = "$USERNAME" ] && [ "$INPUT_PASSWORD" = "$PASSWORD" ]; then
    printf "Login successful!\n"
    print_divider

    # Prompt user for desired action
    printf "What would you like to do?\n"
    printf "1. Create new file\n"
    printf "2. Add data to existing file\n"
    printf "3. Encrypt file\n"
    printf "4. Decrypt file\n"

    # Read user input and execute corresponding function
    read OPTION
    case $OPTION in
        1) create_file ;;
        2) add_data ;;
        3) encrypt_file ;;
        4) decrypt_file ;;
        *) printf "Invalid option, exiting program...\n" ;;
    esac

    printf "Thank you for using the file management system!\n"
else
    # If login credentials do not match, exit program
    printf "Incorrect credentials, exiting program...\n"
fi