# This script will create a backup of a specified directory and all its contents
# The backup will be stored in a designated backup folder

# Set the source directory
SOURCE=/home/user/my_folder

# Set the destination backup folder
DESTINATION=/home/user/backup_folder

# Create a unique folder name based on current date and time
BACKUP_FOLDER_NAME=$(date +%Y%m%d_%H%M%S)

# Create the backup folder within the destination folder
mkdir $DESTINATION/$BACKUP_FOLDER_NAME

# Use rsync command to recursively copy all files and subdirectories from source directory to backup folder
# Exclude any files or directories that are specified in the EXCLUDE list
rsync -avz --exclude-from='EXCLUDE' $SOURCE $DESTINATION/$BACKUP_FOLDER_NAME

# Check if the rsync command is successful
if [ $? -eq 0 ]; then
    echo "Backup successful"
else
    echo "Backup failed"
    exit 1 # Exit the script with an error code
fi

# Compress the backup folder using tar command
# The -czvf flags indicate that the backup will be compressed, zipped, and the process will be verbose
tar -czvf $DESTINATION/$BACKUP_FOLDER_NAME.tar.gz $DESTINATION/$BACKUP_FOLDER_NAME

# Check if the tar command is successful
if [ $? -eq 0 ]; then
    echo "Tar successful"
else
    echo "Tar failed"
    exit 1 # Exit the script with an error code
fi

# Delete the original backup folder
rm -rf $DESTINATION/$BACKUP_FOLDER_NAME

# Print out the path of the compressed backup file
echo "Backup file path: $DESTINATION/$BACKUP_FOLDER_NAME.tar.gz"

# Display the size of the backup file
backup_size=$(ls -s $DESTINATION/$BACKUP_FOLDER_NAME.tar.gz | awk '{print $1}')
echo "Backup file size: $backup_size bytes"