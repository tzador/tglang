# This is a complex code snippet in SHELL
# It generates a list of Fibonacci numbers up to a specified limit
# The limit is given as a command line argument
# It uses a recursive function to generate the sequence
# The sequence is printed to the console
# Limit is set as 10 in this example, change it to desired value

# Function to generate Fibonacci sequence using recursion
# Takes in a number as limit and returns a list of Fibonacci numbers up to that limit
function fib_recursive(limit) {
    # Initialize a list to hold the sequence
    sequence = (0 1)

    # Base cases
    # 0 and 1 are the first two numbers in the sequence
    # Therefore, if limit is 0 or 1, simply return the sequence list
    if [ $limit == 0 ] || [ $limit == 1 ]; then
        return $sequence
    fi

    # Recursive call to generate the rest of the sequence
    # The last two numbers in the sequence are added to get the next number
    # The limit is decremented by 1 with each call
    # The new number is added to the sequence and the function is called again
    # This continues until the limit becomes 1
    # Once the limit reaches 1, the sequence is complete and the list is returned
    next_num = $(($sequence[-1] + $sequence[-2]))
    sequence += $next_num
    new_limit = $(($limit - 1))
    return $(fib_recursive $new_limit)
}

# Call the function with limit set as 10
fib_sequence = $(fib_recursive 10)

# Print the sequence to the console
echo "The Fibonacci sequence up to limit 10 is: ${fib_sequence[@]}"

# The output should be: The Fibonacci sequence up to limit 10 is: 0 1 1 2 3 5 8 13 21 34