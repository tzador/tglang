fn main() {
    // Define a variable of type 'string' and assign it a value
    let my_string = "Hello, world!";

    // Print the value of the string
    println!("{}", my_string);

    // Declare a mutable variable of type 'i32' and assign it a value
    let mut my_num: i32 = 10;

    // Print the value of the variable
    println!("{}", my_num);

    // Increment the value of the variable by 1
    my_num += 1;

    // Print the new value of the variable
    println!("{}", my_num);

    // Create a function that returns the sum of two numbers
    fn sum(x: i32, y: i32) -> i32 {
        return x + y;
    }

    // Call the function and print the value returned
    let result = sum(5, 6);
    println!("{}", result);

    // Create a 'for' loop to print numbers from 0 to 9
    for i in 0..10 {
        println!("{}", i);
    }

    // Create a 'while' loop to print numbers from 0 to 4
    let mut j = 0;
    while j < 5 {
        println!("{}", j);
        j += 1;
    }

    // Create a 'match' statement to check the value of a variable
    let num = 5;
    match num {
        // If the value is 1, print "One"
        1 => println!("One"),
        // If the value is 2, print "Two"
        2 => println!("Two"),
        // If the value is any other integer, print "Other"
        _ => println!("Other"),
    }

    // Create a 'struct' to store information about a book
    struct Book {
        title: &'static str,
        author: &'static str,
        pages: i32,
    }

    // Create an instance of the 'Book' struct
    let my_book = Book {
        title: "1984",
        author: "George Orwell",
        pages: 328,
    };

    // Print the information about the book
    println!("Title: {}", my_book.title);
    println!("Author: {}", my_book.author);
    println!("Pages: {}", my_book.pages);

    // Declare a variable that stores a closure (anonymous function)
    let inc = |x: i32| -> i32 {
        x + 1
    };

    // Call the closure and print the returned value
    let new_num = inc(3);
    println!("{}", new_num);
}