fn generate_next_prime() -> i32 {
    let mut num = 2; // initialize next prime number to 2
    let mut primes: Vec<i32> = vec![num]; // initialize vector to store prime numbers
    let mut is_prime: bool; // variable to check if a number is prime

    while primes.len() < 100 { // keep looping until 100 prime numbers have been generated
        num += 1; // increment number to be checked
        is_prime = true; // assume number is prime unless proven otherwise

        // loop through every number in vector to check if it is a factor of the current number
        for prime in &primes {
            if num % prime == 0 { // if current number is divisible by a prime number, it is not prime
              is_prime = false;
              break; // stop looping through vector since number is not prime
            }
        }

        if is_prime { // if number is still marked as prime, add it to the vector
            primes.push(num);
        }
    }

    primes[99] // return the 100th prime number 
}