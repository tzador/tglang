// Define a struct for a node in a binary tree
struct Node<'a, T> {
    data: T,
    left: Option<&'a Node<'a, T>>,
    right: Option<&'a Node<'a, T>>,
}

// Implement an 'insert' method for the Node struct
impl<'a, T: std::cmp::Ord> Node<'a, T> {
    // Takes in a generic value and inserts it into the binary tree
    fn insert(&'a mut self, value: T) {
        // Check if value is greater than or equal to current node's data
        if value >= self.data {
            // Check if there is a right child
            match self.right {
                // If there is, recursively call insert method on right child
                Some(ref mut right_child) => right_child.insert(value),
                // If there isn't, create a new node and set it as right child
                None => {
                    let new_node = Node {
                        data: value,
                        left: None,
                        right: None,
                    };
                    self.right = Some(&new_node);
                }
            }
        } else {
            // Otherwise, check if there is a left child
            match self.left {
                // If there is, recursively call insert method on left child
                Some(ref mut left_child) => left_child.insert(value),
                // If there isn't, create a new node and set it as left child
                None => {
                    let new_node = Node {
                        data: value,
                        left: None,
                        right: None,
                    };
                    self.left = Some(&new_node);
                }
            }
        }
    }
}

// Create a function to print out the binary tree in order
fn inorder_traversal<'a, T>(node: &'a Node<T>) {
    // Check if left child exists
    match node.left {
        // If so, recursively call function on left child
        Some(left) => inorder_traversal(left),
        // If not, print out current node's data
        None => println!("{:?}", node.data),
    }

    // Check if right child exists
    match node.right {
        // If so, recursively call function on right child
        Some(right) => inorder_traversal(right),
        // If not, do nothing
        None => (),
    }
}

// Create a main function to test the implementation
fn main() {
    // Create a root node with data 5
    let mut root = Node {
        data: 5,
        left: None,
        right: None,
    };

    // Insert values into the binary tree
    root.insert(3);
    root.insert(7);
    root.insert(2);
    root.insert(4);
    root.insert(6);
    root.insert(8);

    // Print out the binary tree in order
    inorder_traversal(&root);
}

// Output:
// 2
// 3
// 4
// 5
// 6
// 7
// 8