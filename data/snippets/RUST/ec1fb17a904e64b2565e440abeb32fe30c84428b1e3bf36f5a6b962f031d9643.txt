#![allow(unused)]
fn main() {
    use std::collections::BTreeMap;
    
    // Create a new BTreeMap with i32 keys and String values
    let mut btree_map: BTreeMap<i32, String> = BTreeMap::new();
    
    // Insert 3 key-value pairs into the BTreeMap
    btree_map.insert(1, String::from("One"));
    btree_map.insert(2, String::from("Two"));
    btree_map.insert(3, String::from("Three"));
    
    // Create a mutable reference to the key-value pair with key 2
    let key_2 = btree_map.get_mut(&2).unwrap();
    
    // Change the value of key 2 to "TWo"
    *key_2 = String::from("TWo");
    
    //Print out all the key-value pairs in the BTreeMap
    for (key, value) in btree_map {
        println!("Key: {} | Value: {}", key, value);
    }
    
    // Remove key-value pair with key 1 from the BTreeMap
    btree_map.remove(&1);
    
    // Check if key 1 still exists in the BTreeMap
    if btree_map.contains_key(&1) {
        println!("Key 1 still exists in the BTreeMap");
    } else {
        println!("Key 1 does not exist in the BTreeMap");
    }
}