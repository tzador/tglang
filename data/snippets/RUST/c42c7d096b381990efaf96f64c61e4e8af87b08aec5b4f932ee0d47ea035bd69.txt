// Define a struct named 'Person' with four fields
struct Person {
    // first name field
    first_name: String,
    // last name field
    last_name: String,
    // age field
    age: u32,
    // list of hobbies field
    hobbies: Vec<String>,
}

// Implement the 'Display' trait for the 'Person' struct
impl std::fmt::Display for Person {
    // Define the 'fmt' function to format the output for printing
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        // Create a string containing all the hobbies in the list separated by commas
        let hobbies_list = self.hobbies.join(", ");

        // Use the 'write!' macro to format the output and write it to the formatter
        write!(f, "{} {} is {} years old and loves to {}", 
            self.first_name, self.last_name, self.age, hobbies_list)
    }
}

// Create a new instance of the 'Person' struct
let person = Person {
    first_name: String::from("John"),
    last_name: String::from("Doe"),
    age: 30,
    hobbies: vec![String::from("reading"), String::from("hiking")]
};

// Print the output using the 'Display' trait
println!("{}", person); // John Doe is 30 years old and loves to read, hike