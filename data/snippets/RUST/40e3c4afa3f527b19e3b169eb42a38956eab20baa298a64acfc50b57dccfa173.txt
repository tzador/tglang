fn merge_sort<T: Ord>(array: &mut [T], start: usize, end: usize) {

    if start < end {

        let mid = (start + end) / 2;

        merge_sort(array, start, mid);
        merge_sort(array, mid + 1, end);

        merge(array, start, mid, end);
    }
}

fn merge<T: Ord>(array: &mut [T], start: usize, mid: usize, end: usize) {

    let mut left = start;
    let mut right = mid + 1;
    let mut temp_array: Vec<T> = vec![None; end - start + 1];

    for index in 0..temp_array.len() {
        if right > end || (left <= mid && array[left] <= array[right]) {
            temp_array[index] = array[left];
            left += 1;
        } else {
            temp_array[index] = array[right];
            right += 1;
        }
    }

    for index in 0..temp_array.len() {
        array[index + start] = temp_array[index];
    }
}

fn main() {
    let mut array = [41, 52, 13, 24, 35, 16, 27];

    merge_sort(&mut array, 0, array.len() - 1);

    println!("Sorted array: {:?}", array);
}