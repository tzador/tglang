// This code snippet creates a new struct named 'Person'
// with three fields: 'name', 'age', and 'occupation'
struct Person {
    name: String, // defines a field 'name' of type String
    age: u32, // defines a field 'age' of type u32 (unsigned 32-bit integer)
    occupation: Vec<String>, // defines a field 'occupation' of type Vec<String> (vector of strings)
}

impl Person { // implements functions for the 'Person' struct
    // function to create a new instance of 'Person' struct
    fn new(name: &str, age: u32, occupation: Vec<String>) -> Person {
        Person { // initializes the struct with provided values
            name: name.to_string(),
            age,
            occupation,
        }
    }

    // function to print the person's information
    fn print_info(&self) { // takes a reference to the current instance of 'Person'
        println!("Name: {}\nAge: {}\nOccupation: {:?}", self.name, self.age, self.occupation);
    }
}

fn main() {
    // creates a new instance of 'Person' struct using the 'new' function
    let john = Person::new("John", 25, vec!["Software Engineer".to_string(), "Musician".to_string()]);
    
    // calls the 'print_info' function on the 'john' instance
    john.print_info();
}

// Output:
//
// Name: John
// Age: 25
// Occupation: ["Software Engineer", "Musician"]