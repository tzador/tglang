#![allow(dead_code)] // allows functions and variables to be unused without throwing an error

// Defines a struct called 'Point' with two fields, 'x' and 'y' of type f64 (floating point number)
struct Point {
    x: f64,
    y: f64,
}

impl Point { // implementation of methods for the Point struct
    // defines a new function that takes in two f64 parameters and returns a new Point struct with those values
    fn new(x: f64, y: f64) -> Point {
        Point { x: x, y: y }
    }

    // calculates the distance between two points using the 'x' and 'y' fields
    fn distance(&self, other: &Point) -> f64 {
        ((self.x - other.x).powi(2) + (self.y - other.y).powi(2)).sqrt()
    }

    // prints out the point's coordinates in a formatted string
    fn print_coordinates(&self) {
        println!("Coordinates: ({}, {})", self.x, self.y);
    }
}

fn main() {
    // creates two Point structs using the new function and assigns them to variables
    let point_a = Point::new(2.5, 6.8);
    let point_b = Point::new(8.1, 3.4);

    // calculates and prints the distance between the two points using the distance method
    let distance = point_a.distance(&point_b);
    println!("Distance between the points: {}", distance);

    // prints out the coordinates of both points using the print_coordinates method
    point_a.print_coordinates();
    point_b.print_coordinates();
}