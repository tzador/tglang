// Create a generic struct with two fields
struct Pair<T, U> {
    first: T,
    second: U,
}

// Implement a method on the struct that returns the pair's first field
impl<T, U> Pair<T, U> {
    fn get_first(&self) -> &T {
        &self.first
    }
}

// Create an enum with two variants
enum Shape {
    Rectangle {
        width: u32,
        height: u32,
    },
    Circle { radius: f64 },
}

// Implement a method on the enum that calculates the area depending on the variant
impl Shape {
    pub fn area(&self) -> f64 {
        match *self {
            Shape::Rectangle { width, height } => (width * height) as f64,
            Shape::Circle { radius } => std::f64::consts::PI * (radius * radius),
        }
    }
}

// Create a new Pair instance with a string and a Shape
let my_pair = Pair {
    first: "Hello World",
    second: Shape::Rectangle {
        width: 10,
        height: 20,
    },
};

// Call the get_first method on the Pair instance and print the result
println!("{}", my_pair.get_first());

// Call the area method on the Shape variant of the Pair instance and print the result
if let Shape::Rectangle { width, height } = my_pair.get_first() {
    println!("{}", Shape::Rectangle { width, height }.area());
}