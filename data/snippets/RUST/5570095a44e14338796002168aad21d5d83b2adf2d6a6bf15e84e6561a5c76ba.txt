// This code snippet generates a vector of sorted integers
// using the merge sort algorithm in Rust
//
// Merge Sort function
fn merge_sort(mut arr: Vec<i32>) -> Vec<i32> {
    let len = arr.len();
    // Base case: if array length is 1, return it
    if len == 1 {
        return arr;
    }
    // Middle index for splitting the array into two halves
    let mid = len / 2;
    // Recursive calls to split the array into two halves
    let left_arr = merge_sort(arr[..mid].to_vec());
    let right_arr = merge_sort(arr[mid..].to_vec());
    // Calling the merge function to merge and sort the two halves
    merge(&left_arr, &right_arr)
}

// Merge function that merges and sorts the two halves
fn merge(left_arr: &Vec<i32>, right_arr: &Vec<i32>) -> Vec<i32> {
    let mut result = Vec::with_capacity(left_arr.len() + right_arr.len());
    let (mut i, mut j) = (0, 0);
    // Loop while both arrays have elements to compare
    while i < left_arr.len() && j < right_arr.len() {
        // Compare and push the smaller element into the result vector
        if left_arr[i] < right_arr[j] {
            result.push(left_arr[i]);
            i += 1;
        } else {
            result.push(right_arr[j]);
            j += 1;
        }
    }
    // Handle the remaining elements in the arrays (if any)
    if i < left_arr.len() {
        result.extend_from_slice(&left_arr[i..]);
    }
    if j < right_arr.len() {
        result.extend_from_slice(&right_arr[j..]);
    }
    result
}

// Main function to generate and print the sorted vector
fn main() {
    // Vector to be sorted
    let unsorted_vec = vec![5, 8, 2, 10, 1, 4, 7, 6];
    // Calling the merge_sort function to generate the sorted vector
    let sorted_vec = merge_sort(unsorted_vec);
    // Print the sorted vector
    println!("Sorted Vector: {:?}", sorted_vec);
}

// Output:
// Sorted Vector: [1, 2, 4, 5, 6, 7, 8, 10]