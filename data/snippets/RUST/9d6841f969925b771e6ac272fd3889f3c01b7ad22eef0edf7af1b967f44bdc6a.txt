/// This function calculates the maximum number of paths
/// that can be taken in a given graph
/// 
/// # Arguments
/// * `graph` - The graph represented as an adjacency matrix
/// * `start_node` - The starting node for finding paths
/// * `end_node` - The ending node for finding paths
/// * `visited_nodes` - A vector tracking the nodes that have been visited
/// * `path_count` - A mutable variable for counting the number of paths
fn get_path_count(graph: &Vec<Vec<i32>>, start_node: i32, end_node: i32, visited_nodes: &mut Vec<i32>, path_count: &mut i32) {

    // Add start node to visited nodes
    visited_nodes.push(start_node);

    // If start and end node are the same, increment path count
    if(start_node == end_node) {
        *path_count += 1;
    } else {
        // Loop through the graph to find possible paths
        for (i, &node) in graph[start_node as usize].iter().enumerate() {

            // Only consider nodes that are not already visited
            if(!visited_nodes.contains(&(i as i32)) && node == 1) {
                // Recursively call the function to continue finding paths
                get_path_count(graph, i as i32, end_node, visited_nodes, path_count);
            }
        }
    }

    // Remove start node from visited nodes for backtracking
    visited_nodes.pop();
}

// Example usage, assuming the graph is represented as an adjacency matrix and start/end nodes are known:
let mut path_count = 0;
let mut visited_nodes = Vec::new();
get_path_count(&graph, start_node, end_node, &mut visited_nodes, &mut path_count);

// Print the total number of paths
println!("Total number of paths from start node to end node: {}", path_count);