// This code snippet creates a function called merge_sort that takes in a mutable slice of integers and returns a sorted slice using the merge sort algorithm.

fn merge_sort(nums: &mut [i32]) {
    // Base case: if the slice has one or fewer elements, it is already sorted
    if nums.len() <= 1 {
        return;
    }

    // Find the middle index of the slice
    let mid = nums.len() / 2;

    // Create two temporary slices to store the left and right halves of the original slice
    let mut left_slice = &mut nums[0..mid];
    let mut right_slice = &mut nums[mid..];

    // Recursively call merge_sort on the left and right slices to sort them
    // This will continue until the base case is reached
    merge_sort(&mut left_slice);
    merge_sort(&mut right_slice);

    // Create a new vector to store the sorted result of merging the left and right slices
    // The capacity is set to avoid constantly resizing the vector as elements are added
    let mut result: Vec<i32> = Vec::with_capacity(nums.len());

    // Use while loops to iterate through both slices, comparing the values at each index and adding the smaller value to the result vector
    let mut left_index = 0;
    let mut right_index = 0;
    while left_index < left_slice.len() && right_index < right_slice.len() {
        if left_slice[left_index] < right_slice[right_index] {
            result.push(left_slice[left_index]);
            left_index += 1;
        } else {
            result.push(right_slice[right_index]);
            right_index += 1;
        }
    }

    // If there are any remaining elements in the left slice, add them to the result vector
    while left_index < left_slice.len() {
        result.push(left_slice[left_index]);
        left_index += 1;
    }

    // If there are any remaining elements in the right slice, add them to the result vector
    while right_index < right_slice.len() {
        result.push(right_slice[right_index]);
        right_index += 1;
    }

    // Copy the sorted elements from the result vector back into the original slice
    nums.clone_from_slice(&result);
}