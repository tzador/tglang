// This is a function that finds the maximum value in a vector using recursion
fn find_max(vector: Vec<i32>) -> i32 {
    let length = vector.len(); // get the length of the vector

    match length { // use a match statement to check the length
        0 => panic!("Vector is empty!"), // if the vector is empty, panic
        1 => vector[0], // if the vector has only one element, return that element
        _ => { // if the vector has more than one element
            let max = find_max(vector[1..].to_vec()); // recursively call find_max on the remaining vector
            if vector[0] > max { // check if the first element is larger than the maximum found in the recursive call
                vector[0] // if it is, return the first element
            } else {
                max // otherwise, return the maximum found in the recursive call
            }
        }
    }
}

let vector = vec![5, 3, 9, -2, 10, 4, 7]; // create a vector with some values
let max = find_max(vector); // call the function to find the maximum value
println!("Maximum value is {}", max); // print out the maximum value