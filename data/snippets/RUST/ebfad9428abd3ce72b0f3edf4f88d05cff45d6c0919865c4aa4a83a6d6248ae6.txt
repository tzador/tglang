# Enum for different types of animals
enum Animal {
    // Variant for a dog with a string for the breed and an optional integer for age
    Dog(String, Option<u8>),
    // Variant for a cat with a string for the color and an optional integer for age
    Cat(String, Option<u8>),
    // Variant for a fish with a string for the type and an optional integer for age
    Fish(String, Option<u8>),
}

impl Animal {
    // Method to get the age of an animal, returns an option integer
    fn get_age(&self) -> Option<u8> {
        // Match on the animal variant
        match self {
            // Pattern match on the dog variant and return the age if it exists
            Animal::Dog(_, age) => *age,
            // Pattern match on the cat variant and return the age if it exists
            Animal::Cat(_, age) => *age,
            // Pattern match on the fish variant and return the age if it exists
            Animal::Fish(_, age) => *age,
        }
    }
}

// Function to create a vector of animals with different variants
fn create_animals() -> Vec<Animal> {
    vec![
        // Create a dog with breed "Labrador" and age 3
        Animal::Dog(String::from("Labrador"), Some(3)),
        // Create a cat with color "Orange" and age None
        Animal::Cat(String::from("Orange"), None),
        // Create a fish with type "Goldfish" and age 1
        Animal::Fish(String::from("Goldfish"), Some(1)),
    ]
}

fn main() {
    // Create vector of animals
    let animals = create_animals();

    // Loop through animals and print the age of each one using the `get_age` method
    for animal in animals {
        println!("Animal age is {}", animal.get_age().unwrap_or(0));
    }
}