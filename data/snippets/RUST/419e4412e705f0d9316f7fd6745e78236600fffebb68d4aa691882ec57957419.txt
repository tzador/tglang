// A function that finds all prime numbers up to a given limit
fn sieve_of_eratosthenes(limit: i32) -> Vec<bool> {
    // Initialize a vector of booleans, with all values set to 'true'
    let mut primes: Vec<bool> = vec![true; (limit + 1) as usize];
    
    // The first two numbers, 0 and 1 are not prime, so set them to 'false'
    primes[0] = false;
    primes[1] = false;
    
    // Loop through all numbers from 2 to the square root of the limit
    for num in 2..((limit as f64).sqrt() as i32) {
        // If the current number is marked as 'true', it is prime
        if primes[num as usize] {
            // Mark all multiples of the current number as 'false'
            for mult in (num*num..=limit).step_by(num) {
                primes[mult as usize] = false;
            }
        }
    }
    
    // Return the vector of booleans, where 'true' values represent prime numbers
    primes
}

// Call the function with a limit of 50 and print the prime numbers
let primes = sieve_of_eratosthenes(50);
for (index, val) in primes.iter().enumerate() {
    if *val {
        println!("{}", index);
    }
}