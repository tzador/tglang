/// Struct representing a person
struct Person {
    name: String,
    age: u32,
    occupation: String,
    hobbies: Vec<String>,
    ssn: Option<String>,
}

impl Person {
    /// Returns the person's name
    fn get_name(&self) -> &String {
        &self.name
    }
    
    /// Returns the person's age
    fn get_age(&self) -> u32 {
        self.age
    }
    
    /// Sets the person's age
    fn set_age(&mut self, new_age: u32) {
        self.age = new_age;
    }
    
    /// Returns the person's occupation
    fn get_occupation(&self) -> &String {
        &self.occupation
    }

    /// Sets the person's occupation
    fn set_occupation(&mut self, new_occupation: String) {
        self.occupation = new_occupation;
    }

    /// Returns the person's hobbies
    fn get_hobbies(&self) -> &Vec<String> {
        &self.hobbies
    }

    /// Adds a new hobby to the person's list of hobbies
    fn add_hobby(&mut self, new_hobby: String) {
        self.hobbies.push(new_hobby);
    }

    /// Removes a hobby from the person's list of hobbies if it exists
    fn remove_hobby(&mut self, removed_hobby: &str) {
        if let Some(index) = self.hobbies.iter().position(|h| h == removed_hobby) {
            self.hobbies.remove(index);
        }
    }

    /// Returns the person's SSN if it exists, otherwise returns "N/A"
    fn get_ssn(&self) -> &str {
        match self.ssn {
            Some(ref ssn) => ssn,
            None => "N/A"
        }
    }
}

// Creating a new person instance
let mut person = Person {
    name: String::from("John"),
    age: 25,
    occupation: String::from("Software Engineer"),
    hobbies: vec![String::from("Reading"), String::from("Hiking")],
    ssn: Some(String::from("123-45-6789")),
};

// Using the struct's methods to get and set information
println!("Name: {}", person.get_name()); // Output: Name: John
person.set_age(26);
println!("Age: {}", person.get_age()); // Output: Age: 26
println!("Occupation: {}", person.get_occupation()); // Output: Occupation: Software Engineer
println!("Hobbies: {:?}", person.get_hobbies()); // Output: Hobbies: ["Reading", "Hiking"]
person.add_hobby(String::from("Gardening"));
println!("Hobbies: {:?}", person.get_hobbies()); // Output: Hobbies: ["Reading", "Hiking", "Gardening"]
person.remove_hobby("Reading");
println!("Hobbies: {:?}", person.get_hobbies()); // Output: Hobbies: ["Hiking", "Gardening"]
println!("SSN: {}", person.get_ssn()); // Output: SSN: 123-45-6789