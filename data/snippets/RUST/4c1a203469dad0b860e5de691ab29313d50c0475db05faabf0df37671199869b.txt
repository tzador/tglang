// Define a generic struct with two generic type parameters
struct Vec2<T, U> {
    x: T,
    y: U,
}

// Implement the trait 'Add' for the Vec2 struct,
// allowing for addition of two Vec2 instances
impl<T, U> Add for Vec2<T, U>
// Define the output type as another Vec2 instance,
// with the constraint that the generic types must be of the same type as the original Vec2 instance
where T: Add<Output = T>, U: Add<Output = U> {
    // Define the function that performs the addition
    fn add(self, other: Vec2<T, U>) -> Vec2<T, U> {
        // Add the x and y values of the two Vec2 instances and return a new Vec2 instance with the result
        Vec2 {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}

// Create two Vec2 instances with different generic types
let vec1 = Vec2 {
    x: 2,
    y: 5.6,
};

let vec2 = Vec2 {
    x: 8,
    y: 4.2,
};

// Add the two Vec2 instances using the 'Add' trait implementation
let vec3 = vec1 + vec2;

// Print the result
println!("{:?}", vec3); // Output: Vec2 { x: 10, y: 9.8 }