// This function takes in a vector as input and returns a new vector with only unique values.

fn get_unique_vector(input_vec: Vec<i32>) -> Vec<i32> {
    // Create a new vector to store unique values
    let mut unique_vec: Vec<i32> = Vec::new();

    // Loop through the input vector
    for num in input_vec {
        // Check if the number is already in the unique vector
        if !unique_vec.contains(&num) {
            // If not, add it to the unique vector
            unique_vec.push(num);
        }
    }
    // Return the unique vector
    unique_vec
}

fn main() {
    // Create a vector with duplicate values
    let input_vec = vec![2, 4, 6, 8, 2, 4, 6, 8];

    // Call the get_unique_vector function to get a vector with only unique values
    let unique_vec = get_unique_vector(input_vec);

    // Print the unique vector
    println!("{:?}", unique_vec); // Output: [2, 4, 6, 8]
}