/// Struct representing a binary tree node with a value, left child, and right child
struct BinaryTreeNode<T> {
    value: T,
    left: Option<Box<BinaryTreeNode<T>>>,
    right: Option<Box<BinaryTreeNode<T>>>,
}

impl<T> BinaryTreeNode<T> {
    /// Returns the maximum depth of the binary tree
    fn max_depth(&self) -> i32 {
        match self {
            // Base case: leaf node, depth is 1
            BinaryTreeNode {
                left: None, right: None, ..
            } => 1,
            // Recursive case: depth is 1 plus the maximum depth of the left and right subtree
            BinaryTreeNode { left, right, .. } =>
                1 + max(left.as_ref().map(|node| node.max_depth()).unwrap_or(0),
                        right.as_ref().map(|node| node.max_depth()).unwrap_or(0)
                )
        }
    }

    /// Inserts a new value into the binary tree, maintaining the tree's ordering
    fn insert(&mut self, value: T) {
        // Determine the appropriate child to insert the value into
        let child = if value < self.value {
            &mut self.left
        } else {
            &mut self.right
        };
        // If the child is None, create a new node with the given value and assign it as the child
        if let None = *child {
            *child = Some(Box::new(BinaryTreeNode {
                value,
                left: None,
                right: None,
            }));
        } else {
            // Otherwise, recursively call insert on the child node
            child.as_mut().map(|node| node.insert(value));
        }
    }
}

fn main() {
    // Create a new binary tree with a root node containing the value 5
    let mut tree = BinaryTreeNode {
        value: 5,
        left: None,
        right: None,
    };
    // Insert several values into the tree
    tree.insert(3);
    tree.insert(8);
    tree.insert(1);
    tree.insert(9);
    tree.insert(6);
    tree.insert(2);

    // Print the maximum depth of the tree
    println!("Maximum depth: {}", tree.max_depth());
}