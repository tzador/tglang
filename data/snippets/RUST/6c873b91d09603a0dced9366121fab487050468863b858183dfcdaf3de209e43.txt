// This code snippet finds the n-th Fibonacci number

fn fibonacci(n: i32) -> i32 {
    // Define an array to store previously calculated values
    let mut fib: [i32; 92] = [0; 92];

    // Handle base cases
    fib[0] = 0;
    fib[1] = 1;

    // Calculate Fibonacci number using a recursive function
    fn fib_helper(num: i32) -> i32 {
        if num <= 1 {
            return num;
        } else {
            // Check if Fibonacci number for given value has already been calculated
            if fib[num as usize] != 0 {
                return fib[num as usize];
            }

            // Calculate the Fibonacci number using the function and store in array
            let result = fib_helper(num - 1) + fib_helper(num - 2);
            fib[num as usize] = result;
            return result;
        }
    }

    // Call the recursive function and return the Fibonacci number for n
    return fib_helper(n);
}