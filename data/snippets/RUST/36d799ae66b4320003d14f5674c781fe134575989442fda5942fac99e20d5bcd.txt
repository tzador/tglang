/// Represents a binary tree data structure
enum BinaryTree<T> {
    Empty,
    Node {value: T, left: Box<BinaryTree<T>>, right: Box<BinaryTree<T>>}
}
 
/// Implementation of the insert method for the BinaryTree enum
impl<T: Ord> BinaryTree<T> {
    fn insert(&mut self, value: T) {
        match self {
            BinaryTree::Empty => {
                *self = BinaryTree::Node {
                    value,
                    left: Box::new(BinaryTree::Empty),
                    right: Box::new(BinaryTree::Empty),
                };
            }
            BinaryTree::Node { value: val, left, right } => {
                if value <= *val {
                    left.insert(value);
                } else {
                    right.insert(value);
                }
            }
        }
    }
}
 
fn main() {
    // create a new binary tree
    let mut tree = BinaryTree::Empty;
 
    // insert values into the tree
    tree.insert(5);
    tree.insert(3);
    tree.insert(8);
    tree.insert(1);
    tree.insert(9);
 
    // print the tree
    println!("{:?}", tree);
}