// This is a basic implementation of a binary search tree in Rust

// Define a node struct
struct Node<T> {
    value: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

// Implement the node struct
impl<T: Ord> Node<T> {
    
    // Function to insert a new value into the tree
    fn insert(&mut self, new_value: T) {

        // Check if the new value is less than the current node's value
        if new_value < self.value {

            // If there is an existing left child, recursively call insert on it
            match self.left {
                Some(ref mut left_child) => left_child.insert(new_value),
                // If there is no left child, create a new node and make it the left child
                None => self.left = Some(Box::new(Node {
                    value: new_value,
                    left: None,
                    right: None,
                })),
            }
        } 
        // If the new value is greater than the current node's value
        else if new_value > self.value {

            // If there is an existing right child, recursively call insert on it
            match self.right {
                Some(ref mut right_child) => right_child.insert(new_value),
                // If there is no right child, create a new node and make it the right child
                None => self.right = Some(Box::new(Node {
                    value: new_value,
                    left: None,
                    right: None,
                })),
            }
        }
    }
    
    // Function to search for a value in the tree
    fn search(&self, target: T) -> bool {

        // If the current node's value is equal to the target, return true
        if self.value == target {
            return true;
        } 
        // If the target is less than the current node's value, search the left subtree
        else if target < self.value {
            match &self.left {
                Some(left_child) => left_child.search(target),
                None => false,
            }
        } 
        // If the target is greater than the current node's value, search the right subtree
        else {
            match &self.right {
                Some(right_child) => right_child.search(target),
                None => false,
            }
        }
    }
}

fn main() {
    
    // Initialize a new binary search tree with the value 5 as the root
    let mut bst = Node { 
        value: 5, 
        left: None, 
        right: None,
    };

    // Insert more values into the tree
    bst.insert(3);
    bst.insert(7);
    bst.insert(1);
    bst.insert(9);

    // Search the tree for a specific value
    let target = 7;
    let found = bst.search(target);

    // Print the result
    println!("Value {} found in tree: {}", target, found);
}