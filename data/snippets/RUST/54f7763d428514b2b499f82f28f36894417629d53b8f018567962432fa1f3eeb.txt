use std::collections::HashMap; // import HashMap from standard library
use rand::{thread_rng, Rng}; // import random number generator from rand crate
use std::io; // import input/output library from std
use std::cmp::Ordering; // import Ordering enums from std

/// Function that takes in a vector of integers and returns a HashMap with the count of each number in the vector
pub fn count_numbers(numbers: &Vec<i32>) -> HashMap<i32, i32> {
    let mut counts = HashMap::new(); // create new HashMap to store counts
    for num in numbers { // iterate through vector
        let count = counts.entry(*num).or_insert(0); // use entry method to insert key if not present and initialize value to 0
        *count += 1; // increment count for number
    }
    counts // return HashMap
}

fn main() {
    println!("Welcome to the Number Guesser game!");

    // generate random number using thread_rng method
    let secret_num = thread_rng().gen_range(1, 101); // generate number between 1 and 100

    // initialize guess variable
    let mut guess = String::new();

    loop {
        // ask for user input
        println!("Please enter your guess:");

        // read input and store in guess variable
        io::stdin()
            .read_line(&mut guess)
            .expect("Failed to read line");

        // convert guess to integer
        let guess: i32 = match guess.trim().parse() {
            Ok(num) => num, // if input can be parsed as integer, assign to guess
            Err(_) => continue, // if not, continue loop
        };

        // compare guess to secret number
        match guess.cmp(&secret_num) {
            Ordering::Less => println!("Too small!"), // if guess is less than secret number, print message
            Ordering::Greater => println!("Too large!"), // if guess is greater than secret number, print message
            Ordering::Equal => { // if guess is equal to secret number, break loop and print success message
                println!("Congratulations! You guessed the secret number!");
                break;
            },
        }
    }
}