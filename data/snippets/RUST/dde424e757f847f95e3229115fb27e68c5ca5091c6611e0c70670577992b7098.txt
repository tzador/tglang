use std::collections::HashMap;

struct Node {
    key: String,
    value: i32,
}

impl Node {
    fn new(key: String, value: i32) -> Self {
        Node { key, value }
    }
}

pub struct MyHashMap {
    map: HashMap<String, Vec<Node>>,
}

impl MyHashMap {
    pub fn new() -> Self {
        MyHashMap {
            map: HashMap::new(),
        }
    }

    pub fn put(&mut self, key: String, value: i32) {
        let node = Node::new(key, value);
        if let Some(list) = self.map.get_mut(&node.key) {
            // finds the index of the current node in the list
            let index = list.iter().position(|&n| n.key == node.key);
            if let Some(i) = index {
                // replaces the current node with the new one
                *list.get_mut(i).unwrap() = node;
            } else {
                // if the key does not exist, add the new node to the list
                list.push(node);
            }
        } else {
            // if the key does not exist, add a new list with the new node
            self.map.insert(node.key.clone(), vec![node]);
        }
    }

    pub fn get(&self, key: String) -> Option<i32> {
        if let Some(list) = self.map.get(&key) {
            // loops through the list to find the node with the corresponding key
            for node in list {
                if node.key == key {
                    return Some(node.value); // returns the value of the node with the corresponding key
                }
            }
        }
        None // returns None if the key does not exist in the map
    }

    pub fn remove(&mut self, key: String) {
        if let Some(list) = self.map.get_mut(&key) {
            // removes the node with the corresponding key from the list
            list.retain(|&n| n.key != key);
        }
    }
}