// Define a struct called `Person` with fields for `name`, `age`, and `occupation`
struct Person {
    name: String,
    age: i32,
    occupation: String,
}

// Implement the `Display` trait for `Person`, allowing for custom output
impl Display for Person {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        // Use pattern matching to check if the person is over 50 years old
        match self.age {
            age if age > 50 => write!(f, "{} is a {}-year-old {}.", self.name, self.age, self.occupation),
            _ => write!(f, "{} is a young {}.", self.name, self.occupation),
        }
    }
}

// Create a vector of `Person` objects
let people = vec![
    Person {
        name: String::from("John"),
        age: 55,
        occupation: String::from("teacher"),
    },
    Person {
        name: String::from("Jane"),
        age: 30,
        occupation: String::from("doctor"),
    },
    Person {
        name: String::from("Bob"),
        age: 20,
        occupation: String::from("student"),
    },
];

// Use a for loop to iterate through the vector and display each person's information
for person in people {
    // Use the `Display` trait to print the person's information
    println!("{}", person);
}