/// A struct for creating a custom vector
struct CustomVector<T> {
    data: Box<[T]>,
    size: usize,
}

impl<T> CustomVector<T> {
    /// Function to initialize a new custom vector
    fn new() -> CustomVector<T> {
        CustomVector {
            data: vec![].into_boxed_slice(),
            size: 0,
        }
    }

    /// Function to check if the vector is empty
    fn is_empty(&self) -> bool {
        self.size == 0
    }

    /// Function to push an element onto the end of the vector
    fn push(&mut self, item: T) {
        // resize the data array if necessary
        if self.size == self.data.len() {
            let new_capacity = if self.size == 0 {
                1
            } else {
                self.size * 2
            };
            self.data = self.resize(new_capacity);
        }

        // add the item to the end of the vector
        self.data[self.size] = item;
        self.size += 1;
    }

    /// Function to resize the data array with a new capacity
    fn resize(&self, new_capacity: usize) -> Box<[T]> {
        // create a new data array with the new capacity
        let mut new_data = Vec::with_capacity(new_capacity).into_boxed_slice();

        // copy the elements from the old data array
        for i in 0..self.size {
            new_data[i] = self.data[i];
        }

        // return the new data array
        new_data
    }
}

/// Function to generate a custom vector with 10 elements
fn generate_custom_vector() -> CustomVector<u32> {
    let mut vector = CustomVector::new();

    // add 10 elements to the vector
    for i in 1..=10 {
        vector.push(i);
    }

    // return the custom vector
    vector
}

// create a new custom vector
let mut custom_vector = CustomVector::new();

// add 100 elements to the vector
for i in 1..=100 {
    custom_vector.push(i);
}

// check if the vector is empty
assert!(!custom_vector.is_empty());

// print the vector size
println!("Vector size: {}", custom_vector.size);

// generate a custom vector with 10 elements and print the size
let custom_vector_2 = generate_custom_vector();
println!("Vector size: {}", custom_vector_2.size);