fn main() {
    // Create a vector with initial capacity of 10
    let mut my_vec: Vec<u32> = Vec::with_capacity(10);

    // Push values into vector
    for i in 0..10 {
        my_vec.push(i);
    }

    // Create a function to print the vector
    fn print_vec(vec: &Vec<u32>) {
        for i in 0..vec.len() {
            println!("{}", vec[i]);
        }
    }

    // Call the function and print the vector
    print_vec(&my_vec);

    // Use a mutable iterator to modify the vector
    for i in my_vec.iter_mut() {
        *i = (*i * 2) + 1;
    }

    // Print the modified vector
    print_vec(&my_vec);

    // Create a struct with generic type
    struct Point<T> {
        x: T,
        y: T,
    }

    // Create an instance of the struct with integer type
    let my_point = Point { x: 5, y: 7 };

    // Print the values of the struct instance
    println!("X value: {}", my_point.x);
    println!("Y value: {}", my_point.y);
}