// This code snippet implements an optimized recursive merge sort algorithm in Rust.

// Function to merge two sorted subarrays
fn merge(arr: &mut [u32], left: &mut [u32], right: &mut [u32]) {
    // Initialize variables
    let (mut i, mut j, mut k) = (0, 0, 0);

    // Merge elements from left and right arrays into original array
    while i < left.len() && j < right.len() {
        // Compare elements and insert the smaller one in the original array
        if left[i] < right[j] {
            arr[k] = left[i];
            i += 1;
        } else {
            arr[k] = right[j];
            j += 1;
        }
        k += 1;
    }

    // Insert remaining elements from left array
    while i < left.len() {
        arr[k] = left[i];
        i += 1;
        k += 1;
    }

    // Insert remaining elements from right array
    while j < right.len() {
        arr[k] = right[j];
        j += 1;
        k += 1;
    }
}

// Function to perform merge sort recursively
fn merge_sort(arr: &mut [u32]) {
    // Check if array can be divided further
    if arr.len() > 1 {
        // Calculate middle index
        let mid = arr.len() / 2;

        // Create subarrays for left and right halves
        let mut left = &mut arr[..mid];
        let mut right = &mut arr[mid..];

        // Perform merge sort for left and right halves
        merge_sort(left);
        merge_sort(right);

        // Merge sorted subarrays into original array
        merge(arr, left, right);
    }
}

// Main function
fn main() {
    // Create an array of unsorted elements
    let mut arr: [u32; 10] = [5, 2, 3, 8, 6, 4, 9, 7, 1, 10];

    // Call merge sort function
    merge_sort(&mut arr);

    // Print sorted array
    println!("Sorted Array: {:?}", arr);
}