use std::collections::HashMap; //Imports the hashmap library from the standard library
use std::env; //Imports the environment library from the standard library

//Main function that takes in command-line arguments
fn main() {
    let args: Vec<String> = env::args().collect(); //Collects the command-line arguments into a vector of strings

    let mut word_count = HashMap::new(); //Initiates a new hashmap to store word counts

    for word in args[1..].iter() { //Loops through the command-line arguments, skipping the first argument (which is the name of the program)
        let count = word_count.entry(word).or_insert(0); //Checks if the word already exists in the hashmap, if it doesn't, inserts it with a count of 0
        *count += 1; //Increments the word count
    }

    let mut sorted_words: Vec<_> = word_count.into_iter().collect(); //Converts the hashmap into a vector of key-value pairs

    sorted_words.sort_by(|a, b| b.1.cmp(&a.1)); //Sorts the vector in descending order based on the word counts 

    for (word, count) in sorted_words.iter() { //Loops through the sorted vector and prints the word and its count
        println!("{}: {}", word, count);
    }
}