enum Shape {
    Circle(u32),
    Rectangle(u32, u32),
    Triangle(u32, u32, u32)
}

impl Shape {
    fn area(&self) -> f32 {
        match *self {
            Shape::Circle(radius) => std::f32::consts::PI * (radius as f32).powi(2),
            Shape::Rectangle(length, width) => (length as f32) * (width as f32),
            Shape::Triangle(side_a, side_b, side_c) => {
                let s = (side_a + side_b + side_c) as f32 / 2.0;
                (s * (s - side_a as f32) * (s - side_b as f32) * (s - side_c as f32)).sqrt()
            }
        }
    }
}

fn main() {
    let circle = Shape::Circle(5);
    let rectangle = Shape::Rectangle(10, 5);
    let triangle = Shape::Triangle(4, 5, 6);
    
    println!("Area of Circle: {}", circle.area());
    println!("Area of Rectangle: {}", rectangle.area());
    println!("Area of Triangle: {}", triangle.area());
}