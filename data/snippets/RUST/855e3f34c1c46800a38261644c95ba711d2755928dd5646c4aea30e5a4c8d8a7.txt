fn main() {
    // Initialize a vector with 10 random integers
    let mut nums: Vec<i32> = vec![0; 10];
    for num in nums.iter_mut() {
        *num = rand::random();
    }
    
    // Organize vector in ascending order using quicksort
    quicksort(&mut nums, 0, nums.len()-1);

    // Define a function for quicksort
    fn quicksort(nums: &mut Vec<i32>, start: usize, end: usize) {
        if start < end {
            // Find pivot point and partition vector
            let pivot = partition(nums, start, end);
           
            // Recursively sort left and right partitions
            quicksort(nums, start, pivot - 1);
            quicksort(nums, pivot + 1, end);
        }
    }

    // Define a function for partitioning the vector
    fn partition(nums: &mut Vec<i32>, start: usize, end: usize) -> usize {
        // Use last element as pivot
        let pivot = nums[end];

        // Initialize index for smaller element
        let mut i = start;

        // Loop through the vector
        for j in start..end {
            // If current element is smaller or equal to pivot
            if nums[j] <= pivot {
                // Swap current element with smaller element index
                nums.swap(i, j);
                // Increment smaller element index
                i += 1;
            }
        }
        // Swap pivot with smaller element's index to place it in correct position
        nums.swap(i, end);
        // Return index of pivot
        i
    }
    
    // Print sorted vector
    println!("{:?}", nums);
}