#![allow(dead_code)]
use std::collections::HashMap;

trait Graph<T> {
    fn insert(&mut self, node: T, edges: Vec<T>) -> bool;
    fn remove(&mut self, node: T) -> bool;
    fn get_neighbors(&self, node: T) -> Option<&Vec<T>>;
}

struct AdjacencyList<T> {
    list: HashMap<T, Vec<T>>,
}

impl<T> Graph<T> for AdjacencyList<T> {
    fn insert(&mut self, node: T, edges: Vec<T>) -> bool {
        self.list.insert(node, edges).is_none()
    }

    fn remove(&mut self, node: T) -> bool {
        self.list.remove(&node).is_some()
    }

    fn get_neighbors(&self, node: T) -> Option<&Vec<T>> {
        self.list.get(&node)
    }
}