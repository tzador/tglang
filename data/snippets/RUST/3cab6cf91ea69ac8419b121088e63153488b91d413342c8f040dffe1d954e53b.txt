/// This function takes in two vectors and returns the shortest distance between any two points within these vectors, using the Pythagorean theorem.
fn shortest_distance(a: &Vec<i32>, b: &Vec<i32>) -> Option<f32> {
    // Check if either vector is empty
    if a.is_empty() || b.is_empty() {
        return None;
    }

    // Initialize min_distance as maximum possible value
    let mut min_distance = f32::MAX;

    // Loop through all points in first vector
    for point_a in a.iter() {
        // Loop through all points in second vector
        for point_b in b.iter() {
            // Calculate the distance between points
            let distance = ((point_a - point_b).pow(2) as f32).sqrt();

            // Check if distance is shorter than current min_distance
            if distance < min_distance {
                min_distance = distance;
            }
        }
    }

    // Return the minimum distance if it exists
    if min_distance == f32::MAX {
        None
    } else {
        Some(min_distance)
    }
}