// Function to calculate the nth Fibonacci number using dynamic programming
fn fibonacci(n: u32) -> u32 {
    // Create a vector to store the calculated fibonacci numbers
    let mut fib_nums = vec![0, 1];
    
    // Use a for loop to calculate the fibonacci numbers up to the nth number
    for i in 2..=n as usize {
        // Use pattern matching to retrieve the last two fibonacci numbers
        let (prev, curr) = (fib_nums[i-2], fib_nums[i-1]);
        
        // Calculate the new fibonacci number and push it to the vector
        fib_nums.push(prev + curr);
    }
    
    // Return the nth fibonacci number
    fib_nums[n as usize]
}

// Main function to call the fibonacci function and print the result
fn main() {
    // Specify the value of n
    let n = 10;
    
    // Call the fibonacci function and store the result in a variable
    let result = fibonacci(n);
    
    // Print the result
    println!("The {}th Fibonacci number is: {}", n, result);
}