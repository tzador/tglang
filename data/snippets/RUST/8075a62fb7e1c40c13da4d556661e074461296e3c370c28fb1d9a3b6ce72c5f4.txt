// Implementation of Merge Sort in Rust

// function to merge two subarrays
fn merge<T: Ord>(arr: &mut [T], left_idx: usize, mid_idx: usize, right_idx: usize) {
    let left = &arr[left_idx..mid_idx + 1];
    let right = &arr[mid_idx + 1..right_idx + 1];

    let mut left_idx = 0;
    let mut right_idx = 0;
    let mut merged_idx = left_idx + right_idx;

    let mut merged = Vec::with_capacity(right_idx - left_idx + 1);

    // merging two subarrays until one is emptied
    while left_idx < left.len() && right_idx < right.len() {
        if left[left_idx] <= right[right_idx] {
            merged.push(left[left_idx]);
            left_idx += 1;
        } else {
            merged.push(right[right_idx]);
            right_idx += 1;
        }
        merged_idx += 1;
    }

    // adding remaining elements from left subarray
    while left_idx < left.len() {
        merged.push(left[left_idx]);
        left_idx += 1;
        merged_idx += 1;
    }

    // adding remaining elements from right subarray
    while right_idx < right.len() {
        merged.push(right[right_idx]);
        right_idx += 1;
        merged_idx += 1;
    }

    // copying sorted elements from merged vector to original array
    for i in 0..merged.len() {
        arr[left_idx + i] = merged[i];
    }
}

// function to perform Merge Sort recursively
fn merge_sort<T: Ord>(arr: &mut [T], left_idx: usize, right_idx: usize) {
    if left_idx >= right_idx {
        return; // base case
    }

    let mid_idx = (left_idx + right_idx) / 2;

    // recursively divide left and right subarrays
    merge_sort(arr, left_idx, mid_idx);
    merge_sort(arr, mid_idx + 1, right_idx);

    // merge the two subarrays
    merge(arr, left_idx, mid_idx, right_idx);
}

let mut arr = [5, 3, 8, 1, 9, 2, 7, 4];
merge_sort(&mut arr, 0, arr.len() - 1);

println!("Sorted array: {:?}", arr); // [1, 2, 3, 4, 5, 7, 8, 9]  Trusty-Rust