extern crate rand;
use std::sync::{Arc, Mutex};
use std::thread;
use std::time::Duration;
use rand::Rng;

fn main() {
    // create an Arc (atomically reference-counted) pointer
    let data = Arc::new(Mutex::new(vec![1, 2, 3, 4, 5]));

    // use a for loop to create 5 threads
    for thread_number in 0..5 {
        // create a clone of the Arc pointer for each thread
        let data_clone = data.clone();
        // spawn a thread
        thread::spawn(move || {
            // create a random number between 0 and 4
            let random_number = rand::thread_rng().gen_range(0..5);

            // lock the data mutex and retrieve the vector
            let mut vector = data_clone.lock().unwrap();

            // mutate the vector by changing the value at the randomly generated index
            vector[random_number] = thread_number;
            println!("Thread {} changed the value at index {} to {}", thread_number, random_number, thread_number);
        });
    }
    // wait for the threads to finish before printing the final vector
    thread::sleep(Duration::from_secs(1));
    println!("Final vector: {:?}", data.lock().unwrap());
}