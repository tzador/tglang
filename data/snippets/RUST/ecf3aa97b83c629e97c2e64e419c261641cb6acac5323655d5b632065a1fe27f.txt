// Declare a struct with two fields
struct User {
    name: String,
    age: u32,
}

// Implement a method for the struct
impl User {
    // A method to introduce the user
    fn introduce(&self) {
        println!("Hello, my name is {} and I am {} years old.", self.name, self.age);
    }
}

// Create an instance of the User struct
let user = User { name: "John".to_string(), age: 27 };

// Call the introduce method on the user instance
user.introduce();

// Define a generic function that takes in a vector of any type and returns the sum of all elements
fn sum_vector<T: std::ops::Add + std::clone::Clone>(vector: &Vec<T>) -> T {
    let mut sum = vector[0].clone();

    for element in vector {
        sum = sum + element.clone();
    }

    sum
}

// Create a vector and call the sum_vector function on it
let vec = vec![1, 2, 3, 4, 5];
let sum = sum_vector(&vec);
println!("The sum is: {}", sum);