use std::collections::HashMap; // import the HashMap data structure

/// Struct to represent a user with a name and age
struct User {
    name: String,
    age: u32,
}

impl User {
    /// Returns the name of the user
    fn get_name(&self) -> &str {
        &self.name
    }

    /// Returns the age of the user
    fn get_age(&self) -> u32 {
        self.age
    }

    /// Updates the age of the user
    fn update_age(&mut self, new_age: u32) {
        self.age = new_age;
    }
}

fn main() {
    let mut user_map = HashMap::new(); // create a new empty HashMap

    // add new users to the map
    user_map.insert("John".to_string(), User { name: "John".to_string(), age: 22 });
    user_map.insert("Emily".to_string(), User { name: "Emily".to_string(), age: 24 });
    user_map.insert("Jack".to_string(), User { name: "Jack".to_string(), age: 26 });
    
    // iterate through the users in the HashMap
    for (name, user) in user_map.iter() {
        println!("{} is {} years old.", name, user.get_age());
        user.update_age(user.get_age() + 1); // increment the age by one
        println!("Next year, {} will be {} years old.", name, user.get_age());
    }
}