/// A generic struct with two fields
struct GenericStruct<T, U> {
    field1: T,
    field2: U,
}

impl<T, U> GenericStruct<T, U> {
    /// A constructor function that takes two parameters
    fn new(field1: T, field2: U) -> Self {
        GenericStruct {
            field1,
            field2,
        }
    }

    /// A function that returns a tuple with the two fields
    fn get_fields(&self) -> (&T, &U) {
        (&self.field1, &self.field2)
    }

    /// A function that takes a closure as a parameter
    fn map<F, V>(self, map_func: F) -> GenericStruct<V, U>
    where
        F: FnOnce(T) -> V,
    {
        GenericStruct {
            field1: map_func(self.field1),
            field2: self.field2,
        }
    }
}

// An example of how to use the GenericStruct
fn main() {
    // Create a new instance of the struct with a String and usize
    let generic_struct = GenericStruct::new(String::from("Hello"), 5);

    // Use the `map` function to change the first field to a u32
    let new_struct = generic_struct.map(|s| s.len() as u32);

    // Get the fields as a tuple
    let (field1, field2) = new_struct.get_fields();

    // Print out the fields
    println!("Field 1: {}", field1);
    println!("Field 2: {}", field2);
}