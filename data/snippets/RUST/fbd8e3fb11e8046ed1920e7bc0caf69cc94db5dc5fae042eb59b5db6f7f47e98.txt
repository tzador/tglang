fn generate_prime_numbers(limit: u32) -> Vec<u32> {
    // initialize vector to store prime numbers
    let mut prime_numbers = Vec::new();
    // loop through numbers from 2 to limit
    for num in 2..limit {
        let is_prime = is_prime(num);
        // check if number is prime and add to vector
        if is_prime {
            prime_numbers.push(num);
        }
    }
    // return vector of prime numbers
    prime_numbers
}

// helper function to check if a number is prime
fn is_prime(n: u32) -> bool {
    // loop through numbers from 2 to square root of n
    for i in 2..(n as f64).sqrt() as u32 + 1 {
        // check if n is divisible by any number
        if n % i == 0 {
            return false;
        }
    }
    // n is only divisible by 1 and itself, so it is prime
    true
}

fn main() {
    let limit = 20;
    let prime_numbers = generate_prime_numbers(limit);
    // print the list of prime numbers
    println!("Prime numbers up to {}: {:?}", limit, prime_numbers);
}

// Output: