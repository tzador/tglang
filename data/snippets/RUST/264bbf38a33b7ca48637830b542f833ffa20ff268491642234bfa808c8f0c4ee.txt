// This is a function that implements a binary search tree data structure.
//
// Arguments:
// * `values` - a vector of values to insert into the tree
//
// Returns: a binary search tree
fn build_tree(values: Vec<i32>) -> Option<Box<Node>> {
    
    // Create an empty root node
    let mut root = None;

    // Loop through values and insert them into the tree
    for value in values {
        // Create a node and insert it into the tree
        let node = Some(Node {
            value: value,
            left: None,
            right: None,
        });
        
        // Call the insert function with the root and the new node
        root = insert_node(root, node);
    }

    // Return the tree with the inserted values
    root
}

// Helper function to recursively insert a node into the tree
fn insert_node(tree: Option<Box<Node>>, new_node: Option<Box<Node>>) -> Option<Box<Node>> {

    // If the tree is empty, return the new node as the root
    if tree.is_none() {
        return new_node;
    }
    
    // Convert the tree to a mutable reference
    let mut node = tree.unwrap();
    
    // Compare the value of the new node to the current node
    // If it is less, recursively insert into the left subtree
    if new_node.unwrap().value < node.value {
        node.left = insert_node(node.left, new_node);
    // If it is greater, recursively insert into the right subtree
    } else {
        node.right = insert_node(node.right, new_node);
    }
    
    // Return the mutated tree
    Some(node)
}

// This is the binary search tree node struct
struct Node {
    value: i32,
    left: Option<Box<Node>>,
    right: Option<Box<Node>>,
}