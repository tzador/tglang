struct BinaryTree<T> {
    root: Option<Box<Node<T>>>,
}

impl<T> BinaryTree<T> {

    // Function to insert a value into the binary tree
    fn insert(&mut self, value: T) {
        // Create a new node with the given value
        let mut new_node = Node::new(value);
        // Check if root is None, meaning the tree is empty
        if self.root.is_none() {
            // Make our new node the root of the tree
            self.root = Some(Box::new(new_node));
        } else {
            // Loop to find the appropriate place to insert the new value
            let mut current_node = &mut self.root;
            while let Some(node) = current_node {
                // Check if new value is smaller than current node's value
                if new_node.value < node.value {
                    // Check if there is a left child
                    if node.left.is_none() {
                        // If not, make new_node the left child
                        node.left = Some(Box::new(new_node));
                        // Exit the loop
                        break;
                    } else {
                        // If there is a left child, go to the left child
                        current_node = &mut node.left;
                    }
                // If new value is larger than current node's value
                } else {
                    // Check if there is a right child
                    if node.right.is_none() {
                        // If not, make new_node the right child
                        node.right = Some(Box::new(new_node));
                        // Exit the loop
                        break;
                    } else {
                        // If there is a right child, go to the right child
                        current_node = &mut node.right;
                    }
                }
            }
        }
    }

    // Function to search for a value in the binary tree
    fn search(&self, value: T) -> bool {
        // Check if root is None, meaning the tree is empty
        if self.root.is_none() {
            // Value is not in the tree
            return false;
        } else {
            // Start at the root of the tree
            let mut current_node = &self.root;
            // Loop until we find the value or we reach the end of the tree
            while let Some(node) = current_node {
                // If value is equal to current node's value, return true
                if value == node.value {
                    return true;
                }
                // If value is smaller than current node's value, go to the left child
                else if value < node.value {
                    current_node = &node.left;
                }
                // If value is larger than current node's value, go to the right child
                else {
                    current_node = &node.right;
                }
            }
            // If we reach the end of the tree and the value was not found, return false
            return false;
        }
    }
}

// Struct to represent a node in the binary tree
struct Node<T> {
    value: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

impl<T> Node<T> {
    // Function to create a new node with the given value
    fn new(value: T) -> Self {
        Self {
            value,
            left: None,
            right: None,
        }
    }
}

// Example usage

// Create a new binary tree
let mut tree = BinaryTree::<i32>::new();

// Insert values into the tree
tree.insert(5);
tree.insert(10);
tree.insert(3);
tree.insert(15);

// Search for a value in the tree
let result = tree.search(10);

// Print the result
println!("Result: {}", result);