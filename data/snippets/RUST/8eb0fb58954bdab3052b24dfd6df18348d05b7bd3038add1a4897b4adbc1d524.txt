use std::collections::{HashMap, LinkedList};

// Define a struct named Person with two fields, name and age
struct Person {
    name: String,
    age: u8,
}

// Implement the `Display` trait for the Person struct
impl Display for Person {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        write!(f, "{} is {} years old", self.name, self.age)
    }
}

// Define a main function to create a HashMap of people
fn main() {
    // Create a new HashMap that stores strings as keys and Person structs as values
    let mut people: HashMap<String, Person> = HashMap::new();

    // Create two Person instances and add them to the HashMap
    let alice = Person {
        name: String::from("Alice"),
        age: 24,
    };
    let bob = Person {
        name: String::from("Bob"),
        age: 31,
    };
    people.insert(String::from("Alice"), alice);
    people.insert(String::from("Bob"), bob);

    // Print out the names and ages of all people in the HashMap
    for (name, person) in &people {
        println!("{} is {} years old", name, person);
    }
}