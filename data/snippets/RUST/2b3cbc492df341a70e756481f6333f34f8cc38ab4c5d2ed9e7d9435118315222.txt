use std::collections::HashMap;

fn main() {
    // Create a new HashMap with key type String and value type i32
    let mut scores: HashMap<String, i32> = HashMap::new();

    // Insert some key-value pairs into the HashMap
    scores.insert(String::from("Alice"), 98);
    scores.insert(String::from("Bob"), 85);
    scores.insert(String::from("Charlie"), 72);
    scores.insert(String::from("Dave"), 90);

    // Print the HashMap
    println!("{:?}", scores);

    // Loop through the HashMap and print out each key-value pair
    for (key, value) in &scores {
        println!("{} => {}", key, value);
    }

    // Check if the HashMap contains a specific key
    let contains_alice = scores.contains_key("Alice");

    // Print the result
    println!("Does scores contain key: {}", contains_alice);

    // Check if the HashMap is empty
    let is_empty = scores.is_empty();

    // Print the result
    println!("Is scores empty: {}", is_empty);

    // Remove a key-value pair from the HashMap and get the value back
    let removed_value = scores.remove("Bob");

    // Print the removed value
    println!("Removed value: {:?}", removed_value);

    // Update a value in the HashMap
    scores.insert(String::from("Charlie"), 95);

    // Print the updated HashMap
    println!("{:?}", scores);

    // Get the value associated with a specific key and print it out
    let dave_score = scores.get("Dave");
    println!("Dave's score: {:?}", dave_score);
}