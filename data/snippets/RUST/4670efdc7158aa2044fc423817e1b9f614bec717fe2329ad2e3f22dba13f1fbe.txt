// This code snippet uses the Rust programming language to implement a text-based game using structs, enums, and functions

// Defining the struct for a player
struct Player {
    name: String,
    health: u32,
    inventory: Vec<String>,
}

// Defining the enum for different items
enum Item {
    Weapon { name: String, damage: u32 },
    Consumable { name: String, healing: u32 },
    Key(String),
}

// Function to add an item to a player's inventory
fn add_item(player: &mut Player, item: Item) {
    match item {
        Item::Weapon { name, damage } => {
            player.inventory.push(name);
            player.inventory.push(damage.to_string());
        }
        Item::Consumable { name, healing } => {
            player.inventory.push(name);
            player.inventory.push(healing.to_string());
        }
        Item::Key(key) => {
            player.inventory.push(key);
            player.inventory.push("1".to_string());
        }
    };
}

// Function to use an item from a player's inventory
fn use_item(player: &mut Player, item_name: &str) {
    for (i, item) in player.inventory.iter().enumerate() {
        if item == item_name {
            match item {
                Item::Consumable { name, healing } => {
                    player.health += healing;
                    player.inventory.remove(i); // Remove the item from the inventory after use
                }
                Item::Key(_) => println!("This item cannot be used directly."),
                Item::Weapon { .. } => println!("This item must be equipped to be used."),
            }
            return;
        }
    }
    println!("Item not found.");
}

// Function to equip a weapon from a player's inventory
fn equip_weapon(player: &mut Player, weapon_name: &str) {
    for (i, item) in player.inventory.iter().enumerate() {
        if let Item::Weapon { name, damage } = item {
            if name == weapon_name {
                // Set the player's attack to the weapon's damage
                player.health += damage;
                // Remove the weapon from the inventory
                player.inventory.remove(i);
                // Add the weapon back to the inventory as an equipped item
                player.inventory.push(format!("Equipped {}", name));
                return;
            }
        }
    }
    println!("Weapon not found.");
}

// Initializing a player and adding items to their inventory
let mut player = Player {
    name: "John".to_string(),
    health: 100,
    inventory: vec![],
};

// Add some items to the player's inventory
add_item(
    &mut player,
    Item::Weapon {
        name: "Sword".to_string(),
        damage: 10,
    },
);
add_item(
    &mut player,
    Item::Consumable {
        name: "Potion".to_string(),
        healing: 20,
    },
);
add_item(
    &mut player,
    Item::Key("Chest Key".to_string()),
);

// Use the potion from the player's inventory
use_item(&mut player, "Potion");

// Equip the sword from the player's inventory
equip_weapon(&mut player, "Sword");