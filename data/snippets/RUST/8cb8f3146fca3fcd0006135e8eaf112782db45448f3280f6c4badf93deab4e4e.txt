use std::convert::From;
use std::error::Error;

// A custom error type for a calculator program
#[derive(Debug)]
enum CalculatorError {
    // Error for division by zero
    DivisionByZero,
    // Error for incorrect input
    IncorrectInput
}

// Implement the Error trait for our custom error type
impl Error for CalculatorError {}

// Implement the Display trait for our custom error type
impl std::fmt::Display for CalculatorError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            CalculatorError::DivisionByZero => write!(f, "Error: Division by zero"),
            CalculatorError::IncorrectInput => write!(f, "Error: Incorrect input")
        }
    }
}

// A simple calculator function that takes in two numbers and an operator
// and returns the calculated value or an error
fn calculate(num1: i32, num2: i32, operator: &str) -> Result<i32, CalculatorError> {
    match operator {
        "+" => Ok(num1 + num2),
        "-" => Ok(num1 - num2),
        "*" => Ok(num1 * num2),
        "/" => {
            // Check for division by zero error
            if num2 == 0 {
                Err(CalculatorError::DivisionByZero)
            } else {
                Ok(num1 / num2)
            }
        },
        // Return an error for an incorrect operator
        _ => Err(CalculatorError::IncorrectInput)
    }
}

fn main() {
    // Use the calculate function and handle any potential errors
    match calculate(10, 5, "+") {
        Ok(result) => println!("Result: {}", result),
        Err(e) => println!("Error: {}", e)
    }

    match calculate(10, 0, "/") {
        Ok(result) => println!("Result: {}", result),
        Err(e) => println!("Error: {}", e)
    }

    match calculate(10, 5, "=") {
        Ok(result) => println!("Result: {}", result),
        Err(e) => println!("Error: {}", e)
    }
}