#![allow(unused)]
use std::io;
use rand::Rng;
// Define the Color enum
enum Color {
    Red,
    Blue,
    Green,
}
// Define the Shapes trait
trait Shapes {
    fn calculate_area(&self) -> f64;
    fn calculate_perimeter(&self) -> f64;
    fn render(&self) -> String;
}
// Define the Circle struct
struct Circle {
    radius: f64,
    color: Color,
}
// Implement the Shapes trait for the Circle struct
impl Shapes for Circle {
    fn calculate_area(&self) -> f64 {
        std::f64::consts::PI * self.radius.powi(2)
    }
    fn calculate_perimeter(&self) -> f64 {
        2.0 * std::f64::consts::PI * self.radius
    }
    fn render(&self) -> String {
        format!("A {} circle with radius {} units.", self.color, self.radius)
    }
}
// Main function
fn main() {
    // Get user input for circle radius
    let mut input = String::new();
    println!("Enter the radius of the circle:");
    io::stdin().read_line(&mut input).expect("Failed to read input.");
    let radius: f64 = input.trim().parse().expect("Invalid input.");
    // Generate a random integer for color assignment
    let color_num = rand::thread_rng().gen_range(0, 3);
    // Determine the color based on the random number
    let color = match color_num {
        0 => Color::Red,
        1 => Color::Blue,
        2 => Color::Green,
        _ => unreachable!(),
    };
    // Create a new Circle instance with the user-provided radius and random color
    let circle = Circle {
        radius: radius,
        color: color,
    };
    // Print out the calculations and the rendered shape
    println!(
        "The area of the circle is {} units squared.",
        circle.calculate_area()
    );
    println!(
        "The perimeter of the circle is {} units.",
        circle.calculate_perimeter()
    );
    println!("{}", circle.render());
}