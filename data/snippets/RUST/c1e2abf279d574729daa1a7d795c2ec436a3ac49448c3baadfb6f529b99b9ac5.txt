struct Node<T> {
    value: T,
    next: Option<Box<Node<T>>>,
}

impl<T> Node<T> {
    /// Returns a new Node with the given value
    pub fn new(value: T) -> Self {
        Self {
            value,
            next: None,
        }
    }

    /// Sets the next value of the Node to the given Node
    pub fn set_next(&mut self, next: Node<T>) {
        self.next = Some(Box::new(next));
    }

    /// Gets the value stored in the Node
    pub fn get_value(&self) -> &T {
        &self.value
    }

    /// Gets the next Node, if it exists
    pub fn get_next(&self) -> Option<&Node<T>> {
        self.next.as_deref()
    }
}

impl<T> Default for Node<T> {
    /// Creates a new Node with a default value of T
    fn default() -> Self {
        Self {
            value: T::default(),
            next: None,
        }
    }
}

fn main() {
    // Create a new Node with value "Hello"
    let mut node = Node::new("Hello");

    // Create a new Node with value "World"
    let next_node = Node::new("World");

    // Set the next value of the first Node to the second Node
    node.set_next(next_node);

    // Get the value stored in the first Node
    let value = node.get_value();

    // Print the value to the console
    println!("{}", value);

    // Get the next Node
    let next_node = node.get_next();

    // If the next Node exists, print its value to the console
    if let Some(next_value) = next_node {
        println!("{}", next_value.get_value());
    }
}