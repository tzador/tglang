/// The `search` function takes in a vector of integers and
/// searches for a specific number within it.
/// It returns the index of the number if found, or
/// `None` if the number is not present.
///
/// # Arguments
///
/// * `list` - The vector of integers to be searched within.
/// * `target` - The number to search for.
///
/// # Examples
///
/// let list = vec![1, 2, 3, 4, 5];
/// let target = 3;
/// let result = search(list, target);
/// assert_eq!(result, Some(2));
fn search(list: Vec<i32>, target: i32) -> Option<usize> {
    let mut left = 0;
    let mut right = list.len() - 1;
    // Use a simple binary search algorithm
    while left <= right {
        let mid = (left + right) / 2;
        if list[mid] == target {
            return Some(mid);
        } else if list[mid] < target {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    None
}