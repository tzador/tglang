/// A struct representing a Graph data structure
pub struct Graph<T> {
    /// An array containing the vertices in the graph
    vertices: Vec<Vertex<T>>,
    /// An adjacency matrix containing the connections between vertices
    edges: Vec<Vec<bool>>,
}

impl<T> Graph<T> {
    /// Inserts a new vertex into the graph
    pub fn insert_vertex(&mut self, value: T) {
        self.vertices.push(Vertex::new(value));
        self.edges
            .iter_mut()
            .for_each(|row| row.push(false));
        self.edges.push(vec![false; self.vertices.len()]);
    }

    /// Inserts a new edge between two vertices in the graph
    pub fn insert_edge(&mut self, from: usize, to: usize) {
        self.edges[from][to] = true;
        self.edges[to][from] = true;
    }

    /// Removes an existing vertex from the graph
    pub fn remove_vertex(&mut self, index: usize) {
        self.vertices.remove(index);

        for row in &mut self.edges {
            row.remove(index);
        }

        self.edges.remove(index);
    }

    /// Removes an existing edge between two vertices in the graph
    pub fn remove_edge(&mut self, from: usize, to: usize) {
        self.edges[from][to] = false;
        self.edges[to][from] = false;
    }

    /// Returns a reference to a vertex in the graph
    pub fn get_vertex(&self, index: usize) -> &Vertex<T> {
        &self.vertices[index]
    }
}

/// A struct representing a Vertex in a graph
struct Vertex<T> {
    /// The value contained in the vertex
    value: T,
}

impl<T> Vertex<T> {
    /// Creates a new Vertex with the given value
    pub fn new(value: T) -> Self {
        Self { value }
    }
}