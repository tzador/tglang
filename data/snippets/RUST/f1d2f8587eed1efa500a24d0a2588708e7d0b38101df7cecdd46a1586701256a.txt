struct Node<T> { // define a struct with a type parameter T
    value: T, // add a field value of type T
    left: Option<Box<Node<T>>>, // add a field left that is an Option type of Box of Node containing type T
    right: Option<Box<Node<T>>>, // add a field right that is an Option type of Box of Node containing type T
}

impl<T> Node<T> { // create an implementation block for the Node struct
    fn new(val: T) -> Self { // define a new function with the value of type T as input parameter and returning Self (i.e. Node<T>)
        Node { // create a new instance of the Node struct
            value: val,
            left: None,
            right: None,
        }
    }

    fn insert(&mut self, val: T) { // define an insert function that takes in a mutable reference to self and a value of type T as input parameters
        if self.value > val { // if the value of self is greater than the input value
            match &mut self.left { // match the left Option field of self
                Some(node) => node.insert(val), // if it is Some, call the insert function recursively on that node
                None => self.left = Some(Box::new(Node::new(val))), // if it is None, create a new node with the input value and assign it to the left field
            }
        } else if self.value < val { // if the value of self is less than the input value
            match &mut self.right { // match the right Option field of self
                Some(node) => node.insert(val), // if it is Some, call the insert function recursively on that node
                None => self.right = Some(Box::new(Node::new(val))), // if it is None, create a new node with the input value and assign it to the right field
            }
        }
    }
}

fn main() { // define the main function
    let mut root = Node::new(50); // create a new node with a value of 50 and assign it to the root variable
    root.insert(30); // insert a new node with a value of 30 into the tree
    root.insert(20); // insert a new node with a value of 20 into the tree
    root.insert(40); // insert a new node with a value of 40 into the tree
    root.insert(70); // insert a new node with a value of 70 into the tree
    root.insert(60); // insert a new node with a value of 60 into the tree
    root.insert(80); // insert a new node with a value of 80 into the tree
    println!("{:?}", root); // print out the tree using the debug trait to show the structure of the nodes and their values
}