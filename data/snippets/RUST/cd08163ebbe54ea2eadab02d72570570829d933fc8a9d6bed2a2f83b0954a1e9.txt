/// Struct for creating a binary tree
struct BinaryTree<T> {
    root: Option<Box<Node<T>>>,
}

/// Node struct
struct Node<T> {
    data: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

/// Function to insert a value into binary tree
fn insert<T: Ord>(&mut self, value: T) {
    let new_node = Box::new(Node {
        data: value,
        left: None,
        right: None,
    });

    match self.root {
        Some(ref mut node) => {
            if value <= node.data {
                if node.left.is_none() {
                    node.left = Some(new_node);
                } else {
                    node.left.as_mut().unwrap().insert(value);
                }
            } else {
                if node.right.is_none() {
                    node.right = Some(new_node);
                } else {
                    node.right.as_mut().unwrap().insert(value);
                }
            }
        }
        None => {
            self.root = Some(new_node);
        }
    }
}