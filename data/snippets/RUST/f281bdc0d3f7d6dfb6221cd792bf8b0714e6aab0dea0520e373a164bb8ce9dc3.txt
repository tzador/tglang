/// This function creates a recursive fibonacci sequence
/// with an n parameter representing the number of iterations
fn fibonacci(n: i32) -> i32 {
    /// This is the base case where n is equal to 0
    if n == 0 {
        return 0;
    /// This is the base case where n is equal to 1
    } else if n == 1 {
        return 1;
    }
    /// This creates a mutable variable to hold the previous two values in the sequence
    let mut prev = (0, 1);
    /// This loops through n iterations to calculate the next fibonacci number
    for _ in 2..=n {
        /// This calculates the next number in the sequence by adding the two previous numbers
        let next = prev.0 + prev.1;
        /// This updates the previous two values by swapping them with the current value
        prev = (prev.1, next);
    }
    /// The final value in the sequence will be the last value in the tuple, which is returned
    prev.1
}