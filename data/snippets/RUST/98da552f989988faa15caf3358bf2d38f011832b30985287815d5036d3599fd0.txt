// Example of a function that takes in a generic type T and returns an Option<T> type
// and panics if the input is smaller than 0.
fn generate_option<T>(x: T) -> Option<T> {
    if x < 0 {
        panic!("Input must be a positive number.");
    }
    Some(x)
}

// Example of a struct with a generic type T and a method that takes in a generic type U
struct Example<T> {
    value: T,
}

impl<T> Example<T> {
    fn convert<U>(&self, other: U) -> (T, U) {
        (self.value, other)
    }
}

// Example of calling the functions and methods
fn main() {
    let num = 10;
    let option = generate_option(num);
    println!("The generated option is {:?}", option);
    let example = Example { value: num };
    let tuple = example.convert("Hello");
}