// Implementation of the Mergesort algorithm in Rust

// Function to merge two sorted arrays into one sorted array
fn merge(mut left: Vec<i32>, mut right: Vec<i32>) -> Vec<i32> {
    let size1 = left.len();
    let size2 = right.len();

    // Create an auxiliary array to store the sorted elements
    let mut sorted = vec![0; size1 + size2];

    // Pointers to traverse the arrays
    let mut pointer1 = 0;
    let mut pointer2 = 0;
    let mut sorted_pointer = 0;

    // Loop until one of the arrays is fully traversed
    while pointer1 < size1 && pointer2 < size2 {
        // Compare the elements at the current pointers
        // and store the smaller element in the auxiliary array
        if left[pointer1] < right[pointer2] {
            sorted[sorted_pointer] = left[pointer1];
            pointer1 += 1;
        } else {
            sorted[sorted_pointer] = right[pointer2];
            pointer2 += 1;
        }
        sorted_pointer += 1;
    }

    // If there are still elements remaining in the left array,
    // append them to the auxiliary array
    while pointer1 < size1 {
        sorted[sorted_pointer] = left[pointer1];
        sorted_pointer += 1;
        pointer1 += 1;
    }

    // If there are still elements remaining in the right array,
    // append them to the auxiliary array
    while pointer2 < size2 {
        sorted[sorted_pointer] = right[pointer2];
        sorted_pointer += 1;
        pointer2 += 1;
    }

    // Return the sorted array
    sorted
}

// Function to implement the mergesort algorithm
fn mergesort(mut array: Vec<i32>) -> Vec<i32> {
    let size = array.len();

    // Base case: if the array has only one element,
    // return the array as it is
    if size == 1 {
        return array;
    }

    // Find the middle index of the array
    let mid = size / 2;

    // Split the array into two subarrays from the middle index
    let left = mergesort(array[..mid].to_vec());
    let right = mergesort(array[mid..].to_vec());

    // Merge the sorted subarrays into one sorted array
    merge(left, right)
}

// Test the mergesort algorithm with an example array
fn main() {
    let array = vec![9, 3, 6, 1, 8, 2, 5, 4, 7];
    let sorted = mergesort(array);
    println!("{:?}", sorted); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]
}