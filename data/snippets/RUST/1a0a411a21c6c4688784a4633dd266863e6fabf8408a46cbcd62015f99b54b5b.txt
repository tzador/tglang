#![allow(unused_variables)]
#![allow(dead_code)]

// Define a function that converts a string to uppercase
fn string_to_uppercase(s: &str) -> String {
    let mut result = String::new();
    
    // Loop through each character in the string and convert it to uppercase
    for c in s.chars() {
        result.push(c.to_ascii_uppercase());
    }
    
    // Return the resulting uppercase string
    result
}

// Define a struct for a person with name, age, and profession
struct Person {
    name: String,
    age: u8,
    profession: String,
}

// Define an enum for different types of animals
enum Animal {
    Dog,
    Cat,
    Bird,
    Fish,
}

impl Animal {
    // Define a method that returns a string describing the animal's sound
    fn make_sound(&self) -> String {
        match self {
            Animal::Dog => String::from("Woof!"),
            Animal::Cat => String::from("Meow!"),
            Animal::Bird => String::from("Tweet!"),
            Animal::Fish => String::from("Blub!"),
        }
    }
}

// Create an instance of Person with name, age, and profession
let person = Person {
    name: String::from("John"),
    age: 35,
    profession: String::from("Developer"),
};

// Print the person's name, age, and profession
println!("Name: {}\nAge: {}\nProfession: {}", person.name, person.age, person.profession);

// Create a vector of Animals
let animals = vec![
    Animal::Dog,
    Animal::Cat,
    Animal::Bird,
    Animal::Fish,
];

// Loop through the vector and make each animal's sound
for animal in animals {
    println!("{}", animal.make_sound());
}

// Call the string_to_uppercase function and print the result
println!("{}", string_to_uppercase("hello world"));