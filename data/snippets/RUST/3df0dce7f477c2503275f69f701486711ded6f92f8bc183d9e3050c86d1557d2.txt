fn main() {
    let mut vec = Vec::new(); // create new mutable vector
    // populate vector with values 1-10
    for i in 1..=10 {
        vec.push(i);
    }
    // filter out odd values from vector
    let even_vec = vec.into_iter().filter(|x| x % 2 == 0).collect::<Vec<i32>>();

    assert_eq!(even_vec, [2, 4, 6, 8, 10]); // assert that vector only contains even values
    // map each value in vector to its square
    let squared_vec = even_vec.into_iter().map(|x| x * x).collect::<Vec<i32>>();

    assert_eq!(squared_vec, [4, 16, 36, 64, 100]); // assert that vector contains squared values
    // sum all values in vector
    let sum = squared_vec.into_iter().fold(0, |acc, x| acc + x);

    assert_eq!(sum, 220); // assert that sum is correct
    println!("The sum of the squared even numbers from 1 to 10 is {}", sum);
}