// Declare a struct that represents a car
struct Car {
    model: String,
    brand: String,
    year: u32,
    color: String,
    price: f64,
    mileage: u64,
}

// Implement a function to calculate the value of the car
fn calculate_car_value(car: Car) -> f64 {
    if car.year < 2015 {
        // If the car is older than 2015, reduce its value by 10%
        let old_car_discount = car.price * 0.1;
        return car.price - old_car_discount;
    } else if car.mileage > 100000 {
        // If the car has more than 100,000 miles, reduce its value by 5%
        let high_mileage_discount = car.price * 0.05;
        return car.price - high_mileage_discount;
    } else {
        // Otherwise, return the original car value
        return car.price;
    }
}

// Create an instance of the Car struct
let my_car = Car {
    model: String::from("Civic"),
    brand: String::from("Honda"),
    year: 2010,
    color: String::from("Blue"),
    price: 10000.00,
    mileage: 80000,
};

// Call the calculate_car_value function on our car instance
let car_value = calculate_car_value(my_car);

// Print the value of our car
println!("The value of my car is ${}", car_value);