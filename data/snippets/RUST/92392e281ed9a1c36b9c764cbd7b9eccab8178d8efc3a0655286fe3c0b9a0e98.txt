use std::io;
use std::thread;

// Create a struct named `Counter`
struct Counter {
    count: usize,
}

// Implement methods for `Counter`
impl Counter {
    // A method to increment the counter
    fn increment(&mut self) {
        self.count += 1;
    }

    // A method to decrement the counter
    fn decrement(&mut self) {
        self.count -= 1;
    }

    // A method to print the current count
    fn print_count(&self) {
        println!("Current count: {}", self.count);
    }
}

// Main function
fn main() {
    // Create a new `Counter` instance
    let mut counter = Counter { count: 0 };

    // Spawn two threads
    let thread1 = thread::spawn(move || {
        // Increment the counter 10 times
        for _ in 0..10 {
            counter.increment();
        }
    });
    let thread2 = thread::spawn(move || {
        // Decrement the counter 10 times
        for _ in 0..10 {
            counter.decrement();
        }
    });

    // Wait for both threads to complete
    thread1.join().unwrap();
    thread2.join().unwrap();

    // Print the final count
    counter.print_count();
}