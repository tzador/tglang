/// Defines a struct for holding employee information
struct Employee {
    name: String, // employee's name as a String
    age: u32, // employee's age as an unsigned 32-bit integer
    job: String, // employee's job title as a String
}

// Defines an implementation block for the struct
impl Employee {
    // Defines a function to calculate the employee's salary based on their age and job title
    fn calculate_salary(&self) -> u32 {
        // Sets base salary based on job title
        let mut base_salary = 50000;
        
        // Determines the percentage increase based on age
        if self.age < 25 {
            base_salary += base_salary * 5 / 100; // 5% increase for employees under 25
        } else if self.age >= 25 && self.age < 30 {
            base_salary += base_salary * 10 / 100; // 10% increase for employees aged 25-29
        } else {
            base_salary += base_salary * 15 / 100; // 15% increase for employees 30 and over
        }
        
        // Returns the calculated salary
        return base_salary;
    }
}

// Creates an instance of the Employee struct
let employee = Employee {
    name: String::from("John Smith"),
    age: 27,
    job: String::from("Software Engineer")
};

// Calls the calculate_salary function on the employee instance
let salary = employee.calculate_salary();

// Prints the employee's name and calculated salary
println!("{}'s salary is {}", employee.name, salary);