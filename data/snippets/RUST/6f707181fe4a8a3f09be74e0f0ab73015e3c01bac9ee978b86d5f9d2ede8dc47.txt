/*
This snippet uses dynamic programming 
to find the longest common subsequence 
between two strings.
*/

// Function to find the longest common subsequence between two strings
// Takes in two string parameters
// Returns the length of the longest common subsequence as an integer
fn longest_common_subsequence(str1: &str, str2: &str) -> usize {

    // Initialize a matrix to store the length of the longest common subsequence for each subproblem
    let mut dp_matrix = vec![vec![0; str2.len() + 1]; str1.len() + 1];

    // Loop through each character in the first string
    for i in 1..=str1.len() {

        // Loop through each character in the second string
        for j in 1..=str2.len() {

            // If the current characters in both strings match
            if str1.chars().nth(i-1).unwrap() == str2.chars().nth(j-1).unwrap() {

                // Add 1 to the length of the longest common subsequence for the current subproblem
                dp_matrix[i][j] = dp_matrix[i-1][j-1] + 1;
            }

            // If the current characters do not match
            else {

                // Take the maximum of the length of the longest common subsequence from the previous subproblems
                dp_matrix[i][j] = usize::max(dp_matrix[i][j-1], dp_matrix[i-1][j]);
            }
        }
    }

    // Return the length of the longest common subsequence for the entire problem
    dp_matrix[str1.len()][str2.len()]
}

// Test cases
fn main() {

    // Create two strings to test the function with
    let str1 = "abcde";
    let str2 = "ace";

    // Print the result of the function call
    println!("The length of the longest common subsequence between '{}' and '{}' is: {}", str1, str2, longest_common_subsequence(str1, str2));
}