fn main() {

    let regions = vec!["Europe", "Asia", "America"]; //create a vector called regions with the specified strings
    for region in regions.iter() { //iterate through the vector
        println!("The current region is: {}", region); //print the current region
    }
    let mut num: i32 = 0; //declare and initialize a mutable variable of type i32
    while num < 10 { //while loop to execute code while num is less than 10
        if num % 2 == 0 { //if statement to check if num is even
            println!("{} is an even number", num); //print the statement
        } else {
            println!("{} is an odd number", num); //else statement to print if num is odd
        }
        num += 1; //increment num by 1
    }

    let mut counter = 0; //declare and initialize a mutable counter variable
    loop { //infinite loop
        counter += 1; //increment counter by 1
        if counter == 5 { //if statement to check if counter is equal to 5
            continue; //skip the rest of the code in this iteration
        }
        println!("Counter is at: {}", counter); //print the current value of counter
        if counter == 10 { //if statement to check if counter is equal to 10
            break; //exit the loop
        }
    }

    let array = [10, 20, 30, 40]; //create an array with specified values
    println!("The length of the array is: {}", array.len()); //print the length of the array

    let num_list = vec![1, 2, 3, 4, 5]; //create a vector called num_list with the specified integers
    let doub_nums: Vec<_> = num_list.iter() //create a new vector by iterating through num_list
        .map(|x| x * 2) //multiply each element by 2
        .collect(); //collect the results into a new vector
    println!("The doubled numbers are: {:?}", doub_nums); //print the new vector

    let num = 5; //declare and initialize a variable
    match num { //match statement to check the value of num
        1 => println!("One"), //if num is 1, print "One"
        2 => println!("Two"), //if num is 2, print "Two"
        _ => println!("Not One or Two"), //for all other values, print "Not One or Two"
    }

    let mut x = 5; //declare and initialize a mutable variable
    match x { //match statement to check the value of x
        ref mut m if m == &10 => { //if x is equal to 10, assign it to m and enter the following block
            println!("Ten"); //print "Ten"
        },
        5 => println!("Five"), //if x is 5, print "Five"
        _ => println!("Not Five or Ten"), //for all other values, print "Not Five or Ten"
    }
} //end of main function