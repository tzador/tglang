use std::collections::HashMap;

// A struct representing a person
struct Person {
    name: String,
    age: u32,
    occupation: String,
}

// An enum representing different types of occupations
enum OccupationType {
    Student(String),
    Professional,
    Retired(String, u32),
}

// A function that creates a new person with given name, age, and occupation
fn create_person(name: String, age: u32, occupation: OccupationType) -> Person {
    Person {
        name,
        age,
        occupation: match occupation {
            OccupationType::Student(school) => school,
            OccupationType::Professional => String::from("Professional"),
            OccupationType::Retired(reason, years) => format!("Retired due to {} for {} years",reason, years),
        },
    }
}

// A main function demonstrating the use of the create_person function
fn main() {
    // Create a new person with a student occupation
    let sam = create_person(String::from("Sam"), 21, OccupationType::Student(String::from("College")));

    // Create a new person with a professional occupation 
    let jane = create_person(String::from("Jane"), 35, OccupationType::Professional);

    // Create a new person who is retired
    let john = create_person(String::from("John"), 65, OccupationType::Retired(String::from("Illness"), 3));

    // Create a hashmap to store each person's name and age
    let mut person_info = HashMap::new();

    // Add each person's name and age to the hashmap
    person_info.insert(&sam.name, &sam.age);
    person_info.insert(&jane.name, &jane.age);
    person_info.insert(&john.name, &john.age);

    // Print the hashmap contents
    println!("{:?}", person_info);
}