#![feature(proc_macro_hygiene, decl_macro)]

use rocket::{get, routes};
use rocket_contrib::json::Json;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

// Define a struct for the JSON request body
#[derive(Serialize, Deserialize)]
struct RequestBody {
    name: String,
    age: i32,
    hobbies: Vec<String>,
    info: HashMap<String, String>
}

// Define a handler function for the API endpoint
#[get("/hello_world")]
fn hello_world() -> Json<RequestBody> {
    // Create some dummy data to return in JSON format
    let hobbies = vec!["coding", "reading", "hiking"];
    let mut info = HashMap::new();
    info.insert("favorite_color".to_string(), "blue".to_string());
    info.insert("favorite_food".to_string(), "pizza".to_string());

    // Create a RequestBody struct instance to return
    let request_body = RequestBody {
        name: "John Doe".to_string(),
        age: 25,
        hobbies,
        info,
    };

    // Use the rocket_contrib Json wrapper to return the struct as JSON
    Json(request_body)
}

fn main() {
    rocket::ignite()
        // Add the /hello_world route to the router
        .mount("/", routes![hello_world])
        .launch();
}