// Define a custom struct with multiple fields
struct User {
    name: String,
    age: u32,
    email: String,
    address: String,
    // Define an associated function to create instances of the struct
    fn create_user(name: &str, age: u32, email: &str, address: &str) -> User {
        User {
            name: String::from(name), // Create a new String from the given str
            age, // Due to field and parameter having the same name, we can use shorthand syntax
            email: String::from(email),
            address: String::from(address),
        }
    }
}

// Define an implementation block to add methods to the struct
impl User {
    // Define a method to print the user's information
    fn print_info(&self) {
        println!("Name: {}", self.name);
        println!("Age: {}", self.age);
        println!("Email: {}", self.email);
        println!("Address: {}", self.address);
    }
}

// Create an instance of the User struct using the associated function
let user1 = User::create_user("John", 25, "john@example.com", "123 Main St");

// Call the print_info method on the user1 instance to print the information
user1.print_info();