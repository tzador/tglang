const MAX_NUM: i32 = 100; // defining a constant variable with a 32-bit integer data type and assigning a value to it

struct Queue<T> { // defining a generic struct with type parameter T
    elements: Vec<T>, // vector data structure to store elements of generic type T
}

impl<T> Queue<T> { // implementing methods for the Queue struct
    fn new() -> Self { // associated function to create a new instance of the Queue struct
        Queue { // returning the Queue struct instance
            elements: Vec::new(), // initializing the vector data structure with no elements
        }
    }

    fn enqueue(&mut self, item: T) { // method to add an item to the queue
        self.elements.push(item); // using the vector push method to append the item to the end of the queue
    }

    fn dequeue(&mut self) -> Option<T> { // method to remove the first item from the queue
        if self.elements.is_empty() { // checking if the queue is empty
            return None; // returning None if the queue is empty
        }

        Some(self.elements.remove(0)) // using the vector remove method to remove and return the first element of the queue
    }

    fn is_empty(&self) -> bool { // method to check if the queue is empty
        self.elements.is_empty() // returning the result of the vector is_empty method
    }

    fn size(&self) -> usize { // method to get the size of the queue
        self.elements.len() // returning the length of the vector, which is also the number of elements in the queue
    }
}