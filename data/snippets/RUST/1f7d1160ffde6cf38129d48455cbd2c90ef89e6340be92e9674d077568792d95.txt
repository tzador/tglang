// Implementing a custom HashMap data structure with generics and hashing

// Define a generic struct for HashMap
struct HashMap<K, V> {
    capacity: usize, // the default capacity of the HashMap
    size: usize, // the current size of the HashMap
    buckets: Vec<Option<(K, V)>>, // the buckets for storing key-value pairs
}

// Implementing methods for the HashMap struct
impl<K, V> HashMap<K, V> {

    // Function to create a new HashMap instance
    fn new() -> HashMap<K, V> {
        let capacity: usize = 10;
        let buckets = vec![None; capacity];
        HashMap {
            capacity,
            size: 0,
            buckets,
        }
    }

    // Function to get the index of a given key in the buckets vector
    fn get_index(&self, key: K) -> usize {
        let mut hasher = DefaultHasher::new();
        key.hash(&mut hasher);
        hasher.finish() % self.capacity
    }

    // Function to insert a key-value pair into the HashMap
    fn insert(&mut self, key: K, value: V) {
        let index = self.get_index(key);
        let mut item = Some((key, value));
        if self.buckets[index].is_none() {
            self.buckets[index] = item;
            self.size += 1;
        } else {
            let mut current = self.buckets[index].as_mut().unwrap();
            match current {
                Some(bucket) => {
                    if bucket.0 == key {
                        bucket.1 = value;
                    }
                },
                _ => {},
            }
        }
    }

    // Function to remove a key-value pair from the HashMap
    fn remove(&mut self, key: K) -> Option<V> {
        let index = self.get_index(key);
        let mut item = self.buckets[index].take();
        if item.is_some() {
            self.size -= 1;
        }
        item.map(|v| v.1)
    }

    // Function to check if the HashMap contains a given key
    fn contains_key(&self, key: K) -> bool {
        let index = self.get_index(key);
        if let Some(_) = self.buckets[index] {
            true
        } else {
            false
        }
    }

    // Function to return the value associated with a given key
    fn get(&self, key: K) -> Option<&V> {
        let index = self.get_index(key);
        match self.buckets[index] {
            Some(bucket) => Some(&bucket.1),
            None => None,
        }
    }
}

// Using the custom HashMap in main
fn main() {
    let mut map: HashMap<String, i32> = HashMap::new();
    map.insert("apple".to_string(), 10);
    map.insert("banana".to_string(), 20);
    map.insert("orange".to_string(), 30);
    println!("{:?}", map.get("banana"));
}