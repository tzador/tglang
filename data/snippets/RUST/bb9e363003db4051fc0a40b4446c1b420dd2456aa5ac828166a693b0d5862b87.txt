use std::collections::HashMap;

fn main() {
    // create a vector of strings
    let mut words: Vec<String> = Vec::new();
    words.push(String::from("hello"));
    words.push(String::from("world"));
    
    // create a hashmap to store the frequencies of each word
    let mut word_frequencies: HashMap<String, u32> = HashMap::new();
    
    // iterate through the vector and update the hashmap
    for word in &words {
        // check if word exists in the hashmap
        if word_frequencies.contains_key(word) {
            // if the word exists, update its value by 1
            let count = word_frequencies.get_mut(&word).unwrap();
            *count += 1;
        } else {
            // if the word does not exist, add it to the hashmap with a frequency of 1
            word_frequencies.insert(word.clone(), 1);
        }
    }
    
    // print the word frequencies in descending order
    let mut sorted_frequencies: Vec<(&String, &u32)> = word_frequencies.iter().collect();
    sorted_frequencies.sort_by(|a, b| b.1.cmp(a.1));
    
    println!("Word Frequencies:");
    for (word, frequency) in sorted_frequencies {
        println!("{}: {}", word, frequency);
    }
}