// Define a struct named "Customer"
struct Customer {
    name: String,
    age: u32,
    address: String,
    purchases: Vec<String>,
}

// Create a new instance of Customer
let new_customer = Customer {
    name: String::from("John"),
    age: 26,
    address: String::from("123 Main Street"),
    purchases: vec![String::from("Shoes"), String::from("Shirt")],
};

// Define an implementation for the Customer struct
impl Customer {
    // Create a method to add purchases to the customer's list
    fn add_purchase(&mut self, item: String) {
        self.purchases.push(item);
    }

    // Create a method to calculate the average age of all customers
    fn avg_age(customers: &[Customer]) -> f32 {
        let mut total_age = 0;
        for customer in customers {
            total_age += customer.age;
        }

        total_age as f32 / customers.len() as f32
    }
}

// Call the add_purchase method on the new_customer instance
new_customer.add_purchase(String::from("Pants"));

// Create a vector of customer instances
let customers = vec![
    Customer {
        name: String::from("Jane"),
        age: 33,
        address: String::from("456 Maple Ave"),
        purchases: vec![String::from("Dress"), String::from("Jewelry")],
    },
    Customer {
        name: String::from("Adam"),
        age: 45,
        address: String::from("789 Oak St"),
        purchases: vec![String::from("Hat"), String::from("Jacket")],
    },
    Customer {
        name: String::from("Sarah"),
        age: 19,
        address: String::from("246 Elm St"),
        purchases: vec![String::from("Skirt"), String::from("Scarf")],
    },
];

// Call the avg_age method on the customers vector
let avg_age = Customer::avg_age(&customers);

// Print the average age
println!("The average age of all customers is {}", avg_age);