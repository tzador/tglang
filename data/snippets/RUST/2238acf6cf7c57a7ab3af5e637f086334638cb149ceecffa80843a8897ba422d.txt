let mut fibonacci = (0..10).into_iter().fold((0, 1), |(prev, curr), _| (curr, prev + curr));
// `let` is used to create a new mutable variable called 'fibonacci'.
// `mut` keyword indicates that the variable can be changed later.
// `0..10` is a range that includes numbers from 0 to 10 (excluding 10).
// `into_iter()` converts the range into an iterator.
// `fold()` is an iterator method that applies a function to each element in the iterator and returns a single value.
// In this case, the function is a closure that takes in two parameters: (prev, curr) and returns (curr, prev + curr).
// This is the famous Fibonacci sequence implemented using iterators and closures.
// The result of the fold operation is a tuple of the last two numbers in the Fibonacci sequence.
println!("The 10th number in the Fibonacci sequence is {}", fibonacci.1);
// `println!` is a macro that prints the formatted output to the screen.
// {} is a placeholder that gets replaced with the value of the variable passed in the second argument.
// In this case, we are printing the second element of the tuple, which is the 10th number in the Fibonacci sequence.