/// This struct represents a node in a graph
struct Node<T> {
    label: T,
    /// The neighbors of this node
    neighbors: Vec<Node<T>>,
    /// A property indicating whether the node has been visited
    visited: bool,
}

impl<T> Node<T> {
    /// Creates a new Node with the given label
    fn new(label: T) -> Self {
        Node {
            label,
            neighbors: vec![],
            visited: false,
        }
    }
    
    /// Adds a neighbor to the node
    fn add_neighbor(&mut self, neighbor: Node<T>) {
        self.neighbors.push(neighbor);
    }
    
    /// Sets the visited property to true
    fn set_visited(&mut self) {
        self.visited = true;
    }
    
    /// Gets the label of the node
    fn get_label(&self) -> &T {
        &self.label
    }
    
    /// Gets all the neighbors of the node
    fn get_neighbors(&self) -> &Vec<Node<T>> {
        &self.neighbors
    }
    
    /// Checks if the node has been visited
    fn is_visited(&self) -> bool {
        self.visited
    }
}

/// This function performs a depth-first search starting at the given node
/// and marks all the nodes as visited
fn depth_first_search<T>(node: &Node<T>) {
    // Mark the current node as visited
    node.set_visited();

    // Get all the neighbors of the current node
    let neighbors = node.get_neighbors();

    // Loop through all the neighbors
    for neighbor in neighbors {
        // If the neighbor has not been visited, recursively call the function
        if !neighbor.is_visited() {
            depth_first_search(neighbor);
        }
    }
}

fn main() {
    // Create nodes with labels
    let node1 = Node::new(1);
    let node2 = Node::new(2);
    let node3 = Node::new(3);
    let node4 = Node::new(4);

    // Connect the nodes by adding neighbors
    node1.add_neighbor(node2);
    node1.add_neighbor(node3);
    node2.add_neighbor(node4);
    node3.add_neighbor(node4);

    // Perform depth-first search starting at node1
    depth_first_search(&node1);
}