pub struct BinaryTree<T> {
    root: Option<Box<BinaryNode<T>>>,
}

struct BinaryNode<T> {
    value: T,
    left: Option<Box<BinaryNode<T>>>,
    right: Option<Box<BinaryNode<T>>>,
}

impl<T: Ord> BinaryTree<T> {
    pub fn new() -> Self {
        BinaryTree { root: None }
    }

    pub fn insert(&mut self, value: T) {
        if let None = self.root {
            self.root = Some(Box::new(BinaryNode::new(value)));
            return;
        }

        let mut current_node = &mut self.root;
        loop {
            let mut_x = current_node.as_mut().unwrap();
            if value < mut_x.value {
                current_node = &mut mut_x.left;
                if let None = current_node {
                    current_node = Some(Box::new(BinaryNode::new(value)));
                    return;
                }
            } else {
                current_node = &mut mut_x.right;
                if let None = current_node {
                    current_node = Some(Box::new(BinaryNode::new(value)));
                    return;
                }
            }
        }
    }

    pub fn search(&self, value: T) -> bool {
        let mut current_node = &self.root;
        loop {
            if current_node.is_none() {
                return false;
            }
            let current_value = current_node.as_ref().unwrap().value;
            if value == current_value {
                return true;
            } else if value < current_value {
                current_node = &current_node.as_ref().unwrap().left;
            } else {
                current_node = &current_node.as_ref().unwrap().right;
            }
        }
    }

    pub fn delete(&mut self, value: T) -> bool {
        let mut current_node = &mut self.root;
        let mut parent_node = &mut None;

        loop {
            if let None = current_node {
                return false;
            }
            let next_node = if value < current_node.as_ref().unwrap().value {
                current_node = &mut current_node.as_mut().unwrap().left;
                current_node.as_mut().unwrap().left.as_mut()
            } else if value > current_node.as_ref().unwrap().value {
                current_node = &mut current_node.as_mut().unwrap().right;
                current_node.as_mut().unwrap().right.as_mut()
            } else {
                current_node = &mut current_node.as_mut().unwrap().right;
                current_node.as_mut()
            };
            if let None = next_node {
                return false;
            }
            parent_node = current_node;
            current_node = next_node;
        }
        let new_value = current_node.as_mut().unwrap().value;
        if new_value < parent_node.as_mut().unwrap().value {
            parent_node.as_mut().unwrap().left = None;
        } else {
            parent_node.as_mut().unwrap().right = None;
        }
        true
    }
}