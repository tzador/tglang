/// represents a generic linked list
pub struct LinkedList<T> {
    head: Option<Box<Node<T>>>
}

/// represents a node in the linked list
pub struct Node<T> {
    data: T,
    next: Option<Box<Node<T>>>
}

impl<T> LinkedList<T> {
    /// creates an empty linked list
    pub fn new() -> Self {
        LinkedList { head: None }
    }

    /// adds an element to the end of the linked list
    pub fn push(&mut self, data: T) {
        let mut current_node = &mut self.head;
        loop {
            match current_node {
                Some(node) => {
                    if let Some(next) = &mut node.next {
                        current_node = &mut next.next;
                    } else {
                        node.next = Some(Box::new(Node {
                            data: data,
                            next: None
                        }));
                        break;
                    }
                },
                None => {
                    *current_node = Some(Box::new(Node {
                        data: data,
                        next: None
                    }));
                    break;
                }
            }
        }
    }

    /// removes and returns the first element in the linked list
    pub fn pop(&mut self) -> Option<T> {
        let result;
        if let Some(node) = &mut self.head {
            result = Some(node.data);
            self.head = node.next.take();
        } else {
            result = None;
        }
        result
    }

    /// returns a reference to the first element in the linked list
    pub fn peek(&self) -> Option<&T> {
        if let Some(node) = &self.head {
            Some(&node.data)
        } else {
            None
        }
    }
}