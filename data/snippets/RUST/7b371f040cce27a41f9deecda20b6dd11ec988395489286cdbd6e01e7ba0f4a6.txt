struct BSTNode<K, V> {
    key: K,
    value: V,
    left: Option<Box<BSTNode<K, V>>>,
    right: Option<Box<BSTNode<K, V>>>,
}

impl<K, V> BSTNode<K, V> {
    // insert: O(log n)
    fn insert(&mut self, key: K, value: V) {
        if key < self.key {
            match self.left {
                Some(ref mut left) => left.insert(key, value),
                None => {
                    self.left = Some(Box::new(BSTNode {
                        key: key,
                        value: value,
                        left: None,
                        right: None,
                    }));
                }
            }
        } else if key > self.key {
            match self.right {
                Some(ref mut right) => right.insert(key, value),
                None => {
                    self.right = Some(Box::new(BSTNode {
                        key: key,
                        value: value,
                        left: None,
                        right: None,
                    }));
                }
            }
        } else {
            self.value = value;
        }
    }
    // search: O(log n)
    fn search(&self, key: K) -> Option<&V> {
        if key < self.key {
            match self.left {
                Some(ref left) => left.search(key),
                None => None,
            }
        } else if key > self.key {
            match self.right {
                Some(ref right) => right.search(key),
                None => None,
            }
        } else {
            Some(&self.value)
        }
    }
}