#![allow(dead_code)]

use std::collections::HashMap;

// Defines a generic function that takes in two generic parameters, T and U
fn combine<T, U>(vec1: Vec<T>, vec2: Vec<U>) -> HashMap<T, U>
where
    T: Eq + Hash + Clone + Copy,
    U: Eq + Hash,
{
    let mut map = HashMap::new(); // creates a new empty HashMap

    // iterates through the first vector
    for item in vec1.into_iter() {
        let key = item.clone(); // clones the item to use as key
        // maps the corresponding item in the second vector to the key in the HashMap
        // insert() returns an Option, so we use unwrap_or() to handle any errors
        map.insert(key, vec2.iter().find(|&x| *x == item).unwrap_or(&u8::default()).clone());
    }
    map // returns the HashMap
}

fn main() {
    // defines two vectors with different types
    let vec1 = vec![1, 2, 3, 4];
    let vec2 = vec!['a', 'b', 'c', 'd'];

    // calls the combine function passing in the two vectors
    let map = combine(vec1, vec2);
    // prints the resulting HashMap, which should map integers to characters
    println!("{:?}", map);
}