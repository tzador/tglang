use std::io;

// Circular buffer implementation using Rust

struct CircularBuffer<T> {
    buffer: Vec<T>,
    current_position: usize,
    is_full: bool,
}

impl<T> CircularBuffer<T> {
    // Create a new circular buffer with given capacity
    pub fn new(capacity: usize) -> Self {
        CircularBuffer {
            buffer: Vec::with_capacity(capacity),
            current_position: 0,
            is_full: false,
        }
    }

    // Add a new element to the buffer
    pub fn push(&mut self, item: T) {
        let current_position = self.current_position;

        if self.is_full {
            current_position %= self.buffer.capacity();
        }

        if current_position == self.buffer.len() {
            // Increase capacity of buffer
            self.buffer.push(item);
        } else {
            // Replace element at current position
            self.buffer[current_position] = item;
        }

        // Update current position
        self.current_position = current_position + 1;

        // Check if buffer is full
        if !self.is_full && self.current_position == self.buffer.capacity() {
            self.is_full = true;
        }
    }

    // Remove and return the first element from the buffer
    pub fn pop(&mut self) -> Option<T> {
        if self.buffer.is_empty() {
            None
        } else {
            // Take first element from buffer
            let item = Some(self.buffer.remove(0));

            // Update current position and is_full flag
            self.current_position = (self.current_position + self.buffer.len() - 1) % self.buffer.capacity();
            self.is_full = false;

            item
        }
    }

    // Get the current number of elements in the buffer
    pub fn len(&self) -> usize {
        if self.is_full {
            self.buffer.capacity()
        } else {
            self.current_position
        }
    }

    // Check if the buffer is empty
    pub fn is_empty(&self) -> bool {
        self.buffer.is_empty()
    }

    // Check if the buffer is full
    pub fn is_full(&self) -> bool {
        self.is_full
    }

    // Clear the buffer
    pub fn clear(&mut self) {
        // Reset current position
        self.current_position = 0;
        // Clear the buffer
        self.buffer.clear();
        // Set is_full flag to false
        self.is_full = false;
    }
}

fn main() {
    // Create a new circular buffer with capacity of 5
    let mut buffer: CircularBuffer<i32> = CircularBuffer::new(5);

    // Push 5 elements into the buffer
    buffer.push(1);
    buffer.push(2);
    buffer.push(3);
    buffer.push(4);
    buffer.push(5);

    // Buffer is now full
    assert_eq!(buffer.is_full(), true);

    // Try to push one more element, will replace the first element
    buffer.push(6);

    // First element is now 6
    assert_eq!(buffer.pop(), Some(6));

    // Remove and print all elements from buffer
    while let Some(item) = buffer.pop() {
        println!("Popped item: {}", item);
    }
}