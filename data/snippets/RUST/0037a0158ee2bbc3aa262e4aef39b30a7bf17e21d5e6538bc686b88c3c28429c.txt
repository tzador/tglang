// Define a struct with two generic types, T and U, that implement the trait 'Display'
struct Pair<T: Display, U: Display> {
    first: T,
    second: U,
}

// Implement the 'Display' trait for the 'Pair' struct
impl<T: Display, U: Display> Display for Pair<T, U> {
    // Define a function to format the struct for display
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {
        // Write the first value to the formatter
        write!(f, "{}", self.first)?;
        // Write a separator
        write!(f, ", ")?;
        // Write the second value to the formatter
        write!(f, "{}", self.second)?;
        // Return a successful result
        Ok(())
    }
}

// Create an instance of Pair with a u32 and a string
let my_pair = Pair { first: 5u32, second: String::from("Hello") };
// Call the 'Display' implementation for the instance and print the result
println!("My pair is: {}", my_pair);