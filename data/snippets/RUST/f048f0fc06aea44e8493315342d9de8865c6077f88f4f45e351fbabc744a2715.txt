fn fib(n: usize) -> usize {
    	let mut m = n + 1;
    	let sqrt5 = 5.0_f64.sqrt(); //sqrt5 calculation
    	let gr = (1.0 + sqrt5) / 2.0; //golden ratio calculation
    	let mut pr = f64::powf(gr, m as f64); //f64 power function
    	pr += (-1.0_f64).powf(m as f64) * f64::powf(gr, -m as f64); //addition and power function
    	(pr / sqrt5).round() as usize //division, rounding and casting to usize
	}

	//Declaring a vector with 10 elements
	let mut vec = vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

	//Using the map method to square each element
	vec = vec.iter().map(|x| x * x).collect();

	//Sorting the vector in descending order
	vec.sort_by(|a, b| b.cmp(a));

	//Printing the final vector
	println!("{:?}", vec);