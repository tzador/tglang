// This code snippet implements a generic binary search algorithm in Rust
// It takes in a sorted vector and a target value and returns the index of the target if found, otherwise -1

fn binary_search<T: PartialOrd>(arr: &[T], target: &T) -> isize {
    let mut low: isize = 0;
    let mut high: isize = (arr.len() - 1) as isize;

    while low <= high {
        let mid: isize = (low + high) / 2; // find the middle index
        if &arr[mid as usize] == target { // check if target is equal to middle element
            return mid;
        } else if &arr[mid as usize] < target { // if target is greater, search in right half of array
            low = mid + 1;
        } else { // if target is smaller, search in left half of array
            high = mid - 1;
        }
    }

    -1 // if target is not found, return -1
}