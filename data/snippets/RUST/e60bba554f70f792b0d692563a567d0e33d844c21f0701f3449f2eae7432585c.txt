// Initialize a vector
let mut numbers = Vec::new();

// Populate vector with random numbers
for _ in 0..10 {
    let number = rand::random::<u32>();
    numbers.push(number);
}

// Create a closure to calculate the sum of vector elements
let sum = numbers.iter().fold(0, |acc, &x| acc + x );

// Use a macro to print out the sum in a formatted string
println!("The sum of vector elements is {}", sum);

// Create a struct with a generic type
struct Queue<T> {
    contents: Vec<T>,
}

impl<T> Queue<T> {
    // Create a function to add an element to the end of the queue
    fn enqueue(&mut self, item: T) {
        self.contents.push(item);
    }

    // Create a function to remove the first element in the queue
    fn dequeue(&mut self) -> Option<T> {
        self.contents.remove(0)
    }
}

// Instantiate a queue with an integer type
let mut int_queue = Queue::<i32>{ contents: Vec::new() };

// Add integers to the queue using enqueue function
int_queue.enqueue(5);
int_queue.enqueue(10);
int_queue.enqueue(15);

// Remove the first element from the queue and print it
println!("The first element removed from the queue is {:?}", int_queue.dequeue().unwrap());