struct PuzzleState<T> {
    state_name: String,
    state_value: T,
}

impl<T> PuzzleState<T> {
    fn get_name(&self) -> &String {
        &self.state_name
    }

    fn get_value(&self) -> &T {
        &self.state_value
    }
}

trait Calculatable {
    fn calculate(&self) -> usize;
}

impl<T: Calculatable> PuzzleState<T> {
    fn get_calculated_value(&self) -> usize {
        self.state_value.calculate()
    }
}

fn main() {
    let state_string = String::from("initial_state");
    let state_int = 20;
    let puzzle_state_string = PuzzleState {
        state_name: state_string,
        state_value: state_string,
    };
    let puzzle_state_int = PuzzleState {
        state_name: String::from("state_int"),
        state_value: state_int,
    };

    let string_name = puzzle_state_string.get_name();
    let string_value = puzzle_state_string.get_value();
    let calculated_value = puzzle_state_string.get_calculated_value();

    let int_name = puzzle_state_int.get_name();
    let int_value = puzzle_state_int.get_value();
    let calculated_value = puzzle_state_int.get_calculated_value();
}