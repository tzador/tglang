use std::io::{self, BufRead};

// Define a struct named "Rectangle" with two fields: "length" and "width"
struct Rectangle {
    length: u32,
    width: u32,
}

// Define an implementation block for the Rectangle struct
impl Rectangle {

    // Define a function named "new" that takes in two u32 values
    fn new(length: u32, width: u32) -> Rectangle {

        // Create a new instance of Rectangle and return it
        Rectangle {
            length,
            width,
        }
    }

    // Define a method named "area" that takes in a reference to a Rectangle instance
    fn area(&self) -> u32 {

        // Return the area by multiplying length and width
        self.length * self.width
    }

    // Define a method named "perimeter" that takes in a reference to a Rectangle instance
    fn perimeter(&self) -> u32 {

        // Return the perimeter by adding length and width and multiplying by 2
        (self.length + self.width) * 2
    }
}

// Create a new instance of Rectangle with 5 as length and 10 as width
let rectangle = Rectangle::new(5, 10);

// Print out the area of the rectangle using the area method
println!("The area of the rectangle is {}", rectangle.area());

// Print out the perimeter of the rectangle using the perimeter method
println!("The perimeter of the rectangle is {}", rectangle.perimeter());