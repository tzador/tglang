// An example program in Rust that sorts a vector of integers using bubble sort

// Define a function that takes in a vector of integers by reference
fn bubble_sort(numbers: &mut Vec<i32>) {
    // Define two variables for indexing
    let mut i: usize;
    let mut j: usize;
    // Define a variable to keep track of whether a swap has been made
    let mut swapped = true;

    // Run the sorting algorithm while a swap has been made
    while swapped {
        // Set swapped variable back to false
        swapped = false;
        // Loop through the vector
        for i in 0..numbers.len() - 1 {
            // Check if the current value is larger than the next value
            if numbers[i] > numbers[i+1] {
                // Swap the values
                numbers.swap(i, i+1);
                // Set swapped variable to true
                swapped = true;
            }
        }
    }
}

// Define a main function to test the bubble sort function
fn main() {
    // Initialize a vector of unsorted integers
    let mut numbers = vec![4, 7, 2, 9, 1, 5];
    // Print the unsorted vector
    println!("Unsorted numbers: {:?}", numbers);
    // Run the bubble sort function
    bubble_sort(&mut numbers);
    // Print the sorted vector
    println!("Sorted numbers: {:?}", numbers);
}