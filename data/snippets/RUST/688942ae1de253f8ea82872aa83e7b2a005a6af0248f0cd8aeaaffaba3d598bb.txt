// This code snippet shows the implementation of a stack data structure in Rust

  // Defining a struct for the stack 
  struct Stack<T> {
      elements: Vec<T>
  }

  impl<T> Stack<T> {
      // Method to push an element onto the stack
      fn push(&mut self, element: T) {
          self.elements.push(element);
      }

      // Method to pop an element off the stack
      fn pop(&mut self) -> Option<T> {
          self.elements.pop()
      }

      // Method to check if the stack is empty
      fn is_empty(&self) -> bool {
          self.elements.is_empty()
      }

      // Method to get the top element of the stack without removing it
      fn top(&self) -> Option<&T> {
          self.elements.last()
      }
  }

  // Creating a new stack of type i32
  let mut stack: Stack<i32> = Stack {elements: vec![]};

  // Pushing elements onto the stack
  stack.push(5);
  stack.push(10);
  stack.push(15);
  stack.push(20);

  // Popping an element off the stack and printing it
  let popped = stack.pop();
  println!("Popped element: {:?}", popped);

  // Printing the top element of the stack
  let top_element = stack.top();
  println!("Top element: {:?}", top_element);

  // Checking if the stack is empty
  let empty = stack.is_empty();
  println!("Is stack empty? {:?}", empty);