// Example code for a binary search tree implementation in Rust
use std::cmp::Ordering;

// Define the `Node` struct to hold data and left/right child nodes
pub struct Node {
    data: i32,
    left: Option<Box<Node>>,
    right: Option<Box<Node>>,
}

// Implement the `Node` struct with functions for inserting and searching for data
impl Node {
    // Create a new node with the given data
    pub fn new(data: i32) -> Self {
        Node {
            data,
            left: None,
            right: None,
        }
    }

    // Function for inserting data into the binary search tree
    pub fn insert(&mut self, data: i32) {
        match data.cmp(&self.data) {
            Ordering::Less => {
                // Insert data into the left subtree
                match &mut self.left {
                    Some(left) => left.insert(data),
                    None => self.left = Some(Box::new(Node::new(data))),
                }
            }
            Ordering::Greater => {
                // Insert data into the right subtree
                match &mut self.right {
                    Some(right) => right.insert(data),
                    None => self.right = Some(Box::new(Node::new(data))),
                }
            }
            Ordering::Equal => {
                // Do nothing, `Node` already exists in the tree
            }
        }
    }

    // Function for searching for some data in the binary search tree
    pub fn search(&self, data: i32) -> bool {
        match data.cmp(&self.data) {
            Ordering::Less => match &self.left {
                Some(left) => left.search(data),
                None => false,
            },
            Ordering::Greater => match &self.right {
                Some(right) => right.search(data),
                None => false,
            },
            Ordering::Equal => true,
        }
    }
}

// Main function to run the code
fn main() {
    // Create a new root node with data 5
    let mut root = Node::new(5);
    // Insert some numbers into the binary search tree
    root.insert(3);
    root.insert(7);
    root.insert(9);
    // Search for the number 7 in the binary search tree
    let result = root.search(7);
    // Print the result
    println!("Result of search: {}", result);
}