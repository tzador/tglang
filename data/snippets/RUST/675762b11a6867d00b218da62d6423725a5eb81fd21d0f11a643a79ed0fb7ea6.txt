// A recursive function to find the nth Fibonacci number

// Create a function that takes in an unsigned 64-bit integer as input and returns an unsigned 64-bit integer as output
fn fib(n: u64) -> u64 {
    // If n is equal to 0 or 1, return n
    if n == 0 || n == 1 {
        return n;
    }

    // Otherwise, return the sum of the previous two Fibonacci numbers
    else {
        // Declare two unsigned 64-bit integers and initialize them with the first two Fibonacci numbers
        let mut a: u64 = 0;
        let mut b: u64 = 1;

        // Create a for loop that iterates from 2 to n, as the first two Fibonacci numbers are already initialized
        for _ in 2..=n {
            // Calculate the next Fibonacci number by summing the previous two numbers
            let c: u64 = a + b;

            // Shift the previous two numbers to the right, so that the first becomes the second and the second becomes the sum
            a = b;
            b = c;
        }

        // Return the result
        return b;
    }
}

// Print out the result of the function with n equal to 10
println!("{}", fib(10));