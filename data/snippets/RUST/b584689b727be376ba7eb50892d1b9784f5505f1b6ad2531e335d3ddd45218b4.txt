// Declare a struct
struct Car {
    // Fields with specified data types
    model: String,
    year: u32,
    color: String,
    // A method that returns a formatted string
    fn info() -> String {
        format!("This car is a {} {} with a {} color.", self.year, self.model, self.color)
    }
}
// Declare an enum
enum CarType {
    Sedan,
    SUV,
    Truck,
    Sportscar
}
// Declare a trait
trait Drive {
    // A function that takes in a CarType parameter
    fn fuel_type(car_type: CarType);
    // A default implementation for the method
    fn speed(&self) -> u32 {
        100
    }
}
// Implement the Drive trait for the Car struct
impl Drive for Car {
    // Implement the fuel_type method for Car
    fn fuel_type(car_type: CarType) {
        match car_type {
            CarType::Sedan => println!("Sedans use gasoline."),
            CarType::SUV => println!("SUVs use diesel."),
            CarType::Truck => println!("Trucks use diesel."),
            CarType::Sportscar => println!("Sportscars use premium gasoline.")
        }
    }
    // Implement the speed method for Car
    fn speed(&self) -> u32 {
        // Calculate the speed based on the car's model and year
        match self.model.as_ref() {
            "Corolla" => 120,
            _ if self.year > 2015 => 180,
            _ => 150
        }
    }
}
// Create an instance of Car struct
let car = Car {
    model: String::from("Corolla"),
    year: 2018,
    color: String::from("blue")
}
// Call the info method on the car instance
println!("{}", car.info());
// Call the fuel_type method on the car instance by passing in a CarType parameter
car.fuel_type(CarType::Sedan);
// Call the speed method on the car instance
println!("This car can go up to {} km/h", car.speed());