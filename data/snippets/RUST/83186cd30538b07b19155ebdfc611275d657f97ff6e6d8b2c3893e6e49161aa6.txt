pub fn mergesort<T>(mut arr: Vec<T>) -> Vec<T>
where
    T: PartialOrd + Copy,
{
    let length = arr.len();
    if length > 1 {
        let mut mid = length / 2;
        if length % 2 != 0 {
            mid += 1;
        }
        let arr1 = sort(&arr[0..mid]);
        let arr2 = sort(&arr[mid..length]);
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        while i < arr1.len() && j < arr2.len() {
            if arr1[i] < arr2[j] {
                arr[k] = arr1[i];
                i += 1;
            } else {
                arr[k] = arr2[j];
                j += 1;
            }
            k += 1;
        }
        while i < arr1.len() {
            arr[k] = arr1[i];
            i += 1;
            k += 1;
        }
        while j < arr2.len() {
            arr[k] = arr2[j];
            j += 1;
            k += 1;
        }
    }
    arr
}