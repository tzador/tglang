struct BinaryTree<T> {
    value: T,
    left: Option<Box<BinaryTree<T>>>,
    right: Option<Box<BinaryTree<T>>>,
}

impl<T> BinaryTree<T> {
    fn insert(&mut self, value: T) -> bool {
        if value <= self.value {
            match self.left {
                Some(ref mut node) => node.insert(value),
                None => {
                    self.left = Some(Box::new(BinaryTree {
                        value,
                        left: None,
                        right: None,
                    }));
                    true
                }
            }
        } else {
            match self.right {
                Some(ref mut node) => node.insert(value),
                None => {
                    self.right = Some(Box::new(BinaryTree {
                        value,
                        left: None,
                        right: None,
                    }));
                    true
                }
            }
        }
    }
}

fn main() {
    let mut tree: BinaryTree<i32> = BinaryTree {
        value: 3,
        left: Some(Box::new(BinaryTree {
            value: 1,
            left: Some(Box::new(BinaryTree {
                value: 0,
                left: None,
                right: None,
            })),
            right: None,
        })),
        right: Some(Box::new(BinaryTree {
            value: 5,
            left: Some(Box::new(BinaryTree {
                value: 4,
                left: None,
                right: None,
            })),
            right: Some(Box::new(BinaryTree {
                value: 6,
                left: None,
                right: None,
            })),
        })),
    };

    tree.insert(2);

    /*
    Expected Result:
      3
    /   \
   1     5
  / \   / \
 0   2 4   6
    */
}