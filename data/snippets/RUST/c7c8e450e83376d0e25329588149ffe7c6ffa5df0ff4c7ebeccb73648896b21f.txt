fn fibonacci(n: u32) -> u32 {
    // function that calculates the nth Fibonacci number
    // using dynamic programming for efficiency

    let mut memo: Vec<u32> = vec![0; (n + 1) as usize]; // initialize memoization array

    if n == 0 { return 0; }
    if n == 1 { return 1; }

    // base cases
    memo[0] = 0;
    memo[1] = 1;

    // iterate through the numbers from 2 to n
    for i in 2..=n {

        // use memoization to retrieve the previous two numbers
        memo[i as usize] = memo[(i - 1) as usize] + memo[(i - 2) as usize];
    }

    // return the nth Fibonacci number
    return memo[n as usize];
}

fn main() {
    // example usage of the fibonacci function
    let n = 10;
    let result = fibonacci(n);
    println!("The {}th Fibonacci number is {}", n, result);
}