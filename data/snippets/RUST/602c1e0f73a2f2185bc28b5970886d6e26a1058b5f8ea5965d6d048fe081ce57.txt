struct User {
    username: String,
    email: String,
    credit_card: String
}

impl User {
    // method to get user's full name
    fn get_full_name(&self) -> String {
        let name = self.username.split(" ");
        let mut full_name = String::new();

        // iterate through the username string
        for n in name {
            // capitalize each part of the name
            let capitalized = n.chars().next().unwrap().to_uppercase().collect::<String>();
            
            // append the capitalized name to the full name string
            full_name.push_str(&capitalized);
            full_name.push(' ');
        }
        // remove the trailing space
        full_name.pop();
        
        // return the full name
        full_name
    }

    // method to mask the user's credit card number
    fn mask_credit_card(&self) -> String {
        // split the credit card string into 4 parts
        let cc = self.credit_card.chars().collect::<Vec<char>>();
        let mut masked_cc = String::from(cc[0].to_string()); 
        for i in 1..cc.len() - 3 {
            if i % 4 == 0 {
                // add dash after every 4 numbers
                masked_cc.push('-');
            } 
            else {
                // mask numbers with 'X'
                masked_cc.push('X');
            }
        }
        
        // add the last 4 digits of the credit card
        let num_masked = masked_cc.chars().count(); 
        for j in num_masked..self.credit_card.chars().count() {
            masked_cc.push(cc[j]);
        }
        
        // return the masked credit card number
        masked_cc
    }
}

fn main() {
    // create a new user instance
    let user = User {
        username: String::from("john doe"),
        email: String::from("johndoe@example.com"),
        credit_card: String::from("1234-5678-9012-3456")
    };
    
    // print the user's full name and masked credit card number
    println!("Full Name: {}", user.get_full_name());
    println!("Masked Credit Card: {}", user.mask_credit_card());
}