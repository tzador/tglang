#![allow(dead_code)]

// Define a struct `Person` with two fields `name` and `age`
struct Person {
    name: String,
    age: u32,
}

// Implement a method `new()` on `Person`, returning a new instance
impl Person {
    fn new(name: &str, age: u32) -> Self {
        Person {
            name: name.to_string(),
            age,
        }
    }
}

// Implement `Display` trait on `Person`, allowing formatting
// of the struct's fields in a specific way
impl std::fmt::Display for Person {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "Name: {}, Age: {}", self.name, self.age)
    }
}

// Define a function that takes in a vector of `Person` structs
// and returns a vector of only those over the age of 18
fn filter_adults(people: Vec<Person>) -> Vec<Person> {
    people.into_iter().filter(|person| person.age > 18).collect()
}

// Main function
fn main() {
    // Create a vector of `Person` instances
    let people = vec![
        Person::new("John", 20),
        Person::new("Jane", 16),
        Person::new("Mike", 30),
        Person::new("Samantha", 25),
    ];

    // Call `filter_adults()` function on the `people` vector
    let adults = filter_adults(people);

    // Print out each person's details in the `adults` vector
    for person in adults {
        println!("{}", person);
    }
}