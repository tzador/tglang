// A function that implements the Sieve of Eratosthenes algorithm to find prime numbers up to a given limit.
fn sieve_of_eratosthenes(limit: usize) -> Vec<usize> {
    let mut primes: Vec<usize> = Vec::new();
    let mut numbers: Vec<usize> = (2..limit + 1).collect(); // create a vector of numbers from 2 to the limit
    while !numbers.is_empty() {
        let prime = numbers[0]; // set the first number as the current prime
        primes.push(prime); // add it to the primes vector
        numbers = numbers.into_iter() // remove all multiples of the current prime
            .filter(|&n| n % prime != 0)
            .collect();
    }
    primes // return the vector of prime numbers
}