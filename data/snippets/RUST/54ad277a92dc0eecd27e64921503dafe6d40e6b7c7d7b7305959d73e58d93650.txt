use std::collections::{HashMap, HashSet};

// Define a function that takes in a vector of strings
fn count_occurrences(vec: Vec<String>) -> HashMap<String, u32> {
    // Create an empty HashMap to store occurrences
    let mut occurrences = HashMap::new();

    // Loop through each string in the vector
    for string in vec {
        // Add string to HashSet to keep track of duplicates
        let string_clone = string.clone();
        let mut seen = HashSet::new();
        seen.insert(string_clone);

        // Check if string is already in HashMap as a key
        if occurrences.contains_key(&string) {
            // If so, add 1 to its value
            let count = occurrences.get_mut(&string).unwrap();
            *count += 1;
        } else {
            // If not, add string as a key with value of 1
            occurrences.insert(string, 1);
        }
        
        // Check if string has duplicates
        if seen.contains(&string) {
            // If so, log a warning
            eprintln!("WARNING: Duplicate string found: {}", string);
        }
    }

    // Return the HashMap of occurrences
    occurrences
}

// Create a vector of strings
let vec = vec!["hello", "world", "hello", "hello", "coding", "programming", "world"];

// Call the function and store the result in a variable
let occurrences = count_occurrences(vec);

// Loop through the HashMap and print out each key-value pair
for (key, value) in &occurrences {
    println!("{}: {}", key, value);
}