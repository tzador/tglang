fn quicksort<T: Ord + Copy>(arr: &mut [T], left: usize, right: usize) {
    // Base case: nothing to sort
    if left >= right {
        return;
    }
    // Choose pivot element
    let pivot = arr[left];
    // Create two subarrays, one for values less than pivot and one for values greater than pivot.
    let mut i = left;
    let mut j = right;
    while i <= j {
        while arr[i] < pivot {
            i += 1;
        }
        while arr[j] > pivot {
            j -= 1;
        }
        if i <= j {
            arr.swap(i, j);
            i += 1;
            j -= 1;
        }
    }
    // Recursively call quicksort on subarrays
    if left < j {
        quicksort(arr, left, j);
    }
    if right > i {
        quicksort(arr, i, right);
    }
}
// Example input and calling quicksort function
let mut numbers = [5, 2, 8, 6, 1, 3, 9, 4, 7];
quicksort(&mut numbers, 0, numbers.len() - 1);
// Example output: [1, 2, 3, 4, 5, 6, 7, 8, 9]