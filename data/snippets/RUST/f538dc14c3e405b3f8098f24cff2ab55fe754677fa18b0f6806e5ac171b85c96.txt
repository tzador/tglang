fn main() {
     // This is a simple example function in Rust
     
     // Variable declaration and assignment
     let mut num1: i32 = 5; // Declaring a mutable variable
     let num2 = 10; // Type inference - Rust will automatically assign type based on value
     let str1 = String::from("Hello"); // String type - allocated on the heap
     
     // Simple Math operations
     let sum = num1 + num2;
     let product = num1 * num2;
     let difference = num1 - num2;
     
     // Conditional statements and loops
     if sum > 15 {
          println!("The sum is greater than 15");
     }
     
     for i in 0..10 { // Loop from 0 to 9
          num1 += i; // Compound assignment operator
     }
     
     while num1 > 0 {
          // Printing the value of num1
          println!("The value of num1 is {}", num1);
          num1 -= 1;
     }
     
     // Using the match expression
     let result = match difference {
          0 => "They are equal",
          1...10 => "They are close",
          _ => "They are far apart",
     };
     
     // Function call with return value
     let multiply = multiply(num1, num2);
     
     // Print statements
     println!("The result of multiplication is {}", multiply);
     println!("The difference is {}", difference);
     
}
 
// Function to multiply two numbers
fn multiply(x: i32, y: i32) -> i32 {
     x * y // No need for the return keyword, the last expression is returned by default
}