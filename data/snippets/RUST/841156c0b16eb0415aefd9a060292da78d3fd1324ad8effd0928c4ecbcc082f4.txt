// Create a struct with two fields
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    // Defines a method for the Rectangle struct
    fn area(&self) -> u32 {
        // We use the '&' symbol for a reference to the struct
        self.width * self.height
    }

    fn perimeter(&self) -> u32 {
        2 * (self.width + self.height)
    }

    // A function that takes in two Rectangle structs and returns a new merged rectangle
    fn merge(rect1: Rectangle, rect2: Rectangle) -> Rectangle {
        // Get the larger width and height of the two rectangles
        let width = if rect1.width > rect2.width { rect1.width } else { rect2.width };
        let height = if rect1.height > rect2.height { rect1.height } else { rect2.height };
        // Create a new struct with the merged size
        Rectangle {
            width: width,
            height: height,
        }
    }
}

fn main() {
    // Create two rectangles
    let rect1 = Rectangle { width: 10, height: 20 };
    let rect2 = Rectangle { width: 5, height: 15 };

    // Call the area and perimeter methods on the rectangles
    let area = rect1.area();
    let perimeter = rect2.perimeter();

    // Merge the two rectangles
    let merged_rect = Rectangle::merge(rect1, rect2);

    // Print out the values of the merged rectangle
    println!("Merged rectangle width: {}", merged_rect.width);
    println!("Merged rectangle height: {}", merged_rect.height);
    println!("Merged rectangle area: {}", merged_rect.area());
    println!("Merged rectangle perimeter: {}", merged_rect.perimeter());
}