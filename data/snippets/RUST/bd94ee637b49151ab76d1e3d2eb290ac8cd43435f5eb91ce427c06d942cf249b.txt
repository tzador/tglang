use std::collections::{HashMap, HashSet}; // Importing necessary libraries

/// This function takes in a vector of integers and returns the index of the number with the highest count.
/// If multiple numbers have the same count, it returns the index of the first occurring number.
fn find_highest_count(numbers: Vec<i32>) -> usize {
    let mut counts: HashMap<i32, usize> = HashMap::new(); // Creating a HashMap to store the counts of each number
    for number in numbers.iter() { // Looping through each number in the input vector
        let mut count = counts.entry(*number).or_insert(0); // Using the entry method to insert the number if it doesn't exist and initialize its count to 0
        *count += 1; // Incrementing the count of the number
    }
    let mut highest_count = 0; // Variable to track the highest count
    let mut most_common_number = 0; // Variable to store the most common number
    for (number, count) in counts.iter() { // Looping through the HashMap to find the highest count
        if *count > highest_count { // If the count of the current number is higher than the current highest count
            highest_count = *count; // Update the highest count
            most_common_number = *number; // Update the most common number
        }
    }
    numbers.iter().position(|&x| x == most_common_number).unwrap() // Using the position method to find the index of the most common number in the original input vector and returning it
}