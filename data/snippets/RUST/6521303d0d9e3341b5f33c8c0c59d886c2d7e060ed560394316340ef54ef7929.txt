// This is a function that takes in two vectors and returns
// a new vector containing the elements from both input vectors
fn merge_vectors<T>(mut v1: Vec<T>, mut v2: Vec<T>) -> Vec<T> {
    // Annotates the function with the `unsafe` keyword,
    // meaning that it can potentially cause side-effects or memory safety issues
    unsafe {
        // Checks if the capacity of the first vector plus the capacity of
        // the second vector is greater than the maximum value of usize
        // which would result in an overflow
        if (v1.capacity() + v2.capacity()) > usize::max_value() {
            panic!("Vectors are too large and would cause an overflow");
        }
        // Sets the capacity of the first vector to the combined capacity
        // of both vectors
        v1.reserve(v2.capacity());
        // Converts the second vector into a raw pointer
        let v2_ptr = v2.as_mut_ptr();
        // Iterates through the elements of the second vector and
        // appends them to the first vector using the raw pointer
        for i in 0..v2.len() {
            // Uses the `add` method on the raw pointer to access
            // each element of the second vector and then appends
            // it to the first vector
            v1.push(*v2_ptr.add(i));
        }
        // Returns the merged vector
        v1
    }
}

// Sample usage of the function to merge two vectors of integers
fn main() {
    let first_vector = vec![1, 2, 3];
    let second_vector = vec![4, 5, 6];
    let merged_vector = merge_vectors(first_vector, second_vector);
    println!("{:?}", merged_vector);
    // Output: [1, 2, 3, 4, 5, 6]
}