/// This function recursively calculates the Fibonacci sequence
/// up to a given number
fn fibonacci(n: u32) -> u32 {
    match n {
        0 => 0,
        1 => 1,
        _ => fibonacci(n - 1) + fibonacci(n - 2),
    }
}

/// This function takes in a vector of u32 numbers and adds them together
fn sum_vector(numbers: Vec<u32>) -> u32 {
    let mut sum: u32 = 0; // initialize a mutable variable 'sum' to store the sum of the numbers
    for number in numbers { // iterate through the numbers in the vector
        sum += number; // add the current number to the sum
    }
    sum // return the sum
}

/// This function checks if a given number is a prime number
fn is_prime(number: u32) -> bool {
    // check if the number is divisible by any number less than itself
    for divisor in 2..number {
        if number % divisor == 0 {
            return false; // if it is divisible, return false
        }
    }
    true // if it is not divisible, return true
}

// main function
fn main() {
    let fibonacci_number = fibonacci(5); // calculate the 5th Fibonacci number
    println!("The 5th Fibonacci number is {}", fibonacci_number); // print the result

    let numbers = vec![1, 2, 3, 4, 5]; // create a vector of numbers
    let sum = sum_vector(numbers); // calculate the sum of the numbers in the vector
    println!("The sum of the numbers is {}", sum); // print the result

    let prime_number = 13; // define a prime number
    println!("Is {} a prime number? {}", prime_number, is_prime(prime_number)); // check if it is a prime number and print the result
}