#![feature(test)]

extern crate test;

use std::collections::HashMap;
use std::ops::Add;
use test::{Bencher, black_box};

const INPUT: [&str; 9] = [
    "apple", "banana", "pear", "grape", "cherry", "strawberry", "orange", "melon", "kiwi"
    ];

#[bench]
fn bench_unique_strings(b: &mut Bencher) {
    b.iter(|| {
        let mut map = HashMap::new();
        for &s in &INPUT {
            map.insert(s, ());
        }
        black_box(map.contains_key(&"apple"));
        black_box(map.contains_key(&"strawberry"));
        black_box(map.contains_key(&"blueberry"));
        black_box(map.len());
    });
}

trait Summable<T>{
    fn sum(&self) -> T;
}

impl Summable<i32> for [i32] {
    fn sum(&self) -> i32 {
        let mut result = 0;
        for &x in self {
            result.add(x);
        }
        result
    }
}

let nums = [1,2,3,4,5,6,7,8,9,10];
println!("Sum of numbers from 1 to 10: {}", nums.sum());