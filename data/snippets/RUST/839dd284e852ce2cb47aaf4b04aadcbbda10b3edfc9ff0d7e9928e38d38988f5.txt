// A complex code snippet in RUST programming language
struct User<T, U> {           // Defining a generic struct with two type parameters
    username: T,              // Field of type T
    password: U,              // Field of type U
}

impl<T, U> User<T, U> {       // Implementing methods for the User struct
    fn new(username: T, password: U) -> User<T, U> {      // A new function to create new instances of User
        User { username, password }                       // Initializing the fields using shorthand syntax
    }

    fn get_username(&self) -> &T {     // Method to get the username field, borrowing self
        &self.username
    }

    fn get_password(&self) -> &U {     // Method to get the password field, borrowing self
        &self.password
    }
}

fn main() {
    let user = User::new("John", "abc123");    // Creating a new User instance with String type for username and password
    println!("Username: {}", user.get_username());    // Printing the username field
    println!("Password: {}", user.get_password());    // Printing the password field
}