// This code snippet shows an example of implementing a generic struct with associated functions and traits in Rust

// A generic struct with two type parameters, T and U
struct MyStruct<T, U> {
    item1: T,
    item2: U,
}

// Associated functions for the generic struct
impl<T, U> MyStruct<T, U> {

    // A function that takes in two values of type T and returns a MyStruct instance
    fn new(item1: T, item2: T) -> Self {
        MyStruct {
            item1,
            item2,
        }
    }

    // A function that takes in a closure and maps it onto both items in the struct
    fn map_my_struct<F>(self, f: F) -> MyStruct<<T as FnOnce(U) -> V>, V> where
        F: FnOnce(T) -> V,
        T: FnOnce(U) -> V,
    {
        MyStruct {
            item1: f(self.item1),
            item2: f(self.item2),
        }
    }
}

// Trait implementation for MyStruct with a blanket implementation for all possible type parameters
trait MyTrait<T, U> {
    fn add(&self) -> T;
    fn multiply(&self) -> U;
}

impl<T, U> MyTrait<T, U> for MyStruct<T, U>
where
    T: Add<Output = T> + Mul<Output = U> + Copy,
    U: Add<Output = U> + Mul<Output = T> + Copy,
{
    // Returns the sum of both items in the struct
    fn add(&self) -> T {
        self.item1 + self.item2
    }

    // Returns the product of both items in the struct
    fn multiply(&self) -> U {
        self.item1 * self.item2
    }
}

fn main() {
    // Creates a new MyStruct instance with type i32 for both items
    let my_struct = MyStruct::new(5, 10);

    // Maps a closure onto the items in the struct and saves the result in a new MyStruct instance
    let mapped_struct = my_struct.map_my_struct(|i| i * 2);

    // Prints the sum and product of the items in the struct
    println!("Sum: {}, Product: {}", mapped_struct.add(), mapped_struct.multiply());
}