// This program calculates the first n Fibonacci numbers
fn fibonacci(n: i32) -> Vec<i32> {
    let mut fib_nums = Vec::new(); // initialize vector to store Fibonacci numbers
    if n == 1 { // base case
        fib_nums.push(0); // first Fibonacci number is 0
    } else if n == 2 { // base case
        fib_nums.push(0); // first Fibonacci number is 0
        fib_nums.push(1); // second Fibonacci number is 1
    } else {
        fib_nums.push(0); // first Fibonacci number is 0
        fib_nums.push(1); // second Fibonacci number is 1
        for i in 2..n { // loop through remaining indices
            let next_fib = fib_nums[i-1] + fib_nums[i-2]; // calculate next Fibonacci number
            fib_nums.push(next_fib); // add next Fibonacci number to vector
        }
    }
    fib_nums // return vector of Fibonacci numbers
}

// main function
fn main() {
    let n = 10; // set value of n for first n Fibonacci numbers
    let fib_nums = fibonacci(n); // call fibonacci function and store result
    println!("The first {} Fibonacci numbers are: {:?}", n, fib_nums); // print results
}