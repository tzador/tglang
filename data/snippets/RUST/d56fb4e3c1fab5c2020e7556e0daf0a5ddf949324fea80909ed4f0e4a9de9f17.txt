#![allow(unused)]
# let mut vector: Vec<i32> = vec![1, 2, 3, 4]; // create a mutable vector with values 1, 2, 3 and 4

// define a struct named `Person` with the fields name and age
struct Person {
  name: String,
  age: u8,
}

impl Person { // implement methods for the Person struct
  // define a method that returns the age of the person
  fn get_age(&self) -> u8 {
    self.age // return the age field
  }

  // define a method that sets the name of the person
  fn set_name(&mut self, name: &str) {
    self.name = name.to_string(); // set the name field to the given string
  }
}

let person = Person {
  name: String::from("John"), // set the name field to "John" using the String::from method
  age: 25, // set the age field to 25
};

println!("{} is {} years old.", person.name, person.get_age()); // print "John is 25 years old."
person.set_name("James"); // call the set_name method on the person
println!("{} is {} years old.", person.name, person.get_age()); // print "James is 25 years old."
vector.push(5); // add a new value (5) to the mutable vector

for num in vector { // iterate through the vector
  println!("{}", num); // print each value in the vector
}