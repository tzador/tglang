use std::fmt;
use std::error::Error;
use std::fs::File;
use std::io::prelude::*;

// Define custom error type
#[derive(Debug)]
struct CustomError;

impl fmt::Display for CustomError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Custom Error!")
    }
}

impl Error for CustomError{}

fn main() -> Result<(), Box<dyn Error>> {

    // Open a file
    let mut file = File::open("example.txt")?;

    // Read file contents into a string
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;

    // Print file contents
    println!("{}", contents);

    // Attempt to trigger custom error
    let result: Result<(), _> = Err(CustomError)?;

    // Return success or error
    result
}