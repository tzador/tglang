fn quicksort<T: Ord>(arr: &mut [T], left: usize, right: usize) {
    if right > left {
        let pivot = partition(arr, left, right);
        if pivot > 0 {
            quicksort(arr, left, pivot - 1);
        }
        quicksort(arr, pivot + 1, right);
    }
}
fn partition<T: Ord>(arr: &mut [T], left: usize, right: usize) -> usize {
    let pivot = choose_pivot(arr, left, right);
    let mut store_idx = left;
    for i in left..right {
        if arr[i] < pivot {
            arr.swap(i, store_idx);
            store_idx += 1;
        }
    }
    arr.swap(right, store_idx);
    return store_idx;
}
fn choose_pivot<T: Ord>(arr: &mut [T], left: usize, right: usize) -> T {
    let mid = (left + right) / 2;
    if arr[left] > arr[mid] {
        arr.swap(left, mid);
    }
    if arr[left] > arr[right] {
        arr.swap(left, right);
    }
    if arr[mid] > arr[right] {
        arr.swap(mid, right);
    }
    arr[mid]
}