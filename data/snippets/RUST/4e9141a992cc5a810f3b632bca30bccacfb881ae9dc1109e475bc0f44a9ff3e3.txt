fn merge_sort<T: Ord + Copy>(array: &mut [T], temp: &mut [T], low: usize, high: usize) {
    if high <= low {
        return;
    }

    let mid = low + (high - low) / 2;
    merge_sort(array, temp, low, mid);
    merge_sort(array, temp, mid + 1, high);

    // Copy values to temporary array
    for i in low..=high {
        temp[i] = array[i];
    }

    // Merge two sorted subarrays
    let mut i = low;
    let mut j = mid + 1;

    for k in low..=high {
        if i > mid {
            // Left subarray has been merged, copy remaining right subarray
            array[k] = temp[j];
            j += 1;
        } else if j > high {
            // Right subarray has been merged, copy remaining left subarray
            array[k] = temp[i];
            i += 1;
        } else if temp[j] < temp[i] {
            array[k] = temp[j];
            j += 1;
        } else {
            array[k] = temp[i];
            i += 1;
        }
    }
}