fn merge_sort<T: Ord + Copy>(array: &[T], left: usize, right: usize) { //define a function named merge_sort which takes in a generic type T that implements the Ord and Copy traits as well as a uize slice array, and left and right indices to indicate the start and end of the array
    if right <= left { return }; //check if the right index is less than or equal to the left, if true, return
    let mid = (right + left) / 2; //calculate the mid point of the array
    merge_sort(array, left, mid); //call the merge_sort function recursively with the left half of the array
    merge_sort(array, mid + 1, right); //call the merge_sort function recursively with the right half of the array
    let mut left_index = left; //initialize left_index to the left index
    let mut right_index = mid + 1; //initialize right_index to the index next to the mid
    let mut temp_array: Vec<T> = Vec::with_capacity(right - left + 1); //create a new vector to store the sorted elements with a capacity equal to the size of the merged array
    while left_index <= mid && right_index <= right { //while there are still elements in both the left and right halves
        if array[left_index] <= array[right_index] { //if the element at the left index is less than or equal to the element at the right index
            temp_array.push(array[left_index]); //add the element at the left index to the temp array
            left_index += 1; //increase the left index by 1
        } else { //if the element at the right index is less than the element at the left index
            temp_array.push(array[right_index]); //add the element at the right index to the temp array
            right_index += 1; //increase the right index by 1
        }
    }
    while left_index <= mid { //while there are still elements in the left half
        temp_array.push(array[left_index]); //add the remaining elements to the temp array
        left_index += 1; //increase the left index by 1
    }
    while right_index <= right { //while there are still elements in the right half
        temp_array.push(array[right_index]); //add the remaining elements to the temp array
        right_index += 1; //increase the right index by 1
    }
    for (index, value) in temp_array.iter().enumerate() { //loop through the temp array
        array[left + index] = *value; //place the sorted elements in the original array
    }
}

let mut array = vec![5, 3, 8, 1, 9, 2, 4, 7, 6]; //create a mutable vector of unsorted elements
merge_sort(&mut array, 0, array.len() - 1); //call the merge_sort function with the vector, starting index of 0, and ending index of the array length - 1
println!("Sorted array: {:?}", array); //print the sorted array