fn main() {
    let numbers = [1, 2, 3];
    
    // Using an iterator to print the squares of the numbers in the array
    let squares: Vec<_> = numbers.iter().map(|x| x * x).collect();
    println!("{:?}", squares);
    
    // Using a traditional for loop to print the cubes of the numbers in the array
    let mut cubes = Vec::new();
    for i in 0..numbers.len() {
        cubes.push(numbers[i] * numbers[i] * numbers[i]);
    }
    println!("{:?}", cubes);
    
    // A function to calculate the factorial of a given number using recursion
    fn factorial(n: u32) -> u32 {
        if n == 0 {
            return 1;
        }
        n * factorial(n - 1)
    }
    
    // Using pattern matching to check if a number is prime or not
    fn is_prime(n: u32) -> bool {
        match n {
            0 | 1 => false,
            2 => true,
            _ if n % 2 == 0 => false,
            _ => {
                let limit = (n as f64).sqrt() as u32 + 1;
                (3..limit).step_by(2).all(|i| n % i != 0)
            }
        }
    }
    
    // Using a closure to create a custom filter function for the is_prime function
    let prime_numbers: Vec<_> = (1..20).filter(|&x| is_prime(x)).collect();
    println!("{:?}", prime_numbers);
    
    // Putting all the pieces together in a main function
    fn main() {
        let number = 10;
        println!("The factorial of {} is {}", number, factorial(number));
        
        let prime_numbers: Vec<_> = (1..20).filter(|&x| is_prime(x)).collect();
        println!("{:?}", prime_numbers);
    }
}