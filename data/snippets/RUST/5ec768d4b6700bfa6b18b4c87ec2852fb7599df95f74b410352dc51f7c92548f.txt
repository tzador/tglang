// This is a complex code snippet in Rust.
// It creates a vector of integers, sorts it in descending order,
// and then creates a HashMap with the integers as keys and their squares as values.
// It also uses pattern matching and closures.

fn main() {
    // create a vector of integers
    let vec = vec![3, 1, 9, 5, 2];

    // sort vector in descending order
    vec.sort_by(|a, b| b.cmp(a));

    // create a HashMap
    let mut hashmap = HashMap::new();

    // iterate through vector, use pattern matching and closures
    for num in vec {
        // create combination of integer and its square
        let combo = (num, num*num);

        // insert combination into HashMap
        hashmap.insert(combo.0, combo.1);
    }
}