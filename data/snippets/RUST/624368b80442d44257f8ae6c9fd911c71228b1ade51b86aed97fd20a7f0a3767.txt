fn main() {
    // Create an empty vector
    let mut my_vector: Vec<i32> = Vec::new();
    
    // Use a loop to push 10 random numbers to the vector
    for _i in 0..10 {
        let num: i32 = rand::random();
        my_vector.push(num);
    }
    
    // Print the vector
    println!("{:?}", my_vector);

    // Use a filter to only keep even numbers in the vector
    let even_vector: Vec<i32> = my_vector.into_iter().filter(|&n| n % 2 == 0).collect();

    // Print the filtered vector
    println!("{:?}", even_vector);

    // Create a function to get the sum of all the numbers in a vector
    fn get_sum(vector: Vec<i32>) -> i32 {
        let mut sum = 0;
        for num in vector {
            sum += num;
        }
        sum
    }

    // Use pattern matching to check if the sum of the original vector and the even vector is the same
    match (get_sum(my_vector.clone()), get_sum(even_vector.clone())) {
        (sum1, sum2) if sum1 == sum2 => println!("The sum of both vectors is the same"),
        _ => println!("The sum of both vectors is not the same"),
    }
}