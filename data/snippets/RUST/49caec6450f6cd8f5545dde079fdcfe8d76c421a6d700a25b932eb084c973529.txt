/// Function that sorts a vector in ascending order using the QuickSort algorithm
fn quicksort(mut arr: Vec<i32>) -> Vec<i32> {

    // If there is only one element in the vector, return it as is
    if arr.len() <= 1 {
        return arr;
    }

    // Choose a pivot element, in this case we will use the last element in the vector
    let pivot = arr.pop().unwrap();

    // Create two empty vectors for the left and right subarrays
    let mut left_arr: Vec<i32> = vec![];
    let mut right_arr: Vec<i32> = vec![];

    // Loop through the elements in the vector and partition them into the left and right subarrays
    for num in arr {
        if num < pivot {
            left_arr.push(num);
        } else {
            right_arr.push(num);
        }
    }

    // Use recursion to sort the left and right subarrays, then concatenate them with the pivot in the middle
    let mut sorted_arr = quicksort(left_arr);
    sorted_arr.push(pivot);
    sorted_arr.append(&mut quicksort(right_arr));

    // Return the sorted vector
    sorted_arr
}