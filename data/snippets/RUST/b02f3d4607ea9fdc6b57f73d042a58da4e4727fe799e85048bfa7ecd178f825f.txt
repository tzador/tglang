/// Function to find the maximum of two numbers
/// Parameters:
/// - num1: First number to be compared
/// - num2: Second number to be compared
/// Returns:
/// - The maximum of the two numbers
fn find_max(num1: i32, num2: i32) -> i32 {
    // If num1 is larger than num2, return num1
    if num1 > num2 {
        return num1;
    // If num2 is larger than num1, return num2
    } else if num2 > num1 {
        return num2;
    // If both numbers are equal, return num1
    } else {
        return num1;
    }
}

/// Function to calculate the factorial of a number
/// Parameter:
/// - num: The number to calculate the factorial of
/// Returns:
/// - The factorial of the given number
fn factorial(num: u64) -> u64 {
    // Base case: if num is 0 or 1, return 1
    if num == 0 || num == 1 {
        return 1;
    }
    // Recursive case: using recursion to calculate factorial
    else {
        return num * factorial(num - 1);
    }
}

/// Struct to represent a person's information
struct Person {
    name: String,
    age: u8,
}

impl Person {
    // Constructor for the Person struct
    fn new(name: String, age: u8) -> Person {
        Person {
            name: name,
            age: age,
        }
    }

    // Function to check if the person is an adult
    fn is_adult(&self) -> bool {
        if self.age >= 18 {
            return true;
        } else {
            return false;
        }
    }
}

// Main function
fn main() {
    // Finding the maximum of two numbers
    let num1 = 10;
    let num2 = 5;
    let max = find_max(num1, num2);
    println!("The maximum of {} and {} is {}", num1, num2, max);

    // Calculating the factorial of a number
    let num = 6;
    let fact = factorial(num);
    println!("The factorial of {} is {}", num, fact);

    // Creating a new Person instance
    let person1 = Person::new("John".to_string(), 25);

    // Checking if person is an adult
    if person1.is_adult() {
        println!("{} is an adult", person1.name);
    } else {
        println!("{} is not an adult", person1.name);
    }
}