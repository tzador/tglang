/// Struct representing a custom binary tree
struct BinaryTree<T> {
    value: Option<T>,
    left: Option<Box<BinaryTree<T>>>,
    right: Option<Box<BinaryTree<T>>>,
}

impl<T> BinaryTree<T> {
    /// Creates a new binary tree with the given value as root
    fn new(value: T) -> Self {
        BinaryTree {
            value: Some(value),
            left: None,
            right: None,
        }
    }

    /// Inserts a value into the binary tree
    fn insert(&mut self, value: T)
    where
        T: PartialOrd,            // ensures values can be compared
    {
        match self.value {
            Some(ref current) => {                              // if root has a value
                if value <= *current {...}                       // if value is less than or equal to current value
                    self.left.get_or_insert(Box::new(
                      BinaryTree::new(value)));                  // insert into left subtree or create new subtree
            }
            _ => self.value = Some(value),                       // if root has no value, set it to the value being inserted
        }
    }

    /// Searches for a value in the binary tree
    fn contains(&self, value: &T) -> bool
    where
        T: PartialOrd,                            // ensures values can be compared
    {
        match self.value {
            Some(ref current) => {                  // if root has a value
                if value == current {...}           // if value is equal to current value
                    return true;                    // return true
                else if value < current {...}       // if value is less than current value
                    return self.left.as_ref().map_or(false, |node| node.contains(value));  // search left subtree
                else {...}                          // value is greater than current value, search right subtree
                    return self.right.as_ref().map_or(false, |node| node.contains(value));
            }
            _ => false,                             // root has no value, value cannot be in tree
        }
    }
}