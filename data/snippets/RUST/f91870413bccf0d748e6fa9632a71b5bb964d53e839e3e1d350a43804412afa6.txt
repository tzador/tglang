#![allow(unused_variables)]

// Define a struct with generic types
struct Pair<T, U> {
    first: T,
    second: U,
}

// Implement a method on the struct
impl<T: std::fmt::Debug, U: std::fmt::Display> Pair<T, U> {
    // Function that takes in a generic parameter and returns a tuple of all values
    fn get_all_values<V>(&self, third: V) -> (T, U, V) {
        (self.first, self.second, third)
    }
}

// Create an instance of the struct with specific types
let my_pair = Pair {
    first: "hello",
    second: 123,
};

// Call the method on the struct instance
let values_tuple = my_pair.get_all_values("world");

// Destructure the tuple and print each value
let (first_value, second_value, third_value) = values_tuple;
println!("{} {} {}", first_value, second_value, third_value);