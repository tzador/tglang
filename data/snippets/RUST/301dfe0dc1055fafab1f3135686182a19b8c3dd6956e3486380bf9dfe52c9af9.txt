fn main() {

    // Define a vector with 5 elements of type u32
    let numbers: Vec<u32> = vec![1, 5, 8, 3, 10];

    // Use the filter method to only keep the odd numbers
    let odd_numbers = numbers.into_iter().filter(|&x| x % 2 == 1).collect::<Vec<u32>>();

    // Print the resulting vector to the console
    println!("{:?}", odd_numbers);

    // Define a hashmap with keys of type &str and values of type u32
    let mut fruit_basket = HashMap::new();
    fruit_basket.insert("apple", 3);
    fruit_basket.insert("orange", 5);
    fruit_basket.insert("banana", 8);

    // Use a for loop to iterate through the hashmap and print each key-value pair
    for (fruit, quantity) in &fruit_basket {
        println!("{}: {}", fruit, quantity);
    }

    // Create a function that takes in a number and returns the factorial of that number
    fn factorial(n: u32) -> u32 {
        match n {
            0 => 1,
            _ => n * factorial(n - 1)
        }
    }

    // Call the factorial function on the number 5 and print the result to the console
    let result = factorial(5);
    println!("Factorial of 5 is: {}", result);
}