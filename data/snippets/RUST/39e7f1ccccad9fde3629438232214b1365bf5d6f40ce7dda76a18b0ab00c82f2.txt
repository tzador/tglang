// Define a struct called Book with two string fields, title and author
struct Book {
    title: String,
    author: String
}

// Implement the ToString trait for the Book struct
impl ToString for Book {
    fn to_string(&self) -> String {
        format!("{} by {}", self.title, self.author)
    }
}

// Create a function that takes in a vector of Book structs and returns the longest title
fn longest_title(books: Vec<Book>) -> &str {
    // Create variables to hold the current longest title and its length
    let mut longest_title = &books[0].title;
    let mut longest_length = longest_title.len();
    
    // Loop through the vector and compare titles, updating the longest title and length if necessary
    for book in &books {
        if book.title.len() > longest_length {
            longest_title = &book.title;
            longest_length = book.title.len();
        }
    }
    
    // Return the longest title
    longest_title
}

// Create a vector of Book structs
let book_collection = vec![
    Book { title: "To Kill a Mockingbird".to_string(), author: "Harper Lee".to_string() },
    Book { title: "Pride and Prejudice".to_string(), author: "Jane Austen".to_string() },
    Book { title: "The Great Gatsby".to_string(), author: "F. Scott Fitzgerald".to_string() }
];

// Call the longest_title function and print its output
println!("{}", longest_title(book_collection)); // outputs "Pride and Prejudice"