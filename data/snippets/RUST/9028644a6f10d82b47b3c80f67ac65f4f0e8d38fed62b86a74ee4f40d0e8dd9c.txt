use std::collections::HashMap; // imports the HashMap module from standard library

// define a struct called Book with two fields, title and author
struct Book {
    title: String,
    author: String,
}

// implement a function for getting the book's details
impl Book {
    // this function takes a reference to a book struct and returns its details as a string
    pub fn get_details(&self) -> String {
        format!("Title: {}, Author: {}", self.title, self.author)
    }
}

fn main() {
    // create an empty HashMap instance for storing books
    let mut library: HashMap<u32, Book> = HashMap::new();

    // create a new Book instance and add it to the library map
    let book1 = Book {
        title: String::from("Harry Potter and the Sorcerer's Stone"),
        author: String::from("J.K. Rowling"),
    };
    library.insert(1, book1);

    // create another Book instance and add it to the library map
    let book2 = Book {
        title: String::from("To Kill a Mockingbird"),
        author: String::from("Harper Lee"),
    };
    library.insert(2, book2);

    // loop through the library map and print out the details of each book
    for (key, book) in &library {
        println!("Book {}: {}", key, book.get_details());
    }
}