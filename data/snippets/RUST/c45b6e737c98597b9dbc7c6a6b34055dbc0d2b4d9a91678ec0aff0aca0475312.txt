fn main() {

    // Declaring a mutable vector named 'numbers'
    let mut numbers = Vec::new();

    // Looping through a range of numbers and adding them to the vector
    for i in 0..10 {
        numbers.push(i);
    }

    // Creating a function to print the elements of a vector
    fn print_vector(vector: &Vec<i32>) {
        for i in vector {
            println!("{}", i);
        }
    }

    // Calling the function to print the elements of 'numbers' vector
    print_vector(&numbers);

    // Sorting the vector 'numbers' in ascending order
    numbers.sort();

    // Printing the sorted vector
    println!("Sorted numbers: {:?}", numbers);

    // Using a 'match' statement to check if a number is even or odd
    for i in numbers {
        match i % 2 {
            0 => println!("{} is even.", i),
            _ => println!("{} is odd.", i),
        }
    }

    // Declaring a closure that adds 1 to a given number
    let add_one = |x| x + 1;

    // Using the closure to add 1 to each element of the vector 'numbers'
    let incremented_numbers: Vec<i32> = numbers.iter().map(|&x| add_one(x)).collect();

    // Printing the modified vector
    println!("Incremented numbers: {:?}", incremented_numbers);
}