/**
 * The following code snippet implements a function that checks for
 * palindrome strings using the Rust programming language.
 * Palindromes are words, phrases, or sequences that read the same backward
 * as forward, such as "racecar" or "madam".
 */
fn is_palindrome(string: &str) -> bool {
    // convert string to lowercase and remove whitespace
    let string = string.to_lowercase().replace(" ", "");

    // create a vector of characters from the string
    let chars: Vec<char> = string.chars().collect();
    
    // define pointers for the start and end of the string
    let mut start = 0;
    let mut end = chars.len() - 1;

    // loop through the string from both ends
    while start < end {
        // check if the characters at each end are the same
        if chars[start] != chars[end] {
            // if not equal, return false
            return false;
        }
        // increment start and decrement end
        start += 1;
        end -= 1;
    }
    // if the loop completes without returning false, string is a palindrome
    return true;
}

// Example call and output
println!("Is 'racecar' a palindrome? {}", is_palindrome("racecar"));
// Output: Is 'racecar' a palindrome? true
println!("Is 'hello' a palindrome? {}", is_palindrome("hello"));
// Output: Is 'hello' a palindrome? false