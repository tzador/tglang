fn main() {
    // create a vector of numbers with initial values
    let mut numbers = vec![1, 2, 3, 4, 5];

    // iterate through the vector and print each value multiplied by 2
    for num in &numbers {
        println!("{}", num * 2);
    }

    // create a function that takes in a number and returns its square
    fn square(num: i32) -> i32 {
        num.pow(2)
    }

    // map the vector to a new vector where each value is squared
    let squared_numbers = numbers.iter().map(|&x| square(x)).collect::<Vec<_>>();

    // print the squared numbers vector
    println!("{:?}", squared_numbers);

    // create a struct to represent a person with name and age fields
    struct Person {
        name: String,
        age: i32,
    }

    // create a vector of three Person instances
    let people = vec![
        Person {
            name: String::from("John"),
            age: 25,
        },
        Person {
            name: String::from("Jane"),
            age: 30,
        },
        Person {
            name: String::from("Bob"),
            age: 40,
        },
    ];

    // filter the vector to only contain people over the age of 26
    let filtered_people = people
        .into_iter()
        .filter(|&person| person.age > 26)
        .collect::<Vec<_>>();

    // print the filtered people vector
    println!("{:?}", filtered_people);
}