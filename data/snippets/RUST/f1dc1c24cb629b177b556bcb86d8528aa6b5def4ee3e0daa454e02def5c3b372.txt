// This is a function that performs a bubble sort on an array of integers
fn bubble_sort(arr: &mut [i32]) {
    // The initial loop iterates over the entire array
    for i in 0..arr.len() {
        // The inner loop iterates from the last index to the (i + 1)th index
        for j in (i + 1)..arr.len() {
            // If the element at the current index is greater than the element
            // at the next index, then swap them using the bitwise XOR operator
            if arr[i] > arr[j] {
                arr[i] ^= arr[j];
                arr[j] ^= arr[i];
                arr[i] ^= arr[j];
            }
        }
    }
}

// Here, we create an array of unsorted integers
let mut unsorted = vec![5, 8, 2, 0, 9];

// Finally, we call our bubble_sort function to sort the array
bubble_sort(&mut unsorted);

// The output should be a sorted array of integers
// 0, 2, 5, 8, 9