fn main() {
    // generate a random binary tree
    let mut tree = BinaryTree::new();

    // insert values into tree
    tree.insert(5);
    tree.insert(3);
    tree.insert(9);
    tree.insert(1);
    tree.insert(7);

    // print tree in ascending order
    tree.print_inorder();
}

// define binary tree struct
struct BinaryTree {
    root: Option<Box<Node>>,
}

// node struct for tree
struct Node {
    data: i32,
    left: Option<Box<Node>>,
    right: Option<Box<Node>>,
}

// implementation of binary tree
impl BinaryTree {
    // function to create new empty tree
    fn new() -> Self {
        Self { root: None }
    }

    // function to insert value into tree
    fn insert(&mut self, data: i32) {
        let new_node = Node {
            data,
            left: None,
            right: None,
        };

        // insert new node into tree
        self.insert_node(&mut self.root, new_node);
    }

    // helper function to recursively insert nodes into tree
    fn insert_node(&mut self, node: &mut Option<Box<Node>>, new_node: Node) {
        // if node is empty, insert new node
        if let Some(ref mut n) = node {
            // insert new node into left subtree if data is less than current node
            if new_node.data < n.data {
                self.insert_node(&mut n.left, new_node);
            // otherwise insert into right subtree
            } else {
                self.insert_node(&mut n.right, new_node);
            }
        } else {
            *node = Some(Box::new(new_node));
        }
    }

    // function to print tree in ascending order
    fn print_inorder(&self) {
        // recursively traverse tree and print nodes in ascending order
        self.print_nodes(&self.root);
    }

    // helper function to recursively print nodes in ascending order
    fn print_nodes(&self, node: &Option<Box<Node>>) {
        // if node is not empty, print left subtree, current node, then right subtree
        if let Some(ref n) = node {
            self.print_nodes(&n.left);
            println!("{}", n.data);
            self.print_nodes(&n.right);
        }
    }
}