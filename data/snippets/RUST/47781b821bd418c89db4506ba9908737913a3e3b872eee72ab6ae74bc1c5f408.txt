// Defining a struct
struct Employee {
    name: String,
    age: u32,
    position: String,
}

// Defining an enum
enum Status {
    Active,
    Inactive,
    Suspended,
    Terminated,
    OnLeave
}

// Defining a trait
trait Work {
    fn start_shift(&self);
    fn end_shift(&self);
}

// Implementing the Work trait for Employee struct
impl Work for Employee {
    fn start_shift(&self) {
        println!("{} starts their shift.", self.name);
    }

    fn end_shift(&self) {
        println!("{} ends their shift.", self.name);
    }
}

// Implementing the Display trait for Status enum
impl std::fmt::Display for Status {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        // Providing customized formatting for each variant
        match self {
            Status::Active => write!(f, "Employee status: Active"),
            Status::Inactive => write!(f, "Employee status: Inactive"),
            Status::Suspended => write!(f, "Employee status: Suspended"),
            Status::Terminated => write!(f, "Employee status: Terminated"),
            Status::OnLeave => write!(f, "Employee status: On leave"),
        }
    }
}

fn main() {
    // Creating an instance of Employee struct
    let employee1 = Employee {
        name: String::from("John Doe"),
        age: 30,
        position: String::from("Manager"),
    };

    // Accessing fields of the struct
    println!("Name: {}", employee1.name);
    println!("Age: {}", employee1.age);
    println!("Position: {}", employee1.position);

    // Calling methods from the Work trait
    employee1.start_shift();
    employee1.end_shift();

    // Creating an instance of Status enum
    let status = Status::Active;

    // Displaying the status using the Display trait
    println!("{}", status);
}