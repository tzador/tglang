// Creating a struct for a book
struct Book {
    title: String,
    author: String,
    publication_date: String,
    genre: String,
    pages: u32,
    is_available: bool,
}

// Implementing methods for the Book struct
impl Book {
    // Returns the title and author of the book
    fn get_title_and_author(&self) -> (String, String) {
        (self.title.clone(), self.author.clone())
    }

    // Prints out the details of the book
    fn print_details(&self) {
        println!("Title: {}", self.title);
        println!("Author: {}", self.author);
        println!("Publication Date: {}", self.publication_date);
        println!("Genre: {}", self.genre);
        println!("Pages: {}", self.pages);

        if self.is_available {
            println!("Availability: Available");
        } else {
            println!("Availability: Not Available");
        }
    }
}

// Main function
fn main() {
    // Creating an instance of the Book struct
    let book1 = Book {
        title: String::from("To Kill a Mockingbird"),
        author: String::from("Harper Lee"),
        publication_date: String::from("July 11, 1960"),
        genre: String::from("Classic"),
        pages: 281,
        is_available: true,
    };

    // Using the print_details method to print out the book's details
    book1.print_details();

    // Using the get_title_and_author method to assign the title and author to variables
    let (title, author) = book1.get_title_and_author();

    // Printing out the title and author separately
    println!("Title: {}", title);
    println!("Author: {}", author);
}