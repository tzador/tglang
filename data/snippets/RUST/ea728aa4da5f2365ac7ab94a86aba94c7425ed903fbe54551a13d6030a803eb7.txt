#![allow(dead_code)] // annotation to allow unused code
#[derive(Debug, Clone)] // struct decorator to enable debugging and cloning
struct Rectangle { // define a new struct named Rectangle
    width: f64, // field width of type float 64
    height: f64, // field height of type float 64
} // end of Rectangle struct

impl Rectangle { // start of implementation block
    fn area(&self) -> f64 { // define method called area which takes in a reference to self and returns a float 64
        self.width * self.height // multiply width and height to get the area
    } // end of area method

    fn perimeter(&self) -> f64 { // define method called perimeter which takes in a reference to self and returns a float 64
        2.0 * (self.width + self.height) // calculate the perimeter of the rectangle
    } // end of perimeter method
} // end of implementation block

fn main() { // start of main function
    let rect = Rectangle { // create a new instance of the Rectangle struct named rect
        width: 10.5, // initialize the width field to 10.5
        height: 5.2, // initialize the height field to 5.2
    }; // end of rect instance

    println!("Rect: {:#?}", rect); // print out the debugging information for the rect instance
    println!("Area: {}", rect.area()); // print out the area of the rectangle
    println!("Perimeter: {}", rect.perimeter()); // print out the perimeter of the rectangle
} // end of main function