pub struct Vector<T> {
    // Create a public Vector struct with a generic type parameter
    data: Vec<T>, // Implement a data field that stores a Vec of type T
    len: usize, // Implement a length field of type usize
}

impl<T> Vector<T> {
    // Implement a constructor function that takes in a capacity and returns a Vector instance
    pub fn new(capacity: usize) -> Self {
        // Use the Vec::with_capacity method to initialize the data field with the given capacity
        Self {
            data: Vec::with_capacity(capacity),
            len: 0, // Set the initial length to 0
        }
    }

    // Implement a push method that takes in a value of type T and adds it to the end of the vector
    pub fn push(&mut self, value: T) {
        // Use the Vec::push method to add the value to the end of the vector
        self.data.push(value);
        // Increment the length by 1
        self.len += 1;
    }

    // Implement a get method that takes in an index of type usize and returns a reference to the value at that index
    pub fn get(&self, index: usize) -> Option<&T> {
        // Use the Vec::get method to try to get a reference to the value at the given index
        self.data.get(index)
    }
}