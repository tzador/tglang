/// This function recursively calculates the factorial of a given number
fn factorial(n: u64) -> u64 {
    // Base Case: If n = 0 or n = 1, return 1
    if n == 0 || n == 1 {
        return 1;
    }
    // Recursive Case: n * (n-1)!
    return n * factorial(n - 1);
}

/// This function calculates the sum of two numbers using the recursion method
fn sum(x: i32, y: i32) -> i32 {
    // Base Case: If y = 0, return x
    if y == 0 {
        return x;
    }
    // Recursive Case: x + (x+1) + ... + (x+y)
    return x + sum(x, y - 1);
}

/// This function calculates the n-th term of the Fibonacci sequence using recursion
fn fibonacci(n: u64) -> u64 {
    // Base Case: If n = 1 or n = 2, return 1
    if n == 1 || n == 2 {
        return 1;
    }
    // Recursive Case: F(n-1) + F(n-2)
    return fibonacci(n - 1) + fibonacci(n - 2);
}

/// Main function to call other functions and print the output
fn main() {
    // Print the factorial of 5
    println!("Factorial of 5 is {}", factorial(5));
    // Print the sum of 3 and 7
    println!("Sum of 3 and 7 is {}", sum(3, 7));
    // Print the 10th term of the Fibonacci sequence
    println!("10th term of Fibonacci sequence is {}", fibonacci(10));
}