use std::io;

// define a struct named Car
struct Car {
  make: String,
  model: String,
  year: u16,
}

impl Car {
  // a method to print the car's make, model and year
  fn print_info(&self) {
    println!("Car make: {}, model: {}, year: {}", self.make, self.model, self.year);
  }

  // a method to drive the car
  fn drive(&self) {
    println!("Driving the {} {}.", self.make, self.model);
  }

  // a method to calculate the total distance travelled
  fn total_distance(&self, speed: u16, time: f32) -> f32 {
    let distance = speed as f32 * time;
    return distance;
  }
}

fn main() {
  // prompt the user to enter car details
  println!("Enter the make of the car:");
  let mut make = String::new();
  io::stdin().read_line(&mut make).expect("Failed to read line.");

  println!("Enter the model of the car:");
  let mut model = String::new();
  io::stdin().read_line(&mut model).expect("Failed to read line.");

  println!("Enter the year of the car:");
  let mut year = String::new();
  io::stdin().read_line(&mut year).expect("Failed to read line.");

  // convert the year from String to u16
  let year: u16 = year.trim().parse().expect("Please enter a valid number.");

  // create a new Car instance
  let car = Car {
    make: make,
    model: model,
    year: year,
  };

  // call the print_info method on the car instance
  car.print_info();

  // call the drive method on the car instance
  car.drive();

  // call the total_distance method on the car instance
  // with a speed of 60km/h and a time of 3.5 hours
  let distance = car.total_distance(60, 3.5);

  // print the total distance travelled
  println!("The total distance travelled is {} km.", distance);
}