// This is a comment in Rust
use std::io::{self, Write}; // Importing the io module from the standard library

// Defining a function called "fibonacci" which takes in two parameters of type "u64"
// and returns a vector of type "u64"
fn fibonacci(n: u64, m: u64) -> Vec<u64> {
    let mut vec = Vec::new(); // Creating a new vector
    vec.push(n); // Pushing the first parameter into the vector 
    vec.push(m); // Pushing the second parameter into the vector

    // Looping through the vector and pushing the sum of the last two numbers
    for i in 2..10 {
        let next = vec[i - 1] + vec[i - 2];
        vec.push(next);
    }
    vec // Returning the vector
}

fn main() {
    print!("Enter the first number for Fibonacci sequence: ");
    io::stdout().flush().unwrap(); // Flushing the stdout buffer

    // Taking user input and converting it to a "u64" type
    // "expect" is for handling any errors that may occur during user input
    let n = u64::from_str_radix(&io::stdin().read_line().expect("Invalid Input"), 10).unwrap();

    print!("Enter the second number for Fibonacci sequence: ");
    io::stdout().flush().unwrap();

    let m = u64::from_str_radix(&io::stdin().read_line().expect("Invalid Input"), 10).unwrap();

    // Calling the "fibonacci" function and storing the returned vector in a variable
    let result = fibonacci(n, m);

    // Looping through the vector and printing out the values
    for i in 0..result.len() {
        println!("Fibonacci number {}: {}", i, result[i]);
    }
}

// Output:
/*
Enter the first number for Fibonacci sequence: 0
Enter the second number for Fibonacci sequence: 1
Fibonacci number 0: 0
Fibonacci number 1: 1
Fibonacci number 2: 1
Fibonacci number 3: 2
Fibonacci number 4: 3
Fibonacci number 5: 5
Fibonacci number 6: 8
Fibonacci number 7: 13
Fibonacci number 8: 21
Fibonacci number 9: 34
*/