#![allow(dead_code)]
use std::error::Error;

#[derive(Debug)]
struct Person {
    name: String,
    age: u8,
    height: u32,
}

impl Person {
    fn new(name: &str, age: u8, height: u32) -> Person {
        Person {
            name: String::from(name),
            age,
            height,
        }
    }

    fn print_details(&self) {
        println!(
            "Name: {}, Age: {}, Height: {}",
            self.name, self.age, self.height
        )
    }
}

fn main() -> Result<(), Box<dyn Error>> {
    let person = Person::new("John", 25, 170);
    println!("Before update: {:?}", person);
    let person_ref = &person;
    let person_mut_ref = &mut person;
    let person_ref_ptr = person_ref as *const Person;
    let person_mutable_ref_ptr = person_mut_ref as *const Person;
    println!("Pointer address for immutable reference: {:?}", person_ref_ptr);
    println!(
        "Pointer address for mutable reference: {:?}",
        person_mutable_ref_ptr
    );
    person_mut_ref.age = 30;
    person_mut_ref.height = 175;
    println!("After update: {:?}", person);

    Ok(())
}