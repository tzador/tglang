// Define a struct representing a car
struct Car {
    year: u16,
    make: String,
    model: String,
    color: String,
    mileage: u32,
    price: f64
}

// Implement methods for the car struct
impl Car {
    // Method to calculate the depreciation of the car based on its current mileage
    fn calculate_depreciation(&mut self) {
        if self.mileage <= 50000 {
            self.price = self.price * 0.9; // 10% depreciation for first 50000 miles
        } else if self.mileage > 50000 && self.mileage <= 100000 {
            self.price = self.price * 0.8; // 20% depreciation for next 50000 miles
        } else {
            self.price = self.price * 0.7; // 30% depreciation for every mile over 100000
        }
    }

    // Method to increase the mileage of the car
    fn drive(&mut self, miles: u32) {
        self.mileage += miles;
    }

    // Method to change the color of the car
    fn change_color(&mut self, new_color: String) {
        self.color = new_color;
    }
}

// Create an instance of the Car struct
let mut my_car = Car {
    year: 2019,
    make: String::from("Toyota"),
    model: String::from("Camry"),
    color: String::from("black"),
    mileage: 25000,
    price: 25000.00
};

// Invoke methods on the car instance
my_car.drive(5000); // Increase mileage by 5000 miles
my_car.change_color(String::from("red")); // Change color to red
my_car.calculate_depreciation(); // Calculate new price

// Print out final details of the car
println!("Year: {}", my_car.year);
println!("Make: {}", my_car.make);
println!("Model: {}", my_car.model);
println!("Color: {}", my_car.color);
println!("Mileage: {} miles", my_car.mileage);
println!("Price: ${:.2}", my_car.price); // Format price to two decimal places