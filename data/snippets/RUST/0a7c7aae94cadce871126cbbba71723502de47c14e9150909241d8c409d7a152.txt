// This program implements the merge sort algorithm in Rust

// Function to merge two sorted arrays
fn merge(left: &mut [i32], right: &mut [i32], result: &mut [i32]) {
    let mut l = 0;
    let mut r = 0;
    let mut i = 0;

    while l < left.len() && r < right.len() {
        if left[l] <= right[r] {
            result[i] = left[l];
            l += 1;
        } else {
            result[i] = right[r];
            r += 1;
        }
        i += 1;
    }

    // Copy remaining elements from left array
    while l < left.len() {
        result[i] = left[l];
        l += 1;
        i += 1;
    }

    // Copy remaining elements from right array
    while r < right.len() {
        result[i] = right[r];
        r += 1;
        i += 1;
    }
}

// Function to perform merge sort recursively
fn merge_sort(arr: &mut [i32]) {
    let mid = arr.len() / 2;
    if mid == 0 {
        return;
    }

    let mut left = &mut arr[0..mid];
    let mut right = &mut arr[mid..];

    // Recursive calls to split the array in two halves
    merge_sort(left);
    merge_sort(right);

    // Create temporary array to store merged subarrays
    let mut temp_arr = vec![0; arr.len()];

    // Call merge function to merge the two halves
    merge(&mut left, &mut right, &mut temp_arr);

    // Copy sorted elements back to the original array
    for i in 0..arr.len() {
        arr[i] = temp_arr[i];
    }
}


fn main() {
    let mut arr = [5, 2, 7, 1, 8, 3, 9, 4, 6];

    println!("Original array: {:?}", arr);

    // Call merge sort function
    merge_sort(&mut arr);

    println!("Sorted array: {:?}", arr);
}