// This function takes in a vector of integers and filters out the values that are not prime numbers
fn filter_prime_numbers(numbers: Vec<i32>) -> Vec<i32> {
    // Initialize an empty vector to hold the prime numbers
    let mut primes = Vec::new();
    
    // Loop through each number in the input vector
    for num in numbers {
        // Initialize a boolean flag to track if number is prime
        let mut is_prime = true;
        
        // Check if number is divisible by any number less than itself
        for i in 2..num {
            // If the number is divisible, change flag to false and break out of loop
            if num % i == 0 {
                is_prime = false;
                break;
            }
        }
        
        // If number is not divisible by any number, add it to the prime vector
        if is_prime {
            primes.push(num);
        }
    }
    
    // Return the vector of prime numbers
    primes
}

// Example input vector
let input = vec![2, 3, 4, 5, 6, 7, 8, 9, 10];

// Call the filter_prime_numbers function with input vector
let output = filter_prime_numbers(input);

// Print the output vector
println!("Prime numbers: {:?}", output);

// Output:
// Prime numbers: [2, 3, 5, 7]