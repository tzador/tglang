/// This function takes in a vector of numbers and sorts them
/// using the quicksort algorithm
fn quicksort(numbers: Vec<i32>) -> Vec<i32> {
    // If the vector has less than or equal to one element, return it
    if numbers.len() <= 1 {
        return numbers;
    }

    // Select pivot as middle element
    let pivot = numbers[numbers.len() / 2];

    // Create two empty vectors to store elements smaller and larger than pivot
    let mut smaller: Vec<i32> = Vec::new();
    let mut larger: Vec<i32> = Vec::new();

    // Iterate through numbers vector and split elements into smaller and larger vectors
    for num in numbers.iter() {
        if *num < pivot {
            smaller.push(*num);
        } else {
            larger.push(*num);
        }
    }

    // Recursively call quicksort on the smaller and larger vectors
    let mut output = Vec::new();
    output.append(&mut quicksort(smaller));
    output.push(pivot);
    output.append(&mut quicksort(larger));

    return output;
}