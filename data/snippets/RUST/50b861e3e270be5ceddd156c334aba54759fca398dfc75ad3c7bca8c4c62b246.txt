// This is a complex code snippet in Rust programming language
// It uses various data structures and functions
// It also has comments and annotations throughout for better understanding

// Create a constant array with 5 elements using the array macro
const NUMBERS: [i32; 5] = [1, 2, 3, 4, 5];

// Define a struct with two fields - a string and a boolean
struct Person {
    name: String,
    is_student: bool,
}

// Implement a function that returns the sum of all elements in an array
fn array_sum(arr: &[i32]) -> i32 {
    let mut sum = 0;
    // Loop through the array and add each element to the sum variable
    for num in arr {
        sum += num;
    }
    // Return the sum
    sum
}

// Use the 'impl' keyword to implement a method for the Person struct
impl Person {
    // Constructor for Person - takes in name and is_student as parameters
    fn new(name: String, is_student: bool) -> Person {
        Person { name, is_student }
    }

    // Method to print the name and student status of the person
    fn print_info(&self) {
        // Convert the boolean value to a string for printing
        let is_student_str = if self.is_student { "Yes" } else { "No" };
        // Print the person's name and student status
        println!("Name: {}\nStudent: {}", self.name, is_student_str);
    }
}

// Declare a main function - this is where the program execution starts
fn main() {
    // Create an empty vector to hold Person structs
    let mut person_vec: Vec<Person> = Vec::new();
    
    // Add two Person objects to the vector using the Person struct's constructor
    person_vec.push(Person::new(String::from("John"), false));
    person_vec.push(Person::new(String::from("Sarah"), true));

    // Print the names and student status of each person in the vector
    for person in person_vec.iter() {
        person.print_info();
    }

    // Calculate and print the sum of NUMBERS array using the array_sum function
    println!("Sum of NUMBERS: {}", array_sum(&NUMBERS));
}