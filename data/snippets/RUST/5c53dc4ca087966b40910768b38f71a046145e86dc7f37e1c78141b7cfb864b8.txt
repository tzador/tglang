use std::collections::HashMap; // Import the HashMap module from the standard library

const MAX_VALUE: i32 = 100; // Declare a constant variable with type annotation

struct Person { // Declare a struct named "Person"
    name: String, // Add a field "name" of type String
    age: u32, // Add a field "age" of type u32
    address: Option<String>, // Add a field "address" of type Option<String>
    interests: Vec<String>, // Add a field "interests" of type Vec<String>
}

impl Person { // Implement methods for the "Person" struct
    fn new(name: &str, age: u32) -> Self { // Create a static method "new" for instantiating a Person
        Self { // Return a new instance of Person
            name: String::from(name), // Set the "name" field to the given name
            age, // Set the "age" field to the given age
            address: None, // Set the "address" field to None
            interests: Vec::new(), // Initialize the "interests" field as an empty Vec
        }
    }

    fn add_address(&mut self, address: &str) { // Define a method for adding an address to a Person instance
        self.address = Some(String::from(address)); // Set the "address" field to Some(String)
    }

    fn add_interest(&mut self, interest: &str) { // Define a method for adding an interest to a Person instance
        self.interests.push(String::from(interest)); // Push the given interest into the "interests" Vec
    }
}

fn main() {
    let mut person = Person::new("John", 32); // Instantiate a new Person with name "John" and age 32
    person.add_address("123 Main St"); // Call the "add_address" method to add an address to the person
    person.add_interest("Programming"); // Call the "add_interest" method to add an interest to the person

    let interests_string = person.interests.join(", "); // Create a string by joining the interests Vec with ", "

    println!("Name: {}", person.name); // Print the person's name
    println!("Age: {}", person.age); // Print the person's age
    println!("Address: {}", person.address.unwrap()); // Print the person's address
    println!("Interests: {}", interests_string); // Print the person's interests
}