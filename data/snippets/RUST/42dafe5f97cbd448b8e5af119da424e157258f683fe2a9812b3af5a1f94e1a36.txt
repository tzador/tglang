//This code snippet creates a struct object with multiple fields
struct Person {
    name: String,
    age: u8,
    hobbies: Vec<String>,
    is_male: bool,
    address: Address,
}

//This code creates a nested struct object
struct Address {
    street: String,
    city: String,
}

impl Person {
    //This method calculates the person's year of birth based on their age
    fn calculate_year_of_birth(&self) -> u16 {
        let current_year = 2021;
        let birth_year = current_year - self.age as u16;
        birth_year
    }

    //This method adds a new hobby to the person's hobbies vector
    fn add_hobby(&mut self, hobby: String) {
        self.hobbies.push(hobby);
    }

    //This method updates the person's city in the address nested struct
    fn update_city(&mut self, city: String) {
        self.address.city = city;
    }
}

//Main function to test the code
fn main() {
    //Initializing a person object with values for each field
    let mut person = Person {
        name: String::from("John Smith"),
        age: 30,
        hobbies: vec![String::from("Reading"), String::from("Hiking")],
        is_male: true,
        address: Address {
            street: String::from("123 Main Street"),
            city: String::from("New York"),
        },
    };

    //Calling the methods from the Person struct
    println!("Year of birth: {}", person.calculate_year_of_birth());
    person.add_hobby(String::from("Gardening"));
    println!("Hobbies: {:?}", person.hobbies);
    person.update_city(String::from("Chicago"));
    println!("Address: {}, {}", person.address.street, person.address.city);
}

//Expected Output:
// Year of birth: 1991
// Hobbies: ["Reading", "Hiking", "Gardening"]
// Address: 123 Main Street, Chicago