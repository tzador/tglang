fn main() {
    // Initialize variable x to 10
    let x = 10;
    
    // Create a struct with a generic type parameter
    struct Example<T> {
        value: T,
    }
    
    // Use impl block to define methods for the struct
    impl<T> Example<T> {
        // Method to print the value of the struct
        fn print_value(&self) {
            println!("The value is {:?}", self.value);
        }
        
        // Method to add 5 to the value and return the result
        fn add_five(&self) -> T
            // Use the 'std' library to perform mathematical operations
            where T: std::ops::Add<Output = T> + Copy,
        {
            self.value + 5
        }
    }
    
    // Create an instance of the Example struct with type u32
    let example = Example {value: 15u32};
    
    // Call the print_value method on the struct instance
    example.print_value();
    
    // Call the add_five method and print the result
    println!("After adding 5, the value is {:?}", example.add_five());
    
    // Use pattern matching to check if the value is an even or odd number
    match example.value % 2 {
        // If value is even, print "Even"
        0 => println!("Even"),
        
        // If value is odd, print "Odd"
        _ => println!("Odd")
    }
}