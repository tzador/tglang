/// An example struct with a generic type T
struct CustomStruct<T> {

    /// A public field of type T
    pub field: T,

    /// An optional field of type Option<T>
    optional_field: Option<T>
}

/// Trait to define a method that takes in a reference to a CustomStruct
trait CustomTrait {
    /// A method that takes in a reference to a CustomStruct and returns a string
    fn print_struct(&self, custom_struct: &CustomStruct<T>) -> String;
}

/// Implementation of CustomTrait for CustomStruct with T = String
impl CustomTrait for CustomStruct<String> {
    /// Print the field values of the CustomStruct as a concatenated string
    fn print_struct(&self, custom_struct: &CustomStruct<String>) -> String {
        format!("The field is {} and the optional field is {:?}", self.field, self.optional_field)
    }
}

fn main() {
    // Create an instance of CustomStruct with type T = String
    let string_struct = CustomStruct {
        field: "Hello".to_string(),
        optional_field: Some("world".to_string())
    };
    
    // Call the print_struct method on the CustomStruct instance
    let result = string_struct.print_struct(&string_struct);

    // Print the result to the console
    println!("{}", result);
}