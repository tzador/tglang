// Create a struct called "Person" with three fields: "name" of type String, "age" of type u32, and "address" of type String
struct Person {
    name: String,
    age: u32, 
    address: String,
}

// Create an implementation block for the Person struct
impl Person {

    // Define a method called "introduce" that takes in a mutable reference to self 
    // and prints out a statement introducing the Person
    fn introduce(&self) {
        println!("Hello, my name is {}, I am {} years old, and I live at {}.", self.name, self.age, self.address);
    }

    // Define a method called "update_age" that takes in a mutable reference to self 
    // and a new age as parameters, and updates the Person's age to the new age value
    fn update_age(&mut self, new_age: u32) {
        self.age = new_age;
    } 
}

// Create a new instance of the Person struct with the name "John", age 30, and address "123 Main Street"
let mut john = Person {
    name: String::from("John"),
    age: 30,
    address: String::from("123 Main Street"),
};

// Call the "introduce" method on the john instance to print out his introduction
john.introduce();

// Update john's age to 35 using the "update_age" method
john.update_age(35);

// Call the "introduce" method again to print out his updated introduction
john.introduce();