// This function checks if a number is prime
// and returns a boolean value
fn is_prime(num: u32) -> bool {
    // using trial division to check for prime
    // iterate through numbers from 2 to square root of the number
    for i in 2..=((num as f64).sqrt() as u32) {
        // check if the number is divisible by any number within the range
        if num % i == 0 {
            // if the number is divisible, then it is not prime
            return false;
        }
    }
    // if no number within the range divides the number, then it is prime
    return true;
}

// This function generates a list of prime numbers up to a given limit
// and returns a vector containing the numbers
fn generate_prime_numbers(limit: u32) -> Vec<u32> {
    // initialize an empty vector to store the prime numbers
    let mut prime_numbers = Vec::new();

    // iterate through numbers from 2 to the limit
    for i in 2..=limit {
        // check if the number is prime using the is_prime function
        if is_prime(i) {
            // if the number is prime, add it to the vector
            prime_numbers.push(i);
        }
    }
    // return the vector of prime numbers
    return prime_numbers;
}

// calling the generate_prime_numbers function with a limit of 100 and printing the result
// expected output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
let prime_numbers = generate_prime_numbers(100);
println!("{:?}", prime_numbers);