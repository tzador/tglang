#[derive(Clone, Copy)]
struct Rectangle {
  width: u32,
  height: u32,
}

impl Rectangle {
    // method to calculate area
    fn area(&self) -> u32 {
        self.width * self.height
    }

    // method to determine if a rectangle can fit inside another rectangle
    fn can_fit_in(&self, other: &Rectangle) -> bool {
        self.width < other.width && self.height < other.height
    }
}

fn main() {
    // create two rectangles
    let rectangle_one = Rectangle { width: 5, height: 10 };
    let rectangle_two = Rectangle { width: 3, height: 12 };

    // print the areas of both rectangles
    println!("Area of rectangle one: {}", rectangle_one.area());
    println!("Area of rectangle two: {}", rectangle_two.area());

    // check if rectangle one can fit inside rectangle two
    if rectangle_one.can_fit_in(&rectangle_two) {
        println!("Rectangle one can fit inside rectangle two!");
    } else {
        println!("Rectangle one cannot fit inside rectangle two.");
    }
}