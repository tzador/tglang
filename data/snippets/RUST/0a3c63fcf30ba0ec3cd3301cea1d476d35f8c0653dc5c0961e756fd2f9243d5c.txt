use std::io;

// Define a struct called Person
struct Person {
    name: String,
    age: u32,
    occupation: String
}

// Implement a method for the Person struct to greet based on their age
impl Person {
    fn greet(&self) {
        if self.age < 18 {
            println!("Hello, {}! You are too young to have a job as a {}.", self.name, self.occupation);
        } else {
            println!("Hello, {}! You are {} years old and work as a {}.", self.name, self.age, self.occupation);
        }
    }
}

fn main() {
    // Prompt user to enter their name
    println!("Please enter your name:");

    // Create a variable to store user input
    let mut name = String::new();

    // Read user input and assign it to the name variable
    io::stdin().read_line(&mut name)
        .expect("Failed to read line");

    // Convert user input to a String and remove any trailing white space
    let name = name.trim().to_string();

    // Prompt user to enter their age
    println!("Please enter your age:");

    // Create a variable to store user input
    let mut age = String::new();

    // Read user input and assign it to the age variable
    io::stdin().read_line(&mut age)
        .expect("Failed to read line");

    // Convert user input to an unsigned 32-bit integer
    let age: u32 = age.trim().parse()
        .expect("Please enter a valid age");

    // Prompt user to enter their occupation
    println!("Please enter your occupation:");

    // Create a variable to store user input
    let mut occupation = String::new();

    // Read user input and assign it to the occupation variable
    io::stdin().read_line(&mut occupation)
        .expect("Failed to read line");

    // Convert user input to a String and remove any trailing white space
    let occupation = occupation.trim().to_string();

    // Create a new Person instance with the user's information
    let person = Person {
        name,
        age,
        occupation,
    };

    // Call the greet method on the person instance
    person.greet();
}