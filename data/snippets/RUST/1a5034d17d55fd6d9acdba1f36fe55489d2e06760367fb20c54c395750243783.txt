// Create a vector with initial values
let mut numbers = Vec::with_capacity(5);
numbers.push(1);
numbers.push(2);
numbers.push(3);
numbers.push(4);
numbers.push(5);

// Create a function to filter out even numbers
fn filter_evens(vec: &Vec<i32>) -> Vec<i32> {
    let mut result = Vec::new();
    for &num in vec {
        if num % 2 == 0 {
            result.push(num);
        }
    }
    result
}

// Use the function to filter the vector
let even_numbers = filter_evens(&numbers);

// Create a closure that squares a number
let square = |x| x * x;

// Use the closure to map over the even numbers and square them
let squares: Vec<i32> = even_numbers.iter().map(square).collect();

// Print the squares in reverse order
for num in squares.iter().rev() {
    println!("{}", num);
}