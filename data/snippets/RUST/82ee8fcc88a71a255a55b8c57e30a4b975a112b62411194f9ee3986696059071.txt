/// Struct holding information about a car
struct Car {
    model: String,      // the car model
    year: u16,          // the year the car was manufactured
    color: String,      // the color of the car
    engine: Engine,     // the car's engine details
    features: Vec<String>, // a list of the car's features
}

impl Car {
    /// Function to create a new car with given parameters
    fn new(model: &str, year: u16, color: &str, engine: Engine, features: Vec<String>) -> Car {
        Car {
            model: String::from(model),
            year,
            color: String::from(color),
            engine,
            features,
        }
    }

    /// Function to print out the car's information
    fn print_info(&self) {
        println!("Model: {}", self.model);
        println!("Year: {}", self.year);
        println!("Color: {}", self.color);
        println!("Engine: {}", self.engine);
        println!("Features: {:?}", self.features);
    }
}

/// Enum defining different engine types
enum Engine {
    Gasoline(u16, u16),     // holds horsepower and torque values
    Electric(u16),          // holds power value in kW
    Diesel(u16),            // holds displacement value in cc
}

fn main() {
    // create a new car instance
    let car = Car::new("Mustang GT", 2021, "Red", Engine::Gasoline(460, 420), vec!["Automatic Transmission".to_string(), "Brembo Brakes".to_string()]);
    
    // print information about the car
    car.print_info();
}