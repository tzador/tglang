struct Queue<T> {
    elements: Vec<T>,
    head: usize,
    tail: usize,
    size: usize,
}

impl<T> Queue<T> {
    // initialize a new Queue with a specified capacity
    fn new(new_size: usize) -> Queue<T> {
        Queue {
            elements: Vec::with_capacity(new_size),
            head: 0,
            tail: 0,
            size: 0,
        }
    }

    // check if the Queue is empty
    fn is_empty(&self) -> bool {
        self.size == 0
    }

    // add a new item to the end of the Queue
    fn enqueue(&mut self, element: T) {
        if self.size == self.elements.capacity() {
            // if Queue is full, double its capacity
            self.resize(2 * self.size);
        }
        self.elements[self.tail] = element; // add element to end of Queue
        self.tail = (self.tail + 1) % self.elements.capacity(); // update tail index
        self.size += 1; // increment size
    }

    // remove the first item from the Queue and return it
    fn dequeue(&mut self) -> Option<T> {
        if !self.is_empty() {
            let element = self.elements[self.head]; // get element at front of Queue
            self.head = (self.head + 1) % self.elements.capacity(); // update head index
            self.size -= 1; // decrement size
            Some(element) // return element
        } else {
            None // if Queue is empty, return None
        }
    }

    // resize the Queue to a new capacity
    fn resize(&mut self, new_capacity: usize) {
        let mut new_elements: Vec<T> = Vec::with_capacity(new_capacity);
        for i in 0..self.size {
            new_elements[i] = self.elements[(self.head + i) % self.size]; // copy elements to new Queue
        }
        self.elements = new_elements; // assign new Queue to self
        self.head = 0; // reset head index
        self.tail = self.size; // set tail index to end of Queue
    }
}

fn main() {
    let mut queue: Queue<u32> = Queue::new(5); // create Queue of u32 values with capacity of 5
    queue.enqueue(2); // add 2 to Queue
    queue.enqueue(6); // add 6 to Queue
    queue.enqueue(9); // add 9 to Queue
    println!("{}", queue.dequeue().unwrap()); // dequeue and print first item in Queue (2)
}