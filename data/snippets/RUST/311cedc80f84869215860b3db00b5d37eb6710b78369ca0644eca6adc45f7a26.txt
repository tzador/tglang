// Define a struct for a car
struct Car {
    make: String,
    model: String,
    year: u32,
    color: String,
    mileage: u32,
    engine_size: f64,
    is_running: bool,
}

impl Car {
    
    // Method to start the car
    fn start(&mut self) {
        self.is_running = true;
        println!("The {} {} has been started!", self.year, self.model);
    }
    
    // Method to drive the car
    fn drive(&self, distance: u32) {
        if self.is_running {
            self.mileage += distance;
            println!("You have driven {} miles. The total mileage is now {}.", distance, self.mileage);
        } else {
            println!("The car needs to be started before driving.");
        }
    }
    
    // Method to stop the car
    fn stop(&mut self) {
        self.is_running = false;
        println!("The {} {} has been stopped.", self.year, self.model);
    }
}

// Create an instance of a car
let mut my_car = Car {
    make: String::from("Toyota"),
    model: String::from("Camry"),
    year: 2010,
    color: String::from("Silver"),
    mileage: 50000,
    engine_size: 2.5,
    is_running: false,
};

// Start the car
my_car.start();

// Drive the car for 100 miles
my_car.drive(100);

// Stop the car
my_car.stop();