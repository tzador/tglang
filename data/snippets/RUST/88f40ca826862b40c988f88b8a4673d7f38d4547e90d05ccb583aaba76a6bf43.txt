#![allow(unused_variables)]
// This is a comment in RUST.
extern crate rand; // Import the rand crate for generating random numbers.

use std::io; // Import the standard input/output library.
use std::cmp::Ordering; // Import the Ordering enum for comparing values.
use rand::Rng; // Import the Rng trait for generating random numbers.

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1, 101); // Generate a secret number between 1 and 100.

    loop { // Start a loop that will continue until the correct number is guessed.
        println!("Please input your guess:");

        let mut guess = String::new(); // Create a mutable string variable to store the user's guess.

        io::stdin().read_line(&mut guess).expect("Failed to read line"); // Read user input and store it in the guess variable.

        let guess: u32 = match guess.trim().parse() { // Convert the guess string to an unsigned 32-bit integer.
            Ok(num) => num, // If the conversion is successful, return the number.
            Err(_) => continue, // If the conversion fails, continue the loop.
        };

        println!("You guessed: {}", guess); // Print the user's guess.

        match guess.cmp(&secret_number) { // Compare the user's guess to the secret number.
            Ordering::Less => println!("Too small!"), // If the guess is less than the secret number, print "Too small!".
            Ordering::Greater => println!("Too big!"), // If the guess is greater than the secret number, print "Too big!".
            Ordering::Equal => { // If the guess is equal to the secret number, break out of the loop and end the program.
                println!("You win!");
                break;
            }
        }
    }
}