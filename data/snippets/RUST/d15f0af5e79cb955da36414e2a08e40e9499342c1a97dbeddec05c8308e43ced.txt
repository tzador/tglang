/// Returns the n-th Fibonacci number
fn fib(n: u32) -> u32 {
    // Use dynamic programming to store previously computed Fibonacci numbers
    let mut fib_numbers = vec![0; n+1];
    fib_numbers[0] = 0;
    fib_numbers[1] = 1;

    // Use a loop to calculate n-th Fibonacci number
    for i in 2..=n {
        fib_numbers[i as usize] = fib_numbers[i as usize - 1] + fib_numbers[i as usize - 2];
    }

    // Return the n-th Fibonacci number
    fib_numbers[n as usize]
}

// Main function to call the fib function and print the result
fn main() {
    let n = 10; // Change this value to get the n-th Fibonacci number you want
    let fib_n = fib(n); // Call the fib function to get the n-th Fibonacci number
    println!("Fibonacci number at position {} is {}", n, fib_n); // Print the result
}