/// This function takes two mutable references to vectors
/// and merges them into a single vector, then returns it.
fn merge_vectors<T>(mut vec1: &mut Vec<T>, mut vec2: &mut Vec<T>) -> Vec<T> {
    let mut merged_vec: Vec<T> = Vec::new(); // Create new vector to store merged values
    while !vec1.is_empty() && !vec2.is_empty() {
        match vec1[0] < vec2[0] {
            true => merged_vec.push(vec1.remove(0)), // Add smallest value to merged vector
            false => merged_vec.push(vec2.remove(0)),
        }
    }
    if !vec1.is_empty() {
        merged_vec.append(&mut vec1); // Add remaining values from vec1
    }
    if !vec2.is_empty() {
        merged_vec.append(&mut vec2); // Add remaining values from vec2
    }
    merged_vec // Return merged vector
}

// Example usage:
let mut vec1 = vec![1, 3, 5, 7];
let mut vec2 = vec![2, 4, 6, 8];

let merged_vec = merge_vectors(&mut vec1, &mut vec2);
assert_eq!(merged_vec, vec![1, 2, 3, 4, 5, 6, 7, 8]);