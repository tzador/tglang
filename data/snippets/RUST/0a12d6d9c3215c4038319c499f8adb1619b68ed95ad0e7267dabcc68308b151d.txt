/**
* This function takes in a vector of integers and a target integer. 
* It returns a vector of tuples, each tuple containing two integers from the given vector whose sum equals the target.
* If no two integers in the vector add up to the target, an empty vector is returned.
* The time complexity is O(n) since it uses a HashMap to store the potential complement of each integer in the vector.
**/

fn two_sum(nums: Vec<i32>, target: i32) -> Vec<(i32, i32)> {
    let mut complement_map = HashMap::new(); // create a HashMap to store the potential complement of each integer
    let mut result: Vec<(i32, i32)> = Vec::new(); // create an empty vector to store the result
    for num in nums.iter() {
        let complement = target - num; // calculate the potential complement of the current integer
        if let Some(idx) = complement_map.get(&(complement)) { // check if the complement has been seen before
            result.push((*idx, *num)); // if so, add the current integer and its complement in the result vector
        }
        complement_map.insert(num, *num); // insert the current integer as a key and value in the HashMap
    }
    result // return the result vector
}