/// Takes in a vector and mutably sorts it using the quicksort algorithm
fn quicksort<T: Ord>(arr: &mut Vec<T>, start: usize, end: usize) {
    // Base case: If starting index is greater than or equal to ending index, return
    if start >= end {
        return;
    }

    // Pick pivot element, in this case, the last element
    let pivot = arr[end];
    // Index of the smaller element
    let mut i = start;

    for j in start..end {
        // If current element is smaller than or equal to pivot
        if arr[j] <= pivot {
            // Swap arr[i] and arr[j]
            arr.swap(i, j);
            // Increment index of smaller element
            i += 1;
        }
    }

    // Swap arr[i] and arr[end] (pivot)
    arr.swap(i, end);

    // Recursively call quicksort for left and right partitions
    quicksort(arr, start, i - 1);
    quicksort(arr, i + 1, end);
}

/// Example usage
fn main() {
    let mut vec = vec![5, 2, 9, 1, 7];
    quicksort(&mut vec, 0, vec.len() - 1);
    println!("{:?}", vec); // [1, 2, 5, 7, 9]
}