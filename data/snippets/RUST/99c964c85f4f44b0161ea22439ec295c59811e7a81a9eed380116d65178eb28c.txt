// A function that calculates the nth Fibonacci number
fn fibonacci(n: i32) -> i32 {
    // Create a vector to store the Fibonacci sequence
    let mut fib_numbers: Vec<i32> = Vec::new();

    // Add the first two Fibonacci numbers to the vector
    fib_numbers.push(0);
    fib_numbers.push(1);

    // Loop through the vector until it has n+1 numbers
    // Each iteration calculates the next Fibonacci number and adds it to the vector
    while fib_numbers.len() <= n as usize {
        let next_fib = fib_numbers[fib_numbers.len() - 1] + fib_numbers[fib_numbers.len() - 2];
        fib_numbers.push(next_fib);
    }

    // Return the nth Fibonacci number from the vector
    fib_numbers[n as usize]
}

// Call the fibonacci function with n=10
let result = fibonacci(10);

// Print the result
println!("The 10th Fibonacci number is {}", result);