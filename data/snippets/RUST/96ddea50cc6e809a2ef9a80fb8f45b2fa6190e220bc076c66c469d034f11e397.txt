fn main() {
    let mut vector: Vec<i32> = Vec::new(); // declare a mutable vector of type i32
    let array = [1, 2, 3, 4, 5]; // declare an array
    for i in &array { // iterate through the array using a reference
        vector.push(*i * 2); // multiply each element by 2 and push it to the vector
    }

    // create a struct with generic type
    struct MyStruct<T> {
        value: T,
        other: Option<String>,
    }

    // define implementations for MyStruct
    impl<T> MyStruct<T> {
        // method to return the value
        fn get_value(&self) -> &T {
            &self.value
        }

        // method to set the option value
        fn set_other(&mut self, new_value: String) {
            self.other = Some(new_value);
        }
    }

    // create an instance of MyStruct with type i32
    let my_instance = MyStruct { 
        value: 10, 
        other: None 
    };

    // call the method to get the value
    let value = my_instance.get_value();
}