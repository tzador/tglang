// Declare a struct named 'Person' with three fields
struct Person {
    name: String,
    age: u32,
    occupation: String,
}

// Implement a method for the Person struct
impl Person {

    // A method to calculate the birth year of the person
    fn calculate_birth_year(&self) -> u32 {

        // Get the current year
        let current_year = chrono::offset::Local::now().year();

        // Subtract the age of the person from the current year
        let birth_year = current_year - self.age;

        // Return the birth year
        birth_year
    }
}

// Create a vector of Person structs
let people = vec![
    Person{
        name: String::from("John"),
        age: 25,
        occupation: String::from("Software Engineer"),
    },
    Person {
        name: String::from("Mary"),
        age: 30,
        occupation: String::from("Project Manager"),
    },
    Person {
        name: String::from("Mike"),
        age: 40,
        occupation: String::from("Data Analyst"),
    }
];

// Iterate through the vector and print the name and birth year of each person
for person in &people {
    println!("Name: {}, Birth Year: {}", person.name, person.calculate_birth_year());
}