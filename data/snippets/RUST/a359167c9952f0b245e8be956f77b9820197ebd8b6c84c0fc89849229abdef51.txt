#![allow(unused_mut)]
//Declare a function using the 'fn' keyword, with a generic type 'T'
fn get_total<T>(numbers: &[T]) -> T
where
    T: std::ops::Add + Copy,
{
    //Declare a mutable variable 'total' and assign it a default value of the first element in the array
    let mut total: T = numbers[0];
    //Iterate through the remaining elements in the array
    for num in numbers.iter().skip(1) {
        //Add each element to the 'total' variable
        total = total.add(*num);
    }
    //Return the final value of the 'total' variable
    total
}

//Declare a generic struct 'Array' with a generic type 'T'
struct Array<T> {
    //Declare a private field 'data' of type Vec<T>
    data: Vec<T>,
}

impl<T> Array<T> {
    //Implement the 'new' associated function for the 'Array' struct, with a parameter 'data' of type Vec<T>
    fn new(data: Vec<T>) -> Array<T> {
        Array { data }
    }
    //Implement the 'get_data' method to return the private 'data' field
    fn get_data(self) -> Vec<T> {
        self.data
    }
}

fn main() {
    //Declare an array of type usize
    let numbers = [1, 2, 3, 4, 5];
    //Call the 'get_total' function, passing in the array as an argument
    let total = get_total(&numbers);
    //Print the total value
    println!("Total: {}", total);

    //Create a new instance of the 'Array' struct with a vector of strings
    let array = Array::new(vec!["Hello", "World", "!"]);
    //Call the 'get_data' method on the 'array' instance and store the returned value in a variable
    let data = array.get_data();
    //Print the data
    println!("Data: {:?}", data);
}