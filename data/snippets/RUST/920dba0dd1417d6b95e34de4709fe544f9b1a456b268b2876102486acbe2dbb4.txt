// This code snippet demonstrates a basic implementation of a binary search tree in Rust

struct Node<T> {
    data: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

impl<T: Ord> Node<T> {
    // Function to insert a new value into the binary search tree
    fn insert(&mut self, new_value: T) {
        if new_value >= self.data {
            // Check if the right child exists, if not, create a new node
            if let Some(ref mut right) = self.right {
                right.insert(new_value);
            } else {
                self.right = Some(Box::new(Node {
                    data: new_value,
                    left: None,
                    right: None,
                }));
            }
        } else {
            // Check if the left child exists, if not, create a new node
            if let Some(ref mut left) = self.left {
                left.insert(new_value);
            } else {
                self.left = Some(Box::new(Node {
                    data: new_value,
                    left: None,
                    right: None,
                }));
            }
        }
    }

    // Function to search for a value in the binary search tree
    fn search(&self, target: &T) -> bool {
        if target == &self.data {
            // Target value is equal to current node's value, return true
            true
        } else if target < &self.data {
            // Target value is less than current node's value, search in left subtree
            if let Some(ref left) = self.left {
                left.search(target)
            } else {
                // No left child exists, target value not found
                false
            }
        } else {
            // Target value is greater than current node's value, search in right subtree
            if let Some(ref right) = self.right {
                right.search(target)
            } else {
                // No right child exists, target value not found
                false
            }
        }
    }
}

// Example usage of the binary search tree
fn main() {
    // Create a new node with value 2
    let mut root = Node {
        data: 2,
        left: None,
        right: None,
    };
    // Insert values
    root.insert(5);
    root.insert(1);
    root.insert(3);
    root.insert(10);
    root.insert(8);

    // Search for values
    assert_eq!(root.search(&5), true); // Output: true
    assert_eq!(root.search(&10), true); // Output: true
    assert_eq!(root.search(&4), false); // Output: false
}