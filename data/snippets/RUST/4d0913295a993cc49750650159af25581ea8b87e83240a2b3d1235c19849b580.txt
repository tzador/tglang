#![allow(unused_variables)]

use std::collections::{HashMap, HashSet};
use std::fs::File;
use std::io::{BufRead, BufReader};
use std::str::FromStr;

// Defining a struct called User with fields name, age, and email
struct User {
    name: String,
    age: u32,
    email: String,
}

impl User {
    // Defining a function to create a new user object
    fn new(name: String, age: u32, email: String) -> Self {
        User { name, age, email }
    }
}

fn main() {
    // Creating a vector of strings
    let names = vec!["John", "Mary", "David", "Anna", "Michael"];

    // Creating a HashMap to store user data
    let mut users: HashMap<String, User> = HashMap::new();

    // Looping through the names vector
    for name in names {
        // Generating random age between 18 and 65
        let age = rand::thread_rng().gen_range(18, 66);

        // Generating a random email address
        let mut email = String::new();

        // Appending the email domain
        email.push_str(&name.to_lowercase());
        email.push_str("@example.com");

        // Creating a new user using the User struct and the generate values
        let user = User::new(name.to_string(), age, email);

        // Adding the user to the HashMap with their name as the key
        users.insert(user.name.clone(), user);
    }

    // Creating a HashSet to store all the unique email addresses
    let mut unique_emails: HashSet<String> = HashSet::new();

    // Looping through the values in the HashMap
    for user in users.values() {
        // Inserting the user's email into the HashSet
        unique_emails.insert(user.email.clone());
    }

    // Sorting the email addresses in alphabetical order
    let mut sorted_emails: Vec<String> = unique_emails.into_iter().collect();
    sorted_emails.sort();

    // Looping through the sorted emails and printing them out
    for email in sorted_emails {
        println!("{}", email);
    }

    // Opening a file to read email addresses from
    let file = File::open("emails.txt").expect("Failed to open file");

    // Creating a reader to read from the file
    let reader = BufReader::new(file);

    // Looping through the lines in the file
    for line in reader.lines() {
        // Converting the line to a String and removing white spaces and new lines
        let email = line.unwrap().trim().to_string();

        // Checking if the email is in the HashMap
        if users.contains_key(&email) {
            println!("User {} found!", email);

            // Printing out the user's age
            println!("Age: {}", users[&email].age);

            // Printing out the user's name
            println!("Name: {}", users[&email].name);
        } else {
            println!("User {} not found :(", email);
        }
    }
}