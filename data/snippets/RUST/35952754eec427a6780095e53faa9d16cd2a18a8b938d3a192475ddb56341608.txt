use std::io;

// Define a struct called 'User' with three fields: username, email, and age
struct User {
    username: String,
    email: String,
    age: u32,
}

// Implement a method on the struct 'User' called 'print_user' that prints out the user's information
impl User {
    fn print_user(&self) {
        println!("Username: {}", self.username);
        println!("Email: {}", self.email);
        println!("Age: {}", self.age);
    }
}

// Create a vector of type 'User', add three User objects to it
let mut users = vec![
    User{
        username: String::from("John"),
        email: String::from("john@gmail.com"),
        age: 25
    },
    User{
        username: String::from("Jane"),
        email: String::from("jane@gmail.com"),
        age: 30
    },
    User{
        username: String::from("Bob"),
        email: String::from("bob@gmail.com"),
        age: 40
    }
];

// Prompt the user for their username, email, and age and create a new User object with that information
println!("Enter your username:");
let mut username = String::new();
io::stdin().read_line(&mut username).expect("Failed to read input");
println!("Enter your email:");
let mut email = String::new();
io::stdin().read_line(&mut email).expect("Failed to read input");
println!("Enter your age:");
let mut age = String::new();
io::stdin().read_line(&mut age).expect("Failed to read input");
let age: u32 = age.trim().parse().expect("Please enter a valid integer");
let new_user = User{
    username: username.trim().to_string(),
    email: email.trim().to_string(),
    age: age,
};

// Add the new user to the vector
users.push(new_user);

// Access the print_user method on each User object in the vector and print out their information
for user in &users {
    user.print_user();
}