use std::io::{self, BufRead}; // importing io and BufRead modules from the standard library

struct Person { // defining a struct called Person
    name: String, // adding a field to the struct called "name" of type String
    age: u8, // adding a field to the struct called "age" of type u8
    address: String, // adding a field to the struct called "address" of type String
}

impl Person { // implementing methods for the Person struct
    // defining a function called "new" for the Person struct that takes in a name, age, and address and returns a Person struct
    fn new(name: String, age: u8, address: String) -> Person {
        Person { // initializing a new Person struct with the given parameters
            name, // using shorthand notation to assign the name field
            age, // using shorthand notation to assign the age field
            address, // using shorthand notation to assign the address field
        }
    }

    // defining a function called "print_info" for the Person struct that prints the name, age, and address of a Person
    fn print_info(&self) {
        println!("Name: {}", self.name); // printing the name field
        println!("Age: {}", self.age); // printing the age field
        println!("Address: {}", self.address); // printing the address field
    }
}

fn main() {
    let stdin = io::stdin(); // creating a new instance of stdin from the io module
    let input = stdin.lock().lines().next().unwrap().unwrap(); // taking user input and storing it in a variable

    let person = Person::new("John".to_string(), 25, input); // initializing a new Person using the "new" function and passing in the user input
    person.print_info(); // calling the "print_info" function on the newly created Person struct
}