fn main() {

    // Define a vector variable named "numbers" with initial values
    let mut numbers = vec![10, 5, 7, 12, 3];

    // Sort the vector in descending order
    numbers.sort_by(|a, b| b.cmp(a));

    // Initialize a new vector variable with filtered values from the original vector
    let filtered_numbers = numbers
        .iter()
        .filter(|&num| num > 5)
        .cloned()
        .collect::<Vec<_>>();

    // Create a mapping closure that squares a number and adds two
    let square_and_add2 = |x: i32| x * x + 2;

    // Map the filtered numbers vector with the closure and collect the results
    let squared_and_added = filtered_numbers
        .iter()
        .map(|num| square_and_add2(*num))
        .collect::<Vec<_>>();

    // Print the final result
    println!("{:?}", squared_and_added);
}