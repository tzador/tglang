fn main() {
    // creating a vector of type string with initial values
    let mut weeks = vec!["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];

    // iterating through the vector and printing each value
    for day in weeks.iter() {
        println!("{}", day);
    }

    // adding new element to the end of the vector
    weeks.push("New Day");

    // removing element at index 3 from the vector
    weeks.remove(3);

    // creating a new vector with only the days that start with the letter "T"
    let t_days: Vec<&str> = weeks
        .into_iter()
        .filter(|day| day.starts_with("T"))
        .collect();

    // creating an enum for different types of weather
    enum Weather {
        Sunny,
        Cloudy,
        Rainy
    }

    // creating a struct with fields for day and weather type
    struct DailyWeather {
        day: String,
        weather: Weather,
    }

    // creating a vector of DailyWeather structs with pre-defined values
    let daily_weather = vec![
        DailyWeather { day: String::from("Monday"), weather: Weather::Sunny },
        DailyWeather { day: String::from("Tuesday"), weather: Weather::Rainy },
        DailyWeather { day: String::from("Wednesday"), weather: Weather::Cloudy },
        DailyWeather { day: String::from("Thursday"), weather: Weather::Sunny },
        DailyWeather { day: String::from("Friday"), weather: Weather::Cloudy },
        DailyWeather { day: String::from("Saturday"), weather: Weather::Rainy },
        DailyWeather { day: String::from("Sunday"), weather: Weather::Sunny },
    ];

    // iterating through the vector of DailyWeather structs and printing the weather for each day
    for day_weather in daily_weather.iter() {
        match day_weather.weather {
            Weather::Sunny => println!("{} will be sunny.", day_weather.day),
            Weather::Cloudy => println!("{} will be cloudy.", day_weather.day),
            Weather::Rainy => println!("{} will be rainy.", day_weather.day),
        }
    }
}