#![allow(dead_code)]
#![allow(unused_imports)]

use std::fs::File;
use std::io::{BufReader, Read};
use std::path::Path;

fn main() {
    let path = Path::new("data.txt"); // creating a Path object

    let file = match File::open(&path) { //match statement for handling errors
        Ok(file_handle) => file_handle,   // if file is successfully opened, store file handle
        Err(err) => panic!("Failed to open file: {}", err), // else, panic with error message
    };

    let mut reader = BufReader::new(file); // creating a BufReader object for more optimized reading

    let mut content = String::new(); // creating empty String to store data from file

    reader.read_to_string(&mut content).expect("Failed to read file"); // read file content into String and panic if there's an error

    let data: Vec<&str> = content.split(", ").collect(); // split String by comma and space to get individual pieces of data, store in a vector

    let mut sum = 0; // initialize sum variable

    for num in data { // iterate through vector
        let parsed_num = num.parse::<i32>().unwrap(); // parse each string as an i32 integer and unwrap it if it succeeds
        sum += parsed_num; // add each number to sum
    }

    println!("Sum of numbers in file: {}", sum); // print final sum
}