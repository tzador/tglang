// Define a nested struct
struct Account {
    username: String,
    email: String,
}

struct User {
    name: String,
    age: i32,
    accounts: Vec<Account>,
}

impl User {
    // Create a new user with empty accounts
    fn new(name: &str, age: i32) -> User {
        User {
            name: String::from(name),
            age,
            accounts: Vec::new(),
        }
    }

    // Add a new account to the user
    fn add_account(&mut self, account: Account) {
        self.accounts.push(account);
    }

    // Get the number of accounts for the user
    fn num_accounts(&self) -> usize {
        self.accounts.len()
    }
}

// Create a new user
let mut user = User::new("John", 30);

// Create a new account
let account = Account {
    username: String::from("johndoe123"),
    email: String::from("johndoe@example.com"),
};

// Add the account to the user
user.add_account(account);

// Get the number of accounts for the user
let num_accounts = user.num_accounts();

// Print the username of the user's first account
if let Some(first_account) = user.accounts.first() {
    println!("{}", first_account.username);
}