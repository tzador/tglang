/* This code snippet creates a simple web server
using the hyper package */

extern crate hyper; // Import the hyper package

use hyper::Server; // Import the Server struct from the hyper package
use hyper::rt::Future; // Import the Future trait from the runtime module in the hyper package
use hyper::service::service_fn_ok; // Import the service_fn_ok function from the service module in the hyper package
use std::net::SocketAddr; // Import the SocketAddr struct from the standard library

fn main() {
    let addr = SocketAddr::from(([127, 0, 0, 1], 3000)); // Create a new SocketAddr with an IP address of 127.0.0.1 and port number 3000

    let server = Server::bind(&addr) // Bind the server to the provided address
        .serve(|| {
            service_fn_ok(|_req| { // Create a simple service that always returns an OK response
                let body = "Hello, world!"; // Define a string to be used as the response body
                Response::new(Body::from(body)) // Create a new response with the body and return it
            })
        })
        .map_err(|e| eprintln!("server error: {}", e)); // Map any potential errors to a println statement

    hyper::rt::run(server); // Start the server using the runtime module from the hyper package
}

/* This code snippet creates a simple web server
using the hyper package */