/// A function that returns the sum of two numbers
fn sum(first_number: i32, second_number: i32) -> i32 {
    return first_number + second_number;
}

/// A generic struct that can hold any type
struct Example<T> {
    value: T,
}

/// An implementation of a trait for the Example struct
impl<T> Example<T> {
    /// A function that returns a new Example with a given value
    fn new(value: T) -> Example<T> {
        return Example { value };
    }

    /// A function that returns the value stored in the Example
    fn get_value(&self) -> &T {
        return &self.value;
    }
}

/// A trait that specifies the 'multiply' operation
trait Multiply {
    /// A function that multiplies the implementing type by a specified factor
    fn multiply(self, factor: Self) -> Self;
}

/// An implementation of the Multiply trait for i32
impl Multiply for i32 {
    /// A function that multiplies an i32 by a specified factor
    fn multiply(self, factor: i32) -> i32 {
        return self * factor;
    }
}

/// An implementation of the Multiply trait for f64
impl Multiply for f64 {
    /// A function that multiplies an f64 by a specified factor
    fn multiply(self, factor: f64) -> f64 {
        return self * factor;
    }
}

fn main() {
    // Create a new Example with a string value
    let example_string = Example::new("Hello");

    // Create a new Example with an i32 value
    let example_int = Example::new(5);

    // Use the 'get_value' function to retrieve the values
    println!("The string value is: {}", example_string.get_value());
    println!("The integer value is: {}", example_int.get_value());

    // Use the 'multiply' functions from the Multiply trait
    println!("5 multiplied by 2 is: {}", 5.multiply(2));
    println!("3.14 multiplied by 2.5 is: {}", 3.14.multiply(2.5));
}