#![allow(unused_imports)]

use std::collections::{BinaryHeap, BTreeMap, HashMap};

struct Employee {
    name: String,
    age: u32,
    department: String,
}

impl Employee {
    fn new(name: &str, age: u32, department: &str) -> Self {
        Employee {
            name: name.to_string(),
            age,
            department: department.to_string(),
        }
    }
}

fn main() {
    let mut employee_list: BinaryHeap<Employee> = BinaryHeap::new();
    employee_list.push(Employee::new("John", 25, "Finance"));
    employee_list.push(Employee::new("Jane", 30, "Marketing"));
    employee_list.push(Employee::new("Tom", 28, "Operations"));

    let mut employee_map: HashMap<u32, Employee> = HashMap::new();
    employee_map.insert(1, Employee::new("John", 25, "Finance"));
    employee_map.insert(2, Employee::new("Jane", 30, "Marketing"));
    employee_map.insert(3, Employee::new("Tom", 28, "Operations"));

    let mut employee_tree: BTreeMap<u32, Employee> = BTreeMap::new();
    employee_tree.insert(1, Employee::new("John", 25, "Finance"));
    employee_tree.insert(2, Employee::new("Jane", 30, "Marketing"));
    employee_tree.insert(3, Employee::new("Tom", 28, "Operations"));

    // Iterate through binary heap
    for emp in employee_list.iter() {
        println!(
            "Name: {}, Age: {}, Department: {}",
            emp.name, emp.age, emp.department
        );
    }

    // Iterate through hash map
    for (id, emp) in employee_map.iter() {
        println!(
            "ID: {}, Name: {}, Age: {}, Department: {}",
            id, emp.name, emp.age, emp.department
        );
    }

    // Iterate through B-tree map
    for (id, emp) in employee_tree.iter() {
        println!(
            "ID: {}, Name: {}, Age: {}, Department: {}",
            id, emp.name, emp.age, emp.department
        );
    }
}