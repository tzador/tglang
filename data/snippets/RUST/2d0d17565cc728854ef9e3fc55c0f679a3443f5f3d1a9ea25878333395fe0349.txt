use std::io;

// Define an enum type for different types of drinks
enum Drink {
    Coffee(f64),
    Tea(f64),
    Juice(f64),
    Water(f64)
}

// Create a function that takes in a drink and returns the price of it
fn drink_price(drink: Drink) -> f64 {
    match drink {
        // For Coffee, calculate price based on size (in ounces)
        Drink::Coffee(size) => {
            if size <= 8.0 {
                return 2.50;
            } else if size <= 12.0 {
                return 3.00;
            } else {
                return 4.00;
            }
        },
        // For Tea, calculate price based on size (in ounces)
        Drink::Tea(size) => {
            if size <= 8.0 {
                return 2.00;
            } else if size <= 12.0 {
                return 2.50;
            } else {
                return 3.00;
            }
        },
        // For Juice, calculate price based on size (in ounces)
        Drink::Juice(size) => {
            if size <= 8.0 {
                return 3.00;
            } else if size <= 12.0 {
                return 4.50;
            } else {
                return 6.00;
            }
        },
        // For Water, calculate price based on size (in ounces)
        Drink::Water(size) => {
            if size <= 16.0 {
                return 1.00;
            } else if size <= 24.0 {
                return 1.50;
            } else {
                return 2.00;
            }
        },
    }
}

// Create a function that takes in a vector of drinks and returns the total price
fn total_price(drinks: Vec<Drink>) -> f64 {
    let mut total = 0.0;
    for drink in drinks {
        total += drink_price(drink);
    }
    return total;
}

fn main() {
    // Prompt user for number of drinks and read input
    println!("How many drinks do you want to order?");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");

    // Parse input as integer and create vector of drink sizes
    let num_drinks = input.trim().parse::<usize>().unwrap();
    let mut drink_sizes = Vec::with_capacity(num_drinks);

    for i in 0..num_drinks {
        // Prompt user for size of each drink and read input
        println!("What size is drink #{} (in ounces)?", i+1);
        input.clear();
        io::stdin().read_line(&mut input).expect("Failed to read line");

        // Parse input as floating-point number and push it to vector
        let size = input.trim().parse::<f64>().unwrap();
        drink_sizes.push(size);
    }

    // Create vector of drinks based on sizes
    let mut drinks = Vec::with_capacity(num_drinks);
    for size in drink_sizes {
        // Prompt user for type of each drink and read input
        println!("What kind of drink is this (coffee, tea, juice, or water)?");
        input.clear();
        io::stdin().read_line(&mut input).expect("Failed to read line");
        let drink_type = input.trim().to_lowercase();

        // Create appropriate drink enum based on user input and push it to vector
        match drink_type.as_ref() {
            "coffee" => drinks.push(Drink::Coffee(size)),
            "tea" => drinks.push(Drink::Tea(size)),
            "juice" => drinks.push(Drink::Juice(size)),
            "water" => drinks.push(Drink::Water(size)),
            _ => println!("Invalid drink type. Please try again."),
        }
    }

    // Calculate and print total price with 2 decimal places
    let total = total_price(drinks);
    println!("Total price: {:.2}", total);
}