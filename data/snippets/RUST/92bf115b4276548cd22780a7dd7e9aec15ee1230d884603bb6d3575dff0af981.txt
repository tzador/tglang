// Function to find the root mean square of a vector of numbers
fn find_rms(nums: &[f64]) -> Option<f64> {

    // Initialize variables for sum and count
    let mut sum = 0.0;
    let mut count = 0.0;

    // Iterate through the vector and calculate sum and count
    for &num in nums {
        sum += num * num;
        count += 1.0;
    }

    // Calculate the mean
    let mean = match count {
        0 => return None, // If the vector is empty, return None
        _ => sum / count,
    };

    // Calculate the root mean square using the mean
    let rms = (mean / count).sqrt();

    // Return the result
    Some(rms)
}

// Example usage
let numbers = vec![1.0, 2.0, 3.0, 4.0, 5.0];
println!("Vector: {:?}", numbers);
match find_rms(&numbers) {
    Some(value) => println!("Root mean square: {}", value),
    None => println!("Vector is empty!"),
}