// Creates a function to perform binary search on a sorted vector
fn binary_search(sorted_vec: &Vec<i32>, target: i32) -> Option<usize> {
    let mut left = 0; // initial left index
    let mut right = sorted_vec.len() - 1; // initial right index
    
    while left <= right {
        let mid = (left + right) / 2; // calculate mid index
        
        if sorted_vec[mid] < target { // search right half
            left = mid + 1;
        } else if sorted_vec[mid] > target { // search left half
            right = mid - 1;
        } else { // target found
            return Some(mid);
        }
    }
    
    None // target not found
}

// Main function
fn main() {
    let sorted_vec = vec![1, 4, 9, 12, 15, 17, 22]; // sorted vector to search
    let target = 15; // target value
    
    let result = binary_search(&sorted_vec, target); // perform binary search
    
    if let Some(index) = result { // if target found
        println!("Target {} found at index {}", target, index);
    } else { // if target not found
        println!("Target {} not found", target);
    }
}