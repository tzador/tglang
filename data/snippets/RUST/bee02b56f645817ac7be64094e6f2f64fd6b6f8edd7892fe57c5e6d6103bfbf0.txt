fn main() {
    // Create a vector of even numbers, using range notation
    let even_nums: Vec<i32> = (2..10).step_by(2).collect();
    
    // Create a function to calculate the factorial of a given number
    fn factorial(num: u64) -> u64 {
        // Use pattern matching to handle base case and recursive calls
        match num {
            0 | 1 => 1,
            _ => num * factorial(num - 1),
        }
    }
    
    // Use map to apply factorial function to each element of the even_nums vector
    let factorials: Vec<u64> = even_nums.iter().map(|&num| factorial(num as u64)).collect();
    
    // Print the result of factorials vector
    println!("{:?}", factorials);
    
    // Create a closure to filter elements of a vector greater than a given value
    let filter_gt = |vector: &Vec<i32>, value: i32| -> Vec<i32> {
        vector.iter().filter(|&num| *num > value).map(|&num| num).collect()
    };
    
    // Use closure to filter even_nums vector for numbers greater than 5
    let gt_5: Vec<i32> = filter_gt(&even_nums, 5);
    
    // Print the result of gt_5 vector
    println!("{:?}", gt_5);
}