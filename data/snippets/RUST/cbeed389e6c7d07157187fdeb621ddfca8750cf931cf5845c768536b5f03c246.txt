use std::thread;

const THREAD_COUNT: u8 = 10;
const DATA_SIZE: usize = 1000;

fn main() {

    // Declare an array to store random data
    let mut data_arr = [0u8; DATA_SIZE];

    // Generate random data and store it in array
    for element in data_arr.iter_mut() {
        *element = rand::random();
    }

    // Create a vector to store the threads
    let mut thread_vec = Vec::new();

    // Create threads and pass data chunks to each thread for processing
    for i in 0..THREAD_COUNT {
        let data_chunk = &data_arr[(i * DATA_SIZE / THREAD_COUNT) .. ((i+1) * DATA_SIZE / THREAD_COUNT)];
        let thread_handle = thread::spawn(move || {
            // do some processing on data chunk
            process_data_chunk(data_chunk);
        });
        thread_vec.push(thread_handle);
    }

    // Wait for all threads to finish processing
    for thread_handle in thread_vec {
        thread_handle.join().expect("Thread panicked");
    }

    // Print final results
    println!("Processing completed for data size: {}", DATA_SIZE);
}

// Function to process data chunk received from each thread
fn process_data_chunk(data: &[u8]) {
    // Do some calculations on data
    let result = data.iter().fold(0usize, |sum, val| sum + *val as usize);
    // Print result
    println!("Processed data chunk with result: {}", result);
}