use std::collections::HashMap;

// Declaring a trait for the `Keyable` type
trait Keyable {
    // Method to get the key of the type
    fn get_key(&self) -> String;
}

// Implementing the `Keyable` trait for the `Person` struct
struct Person {
    name: String,
    age: u32,
}

// Implementation block for the `Keyable` trait
impl Keyable for Person {
    // Returns the name as the key for a `Person` instance
    fn get_key(&self) -> String {
        self.name.clone()
    }
}

// Function to create a hashmap from vector of `Keyable` types
fn create_hashmap<T: Keyable>(vec: Vec<T>) -> HashMap<String, T> {
    // Creating an empty hashmap
    let mut hashmap = HashMap::new();
    
    // Iterating over the vector
    for item in vec.iter() {
        // Getting the key using the `get_key` method of `Keyable` trait
        let key = item.get_key();
        
        // Inserting the key-value pair into the hashmap
        hashmap.insert(key, item.clone());
    }

    hashmap
}

fn main() {
    // Creating a vector of `Person` instances
    let people = vec![
        Person { name: "John".to_string(), age: 25 },
        Person { name: "Jane".to_string(), age: 28 },
        Person { name: "Sarah".to_string(), age: 32 },
    ];

    // Creating a hashmap from the vector
    let people_map = create_hashmap(people);

    // Printing out each item in the hashmap
    for (key, value) in people_map.iter() {
        println!("Name: {}, Age: {}", key, value.age);
    }
}