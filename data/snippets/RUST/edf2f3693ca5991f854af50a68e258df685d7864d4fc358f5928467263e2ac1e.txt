fn merge_sort<T: Ord>(vec: Vec<T>) -> Vec<T> {
    if vec.len() <= 1 {
        return vec;
    }

    let mid = vec.len() / 2;
    let mut left = Vec::with_capacity(mid);
    let mut right = Vec::with_capacity(vec.len() - mid);

    for (i, val) in vec.into_iter().enumerate() {
        if i < mid {
            left.push(val);
        } else {
            right.push(val);
        }
    }

    left = merge_sort(left);
    right = merge_sort(right);

    merge(left, right)
}

fn merge<T: Ord>(mut left: Vec<T>, mut right: Vec<T>) -> Vec<T> {
    let mut result = Vec::with_capacity(left.len() + right.len());

    while !left.is_empty() && !right.is_empty() {
        if left[0] <= right[0] {
            result.push(left[0]);
            left.remove(0);
        } else {
            result.push(right[0]);
            right.remove(0);
        }
    }

    while !left.is_empty() {
        result.push(left.remove(0));
    }

    while !right.is_empty() {
        result.push(right.remove(0));
    }

    result
}