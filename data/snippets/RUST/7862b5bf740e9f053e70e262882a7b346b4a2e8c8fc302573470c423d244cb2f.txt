/// This is a function that calculates the nth Fibonacci number using memoization.
fn fibonacci(n: u64, cache: &mut Vec<u64>) -> u64 {
    if cache.len() > n as usize {
        // if the value has already been calculated, return the cached value
        return cache[n as usize];
    } else {
        // otherwise, calculate the value and store it in the cache
        let result = fibonacci(n - 1, cache) + fibonacci(n - 2, cache);
        cache.push(result);
        return result;
    }
}

fn main() {
    // initialize the cache with the first two values of the Fibonacci sequence
    let mut cache: Vec<u64> = vec![1, 1];

    // calculate the 10th Fibonacci number and print the result
    let result = fibonacci(10, &mut cache);
    println!("{}", result);
}