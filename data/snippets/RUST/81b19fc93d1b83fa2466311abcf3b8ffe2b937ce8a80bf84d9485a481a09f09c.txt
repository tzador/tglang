#![allow(dead_code)] // annotation to allow unused code

struct Person { // creating a new struct named Person
    name: String, // field of type String
    age: u8, // field of type unsigned 8-bit integer
    likes_pizza: bool, // field of type boolean
}

impl Person { // creating an implementation block
    fn create_person(name: &str, age: u8, likes_pizza: bool) -> Person { // a function to create a new Person, takes in a string reference, age and boolean value
        Person { // creating a new Person with the specified fields
            name: String::from(name), // using String::from to create a new String
            age, // same as age: age, using shorthand notation
            likes_pizza, // same as likes_pizza: likes_pizza, using shorthand notation
        }
    }

    fn get_name(&self) -> &str { // a method to get the name of the Person, takes in a reference to the struct instance
        &self.name // returns a reference to the name field
    }

    fn get_age(&self) -> u8 { // a method to get the age of the Person, takes in a reference to the struct instance
        self.age // returns the age field
    }

    fn toggle_pizza(&mut self) { // a method to toggle the likes_pizza field, takes in a mutable reference to the struct instance
        self.likes_pizza = !self.likes_pizza; // toggles the boolean value
    }
}

fn main() {
    let person = Person::create_person("John", 25, true); // creating a new Person with the create_person method
    println!("Name: {}", person.get_name()); // printing the name of the Person using the get_name method
    println!("Age: {}", person.get_age()); // printing the age of the Person using the get_age method
    println!("Likes Pizza? {}", person.likes_pizza); // printing the boolean value of likes_pizza field
    person.toggle_pizza(); // toggling the likes_pizza field
    println!("Likes Pizza? {}", person.likes_pizza);
}