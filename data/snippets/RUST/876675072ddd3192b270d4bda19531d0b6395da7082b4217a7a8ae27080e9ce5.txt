// Rust code that implements a binary search tree

// Define a structure for the nodes of the tree
struct Node {
    value: i32,
    left: Option<Box<Node>>,
    right: Option<Box<Node>>,
}

// Implementation of the binary search tree
impl Node {
    // Function to insert a value into the tree
    fn insert(&mut self, value: i32) {
        // Check if the value is less than the current node
        if value < self.value {
            // If there is an empty left child, insert the value as a new node
            if self.left.is_none() {
                self.left = Some(Box::new(Node {
                    value: value,
                    left: None,
                    right: None,
                }));
            // If there is a left child, recursively insert the value into the left subtree
            } else {
                self.left.as_mut().unwrap().insert(value);
            }

        // If the value is greater than the current node
        } else {
            // If there is an empty right child, insert the value as a new node
            if self.right.is_none() {
                self.right = Some(Box::new(Node {
                    value: value,
                    left: None,
                    right: None,
                }));
            // If there is a right child, recursively insert the value into the right subtree
            } else {
                self.right.as_mut().unwrap().insert(value);
            }
        }
    }

    // Function to check if a given value is present in the tree
    fn contains(&self, value: i32) -> bool {
        // Check if the current node's value is equal to the given value
        if self.value == value {
            return true;
        // If the given value is less than the current node's value, search the left subtree
        } else if value < self.value {
            // If there is no left child, the value is not in the tree
            if self.left.is_none() {
                return false;
            // If there is a left child, recursively check the left subtree
            } else {
                return self.left.as_ref().unwrap().contains(value);
            }
        // If the given value is greater than the current node's value, search the right subtree
        } else if value > self.value {
            // If there is no right child, the value is not in the tree
            if self.right.is_none() {
                return false;
            // If there is a right child, recursively check the right subtree
            } else {
                return self.right.as_ref().unwrap().contains(value);
            }
        }
        return false;
    }
}

// Example usage of the binary search tree
fn main() {
    // Create a new tree with root node value 5
    let mut tree = Node {
        value: 5,
        left: None,
        right: None,
    };

    // Insert values into the tree
    tree.insert(3);
    tree.insert(8);
    tree.insert(2);
    tree.insert(6);

    // Check if a given value is present in the tree
    println!("Tree contains 2: {}", tree.contains(2)); // Output: Tree contains 2: true
    println!("Tree contains 7: {}", tree.contains(7)); // Output: Tree contains 7: false
}