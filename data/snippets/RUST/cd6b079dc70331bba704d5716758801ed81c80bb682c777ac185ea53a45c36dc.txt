fn main() {
    // Create a vector with 5 elements
    let mut numbers = vec![1, 2, 3, 4, 5];
    
    // Create a function to double each element in the vector
    fn double_numbers(mut vector: Vec<i32>) -> Vec<i32> {
        for num in vector.iter_mut() {
            *num *= 2; // dereference the value to modify it
        }
        vector
    }
    
    // Print the original vector
    println!("Original vector: {:?}", numbers); // output: [1, 2, 3, 4, 5]
    
    // Call the double_numbers function
    numbers = double_numbers(numbers);
    
    // Print the modified vector
    println!("Modified vector: {:?}", numbers); // output: [2, 4, 6, 8, 10]
    
    // Create a closure to filter even numbers
    let filter_even = |num: &i32| *num % 2 == 0;
    
    // Use iterator methods to filter and print even numbers from the vector
    println!("Even numbers: {:?}", numbers.iter().filter(filter_even).collect::<Vec<&i32>>()); // output: [2, 4, 6, 8, 10]
    
    // Create a struct for a person with name and age fields
    struct Person {
        name: String,
        age: u8,
    }
    
    // Create a vector of Person structs
    let mut people = vec![Person {name: String::from("John"), age: 25}, Person {name: String::from("Jane"), age: 30}, Person {name: String::from("Bob"), age: 45}];
    
    // Create a closure to get the names of people over the age of 30
    let get_names_over_30 = |person: &Person| (person.age > 30, &person.name);
    
    // Use iterator methods to filter and print the names of people over the age of 30
    println!("Names of people over 30: {:?}", people.iter().filter_map(get_names_over_30).collect::<Vec<_>>()); // output: ["Jane", "Bob"]
}