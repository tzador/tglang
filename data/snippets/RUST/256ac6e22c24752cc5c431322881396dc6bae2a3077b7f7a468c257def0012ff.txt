struct Node<'a, T> {
    data: &'a str,
    children: Vec<Node<'a, T>>,
    parent: Option<&'a Node<'a, T>>,
}

impl<'a, T: std::fmt::Display> Node<'a, T> {
    fn new(data: &'a str) -> Node<'a, T> {
        Node {
            data,
            children: Vec::new(),
            parent: None,
        }
    }

    fn add_child(&mut self, child: Node<'a, T>) -> &'a mut Node<'a, T> {
        self.children.push(child);
        let last_idx = self.children.len() - 1;
        self.children.get_mut(last_idx).unwrap()
    }

    fn print_tree(&self, level: usize) {
        println!("{}", self.data);
        for child in self.children.iter() {
            for _ in 0..level {
                print!("  ");
            }
            child.print_tree(level + 1);
        }
    }
}

fn main() {
    let mut root = Node::new("A");
    let mut b = Node::new("B");
    let c = Node::new("C");
    let d = Node::new("D");
    let e = Node::new("E");
    let f = Node::new("F");
    b.parent = Some(&root);
    d.parent = Some(&c);
    e.parent = Some(&c);
    f.parent = Some(&c);
    root.add_child(b).add_child(c);
    c.add_child(d).add_child(e).add_child(f);
    root.print_tree(0);
}