#![allow(dead_code)]

use std::env;
use std::mem;

// A simple struct with two fields
struct MyStruct {
    field1: i32,
    field2: bool,
}

fn main() {
    // Dynamically allocate a MyStruct instance on the heap
    let mut my_struct = Box::new(MyStruct {
        field1: 5,
        field2: true,
    });

    // Dereference the pointer to access and modify fields
    (*my_struct).field1 = 10;
    (*my_struct).field2 = false;

    // Print the value of the fields
    println!("Field 1: {}", (*my_struct).field1);
    println!("Field 2: {}", (*my_struct).field2);

    // Use mem::replace to swap out the entire struct
    let new_struct = mem::replace(&mut *my_struct, MyStruct {
        field1: 20,
        field2: false,
    });

    // The original struct is now replaced with the new one
    println!("Original struct: field1={}, field2={}", (*my_struct).field1, (*my_struct).field2);
    println!("New struct: field1={}, field2={}", new_struct.field1, new_struct.field2);

    // Use pattern matching to destructure the struct
    let MyStruct { field1, field2 } = new_struct;

    // Print the destructured values
    println!("Field 1: {}", field1);
    println!("Field 2: {}", field2);

    // Use environment variables to access data
    let key = "PATH";
    match env::var(key) {
        Ok(path) => println!("Value of {} is {}", key, path),
        Err(e) => println!("Couldn't get value for key {}: {}", key, e),
    }
}