// Define a data structure for a binary tree
#[derive(Debug)] // Derive the Debug trait for easy printing
enum BinaryTree<T> { // Create an enum to hold the data
    Node { // Define a node variant which takes in data and two child nodes
        data: T,
        left: Box<BinaryTree<T>>, // Boxes are used to store values on the heap
        right: Box<BinaryTree<T>>
    },
    Leaf { // Define a leaf variant which does not have any child nodes
        data: Option<T> // Use an Option to indicate whether the leaf has data or not
    }
}

// Implement a function to insert data into a binary tree
impl<T: Ord> BinaryTree<T> {
    fn insert(&mut self, data: T) { // Take in a mutable reference to the tree and the data to be inserted
        match self { // Use pattern matching to determine the current node in the tree
            BinaryTree::Leaf { data: None } => { // If current node is a leaf with no data
                self.data = Some(data); // Set the data for the leaf
            },
            BinaryTree::Leaf { data: Some(curr_data) } => { // If current node is a leaf with data
                if data < *curr_data { // If the new data is less than the current data
                    let left = Box::new(BinaryTree::Leaf { data: Some(data) }); // Create a new leaf node for the left child
                    let right = Box::new(BinaryTree::Leaf { data: None }); // Create a new empty leaf node for the right child
                    *self = BinaryTree::Node { data: *curr_data, left, right }; // Update the current node to a node variant
                } else { // If the new data is greater than or equal to the current data
                    let left = Box::new(BinaryTree::Leaf { data: None }); // Create a new empty leaf node for the left child
                    let right = Box::new(BinaryTree::Leaf { data: Some(data) }); // Create a new leaf node for the right child
                    *self = BinaryTree::Node { data: *curr_data, left, right }; // Update the current node to a node variant
                }
            },
            BinaryTree::Node { data: curr_data, left, right } => { // If the current node is a node variant
                if data < *curr_data { // If the new data is less than the current data
                    left.insert(data); // Recursively insert the data into the left subtree
                } else { // If the new data is greater than or equal to the current data
                    right.insert(data); // Recursively insert the data into the right subtree
                }
            }
        }
    }
}

// Create a binary tree and insert some data
fn main() {
    let mut tree = BinaryTree::Leaf { data: None }; // Create an empty leaf node
    tree.insert(10); // Insert data into the tree
    tree.insert(7);
    tree.insert(15);
    tree.insert(12);
    println!("{:?}", tree); // Print the tree using the Debug trait
}