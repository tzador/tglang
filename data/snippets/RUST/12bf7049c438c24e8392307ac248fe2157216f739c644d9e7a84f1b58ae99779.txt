// This is a multi-line comment that provides some information about the code snippet
// In Rust, this is how you define a function
fn main () {
    // This is a block of code that is executed when the function is called
    // Rust is a statically-typed language, here we define a variable `name` with type `String`
    let name: String = "John".to_string();

    // Here we use a `match` expression to check the value of `name`
    // This is similar to a switch statement in other programming languages
    match name.as_str() {
        // If the value is "John"
        "John" => {
            // We print out a message
            println!("Hello John, nice to meet you!");

            // We define another variable `age` with type `u8` and initialize it to 25
            let age: u8 = 25;

            // We use the `format!` macro to create a string with the value of `age`
            let message: String = format!("You are {} years old", age);

            // We print out the message
            println!("{}", message);
        },
        // If the value is "Jane"
        "Jane" => {
            // We print out a different message
            println!("Hello Jane, nice to meet you!");

            // We define another variable `age` with type `u8` and initialize it to 20
            let age: u8 = 20;

            // We use the `format!` macro to create a string with the value of `age`
            let message: String = format!("You are {} years old", age);

            // We print out the message
            println!("{}", message);
        },
        // If the value is neither "John" nor "Jane"
        _ => {
            // We print out a default message
            println!("Hello there, what's your name?");
        }
    }
}