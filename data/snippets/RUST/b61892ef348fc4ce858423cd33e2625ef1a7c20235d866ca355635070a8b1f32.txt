use std::collections::HashMap;

// Define a struct named "Employee" with three fields
struct Employee {
    name: String,
    age: i32,
    role: String
}

// Create an instance of the Employee struct
let employee = Employee {
    name: String::from("John"),
    age: 32,
    role: String::from("Manager")
};

// Create a mutable HashMap named "employee_database" that will store Employee structs
let mut employee_database = HashMap::new();

// Insert the employee instance into the HashMap with the employee's name as the key and the instance as the value
employee_database.insert(employee.name, employee);

// Create a function that takes in a string parameter and returns an Employee struct
fn create_employee(name: String) -> Employee {
    let new_employee = Employee {
        name,
        age: 25,
        role: String::from("Associate")
    };
    new_employee
}

// Call the create_employee function and store the returned Employee struct in a variable named "new_employee"
let new_employee = create_employee(String::from("Tom"));

// Insert the new_employee instance into the employee_database HashMap with the employee's name as the key and the instance as the value
employee_database.insert(new_employee.name, new_employee);

// Iterate through the employee_database HashMap using a for loop and print out each employee's name and role
for (name, employee_struct) in &employee_database {
    println!("Employee name: {}", name);
    println!("Employee role: {}", employee_struct.role);
}