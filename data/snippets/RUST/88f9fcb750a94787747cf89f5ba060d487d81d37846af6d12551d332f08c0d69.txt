// This function implements the quicksort algorithm
// It takes in a mutable reference to a vector of integers
fn quicksort(v: &mut Vec<i32>) {
    if v.len() <= 1 {
        return;
    }
    let mut smaller = 0;
    for i in 0..(v.len() - 1) {
        if v[i] < v[v.len() - 1] {
            v.swap(smaller, i);
            smaller += 1;
        }
    }
    v.swap(smaller, v.len() - 1);
    quicksort(&mut v[..smaller]);
    quicksort(&mut v[(smaller + 1)..]);
}

// Example usage:
// let mut v = vec![5, 3, 8, 1, 2, 6, 4, 7];
// quicksort(&mut v);
// assert_eq!(v, vec![1, 2, 3, 4, 5, 6, 7, 8])