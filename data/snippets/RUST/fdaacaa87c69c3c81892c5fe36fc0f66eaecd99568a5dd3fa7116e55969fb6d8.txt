// Generic function that takes in a vector and returns a new vector
fn transform<T, F>(vec: Vec<T>, f: F) -> Vec<T> where F: Fn(T) -> T {
    let mut new_vec = Vec::with_capacity(vec.len());
    for item in vec {
        let transformed_item = f(item);
        new_vec.push(transformed_item);
    }
    new_vec
}

// Define a struct with a generic type T
struct Book<T> {
    title: T,
    author: String,
    pages: u32,
}

// Implement a method for the Book struct
impl<T> Book<T> {
    fn get_title(&self) -> &T {
        &self.title
    }
}

// Example usage
fn main() {
    // Create a vector of numbers
    let numbers = vec![1, 2, 3, 4, 5];

    // Define a transformation function that doubles each number
    let double = |x| x * 2;

    // Transform the vector of numbers
    let doubled_numbers = transform(numbers, double);

    // Print the transformed vector
    println!("{:?}", doubled_numbers);

    // Create a book with a title of type String
    let book = Book {
        title: "The Great Gatsby".to_string(),
        author: "F. Scott Fitzgerald".to_string(),
        pages: 218,
    };

    // Use the get_title method to get the title of the book
    let title = book.get_title();

    // Print the title
    println!("{}", title);
}