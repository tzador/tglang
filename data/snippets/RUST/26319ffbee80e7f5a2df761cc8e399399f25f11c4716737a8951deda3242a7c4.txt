// Define a generic struct named 'Node' with two fields,
// key of type 'T' and value of type 'V'.
struct Node<T, V> {
    key: T,
    value: V,
}

// Implement the 'Display' trait for the 'Node' struct to customize
// how the struct is printed.
impl<T: Display, V: Display> Display for Node<T, V> {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        write!(f, "Key: {} - Value: {}", self.key, self.value)
    }
}

// Define a trait called 'KeyValueMap' that requires implementing
// a method 'get_value' which takes a generic key of type 'T' and
// returns a value of type 'V'.
trait KeyValueMap<T, V> {
    fn get_value(&self, key: T) -> Option<V>;
}

// Implement the 'KeyValueMap' trait for the 'Node' struct.
impl<T, V> KeyValueMap<T, V> for Node<T, V> {
    fn get_value(&self, key: T) -> Option<V> {
        if key == self.key {
            Some(self.value)
        } else {
            None
        }
    }
}

// Create an instance of 'Node' struct with key as '1' and value as "One".
let node = Node { key: 1, value: "One" };

// Print the node using the 'Display' trait.
println!("{}", node);

// Use the 'get_value' method to retrieve the value corresponding to
// the key '1' from the node.
let value = node.get_value(1);

// Print the value.
println!("{}", value.unwrap());