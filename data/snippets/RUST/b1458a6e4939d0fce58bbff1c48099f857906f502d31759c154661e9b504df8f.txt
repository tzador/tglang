/// A struct representing a custom error type
#[derive(Debug)]
struct CustomError {
    message: String,
    code: u32,
}

/// An enum holding different variants of custom errors
enum CustomErrorKind {
    NetworkError(String),
    DatabaseError(u32),
    InputError(String),
}

/// Implementation of the `Display` and `Error` traits for the custom error type
impl std::fmt::Display for CustomError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "CustomError {}: {}", self.code, self.message)
    }
}

impl std::error::Error for CustomError {
    fn description(&self) -> &str {
        "A custom error has occurred."
    }

    fn cause(&self) -> Option<&std::error::Error> {
        None
    }
}

/// A function that handles any type of custom error and returns a new `Result` type
fn handle_custom_error(error: CustomErrorKind) -> Result<(), CustomError> {
    match error {
        CustomErrorKind::NetworkError(msg) => Err(CustomError { message: msg, code: 400 }),
        CustomErrorKind::DatabaseError(code) => Err(CustomError { message: "An error occurred in the database.".to_string(), code: code }),
        CustomErrorKind::InputError(msg) => Err(CustomError { message: msg, code: 422 }),
    }
}

fn main() {
    // Calling the function and assigning the result to a variable
    let result = handle_custom_error(CustomErrorKind::NetworkError(String::from("Unable to connect to server")));

    // Checking if the result is an error and printing the error message if it is
    if let Err(e) = result {
        println!("Error: {}", e);
    }
}