//! This is a custom error type to represent multiple errors that can occur during program execution
enum CustomError {
    /// An error caused by division by zero
    DivisionByZero,
    /// An error caused by invalid input
    InvalidInput(String),
    /// An error caused by an I/O operation
    IoError(std::io::Error),
}

/// A function that returns a Result containing either an integer or a CustomError
fn custom_function(input: i32) -> Result<i32, CustomError> {
    if input == 0 {
        Err(CustomError::DivisionByZero)
    } else if input < 0 {
        Err(CustomError::InvalidInput(String::from("Input should be positive")))
    } else if input == 42 {
        Err(CustomError::IoError(std::io::Error::new(std::io::ErrorKind::Other, "The answer to everything")))
    } else {
        Ok(100 / input)
    }
}