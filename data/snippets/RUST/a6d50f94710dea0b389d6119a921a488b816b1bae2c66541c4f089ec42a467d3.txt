//! This is a multi-line comment in Rust language.

// Define a struct named "Person" with two fields - "name" is a string and "age" is an integer.
struct Person {
    name: String,
    age: u32,
}

impl Person {
    //! This is a multi-line comment for the implementation block.
    /// This is a documentation comment for the function "get_name".
    /// It takes in a mutable reference to "self" and returns a string.
    fn get_name(&mut self) -> String {
        self.name.to_string()
    }

    //! This is a multi-line comment for the implementation block.
    /// This is a documentation comment for the function "get_age".
    /// It takes in a mutable reference to "self" and returns an integer.
    fn get_age(&mut self) -> u32 {
        self.age
    }

    //! This is a multi-line comment for the implementation block.
    /// This is a documentation comment for the function "set_name".
    /// It takes in a mutable reference to "self" and a string "new_name" and updates the "name" field.
    fn set_name(&mut self, new_name: String) {
        self.name = new_name;
    }

    //! This is a multi-line comment for the implementation block.
    /// This is a documentation comment for the function "set_age".
    /// It takes in a mutable reference to "self" and an integer "new_age" and updates the "age" field.
    fn set_age(&mut self, new_age: u32) {
        self.age = new_age;
    }
}

fn main() {
    // Create a new instance of the Person struct.
    let mut person1 = Person {
        name: "John Doe".to_string(),
        age: 25,
    };

    // Print the current name and age of the person.
    print!(
        "Current name: {}, Current age: {}",
        person1.get_name(),
        person1.get_age()
    );

    // Update the name and age of the person.
    person1.set_name("Jane Smith".to_string());
    person1.set_age(30);

    // Print the updated name and age of the person.
    print!(
        "Updated name: {}, Updated age: {}",
        person1.get_name(),
        person1.get_age()
    );
}