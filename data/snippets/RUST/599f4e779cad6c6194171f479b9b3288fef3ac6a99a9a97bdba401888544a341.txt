/// This example creates a generic function to perform binary search
/// on any type that implements the `PartialOrd` trait.
/// The function takes in a sorted vector and a value to search for,
/// and returns -1 if the value is not found, or the index of the 
/// found value.
fn binary_search<T: PartialOrd>(arr: Vec<T>, value: T) -> isize {
    let mut low = 0;
    let mut high = arr.len() - 1;

    while low <= high {
        let mid = (low + high) / 2;

        if arr[mid] < value {
            low = mid + 1;
        } else if arr[mid] > value {
            high = mid - 1;
        } else {
            return mid as isize;
        }
    }

    -1
}