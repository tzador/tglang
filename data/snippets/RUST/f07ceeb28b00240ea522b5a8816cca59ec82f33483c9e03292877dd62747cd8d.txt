struct LinkedList<T> {
    head: Option<Box<Node<T>>>,
    tail: Option<Box<Node<T>>>,
}

impl<T> LinkedList<T> {
    // Adding a new node to the front of the linked list
    fn push(&mut self, value: T) {
        let new_node = Box::new(Node::new(value, self.head.take()));
        if self.tail.is_none() {
            self.tail = Some(new_node.clone());
        }
        self.head = Some(new_node);
    }

    // Removing the first node from the linked list
    fn pop(&mut self) {
        let old_head = self.head.take();
        if let Some(node) = old_head {
            self.head = node.next;
            if let Some(ref next) = node.next {
                // Update the tail if the next node is none
                if next.is_none() {
                    self.tail = Some(node.clone());
                }
            } else {
                self.tail = None;
            }
        }
    }

    // Inserting a new node at a given index
    fn insert(&mut self, value: T, index: usize) {
        if index == 0 {
            self.push(value);
        } else {
            let mut curr_index = 0;
            let mut curr_node = &mut self.head;
            loop {
                curr_index += 1;
                if let Some(ref mut node) = *curr_node {
                    if curr_index == index {
                        let new_node = Box::new(Node::new(value, node.next.take()));
                        if new_node.next.is_none() {
                            self.tail = Some(new_node.clone());
                        }
                        node.next = Some(new_node);
                        break;
                    }
                    curr_node = &mut node.next;
                } else {
                    panic!("Index out of bounds")
                }
            }
        }
    }
}

struct Node<T> {
    value: T,
    next: Option<Box<Node<T>>>,
}

impl<T> Node<T> {
    // Creating a new node with a given value and next node
    fn new(value: T, next: Option<Box<Node<T>>>) -> Self {
        Node { value, next }
    }
}

fn main() {
    let mut list = LinkedList::new();
    list.push("Hello");
    list.push("World");
    list.insert("Rust", 1);
    list.pop();
    list.push("Is");
    list.push("Awesome");
}