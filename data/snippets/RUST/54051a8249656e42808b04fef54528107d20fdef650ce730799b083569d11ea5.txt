// This code snippet is demonstrating a struct in RUST with an associated function and implementation of its methods
struct User {
    username: String,
    email: String,
    active: bool,
    sign_in_count: u64,
}

impl User {
    // Associated function to create a new user
    pub fn new(username: &str, email: &str) -> User {
        User {
            username: String::from(username),
            email: String::from(email),
            active: true,
            sign_in_count: 0,
        }
    }

    // Method to update the username
    pub fn update_username(&mut self, new_username: &str) {
        self.username = String::from(new_username);
    }

    // Method to update the email address
    pub fn update_email(&mut self, new_email: &str) {
        self.email = String::from(new_email);
    }

    // Method to toggle the user's active status
    pub fn toggle_active(&mut self) {
        self.active = !self.active;
    }

    // Method to increment the sign in count
    pub fn increment_sign_in_count(&mut self) {
        self.sign_in_count += 1;
    }
}

fn main() {
    // Creating a new user "John" with email "john@example.com"
    let mut user = User::new("John", "john@example.com");

    // Updating the user's username
    user.update_username("Johnny");

    // Updating the user's email
    user.update_email("johnny@example.com");

    // Toggling the user's active status
    user.toggle_active();

    // Incrementing the user's sign in count
    user.increment_sign_in_count();
}