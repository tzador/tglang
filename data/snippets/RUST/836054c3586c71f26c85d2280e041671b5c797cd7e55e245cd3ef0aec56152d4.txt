struct User { //creates a struct called User
    username: String, //field 'username' of type 'String'
    email: String, //field 'email' of type 'String'
    sign_in_count: u64, //field 'sign_in_count' of type 'u64'
    active: bool, //field 'active' of type 'bool'
}

impl User { //implements methods for struct 'User'
    fn new(username: String, email: String) -> User { //creates a new User with given parameters
        User { //returns User with given field values
            username,
            email,
            sign_in_count: 0,
            active: true,
        }
    }

    fn sign_in(&mut self) { //takes in a mutable reference to self
        self.sign_in_count += 1; //increments the sign_in_count field by 1
    }

    fn deactivate(&mut self) { //takes in a mutable reference to self
        self.active = false; //sets the active field to false
    }
}

fn main() { //main function
    let mut user1 = User::new(String::from("JohnDoe123"), String::from("johndoe123@example.com")); //creates a new User named user1
    user1.sign_in(); //calls the sign_in method on user1
    user1.deactivate(); //calls the deactivate method on user1

    println!("Username: {}", user1.username); //prints the username field of user1
    println!("Email: {}", user1.email); //prints the email field of user1
    println!("Sign ins: {}", user1.sign_in_count); //prints the sign_in_count field of user1
    println!("Active: {}", user1.active); //prints the active field of user1
}