// Define a struct called Person with 3 fields: name, age, and occupation
struct Person {
    name: String, // name field of type String
    age: u32, // age field of type unsigned 32-bit integer
    occupation: String, // occupation field of type String
}

// Create an implementation for the Person struct
impl Person {
    // Create a method called introduce that takes a reference to self (a Person) and returns a string
    fn introduce(&self) -> String {
        // Create a new string that contains the name, age, and occupation of the Person
        let introduction = format!("Hi, my name is {}, I am {} years old, and I work as a {}.", self.name, self.age, self.occupation);

        // Return the introduction string
        introduction
    }
}

// Create a function called main
fn main() {
    // Create a new instance of the Person struct and assign it to a mutable variable
    let mut person = Person { 
        name: String::from("John"), // Set the name field to "John"
        age: 30, // Set the age field to 30
        occupation: String::from("Software Developer"), // Set the occupation field to "Software Developer"
    };

    // Call the introduce method on the person variable and assign the result to a new variable
    let person_introduction = person.introduce();

    // Print out the result of the introduce method
    println!("{}", person_introduction); // Output: Hi, my name is John, I am 30 years old, and I work as a Software Developer.
}