#![feature(test)]

extern crate test;

use std::time::Instant;

fn main() {
    let start_time = Instant::now();
    let mut primes = Vec::new();
    
    // Generate a list of prime numbers up to 1000
    for n in 2..=1000 {
        let mut is_prime = true;
        
        // Check if current number is divisible by any number smaller than it
        for prime in &primes {
            if n % prime == 0 {
                is_prime = false;
                break;
            }
        }
        
        // If number is prime, add it to the list
        if is_prime {
            primes.push(n);
        }
    }
    
    // Print the list of prime numbers
    println!("Prime numbers up to 1000: {:?}", primes);
    
    // Measure elapsed time
    let elapsed = start_time.elapsed();
    
    // Print elapsed time in milliseconds
    println!("Elapsed time: {} ms", elapsed.as_millis());
    
    // Run a benchmark test for the prime number generation function
    let num_iteration = 100000;
    let benchmark_time = test::black_box({
        for _ in 0..num_iteration {
            let mut primes = Vec::new();
            
            // Code to generate prime numbers goes here
            for n in 2..=1000 {
                let mut is_prime = true;
                
                for prime in &primes {
                    if n % prime == 0 {
                        is_prime = false;
                        break;
                    }
                }
                
                if is_prime {
                    primes.push(n);
                }
            }
        }
    });
    
    // Print the total time taken to run the benchmark
    println!("Total time for {} iterations: {} s", num_iteration, benchmark_time.as_secs_f64());
}