// This is a complex function that takes in three integer parameters and returns a vector of strings
// The function first checks if all three parameters are less than 10, if so it multiplies them together and returns a string representation of the result
// Otherwise, it checks if the first parameter is greater than the sum of the other two parameters, if so it returns a vector of strings with the first parameter repeated n times, where n is the sum of the other parameters
// If none of the above conditions are met, it returns an empty vector
fn complex_function(a: i32, b: i32, c: i32) -> Vec<String> {
    let mut results: Vec<String> = Vec::new(); // initialize an empty vector to store results
    if a < 10 && b < 10 && c < 10 { // check if all parameters are less than 10
        let result = a * b * c; // multiply the parameters together and store the result
        results.push(result.to_string()); // convert the result to a string and add it to the vector
    } else if a > b + c { // if the first parameter is greater than the sum of the other two
        let times = b + c; // calculate the number of times to repeat the first parameter
        for _ in 0..times { // loop through the range of 0 to times
            results.push(a.to_string()); // add the first parameter to the vector
        }
    }
    results // return the vector of strings as the final result
} // end of function