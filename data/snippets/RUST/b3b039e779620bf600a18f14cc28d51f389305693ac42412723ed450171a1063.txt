/// A generic struct representing a tree node
struct TreeNode<T> {
    data: T,
    left: Option<Box<TreeNode<T>>>,
    right: Option<Box<TreeNode<T>>>,
}

impl<T> TreeNode<T> {
    /// Inserts a new node as the left child of the current node
    fn insert_left(&mut self, data: T) {
        self.left = Some(Box::new(TreeNode {
            data,
            left: None,
            right: None,
        }));
    }

    /// Inserts a new node as the right child of the current node
    fn insert_right(&mut self, data: T) {
        self.right = Some(Box::new(TreeNode {
            data,
            left: None,
            right: None,
        }));
    }
}

fn main() {
    // Create a tree with root node holding the value "1"
    let mut root = TreeNode {
        data: 1,
        left: None,
        right: None,
    };

    // Insert two child nodes, with the value "2" and "3" respectively
    root.insert_left(2);
    root.insert_right(3);

    // Print the tree structure
    println!("{:#?}", root);
}