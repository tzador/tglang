#![forbid(unsafe_code)]

use std::{collections::HashMap, error::Error, io::{BufReader, BufRead}};
use serde_json::{Value, json};

const NUM_LINES: u64 = 10;

fn main() -> Result<(), Box<dyn Error>> {
    // Declare and initialize a mutable vector storing integers
    let mut numbers: Vec<i32> = vec![1, 2, 3, 4, 5];

    // Add a new element at the end of the vector
    numbers.push(6);

    // Create a new vector with elements from index 2 to 4 (excluding 4)
    let sub_numbers = numbers[2..4].to_vec();
    
    // Print out the sub vector
    println!("{:?}", sub_numbers);

    // Declare and initialize a new HashMap with strings as keys and vectors as values
    let mut hashmap: HashMap<String, Vec<i32>> = HashMap::new();

    // Insert a new value into the hashmap with its key
    hashmap.insert(String::from("key"), vec![1, 2, 3]);

    // Remove a value from the hashmap with its key and store it in 'removed_value'
    let removed_value = hashmap.remove("key");

    // Declare, initialize and print a new HashMap using a macro
    let new_hashmap = hashmap!["key1" => vec![4, 5, 6], "key2" => vec![7, 8, 9]];
    println!("{:?}", new_hashmap);

    // Loop through each element in the vector and print its value
    for num in &numbers {
        println!("{}", num);
    }

    // Declare a placeholder Vec for parsing JSON data
    let mut parsed_data: Vec<i32> = vec![];

    // Open a file and read its contents line by line using a BufReader
    let file = BufReader::new(File::open("data.json")?);
    for line in file.lines().take(NUM_LINES as usize) {
        // Parse each line of data into a JSON Value and extract its integer value
        let data: Value = serde_json::from_str(&line?)?;
        let num = data["number"].as_i64().expect("Expected a valid integer value");

        // Convert the integer value to an i32 and store it in the placeholder Vec
        parsed_data.push(num as i32);
    }

    // Sum up all the numbers in the Vec and print the result
    let sum: i32 = parsed_data.iter().sum();
    println!("The sum of the parsed numbers is: {}", sum);

    Ok(())
}