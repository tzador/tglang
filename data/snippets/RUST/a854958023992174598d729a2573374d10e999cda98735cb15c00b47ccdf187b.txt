// This is a code snippet in RUST that generates a random matrix and calculates its inverse
// Import the library for random numbers and linear algebra operations
use rand::{thread_rng, Rng};
use nalgebra::{Matrix2, MatrixN, Scalar, OMatrix, Real, ComplexField};
// Create a random number generator
let mut rng = thread_rng();

// Generate a random 2x2 matrix with complex numbers
let mut matrix = Matrix2::new(
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>())
    );

// Get the determinant of the generated matrix
let determinant = matrix.determinant();

// Check if the determinant is non-zero
if determinant != ComplexField::zero() {
    // Calculate the inverse of the matrix
    let matrix_inverse = matrix.try_inverse().unwrap();
    
    // Print the inverse matrix
    println!("Inverse of the generated matrix: {}", matrix_inverse);
} else {
    // If determinant is zero, generate a new random matrix
    matrix = Matrix2::new(
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>()),
        ComplexField::from(rng.gen::<f64>())
    );
    
    // Calculate the inverse of the new matrix
    let matrix_inverse = matrix.try_inverse().unwrap();
    
    // Print the inverse matrix
    println!("Inverse of the new generated matrix: {}", matrix_inverse);
}