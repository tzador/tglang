// Define a struct for a binary tree with two generic values for left and right children
struct BinaryTree<T, U> {
    left: Option<Box<BinaryTree<T, U>>>, // Use Box to store the children on the heap
    right: Option<Box<BinaryTree<T, U>>>,
    value1: T,
    value2: U
}

// Implement a method to find the sum of all the values in a binary tree
impl<T, U> BinaryTree<T, U> {
    // Recursive function to find the sum
    fn find_sum(&self) -> f64 {
        // Use match to handle the different cases for left and right children
        match (&self.left, &self.right) {
            (Some(left), Some(right)) => self.value1 + self.value2 + left.find_sum() + right.find_sum(), // If both children exist, recursively call the function and add the values
            (Some(left), None) => self.value1 + self.value2 + left.find_sum(), // If only left child exists, recursively call the function and add the values
            (None, Some(right)) => self.value1 + self.value2 + right.find_sum(), // If only right child exists, recursively call the function and add the values
            (None, None) => self.value1 + self.value2, // If no children exist, return just the current value
        }
    }
}

fn main() {
    // Create a binary tree with values of type i32 and f64
    let tree = BinaryTree {
        left: Some(Box::new(
            BinaryTree {
                left: Some(Box::new(BinaryTree {left: None, right: None, value1: 1, value2: 2})),
                right: Some(Box::new(BinaryTree {left: None, right: None, value1: 3, value2: 4})),
                value1: 5,
                value2: 6.7, 
            }
        )),
        right: None,
        value1: 7,
        value2: 8.9,
    };

    // Print the result of calling the find_sum method on the tree
    println!("Sum of all values in binary tree: {}", tree.find_sum()); // Output: Sum of all values in binary tree: 38.6
}