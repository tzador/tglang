/** Implements a recursive merge sort algorithm in Rust */

/* Define a function to perform merge sort on a given vector */
fn merge_sort(mut vec: Vec<i32>) -> Vec<i32> {
    
    /* If the vector is only one element long, it is already sorted */
    if vec.len() <= 1 {
        return vec;
    }

    /* Find the middle index of the vector */
    let mid = vec.len() / 2;

    /* Split the vector into two subvectors */
    let left = vec[..mid].to_vec();
    let right = vec[mid..].to_vec();

    /* Use recursion to sort the subvectors */
    let left_sorted = merge_sort(left);
    let right_sorted = merge_sort(right);

    /* Initialize variables to track current indices of subvectors */
    let mut i = 0;
    let mut j = 0;

    /* Initialize an empty vector to store the sorted elements */
    let mut sorted_vec: Vec<i32> = vec![];

    /* Iterate through both subvectors and compare elements */
    while i < left_sorted.len() && j < right_sorted.len() {
        /* If element from left subvector is smaller, add it to sorted vector */
        if left_sorted[i] < right_sorted[j] {
            sorted_vec.push(left_sorted[i]);
            i += 1;
        /* If element from right subvector is smaller, add it to sorted vector */
        } else {
            sorted_vec.push(right_sorted[j]);
            j += 1;
        }
    }

    /* If there are still remaining elements in either subvector, add them to sorted vector */
    if i < left_sorted.len() {
        sorted_vec.extend_from_slice(&left_sorted[i..]);
    }
    if j < right_sorted.len() {
        sorted_vec.extend_from_slice(&right_sorted[j..]);
    }

    /* Return the sorted vector */
    sorted_vec
}

/* Main function to test the merge_sort function */
fn main() {
    /* Create a vector to sort */
    let mut unsorted_vec = vec![4, 2, 6, 8, 1, 9, 10, 3, 7, 5];
    println!("Unsorted vector: {:?}", unsorted_vec);

    /* Sort the vector using merge_sort */
    let sorted_vec = merge_sort(unsorted_vec);
    println!("Sorted vector: {:?}", sorted_vec);
}