// Define a struct named "Student" with three fields: name (String), age (u8), and grades (Vec<u8>)
struct Student {
    name: String,
    age: u8,
    grades: Vec<u8>,
}

// Implement a method for the Student struct called "print_info" which takes in a mutable reference to self
impl Student {
    fn print_info(&mut self) {
        println!("Student name: {}", self.name);
        println!("Student age: {}", self.age);
        println!("Student grades: {:?}", self.grades);
    }
}

// Create a function named "calculate_average" which takes in a reference to a Student struct and returns a f64
fn calculate_average(student: &Student) -> f64 {
    // Calculate the sum of the grades using the iterator "fold" method
    let sum: u32 = student.grades.iter().fold(0, |a, &b| a + (b as u32));

    // Calculate the average by dividing the sum by the number of grades
    let average: f64 = sum as f64 / student.grades.len() as f64;

    // Return the average
    average
}

// Create a function named "main" which is the entry point of the program
fn main() {
    // Create a Student struct instance with a name, age, and grades
    let student = Student {
        name: String::from("Jane"),
        age: 20,
        grades: vec![80, 90, 95, 85],
    };

    // Call the "print_info" method on the student instance
    student.print_info();

    // Call the "calculate_average" function and print the result
    println!("Average grade: {}", calculate_average(&student));
}

// Output:
// Student name: Jane
// Student age: 20
// Student grades: [80, 90, 95, 85]
// Average grade: 87.5