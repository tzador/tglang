use std::fs;

// Define a custom struct 'Employee' with fields for name, age, and job title
struct Employee {
    name: String,
    age: i32,
    job_title: String
}

// Implement a method for the Employee struct that prints out a customized introduction
impl Employee {
    fn introduce(&self) {
        println!("Hello! My name is {} and I am {} years old. I work as a {} at this company.", 
            self.name, self.age, self.job_title);
    }
}

// Create a vector of Employee structs with different data for each employee
let employees = vec![
    Employee { name: String::from("John Smith"), age: 32, job_title: String::from("Software Engineer") },
    Employee { name: String::from("Emily Wilson"), age: 28, job_title: String::from("UX Designer") },
    Employee { name: String::from("Michael Brown"), age: 35, job_title: String::from("Project Manager") }
];

// Use a for loop to introduce each employee
for employee in &employees {
    employee.introduce();
}

// Create and write to a new file using the employees' information
let mut file = fs::File::create("employee_data.txt").expect("Unable to create file");
for employee in &employees {
    let data = format!("Name: {} - Age: {} - Job Title: {}\n", 
                employee.name, employee.age, employee.job_title);
    fs::write("employee_data.txt", data).expect("Unable to write data to file");
}