use std::collections::HashMap;

struct Animal {
    name: String,
    age: u8,
    characteristics: HashMap<String, String>
}

impl Animal {
    fn new(name: &str, age: u8) -> Animal {
        Animal{
            name: name.to_string(),
            age,
            characteristics: HashMap::new()
        }
    }

    fn add_characteristic(&mut self, key: &str, value: &str) {
        self.characteristics.insert(key.to_string(), value.to_string());
    }

    fn get_characteristic(&self, key: &str) -> Option<&str> {
        match self.characteristics.get(key) {
            Some(val) => Some(val),
            None => None
        }
    }

    fn change_age(&mut self, new_age: u8) {
        self.age = new_age;
    }
}

fn main() {
    let mut dog = Animal::new("Rex", 5);
    dog.add_characteristic("breed", "German Shepherd");
    dog.add_characteristic("color", "brown");
    println!("{} is {} years old and is a {}.", dog.name, dog.age, dog.get_characteristic("breed").unwrap());
    dog.change_age(6);
    println!("{} is now {} years old.", dog.name, dog.age);
}