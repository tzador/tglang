// Parallel merge sort implementation in Rust

// Function to merge two sorted vectors
fn merge(left: Vec<i32>, right: Vec<i32>) -> Vec<i32> {
    // Initialize empty vector for sorted result
    let mut result: Vec<i32> = Vec::new();

    // Initialize indices for left and right vectors
    let mut i = 0;
    let mut j = 0;

    // Loop until one of the vectors is exhausted
    while i < left.len() && j < right.len() {
        // Compare values of current indices and insert the smaller one into result
        if left[i] < right[j] {
            result.push(left[i]);
            i += 1;
        } else {
            result.push(right[j]);
            j += 1;
        }
    }

    // Append remaining elements from the unfinished vector
    if i < left.len() {
        result.extend_from_slice(&left[i..]);
    }

    if j < right.len() {
        result.extend_from_slice(&right[j..]);
    }

    // Return the sorted vector
    result
}

// Function to perform merge sort
fn merge_sort(nums: Vec<i32>) -> Vec<i32> {
    // Base case: Return the vector if its length is 1 or less
    if nums.len() <= 1 {
        return nums;
    }

    // Divide the vector into two halves
    let mut mid = nums.len() / 2;
    let mut left = nums;
    let right = left.split_off(mid);

    // Recursively perform merge sort on subvectors
    left = merge_sort(left);
    let right = merge_sort(right);

    // Merge the two sorted subvectors
    merge(left, right)
}

// Example usage
fn main() {
    let nums = vec![5, 3, 8, 2, 6, 1, 4, 7];
    let sorted_nums = merge_sort(nums);
    println!("{:?}", sorted_nums);
}

// Output: [1, 2, 3, 4, 5, 6, 7, 8]