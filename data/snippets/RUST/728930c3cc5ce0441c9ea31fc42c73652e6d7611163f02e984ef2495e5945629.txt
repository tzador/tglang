use std::io; //import standard input/output library

struct Book { //create a struct called "Book"
    title: String, //add a field called "title" of type string
    author: String, //add a field called "author" of type string
    pages: u32, //add a field called "pages" of type unsigned 32-bit integer
    isbn: Option<i64>, //add a field called "isbn" of type optional signed 64-bit integer
}

impl Book { //implement methods for the Book struct
    //a method to print the book's title and author
    fn print_title_and_author(&self) { //take a reference to the Book struct as an argument
        println!("Title: {}", self.title); //print the title field of the Book struct
        println!("Author: {}", self.author); //print the author field of the Book struct
    }

    //a method to add an isbn number to the book
    fn add_isbn(&mut self, new_isbn: i64) { //take a mutable reference to the Book struct and a i64 as arguments
        self.isbn = Some(new_isbn); //set the isbn field to the new isbn number
    }

    //a static method to create a new Book instance
    fn new(title: &str, author: &str, pages: u32, isbn: Option<i64>) -> Book { //take string references and u32 and optional i64 as arguments
        Book { //return a new Book instance with the provided arguments
            title: String::from(title), //convert the string reference to a String
            author: String::from(author), //convert the string reference to a String
            pages, //use the shorthand syntax for the pages field (since the argument has the same name)
            isbn, //use the shorthand syntax for the isbn field
        }
    }
}

fn main() { //main function
    let mut my_book = Book::new("The Alchemist", "Paulo Coelho", 197, None); //create a new Book instance and assign it to a variable
    my_book.add_isbn(9780061122415); //use the add_isbn method to add the isbn number
    my_book.print_title_and_author(); //use the print_title_and_author method to print the title and author
}