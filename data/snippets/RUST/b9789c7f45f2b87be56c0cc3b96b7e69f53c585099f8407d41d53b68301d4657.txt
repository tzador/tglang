/*! This function calculates the Levenshtein distance between two strings.
 *
 * # Arguments
 * * `s1` - The first string to be compared.
 * * `s2` - The second string to be compared.
 * # Returns
 * `usize` - The Levenshtein distance between the two strings.
*/
fn levenshtein_distance(s1: &str, s2: &str) -> usize {
    // Base cases
    if s1 == s2 {
        return 0;
    }
    if s1.len() == 0 {
        return s2.len();
    }
    if s2.len() == 0 {
        return s1.len();
    }

    // Initialize matrix to store distances
    let mut matrix: Vec<Vec<usize>> = vec![vec![0; s2.len() + 1]; s1.len() + 1];

    // Fill first row and column of matrix
    for i in 0..=s1.len() {
        matrix[i][0] = i;
    }
    for j in 0..=s2.len() {
        matrix[0][j] = j;
    }

    // Calculate distances for the rest of the matrix
    for i in 1..=s1.len() {
        for j in 1..=s2.len() {
            // If characters are equal, no cost is incurred
            if s1.chars().nth(i - 1) == s2.chars().nth(j - 1) {
                matrix[i][j] = matrix[i - 1][j - 1];
            }
            // Otherwise, take the minimum cost of either insertion, deletion, or substitution
            else {
                matrix[i][j] = 1 + matrix[i - 1][j].min(matrix[i][j - 1]).min(matrix[i - 1][j - 1]);
            }
        }
    }

    // Return the bottom-right cell of the matrix, which contains the Levenshtein distance
    matrix[s1.len()][s2.len()]
}