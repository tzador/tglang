struct Rectangle { // defining a struct called Rectangle
    width: u32, // declaring a width field of type unsigned 32-bit integer
    height: u32, // declaring a height field of type unsigned 32-bit integer
}

impl Rectangle { // implementing methods for Rectangle struct
    fn area(&self) -> u32 { // defining the area method, which takes a reference to self and returns an unsigned 32-bit integer
        self.width * self.height // returning the product of width and height as the area
    }

    fn perimeter(&self) -> u32 { // defining the perimeter method, which takes a reference to self and returns an unsigned 32-bit integer
        2 * (self.width + self.height) // returning the sum of twice the width and twice the height as the perimeter
    }

    fn is_square(&self) -> bool { // defining the is_square method, which takes a reference to self and returns a boolean
        self.width == self.height // checking if the width and height are equal, which would signify a square
    }
}

fn main() {
    let rect = Rectangle { // creating a new instance of the Rectangle struct
        width: 6, // specifying a width of 6
        height: 6, // specifying a height of 6
    };

    println!("The area of the rectangle is {}", rect.area()); // calling the area method on the rect instance and printing the result
    println!("The perimeter of the rectangle is {}", rect.perimeter()); // calling the perimeter method on the rect instance and printing the result

    if rect.is_square() { // checking if the rect instance is a square
        println!("This rectangle is a square."); // printing a message if it is a square
    } else {
        println!("This rectangle is not a square."); // otherwise, printing a message if it is not a square
    }
}