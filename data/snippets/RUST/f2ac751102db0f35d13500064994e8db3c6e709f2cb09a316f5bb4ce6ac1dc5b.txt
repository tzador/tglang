// Define a struct named 'Person'
struct Person {
    name: String,
    age: u8,
    occupation: String
}

// Implement a function on the Person struct
impl Person {
    // A method to generate the person's initials
    // &self refers to the instance of the Person struct
    pub fn generate_initials(&self) -> String {
        // Split the person's name into first and last name
        let name: Vec<&str> = self.name.split(" ").collect();

        // Get the first letters of the first and last name
        let first_initial = name[0].chars().nth(0).unwrap();
        let last_initial = name[1].chars().nth(0).unwrap();

        // Combine the initials into a new string
        let initials = format!("{}{}", first_initial, last_initial);

        initials // Return the initials
    }
}

// Define a function to print the person's information
fn print_person_info(person: Person) {
    // Print out the person's name, age, and occupation
    println!("Name: {}", person.name);
    println!("Age: {}", person.age);
    println!("Occupation: {}", person.occupation);

    // Generate and print the person's initials using the method we defined
    let initials = person.generate_initials();
    println!("Initials: {}", initials);
}

fn main() {
    // Create an instance of the Person struct named 'bob'
    let bob = Person {
        name: String::from("Bob Smith"),
        age: 30,
        occupation: String::from("Software Engineer")
    };

    // Call the print_person_info function with 'bob' as the argument
    print_person_info(bob);
}

// Output:
//
// Name: Bob Smith
// Age: 30
// Occupation: Software Engineer
// Initials: BS