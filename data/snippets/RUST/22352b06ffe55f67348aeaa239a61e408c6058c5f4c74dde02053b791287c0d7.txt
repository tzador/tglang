use std::io; // import the standard input/output library

// define a struct for a person
struct Person {
    name: String,
    age: u32,
    occupation: String,
}

// define a function to create a new Person object
fn new_person(name: &str, age: u32, occupation: &str) -> Person {
    Person{ 
        name: name.to_string(),
        age,
        occupation: occupation.to_string()
    }
}

// define a function to check if a person is old enough to drink
fn can_drink(person: &Person) -> bool {
    if person.age >= 21 { 
        return true 
    } else { 
        return false 
    }
}

// define a main function
fn main() {

    // initialize an empty vector to store Person objects
    let mut people: Vec<Person> = Vec::new();

    // prompt user for input
    println!("How many people would you like to add?");

    // get input from user and convert to integer
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let num_people: usize = input.trim().parse().expect("Please enter a valid number");

    // prompt user for information for each person
    for i in 0..num_people {
        println!("Please enter the name for person #{}:", i+1);
        let mut name = String::new();
        io::stdin().read_line(&mut name).expect("Failed to read line");

        println!("Please enter the age for person #{}:", i+1);
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");
        let age: u32 = input.trim().parse().expect("Please enter a valid number");

        println!("Please enter the occupation for person #{}:", i+1);
        let mut occupation = String::new();
        io::stdin().read_line(&mut occupation).expect("Failed to read line");

        // create a new Person object and add it to the vector
        let person = new_person(&name, age, &occupation);
        people.push(person);
    }

    // print the information for each person in the vector
    for person in people.iter() {
        println!("Name: {}, Age: {}, Occupation: {}, Can Drink: {}", person.name, person.age, person.occupation, can_drink(person));
    }
}