fn main() {
    // Define a vector with even numbers up to 10
    let even_numbers: Vec<i32> = (1..6).map(|x| x * 2).collect();
    
    // Define a closure that adds 1 to a given number
    let add_one = |x| x + 1;

    // Use a for loop to iterate through the vector and apply the closure
    for num in &even_numbers {
        println!("{} + 1 = {}", num, add_one(*num));
    }
    
    // Define a struct for a car with make, model, and year fields
    struct Car {
        make: String,
        model: String,
        year: u16
    }
    
    // Create a new car instance
    let my_car = Car {make: String::from("Ford"), model: String::from("Mustang"), year: 2021};
    
    // Define a method for the car struct
    impl Car {
        // A method that displays the car's make, model, and year
        fn display(&self) {
            println!("My car is a {} {} {}!", self.year, self.make, self.model);
        }
    }
    
    // Call the display method on the car instance
    my_car.display();
    
    // Define a function that takes in a vector and returns the sum of all its elements
    fn sum_vector(vector: Vec<i32>) -> i32 {
        let mut sum = 0;
        for num in vector {
            sum += num;
        }
        sum
    }
    
    // Create a new vector with numbers from 1 to 5
    let numbers: Vec<i32> = (1..6).collect();
    
    // Call the sum_vector function on the numbers vector
    let total = sum_vector(numbers);
    
    // Print the total sum
    println!("The total sum is: {}", total);
}