fn main() {
    // Declare a mutable vector with initial values
    let mut numbers = vec![1, 2, 3, 4, 5];
    
    // Loop through the vector and print each element
    for num in numbers.iter() {
        println!("{}", num);
    }

    // Add a new element to the end of the vector
    numbers.push(6);

    // Use indexing to access and mutate elements
    numbers[0] = 10;

    // Use the .len() method to get the length of the vector
    println!("Length of vector: {}", numbers.len());

    // Use pattern matching to check for a specific value in the vector
    match numbers.contains(&6) {
        true => println!("Vector contains the number 6"),
        false => println!("Vector does not contain the number 6"),
    }

    // Use a while loop to remove all even numbers from the vector
    let mut index = 0;
    while index < numbers.len() {
        if numbers[index] % 2 == 0 {
            numbers.remove(index);
        } else {
            index += 1;
        }
    }

    // Sort the vector in descending order using the .sort() method
    numbers.sort_by(|a, b| b.cmp(a));

    // Use a map to transform the vector elements into their square values
    let squared_numbers = numbers.iter().map(|num| num * num).collect::<Vec<i32>>();

    // Print the squared numbers vector
    println!("{:?}", squared_numbers);

    // Declare and initialize a string variable
    let message = "Hello, world!";

    // Use a for loop to iterate over the characters of the string
    for ch in message.chars() {
        println!("{}", ch);
    }
}