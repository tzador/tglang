// This code snippet generates a binary tree and prints out the values in depth-first order

// creates a struct representing a node in the tree
struct Node<T> {
    value: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

// creates an enum representing the different traversal orders
enum Order {
    InOrder,
    PreOrder,
    PostOrder,
}

// function to recursively traverse the tree in a specified order and print out the values
fn traverse<T: std::fmt::Display>(node: &Node<T>, order: Order) {
    match order {
        // in-order: visit left node, print value, visit right node
        Order::InOrder => {
            if let Some(left) = &node.left {
                traverse(&left, Order::InOrder)
            }
            println!("{}", node.value);
            if let Some(right) = &node.right {
                traverse(&right, Order::InOrder)
            }
        }
        // pre-order: print value, visit left node, visit right node
        Order::PreOrder => {
            println!("{}", node.value);
            if let Some(left) = &node.left {
                traverse(&left, Order::PreOrder)
            }
            if let Some(right) = &node.right {
                traverse(&right, Order::PreOrder)
            }
        }
        // post-order: visit left node, visit right node, print value
        Order::PostOrder => {
            if let Some(left) = &node.left {
                traverse(&left, Order::PostOrder)
            }
            if let Some(right) = &node.right {
                traverse(&right, Order::PostOrder)
            }
            println!("{}", node.value);
        }
    }
}

// creates a function for creating a binary tree with the given array of values
fn create_tree<T>(values: &[T]) -> Option<Box<Node<T>>>
where
    T: std::fmt::Display + Clone,
{
    // checks for empty array
    if values.is_empty() {
        return None;
    }
    // gets the middle index and value of the array
    let mid = values.len() / 2;
    let value = values[mid].clone();
    // creates a node with the middle value and recursively creates left and right subtrees
    let node = Node {
        value,
        left: create_tree(&values[..mid]),
        right: create_tree(&values[mid + 1..]),
    };
    Some(Box::new(node))
}

// creates a binary tree with the given array of values
let tree = create_tree(&[1, 2, 3, 4, 5, 6, 7, 8, 9]);
// traverses the tree in in-order and prints out the values
traverse(&tree.unwrap(), Order::InOrder);