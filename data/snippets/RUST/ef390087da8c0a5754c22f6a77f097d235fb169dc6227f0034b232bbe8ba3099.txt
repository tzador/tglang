#![allow(dead_code)]

extern crate rand;

use std::io::{self, BufRead};
use rand::Rng;
use std::time::{SystemTime, UNIX_EPOCH};


fn main() {
    let mut num_list = Vec::new();

    for _ in 0..10 {
        let num = rand::thread_rng().gen_range(1, 101);
        num_list.push(num);
    }

    println!("Unsorted list: {:?}", num_list);

    let start = SystemTime::now();

    bubble_sort(&mut num_list);

    let end = SystemTime::now();
    let duration = end.duration_since(start)
        .expect("Error calculating duration.");

    println!("Sorted list: {:?}", num_list);
    println!("Algorithm runtime: {} microseconds",
             duration.as_micros());
}

/// Sorts a vector of integers using the bubble sort algorithm
fn bubble_sort(arr: &mut Vec<i32>) {
    let mut swapped = true;
    let mut n = arr.len();
    while swapped {
        swapped = false;
        for i in 1..n {
            if arr[i - 1] > arr[i] {
                arr.swap(i - 1, i);
                swapped = true;
            }
        }
        n = n - 1;
    }
}