#![no_std] // annotation - disables std library
extern crate alloc as my_alloc; // annotation - imports external crate as my_alloc
use my_alloc::vec::Vec; // annotation - imports Vec from my_alloc crate

#[derive(Debug, Copy, Clone)] // annotation - adds Debug, Copy and Clone traits to struct
struct Person { // struct declaration
    name: &'static str, // annotation - static string reference as a field
    age: u32, // annotation - unsigned 32-bit integer as a field
    address: Option<String>, // annotation - optional String as a field
}

impl Person { // implementation block for Person struct
    fn new(name: &'static str, age: u32, address: Option<String>) -> Self { // constructor with parameters and return type
        Self { // "Self" is a shorthand for the type itself - Person
            name, // shorthand for name: name
            age, // shorthand for age: age
            address, // shorthand for address: address
        } // return statement not needed, Rust automatically returns the last expression
    }

    fn greeting(&self) -> String { // method declaration with self borrow as parameter and return type
        let greeting = format!("Hi, my name is {} and I am {} years old.", self.name, self.age); // format! macro to create a string
        if let Some(address) = &self.address { // pattern matching to check if address is Some value
            format!("{} I live at {}.", greeting, address) // format! macro to append address to the greeting
        } else { // if address is None, execute the next line
            greeting // return greeting string as is
        }
    }
}

fn main() {
    let people = Vec::new(); // create empty vector to store people
    people.push(Person::new("John", 27, Some(String::from("123 Main St")))); // push Person with values into vector
    people.push(Person::new("Anna", 32, None)); // push Person with Some values and None address
    for person in &people { // iterate through vector elements, borrowing each Person reference
        println!("{}", person.greeting()); // call greeting method and print result
    }
}