// Create a generic struct called 'BinarySearch'
pub struct BinarySearch<T> {
    values: Vec<T>,
}

// Implement a method to perform a binary search on the values in the struct
impl<T: Ord> BinarySearch<T> {
    pub fn search(&self, target: &T) -> Option<usize> {
        let mut low = 0;
        let mut high = self.values.len() - 1;

        while low <= high {
            let middle = (low + high) / 2;

            if self.values[middle] == *target {
                return Some(middle);
            } else if self.values[middle] < *target {
                low = middle + 1;
            } else {
                high = middle - 1;
            }
        }

        None
    }
}

// Create an instance of 'BinarySearch' with values of type 'u32'
let search = BinarySearch { values: vec![1, 5, 8, 10, 15, 20, 25] };

// Call the search method with a target value of 15
let result = search.search(&15);

// Print the result to the console
println!("Result: {:?}", result);