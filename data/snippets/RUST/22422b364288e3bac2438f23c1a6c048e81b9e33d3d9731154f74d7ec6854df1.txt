// This function takes in two vectors and returns a new vector that contains the elements that are common in both vectors.
fn common_elements(vec1: Vec<i32>, vec2: Vec<i32>) -> Vec<i32> {
    // first, we create two hash sets from the vectors
    let set1: std::collections::HashSet<i32> = vec1.into_iter().collect();
    let set2: std::collections::HashSet<i32> = vec2.into_iter().collect();

    // next, we intersect the two sets to find the common elements
    let intersection: std::collections::HashSet<_> = set1.intersection(&set2).collect();

    // finally, we convert the resulting set back to a vector and return it
    intersection.iter().cloned().collect()
}

let vec1 = vec![1, 2, 3, 4, 5];
let vec2 = vec![3, 4, 5, 6, 7];
let common = common_elements(vec1, vec2);

// the resulting common vector contains [3, 4, 5]
println!("Common elements: {:?}", common);