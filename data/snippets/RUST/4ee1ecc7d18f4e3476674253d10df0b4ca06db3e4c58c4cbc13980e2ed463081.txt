// Define a struct for a Person
struct Person {
    name: String,
    age: u32,
    gender: String,
    occupation: String,
    hobbies: Vec<String>
}

// Create a function to print information about a person
fn print_person_info(person: Person) {
    println!("Name: {}", person.name);
    println!("Age: {}", person.age);
    println!("Gender: {}", person.gender);
    println!("Occupation: {}", person.occupation);
    // Check if person has any hobbies
    if !person.hobbies.is_empty() {
        // Loop through and print each hobby
        println!("Hobbies:");
        for hobby in person.hobbies {
            println!("- {}", hobby);
        }
    } else {
        println!("Hobbies: None");
    }
}

// Define an enum for different types of food
enum Food {
    Pizza,
    Salad,
    Burger,
    Sushi,
    Pasta,
    Steak
}

// Create a trait for a hungry person
trait CanEat {
    // Define a method to eat a specific type of food
    fn eat(&self, food: Food);
}

// Implement the CanEat trait for the Person struct
impl CanEat for Person {
    // Implement the eat method
    fn eat(&self, food: Food) {
        println!("{} just ate {}", self.name, match food {
            Food::Pizza => "a pizza!",
            Food::Salad => "a salad!",
            Food::Burger => "a burger!",
            Food::Sushi => "some sushi!",
            Food::Pasta => "some pasta!",
            Food::Steak => "a juicy steak!"
        });
    }
}

// Create an instance of a Person
let john = Person {
    name: String::from("John"),
    age: 25,
    gender: String::from("Male"),
    occupation: String::from("Software Developer"),
    hobbies: vec![String::from("Reading"), String::from("Hiking"), String::from("Cooking")]
};

// Call the print_person_info function to print John's info
print_person_info(john);

// Call the eat method for John to eat a pizza
john.eat(Food::Pizza);