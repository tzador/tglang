​
use std::collections::HashMap;

/// Struct representing a bank account
#[derive(Debug)]
struct BankAccount {
    owner_name: String,
    account_number: u32,
    balance: f64
}

/// A method that deposits money into the bank account
impl BankAccount {
    fn deposit(&mut self, amount: f64) {
        self.balance += amount;
        println!("Deposit of {} was successful.", amount);
    }
}

/// A method that withdraws money from the bank account
impl BankAccount {
    fn withdraw(&mut self, amount: f64) {
        if self.balance >= amount {
            self.balance -= amount;
            println!("Withdrawal of {} was successful.", amount);
        } else {
            println!("Insufficient funds.");
        }
    }
}

/// A function that calculates the total balance in the bank accounts of specified owners
fn calculate_total_balance(accounts: &HashMap<String, BankAccount>, owners: Vec<&str>) -> f64 {
    let mut total_balance = 0.0;

    // Iterate through owners and add up their account balances
    for owner in owners {
        let account = &accounts[owner];
        total_balance += account.balance;
    }

    total_balance
}

fn main() {
    // Create HashMap with bank accounts
    let mut accounts = HashMap::new();

    // Add bank accounts to HashMap
    accounts.insert("John", BankAccount {
        owner_name: String::from("John Smith"),
        account_number: 123456,
        balance: 500.00
    });

    accounts.insert("Jane", BankAccount {
        owner_name: String::from("Jane Doe"),
        account_number: 789101,
        balance: 1000.50
    });

    accounts.insert("Bob", BankAccount {
        owner_name: String::from("Bob Williams"),
        account_number: 121314,
        balance: 750.25
    });

    // Withdraw money from Jane's account
    let mut jane_account = &mut accounts["Jane"];
    jane_account.withdraw(500.00);

    // Calculate total balance of John and Bob's accounts
    let owners = vec!["John", "Bob"];
    let total_balance = calculate_total_balance(&accounts, owners);

    println!("Total balance for John and Bob's accounts: {}", total_balance);
}
​