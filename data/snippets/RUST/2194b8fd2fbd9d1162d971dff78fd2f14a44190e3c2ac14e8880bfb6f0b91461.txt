// Example of a function with a generic lifetime parameter
fn print_longest<'a>(a: &'a str, b: &'a str) -> &'a str { // function named "print_longest" with a generic lifetime parameter 'a
    if a.len() > b.len() { // checks if the first string is longer than the second string
        a // returns the first string if it is longer
    } else {
        b // returns the second string if it is longer or if both strings are equal in length
    }
}

fn main() {
    let string1 = String::from("Hello"); // creates a new String variable with the value "Hello"
    let string2 = String::from("World!"); // creates a new String variable with the value "World!"
    let result = print_longest(string1, string2); // calls the print_longest function with string1 and string2 as arguments and assigns the result to a new variable called "result"

    println!("The longest string is {}", result); // prints out the result to the console
}