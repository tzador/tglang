/// This is a recursive function that checks if a given number is prime
fn is_prime(number: u32) -> bool {

    // Check for base cases
    if number <= 1 {
        return false;
    } else if number == 2 || number == 3 {
        return true;
    }

    // Check if the number is divisible by any number from 2 up to its square root
    let sqrt = (number as f64).sqrt() as u32;
    for i in 2..=sqrt {
        if number % i == 0{
            return false;
        }
    }

    // If the number is not divisible by any number up to its square root, it is prime
    return true;
}

/// This is a function that generates the first n prime numbers
fn generate_primes(n: u32) -> Vec<u32> {

    // Initialize an empty vector to store the prime numbers
    let mut primes: Vec<u32> = Vec::new();

    // Start checking for prime numbers starting from 2
    let mut current_number = 2;
    while primes.len() < n {

        // If the current number is prime, add it to the vector
        if is_prime(current_number) {
            primes.push(current_number);
        }

        // Increment the current number by 1
        current_number += 1;
    }

    // Return the vector of prime numbers
    primes
}

/// Call the function to generate the first 10 prime numbers and print the result
fn main() {
    let primes = generate_primes(10);
    println!("The first 10 prime numbers are: {:?}", primes);
}