#![feature(proc_macro_hygiene)]
use std::collections::HashMap;

/// A struct representing a student, with a name and a list of courses they are taking.
/// The name must be a valid string and the courses must be a hashmap of strings to booleans,
/// indicating whether the student has completed that course.
struct Student {
    name: String,
    courses: HashMap<String, bool>
}

/// A method to add a new course for the student, with a default completion status of 'false'.
impl Student {
    /// Adds the given course to the list of courses the student is taking.
    ///
    /// # Arguments
    ///
    /// * `course` - A string representing the name of the course.
    fn add_course(&mut self, course: &str) {
        self.courses.insert(course.to_string(), false);
    }
}

/// An enum representing the different grades a student can receive in a course.
enum Grade {
    A,
    B,
    C,
    D,
    F
}

/// A trait defining a method to assign a grade to a student for a given course.
trait AssignGrade {
    /// Assigns the given grade to the student for the given course.
    ///
    /// # Arguments
    ///
    /// * `course` - A string representing the name of the course.
    /// * `grade` - A grade enum representing the level of completion in the course.
    fn assign_grade(&mut self, course: &str, grade: Grade);
}

/// A method implementation of the `AssignGrade` trait for the student struct.
impl AssignGrade for Student {
    /// Assigns the given grade to the student for the given course.
    ///
    /// # Arguments
    ///
    /// * `course` - A string representing the name of the course.
    /// * `grade` - A grade enum representing the level of completion in the course.
    fn assign_grade(&mut self, course: &str, grade: Grade) {
        if let Some(val) = self.courses.get_mut(course) {
            *val = match grade {
                Grade::A => true,
                _ => false
            };
        }
    }
}

fn main() {
    // Create a new student
    let mut student1 = Student {
       name: "Jane Doe".to_string(),
       courses: HashMap::new()
    };

    // Add courses for the student
    student1.add_course("Math");
    student1.add_course("English");
    student1.add_course("Science");

    // Assign grades for the student
    student1.assign_grade("Math", Grade::A);
    student1.assign_grade("English", Grade::B);
    student1.assign_grade("Science", Grade::C);

    // Output the student's name and their completed courses
    println!("{} has completed the following courses:", student1.name);
    for (course, completed) in &student1.courses {
        if *completed {
            println!("- {}", course);
        }
    }
}