#![feature(const_fn)]
#![feature(map_first_last)]
use std::collections::BTreeMap;
// this is a macro to help generate a struct with a sorted map inside
macro_rules! make_sorted_struct {
    // passing in the name of the struct and the type of items in the map
    //  the convention is to make the name a plural of the item type
    // (e.g. `Vec` has `Vecs` as a sorted struct name)
    ($StructName:ident, $MapItemName:ty) => {
        // create the struct with the map inside
        // using a `BTreeMap` for easy sorting
        struct $StructName {
            map: BTreeMap<usize, $MapItemName>,
        }
        // implement some useful methods for our struct
        impl $StructName {
            // method to add an item to the map at a specific index
            // can use `const` because of `#![feature(const_fn)]`
            const fn insert(&mut self, index: usize, item: $MapItemName) {
                self.map.insert(index, item);
            }
            // method to remove an item from the map at a specific index
            // can use `map_first_last` because of `#![feature(map_first_last)]`
            fn remove(&mut self, index: usize) -> Option<$MapItemName> {
                // remove the item from the map at the given index
                // if there is no item at that index, return `None`
                self.map.remove(&index)
            }
            // method to get an item from the map at a specific index
            // can use `const` because of `#![feature(const_fn)]`
            const fn get(&self, index: usize) -> Option<&$MapItemName> {
                // borrow the map immutably
                // get a reference to the item at the given index
                // if there is an item, return a `Some` wrapping the reference
                // if there is no item, return `None`
                self.map.get(&index)
            }
            // method to get the first item from the map
            // can use `map_first_last` because of `#![feature(map_first_last)]`
            fn get_first(&self) -> Option<&$MapItemName> {
                // borrow the map immutably
                // get a reference to the first item in the map
                // if there is an item, return a `Some` wrapping the reference
                // if there is no item, return `None`
                self.map.first()
            }
            // method to get the last item from the map
            // can use `map_first_last` because of `#![feature(map_first_last)]`
            fn get_last(&self) -> Option<&$MapItemName> {
                // borrow the map immutably
                // get a reference to the last item in the map
                // if there is an item, return a `Some` wrapping the reference
                // if there is no item, return `None`
                self.map.last()
            }
        }
    };
}
// create a sorted struct with `String`s as items in the map
make_sorted_struct!(Strings, String);
// create a sorted struct with `usize`s as items in the map
make_sorted_struct!(Ints, usize);
// create a sorted struct with `f64`s as items in the map
make_sorted_struct!(Floats, f64);
// initialize the sorted structs with some values
fn main() {
    let mut strings = Strings { map: BTreeMap::new() };
    strings.insert(3, String::from("hi"));
    strings.insert(1, String::from("hello"));
    strings.insert(2, String::from("hey"));
    let mut ints = Ints { map: BTreeMap::new() };
    ints.insert(3, 31);
    ints.insert(1, 11);
    ints.insert(2, 21);
    let mut floats = Floats { map: BTreeMap::new() };
    floats.insert(3, 3.5);
    floats.insert(1, 1.5);
    floats.insert(2, 2.5);
}