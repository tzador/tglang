/* code snippet to generate a fibonacci sequence using recursion in RUST */

/* define a function that takes in a number 'n' as parameter and returns the corresponding fibonacci number */
fn fib(n: u32) -> u32 {
    /* base case for n = 0 or n = 1 */
    if n == 0 || n == 1 {
        return n;
    } 
    /* recursive case for n > 1 */
    else {
        /* call the function recursively to generate the fibonacci sequence */
        return fib(n-1) + fib(n-2);
    }
}

/* define a main function to take user input for the length of the fibonacci sequence */
fn main() {
    /* prompt user to enter the length of the sequence */
    println!("Enter the length of the fibonacci sequence: ");

    /* create a new mutable variable to store user input */
    let mut len = String::new();

    /* read the user input and store it in the mutable variable */
    io::stdin().read_line(&mut len)
        .expect("Failed to read line.");

    /* convert the user input from string to u32 */
    let len: u32 = len.trim().parse()
        .expect("Please enter a valid number.");

    /* loop through the fibonacci sequence and print each element */
    for i in 0..len {
        /* call the fib function to generate the fibonacci number at index 'i' */
        let fib_num = fib(i);

        /* print the fibonacci number at index 'i' */
        println!("Fibonacci number at index {}: {}", i, fib_num);
    }
}

/* call the main function to run the program */
main();