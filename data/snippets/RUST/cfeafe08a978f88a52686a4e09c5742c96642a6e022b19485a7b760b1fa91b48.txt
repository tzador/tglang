// Define a struct for a car
struct Car {
    model: String,
    year: u32,
    color: Color,
    engine: Engine,
    features: Vec<String>,
}

// Define an enum for different types of colors
enum Color {
    Red,
    Blue,
    Green,
    Black,
    White,
}

// Define a struct for an engine
struct Engine {
    type: String,
    horsepower: u32,
    fuel_type: FuelType,
}

// Define an enum for different types of fuel
enum FuelType {
    Gas,
    Diesel,
    Electric,
    Hybrid,
}

// Implementation of functions for the Car struct
impl Car {
    // Function to create a new car
    fn new(model: String, year: u32, color: Color, engine: Engine, features: Vec<String>) -> Car {
        Car {
            model,
            year,
            color,
            engine,
            features,
        }
    }
    
    // Function to display the car's information
    fn display_info(&self) {
        println!("Model: {}\nYear: {}\nColor: {:?}\nEngine: {}\nFeatures: {:?}",
                    self.model, self.year, self.color, self.engine.type, self.features);
    }
}

fn main() {
    // Create a new car object
    let car = Car::new(String::from("Tesla Model S"), 2021, Color::White, 
                        Engine{type: String::from("Electric"), horsepower: 670, fuel_type: FuelType::Electric},
                        vec![String::from("Autopilot"), String::from("Panoramic Sunroof"), String::from("Premium Sound System")]);
    
    // Display the car's information
    car.display_info();
}

// Output:
//
// Model: Tesla Model S
// Year: 2021
// Color: White
// Engine: Electric
// Features: ["Autopilot", "Panoramic Sunroof", "Premium Sound System"]