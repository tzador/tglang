#![allow(unused)]
// Define a struct with two generic type parameters, T and U
struct ExampleStruct<T, U> {
    t: T,
    u: U,
}

impl<T, U> ExampleStruct<T, U> {
    // Define a method for the struct that prints out the values of its two fields
    fn print_values(&self) {
        println!("Value of t: {}", self.t);
        println!("Value of u: {}", self.u);
    }

    // Define a method for the struct that takes in a closure and applies it to the values of its fields
    fn apply_closure<F>(&mut self, mut f: F)
        // Use the where syntax to specify that the closure must take two arguments of type T and U
        where F: FnMut(T, U)
    {
        f(self.t, self.u);
    }
}

fn main() {
    // Create an instance of the ExampleStruct with type i32 and string for its fields
    let my_struct = ExampleStruct {
        t: 42,
        u: String::from("hello"),
    };

    // Call the print_values method on the struct
    my_struct.print_values();

    // Call the apply_closure method on the struct with a closure that adds the length of the string to the value of the integer
    my_struct.apply_closure(|t, u| {
        println!("Result: {}", t + u.len());
    });
}