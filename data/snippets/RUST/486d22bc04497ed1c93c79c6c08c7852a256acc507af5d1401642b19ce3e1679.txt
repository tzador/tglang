/// This function checks if a given string is a palindrome.
fn is_palindrome(s: &str) -> bool {
    // initialize a string buffer
    let mut buf = String::new();

    // loop through the characters of the input string
    for c in s.chars() {
        // if the character is a letter, convert it to lowercase and add it to the buffer
        if c.is_alphabetic() {
            buf.push(c.to_lowercase().next().unwrap());
        }
    }

    // convert the buffer into a vector of characters
    let chars: Vec<char> = buf.chars().collect();

    // initialize two pointers for traversing the vector
    let mut left = 0;
    let mut right = chars.len() - 1;

    // loop until the two pointers meet in the middle
    while left < right {
        // compare the characters at the two pointers
        if chars[left] != chars[right] {
            // if they are not equal, return false (not a palindrome)
            return false;
        }
        // update the pointers
        left += 1;
        right -= 1;
    }

    // if the loop completes without returning false, the string is a palindrome
    true
}