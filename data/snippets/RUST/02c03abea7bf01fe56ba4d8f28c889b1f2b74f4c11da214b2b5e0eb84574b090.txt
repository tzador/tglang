fn main() {
    let mut vector: Vec<i32> = Vec::new(); // creates a mutable vector that contains 32-bit signed integers
    vector.push(5); // adds the value 5 to the end of the vector
    vector.push(10); // adds the value 10 to the end of the vector

    for element in vector.iter_mut() { // iterates through the vector and gets a mutable reference to each element
        *element *= 2; // multiplies each element by 2 using the mutable reference
    }

    let sum: i32 = vector.iter().sum(); // calculates the sum of all elements in the vector

    let filtered_vector: Vec<i32> = vector.into_iter() // converts the vector into an iterator
        .filter(|element| *element > 5) // filters out any elements less than or equal to 5
        .collect(); // converts the iterator back into a vector

    println!("The sum of the filtered vector is: {}", sum); // prints the sum of the filtered vector
    println!("The filtered vector is: {:?}", filtered_vector); // prints the filtered vector
}