use std::collections::HashMap; //import HashMap data structure from standard library

fn main() {
    println!("Welcome to Rust Code Generator!"); //prints welcome message

    //create an empty HashMap
    let mut languages: HashMap<String, Vec<String>> = HashMap::new();

    //insert programming language and its corresponding features as key-value pairs
    languages.insert(String::from("Rust"), vec!["Borrowing", "Concurrency", "Pattern Matching"]);
    languages.insert(String::from("Python"), vec!["Dynamic Typing", "List Comprehension", "Duck Typing"]);
    languages.insert(String::from("Java"), vec!["Static Typing", "Object-Oriented Programming", "Garbage Collection"]);
    languages.insert(String::from("C++"), vec!["Strong Typing", "Template Metaprogramming", "Manual Memory Management"]);

    //print out all the languages and their features
    for (language, features) in &languages {
        println!("{} has the following features: {:?}", language, features);
    }

    //check if HashMap contains a specific key and returns the corresponding value if it exists
    match languages.get(&String::from("Rust")) {
        Some(features) => println!("Rust has the following features: {:?}", features),
        None => println!("Rust is not in the HashMap."),
    }
}