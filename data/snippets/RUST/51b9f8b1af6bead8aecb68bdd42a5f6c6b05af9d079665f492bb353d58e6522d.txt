/* This code snippet implements a binary search tree data structure in Rust */
use std::cmp::Ordering;
use std::ops::Add;

#[derive(Debug)]
struct Node<T> {
    value: T,
    left: Option<Box<Node<T>>>,
    right: Option<Box<Node<T>>>,
}

impl<T: PartialEq> Node<T> {
    fn new(value: T) -> Self {
        Node {
            value,
            left: None,
            right: None,
        }
    }

    fn insert(&mut self, value: T) {
        match self.value.cmp(&value) {
            Ordering::Less => {
                match &mut self.right {
                    Some(node) => node.insert(value),
                    None => self.right = Some(Box::new(Node::new(value))),
                }
            }
            Ordering::Greater => {
                match &mut self.left {
                    Some(node) => node.insert(value),
                    None => self.left = Some(Box::new(Node::new(value))),
                }
            }
            Ordering::Equal => (),
        }
    }

    fn contains(&self, value: T) -> bool {
        match self.value.cmp(&value) {
            Ordering::Less => match &self.right {
                Some(node) => node.contains(value),
                None => false,
            },
            Ordering::Greater => match &self.left {
                Some(node) => node.contains(value),
                None => false,
            },
            Ordering::Equal => true,
        }
    }
}

impl<T: PartialOrd + Add<Output = T> + Default + Copy> Node<T> {
    fn sum(&self) -> T {
        let mut sum = self.value;
        if let Some(node) = &self.left {
            sum = sum + node.sum();
        }
        if let Some(node) = &self.right {
            sum = sum + node.sum();
        }
        sum
    }
    fn average(&self) -> T {
        let mut num_nodes = 1;
        let mut sum = self.value;
        if let Some(node) = &self.left {
            let (left_num_nodes, left_sum) = node.avg();
            num_nodes = num_nodes + left_num_nodes;
            sum = sum + left_sum;
        }
        if let Some(node) = &self.right {
            let (right_num_nodes, right_sum) = node.avg();
            num_nodes = num_nodes + right_num_nodes;
            sum = sum + right_sum;
        }
        sum / num_nodes
    }
}

fn main() {
    let mut tree = Node::new(5);
    tree.insert(10);
    tree.insert(2);
    tree.insert(7);
    tree.insert(3);

    println!("{:?}", tree);
    println!("sum: {}", tree.sum());
    println!("average: {}", tree.average());
}