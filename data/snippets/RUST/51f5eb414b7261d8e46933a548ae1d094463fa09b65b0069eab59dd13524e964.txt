/// This function will calculate the sum of the squares of all the numbers in a given vector
/// and return the result
fn sum_of_squares(vec: Vec<i32>) -> i32 {
    let mut sum = 0;
    for num in vec {
        sum += num.pow(2);
    }
    return sum;
}

/// An enum to represent different types of shapes
enum Shape {
    Rectangle { width: i32, height: i32 },
    Square(i32),
    Circle(f64)
}

// A trait with a method to calculate the area of a shape
trait CalculateArea {
    fn area(&self) -> f64;
}

// Implementing the trait for the Rectangle shape
impl CalculateArea for Shape::Rectangle {
    fn area(&self) -> f64 {
        let rect = self as &Shape::Rectangle;
        return (rect.width * rect.height) as f64;
    }
}

// Implementing the trait for the Square shape
impl CalculateArea for Shape::Square {
    fn area(&self) -> f64 {
        let square = self as &Shape::Square;
        return (square.0 * square.0) as f64;
    }
}

// Implementing the trait for the Circle shape
impl CalculateArea for Shape::Circle {
    fn area(&self) -> f64 {
        let circle = self as &Shape::Circle;
        return 3.14 * (circle.0 * circle.0);
    }
}

// Function to calculate the total area of a vector of shapes
fn calculate_total_area(shapes: Vec<Shape>) -> f64 {
    let mut total_area = 0.0;

    for shape in shapes {
        total_area += shape.area();
    }

    return total_area;
}

fn main() {
    let shapes = vec![
        Shape::Rectangle {width: 4, height: 6},
        Shape::Square(5),
        Shape::Circle(2.5),
        Shape::Rectangle {width: 3, height: 9}
    ];

    let total_area = calculate_total_area(shapes);
    println!("The total area of all shapes is: {}", total_area);
}