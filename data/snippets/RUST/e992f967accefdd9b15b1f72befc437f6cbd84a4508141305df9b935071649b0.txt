use std::collections::HashMap; // importing HashMap from standard library

// defining a function that returns the count of each element in a list
fn count_elements(list: &[i32]) -> HashMap<i32, i32> {
    let mut count_map: HashMap<i32, i32> = HashMap::new(); // creating an empty HashMap
    for element in list {
        let count = count_map.entry(*element).or_insert(0); // checking if element already exists in HashMap
        *count += 1; // incrementing count if element already exists, otherwise inserting with count of 1
    }

    count_map // returning the HashMap
}

fn main() {
    // creating a list with repeating elements
    let list = [1, 2, 3, 2, 1, 3, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 10];

    // calling the count_elements function and storing the HashMap in a variable
    let element_counts = count_elements(&list);

    // iterating through the HashMap and printing the element and its count
    for (element, count) in element_counts {
        println!("Element {} appeared {} times", element, count);
    }
}

// Output:
//