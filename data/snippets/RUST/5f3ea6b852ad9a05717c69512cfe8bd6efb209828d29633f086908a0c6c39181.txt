/// This function calculates the nth Fibonacci number using recursion
/// and memoization for improved performance
fn fibonacci(n: u64, memo: &mut Vec<u64>) -> u64 {
    match n {
        0 => 0,
        1 => 1,
        _ => {
            // check if nth Fibonacci number has already been calculated and stored in memo
            if let Some(num) = memo.get(n as usize) {
                return *num;
            }
            // if not, calculate it recursively and store in memo
            else {
                let num = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
                memo.push(num);
                return num;
            }
        }
    }
}

// demonstrate usage of the above function
fn main() {
    // initialize memo with base cases
    let mut memo = vec![0, 1];

    // calculate and print the 25th Fibonacci number
    let result = fibonacci(25, &mut memo);
    println!("The 25th Fibonacci number is: {}", result);
}