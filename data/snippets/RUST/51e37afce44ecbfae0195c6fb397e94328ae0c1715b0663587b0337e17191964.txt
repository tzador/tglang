#![allow(dead_code)]
// A simple recursive implementation of the quicksort algorithm
fn quicksort(mut arr: Vec<i32>) -> Vec<i32> {
    if arr.len() <= 1 {
        return arr;
    }

    let pivot = arr.pop().unwrap(); // choose a pivot element
    let mut less = Vec::new();
    let mut greater = Vec::new();

    for element in arr {
        if element <= pivot {
            less.push(element);
        } else {
            greater.push(element);
        }
    }

    let mut sorted_less = quicksort(less); // recursively sort the elements less than pivot
    let mut sorted_greater = quicksort(greater); // recursively sort the elements greater than pivot

    sorted_less.push(pivot);
    sorted_less.append(&mut sorted_greater);

    sorted_less
}

// Example usage
fn main() {
    let arr = vec![10, 7, 6, 2, 1, 5, 3, 9, 8, 4];
    let sorted_arr = quicksort(arr);
    println!("{:?}", sorted_arr);
}