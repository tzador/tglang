use std::thread;
use std::sync::Arc;
use std::sync::Mutex;
use std::time::Duration;
enum State {
    Initializing,
    Running,
    Paused,
    Stopping,
    Stopped,
}

struct Machine {
    current_state: Arc<Mutex<State>>,
}

impl Machine {
    fn new() -> Machine {
        Machine {
            current_state: Arc::new(Mutex::new(State::Initializing)),
        }
    }

    fn initialize(&self) {
        let initial_state = self.current_state.clone();
        thread::spawn(move || {
            println!("Initializing state...");
            thread::sleep(Duration::from_secs(5));
            *initial_state.lock().unwrap() = State::Running;
        });
    }

    fn run(&self) {
        let current_state = self.current_state.clone();
        thread::spawn(move || {
            println!("Running state...");
            thread::sleep(Duration::from_secs(10));
            *current_state.lock().unwrap() = State::Paused;
        });
    }

    fn pause(&self) {
        let current_state = self.current_state.clone();
        thread::spawn(move || {
            println!("Pausing state...");
            thread::sleep(Duration::from_secs(2));
            *current_state.lock().unwrap() = State::Stopped;
        });
    }

    fn stop(&self) {
        let current_state = self.current_state.clone();
        thread::spawn(move || {
            println!("Stopping state...");
            thread::sleep(Duration::from_secs(3));
            *current_state.lock().unwrap() = State::Stopped;
        });
    }
}

fn main() {
    let machine = Machine::new();
    machine.initialize();
    machine.run();
    machine.pause();
    machine.stop();
}