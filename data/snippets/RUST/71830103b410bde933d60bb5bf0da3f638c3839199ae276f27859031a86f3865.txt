// This is a complex function that takes in a vector of integers and returns a sorted vector

fn sort(vector: &mut Vec<i32>) -> Vec<i32> {
    // First we check if the vector is empty
    if vector.is_empty() {
        // If so, we return an empty vector
        return Vec::new(); 
    }

    // Next, we declare a variable to track the current minimum value
    let mut min = vector[0];

    // Then, we loop through the vector to find the minimum value
    for i in 1..vector.len() {
        if vector[i] < min {
            min = vector[i];
        }
    }

    // After finding the minimum value, we remove it from the original vector and add it to the sorted vector
    let mut sorted_vector = vec![min];
    vector.remove(vector.iter().position(|&x| x == min).unwrap());

    // Finally, we recursively call the sort function on the remaining values and add them to the sorted vector
    sorted_vector.append(&mut sort(vector));
    
    // We return the sorted vector
    sorted_vector
}