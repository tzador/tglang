use std::collections::HashMap;
use rand::Rng;

fn main() {

    // Define a function to calculate the mean of a vector of integers
    fn mean(vec: Vec<i32>) -> f64 {

        // Create a sum variable to hold the sum of the integers
        let mut sum = 0;

        // Iterate through the vector, adding each value to the sum
        for num in vec.iter() {
            sum += num;
        }

        // Calculate the mean by dividing the sum by the length of the vector
        let mean = sum as f64 / vec.len() as f64;

        // Return the mean
        mean
    }

    // Create a random vector of 100 integers between 0 and 1000
    let mut rng = rand::thread_rng();
    let mut vec: Vec<i32> = Vec::new();
    for _ in 0..100 {
        vec.push(rng.gen_range(0..1000));
    }

    // Print the vector
    println!("Vector: {:?}", vec);

    // Call the mean function and print the result
    let mean = mean(vec);
    println!("Mean: {}", mean);

    // Create a HashMap to store the number of occurrences for each integer in the vector
    let mut occurrences: HashMap<i32, i32> = HashMap::new();

    // Iterate through the vector and update the occurrences for each integer
    for num in vec.iter() {
        let count = occurrences.entry(*num).or_insert(0);
        *count += 1;
    }

    // Print the HashMap
    println!("Occurrences: {:?}", occurrences);
}