// Declare a struct named "Person" with two fields, "name" of type "String" and "age" of type "i32".
struct Person {
    name: String,
    age: i32,
}

// Implement a method named "get_name" which takes a self parameter of type "Self" and returns a reference to the name field.
impl Person {
    fn get_name(&self) -> &String {
        &self.name
    }
}

// Implement a static method named "print_person" which takes a parameter of type "&Person" and prints out the person's name and age.
impl Person {
    fn print_person(person: &Person) {
        println!("Name: {}, Age: {}", person.name, person.age);
    }
}

fn main() {
    // Create a new Person instance with the name "John" and age 35.
    let john = Person {
        name: String::from("John"),
        age: 35,
    };

    // Call the "get_name" method on the "john" instance to get a reference to the name field and store it in a variable.
    let name = john.get_name();

    // Print out the person's name using the variable containing the name reference.
    println!("Person's name: {}", name);

    // Call the "print_person" static method on the "Person" struct, passing in a reference to the "john" instance.
    Person::print_person(&john);
}