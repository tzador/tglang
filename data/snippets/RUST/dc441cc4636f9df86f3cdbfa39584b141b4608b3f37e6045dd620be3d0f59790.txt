struct Fibonacci { // defining a new struct
    curr: u64, // field for current number in sequence
    next: u64, // field for next number in sequence
}

impl Iterator for Fibonacci { // implementing Iterator trait for struct
    type Item = u64; // defining associated type for Iterator
    
    fn next(&mut self) -> Option<Self::Item> { // defining next() function for struct
        let new_next = self.curr + self.next; // calculate next number
        
        self.curr = self.next; // update current number
        self.next = new_next; // update next number
        
        Some(self.curr) // return current number as Some()
    }
}

let fibonacci = Fibonacci { curr: 1, next: 1 }; // creating instance of Fibonacci struct
let sum: u64 = fibonacci.take(20).sum(); // taking first 20 numbers and summing them
println!("The sum of the first 20 numbers in the Fibonacci sequence is {}", sum); // printing the result