extern crate rand; 
// importing the 'rand' crate

use rand::Rng; 
// using the 'Rng' trait from the 'rand' crate

fn main() {
    let mut rng = rand::thread_rng();
    // initializing a randon numger generator from the 'rand' crate
    
    let nums: Vec<i32> = (0..10).map(|_| rng.gen_range(1,50)).collect();
    // creating a vector 'nums' with 10 elements, each generated using the 'gen_range' method from the 'Rng' trait
    
    println!("Generated vector: {:?}", nums); 
    // printing the generated vector
    
    let sum: i32 = nums.iter().sum(); 
    // calculating the sum of all elements in the vector
    
    println!("Sum of elements: {}", sum);
    // printing the sum of elements
    
    let avg: f32 = nums.iter().map(|&x| x as f32).sum::<f32>() / nums.len() as f32; 
    // calculating the average of elements by converting them to floats and dividing by the length of the vector
    
    println!("Average of elements: {}", avg);
    // printing the average of elements
}