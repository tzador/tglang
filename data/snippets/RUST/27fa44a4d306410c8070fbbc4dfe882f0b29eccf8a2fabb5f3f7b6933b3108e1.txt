// Creates a struct called "Rectangle"
struct Rectangle {
    // Holds the width and length of the rectangle
    width: u32,
    length: u32,
}

// Implementation of Rectangle struct
impl Rectangle {
	// Calculates the area of the rectangle
    fn area(&self) -> u32 {
        // Uses destructuring to access the values of width and length from the Rectangle struct
        let Rectangle {width, length} = self;
        width * length
    }

    // Compares two rectangles and returns true if they have the same area, false otherwise
    fn same_area(&self, other: &Rectangle) -> bool {
        self.area() == other.area()
    }
}

// Creates a method for the Rectangle struct that prints out the area of the rectangle
fn print_area(rect: &Rectangle) {
    println!("The area of the rectangle is {} square units.", rect.area());
}

fn main() {
    // Creates two Rectangle structs with the same width and length but different variable names
    let rect1 = Rectangle {width: 10, length: 20};
    let rect2 = Rectangle {width: 10, length: 20};

    // Calls the method to print out the area of rect1
    print_area(&rect1);

    // Compares rect1 and rect2 for the same area and prints the result
    println!("Do both rectangles have the same area? {}", rect1.same_area(&rect2));
}