use std::collections::HashMap;

/// This function creates a new HashMap with a given initial capacity and populates it with key-value pairs.
///
/// # Arguments
/// `capacity` - The initial capacity of the HashMap.
///
/// # Output
/// A HashMap with the specified initial capacity and populated with key-value pairs.
fn populate_map(capacity: usize) -> HashMap<&'static str, usize> {
    // Create a new HashMap with the specified initial capacity.
    let mut new_map: HashMap<&'static str, usize> = HashMap::with_capacity(capacity);

    // Populate the HashMap with key-value pairs.
    new_map.insert("One", 1);
    new_map.insert("Two", 2);
    new_map.insert("Three", 3);
    new_map.insert("Four", 4);
    new_map.insert("Five", 5);

    // Return the newly populated HashMap.
    new_map
}

fn main() {
    // Call the populate_map function and store the result in a variable.
    let my_map = populate_map(5);

    // Loop through the HashMap and print out each key and value.
    for (key, value) in my_map.iter() {
        println!("Key: {}, Value: {}", key, value);
    }
}