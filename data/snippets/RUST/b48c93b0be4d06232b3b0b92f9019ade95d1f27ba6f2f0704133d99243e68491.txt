// Create a function that takes in two integers and returns a vector containing all the prime numbers between those two integers
fn generate_primes(start: i32, end: i32) -> Vec<i32> {
    let mut primes: Vec<i32> = Vec::new(); // initialize an empty vector to store the primes

    for num in start..=end { // loop through all numbers between start and end, both inclusive
        let mut is_prime = true; // a flag to check if the number is prime
        for i in 2..=num/2 { // loop through all numbers between 2 and half of the number
            if num % i == 0 { // if the number is divisible by any number between 2 and half of itself, it is not prime
                is_prime = false; // set the flag to false
                break; // break out of the loop as we know the number is not prime
            }
        }
        if is_prime && num > 1 { // if the flag is still true and the number is greater than 1 (1 is not considered prime)
            primes.push(num); // add the number to the vector
        }
    }
    return primes; // return the vector containing all the prime numbers
}

// call the function and print the result
let primes = generate_primes(1, 20);
println!("The prime numbers between 1 and 20 are: {:?}", primes);