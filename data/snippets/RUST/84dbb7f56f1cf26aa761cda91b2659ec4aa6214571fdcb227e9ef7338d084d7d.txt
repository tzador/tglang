/// This is a function that performs a merge sort on a vector of integers
/// The function takes in a vector and returns the sorted vector
fn merge_sort(mut arr: Vec<i32>) -> Vec<i32> {
    let len = arr.len();
    if len <= 1 {
        return arr;
    }

    // Divide the vector into two halves
    let mid = len / 2;
    let mut left = arr[..mid].to_vec();
    let mut right = arr[mid..].to_vec();

    // Recursively call merge_sort on the two halves
    left = merge_sort(left);
    right = merge_sort(right);

    // Initialize a new vector to hold the sorted elements
    let mut sorted_arr: Vec<i32> = Vec::new();

    // Use index variables to iterate through the two halves
    let mut left_idx = 0;
    let mut right_idx = 0;

    // Compare elements from the two halves and add them to the sorted vector
    while left_idx < mid && right_idx < len - mid {
        if left[left_idx] <= right[right_idx] {
            sorted_arr.push(left[left_idx]);
            left_idx += 1;
        } else {
            sorted_arr.push(right[right_idx]);
            right_idx += 1;
        }
    }

    // Add any remaining elements from left or right vector
    while left_idx < mid {
        sorted_arr.push(left[left_idx]);
        left_idx += 1;
    }
    while right_idx < len - mid {
        sorted_arr.push(right[right_idx]);
        right_idx += 1;
    }

    // Return the sorted vector
    sorted_arr
}