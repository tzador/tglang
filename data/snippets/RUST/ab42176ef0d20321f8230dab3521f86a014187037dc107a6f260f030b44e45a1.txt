/// This function performs insertion sort on a given array of integers.
/// It takes in the array as a mutable reference and returns a sorted array.
fn insertion_sort(arr: &mut [i32]) -> &mut [i32] {
    // Iterate through the array starting from the second element
    for i in 1..arr.len() {
        // Store the current element and its index
        let key = arr[i];
        let mut j = i;

        // Compare the key with elements on its left and shift them to the right if they are greater
        while j > 0 && arr[j - 1] > key {
            arr[j] = arr[j - 1];
            j -= 1;
        }

        // Place the key at the correct position
        arr[j] = key;
    }

    // Return sorted array
    arr
}

// Example usage
fn main() {
    let mut arr = [5, 2, 7, 3, 9, 1];
    println!("Unsorted array: {:?}", arr);

    // Call insertion_sort function
    insertion_sort(&mut arr);

    println!("Sorted array: {:?}", arr);
}

// Output:
// Unsorted array: [5, 2, 7, 3, 9, 1]
// Sorted array: [1, 2, 3, 5, 7, 9]