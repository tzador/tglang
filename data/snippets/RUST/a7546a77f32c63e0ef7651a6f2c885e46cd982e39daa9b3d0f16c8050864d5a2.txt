use std::io::{self, Read}; //Importing the 'io' module from the 'std' library.

#[derive(Debug, Clone, PartialEq)] //Defining a struct called 'Student' with debug, clone and partial equality implementations.
struct Student { 
    name: String, //Defining a 'name' field that holds a string value.
    age: u8, //Defining an 'age' field that holds an unsigned 8-bit integer value.
    grades: Vec<u8> //Defining a 'grades' field that holds a vector of unsigned 8-bit integer values.
}

impl Student {
    //Defining a function called 'calculate_average' that calculates the average of a student's grades and returns it as a float value.
    fn calculate_average(&self) -> f32 {
        let mut sum = 0; //Initializing a variable called 'sum' that holds the sum of the grades.
        for grade in &self.grades { //Looping through the 'grades' field of the student.
            sum += grade; //Adding each grade to the sum.
        }
        let len = self.grades.len(); //Getting the length of the 'grades' vector.
        let average = sum as f32 / len as f32; //Calculating the average by converting the sum and length to floats.
        average //Returning the average.
    }
}

fn main() {
    //Creating a new instance of 'Student' called 'jane' with a name, age, and grades field.
    let jane = Student {
        name: String::from("Jane Doe"),
        age: 20,
        grades: vec![90, 80, 95, 78, 100] 
    };

    println!("{:?}", jane); //Printing the struct to see its contents.

    let average = jane.calculate_average(); //Calling the 'calculate_average' function on the 'jane' instance.
    println!("{}'s average grade is {}", jane.name, average); //Printing the student's name and average grade to the console.

    let mut input = String::new(); //Creating a new mutable string variable to hold user input.
    println!("Enter a new grade: "); //Prompting the user to enter a new grade.
    io::stdin().read_line(&mut input).expect("Failed to read line"); //Reading the user's input and storing it in the 'input' variable.

    let new_grade: u8 = input.trim().parse().unwrap(); //Parsing the input to an unsigned 8-bit integer value.

    let mut new_grades = jane.grades.clone(); //Cloning the 'grades' vector in the 'jane' instance.
    new_grades.push(new_grade); //Adding the new grade to the end of the cloned vector.

    //Creating a new instance of 'Student' called 'new_jane' with the same name, age, and the updated 'grades' field.
    let new_jane = Student {
        name: jane.name,
        age: jane.age,
        grades: new_grades
    };
    
    let new_average = new_jane.calculate_average(); //Calling the 'calculate_average' function on the new instance.
    println!("After updating, {}'s new average grade is {}", new_jane.name, new_average); //Printing the updated information to the console.
}