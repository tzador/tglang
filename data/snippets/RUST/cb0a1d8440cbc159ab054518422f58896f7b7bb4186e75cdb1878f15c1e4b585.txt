// A struct representing a student
struct Student {
  name: String, // student's name 
  age: u8, // student's age
  class: String, // student's current class
  grades: [f32; 5], // array of the student's grades
  courses: Vec<String> // vector of the student's courses
}

// Implementation of methods for the Student struct
impl Student {
  // Method to add a new course to the courses vector
  pub fn add_course(&mut self, course: &str) {
    self.courses.push(String::from(course));
  }

  // Method to calculate and return the average grade for the student
  pub fn calculate_average(&self) -> f32 {
    let mut sum: f32 = 0.0; // variable to store the sum of grades
    for grade in self.grades.iter() {
      sum += grade;
    }

    sum / self.grades.len() as f32 // return the average grade
  }

  // Method to check if the student has passed all of their courses
  pub fn check_passed(&self) -> bool {
    for grade in self.grades.iter() {
      if grade < &5.0 {
        return false; // at least one grade is lower than 5.0
      }
    }

    true // all grades are equal to or higher than 5.0
  }
}

fn main() {
  // Create a new Student instance
  let mut student = Student {
    name: String::from("John Smith"),
    age: 17,
    class: String::from("12A"),
    grades: [8.9, 7.5, 9.2, 6.8, 7.1], // assume grades are out of 10.0
    courses: vec![String::from("Math"), String::from("Physics"), String::from("Chemistry"), String::from("English"), String::from("History")]
  };

  // Add a new course to the student's courses vector
  student.add_course("Biology");

  // Print the average grade and if the student has passed all courses
  println!("Student's average grade: {} \nAll courses passed: {}", student.calculate_average(), student.check_passed());
}