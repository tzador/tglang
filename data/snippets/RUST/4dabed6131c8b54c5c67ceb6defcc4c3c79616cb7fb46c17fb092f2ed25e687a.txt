// Declare a struct with 3 fields: name of type string, age of type u8, and hobbies of type vector of strings.
struct Person {
    name: String,
    age: u8,
    hobbies: Vec<String>
}

// Implement a method for the struct that prints out the person's information
impl Person {
    fn print_info(&self) {
        println!("Name: {}, Age: {}", self.name, self.age);
        println!("Hobbies:");
        for hobby in &self.hobbies {
            println!("{}", hobby);
        }
    }
}

// Declare a mutable vector of Person struct instances
let mut people: Vec<Person> = Vec::new();

// Add two instances to the vector
people.push(Person { name: String::from("John"), age: 25, hobbies: vec![String::from("gaming"), String::from("coding")] });
people.push(Person { name: String::from("Sarah"), age: 30, hobbies: vec![String::from("reading"), String::from("traveling")] });

// Loop through the vector and call the print_info method for each person
for person in &people {
    person.print_info();
}