fn main() {
    let mut vector: Vec<i32> = Vec::new(); //initialize a new mutable vector of type i32

    for i in 1..11 { //loop from 1 to 10
        vector.push(i); //add current value of i to the end of the vector
    }

    let max = vector.iter() //create an iterator for the vector
        .max() //find the maximum value in the vector
        .expect("Empty vector"); //return an error if the vector is empty
    println!("The maximum value is {}", max); //print the maximum value

    let sum: i32 = vector.iter() //create an iterator for the vector
        .sum(); //sum all the values in the vector
    println!("The sum of all values is {}", sum); //print the sum

    let filtered_vec: Vec<i32> = vector.iter() //create an iterator for the vector
        .filter(|&x| x < 5) //filter out values greater than 5
        .map(|x| x * x) //square each remaining value
        .collect(); //collect the filtered values into a new vector

    println!("The filtered and squared vector is {:?}", filtered_vec); //print the filtered vector
}