// declare an enum with associated structs
enum Employee {
  Manager { name: String, department: String, years_of_experience: u8 },
  IndividualContributor { name: String, skill_set: Vec<String>, performance_score: u8 }
}
 
// define a function to calculate bonus based on employee type and years of experience
pub fn calculate_bonus(employee: Employee, years: u8) {
  match employee {
    Employee::Manager { name: _, department, years_of_experience } => {
      let bonus = 1000 * years_of_experience as u64 / 2;
      println!("{} from the {} department has received a bonus of ${}", name, department, bonus);
    },
    Employee::IndividualContributor { name, skill_set, performance_score } => {
      let score_multiplier = match performance_score {
        1..=3 => 0.5,
        4..=6 => 0.75,
        7..=9 => 1.0,
        _ => 1.25
      };
      let bonus = 500 * skill_set.len() as u64 * score_multiplier;
      println!("{} has received a bonus of ${}", name, bonus);
    }
  }
}

// create instances of the enum
let mark = Employee::Manager{
  name: String::from("Mark Smith"),
  department: String::from("Sales"),
  years_of_experience: 10
};

let sarah = Employee::IndividualContributor{
  name: String::from("Sarah Jones"),
  skill_set: vec![String::from("Marketing"), String::from("Project Management"), String::from("Data Analysis")],
  performance_score: 8
};

// call the function to calculate bonuses
calculate_bonus(mark, 10);
calculate_bonus(sarah, 4);