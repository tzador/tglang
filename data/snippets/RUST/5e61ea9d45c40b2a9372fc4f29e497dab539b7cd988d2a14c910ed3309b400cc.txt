use std::fs;
use std::io;

// Defines a struct for a book
struct Book {
    title: String,
    author: String,
    year: u16,
}

impl Book {
    // Creates a new instance of Book with given title, author, and year
    fn new(title: &str, author: &str, year: u16) -> Book {
        Book {
            title: title.to_string(),
            author: author.to_string(),
            year: year,
        }
    }

    // Returns the title of the book
    fn get_title(&self) -> &str {
        &self.title
    }

    // Returns the author of the book
    fn get_author(&self) -> &str {
        &self.author
    }

    // Returns the year the book was published
    fn get_year(&self) -> u16 {
        self.year
    }

    // Changes the title of the book to the given value
    fn set_title(&mut self, title: &str) {
        self.title = title.to_string();
    }

    // Changes the author of the book to the given value
    fn set_author(&mut self, author: &str) {
        self.author = author.to_string();
    }

    // Changes the year of publication of the book to the given value
    fn set_year(&mut self, year: u16) {
        self.year = year;
    }
}

// Defines a function to read and parse a CSV file containing book data
fn read_books_from_csv(filename: &str) -> Result<Vec<Book>, io::Error> {
    // Attempts to read the contents of the file into a string
    let contents = fs::read_to_string(filename)?;

    // Splits the contents on each new line, creating an array of strings
    let lines = contents.split("\n");

    // Initializes an empty vector to store the books
    let mut books = Vec::new();

    // Iterates over each line in the file
    for line in lines {
        // Splits the line on each comma, creating an array of strings
        let split_line = line.split(",");

        // Extracts the title, author, and year from the split line
        let title = split_line[0];
        let author = split_line[1];
        let year = split_line[2].parse::<u16>().unwrap();

        // Creates a new Book instance with the extracted data
        let book = Book::new(title, author, year);

        // Pushes the new book onto the vector
        books.push(book);
    }

    // Returns the vector of books
    Ok(books)
}

// Defines a main function to run the program
fn main() {
    // Attempts to read and parse the CSV file of books
    let result = read_books_from_csv("books.csv");

    // Checks if there was an error reading the file
    if let Err(e) = result {
        // Prints the error message to the console
        println!("Error reading file: {}", e);
    } else {
        // Assigns the vector of books to a variable
        let books = result.unwrap();

        // Iterates over each book in the vector
        for book in books {
            // Prints the title, author, and year of the book to the console
            println!("Title: {}, Author: {}, Year: {}", book.get_title(), book.get_author(), book.get_year());
        }
    }
}