use std::collections::{HashMap, HashSet}; // Import necessary libraries

/// Struct defining a person with a name and age
struct Person {
    name: String,
    age: u32,
}

/// Enum defining possible actions for a person
enum Action {
    Eat,
    Sleep,
    Work,
    Play,
}

/// Implementation of a custom method for the person struct
impl Person {
    /// Takes in an action and prints a corresponding message
    fn do_action(&self, action: Action) {
        match action {
            Action::Eat => println!("{} is eating", self.name),
            Action::Sleep => println!("{} is sleeping", self.name),
            Action::Work => println!("{} is working", self.name),
            Action::Play => println!("{} is playing", self.name),
        }
    }
}

fn main() {
    // Create a HashMap of people's names and ages
    let mut people_map = HashMap::new();
    people_map.insert("John", 24);
    people_map.insert("Mary", 30);
    people_map.insert("Alex", 18);
    people_map.insert("Jane", 28);

    // Create a HashSet of possible actions
    let mut actions_set = HashSet::new();
    actions_set.insert(Action::Eat);
    actions_set.insert(Action::Sleep);
    actions_set.insert(Action::Work);
    actions_set.insert(Action::Play);

    // Loop through each person in the map
    for (name, age) in &people_map {
        // Create a new person instance with the current name and age
        let person = Person {
            name: name.to_string(),
            age: *age,
        };

        // Randomly select an action from the set
        let action = actions_set.iter().next().unwrap();

        // Execute the action for the current person
        person.do_action(*action);
    }
}