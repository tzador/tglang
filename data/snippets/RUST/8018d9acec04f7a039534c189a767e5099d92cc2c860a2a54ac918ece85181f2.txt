use std::sync::{Arc, Mutex};

// create a struct to represent a person
struct Person {
    name: String,
    age: u32,
}

// implement a method to "greet" a person
impl Person {
    fn greet(&self) {
        println!("Hello, my name is {} and I am {} years old.", self.name, self.age);
    }
}

fn main() {
    // create an Arc (Atomic Reference Counted) to share the Person struct across threads
    let shared_person = Arc::new(Mutex::new(Person {
        name: String::from("John"),
        age: 30,
    }));
    
    // create two threads that will access the shared_person
    for _ in 0..2 {
        let shared_person = Arc::clone(&shared_person);
        
        // use thread::spawn to create a new thread
        std::thread::spawn(move || {
            
            // lock the shared_person so that only one thread can access it at a time
            let mut person = shared_person.lock().unwrap();
            
            // use the greet method on the Person struct
            person.greet();
        });
    }
}