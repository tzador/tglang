// This code snippet creates a function that calculates the nubmer of prime numbers within a given range

fn calculate_prime_count(start: u64, end: u64) -> u64 {
    let mut count: u64 = 0;

    for num in start..=end {
        if is_prime(num) {
            count += 1;
        }
    }

    return count;
}

// Helper function to check if a number is prime or not
fn is_prime(num: u64) -> bool {
    if num <= 1 {
        return false;
    }
    
    let mut divisor = 2;

    // Loop until the square root of num is reached
    while divisor * divisor <= num {
        // Check if num is divisible by the current divisor
        if num % divisor == 0 {
            return false;
        }

        // Increase divisor by 1
        divisor += 1;
    }

    // If num is not divisible by any number before its square root, it is prime
    return true;
}