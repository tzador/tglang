/// A generic function that returns a vector of squared elements from a given vector
///
/// Arguments:
/// - input_vector: a vector of type T, containing elements to be squared
///
/// Returns:
/// - a vector of type T, containing squared elements from input_vector
///
fn square_vector<T: Copy + Clone + Mul<Output = T>>(input_vector: Vec<T>) -> Vec<T> {
    let mut output_vector: Vec<T> = Vec::new(); // Initialize an empty vector of type T
    for element in input_vector.iter() { // Iterate through the elements of input_vector
        let squared_element = *element * *element; // Square the current element
        output_vector.push(squared_element); // Add the squared element to the output vector
    }
    return output_vector; // Return the output vector
}

fn main() {
    let input_vector = vec![1, 2, 3, 4, 5];
    println!("Input vector: {:?}", input_vector);
    // Output: Input vector: [1, 2, 3, 4, 5]
    
    let output_vector = square_vector(input_vector);
    println!("Squared vector: {:?}", output_vector);
    // Output: Squared vector: [1, 4, 9, 16, 25]
}