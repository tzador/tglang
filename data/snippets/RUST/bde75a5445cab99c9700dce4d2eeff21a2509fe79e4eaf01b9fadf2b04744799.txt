// This code implements a dynamic programming algorithm, specifically the Dijkstra's algorithm, for finding the shortest path in a graph.
// The code uses the rust standard library's HashMap data structure to store the graph.
// It takes in the graph's adjacency matrix as an input and returns the shortest path distance and the corresponding path as output.

use std::collections::HashMap; // import the hashmap data structure from the rust standard library

// function to find the shortest path in a graph using Dijkstra's algorithm
// takes in the adjacency matrix and source vertex as parameters
// returns the tuple (distance, path)
fn dijkstra(adj_matrix: &Vec<Vec<i32>>, src: i32) -> (i32, Vec<i32>) {
    let num_nodes = adj_matrix.len(); // get the number of nodes in the graph
    let mut dist: Vec<i32> = vec![i32::MAX; num_nodes]; // initialize the distance array with infinity values
    let mut prev: Vec<i32> = vec![-1; num_nodes]; // initialize the previous array with -1 values
    let mut visited: HashMap<i32, bool> = HashMap::new(); // initialize the hashmap for tracking visited nodes

    dist[src as usize] = 0; // set the distance of the source node to 0

    // loop through all the nodes in the graph
    for _ in 0..num_nodes {
        let curr_node = get_min_distance_node(&dist, &visited); // get the node with the minimum distance among the unvisited nodes
        visited.insert(curr_node, true); // mark the current node as visited

        // loop through all the neighbors of the current node
        for neighbor in 0..num_nodes {
            if !visited.contains_key(&neighbor) && adj_matrix[curr_node as usize][neighbor] != 0 { // check if the neighbor has not been visited and there is an edge between the current node and the neighbor
                let new_dist = dist[curr_node as usize] + adj_matrix[curr_node as usize][neighbor]; // calculate the new distance to the neighbor

                // check if the new distance is smaller than the current distance to the neighbor
                if new_dist < dist[neighbor as usize] {
                    dist[neighbor as usize] = new_dist; // update the distance to the neighbor
                    prev[neighbor as usize] = curr_node; // update the previous array with the current node as the parent of the neighbor
                }
            }
        }
    }

    // build the shortest path from the previous array
    let mut path: Vec<i32> = Vec::new(); // initialize the path vector
    let mut curr_node = num_nodes - 1; // start from the destination node
    path.push(curr_node as i32); // add the destination node to the path

    // loop until we reach the source node
    while curr_node != src {
        curr_node = prev[curr_node as usize]; // update the current node to its parent
        path.insert(0, curr_node as i32); // insert the current node to the beginning of the path
    }

    (dist[num_nodes - 1], path) // return the shortest path distance and the corresponding path
}

// helper function to get the node with the minimum distance among the unvisited nodes
// takes in the distance array and the visited hashmap as parameters
// returns the index of the node with the minimum distance
fn get_min_distance_node(dist: &Vec<i32>, visited: &HashMap<i32, bool>) -> i32 {
    let mut min_dist = i32::MAX; // initialize the minimum distance as infinity
    let mut min_node = -1; // initialize the minimum distance node as -1
    for (node, val) in visited {
        if !val && dist[*node as usize] < min_dist { // check if the node is unvisited and its distance is smaller than the current minimum distance
            min_dist = dist[*node as usize]; // update the minimum distance
            min_node = *node; // update the minimum distance node
        }
    }

    min_node // return the node with the minimum distance
}

// example usage of the dijkstra function
fn main() {
    let adj_matrix = vec![vec![0, 4, 0, 0, 0, 0, 0, 8, 0],
                          vec![4, 0, 8, 0, 0, 0, 0, 11, 0],
                          vec![0, 8, 0, 7, 0, 4, 0, 0, 2],
                          vec![0, 0, 7, 0, 9, 14, 0, 0, 0],
                          vec![0, 0, 0, 9, 0, 10, 0, 0, 0],
                          vec![0, 0, 4, 14, 10, 0, 2, 0, 0],
                          vec![0, 0, 0, 0, 0, 2, 0, 1, 6],
                          vec![8, 11, 0, 0, 0, 0, 1, 0, 7],
                          vec![0, 0, 2, 0, 0, 0, 6, 7, 0]];
    let (dist, path) = dijkstra(&adj_matrix, 0); // find the shortest path from node 0 (A)

    println!("Shortest distance from node 0 (A) to node 8 (H): {}", dist); // output: Shortest distance from node 0 (A) to node 8 (H): 14
    println!("Shortest path from node 0 (A) to node 8 (H): {:?}", path); // output: Shortest path from node 0 (A) to node 8 (H): [0, 7, 6, 5, 4, 3, 2, 8]
}