// Function to calculate Fibonacci sequence
// Takes in a number and returns a vector containing the sequence
fn fib(n: u64) -> Vec<u64> {
    let mut fib_sequence: Vec<u64> = vec![]; // Create empty vector
    // Use match statement to handle possible number inputs
    match n {
        0 => fib_sequence.push(0), // If n is 0, push 0 to vector
        1 => fib_sequence.push(1), // If n is 1, push 1 to vector
        _ => { // For all other numbers, loop through to calculate sequence
            fib_sequence.push(0); // Push 0 to vector as first number in sequence
            fib_sequence.push(1); // Push 1 to vector as second number in sequence

            // Loop from third number to nth number 
            for i in 2..n {
                let next_num = fib_sequence[i-1] + fib_sequence[i-2]; // Calculate next number in sequence
                fib_sequence.push(next_num); // Push calculated number to vector
            }
        }
    }

    // Return the final vector containing the Fibonacci sequence
    fib_sequence
}

// Test the fib function with input of 10
let sequence = fib(10);
println!("{:?}", sequence); // Print out the sequence, output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]