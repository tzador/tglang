use std::collections::HashMap;

// This function calculates the nth Fibonacci number using dynamic programming
fn fibonacci(n: u32) -> u32 {
    // Create a cache to store previously calculated Fibonacci numbers
    let mut cache: HashMap<u32, u32> = HashMap::new();

    // A recursive function that returns the nth Fibonacci number
    fn calculate_fib(n: u32, cache: &mut HashMap<u32, u32>) -> u32 {
        // Check if the nth Fibonacci number is already in the cache
        if let Some(fib_n) = cache.get(&n) {
            // Simply return the cached value
            *fib_n
        } else {
            // If not in cache, calculate the Fibonacci number using recursion
            let fib_n = calculate_fib(n - 1, cache) + calculate_fib(n - 2, cache);
            // Store the calculated value in the cache
            cache.insert(n, fib_n);
            // Return the calculated number
            fib_n
        }
    }

    // Call the recursive function to calculate the nth Fibonacci number
    calculate_fib(n, &mut cache)
}