// This code snippet shows an example of a generic function that performs a bubble sort on a vector of any type
// The generic type parameter T represents any type that can be compared using the partial ordering trait
fn bubble_sort<T: PartialOrd>(vector: &mut Vec<T>) {
    let n = vector.len();
    let mut swapped;
    // Loop until no elements are swapped
    loop {
        swapped = false;
        // Compare adjacent elements and swap if necessary
        for i in 1..n {
            if vector[i - 1] > vector[i] {
                vector.swap(i - 1, i);
                swapped = true;
            }
        }
        // If no elements were swapped, the vector is sorted and the loop can be exited
        if !swapped {
            break;
        }
    }
}