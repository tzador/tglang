const PI: f64 = 3.141592653589793;

// Define a Struct for a Circle
struct Circle {
    radius: f64,
}

impl Circle {
    // Method to calculate the area of a Circle
    fn area(&self) -> f64 {
        PI * self.radius * self.radius
    }

    // Method to calculate the circumference of a Circle
    fn circumference(&self) -> f64 {
        2.0 * PI * self.radius
    }

    // Method to double the radius of a Circle
    fn double_radius(&mut self) {
        self.radius *= 2.0;
    }
}

fn main() {
    // Create a new instance of a Circle with radius of 5.0
    let mut circle = Circle { radius: 5.0 };

    // Print the area and circumference of the Circle
    println!("Circle with radius {} has an area of {} and circumference of {}", circle.radius, circle.area(), circle.circumference());

    // Double the radius of the Circle
    circle.double_radius();

    // Print the updated area and circumference of the Circle
    println!("Circle with radius {} has an area of {} and circumference of {}", circle.radius, circle.area(), circle.circumference());
}