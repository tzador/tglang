fn merge_sort<T: Ord + Clone>(arr: &mut [T], temp: &mut Vec<T>, low: usize, high: usize) {
    if low >= high {
        return;
    }
    let mid = (low + high) / 2;
    merge_sort(arr, temp, low, mid);
    merge_sort(arr, temp, mid + 1, high);
    merge(arr, temp, low, mid, high);
}

fn merge<T: Ord + Clone>(arr: &mut [T], temp: &mut Vec<T>, low: usize, mid: usize, high: usize) {
    for i in low..=high {
        temp[i] = arr[i].clone();
    }

    let mut i = low;
    let mut j = mid + 1;
    let mut k = low;

    while i <= mid && j <= high {
        if temp[i] <= temp[j] {
            arr[k] = temp[i].clone();
            i += 1;
        } else {
            arr[k] = temp[j].clone();
            j += 1;
        }
        k += 1;
    }

    while i <= mid {
        arr[k] = temp[i].clone();
        k += 1;
        i += 1;
    }
}