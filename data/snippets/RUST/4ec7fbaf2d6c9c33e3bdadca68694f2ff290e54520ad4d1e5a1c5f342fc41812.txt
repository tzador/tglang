// Create a struct for a blog post
struct BlogPost {
    title: String,
    body: String,
    author: String,
    date: String,
    views: u32,
}

// Implement a method to print out the blog post information
impl BlogPost {
    fn print_info(&self) {
        println!("Title: {}\nBody: {}\nAuthor: {}\nDate Published: {}\nViews: {}\n", self.title, self.body, self.author, self.date, self.views);
        // Use string formatting to display the views with commas
        println!("Title: {}\nBody: {}\nAuthor: {}\nDate Published: {}\nViews: {:#,}\n", self.title, self.body, self.author, self.date, self.views);
    }

    // Add a method to increase the views by a given number
    fn increase_views(&mut self, num_views: u32) {
        self.views += num_views;
        println!("Views increased by {} to {}.", num_views, self.views);
    }
}

// Create a new instance of the BlogPost struct
let mut first_post = BlogPost {
    title: String::from("My Coding Journey"),
    body: String::from("I started learning Rust last week and it's been an exciting journey so far!"),
    author: String::from("John Doe"),
    date: String::from("10/05/2021"),
    views: 1000,
};

// Call the print_info method on the first_post
first_post.print_info();

// Increase the views by 500
first_post.increase_views(500);

// Output:
/*
Title: My Coding Journey
Body: I started learning Rust last week and it's been an exciting journey so far!
Author: John Doe
Date Published: 10/05/2021
Views: 1,000

Title: My Coding Journey
Body: I started learning Rust last week and it's been an exciting journey so far!
Author: John Doe
Date Published: 10/05/2021
Views: 1,000

Views increased by 500 to 1,500.
*/