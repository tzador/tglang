// Defines a struct named 'Triangle' with fields 'side1', 'side2', and 'side3'
// All fields are of type 'f64' and marked as public
struct Triangle {
    pub side1: f64,
    pub side2: f64,
    pub side3: f64
}

// Defines an 'impl' block for the 'Triangle' struct
impl Triangle {
    // Defines a method named 'area' which takes in a reference to a 'Triangle' instance and returns a float
    fn area(&self) -> f64 {
        // Calculates the semi-perimeter of the triangle
        let s = (self.side1 + self.side2 + self.side3) / 2.0;
        // Calculates and returns the area of the triangle using Heron's formula
        (s * (s - self.side1) * (s - self.side2) * (s - self.side3)).sqrt()
    }

    // Defines a method named 'is_equilateral' which takes in a reference to a 'Triangle' instance and returns a boolean
    fn is_equilateral(&self) -> bool {
        // Compares the lengths of all sides and returns true if they are all equal
        self.side1 == self.side2 && self.side2 == self.side3
    }
}

fn main() {
    // Creates a new instance of the 'Triangle' struct named 'my_triangle' with side lengths 3, 4, and 5
    let my_triangle = Triangle { side1: 3.0, side2: 4.0, side3: 5.0 };
    // Prints the area of the triangle using the 'area' method
    println!("The area of my triangle is: {}", my_triangle.area());
    // Prints whether the triangle is equilateral using the 'is_equilateral' method
    println!("Is my triangle equilateral? {}", my_triangle.is_equilateral());
}