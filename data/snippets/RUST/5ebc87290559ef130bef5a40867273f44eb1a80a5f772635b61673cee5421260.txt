#![allow(dead_code)]

// Define a struct called 'Person' with two fields: 'name' of type 'String' and 'age' of type 'u32'
struct Person {
    name: String,
    age: u32,
}

// Implement a 'new' function for the 'Person' struct
impl Person {
    fn new(name: &str, age: u32) -> Person {
        Person {
            name: String::from(name),
            age
        }
    }
}

// Create an instance of the 'Person' struct
let person = Person::new("John", 25);

// Define an enum called 'Language' with three variants: 'Rust', 'Python', and 'Java'
enum Language {
    Rust,
    Python,
    Java,
}

// Define a function called 'print_person_info' that takes in a 'Person' and 'Language' as parameters
fn print_person_info(person: Person, language: Language) {
    println!("Name: {}, Age: {}", person.name, person.age); // Print the person's information
    match language { // Print the preferred language
        Language::Rust => println!("Preferred Language: Rust"),
        Language::Python => println!("Preferred Language: Python"),
        Language::Java => println!("Preferred Language: Java"),
    }
}

// Call the 'print_person_info' function with the 'person' instance and the 'Language::Rust' variant as arguments
print_person_info(person, Language::Rust);