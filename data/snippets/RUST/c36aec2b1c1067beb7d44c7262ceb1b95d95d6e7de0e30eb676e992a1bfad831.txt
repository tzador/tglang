use std::collections::HashMap; // import HashMap from standard library

/// This function takes in a vector of strings and returns a hashmap where the key is the length of the string 
/// and the value is a vector of all the strings with that length.
fn get_string_length_map(strings: Vec<&str>) -> HashMap<usize, Vec<&str>> {
    // Create empty hashmap to store string lengths and corresponding strings
    let mut length_map: HashMap<usize, Vec<&str>> = HashMap::new();

    // Iterate through the vector of strings
    for string in strings.iter() {
        // Get the length of the current string
        let string_length = string.len();

        // Check if the hashmap already contains an entry for this string length
        if length_map.contains_key(&string_length) {
            // If it does, add the current string to the vector of strings with this length
            length_map.get_mut(&string_length).unwrap().push(string);
        } else {
            // If it doesn't, create a new entry with the current string length as the key and a vector with the current string as the value
            length_map.insert(string_length, vec![string]);
        }
    }

    // Return the final hashmap
    length_map
}

fn main() {
    // Create a vector of strings
    let strings = vec!["hello", "world", "rust", "language", "snippet"];

    // Call the function and store the result in a variable
    let length_map = get_string_length_map(strings);

    // Print out the hashmap
    println!("{:?}", length_map); // Output: {5: ["hello", "world", "rust"], 8: ["language"], 7: ["snippet"]}
}