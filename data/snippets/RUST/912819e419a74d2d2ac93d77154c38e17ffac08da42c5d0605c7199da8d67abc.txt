fn merge_sort<T: Ord>(list: &mut [T]) { //define a function named 'merge_sort' with a generic type 'T' that implements the 'Ord' trait
  let mid = list.len() / 2; //get the middle index of the list
  if mid == 0 { //base case
    return; //return if list is empty
  }

  merge_sort(&mut list[..mid]); //recursively call merge_sort on the first half of the list
  merge_sort(&mut list[mid..]); //recursively call merge_sort on the second half of the list

  let mut temp = vec![]; //create an empty vector to store the sorted elements
  let mut i = 0; //initialize a counter variable for first half of the list
  let mut j = mid; //initialize a counter variable for second half of the list

  while i < mid && j < list.len() { //loop while both counters are within range
    if list[i] <= list[j] { //if element in the first half of the list is smaller than element in the second half
      temp.push(list[i]); //push the element into the temporary vector
      i += 1; //increment first counter
    } else { //if element in the second half of the list is smaller than element in the first half
      temp.push(list[j]); //push the element into the temporary vector
      j += 1; //increment second counter
    }
  }

  while i < mid { //loop to add remaining elements from first half of the list
    temp.push(list[i]); //push element into temporary vector
    i += 1; //increment first counter
  }

  while j < list.len() { //loop to add remaining elements from second half of the list
    temp.push(list[j]); //push element into temporary vector
    j += 1; //increment second counter
  }

  list.copy_from_slice(&temp); //copy the sorted elements from the temporary vector into the original list
}