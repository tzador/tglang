// Sample code snippet in RUST

// Define custom data type with enumeration

enum CreditCard {
    Visa(String),
    Mastercard(String),
    AmericanExpress(u16),
}

// Define function to check validity of credit card

fn validate_card(card: CreditCard) {
    match card {
        // Check validity based on card type and number
        CreditCard::Visa(number) => {
            if number.len() == 16 {
                println!("Valid Visa card!");
            } else {
                println!("Invalid Visa card.");
            }
        }
        CreditCard::Mastercard(number) => {
            if number.len() == 16 || number.len() == 19 {
                println!("Valid Mastercard!");
            } else {
                println!("Invalid Mastercard.");
            }
        }
        CreditCard::AmericanExpress(number) => {
            if number.len() == 15 {
                println!("Valid American Express card!");
            } else {
                println!("Invalid American Express card.");
            }
        }
    }
}

// Main function to create and validate credit cards

fn main() {
    // Create Visa card
    let visa = CreditCard::Visa(String::from("4454656456546565"));
    // Validate Visa card
    validate_card(visa);
    // Create Mastercard
    let mastercard = CreditCard::Mastercard(String::from("5555555555554444"));
    // Validate Mastercard
    validate_card(mastercard);
    // Create American Express card
    let american_express = CreditCard::AmericanExpress(378282246310005);
    // Validate American Express card
    validate_card(american_express);
}