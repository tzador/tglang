pub struct BST<'a, T> {
    root: Option<Box<Node<'a, T>>>,
}

struct Node<'a, T> {
    data: &'a T,
    left: Option<Box<Node<'a, T>>>,
    right: Option<Box<Node<'a, T>>>,
}

trait Tree<'a, T> {
    fn insert(&mut self, data: &'a T);
    fn contains(&self, data: &'a T) -> bool;
}

impl<'a, T: Ord> BST<'a, T> {
    pub fn new() -> Self {
        BST { root: None }
    }

    fn insert_node(node: &mut Option<Box<Node<'a, T>>>, data: &'a T) {
        if let Some(ref mut current_node) = node {
            if data <= current_node.data {
                BST::insert_node(&mut current_node.left, data);
            } else {
                BST::insert_node(&mut current_node.right, data);
            }
        } else {
            *node = Some(Box::new(Node {
                data,
                left: None,
                right: None,
            }));
        }
    }

    fn contains_node(node: &Option<Box<Node<'a, T>>>, data: &'a T) -> bool {
        if let Some(ref current_node) = node {
            if data == current_node.data {
                true
            } else if data < current_node.data {
                BST::contains_node(&current_node.left, data)
            } else {
                BST::contains_node(&current_node.right, data)
            }
        } else {
            false
        }
    }
}

impl<'a, T: Ord> Tree<'a, T> for BST<'a, T> {
    fn insert(&mut self, data: &'a T) {
        BST::insert_node(&mut self.root, data);
    }

    fn contains(&self, data: &'a T) -> bool {
        BST::contains_node(&self.root, data)
    }
}