use std::collections::HashMap;
/// Struct representing a person with name, age, and favorite color fields
struct Person {
    name: String,
    age: u32,
    favorite_color: String,
}

/// Implementation of the Person struct
impl Person {
    /// Returns the person's name
    fn get_name(&self) -> &str {
        &self.name
    }

    /// Returns the person's age
    fn get_age(&self) -> u32 {
        self.age
    }

    /// Returns the person's favorite color
    fn get_favorite_color(&self) -> &str {
        &self.favorite_color
    }

    /// Updates the person's age and favorite color
    fn update_info(&mut self, age: u32, favorite_color: &str) {
        self.age = age;
        self.favorite_color = String::from(favorite_color);
    }
}

/// Function to create a HashMap of Person structs with names as keys
fn create_people() -> HashMap<String, Person> {
    let mut people = HashMap::new();

    // Adding new Person structs to the HashMap
    people.insert(String::from("John"), Person {
        name: String::from("John"),
        age: 32,
        favorite_color: String::from("blue"),
    });
    people.insert(String::from("Sarah"), Person {
        name: String::from("Sarah"),
        age: 27,
        favorite_color: String::from("green"),
    });
    people.insert(String::from("David"), Person {
        name: String::from("David"),
        age: 44,
        favorite_color: String::from("red"),
    });

    // Returning the populated HashMap
    people
}

fn main() {
    // Creating a new HashMap of Person structs
    let people = create_people();

    // Printing the name, age, and favorite color of each person in the HashMap
    for (_, person) in people {
        println!("Name: {}, Age: {}, Favorite Color: {}", person.get_name(), person.get_age(), person.get_favorite_color());
    }

    // Updating Sarah's age and favorite color
    if let Some(sarah) = people.get_mut("Sarah") {
        sarah.update_info(30, "purple");
    }

    // Printing Sarah's information again to confirm update
    println!("Sarah's updated age: {}", people.get("Sarah").unwrap().get_age());
    println!("Sarah's updated favorite color: {}", people.get("Sarah").unwrap().get_favorite_color());
}