fn main() {
    
    //Function that takes in a number and returns its square
    fn square(num: i32) -> i32 {
        num * num
    }
    
    //Function that takes in a closure and executes it
    fn execute(closure: &dyn Fn()) {
        closure();
    }
    
    //Array of numbers
    let nums = vec![1, 2, 3, 4, 5];
    
    //Using the iterator method "map" to square each number in the array
    let squares = nums
        .into_iter() //Convert the array into an iterator
        .map(|n| square(n)) //Apply the "square" function to each element in the iterator
        .collect::<Vec<i32>>(); //Collect the squared values into a new vector
    
    //Creating a closure that prints out a message with the squared value
    let print_square = |n: i32| println!("The square of {} is {}", n, square(n));
    
    //Executing the closure on each element in the "squares" vector
    for n in squares {
        execute(&print_square(n));
    }
}