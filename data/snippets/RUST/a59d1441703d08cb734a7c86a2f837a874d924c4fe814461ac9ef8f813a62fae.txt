#![allow(unused_variables)]               // Allows unused variables to be ignored by the compiler
use std::collections::HashMap;             // Imports the hashmap from the standard library
use std::fs::File;                         // Imports the file module from the standard library
use std::io::prelude::*;                   // Imports the prelude for IO operations
use std::io::BufReader;                    // Imports the buffer reader module
use std::io::SeekFrom;                     // Imports the SeekFrom module for seeking file positions
use std::io::Read;                         // Imports the Read trait for reading from streams
use std::error::Error;                     // Imports the Error trait for handling errors
fn main() {                                // Main function
    let file_path = "example.txt";         // Path to the example text file
    let mut file = match File::open(&file_path) {   // Matching on the result of opening the file
        Ok(f) => f,                         // If successful, assign file handle to variable
        Err(e) => panic!("Error opening file: {}", e),   // If error, panic with error message
    };
    let mut buffer = vec![0; 10];           // Create a buffer of size 10 bytes
    file.seek(SeekFrom::Start(2));          // Seek to the 2nd byte in the file
    file.read_exact(&mut buffer);           // Read 10 bytes into the buffer from the current file position
    let file_text = String::from_utf8(buffer).expect("Error converting buffer to string");  // Convert buffer to string, panic if error
    let mut word_count: HashMap<String, i32> = HashMap::new();    // Create hashmap for storing word count
    for word in file_text.split_whitespace() {    // Iterate through words in the file text
        *word_count.entry(word.to_string()).or_insert(0) += 1;    // Count the number of occurrences of each word
    }
    for (word, count) in &word_count {       // Iterate through the hashmap
        println!("Word: {} // Count: {}", word, count);    // Print each word and its count
    }
}