/// Function to calculate nth fibonacci number using dynamic programming
    fn fibonacci(n: u32) -> u32 {
        let mut cache = vec![0; n as usize + 1];
        if n == 0 {
            return 0;
        }
        cache[0] = 0;
        cache[1] = 1;
        for i in 2..=n {
            cache[i as usize] = cache[(i-1) as usize] + cache[(i-2) as usize];
        }
        return cache[n as usize];
    }

    fn main() {
        // Input for nth fibonacci number
        let n: u32 = 10;

        // Calling the fibonacci function
        let result = fibonacci(n);

        // Printing the result
        println!("The {}th fibonacci number is {}", n, result);
    }