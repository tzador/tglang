struct Task {
    id: u32,
    name: String,
    priority: u8,
    complete: bool,
}

impl Task {
    // method to update task priority
    fn update_priority(&mut self, new_priority: u8) {
        self.priority = new_priority;
    }

    // method to mark task as complete
    fn complete(&mut self) {
        self.complete = true;
    }
}

// main function
fn main() {
    // create a vector of tasks
    let mut task_list: Vec<Task> = vec![];

    // add tasks with different priorities
    task_list.push(Task {
        id: 1,
        name: "Code snippet generation".to_string(),
        priority: 1,
        complete: false,
    });
    task_list.push(Task {
        id: 2,
        name: "Debugging and testing".to_string(),
        priority: 2,
        complete: false,
    });
    task_list.push(Task {
        id: 3,
        name: "Optimization and refactoring".to_string(),
        priority: 3,
        complete: false,
    }); 

    // print out each task in the list
    for task in &mut task_list {
        println!("Task #{}: {}", task.id, task.name);
    }

    // update priority of task #2
    task_list[1].update_priority(1);

    // mark task #1 complete
    task_list[0].complete();
}