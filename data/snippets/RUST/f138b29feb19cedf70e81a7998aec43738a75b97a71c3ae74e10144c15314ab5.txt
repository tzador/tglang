// This function takes in a vector of strings and returns the shortest string in the vector

fn shortest_string(strings: Vec<String>) -> Option<String> {
    let mut shortest = None; // initialize shortest string to None type
    for string in strings {
        if shortest.is_none() || string.len() < shortest.unwrap().len() {
            // check if current string is shorter than previous shortest string
            shortest = Some(string);
            // update shortest string if current string is shorter
        }
    }
    shortest // return shortest string
}

fn main() {
    let strings = vec!["apple".to_string(), "banana".to_string(), "orange".to_string()];
    let shortest = shortest_string(strings).unwrap_or("No strings provided".to_string());
    // call shortest_string function and provide default string if no strings are provided
    println!("The shortest string is: {}", shortest);
    // print out the shortest string
}