use std::io::{self, Read};
use rand::{Rng, thread_rng};

// Define a trait with a generic type
pub trait MyTrait<T> {
    // This function takes in a generic type T and returns another type
    fn do_something(&self, arg: T) -> usize;
}

// Define a struct that implements the trait
struct MyStruct<T> {
    // This field is of type T
    val: T,
}

// Implement the trait for the struct
impl<T> MyTrait<T> for MyStruct<T> {
    fn do_something(&self, arg: T) -> usize {
        // Generate a random number using the `thread_rng()` function
        let rand_num = thread_rng().gen_range(0..10);
        
        // Use the `println!()` macro to print the value of `arg`
        println!("Argument: {}", arg);
        
        // Use a if/else statement to check if the random number is less than 5
        if rand_num < 5 {
            // If it is less than 5, return the length of the value as a string
            self.val.to_string().len()
        } else {
            // If it is greater than or equal to 5, return 0
            0
        }
    }
}

fn main() {
    // Take user input
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read input");
    
    // Create an instance of the struct with input as the value for the field
    let my_struct = MyStruct { val: input };
    
    // Call the `do_something()` function on the instance
    let result = my_struct.do_something("hello");
    
    // Print the result
    println!("Result: {}", result);
}