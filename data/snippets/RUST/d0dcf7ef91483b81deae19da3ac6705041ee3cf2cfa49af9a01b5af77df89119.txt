#![feature(restricted_std)]
use std::ops::Add;
pub fn add<T>(a: T, b: T) -> T
    where T: Add<Output=T>
{
    a + b
}

enum Tree {
    Empty,
    Node(Box<Tree>, Box<Tree>),
}

impl Tree {
    pub fn insert(self, value: i32) -> Tree {
        match self {
            Tree::Empty => Tree::Node(Box::new(Tree::Empty), Box::new(Tree::Empty)),
            Tree::Node(left, right) => {
                if value < left.value {
                    Tree::Node(Box::new(left.insert(value)), right)
                } else {
                    Tree::Node(left, Box::new(right.insert(value)))
                }
            }
        }
    }
}

struct Person {
    name: String,
    age: u32,
    job: Option<String>,
}

fn main() {
    let person = Person {
        name: String::from("John"),
        age: 25,
        job: None,
    };
    let result = add(5, 10);
}