// This code snippet uses a struct to create a tree data structure
struct Node<'a, T> {
    value: T,
    left_child: Option<Box<Node<'a, T>>>,
    right_child: Option<Box<Node<'a, T>>>,
}

// This function recursively inserts a new value into the tree
fn insert<'a, T: Ord>(root: &'a mut Option<Box<Node<'a, T>>>, value: T) {
    match *root {
        Some(ref mut node) => {
            if value < node.value {
                insert(&mut node.left_child, value);
            } else {
                insert(&mut node.right_child, value);
            }
        }
        None => {
            *root = Some(Box::new(Node {
                value,
                left_child: None,
                right_child: None,
            }));
        }
    }
}

// This function recursively searches for a value in the tree
fn search<'a, T: Ord>(root: &'a Option<Box<Node<'a, T>>>, value: T) -> bool {
    match *root {
        Some(ref node) => {
            if value == node.value {
                true
            } else if value < node.value {
                search(&node.left_child, value)
            } else {
                search(&node.right_child, value)
            }
        }
        None => false,
    }
}

// Main function where the tree is created and values are inserted
fn main() {
    let mut root = None; // Creates an empty tree

    // Insert values into the tree
    insert(&mut root, 50);
    insert(&mut root, 30);
    insert(&mut root, 80);
    insert(&mut root, 20);
    insert(&mut root, 40);
    insert(&mut root, 60);
    insert(&mut root, 90);
    insert(&mut root, 10);

    // Search for a value in the tree and print the result
    println!("Search for value 40: {}", search(&root, 40)); // Output: true
    println!("Search for value 70: {}", search(&root, 70)); // Output: false
}