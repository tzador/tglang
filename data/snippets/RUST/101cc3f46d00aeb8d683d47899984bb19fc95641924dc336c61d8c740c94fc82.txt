// Struct defining a Node for a binary search tree
struct Node<K, V> {
    key: K,
    value: V,
    left_child: Option<Box<Node<K, V>>>,
    right_child: Option<Box<Node<K, V>>>
}

// Implementation of an insert function for the binary search tree
impl<K: Ord, V> Node<K, V> {
    fn insert(&mut self, key: K, value: V) {
        if key < self.key {
            if let Some(ref mut left) = self.left_child {
                left.insert(key, value);
            } else {
                self.left_child = Some(Box::new(Node {
                    key,
                    value,
                    left_child: None,
                    right_child: None
                }));
            }
        } else if key > self.key {
            if let Some(ref mut right) = self.right_child {
                right.insert(key, value);
            } else {
                self.right_child = Some(Box::new(Node {
                    key,
                    value,
                    left_child: None,
                    right_child: None
                }));
            }
        } else {
            // Key already exists, update the value
            self.value = value;
        }
    }
}

// Example usage:
let mut bst = Node {
    key: 10,
    value: "Hello",
    left_child: None,
    right_child: None
};
bst.insert(5, "World");
bst.insert(15, "!");