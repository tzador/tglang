// Define a struct named 'Employee' with two fields: name (string) and age (integer)
struct Employee {
    name: String,
    age: i32
}

// Create a function named 'new_employee' that takes in two parameters: name (string), age (integer)
// and returns an Employee object with the given values
fn new_employee(name: String, age: i32) -> Employee {
    Employee { name, age }
}

// Create a new Employee object named 'john' with the name "John" and age 32
let john = new_employee(String::from("John"), 32);

// Print the name of the employee
println!("{:?}", john.name);

// Create a mutable vector named 'employees' that can hold Employee objects
let mut employees: Vec<Employee> = Vec::new();

// Add the 'john' employee to the 'employees' vector
employees.push(john);

// Create a for loop to iterate through the 'employees' vector
for employee in &employees {
    // Print the name and age of each employee
    println!("Employee Name: {}, Employee Age: {}", employee.name, employee.age);
}

// Define a trait named 'EmployeeDetails' with a function named 'get_details' that takes in a reference to an Employee object and prints its details
trait EmployeeDetails {
    fn get_details(&self);
}

// Implement the 'EmployeeDetails' trait for the Employee struct
impl EmployeeDetails for Employee {
    fn get_details(&self) {
        println!("Employee Name: {}, Employee Age: {}", self.name, self.age);
    }
}

// Call the 'get_details' function on the first employee in the vector
employees[0].get_details();