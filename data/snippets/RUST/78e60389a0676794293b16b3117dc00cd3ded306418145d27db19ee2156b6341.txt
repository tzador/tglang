use regex::{Regex, Match};

struct Person {
    first_name: String,
    last_name: String,
    age: u8,
}

impl Person {

    // Function to capitalize the first letter of a string
    fn capitalize(name: &str) -> String {
        let mut chars = name.chars();
        match chars.next() {
            None => String::new(),
            Some(f) => f.to_uppercase().collect::<String>() + chars.as_str(),
        }
    }

    // Function to get the initials of a person
    fn get_initials(&self) -> String {
        // Create a regular expression to match letters only
        let re = Regex::new(r"[a-zA-Z]").unwrap();
        // Create an empty string to store the initials
        let mut initials = String::new();
        // Capitalize the first letter of the first name and add it to initials
        initials.push_str(&Person::capitalize(&self.first_name)[0..1]);
        // Retrieve all match objects that contain letters from the last name
        let matches = re.find_iter(&self.last_name);
        // Loop through each match
        for mat in matches {
            // Capitalize the first letter of each match and add it to initials
            initials.push_str(&mat.as_str().to_uppercase());
        }
        // Return the initials
        initials
    }
}

// Create an instance of Person
let person1 = Person {
    first_name: String::from("john"),
    last_name: String::from("doe"),
    age: 30,
};

// Print the initials of the person
println!("The person's initials are: {}", person1.get_initials());