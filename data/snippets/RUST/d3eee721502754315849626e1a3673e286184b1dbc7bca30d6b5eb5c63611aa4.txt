use std::io::{stdin, stdout, BufReader, Write};
use std::fs::{File, OpenOptions};
use std::path::PathBuf;
use std::io::prelude::*;
use std::collections::HashMap;

// Define a struct with a generic type
struct Cache<T> {
    key: String,
    value: T,
}

// Implement a method for the Cache struct
impl<T> Cache<T> {
    // Function to create a new instance of Cache
    fn new(key: String, value: T) -> Self {
        // Return a new instance of Cache
        Self {
            key,
            value,
        }
    }
}

// Implement a trait for the Cache struct
impl<T> ToString for Cache<T> {
    // Function to convert the Cache struct to a string
    fn to_string(&self) -> String {
        // Return the string representation of the Cache struct
        format!("Key: {}, Value: {}", self.key, self.value)
    }
}

// Create a HashMap to store Cache objects
let mut cache_map = HashMap::new();

// Add a new Cache object to the HashMap
// In this case, the value is a string
cache_map.insert("Name".to_string(), Cache::new("Name".to_string(), "John Smith".to_string()));

// Open a new file to write to
let mut file = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open(PathBuf::from("output.txt"))
        .unwrap();  // Unwrap the result

// Iterate through the HashMap and write each Cache object to the file
for (key, value) in &cache_map {
    // Append a new line to the file
    // and write the Cache object to the file
    writeln!(file, "{}", value.to_string());

    // Print the key and value to the console
    println!("Key: {}, Value: {}", key, value.to_string());
}

// Create a new instance of the BufReader struct
let buf_reader = BufReader::new(File::open("input.txt").unwrap());

// Create a String to store the contents of the file
let mut contents = String::new();

// Read the contents of the file into the String
buf_reader.read_to_string(&mut contents).unwrap();

// Print the contents of the file to the console
println!("File Contents: {}", contents);

// Close the file
file.close();

// Remove the file from the file system
std::fs::remove_file("output.txt").unwrap();