// Define a struct with multiple fields
struct Point {
    x: i32,
    y: i32,
}

// Define a trait with associated types and a generic function
trait Geometry {
    type Output;
    fn area<T>(&self, t: T) -> Self::Output;
}

// Implement the trait for our struct
impl Geometry for Point {
    type Output = i32;
    fn area<T>(&self, t: T) -> Self::Output {
        // Calculate the area of a rectangle
        self.x * self.y
    }
}

fn main() {
    // Create an instance of the Point struct
    let point = Point { x: 5, y: 10 };
    // Call the area function on our Point instance
    let area = point.area(5);
    // Print the result
    println!("The area is {}", area);
}