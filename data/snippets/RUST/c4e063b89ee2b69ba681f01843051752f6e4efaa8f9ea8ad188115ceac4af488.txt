#![allow(dead_code)]
 
use std::collections::HashMap;
 
// This function takes in two vectors and returns a vector of the unique elements in both vectors combined
fn unique_elements(a: Vec<u32>, b: Vec<u32>) -> Vec<u32> {
    let mut unique_elements = HashMap::new();
 
    // Insert all elements of vector a into the HashMap
    for element in a {
        unique_elements.insert(element, true);
    }
 
    // Insert all elements of vector b into the HashMap
    for element in b {
        unique_elements.insert(element, true);
    }
 
    // Create a vector to hold the unique elements
    let mut result = Vec::new();
 
    // Iterate through the keys in the HashMap and add them to the result vector
    for (key, _) in unique_elements {
        result.push(*key);
    }
 
    result
}
 
fn main() {
    let a = vec![1, 2, 3];
    let b = vec![2, 3, 4];
 
    let unique = unique_elements(a, b);
 
    println!("{:?}", unique); // Output: [1, 2, 3, 4]
}