// This is a function that calculates the nth Fibonacci number using recursion
// It takes in a number, n, as input and returns the corresponding Fibonacci number

fn fibonacci(n: u32) -> u32 {
    if n == 0 || n == 1 {
        return n;
    }

    fibonacci(n - 1) + fibonacci(n - 2)
}

// This is a function that creates a vector of Fibonacci numbers
// It takes in a number, n, as input and returns a vector containing the first n Fibonacci numbers

fn fibonacci_vec(n: u32) -> Vec<u32> {
    let mut fib_numbers = Vec::new();

    for i in 0..n {
        fib_numbers.push(fibonacci(i));
    }

    fib_numbers // implicit return
}

fn main() {
    // Input for the Fibonacci vector
    let n = 10;

    // Generate the Fibonacci vector
    let fib_vec = fibonacci_vec(n);

    // Print the Fibonacci vector
    println!("{:?}", fib_vec);
}