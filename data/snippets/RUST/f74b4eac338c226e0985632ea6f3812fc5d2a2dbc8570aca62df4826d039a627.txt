enum GameResult<T, E> {
  Ok(T),
  Err(E),
}

impl<T, E> GameResult<T, E> {
  fn map<U, F>(self, func: F) -> GameResult<U, E>
    where F: FnOnce(T) -> U
  {
    match self {
      GameResult::Ok(val) => GameResult::Ok(func(val)),
      GameResult::Err(err) => GameResult::Err(err),
    }
  }
}

struct Player {
  name: String,
  score: u32,
}

fn add_score(player: Player, points: u32) -> GameResult<Player, String> {
  if points > 100 {
    GameResult::Err("Cannot add more than 100 points at once.")
  } else {
    let new_score = player.score + points;
    let new_player = Player {
      name: player.name,
      score: new_score,
    };
    GameResult::Ok(new_player)
  }
}

fn main() {
  let player1 = Player {
    name: String::from("John"),
    score: 50,
  };

  let player2 = Player {
    name: String::from("Jane"),
    score: 75,
  };

  let result1 = add_score(player1, 25);
  let result2 = add_score(player2, 50);

  match result1 {
    GameResult::Ok(player) => {
      println!("{}'s new score is: {}", player.name, player.score);
    },
    GameResult::Err(err) => {
      println!("{}", err);
    },
  }

  match result2 {
    GameResult::Ok(player) => {
      println!("{}'s new score is: {}", player.name, player.score);
    },
    GameResult::Err(err) => {
      println!("{}", err);
    },
  }
}