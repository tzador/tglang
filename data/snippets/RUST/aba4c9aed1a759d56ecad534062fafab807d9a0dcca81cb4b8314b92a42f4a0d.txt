fn main() {
    // An array containing 5 elements
    let array = [1, 2, 3, 4, 5];
    // A vector containing 10 elements
    let mut vector = Vec::with_capacity(10);

    // Use a for loop to iterate through the array
    for i in array.iter() {
        // Push the current element to the vector
        vector.push(i * 2);
    }

    // Print out the vector
    println!("{:?}", vector);

    // An enum with two variants
    enum Option<T> {
        Some(T),
        None,
    }

    // A function that returns an option
    fn add_nums(x: i32, y: i32) -> Option<i32> {
        // Return the sum if neither number is 0
        if x != 0 && y != 0 {
            return Option::Some(x + y);
        } else {
            // Otherwise, return None
            return Option::None;
        }
    }

    // Call the function and pattern match the result
    match add_nums(3, 5) {
        Option::Some(result) => println!("The sum is {:?}", result),
        Option::None => println!("One of the numbers is 0, cannot calculate sum."),
    }
}