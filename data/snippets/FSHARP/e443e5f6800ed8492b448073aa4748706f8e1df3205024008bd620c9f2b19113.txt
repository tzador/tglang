/// Functions
let add x y = x + y
let subtract x y = x - y
let multiply x y = x * y

/// Currying
let addThree = add 3
let addTen = add 10

/// Pipe operator
let result = 5 |> addThree |> addTen

/// Recursion
let rec factorial x = 
    if x = 1 then 1 else x * factorial (x - 1)

/// Pattern matching
let checkNumber x =
    match x with
    | 0 -> "Zero"
    | 1 -> "One"
    | 2 -> "Two"
    | _ -> "Other"

/// Higher-order functions
let map f x =
    let rec mapHelper acc = function
        | [] -> acc
        | h::t -> mapHelper (acc @ [f h]) t
    mapHelper [] x

let numbers = [1; 2; 3; 4]
let doubledNumbers = numbers |> map (fun x -> x*2)