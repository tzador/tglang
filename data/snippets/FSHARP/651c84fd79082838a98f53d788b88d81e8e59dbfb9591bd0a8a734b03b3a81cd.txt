/// Define a binary tree data type
type BinaryTree<'T> =
  | Node of 'T * BinaryTree<'T> * BinaryTree<'T>
  | Leaf

/// Define a function to insert a value into a binary tree
let rec insert (value: 'T) (tree: BinaryTree<'T>): BinaryTree<'T> =
  match tree with
  | Leaf -> Node (value, Leaf, Leaf)
  | Node (v, left, right) ->
    if value < v then Node (v, insert value left, right)
    elif value > v then Node (v, left, insert value right)
    else Node (v, left, right) // If value already exists, do not insert it again

/// Define a function to search for a value in a binary tree
let rec contains (value: 'T) (tree: BinaryTree<'T>): bool =
  match tree with
  | Leaf -> false
  | Node (v, left, right) ->
    if value = v then true
    elif value < v then contains value left
    else contains value right