/// Create an empty list
let emptyList = List.empty
/// Define a function that adds two numbers
let add x y = x + y
/// Create a list of numbers
let numbers = [1;2;3;4;5]
/// Convert the numbers list into a string
let stringNumbers = List.map string numbers
/// Sort the string numbers in ascending order
let sortedNumbers = List.sort stringNumbers
/// Filter out all even numbers from the list
let evenNumbers = List.filter (fun x -> x % 2 = 0) numbers
/// Multiply each number in the list by 2
let doubledNumbers = List.map (fun x -> x * 2) numbers
/// Calculate the product of all numbers in the list
let product = List.fold (fun acc x -> acc * x) 1 numbers
/// Define a record type for a person
type Person = {
    name : string;
    age : int;
    occupation : string
}
/// Create a list of person records
let people = [{name = "John"; age = 25; occupation = "Engineer"}; {name = "Jane"; age = 32; occupation = "Teacher"}]
/// Filter out all engineers from the people list
let teachers = List.filter (fun person -> person.occupation = "Teacher") people
/// Add a new person to the people list
let newPerson = {name = "Mark"; age = 45; occupation = "Doctor"}
let updatedPeople = newPerson::people
/// Define a recursive function to calculate the nth Fibonacci number
let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib(n-1) + fib(n-2)
/// Calculate the 10th Fibonacci number
let fib10 = fib 10