// define a recursive function to calculate the nth Fibonacci number
let rec fibonacci (n: int) =
    if n = 1 || n = 2 then 1 else fibonacci (n - 1) + fibonacci (n - 2)

// print the first 10 Fibonacci numbers
printfn "The first 10 Fibonacci numbers are:"
for i in 1..10 do
    printf "%i " (fibonacci i)

// define a record to represent a person with name and age
type Person = 
    { Name : string
      Age : int }

// define a list containing three person records
let persons = [
    { Name = "John"; Age = 30 }
    { Name = "Jane"; Age = 25 }
    { Name = "Alex"; Age = 40 }
]

// print the name and age of each person in the list
printfn "The names and ages of the persons are:"
persons |> List.iter (fun p -> printfn "%s is %i years old" p.Name p.Age)

// define a union type for different currencies
type Currency =
    | USD
    | EUR
    | GBP
    | JPY

// define a function to convert USD to EUR using a match expression
let convertToEUR (amount: int) =
    match USD with
    | USD -> amount * 0.86

// print the converted amount from USD to EUR
printfn "The amount of $100 in EUR is %i" (convertToEUR 100)