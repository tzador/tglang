/// Define a type that represents a binary tree.
type BinaryTree<'T> =
    | Empty
    | Node of value: 'T * left: BinaryTree<'T> * right: BinaryTree<'T>

/// Define a function that inserts a value into a binary tree in order.
let rec insert value tree =
    match tree with
    | Empty -> Node (value, Empty, Empty)
    | Node (v, l, r) when value < v -> Node (v, insert value l, r)
    | Node (v, l, r) when value > v -> Node (v, l, insert value r)
    | Node (v, l, r) -> Node (v, l, r)

/// Define a function that converts a binary tree to a list in-order.
let rec inOrderList tree =
    match tree with
    | Empty -> []
    | Node (v, l, r) -> (inOrderList l) @ [v] @ (inOrderList r)

/// Construct a binary tree with values 5, 3, and 9.
let tree = 
    let initial = Empty
    let tree1 = insert 5 initial
    let tree2 = insert 3 tree1
    insert 9 tree2

/// Convert the binary tree to a list in-order and print the result.
printf "%A" (inOrderList tree) // Output: [3; 5; 9]