type BinaryTree<'a> =                         // Defining a binary tree type with a generic type parameter 'a
    | Leaf                                   // The base case - a tree with no branches or values
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>    // A tree node containing a value of type 'a and two branches, both of type BinaryTree<'a>
    
let rec inorderTraversal tree =             // Declaring a recursive function to perform inorder traversal on a binary tree
    match tree with                         // Using pattern matching to handle different cases of the input tree
    | Leaf -> []                            // If the tree is a Leaf, return an empty list
    | Node (value, left, right) ->          // If the tree is a Node with a value and two branches
        inorderTraversal left               // Recursively call the function on the left branch and combine the results
        @ [value]                           // with the current value in a list using the list concatenation operator '@'
        @ inorderTraversal right            // Recursively call the function on the right branch and combine the results
    
let exampleTree =                           // Creating an example binary tree with integers as values
    Node (5,                            
        Node (2, Leaf, Leaf),               // Node with value 2 and two Leaf branches
        Node (7, Node (6, Leaf, Leaf),      // Node with value 7 and two branches - one Node with value 6 and two Leaf branches,
            Node (9, Leaf, Leaf)            // and another Leaf branch
        )
    )
    
let result = inorderTraversal exampleTree   // Calling the inorderTraversal function on the exampleTree and storing the result in a variable
    
printf "%A" result                          // Printing the result of the inorder traversal to the console, using the "%A" format specifier to print a list of values of type 'a