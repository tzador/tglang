let rec mergeSort lst =
    match lst with
        | [] -> []
        | [x] -> [x]
        | xs ->
            let rec split list acc1 acc2=
                match list with
                    | x:: y:: zs -> split zs (x:: acc1) (y:: acc2)
                    | x:: zs -> split zs (x:: acc1) acc2
                    | [] -> acc1, acc2
            let left, right = split xs [] []
            let sortedLeft = mergeSort left
            let sortedRight = mergeSort right
            let rec merge left right acc =
                match left, right with
                    | [], y:: ys -> merge [] ys (acc @ [y])
                    | x:: xs, [] -> merge xs [] (acc @ [x])
                    | x:: xs, y:: ys when x<=y -> merge xs right (acc @ [x])
                    | x:: xs, y:: ys when x>y -> merge left ys (acc @ [y])
            merge sortedLeft sortedRight []