(module InventoryManagement
    open System

    // Define a record type to represent products in inventory
    type Product = {
        Id: int
        Name: string
        Price: decimal
        Quantity: int
    }

    // Define a function to calculate the total value of all products in inventory
    let recalculateTotalValue (products: Product list) =
        let mutable totalValue = 0m
        for product in products do
            totalValue <- totalValue + (product.Price * decimal product.Quantity)
        totalValue

    // Define a function to add a new product to inventory
    let addToInventory (products: Product list) (newProduct: Product) =
        let updatedProducts = products @ [newProduct]
        recalculateTotalValue updatedProducts

    // Define a function to remove a product from inventory
    let removeFromInventory (products: Product list) (productId: int) =
        let updatedProducts = List.filter (fun product -> product.Id <> productId) products
        recalculateTotalValue updatedProducts

    // Example code to create a list of products and perform operations on it
    let products = [
        {Id = 1; Name = "Shoes"; Price = 49.99m; Quantity = 10}
        {Id = 2; Name = "Shirts"; Price = 19.99m; Quantity = 50}
        {Id = 3; Name = "Pants"; Price = 29.99m; Quantity = 25}
    ]
    let totalValue = recalculateTotalValue products
    let updatedTotalValue = addToInventory products {Id = 4; Name = "Socks"; Price = 9.99m; Quantity = 100}
    let finalTotalValue = removeFromInventory products 2
)