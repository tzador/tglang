/// Represents a binary tree node with a value and
/// optional left and right subtrees
type Node<'T> =
    { Value: 'T
      Left: Node<'T> option
      Right: Node<'T> option }

/// Checks if the given node is a leaf (has no children)
let isLeaf (node:Node<'T>) =
    match (node.Left, node.Right) with
        | (None, None) -> true
        | _ -> false