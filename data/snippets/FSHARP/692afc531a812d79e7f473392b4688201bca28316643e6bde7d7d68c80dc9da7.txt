// Define a function to calculate the nth element in the Fibonacci sequence
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> (fibonacci (n - 1)) + (fibonacci (n - 2))

// Define a computed property to determine if a number is prime
let isPrime x =
    match x with
    | 2 -> true
    | _ when x < 2 || x % 2 = 0 -> false
    | _ ->
        let limit = int (sqrt (float x))
        let rec loop i =
            i > limit || x % i = 0 && not (loop (i + 2))
        loop 3

// Define a function to calculate the sum of all prime Fibonacci numbers below a given number
let primeFibonacciSum limit =
    [0..limit] 
    |> List.filter isPrime 
    |> List.map fibonacci
    |> List.filter isPrime
    |> List.sum