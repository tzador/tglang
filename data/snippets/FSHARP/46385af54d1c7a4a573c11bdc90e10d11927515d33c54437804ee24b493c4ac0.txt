// This is a simple function that takes in two integers and returns their sum
let sum (x: int, y: int) : int =
    x + y

// A function that uses pattern matching to check for specific inputs
let double (x: int) : int =
    match x with
    | 0 -> 0
    | 1 -> 2
    | 2 -> 4
    | _ -> x * 2

// A recursive function to calculate the factorial of a number
let rec factorial (n: int) : int =
    if n = 0 then 1
    else n * factorial (n-1)

// A list comprehension function to filter out even numbers in a given list
let evenNumbers (numbers: int list) : int list =
    [for num in numbers do
        if num % 2 = 0 then
            yield num]

// A function that uses higher order functions to map a given list
let map (f: 'a -> 'b) (list: 'a list) : 'b list =
    let rec usingMap (f: 'a -> 'b) (list: 'a list) : 'b list =
        match list with
        | [] -> []
        | head :: tail -> (f head) :: (usingMap f tail)
    usingMap f list

// A type alias for a function that takes in a string and returns a bool value
type StringBoolFunc = string -> bool

// A function that takes in a list of strings and a function and returns a list of bool values
let process (list: string list) (f: StringBoolFunc) : bool list =
    map f list

// An example of using the 'process' function with a lambda expression
let fruits = ["apple"; "banana"; "orange"; "grape"; "pear"]
let hasLetterA = process fruits (fun str -> String.contains 'a' str)
// Output: [true; true; true; false; true]