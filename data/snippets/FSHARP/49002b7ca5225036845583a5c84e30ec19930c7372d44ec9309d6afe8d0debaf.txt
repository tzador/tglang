let rec foldl (f: 'a -> 'b -> 'a) acc list =
    match list with
    | [] -> acc
    | head :: tail -> foldl f (f acc head) tail
    
(* This function recursively applies a function to each element in a list and returns the final accumulated value *)
(* foldl takes in a function 'f' which takes in an 'a' and a 'b' and returns an 'a' *)
(* acc is the initial accumulated value, and list is the list of elements *)
(* The match statement checks if the list is empty, if so it returns the current accumulated value *)
(* If the list is not empty, it separates the head (first element) from the tail (rest of the list) *)
(* It then recursively calls itself, passing in 'f' and the result of applying 'f' to the current accumulated value and the head *)
(* This process continues until the list is empty, and the final accumulated value is returned *)
(* To call this function, pass in your desired function for 'f', the initial accumulated value, and your list of elements *)