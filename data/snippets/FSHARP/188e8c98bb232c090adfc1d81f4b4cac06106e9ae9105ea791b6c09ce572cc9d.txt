(* F# function for quicksort *)
let rec quicksort (lst : int list) =
    match lst with                     (* pattern matching *)
    | [] -> []                         (* empty list, return empty list *)
    | [x] -> [x]                       (* list with one element, return list *)
    | pivot :: rest ->                 (* split list into pivot and rest *)
        let lesser = rest |> List.filter (fun x -> x <= pivot)   (* filter values <= pivot *)
        let greater = rest |> List.filter (fun x -> x > pivot)   (* filter values > pivot *)
        quicksort lesser @ [pivot] @ quicksort greater            (* recursively sort lesser, pivot, and greater *)