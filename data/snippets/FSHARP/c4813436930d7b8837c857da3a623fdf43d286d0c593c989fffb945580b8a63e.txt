(* Define a recursive function *)
let rec factorial n =
    if n <= 1 then 1          // Base case
    else n * factorial (n-1)  // Recursive call
 
(* Calculate and print factorial of 5 *)
printfn "Factorial of 5 is: %d" (factorial 5)
 
(* Define a list *)
let myList = [1;2;3;4;5]
 
(* Use a higher-order function to map a function over the list *)
let squares = List.map (fun x -> x*x) myList
 
(* Print the squares of the list elements *)
printfn "Squares of list elements: %A" squares
 
(* Define a record type *)
type Record = { Name: string; Age: int; City: string }
 
(* Define a list of records *)
let records = [{Name = "John"; Age = 32; City = "New York"}; {Name = "Sarah"; Age = 27; City = "Los Angeles"}]
 
(* Use pattern matching to print the names of people above 30 years old *)
for record in records do
    match record with
    | {Name = name; Age = age} when age > 30 -> printfn "%s is above 30 years old" name
    | _ -> ()  // Do nothing for other cases