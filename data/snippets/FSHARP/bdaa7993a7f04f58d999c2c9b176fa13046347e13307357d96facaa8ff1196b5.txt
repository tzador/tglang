type Party = string * int * string
//The above line declares a type Party which is a tuple of string, int, and string

let party1 : Party = ("John", 35, "Republican")
//The above line creates an instance of type Party and assigns it the values "John", 35, and "Republican"

let party2 : Party = ("Sarah", 26, "Democrat")
//The above line creates another instance of type Party and assigns it the values "Sarah", 26, and "Democrat"

let parties : Party list = [party1; party2]
//The above line creates a list of type Party and assigns it the values of party1 and party2

let names : string list = List.map (fun (x, _, _) -> x) parties
//The above line creates a new list of type string by using the map function to extract all the first values (names) from the parties list

let averageAge : int = List.average (List.map (fun (_, age, _) -> age) parties)
//The above line calculates the average age of the parties list by using the average function and mapping through the list to extract the second values (ages)

let sortedParties : Party list = List.sortBy (fun (_, _, party) -> party) parties
//The above line creates a new list of type Party by sorting the parties list alphabetically according to the third value (political party)

let rec printParties parties =
    match parties with
    | [] -> ()
    | (name, age, party) :: tail ->
        printfn "%s is %d years old and belongs to the %s party" name age party
        printParties tail
//The above function recursively prints the information of each party in the parties list in a sentence format

printParties sortedParties
//This line calls the printParties function with the sortedParties list as its input, which prints out the information of each party in alphabetical order by party