let rec filter (f: ’a -> bool) (list: ’a list) : ’a list =
    match list with
    | [] -> [] //if the list is empty, return empty list
    | h::t ->    //pattern matching for head and tail of list
        if f h then //check if the head satisfies the predicate
            h::(filter f t) //if it does, add it to the filtered list
        else 
            filter f t //if not, recursively call filter on the tail

let contains (a: ’a) (list: ’a list) : bool =
    filter (fun x -> x = a) list <> [] //check if filtered list is not empty, which means the list contains the value

let rec map (f: ’a -> ’b) (list: ’a list) : ’b list =
    match list with
    | [] -> [] //if the list is empty, return empty list
    | h::t -> (f h)::(map f t) //apply function to head and recursively call map on the tail

let rec fold (f: ’state -> ’a -> ’state) (state: ’state) (list: ’a list) : ’state =
    match list with
    | [] -> state //if the list is empty, return the final state
    | h::t -> fold f (f state h) t //apply the function to the current state and the head, and recursively call fold on the tail