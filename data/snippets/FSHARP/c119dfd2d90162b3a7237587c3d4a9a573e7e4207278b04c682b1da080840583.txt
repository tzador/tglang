type BinaryTree<'a> = 
    | Leaf 
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

// create a function that inserts a value into the binary tree
let rec insert value bst = 
    match bst with 
    | Leaf -> Node(value, Leaf, Leaf)
    | Node(v, left, right) -> 
        if value = v then Node(v, left, right)
        elif value < v then Node(v, insert value left, right)
        else Node(v, left, insert value right)

// test out the function by creating a binary tree and inserting values into it
let tree = Node(5, Leaf, Leaf)
let tree = insert 3 tree
let tree = insert 8 tree
let tree = insert 1 tree
let tree = insert 4 tree
let tree = insert 6 tree
let tree = insert 9 tree

// create a function that traverses the binary tree in order and prints the values 
let rec traverseInOrder bst =
    match bst with
    | Leaf -> printfn "Empty tree"
    | Node(v, left, right) -> 
        traverseInOrder left
        printfn "%d" v
        traverseInOrder right
        
// call the function on the binary tree we created
traverseInOrder tree