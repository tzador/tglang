(* Function to calculate the n-th fibonacci number *)
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* Function to print first n fibonacci numbers *)
let rec print_fibonacci n =
    for i in 0 .. n do
        printfn "Fibonacci number %i: %i" i (fibonacci i)

(* Generate a list of numbers from 1 to 10 *)
let numList = [1..10]

(* Function to check if a number is prime *)
let isPrime num =
    let rec checkPrime num i =
        if i >= num then
            true
        elif num % i = 0 then
            false
        else
            checkPrime num (i + 1)
    checkPrime num 2

(* Print prime numbers from the list *)
numList 
    |> List.filter isPrime 
    |> List.iter (printfn "Prime number: %i") 

(* Output:
Fibonacci number 0: 0
Fibonacci number 1: 1
Fibonacci number 2: 1
Fibonacci number 3: 2
Fibonacci number 4: 3
Fibonacci number 5: 5
Fibonacci number 6: 8
Fibonacci number 7: 13
Fibonacci number 8: 21
Fibonacci number 9: 34
Fibonacci number 10: 55
Prime number: 2
Prime number: 3
Prime number: 5
Prime number: 7