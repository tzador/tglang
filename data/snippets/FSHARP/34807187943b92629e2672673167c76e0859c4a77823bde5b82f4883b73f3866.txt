// Function to find the factorial of a number
let rec factorial n =
    if n = 0 then 1
    else n * factorial(n-1)

// Function to calculate the nth Fibonacci number
let rec fib n =
    if n = 0 then 0
    elif n = 1 then 1
    else fib(n-1) + fib(n-2)

// Function to check if a number is prime
let isPrime n =
    let rec checkPrime i =
        if i = n then true
        elif n % i = 0 then false
        else checkPrime (i+1)
    if n < 2 then false
    else checkPrime 2

// Function to generate a list of prime numbers up to a given limit
let rec generatePrimes limit =
    let rec helper n acc =
        if n = limit + 1 then acc
        elif isPrime n = true then helper (n+1) (n::acc)
        else helper (n+1) acc
    helper 2 []

// Sample usage
let limit = 10
let primes = generatePrimes limit
printf "List of prime numbers up to %d: %A" limit primes