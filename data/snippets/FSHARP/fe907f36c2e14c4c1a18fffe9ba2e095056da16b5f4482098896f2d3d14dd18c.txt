// Function to calculate the factorial of a number recursively.
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n-1)

// Function to find the largest number in a list recursively.
let rec findMax list =
    match list with
    | [] -> failwith "Empty list"
    | [x] -> x
    | x :: xs -> let maxTail = findMax xs
                 if x > maxTail then x else maxTail

// Code to find the sum of all Fibonacci numbers below a given limit.
let rec fibonacciSum limit =
    let rec fib n =
        if n = 0 then 0
        elif n = 1 then 1
        else fib (n-1) + fib (n-2)
    let rec fibList i =
        if fib i < limit then
            fib i::fibList (i+1)
        else []
    fibList 0 |> List.sum

// Example usage of the above functions.
let fact = factorial 5 // Returns 120.
let max = findMax [10; 2; 5; 8; 3] // Returns 10.
let fibSum = fibonacciSum 100 // Returns 44 (1 + 1 + 2 + 3 + 5 + 8 + 13).