// The following function returns a list of the first n prime numbers using the Sieve of Eratosthenes algorithm
let soe (n:int) : int list =
    // Helper function to eliminate non-prime numbers from the list
    let rec eliminateMultiples (list : int list) (x: int) =
        match list with
        | [] -> []
        | h :: t when h >= x * x -> list
        | h :: t -> h :: (eliminateMultiples t x)

    // Create list of all numbers from 2 to n
    let mutable nums = [2 .. n]

    // Loop through each number in the list and eliminate its multiples
    for x in nums do
        nums <- eliminateMultiples nums x

    // Return the list of remaining numbers
    nums