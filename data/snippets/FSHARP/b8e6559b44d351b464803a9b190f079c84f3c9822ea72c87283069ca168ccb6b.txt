(* Returns the n-th term of the Fibonacci sequence *)
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

(* Prints the first 10 terms of the Fibonacci sequence *)
for i in 0 .. 9 do
    printfn $"Fibonacci term {i}: {fibonacci i}"
    
(* Creates a list of even numbers from 0 to n *)
let evenNumbers n =
    [0 .. 2 .. n]
    
(* Adds 2 to each number in a list *)
let addTwo = List.map (fun x -> x + 2)

(* Combines two lists into a single list *)
let combinedList = [1; 2; 3] @ [4; 5; 6]

(* Returns the sum of all numbers in a list *)
let rec sumOfList list =
    match list with
    | [] -> 0
    | head :: tail -> head + sumOfList tail
    
(* Returns the maximum element in a list *)
let rec maxOfList list =
    match list with
    | [x] -> x
    | head :: tail -> max head (maxOfList tail)