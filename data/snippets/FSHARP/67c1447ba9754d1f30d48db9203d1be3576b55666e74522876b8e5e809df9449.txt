// Define a function called "calculateSquare" that takes in an integer as a parameter and returns the square of that integer
let calculateSquare (num: int) =
    // Define a local variable "result" to store the result of the calculation
    let result = num * num
    // Return the result
    result

// Define a recursive function called "calculatePower" that takes in an integer and an exponent as parameters and recursively calculates the result
let rec calculatePower (base: int) (exponent: int) =
    // If the exponent is 0, return 1 as the result
    if exponent = 0 then 1
    // Otherwise, recursively call the function with the base and the exponent decremented by 1
    else calculatePower base (exponent - 1)

// Define a function called "calculateFactorial" that takes in an integer as a parameter and uses pattern matching to calculate the factorial
let calculateFactorial = function
    // If the parameter is 0 or 1, return 1 as the result
    | 0 | 1 -> 1
    // Otherwise, recursively call the function with the number decremented by 1 and multiply it with the current number
    | n -> n * calculateFactorial (n - 1)

// Define a list of numbers
let numbers = [1; 2; 3; 4; 5]

// Define a function called "isEven" that takes in an integer as a parameter and returns true if the number is even, false if it is odd
let isEven (num: int) =
    // Use pattern matching to determine if the number is divisible by 2
    match num % 2 with
    | 0 -> true // If it is, return true
    | _ -> false // Otherwise, return false

// Calculate the sum of the numbers in the list using the "reduce" function
let sum = List.reduce (+) numbers

// Print out the results
printf "Square of 5 is %i" (calculateSquare 5)
printfn "2 to the power of 3 is %i" (calculatePower 2 3)
printfn "Factorial of 4 is %i" (calculateFactorial 4)
printfn "Sum of numbers in the list is %i" sum
printfn "Is 6 even? %b" (isEven 6)