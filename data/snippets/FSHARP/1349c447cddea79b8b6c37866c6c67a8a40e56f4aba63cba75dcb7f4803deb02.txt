// This is a recursive function that calculates the nth Fibonacci number
let rec Fibonacci n =
    if n = 1 || n = 2 then 
        1
    else 
        Fibonacci(n-1) + Fibonacci(n-2)

// This function takes in a list of integers and returns the sum of all the prime numbers in the list
let SumOfPrimes (numbers : int list) =
    let rec isPrime number current =
        if current = 1 then 
            true
        else
            if number % current = 0 then 
                false
            else
                isPrime number (current - 1)
    
    let rec sumPrimes numbers currentSum =
        match numbers with
        | [] -> currentSum
        | head::tail ->
            if (isPrime head (head - 1)) then 
                sumPrimes tail (currentSum + head)
            else
                sumPrimes tail currentSum
    
    sumPrimes numbers 0