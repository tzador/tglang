// This function recursively calculates the factorial of a given number using pattern matching
let rec factorial = function
    | 0 -> 1
    | n -> n * factorial (n - 1)

// This function calculates the sum of squares of a list of numbers using fold
let sumOfSquares = List.fold (fun acc n -> n * n + acc) 0

// This function takes in a string and returns the string with each character duplicated
let duplicateString (str: string) =
    str |> Seq.map (fun c -> c.ToString() + c.ToString()) |> String.concat ""

// This is a higher order function that takes in a function and returns a function that takes in an argument 
let higherOrderFunc (func: 'a -> 'b) =
    let innerFunc (arg: 'a) =
        func arg
    innerFunc

// This function calculates the sum of all the multiples of 3 and 5 below a given number
let sumOfMultiples (num: int) =
    List.init num (fun x -> x + 1) // creates a list of numbers from 1 to num
    |> List.filter (fun x -> x % 3 = 0 || x % 5 = 0) // filters for multiples of 3 and 5
    |> List.sum // calculates the sum of the filtered list