type Currency =
    | USD of decimal
    | EUR of decimal

type Asset =
    | Cash of Currency
    | Stock of string * decimal

type Portfolio = Asset list

let computedPortfolioValue (portfolio: Portfolio) =
    List.fold (fun total asset ->
        match asset with
        | Cash currency -> total + convertCurrencyToUSD(currency)
        | Stock (symbol, price) -> 
            let stockValue = price * getStockExchangeRate(symbol)
            total + stockValue) 0m portfolio

let rec convertCurrencyToUSD(currency: Currency) =
    match currency with 
    | USD amount -> amount
    | EUR amount -> amount * 1.3m

let getStockExchangeRate(symbol: string) =
    match symbol with
    | "AAPL" -> 1500m
    | "GOOG" -> 2000m
    | _ -> 1000m

[<EntryPoint>]
let main argv =
    let myPortfolio = [Cash (EUR 1000m); Stock ("AAPL", 10m); Stock ("GOOG", 5m)]
    let portfolioValue = computedPortfolioValue myPortfolio
    printfn "Your portfolio's value in USD is %f" portfolioValue
    0 // return an int to signify successful execution