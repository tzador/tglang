// Define a function to calculate the area of a circle

let circleArea (radius: float): float =
    let pi = 3.14
    let squaredRadius = radius ** 2.0
    pi * squaredRadius

// Define a function to calculate the volume of a sphere

let sphereVolume (radius: float): float =
    let pi = 3.14
    let cubedRadius = radius ** 3.0
    (4.0 / 3.0) * pi * cubedRadius

// Define a function to find the hypotenuse of a right triangle

let findHypotenuse (a: float) (b: float): float =
    let squaredA = a ** 2.0
    let squaredB = b ** 2.0
    sqrt (squaredA + squaredB)
    
// Define a function to check if a number is prime

let isPrime (n: int): bool =
    let mutable isPrime = true
    for i in 2 .. (n / 2) do
        if n % i = 0 then
            isPrime <- false
    isPrime

// Define a function to generate a list of prime numbers

let primeList (limit: int): int list =
    let mutable primes = []
    for i in 2 .. limit do
        if isPrime i then
            primes <- primes @ [i]
    primes

// Define a recursive function to calculate the factorial of a number

let rec factorial (n: int): int =
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n - 1)

// Define a function to convert a list of strings to uppercase

let stringListToUpperCase (list: string list): string list =
    List.map (fun x -> x.ToUpper()) list