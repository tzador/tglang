(* Function to calculate the nth Fibonacci number *)

(* Define a recursive function with two parameters *)
let rec fibonacci n result =
    match n with (* Pattern matching for different values of n *)
    | 0 -> result (* Base case, return result when n is 0 *)
    | 1 -> result (* Base case, return result when n is 1 *)
    | _ -> (* Recursive case, calculate the sum of previous two numbers in Fibonacci sequence *)
        let prev1 = result.[0] (* Get the value at index 0 from result list *)
        let prev2 = result.[1] (* Get the value at index 1 from result list *)
        let newResult = prev1 + prev2 (* Calculate the new sum *)
        fibonacci (n-1) [prev2; newResult] (* Call the function again with updated parameters *)

(* Define an entry point function with one parameter *)
let getFibonacci n = 
    let result = [0;1] (* Initialize result list with first two numbers in the Fibonacci sequence *)
    match n with (* Pattern matching for different values of n *)
    | 0 -> result.[0] (* Return 0 when n is 0 *)
    | 1 -> result.[1] (* Return 1 when n is 1 *)
    | _ -> fibonacci (n-2) result (* Call the recursive function to calculate nth Fibonacci number *)

// Example usage
getFibonacci 10 // Output: 55