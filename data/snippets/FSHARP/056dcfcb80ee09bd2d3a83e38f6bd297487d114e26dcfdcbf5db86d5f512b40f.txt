//Define a function to calculate the factorial of a given integer
let rec factorial n =
   match n with
   | 0 -> 1
   | 1 -> 1
   | n -> n * factorial (n-1)

//Define a mutable variable and initialize it to 0
let mutable counter = 0

//Create a list of numbers
let numbers = [1; 2; 3; 4; 5]

//Create a higher-order function to apply a function on each element of a list
let applyFunctionOnList function list =
   match list with
   | [] -> []
   | head::tail -> function head :: applyFunctionOnList function tail

//Use the higher-order function to apply the factorial function on the list of numbers
let factorialList = applyFunctionOnList factorial numbers

//Print the result of the factorialList
printfn "Factorials of numbers list: %A" factorialList

//Use a for loop to iterate through the factorialList and increment the counter variable
for n in factorialList do
   counter <- counter + 1
   printfn "Current counter value: %d" counter