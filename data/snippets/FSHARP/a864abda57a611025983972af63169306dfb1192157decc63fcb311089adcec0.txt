// This function calculates the nth Fibonacci number using recursion and pattern matching
let rec findFib n = 
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> findFib (n-1) + findFib (n-2)

// This function calculates the factorial of a given number using tail recursion
let rec factorial n = 
    match n with
    | 0 -> 1
    | 1 -> 1
    | _ -> n * factorial (n-1)

// This function checks if a given number is a prime number using the Sieve of Eratosthenes algorithm
let isPrime n = 
    let rec sieve primes n = 
        match primes with
        | [] -> true
        | h::t when h > n -> true
        | h::t when n % h = 0 -> false
        | h::t -> sieve t n
    let primes = [2..n]
    sieve primes n