(* This is a function that calculates the factorial of a number *)
let rec factorial n = 
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n-1)

(* This is a function that returns true if a number is prime, false otherwise *)
let isPrime n =
    if n <= 1 then false
    else
        let rec check divisor =
            match divisor with
            | _ when divisor = n -> true
            | _ when n % divisor = 0 -> false
            | _ -> check (divisor+1)
        check 2

// This is a list of numbers to test the functions with
let numbers = [1;5;10;15;20;30;35]

// This is a list comprehension using the functions to calculate the factorial of prime numbers in the list
let prime_factorials = [factorial n | n in numbers | isPrime n]

// Prints the resulting list
printfn "%A" prime_factorials