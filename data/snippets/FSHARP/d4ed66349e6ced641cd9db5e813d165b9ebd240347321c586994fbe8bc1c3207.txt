//Define record type for a person
type Person = {
  Name: string; //defines the Name field as a string
  Age: int; //defines Age field as an integer
  Address: string; //defines Address field as a string
  Email: string; //defines Email field as a string
}

//Define function to create a new Person record
let createPerson name age address email = 
  { Name = name; Age = age; Address = address; Email = email } //returns a new Person record with the given fields

//Create a new Person record using the createPerson function
let newPerson = createPerson "John Smith" 30 "123 Main Street" "john.smith@email.com"

//Print out the values of the Person record
printf "%s is %d years old and lives at %s. Contact %s for more information." newPerson.Name newPerson.Age newPerson.Address newPerson.Email

//Define a list of Person records
let personList = [ newPerson;
                   createPerson "Jane Doe" 25 "456 Oak Avenue" "jane.doe@email.com";
                   createPerson "Bob Johnson" 40 "789 Maple Drive" "bob.johnson@email.com"]

//Loop through the list and print out the values of each Person record
for personRecord in personList do
  printf "%s is %d years old and lives at %s. Contact %s for more information." personRecord.Name personRecord.Age personRecord.Address personRecord.Email

//Define a function to filter Person records by age
let filterByAge age (personRecords : Person list) =
  personRecords |> List.filter (fun person -> person.Age = age) //returns a list of Person records with the specified age

//Call the filterByAge function to filter the personList by age 30
let filteredList = filterByAge 30 personList

//Print out the filtered list of Person records
for personRecord in filteredList do
  printf "%s is %d years old and lives at %s. Contact %s for more information." personRecord.Name personRecord.Age personRecord.Address personRecord.Email