let rec partition (pivot: 'a) (list: 'a list) =  //<-- declares a recursive function called 'partition'
    let rec loop left right =                    //<-- defines an internal recursive function 'loop'
        match right with                         //<-- performs pattern matching on the 'right' (tail) of the list
        | [] -> (List.rev left, [])             //<-- if the list is empty, return the 'left' partition and an empty list as the 'right' partition
        | x::xs ->                               //<-- if the list is not empty, deconstruct it into the head element 'x' and the tail 'xs'
            if x <= pivot then                   //<-- checks if the head element is less than or equal to the pivot value
                loop (x::left) xs                //<-- if so, add it to the 'left' partition and continue the recursive function with the remaining 'xs'
            else                                 //<-- if the head element is greater than the pivot
                let left', right' = loop left xs //<-- perform recursion on the remaining 'xs' and store the results
                left', (x::right')               //<-- return the updated 'left' partition and the head element added to the 'right' partition
    loop [] list                                 //<-- call the internal recursive function with an empty 'left' partition and the given list as the 'right'