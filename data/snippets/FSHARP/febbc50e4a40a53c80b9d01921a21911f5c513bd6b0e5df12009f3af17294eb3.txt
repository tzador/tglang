// define a recursive function
let rec fact n = 
    if n < 0 then 
        invalidArg "n" "n must be a non-negative integer"
    elif n = 0 then 1
    else n * fact(n-1)

// define a function that takes in a list and returns the sum of the elements
let rec sum l = 
    match l with
    | [] -> 0
    | x::xs -> x + sum xs

// define a function that takes in a list of tuples and returns the combined sum of the second elements in each tuple
let rec tupleSum l = 
    match l with
    | [] -> 0
    | (a, b)::xs -> b + tupleSum xs

// define a function that takes in two lists and returns a new list containing the sums of corresponding elements in the two lists
let rec listSum l1 l2 = 
    match (l1, l2) with
    | ([], _) -> l2
    | (_, []) -> l1
    | (x::xs, y::ys) -> x + y :: listSum xs ys

// define a function that takes in a string and returns a list of characters in reverse order
let rec reverseString s = 
    match s with
    | "" -> ""
    | s -> reverseString(String.tail s) + String.head s

// define a function that takes in a list and a function and applies the function to each element in the list
let rec map f l = 
    match l with
    | [] -> []
    | x::xs -> f x :: map f xs

// define a function that takes in a list and returns a new list containing only the even numbers
let rec filterEven l = 
    match l with
    | [] -> []
    | x::xs -> if x % 2 = 0 then x :: filterEven xs else filterEven xs

// define a function that takes in a list of strings and returns a new list of strings containing only the strings that begin with the letter "A"
let rec filterA l = 
    match l with
    | [] -> []
    | x::xs -> if String.head x = 'A' then x :: filterA xs else filterA xs

// define a function that takes in a list of numbers and returns a new list of numbers with each number squared
let rec squareList l = 
    match l with
    | [] -> []
    | x::xs -> x * x :: squareList xs