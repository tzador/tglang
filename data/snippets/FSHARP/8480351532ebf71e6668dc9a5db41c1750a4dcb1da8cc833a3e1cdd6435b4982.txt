// Function to calculate the nth Fibonacci number
let fibonacci n =
    let rec fib n = 
        match n with
        | 0 -> 0
        | 1 -> 1
        | _ -> fib (n-1) + fib (n-2)
    fib n
// Function to check if a number is prime
let isPrime x =
    let rec checkPrime x i =
        match i with
        | 1 -> true
        | _ -> if x%i = 0 then false else checkPrime x (i-1)
    checkPrime x (x/2)
// Function to find the first n prime numbers using the Sieve of Eratosthenes algorithm
let sieve n =
    let isPrimeList = Array.create (n+1) true
    let mutable primeList = []
    for i in 2..n do
        if isPrimeList.[i] then
            primeList <- primeList @ [i]
            let mutable j = 2
            while i*j <= n do
                isPrimeList.[i*j] <- false
                j <- j + 1
    primeList
// Function to remove duplicates from a list
let rec removeDuplicates lst =
    match lst with
    | [] -> []
    | x::xs -> x :: removeDuplicates (List.filter (fun y -> x <> y) xs)