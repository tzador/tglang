type Tree<'T> =
    | EmptyTree
    | Node of 'T * Tree<'T> * Tree<'T>

let rec insert (value: 'T) (tree: Tree<'T>) =
    match tree with
    | EmptyTree -> Node(value, EmptyTree, EmptyTree)
    | Node (v, left, right) ->
        if value < v then
            Node(v, insert value left, right)
        else
            Node(v, left, insert value right)

let rec inOrder (tree: Tree<'T>) =
    match tree with
    | EmptyTree -> []
    | Node (v, left, right) ->
        inOrder left @ [v] @ inOrder right

let rec preOrder (tree: Tree<'T>) =
    match tree with
    | EmptyTree -> []
    | Node (v, left, right) ->
        v :: preOrder left @ preOrder right

let rec postOrder (tree: Tree<'T>) =
    match tree with
    | EmptyTree -> []
    | Node (v, left, right) ->
        postOrder left @ postOrder right @ [v]

// Example usage:
let myTree = Node(5, Node(3, Node(1, EmptyTree, EmptyTree), Node(4, EmptyTree, EmptyTree)), Node(7, Node(6, EmptyTree, EmptyTree), Node(9, EmptyTree, EmptyTree)))
let insertTree = insert 2 myTree // inserts 2 into tree
let inOrderList = inOrder insertTree // gets in-order traversal of tree
let preOrderList = preOrder insertTree // gets pre-order traversal of tree
let postOrderList = postOrder insertTree // gets post-order traversal of tree