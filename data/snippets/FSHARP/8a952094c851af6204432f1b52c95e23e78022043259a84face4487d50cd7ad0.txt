// This code snippet uses recursion to calculate the factorial of a given number
// The factorial function takes in an integer 'n' and returns the factorial of that number
// For example, factorial 4 should return 24 (4 x 3 x 2 x 1 = 24)

let factorial n = // define the factorial function with argument 'n'
    let rec calc n acc = // define a recursive helper function with argument 'n' and accumulator 'acc'
        match n with // use pattern matching on 'n'
        | 0 -> acc // if n is 0, return the accumulator
        | _ -> calc (n-1) (n*acc) // if n is not 0, recurse with n-1 and (n*acc) as the new arguments
    calc n 1 // call the helper function with 'n' and initial accumulator of 1
// end of function definition

let result = factorial 4 // call the factorial function with input 4
// result should be 24 (4 x 3 x 2 x 1 = 24)
  
// Output:
result // 24