// Define a function that takes in an integer and returns a list of all the prime numbers less than or equal to that integer
let rec sieve (n: int) : int list =
    if n <= 1 then [] // Base case, return empty list
    else
        let candidates = [2..n] // List of potential prime numbers
        let rec loop (p: int list) = function
            | [] -> p // If the list is empty, we've checked all the numbers and return the list of primes
            | x :: xs -> // Get the next number from the list
                let isPrime = p |> List.forall (fun n -> x % n <> 0) // Check if the number is divisible by any primes in the list
                if isPrime then loop (x :: p) xs // If not divisible, add to list of primes and continue
                else loop p xs // Otherwise, continue without adding to list
        loop [] candidates // Start with empty list and all potential primes, calls helper function
        |> List.rev // Reverse list to get primes in ascending order

// Example usage: sieve 20 would return [2;3;5;7;11;13;17;19] as these are all the prime numbers less than or equal to 20.