//Implementing a binary search tree in F#

type 'a BinaryTree = //define the binary tree data structure
    | Empty
    | Node of 'a * 'a BinaryTree * 'a BinaryTree //node has item and left and right subtrees

// define a function for inserting items into the tree
let rec insertTree item tree =
    match tree with
    | Empty -> Node(item, Empty, Empty) //if tree is empty, insert item as root
    | Node(x, left, right) ->
        if item < x then //if item is lesser than current node, insert into left subtree
            Node(x, (insertTree item left), right)
        elif item > x then //if item is greater than current node, insert into right subtree
            Node(x, left, (insertTree item right))
        else //if item is equal to current node, do not insert
            tree

// define function to check if tree contains a given item
let rec contains item tree =
    match tree with
    | Empty -> false //if tree is empty, item is not found
    | Node(x, left, right) ->
        if item = x then true //if item is equal to current node, it is found
        elif item < x then contains item left //if item is lesser, check left subtree
        else contains item right //if item is greater, check right subtree

// define function to find the maximum value in the tree
let rec findMax tree =
    match tree with
    | Empty -> failwith "Empty tree" //if tree is empty, throw error
    | Node(x, _, Empty) -> x //if right subtree is empty, current node is max
    | Node(_, _, right) -> findMax right //otherwise, recursively check right subtree for max

// define function to delete an item from the tree
let rec delete item tree =
    match tree with
    | Empty -> Empty //if tree is empty, item is not found and nothing is deleted
    | Node(x, left, right) ->
        if item = x then //if item is equal to current node, delete it
            match right with
            | Empty -> left //if right subtree is empty, replace current node with left subtree
            | _ -> Node(x, left, (delete (findMax tree) right)) //otherwise, replace current node with max value from right subtree
        elif item < x then Node(x, (delete item left), right) //if item is lesser, delete from left subtree
        else Node(x, left, (delete item right)) //if item is greater, delete from right subtree

// define function to traverse the tree in-order
let rec traverseInOrder tree action =
    match tree with
    | Empty -> () //if tree is empty, do nothing
    | Node(x, left, right) ->
        traverseInOrder left action //traverse left subtree
        action x //perform action on current node
        traverseInOrder right action //traverse right subtree

// create a new tree and insert items into it
let tree = Node(10, Node(5, Node(2, Empty, Empty), Node(8, Empty, Empty)), Node(15, Empty, Node(20, Empty, Empty)))

// traverse the tree in-order and print each item
traverseInOrder tree (fun x -> printf "%d " x) //output: 2 5 8 10 15 20

// delete an item from the tree
let tree = delete 5 tree

// check if tree contains a value
contains 10 tree //output: true
contains 5 tree //output: false

// find the maximum value in the tree
findMax tree //output: 20