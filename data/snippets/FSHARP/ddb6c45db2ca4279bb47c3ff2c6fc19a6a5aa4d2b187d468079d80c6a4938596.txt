(* Define a function to calculate the sum of all the elements in a list *)

let rec sumList (lst: int list) = 
    match lst with 
    | [] -> 0
    | hd::tl -> hd + sumList tl

(* Define a function to reverse a list *)

let rec reverseList (lst: 'a list) = 
    match lst with 
    | [] -> []
    | hd::tl -> reverseList tl @ [hd]

(* Define a function to check if a given number is prime *)

let isPrime (num: int) =
    let rec checkPrime (div: int) = 
        match div with
        | 1 -> true
        | _ -> (num % div <> 0) && checkPrime (div-1)
    checkPrime (num/2)

(* Define a type for representing a binary tree *)

type BinaryTree<'a> =
    | Empty
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

(* Define a function to insert an element into a binary tree *)

let rec insertTree (elem: 'a) (tree: BinaryTree<'a>) = 
    match tree with 
    | Empty -> Node (elem, Empty, Empty)
    | Node (x, left, right) when elem < x -> Node (x, insertTree elem left, right)
    | Node (x, left, right) when elem > x -> Node (x, left, insertTree elem right)
    | Node (x, left, right) -> Node (x, left, right)

(* Define a function to remove an element from a binary tree *)

let rec removeTree (elem: 'a) (tree: BinaryTree<'a>) = 
    match tree with 
    | Empty -> Empty
    | Node (x, left, right) when elem < x -> Node (x, removeTree elem left, right)
    | Node (x, left, right) when elem > x -> Node (x, left, removeTree elem right)
    | Node (x, left, Empty) -> left
    | Node (x, Empty, right) -> right
    | Node (x, left, right) -> let min = 
        let rec findMin (t: BinaryTree<'a>) = 
            match t with 
            | Empty -> x (* unreachable case *)
            | Node (min, Empty, _) -> min
            | Node (min, left, right) -> findMin left
        findMin right
    Node (min, left, removeTree min right) 

(* Define a function to calculate the factorial of a given number *)

let rec factorial (num: int) = 
    match num with 
    | 0 -> 1
    | 1 -> 1
    | _ -> num * factorial (num-1)