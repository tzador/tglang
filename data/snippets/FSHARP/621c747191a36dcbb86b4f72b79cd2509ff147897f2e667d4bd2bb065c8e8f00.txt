/// A function that calculates the n-th term in the Fibonacci sequence
let rec fibonacci n =
    match n with
    | 0 -> 1
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

/// A recursive function that calculates the factorial
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)

// A list of numbers to be used in the function
let numbers = [1; 2; 3; 4; 5]

/// A function that filters out even numbers from a given list
let filterEven (nums : int list) =
    List.filter (fun n -> n % 2 = 0) nums

/// A function that maps the fibonacci and factorial functions onto the list of numbers
let calculatedNumbers = List.map (fun n -> (fibonacci n, factorial n)) numbers

/// A function that formats the calculated numbers into a string
let formattedResult = List.fold (fun acc (n, f) -> acc + "Fibonacci of " + string n + " is " + string f + ".\n") "" calculatedNumbers

/// Prints the formatted result to the console
printfn "%s" formattedResult