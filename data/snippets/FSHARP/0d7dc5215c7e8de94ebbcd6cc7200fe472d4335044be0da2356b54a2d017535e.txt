FSHARP let myFunc x =
    match x with
    | "hello" -> printfn "%s" (x + " world")
    | "goodbye" -> printfn "%s" (x + " cruel world")
    | _ -> printfn "unknown input"

let result = myFunc "hello" //Output: "hello world"

let myList = [1;2;3]

let rec sumList (list: int list) =
    match list with
    | [] -> 0
    | head :: tail -> head + sumList tail

let sum = sumList myList //Output: 6

let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

let result = fibonacci 10 //Output: 55