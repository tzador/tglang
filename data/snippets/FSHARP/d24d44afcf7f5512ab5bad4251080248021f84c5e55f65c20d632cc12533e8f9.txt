// Create a function that takes in a list of integers and returns a new list with only the even numbers
let rec filterEvenNumbers numbers =
    match numbers with
    | [] -> []
    | head::tail -> if head % 2 = 0 then head::(filterEvenNumbers tail) else filterEvenNumbers tail

// Create a recursive function to calculate the factorial of a given number
let rec factorial num =
    match num with
    | 0 -> 1
    | 1 -> 1
    | _ -> num * factorial (num-1)

// Define a record type for a Person with properties for name, age, and isMarried
type Person = { Name: string; Age: int; IsMarried: bool }

// Create a list of people with different properties
let people = [ {Name = "John"; Age = 25; IsMarried = false}; {Name = "Emily"; Age = 30; IsMarried = true}; {Name = "Mike"; Age = 45; IsMarried = true} ]

// Define a function to filter the list of people by their age
let filterByAge age people =
    List.filter (fun person -> person.Age >= age) people