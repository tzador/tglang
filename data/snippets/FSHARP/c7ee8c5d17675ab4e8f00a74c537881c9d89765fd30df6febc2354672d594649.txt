//define a function that adds two numbers
let add (x:int) (y:int) = x + y

//define a recursive function to calculate the factorial of a number
let rec factorial (n:int) =
    if n <= 1 then
        1
    else
        n * factorial (n-1)

//create a list of numbers
let numbers = [1; 2; 3; 4; 5]

//use a pipeline operator to perform multiple operations on the list
let output = numbers
                |> List.map (fun x -> x*x)
                |> List.filter (fun x -> x%2 = 0)
                |> List.fold (fun acc x -> acc + x) 0
                |> string

//define a record type for a User
type User = { Name:string; Age:int; Occupation:string }

//create a list of User records
let users = [{Name="John"; Age=25; Occupation="Engineer"};
             {Name="Mary"; Age=30; Occupation="Doctor"}]

//use pattern matching to find the oldest user in the list
let rec findOldestUser (users:User list) =
    match users with
    | [] -> None
    | [user] -> Some user
    | hd::tl ->
        let oldest = findOldestUser tl
        match oldest with
        | None -> Some hd
        | Some user -> if hd.Age > user.Age then Some hd else Some user

//output the result
printfn "The result is %s" output