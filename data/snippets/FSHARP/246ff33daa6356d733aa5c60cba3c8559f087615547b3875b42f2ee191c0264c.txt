(* Creating an abstract algebraic data type for a binary tree *)

type BinaryTree<'a> =
    | Empty
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

(* Creating a function to insert a value into the tree *)

let rec insert value tree =
    match tree with
    | Empty -> Node(value, Empty, Empty)
    | Node(v, left, right) ->
        if value < v then
            Node(v, insert value left, right)
        else
            Node(v, left, insert value right)

(* Creating a function to remove a value from the tree *)

let rec remove value tree =
    match tree with
    | Empty -> Empty
    | Node(v, left, right) ->
        if value < v then
            Node(v, remove value left, right)
        elif value > v then
            Node(v, left, remove value right)
        else
            let rec replaceDeleted node =
                match node with
                | Empty -> Empty
                | Node(_, Empty, right) -> right
                | Node(_, left, Empty) -> left
                | Node(_, left, right) ->
                    let min = findMin left
                    Node(min, remove min left, right)

            let findMin node =
                match node with
                | Node(v, Empty, _) -> v
                | Node(_, left, _) -> findMin left

            replaceDeleted tree

(* Example usage of the functions on a tree with integers *)

let intTree = Node(5, Node(2, Node(1, Empty, Empty), Node(4, Empty, Empty)), Node(7, Empty, Node(9, Empty, Empty)))

let updatedTree = insert 6 intTree

let removedTree = remove 2 intTree