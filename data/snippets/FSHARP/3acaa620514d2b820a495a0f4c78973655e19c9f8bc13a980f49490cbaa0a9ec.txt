let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib (n-1) + fib (n-2)

let rec sum_list xs =
    match xs with
    | [] -> 0
    | head::rest -> head + sum_list rest

printfn "The 10th element in the fibonacci sequence is %i" (fib 10) // Output: The 10th element in the fibonacci sequence is 55

let numbers = [1, 2, 3, 4, 5]
printfn "The sum of the numbers in the list is %i" (sum_list numbers) // Output: The sum of the numbers in the list is 15

let is_even n =
    if n % 2 = 0 then true else false

// This function takes in a list of integers and returns a list of even numbers
let even_numbers numbers =
    let rec loop acc xs =
        match xs with
        | [] -> acc
        | head::rest ->
            if is_even head then loop (head::acc) rest
            else loop acc rest

    loop [] numbers

let numbers = [1, 2, 3, 4, 5]
let even_numbers = even_numbers numbers
printfn "The list of even numbers is %A" even_numbers // Output: The list of even numbers is [2; 4]