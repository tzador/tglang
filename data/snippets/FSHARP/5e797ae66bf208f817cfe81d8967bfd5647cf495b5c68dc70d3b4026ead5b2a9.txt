let rec fibonacci n = 
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)
    
let rec factorial n = 
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)
    
let rec power n m = 
    match n with
    | 0 -> 1
    | 1 -> n
    | _ -> 
        if m = 0 then 1
        else n * power n (m-1)
        
let isEven n = 
    match n%2 with
    | 0 -> true
    | _ -> false
    
// This is a recursive algorithm for calculating fibonacci numbers, factorials, and powers, as well as checking if a number is even.
// The algorithm uses the match expression to match the input with different cases and perform the desired operation. 
// The 'let rec' keyword is used to define recursive functions.
// The code snippet shows the power of recursion in solving mathematical problems.