// Define a recursive function that calculates the factorial of a given number.
let rec factorial n =
    if n = 0 then
        1 // base case
    else
        n * factorial (n-1) // recursive call

// Define a function that checks if a number is prime.
let isPrime n =
    [2..(n/2)]
    |> List.filter (fun x -> n % x = 0)
    |> List.length = 0

// Define a function that returns the list of prime factors of a given number.
let primeFactors n =
    [2..n]
    |> List.filter (fun x -> n % x = 0 && isPrime x)
    |> List.sort

// Define a function that uses pattern matching to print the corresponding message for the given input.
let printMessage input =
    match input with
    | 0 -> printfn "Input is equal to zero!"
    | x when x > 0 && x <= 10 -> printfn "Input is between 1 and 10!"
    | x when x > 10 && x <= 100 -> printfn "Input is between 11 and 100!"
    | _ -> printfn "Input is greater than 100 or less than zero!"

// Sample input and output:
// factorial 5 returns 120
// isPrime 17 returns true
// primeFactors 12 returns [2;3]
// printMessage 50 prints "Input is between 11 and 100!"