// Function to calculate the power of a number using recursion
let rec power(x:float, y:int) : float = 
    match y with
    | 0 -> 1.0 
    | 1 -> x
    | _ -> x * power(x, y - 1)

// Function to check if a number is prime
let isPrime(n:int) : bool =
    let rec check(k:int) : bool =
        if k * k > n then 
            true 
        elif n % k = 0 then 
            false 
        else 
            check (k + 1)
    check(2)

// Function to find the first n prime numbers
let findPrimes(n:int) : int list =
    let rec find(n:int, k:int, primes:int list) : int list =
        if n = List.length primes then
            primes
        elif isPrime(k) then
            primes @ [k] 
            |> find n (k + 1)
        else
            find n (k + 1) primes
    find n 2 []

// Calculate the power of 2 using recursion
let powerOfTwo : float = power(2.0, 10)

// Find the first 5 prime numbers
let firstFivePrimes : int list = findPrimes(5)