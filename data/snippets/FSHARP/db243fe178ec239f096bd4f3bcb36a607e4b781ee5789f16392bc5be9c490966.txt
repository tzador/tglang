// Define a type representing a 2x2 matrix
type Matrix2 =
    | Matrix2x2 of float * float * float * float

// Define functions for matrix addition, scalar multiplication, and matrix multiplication
let add (m1:Matrix2) (m2:Matrix2) =
    match m1, m2 with
    | Matrix2x2 (a11, a12, a21, a22), Matrix2x2 (b11, b12, b21, b22) ->
        Matrix2x2 (a11 + b11, a12 + b12, a21 + b21, a22 + b22)

let times (m1:Matrix2) (scalar:float) =
    match m1 with
    | Matrix2x2 (a11, a12, a21, a22) ->
        Matrix2x2 (a11 * scalar, a12 * scalar, a21 * scalar, a22 * scalar)

let multiply (m1:Matrix2) (m2:Matrix2) =
    match m1, m2 with
    | Matrix2x2 (a11, a12, a21, a22), Matrix2x2 (b11, b12, b21, b22) ->
        Matrix2x2 (a11 * b11 + a12 * b21, a11 * b12 + a12 * b22, a21 * b11 + a22 * b21, a21 * b12 + a22 * b22)

// Define a function to calculate the determinant of a 2x2 matrix
let determinant (m:Matrix2) =
    match m with
    | Matrix2x2 (a11, a12, a21, a22) -> (a11 * a22) - (a12 * a21)
    
// Create two 2x2 matrices
let m1 = Matrix2x2 (1.0, 2.0, 3.0, 4.0)
let m2 = Matrix2x2 (5.0, 6.0, 7.0, 8.0)

// Add the two matrices
let addedMatrix = add m1 m2 // Output: Matrix2x2 (6.0, 8.0, 10.0, 12.0)

// Multiply one matrix by a scalar
let multipliedMatrix = times m1 2.0 // Output: Matrix2x2 (2.0, 4.0, 6.0, 8.0)

// Multiply the two matrices
let productMatrix = multiply m1 m2 // Output: Matrix2x2 (19.0, 22.0, 43.0, 50.0)

// Calculate the determinant of one matrix
let det = determinant m1 // Output: -2.0