let rec factorial n = 
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)

let rec power n exp =
    match exp with
    | 0 -> 1
    | _ -> n * power n (exp - 1)

let rec fib n =
    match n with
    | 0 | 1 -> n
    | _ -> fib (n-1) + fib (n-2)

let rec sumList lst =
    match lst with
    | [] -> 0
    | head::tail -> head + sumList tail

let rec merge lst1 lst2 =
    match (lst1, lst2) with
    | [], lst -> lst
    | lst, [] -> lst
    | head1::tail1, head2::tail2
        when head1 < head2 -> head1 :: merge tail1 lst2
        | head1::tail1, head2::tail
        when head1 > head2 -> head2 :: merge lst1 tail2
        | head1::tail1, head2::tail2 -> head1 :: head2 :: merge tail1 tail2

let rec factTail n acc =
    match n with
    | 0 -> acc
    | _ -> factTail (n - 1) (n * acc)

let factorial n = factTail n 1

let rec powTail n exp acc =
    match exp with
    | 0 -> acc
    | _ -> powTail n (exp - 1) (n * acc)

let power n exp = powTail n exp 1

let rec fibTail n n1 n2 =
    match n with
    | 0 -> n1
    | 1 -> n2
    | _ -> fibTail (n-1) n2 (n1+n2)

let fib n = fibTail n 0 1

let rec sumListTail lst acc =
    match lst with
    | [] -> acc
    | head::tail -> sumListTail tail (acc + head)

let sumList lst = sumListTail lst 0

let rec mergeTail lst1 lst2 acc =
    match (lst1, lst2) with
    | [], lst -> acc @ lst
    | lst, [] -> acc @ lst
    | head1::tail1, head2::tail2
        when head1 < head2 -> mergeTail tail1 lst2 (acc @ [head1])
        | head1::tail1, head2::tail
        when head1 > head2 -> mergeTail lst1 tail2 (acc @ [head2])
        | head1::tail1, head2::tail2 -> mergeTail tail1 tail2 (acc @ [head1; head2])

let merge lst1 lst2 = mergeTail lst1 lst2 []

let rec quicksort lst =
    match lst with
    | [] -> []
    | head::tail ->
        let smaller = List.filter (fun x -> x < head) tail
        let bigger = List.filter (fun x -> x >= head) tail
        quicksort smaller @ [head] @ quicksort bigger