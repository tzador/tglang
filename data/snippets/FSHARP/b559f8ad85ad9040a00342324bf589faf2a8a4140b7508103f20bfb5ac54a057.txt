// Define a type for a binary tree node
type BinaryTree<'a> = 
| Leaf 
| Branch of 'a * BinaryTree<'a> * BinaryTree<'a>

// Define a function to insert a value into a binary search tree
let rec insert (value:'a) (tree:BinaryTree<'a>) =
    match tree with 
    // If the tree is empty, create a new node with the value
    | Leaf -> Branch(value, Leaf, Leaf)
    // If the value is smaller than the root, insert it into the left subtree
    | Branch(root, left, right) when value < root -> Branch(root, insert value left, right)
    // If the value is larger than the root, insert it into the right subtree
    | Branch(root, left, right) when value > root -> Branch(root, left, insert value right)
    // Do not insert duplicates
    | _ -> tree

// Define a function to check if a given value is in a binary search tree
let rec contains (value:'a) (tree:BinaryTree<'a>) =
    match tree with 
    // If the tree is empty, the value does not exist
    | Leaf -> false
    // If the value is equal to the root, it exists in the tree
    | Branch(root, _, _) when value = root -> true
    // If the value is smaller than the root, check the left subtree
    | Branch(root, left, _) when value < root -> contains value left
    // If the value is larger than the root, check the right subtree
    | Branch(root, _, right) when value > root -> contains value right
    // If none of the above conditions match, the value does not exist in the tree
    | _ -> false

// Create a new binary search tree with initial values
let tree = insert 5 (Branch(3, Leaf, Leaf))
let tree = insert 7 tree
let tree = insert 2 tree
let tree = insert 6 tree

// Check if a value is in the tree
let contains2 = contains 7 tree // Returns true
let contains3 = contains 4 tree // Returns false