// Define a function to calculate the sum of two numbers
let sum x y =
    x + y

// Define a list of numbers
let numbers = [1; 2; 3; 4; 5]

// Use a pipe operator to apply the sum function to the list
let total = numbers
            |> List.reduce sum 

// Print the total to the console
printfn "The total is %i" total

// Define a function to calculate the factorial of a number
let rec factorial n =
    if n = 1 then
        1
    else
        n * factorial (n-1)

// Use pattern matching to handle edge cases
let fact n =
    match n with
    | 0 -> 1
    | 1 -> 1
    | _ -> factorial(n)

// Calculate and print the factorial of 5
let result = fact 5
printfn "The factorial of 5 is %i" result

// Define a record type for a person
type Person = { Name : string; Age : int }

// Create an instance of the Person type
let john = { Name = "John"; Age = 30 }

// Use pattern matching to access the values of the record
let printPerson person =
    match person with
    | { Name = name; Age = age } -> printfn "%s is %i years old" name age

// Call the printPerson function on the john instance
printPerson john