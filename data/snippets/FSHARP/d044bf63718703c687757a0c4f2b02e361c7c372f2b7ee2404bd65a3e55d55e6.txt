// Define and initialize a list of tuples with players' names and their corresponding ages
let players = [("John", 25); ("Sarah", 22); ("Michael", 27); ("Emily", 23); ("David", 26); ("Rachel", 24)]

// Get the names of players who are younger than 25
let youngPlayers = players |> List.filter (fun (_, age) -> age < 25) |> List.map fst

// Print the names of young players
printfn "Names of young players:"
youngPlayers |> List.iter (printfn "%s")

// Define a function to calculate the average age of players
let averageAge players =
    let total = players |> List.fold (fun acc (_, age) -> acc + age) 0
    let count = List.length players |> float
    total / count

// Calculate and print the average age of players 
let avgAge = averageAge players
printfn "Average age of players: %f" avgAge

// Define a function to calculate the sum of ages of players whose names start with a vowel
let sumVowelAges players =
    let vowelPlayers = players |> List.filter (fun (name, _) -> name.[0] |> Char.ToUpper |> List.exists [<Member>] ["A"; "E"; "I"; "O"; "U"])
    let total = vowelPlayers |> List.fold (fun acc (_, age) -> acc + age) 0
    total

// Calculate and print the sum of ages of players whose names start with a vowel
let sumVowelAges = sumVowelAges players
printfn "Sum of ages of players whose names start with a vowel: %d" sumVowelAges

// Define a recursive function to print the names and ages of players in reverse order
let rec printPlayersReverse players =
    match players with
    | [] -> ()
    | (name, age)::rest -> printPlayersReverse rest; printfn "%s: %d" name age

// Print the names and ages of players in reverse order
printfn "Names and ages of players in reverse order:"
printPlayersReverse players