type Tree<'T> =
    | Empty
    | Node of 'T * Tree<'T> * Tree<'T>

let rec insert (value: 'T) (tree: Tree<'T>) =
    match tree with
    | Empty -> Node(value, Empty, Empty) // if the tree is empty, create a new node with the given value
    | Node(v, left, right) ->
        if value < v then // if the value is less than the current node, insert it into the left subtree
            Node(v, insert value left, right)
        elif value > v then // if the value is greater than the current node, insert it into the right subtree
            Node(v, left, insert value right)
        else // if the value is equal to the current node, do not create a new node, just return the same tree
            tree

let rec search (value: 'T) (tree: Tree<'T>) =
    match tree with
    | Empty -> false // if the tree is empty, the value is not found
    | Node(v, left, right) ->
        if value < v then // if the value is less than the current node, search in the left subtree
            search value left
        elif value > v then // if the value is greater than the current node, search in the right subtree
            search value right
        else // if the value is equal to the current node, the value is found
            true

let rec delete (value: 'T) (tree: Tree<'T>) =
    match tree with
    | Empty -> Empty // if the tree is empty, there is nothing to delete
    | Node(v, left, right) ->
        if value < v then // if the value is less than the current node, delete it from the left subtree
            Node(v, delete value left, right)
        elif value > v then // if the value is greater than the current node, delete it from the right subtree
            Node(v, left, delete value right)
        else // if the value is equal to the current node, replace it with its successor
            match (left, right) with
            | (Empty, Empty) -> Empty // if both subtrees are empty, the current node is a leaf node, just delete it
            | (_, Empty) -> left // if only the right subtree is empty, the successor is in the left subtree
            | (Empty, _) -> right // if only the left subtree is empty, the successor is in the right subtree
            | (_, _) ->
                let successor = findMinimum right // find the smallest value in the right subtree
                Node(successor, left, delete successor right) // replace the current node with its successor, and delete the successor from the right subtree
    and findMinimum (tree: Tree<'T>) =
        match tree with
        | Empty -> failwith "Cannot find minimum in an empty tree" // if the tree is empty, there is no minimum
        | Node(v, left, right) ->
            match left with
            | Empty -> v // if the left subtree is empty, the current node is the minimum
            | _ -> findMinimum left // otherwise, the minimum is in the left subtree

let tree = Node(5, Node(3, Node(1, Empty, Empty), Node(4, Empty, Empty)), Node(7, Node(6, Empty, Empty), Node(9, Empty, Empty))) // create a sample tree
let updatedTree = insert 8 tree // insert a new value into the tree
let isFound = search 8 updatedTree // search for the inserted value in the updated tree
let finalTree = delete 3 updatedTree // delete a value from the updated tree