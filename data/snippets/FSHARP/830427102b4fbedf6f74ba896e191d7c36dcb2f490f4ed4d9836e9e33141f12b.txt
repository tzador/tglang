// Create a recursive function to calculate the factorial of a number
let rec factorial n = 
    match n with 
    | 0 -> 1
    | _ -> n * factorial (n - 1)

// Use pattern matching to handle edge cases and non-integer input
let factorialStr (s : string) =
    match Int32.TryParse(s) with
    | (true, n) when n >= 0 -> 
        let result = factorial n 
        sprintf "Factorial of %d is %d" n result
    | _ -> "Input must be a non-negative integer"

// Print the result of the factorial function for a given input
let result = factorialStr "6"
printfn "%s" result