/// Function to calculate the nth Fibonacci number.
let rec fib n =
    match n with
    | 0 | 1 -> n
    | _ -> fib (n-1) + fib (n-2)
    
/// Function to return the first n elements of a given list.
let rec take n xs =
    match n, xs with
    | 0, _ -> []
    | _, [] -> []
    | _, x::xs' -> x :: take (n-1) xs'
    
/// Function to merge two sorted lists into one sorted list.
let rec merge xs ys =
    match xs, ys with
    | [], _ -> ys
    | _, [] -> xs
    | x::xs', y::ys' ->
        if x < y then x :: merge xs' ys
        else y :: merge xs ys'
        
/// Function to perform a binary search on a sorted list.
let rec binarySearch arr low high key =
    if (low > high) then -1
    else
        let mid = (low + high) / 2
        if arr.[mid] = key then mid
        else if arr.[mid] > key then binarySearch arr low (mid - 1) key
        else binarySearch arr (mid + 1) high key