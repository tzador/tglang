// Function to calculate the factorial of a given number
let rec factorial x =
    if x = 0 then
        1 
    else
        x * factorial(x-1)

// Function to calculate the nth fibonacci number using tail recursion
let fibonacci n =
    let rec fibhelper n a b =
        match n with
        | 0 -> a
        | _ -> fibhelper (n-1) b (a+b)
    fibhelper n 0 1

// Example of a recursive union type
type Tree<'a> =
    | Empty
    | Node of 'a * Tree<'a> * Tree<'a>

// Function to insert an element into a binary search tree
let rec insert x tree =
    match tree with
    | Empty -> Node(x,Empty,Empty)
    | Node(y,left,right) -> if x <= y then Node(y,insert x left,right) else Node(y,left,insert x right)