// Define a recursive function with pattern matching
let rec fibonacci = function
    | 0 -> 0
    | 1 -> 1
    | n -> fibonacci (n - 1) + fibonacci (n - 2)

// Define a list of fibonacci numbers
let fibonacciList = [0; 1; 1; 2; 3; 5; 8]

// Print each fibonacci number in the list using a for loop
for num in fibonacciList do
    printfn "Fibonacci number %d: %d" num (fibonacci num)

// Create a fold function to calculate the sum of a list
let rec fold sum = function
    | [] -> sum
    | head::tail -> fold (sum + head) tail

// Calculate the sum of the first 10 fibonacci numbers
let sumFibonacci = fold 0 (List.take 10 fibonacciList)
printfn "Sum of the first 10 fibonacci numbers: %d" sumFibonacci

// Define a record type to represent a person's information
type Person = { 
    Name: string; 
    Age: int; 
    Location: string 
}

// Create an instance of the Person record type
let person = { Name = "John"; Age = 30; Location = "New York" }