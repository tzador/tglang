// Define a function that takes in two lists of integers and returns the sum of their squares
let squareSum (l1:list<int>) (l2:list<int>): int =
    // Define a local helper function to calculate the square of a number
    let square n = n * n
    // Use List.map to apply the square function to each element in both lists
    let squared1 = List.map square l1
    let squared2 = List.map square l2
    // Use List.fold to sum up all elements in the squared lists
    let sum = List.fold (+) 0 (squared1 @ squared2)
    // Return the final sum
    sum
// Example usage
squareSum [1;2;3] [4;5;6] // Output: 91
// Explanation: 
// The function squareSum takes in two lists of integers and returns the sum of their squares.
// It first defines a local helper function square to calculate the square of a number.
// Then, it uses List.map to apply the square function to each element in both lists.
// The resulting squared lists are then concatenated using the @ operator.
// Finally, List.fold is used to sum up all elements in the squared lists.
// The final sum is returned as the result.