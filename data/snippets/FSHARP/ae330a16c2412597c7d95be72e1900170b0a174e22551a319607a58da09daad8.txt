(* This is a recursive function that calculates the factorial of a given number n *)
let rec factorial n =
    if n < 0 then
        failwith "n cannot be negative"
    else 
        match n with
        | 0 | 1 -> 1
        | _ -> n * factorial(n-1)

(* This function calculates the sum of a list of integers using recursion *)
let rec sumList (list: int list) =
    match list with
    | [] -> 0
    | x::rest -> x + sumList rest

(* This function uses pattern matching to check if a given number is a prime number *)
let isPrime n =
    match n with
    | 2 -> true
    | _ when n < 2 -> false
    | _ ->
        let limit = int(sqrt(float n))
        let rec isDivisible number divisor =
            if divisor > limit then
                false
            else
                number % divisor = 0 || isDivisible number (divisor + 1)
        not(isDivisible n 2)