/// Define a data type representing a binary tree with nodes of type 'a
type BinaryTree<'a> =
    | Leaf
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

/// Define a function to insert an element into a binary tree
let rec insert (value:'a) (tree:BinaryTree<'a>) =
    match tree with
    | Leaf -> Node(value, Leaf, Leaf)
    | Node(v, left, right) ->
        if value < v then
            Node(v, insert value left, right)
        else
            Node(v, left, insert value right)

/// Create a new empty binary tree of integers
let intTree = Leaf

/// Insert values into the binary tree
let intTree = insert 5 intTree
let intTree = insert 2 intTree
let intTree = insert 7 intTree

/// Define a function to check if a given value is in the binary tree
let rec contains (value:'a) (tree:BinaryTree<'a>) =
    match tree with
    | Leaf -> false
    | Node(v, left, right) ->
        if value = v then
            true
        elif value < v then
            contains value left
        else
            contains value right

/// Check if the binary tree contains the value 2
contains 2 intTree