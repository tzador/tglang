// Define a function that sums all the elements in a given list
let rec sumElements list =
    match list with
    | [] -> 0
    | head::tail -> head + sumElements tail

// Define a function that takes in two lists and returns a new list with the elements from both lists
let mergeLists list1 list2 =
    let mergedList = list1 @ list2
    List.sort(mergedList)

// Define a recursive function that checks if a number is prime
let rec isPrime num numOfDivisors =
    if numOfDivisors > 2 then
        false
    else if numOfDivisors = 2 then
        true
    else
        match num % numOfDivisors with
        | 0 -> isPrime num (numOfDivisors + 1)
        | _ -> isPrime num (numOfDivisors + 1)

// Define a function that returns the second element in a tuple
let getSecondElement tuple =
    let secondElement = snd tuple
    secondElement

// Define a function that calculates the factorial of a given number
let rec factorial num =
    if num = 0 then
        1
    else
        num * factorial (num - 1)

// Define a function that generates a list of numbers from 1 to 10
let rec generateListOfNumbers num =
    if num > 10 then 
        []
    else 
        num :: generateListOfNumbers (num + 1)