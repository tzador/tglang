//declare a recursive function to calculate the factorial of a given number
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)

//declare and assign a value to an immutable variable
let x = 5

//create a list of numbers from 1 to 10 using a list comprehension
let numbers = [ for i in 1..10 -> i ]

//define a record type for a person with name and age fields
type Person =
    { Name: string;
      Age: int }

//create an instance of the Person record type
let person = { Name = "John"; Age = 30 }

//create a function to print out the name and age of a person
let printPerson person =
    printfn "Name: %s, Age: %i" person.Name person.Age

//create a list of Person records
let people =
    [{Name = "Jane"; Age = 25}; {Name = "Mike"; Age = 35}; {Name = "Sarah"; Age = 40}]

//use pattern matching to extract the age of a person from the list, only if their name is "Mike"
let age =
    match List.find (fun p -> p.Name = "Mike") people with
    | {Name="Mike"; Age=age} -> age
    | _ -> 0   //in case the person is not found, return 0 as age

//define a recursive function to calculate the fibonacci sequence
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> (fibonacci(n-1)) + (fibonacci(n-2))