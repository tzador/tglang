#light

(* A simple function that multiplies two numbers and prints the result *)
let multiply x y = 
    printfn "The product of %d and %d is %d" x y (x * y)

(* A recursive function to find the nth Fibonacci number *)
let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* A function that takes in a list of numbers and returns the sum of all the numbers *)
let sumList list =
    let rec loop sum = function
        | [] -> sum
        | head :: tail -> loop (sum + head) tail
    loop 0 list

(* A class with two properties and a method *)
type Person (name, age) =
    member this.Name = name
    member this.Age = age

    member this.HasBirthday() =
        this.Age <- this.Age + 1

(* An example of pattern matching on a list *)
let rec listHead = function
    | [] -> 0
    | head :: _ -> head