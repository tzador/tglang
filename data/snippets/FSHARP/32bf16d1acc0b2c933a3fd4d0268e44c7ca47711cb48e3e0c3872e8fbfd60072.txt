// Define a function that takes in two integers and returns their product
let rec multiply (x:int) (y:int) =
    if x = 0 || y = 0 then 0 // Base case: if either integer is 0, the product is 0
    else if x = 1 then y // If x is 1, the product is y
    else if y = 1 then x // If y is 1, the product is x
    else if x < 0 && y < 0 then multiply (-x) (-y) // If both integers are negative, multiply them as positive integers
    else if x < 0 then -multiply (-x) y // If only x is negative, convert it to a positive integer and make the product negative
    else if y < 0 then -multiply x (-y) // If only y is negative, convert it to a positive integer and make the product negative
    else x + multiply x (y-1) // Recursive case: add x to the product of x and y-1