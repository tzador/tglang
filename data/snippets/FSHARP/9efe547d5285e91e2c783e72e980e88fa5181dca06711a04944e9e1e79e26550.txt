// Define a function that takes in a list of integers and a threshold value
let rec filterThreshold (list: int list) (threshold: int) =
// Use pattern matching to check if the list is empty
match list with
| [] -> []
// Use pattern matching to check if the first element in the list is above the threshold
| x::xs when x > threshold ->
// Recursively call the function on the rest of the list and append the first element to the filtered list
x::(filterThreshold xs threshold)
// Use pattern matching if the first element is equal to the threshold
| x::xs when x = threshold ->
// Recursively call the function on the rest of the list without appending the first element
filterThreshold xs threshold
// If neither condition is met, skip the first element and recursively call the function on the rest of the list
| _::xs -> filterThreshold xs threshold
// Example usage
let numbers = [1;5;10;15;20]
printfn "%A" (filterThreshold numbers 10)
// Output: [15; 20]