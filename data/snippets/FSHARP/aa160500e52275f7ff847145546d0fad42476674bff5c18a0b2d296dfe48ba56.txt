// Define a function to calculate the factorial of a given number
let rec factorial n =
    // If the number is 0 or 1, return 1 as the factorial
    if n = 0 || n = 1 then
        1
    // If the number is greater than 1, use recursion to calculate the factorial
    else
        n * factorial (n - 1)
        
// Use pattern matching to handle edge cases
match n with
| n when n < 0 -> failwith "Factorial cannot be calculated for negative numbers"
| n when n = 0 || n = 1 -> 1
| n -> factorial n // Call the factorial function for numbers greater than 1

// Use a try-with block to handle any potential exceptions
try
    // Call the factorial function with a given number n
    let result = factorial n
    // Print the result to the console
    printfn "The factorial of %d is %d" n result
// Catch any exceptions and print the error message
with ex -> printfn "Error: %s" ex.Message

// Example usage: Calculate the factorial of 5
let n = 5
factorial n // Output: 120 (5 * 4 * 3 * 2 * 1 = 120)