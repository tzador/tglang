(* Type-annotated memoized Fibonacci sequence function *)

(* Define a map to store previously calculated values *)
let memo = Map.empty

(* Define a recursive function *)
let rec memoizedFib n =

    (* Pattern match to check if value has already been calculated *)
    match Map.tryFind n memo with

    (* If value is found, return it *)
    | Some value -> value

    (* If value is not found, calculate it using recursion and add it to map *)
    | None ->
        let newValue = 
            if n <= 0 then 0
            elif n = 1 then 1
            else memoizedFib (n-1) + memoizedFib (n-2)
        map.Add(n, newValue)
        newValue

(* Call the memoized function with a value of 10 *)
let result = memoizedFib 10