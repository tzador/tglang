/// This function takes in an integer and returns a list of all the prime numbers less than or equal to the input
let rec primeNumbers (n:int) = 
    ///function that checks if a number is prime or not
    let isPrime (x:int) = 
        let upperBound = int(sqrt(double(x))) + 1
        ///use tail recursion to check all numbers between 2 and the square root of x to see if it is a factor
        let rec checkFactor (i:int) = 
            if i > upperBound then true
            else 
                if x%i = 0 then false // if i is a factor, x is not prime
                else checkFactor (i+1) // otherwise, check next number
        checkFactor 2

    ///use tail recursion to generate list of prime numbers starting from 2
    let rec generate (currNum:int, currList:int list) = 
        if currNum > n then List.rev currList // reverse list and return when currNum exceeds input
        else
            if isPrime currNum then generate (currNum+1, currNum::currList) // if currNum is prime, add to list and check next number
            else generate(currNum+1, currList) // otherwise, check next number
    generate 2 [] // start recursive call with 2 as currNum and empty list as currList