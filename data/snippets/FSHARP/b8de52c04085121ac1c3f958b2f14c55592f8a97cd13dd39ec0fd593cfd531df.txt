let rec factorial n = 
    match n with 
    | 1 -> 1
    | n' when n' > 1 -> n' * factorial (n' - 1)
    | _ -> failwith "Invalid input"
    
let fibonacci n = 
    let rec fib acc n1 n2 = 
        match n with
        | 0 -> acc
        | 1 -> acc + n1
        | _ -> fib (acc + n1 + n2) (n1 + n2) n1
    fib 0 0 1
    
let rec map f list = 
    match list with
    | [] -> []
    | h :: t -> (f h) :: map f t
    
let rec filter f list = 
    match list with
    | [] -> []
    | h :: t when f h -> h :: filter f t
    | h :: t -> filter f t