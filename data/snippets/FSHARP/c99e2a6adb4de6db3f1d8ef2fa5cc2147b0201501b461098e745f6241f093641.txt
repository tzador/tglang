let rec factorial n =
    match n with
    | 0 | 1 -> 1
    | x when x > 1 -> x * factorial (x - 1)

let result = factorial 5
// result = 120

let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | x when x > 1 -> fibonacci (x - 1) + fibonacci (x - 2)

let evenFibonacciSum limit =
    let rec loop i acc =
        if (fibonacci i) % 2 = 0 then
            if i > limit then
                acc
            else
                loop (i + 1) (acc + (fibonacci i))
        else
            loop (i + 1) acc
    loop 0 0

let result2 = evenFibonacciSum 4000000
// result2 = 4613732

let rec mergeSort list =
    let rec merge left right =
        match left, right with
        | [], right -> right
        | left, [] -> left
        | leftHead::leftTail, rightHead::rightTail ->
            if leftHead <= rightHead then
                leftHead :: merge leftTail right
            else
                rightHead :: merge left rightTail
    match list with
    | [] | [_] -> list
    | _ ->
        let halfLength = list.Length / 2
        let left = list |> Seq.take halfLength |> Seq.toList
        let right = list |> Seq.skip halfLength |> Seq.toList
        merge (mergeSort left) (mergeSort right)