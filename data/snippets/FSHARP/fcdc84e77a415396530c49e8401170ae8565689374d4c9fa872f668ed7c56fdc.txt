// This code snippet demonstrates how to use higher order functions and pipelines in F#
// Define function to square a number
let square x = x * x

// Define list of numbers
let numbers = [1; 2; 3; 4; 5]

// Use higher order function to map square function over list
let squares = numbers |> List.map square // [1; 4; 9; 16; 25]

// Use pipeline operator to chain functions
let avgSquare = numbers
                |> List.map square
                |> List.average // 11.8

// Use higher order function to filter numbers greater than 3
let filtered = numbers |> List.filter (fun x -> x > 3) // [4; 5]

// Use pipeline operator to chain functions and get sum of filtered numbers
let sumFiltered = numbers
                  |> List.filter (fun x -> x > 3)
                  |> List.sum // 9

// Print results
printfn "Squares of numbers: %A" squares // Squares of numbers: [1; 4; 9; 16; 25]
printfn "Average of squares: %f" avgSquare // Average of squares: 11.8
printfn "Filtered numbers: %A" filtered // Filtered numbers: [4; 5]
printfn "Sum of filtered numbers: %d" sumFiltered // Sum of filtered numbers: 9