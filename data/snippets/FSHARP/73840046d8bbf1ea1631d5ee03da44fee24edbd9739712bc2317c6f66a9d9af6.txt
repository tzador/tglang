// Function to compute the nth Fibonacci number
let rec fib n =
  if n < 2 then n else (fib (n-1)) + (fib (n-2))

// Function to check if a number is prime using the Sieve of Eratosthenes
let rec prime num =
  let rec sieve k =
    if k = num then true
    elif num % k = 0 then false
    else sieve (k+1)
  sieve 2

// Function to generate a list of prime numbers using the Sieve of Eratosthenes
let genPrime pMax =
  let rec primeList pMax sieveList =
    let rec filter numList =
      match numList with
      | [] -> []
      | hd :: tl -> hd :: filter [ for n in tl do if n % hd <> 0 then yield n ]
    if (sieveList.Length > pMax - 1) then sieveList.[pMax-1]
    else primeList pMax (filter sieveList)
  [2] |> primeList pMax