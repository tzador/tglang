(* Define a function that calculates the factorial of a given number *)
let rec factorial n =
    // Base case
    if n = 0 then 1
    // Recursive case
    else n * factorial (n - 1)
    
// Usage
factorial 5 // = 120

(* Another example of function that calculates the sum of squares of a given list of numbers *)
let rec sumOfSquares xs =
    match xs with
    // Base case
    | [] -> 0
    // Recursive case
    | x::xs -> x * x + sumOfSquares xs
    
// Usage
sumOfSquares [1;2;3;4] // = 30

(* Define a record type that represents a person with a name and age *)
type Person = {
    Name: string
    Age: int
    }

// Create a list of person records
let people = [
    { Name = "John"; Age = 35 };
    { Name = "Sarah"; Age = 28 };
    { Name = "Adam"; Age = 42 };
    ]

(* Function to print the names of people over a certain age *)
let printNamesOverAge age =
    people
    |> List.filter (fun p -> p.Age > age)
    |> List.iter (fun p -> printfn "%s" p.Name)
    
// Usage
printNamesOverAge 30 // Prints "John", "Adam" to the console