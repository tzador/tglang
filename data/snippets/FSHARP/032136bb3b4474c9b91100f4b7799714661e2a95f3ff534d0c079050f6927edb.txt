// Defining a generic BinaryTree type
type BinaryTree<'T> =
    | Empty
    | Node of 'T * BinaryTree<'T> * BinaryTree<'T>

// Define a function to check if two binary trees are equal
let rec equals tree1 tree2 =
    match tree1, tree2 with
    | Empty, Empty -> true
    | Node(value1, left1, right1), Node(value2, left2, right2) -> value1 = value2 && equals left1 left2 && equals right1 right2
    | _, _ -> false

// Create two binary trees
let tree1 = Node(1, Node(2, Empty, Empty), Node(3, Empty, Empty))
let tree2 = Node(1, Node(2, Empty, Empty), Node(3, Empty, Empty))

// Check if the two trees are equal
equals tree1 tree2 // returns true