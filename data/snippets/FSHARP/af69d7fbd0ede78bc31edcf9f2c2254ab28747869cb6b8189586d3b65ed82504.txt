let rec quicksort lst =
    match lst with
    | [] -> [] // base case, empty list
    | pivot :: tail -> // recursive case
        let lesser, greater = List.partition (fun x -> x < pivot) tail // partition list into elements smaller and greater than pivot
        let lesserSorted = quicksort lesser // recursively sort the lesser elements
        let greaterSorted = quicksort greater // recursively sort the greater elements
        lesserSorted @ [pivot] @ greaterSorted // merge the sorted lists

// Example usage
let myList = [5; 2; 9; 3; 1; 8; 4; 7; 6]
let sortedList = quicksort myList // calls quicksort function to sort the list
// sortedList: [1; 2; 3; 4; 5; 6; 7; 8; 9] (output)