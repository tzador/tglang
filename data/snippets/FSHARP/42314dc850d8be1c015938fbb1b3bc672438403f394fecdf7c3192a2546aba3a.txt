// This is a function that multiplies two numbers together and returns the result
let multiply x y =
    let result = x * y
    result

// This is a function that uses pattern matching to check the type of an input value
let checkType inputValue =
    match inputValue with
    | :? int -> printfn "Input value is an integer"
    | :? float -> printfn "Input value is a floating point number"
    | :? string -> printfn "Input value is a string"
    | _ -> printfn "Input value is of an unrecognized type"

// This is a recursive function that calculates the factorial of a given number
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial(n-1)

// This is a function that takes in a list of integers and returns the sum of all the elements
let sumList list =
    List.fold (+) 0 list

// This is a function that creates a tuple from two values and prints out the tuple
let createTuple value1 value2 =
    let tuple = (value1, value2)
    printfn "Created tuple with values: %A" tuple
    tuple


// Example calls to these functions
let result = multiply 5 10 // function call for multiply function

checkType 5 // function call for checkType function

let fact = factorial 5 // function call for factorial function

let list = [1; 2; 3; 4; 5] // list of integers
let total = sumList list // function call for sumList function

let tupleExample = createTuple "Hello" 5 // function call for createTuple function