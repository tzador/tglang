// Define a sorting function
let rec quickSort list =
    match list with
    // Base case: empty list
    |[] -> []
    // Base case: single element
    |[x] -> [x]
    // Recursive case: partition list into smaller and greater sublists
    |h::t ->
        let smallerSorted = quickSort (List.filter (fun el -> el < h) t)
        let greaterSorted = quickSort (List.filter (fun el -> el >= h) t)
        // Concatenate smaller, pivot, and greater sublists
        smallerSorted @ [h] @ greaterSorted

// Define a list of integers to sort
let unsortedList = [7; 2; 3; 9; 4; 1; 6; 5; 8]

// Call sorting function on unsorted list
let sortedList = quickSort unsortedList

// Print sorted list
printfn "Sorted list: %A" sortedList