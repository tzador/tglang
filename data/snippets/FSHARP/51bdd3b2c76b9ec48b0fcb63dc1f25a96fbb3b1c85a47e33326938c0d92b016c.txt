let fibonacciSequence n = // function to generate an infinite fibonacci sequence
    let rec fib n1 n2 = // recursive helper function
        seq {
            yield n1
            yield! fib n2 (n1 + n2) // yields the next value in the sequence
        }
    fib 0 1 // invokes the helper function with starting values

let fibSequence = fibonacciSequence 20 // generates the first 20 values in the fibonacci sequence

let filteredSequence = fibSequence |> Seq.filter (fun x -> x % 2 = 0) // filters the sequence for even values

let stringSequence = 
    filteredSequence 
    |> Seq.map (fun x -> $"This is the value: {x}") // maps the values in the sequence to a string with an annotation

for value in stringSequence do // iterates through the string sequence and prints the values
    printfn "%s" value