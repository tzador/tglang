(* This function calculates the greatest common divisor between two integers
   using Euclidean algorithm *)
let rec gcd x y =
    match y with
    | 0 -> x
    | _ -> gcd y (x % y)

 (* This function calculates the least common multiple between two integers
    using the definition lcm(x, y) = |x * y| / gcd(x, y) *)
let lcm x y =
    abs (x * y) / (gcd x y)

(* This function returns the largest prime factor of a given number *)
let largestPrimeFactor x =
    // Helper function to find prime factors
    let rec getPrimeFactors x factors =
        match x with
        | 1 -> factors
        | _ ->
            let rec getFactor x divisor =
                match x with
                | 0 -> 0
                | _ when x % divisor = 0 -> divisor
                | _ -> getFactor x (divisor + 1)
            let primeFactor = getFactor x 2
            let div = x / primeFactor
            getPrimeFactors div (primeFactor :: factors)
    // Get list of prime factors and return the largest one
    getPrimeFactors x [] |> List.max

// Example usage
let result = largestPrimeFactor 448
// Expected output: 7