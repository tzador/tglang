// A function that returns the sum of two numbers
let add x y =
  x + y

// A recursive function that calculates the factorial of a number
let rec factorial n =
  if n <= 1 then 1 else n * factorial (n - 1)

// A function that returns a list of squared numbers
let squares list =
  List.map (fun x -> x * x) list

// A function that returns true if a given number is prime
let isPrime number =
  let rec primeHelper div num =
    if div * div > num then
      true
    elif num % div = 0 then
      false
    else
      primeHelper (div+1) num
  primeHelper 2 number
  
// A function that combines two lists into a single list of tuples
let rec zip list1 list2 =
  match list1, list2 with
  | [], _ | _, [] -> []
  | x :: xs, y :: ys -> (x, y) :: zip xs ys

// A function that calculates the average of a list of numbers
let average list =
  (List.sum list) / (List.length list)

// A function that applies a given function to each element in a list
let rec map f list =
  match list with
  | [] -> []
  | x :: xs -> (f x) :: (map f xs)

// A function that checks if a given string is a palindrome
let isPalindrome string =
  string = List.ofSeq string |> List.rev |> List.toArray |> System.String