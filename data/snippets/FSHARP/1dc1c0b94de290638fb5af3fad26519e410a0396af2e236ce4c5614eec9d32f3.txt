(* This function takes in a list of integers and returns a list of their squares. *)
let squareList (inputList : List<int>) : List<int> =
    inputList |> List.map (fun x -> x * x)

(* This function takes in a string and returns the string in reverse order. *)
let reverseString (inputString : string) : string =
    String(inputString |> Seq.rev)

(* This function takes in two lists of integers and zips them together, returning a tuple of the combined elements. *)
let zipLists (list1 : List<int>) (list2 : List<int>) : List<int * int> =
    List.zip list1 list2

(* This function takes in a list of strings and filters out any strings that contain a specific character. *)
let filterStrings (inputList : List<string>) (character : char) : List<string> =
    inputList |> List.filter (fun x -> not (String.contains character x))

(* This function takes in a list of tuples and returns a list of their first elements. *)
let firstElements (inputList : List<int * string>) : List<int> =
    inputList |> List.map (fun (x, _) -> x)

(* This function takes in a list of strings and checks if they are all the same length. *)
let checkSameLength (inputList : List<string>) : bool =
    inputList |> List.forall (fun x -> String.length x = String.length (List.head inputList))

(* This function takes in a list of integers and finds the maximum value. *)
let findMax (inputList : List<int>) : int =
    inputList |> List.reduce max