(* This is a comment in F# *)

(* Define a function to calculate the factorial of a number *)
let rec factorial x =
    if x <= 1 then 1
    else x * factorial (x-1)

// Define a list of numbers
let numbers = [1; 2; 3; 4; 5]

// Use pattern matching to check if a number is odd or even
let classifyNumber x = 
    match x % 2 with
    | 0 -> "Even"
    | _ -> "Odd"

(* Define a record type *)
type Person = {
    name: string;
    age: int;
    occupation: string;
}

let john = { name = "John"; age = 25; occupation = "Engineer" }

// Define a function to print out information about a person
let printPersonInfo (person: Person) = 
    printfn "%s is %i years old and works as an %s" person.name person.age person.occupation

(* Use a higher-order function to filter a list *)
let evenNumbers = List.filter (fun x -> x % 2 = 0) numbers

(* Define a computation expression *)
type ComputationBuilder() =
    member this.Bind(value, func) = func(value)
    member this.Return(value) = value

let compute = ComputationBuilder()

// Use the computation expression to perform calculations
let result = compute {
    let! x = 10
    let! y = 5
    let! z = 2
    return x + y * z
}

(* Define a mutable variable *)
let mutable count = 0

// Loop through a list and increment the count for each element
for number in numbers do
    count <- count + 1