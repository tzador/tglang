let rec fibonacci n = 
    match n with 
    | 0 | 1 -> n 
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

let rec factorial n =
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n - 1)

let rec power x y =
    match y with
    | 0 -> 1
    | _ -> x * power x (y - 1)

let rec isPrime n =
    match n with
    | 1 -> false
    | 2 -> true
    | _ -> let limit = int(sqrt(double(n)))
           let rec checkPrime num = 
               match num with
               | 2 -> true
               | _ -> if n % num = 0 then false
                      else checkPrime (num - 1)
           checkPrime limit

let rec mergeSort input =
    if List.length input <= 1 then input
    else
        let middle = List.length input / 2
        let left = input |> List.take middle |> mergeSort
        let right = input |> List.skip middle |> mergeSort
        merge left right
    and merge (left : int list) (right : int list) =
        let rec mergeHelper (left : int list) (right : int list) (acc : int list) =
            match (left, right) with
            | [], [] -> List.rev acc
            | [], right ->
                List.rev (right @ acc)
            | left, [] ->
                List.rev (left @ acc)
            | leftHead :: leftTail, rightHead :: rightTail ->
                if leftHead < rightHead then
                    mergeHelper leftTail right (leftHead :: acc)
                else
                    mergeHelper left rightTail (rightHead :: acc)
        mergeHelper left right []