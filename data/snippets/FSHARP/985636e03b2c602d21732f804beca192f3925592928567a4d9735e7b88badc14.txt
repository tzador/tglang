let rec fibonacci n = 
    match n with 
        | 0 -> 0
        | 1 -> 1
        | _ -> fibonacci (n-1) + fibonacci (n-2)

let rec factorial n = 
    match n with 
        | 0 | 1 -> 1
        | _ -> n * factorial (n-1)

let rec isPrime n = 
    if n < 2 then false
    else if n = 2 then true
    else 
        let limit = int (sqrt (float n)) + 1
        let rec check i = 
            if i >= limit then true
            else if n % i = 0 then false
            else check (i+1)
        check 2

[<EntryPoint>]
let main argv = 
    argv 
    |> Array.skip 1 
    |> Array.map int 
    |> Array.iter (fun n ->
        printfn "%d is the %s"
            n
            match (isPrime n) with
            | true -> "prime"
            | false -> "not prime"
    )
    0 // return an integer exit code