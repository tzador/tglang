// Define a function 'collatz' that takes in a positive integer and returns a list of numbers
// based on the Collatz conjecture sequence.
let rec collatz (n : int) : list<int> =
    match n%2 with
    | 0 when n > 0 -> n::collatz(n/2)
    | _ when n > 0 -> n::collatz(n*3+1)
    | _ -> []
 
// Define a function 'sequence' that takes in a positive integer and returns a list of lists of numbers
// where each list is a collatz sequence starting from the given integer and ending at 1.
let rec sequence (n : int) : list<list<int>> =
    match n with
    | 1 -> [[1]]
    | n when n > 1 -> 
        let curr_sequence = collatz(n)
        let next_sequence = match curr_sequence with
                            | h::_ -> sequence(h)
                            | _ -> []
        [curr_sequence; next_sequence]
    | _ -> [[]]