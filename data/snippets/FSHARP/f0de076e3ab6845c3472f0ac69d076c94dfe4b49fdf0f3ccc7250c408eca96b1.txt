type BinaryTree<'T> =
    | Empty
    | Node of 'T * BinaryTree<'T> * BinaryTree<'T>

let rec insert value tree =
    match tree with
    // If the tree is empty, create a new node with the value
    | Empty -> Node(value, Empty, Empty)
    // If the current node value is less than the new value,
    // insert the new value in the left subtree
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue < value ->
        Node(nodeValue, insert value leftSubtree, rightSubtree)
    // If the current node value is greater than the new value,
    // insert the new value in the right subtree
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue > value ->
        Node(nodeValue, leftSubtree, insert value rightSubtree)
    // If the current node value is equal to the new value,
    // do nothing as duplicate values are not allowed
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue = value ->
        tree

let rec contains value tree =
    match tree with
    // If the tree is empty, return false
    | Empty -> false
    // If the current node value is equal to the value we are looking for,
    // return true
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue = value ->
        true
    // If the current node value is less than the value we are looking for,
    // search the value in the left subtree recursively
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue < value ->
        contains value leftSubtree
    // If the current node value is greater than the value we are looking for,
    // search the value in the right subtree recursively
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue > value ->
        contains value rightSubtree
    
let rec remove value tree =
    match tree with
    // If the tree is empty, return the empty tree
    | Empty -> Empty
    // If the current node value is equal to the value we are removing,
    // remove the current node
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue = value ->
        // If the right subtree is empty, return the left subtree
        match rightSubtree with
        | Empty -> leftSubtree
        // If the left subtree is empty, return the right subtree
        | Node(rightValue, Empty, rightRightSubtree) -> Node(rightValue, Empty, rightRightSubtree)
        // Otherwise, find the leftmost node in the right subtree and replace it with the current node
        | Node(rightValue, rightLeftSubtree, rightRightSubtree) ->
            Node(rightValue, leftSubtree, remove rightValue rightRightSubtree)
    // If the current node value is less than the value we are removing,
    // search for the value in the left subtree recursively
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue < value ->
        Node(nodeValue, remove value leftSubtree, rightSubtree)
    // If the current node value is greater than the value we are removing,
    // search for the value in the right subtree recursively
    | Node(nodeValue, leftSubtree, rightSubtree) when nodeValue > value ->
        Node(nodeValue, leftSubtree, remove value rightSubtree)