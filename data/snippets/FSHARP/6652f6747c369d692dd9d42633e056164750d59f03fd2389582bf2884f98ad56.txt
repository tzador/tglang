// defining a recursive function
let rec fibonacci n =
    if n = 0 then 0
    elif n = 1 then 1
    else fibonacci(n - 1) + fibonacci(n - 2)

// printing the first 10 numbers in the fibonacci sequence
for i in 0..9 do
    printfn "%d" (fibonacci i)

// defining a function with a functional type
let multiplyByTwo: int -> int = fun num -> num * 2

// creating a list with the first 5 fibonacci numbers
let fibNumbers = 
    [for i in 1..5 do yield fibonacci i]

// pattern matching to determine if a number is a fibonacci number
let isFibonacci n =
    match n with
    | x when x = fibNumbers -> true
    | _ -> false

// printing whether or not a number is a fibonacci number
printfn "Is 3 a fibonacci number? %b" (isFibonacci 3)
printfn "Is 5 a fibonacci number? %b" (isFibonacci 5)