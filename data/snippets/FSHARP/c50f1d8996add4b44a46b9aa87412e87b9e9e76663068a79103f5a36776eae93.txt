// A function to find all permutations of a given list
let rec permute list =
    match list with
    | [] -> seq [ [] ]
    | [ x ] -> seq [ [ x ] ]
    | _ ->
        let rec concat el seq =
            seq |> Seq.filter (fun l -> not (Seq.contains el l))
                |> Seq.map (fun l -> el :: l)
        list
        |> List.map (fun el -> concat el (permute (List.filter (fun x -> x <> el) list)))
        |> Seq.concat

// Example usage
let input = [ 1; 2; 3 ]
printfn "Permutations of %A are:\n%A" input (permute input)
// Output:
// Permutations of [ 1; 2; 3 ] are:
// seq [[1; 2; 3]; [1; 3; 2]; [2; 1; 3]; [2; 3; 1]; [3; 1; 2]; [3; 2; 1]]