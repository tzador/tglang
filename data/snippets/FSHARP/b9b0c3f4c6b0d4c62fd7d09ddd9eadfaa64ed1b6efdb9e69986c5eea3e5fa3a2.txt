// Function to calculate the factorial of a given number
let rec factorial n =
    if n = 0 then
        1
    else
        n * factorial (n-1)

// Function to print the first 10 terms of the Fibonacci sequence
let rec fibonacci n =
    if n = 0 || n = 1 then
        n
    else
        fibonacci (n-1) + fibonacci (n-2)

// Function to generate a list of prime numbers up to a given limit
let rec isPrime n =
    if n < 2 then false
    else
        let limit = int (sqrt (double n))
        let rec checkPrime i =
            if i > limit then true
            else if n % i = 0 then false
            else checkPrime (i+1)
        checkPrime 2

let rec primesList limit =
    [2] @ [3..2..limit]
    |> List.filter isPrime

// Recursive function to find the nth element in a given list
let rec nth index list =
    match index, list with
    | 0, hd::_ -> hd
    | _, _::tl -> nth (index-1) tl
    | _, _ -> failwith "Index out of range."