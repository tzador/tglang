// This is a function that takes in two integers and returns their sum
let add x y = 
    x + y 

// This is a recursive function that calculates the factorial of a number
let rec factorial n =
    if n <= 1 then
        1
    else
        n * factorial (n - 1)

// This is a higher-order function that takes in a function as a parameter
// and calls it with a given value
let applyFunc func value =
    func value

// Define a list of numbers to be used for testing
let numbers = [1; 2; 3; 4; 5]

// Define a function that uses pattern matching to determine the day of the week
let dayOfWeek num = 
    match num with
    | 1 -> "Monday"
    | 2 -> "Tuesday"
    | 3 -> "Wednesday"
    | 4 -> "Thursday"
    | 5 -> "Friday"
    | 6 -> "Saturday"
    | 7 -> "Sunday"
    | _ -> "Invalid day"

// Define a record type to represent a person
type Person =
    { Name: string
      Age: int
      Occupation: string }

// Create an instance of the Person record
let person = { Name = "John"; Age = 25; Occupation = "Engineer" }

// Define a discriminated union type to represent different shapes
type Shape =
    | Circle of float
    | Rectangle of float * float 
    | Square of float

// Create an instance of the Circle shape
let circle = Circle(5.0)

// Define a recursive function that calculates the nth Fibonacci number
let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib (n - 1) + fib (n - 2) 

// Define a function that takes in a list and returns a new list with
// all even numbers squared
let squareEvenNumbers list = 
    list |> List.filter (fun x -> x % 2 = 0) |> List.map (fun x -> x * x)

// Define a function that checks if a string is a palindrome
let isPalindrome str =
    str = str |> Seq.rev |> Seq.toArray |> System.String

// Define a function that takes in a list of names and adds "Hello" 
// before each name
let helloNames names = 
    names |> List.map (fun x -> "Hello " + x)

// Define a function that checks if a given number is prime
let isPrime num =
    num > 1 && num |> Seq.item 2 = 0 

// Define a function that multiplies each number in a list by a given factor
let multiplyList list factor =
    list |> List.map (fun x -> x * factor)

// Define a function that counts the occurences of a given element in a list
let countOccurrences list element =
    list |> List.filter (fun x -> x = element) |> List.length

// Define a function that reverses a list
let reverseList list =
    list |> List.rev

// Define a function that sorts a list in descending order
let sortDescending list =
    list |> List.sortDescending

// Define a function that converts a list of strings to uppercase
let toUpper list =
    list |> List.map (fun x -> x.ToUpper())