//Function for calculating the nth Fibonacci number
let rec fibonacci (n : int) =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

//Function for finding the length of a list
let rec length (l : 'a list) =
    match l with
    | [] -> 0
    | head::tail -> 1 + length tail

//Function for filtering a list based on a predicate
let rec filter (p : 'a -> bool) (l : 'a list) =
    match l with
    | [] -> []
    | head::tail ->
        if p head then
            head::(filter p tail)
        else
            filter p tail

//Function for finding the minimum element in a list
let rec minimum (l : int list) =
    match l with
    | [] -> failwith "List cannot be empty"
    | [x] -> x
    | head::tail ->
        let minTail = minimum tail
        if head < minTail then
            head
        else
            minTail

//Function for mapping a function to a list of elements
let rec map (f : 'a -> 'b) (l : 'a list) =
    match l with
    | [] -> []
    | head::tail ->
        (f head)::(map f tail)