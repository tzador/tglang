(*This code snippet uses the F# language and uses type inference and pattern matching*)

(*define a recursive function to calculate the factorial of a given number*)
(*the function takes in an integer as input and returns an integer as output*)
let rec factorial n =
    match n with
    | 0 -> 1 (*base case: factorial of 0 is 1*)
    | num when num > 0 -> num * factorial (num - 1) (*recursive case: multiply current number with factorial of previous number*)
    | _ -> failwith "Cannot calculate factorial of a negative number"

(*define a list of numbers*)
let numbers = [1; 5; 10; -3; 7; 2]

(*create a new list using list comprehension that contains the factorial of each number in the numbers list*)
let factorialList =
    [ for num in numbers do
        yield factorial num ] (*use yield to transform each number to its factorial*)

(*print out the factorial of each number in the numbers list*)
printfn "Factorials of numbers:"
factorialList |> List.iter (fun n -> printfn "%d" n)