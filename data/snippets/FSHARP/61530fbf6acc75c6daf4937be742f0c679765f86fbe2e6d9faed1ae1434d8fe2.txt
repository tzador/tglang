// Define a function `findProduct` that takes in two integers and returns their product

let findProduct a b =
    a * b // using the multiplication operator
    
// Define a recursive function `power` that takes in a base and exponent and calculates the power

let rec power base exponent =
    match exponent with
    | 0 -> 1 // base case where anything to the power of 0 is 1
    | 1 -> base // base case where the power is 1
    | _ -> base * power base (exponent - 1) // recursive case where the power is reduced by 1 each time and multiplied with the base

// Define a function `getSquareRoot` that takes in a number and returns its square root using the built-in `sqrt` function

let getSquareRoot num =
    sqrt num // using the built-in sqrt function
    
// Define a function `isPrime` that takes in a number and checks if it is a prime number

let isPrime num =
    let rec checkDivisor divisor =
        match divisor with
        | 1 -> true // base case where the number is only divisible by 1
        | _ -> if num % divisor = 0 then false // if the remainder is 0, it is not a prime number
               else checkDivisor (divisor - 1) // recursive case where the divisor is reduced by 1 each time
    checkDivisor (num/2) // starting the check at half of the number (it cannot be divisible by a number larger than half of itself)