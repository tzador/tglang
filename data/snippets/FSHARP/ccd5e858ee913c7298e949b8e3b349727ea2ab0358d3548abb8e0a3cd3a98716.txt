// Define types and functions for complex numbers
type Complex = { Real : float; Imag : float }

let add (c1 : Complex) (c2 : Complex) =
    { Real = c1.Real + c2.Real; Imag = c1.Imag + c2.Imag }

let subtract (c1 : Complex) (c2 : Complex) =
    { Real = c1.Real - c2.Real; Imag = c1.Imag - c2.Imag }

let multiply (c1 : Complex) (c2 : Complex) =
    { Real = (c1.Real * c2.Real) - (c1.Imag * c2.Imag); Imag = (c1.Real * c2.Imag) + (c1.Imag * c2.Real) }

// Define a function to calculate the modulus of a complex number
let modulus (c : Complex) =
    sqrt((c.Real * c.Real) + (c.Imag * c.Imag))

// Define a function to calculate the conjugate of a complex number
let conjugate (c : Complex) =
    { Real = c.Real; Imag = -c.Imag }

// Define a function to calculate the inverse of a complex number
let inverse (c : Complex) =
    let denom = (c.Real * c.Real) + (c.Imag * c.Imag)
    { Real = c.Real / denom; Imag = -c.Imag / denom }

// Define a function to calculate the division of two complex numbers
let divide (c1 : Complex) (c2 : Complex) =
    multiply c1 (inverse c2)

// Define a function to print a complex number in the format a + bi
let print (c : Complex) =
    printfn "%f + %fi" c.Real c.Imag

// Testing the functions
let c1 = { Real = 2.0; Imag = 3.0 }
let c2 = { Real = 4.0; Imag = -2.0 }

let c3 = add c1 c2
let c4 = subtract c1 c2
let c5 = multiply c1 c2
let c6 = divide c1 c2

print c3 // outputs 6.000000 + 1.000000i
print c4 // outputs -2.000000 + 5.000000i
print c5 // outputs 14.000000 + 4.000000i
print c6 // outputs -0.200000 + 0.800000i