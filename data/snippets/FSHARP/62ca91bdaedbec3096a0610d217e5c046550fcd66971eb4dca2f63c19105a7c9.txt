let rec fib n =
    match n with
    | 0 | 1 -> n
    | _ -> fib (n-1) + fib (n-2)

let rec findMax lst =
    match lst with
    | [] -> invalidArg "List cannot be empty"
    | [x] -> x
    | hd::tl -> max hd (findMax tl)

let rec insert element lst =
    match lst with
    | [] -> [element]
    | hd::tl -> if element < hd then element::lst
                else hd::(insert element tl)

let rec merge lst1 lst2 =
    match lst1, lst2 with
    | [], [] -> []
    | [], lst -> lst
    | lst, [] -> lst
    | hd1::tl1, hd2::tl2 -> if hd1 < hd2 then hd1::(merge tl1 lst2)
                            else hd2::(merge lst1 tl2)

let rec quicksort lst =
    match lst with
    | [] -> []
    | hd::tl -> let smaller = quicksort (List.filter (fun x -> x < hd) tl)
                let larger = quicksort (List.filter (fun x -> x > hd) tl)
                merge smaller (hd::larger)