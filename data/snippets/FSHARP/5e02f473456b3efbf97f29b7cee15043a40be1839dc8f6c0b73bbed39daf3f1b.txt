// Define a function that takes in a list of integers and returns the sum of the first and last elements
let sumFirstLast list =
    match list with
        | [] -> 0 // If list is empty, return 0
        | [x] -> x // If list has only one element, return that element
        | _ -> List.head list + List.last list // Otherwise, add first and last elements
// Example usage
sumFirstLast [1;2;3] // Output: 4
sumFirstLast [-1;2;5;0] // Output: -1

// Define a recursive function that computes the nth Fibonacci number
let rec fib n =
    match n with
        | 0 | 1 -> 1 // Base cases for 0 and 1, which both have a value of 1 in the Fibonacci sequence
        | _ -> fib (n - 1) + fib (n - 2) // Recursive case, sum the previous two Fibonacci numbers

// Define a list of the first 10 Fibonacci numbers
let fibList = [ for i in 0..9 -> fib i ] // Use list comprehension to generate the first 10 Fibonacci numbers

// Define an active pattern that checks if a number is prime
let isPrime =
    function
        | n when n < 2 -> false // All numbers below 2 are not considered prime
        | x ->
            let rec checkDivisor num =
                if num > (x / 2) then // Only need to check divisors up to half of the number
                    true
                elif x % num = 0 then // If any divisor cleanly divides into x, it is not prime
                    false
                else // Otherwise, check the next potential divisor
                    checkDivisor (num + 1)
            checkDivisor 2 // Start checking divisors at 2
// Example usage
match 37 with
| isPrime -> "37 is prime"
| _ -> "37 is not prime" // Output: 37 is prime