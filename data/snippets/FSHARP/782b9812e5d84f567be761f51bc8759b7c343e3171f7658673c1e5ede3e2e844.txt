let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)

let rec fib n =
    match n with
    | 0 | 1 -> n
    | _ -> fib (n-1) + fib (n-2)

let rec range start stop =
    match start with
    | _ when (start > stop) -> []
    | _ -> start :: (range (start + 1) stop)

type Tree<'T> =
    | Empty
    | Node of 'T * Tree<'T> * Tree<'T>

let rec insertTree value tree =
    match tree with
    | Empty -> Node(value, Empty, Empty)
    | Node(root, left, right) ->
        if value < root then
            Node(root, insertTree value left, right)
        else
            Node(root, left, insertTree value right)