(* This function takes in two integers and returns their greatest common divisor *)
let rec gcd (a : int) (b : int) : int =
    match b with
    | 0 -> a
    | _ -> gcd b (a % b)

// This function takes in a list of integers and returns the sum of all the elements
let rec sum (lst : int list) : int =
    match lst with
    | [] -> 0
    | head :: tail -> head + sum tail

// This function creates a new list by multiplying each element in the given list by the given integer
let rec multiplyList (lst : int list) (n : int) : int list =
    match lst with
    | [] -> []
    | head :: tail -> (head * n) :: multiplyList tail n

// Main function to test the above functions
let main : unit =
    let x = gcd 24 36
    let y = sum [1;2;3;4;5]
    let z = multiplyList [1;2;3] 4
    printfn "Greatest common divisor of 24 and 36 is %i" x
    printfn "Sum of [1;2;3;4;5] is %i" y
    printfn "New List: %A" z