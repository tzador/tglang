// Function to calculate the nth Fibonacci number using tail recursion
let rec fibonacci n =
    if n <= 1 then
        n
    else
        fibonacci (n-1) + fibonacci (n-2)
        
// Function to calculate factorial using pattern matching
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)
    
// Function to calculate the sum of an int list
let rec sumList lst =
    match lst with
    | [] -> 0
    | head::tail -> head + sumList tail
    
// Function to convert a string to uppercase
let toUppercase str =
    String.map (fun c -> if Char.isLower c then Char.ToUpper c else c) str
    
// Function to calculate the power of a number using a loop and mutable variable
let power x n =
    let mutable result = 1.0
    for i = 1 to n do
        result <- result * x
    result
    
// Function to calculate the maximum of a list of numbers using recursion
let rec maximum lst =
    match lst with
    | [] -> invalidArg "lst" "List cannot be empty"
    | [x] -> x
    | head::tail -> max head (maximum tail)