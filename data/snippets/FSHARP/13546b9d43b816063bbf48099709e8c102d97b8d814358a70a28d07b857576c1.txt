/// Summarize a list of numbers with optional start and end values.
let inline summarize ?start ?end (numbers:list<int>) =
    numbers
    |> List.filter (fun n -> n >= defaultArg start Int32.MinValue && n <= defaultArg end Int32.MaxValue)
    |> List.sum
    /// Formats the result into a sentence.
    |> fun result -> sprintf "%A numbers were summed to give a total of %A." (numbers.Length, result)

// Example usage:
let numbers = [1; 2; 3; 4; 5]
let result = summarize numbers
printfn "%s" result // Outputs: "5 numbers were summed to give a total of 15."
/// Output:
"5 numbers were summed to give a total of 15."