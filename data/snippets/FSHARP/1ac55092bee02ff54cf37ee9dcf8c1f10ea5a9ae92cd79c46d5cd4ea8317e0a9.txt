// Define a function that takes in two integers and returns their
// product, using the built-in "mult" operator
let multiply (x:int) (y:int) =
  x * y // function body, returning x times y

// Define a recursive function that computes the factorial of a number
let rec factorial (n:int) =
  match n with
  | 0 -> 1 // base case
  | _ -> n * factorial(n-1) // recursive call to factorial

// Define a function that checks if a number is prime
let isPrime (n:int) =
  let rec checkDivisors (x:int) =
    match x with
    | 2 -> true // if x is 2, it will always be a divisor of n
    | _ -> if n % x = 0 then false else checkDivisors(x-1) // check if x is a divisor of n and call function for previous number
  if n <= 1 then false // 1 and below are not prime numbers
  else checkDivisors(n-1) // start checking divisors from n-1

// Define a list of numbers to test the isPrime function
let numbers = [2; 3; 5; 11; 24; 89; 37; 43; 97]

// Use the List.map function to check if each number in the list is prime
let results = numbers |> List.map isPrime

// Print the results to the console using a for loop 
for result in results do
  printfn "%b" result