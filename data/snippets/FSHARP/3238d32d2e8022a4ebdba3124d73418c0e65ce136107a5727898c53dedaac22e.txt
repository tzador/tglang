let rec collectDuplicates lst = // function to collect duplicate elements in a list
    match lst with
    | [] -> [] // base case, return an empty list
    | hd::tl -> // recursive case
        if tl |> List.contains hd then // if the tail contains the head element
            hd::(collectDuplicates (List.filter (fun e -> e <> hd) tl)) // add the head element to the list and recursively call the function with the tail, filtered to remove any further occurrences of the head
        else collectDuplicates tl // otherwise, recursively call the function with the tail