(* This function implements quicksort algorithm for an integer list *)
let rec quicksort list =
    match list with (* pattern matching on list *)
    | [] -> list    (* if list is empty, return empty list *)
    | [a] -> [a]    (* if list has only one element, return the list *)
    | pivot :: remaining -> (* if list has more than one element, use first element as pivot *)
        let smaller = List.filter (fun x -> x <= pivot) remaining (* filter out elements smaller than pivot *)
        let larger = List.filter (fun x -> x > pivot) remaining   (* filter out elements larger than pivot *)
        let sortedSmaller = quicksort smaller    (* recursively sort smaller elements *)
        let sortedLarger = quicksort larger      (* recursively sort larger elements *)
        sortedSmaller @ [pivot] @ sortedLarger   (* concatenate the sorted lists with pivot element in between *)