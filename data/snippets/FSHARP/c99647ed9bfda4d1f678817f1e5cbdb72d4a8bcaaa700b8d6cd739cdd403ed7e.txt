// This is a function that takes in two parameters, "a" and "b", and returns their sum
let add (a : int) (b : int) : int = 
    a + b

// This is a function that uses recursion to find the factorial of a given number
let rec factorial (n : int) : int = 
    if n = 0 then
        1
    else 
        n * factorial(n - 1)

// This is a tuple that stores a student's name and their grade
let student = ("John Doe", 85)

// This is a list of numbers
let numbers = [1; 2; 3; 4; 5]

// This is a function that maps a given function "f" to every element of a list and returns a new list
let map (f : int -> int) (list : list<int>) : list<int> = 
    list |> List.map f

// This is a type representing different shapes, with a Circle and Rectangle variant
type Shape = 
    | Circle of float
    | Rectangle of float * float

// This is a function that calculates the area of a given shape
let calculateArea (shape : Shape) : float = 
    match shape with
    | Circle(r) -> 3.14 * r * r
    | Rectangle(width, height) -> width * height 

// This is a recursive function that calculates the nth Fibonacci number
let rec fibonacci (n : int) : int = 
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci(n - 1) + fibonacci(n - 2)

// This is an array of strings
let strings = [| "hello"; "world"; "!" |] 

// This is a curried function that multiplies two numbers
let multiply (a : int) (b : int) : int = 
    (fun x -> a * x) b 

// This is a function that checks if a given list of numbers is in ascending order
let rec isAscending (list : list<int>) : bool = 
    match list with
    | [] -> true
    | [x] -> true
    | x :: y :: tl -> if x > y then false else isAscending(y :: tl)