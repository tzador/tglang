let rec sum list =
    match list with
    | [] -> 0
    | head::tail -> head + sum tail

// This function takes in a list of integers and recursively sums them up
// Usage: sum [1;2;3;4] -> 10

let rec powerset set =
    match set with
    | [] -> [[]]
    | head::tail ->
        let subSets = powerset tail
        subSets @ List.map (fun subset -> head :: subset) subSets

// This function takes in a list and recursively generates its powerset
// Usage: powerset [1;2;3] -> [[1];[2];[3];[1;2];[1;3];[2;3];[1;2;3]]