// Define a function that takes in two arguments, a list of integers and a multiplier
let multiplyList (listOfIntegers: int list) (multiplier: int) =
  // Define a recursive helper function that will multiply each element in the list by the multiplier
  let rec multiplyHelper (nums: int list) (mult: int) (result: int list) =
    match nums with
      // If the list is empty, return the final list result
      | [] -> result
      // If list is not empty, multiply the head element by the multiplier and add it to the result list
      // Then recursively call the helper function on the tail of the list
      | head::tail -> multiplyHelper tail mult (result @ [head * mult])

  // Call the helper function with the initial list and multiplier, and an empty list as the initial result
  multiplyHelper listOfIntegers multiplier []

// Call the function with a list of integers and a multiplier
let result = multiplyList [1;2;3;4] 5

// Print the result to the console
printfn "%A" result