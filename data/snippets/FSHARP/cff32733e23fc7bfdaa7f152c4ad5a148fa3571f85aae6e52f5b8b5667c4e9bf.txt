let rec fibonacci n =
    if n = 0 then 0
    elif n = 1 then 1
    else fibonacci (n-1) + fibonacci (n-2)

let rec mergeSort list =
    match list with
    | [] -> []
    | x::[] -> [x]
    | list ->
        let mid = (List.length list) / 2
        let left = List.take mid list
        let right = List.skip mid list
        let leftSorted = mergeSort left
        let rightSorted = mergeSort right
        merge leftSorted rightSorted

let rec merge left right =
    match (left, right) with
    | ([], right) -> right
    | (left, []) -> left
    | (x::left', y::right') ->
        if x < y then x::(merge left' right)
        else y::(merge left right')