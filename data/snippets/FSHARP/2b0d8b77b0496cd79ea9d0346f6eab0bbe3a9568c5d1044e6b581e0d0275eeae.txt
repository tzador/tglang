type Person =
    { Name: string
      Age: int
      Address: string option } // this defines a record type with three fields: Name, Age, and Address, where Address is an optional field

let p1 = { Name = "John"; Age = 30; Address = Some("123 Main St")} // create a Person record with all fields specified

let p2 = { Name = "Jane"; Age = 25 } // create a Person record with Address field missing (set to None by default)

let getPersonName (person: Person) =
    match person.Name with // pattern matching on the Name field
    | name when name.StartsWith("J") -> "Name starts with J" // if name starts with J, return this string
    | _ -> person.Name // if not, return the name as is

let getPersonAge (person: Person) =
    match person.Age with // pattern matching on the Age field
    | age when age < 18 -> "Person is a minor" // if age is less than 18, return this string
    | _ -> string person.Age // otherwise, convert age to string and return it

printfn "Name: %s, Age: %s" (getPersonName p1) (getPersonAge p1) // output: Name: Name starts with J, Age: 30
printfn "Name: %s, Age: %s" (getPersonName p2) (getPersonAge p2) // output: Name: Jane, Age: Person is a minor