let rec fibonacci n = 
    if n <= 1 then 1
    else fibonacci(n-1) + fibonacci(n-2)
    /// Function to calculate the nth Fibonacci number
    /// PARAMS: n (int) - the number in the Fibonacci sequence to calculate
    /// RETURNS: Fibonacci number at index n

let rec power base exp = 
    if exp < 0 then failwith "Invalid input: exponent must be non-negative"
    elif exp = 0 then 1
    elif exp = 1 then base
    else base * power base (exp-1)
    /// Function to calculate base^exp (base to the power of exp)
    /// PARAMS: base (int) - the base number, exp (int) - the exponent
    /// RETURNS: base^exp

let rec factorial n = 
    if n < 0 then failwith "Invalid input: factorial only defined for non-negative numbers"
    elif n = 0 then 1
    else n * factorial (n-1)
    /// Function to calculate the factorial of a number
    /// PARAMS: n (int) - the number to calculate factorial for
    /// RETURNS: factorial of n

let rec binarySearch array target = 
    let mid = array.Length / 2
    match array.Length with 
    | 0 -> None
    | _ when array.[mid] = target -> Some mid
    | _ when array.[mid] < target -> 
        binarySearch (Array.sub array (mid+1) (array.Length-mid-1)) target 
        |> Option.map (fun index -> index + mid + 1)
    | _ ->
        binarySearch (Array.sub array 0 mid) target
        |> Option.map (fun index -> index)
    /// Function to perform a binary search on a sorted array
    /// PARAMS: array (int array) - the sorted array to search, target (int) - the value to search for
    /// RETURNS: index of the target value in the array, or None if not found

let rec mergeSort list = 
    let rec merge left right acc = 
        match left, right with
        | [], right -> acc @ right
        | left, [] -> acc @ left
        | l :: ls, r :: rs when l < r ->
            merge ls right (acc @ [l])
        | l :: ls, r :: rs ->
            merge left rs (acc @ [r])
    match list with 
    | [] -> []
    | [x] -> [x]
    | l -> 
        let mid = l.Length / 2
        let left = Array.sub l 0 mid
        let right = Array.sub l mid (l.Length-mid)
        merge (mergeSort left) (mergeSort right) []
    /// Function to perform a merge sort on a list
    /// PARAMS: list (int list) - the list to sort
    /// RETURNS: a sorted list

let rec quickSort list = 
    match list with 
    | [] -> []
    | [x] -> [x]
    | pivot :: xs -> 
        let smaller, larger = List.partition (fun x -> x <= pivot) xs
        quickSort smaller @ [pivot] @ quickSort larger
    /// Function to perform a quick sort on a list
    /// PARAMS: list (int list) - the list to sort
    /// RETURNS: a sorted list