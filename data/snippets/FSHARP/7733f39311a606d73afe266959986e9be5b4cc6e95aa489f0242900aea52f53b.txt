// This code snippet generates a list of all prime numbers less than or equal to a given number.
let primesTo n = 
    let start = System.DateTime.Now
    let mutable foundPrimes = [2]
    let mutable currentNumber = 3
    let mutable isPrime = true
    let mutable count = 1
    while currentNumber <= n do
        for dividor in foundPrimes do
            if currentNumber % dividor = 0 then
                isPrime <- false
        if isPrime then
            foundPrimes <- foundPrimes @ [currentNumber]
            count <- count + 1
        currentNumber <- currentNumber + 2
        isPrime <- true
    let end = System.DateTime.Now
    let timeTaken = end - start
    printfn "Found %i primes in %O" count timeTaken
    foundPrimes
 
 println (primesTo 1000000)

// Output: 
/*
// This code snippet generates a list of all prime numbers less than or equal to a given number.
// Input: n - the maximum number to generate primes up to.
// Output: An F# list containing all prime numbers less than or equal to n.
// Example: println (primesTo 20) -> [2;3;5;7;11;13;17;19] 
*/