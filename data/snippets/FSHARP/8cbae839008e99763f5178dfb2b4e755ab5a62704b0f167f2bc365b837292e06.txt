(* This is a recursive function that calculates the factorial of a number *)
let rec factorial n =
    match n with
    | 0 -> 1 // base case: factorial of 0 is 1
    | x -> x * factorial(x - 1) // recursive case: n * factorial(n-1)

(* This function calculates the fibonacci sequence up to a given number *)
let rec fibonacci n =
    match n with
    | 0 -> [] // base case: fibonacci sequence of 0 is empty list
    | 1 -> [0] // base case: fibonacci sequence of 1 is [0]
    | 2 -> [0; 1] // base case: fibonacci sequence of 2 is [0; 1]
    | x -> let prev = fibonacci(x - 1)
           let last = List.nth prev (x-2)
           let secondLast = List.hd prev
           prev @ [last + secondLast] // recursive case: append new fibonacci number to previous sequence

(* This function checks if a given number is prime or not *)
let isPrime n =
    let rec isDivisor x =
        match x with
        | 1 -> false // base case: 1 is not a divisor
        | x -> if n % x = 0 then true else isDivisor(x-1) // recursive case: check if x is a divisor of n
    if n > 1 then not(isDivisor(n-1)) // n is prime if it has no divisors other than 1 and itself

// Example usage of the above functions
let num = 10
let fact = factorial num
let fib = fibonacci num
let prime = isPrime num

printfn "Factorial of %d is %d" num fact
printfn "Fibonacci sequence up to %d: %A" num fib
printfn "Is %d a prime number? %b" num prime