let rec factorial n =
    if n = 0 then 1
    else n * factorial (n - 1)

let rec power x n =
    if n = 0 then 1.0
    else if n < 0 then failwith "Invalid input: power cannot be negative"
    else
        let partial = power x (n / 2)
        let result = partial * partial
        if n % 2 = 1 then result * x
        else result

let rec fibonacci n =
    if n = 0 then 0
    else if n = 1 then 1
    else fibonacci (n - 1) + fibonacci (n - 2)

let isPrime n =
    let rec isDivisibleBy divisor num =
        if divisor = 1 then false
        else if num % divisor = 0 then true
        else isDivisibleBy (divisor - 1) num
    if n > 1 then not (isDivisibleBy (n - 1) n)
    else false

let rec quicksort list =
    match list with
    | [] -> []
    | [x] -> [x]
    | pivot :: rest ->
        let smaller, larger = List.partition ((<=) pivot) rest
        quicksort smaller @ [pivot] @ quicksort larger