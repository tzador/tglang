let rec factorial n =
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n - 1)

let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> (fibonacci (n - 1)) + (fibonacci (n - 2))

let rec isPrime n =
    let rec isPrimeUtil n i =
        match i with
        | 1 -> true
        | _ ->
            if ((n % i) = 0) then false
            else isPrimeUtil n (i - 1)
    isPrimeUtil n (n / 2)

let primesUnder n =
    List.filter isPrime [2..n]