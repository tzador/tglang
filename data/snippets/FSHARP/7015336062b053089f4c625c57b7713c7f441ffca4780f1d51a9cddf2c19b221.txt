// This code snippet shows how to implement a binary search tree in F#.

// Define the binary tree type, which can hold either a node or an empty tree.
type BinaryTree<'T> =
    | Node of 'T * BinaryTree<'T> * BinaryTree<'T> 
    | Empty

// Define a function to insert a new value into the tree.
let rec insert (value: 'T) (tree: BinaryTree<'T>) =
    match tree with
    | Node (data, left, right) when value < data ->
        Node (data, insert value left, right)
    | Node (data, left, right) when value > data ->
        Node (data, left, insert value right)
    | Empty ->
        Node (value, Empty, Empty)
    | _ ->
        tree // value already exists in tree, do not insert again

// Define a function to check if a value is present in the tree.
let rec contains (value: 'T) (tree: BinaryTree<'T>) =
    match tree with
    | Node (data, left, right) when value < data ->
        contains value left
    | Node (data, left, right) when value > data ->
        contains value right
    | Node (data, left, right) ->
        true // value found in tree
    | Empty ->
        false // value not found in tree

// Example usage:
let tree = Node (5, Node (3, Empty, Empty), Node (8, Empty, Empty))
let treeWithNewValue = insert 10 tree // tree now contains 10

// Check if 10 exists in the tree
if contains 10 treeWithNewValue then
    printfn "The value 10 exists in the tree"
else
    printfn "The value 10 does not exist in the tree"