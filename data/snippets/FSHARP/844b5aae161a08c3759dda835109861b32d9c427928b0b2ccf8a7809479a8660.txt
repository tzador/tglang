/// This function checks if a given number is prime
let rec isPrime n =
    let mutable isPrime = true
    for x in 2..n/2 do
        if n % x = 0 then
            isPrime <- false
    isPrime

/// This function generates a list of prime numbers up to a given limit
let generatePrimes limit =
    let mutable primes : list<int> = []
    for i in 2..limit do
        if isPrime i then
            primes <- primes @ [i]
    primes

/// This function calculates the nth Fibonacci number using recursion
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

/// This function calculates the factorial of a given number using tail recursion
let rec factorial n acc =
    match n with
    | 0 -> acc
    | _ -> factorial (n-1) (acc*n)

/// Main function that calls other functions and prints the results
[<EntryPoint>]
let main argv =
    // Generate list of primes up to 100 and print it
    let primes = generatePrimes 100
    printfn "List of prime numbers up to 100: %A" primes

    // Calculate the 10th Fibonacci number and print it
    let fib = fibonacci 10
    printfn "The 10th Fibonacci number is: %d" fib

    // Calculate the factorial of 5 and print it
    let fact = factorial 5 1
    printfn "The factorial of 5 is: %d" fact

    0 // return an integer to indicate successful execution