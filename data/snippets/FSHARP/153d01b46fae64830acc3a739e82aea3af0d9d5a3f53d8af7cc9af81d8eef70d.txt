// This code snippet shows an implementation of the Sieve of Eratosthenes algorithm in F#.

// Function to generate a sequence of numbers from 2 up to a given limit
let rec range from to' =
    seq { yield from
        if from < to' then
            yield! range (from + 1) to'
        }

// Function to filter out all multiples of a given number from a sequence
let rec filterMultiple n (numbers: seq<int>) =
    match Seq.isEmpty numbers with
    | true -> []
    | false ->
        let head = Seq.head numbers
        match head % n with
        | 0 -> filterMultiple n (Seq.tail numbers)
        | _ -> head :: filterMultiple n (Seq.tail numbers)

// Function to generate a prime number sequence using the Sieve of Eratosthenes algorithm
let rec primes numbers =
    match Seq.isEmpty numbers with
    | true -> []
    | false ->
        let head = Seq.head numbers
        head :: primes (filterMultiple head (Seq.tail numbers))

// Call the functions and print the prime numbers up to a limit of 100
let limit = 100
let numbers = range 2 limit
let primeNumbers = primes numbers
printfn "Prime numbers up to %d:" limit
primeNumbers |> Seq.iter (fun x -> printf "%d " x)