let rec fib n = 
    if n < 2 then n 
    else fib (n-1)+fib (n-2) // defines a recursive function to calculate Fibonacci numbers

let rec primeFactors n = // defines a recursive function to calculate prime factors of a number
    seq { 2..2+n/2 } 
    |> Seq.filter (fun x -> n%x=0) 
    |> Seq.take 1 
    |> Seq.append (primeFactors(n / n%x))

let rec printFactors n = // defines a recursive function to print prime factors of a number
    for factor in primeFactors n do 
        printfn "%d" factor 
    if n > 1 then 
        printFactors (n / n%primeFactors(n) |> List.head)
// the above function recursively prints prime factors of a number by first dividing it by the first prime factor and continuing the process until the number becomes 1

let rec map f l = // defines a recursive function to map a function to a list
    match l with 
    | [] -> [] // base case, returns an empty list if list is empty
    | h::t -> (f h)::(map f t) // recursively applies the function to the head of the list and adds it to the mapped list

let rec zip l1 l2 = // defines a recursive function to zip two lists together 
    match l1,l2 with 
    | [],_ -> [] // base case, returns an empty list if one of the lists is empty
    | _,[] -> [] // base case, returns an empty list if one of the lists is empty
    | h1::t1,h2::t2 -> (h1,h2)::(zip t1 t2) // recursively adds a tuple of the heads of the lists to the zipped list and continues with the tails of the lists

printfn "Fibonacci numbers:" 
for i in 0 .. 10 do // prints the first 10 Fibonacci numbers 
    printfn "%d" (fib i) 

let list1 = [1;2;3;4;5] // defines a list
let list2 = [6;7;8;9;10] // defines another list

printfn "Mapped list: %A" (map (fun x -> x*x) list1) // applies a function to a list and prints the mapped list
printfn "Zipped list: %A" (zip list1 list2) // zips the two lists and prints the zipped list