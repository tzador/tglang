let rec fib n = 
    match n with
    | 0 | 1 -> 1
    | _ -> fib(n-1) + fib(n-2) (*recursive function to generate fibonacci series*)

let rec evenOrOdd n =
    match n with
    | 0 -> "Even"
    | 1 -> "Odd"
    | _ -> if n > 0 then evenOrOdd(n-2) else evenOrOdd(n+2) (*recursive function to check if a number is even or odd*)

let isPalindrome (s:string) =
    let rec loop i =
        i >= (s.Length / 2) || (s.[i] = s.[s.Length - i - 1] && loop(i+1)) //recursive function to check if a string is a palindrome
    loop 0

let rec power (x:int) (n:int) =
    if n = 0 then 1
    else if n % 2 = 0 then power (x*x) (n/2)
    else x * power(x) (n-1) //recursive function to calculate x to the power of n

let rec merge (l1:'T list) (l2:'T list) =
    match l1, l2 with
    | [], [] -> []
    | [], _ -> l2
    | _, [] -> l1
    | (h1::t1), (h2::t2) -> 
        if h1 < h2 then h1::(merge t1 l2)
        else h2::(merge l1 t2) //recursive function to merge two sorted lists