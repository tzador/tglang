(** Function to find the smallest positive integer not present in a given array **)

let findMissing (arr: int[]): int =
    let n = arr.Length
    for i = 0 to n - 1 do
        if(arr.[i] <= 0 || arr.[i] > n) then //checking if element is out of range
            ()
    let checkedArray = Array.sort arr //sorting array to easily check for consecutive numbers
    let mutable smallest = 1 //initialize smallest number to check
    for i = 0 to n - 1 do
        if(checkedArray.[i] = smallest) then //if current element matches smallest, increment smallest
            smallest <- smallest + 1
    smallest //return smallest number

(** Testing the function with sample arrays **)

let result1 = findMissing [|7;8;9;11;12|] //should return 1
let result2 = findMissing [|3;5;4;1;2|] //should return 6

(** Function to generate a random array of n elements with at most k consecutive integers **)

let generateRandomArray (n: int) (k: int): int[] =
    let arr = Array.zeroCreate<int> n
    let mutable i = 0
    let mutable j = 0
    while i < n do
        if(i mod k = 0) then //if index is divisible by k, add consecutive numbers
            j <- j + k
        arr.[i] <- j //add j to array
        i <- i + 1
        j <- j + 1
    arr |> Array.permute //shuffle the array

(** Testing the function with sample values **)

let result3 = generateRandomArray 10 3 //may return [1;2;4;5;6;7;9;10;11;8]
let result4 = generateRandomArray 5 1 //may return [1;2;1;2;1]