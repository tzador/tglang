let rec fibSeq n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibSeq (n - 1) + fibSeq (n - 2)

let rec powerFunc x n =
    match n with
    | 0 -> 1
    | _ -> x * powerFunc x (n - 1)

let rec sumList l =
    match l with
    | [] -> 0
    | x::xs -> x + sumList xs

let rec reverseList l =
    match l with
    | [] -> []
    | x::xs -> reverseList xs @ [x]

let rec quicksort l =
    match l with
    | [] -> []
    | x::xs ->
        let smaller = xs |> List.filter (fun a -> a <= x)
        let larger = xs |> List.filter (fun a -> a > x)
        quicksort smaller @ [x] @ quicksort larger