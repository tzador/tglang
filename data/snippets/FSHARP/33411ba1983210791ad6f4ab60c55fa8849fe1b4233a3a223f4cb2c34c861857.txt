// Define a function that takes in a list of integers and returns the sum of all the even numbers in the list
let sumEvenNumbers list = 
    List.fold(fun acc x -> if x % 2 = 0 then acc + x else acc) 0 list

// Define a recursive function that calculates the factorial of a given number
let rec factorial x = 
    if x = 0 then 1 else x * factorial (x - 1)

// Define a record type for a person with a name, age, and favorite programming language
type Person = { Name : string; Age : int; FavoriteProgrammingLanguage : string }

// Create an instance of the Person record type
let person1 = { Name = "John"; Age = 25; FavoriteProgrammingLanguage = "F#" }

// Define a list of tuples containing names and their corresponding ages
let peopleAges = [("Sarah", 30); ("Bob", 45); ("Alice", 20)]

// Use pattern matching to retrieve the name of the person whose age is 20 from the list of tuples
let findNameByAge age = 
    match peopleAges with
    | [] -> failwith "List is empty"
    | (name, age')::_ when age' = age -> name
    | (_, age')::tail -> findNameByAge age tail

// Define a discriminated union representing different shapes
type Shape =
    | Rectangle of float * float
    | Circle of float

// Calculate the area of a given shape
let calculateArea shape = 
    match shape with
    | Rectangle (length, width) -> length * width
    | Circle radius -> 3.14 * radius * radius

// Create a recursive function that outputs the Fibonacci sequence up to a given number
let rec fibonacci x =
    match x with
    | 0 -> []
    | 1 -> [0]
    | 2 -> [0; 1]
    | n -> let fibSeq = fibonacci (n-1)
           let nextNum = List.nth fibSeq (n-2) + List.nth fibSeq (n-3)
           fibSeq @ [nextNum]

// Define a function that reverses a given list
let reverseList list = List.rev list

// Print the result of the function calls on the given inputs
printfn "Sum of even numbers in list [1; 2; 3; 4; 5] = %d" (sumEvenNumbers [1; 2; 3; 4; 5])
printfn "Factorial of 5 = %d" (factorial 5)
printfn "%s's favorite programming language is %s" person1.Name person1.FavoriteProgrammingLanguage
printfn "Name of person with age 20 is %s" (findNameByAge 20)
printfn "Area of rectangle with length 5 and width 10 = %f" (calculateArea (Rectangle (5.0, 10.0)))
printfn "Area of circle with radius 3 = %f" (calculateArea (Circle 3.0))
printfn "Fibonacci sequence up to 8: %A" (fibonacci 8)
printfn "Reversed list [1; 2; 3; 4; 5] = %A" (reverseList [1; 2; 3; 4; 5])