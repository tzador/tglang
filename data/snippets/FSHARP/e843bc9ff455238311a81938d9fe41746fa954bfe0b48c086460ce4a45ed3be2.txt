let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | _ -> fibonacci (n-1) + fibonacci (n-2)

let rec factorial n =
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n-1)

let rec power a b =
    match b with
    | 0 -> 1
    | 1 -> a
    | _ -> a * power a (b-1)

let rec isPrime n =
    match n with
    | 1 | 2 -> true
    | _ ->
        let rec check x =
            match x with
            | 1 -> true
            | _ -> n % x <> 0 && check (x-1)
        check (n-1)

/// The `FSharp.Data` module provides types for working with JSON data.
type Person = {
    Name : string
    Age : int
    IsEmployed : bool
}

let personJson = """{"Name":"John Doe","Age":32,"IsEmployed":true}"""

FSharp.Data.JSON.parse personJson  // |> fsi.AddOnTop ("// |> ")  // The `parse` function returns a record of type Person
|> printfn "Name: %s, Age: %d, IsEmployed: %b" personJson.Name personJson.Age personJson.IsEmployed // Use %s to format string, %d for integers, and %b for booleans