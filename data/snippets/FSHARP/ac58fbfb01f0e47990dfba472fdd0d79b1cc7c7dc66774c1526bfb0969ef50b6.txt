let rec fibonacci n =
    match n with
    | 0 -> 0                    // pattern matching for n equal to 0
    | 1 -> 1                    // pattern matching for n equal to 1
    | _ -> fizzbuzz (n-1) + fizzbuzz (n-2) // default case, recursively calls fibonacci

let rec fizzbuzz num =
    match (fizz num, buzz num) with
    | (true, true) -> "FizzBuzz"    // pattern matching for both fizz and buzz are true
    | (true, false) -> "Fizz"       // pattern matching for only fizz is true
    | (false, true) -> "Buzz"       // pattern matching for only buzz is true
    | (false, false) -> string num  // default case, converts num to string

and fizz n = n % 3 = 0   // function to check if n is divisible by 3 (fizz)
and buzz n = n % 5 = 0   // function to check if n is divisible by 5 (buzz)

[1..100]
|> List.map (fun x -> fizzbuzz x) // creates a list of string outputs from fizzbuzz function
|> List.iter (printf "%s\n") // prints each string on a new line