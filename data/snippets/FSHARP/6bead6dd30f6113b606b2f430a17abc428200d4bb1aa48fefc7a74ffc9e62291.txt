let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

let rec pow base exponent =
    match exponent with
    | 0 -> 1
    | 1 -> base
    | _ -> base * pow base (exponent - 1)

let rec gcd a b =
    match b with
    | 0 -> a
    | _ -> gcd b (a % b)

let rec lstMap fn xs =
    match xs with
    | [] -> []
    | x::xs' -> fn x :: (lstMap fn xs')