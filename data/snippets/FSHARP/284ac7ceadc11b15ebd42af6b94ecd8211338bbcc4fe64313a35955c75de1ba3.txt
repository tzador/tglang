let rec fib n = // defines a recursive function for calculating the Fibonacci sequence
    match n with // pattern matching based on the value of n
    | 0 -> 0 // if n is 0, return 0
    | 1 -> 1 // if n is 1, return 1
    | n -> fib(n-1) + fib(n-2) // if n is any other value, call the fib function recursively with n-1 and n-2 and add the results
    
let fibList n = // defines a function for creating a list of the first n Fibonacci numbers
    let rec createList i acc = // inner recursive function with an accumulator for building the list
        match i with
        | 0 -> acc // once i reaches 0, return the accumulator which contains the list
        | _ -> createList (i-1) ((fib i)::acc) // recursively calls itself with i-1 and adds the fib value of i to the accumulator
    createList n [] // calls the inner function with n as the starting value and an empty list as the accumulator

// example usage:
// val fibList : int -> int list
// fibList 5;;
// returns [0; 1; 1; 2; 3]