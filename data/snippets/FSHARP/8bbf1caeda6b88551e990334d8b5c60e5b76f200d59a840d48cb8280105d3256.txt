(* Define a function that takes in a list of numbers and returns the sum of all even numbers, using pattern matching and recursion *)

let rec sumEvenNumbers xs =
    match xs with
    | [] -> 0 // base case: when the list is empty, return 0 as the sum
    | [x] -> if x % 2 = 0 then x else 0 // if the list contains only one element, check if it is even and return that number or 0
    | x::xs' ->
        if x % 2 = 0 then x + sumEvenNumbers xs' // if the first element is even, add it to the sum of the rest of the list
        else sumEvenNumbers xs' // if the first element is odd, skip it and continue with the rest of the list

(* Example usage *)
let numbers = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
let sum = sumEvenNumbers numbers // sum will be 30, since 2 + 4 + 6 + 8 + 10 = 30