// Define a function that finds the maximum element in a list
let rec findMax list =
    match list with
    | [] -> raise (ArgumentException("List must contain at least one element"))
    | [x] -> x
    | head::tail -> max head (findMax tail)

// Define a nested recursive function that calculates the nth Fibonacci number
let rec fibonacci n =
    let rec fibHelper currentNum prev prevPrev =
        if currentNum = n then prev + prevPrev
        elif currentNum = 0 then fibHelper (currentNum + 1) 0 1
        elif currentNum = 1 then fibHelper (currentNum + 1) 1 0
        else fibHelper (currentNum + 1) (prev + prevPrev) prev
    fibHelper 0 0 0

// Define a record type representing a person with a name, age, and list of favorite foods
type Person = {Name: string; Age: int; FavoriteFoods: string list}

// Define an active pattern that checks if a list starts with the same element as the last element
let (|StartAndEnd|_|) (list: 'a list) =
    match list with
    | x::xs -> if x = List.last list then Some (list, xs) else None
    | _ -> None

// Define a computation expression for generating all possible pairs from two lists
type PairGenerator() =
    member this.Bind(seq, f) = seq |> Seq.collect f
    member this.Return(x) = seq { yield x }
    member this.Zero() = seq {}

let pair = PairGenerator()
let pairs = pair {
    for x in [1; 2; 3] do
        for y in [4; 5; 6] do
            yield (x, y)
}

// Define a monad for validating that a number is positive
type PositiveNumber = PositiveNumber of float // Wrap the value in a custom type

module PositiveNumber =
    // Define a bind function that checks if the input is positive and returns a custom type
    let bind (x: float) =
        if x > 0.0 then PositiveNumber x
        else failwith "Number must be positive"

    // Define a return function that simply wraps the value in the custom type
    let return (x: float) = PositiveNumber x

    // Define the >>= operator using the bind function
    let (>>=) (PositiveNumber x) f = f x

    // Define the >> operator using the >>= operator
    let (>>) (PositiveNumber _) a = a

// Use the monad to validate and multiply two positive numbers
let result =
    PositiveNumber(3.5)
    >>= fun x -> PositiveNumber.bind 4.0
    >>= fun y -> PositiveNumber.return (x * y)