// Define an algebraic data type for representing mathematical expressions
type MathExpr =
    | Constant of int
    | Variable of string
    | Add of MathExpr * MathExpr
    | Subtract of MathExpr * MathExpr
    | Multiply of MathExpr * MathExpr
    | Divide of MathExpr * MathExpr

// Define a function to evaluate the expression
let rec evaluate expr =
    match expr with
    | Constant x -> x
    | Variable _ -> failwith "Cannot evaluate expression with variable"
    | Add (x, y) -> evaluate x + evaluate y
    | Subtract (x, y) -> evaluate x - evaluate y
    | Multiply (x, y) -> evaluate x * evaluate y
    | Divide (x, y) -> evaluate x / evaluate y
    
// Define a function to simplify the expression
let rec simplify expr =
    match expr with
    | Constant x -> Constant x
    | Variable _ -> expr
    | Add (x, y) ->
        let simplifiedX = simplify x
        let simplifiedY = simplify y
        match simplifiedX with
        | Constant 0 -> simplifiedY
        | _ ->
            match simplifiedY with
            | Constant 0 -> simplifiedX
            | _ -> Add (simplifiedX, simplifiedY)
    | Subtract (x, y) ->
        let simplifiedX = simplify x
        let simplifiedY = simplify y
        match simplifiedX with
        | Constant 0 -> Negate simplifiedY
        | _ ->
            match simplifiedY with
            | Constant 0 -> simplifiedX
            | _ -> Subtract (simplifiedX, simplifiedY)
    | Multiply (x, y) ->
        let simplifiedX = simplify x
        let simplifiedY = simplify y
        match simplifiedX, simplifiedY with
        | Constant 0, _ -> Constant 0
        | _, Constant 0 -> Constant 0
        | Constant 1, _ -> simplifiedY
        | _, Constant 1 -> simplifiedX
        | _ -> Multiply (simplifiedX, simplifiedY)
    | Divide (x, y) ->
        let simplifiedX = simplify x
        let simplifiedY = simplify y
        match simplifiedX, simplifiedY with
        | Constant 0, _ -> Constant 0
        | _, Constant 0 -> failwith "Cannot divide by zero"
        | _, Constant 1 -> simplifiedX
        | _ -> Divide (simplifiedX, simplifiedY)