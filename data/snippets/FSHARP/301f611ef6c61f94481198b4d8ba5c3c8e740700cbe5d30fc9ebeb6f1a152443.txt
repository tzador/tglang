// Function to calculate the nth term of the Fibonacci series using recursion
let rec fibonacci (n:int) = 
    match n with 
        | 0 -> 0
        | 1 -> 1
        | _ -> fibonacci (n-1) + fibonacci (n-2)

// Function to calculate the factorial of a number using recursion
let rec factorial (n:int) = 
    match n with 
        | 0 | 1 -> 1 // Base case
        | _ -> n * factorial (n-1)

// Function to calculate the sum of all numbers in a list using pattern matching
let rec sumOfList (list:int list) = 
    match list with 
        | [] -> 0 // Base case
        | head::tail -> head + sumOfList tail // Recursive case

// Sample usage of the above functions
// Calculate the 10th term of the Fibonacci series
printfn "The 10th term of the Fibonacci series is %i" (fibonacci 10)

// Calculate the factorial of 5
printfn "The factorial of 5 is %i" (factorial 5)

// Calculate the sum of all numbers in a list
let myList = [1;2;3;4;5]
printfn "The sum of all numbers in the list is %i" (sumOfList myList)