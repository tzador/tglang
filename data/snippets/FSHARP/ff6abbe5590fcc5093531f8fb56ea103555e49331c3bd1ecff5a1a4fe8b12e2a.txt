let rec factorial n =          // defining a recursive function called 'factorial' that takes in a parameter 'n'
    match n with               // matching the parameter to different cases
    | 0 -> 1                  // if n is equal to 0, return 1 (base case)
    | _ -> n * factorial(n-1) // if n is not 0, multiply n with the recursive call of factorial(n-1)

factorial 5                   // calling the function with 5 as the argument
// Output: 120, as 5! equals 5 * 4 * 3 * 2 * 1 = 120