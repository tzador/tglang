let rec fib n = 
    match n with
    | 0 | 1 -> 1
    | n -> fib (n-1) + fib (n-2)

let rec isPrime n = 
    match n with
    | 1 -> false
    | n -> 
        let rec checkPrime num div = 
            match div with
            | div when div > (num/2) -> true
            | div -> 
                if num % div = 0 then false
                else checkPrime num (div+1)
        
        checkPrime n 2

let rec factorial n = 
    match n with
    | 0 | 1 -> 1
    | n -> n * factorial (n-1)

let rec quicksort list = 
    match list with
    | [] -> []
    | head :: tail -> 
        let smaller = List.filter ((>) head) tail
        let larger = List.filter ((<) head) tail
        (quicksort smaller) @ [head] @ (quicksort larger)