(* This is a function that returns the nth Fibonacci number *)
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

(* This is a function that checks if a given integer is a prime number *)
let isPrime n =
    let rec checkPrime divisor =
        match divisor with
        | 2 -> true
        | _ -> if n % divisor = 0 then false else checkPrime (divisor-1)
    checkPrime (n-1)

(* This is a function that generates a list of n prime numbers *)
let generatePrimes n =
    let rec findPrimes i count primes =
        match count with
        | count when count = n -> primes
        | _ -> if isPrime i then findPrimes (i+1) (count+1) (primes @ [i]) else findPrimes (i+1) count primes
    findPrimes 2 0 []