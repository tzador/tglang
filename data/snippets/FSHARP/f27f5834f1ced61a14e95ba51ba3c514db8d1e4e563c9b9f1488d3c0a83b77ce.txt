//create a function that generates a list of prime numbers up to the given limit
let generatePrimes limit =
    let rec isPrime num divisor = //recursive helper function to check if a number is prime
        if divisor >= num then //base case, number is prime since all possible divisors have been checked
            true
        else if num % divisor = 0 then //if the number is divisible by any number other than itself and 1, it is not prime
            false
        else //recursive step, check next possible divisor
            isPrime num (divisor + 1)
    
    let rec addPrimeToList num primes = //recursive helper function to add prime numbers to list
        if num > limit then //base case, reached limit
            primes
        else if isPrime num 2 then //check if number is prime
            addPrimeToList (num + 1) (num :: primes) //add number to list and check next number
        else //if number is not prime, check next number
            addPrimeToList (num + 1) primes
    
    addPrimeToList 2 [] //start with 2, the first prime number, and an empty list
    
//generate a list of prime numbers up to 100 and print it
let primes = generatePrimes 100
printfn "%A" primes //output: [2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43; 47; 53; 59; 61; 67; 71; 73; 79; 83; 89; 97]