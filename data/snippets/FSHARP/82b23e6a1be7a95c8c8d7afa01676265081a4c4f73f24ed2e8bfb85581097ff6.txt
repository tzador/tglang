(* This is a function that takes in two lists, applies a custom function on each element, and returns a new list with the results *)
let customMap (f: 'a -> 'b) (list1: 'a list) (list2: 'a list) : 'b list =
    let rec mapHelper (result: 'b list) (l1: 'a list) (l2: 'a list) : 'b list =
        match l1, l2 with
        | [], _ | _, [] -> List.rev result (* Returns the result list after reversing it *)
        | x :: xs, y :: ys -> mapHelper ((f x y) :: result) xs ys (* Applies the custom function on the head of each list and adds it to the result list *)
    mapHelper [] list1 list2 (* Calls the recursive helper function with an empty result list *)

// Example of how to use the function
let add (x: int) (y: int) : int = x + y (* Custom function that adds two integers *)
let list1 = [1; 2; 3; 4; 5] (* First list with integer elements *)
let list2 = [5; 6; 7; 8; 9] (* Second list with integer elements *)

let result = customMap add list1 list2 (* Calls the customMap function with the add function and the two lists *)
// Result should be [6; 8; 10; 12; 14]