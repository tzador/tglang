let rec fibonacci n = //recursive function to calculate fibonacci sequence
    match n with //pattern matching
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2) //recursively call fibonacci function and add the last two terms
 
let fibList = [for i in 0..10 -> fibonacci i] //list comprehension to generate first 10 terms of fibonacci sequence
 
let rec factorial n = //recursive function to calculate factorial
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1) //recursively call factorial function
 
let factList = [for i in 1..5 -> factorial i] //list comprehension to generate factorial of numbers from 1 to 5
 
let mergedList = List.zip fibList factList //merge the two lists into one using 'List.zip' function
 
let sortedList = List.sort (fun x y -> x-y) mergedList //sort the merged list in ascending order using 'List.sort' function with custom comparison function
 
printfn "Fibonacci List: %A" fibList //print the fibonacci list
printfn "Factorial List: %A" factList //print the factorial list
printfn "Merged List: %A" mergedList //print the merged list
printfn "Sorted List: %A" sortedList //print the sorted list