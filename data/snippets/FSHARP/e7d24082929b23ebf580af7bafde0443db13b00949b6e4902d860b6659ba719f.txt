// create a recursive function to compute the factorial of a given number
let rec factorial n =
    if n < 2 then 1 // base case: factorial of 0 and 1 is 1
    else n * factorial (n - 1) // recursive case: n times the factorial of n-1

// example: compute the factorial of 5
let fiveFactorial = factorial 5 // returns 120

// create a list of numbers
let numbers = [1; 2; 3; 4; 5]

// define a function that multiplies each number in a list by 2
let doubleNumbers list =
    List.map (fun n -> n * 2) list

// use pattern matching to handle errors
let divide x y = 
    match y with
    | 0 -> printfn "Error: Cannot divide by 0"
    | _ -> x / y // if y is not 0, divide x by y

// create a record type to store information about a person
type Person = {
    name: string
    age: int
    occupation: string
}

// create a list of person records
let people = [
    {name = "John"; age = 25; occupation = "Engineer"}
    {name = "Sarah"; age = 30; occupation = "Teacher"}
    {name = "Michael"; age = 35; occupation = "Doctor"}
]

// use a higher-order function to filter the list of people by age
let doctors = List.filter (fun person -> person.occupation = "Doctor") people // returns [{name = "Michael"; age = 35; occupation = "Doctor"}]