let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)

let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib (n-1) + fib (n-2)

let rec sumList l =
    match l with
    | [] -> 0
    | x::xs -> x + sumList xs

let rec reverseList l =
    match l with
    | [] -> []
    | x::xs -> reverseList xs @ [x]

let rec mapList f l =
    match l with
    | [] -> []
    | x::xs -> f x :: mapList f xs

let rec filterList f l =
    match l with
    | [] -> []
    | x::xs -> if f x then x :: filterList f xs else filterList f xs

let rec foldList f acc l =
    match l with
    | [] -> acc
    | x::xs -> foldList f (f acc x) xs

let rec zipList l1 l2 =
    match l1, l2 with
    | [], _ | _, [] -> []
    | x::xs, y::ys -> (x, y) :: zipList xs ys

let rec appendList l1 l2 =
    match l1 with
    | [] -> l2
    | x::xs -> x :: appendList xs l2

let rec concatList l =
    match l with
    | [] -> []
    | x::xs -> appendList x (concatList xs)
    
let rec quicksort l =
    match l with
    | [] -> []
    | x::xs ->
        let smaller = filterList (fun el -> el <= x) xs
        let bigger = filterList (fun el -> el > x) xs
        appendList (quicksort smaller) (x :: quicksort bigger)