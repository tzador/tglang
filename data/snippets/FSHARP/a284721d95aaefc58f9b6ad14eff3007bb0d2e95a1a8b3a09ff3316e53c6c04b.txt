let rec factorial n = 
    match n with 
    | 0 -> 1 
    | 1 -> 1 
    | _ -> n * factorial (n - 1)

let rec fibonacci n = 
    match n with 
    | 0 -> 0 
    | 1 -> 1 
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

let rec power n p = 
    match p with 
    | 0 -> 1 
    | 1 -> n 
    | _ -> n * power n (p - 1)

let rec gcd a b = 
    match b with 
    | 0 -> a 
    | _ -> gcd b (a % b) 

let rec sumList list = 
    match list with 
    | [] -> 0 
    | head :: tail -> head + sumList tail 

let rec mapList list func = 
    match list with 
    | [] -> [] 
    | head :: tail -> (func head) :: (mapList tail func)

let rec filterList list func = 
    match list with 
    | [] -> [] 
    | head :: tail -> 
        match func head with 
        | true -> head :: (filterList tail func) 
        | _ -> filterList tail func