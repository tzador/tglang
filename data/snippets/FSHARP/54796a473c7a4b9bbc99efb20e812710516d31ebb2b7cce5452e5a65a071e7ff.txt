//This code snippet uses F# to implement a binary search tree data structure

//Definition of a binary tree
type BinaryTree<'a> =
    | Empty
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

//Function to insert a new element into the binary tree
let rec insert element tree =
    match tree with
    | Empty -> Node(element, Empty, Empty)
    | Node(value, left, right) ->
        if element < value then 
            Node(value, insert element left, right)
        elif element > value then
            Node(value, left, insert element right)
        else
            Node(value, left, right)

//Function to search for an element in the binary tree
let rec search element tree =
    match tree with
    | Empty -> false
    | Node(value, left, right) ->
        if element = value then
            true
        elif element < value then
            search element left
        else
            search element right
        
//Sample code to create a binary tree and search for an element
let tree = Node(5, Node(3, Empty, Empty), Node(7, Node(6, Empty, Empty), Empty))
let element = 6
let result = search element tree //result will be true