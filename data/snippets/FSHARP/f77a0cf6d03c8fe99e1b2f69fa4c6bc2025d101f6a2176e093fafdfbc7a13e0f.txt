// Define a recursive function to calculate the nth Fibonacci number

let rec Fibonacci n = 
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> Fibonacci (n-1) + Fibonacci (n-2)
    
// Define a function to print the Fibonacci sequence up to n

let FibonacciSequence n = 
    let rec buildList i acc = 
        if i < n then buildList (i+1) (acc @ [Fibonacci i])
        else acc
    buildList 0 []
    
// Define a function to check if a number is prime

let isPrime n = 
    let rec checkPrime x = 
        match x with
        | x when x > (n/2) -> true
        | _ -> if n % x = 0 then false else checkPrime (x+1)
    checkPrime 2
    
// Define a function to find all prime numbers up to n

let findPrimes n = 
    let rec getPrimes i acc = 
        if i <= n then
            if isPrime i then getPrimes (i+1) (acc @ [i])
            else getPrimes (i+1) acc
        else acc
    getPrimes 2 []