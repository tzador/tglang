// Define a function that takes in a list of integers and returns the sum of all even numbers in the list
let sumEvenNumbers (lst: int list) =
    // Define a helper function that returns the sum of all even numbers in a given list
    let rec helper (lst: int list, sum: int) =
        // Base case: if list is empty, return the sum
        match lst with
        | [] -> sum
        // If first element is even, add it to the sum and call the helper function recursively on the rest of the list
        | x::xs when x % 2 = 0 -> helper(xs, sum + x)
        // If first element is odd, skip it and call the helper function recursively on the rest of the list
        | _::xs -> helper(xs, sum)
    // Call helper function with initial sum of 0
    helper(lst, 0)
// Test function with a sample list
printfn "Sum of even numbers in list [1;2;3;4;5] is %d" (sumEvenNumbers [1;2;3;4;5])