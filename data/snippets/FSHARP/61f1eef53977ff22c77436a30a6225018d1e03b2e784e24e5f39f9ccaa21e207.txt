// Define an abstract class representing a shape
type Shape() =
    abstract Area : float // An abstract property to calculate area
    abstract Perimeter : float // An abstract property to calculate perimeter 

// Define a subclass for circle inheriting from Shape
type Circle(radius : float) =
    inherit Shape() // Inheriting from Shape class
    // Implementing abstract properties
    override x.Area = Math.PI * radius * radius
    override x.Perimeter = 2.0 * Math.PI * radius

// Define a subclass for rectangle inheriting from Shape
type Rectangle(length : float, width : float) =
    inherit Shape() // Inheriting from Shape class
    // Implementing abstract properties
    override x.Area = length * width
    override x.Perimeter = 2.0 * (length + width)

// Define a function to calculate the total area of a list of shapes
let rec totalArea (shapes : Shape list) =
    match shapes with
    | [] -> 0.0 // Empty list has a total area of 0
    | sh::rest -> sh.Area + totalArea rest // Calculate area of the first shape and add it to the total of the remaining shapes

// Create a list of shapes
let shapes = [Circle(5.0); Rectangle(3.0, 4.0); Rectangle(6.5, 5.0)]

// Print the total area of the list of shapes
printfn "The total area of the list of shapes is %.2f" (totalArea shapes)