// This code snippet demonstrates an implementation of Dijkstra's algorithm in F#

open System.Collections.Generic

// Define a function to find the shortest path using Dijkstra's algorithm
let dijkstra (graph : Dictionary<string, Dictionary<string, int>>) (start : string) (end : string) =
    let infinity = System.Int32.MaxValue // Set infinity as the maximum value of int in F#
    let shortestDistances = new Dictionary<string, int>() // Create a dictionary to store shortest distances
    shortestDistances.Add(start, 0) // Set distance from start node to itself as 0
    let nodesToVisit = new List<string>() // Create a list of nodes to visit
    nodesToVisit.Add(start) // Add start node to the list
    let previousNodes = new Dictionary<string, string>() // Create a dictionary to store previous nodes in the shortest path
    // Iterate through all nodes in the graph
    for node in graph.Keys do
        if node <> start then // Set distance of all nodes except start node as infinity
            shortestDistances.Add(node, infinity)
        previousNodes.Add(node, "") // Set previous node of all nodes as empty
    // While there are still nodes to visit
    while nodesToVisit.Count <> 0 do
        let current = nodesToVisit.[0] // Get the first node in the list
        nodesToVisit.RemoveAt(0) // Remove the node from the list
        // Iterate through all neighboring nodes of current node
        for (neighbor, distance) in graph.[current] do
            let totalDistance = shortestDistances.[current] + distance // Calculate total distance from start node to neighbor
            // If the total distance is shorter than the current shortest distance
            if totalDistance < shortestDistances.[neighbor] then
                shortestDistances.[neighbor] <- totalDistance // Update shortest distance
                previousNodes.[neighbor] <- current // Update previous node
                nodesToVisit.Add(neighbor) // Add neighbor to list of nodes to visit
    // Create a list to store the shortest path
    let shortestPath = new List<string>()
    let mutable current = end // Set current node as the end node
    // Traverse the path backwards from end to start
    while current <> start do
        shortestPath.Add(current) // Add current node to shortest path
        current <- previousNodes.[current] // Update current node to previous node
    shortestPath.Add(start) // Add start node to shortest path
    shortestPath.Reverse() // Reverse the order of nodes in the list
    shortestPath, shortestDistances.[end] // Return the shortest path and its distance from start to end

// Example graph with nodes and distances between them
let graph = Dictionary<string, Dictionary<string, int>>()
graph.Add("A", [("B", 7); ("C", 9); ("F", 14)])
graph.Add("B", [("A", 7); ("C", 10); ("D", 15)])
graph.Add("C", [("A", 9); ("B", 10); ("D", 11); ("F", 2)])
graph.Add("D", [("B", 15); ("C", 11); ("E", 6)])
graph.Add("E", [("D", 6); ("F", 9)])
graph.Add("F", [("A", 14); ("C", 2); ("E", 9)])

// Find the shortest path from node A to node E and its distance
let shortestPath, distance = dijkstra graph "A" "E"

// Print the result
printfn "Shortest path from A to E: %A" shortestPath
printfn "Distance from A to E: %d" distance

// Output:
// Shortest path from A to E: ["A"; "B"; "C"; "F"; "E"]
// Distance from A to E: 20