// Function to calculate the factorial of a number
let rec factorial n =
    // Base case: if n is 0 or 1, return 1
    if n = 0 || n = 1 then
        1
    // Recursive case: multiply n with the factorial of n-1
    else
        n * factorial (n - 1)
        
// Function to check if a number is prime
let isPrime n =
    // Base case: if n is 2 or 3, return true
    if n = 2 || n = 3 then
        true
    // If n is even or less than 2, return false
    elif n % 2 = 0 || n < 2 then
        false
    // Loop through odd numbers starting at 3, if any divide n evenly, return false
    else
        let rec checkPrime i = 
            if i * i > n then
                true
            elif n % i = 0 then
                false
            else
                checkPrime (i + 2)
        checkPrime 3
        
// Function to find the nth fibonacci number using pattern matching
let rec fibonacci n =
    // Base cases: if n is 0 or 1, return n
    match n with 
    | 0 -> 0
    | 1 -> 1
    // Recursive case: add the previous two fibonacci numbers to get the current one
    | _ -> (fibonacci (n - 1)) + (fibonacci (n - 2))
        
// Function to remove duplicates from a list
let removeDuplicates list =
    List.foldBack (fun x acc -> if List.contains x acc then acc else x::acc) list []
    
// Function to check if a list is sorted in increasing order
let rec isSorted list =
    match list with
    | [] | [_] -> true
    | x :: (y :: _ as rest) -> x <= y && isSorted rest
    
// Function to merge two sorted lists into one sorted list
let rec mergeLists list1 list2 =
    match list1, list2 with
    // If either list is empty, return the other list
    | [], _ -> list2
    | _, [] -> list1
    // Compare the first two elements of each list and add the smaller one to the new list
    | x1 :: rest1, x2 :: rest2 -> 
        if x1 < x2 then
            x1 :: mergeLists rest1 list2
        else
            x2 :: mergeLists list1 rest2