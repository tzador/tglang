// Define a list of integers
let numList = [1; 2; 3; 4; 5]

// Use pattern matching to check if a number is in the list
let rec checkIfInList (num: int) (lst: int list) =
    match lst with
    | [] -> false // If list is empty, number is not in the list
    | hd::tl -> if hd = num then true // If the head of the list is equal to the number, it's in the list
                else checkIfInList num tl // Otherwise, recursively check the rest of the list

// Define a function to square each number in the list
let squareList (lst: int list) =
    lst |> List.map (fun x -> x * x)

// Use function composition to square the numbers and then check if 16 is in the list
let squareAndCheck = lst |> squareList |> checkIfInList 16

// Print the result
printfn "%b" squareAndCheck // Prints "true"