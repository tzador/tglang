/// Annotating a function with a type
let rec factorial (x: int) : int =
    match x with
    | 0 -> 1
    | n -> n * factorial (n - 1)

/// Defining a record type
type User =
    {Id: int; Username: string; Password: string; Age: int}

/// Creating an instance of the User record
let user1 = {Id = 1; Username = "John123"; Password = "password123"; Age = 25}

/// Defining a discriminated union type
type Shape =
    | Circle of float
    | Rectangle of float * float

/// Creating an instance of the Circle type
let circle = Circle(5.0)

/// Defining a function that operates on a discriminated union type
let calculateArea shape =
    match shape with
    | Circle(radius) -> 3.14 * radius * radius
    | Rectangle(length, width) -> length * width

/// Using pattern matching to handle different cases in a function
let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | n' -> fibonacci (n' - 1) + fibonacci (n' - 2)