let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

let rec factorial n =
    match n with 
    | 0 -> 1
    | _ -> n * factorial (n-1)

let rec isPrime n =
    match n with 
    | 1 -> false
    | 2 -> true
    | _ -> let rec check x = 
                match x with
                | 2 -> true
                | _ -> n % x <> 0 && check (x-1)
                in check (n-1) 

let rec bubbleSort arr =
    let rec bubble array = 
        match array with
        | [] -> []
        | [x] -> [x]
        | x::y::xs -> if x > y then y::bubble (x::xs)
                        else x::bubble (y::xs)
    match arr with
    | [] -> []
    | x -> let sorted = bubble x
            in if sorted = x then x
               else bubbleSort sorted
    
let rec binarySearch x arr =
    let rec search start fini mid array = 
        let subArr = List.take (fini - start + 1) (List.skip start array) 
        let midInd = (fini + start) / 2
        match List.length subArr with
        | 0 -> None
        | _ when subArr[midInd] = x -> Some (mid + midInd)
        | _ when subArr[midInd] > x -> search start (mid - 1) (midInd + mid - fini) subArr 
        | _ -> search (mid + 1) fini (fini - midInd + fini) subArr
    match arr with
    | [] -> None
    | x -> let sorted = bubbleSort x
            in search 0 (List.length sorted - 1) 0 sorted