// Define an abstract type for a complex number
type Complex = {real: float; imaginary: float}

// Define a function to add two complex numbers
let add (x: Complex) (y: Complex) =
    {real = x.real + y.real; imaginary = x.imaginary + y.imaginary }

// Define a function to multiply two complex numbers
let multiply (x: Complex) (y: Complex) =
    {real = x.real * y.real - x.imaginary * y.imaginary; imaginary = x.real * y.imaginary + y.real * x.imaginary}

// Define a recursive function to calculate the nth power of a complex number
let rec power (x: Complex) (n: int) =
    if n = 0 then {real = 1.0; imaginary = 0.0}
    else if n = 1 then x
    else multiply x (power x (n-1))

// Define an inline function to calculate the absolute value of a complex number
let inline abs (x: Complex) =
    sqrt (x.real * x.real + x.imaginary * x.imaginary)

// Define a list of complex numbers
let numbers = [{real = 3.5; imaginary = 2.0}; {real = 1.0; imaginary = -4.5}; {real = -2.0; imaginary = 1.5}]

// Use the add function to add two complex numbers and store the result in a variable
let result = add numbers.[0] numbers.[1]

// Use the power function to calculate the 4th power of a complex number and print the result
let x = {real = 2.0; imaginary = 3.0}
printfn "The 4th power of %A is %A" x (power x 4)