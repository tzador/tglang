/// Declaring a generic function with multiple type parameters
let genericFunction arg1 arg2 =
    // Define a variable with a generic type
    let mutable result : 'a = arg1
    // If arg2 is not null, assign its value to result
    if not (System.Object.ReferenceEquals(arg2, null)) then
        result <- arg2
    // Return the result
    result

// Calling the generic function with different types
let result1 = genericFunction 10 20   // result1 has type int
let result2 = genericFunction "Hello" "World"   // result2 has type string
let result3 = genericFunction true false   // result3 has type bool