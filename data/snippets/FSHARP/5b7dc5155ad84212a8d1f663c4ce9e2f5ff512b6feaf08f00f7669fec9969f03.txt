// Function to check if number is prime
let isPrime n =
    // Base case
    if n < 2 then
        false
    else
        // Loop through all possible factors
        for i in 2..(n/2) do
            // Check if n is divisible by current factor
            if n % i = 0 then
                false // If divisible, not prime
            else
                true // Otherwise, prime
        // If all factors have been checked and n is not divisible, it is prime
        true

// Function to find the sum of all prime numbers in a list
let rec sumOfPrimes (list: int list) =
    match list with
    | [] -> // Base case: empty list
        0
    | x::xs -> // Recursive case: check if head is prime and add to sum
        if isPrime x then
            x + sumOfPrimes xs
        else
            sumOfPrimes xs

// Sample input list
let inputList = [2; 5; 9; 11; 13; 16; 17]

// Output the sum of all prime numbers in the input list
printfn "Sum of prime numbers: %d" (sumOfPrimes inputList)