// This is a function that calculates the nth fibonacci number
let rec fib n =
    if n = 0 then 0  // Base case
    elif n = 1 then 1 // Base case
    else
        (fib(n-1) + fib(n-2)) // Recursive call to sum previous two fibonacci numbers

// Outputting the fibonacci numbers from 0 to 10
printfn "Fibonacci numbers from 0 to 10:"
for i in 0 .. 10 do
    let result = fib i
    printfn "%A" result

// Defining a recursive data type for a binary tree
type BinaryTree<'T> =
    | Empty
    | Node of 'T * BinaryTree<'T> * BinaryTree<'T>

// Function to traverse the binary tree in-order and return list of elements
let rec inOrder (tree: BinaryTree<'T>) =
    match tree with
    | Empty -> [] // Base case
    | Node(value, left, right) -> inOrder left @ [value] @ inOrder right // Recursive call to traverse left subtree, add value, and then traverse right subtree