// Define a function named "multiply" that takes in two integers
let multiply x y =
    // Use pattern matching to handle different cases 
    match (x, y) with
    // If either x or y is 0, then return 0 as the product
    | (0, _) | (_, 0) -> 0
    // If x and y are both positive, use a loop to perform multiplication
    | (x, y) when x > 0 && y > 0 ->
        let mutable result = 0
        for i in 1 .. y do
            result <- result + x
        result
    // If x and y are both negative, flip their signs and use the same logic as the positive case
    | (x, y) when x < 0 && y < 0 ->
        let newX = -x
        let newY = -y
        let mutable result = 0
        for i in 1 .. newY do
            result <- result + newX
        -result
    // If x and y have different signs, use recursion to handle the negative case
    | (x, y) when (x < 0 && y > 0) || (x > 0 && y < 0) ->
        let newX = abs x
        let newY = abs y
        -multiply newX newY
    // If the input is invalid, return -1 as the product
    | _ -> -1