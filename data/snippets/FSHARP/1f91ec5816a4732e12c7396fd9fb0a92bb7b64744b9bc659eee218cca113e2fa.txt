let rec factorial x =
    if x = 0
    then 1
    else x * factorial(x-1)

let rec fib n =
    match n with
    | 0 | 1 -> 1
    | n -> fib(n-1) + fib(n-2)

let rec power n m =
    if m = 0 then 1
    elif m % 2 = 0 then power (n*n) (m/2)
    else n * power n (m-1)

let rec binarySearch arr low high target =
    if low <= high then
        let mid = (low + high) / 2
        if arr.[mid] = target then mid
        elif arr.[mid] > target then binarySearch arr low (mid-1) target
        else binarySearch arr (mid+1) high target
    else -1