open System

let rec factorial n =
    if n < 2 then n
    else n * factorial (n-1)

let evenOrOdd n =
    match n % 2 with
    | 0 -> printfn "Even"
    | _ -> printfn "Odd"

let doubleList list =
    [for x in list -> x * 2]

let rec sumEvenNumbers list =
    match list with
    |[] -> 0
    |x::xs -> if x % 2 = 0 then x + sumEvenNumbers xs else sumEvenNumbers xs

let printPyramid n =
    for i in 0..n - 1 do
        printfn (" " * (n - i - 1) + "*" * (2 * i + 1))

let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib(n-1) + fib(n-2)

let rec gcd a b =
    if b = 0 then a
    else gcd b (a % b)

let capitalizeString str =
    let c = new System.Globalization.CultureInfo("en-US")
    c.TextInfo.ToTitleCase(str)

let map lst f = [for x in lst -> f x]

let distance a b =
    sqrt ((a.X - b.X) * (a.X - b.X) + (a.Y - b.Y) * (a.Y - b.Y))

let rec quicksort lst =
    match lst with
    | [] -> []
    | x::xs ->
        let smaller = quicksort (xs |> List.filter(fun elem -> elem < x))
        let larger = quicksort (xs |> List.filter(fun elem -> elem >= x))
        smaller @ [x] @ larger