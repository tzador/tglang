// Create a function that calculates the nth fibonacci number
let rec fibonacci n =
    if n < 2 then
        n
    else
        fibonacci (n-1) + fibonacci (n-2)

// Define a list of numbers
let numbers = [1; 2; 3; 4; 5]

// Use pattern matching to check if numbers is empty or not
let checkEmpty list =
    match list with
    | [] -> printfn "The list is empty."
    | _ -> printfn "The list is not empty."

// Define a record type to store student information
type Student =
    { Name : string;
      Age : int;
      GPA : float }

// Create an instance of the Student record
let student1 = { Name = "John Doe"; Age = 20; GPA = 3.5 }

// Use a for loop to iterate over a range of numbers
for i in 1..10 do
    printfn "The fibonacci number of %i is %i." i (fibonacci i)

// Use a mutable variable to track the sum of numbers
let mutable sum = 0
for num in numbers do
    sum <- sum + num

// Define a recursive function to calculate the factorial of a number
let rec factorial n =
    if n < 2 then
        1
    else
        n * factorial (n-1)

// Output the factorial of each number in the numbers list
numbers
|> List.map factorial
|> List.iter (fun result -> printfn "The factorial is %i." result)