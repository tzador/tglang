let rec factorial n =
    if n = 0 then
        1
    else
        n * factorial (n - 1)

let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

let containsVowel letter =
    match letter with
    | 'a' -> true
    | 'e' -> true
    | 'i' -> true
    | 'o' -> true
    | 'u' -> true
    | _ -> false

let rec sumList lst =
    match lst with
    | [] -> 0
    | head :: tail -> head + sumList tail

let rec mapList f lst =
    match lst with
    | [] -> []
    | head :: tail -> (f head) :: (mapList f tail)

let rec filterList f lst =
    match lst with
    | [] -> []
    | head :: tail ->
        if f head then
            head :: (filterList f tail)
        else
            filterList f tail