// Declare a mutable list of integers
let mutable listInt = [1..10]

// Define a recursive function to calculate the factorial of a number
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n-1)

// Use pattern matching to handle different cases
let rec tailRecursiveSum list =
    match list with
    | [] -> 0
    | [x] -> x
    | x::xs -> x + tailRecursiveSum xs

// Create a higher-order function that takes in a function as an argument.
// The function should take two integers and return their sum
let higherOrderFunction func =
    fun x y -> func x y

// Create an anonymous function and pass it to the higher-order function
higherOrderFunction (fun x y -> x * y) 5 10 // Output: 50

// Use a function composition to combine two functions
let composeFunctions = higherOrderFunction >> factorial

composeFunctions 5  // Output: 120