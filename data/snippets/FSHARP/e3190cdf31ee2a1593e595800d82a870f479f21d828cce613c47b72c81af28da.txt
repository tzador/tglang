(* Function that returns the factorial of an integer *)
let rec factorial n =
    if (n = 0) then 1
    else n * factorial (n-1)

(* Function that calculates the nth number in the Fibonacci sequence *)
let rec fibonacci n =
    if (n = 0) then 0
    elif (n = 1) then 1
    else fibonacci (n-1) + fibonacci (n-2)

(* Function that checks if a given number is prime *)
let isPrime n =
    let rec checkPrime i =
        if (i > n/2) then true
        elif (n % i = 0) then false
        else checkPrime (i+1)
    checkPrime 2

(* Function that sorts a list of integers in ascending order *)
let rec quicksort list =
    match list with
    | [] -> []
    | [x] -> [x]
    | pivot::rest ->
        let smaller, larger =
            rest
            |> List.partition (fun x -> x < pivot)
        in
        (quicksort smaller) @ [pivot] @ (quicksort larger)
    
(* Function that checks if a given string is a palindrome *)
let isPalindrome str =
    str = List.rev str

(* Function that calculates the sum of the even numbers in a list *)
let sumEvenNumbers list =
    list
    |> List.filter (fun x -> x % 2 = 0)
    |> List.sum

(* Function that returns a list of all possible combinations of a given list *)
let rec combinations list =
    match list with
    | [] -> [[]]
    | x::xs ->
        let subCombinations = combinations xs
        subCombinations @ List.map (List.append [x]) subCombinations
(* Output: