// Define a function to calculate the factorial of a given number
let rec factorial x =
    match x with
    | 0 -> 1
    | n -> n * factorial (n-1)

// Define a recursive function to calculate the sum of squares of all numbers in a list
let rec sumOfSquares list =
    match list with
    | [] -> 0
    | x::xs -> (x*x) + (sumOfSquares xs)

// Define a function to check if a given number is prime or not
let isPrime n =
    let sqrtN = sqrt(double(n))
    let rec checkFactors i =
        if i > sqrtN then true
        elif n%i = 0 then false
        else checkFactors (i+1)
    checkFactors 2

// Define a higher-order function to apply a function to each element in a list and return a new list
let rec map f list =
    match list with
    | [] -> []
    | x::xs -> (f x)::(map f xs)

// Define a function to compute the determinant of a square matrix
let rec determinant m =
    match m with
    | [[]] -> failwith "Cannot compute determinant of empty matrix"
    | [[x]] -> x
    | _ -> let signs = [1,-1] |> List.map (fun x -> float x)    // create a list of signs for expansion
           let indices = [0..List.length m - 1]                   // create a list of indices for selecting a row or column
           signs 
           |> List.map (fun s -> s * m.[0].[indices |> List.tl |> List.map (fun i -> m.[i].[1..]) |> determinant])
           |> List.sum