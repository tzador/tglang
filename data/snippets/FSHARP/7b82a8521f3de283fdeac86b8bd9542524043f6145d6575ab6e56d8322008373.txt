let name = "John" // declare a variable of type string with value "John"
let age = 25 // declare a variable of type int with value 25
let greeting = sprintf "Hello %s, you are %d years old." name age // create a string using string interpolation
printfn "%s" greeting // print the greeting to the console
let rec factorial n = // define a recursive function to calculate factorial
    if n = 0 then 
        1 // base case
    else 
        n * factorial (n - 1) // recursive case
printfn "%d" (factorial 5) // call the factorial function with input 5 and print the result
type Person = { // define a record type called Person
    Name: string;
    Age: int;
    Address: string option;
}
let person1 = { Name = "Alice"; Age = 30; Address = Some("123 Main St.") } // create a record instance
let person2 = { person1 with Name = "Bob" } // create a new record instance based on person1 with the Name field updated
let printPerson person = // define a function to print a Person record
    printfn "Name: %s, Age: %d, Address: %A" person.Name person.Age person.Address
printPerson person1 // call the printPerson function with person1 as input
printPerson person2 // call the printPerson function with person2 as input
let isEven n = if n % 2 = 0 then true else false // define a function to check if a number is even
let numbers = [1; 2; 3; 4; 5] // create a list of numbers
let evenNumbers = numbers |> List.filter isEven // use the filter function to get only even numbers from the list
printfn "%A" evenNumbers // print the resulting list
// Output:
// Hello John, you are 25 years old.
// 120
// Name: Alice, Age: 30, Address: Some("123 Main St.")
// Name: Bob, Age: 30, Address: Some("123 Main St.")
// [2; 4]