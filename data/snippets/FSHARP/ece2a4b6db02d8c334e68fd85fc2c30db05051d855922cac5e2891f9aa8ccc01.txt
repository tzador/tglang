let rec factorial n =
    // recursively calculate factorial of n
    match n with
    | 0 -> 1
    | _ -> n * factorial (n - 1)

let rec fibonacci n =
    // recursively calculate nth term of fibonacci sequence
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

let rec power x n =
    // recursively calculate x to the nth power
    match n with
    | 0 -> 1
    | 1 -> x
    | _ -> x * power x (n - 1)

let rec flatten list =
    // recursively flatten a list of lists
    match list with
    | [] -> []
    | head::tail -> head @ flatten tail

let rec quicksort list =
    // recursively sort a list using quicksort algorithm
    match list with
    | [] -> []
    | pivot::tail -> 
        let smaller = tail |> List.filter (fun x -> x < pivot)
        let greater = tail |> List.filter (fun x -> x >= pivot)
        quicksort smaller @ [pivot] @ quicksort greater