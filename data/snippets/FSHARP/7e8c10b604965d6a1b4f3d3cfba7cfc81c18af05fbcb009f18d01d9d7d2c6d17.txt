let rec fib (n:int) =
    if n < 2 then n
    else fib (n-1) + fib (n-2)
    
let primes =
    let rec isPrime (num:int) (div:int) =
        match div with
        | 1 -> true
        | _ -> (num % div <> 0) && isPrime num (div-1)
    seq {2 .. 9999}
    |> Seq.filter (fun n -> isPrime n (n/2 + 1))
    
let rec powerSeries (x:float, n:int, precision:int) =
    let rec power (x:float, n:int) =
        if n = 0 then 1.0
        else if n = 1 then x
        else
            let square = power (x, n/2)
            if n % 2 = 0 then square * square
            else square * square * x
    if precision = 0 then 1.0
    else
        let numerator = power (x, n)
        let denominator = float (factorial precision)
        numerator / denominator