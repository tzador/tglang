let rec factorial n = 
    match n with
    | 0 -> 1
    | _ -> n * factorial (n-1)
// Recursive function to calculate the factorial of a given number

let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | _ -> fibonacci (n-1) + fibonacci (n-2)
// Recursive function to calculate the n-th term in the Fibonacci sequence

let rec power n x =
    match n with
    | 0 -> 1
    | _ -> x * power (n-1) x
// Recursive function to calculate x^n

let rec gcd a b =
    match b with
    | 0 -> a
    | _ -> gcd b (a % b)
// Recursive function to calculate the greatest common divisor of two given numbers

let rec is_prime num =
    let rec is_divisible_by n =
        match n with
        | 1 -> false
        | _ -> num % n = 0 || is_divisible_by (n-1)
    // Recursive helper function to check if a number is divisible by any number less than it
    if num < 2 then false
    else is_divisible_by (num-1)

let rec sum_list lst =
    match lst with
    | [] -> 0
    | x::xs -> x + sum_list xs
// Recursive function to calculate the sum of a given list of numbers

let rec merge_sort lst =
    let rec merge lst1 lst2 =
        match lst1, lst2 with
        | [], lst | lst, [] -> lst
        | x::xs, y::ys ->
            if x <= y then x::merge xs lst2
            else y::merge lst1 ys
    // Recursive helper function to merge two sorted lists into a new sorted list
    match lst with
    | [] | [_] -> lst
    | _ ->
        let half = List.length lst / 2
        let first_half = List.take half lst
        let second_half = List.skip half lst
        // Split the list into two halves
        merge (merge_sort first_half) (merge_sort second_half)
    // Recursively merge the two halves after sorting them individually