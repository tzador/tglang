(** Function to return the nth Fibonacci number using memoization **)

let memoize f =
    let cache = System.Collections.Generic.Dictionary<_,_>()
    fun x ->
        match cache.TryGetValue x with
        | true, v -> v
        | _ -> let v = f x
               cache.Add(x, v)
               v

(** Higher-order function to memoize a recursive function **)
let memoizeRec f =
    let f = f (memoize f)
    f

(** Recursive function to calculate the nth Fibonacci number **)
let rec fib n =
    match n with
    | 1 | 2 -> 1
    | _ -> fib (n - 1) + fib (n - 2)

(** Memoized version of the Fibonacci function **)
let fibMemo = memoizeRec fib

(** Example usage: get the 20th Fibonacci number **)
fibMemo 20