// Define the Cart type
type Cart<'a> =
    | EmptyCart
    | Item of 'a * Cart<'a>
    | Discount of float * Cart<'a>

// Define functions for adding items to the cart
let addToCart item cart =
    match cart with
    | EmptyCart -> Item(item, EmptyCart) // If cart is empty, create a new cart with the given item
    | Item(item', rest) -> Item(item, cart) // If cart already has items, add the new item to the beginning
    | Discount(d, rest) -> Discount(d, addToCart item rest) // If the cart has a discount, add the new item to the discounted cart

// Define a function for calculating the total cost of the cart
let rec calculateTotal cart =
    match cart with
    | EmptyCart -> 0. // If the cart is empty, the total cost is 0
    | Item(item, rest) -> item + calculateTotal rest // If the cart has items, add up the cost of each item
    | Discount(d, rest) -> (1. - d) * calculateTotal rest // If the cart has a discount, apply the discount to the total cost

// Create a sample cart with items and discounts
let cart = addToCart 10. (Discount(0.2, Item(20., Item(30., EmptyCart))))

// Calculate the total cost of the cart
let total = calculateTotal cart // Output: 44.0