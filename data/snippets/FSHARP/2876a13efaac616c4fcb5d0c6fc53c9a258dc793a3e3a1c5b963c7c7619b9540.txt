// This is a comment

// Define a function to calculate the factorial of a number
let rec factorial n =
    if n < 0 then failwith "Number must be positive"
    else if n = 0 then 1
    else n * factorial (n - 1)

// Define a list of input values
let inputs = [3; 5; 7; 10; 1]

// Use pattern matching to handle different cases
let rec factorialOutputs inputs =
    match inputs with
    | head :: tail ->
        // Calculate the factorial for each input and print the result
        let result = factorial head
        printfn "Factorial of %d is %d" head result
        // Use tail recursion to continue iterating through the list
        factorialOutputs tail
    | _ -> printfn "No inputs provided"

// Call the function with the input list
factorialOutputs inputs