// Function to find the sum of a list of numbers
let rec sumList list =
    match list with
    | [] -> 0 // If list is empty, return 0
    | x::xs -> x + sumList xs // Otherwise, add first element to sum of rest of list

// Function to check if a number is prime
let isPrime n =
    let rec checkDivisor d n =
        if d*d > n then true
        else if n % d = 0 then false
        else checkDivisor (d+1) n
    checkDivisor 2 n // Check if any number from 2 to square root of n divides it

// Function to filter a list using a given predicate function
let rec filterList predicate list =
    match list with
    | [] -> []
    | x::xs when predicate x -> x::filterList predicate xs // Add x to list if predicate returns true
    | _::xs -> filterList predicate xs // Otherwise, skip x and continue on rest of list

// Main code
let numbers = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] // Create a list of numbers
let primeNumbers = filterList isPrime numbers // Filter out prime numbers from numbers list
printfn "Sum of prime numbers from 1 to 10: %i" (sumList primeNumbers) // Print the sum