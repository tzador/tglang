// Defining a recursive function
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n-1) + fibonacci (n-2)

// Iterating over a list and returning a new list
let rec squareList list =
    match list with
    | [] -> []
    | head :: tail -> (head * head) :: squareList tail

// Pattern matching on tuples
let makePairs fstList sndList =
    match fstList, sndList with
    | [], [] -> []
    | _ when List.length fstList <> List.length sndList -> failwith "Lists must be of equal length"
    | h1 :: t1, h2 :: t2 -> (h1, h2) :: makePairs t1 t2

// Applying a function over a list and returning the result in a tuple
let sumAndAverage list =
    let rec calcSum list sum =
        match list with
        | [] -> sum
        | head :: tail -> calcSum tail (sum + head)
    let len = List.length list
    let sum = calcSum list 0
    sum, (float sum / float len)

// Recursive pattern matching on custom types
type BinaryTree =
    | Leaf
    | Node of int * BinaryTree * BinaryTree

let rec countNodes tree =
    match tree with
    | Leaf -> 0
    | Node (value, left, right) -> 1 + countNodes left + countNodes right