(* This function takes in a list of integers and returns the sum of all the elements *)
let rec sum (lst : int list) =
    match lst with
    | [] -> 0 // base case: if list is empty, return 0
    | head :: tail -> head + sum(tail) // add current head value to result of recursive call on tail
(* Example: sum [1; 2; 3] returns 6 *)