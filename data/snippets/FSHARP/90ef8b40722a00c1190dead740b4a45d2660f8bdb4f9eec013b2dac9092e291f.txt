// This is a recursive function that calculates the factorial of a given number
// It uses pattern matching to handle edge cases and incrementally multiplies through the numbers
// The code also includes type annotations for optimization and readability

let rec factorial (n : int) : int = 
    match n with
    | 0 -> 1 // base case: 0! = 1
    | 1 -> 1 // base case: 1! = 1
    | _ -> n * factorial (n-1) // recursive case: n! = n * (n-1)!

// Example usage:
factorial 5 // returns 120