// Create a custom type with discriminated union
type Employee =
    | Manager of string * int
    | Technician of string * int
    | Intern of string * int

// Create a list of employees
let employees =
    [
        Manager("John", 100000)
        Technician("Sarah", 60000)
        Intern("Mike", 30000)
    ]

// Define a function to calculate total salary of all employees
let calculateTotalSalary (employees : Employee list) =
    let rec totalSalary (acc : int) (lst : Employee list) =
        match lst with
        | [] -> acc
        | Manager(name, salary)::rest -> totalSalary (acc + salary) rest
        | Technician(name, salary)::rest -> totalSalary (acc + salary) rest
        | Intern(name, salary)::rest -> totalSalary (acc + salary) rest

    totalSalary 0 employees

// Call the function and print the result
printfn "%d" (calculateTotalSalary employees)