let rec factorial n = 
    if n < 0 then 
        failwith "Factorial cannot be calculated for negative numbers"
    elif n = 0 then 
        1
    else
        n * factorial(n-1)

let rec fibonacci n = 
    if n < 0 then
        failwith "Fibonacci sequence cannot be calculated for negative numbers"
    elif n = 0 then
        0
    elif n = 1 then 
        1
    else
        fibonacci (n-1) + fibonacci (n-2)
    
let rec powerOfTwo n = 
    if n < 0 then
        failwith "Power of two cannot be calculated for negative numbers"
    elif n = 0 then 
        1
    else 
        2 * (powerOfTwo (n-1))

let rec isPrime n = 
    let rec checkPrime n i = 
        if i = 1 then
            true
        elif n % i = 0 then 
            false
        else 
            checkPrime n (i-1)
    
    if n < 2 then 
        false
    else 
        checkPrime n (n/2)

let rec gcd a b = 
    if a = 0 then
        b
    elif b = 0 then 
        a
    elif a > b then 
        gcd (a-b) b
    else 
        gcd a (b-a)

let rec binarySearch lst target = 
    let rec helper start finish = 
        let mid = (start + finish) / 2
        if lst.[mid] = target then
            mid
        elif target < lst.[mid] then 
            helper start (mid-1)
        else 
            helper (mid+1) finish
    
    helper 0 (List.length lst - 1)