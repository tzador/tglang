// Define a recursive function to calculate the factorial of a given number
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n - 1)

// Define a function to calculate the nth Fibonacci number using pattern matching
let rec fibonacci n =
    match n with
    | n when n <= 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

// Define a function that takes a list of integers and returns the sum of all even numbers in the list
let sumEvenNumbers (numbers: int list) =
    let rec sumHelper (acc: int) (numbers: int list) =
        match numbers with
        | head :: tail ->
            if head % 2 = 0 then
                sumHelper (acc + head) tail
            else
                sumHelper acc tail
        | [] -> acc
    sumHelper 0 numbers

// Define a record type for a person
type Person =
    { Name: string
      Age: int 
      Occupation: string
    }

// Create a function to filter a list of people to only include those with a certain occupation
let filterPeopleByOccupation (people: Person list) (occupation: string) =
    let rec filterHelper (acc: Person list) (people: Person list) =
        match people with
        | head :: tail ->
            if head.Occupation = occupation then
                filterHelper (head :: acc) tail
            else
                filterHelper acc tail
        | [] -> acc |> List.rev
    filterHelper [] people