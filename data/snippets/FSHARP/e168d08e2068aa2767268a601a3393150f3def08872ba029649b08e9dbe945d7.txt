let rec factorial n =
    match n with
    | 0 | 1 -> 1
    | _ -> n * factorial (n-1)

let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fib (n-1) + fib (n-2)

type BinaryTree<'a> =
    | Empty
    | Node of 'a * BinaryTree<'a> * BinaryTree<'a>

let rec insert (x: 'a) tree =
    match tree with
    | Empty -> Node(x, Empty, Empty)
    | Node(value, left, right) ->
        if x < value then
            Node(value, insert x left, right)
        elif x > value then
            Node(value, left, insert x right)
        else
            Node(x, left, right)

let rec contains (x: 'a) tree =
    match tree with
    | Empty -> false
    | Node(value, left, right) ->
        if x = value then true
        else
            contains x left || contains x right