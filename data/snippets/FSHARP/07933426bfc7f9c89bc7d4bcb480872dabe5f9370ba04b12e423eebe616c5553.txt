// Define a recursive function for computing factorial
let rec factorial n = 
    match n with
    | 0 -> 1  // Base case, returns 1 when n is 0
    | _ -> n * factorial(n-1) // Recursive case, multiplies n by the factorial of n-1

// Example: Compute the factorial of 5
let result = factorial 5 // result = 120

// Define a list of numbers
let numbers = [1; 2; 3; 4; 5] // numbers = [1; 2; 3; 4; 5]

// Define a recursive function for finding the sum of a list of numbers
let rec sumList list = 
    match list with
    | [] -> 0 // Base case, returns 0 when the list is empty
    | head::tail -> head + sumList tail // Recursive case, adds the first element to the sum of the rest of the list

// Example: Find the sum of the list of numbers
let sum = sumList numbers // sum = 15