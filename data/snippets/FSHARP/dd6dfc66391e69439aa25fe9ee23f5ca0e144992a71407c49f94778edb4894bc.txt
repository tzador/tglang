// Define a recursive function to calculate the factorial of a given integer
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * factorial (n - 1)

// Define a function to print the first 10 numbers in the Fibonacci sequence
let fib10 (n) =
    let rec fibSeq (n1,n2,i) =
        if i < n then
            printfn "%A" n1
            fibSeq (n2, n1 + n2, i + 1)
        else
            printfn "%A" n1

    fibSeq (1,1,0)

// Define a function to calculate the sum of all even numbers in a list
let sumEven (l:list<int>) =
    l
    |> List.filter (fun x -> x % 2 = 0)
    |> List.sum

// Define a recursive function to check if a string is a palindrome
let isPalindrome (s:string) =
    let rec checkPalindrome (s1:string, s2:string) =
        match s1.Length, s2.Length with
        | 0, 0 -> true
        | _, 1 -> true
        | _, _ when s1.[0] = s2.[0] -> checkPalindrome (s1.[1..], s2.[..-2])
        | _ -> false

    checkPalindrome (s, s)