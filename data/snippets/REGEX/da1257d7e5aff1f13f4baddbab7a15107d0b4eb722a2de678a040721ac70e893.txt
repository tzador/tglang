// This regex pattern checks for a valid email address with domain name
// It does not allow special characters in the username and only allows certain top-level domains

^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[a-zA-Z]{2,63}\.[a-zA-Z]{2,6}$
// ^ indicates the start of the string
// [a-zA-Z0-9._%+-]+ allows for one or more characters from a to z, A to Z, 0 to 9, and special characters ._%+-
// @ symbol to separate the username from the domain name
// [a-zA-Z0-9.-]+ allows for one or more characters from a to z, A to Z, 0 to 9, and special characters .-
// [a-zA-Z]{2,63} ensures that the domain name has a minimum of 2 and maximum of 63 characters
// \. is used to escape the dot symbol in the domain name
// [a-zA-Z]{2,6} ensures that the top-level domain has a minimum of 2 and maximum of 6 characters
// $ indicates the end of the string

// Sample email addresses that would match this pattern are:
// john.doe@example.com
// jane_12%doe@example
// jane.doe@company.co.uk

// Sample email addresses that would not match this pattern are:
// john.doe@example
// jane.doe@company.

// The following code can be used to test the pattern in a programming language:
// let regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[a-zA-Z]{2,63}\.[a-zA-Z]{2,6}$/;
// let str = "jane.doe@example";
// let result = regex.test(str);
// console.log(result); // will output false