// 1. Matching IP Addresses
(?:[0-9]{1,3}\.){3}[0-9]{1,3} 
//Explanation: The above regex pattern will match IP addresses in the form of x.x.x.x, where each "x" is a number from 0-255. The "(?:)" non-capturing group is used to match the pattern without creating a capture group. The first part "[0-9]{1,3}\." matches 1-3 digits followed by a period ".", to match the first three groups of numbers in an IP address. The "{3}" at the end specifies that this pattern should repeat three times. Finally, [0-9]{1,3} matches the last group of digits in an IP address. 

// 2. Matching Email Addresses
\w+@[A-Za-z0-9]+\.[A-Za-z]+ 
//Explanation: This regex pattern will match email addresses of the form "username@hostname.extension". The "\w+" will match one or more word characters (letters, numbers, underscores) for the username. The "@" symbol must be present. The "[A-Za-z0-9]+" will match one or more letters and numbers for the hostname. Finally, the "\.[A-Za-z]+" will match a period followed by one or more letters for the extension. 

// 3. Matching HTML Tags
<([A-Za-z0-9]+)(\s+[A-Za-z]+=\"[A-Za-z0-9]+\")*\s*>.*<\/\1\s*>
//Explanation: This regex pattern will match HTML tags, including any attributes within the tag. The opening tag starts with "<", followed by a capture group "[A-Za-z0-9]+" for the tag name. The "(\\s+[A-Za-z]+=\"[A-Za-z0-9]+\")*" matches 0 or more attributes (such as class or id) separated by spaces. These attributes must be in the form of "attribute="value"". The "\s*" at the end allows for any additional space before the closing tag. The closing tag must match the opening tag's tag name using "\1". The ".*" in the middle allows for any content within the HTML tags.