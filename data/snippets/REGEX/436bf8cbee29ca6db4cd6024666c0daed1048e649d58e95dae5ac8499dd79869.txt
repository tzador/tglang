/(?:((?:(?:([0-9a-fA-F]{1,4}):(?!:)\
(?:[0-9a-fA-F]{1,4}:){0,5})?([0-9a-fA-F]{1,4}\
:)?(?:(?:[0-9a-fA-F]{1,4}):(?!:)(?:[0-9a-fA-F]\
{1,4}:){0,4})?(?:(?:[0-9a-fA-F]{1,4}):(?!:)(?:[0-9\
a-fA-F]{1,4}:){0,3})?(?:(?:[0-9a-fA-F]{1,4}):(?!:)(?:[\
0-9a-fA-F]{1,4}:){0,2})?(?:(?:[0-9a-fA-F]{1,4}):(?!:)(?:[0\
-9a-fA-F]{1,4}:){0,1})?(?::(?:(?:[0-9a-fA-F]{1,4}):(?!:)\
(?:[0-9a-fA-F]{1,4}:){0})?(?::('?::')}}
/
// This regex is used to match and validate IPv6 addresses according to RFC 3986 and RFC 6874
// The regex first checks for the optional network prefix, which can be between 0-FFFF (1-4 hex digits)
// Then it checks for six potential sections of the IPv6 address, each separated by a colon
// The first and last sections can have up to 4 hex digits, while the middle sections can only have up to 3
// An empty section is also allowed, denoted by two consecutive colons
// Finally, a double colon can appear once in the regex to allow for shortened addresses using the 'compressed' notation
// Keep in mind this regex does not validate the actual IPv6 address syntax, only its structure and prefix
// Some valid and invalid IPv6 addresses for testing purposes:
// 1:2:3:4:5:6:7:8
// 2001:0db8:1234:0000:0000:0000:0000:0000
// 2001:0db8:1234:ffff:0000:0000:0000:0000::1
// 2001:0db8:1234:0000:0000:0000:0000::
// 2001:0db8::0000:0000:0000:0000:0000
// 1:2:3:4:5:6:255.255.255.255 (invalid IPv6 address)
// 2001:0db8:1234:0000:0000:0000:0000:0000:0000 (invalid IPv6 address)