/// Creates a custom text widget with an animated gradient color background.
/// The widget will gradually change colors over a set duration.
class GradientText extends StatefulWidget {
  /// The text to be displayed inside the widget.
  final String text;

  /// The list of colors for the gradient animation.
  final List<Color> colors;

  /// The duration of the gradient animation.
  final Duration duration;

  /// The constructor for the GradientText widget.
  GradientText({
    @required this.text,
    @required this.colors,
    @required this.duration,
  });

  @override
  _GradientTextState createState() => _GradientTextState();
}

/// The state of the GradientText widget.
class _GradientTextState extends State<GradientText>
    with SingleTickerProviderStateMixin {
  /// The controller for the animation.
  AnimationController _controller;

  /// The animation for the gradient colors.
  Animation<Gradient> _gradientAnimation;

  @override
  void initState() {
    super.initState();

    // Initialize the animation controller.
    _controller = AnimationController(vsync: this, duration: widget.duration);

    // Initialize the gradient animation with the given colors.
    _gradientAnimation = GradientTween(
      begin: Gradient(colors: widget.colors),
      end: Gradient(colors: widget.colors.reversed.toList()),
    ).animate(_controller);

    // Start the animation.
    _controller.forward();
  }

  @override
  void dispose() {
    // Dispose of the animation controller when the widget is disposed.
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _gradientAnimation,
      builder: (context, child) {
        // Wrap the text in a ShaderMask to apply the gradient colors.
        return ShaderMask(
          shaderCallback: (rect) {
            return _gradientAnimation.value.createShader(rect);
          },
          child: Text(
            widget.text,
            style: TextStyle(
              fontSize: 20.0,
              fontWeight: FontWeight.bold,
            ),
          ),
        );
      },
    );
  }
}