/*
This is a complex code snippet in DART language.
It includes multiple functions, conditional statements, looping, and variable declarations.
*/

//Function to calculate the factorial of a number
int factorial(int n){
  int fact = 1; //Initialize the factorial value
  for(int i = 1; i <= n; i++){ //Loop to calculate factorial
      fact *= i;
  }
  return fact;
}

//Function to print the first n terms of Fibonacci sequence
void fibonacci(int n){
  int first = 0, second = 1, next; //Initialize the first two terms
  print("The first $n terms of the Fibonacci sequence are: ");
  for(int i = 1; i <= n; i++){ //Loop to print Fibonacci sequence
      print('$first');
      next = first + second;
      first = second;
      second = next;
  }
}

//Function to check if a number is prime or not
bool isPrime(int n){
  if(n <= 1){ //Base case
    return false;
  }
  for(int i = 2; i < n; i++){ //Loop to check for prime number
    if(n % i == 0){ //If number is divisible by any number other than 1 and itself
      return false;
    }
  }
  return true;
}

//Main function
void main() {
  int number = 10; //Number to perform operations on
  if(number % 2 == 0){ //If number is even
    print("$number is an even number."); //Prints the statement in quotes
  }
  else{ //If number is odd
    print("$number is an odd number."); //Prints the statement in quotes
  }
  print("$number! = ${factorial(number)}"); //Prints the factorial of the number
  fibonacci(number); //Prints the first n terms of Fibonacci sequence
  if(isPrime(number)){ //If number is prime
    print("$number is a prime number."); //Prints the statement in quotes
  }
  else{ //If number is not prime
    print("$number is not a prime number."); //Prints the statement in quotes
  }
}