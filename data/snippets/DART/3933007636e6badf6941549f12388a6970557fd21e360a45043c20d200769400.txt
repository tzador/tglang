/// This class implements a binary search tree
class BinarySearchTree<T extends Comparable<T>> {
  /// Root node of the binary search tree
  Node<T>? _root;

  /// Constructor for the binary search tree
  BinarySearchTree(this._root);

  /// Inserts the given value into the binary search tree
  void insert(T value) {
    if (_root == null) {
      _root = Node<T>(value);
    } else {
      _insert(_root!, value);
    }
  }

  /// Private helper function to insert a value into a binary search tree
  void _insert(Node<T> currentNode, T value) {
    // If the value is less than the current node, insert it into the left subtree
    if (value.compareTo(currentNode.value!) < 0) {
      if (currentNode.left == null) {
        currentNode.left = Node<T>(value);
      } else {
        _insert(currentNode.left!, value);
      }
    // If the value is greater than the current node, insert it into the right subtree
    } else if (value.compareTo(currentNode.value!) > 0) {
      if (currentNode.right == null) {
        currentNode.right = Node<T>(value);
      } else {
        _insert(currentNode.right!, value);
      }
    }
    // If the value is equal to the current node, do not insert it (binary search trees do not allow duplicate values)
  }

  /// Searches for the given value in the binary search tree and returns true if found, false otherwise
  bool search(T value) {
    if (_root == null) {
      return false;
    } else {
      return _search(_root!, value);
    }
  }

  /// Private helper function to search for a value in a binary search tree
  bool _search(Node<T> currentNode, T value) {
    // If the value is equal to the current node, return true
    if (value.compareTo(currentNode.value!) == 0) {
      return true;
    } else if (value.compareTo(currentNode.value!) < 0) {
      // If the value is less than the current node, continue searching in the left subtree
      if (currentNode.left == null) {
        return false;
      } else {
        return _search(currentNode.left!, value);
      }
    } else {
      // If the value is greater than the current node, continue searching in the right subtree
      if (currentNode.right == null) {
        return false;
      } else {
        return _search(currentNode.right!, value);
      }
    }
  }
  
  /// Deletes the given value from the binary search tree
  bool delete(T value) {
    if (_root == null) {
      // The tree is empty, so the value cannot be deleted
      return false;
    }
    
    // Use the private helper function to find the node containing the value to be deleted
    Node<T>? nodeToDelete = _findNode(_root, value);
    
    if (nodeToDelete == null) {
      // The value does not exist in the tree, so it cannot be deleted
      return false;
    }
    
    // If the node has no children, simply delete the node
    if (nodeToDelete.left == null && nodeToDelete.right == null) {
      _deleteSingleNode(nodeToDelete);
    } else if (nodeToDelete.left == null) {
      // If the node only has a right child, replace it with the right child
      _deleteNodeWithRightChild(nodeToDelete);
    } else if (nodeToDelete.right == null) {
      // If the node only has a left child, replace it with the left child
      _deleteNodeWithLeftChild(nodeToDelete);
    } else {
      // If the node has two children, replace it with the successor (the smallest value in the right subtree)
      _deleteNodeWithTwoChildren(nodeToDelete);
    }
    
    return true;
  }
  
  /// Private helper function to find the node containing the given value
  Node<T>? _findNode(Node<T>? currentNode, T value) {
    // Base case: the value was not found in the tree
    if (currentNode == null) {
      return null;
    }
    
    // If the value is less than the value at the current node, search in the left subtree
    if (value.compareTo(currentNode.value!) < 0) {
      return _findNode(currentNode.left, value);
    // If the value is greater than the value at the current node, search in the right subtree
    } else if (value.compareTo(currentNode.value!) > 0) {
      return _findNode(currentNode.right, value);
    // If the value is equal to the value at the current node, return the current node
    } else {
      return currentNode;
    }
  }
  
  /// Private helper function to delete a node with no children
  void _deleteSingleNode(Node<T> nodeToDelete) {
    // Check if the node to be deleted is the root
    if (nodeToDelete == _root) {
      // Reset the root to null
      _root = null;
    } else {
      Node<T> parentNode = _findParent(nodeToDelete, _root!);
      if (parentNode.left == nodeToDelete) {
        // The node to be deleted is the left child of the parent node, so set the left child to null
        parentNode.left = null;
      } else {
        // The node to be deleted is the right child of the parent node, so set the right child to null
        parentNode.right = null;
      }
    }
  }
  
  /// Private helper function to delete a node with a right child but no left child
  void _deleteNodeWithRightChild(Node<T> nodeToDelete) {
    // Check if the node to be deleted is the root
    if (nodeToDelete == _root) {
      // The root is being deleted, so replace it with its right child
      _root = nodeToDelete.right;
    } else {
      Node<T> parentNode = _findParent(nodeToDelete, _root!);
      if (parentNode.left == nodeToDelete) {
        // The node to be deleted is the left child of the parent node, so replace it with its right child
        parentNode.left = nodeToDelete.right;
      } else {
        // The node to be deleted is the right child of the parent node, so replace it with its right child
        parentNode.right = nodeToDelete.right;
      }
    }
  }
  
  /// Private helper function to delete a node with a left child but no right child
  void _deleteNodeWithLeftChild(Node<T> nodeToDelete) {
    // Check if the node to be deleted is the root
    if (nodeToDelete == _root) {
      // The root is being deleted, so replace it with its left child
      _root = nodeToDelete.left;
    } else {
      Node<T> parentNode = _findParent(nodeToDelete, _root!);
      if (parentNode.left == nodeToDelete) {
        // The node to be deleted is the left child of the parent node, so replace it with its left child
        parentNode.left = nodeToDelete.left;
      } else {
        // The node to be deleted is the right child of the parent node, so replace it with its left child
        parentNode.right = nodeToDelete.left;
      }
    }
  }
  
  /// Private helper function to delete a node with two children
  void _deleteNodeWithTwoChildren(Node<T> nodeToDelete) {
    // Find the successor (the smallest value in the right subtree)
    Node<T> successor = _findSmallestNode(nodeToDelete.right!);
    
    // Copy the successor's value into the node to be deleted
    nodeToDelete.value = successor.value;
    
    // Delete the successor (since it has now been moved)
    delete(successor.value!);
  }
  
  /// Private helper function to find the parent node of the given node
  Node<T> _findParent(Node<T> childNode, Node<T> rootNode) {
    // If the child node is the root, it has no parent
    if (childNode == rootNode) {
      return rootNode;
    }
    
    // If the child node is the left child of the root, the root is its parent
    if (childNode == rootNode.left) {
      return rootNode;
    // If the child node is the right child of the root, the root is its parent
    } else if (childNode == rootNode.right) {
      return rootNode;
    // Otherwise, recursively search for the parent of the child node on either the left or right subtree
    } else {
      if (childNode.value!.compareTo(rootNode.value!) < 0) {
        // The child node is less than the root, so it must be in the left subtree
        return _findParent(childNode, rootNode.left!);
      } else {
        // The child node is greater than the root, so it must be in the right subtree
        return _findParent(childNode, rootNode.right!);
      }
    }
  }
  
  /// Private helper function to find the smallest node in a given subtree
  Node<T> _findSmallestNode(Node<T> rootNode) {
    // If the root node has a left child, recursively find the smallest node in its left subtree
    if (rootNode.left != null) {
      return _findSmallestNode(rootNode.left!);
    // Otherwise, the root node is the smallest node
    } else {
      return rootNode;
    }
  }
}

/// This class represents a node in a binary search tree
class Node<T> {
  /// Value held by the node
  T value;

  /// Left child node
  Node<T>? left;

  /// Right child node
  Node<T>? right;

  /// Constructor for the node
  Node(this.value);
}

// Example usage:
void main() {
  // Create a new binary search tree
  var tree = BinarySearchTree<int>(null);
  
  // Insert values into the tree
  tree.insert(8);
  tree.insert(3);
  tree.insert(1);
  tree.insert(6);
  tree.insert(10);
  tree.insert(14);

  // Search for a value in the tree
  if (tree.search(10)) {
    print("Value 10 was found in the tree!");
  } else {
    print("Value 10 was not found in the tree.");
  }
  
  // Delete a value from the tree
  print("Before deletion:");
  tree.printTree();
  tree.delete(6);
  print("After deletion:");
  tree.printTree();
}