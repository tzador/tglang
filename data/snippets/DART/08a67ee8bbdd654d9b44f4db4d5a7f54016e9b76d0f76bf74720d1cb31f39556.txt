// Defining a generic class
class List<T> {
  List._();
  factory List() = _UnmodifiableList<T>;
  factory List.unmodifiable(Iterable elements) =
      _UnmodifiableList<T>._withIterable;
  T operator [](int index);
  void operator []=(int index, T value);
  int get length;
  Iterator<T> get iterator;
  List<T> operator +(List<T> other);
  List<T> operator -(List<T> other);
  Set<T> toSet();
  Map<int, T> asMap();
  List<T> sublist(int start, [int? end]);
  List<T> getRange(int start, int end);
  void shuffle([Random? random]) converts
  void sort([int compare(T a, T b)?]) converts
  void clear();
  void insert(int index, T element);
  void insertAll(int index, Iterable<T> iterable) converts
  void setAll(int index, Iterable<T> iterable);
  List<T> l1 = [1, 2, 3];
  l1.add(4);
  print(l1); // Output: [1, 2, 3, 4]
}