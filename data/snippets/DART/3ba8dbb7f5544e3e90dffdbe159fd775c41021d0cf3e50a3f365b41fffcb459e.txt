/// This class represents a binary search tree node
class Node {
    int data;
    Node? left;
    Node? right;

    // Constructor to initialize the node
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

/// This function inserts a new node into the binary search tree
void insert(Node? node, int data) {
    /// If the tree is empty, create a new node
    if (node == null) {
        Node newNode = Node(data);
        return;
    }

    /// If the data is less than the current node's data, insert into the left subtree
    else if (data < node.data) {
        /// If the left child is null, insert the new node as the left child
        if (node.left == null) {
            node.left = Node(data);
        }
        /// Otherwise, recursively call the insert function on the left child
        else {
            insert(node.left, data);
        }
    }

    /// If the data is greater than or equal to the current node's data, insert into the right subtree
    else {
        /// If the right child is null, insert the new node as the right child
        if (node.right == null) {
            node.right = Node(data);
        }
        /// Otherwise, recursively all the insert function on the right child
        else {
            insert(node.right, data);
        }
    }
}

/// Code to create a binary search tree and insert nodes
void main() {
    // Create a root node with data of 5
    Node root = Node(5);

    // Insert nodes with data values 3, 8, 1, and 9 into the tree
    insert(root, 3);
    insert(root, 8);
    insert(root, 1);
    insert(root, 9);
}