/**
 * Returns a [List<Widget>] containing the results of two asynchronous functions (fetchData1 and fetchData2) executed in parallel.
 *
 * The [List<Widget>] is then wrapped in a [Scaffold] widget and displayed on the screen.
 *
 * @param fetchData1
 *   Function that returns an [int] representing the number of items retrieved from first API call.
 * @param fetchData2
 *   Function that returns a [double] representing the total cost of items retrieved from second API call.
 *
 * @return
 *   [Future<Scaffold>]
 */
Future<Scaffold> displayDataParallel(
    Function fetchData1, Function fetchData2) async {
  // Execute both functions asynchronously and wait for results to be retrieved
  final results = await Future.wait([fetchData1(), fetchData2()]);
  
  // Extract results from the returned List
  final itemCount = results[0] as int;
  final totalCost = results[1] as double;

  // Create a List of Widgets to display the results
  final List<Widget> dataWidgets = [
    Text(
      'Number of items: $itemCount',
      style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.bold),
    ),
    Text(
      'Total cost: \$$totalCost',
      style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.bold),
    ),
  ];

  // Return the Scaffold with the dataWidgets as the body
  return Scaffold(
      appBar: AppBar(
        title: Text('Data Display'),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: dataWidgets,
        ),
      ));
} 

// Example usage:
displayDataParallel(
  () => Future.delayed(Duration(seconds: 2), () => 10), // Simulate API call to retrieve 10 items
  () => Future.delayed(Duration(seconds: 5), () => 25.99), // Simulate API call to retrieve items costing $25.99 total
);