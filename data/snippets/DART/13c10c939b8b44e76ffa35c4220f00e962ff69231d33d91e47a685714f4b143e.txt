/// This function sorts a list of integers in descending order using the bubble sort algorithm
/// @param myList: list to be sorted
/// @return: sorted list
List<int> bubbleSort(List<int> myList) {
  // variable to store the length of the list
  int n = myList.length;
  // loop through the list n-1 times
  for (int i = 0; i < n-1; i++) {
    // flag variable to track if any swaps were made in the current iteration
  bool swapped = false;
    // loop through the list from index 0 to n-i-1
    for (int j = 0; j < n-i-1; j++) {
      // if current element is greater than its adjacent element, swap them
      if (myList[j] > myList[j+1]) {
        // temporary variable to hold the current element
        int temp = myList[j];
        // swap the current element with its adjacent element
        myList[j] = myList[j+1];
        myList[j+1] = temp;
        // set swapped flag to true
        swapped = true;
      }
    }
    // if no swaps were made in the current iteration, the list is already sorted
    if(!swapped) {
      break;
    }
  }
  // return the sorted list
  return myList;
}

// example usage
void main() {
  // list to be sorted
  List<int> myNumbers = [5, 2, 7, 1, 4];
  // call bubbleSort function, passing in the list
  List<int> sortedNumbers = bubbleSort(myNumbers);
  // print the sorted list
  print(sortedNumbers); // output: [7, 5, 4, 2, 1]
}