List<int> mergeSort(List<int> list) {
  void merge(List<int> left, List<int> right, List<int> merged) {
    int i = 0, j = 0, k = 0;

    while (i < left.length && j < right.length) {
      if (left[i] < right[j]) {
        merged[k] = left[i];
        i++;
      } else {
        merged[k] = right[j];
        j++;
      }
      k++;
    }

    while (i < left.length) {
      merged[k] = left[i];
      i++;
      k++;
    }

    while (j < right.length) {
      merged[k] = right[j];
      j++;
      k++;
    }
  }

  if (list.length <= 1) {
    return list;
  }

  List<int> left = list.sublist(0, list.length ~/ 2);
  List<int> right = list.sublist(list.length ~/ 2);

  left = mergeSort(left);
  right = mergeSort(right);

  List<int> mergedList = List.filled(list.length, 0);
  merge(left, right, mergedList);

  return mergedList;
}