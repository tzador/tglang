/// Sorts a given list using the merge sort algorithm.
/// 
/// Merge sort is a divide and conquer algorithm that works by splitting the list 
/// into smaller sublists, sorting the sublists, and then merging them back together. 
/// This implementation uses a recursive approach to split and merge sublists. 
/// 
/// @param list The list to be sorted.
/// @return The sorted list.
List<T> mergeSort<T extends Comparable>(List<T> list) {
  // Check if the list has only one element, it is already sorted
  if (list.length <= 1) return list;

  // Find the middle index and split the list into two sublists
  int midIndex = list.length ~/ 2;
  List<T> leftList = list.sublist(0, midIndex);
  List<T> rightList = list.sublist(midIndex);

  // Recursively sort the sublists
  leftList = mergeSort(leftList);
  rightList = mergeSort(rightList);

  // Merge the sorted sublists back together
  return _merge(leftList, rightList);
}

/// Merges two sorted lists into one sorted list.
List<T> _merge<T extends Comparable>(List<T> leftList, List<T> rightList) {
  // Create an empty list to hold the merged list
  List<T> mergedList = [];

  // Use index variables to keep track of the current positions of the elements
  // in the left and right lists
  int leftIndex = 0;
  int rightIndex = 0;

  // Loop until one of the lists is exhausted
  while (leftIndex < leftList.length && rightIndex < rightList.length) {
    // Compare the elements at the current positions and add the smaller one
    // to the merged list
    if (leftList[leftIndex].compareTo(rightList[rightIndex]) <= 0) {
      mergedList.add(leftList[leftIndex]);
      leftIndex++;
    } else {
      mergedList.add(rightList[rightIndex]);
      rightIndex++;
    }
  }

  // Add any remaining elements from the left list to the merged list
  while (leftIndex < leftList.length) {
    mergedList.add(leftList[leftIndex]);
    leftIndex++;
  }

  // Add any remaining elements from the right list to the merged list
  while (rightIndex < rightList.length) {
    mergedList.add(rightList[rightIndex]);
    rightIndex++;
  }

  return mergedList;
}

void main() {
  // Example usage
  List<int> numbers = [5, 2, 7, 3, 9, 1, 8, 4, 6];
  print('Unsorted List: $numbers');
  List<int> sortedList = mergeSort(numbers);
  print('Sorted List: $sortedList');
}

/* Output:
Unsorted List: [5, 2, 7, 3, 9, 1, 8, 4, 6]
Sorted List: [1, 2, 3, 4, 5, 6, 7, 8, 9]
*/