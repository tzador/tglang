/// This is a dynamic programming solution for the longest common substring problem.
/// It takes in two strings, str1 and str2, and returns the length of the longest common substring.
int longestCommonSubstring(String str1, String str2) {
  // Initialize a 2D array to store the lengths of common substrings at each index.
  List<List<int>> dp = List.generate(str1.length + 1, (i) => List.filled(str2.length + 1, 0));

  // Variables to keep track of longest substring and its corresponding index.
  int longestSubstring = 0;
  int longestSubstringEndIndex = 0;

  // Loop through the indices of the two strings.
  for (int i = 1; i <= str1.length; i++) {
    for (int j = 1; j <= str2.length; j++) {
      // Compare characters at current indices.
      if (str1[i - 1] == str2[j - 1]) {
        // If characters match, increase length of common substring by 1.
        dp[i][j] = dp[i - 1][j - 1] + 1;
        // Update longest substring and its corresponding index.
        if (dp[i][j] > longestSubstring) {
          longestSubstring = dp[i][j];
          longestSubstringEndIndex = i;
        }
      } else {
        // If characters do not match, set length of common substring to 0.
        dp[i][j] = 0;
      }
    }
  }

  // Return the longest common substring.
  return longestSubstring;
}

// Example usage:
String str1 = "programming";
String str2 = "code";
print("The length of the longest common substring between '$str1' and '$str2' is ${longestCommonSubstring(str1, str2)}.");

// Output: The length of the longest common substring between 'programming' and 'code' is 3.