class CustomList {
  final List<int> _numberList;

  CustomList(this._numberList);

  int get length => _numberList.length;

  // This function will reverse the custom list
  void reverseList() {
    for (int i = 0; i < length ~/ 2; ++i) {
      final int newIdx = length - 1 - i;
      final int temp = _numberList[i];
      _numberList[i] = _numberList[newIdx];
      _numberList[newIdx] = temp;
    }
  }

  // This function will check if the custom list is sorted in ascending order
  bool checkAscendingOrder() {
    for (int i = 0; i < length - 1; ++i) {
      if (_numberList[i] > _numberList[i + 1]) {
        return false;
      }
    }
    return true;
  }

  // This function will find the average of all the elements in the custom list
  double get average => _numberList.reduce((a, b) => a + b) / length.toDouble();

  // This function will return a new custom list with all the elements multiplied by a given factor
  CustomList multiply(int factor) {
    List<int> newList = [];
    for (int num in _numberList) {
      newList.add(num * factor);
    }
    return CustomList(newList);
  }
}

void main() {
  CustomList myCustomList = new CustomList([1, 2, 3, 4, 5]);
  myCustomList.reverseList(); // This will print: [5, 4, 3, 2, 1]
  print(myCustomList.checkAscendingOrder()); // This will print: false
  print(myCustomList.average); // This will print: 3.0
  CustomList multipliedList = myCustomList.multiply(2); // This will create a new custom list with elements [2, 4, 6, 8, 10]
}