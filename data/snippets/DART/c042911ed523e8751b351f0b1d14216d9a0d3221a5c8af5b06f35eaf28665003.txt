List<int> mergeSort(List<int> lst) {
  // Implementing merge sort algorithm
  if (lst.length <= 1) return lst;  // Base case

  // Find the middle element and divide the list into two halves
  int mid = lst.length ~/ 2;
  List<int> left = lst.sublist(0, mid);
  List<int> right = lst.sublist(mid, lst.length);

  // Recursive call on each half
  left = mergeSort(left);
  right = mergeSort(right);

  // Merge the sorted halves
  return merge(left, right);
}

List<int> merge(List<int> left, List<int> right) {
  // Merging two lists in ascending order
  List<int> result = [];

  // Looping through both lists until one is empty
  while (left.isNotEmpty && right.isNotEmpty) {
    if (left.first < right.first) {
      // Add the smaller element from left list to result
      result.add(left.removeAt(0));
    } else {
      // Add the smaller element from right list to result
      result.add(right.removeAt(0));
    }
  }

  // Add the remaining elements from non-empty list to result
  if (left.isNotEmpty) result.addAll(left);
  if (right.isNotEmpty) result.addAll(right);

  return result;
}

void main() {
  // Example usage
  List<int> unsorted = [5, 2, 8, 4, 1, 7, 3, 9, 6];
  print("Unsorted List: $unsorted");
  
  List<int> sorted = mergeSort(unsorted);
  print("Sorted List: $sorted");
}