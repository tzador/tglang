// Defines a class Room with a constructor that takes in a room number and capacity
class Room {
  int roomNumber;
  int capacity;

  // Constructor with optional named parameters
  Room({this.roomNumber, this.capacity});

  // Method to check if the room is available based on a given list of booked rooms
  bool isAvailable(List<Room> bookedRooms) {
    // Loop through the list of booked rooms
    for (var bookedRoom in bookedRooms) {
      // Check if the current room number matches any of the booked rooms
      if (roomNumber == bookedRoom.roomNumber) {
        // If it does, return false as the room is already booked
        return false;
      }
    }
    // If the loop ends without finding a match, return true as the room is available
    return true;
  }
}

// Function to book a room given a list of available rooms and the desired capacity
void bookRoom(List<Room> availableRooms, int desiredCapacity) {
  // Create an empty list to store the booked rooms
  List<Room> bookedRooms = [];
  
  // Loop through the list of available rooms
  for (var availableRoom in availableRooms) {
    // Check if the room is available and if its capacity meets the desired capacity
    if (availableRoom.isAvailable(bookedRooms) && availableRoom.capacity >= desiredCapacity) {
      // If it does, add the room to the list of booked rooms
      bookedRooms.add(availableRoom);
      // Print a success message
      print('${availableRoom.roomNumber} has been booked');
      // Break out of the loop since one room has been booked
      break;
    }
  }
}

// Create a list of available rooms with different room numbers and capacities
List<Room> availableRooms = [
  Room(roomNumber: 101, capacity: 4),
  Room(roomNumber: 102, capacity: 6),
  Room(roomNumber: 103, capacity: 2),
  Room(roomNumber: 104, capacity: 8),
  Room(roomNumber: 105, capacity: 10),
];

// Book a room with a desired capacity of 5
bookRoom(availableRooms, 5);