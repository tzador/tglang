/// This function implements the Knuth-Morris-Pratt algorithm for string searching.
/// It takes in a `pattern` string and a `text` string and returns the starting index of the first occurrence of the pattern in text.
int knuthMorrisPratt(String pattern, String text) {
  final int patternLength = pattern.length;
  final int textLength = text.length;

  /// The pi array stores the longest proper prefix of the pattern that is also a suffix.
  final List<int> pi = List<int>.filled(patternLength + 1, 0);

  /// Pre-computing the pi array to optimize the algorithm.
  for (int i = 1; i < patternLength; i++) {
    int j = pi[i - 1];
    while (j > 0 && pattern[i] != pattern[j]) {
      j = pi[j - 1];
    }
    if (pattern[i] == pattern[j]) {
      j++;
    }
    pi[i] = j;
  }

  /// Beginning the actual pattern matching process.
  int textIndex = 0;
  int patternIndex = 0;
  while (textIndex < textLength && patternIndex < patternLength) {
    if (text[textIndex] == pattern[patternIndex]) {
      textIndex++;
      patternIndex++;
    } else if (patternIndex == 0) {
      textIndex++;
    } else {
      patternIndex = pi[patternIndex - 1];
    }
  }

  /// Checking if the entire pattern was found in the text.
  if (patternIndex == patternLength) {
    return textIndex - patternIndex;
  } else {
    return -1;
  }
}