/// A custom class for creating and manipulating matrices
class Matrix<T> {
  int? numRows, numCols;
  List<List<T>>? data;
  
  /// Default constructor that takes in the number of rows and columns as parameters
  Matrix(this.numRows, this.numCols) {
    data = List<List<T>>.generate(numRows!, (_) => List<T>.filled(numCols!, null));
  }

  /// Method to explore values in a matrix
  T? explore(int rowIndex, int colIndex) {
    if (rowIndex < numRows! && colIndex < numCols!) {
        return data![rowIndex][colIndex];
    }
    return null;
  }

  /// Method to set a value in the specified row and column
  void set(int rowIndex, int colIndex, T value) {
    if (rowIndex < numRows! && colIndex < numCols!) {
        data![rowIndex][colIndex] = value;
    }
  }

  /// Method to perform matrix addition
  Matrix<T> operator +(Matrix<T> other) {
    if (numRows != other.numRows || numCols != other.numCols) {
        throw ArgumentError('Matrices must have the same dimensions for addition');
    }
    Matrix<T> result = Matrix(numRows, numCols);
    for (int i = 0; i < numRows!; i++) {
        for (int j = 0; j < numCols!; j++) {
            result.set(i, j, data![i][j] + other.explore(i, j)!);
        }
    }
    return result;
  }

  /// Method to perform matrix multiplication
  Matrix<T> operator *(Matrix<T> other) {
    if (numCols != other.numRows) {
        throw ArgumentError('Number of columns in first matrix must match number of rows in second matrix');
    }
    Matrix<T> result = Matrix<T>(numRows, other.numCols);
    for (int i = 0; i < numRows!; i++) {
        for (int j = 0; j < other.numCols!; j++) {
            T sum = data![i][0] * other.data![0][j];
            for (int k = 1; k < numCols!; k++) {
                sum += data![i][k] * other.data![k][j];
            }
            result.set(i, j, sum);
        }
    }
    return result;
  }
}