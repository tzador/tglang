/// Creates a new class `Message` which represents a message with a sender, receiver, and content.
///
/// The sender and receiver are of type `User` while the content is a String.
class Message {
    User sender;
    User receiver;
    String content;

    /// Constructor for the `Message` class that takes in the sender, receiver, and content parameters.
    Message(this.sender, this.receiver, this.content);

    /// Method to display the sender, receiver, and content of the message.
    void display() {
        print('${sender.name} sent a message to ${receiver.name}: $content');
    }

    /// Method to check if the sender and receiver of two messages are the same.
    bool hasSameParticipants(Message other) {
        return (this.sender == other.sender) && (this.receiver == other.receiver);
    }
}

/// Defines a `User` class which represents a user with a unique ID and name.
class User {
    int id;
    String name;

    /// Constructor for the `User` class that takes in the user's ID and name parameters.
    User(this.id, this.name);
}

void main() {
    // Creating two users
    User user1 = User(1, 'John');
    User user2 = User(2, 'Jane');

    // Creating two messages with different participants
    Message message1 = Message(user1, user2, 'Hello Jane!');
    Message message2 = Message(user2, user1, 'Hi John!');

    // Displaying the messages
    message1.display();
    message2.display();

    // Checking if the participants are the same
    print(message1.hasSameParticipants(message2));
}