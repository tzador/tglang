// This snippet creates a custom widget with an animated icon button and text
class CustomWidget extends StatefulWidget {

  // Variables to hold the widget's properties
  final String text;
  final double size;
  final Color color;

  // Constructor with named parameters
  const CustomWidget({Key key, this.text, this.size, this.color}) : super(key: key);

  @override
  _CustomWidgetState createState() => _CustomWidgetState();
}

class _CustomWidgetState extends State<CustomWidget> with SingleTickerProviderStateMixin {

  // Animation controller for the icon button's animation
  AnimationController _animationController;
  // Animation type (from Tween) for the icon button's animation
  Animation<double> _iconAnimation;

  @override
  void initState() {
    super.initState();
    
    // Initialize the animation controller with duration and listener
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    )..addListener(() {
      // Rebuild the widget after each animation frame
      setState(() {});
    });

    // Initialize the animation with a Tween
    _iconAnimation = Tween(begin: 0.0, end: 1.0).animate(_animationController);
    // Start the animation
    _animationController.forward();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      child: Column(
        children: <Widget>[
          // Animated icon button that triggers the animation
          IconButton(
            icon: Icon(Icons.favorite),
            onPressed: () {
              // Reverse the animation when the button is pressed
              _animationController.reverse();
            },
          ),
          // Text widget that shows the given text
          Text(
            widget.text,
            style: TextStyle(
              fontSize: widget.size,
              color: widget.color,
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    // Dispose the animation controller when the widget is disposed
    _animationController.dispose();
    super.dispose();
  }
}