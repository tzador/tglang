/// This method performs a depth-first search on a given graph
/// and outputs all the vertices in the order they are visited
List<Vertex> depthFirstSearch(Graph g, Vertex start) {
  // creating an empty list for storing visited vertices
  List<Vertex> visited = [];
  // creating a stack to keep track of the vertices to visit
  Stack<Vertex> stack = Stack();
  // adding the start vertex to the stack
  stack.add(start);
  // while the stack is not empty
  while (stack.isNotEmpty) {
    // removing the top vertex from the stack
    Vertex current = stack.pop();
    // checking if the vertex has not been visited before
    if (!visited.contains(current)) {
      // adding the current vertex to the visited list
      visited.add(current);
      // getting the neighbors of the current vertex
      List<Vertex> neighbors = g.getNeighbors(current);
      // adding the neighbors to the stack, in reverse order
      for (int i = neighbors.length - 1; i >= 0; i--) {
        stack.add(neighbors[i]);
      }
    }
  }
  // returning the list of visited vertices
  return visited;
}