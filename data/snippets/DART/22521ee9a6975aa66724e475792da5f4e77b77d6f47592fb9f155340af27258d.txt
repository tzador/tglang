/// This code snippet generates a list of prime numbers within a given range
/// using the Sieve of Eratosthenes algorithm.
/// Input: [n] - The upper limit of the range
/// Output: [List] - A list of prime numbers within the range
List<int> sieveOfEratosthenes(int n) {
  // Create a list of numbers from 2 to n
  List<int> numbersList = List<int>.generate(n - 1, (i) => i + 2);

  // Create an empty list for prime numbers
  List<int> primeNumbers = [];

  // Loop through the numbersList
  for (int i = 0; i < numbersList.length; i++) {
    // If the value is not null, add it to the primeNumbers list
    if (numbersList[i] != null) {
      primeNumbers.add(numbersList[i]);

      // Loop through the remaining numbers
      for (int j = i + numbersList[i]; j < numbersList.length; j += numbersList[i]) {
        // Set the value to null if it is a multiple of the current number
        numbersList[j] = null;
      }
    }
  }

  // Return the primeNumbers list
  return primeNumbers;
}

// Example usage
void main() {
  const upperLimit = 20;
  List<int> primeNumbers = sieveOfEratosthenes(upperLimit);
  print(primeNumbers); // Output: [2, 3, 5, 7, 11, 13, 17, 19]
}