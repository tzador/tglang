/// This function will sort a list of integers using the bubble sort algorithm.
/// It takes in a list of integers as a parameter and returns a sorted list.
List<int> bubbleSort(List<int> numbers) {
  // Swap function to swap two elements in the list
  void swap(int leftIndex, int rightIndex) {
    int temp = numbers[leftIndex];
    numbers[leftIndex] = numbers[rightIndex];
    numbers[rightIndex] = temp;
  }

  // Traverse through the list n number of times, where n is the length of the list
  for (var i = 0; i < numbers.length; i++) {
    // Flag to check if any swaps were made in a particular iteration
    bool swapped = false;

    // Traverse through the unsorted portion of the list (from index 0 to n-i-1)
    // and swap adjacent elements if they are not in the right order
    for (var j = 0; j < numbers.length - i - 1; j++) {
      // If the left element is greater than the right element, swap them
      if (numbers[j] > numbers[j + 1]) {
        swap(j, j + 1);
        swapped = true;
      }
    }

    // If no swaps were made in this iteration, the list is already sorted
    // and we can break out of the loop
    if (!swapped) {
      break;
    }
  }

  // Return the sorted list
  return numbers;
}

// Example usage:
void main() {
  // Create a list of unsorted integers
  List<int> numbers = [5, 3, 1, 7, 4, 9, 2];

  // Call the bubbleSort function and pass the unsorted list as a parameter
  List<int> sortedNumbers = bubbleSort(numbers);

  // Print the sorted list
  print(sortedNumbers); // Output: [1, 2, 3, 4, 5, 7, 9]
}