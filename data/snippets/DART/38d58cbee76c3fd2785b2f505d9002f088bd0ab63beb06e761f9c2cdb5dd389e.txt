/// This method implements the merge sort algorithm.
/// 
/// @param list the list to be sorted
/// @param start the starting index of the list
/// @param end the ending index of the list
void mergeSort(List list, int start, int end) {

  // base case
  if (start >= end) return;

  // get the middle index
  int mid = (start + end) ~/ 2;

  // recursively sort the two halves
  mergeSort(list, start, mid);
  mergeSort(list, mid + 1, end);

  // temporary list to store the sorted elements
  List tempList = [];

  // pointers for the two halves of the list
  int i = start;
  int j = mid + 1;

  // merge the two sorted halves
  while (i <= mid && j <= end) {
    if (list[i] <= list[j]) {
      tempList.add(list[i]);
      i++;
    } else {
      tempList.add(list[j]);
      j++;
    }
  }

  // add any remaining elements from the first half
  while (i <= mid) {
    tempList.add(list[i]);
    i++;
  }

  // add any remaining elements from the second half
  while (j <= end) {
    tempList.add(list[j]);
    j++;
  }

  // copy the sorted elements back into the original list
  for (int k = 0; k < tempList.length; k++) {
    list[start + k] = tempList[k];
  }
}