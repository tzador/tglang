/// This is a function that checks if a number is a prime number
/// Prime numbers are positive integers that can only be divided by 1 and itself
bool isPrime(int n) {
  // Return false if n is less than 2
  if (n < 2) {
    return false;
  }
  // Start checking for factors from 2 up to the square root of n
  // Using square root saves memory compared to checking all numbers up to n
  for (int i = 2; i * i <= n; i++) {
    // If n is divisible by any number, it is not a prime number
    if (n % i == 0) {
      return false;
    }
  }
  // If no factors are found, n is a prime number
  return true;
}

/// This is a function that generates a list of the first n prime numbers
List<int> primeList(int n) {
  List<int> result = [];
  // Current number to check if it is prime
  int currentNumber = 2;
  // Keep generating prime numbers until n numbers are found
  while (result.length < n) {
    // Check if currentNumber is prime
    if (isPrime(currentNumber)) {
      // If it is prime, add it to the result list
      result.add(currentNumber);
    }
    // Increment currentNumber by 1 for the next iteration
    currentNumber++;
  }
  // Return the list of prime numbers
  return result;
}

void main() {
  // Generate a list of the first 10 prime numbers
  List<int> firstTenPrimes = primeList(10);
  // Print the list
  print(firstTenPrimes); // Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
}