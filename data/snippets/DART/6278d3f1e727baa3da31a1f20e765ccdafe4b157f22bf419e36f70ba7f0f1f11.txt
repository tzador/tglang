/// This is a dynamic programming algorithm that solves the longest common subsequence problem.
/// It uses a 2D matrix to store the results of overlapping subproblems.
/// The inputs are two strings, str1 and str2, and the output is the length of the longest common subsequence.
int lcs(String str1, String str2) {
  // Initialize a 2D matrix of size (str1.length + 1) * (str2.length + 1).
  List<List<int>> matrix = List.generate(
    str1.length + 1,
    (i) => List.filled(str2.length + 1, 0),
    growable: false,
  );
  // Loop through the matrix to fill in the values.
  for (int i = 1; i <= str1.length; i++) {
    for (int j = 1; j <= str2.length; j++) {
      if (str1[i - 1] == str2[j - 1]) {
        // If the characters at the current positions match, add 1 to the value of the previous diagonal cell.
        matrix[i][j] = matrix[i - 1][j - 1] + 1;
      } else {
        // Otherwise, take the maximum value between the cell above and the cell to the left.
        matrix[i][j] = matrix[i - 1][j] > matrix[i][j - 1] ? matrix[i - 1][j] : matrix[i][j - 1];
      }
    }
  }
  // Return the value at the bottom right corner of the matrix, which is the length of the longest common subsequence.
  return matrix[str1.length][str2.length];
}