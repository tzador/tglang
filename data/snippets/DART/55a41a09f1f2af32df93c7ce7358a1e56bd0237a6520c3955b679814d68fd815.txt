/// Creates an interactive map that allows zooming and panning.
class InteractiveMap extends StatefulWidget {
  @override
  _InteractiveMapState createState() => _InteractiveMapState();
}

/// Represents the state of the interactive map.
class _InteractiveMapState extends State<InteractiveMap> {
  /// The minimum zoom level for the map.
  final int _minZoomLevel = 1;

  /// The maximum zoom level for the map.
  final int _maxZoomLevel = 10;

  /// The current zoom level of the map.
  int _zoomLevel;

  /// The current coordinates of the map center.
  Point _mapCenter;

  /// The list of markers to be displayed on the map.
  List<Marker> _markers = [];

  @override
  void initState() {
    super.initState();
    _zoomLevel = _minZoomLevel; // initialize zoom level to minimum
    _mapCenter = Point(0, 0); // initialize map center to (0,0)
  }

  /// Updates the zoom level when the user interacts with the map.
  void _onZoomUpdate(int newZoomLevel) {
    // make sure new zoom level is within range
    if (newZoomLevel >= _minZoomLevel && newZoomLevel <= _maxZoomLevel) {
      setState(() {
        _zoomLevel = newZoomLevel;
      });
    }
  }

  /// Updates the map center when the user pans the map.
  void _onPanUpdate(Point newMapCenter) {
    setState(() {
      _mapCenter = newMapCenter;
    });
  }

  /// Adds a new marker to the map.
  void _addMarker(Marker newMarker) {
    setState(() {
      _markers.add(newMarker);
    });
  }

  /// Removes a marker from the map.
  void _removeMarker(Marker markerToRemove) {
    setState(() {
      _markers.remove(markerToRemove);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container( 
      // container to hold the interactive map
      child: GestureDetector(
        // gesture detector for detecting user interaction
        onScaleUpdate: (ScaleUpdateDetails details) {
          // update zoom level when user pinches the map
          _onZoomUpdate(_zoomLevel + (details.scale * 2).toInt());
        },
        onPanUpdate: (DragUpdateDetails details) {
          // update map center when user drags the map
          _onPanUpdate(Point(_mapCenter.x + details.delta.dx, _mapCenter.y + details.delta.dy));
        },
        child: CustomPaint(
          // custom paint widget to draw the map
          size: Size.infinite,
          painter: MapPainter(
            zoomLevel: _zoomLevel,
            mapCenter: _mapCenter,
            markers: _markers,
          ),
        ),
      ),
    );
  }
}

/// The class for representing a point on the map.
class Point {
  final double x;
  final double y;

  Point(this.x, this.y);
}

/// The class for representing a marker on the map.
class Marker {
  final Point location; // location of marker on the map
  final String name; // name of the marker

  Marker({@required this.location, this.name});
}

/// The custom painter class for drawing the map.
class MapPainter extends CustomPainter {
  final int zoomLevel;
  final Point mapCenter;
  final List<Marker> markers;

  MapPainter({this.zoomLevel, this.mapCenter, this.markers});

  @override
  void paint(Canvas canvas, Size size) {
    // TODO: implement paint
  }

  @override
  bool shouldRepaint(MapPainter oldDelegate) {
    // TODO: implement shouldRepaint
    return true;
  }
}