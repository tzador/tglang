/** This class represents a 2D vector. */
class Vector2D { 
  double x, y;

  /** Constructs a vector with specified coordinates. */ 
  Vector2D(this.x, this.y); 

  /** Returns the magnitude (length) of this vector. */
  double get magnitude => Math.sqrt(x * x + y * y); 
    
  /** Returns a new vector that is the sum of this and [other]. */
  Vector2D operator +(Vector2D other) { 
    return new Vector2D(x + other.x, y + other.y); 
  } 

  /** Returns a new vector that is the difference between this and [other]. */
  Vector2D operator -(Vector2D other) { 
    return new Vector2D(x - other.x, y - other.y); 
  } 

  /** Returns a new vector that is the result of scaling this vector by [factor]. */
  Vector2D operator *(double factor) { 
    return new Vector2D(x * factor, y * factor); 
  } 

  /** Returns a new vector that is the result of dividing this vector by [factor]. */
  Vector2D operator /(double factor) { 
    return new Vector2D(x / factor, y / factor); 
  } 

  /** Returns true if this vector is equal to [other]. */
  bool operator ==(Object other) { 
    return other is Vector2D && x == other.x && y == other.y; 
  } 

  /** Returns the dot product of this and [other]. */
  double dot(Vector2D other) => x * other.x + y * other.y; 

  /** Returns a new vector that is the result of rotating this vector by [angle] radians. */
  Vector2D rotate(double angle) { 
    double cos = Math.cos(angle); 
    double sin = Math.sin(angle); 
    
    return new Vector2D(x * cos - y * sin, x * sin + y * cos); 
  } 

  /** Returns a string representation of this vector. */
  @override 
  String toString() => '[${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)}]'; 
}