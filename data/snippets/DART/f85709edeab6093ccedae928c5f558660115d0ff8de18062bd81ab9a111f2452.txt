class LinkedList<T> {
  Node<T> _head;

  // A function that adds a new node to the end of the linked list
  void add(T value) {
    var newNode = Node(value);
    
    if(_head == null) {
      _head = newNode;
    }
    else {
      var current = _head;
      while(current.next != null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  // A function that inserts a new node at the specified index
  void insert(T value, int index) {
    if(index < 0 || index >= length) {
      throw ArgumentError("Index is out of range");
    }
    else if(index == 0) {
      _head = Node(value, _head);
    }
    else {
      var current = _head;
      for(var i = 1; i < index; i++) {
        current = current.next;
      }
      current.next = Node(value, current.next);
    }
  }

  // A function that removes a node from the linked list
  void remove(T value) {
    if(_head == null) {
      throw StateError("Cannot remove from empty list");
    }
    else if(_head.value == value) {
      _head = _head.next;
    }
    else {
      var current = _head;
      while(current.next != null) {
        if(current.next.value == value) {
          current.next = current.next.next;
          break;
        }
        current = current.next;
      }
    }
  }

  // A function that checks if the linked list contains a specific value
  bool contains(T value) {
    var current = _head;
    while(current != null) {
      if(current.value == value) {
        return true;
      }
      current = current.next;
    }
    return false;
  }

  // A property that returns the length of the linked list
  int get length {
    var current = _head;
    var count = 0;
    while(current != null) {
      count++;
      current = current.next;
    }
    return count;
  }

  // A function that reverses the linked list
  void reverse() {
    if(_head == null || _head.next == null) {
      return;
    }
    var current = _head;
    Node<T> previous;
    Node<T> next;
    while(current != null) {
      next = current.next;
      current.next = previous;
      previous = current;
      current = next;
    }
    _head = previous;
  }

}

class Node<T> {
  T value;
  Node next;

  Node(this.value, [this.next]);
}