// This snippet creates a custom paint widget
class CustomPaint extends RenderObjectWidget {
  // Create a custom paint element
  @override
  RenderObjectElement createElement() => _CustomPaintElement(this);

  // Define custom properties
  final int strokeWidth;
  final Color strokeColor;
  final Color fillColor;

  // Constructor for the widget
  const CustomPaint({
    Key key,
    this.strokeWidth = 2,
    this.strokeColor = Colors.black,
    this.fillColor = Colors.white,
  }) : super(key: key);

  // Build method to define how the widget looks
  @override
  _CustomPainter createRenderObject(BuildContext context) {
    return _CustomPainter(
        strokeWidth: strokeWidth,
        strokeColor: strokeColor,
        fillColor: fillColor);
  }

  // Method to update the widget based on new properties
  @override
  void updateRenderObject(
      BuildContext context, covariant _CustomPainter renderObject) {
    renderObject
      ..strokeWidth = strokeWidth
      ..strokeColor = strokeColor
      ..fillColor = fillColor;
  }
}

// Class for the custom paint element
class _CustomPaintElement extends RenderObjectElement {
  
  // Constructor for the custom paint element
  _CustomPaintElement(CustomPaint widget) : super(widget);

  // Method to update the element based on new properties
  @override
  void update(CustomPaint newWidget) {
    super.update(newWidget);
    renderObject
      ..strokeWidth = newWidget.strokeWidth
      ..strokeColor = newWidget.strokeColor
      ..fillColor = newWidget.fillColor;
  }

  // Method to create the render object
  @override
  _CustomPainter get renderObject => super.renderObject;

  // Method to determine whether the widget needs to be repainted
  @override
  void forgetChild(Element child) {
    super.forgetChild(child);
    renderObject.markNeedsPaint();
  }
}

// Custom painter class to define the visual appearance of the widget
class _CustomPainter extends RenderCustomPaint {
  // Constructor for the custom painter
  _CustomPainter({
    @required int strokeWidth,
    @required Color strokeColor,
    @required Color fillColor,
  }) : super(
          painter: _Painter(
            strokeWidth: strokeWidth,
            strokeColor: strokeColor,
            fillColor: fillColor,
          ),
        );
}

// Private class to handle the actual painting logic
class _Painter extends CustomPainter {
  // Define custom properties
  final int strokeWidth;
  final Color strokeColor;
  final Color fillColor;

  // Constructor for the painter
  _Painter({
    @required this.strokeWidth,
    @required this.strokeColor,
    @required this.fillColor,
  });

  // Method to perform the actual painting
  @override
  void paint(Canvas canvas, Size size) {
    Path path = Path()
      ..moveTo(50, 50)
      ..lineTo(50, 150)
      ..lineTo(150, 150)
      ..lineTo(150, 50)
      ..close();

    Paint paint = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth
      ..color = strokeColor;

    canvas.drawPath(path, paint);

    Paint fillPaint = Paint()
      ..style = PaintingStyle.fill
      ..color = fillColor;

    canvas.drawPath(path, fillPaint);
  }

  // Method to determine whether to repaint based on new properties
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return oldDelegate is _Painter &&
        (oldDelegate.strokeWidth != strokeWidth ||
            oldDelegate.strokeColor != strokeColor ||
            oldDelegate.fillColor != fillColor);
  }
}