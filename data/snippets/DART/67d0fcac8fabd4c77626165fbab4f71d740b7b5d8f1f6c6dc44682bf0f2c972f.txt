/// This is a Dart code snippet
///
/// This program finds the longest common subsequence between two strings
void main() {

  // Input strings
  String str1 = "programming";
  String str2 = "coding";

  // Get length of input strings
  int m = str1.length;
  int n = str2.length;

  // Define a 2D array to store subproblems
  List<List<int>> matrix = [];

  // Fill the matrix with initial values
  for (int i = 0; i <= m; i++) {
    matrix.add([]);
    for (int j = 0; j <= n; j++) {
      matrix[i].add(0);
    }
  }

  // Perform bottom-up approach of the LCS algorithm
  for (int i = 1; i <= m; i++) {
    for (int j = 1; j <= n; j++) {
      if (str1[i - 1] == str2[j - 1]) {
        // Add one to the previous LCS value for matching character
        matrix[i][j] = matrix[i - 1][j - 1] + 1;
      } else {
        // Take the maximum value of the previous left and top values
        matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]);
      }
    }
  }

  // Print the longest common subsequence
  print("Longest Common Subsequence:");
  printLCS(matrix, str1, str2, m, n);
}

/// This function prints the longest common subsequence
/// using the values stored in the matrix
void printLCS(List<List<int>> matrix, String x, String y, int i, int j) {
  // Check for base case - if either string is empty
  if (i == 0 || j == 0) {
    return;
  }
  // If current characters match, print them and move diagonally up
  if (x[i - 1] == y[j - 1]) {
    printLCS(matrix, x, y, i - 1, j - 1);
    print(x[i - 1]);
  }
  // If previous left value is greater than previous top value, move left
  else if (matrix[i - 1][j] > matrix[i][j - 1]) {
    printLCS(matrix, x, y, i - 1, j);
  }
  // If previous top value is greater than previous left value, move top
  else {
    printLCS(matrix, x, y, i, j - 1);
  }
}

/// Output:
/// Longest Common Subsequence:
/// o
/// i
/// n
/// g