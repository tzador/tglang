/// This function implements the Sieve of Eratosthenes algorithm to find all prime numbers up to a given number.
/// It takes in a positive integer and returns a list of primes.
List<int> findPrimes(int limit) {
  // create a boolean list to mark numbers as either prime or composite
  List<bool> primeList = List.generate(limit + 1, (i) => true);

  // 0 and 1 are not prime numbers, so set their values to false
  primeList[0] = false;
  primeList[1] = false;

  // loop through the list, starting at 2, which is the first prime number
  for (int i = 2; i * i <= limit; i++) {
    // check if the current number is already marked as composite
    if (primeList[i] == true) {
      // loop through all multiples of the current number and mark them as composite
      for (int j = i * i; j <= limit; j += i) {
        primeList[j] = false;
      }
    }
  }

  // create a list to store the prime numbers
  List<int> primes = [];

  // loop through the boolean list and add all true values (prime numbers) to the list
  for (int i = 0; i <= limit; i++) {
    if (primeList[i] == true) {
      primes.add(i);
    }
  }

  // return the list of prime numbers
  return primes;
}

// example function call
List<int> listOfPrimes = findPrimes(100);
print(listOfPrimes); // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]