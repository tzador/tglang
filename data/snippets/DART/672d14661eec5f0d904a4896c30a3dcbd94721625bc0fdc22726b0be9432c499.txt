/// This function implements the quicksort algorithm to sort a list of integers
void quickSort(List<int> list, int low, int high) {
  // pick a pivot element
  int pivot = list[(low + (high - low) / 2).toInt()];
  int i = low;
  int j = high;

  // divide the list into two sublists
  while (i <= j) {
    // find elements to swap
    while (list[i] < pivot) {
      i++;
    }
    while (list[j] > pivot) {
      j--;
    }

    // swap elements
    if (i <= j) {
      int temp = list[i];
      list[i] = list[j];
      list[j] = temp;
      i++;
      j--;
    }
  }

  // recursively call quickSort for left and right sublists
  if (low < j) {
    quickSort(list, low, j);
  }
  if (i < high) {
    quickSort(list, i, high);
  }
}

// example usage
void main() {
  List<int> unsorted = [8, 5, 2, 9, 1, 3, 6, 4, 7];
  quickSort(unsorted, 0, unsorted.length - 1);
  print(unsorted);
}