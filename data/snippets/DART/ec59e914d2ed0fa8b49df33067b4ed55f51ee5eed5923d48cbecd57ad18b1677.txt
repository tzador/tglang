/// This function uses dynamic programming to find the longest common subsequence between two given strings
/// @param str1 The first string
/// @param str2 The second string
/// @return The length of the longest common subsequence
int longestCommonSubsequence(String str1, String str2) {
  
  // Initializing a 2D array to store subproblem solutions
  List<List<int>> dp = List.generate(str1.length+1, (_) => List<int>.filled(str2.length+1, 0));
  
  // Looping through each character in both strings
  for (int i = 1; i <= str1.length; i++) {
    for (int j = 1; j <= str2.length; j++) {
      
      // If characters match, increase the length of the subsequence by 1
      if (str1[i-1] == str2[j-1]) {
        dp[i][j] = dp[i-1][j-1] + 1;
      } else {
        
        // Otherwise, take the maximum of the lengths of the subsequence by excluding one of the characters
        dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
      }
    }
  }
  
  // The last value in the 2D array will contain the length of the longest common subsequence
  return dp[str1.length][str2.length];
}

// Example usage
void main() {
  String string1 = "programming";
  String string2 = "language";
  int longest = longestCommonSubsequence(string1, string2);
  print("The longest common subsequence between $string1 and $string2 is $longest");
}