/// This code snippet creates a function that calculates the nth Fibonacci number using recursion
/// with dynamic programming for optimization

int fibonacci(int n) {
    // base case: when n is 0 or 1, return n
    if (n < 2) {
        return n;
    }

    // initialize a list to store calculated Fibonnaci numbers
    List<int> memo = [];

    // create a helper function for recursion
    int helper(int n) {
        // if the nth Fibonacci number has already been calculated, return it
        if (memo.length > n && memo[n] != null) {
          return memo[n];
        }

        // recursively calculate the nth Fibonacci number and store it in memo
        memo[n] = helper(n - 1) + helper(n - 2);
        return memo[n];
    }

    // call the helper function with initial values
    return helper(n);
}

// example usage
int result = fibonacci(10);
print('The 10th Fibonacci number is $result');  // Output: The 10th Fibonacci number is 55