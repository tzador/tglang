class Person {
  String _firstName; //private variable
  String? middleName; //nullable variable
  String _lastName; //private variable
  int _age; //private variable
  List<String> _hobbies; //private list variable

  //Constructor with named parameters
  Person({
    required String firstName,
    this.middleName,
    required String lastName,
    int age = 0,
    List<String> hobbies = const [],
  })  : _firstName = firstName,
        _lastName = lastName,
        _age = age,
        _hobbies = hobbies;

  //Getter for age
  int get age => _age;

  //Setter for age
  set age(int newAge) {
    _age = newAge;
  }

  //Method to print full name
  String printFullName() {
    return '$_firstName ${middleName ?? ""} $_lastName';
  }

  //Method to add hobbies
  void addHobby(String hobby) {
    //Check if hobby is null or empty
    if (hobby == null || hobby == "") {
      //Throw an error
      throw ArgumentError('Hobby cannot be null or empty!');
    }

    //Add hobby to list
    _hobbies.add(hobby);
  }

  //Method to remove hobbies
  void removeHobby(String hobby) {
    //Check if hobby is null or empty
    if (hobby == null || hobby == "") {
      //Throw an error
      throw ArgumentError('Hobby cannot be null or empty!');
    }

    //If hobby list contains the hobby
    if (_hobbies.contains(hobby)) {
      //Remove it from the list
      _hobbies.remove(hobby);
    }
  }
}

//Create an instance of Person class
Person person = Person(
  firstName: 'John',
  lastName: 'Doe',
  age: 30,
  hobbies: ['Reading', 'Gardening', 'Photography'],
);

//Print the full name of the person
print('Name: ${person.printFullName()}');

//Change the age of the person
person.age = 35;

//Add a new hobby
person.addHobby('Cooking');

//Remove a hobby
person.removeHobby('Photography');

//Print the new age and hobbies of the person
print('Age: ${person.age}');
print('Hobbies: ${person._hobbies}');