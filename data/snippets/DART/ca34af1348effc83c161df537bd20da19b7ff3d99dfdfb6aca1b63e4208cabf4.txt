/// This class represents a custom data structure called Binary Tree, which is made up of nodes that have a left and right child.
/// The BinaryTree class has methods for inserting, removing, and searching for nodes within the tree.
class BinaryTree {
    Node root; // The root node of the tree
    
    /// This method inserts a new node into the tree in the appropriate position based on its value.
    /// @param value The value of the new node to be inserted
    /// @return void
    void insert(int value){
        // If the root node is null, set the root to be the new node
        if (root == null){
            root = Node(value);
        } else {
            // Otherwise, call the _insertNode method to recursively find the appropriate position for the new node
            _insertNode(root, value);
        }
    }

    /// This recursive method searches for the appropriate position for the new node and inserts it there.
    /// @param currentNode The current node being evaluated
    /// @param value The value of the new node to be inserted
    /// @return void
    void _insertNode(Node currentNode, int value){
        // If the value is less than the current node's value, go to the left child
        if (value < currentNode.value){
            // If the left child is null, create a new node and set it as the left child
            if (currentNode.leftChild == null){
                currentNode.leftChild = Node(value);
            } else {
                // Otherwise, recursively call this method on the left child
                _insertNode(currentNode.leftChild, value);
            }
        } else {
            // If the value is greater than or equal to the current node's value, go to the right child
            // If the right child is null, create a new node and set it as the right child
            if (currentNode.rightChild == null){
                currentNode.rightChild = Node(value);
            } else {
                // Otherwise, recursively call this method on the right child
                _insertNode(currentNode.rightChild, value);
            }
        }
    }

    /// This method removes a node with the specified value from the tree.
    /// @param value The value of the node to be removed
    /// @return void
    void remove(int value){
        // If the root node is null, there is nothing to remove
        if (root == null) return;
        // Otherwise, call the _removeNode method to recursively search for and remove the node with the specified value
        root = _removeNode(root, value);
    }

    /// This recursive method searches for and removes the node with the specified value from the tree.
    /// @param currentNode The current node being evaluated
    /// @param value The value of the node to be removed
    /// @return the node that takes the place of the removed node in the tree, or null if no replacement was found
    Node _removeNode(Node currentNode, int value){
        // If the value is less than the current node's value, go to the left child
        if (value < currentNode.value){
            // If the left child is null, the specified value does not exist in the tree
            if (currentNode.leftChild == null) return null; 
            // Otherwise, recursively call this method on the left child
            currentNode.leftChild = _removeNode(currentNode.leftChild, value);
        } else if (value > currentNode.value){ 
            // If the value is greater than the current node's value, go to the right child
            // If the right child is null, the specified value does not exist in the tree
            if (currentNode.rightChild == null) return null;
            // Otherwise, recursively call this method on the right child
            currentNode.rightChild = _removeNode(currentNode.rightChild, value);
        } else {
            // If the value is equal to the current node's value, we have found the node to be removed
            // If the node has no children, just return null to remove it from the tree
            if (currentNode.leftChild == null && currentNode.rightChild == null) return null; 
            // If the node has no right child, replace it with its left child
            if (currentNode.rightChild == null) return currentNode.leftChild;
            // If the node has no left child, replace it with its right child
            if (currentNode.leftChild == null) return currentNode.rightChild;
            // If the node has both left and right child, find the minimum value in the right subtree to replace the node's value
            currentNode.value = _findMinValue(currentNode.rightChild);
            // Recursively remove the node with the minimum value from the right subtree
            currentNode.rightChild = _removeNode(currentNode.rightChild, currentNode.value);
        }
        // If none of the above conditions were met, return the updated current node
        return currentNode;
    }

    /// This recursive method finds the minimum value in the specified subtree.
    /// @param currentNode The current node being evaluated
    /// @return the minimum value found in the specified subtree.
    int _findMinValue(Node currentNode){
        // If the left child is null, we have reached the minimum value
        if (currentNode.leftChild == null) return currentNode.value;
        // Otherwise, recursively call this method on the left child
        return _findMinValue(currentNode.leftChild);
    }

    /// This method searches for a node with the specified value in the tree.
    /// @param value The value of the node to be searched for
    /// @return true if the node with the specified value exists in the tree, false otherwise
    bool contains(int value){
        // If the root node is null, the tree is empty
        if (root == null) return false;
        // Otherwise, call the _contains method to recursively search for the node with the specified value
        return _contains(root, value);
    }

    /// This recursive method searches for a node with the specified value in the tree.
    /// @param currentNode The current node being evaluated
    /// @param value The value of the node to be searched for
    /// @return true if the node with the specified value exists in the tree, false otherwise
    bool _contains(Node currentNode, int value){
        // If the value is equal to the current node's value, we have found the node
        if (currentNode.value == value) return true;
        // If the value is less than the current node's value, go to the left child
        if (value < currentNode.value){
            // If the left child is null, the specified value does not exist in the tree
            if (currentNode.leftChild == null) return false;
            // Otherwise, recursively call this method on the left child
            return _contains(currentNode.leftChild, value);
        } else {
            // If the value is greater than the current node's value, go to the right child
            // If the right child is null, the specified value does not exist in the tree
            if (currentNode.rightChild == null) return false;
            // Otherwise, recursively call this method on the right child
            return _contains(currentNode.rightChild, value);
        }
    }
}

/// This class represents a node in the Binary Tree data structure.
class Node {
    int value; // The value contained in the node
    Node leftChild; // The left child node
    Node rightChild; // The right child node

    /// Constructor that takes in a value and sets it as the value of the node.
    /// @param value The value to be set for the node
    Node(this.value);
}