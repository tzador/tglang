// A recursive function that generates a list of all permutations of a given string

List<String> getPermutations(String text, [int index = 0]) {
  // base case: when index reaches the length of the text
  if (index == text.length) {
    return [text];
  }

  // recursive case: when index is less than text length
  List<String> permutations = [];

  // get all permutations of the remaining portion of text after the current index
  List<String> subPermutations = getPermutations(text, index + 1);

  // iterate through the sub permutations and insert the current character at all possible positions
  for (String subPermutation in subPermutations) {
    for (int i = 0; i <= subPermutation.length; i++) {
      // since dart strings are immutable, we need to split the string into a list of characters to insert the current character
      List<String> characters = subPermutation.split("");
      characters.insert(i, text[index]);
      permutations.add(characters.join(""));
    }
  }

  return permutations;
}

// main function to generate permutations of a given string
void main() {
  String input = "abc"; // the string for which permutations need to be generated
  List<String> permutations = getPermutations(input); // function call
  print(permutations); // output: [abc, acb, bac, cab, cba, bca]
}