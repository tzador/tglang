/// An abstract class that represents a kitchen appliance
abstract class KitchenAppliance {
    int voltage; // The voltage of the appliance
    String manufacturer; // The brand or company that manufactures the appliance

    /// Method to turn on the appliance
    void turnOn() {
        print('Appliance turned on');
    }

    /// Method to turn off the appliance
    void turnOff() {
        print('Appliance turned off');
    }

    /// Abstract method to cook a dish
    void cook(String dishName);
}

/// A class that represents a microwave, which extends the KitchenAppliance class
class Microwave extends KitchenAppliance {
    int watts; // The watts of the microwave

    /// Constructor for the Microwave class
    /// Takes in the voltage, manufacturer, and watts
    Microwave(this.voltage, this.manufacturer, this.watts);

    @override
    void cook(String dishName) {
        print('Cooking $dishName in the microwave');
    }
}

/// A class that represents a coffee maker, which extends the KitchenAppliance class
class CoffeeMaker extends KitchenAppliance {
    int cups; // The number of cups the coffee maker can brew

    /// Constructor for the CoffeeMaker class
    /// Takes in the voltage, manufacturer, and cups
    CoffeeMaker(this.voltage, this.manufacturer, this.cups);

    @override
    void cook(String dishName) {
        print('Brewing $cups cups of coffee in the coffee maker');
    }
}

void main() {
    // Creating a new microwave instance
    var microwave = Microwave(110, 'Samsung', 900);
    microwave.turnOn(); // Turning on the microwave
    microwave.cook('Popcorn'); // Cooking popcorn in the microwave

    // Creating a new coffee maker instance
    var coffeeMaker = CoffeeMaker(220, 'Keurig', 6);
    coffeeMaker.turnOn(); // Turning on the coffee maker
    coffeeMaker.cook('Coffee'); // Brewing 6 cups of coffee in the coffee maker
}