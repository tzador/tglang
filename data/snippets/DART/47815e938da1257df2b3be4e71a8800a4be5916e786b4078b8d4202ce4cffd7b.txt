/// This function uses memoization to improve
/// performance by storing previously calculated
/// values and avoiding unnecessary recursion
/// @param number the number to calculate the fibonacci sequence for
dynamic fib(int number) {
  Map<int, dynamic> memo = Map();
  if (memo[number] != null) {
    return memo[number];
  }
  if (number <= 2) return 1;
  var result = fib(number - 1) + fib(number - 2);
  memo[number] = result;
  return result;
}

/// Class definition for a calculator
class Calculator {
  double _num1;
  double _num2;
  
  /// Constructor for the calculator class
  Calculator(this._num1, this._num2);
  
  /// Function to add two numbers
  double add() {
    return _num1 + _num2;
  }
  
  /// Function to subtract two numbers
  double subtract() {
    return _num1 - _num2;
  }
  
  /// Function to multiply two numbers
  double multiply() {
    return _num1 * _num2;
  }
  
  /// Function to divide two numbers
  double divide() {
    return _num1 / _num2;
  }
}

/// Example usage of the fib and Calculator classes
void main() {
  print(fib(10)); // Outputs 55
  Calculator myCalc = Calculator(5, 2);
  print(myCalc.add()); // Outputs 7
  print(myCalc.subtract()); // Outputs 3
  print(myCalc.multiply()); // Outputs 10
  print(myCalc.divide()); // Outputs 2.5
}