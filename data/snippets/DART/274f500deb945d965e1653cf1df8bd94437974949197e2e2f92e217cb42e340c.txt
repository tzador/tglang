// Class for creating a custom linked list
class LinkedList {
  Node head; // Head of the linked list
 
  /// Insert function - inserts a new node at the beginning of the linked list
  void insert(int value) {
    // Create a new node
    Node newNode = Node(value);
 
    // Check if head is empty
    if (head == null) {
      // Make this new node as head
      head = newNode;
    } else {
      // Set the next of this new node to be the current head
      newNode.next = head;
      // Update head to be the new node
      head = newNode;
    }
  }
 
  /// Delete function - deletes a node with a given value
  void delete(int value) {
    // Check if head is empty
    if (head == null) {
      throw Exception("Linked list is empty");
    } else {
      // Create two pointers, one for current node and one for previous node
      Node currNode = head;
      Node prevNode = null;
 
      // Iterate through the linked list
      while (currNode != null) {
        // Check if the current node's value matches with the given value
        if (currNode.value == value) {
          // Check if the current node is the head
          if (currNode == head) {
            // Update head to be the next node
            head = currNode.next;
          } else {
            // Remove the current node by connecting the previous node to the next node
            prevNode.next = currNode.next;
          }
          // Stop the loop
          break;
        }
        // Update the previous node and current node
        prevNode = currNode;
        currNode = currNode.next;
      }
      // Check if the loop ended without finding the value
      if (currNode == null) {
        throw Exception("Value not found in the linked list");
      }
    }
  }
 
  /// Find function - checks if the given value is present in the linked list
  bool find(int value) {
    // Check if head is empty
    if (head == null) {
      return false;
    } else {
      // Create a pointer for current node
      Node currNode = head;
 
      // Iterate through the linked list
      while (currNode != null) {
        // Check if the current node's value matches with the given value
        if (currNode.value == value) {
          // Value found, return true
          return true;
        }
        // Update current node
        currNode = currNode.next;
      }
      // Check if the loop ended without finding the value
      if (currNode == null) {
        // Value not found, return false
        return false;
      }
    }
  }
}
 
// Class for creating a node in the linked list
class Node {
  int value; // Value of the node
  Node next; // Pointer to the next node in the linked list
 
  // Constructor for creating a new node
  Node(int this.value);
}
 
// Example:
// Create a new linked list
LinkedList myList = LinkedList();
 
// Add some values to the list
myList.insert(5);
myList.insert(10);
myList.insert(15);
 
// Check if value 10 is present in the list
bool found = myList.find(10);
 
// If found, delete value 10 from the list
if (found) {
  myList.delete(10);
}