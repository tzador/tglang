/// This class implements a binary search tree data structure.

class BinarySearchTree<T extends Comparable> {
  /// The root of the tree, initially set to `null` to represent an empty tree.
  Node root;

  /// The constructor takes in a generic `value` and creates a new `Node` with no child nodes.
  BinarySearchTree(T value) {
    root = Node(value: value, left: null, right: null);
  }

  /// This method inserts a new `Node` with the given `value` into the tree.
  /// It compares the `value` with the value at the current `Node`, and recursively traverses
  /// the tree until it finds an appropriate place to insert the new `Node`.
  ///
  /// On average, this method has a time complexity of O(log n) since it performs a binary search.
  ///
  /// **Parameters:**
  /// - `value`: The value to be inserted into the tree
  ///
  /// **Returns:**
  /// The root of the tree after the new Node has been inserted.
  Node insert(T value) {
    // Create a new Node with no child nodes
    Node newNode = Node(value: value, left: null, right: null);

    // If the tree is empty, set the new Node as the root and return it
    if (root == null) {
      root = newNode;
      return root;
    }

    // If the value of the new Node is less than the value of the root,
    // traverse the left subtree until an appropriate place is found
    if (value.compareTo(root.value) < 0) {
      if (root.left == null) {
        root.left = newNode;
      } else {
        root.left.insert(value);
      }
    }

    // If the value of the new Node is greater than the value of the root,
    // traverse the right subtree until an appropriate place is found
    if (value.compareTo(root.value) > 0) {
      if (root.right == null) {
        root.right = newNode;
      } else {
        root.right.insert(value);
      }
    }

    // Return the root of the tree after the new Node has been inserted
    return root;
  }

  /// This method searches for a `Node` with the given `value` in the tree.
  /// It compares the `value` with the value at the current `Node`, and recursively traverses
  /// the tree until it either finds a `Node` with the given `value` or reaches the end of the tree.
  ///
  /// On average, this method has a time complexity of O(log n) since it performs a binary search.
  ///
  /// **Parameters:**
  /// - `value`: The value to be searched for
  ///
  /// **Returns:**
  /// The `Node` with the given `value`, or `null` if it is not found in the tree.
  Node search(T value) {
    // If the tree is empty, return null
    if (root == null) {
      return null;
    }

    // If the value of the current Node is equal to the given value, return the current Node
    if (value == root.value) {
      return root;
    }

    // If the value is less than the value of the current Node,
    // recursively search the left subtree
    if (value.compareTo(root.value) < 0) {
      return root.left.search(value);
    }

    // If the value is greater than the value of the current Node,
    // recursively search the right subtree
    if (value.compareTo(root.value) > 0) {
      return root.right.search(value);
    }

    // If the value was not found, return null
    return null;
  }

  /// This method deletes a `Node` with the given `value` from the tree.
  /// It first calls the `search` method to find the `Node` to be deleted,
  /// then uses a helper method `deleteNode` to perform the actual deletion.
  ///
  /// On average, this method has a time complexity of O(log n) since it performs a binary search,
  /// and the actual deletion has a time complexity of O(1).
  ///
  /// **Parameters:**
  /// - `value`: The value of the Node to be deleted
  ///
  /// **Returns:**
  /// The root of the tree after the Node has been removed.
  Node delete(T value) {
    // Search for the Node to be deleted
    Node nodeToDelete = search(value);

    // If the Node is not found, return the root of the tree
    if (nodeToDelete == null) {
      return root;
    }

    // Call the helper method to perform the deletion
    deleteNode(nodeToDelete);

    // Return the root of the tree
    return root;
  }

  /// This helper method performs the actual deletion of a `Node`.
  /// It has a time complexity of O(1) since it only changes the references of the Nodes.
  ///
  /// **Parameters:**
  /// - `nodeToDelete`: The `Node` to be deleted
  void deleteNode(Node nodeToDelete) {
    // If both child nodes are null, delete the Node by setting its parent's reference to null
    if (nodeToDelete.left == null && nodeToDelete.right == null) {
      if (nodeToDelete == root) {
        root = null;
      } else if (nodeToDelete == nodeToDelete.parent.left) {
        nodeToDelete.parent.left = null;
      } else {
        nodeToDelete.parent.right = null;
      }
    }

    // If the left child node is null, replace the Node with its right child Node
    else if (nodeToDelete.left == null) {
      // If the Node is the root, set the right child as the new root
      if (nodeToDelete == root) {
        root = nodeToDelete.right;
        root.parent = null;
      }
      // If the Node is the left child of its parent, set the right child as the new left child
      else if (nodeToDelete == nodeToDelete.parent.left) {
        nodeToDelete.parent.left = nodeToDelete.right;
        nodeToDelete.right.parent = nodeToDelete.parent;
      }
      // If the Node is the right child of its parent, set the right child as the new right child
      else {
        nodeToDelete.parent.right = nodeToDelete.right;
        nodeToDelete.right.parent = nodeToDelete.parent;
      }
    }

    // If the right child node is null, replace the Node with its left child Node
    else if (nodeToDelete.right == null) {
      // If the Node is the root, set the left child as the new root
      if (nodeToDelete == root) {
        root = nodeToDelete.left;
        root.parent = null;
      }
      // If the Node is the left child of its parent, set the left child as the new left child
      else if (nodeToDelete == nodeToDelete.parent.left) {
        nodeToDelete.parent.left = nodeToDelete.left;
        nodeToDelete.left.parent = nodeToDelete.parent;
      }
      // If the Node is the right child of its parent, set the left child as the new right child
      else {
        nodeToDelete.parent.right = nodeToDelete.left;
        nodeToDelete.left.parent = nodeToDelete.parent;
      }
    }

    // If both child nodes are not null, find the successor Node and replace the Node with it
    else {
      // Find the successor Node, which is the smallest Node in the right subtree
      Node successor = nodeToDelete.right;
      while (successor.left != null) {
        successor = successor.left;
      }

      // Replace the Node with the successor Node
      nodeToDelete.value = successor.value;

      // Delete the successor Node using recursion
      deleteNode(successor);
    }
  }
}

/// This class represents a `Node` in the binary search tree.
class Node<T extends Comparable> {
  /// The value of the Node, which can be of any type that extends `Comparable`.
  T value;

  /// The left child of the Node, initially set to `null`.
  Node left;

  /// The right child of the Node, initially set to `null`.
  Node right;

  /// The parent of the Node, initially set to `null`.
  Node parent;

  /// The constructor takes in a `value` and assigns it to the `value` property of the Node.
  Node({this.value});

  /// This method inserts a new `Node` with the given `value` as a child of this Node.
  ///
  /// **Parameters:**
  /// - `value`: The value of the new child Node
  void insert(T value) {
    // If the value of the new Node is less than the value of this Node,
    // insert it as the left child if it is null, or call the `insert` method on the left child
    if (value.compareTo(this.value) < 0) {
      if (left == null) {
        left = Node(value: value);
        left.parent = this;
      } else {
        left.insert(value);
      }
    }

    // If the value of the new Node is greater than the value of this Node,
    // insert it as the right child if it is null, or call the `insert` method on the right child
    if (value.compareTo(this.value) >= 0) {
      if (right == null) {
        right = Node(value: value);
        right.parent = this;
      } else {
        right.insert(value);
      }
    }
  }
}

// Example usage:
void main() {
  // Create a new binary search tree
  BinarySearchTree bst = BinarySearchTree<int>(5);

  // Insert values into the tree
  bst.insert(3);
  bst.insert(8);
  bst.insert(2);
  bst.insert(4);
  bst.insert(6);
  bst.insert(9);

  // Search for a value in the tree
  Node node = bst.search(6);
  // Output: Node(value: 6, left: null, right: null)

  // Delete a node from the tree
  bst.delete(2);

  // Output the root of the tree
  Node root = bst.root;
  // Output: Node(value: 5, left: Node(value: 3, left: null, right: Node(value: 4, left: null, right: null)), right: Node(value: 8, left: Node(value: 6, left: null, right: null), right: Node(value: 9, left: null, right: null))))
}