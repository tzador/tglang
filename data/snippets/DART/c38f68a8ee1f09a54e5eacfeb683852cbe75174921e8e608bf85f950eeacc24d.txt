class LinkedList<T> {
  int _length = 0; // internal counter to keep track of nodes
  late Node head; // reference to first node in linked list
  late Node tail; // reference to last node in linked list

  // constructor for LinkedList class
  LinkedList();

  // addNode method to add a new node to the front of the linked list
  void addNode(T data) {
    Node node = Node(data); // create new node with given data
    if (head == null) { // check if head is null, indicating an empty list
      head = node; // set head as the new node
      tail = node; // set tail as the new node
    } else {
      node.next = head; // set the next of new node to the current head
      head = node; // set new node as the head
    }
    _length++; // increment the length of the linked list
  }

  // removeNode method to remove the first occurrence of a given data
  T removeNode(T data) {
    Node current = head; // start at the head of the linked list
    Node? previous; // reference to the previous node
    while (current != null) { // loop until the end of the linked list is reached
      if (current.data == data) { // check if current node contains the given data
        if (current == head) { // if current node is the head
          head = current.next; // set the next node as the new head
        } else if (current == tail) { // if current node is the tail
          tail = previous; // set the previous node as the new tail
        }
        // update references and decrement length
        previous?.next = current.next;
        _length--;
        return current.data; // return removed data
      }
      previous = current; // update previous node
      current = current.next; // move to next node
    }
    throw Exception("Data not found in linked list!"); // throw exception if data not found
  }

  // printList method to print the contents of the linked list
  void printList() {
    Node current = head; // start at the head of the linked list
    while (current != null) { // loop until the end of the linked list is reached
      print(current.data); // print the data stored in current node
      current = current.next; // move to next node
    }
  }

  // Node class to represent a single node in the linked list
  class Node {
    T data; // data stored in the node
    Node? next; // reference to the next node

    // constructor for Node class
    Node(this.data);

    // optional toString method for printing node's data
    @override
    String toString() {
      return 'Node data: $data';
    }
  }
}