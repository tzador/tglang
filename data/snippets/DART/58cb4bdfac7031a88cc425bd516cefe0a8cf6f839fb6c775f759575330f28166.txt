/// This is a custom class that represents a 2D point
class Point {
  double _x, _y;
  int _color;

  /// A constructor that creates a 2D point from x and y coordinates
  Point(this._x, this._y);

  /// A function that sets the color of the point
  void setColor(int color) {
    _color = color;
  }

  /// A function that returns the coordinates of the point as a string
  String getCoordinates() {
    return '($_x, $_y)';
  }

  /// A function that checks if the point is on the origin (0,0)
  bool isOrigin() => _x == 0 && _y == 0;

}

/// This is a custom class that represents a circle
class Circle {
  Point _center;
  double _radius;

  /// A constructor that creates a circle from a center point and radius
  Circle(this._center, this._radius);

  /// A function that returns the area of the circle
  double getArea() => 3.14 * _radius * _radius;

  /// A function that checks if a given point is within the circle's radius
  bool withinRadius(Point p) {
    // Using the Pythagorean theorem
    double distance = (p._x - _center._x) * (p._x - _center._x) + (p._y - _center._y) * (p._y - _center._y);
    return distance <= (_radius * _radius);
  }

  /// A function that checks if the two circles intersect
  bool intersect(Circle c) {
    // Calculating the distance between the two center points
    double distance = (_center._x - c._center._x) * (_center._x - c._center._x) + (_center._y - c._center._y) * (_center._y - c._center._y);
    // Calculating the sum of the radii
    double sumRadii = _radius + c._radius;
    return distance <= (sumRadii * sumRadii);
  }
}

void main() {
  // Creating a new point at coordinates (3,5)
  Point p1 = Point(3,5);
  // Setting the color to blue
  p1.setColor(0x00ff0000);
  // Printing the coordinates of the point
  print(p1.getCoordinates());

  // Creating a new circle at the origin with a radius of 2
  Circle c1 = Circle(Point(0,0), 2);
  // Checking if the point (3,3) is within the circle's radius
  print(c1.withinRadius(Point(3,3)));

  // Creating a second circle with a center at (4,4) and a radius of 3
  Circle c2 = Circle(Point(4,4), 3);
  // Checking if the two circles intersect
  print(c1.intersect(c2));
}