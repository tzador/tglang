/// This is a complex class that takes in two generic parameters T and U.
/// It has a constructor with named parameters and getters for its private fields.
class ComplexClass<T, U> {
  final T _property1;
  final U _property2;

  ComplexClass({T property1, U property2}) : _property1 = property1, _property2 = property2;

  /// This is a method that takes in a function as a parameter and returns a modified value of property1.
  T modifyProperty(T Function(T) function) {
    return function(_property1);
  }

  /// This is a method that takes in a list of U objects and returns a list of modified U objects.
  List<U> modifyList(List<U> list, U Function(U) function) {
    return list.map(function).toList();
  }

  /// This is a getter for property1 that checks if the value is an integer.
  int get property1 => _property1 is int ? _property1 : throw Exception('Property1 is not an integer.');

  /// This is a getter for property2 that checks if the value is a boolean.
  bool get property2 => _property2 is bool ? _property2 : throw Exception('Property2 is not a boolean.');
}