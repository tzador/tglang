// This code snippet creates a class for a shopping cart with methods for adding and removing items, calculating total price, and sorting items by price
class ShoppingCart {
  List<Item> items = []; // list to store items in the cart
  
  // method to add an item to the cart
  void addItem(Item item) {
    items.add(item);
    print('${item.name} was added to the cart.'); // prints confirmation message
  }

  // method to remove an item from the cart
  void removeItem(Item item) {
    items.remove(item);
    print('${item.name} was removed from the cart.'); // prints confirmation message
  }

  // method to get the total price of all items in the cart
  double getTotalPrice() {
    double total = 0; // variable to store the total price
    items.forEach((item) => total += item.price); // iterates through items and adds their price to total
    return total;
  }

  // method to sort items in the cart by price, in descending order
  void sortItemsByPrice() {
    items.sort((a, b) => b.price.compareTo(a.price)); // uses compare method to sort items in descending order
  }
}

// Blueprint for an item object
class Item {
  String name; // name of the item
  double price; // price of the item

  // constructor
  Item(this.name, this.price);
}

// Example usage of the ShoppingCart class
void main() {
  ShoppingCart cart = new ShoppingCart();
  cart.addItem(Item('Shirt', 20));
  cart.addItem(Item('Pants', 35));
  cart.addItem(Item('Shoes', 50));
  print('Total price is \$${cart.getTotalPrice()}.'); // prints total price of items in the cart
  cart.sortItemsByPrice(); // sorts items in the cart by price
  cart.items.forEach((item) => print('${item.name} - \$${item.price}')); // prints each item in the cart with its price
}