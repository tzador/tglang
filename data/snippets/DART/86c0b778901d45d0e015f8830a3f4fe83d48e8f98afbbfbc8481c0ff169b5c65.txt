/// Declaring a class named 'User' with a constructor that takes in two parameters - 'name' and 'age'
class User {
  String name;
  int age;

  /// Creating a void method named 'greeting' that takes in no parameters
  void greeting() {
    print('Hello, my name is $name and I am $age years old.'); // prints a string that contains the values of the 'name' and 'age' variables
  }

  /// Creating a static method named 'fromData' that takes in a 'Map' parameter
  /// The method creates a new instance of the 'User' class using the values from the 'Map'
  static User fromData(Map data) {
    return User(
      data['name'], // accessing the 'name' property in the 'data' Map
      data['age'], // accessing the 'age' property in the 'data' Map
    );
  }

  /// Creating a private named constructor that takes in a 'String' parameter - 'name'
  /// This constructor can only be accessed within the 'User' class
  User._(this.name);

  /// Creating a static getter named 'empty' that returns a new instance of the 'User' class
  static User get empty => User._(''); // passing an empty string as the 'name' parameter
}

/// Declaring a class named 'Admin' that extends the 'User' class
class Admin extends User {
  /// Creating a constructor that takes in two parameters - 'name' and 'age'
  /// This constructor calls the constructor of the 'User' class and passes in the values
  ///
  /// The 'super' keyword is used to access the members (properties and methods) of the parent class
  Admin(String name, int age) : super(name, age);

  /// Overriding the 'greeting' method from the 'User' class
  /// This method prints a different greeting than the one in the 'User' class
  @override
  void greeting() {
    print('Hello, my name is $name and I am an admin.'); // prints a string that contains the value of the 'name' variable and a custom message
  }
}