import 'dart:async';
import 'package:http/http.dart' as http;

// Define a function to fetch data asynchronously
Future<String> fetchData(String url) async {
  // Create a new HTTP request
  final response = await http.get(url);
  // Check if request is successful
  if (response.statusCode == 200) {
    // Return the response body as a string
    return response.body;
  } else {
    // Throw an error if request is not successful
    throw Exception('Failed to fetch data');
  }
}

// Define a class for an API client
class APIClient {
  // Define a method to make a GET request
  Future<String> getData(String endpoint) async {
    // Construct the full URL
    final String url = 'http://www.example.com/api/' + endpoint;
    // Call the fetchData function to make the request and return the response
    return await fetchData(url);
  }

  // Define a method to make a POST request
  Future<String> postData(String endpoint, Map<String, String> body) async {
    // Construct the full URL
    final String url = 'http://www.example.com/api/' + endpoint;
    // Create a new HTTP request with the POST method
    final response = await http.post(url, body: body);
    // Check if request is successful
    if (response.statusCode == 200) {
      // Return the response body as a string
      return response.body;
    } else {
      // Throw an error if request is not successful
      throw Exception('Failed to fetch data');
    }
  }
}

// Create an instance of the APIClient class
final apiClient = APIClient();

// Use the getData method to make a GET request to 'users' endpoint
final users = await apiClient.getData('users');

// Print the response
print(users);

// Use the postData method to make a POST request to 'login' endpoint with a username and password
final loginResponse = await apiClient.postData('login', {'username': 'example', 'password': 'password'});

// Print the response
print(loginResponse);