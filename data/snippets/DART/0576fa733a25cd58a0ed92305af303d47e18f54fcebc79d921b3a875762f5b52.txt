/// This function converts a given integer into a binary string.
String convertToBinary(int num) {
  String binary = '';
  if (num == 0) {
    return '0';
  } else {
    while (num > 0) {
      binary = (num % 2).toString() + binary;
      num = (num / 2).floor();
    }
  }
  return binary;
}

/// This function reverses a given string using recursion.
String reverseString(String str) {
  if (str.isEmpty) {
    return str;
  } else {
    return reverseString(str.substring(1)) + str[0];
  }
}

/// This function takes in a list of strings and returns the longest string in the list.
String findLongestString(List<String> strings) {
  String longest = '';
  for (String str in strings) {
    if (str.length > longest.length) {
      longest = str;
    }
  }
  return longest;
}

/// This function implements the Quick Sort algorithm to sort a list of integers in ascending order.
List<int> quickSort(List<int> nums) {
  if (nums.length <= 1) {
    return nums;
  } else {
    int pivot = nums[0];
    List<int> smaller = <int>[];
    List<int> greater = <int>[];
    for (int num in nums.sublist(1)) {
      if (num <= pivot) {
        smaller.add(num);
      } else {
        greater.add(num);
      }
    }
    smaller = quickSort(smaller);
    greater = quickSort(greater);
    return [...smaller, pivot, ...greater];
  }
}

/// This class represents a person with a name and age.
class Person {
  String name;
  int age;

  Person({this.name, this.age});

  /// This method returns the name and age of the person as a string.
  String getInfo() {
    return '$name is $age years old.';
  }
}

// Example usage
void main() {
  // Convert a number to binary
  print(convertToBinary(12)); // Output: 1100

  // Reverse a string
  print(reverseString('hello')); // Output: olleh

  // Find the longest string in a list
  List<String> strings = ['apple', 'banana', 'carrot', 'dragonfruit'];
  print(findLongestString(strings)); // Output: dragonfruit

  // Quick Sort a list of integers
  List<int> nums = [5, 2, 9, 3, 1, 7, 4];
  print(quickSort(nums)); // Output: [1, 2, 3, 4, 5, 7, 9]

  // Create a new Person instance and get information
  Person p1 = Person(name: 'John', age: 30);
  print(p1.getInfo()); // Output: John is 30 years old.
}