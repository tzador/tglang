/// The following class represents a binary search tree structure.
class BinarySearchTree {
  /// Represents a single node in the tree.
  class Node<T> {
    final T key;
    Node<T> left;
    Node<T> right;

    Node(this.key);
  }

  Node<T> _root;

  BinarySearchTree();

  /// Returns whether the tree is empty or not.
  bool get isEmpty => _root == null;

  /// Inserts a new node with the given [key] into the tree.
  void insert(T key) {
    if (isEmpty) {
      _root = Node<T>(key);
      return;
    }

    _insert(_root, key);
  }

  /// Helper function for inserting a node recursively.
  void _insert(Node<T> node, T key) {
    if (key.compareTo(node.key) < 0) {
      if (node.left == null) {
        node.left = Node<T>(key);
      } else {
        _insert(node.left, key);
      }
    } else if (key.compareTo(node.key) > 0) {
      if (node.right == null) {
        node.right = Node<T>(key);
      } else {
        _insert(node.right, key);
      }
    }
  }

  /// Returns a list of nodes in the tree in pre-order traversal.
  List<Node<T>> getPreOrderTraversal() {
    List<Node<T>> result = [];

    _preOrderTraversal(_root, result);

    return result;
  }

  /// Helper function for pre-order traversal.
  void _preOrderTraversal(Node<T> node, List<Node<T>> result) {
    if (node == null) {
      return;
    }

    result.add(node);

    _preOrderTraversal(node.left, result);
    _preOrderTraversal(node.right, result);
  }
}