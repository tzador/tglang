// Creating a custom class that extends the built-in 'Map' class
class CustomMap extends Map {
  // Private variable to store the map entries
  Map _map;

  // Constructor that initializes the map with the passed in map
  CustomMap(Map initialMap) {
    this._map = initialMap;
  }

  @override
  bool get isEmpty => this._map.isEmpty;

  @override
  bool get isNotEmpty => this._map.isNotEmpty;

  @override
  Iterable get keys => this._map.keys;

  @override
  Iterable get values => this._map.values;

  @override
  int get length => this._map.length;

  @override
  void addEntries(Iterable entries) {
    // Logic to add entries to the custom map
    for (var entry in entries) {
      if (entry is MapEntry) {
        this._map[entry.key] = entry.value;
      } else {
        throw 'Entries must be of type MapEntry';
      }
    }
  }

  @override
  void addAll(Map other) {
    // Logic to add all entries from another map to the custom map
    for (var key in other.keys) {
      this._map[key] = other[key];
    }
  }
}

// Example usage of the custom map class
void main() {
  // Creating a custom map with initial values
  var myMap = CustomMap({
    'key1': 'value1',
    'key2': 'value2',
    'key3': 'value3'
  });

  // Adding a new entry to the custom map
  myMap.addEntries([MapEntry('key4', 'value4')]);

  // Printing the keys and values of the custom map
  print(myMap.keys); // Output: ['key1', 'key2', 'key3', 'key4']
  print(myMap.values); // Output: ['value1', 'value2', 'value3', 'value4']

  // Adding all entries from another map to the custom map
  var anotherMap = {'key5': 'value5', 'key6': 'value6'};
  myMap.addAll(anotherMap);

  // Printing the length of the custom map
  print(myMap.length); // Output: 6
}