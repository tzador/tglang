/// A function that merges two lists of integers by alternating elements
List<int> mergeLists(List<int> firstList, List<int> secondList) {
  // Initialize empty list to store result
  List<int> result = [];

  // Get lengths of both lists
  int firstLength = firstList.length;
  int secondLength = secondList.length;

  // Find the minimum length between the two lists
  int minLength = firstLength < secondLength ? firstLength : secondLength;
  
  // Loop through both lists, alternating between elements
  for (int i = 0; i < minLength; i++) {
    // Add element from first list
    result.add(firstList[i]);

    // Add element from second list
    result.add(secondList[i]);
  }

  // Add remaining elements from longer list
  if (firstLength > secondLength) {
    // Loop through remaining elements in first list
    for (int j = minLength; j < firstLength; j++) {
      // Add element to result list
      result.add(firstList[j]);
    }
  } else if (secondLength > firstLength) {
    // Loop through remaining elements in second list
    for (int k = minLength; k < secondLength; k++) {
      // Add element to result list
      result.add(secondList[k]);
    }
  }

  // Return the merged list
  return result;
}

// Example usage
void main() {
  // Define two lists of integers
  List<int> listOne = [1, 3, 5, 7, 9];
  List<int> listTwo = [2, 4, 6, 8];

  // Call the mergeLists function to merge the two lists
  List<int> mergedList = mergeLists(listOne, listTwo);

  // Print the merged list
  print(mergedList); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]
}