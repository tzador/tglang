// This code snippet shows the implementation of a Binary Search Tree in Dart

class Node {
  int key;
  Node left;
  Node right;

  Node(this.key);

  // Insert new key into the tree
  void insert(int key) {
    if (key < this.key) {
      if (left == null) {
        left = Node(key);
      } else {
        left.insert(key);
      }
    } else {
      if (right == null) {
        right = Node(key);
      } else {
        right.insert(key);
      }
    }
  }

  // Search for a specific key in the tree
  bool search(int key) {
    if (key == this.key) {
      return true;
    }
    if (key < this.key) {
      if (left == null) {
        return false;
      } else {
        return left.search(key);
      }
    } else {
      if (right == null) {
        return false;
      } else {
        return right.search(key);
      }
    }
  }

  // Print the keys in the tree in ascending order
  void printInOrder() {
    if (left != null) {
      left.printInOrder();
    }
    print(key);
    if (right != null) {
      right.printInOrder();
    }
  }
}

// Create a new Binary Search Tree with root node key of 7
Node root = Node(7);

// Insert some new keys
root.insert(4);
root.insert(9);
root.insert(2);
root.insert(5);
root.insert(8);
root.insert(11);

// Search for a specific key in the tree and print the result
bool result = root.search(5);
print(result); // Output: true

// Print the keys in the tree in ascending order
root.printInOrder(); // Output: 2 4 5 7 8 9 11