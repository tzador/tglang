/// This class represents a binary search tree data structure
class BinarySearchTree {
  Node root; // initializes the root node

  BinarySearchTree() {
    root = null;
  }

  void insert(int key) {
    Node newNode = new Node(key); // creates new node with given key
    if (root == null) {
      root = newNode; // if tree is empty, new node becomes root
    } else {
      Node currentNode = root;
      Node parent;
      while (true) {
        parent = currentNode;
        if (key < currentNode.value) {
          // if key is less than current node's value, go to left subtree
          currentNode = currentNode.left;
          if (currentNode == null) {
            parent.left = newNode; // if left child is null, assign new node to left child
            return;
          }
        } else {
          // if key is greater than or equal to current node's value, go to right subtree
          currentNode = currentNode.right;
          if (currentNode == null) {
            parent.right = newNode; // if right child is null, assign new node to right child
            return;
          }
        }
      }
    }
  }

  void delete(int key) {
    root = deleteNode(root, key); // calls deleteNode function with root node and key to be deleted
  }

  Node deleteNode(Node root, int key) {
    if (root == null) {
      return root;
    } else if (key < root.value) {
      // if key is less than root's value, go to left subtree
      root.left = deleteNode(root.left, key); // recursively call deleteNode on left subtree
    } else if (key > root.value) {
      // if key is greater than root's value, go to right subtree
      root.right = deleteNode(root.right, key); // recursively call deleteNode on right subtree
    } else {
      // if key is equal to root's value, this is the node to be deleted
      if (root.left == null && root.right == null) {
        // if node has no children, just delete it
        return null;
      } else if (root.left == null) {
        // if node has only right child, replace root with right child
        return root.right;
      } else if (root.right == null) {
        // if node has only left child, replace root with left child
        return root.left;
      } else {
        // if node has both left and right child
        // replace node's value with minimum value from right subtree
        root.value = minValue(root.right);
        // recursively delete the node with minimum value from right subtree
        root.right = deleteNode(root.right, root.value);
      }
    }
    return root;
  }

  int minValue(Node node) {
    int minv = node.value; // initializes min value to current node's value
    // keep traversing to left subtree to find minimum value
    while (node.left != null) {
      minv = node.left.value;
      node = node.left;
    }
    return minv;
  }

  void inOrderTraversal(Node root) {
    if (root != null) {
      // recursively traverse left subtree
      inOrderTraversal(root.left);
      // print current node's value
      print(root.value);
      // recursively traverse right subtree
      inOrderTraversal(root.right);
    }
  }

  void preOrderTraversal(Node root) {
    if (root != null) {
      // print current node's value
      print(root.value);
      // recursively traverse left subtree
      preOrderTraversal(root.left);
      // recursively traverse right subtree
      preOrderTraversal(root.right);
    }
  }

  void postOrderTraversal(Node root) {
    if (root != null) {
      // recursively traverse left subtree
      postOrderTraversal(root.left);
      // recursively traverse right subtree
      postOrderTraversal(root.right);
      // print current node's value
      print(root.value);
    }
  }
}

/// This class represents a node in a binary search tree
class Node {
  int value; // value stored in the node
  Node left; // pointer to left child node
  Node right; // pointer to right child node

  Node(int value) {
    this.value = value;
    left = null;
    right = null;
  }
}

// example usage:

void main() {
  BinarySearchTree bst = new BinarySearchTree();
  bst.insert(5);
  bst.insert(3);
  bst.insert(8);
  bst.insert(2);
  bst.insert(4);
  bst.insert(6);
  bst.insert(9);

  // in-order traversal
  print("In-order traversal:");
  bst.inOrderTraversal(bst.root);
  print(""); // new line for formatting

  // pre-order traversal
  print("Pre-order traversal:");
  bst.preOrderTraversal(bst.root);
  print(""); // new line for formatting

  // post-order traversal
  print("Post-order traversal:");
  bst.postOrderTraversal(bst.root);

  // output:
  // In-order traversal:
  // 2 3 4 5 6 8 9
  // Pre-order traversal:
  // 5 3 2 4 8 6 9
  // Post-order traversal:
  // 2 4 3 6 9 8 5
}