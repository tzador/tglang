// Class for creating and manipulating a binary tree data structure
class BinaryTree {
  // Define a Node class for holding the binary tree data
  class Node {
    // Attributes for the node
    int value;
    Node leftChild;
    Node rightChild;
    
    // Constructor for creating a new node with a given value
    Node(this.value);
  }
  
  // Attribute for holding the root node of the binary tree
  Node rootNode;
  
  // Constructor for creating a binary tree with a given root node
  BinaryTree(this.rootNode);
  
  // Function for inserting a new node into the binary tree
  void insertNode(int value) {
    // Create a new node with the given value
    Node newNode = Node(value);
    
    // Check if the root node is null
    if (rootNode == null) {
      // If it is, set the new node as the root
      rootNode = newNode;
    } else {
      // If not, traverse the tree to find the appropriate position for the new node
      Node current = rootNode;
      while (current != null) {
        // Check if the new node's value is less than the current node
        if (newNode.value < current.value) {
          // If it is, move to the left child if it exists or insert the new node as the left child
          if (current.leftChild == null) {
            current.leftChild = newNode;
            break;
          } else {
            current = current.leftChild;
          }
        } else {
          // If the new node's value is greater than the current node, move to the right child if it exists
          if (current.rightChild == null) {
            current.rightChild = newNode;
            break;
          } else {
            current = current.rightChild;
          }
        }
      }
    }
  }
  
  // Function for searching for a node with a given value
  Node search(int value) {
    // Check if the root node is null
    if (rootNode == null) {
      return null;
    }
    
    // Traverse the tree looking for a node with the given value
    Node current = rootNode;
    while (current != null) {
      // Check if the current node's value is equal to the given value
      if (current.value == value) {
        // If it is, return the current node
        return current;
      } else if (value < current.value) {
        // If the given value is less than the current node's value, move to the left child if it exists
        current = current.leftChild;
      } else {
        // If the given value is greater than the current node's value, move to the right child if it exists
        current = current.rightChild;
      }
    }
    
    // If the node is not found, return null
    return null;
  }
  
  // Function for deleting a node with a given value from the binary tree
  void deleteNode(int value) {
    // First, search for the node with the given value
    Node nodeToDelete = search(value);
    
    // If the node is not found, return
    if (nodeToDelete == null) {
      return;
    }
    
    // Check if the node to delete is the root node
    if (nodeToDelete == rootNode) {
      // If it is, delete it and set its left child as the root
      rootNode = nodeToDelete.leftChild;
      
      // Traverse the tree to find the appropriate position for the right child of the old root node
      Node current = rootNode;
      while (current.rightChild != null) {
        current = current.rightChild;
      }
      
      // Set the old root node's right child as the right child of the new root node
      current.rightChild = nodeToDelete.rightChild;
    } else {
      // If the node to delete is not the root node, find its parent node
      Node parent = findParent(rootNode, nodeToDelete);
      
      // Check if the node to delete has any children
      if (nodeToDelete.leftChild == null && nodeToDelete.rightChild == null) {
        // If not, delete the node and set its parent's left or right child to null, depending on which one it is
        if (parent.leftChild == nodeToDelete) {
          parent.leftChild = null;
        } else {
          parent.rightChild = null;
        }
      } else if (nodeToDelete.leftChild == null) {
        // If the node has only a right child, delete the node and set its parent's left or right child to the right child
        if (parent.leftChild == nodeToDelete) {
          parent.leftChild = nodeToDelete.rightChild;
        } else {
          parent.rightChild = nodeToDelete.rightChild;
        }
      } else if (nodeToDelete.rightChild == null) {
        // If the node has only a left child, delete the node and set its parent's left or right child to the left child
        if (parent.leftChild == nodeToDelete) {
          parent.leftChild = nodeToDelete.leftChild;
        } else {
          parent.rightChild = nodeToDelete.leftChild;
        }
      } else {
        // If the node has both left and right children, find the smallest value in the right subtree
        Node smallestRight = findSmallest(nodeToDelete.rightChild);
        
        // Replace the value of the node to delete with the smallest value in the right subtree
        nodeToDelete.value = smallestRight.value;
        
        // Delete the smallest node in the right subtree
        deleteNode(smallestRight.value);
      }
    }
  }
  
  // Helper function for finding the parent of a given node in the binary tree
  Node findParent(Node current, Node target) {
    // Check if the given node is the root node
    if (target == current) {
      return null;
    }
    
    // Check if the target's value is less than the current node's value
    if (target.value < current.value) {
      // If it is, check if the left child is the target
      if (current.leftChild == target) {
        // If it is, return the current node
        return current;
      } else {
        // If it is not, recursively call the function on the left subtree
        return findParent(current.leftChild, target);
      }
    } else {
      // If the target's value is greater than the current node's value, check if the right child is the target
      if (current.rightChild == target) {
        // If it is, return the current node
        return current;
      } else {
        // If it is not, recursively call the function on the right subtree
        return findParent(current.rightChild, target);
      }
    }
  }
  
  // Helper function for finding the smallest node in a subtree
  Node findSmallest(Node current) {
    // Check if the left child exists
    if (current.leftChild != null) {
      // If it does, recursively call the function on the left subtree
      return findSmallest(current.leftChild);
    } else {
      // If the left child does not exist, return the current node
      return current;
    }
  }
  
  // Function for printing the binary tree in order
  void printInOrder(Node current) {
    if (current == null) {
      return;
    }
    
    // Print the left subtree first
    printInOrder(current.leftChild);
    
    // Print the current node's value
    print(current.value);
    
    // Print the right subtree
    printInOrder(current.rightChild);
  }
}

// Create a new binary tree with a root node of 50
BinaryTree binaryTree = BinaryTree(BinaryTree.Node(50));

// Insert nodes into the binary tree
binaryTree.insertNode(30);
binaryTree.insertNode(20);
binaryTree.insertNode(40);
binaryTree.insertNode(70);
binaryTree.insertNode(60);

// Search for a node with a value of 20
BinaryTree.Node searchedNode = binaryTree.search(20);
print(searchedNode.value);

// Delete a node with a value of 40
binaryTree.deleteNode(40);

// Print the binary tree in order
binaryTree.printInOrder(binaryTree.rootNode);