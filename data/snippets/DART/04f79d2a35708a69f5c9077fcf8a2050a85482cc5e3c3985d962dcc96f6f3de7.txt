/// A class representing a shopping cart with different products and quantities
class ShoppingCart {
  Map<Product, int> items = {}; // map of products and their corresponding quantities

  /// Adds a product to the shopping cart with a specified quantity
  void addProduct(Product product, int quantity) {
    if (items.containsKey(product)) { // if the product is already in the cart
      items[product] += quantity; // update the quantity
    } else {
      items[product] = quantity; // add the product and its quantity to the cart
    }
  }

  /// Removes a product from the shopping cart
  void removeProduct(Product product) {
    items.remove(product); // removes the product from the map
  }

  /// Calculates the total cost of all the items in the shopping cart
  double calculateTotalCost() {
    double totalCost = 0.0; // initializing the total cost variable
    items.forEach((product, quantity) { // loop through each product and quantity
      totalCost += product.price * quantity; // multiply the price by quantity and add it to the total cost
    });

    return totalCost; // return the total cost
  }

  /// Shows the items in the shopping cart and their corresponding quantities
  void showCart() {
    print("Items in Shopping Cart:"); // print a title for the shopping cart
    items.forEach((product, quantity) { // loop through each product and quantity
      print("${product.name} - Quantity: $quantity"); // print the product name and its quantity
    });
  }

  /// Checks if the shopping cart is empty
  bool isEmpty() {
    if (items.isEmpty) { // if the shopping cart is empty
      return true; // return true
    } else {
      return false; // otherwise return false
    }
  }
}

/// A class representing a product with a name and price
class Product {
  String name;
  double price;

  Product(this.name, this.price); // constructor for the product
}