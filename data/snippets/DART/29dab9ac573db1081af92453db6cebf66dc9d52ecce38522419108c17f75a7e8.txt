// This code snippet uses recursion to sort a list of integers in ascending order

// function to partition the list and return the index of the pivot element
int partition(List<int> arr, int low, int high) {
  int pivot = arr[high]; // choose last element as pivot
  int i = low - 1; // index of smaller element
  for (int j = low; j < high; j++) { // loop from low to high
    if (arr[j] < pivot) { // if current element is smaller than pivot
      i++; // increment index of smaller element
      int temp = arr[i]; // swap arr[i] and arr[j]
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }
  int temp = arr[i + 1]; // swap arr[i + 1] and pivot
  arr[i + 1] = arr[high];
  arr[high] = temp;
  return i + 1; // return index of pivot element
}

// function to implement the quicksort algorithm
void quickSort(List<int> arr, int low, int high) {
  if (low < high) { // base case
    int pi = partition(arr, low, high); // partition the list and get pivot index
    quickSort(arr, low, pi - 1); // recursively call quicksort on the left subarray
    quickSort(arr, pi + 1, high); // recursively call quicksort on the right subarray
  }
}

// sample usage
void main() {
  List<int> arr = [5, 2, 1, 8, 4];
  quickSort(arr, 0, arr.length - 1); // call quicksort on the entire list
  print(arr); // output: [1, 2, 4, 5, 8]
}