/// This function finds the lowest common ancestor of two nodes in a binary tree
/// using recursion and O(1) space complexity.

class Node {
  int data;
  Node left, right;
  Node(int key) {
    data = key;
    left = right = null;
  }
}

Node lowestCommonAncestor(Node root, Node a, Node b) {
  if (root == null || root == a || root == b) {
    return root;
  }
  Node left = lowestCommonAncestor(root.left, a, b);
  Node right = lowestCommonAncestor(root.right, a, b);

  if (left != null && right != null) {
    return root;
  }
  return (left != null) ? left : right;
}

void main() {
  Node root = new Node(1);
  root.left = new Node(2);
  root.right = new Node(3);
  root.left.left = new Node(4);
  root.left.right = new Node(5);
  root.right.left = new Node(6);
  root.right.right = new Node(7);

  Node a = root.left.right;
  Node b = root.right.left;

  Node ancestor = lowestCommonAncestor(root, a, b);

  print("Lowest common ancestor of $a and $b is: ${ancestor.data}");
}