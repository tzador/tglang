/// Defines an abstract class for a purchased item
abstract class PurchasedItem {
  String name;
  double price;
  int quantity;

  /// Constructor for PurchasedItem
  /// Parameters:
  /// [name] - The name of the item
  /// [price] - The price of the item
  /// [quantity] - The number of items purchased
  PurchasedItem(this.name, this.price, this.quantity);

  /// Calculates the total cost of the item
  double getTotalCost() {
    return price * quantity;
  }

  /// Prints out the item details
  void printItemDetails() {
    print('Item: $name');
    print('Price: \$$price');
    print('Quantity: $quantity');
    print('Total cost: $${getTotalCost()}');
  }
}

/// Class for a specific type of purchased item - electronic
class Electronic extends PurchasedItem {
  String description;

  /// Constructor for Electronic
  /// Parameters:
  /// [name] - The name of the electronic item
  /// [price] - The price of the electronic item
  /// [quantity] - The number of items purchased
  /// [description] - A brief description of the electronic item
  Electronic(String name, double price, int quantity, this.description)
      : super(name, price, quantity);

  /// Prints out the item details, including the description
  @override
  void printItemDetails() {
    super.printItemDetails();
    print('Description: $description');
  }
}

/// Main function to demonstrate the usage of the above classes
void main() {
  // Creating an instance of PurchasedItem
  var item1 = PurchasedItem('Shirt', 19.99, 2);
  item1.printItemDetails();
  print('\n');

  // Creating an instance of Electronic
  var item2 = Electronic('Smart Watch', 99.99, 1, 'Tracks fitness and sleep');
  item2.printItemDetails();
}