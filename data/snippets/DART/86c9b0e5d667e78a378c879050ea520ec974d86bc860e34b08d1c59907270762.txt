/// This function accepts a list and recursively sorts it in descending order using Quick Sort algorithm
void quickSort(List arr, int low, int high) {
    if (low < high) { // base case 
        int pivot = partition(arr, low, high); // select pivot index
        quickSort(arr, low, pivot - 1); // partition left sublist
        quickSort(arr, pivot + 1, high); // partition right sublist 
    } 
} 
  
/// This function selects a pivot element and partitions the input list into two sublists
int partition(List arr, int low, int high) { 
    int pivot = arr[high]; // select pivot element as the last element of the list 
    int i = (low - 1); // index of smaller element 
    for (int j = low; j < high; j++) { 
        // if current element is smaller than or equal to pivot 
        if (arr[j] >= pivot) { 
            i++; // increment index of smaller element 
            // swap arr[i] and arr[j] 
            int temp = arr[i]; 
            arr[i] = arr[j]; 
            arr[j] = temp; 
        } 
    } 
    // swap arr[i + 1] and arr[high] (or pivot) 
    int temp = arr[i + 1]; 
    arr[i + 1] = arr[high]; 
    arr[high] = temp; 
    return i + 1; 
} 
  
/// Example usage of the quickSort function
void main() {
    List list = [5, 2, 10, 4, 7]; // create unsorted list
    print("Unsorted list: $list"); // print unsorted list
    quickSort(list, 0, list.length - 1); // sort list
    print("Sorted list: $list"); // print sorted list
}