/// A class for managing a list of animals
class AnimalManager {
  var _animals = List<Animal>();
  
  /// This method adds an animal to the list
  void addAnimal(Animal animal) {
    _animals.add(animal);
  }
  
  /// This method removes the first occurrence of an animal from the list
  void removeAnimal(Animal animal) {
    _animals.remove(animal);
  }
  
  /// This method returns the number of animals in the list
  int getAnimalCount() {
    return _animals.length;
  }
  
  /// This method returns a list of all animals that have a certain trait
  List<Animal> getAnimalsWithTrait(String trait) {
    List<Animal> animalsWithTrait = List<Animal>();
    
    for (var animal in _animals) {
      if (animal.hasTrait(trait)) {
        animalsWithTrait.add(animal);
      }
    }
    
    return animalsWithTrait;
  }
  
  /// This method prints out all animals in the list with their corresponding sounds
  void makeAnimalSounds() {
    for (var animal in _animals) {
      String sound = animal.makeSound();
      print("${animal.name} says $sound");
    }
  }
}

/// An abstract class for animals
abstract class Animal {
  String name;
  int age;
  
  /// A method that checks if the animal has a certain trait
  bool hasTrait(String trait);
  
  /// A method that returns the sound the animal makes
  String makeSound();
}

/// A class for cats that extends the Animal class
class Cat extends Animal {
  String name;
  int age;
  String breed;
  bool hasClaws;
  
  Cat(this.name, this.age, this.breed, this.hasClaws);
  
  @override
  bool hasTrait(String trait) {
    if (trait == 'carnivore') {
      return true;
    } else {
      return false;
    }
  }
  
  @override
  String makeSound() {
    return "meow";
  }
}

/// A class for dogs that extends the Animal class
class Dog extends Animal {
  String name;
  int age;
  String breed;
  String color;
  
  Dog(this.name, this.age, this.breed, this.color);
  
  @override
  bool hasTrait(String trait) {
    if (trait == 'loyal') {
      return true;
    } else {
      return false;
    }
  }
  
  @override
  String makeSound() {
    return "woof";
  }
}

// Create an instance of AnimalManager
var animalManager = AnimalManager();

// Add some animals to the list
animalManager.addAnimal(Cat('Fluffy', 5, 'Persian', false));
animalManager.addAnimal(Cat('Garfield', 3, 'Tabby', true));
animalManager.addAnimal(Dog('Buddy', 7, 'Golden Retriever', 'golden'));
animalManager.addAnimal(Dog('Max', 2, 'Labrador', 'black'));

// Print out the number of animals in the list
print("Number of animals: ${animalManager.getAnimalCount()}");

// Get all animals with the 'loyal' trait
List<Animal> loyalAnimals = animalManager.getAnimalsWithTrait('loyal');

// Print out the names of the loyal animals
print("Loyal animals:");
for (var animal in loyalAnimals) {
  print(animal.name);
}

// Make all animals in the list make their sounds
animalManager.makeAnimalSounds();