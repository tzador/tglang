// This is a nested function that performs a quicksort algorithm
void quickSort(List<int> array, int left, int right) {
    // Partition function that chooses a pivot point and sets it
    int partition(List<int> array, int left, int right) {
        int pivot = array[left];
        int i = left - 1;
        int j = right + 1;
        while (i < j) {
            do { i++;} while (array[i] < pivot);
            do { j--;} while (array[j] > pivot);
            if (i >= j) { break;}
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return j;
    }
    // If the left index is smaller than the right index, recursively call partition function
    if (left < right) {
        int pivotIndex = partition(array, left, right);
        quickSort(array, left, pivotIndex);
        quickSort(array, pivotIndex + 1, right);
    }
}
// Main function that calls the quickSort function
void main() {
    List<int> nums = [7, 3, 9, 2, 8, 4, 1, 5, 6];
    print("Unsorted array: $nums");
    quickSort(nums, 0, nums.length - 1);
    print("Sorted array: $nums");
}