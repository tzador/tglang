;; This code snippet demonstrates how to implement a binary search algorithm in FIFT

;; Define a function to perform binary search
;; Parameters:
;; - array: a sorted array of integers
;; - target: the integer value to be found
;; - start_index: starting index of the array (defaults to 0)
;; - end_index: ending index of the array (defaults to the length of the array - 1)
(define (binary-search array target [start-index 0] [end-index (- (length array) 1)])
  ;; Check if the start index is greater than the end index
  (if (> start-index end-index)
      ;; If yes, target value does not exist in the array
      (print "Target value does not exist in the array")
      ;; If no, continue with the binary search algorithm
      (let* (
        ;; Calculate the middle index
        (middle-index (floor (/ (+ start-index end-index) 2)))
        ;; Get the middle element of the array
        (middle-element (aref array middle-index)))
        
        ;; Compare the target value with the middle element
        (if (= target middle-element)
            ;; If they are equal, return the middle index
            middle-index
            ;; If the target is greater than the middle element, perform binary search on the right half of the array
            (if (> target middle-element)
                (binary-search array target (+ middle-index 1) end-index)
                ;; If the target is less than the middle element, perform binary search on the left half of the array
                (binary-search array target start-index (- middle-index 1)))))))

;; Create a sorted array to test the binary search
(define array #(1 3 5 10 12 15 20 25 30 35 40))

;; Test the binary search function
(print (binary-search array 5)) ;; Output: 2 (index of target value in the array)
(print (binary-search array 8)) ;; Output: Target value does not exist in the array
(print (binary-search array 20)) ;; Output: 6 (index of target value in the array)