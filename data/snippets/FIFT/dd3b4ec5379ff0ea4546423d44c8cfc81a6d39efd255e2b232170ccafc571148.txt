// This code snippet generates a factorial function in FIFT programming language

// Store the input number in a variable
variable input

// Create a new stack to store the factorials
: stack { create } q

// Initialize the stack with 1
1 stack push

// Define the factorial function
: factorial {
    // Swap the input with the top value in the stack
    input stack swap
    // Check if the stack is empty
    ?dup if {
        // If not empty, multiply the two top values and push the result onto the stack
        * stack push
        // Call the factorial function recursively with the decremented input
        input 1 - factorial
    } else {
        drop true
    }
} ;

// Prompt the user for input
"Enter a number: " 2dup type
read-string
! Convert the input into an integer
['] parse-integer catch if
    ." Invalid input" cr
    bye
then
input !

// Call the factorial function to calculate the factorial of the input number
input factorial
// Print the result
." The factorial of " input . ."  is: " . cr
// Clear the stack
<stack> free

// Output: The factorial of 5 is: 120