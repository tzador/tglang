/*
    This FIFT code snippet implements a binary search algorithm
    to search through a sorted list of integers.
    It returns the index of the element if found, or -1 if not found.
*/

// Create a function that takes in a list of integers and the element to search for
search(elementList, elementToFind):
{
    // Initialize the start and end indices for the search
    start = 0;
    end = sizeof(elementList) - 1; // -1 to account for 0-indexing

    // Loop until we have exhausted all possible indices between start and end
    while (start <= end):
    {
        // Calculate the mid index
        mid = start + (end - start) / 2; // To avoid integer overflow

        // Check if the element at the mid index is equal to the element we are searching for
        if (elementList[mid] == elementToFind):
        {
            // Return the index of the element found
            return mid;
        }
        // Check if the element at the mid index is greater than the element we are searching for
        else if (elementList[mid] > elementToFind):
        {
            // Update the end index to search the left half of the list
            end = mid - 1;
        }
        // If not, the element must be in the right half of the list
        else:
        {
            // Update the start index to search the right half of the list
            start = mid + 1;
        }
    }

    // If no element is found, return -1
    return -1;
}

// Example usage
result = search([1, 4, 6, 8, 9], 8); // Returns 3
result = search([2, 5, 7, 11, 14], 4); // Returns -1