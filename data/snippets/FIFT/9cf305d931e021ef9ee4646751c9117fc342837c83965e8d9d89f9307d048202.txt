/* This code snippet is written in FIFT, a functional imperative programming language */

:: func fib :

    // Define a function named 'fib', which takes in no arguments
    // and returns an integer value representing the Fibonacci sequence

    0 1 { // | 0 is the first term, 1 is the second term

        // First, we define variables 'a' and 'b' to store the previous two terms
        'a -> reg
        'b -> reg

    } execute

    // Next, we use a loop to iterate through the sequence, adding the two previous terms
    // and storing the result in the variable 'c'
    20 { // | Will calculate the first 20 terms in the sequence

        // The variable 'c' represents the current term in the sequence
        'a 'b + 'c -> reg // | Add previous terms and assign result to 'c'

        // Shift the values in the variables 'a' and 'b' forward by one
        // This will ensure that the next iteration uses the correct previous values
        'b ->l 'a ->l

        // Print out the current term in the sequence
        'c -> uni

    } #loop

    // End of loop

    // Output the result, the last term calculated represents the 20th term in the sequence
    'c -> reg

;; // End of function