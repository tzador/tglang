(: factorial : n -- n!)
n 0 = [drop 1] [dup 1 - factorial *] cond ;

(: map : f lst -- lst'
  ()
    dup null? not
    [dup 'head >= [ [pop] dip uncons] dip [cdr] dip recursive] apply concat
;

list[int] 1 2 3 ;
:double, ;
(: insert_sort
  list[int] act None | act None
  [dup hd act = [cdn None] [map[label int list[int]] dup act < > not if: [shift] [push] act] cond
   dup null? [pop cdr] [rec] cond
] ;
insert_sort