(* This is a code snippet in FIFT *)
     / 10 20 "string" { 10 20 + } exec
     (* The above line creates a new integer `10`, pushes it onto the stack,
     then a new integer `20` is pushed onto the stack, followed by a new string "string" *)
     (** This is a comment in FIFT **)
     dup 0% = not
     if
     (* The above line makes a copy of the top element on the stack,
     checks if it is equal to zero and negates the result *)
     swap
     if
     (* The above line swaps the top two elements on the stack and checks if the
     second element is true, if so, it executes the code that follows *)
     * -2 **
     (* The above line multiplies the top two elements on the stack, subtracts 2 from the result,
     and then raises it to the power of 2 *)
     else
     (* If the second element is not true, then this code gets executed *)
     swap
     if
     (* The above line swaps the top two elements on the stack and checks if the
     second element is true, if so, it executes the code that follows *)
     { 10 5 + } exec
     (* The above line creates a new block that adds 10 and 5 and then executes it *)
     else
     (* If the second element is not true, then this code gets executed *)
     drop
     (* The above line removes the top element from the stack *)
     then
     (* End of inner if statement *)
     else
     (* If the first element is not true, then this code gets executed *)
     drop
     (* The above line removes the top element from the stack *)
     then
     (* End of outer if statement *)
     (* The final result should be -1538 as the stack will contain the integer 25 *)