{ This is a code snippet in FIFT, a programming language for creating and manipulating ton blockchain smart contracts. }

FUNC CIRCLE (radius: Int): Int { Define a function called CIRCLE that takes in a parameter 'radius' of type Int and returns a value of type Int. }
    radius D * { Multiply the radius by D, a constant value for calculating the circumference of a circle. }
    2 * PI * { Multiply the result by 2 and PI, constants for calculating the circumference of a circle. }
    RETURN { Return the calculated value. }
ENDFUNC

VAR diameter { Define a variable called diameter. }
2 * radius ! { Assign a value to diameter by multiplying 2 with the input parameter 'radius' and then storing it in the variable. }
IS (VAR) ! { Store the variable in a smart contract variable storage. }

FUNC AREA (radius: Int): Int { Define a function called AREA that takes in a parameter 'radius' of type Int and returns a value of type Int. }
    PI * { Multiply the radius by PI, a constant value for calculating the area of a circle. }
    radius D * { Multiply the result by D, a constant value for calculating the area of a circle. }
    RETURN { Return the calculated value. }
ENDFUNC

VAR area { Define a variable called area. }
radius @ AREA ! { Assign a value to area by calling the AREA function and then storing the result in the variable. }
IS (VAR) ! { Store the variable in a smart contract variable storage. }

{
    This is an example smart contract that calculates the diameter and area of a circle using the CIRCLE and AREA functions. 
}

TEST 'calculateCircle' { Define a test called 'calculateCircle'. }
    10 CIRCLE { Calculate the circumference of a circle with a radius of 10. }
    10 AREA { Calculate the area of a circle with a radius of 10. }
    20 156 (Int) !! { Verify that the circumference is 20 and the area is 156 using an assertion operator. }
ENDTEST

// To deploy this smart contract on ton blockchain, call the TEST function with the appropriate parameters.