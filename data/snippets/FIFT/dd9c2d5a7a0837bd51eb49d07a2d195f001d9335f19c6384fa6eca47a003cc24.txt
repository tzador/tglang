# FIFT code snippet for finding all prime numbers in a given range
!{{\ load polynomial.fif 'pol' }}
{{\ define\ get_primes\ }}
  {{\ dup\ 3\ >=\ {{\IF}} }}
    {{\ "." }}
  {{\ ELSE}}
    {{\ 2\ ":"\ 2\ swap\ dup\ while\ swap\ is-prime\ {{\IF}} colon\ "." }}
    {{\ 3\ :}\ rot\ 1\ +\ dup\ over\ =\ {{\IF}} cr\ {{\ELSE}} 2\ }} 
    %1{{\;\  \ lshift\ colon\ lshift\ dot\ dot\ get_primes\ }}
  {{\ THEN }}
    {{\ -rot\ . }}
  {{\ THEN}}
{{\ ;}}

# Explanation:
!{{\ load polynomial.fif 'pol' }} // Loads the required library for polynomial calculations
{{\ define\ get_primes\ }} // Defines the function "get_primes" which takes no arguments
  {{\ dup\ 3\ >=\ {{\IF}} }} // Checks if the value at the top of the stack is greater than or equal to 3, if not, exits the function
    {{\ "." }} // Prints a "." on the terminal
  {{\ ELSE}}
    {{\ 2\ ":"\ 2\ swap\ dup\ while\ swap\ is-prime\ {{\IF}} colon\ "." }} // Prints all prime numbers between 2 and the given range (using the function "is-prime" from the loaded library)
    {{\ 3\ :}\ rot\ 1\ +\ dup\ over\ =\ {{\IF}} cr\ {{\ELSE}} 2\ }} 
    // Checks if the current number is divisible by 2, if yes, prints a new line character, else, prints the number followed by a space
    %1{{\;\  \ lshift\ colon\ lshift\ dot\ dot\ get_primes\ }}
    // Multiplies the current number by 2, adds 1 and recursively calls the "get_primes" function
  {{\ THEN }}
    {{\ -rot\ . }} // Takes the top two numbers from the stack, rotates them and prints them on the terminal
  {{\ THEN}}
{{\ ;}} // Ends the function definition