;; This code snippet is a Quicksort implementation in FIFT programming language.
;; It takes an unsorted list as input and returns the sorted list using recursion.
;; The pivot is chosen as the first element in the list.

;; Function to partition the list
func PARTITION(list):
    ;; Set the pivot as the first element in the list
    var pivot := list[0]

    ;; Create two empty lists to store elements lower and higher than the pivot
    var lower_list := []
    var higher_list := []

    ;; Loop through the elements in the list, starting from the second element
    for elem in list[1:]:
        ;; If the element is less than or equal to pivot, add it to the lower list
        if elem <= pivot:
            lower_list += [elem]
        ;; If the element is greater than pivot, add it to the higher list
        else:
            higher_list += [elem]
    
    ;; Join the lower list, pivot, and higher list to form a sorted list
    return PARTITION(lower_list) + [pivot] + PARTITION(higher_list)

;; Function to perform Quicksort
func QUICKSORT(list):
    ;; Base case: return the list if it has only one element
    if len(list) <= 1:
        return list

    ;; Partition the list and store the result in a variable
    var partitioned := PARTITION(list)

    ;; Divide and conquer: recursively call QUICKSORT on the lower and higher lists
    var lower_list := QUICKSORT(partitioned[:len(partitioned)//2])
    var higher_list := QUICKSORT(partitioned[len(partitioned)//2:])

    ;; Join the sorted lower list, pivot, and sorted higher list to form the final sorted list
    return lower_list + higher_list

;; Sample input list
var input_list := [7, 3, 9, 2, 5, 1, 8, 4, 6]

;; Call QUICKSORT function on the input list and store the sorted list in a variable
var sorted_list := QUICKSORT(input_list)

;; Output the final sorted list
print("Sorted list: " + sorted_list)