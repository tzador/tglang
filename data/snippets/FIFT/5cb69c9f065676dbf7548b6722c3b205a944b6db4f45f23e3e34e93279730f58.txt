// This program calculates the nth prime number using the Sieve of Eratosthenes algorithm
// Define variables
var n, i, j, count, max, primeNums[];
// Input the value of n
n = getinput();
// Initialize the array of prime numbers with 2 as the first prime number
primeNums[1] = 2;
// Initialize the counter to 1
count = 1;
// Initialize the iterator variable i to 3
i = 3;
// Loop until the counter reaches n
while count < n do
{
  // Check if the number is prime by traversing through the array of prime numbers
  for j from 1 to count do
  {
    // If the number is divisible by any of the previous prime numbers, it is not a prime number
    if i % primeNums[j] == 0 then
    {
      // Break the inner loop
      break;
    }
    // If it is not divisible by any of the previous prime numbers and we have reached the end of the loop, it is a prime number
    if j == count then
    {
      // Increment the counter
      count++;
      // Add the prime number to the array
      primeNums[count] = i;
    }
  }
  // Increment the iterator
  i++;
}
// Output the nth prime number
output primeNums[n];