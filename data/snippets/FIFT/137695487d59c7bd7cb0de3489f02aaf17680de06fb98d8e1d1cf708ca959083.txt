___Compiler directives___

Compiler directives are special instructions that tell the FIFT compiler how to interpret and compile the code. They are denoted by a double underscore before and after the directive name.
Examples of compiler directives include `___import___` which allows for importing external libraries, `___optimize___` which optimizes the code for efficiency, and `___include___` which includes additional files in the compilation process.

___Global declarations___

Global declarations define variables and constants that can be accessed from any part of the code. They are declared using the `___define___` directive and must be given a unique name and an initial value. For example: `___define__counter 0___` creates a variable named `counter` with an initial value of 0.

___Functions___

Functions in FIFT are defined using the `___function___` keyword, followed by the function name and a list of parameters enclosed in parentheses. Inside the function body, local variables can be defined using the `___let___` directive. A `___return___` directive is used to specify the output of the function. For example: