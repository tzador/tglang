#Function to calculate the factorial of a given number
: factorial ( n -- res ) { 
    1 swap loop
    0 swap loop-call swap 1 loop-while-done 
} ; 

#Function to calculate the sum of squares of numbers from 1 to n
: sum-squares ( n -- res ) { 
    0 swap loop
    0 swap loop-call
    sqrt over * swap exchange /  
} ; 

#Function to calculate the nth Fibonacci number
#Uses loop and loop-call to iterate through the sequence
#n+2 is used to account for starting at 0
: fib ( n -- res ) { 
    0 1 swap loop
    0 1 swap loop-call n + 2 loop-while-done 
} ; 

#Function to find the greatest common divisor of two numbers
#Uses Euclid's algorithm to iteratively calculate GCD
: gcd ( a b -- res ) { 
    dup rot over rot 4 pick while
        2 pick 
        2 pick 3 pick mod 
        4 pick
        swap 
    repeat
    2 pick pop
} ; 

#Function to check if a number is prime using trial division
: is-prime ( n -- res ) { 
    2 0 1 rot 3 roll 1 + loop 2 1 roll 
    dup 0 = if 2 drop 0 else swap then ; 
} ; 

#Example Usage:
13 factorial => 6227020800
10 sum-squares => 385
8 fib => 21
24 60 gcd => 12
50 is-prime => 0 (not prime)
47 is-prime => 1 (prime)