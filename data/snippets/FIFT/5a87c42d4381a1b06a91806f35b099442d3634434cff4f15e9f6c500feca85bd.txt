// This is an example of a code snippet in FIFT, a functional programming language

fun # (x)
  length x 1 >0 -> "List too short"
  ||| [ x >] @ [length >] [0] # @  // finds the length of a list

sum = [ list | | (init accu) new_accu ->
  [[[nil list first] new_accu list next] >>> copy [new_accu list second] copy]
  >>> repl (init accu)
  while dup [[[nil] tail] drop == not] [] ifte

prod = [ list | * (x) sum [ +1] x] >>>
  repl [null { |2 prod} while (* of list elements)

filter = [ list | | (p) res_list ->
  [[[nil list first] p if] res_list list next] while
  dup [[[nil] tail] drop == not] [] ifte

====
The following code snippet showcases the use of functions and operations in FIFT.

// Function to find the length of a list
fun # (x)
  length x 1 >0 -> "List too short"
  ||| [ x >] @ [length >] [0] # @

// Function to find the sum of a list
sum = [ list | | (init accu) new_accu ->
  [[[nil list first] new_accu list <<] >> copy [new_accu list second] copy]
  >> repl (init accu)
  while dup [[[nil] tail] drop == not] [] ifte

// Function to find the product of a list
prod = [ list | * (x) sum [ +1] x] >>>
  repl [null { |2 prod} while (* of list elements)

// Function to filter a list based on a predicate
filter = [ list | | (p) res_list ->
  [[[nil list first] p if] res_list list next] while
  dup [[[nil] tail] drop == not] [] ifte