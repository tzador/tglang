// This is a FIFT code snippet that generates Fibonacci numbers recursively

<%Fibonacci sequence filled with '0', '1', and '1'>
1 0 left set.
1 1 left set.

// Recursive function to calculate Fibonacci numbers
: calc_fib ( n -- result )
dup 1<= ( n <= 1 )
  if ( base case )
    >r ( save n for later )
    exit  ( n )
  else ( recursive case )
    1- dup 1- rot                 ( n-2 n-1 n )
    rot calc_fib swap              ( n-1 result )
    rot calc_fib swap              ( result n-2 n-1 )
    r> 2 over - +                  ( n-2+n-1 result )
  then ;

// Iteratively calculate Fibonacci numbers
: fib ( n -- result )
1 0 rot swap n 1
begin dup calc_fib
  ( continue until n=0 )
again
drop drop ;

// Test cases
10 fib .      ( output: 55 )
20 fib .      ( output: 6765 )
30 fib .      ( output: 832040 )

// Extra credit: generate Fibonacci sequence from 0 to n
: fib_seq ( n -- )
2 + ( 0 0 1 1 )
begin dup fib . 1- swap
while dup 0< ( continue until n=0 )
repeat ;

// Test case
10 fib_seq
( output:
0 
1 
1 
2 
3 
5 
8 
13 
21 
34 
55 )