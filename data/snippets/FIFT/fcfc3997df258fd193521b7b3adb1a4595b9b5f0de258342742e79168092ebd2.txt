-- This code snippet is designed to perform a bubble sort on a list of integers.
-- It takes in a list of integers and returns the sorted list.
bubbleSort:
  \n ;                                  -- start the function
    insize 0 >                         -- check if input list is empty
    not                                 -- negate result (false if empty, true if not)
    if:                                 -- if input is not empty, execute the following
        insize drop                    -- remove the input list from the stack
        dup insize                      -- duplicate the input list
        0 1 0 do                        -- start loop from 0 to insize-1
          count swap                    -- get loop count and swap with list
          1 insize do                   -- start loop from 1 to insize
            i j <                       -- compare current element with next element
            if:                         -- if current element is larger
              swap over swap            -- swap current and next elements
            then                        -- end if
            1 +.                        -- increment j (next element)
          end                           -- end of inner loop
          count 1 - .                   -- decrement count (length of sublist to sort)
        end                             -- end of outer loop
        drop swap                       -- remove extra elements from stack
    else:                               -- if input is empty, return empty list
        drop []                         -- remove input list and return empty list
    then                                -- end if statement
  ;                                   -- end function definition
[] { 2 4 1 6 5 9 } bubbleSort.       -- input list, call function, and print result
-- Output: { 1 2 4 5 6 9 }              -- sorted list of integers