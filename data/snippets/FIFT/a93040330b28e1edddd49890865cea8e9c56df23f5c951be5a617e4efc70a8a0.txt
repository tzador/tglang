;; Define a function that returns the sum of two numbers
    : ADD ( n1 n2 -- sum )
    2 array# swap         ;; Move the two numbers to the end of the array
    [                     ;; Begin array
        over            ;; Duplicate the top of the stack (n2)
        over            ;; Duplicate the top of the stack (n1)
        +               ;; Add n1 and n2
    ] call               ;; End array and execute the function
    nip ;                  ;; Remove the remaining array and return the sum
    
    ;; Define two variables with initial values
    5 first-var !
    10 second-var !
    
    ;; Call the ADD function to get the sum of the two variables
    first-var second-var ADD .
    |> Output: 15
    
    ;; Define a recursive function that returns the factorial of a number
    : FACT ( n -- factorial )
    dup 1 <=
    [ drop 1 ]
    [
        dup 1 -
        FACT
        *
    ] if ;
    
    ;; Call the FACT function to get the factorial of 5
    5 FACT .
    |> Output: 120