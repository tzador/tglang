;;; $FIFT program to generate a Fibonacci sequence

;;; Declare function to generate the Fibonacci sequence
: fib $0 list # implement using the $0 list code

;;; Define function to generate the $0 list code
: $0 0 swap list-equal! $0 $1 next-fib list-end ;;; swap & list-equal! instructions
                                               ;;; to compare $0 and $1
                                               ;;; $1 is the next Fibonacci number

;;; Define function to generate the next Fibonacci number
: next-fib swap $1 swap $0 + $1 ;;; swap, add $0 and $1, $1 is the next Fibonacci number

;;; Initialize the Fibonacci sequence with the first two numbers
[ 0 1 ] swap ;;; put the first two numbers in reverse order for proper sequence

;;; Loop to generate the rest of the sequence
beg do                      ;;; begin loop
dup [dup $0 fib swap] call  ;;; duplicate the sequence so far
                           ;;; and call the fib function to add the next Fibonacci number
dup $1 >                    ;;; check if the last generated number is greater than $1
while                       ;;; if not, continue the loop
end ;;; end loop


;"
Fibonacci sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, ...]