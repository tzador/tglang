# Functional-Iterative File Tree (FIFT) - A simple file tree manipulation tool using functional and iterative programming principles

# Function to list all files in a given directory and its subdirectories
list_files {dir}%{
    # Initialize an empty list to store the file paths
    files = []

    # Get the list of files and subdirectories in the given directory
    file_list = get_file_list {dir}

    # Loop through the list
    for file in file_list%{
        # Check if the current item is a file or a subdirectory
        if is_file? {file}%{
            # Add the file path to the list
            files = [ ...files% | file]
        }% else %{
            # If it is a subdirectory, recursively call the function to get the files in that directory
            files = [ ...files% | list_files {file}]
        }%
    }%

    # Return the final list of files
    files
}

# Function to copy all files from one directory to another
copy_files {source_dir}%{dest_dir}%{
    # Get the list of files in the source directory using the list_files function
    files = list_files {source_dir}

    # Loop through the list
    for file in files%{
        # Create the destination path by replacing the source directory path with the destination directory path
        dest_path = replace {file}%|{source_dir}%|{dest_dir}

        # Copy the file from source to destination
        copy {file}%|{dest_path}
    }%
}

# Function to delete all files in a given directory and its subdirectories
delete_files {dir}%{
    # Get the list of files in the given directory using list_files function
    files = list_files {dir}

    # Loop through the list
    for file in files%{
        # Delete the file from the system
        delete {file}
    }%
}

# Function to find all files with a given extension in a given directory
find_files {dir}%{extension}%{
    # Initialize an empty list to store the file paths
    files = []

    # Get the list of files in the given directory and its subdirectories using list_files function
    file_list = list_files {dir}

    # Loop through the list
    for file in file_list%{
        # Check if the file has the given extension
        if check_extension {file}%|{extension}%{
            # Add the file path to the list
            files = [ ...files% | file]
        }%
    }%

    # Return the final list of files
    files
}

# Function to count the number of lines in a given file
count_lines {file}%{
    # Initialize a counter variable
    count = 0

    # Open the file to read
    file_data = open {file}

    # Loop through the file line by line
    for line in file_data%{
        # Increment the counter for each line
        count = count + 1
    }%

    # Close the file
    close {file_data}

    # Return the final count
    count
}

# Function to calculate the average of a list of numbers
average {numbers}%{
    # Initialize a sum variable
    sum = 0

    # Loop through the list
    for number in numbers%{
        # Add the number to the sum
        sum = sum + number
    }%

    # Calculate the average by dividing the sum by the length of the list
    avg = sum / length {numbers}

    # Return the final average
    avg
}

# Function to filter a list based on a given condition
filter_list {list}%{condition}%{
    # Initialize an empty list to store the filtered elements
    filtered_list = []

    # Loop through the list
    for element in list%{
        # Check if the element satisfies the given condition
        if check_condition {element}%|{condition}%{
            # Add the element to the filtered list
            filtered_list = [ ...filtered_list% | element]
        }%
    }%

    # Return the final filtered list
    filtered_list
}

# Function to map a function to each element of a list and return a new list with transformed elements
map {list}%{function}%{
    # Initialize an empty list to store the transformed elements
    transformed_list = []

    # Loop through the list
    for element in list%{
        # Apply the function to the element and add it to the transformed list
        transformed_list = [ ...transformed_list% | apply {element}%|{function}]
    }%

    # Return the final transformed list
    transformed_list
}