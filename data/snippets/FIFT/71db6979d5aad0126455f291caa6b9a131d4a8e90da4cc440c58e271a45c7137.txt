;; This is a code snippet in FIFT - a functional programming language
;;
;; This program calculates the factorial of a given number using recursion

{"func_fact"}       ( the function name is enclosed in curly braces )
<
  dup               ( creates a copy of the input number on the stack )
  1 eq {            ( checks if the number is equal to 1 )
    drop            ( drops the number from the stack )
    1               ( returns 1, the factorial of 1 )
  }{
    dup             ( creates another copy of the input number )
    1               ( sets the initial value of the accumulator to 1 )
    swap            ( swaps the position of the two numbers on the stack )
    {               ( start of the while loop )
      swap over     ( moves the accumulator on top of the input number )
      *             ( multiplies the accumulator by the input number )
      swap 1 -       ( decrements the input number by 1 )
      dup 0 eq  {    ( checks if the input number is equal to 0 )
        drop         ( drops the input number from the stack )
        drop         ( drops the accumulator from the stack )
        1            ( returns the result )
      }{
        swap        ( swaps the position of the input number and the accumulator )
        dup         ( creates another copy of the input number )
        1           ( sets the initial value of the counter to 1 )
        -           ( subtracts 1 from the input number )
      } ifte       ( end of the if/else statement )
    } loop        ( end of the while loop )
  } ifte         ( end of the if/else statement )
>
{       ( start of the factorial function )
    {"n"} ( variable n is used to store the input number )
    <     ( takes input from the user )
      {n} ( stores the input number in n )
    >
    n
    func_fact ( calls the func_fact function with input n )
>       ( returns the result of the factorial function )