{ This code snippet is an example of using a binary search algorithm in FIFT }
 
alias binary_search # Function to perform binary search
[
    { Store the input array in a variable }
    swap              # Swap the array and the search key
    swap              # Swap again to return to original order
    [                 # Begin loop
        dup          # Duplicate the array for manipulation
        { Calculate the mid index of the array }
        dup          # Duplicate the array again
        length 2div  # Divide the length of the array by 2 to get the mid index
        get          # Get the value at the mid index
        { Compare the mid value with the search key }
        over <       # Check if the mid value is less than the search key
        { If true, push the first half of the array onto the stack }
        [ swap length - 1 get {-Index of last element in first half-} - - ] if
        over >       # Check if the mid value is greater than the search key
        { If true, push the second half of the array onto the stack }
        [ length - 1 get {-Index of last element in second half-} - - ] if
        { If false, the mid value must be equal to the search key }
        [ exch pop ] ifelse
        { Check if the stack is empty or not }
        dup empty
    ] 0 repeat         # Repeat until the stack is empty
    dup                 # Duplicate the stack to check for success/failure
    empty               # Check if the stack is empty
    { If empty, the search key is not found }
    [ false ] when
    { If not empty, the search key is found }
    [ true ] when
]
 
alias example_array # Example input array
[
    2
    5
    7
    9
    12
    15
    19
    24
]
 
alias example_key 12 # Example search key
 
d  # Push output on the stack
 
binary_search example_array example_key # Call the binary_search function with example_array and example_key as arguments