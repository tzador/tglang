/breakpoint

( This function takes in two arguments, x and y, and returns the value of x raised to the power of y. )
: exp
    ( x y -- result )
    dup 0 = ( checks if y is equal to 0 )
    if ( if true, move to next line )
        drop 1 ( drops y and returns 1 )
    else ( else, move to next line )
        dup 1 > ( checks if y is greater than 1 )
        if ( if true, move to next line )
            dup 2 * swap exp ( recursively calculates the exponent )
        else ( else, move to next line )
            swap drop 1 ( drops y and returns x )
        endif ( ends the nested if statement )
    endif ( ends the first if statement )
; ( ends the function definition )

/breakpoint

( This function takes in three arguments, a, b, and c, and returns the value of the quadratic equation ax^2 + bx + c. )
: quad
    ( a b c -- result )
    dup dup 2dup 2dup 0 > ( checks if all three arguments are greater than 0 )
    if ( if true, move to next line )
        dup sqrt ( calculates the square root of the discriminant )
        swap swap swap 2 * - ( calculates the two roots of the equation )
        swap swap neg swap ( negates and swaps the roots )
    else ( else, move to next line )
        drop nip ( drops the first two arguments and returns 0 )
    endif ( ends the if statement )
; ( ends the function definition )

/breakpoint