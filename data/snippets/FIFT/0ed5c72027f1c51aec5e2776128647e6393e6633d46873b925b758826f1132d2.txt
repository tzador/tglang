;;; Sample code in FIFT
;; This program generates a random number and checks if it is prime using the Miller-Rabin primality test

;;; Define function for generating random number
(defun random (min max)
  (let ((range (- max min)))
    (+ min (random range))
  )
)

;; Define function for exponentiation
(defun exp (b n m)
  (if (= n 0)
      1
      (if (= (% n 2) 0)
          (exp (mod (* b b) m) (/ n 2) m)
          (mod (* b (exp b (- n 1) m)) m)
      )
  )
)

;;; Define function for computing the Jacobi symbol 
(defun jacobi (a n)
  (let ((j 1))
    (if (> a n)
        (jacobi (mod a n) n)
        (if (or (= a 0) (= a 1))
            j
            (if (= (% a 2) 0)
                (if (or (= (% n 8) 1) (= (% n 8) 7))
                    (jacobi (/ a 2) n)
                    (- j (jacobi (/ a 2) n))
                )
                (if (or (= (% n 4) 1) (= (% a 4) 1))
                    (jacobi n a)
                    (- j (jacobi n a))
                )
            )
        )
    )
  )
)

;;; Define function to perform Miller-Rabin primality test
(defun miller-rabin-test (n)
  (let ((s 0)
        (d (- n 1))
  )
    (while (= (% d 2) 0)
      (setq d (/ d 2))
      (setq s (+ s 1))
    )

    (let ((a (random 2 (- n 1)))
          (x (exp a d n))
    )
      (if (or (= x 1) (= x (- n 1)))
          #t ;; number is probably prime
          (do ((r 1 (- s 1)))
              ((= r s))
            (if (= (% x n) 1)
                #f ;; number is composite
                (if (= (% x n) (- n 1))
                    #t ;; number might be prime
                    (setq x (exp x 2 n))
                )
            )
          )
      )      
    )
  )
)

;;; Generate random number between 100 and 1000
(setq num (random 100 1000))

;;; Check if number is prime using Miller-Rabin test
(if (miller-rabin-test num)
    (print "The number is probably prime")
    (print "The number is composite")
)