# This is a complex FIFT code snippet

cell {"Hello world!"}       # Creates a cell with a string value

swap                       # Swaps the top two elements on the stack

# Cuts the string at the space character
cell {"Hello world!"}      # Push the cell onto the stack
dup                        # Duplicate the top element on the stack
dup                        # Duplicate it again (now at the top of the stack)
cell {<spaces>}            # Push a cell with a space character onto the stack
bitstring                  # Convert the space cell to a bitstring
cat                        # Concatenate the two cells
bitstring                  # Convert the result back to a bitstring
slice                      # Cut the string at the space character
swap                       # Swap the top two elements on the stack
drop                       # Drop the extra bitstring
dup                        # Duplicate the cut string
bitstring                  # Convert it to a bitstring

exch                       # Exchange the topmost elements on the stack
bitstring                  # Convert the bitstring back to a cell
not                        # Inverts the bitstring in the cell
bitstring                  # Convert it back to a bitstring
drop                       # Drop the extra cell

over                       # Copy the second element on the stack to the top
bitstring                  # Convert the second element (bitstring) to a cell
cat                        # Concatenate the two cells
bitstring                  # Convert the result back to a bitstring
slice                      # Cut the string at the space character
swap                       # Swap the top two elements on the stack
bitstring                  # Convert the bitstring back to a cell
not                        # Inverts the bitstring in the cell
concat                     # Concatenate the two bitstrings
bitstring                  # Convert the result back to a bitstring
slice                      # Cut the string at the second space character
flip                       # Reverse the order of the bits in the bitstring
dup                        # Duplicate the bitstring
bitstring                  # Convert it to a cell

# Removes all space characters from the string
cell {<spaces>}            # Push a cell with a space character onto the stack
slice                      # Cut the string at the space character
drop                       # Drop the extra cell
flip                       # Reverse the order of the bits in the bitstring
dup                        # Duplicate the bitstring
bitstring                  # Convert it to a cell
or                         # Perform a bitwise OR operation with the two bitstrings
bitstring                  # Convert the result back to a bitstring
flip                       # Reverse the order of the bits again
dup                        # Duplicate the bitstring
bitstring                  # Convert it to a cell
mul                        # Perform a bitwise multiplication with the two bitstrings
bitstring                  # Convert the result back to a bitstring

# Creates a new cell with a single 0 (empty cell)
cell {<zeros>}             # Push a cell with a 0 onto the stack
bitstring                  # Convert the cell to a bitstring
dup                        # Duplicate the bitstring
pushuint                   # Push the length of the first bitstring (string with no spaces)
bitstring or               # Perform a bitwise OR operation between the lengths
dup                        # Duplicate the result
bitstring xor              # Perform a bitwise XOR operation between the lengths
bitstring                  # Convert the result back to a bitstring
bitand                     # Perform a bitwise AND operation with the two bitstrings
cell                       # Convert the bitstring back to a cell
symmetric                  # Swap the top two elements on the stack

drop                       # Drop the extra bitstring
drop                       # Drop the extra cell

# Outputs the final cell value
cell