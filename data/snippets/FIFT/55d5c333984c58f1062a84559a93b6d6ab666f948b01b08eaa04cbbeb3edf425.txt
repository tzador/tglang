;; This code snippet in FIFT generates a prime number checker function

push [$LP2C] ;; Push the label 2nd Copy to current data stack
push ${C2LP} ;; Push the constant 2nd Copy to label pointer stack
copy ;; Copy the top element of current data stack to label pointer stack
eq ;; Compare if elements are equal, returns boolean
not ;; Negates the boolean, checking if elements are not equal
jump ?1 ;; Jump to label 1 if not equal
pop ;; Pop the top element if they are equal
push [0] ;; Push the label 0 to current data stack
ret ;; Return from function

;; This label defines the functionality of the prime number checker
Label 1: 
push [1] ;; Push the label 1 to current data stack
push [*] ;; Push the label * to current data stack
push ${ARGV[0]} ;; Push the argument passed to the function
push [/%] ;; Push the label /% to current data stack
push [*] ;; Push the label * to current data stack
push ${ARGV[0]} ;; Push the argument passed to the function
push [~] ;; Push the bitwise NOT label ~ to current data stack
push [=] ;; Push the label = to current data stack
push [2] ;; Push the label 2 to current data stack
push [<] ;; Push the label < to current data stack
push [2] ;; Push the label 2 to current data stack
pop ;; Pop the top element if they are less than 2, not a prime number
push [0] ;; Push the label 0 to current data stack
ret ;; Return from function

;; This label defines the functionality of multiplying the top two elements of current data stack
Label *: 
pop ;; Pop the top two elements
mul ;; Multiply the two elements
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; This label defines the functionality of dividing the top element of current data stack by the value passed as argument
label /%:
pop ;; Pop the top two elements
div ;; Divide the two elements
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; This label defines the functionality of checking if two elements are equal
label =: 
eq ;; Compare if elements are equal, returns boolean
push ${C2LP} ;; Push the constant 2nd Copy to label pointer stack
swap ;; Swap the top two elements
push [$LP2C] ;; Push the label 2nd Copy to current data stack
copy ;; Copy the top element of current data stack to label pointer stack
eq ;; Check if elements are equal, returns boolean
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; This label defines the functionality of checking if top element is less than the value passed as argument
Label <: 
pop ;; Pop the top element
push ${ARGV[0]} ;; Push the argument passed to the function
push [>] ;; Push the label > to current data stack
not ;; Negate the boolean, checking if top element is not greater than argument
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; This label defines the functionality of bitwise NOT operation
Label ~: 
not ;; Negate the top element, returns its bitwise complement
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; This label defines the functionality of retrieving the first argument passed to the function
Label ARGV: 
pop ;; Pop the top element
push {$ARGC} ;; Push the constant ARGC to current data stack
push [-] ;; Push the label - to current data stack
ret ;; Return from function

;; Constant definition for ARGC
{{ ARGV23 }}
pop ;; Pop the top element
push [4] ;; Push the label 4 to current data stack
push [0] ;; Push the label 0 to current data stack
push [4] ;; Push the label 4 to current data stack
push [1] ;; Push the label 1 to current data stack
push [2] ;; Push the label 2 to current data stack
push [3] ;; Push the label 3 to current data stack
push [4] ;; Push the label 4 to current data stack
push [5] ;; Push the label 5 to current data stack
push [6] ;; Push the label 6 to current data stack
push [7] ;; Push the label 7 to current data stack
push [8] ;; Push the label 8 to current data stack
push [9] ;; Push the label 9 to current data stack
push [10] ;; Push the label 10 to current data stack
push [11] ;; Push the label 11 to current data stack
push [12] ;; Push the label 12 to current data stack
push [13] ;; Push the label 13 to current data stack
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
swap ;; Swap the top two elements
add ;; Add the top two elements, adding argument to constant value
push [=] ;; Push the label = to current data stack
ret ;; Return from function

;; Label definition for the 2nd Copy
Label LP2C: [LP2C]
push [2] ;; Push the label 2 to current data stack
ret ;; Return from function

;; Label definition for the constant 2nd Copy
Label C2LP: ${C2LP}
push [2] ;; Push the label 2 to current data stack
ret ;; Return from function