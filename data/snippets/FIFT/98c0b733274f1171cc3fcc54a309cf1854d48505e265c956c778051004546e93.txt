// Function to calculate the nth Fibonacci number using factorial
: fibonacci(n) {
    0 n <= // base case: if n is 0 or negative, return 0
    if {
        0 // return 0 if base case is true
    } else {
        1 n = // base case: if n is 1, return 1
        if {
            1 // return 1 if base case is true
        } else {
            n dup 1 - fibonacci swap 2 - fibonacci * + // perform recursive calculation
        }
    };
}

// Function to check if a number is prime or not
: isPrime(n) {
    2 n = // base case: if n is 2, return true
    if {
        true // return true if base case is true
    } else {
        2 1 n - range // generate list of numbers from 2 to n-1
        dup { // loop through list
            2 pick { 
                n mod 0 = // check if n is divisible by current number
            } n pick and { // perform AND operation with previous booleans
                true // return true if current number is a factor of n
            } { // if current number is not a factor, return false
                false
            } ifelse
        } forall // loop through list and perform operation on all elements
        pop pop // clean up stack
    }
}

// Function to check if a string is a palindrome
: isPalindrome(s) {
    dup size - 1 - 0 { // loop through first half of the string
        1 pick swap pick ne // check if current and corresponding character from end are not equal
    } forall // loop through all characters in first half and perform operation
    pop pop // clean up stack
}

// Main program
n := 10; // set value of n
n fibonacci println; // print nth Fibonacci number
n isPrime println; // print whether n is prime or not
"racecar" isPalindrome println; // print whether "racecar" is a palindrome or not