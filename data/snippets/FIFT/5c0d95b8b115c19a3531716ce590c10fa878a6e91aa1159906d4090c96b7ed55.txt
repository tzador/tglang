% This snippet shows a complex matrix-multiplication function in FIFT
: mat-mult ( mat1 mat2 -- result )
[
    % Input validation
    dup length 0= IF
        ." Invalid input: empty matrix" 
        abort 
    THEN
    dup 0 ?DO
        % Ensure mat1 dimensions match with mat2
        dup i 0 ?= IF
            ." Invalid input: incompatible matrices"
            abort
        THEN
        swap i 1 ?= IF
            ." Invalid input: incompatible matrices"
            abort
        THEN
    LOOP
    swap
    dup length 0= IF
        ." Invalid input: empty matrix"
        abort
    THEN
    dup 0 ?DO
        % Ensure mat2 dimensions match with mat1
        dup i 0 ?= IF
            ." Invalid input: incompatible matrices"
            abort
        THEN
        swap i 1 ?= IF
            ." Invalid input: incompatible matrices"
            abort
        THEN
    LOOP
    dup % Save original matrices for later use
    dup length array=extents % Get dimensions of mat1
    swap length array=extents % Get dimensions of mat2
    swap effects <Drops the original matrices from the stack>
    % Create result matrix with appropriate dimensions
    [ swap i cell+ + ]ariant allocx
    swap length dup 0 ?Do
        swap i 0 len1bound mod mul + loop
    dup length
    swap vcreate
    0 ?DO
        0 ?DO
            % Perform multiplication of corresponding elements
            i cell+ @
            j dup cell+ @ *
            loop
            dup cell+!
        loop
    loop
    effects <Drops the dimensions of mat2 from the stack>
    % Remove intermediate results and leave just the resulting matrix on the stack
    dup length array=extents
    over length array=extents
    swap i-j bound-create
    dup dup arraycopy ( dup needed for the GC)
    effects <Drops intermediate values that were on the stack>
] ;