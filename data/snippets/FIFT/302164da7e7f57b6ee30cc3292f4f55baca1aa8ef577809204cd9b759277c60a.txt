;; Define a function to calculate the factorial of a number
(define (factorial n)
   (if (= n 1)
      1
      (* n (factorial (- n 1)))
   )
)

;; Define a function to calculate the sum of all numbers in a list
(define (sum lst)
   (if (null? lst)
      0
      (+ (car lst) (sum (cdr lst)))
   )
)

;; Define a function to check if a number is prime
(define (is-prime n)
   (if (= n 2)
      #t
      (let loop ((i 2))
         (cond ((> (* i i) n) #t)
            ((= 0 (modulo n i)) #f)
            (else (loop (+ i 1)))
         )
      )
   )
)

;; Define a function to generate the nth Fibonacci number
(define (fibonacci n)
   (if (<= n 1)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))
   )
)

;; Define a function to calculate the median of a list of numbers
(define (median lst)
   (let ((sorted (sort lst <)))
      (if (odd? (length lst))
         (list-ref sorted (/ (length sorted) 2))
         (/ (+ (list-ref sorted (- (/ (length sorted) 2) 1)) (list-ref sorted (/ (length sorted) 2))) 2)
      )
   )
)

;; Define a variable called "greeting" with a value of "Hello, world!"
(define greeting "Hello, world!")

;; Define a vector with 5 elements, each element being a list of 3 numbers
(define vector #((1 2 3) (4 5 6) (7 8 9) (10 11 12) (13 14 15)))

;; Create a hash table with 3 key-value pairs
(define hashtable (make-hash 'a 1 'b 2 'c 3))

;; Define a custom data type called "Person" with fields for name, age, and occupation
(define-record-type Person
   (make-person name age occupation)
   Person?
   (name getter make-person)
   (age getter make-person)
   (occupation getter make-person)
)

;; Create an instance of the "Person" data type
(define person (make-person "John Doe" 25 "Software Engineer"))

;; Define a lambda function to calculate the length of a string
(define (string-length str)
   (lambda (str)
      (if (string=? str "")
         0
         (+ 1 ((string-length str) (substring str 1)))
      )
   )
)

;; Define a macro that multiplies each element in a list by 2
(define-macro (multiply-by-2 lst)
   `(map (lambda (x) (* x 2)) ,lst)
)