/* This is a complex code snippet in FIFT
It sorts an array using the quicksort algorithm
The array is passed as a parameter to the function */

// Define a function that takes in an array as a parameter
func quickSort(arr) {

  // Check if the array contains more than one element
  // If not, return the array
  if (len(arr) <= 1) {
    return arr;
  }

  // Choose the first element of the array as the pivot
  var pivot = arr[0];

  // Create two empty arrays for elements less than and greater than the pivot
  var less = [];
  var greater = [];

  // Loop through the array, starting from the second element
  for (var i = 1; i < len(arr); i++) {
    // If the element is less than the pivot, add it to the less array
    if (arr[i] < pivot) {
      less.append(arr[i]);
    }
    // If the element is greater than the pivot, add it to the greater array
    else {
      greater.append(arr[i]);
    }
  }

  // Use recursion to sort the two subarrays
  // Then concatenate the sorted subarrays with the pivot in between
  return quickSort(less) + [pivot] + quickSort(greater);
}

// Create an array to test the function
var arr = [5, 3, 8, 2, 1, 4, 6, 9, 7];

// Call the quickSort function with the test array as the parameter
quickSort(arr);

// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] (sorted array)