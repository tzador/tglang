;; This is a code snippet in FIFT, a functional programming language based on Forth.
;; It demonstrates how to use higher-order functions to implement recursion.

;; Define a higher-order function `range` that takes in two arguments `start` and `end` and returns a list of all numbers from `start` up to (but not including) `end`.
: range ( start end -- list )
   ' start over :: foreach
      & append cons while
   ` ;

;; Define a function `sum` that takes in a list of numbers and recursively sums them using `range` and `apply`.
: sum ( list -- total )
   0 swap ::
      [ + ] over range apply
   ` ;

;; Test `sum` by summing the numbers from 1 to 10.
1 11 sum .  ;; Output: 55