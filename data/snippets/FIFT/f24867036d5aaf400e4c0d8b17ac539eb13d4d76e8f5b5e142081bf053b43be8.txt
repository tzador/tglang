; This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm

; Create a function to check if a number is prime
:prime? { n -- ? }
  dup 1- 2 swap 1+ dup
  [
    swap over mod 0= 0=
    if drop 0 else
      dup rot * >r r> prime?
    then
  ] if
;

; Input the upper boundary for the prime numbers list
: get-limit
  ." Enter the upper boundary for the list of prime numbers: "
  ?limit
;

; Create a range of numbers from 2 to the limit
: get-range { limit -- range }
  2 swap' range 1+ >array
;

; Initialize a list of prime numbers, starting with 2
: init-primes { limit -- primes }
  2 swap' primes 1+ >array
;

; Use the Sieve of Eratosthenes algorithm to generate a list of prime numbers up to the upper boundary
: generate { limit -- primes }
  init-primes <> while
    dup >r prime? if
      r@ swap 1+ >r over
      >array tuck swap 1+ <> if
        [ rot rot ] 2array over rot r@ swap array-
        rot at 1- tuck 2 pick
      else (delete next multiple)
        drop r@ swap ( current "index" of array )
        dup array- n>r >r ( increment index, move backwards, delete element )
        1 n>r swap ( value, first loop )
        r@ swap r@ swap ( index, last loop )
        rot swap r> rot ( move next )
        swap >array ( reset array )
        dup tuck ( move forwards, copy )
        rot pick ( put back return value )
        r> ( decrement index )
      then swap r> rot ( update last index )
    then (is prime)
  repeat
  1 n>r swap r@ swap
  rot swap rot swap
  swap neg ( append 1 )
  >array ( convert list to array )
;

; Get input from user and generate a list of prime numbers
: main
  get-limit get-range generate
;

main