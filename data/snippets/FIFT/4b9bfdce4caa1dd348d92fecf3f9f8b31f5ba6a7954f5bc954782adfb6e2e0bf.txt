// This code snippet demonstrates the implementation of a selection sort algorithm in FIFT.

// Define a function for swapping two elements.
func swap(items, firstIndex, secondIndex) {
    temp := items[firstIndex]
    items[firstIndex] := items[secondIndex]
    items[secondIndex] := temp
}

// Define a function for finding the index of the smallest element in a given list.
func findSmallest(items, startIndex, endIndex) {
    smallestIndex := startIndex
    smallestValue := items[startIndex]
    for i := startIndex + 1 to endIndex {
        if (items[i] < smallestValue) {
            smallestIndex := i
            smallestValue := items[i]
        }
    }
    return smallestIndex
}

// Define a function for sorting a given list using the selection sort algorithm.
func selectionSort(items, startIndex, endIndex) {
    for i := startIndex to endIndex {
        // Find the index of the smallest element in the remaining sublist.
        smallestIndex := findSmallest(items, i, endIndex)
        
        /* 
        Swap the smallest element with the first element in the remaining sublist.
        This brings the smallest element to the sorted portion of the list.
        */
        swap(items, i, smallestIndex)
    }
}

// Example usage:
items := [5, 2, 7, 1, 9, 3]
selectionSort(items, 0, len(items) - 1) // Sorts the list in place
fmt.Println(items) // Prints: [1, 2, 3, 5, 7, 9]