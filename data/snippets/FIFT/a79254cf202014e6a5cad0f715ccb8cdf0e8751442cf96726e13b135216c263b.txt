;; This is a code snippet in FIFT which demonstrates how to create and manipulate a binary tree

;; Define a Binary Tree data structure
struct Binary_tree {
    key: Int,
    left: Ptr,
    right: Ptr,
}

;; Create a function for adding a node to the tree
fun add_node(tree: Ptr, key: Int) {
    if tree = nil {
        tree = new Binary_tree{key: key, left: nil, right: nil};
    } else if key < tree.key {
        add_node(tree.left, key);
    } else {
        add_node(tree.right, key);
    }
}

;; Create a function for searching for a key in the tree
fun search_key(tree: Ptr, key: Int) {
    if tree = nil {
        return false;
    } else if key = tree.key {
        return true;
    } else if key < tree.key {
        search_key(tree.left, key);
    } else {
        search_key(tree.right, key);
    }
}

;; Create a function for removing a node from the tree
fun remove_node(tree: Ptr, key: Int) {
    if tree = nil {
        return;
    } else if key = tree.key {
        if tree.left = nil and tree.right = nil {
            tree = nil;
        } else if tree.left = nil {
            tree = tree.right;
        } else if tree.right = nil {
            tree = tree.left;
        } else {
            min = find_min(tree.right);
            tree.key = min.key;
            remove_node(tree.right, min.key);
        }
    } else if key < tree.key {
        remove_node(tree.left, key);
    } else {
        remove_node(tree.right, key);
    }
}

;; Create a function for finding the minimum key in a tree
fun find_min(tree: Ptr) {
    if tree.left = nil {
        return tree;
    } else {
        find_min(tree.left);
    }
}