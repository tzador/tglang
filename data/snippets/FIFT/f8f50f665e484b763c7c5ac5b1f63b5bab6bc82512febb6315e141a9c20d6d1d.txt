# This code snippet takes in two input numbers, 
# checks if they are both prime numbers, and
# finds their lowest common multiple 

# Define a function to check if a number is prime
:prime_check { 
  ?dup 2 < 
  { # If number is less than 2, return false 
    drop false 
  }{ # Otherwise, start a loop to check for divisibility 
    2 # Start with divisor = 2 
    { # Loop 
      swap drop # Place divisor on top, drop input number 
      dup * # Multiply divisor by itself for comparison 
      over = 
      { # If input number is equal to divisor squared, it is a prime number 
        swap drop true # Return true 
      }{ # Otherwise, continue looping 
        1 + # Increase divisor 
        dup 2 >= # Duplicates input number and checks if it is 
                   # greater than or equal to 2 (loop continues if true)  
        { # If input number is still greater than 2, continue loop 
          swap drop true # Return true to continue loop 
        }{ # Otherwise, input number is not a prime number 
          drop false # Return false 
        }
      } 
      if 
    } loop 
  } 
  if 
}

# Define a function to find the lowest common multiple 
:lcm {
  # First, check if both input numbers are prime 
  dup prime_check # Check if first input number is prime 
  swap prime_check # Check if second input number is prime 
  and # If both are true (prime), go to next step 
  { 
    1 * # If both are prime, the LCM is just the product of the numbers 
  }{
    2 * # Otherwise, increase second number by 1 to check for LCM 
    swap # Swap input numbers to leave the first one on top 
  }
  # Start a loop to find the LCM 
  { # Loop
    over = # Check if current numbers are equal (LCM found) 
    { 
      swap drop # If equal, remove extra number and return LCM 
      exit 
    }{
      dup prime_check # Check if second number is a prime 
      swap # Swap numbers to put first one on top 
      ?dup # Check if first number is also prime 
      or # Combine both checks (true if either is prime) 
      { # If either is prime, increase second number by 1 
        1 + # Add 1 to current second number 
        swap # Swap numbers to put first one on top 
      }{ 
        2 * # If neither is prime, double second number 
        swap # Swap numbers to put first one on top 
      }
      # Perform check with the new second number 
      dup prime_check swap # Check if second number is prime, 
                          # then swap numbers to put first one on top 
      and # If both are true (both prime), continue looping 
    }
    if 
  } loop # Loop back to check for LCM 
}

# Define main function to take in two input numbers 
# and find their lowest common multiple
:main {
  # Take in first input number and store in variable x 
  "Enter first number: " type %num1 = 
  # Take in second input number and store in variable y 
  "Enter second number: " type %num2 = 
  # Find the LCM and store in variable z 
  %num1 %num2 lcm %lcm = 
  # Print the LCM 
  "LCM = " type 0 %lcm type.cr 
  .bye
}