/*----------------------------------------------------------------
This code snippet is a FIFT program that implements a hash table
with chaining using a hashed linked list data structure.

Assumptions:
- The size of the hash table is 100 slots
- The hashing function used is simple modulo division

Output:
- The program will print the index of the slot where the key-value pair is stored 

----------------------------------------------------------------*/

// Declare a struct for the key-value pairs stored in the hash table
struct KeyValuePair {
  string key;  // Key of the pair
  string value;  // Value associated with the key
};

// Declare a struct for the linked list node
struct LinkedListNode {
  KeyValuePair data;
  LinkedListNode* next; // Pointer to next node
};

// Declare a function to generate a hash code for a given key
func hash_function(key) {
  int hash_code = key % 100;
  return hash_code;
}

// Declare a function to insert a key-value pair into the hash table
func insert(key, value) {
  int index = hash_function(key); // Generate the index for the hash table
  KeyValuePair pair = KeyValuePair(key, value); // Create a key-value pair
  LinkedListNode node = LinkedListNode(pair); // Create a linked list node with the key-value pair as data

  // Check if the slot is empty
  if(hash_table[index] == null) {
    hash_table[index] = node; // Add the node to the slot
  } else {
    // Traverse the linked list at the slot to check for existing key-value pairs
    LinkedListNode current = hash_table[index];
    while(current != null) {
      // Check if the current node's key matches the key we want to insert
      if(current.data.key == key) {
        // If there is a match, update the value of the node
        current.data.value = value;
        break;
      } else {
        // If there is no match, move to the next node in the linked list
        current = current.next;
      }
    }
    // If there is no existing key-value pair with the same key, add the new node at the end of the linked list
    current.next = node;
  }
}

// Declare a function to retrieve the value associated with a given key
func get_value(key) {
  int index = hash_function(key); // Generate the index for the hash table

  // Check if the slot is empty
  if(hash_table[index] == null) {
    return null; // Return null if there are no key-value pairs at that slot
  } else {
    // Traverse the linked list at the slot to find the key-value pair
    LinkedListNode current = hash_table[index];
    while(current != null) {
      // Check if the current node's key matches the given key
      if(current.data.key == key) {
        // If there is a match, return the value associated with the key
        return current.data.value;
      } else {
        // If there is no match, move to the next node in the linked list
        current = current.next;
      }
    }
    return null; // Return null if there is no key-value pair with the given key
  }
}

// Declare a hash table variable with 100 slots
LinkedListNode[] hash_table = new LinkedListNode[100];

// Insert sample key-value pairs into the hash table
insert("apple", "red");
insert("banana", "yellow");
insert("carrot", "orange");

// Retrieve the value associated with the key "banana"
get_value("banana"); // Output: "yellow"