(* This code snippet uses FIFT, a programming language for smart contracts and blockchain applications. *)

// Constants declaration
constant MIN_DEPOSIT 1000 // Minimum deposit amount for the contract
constant MAX_DEPOSIT 1000000 // Maximum deposit amount for the contract
constant PERCENTAGE 0.1 // Percentage for interest calculation

// Contract initialization
init:
    // Validate initial deposit amount
    assert(firstarg () MIN_DEPOSIT >= "Initial deposit must be greater than or equal to the minimum amount.");

// Contract execution
action:
    // Calculate interest based on deposit amount and percentage
    compute_interest:
        // Get deposit input from user
        get_deposit:
            // Input must be an integer value
            assert(swap toint <> "Deposit amount must be an integer value.");

        // Check if deposit amount is within allowed range
        check_deposit:
            assert(swap MAX_DEPOSIT <= "Deposit amount must be less than or equal to the maximum allowed amount.");

        // Calculate interest using formula (principal * rate)
        mul swap PERCENTAGE mul ;

        // Return the calculated interest as output
        swap ;

// Contract verification
verify:
    // Verify that the calculated interest is correct
    assert(check compute_interest
        <# Executed compute interest must be same as expected interest #>);