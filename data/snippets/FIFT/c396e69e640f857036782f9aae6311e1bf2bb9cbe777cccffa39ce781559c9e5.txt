import utils

INT 487 // Declare an integer variable with value 487
PUSHA 25 // Push the value 25 into the top of the stack
POPA 50 // Pop the top value of the stack and store it in the variable 50

PUSHSTR "Hello World!" // Push the string "Hello World!" onto the stack
CAT // Concatenate the top two values on the stack (487 and "Hello World!") into one string
DUP // Duplicate the top value on the stack
JUMPNZ check_even // If the top value is not 0, jump to the check_even label
PUSHINT 1 // Push the integer value 1 onto the stack
STACKFACTORIAL // Call the STACKFACTORIAL function to calculate the factorial of the value 1
JUMP end // Jump to the end label
POP // Pop the duplicated value off the stack

LABEL check_even // Label for checking if the value is even
DUP // Duplicate the top value on the stack
JUMPEQ print_even // If the top value is 0, jump to the print_even label
PUSHINT 2 // Push the integer value 2 onto the stack
STACKFACTORIAL // Call the STACKFACTORIAL function to calculate the factorial of the value 2
JUMP end // Jump to the end label
POP // Pop the duplicated value off the stack

LABEL print_even // Label for printing the even factorial
PUSHA 0 // Push the value 0 onto the stack
PUTINT // Output the integer value on the top of the stack
JUMP end // Jump to the end label

LABEL end // End label
STOP // Stop execution

STACKFACTORIAL: // Stack-based factorial function
  DUP // Duplicate the top value on the stack
  PUSHINT 1 // Push the integer value 1 onto the stack
  JUMPEQ end // If the top value is 1, jump to the end label
  SUB // Subtract 1 from the top value on the stack
  CALL STACKFACTORIAL // Call the STACKFACTORIAL function recursively
  MUL // Multiply the top two values on the stack
  RETURN // Return from the function

END // End of program