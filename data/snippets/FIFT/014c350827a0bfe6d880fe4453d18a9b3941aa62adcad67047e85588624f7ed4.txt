00PUSH: "Hello, world!" ## push the string "Hello, world!"
01DROP                 ## drop the string from the stack
02LZERO                ## load integer 0 onto the stack
03LOAD: "FIFT"         ## load the string "FIFT" onto the stack
04CONCAT               ## concatenate the two strings
05PUSH: " "
06APPEND               ## append a space to the end of the string
07STOREMEM: "message"  ## store the string in memory variable "message"
08LOADMEM: "message"   ## load the string from memory
09SWAP                 ## swap the top two items on the stack
10PUSH: 1              ## push integer 1 onto the stack
11ADD                   ## add the two integers
12PUSH: 1              ## push integer 1 onto the stack
13ROLL                 ## roll the stack to the right by 1 position
14MUL                  ## multiply the top two items on the stack (1 and 2*message)
15SUB                   ## subtract the top two items on the stack (2*message-1)
16PUSH: 2              ## push integer 2 onto the stack
17DIV                   ## divide the top two items on the stack (2*message-1)/2
18PUSH: 1              ## push integer 1 onto the stack
19ROLL                 ## roll the stack to the right by 1 position
20EQ                   ## check if the top two items on the stack are equal (1 and message)
21IF                    ## if the top two items on the stack are equal, execute the code between IF and ELSE
22PUSH: "Congratulations!" ## push the string "Congratulations!" onto the stack
23ELSE                  ## if the top two items are not equal, execute the code between ELSE and THEN
24PUSH: "Better luck next time." ## push the string "Better luck next time." onto the stack
25THEN                  ## end of IF statement
26APPEND               ## append the string from the IF statement to the string in memory
27PUSH: "\n"           ## push a new line character onto the stack
28APPEND               ## append the new line character to the string in memory
29PRINT                ## print the final message