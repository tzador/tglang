--[[
This is a multi-line comment in FIFT programming language.
In this snippet, we are defining a function that checks if a given number is prime or not.

Parameters:
    num: The number to be checked (int)

Returns:
    1 if the number is prime
    0 if the number is not prime

--]]
fun is_prime : num ! ( addr ) 
seq
    DUP 2 <= :limit = ( addr_limit ) # Checks if num is less than or equal to 2
    ( addr_limit ) $1 if LEAVE ! ( addr ) then # If true, leaves the function and returns 0
    ( addr ) DROP # Drops the limit value
    PUSH x :x 3 <= ( addr_x ) # Checks if num is less than or equal to 3
    ( addr_x ) $1 if PUSH x :x MOD DUP 0 == ( addr_mod ) # If true, pushes 1 to the stack and checks if num%3 is equal to 0
    ( addr_mod ) $1 if # If true, leaves the function and returns 0
        ( addr ) LEAVE ! ( addr )
    then
    PUSH x :x addr_limit ! PUSH x :x addr_mod ! # Saves the limit and mod values to the stack
    PUSH x :1 addr_mod ! # Sets the mod value to 1
    addr_x @ # Gets the current value of num and sets it as the loop counter
    loop # Start loop
        DUP 1 + varloop ! # Sets the counter to the next value
        addr_x @ GET 2 DUP > # Gets the value of num and checks if it is greater than 2
        ( addr ) $1 if # If true, leaves the loop and returns 1
            PUSH x :varloop GET ! # Sets the current value of num as the return value
            ( addr ) LEAVE !
        then
        DUP 1 + addr_x ! # Sets the counter to the next value
        addr_x @ addr_limit @ GET # Gets the current value of num and the limit value
        addr_mod @ addr_mod @ GET # Gets the current value of num and the mod value
        DUP 0 == # Checks if the current value of num is equal to the mod value
        ( addr ) $1 if # If true, leaves the loop and returns 0
            ( addr ) LEAVE !
        then
    repeat # End loop
    PUSH addr_mod ! FAC SWAP DUP @ addr ! PUSH addr ! # Saves the mod value, swaps the top two values on the stack, gets the current value of num and sets it as the loop counter
    addr ! # Sets the loop counter to the current value of num
    loop
;;