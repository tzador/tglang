[[
  : add_two_numbers { \ x y -- sum }
    x y + -> sum  \ adds the values of x and y and stores the result in sum variable
  : multiply_two_numbers { \ a b -- product }
    a b * -> product \ multiplies the values of a and b and stores the result in product variable
  : calculate_average { \ list -- avg }
    list size 0 > {{ dup @ }} [ 2dup \ Helper function to calculate average of the list
    reduce add_two_numbers \ Uses reduce function to add all values in the list
    0 swap swap / -> avg \ Divides the sum by the list size to get the average
    ]] \ Annotation: This code snippet contains three functions - add_two_numbers, multiply_two_numbers, and calculate_average.
    Each function has an annotation in the form of a comment, describing the purpose of the function and explaining the stack manipulation performed in the function.
    The main function, calculate_average, uses the reduce function to add all values in a given list and then divides the sum by the list size to obtain the average.
    This code snippet showcases the use of functions, stack manipulation, and annotations in FIFT programming language.