;; This is a complex code snippet in FIFT, a functional programming language designed for the Telegram Open Network (TON) blockchain.
;; It includes anonymous functions, pattern matching, and higher-order functions.

;; Define a list of numbers
define numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

;; Define a function that takes in a list and returns the sum of all numbers
define sum = list ->
    pattern match list with
        [] -> 0;; if the list is empty, return 0
        [head, ...tail] -> head + sum(tail);; recursively call the function with the tail of the list and add the head to the result

;; Define a function that takes in a list and a function, and applies the function to each element in the list
define map = (list, fn) ->
    pattern match list with
        [] -> [];; if the list is empty, return an empty list
        [head, ...tail] -> [fn(head), ...map(tail, fn)];; recursively call the function with the tail of the list and apply the function to the head, then add it to the result

;; Define a function that multiplies each number in the list by 2
define multiply = num -> num * 2;

;; Apply the map function to the numbers list using the multiply function
numbers |> map(multiply);; returns [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

;; Apply the sum function to the mapped numbers list
numbers |> map(multiply) |> sum;; returns 110