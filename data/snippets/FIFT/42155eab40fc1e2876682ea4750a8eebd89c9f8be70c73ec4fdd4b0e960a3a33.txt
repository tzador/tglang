// This is a complex code snippet in FIFT

: ADDER { DUP 2array. Rot ProdInt } % This word adds two numbers together by duplicating the first number, putting both numbers into an array, rotating the array so the first number is at the end, and then performing integer multiplication to get the sum.

{ 3 4 } ADDER. % This line will add 3 and 4 together and output the result, which should be 7.

: SQUARE ( n -- n*n ) dup * ; % This word squares a number by duplicating it and then multiplying the two copies together.

{ 5 } SQUARE. % This line will square 5 and output the result, which should be 25.

: IS_PRIME ( n -- bool ) 1 swap 1 -rot 0 do swap rot i divmod swap pop 0<> if exit then loop ( n k q b ) nip nip nip 0 ; % This word checks if a number is prime by generating all possible factors and checking if any are divisible. If there are no factors, the number is prime.

{ 13 } IS_PRIME. % This line will check if 13 is prime and output true, since 13 is a prime number.

: FACTORIAL ( n -- n! ) 1 swap 0 do i 1 + swap over * loop ; % This word calculates the factorial of a number by multiplying every number from 1 to the input number.

{ 4 } FACTORIAL. % This line will calculate the factorial of 4 and output the result, which should be 24.

: PALINDROME? ( s -- bool ) dup size / 2 /mod swap { 0 = } all ; % This word checks if a string is a palindrome by splitting it in half, comparing the first half to the reversed second half, and returning true if they are equal.

{ "racecar" } PALINDROME?. % This line will check if "racecar" is a palindrome and output true, since it reads the same forwards and backwards.

: MERGE_SORT ( array -- sorted array ) dup size 1 <= if exit then dup size / split 2array. 2dup 1 swap seqormap MERGE_SORT swap 2 pick seqormap MERGE_SORT merge ; % This word recursively sorts an array using the merge sort algorithm.

{ 8 2 5 3 1 10 } MERGE_SORT. % This line will sort the array [8 2 5 3 1 10] and output the sorted array, which should be [1 2 3 5 8 10].