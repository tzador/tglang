>contract { // Begin contract
    int numMsgs : init 0; // Initialize variable for number of messages
    int count : init 0; // Initialize variable for loop count

    cell {
        cell { // Begin header cell
            int InstructionVN : init 20180502; // Define current instruction set version number
            int CellVN : init 20180501; // Define current cell version number
            cell { // Begin first message cell
                int priorMsg : init -1; // Initialize variable for prior message
                bool flag : init False; // Initialize flag variable
                public (int priorMsg, int count, bool flag) sendMsg;
            }
            cell { // Begin second message cell
                bool terminate; // Define variable for termination
                public (bool terminate) endContract; // Set endContract function
            }
        }
        cell {
            (int numMsgs, int count) abort; // Define abort function with numMsgs and count parameters
        }
    }

    // Loop through each message and update variables accordingly
    for (count=0; count<int count; count++) {
        if (sendMsg.priorMsg == count - 1) { // Check if current message is the next in sequence
            numMsgs++; // Increment number of messages
        } else {
            // Abort if there is a break in the message sequence
            public(use sendMsg.priorMsg, count, True) abort;
            break;
        }
    }

    // Verify if termination flag is set
    if (endContract.terminate) {
        return; // End contract if terminate flag is set
    }

    // Return the number of messages
    public int viewMsgs() {
        return numMsgs;
    }
} // End contract