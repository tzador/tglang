\ * Main code & variables *

>dir (32) {                     // creates a directory of length 32 bits
  struct my_struct {             // creates a structure named my_struct
    x: uint<16>,                // declares an unsigned integer of 16 bits
    y: byte[4],                 // declares an array of 4 bytes
    z: cell[]                   // declares a dynamic array of cells
  }

  cell a1 = 12345:(33);          // initializes a cell with value 12345 of 33 bits
  cell a2, a3;                   // declares two cells without initialization
  bool cond = x == 256 ? true : false; // conditional assignment based on a variable's value

  func1 a1, a2, a3;              // calls a function with arguments
  a2.set(21, b'hello');          // sets element at index 21 of a2 to the string "hello"
  a3.set_len(5, a2);             // resizes a3 to have a length of 5, copying elements from a2
  $"Message: {a1.get}"           // prints a message followed by the value of a1
}

\ * Functions *

func func1 (arg1, arg2, arg3) {
  \ * Function body *
}

\ * Control structures *

if (cond) {                              // checks if the condition is true
  x += 5;                                // adds 5 to the value of x
  while (x > 0) {                        // loops while x is greater than 0
    x /= 10;                             // divides x by 10
  }
} else {                                 // executes if the condition is false
  for i in 1..10 {                       // loops from 1 to 10 (inclusive)
    a1.set(i, b'FIFT');                  // sets element at index i of a1 to the string "FIFT"
  }
}

\ * Custom types *

type my_type {                           // declares a custom type named my_type
  a: uint<8>,                            // declares an unsigned integer of 8 bits
  b: byte[3],                            // declares an array of 3 bytes
  c: my_struct                           // declares a variable of type my_struct
}

my_type t1;                              // declares a variable of type my_type
t1.a = 42;                               // assigns a value to the field a of t1

\ * Reading and writing from files *

buf b = b'FIFT rocks!';                  // declares a buffer containing the string "FIFT rocks!"
file f1 = b, f2;                         // creates two files with the contents of the buffer b
f1.open("my_file.txt");                  // opens the file with the given filename
f1.write(b);                             // writes the contents of b to the file
f1.close();                              // closes the file

f2.open("my_file.txt");                  // opens the file with the given filename
buf b2 = f2.read();                      // reads the contents of the file into a buffer
f2.close();                              // closes the file

\ * Error handling *

catch {                                  // catches any errors thrown in the code block
  x = 10 / 0;                            // throws an error (divide by zero)
} if err {                               // executes if an error was caught
  log(err);                              // logs the error message
} else {                                 // executes if no error was caught
  printf("No errors were thrown!");      // prints a message
}

${"Done with the code snippet."}         // prints a message to indicate the end of the snippet