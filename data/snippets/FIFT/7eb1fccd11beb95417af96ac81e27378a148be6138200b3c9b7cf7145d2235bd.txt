# FIFT Program to find prime numbers
# `p : <# -> #`
# `q : # 0x00eq0 indifferent 1 0x01fail 0 jump swap exec`
# `b : nip ok swap <# loc + #> dup dup [1 [over 0 >] [q swap dup exec # 0x00dipbrot #] if] 2drop 1 +`
# `TEST> 9 p`
# ` 0<&{} # code cell`
# ` 0<&{100 b dup p swap by3 [b] by2 [b] if # code cell for prime numbers`
p: <# -> #> # procedure to check if a number is prime
q:
# procedure to check if a number is equal to 0
# indifferent - execute the next word and ignore its output
# 1 - push 1 to the stack
# 0x01 - push the number 0x01 to the stack
# fail - return 0x01 if the number is equal to 0
# 0 - push 0 to the stack
# jump - jump to a specified position in the program
# swap - swap the top two elements on the stack
# exec - execute the next word on the stack
b:
# procedure to find the next prime number
# nip - remove the second item on the stack
# ok - return the top item without removing it
# swap - swap the top two elements on the stack
# <# - push the following quoted code to the stack
  loc + #> # add the location to the top element on the stack
dup:
# duplicate the top item on the stack
dup:
# duplicate the top item on the stack
# [1 [over 0 >] [q swap dup exec # 0x00dipbrot #] if] - check if the number is equal to 0, if yes, skip the rest of the code
# by3 - remove the top three items on the stack and keep the fourth item
# [b] - execute the procedure b
# by2 - remove the top two items on the stack and keep the third item
# [b] - execute the procedure b
# if - conditional statement to check if the number is prime
# 0<&{} - push an empty location to the stack
# 0<&{100 b dup p swap by3 [b] by2 [b] if # code cell for prime numbers - add code to push prime numbers to the stack
TEST> 9 p # test the procedure with the number 9
0<&{} # push an empty location to the stack
0<&{100 b dup p swap by3 [b] by2 [b] if # code cell for prime numbers - add code to push prime numbers to the stack
# Output:  # ` 7 #`