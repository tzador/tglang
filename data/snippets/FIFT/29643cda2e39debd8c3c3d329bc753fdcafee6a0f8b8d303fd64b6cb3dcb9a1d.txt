;; This is a function in FIFT that takes in a list of integers and returns
;; a list of their squares

;; Define the function 'squares' with the parameter 'nums'
:squares ( nums -- )

;; Create a new empty list
[] swap

;; Start a loop to iterate through the input list
[] ->begin
    dup if (if list is not empty)
        dup [] [] (
            put two empty lists on the stack,
            these will be used to store the squares
        )
        swap 1 - () (
            subtract 1 from the counter
            and swap the list with itself
        )
        #squares( recursive call on the sub-list )
        () (
            execute the recursive call
            then start the 'else' block
        )
        dup* dup ++ () (
            get the first element,
            square it and add it to the first list
        )
        next (decrease the counter) () (
            decrease the counter
            and start the 'if' block again
        )
        () (
            start 'else' block that executes when the list is empty
            return the list of squares
        )
    ) (
        start 'else' block that executes when the list is empty
        return the empty list
    )
    drop (drop the remaining list)
->end
;
;; return the squares list
;