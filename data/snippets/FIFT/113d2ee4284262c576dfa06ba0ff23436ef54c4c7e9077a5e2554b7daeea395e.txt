// Code snippet: Creating a functional recursive implementation of the merge sort algorithm

sort(split) {
  if (split.length <= 1) {
    return split;
  }

  let mid = split.length / 2;
  let left = split.subarray(0, mid);
  let right = split.subarray(mid);

  // Recursive calls
  left = sort(left);
  right = sort(right);

  return merge(left, right);
}

merge(left, right) {
  // Initialize result array
  let result = [];

  // While both arrays still have values
  while (left.length > 0 && right.length > 0) {

    // Compare first values in each array
    if (left[0] < right[0]) {

      // Add smaller value to result array and remove from left array
      result.push(left.shift());

    } else {

      // Add smaller value to result array and remove from right array
      result.push(right.shift());
    }
  }

  // If one array is empty, add remaining values from other array
  if (left.length > 0) {
    result = result.concat(left);
  } else if (right.length > 0) {
    result = result.concat(right);
  }

  // Return merged and sorted result array
  return result;
}

// Example usage
let arr = [7, 2, 10, 3, 5, 8];
let sorted_arr = sort(arr);

// Output: [2, 3, 5, 7, 8, 10]