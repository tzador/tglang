/* This is a complex FIFT code snippet that generates a list of prime numbers */
CONST: n 1000  // Defines a constant value of 1000
VAR: counter 0  // Initializes a variable counter with value 0
VAR: is_prime 1  // Initializes a variable is_prime with value 1
VAR: primes "2 "  // Initializes a variable primes and sets it to "2 "(prime number starts at 2)
WHILE counter < #n DO  // Starts a while loop with condition that counter is less than constant n
    FOR x 3 #counter 2 STORE  // Stores current value of counter in x and increments counter by 2
        IF x #is_prime MOD 0 EQUALS  // Checks if x is divisible by variable is_prime
            DROP #is_prime  // If true, remove is_prime from stack (no longer a prime number)
            CONTINUE  // Go back to beginning of FOR loop
        ENDIF
    ENDFOR
    IF #is_prime EQUALS 1  // If after FOR loop, variable is_prime still equals 1
        primes #counter PUSH  // Pushes current value of counter to primes list (found a prime number)
    ENDIF
    INCR counter  // Increments counter by 1
ENDWHILE
primes JOIN // Joins all elements in primes list into a single string
/// Output: '2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991'