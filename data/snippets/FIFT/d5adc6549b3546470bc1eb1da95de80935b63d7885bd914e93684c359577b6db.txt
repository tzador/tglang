# This is a code snippet in FIFT.
# It creates a function to find the GCD of two numbers using Euclid's algorithm.

{ gcd } :> { r1 r2 } :>l
    l (# Copy both numbers onto the stack.)
    while +( # Continue the loop as long as the sum is not equal to 0.
        ( # If r1 is greater than r2:
            { r1 0 } :>g   # Push r1 onto the stack, along with 0.
            { r1 r2 % } dup # Calculate the remainder of r1 / r2 and duplicate it.
            !=             # Compare it to 0 to check if the remainder is non-zero.
        )                  # Reasons for issues #1, #2, #3.
        ( # If r2 is greater than r1:
            { r2 0 } :>g   # Push r2 onto the stack, along with 0.
            { r1 r2 } =+c  # Swap r1 and r2, add them and duplicate the sum.
            c#            # Copy the sum to the top of the stack.
        )                  # Reasons for issues #4, #5.
        c+                 # Copy the sum to the top of the stack.
        c#                 # Copy the sum to the top of the stack.
    ) # Note that the loop will eventually end when the remainder becomes 0.
    drop # Drop the extra copy of 0 on the stack.
    1[r2] # Push the GCD, which is the value of r2 when the remainder reached 0.
    ; # End of the function definition.

# To call the function, follow the format below:
# gcd r1 r2
# Where r1 and r2 are the two numbers you want to find the GCD of.

# For example:
# gcd 20 36
# Output: 4