[ 
  {A} 
    
    z_0         | {X} 
    code { ';' }     | 
    code { '!' }     | 
    code { '&' }     | 
    
!xxx { not }             ; branch to the right if z_0 is not zero
    ~= { branch <X> if } ; make a check to jump to {x}
    ~= { branch <A> if } ; make another check to jump to {a}
    { branch {  push <A> } to } ; branch to the left and push {a} on the stack
    
{Y}     
    
    z_1         | code { '!' } 
    code { '&' }     | 
    code { ';' }     | xxx! 
    
    { ; begin }    ; start a new code section
    code {  '>' }  ; compare z_1 with the top of the stack (pop it) and return the greater value
    code {  '<' }  ; compare z_1 with the top of the stack (pop it) and return the lesser value
    code { '==' }  ; compare z_1 with the top of the stack (pop it) and return true if they are equal
    code { '!==' } ; compare z_1 with the top of the stack (pop it) and return true if they are not equal
    code { '&' }   ; bitwise AND operation between z_1 and the top of the stack (pop it)
    code { '|' }   ; bitwise OR operation between z_1 and the top of the stack (pop it)
    code { '^' }   ; bitwise XOR operation between z_1 and the top of the stack (pop it)
    
    xxx             ; jump back to the top of the code section and repeat until z_1 is zero
    
    {<A>}           ; if z_1 is zero, jump to <A> label and execute the code in that section
    z_2             ; get a new value for z_2
    !{ }            ; negate the top of the stack
    { }             ; clear the stack
    !{ }            ; negate the top of the stack and push it on the stack
    
    if [            ; open an if statement
    !{ }            ; negate the top of the stack
    z_3             ; get a new value for z_3
    { }             ; push z_3 on the stack
    !{ }            ; negate the top of the stack and push it on the stack
    ]               ; close the if statement
    
    ifelse[         ; open an if else statement
    !{ }            ; negate the top of the stack
    !{ }            ; negate the top of the stack again
    z_4             ; get a new value for z_4
    { }             ; push z_4 on the stack
    ]               ; close the if statement
    ]               ; close the if else statement
    
    { !{ } }        ; execute the code in the if statement if the top of the stack is not zero
    { }             ; otherwise, execute the code in the else statement
    
    !{ }            ; negate the top of the stack and return it as the final result 
    
]