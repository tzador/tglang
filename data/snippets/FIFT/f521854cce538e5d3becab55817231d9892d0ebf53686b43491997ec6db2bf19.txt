;; This is a FIFT code snippet for generating a Fibonacci sequence using a recursive function

;; Define the recursive function with two parameters (previous number and current number)
(recur-func prev-num curr-num)

;; Base case when previous number is 0 and current number is 1
(base-case 0 1) 
{
  ;; Output the first two numbers of the sequence
  (print prev-num)
  (print curr-num)
}

;; Recursive case
(swap-dup dup +) 
{
  ;; Print the current number in the sequence
  (print curr-num)
  
  ;; Swap the previous and current numbers
  (swap)

  ;; Call the recursive function with the new parameters
  (prev-num (prev-num curr-num))
  (curr-num (swap-dup dup +))
}
;;
;; Output:
;; 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...