# This code snippet demonstrates a binary search algorithm
!: 'array' {`[0 1 2 3 4 5 6 7 8 9]`} # create an array of sorted integers
{ .(Enter a number to search for ) stdin 'number'} # prompt user for target number
{ `0` 'index'} # set starting index to 0
{ `9` 'length'} # set ending index to 9
{ `0` 'iterations'} # initialize number of iterations to 0
!label 'begin'
`(index + length) / 2` 'middle' # find middle index
{
    # check if middle index is the target number
    ?{ ` (array at middle) == number` .(Number found at index ) index }
    {
        # check if target number is less than middle number
        ` (array at middle) > number` if
        { `length - 1` 'length' } # update ending index to be middle - 1
        `iterations + 1` 'iterations' # increment number of iterations
        label 'begin'
    }
    {
        { `index + 1` 'index' } # update starting index to be middle + 1
        `iterations + 1` 'iterations' # increment number of iterations
        label 'begin'
    } ifte
}
?label `.(Number not found after ) iterations .( iterations)` iterations # print number of iterations used to search for target number