{{{ -*- Mode: FIFT -*-
o
p	forth
	Dict			# start of dictionary
		c				# compile-mode
		#!				# skip following name
		x	CompileForthLine ;	# word to compile
	end-dict
be
pi	make	input
~>	( print stack before )
result	==>	In
~> Cr	( print carriage return )
~> Cr	( print another carriage return )
s	make	literal
string
~> Cr ( print carriage return )
String
	!> Cr 	( print stack after )
	( should contain literal "string" )
	make
literal
nested in
	string
~> 	( print stack before )
result	==>	In literal nested in
~> Cr	( print carriage return )


o

p	: Square	This is a comment
			{  }		# comment for balance {  }
;;	t	:"
"}t 	# r""

  ;; */
Depth == 2
n	make	input
1	rot
make	literal
~>	Cr ( print carriage return )
n	result
~>	Cr


24.0	make	input
n	/pi	(#define pi 3.14159265)
*	n	result
~> 	Cr
~>	Cr	( print carriage return )
~>	Cr


;  This is a single-line comment
/*
This
is
a
multi-line comment
*/

o
p "FIFT is a programming language specifically designed for working with Forth environments. It allows for easy integration and communication with existing Forth systems, providing a powerful tool for both creating new programs and extending existing ones." ;
(((
( print string )
2 	+		evaluates expression
(((
(Alternative syntax for nested expressions)
~> 	Cr
~>	Cr	(print two carriage returns)