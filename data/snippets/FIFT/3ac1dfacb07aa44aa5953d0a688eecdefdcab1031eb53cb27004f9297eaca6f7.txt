// This code snippet generates a list of prime numbers
// up to a given limit using the sieve of Eratosthenes algorithm

// Define a function to generate prime numbers
: generatePrimes ( limit -- primes )
    // Initialize the list of numbers from 2 to the limit
    2 swap 0 ?DO
        i ++
    LOOP

    // Set the current number as 2
    2 >r
    BEGIN
        // Check if the current number is still in range
        r@ limit <= IF
            // Mark all multiples of the current number as composite
            r@ dup i * DO
                tuck i + false tuck FALSE true rot !!
            LOOP
            // Find the next unmarked number
            r> 1+
        // If the current number is out of range, exit the loop
        ELSE
            EXIT
        THEN
    // Repeat until the end of the list is reached
    REPEAT
    // Collect all marked numbers, which are prime numbers
    0 DO
        i @ FALSE == IF
            i ++
        THEN
    LOOP
    // Store the prime numbers in a list
    END-S ARRAY
;

// Set the limit to 100
100 generatePrimes .  // Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]