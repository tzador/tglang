;; This FIFT code snippet creates a function called "fibonacci" which takes in
;; a number and recursively calculates the fibonacci sequence up to that number.
;; It also includes error handling for non-integer inputs.

;; Create the function "fibonacci":
{
// Push the given input onto the stack
  { 1 push -1 # assume input is non-integer
    { 2 push # push the error code
      "# ERROR: Input must be an integer!"
      print # print the error message
      halt # end execution
    } $if

    # Base cases:
    dup -1 eq # check if input is equal to -1
    dup 0 eq # check if input is equal to 0
    $ror if
      0 # push 0 if input is equal to 0 or -1
    else
      1 # push 1 if input is equal to 0 or -1
    then

    # Recursive case:
    dup 1 eq # check if input is equal to 1
    dup 2 lt # check if input is less than 2
    $and if
      # Push input - 1 onto the stack
      dup 1 - fibonacci
      # Push input - 2 onto the stack
      dup 2 - fibonacci
      + # add the top two elements on the stack (fib(input-1) + fib(input-2))
    then
  } : recursive # end of recursive function
  * # multiply the top two elements on the stack (input * recursive(input))
} fibonacci *

;; Example calls:
;; fibonacci(0) will output 0
;; fibonacci(1) will output 1
;; fibonacci(7) will output 13