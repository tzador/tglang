-- This code snippet converts a given string to uppercase using recursion
VERBATIM
section \ SECTION
continue \ CONTINUE

-- Define `ToUppercase` procedure which takes a string argument and calls the main `Uppercase` procedure
: ToUppercase ( s -- ) {
    <string> swap
    Uppercase
} def

-- Main `Uppercase` procedure
: Uppercase ( s -- ) {
    dup 1 get  -- get first character of string
    case {
        section
        <string> swap
        continue
    }{{
        -- check if character is lowercase (ASCII value: 97-122)
        dup 97 >= dup 122 <=
        {
            -- if character is lowercase, subtract 32 to convert to uppercase (ASCII value: 65-90)
            32 - ToUppercase
        }{ ToUppercase } ifelse
        swap
        Uppercase  -- recurse on remaining string
    }} ifelse
} def

-- Call `ToUppercase` procedure with given string
section "fift programming language" ToUppercase

'''
--
## Convert string to uppercase using recursion
--
## Verbatim mode to write complex FIFT code
VERBATIM
--
## Define `ToUppercase` procedure
{{ `: ToUppercase ( s -- ) {` }}
{{ `    <string> swap` }}
{{ `    Uppercase` }}
{{ `} def` }}
--
## Main `Uppercase` procedure
{{ `: Uppercase ( s -- ) {` }}
{{ `    dup 1 get` }}  -- get first character of string
{{ `    case {` }}
{{ `       section` }}
{{ `       <string> swap` }}
{{ `       continue` }}
{{ `    }` }}{{ `{` }}
{{ `       -- check if character is lowercase (ASCII value: 97-122)` }}
{{ `       dup 97 >= dup 122 <=` }}
{{ `       {` }}
{{ `           -- if character is lowercase, subtract 32 to convert to uppercase (ASCII value: 65-90)` }}
{{ `           32 - ToUppercase` }}
{{ `       }` }}{{ `{` }}
{{ `           ToUppercase` }}
{{ `       }` }}{{ ` ifelse` }}
{{ `       swap` }}
{{ `       Uppercase` }}  -- recurse on remaining string
{{ `    }` }}{{ ` ifelse` }}
{{ `} def` }}
--
## Call `ToUppercase` procedure with given string
{{ `section "fift programming language" ToUppercase` }}