// This snippet uses FIFT to implement a recursive Fibonacci function with tail call optimization

// Define the Fibonacci function with two arguments
: fibonacci ( n1 n2 -- n3 )
  dup !  // duplicate the value of n2 and store it
  swap ! // swap n1 with the previous value of n2 and store it
  +      // add n1 and n2 and leave the result on the stack
  swap ! // swap the result with n2 and store it again
  dup 1 = ( if )
    drop // if the recursion reaches 1, drop the result and return
  else
    1 -
    swap dup // decrement n1 and duplicate the result
    callT fibonacci // call the Fibonacci function recursively with tail call optimization
  then
;

// Main program
1           // set n1 to 1
1           // set n2 to 1
swap fibonacci  // call the Fibonacci function and store the result in n2
." The 10th Fibonacci number is:"   // print a message
<# 10 #>    // convert the number 10 to a string
type        // print the string
<# > type  // convert and print n2