/// This code snippet is a implementation of a basic linked list data structure 
/// in FIFT (Functional Intermediate Form Tree), 
/// a high-level language designed for blockchain contract programming. 

/// Define a node structure with two fields - data and pointer to the next node
:: node     ( nlink !! ; )
    linker: new-elt          ( new-elt    !! nlink )
    linker: set-name     ( new-node \'data ->linker data  )
    linker: set-child     ( new-node \'ptr  ->linker nlink )
    linker
;CODE end-node

/// Define a list structure with head and tail pointers
:: linkedlist     ( head !! tail !! ; )
    linker: new-elt            ( new-elt    !! head tail )
    linker: set-name       ( new-list  \'head ->linker head )
    linker: set-child       ( new-list  \'tail ->linker tail )
    linker
;CODE end-list

/// Create a new list
: empty-list ( -- !! ; )
    new-node
    // save head to R stack 
    linker: set-name
    // save tail to R stack
    linker: set-child
    linker: new-elt
    // retrieve head and tail from R stack
    linker: set-name
    linker: set-child
;CODE empty-list

/// Append a new element to the linked list
: append-list ( -- !! ; )
    linker: new-elt
    linker: set-data
    linker: set-child
;CODE append-list

/// Remove an element from the linked list
: remove-list ( -- !! ; )
    linker: get-list      ( head !! ; )   // get the head of the list
    linker: get-child     ( tail !! ; )   // get the tail of the list
    linker: get-name      ( data !! ; )   // get the data of the element to remove

    linker: set-name      ( data ->linker data  )   // point to next node
    linker: set-child     ( data ->linker data  )
    linker: get-black     ( data !! ; )   // get the black node
    linker: black         ( 0_Unlink ( result ) add-black )
    linker: set-black     ( head ->linker black next )
    linker: tail-black    ( none-black )

    nils
    tipe: check-empty    ( x !! r !! ! ; )
    linker: invoke        ( x x !data ->linker data )
    linker: get-node      ( x x !data ->linker data  )
    linker: insert        ( x \'data  ->linker pointer )
    liner: black         (fill_lev)
;CODE remove-list