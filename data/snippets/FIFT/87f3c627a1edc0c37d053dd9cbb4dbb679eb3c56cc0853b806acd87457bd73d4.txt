// Lambda calculus implementation in FIFT

// Define lambda-encoded boolean values as functions
: TRUE [ nil ] ;
: FALSE [ swap pop ] ;

// Define if-then-else construct
: if [ true ] [ pop ] [ pop eval ] ;

// Define recursively enumerable natural numbers
: ZERO [ pop nil ] ;
: ONE [ [ dup ] cons ] ;
: TWO [ [ dup ] cons swap cons ] ;
: THREE [ [ dup ] cons swap cons swap cons ] ;

// Define addition of two numbers
: ADD [
  [ 
    swap pop  // Pop first argument
    TRUE      // Push TRUE to indicate loop start
    [ TRUE ]  // Push TRUE to indicate loop body
    [        // Loop body
      [ drop TRUE ] // Push TRUE on stack to exit loop
      [ swap [ nil ] dip cons ] // Increment sum and list
      [ rot ]              // Rotate function to top
      dip diveR diveR // Move third element from top to bottom
      [ swap pop ] // Pop loop body
    ] while // Execute loop while top of stack equals TRUE
    drop // Drop TRUE from stack after loop finishes
  ] do // Execute outer recursion while top of stack equals TRUE
  drop // Drop TRUE from stack after outer recursion finishes
] ;

// Define multiplication of two numbers
: MUL [ [ { ZERO } [ ] [ ADD ] map ] reduceR ] ;

// Test addition and multiplication
2 3 ADD // Output: 5
3 4 MUL // Output: 12