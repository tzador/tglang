;; Example program in FIFT

;; Define a function called 'factorial' with a single parameter 'n'
: factorial ( n -- n! )
    1 swap dup 1 = if drop 1 
    else over * swap 1- >r recurse r> * then ;
    
;; Calculate the factorial of 5
5 factorial

;; Output: 
; n -- n!

;; Explanation:
; The 'factorial' function takes in a single parameter, 'n', and calculates the factorial of that number.
; It uses the Forth style of writing functions, with the function name followed by the inputs and outputs in parentheses.
; The first line of the function swaps the parameter with a 1, duplicates it, and checks if it is equal to 1.
; If it is equal, the function drops the duplicate and returns 1 as the factorial of 1 is 1.
; Otherwise, it multiplies the top two values on the stack, swaps them, decrements the top value by 1, and recursively calls itself.
; Once the recursive call is completed, the top value on the stack is multiplied with the value below it, giving the factorial of 'n'.
; Thus, the function continues until the value of 'n' becomes 0, and then returns the sequential products, resulting in the factorial of 'n'.
; In this example, the factorial of 5 is calculated and outputted, which will be 120 (1 * 2 * 3 * 4 * 5).