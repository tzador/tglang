#!/usr/bin/env fift
;;;This is a comment
CR DUP 1000/E<
;;;This divides 1000 by each element on the stack
DROP               ;;;Drops the resulting list
;;Some more comments
DUP TOP PUSH INT:1 PUSH INT:2 PUSH INT:3          ;;;Creates a stack with three elements
;;Comments are ignored by the interpreter
B, WRP#*              ;;;Multiplies the top two elements and wraps the result in a list
;;Another comment
'{"key1": "value1", "key2": value2"}'
;;;Creates a dictionary with string and integer values
ND 'New Dictionary' NEW
;;;Creates a new dictionary structure and assigns it to a variable 'New Dictionary'
PUSHINT 123 PUSHCTR 1
;;;Pushes an integer onto the stack and creates a new cell referencing it
'$12345678$'
;;;Creates a 32-byte string with hex numbers
P@                   ;;;Loads the value at the top of the stack into the cell
LITERAL
;;;Marks a piece of code that will be executed later
LABEL 1
;;;Assigns the label '1' to the following code block
PUSHBYTE 01 PUSHBYTE 02 DUP
;;;Pushes two bytes onto the stack and duplicates the top element
DROP DUP
;;;Drops the top element and duplicates the remaining top element
PUSHINT INT:0 DNAMETOFL ;
;;;Pushes zero onto the stack and converts it to a dictionary
DOES> PUSHSTR "Goodnight, sweet prince. "
;;;Creates a closure that will push a string onto the stack when executed
DUP C!               ;;;Saves the current top element into a cell
WRITEPUT              ;;;Builds a cell of cells and saves it to the default dictionary
CALL
;;;Calls the function in the cell at the current execution point
CRT                  ;;;Outputs a new line
PICK $123$ 1 2
;;;Pushes the element referenced by the cell onto the stack and duplicates it
SWAP DUMP            ;;;Swaps the top two elements on the stack and prints out a symbolic representation
DROP
;;;Drops the resulting dictionary structure
;;;There are some more comments
;;;at the end of the code snippet