// This FIFT program will calculate the factorial of a given number

: factorial ( n -- n! )  dup 0 = if 1 exit  then 
dup 0 = if exit then
1 swap begin
dup 1 <= while
swap dup * swap 1 -
repeat drop ;

// This program uses a recursive method to calculate factorial

: factorial? ( num -- res )
{ 
	[ 
		dup 0 < 
		push { 0 exit} 
		0 = 
		1 push 
	] 
	x? 
	dup 0 > { 
		dup 1 - push 1 -dup push
		dup 0 < { 
			0 = 
			swap drop exit 
		} 
		[ 
			dup { 1 swap *} 
			swap { 1 -dup factorial? swap} 
			dup {-1 * pop} 
			{ 0 +} 
			ifte 
		] 
		x? 
		dup factorial pop 
	} 
	ifte 
} 
// Example usage: 5 factorial