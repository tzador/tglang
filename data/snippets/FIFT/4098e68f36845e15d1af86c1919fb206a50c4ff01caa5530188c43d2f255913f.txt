;;; This is a simple FIFT code snippet for calculating the square root of a number

INT: main

;;; Stack: x -> x*x
(x)
DUPN { x n# n# } XORSLOT
GOVN
DUP
Q:NILCOND swap
;;; Get the absolute value of x
IFDUP
;;; Negate x if it's negative
Q:0LE
NEG
SWAP
Q:0EQ
;;; Binary search - find the integer square root of x
( 1 0 () () )
SWAP
(
  CHKB
  -> ( 1 0 (f atom) (s atom) )
  ;;; Calculate the mid-point
  UNWRAP x UNWRAP / FLOOR UNWRAP x UNWRAP '%B' SWAP
  &&& (
    ;;; Find the next mid-point if the square is smaller than x
    1+
    (
      %% x '= x '> - +> $$
    )
    ;;; Find the next mid-point if the square is larger than x
    (
      $$
    )
  ) SWAP DUPN CHKB
) NIP2 NIP
;;; Return the square root
NIP x