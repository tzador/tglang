(* Function that generates a random Fibonacci number *)

// Function that calculates the nth Fibonacci number 
// with memoization for improved performance  
let fib : (n: Int) => Int =  
   fun(n: Int) =>  
      let memo : Vector[Int] = new Vector[Some](n+1, 0) in  
      if(n == 0) return 0 else if(n < 2) return 1 else return memo[n]  
      
// Function that generates a random number  
let random : (max: Int) => Int =  
   fun(max: Int) =>  
      let a = 5218  
      let c = 2343  
      let m = 2023  
      let x = now() mod m in // Generate a random starting seed based on current time  
      let r = memoize(n: Int => (a * x + c) mod m) in // Memoize the random number generator function  
      ((r n) mod max) + 1 // Return a random number between 1 and max  
      
// Function that generates a random Fibonacci number  
let get_fib_random : () => Int =  
   fun() =>  
      return fib( (random(-5) mod 20) + 10 )  // Generate a random number between 10 and 30 to use as the nth term in fib function