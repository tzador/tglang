// This is a long and complex code snippet in the FIFT programming language

// Variable declaration and assignment
var x = 5 // Declares a variable 'x' and assigns it the value of 5

// Function declaration with parameters and return statement
func add(num1, num2) {
    result = num1 + num2 // Adds the two numbers and stores the result in a variable 'result'
    return result // Returns the value of the result variable
}

// String concatenation
var message = "Hello " + "World!" // Combines two strings and assigns the result to a variable 'message'

// Looping through a list
list numbers = [1, 2, 3, 4, 5] // Declares a list of numbers
for i in numbers { // Loops through each element in the list
    print(i) // Prints out the current element
}

// Conditional statement with branching
if x > 10 { // Checks if the value of 'x' is greater than 10
    print("x is greater than 10") // If true, prints out the message
} else { // If false, execution goes to the else statement
    print("x is less than or equal to 10") // Prints out the message
}

// Built-in functions
print("The length of the numbers list is", length(numbers)) // Uses the built-in function 'length' to determine the length of the list and prints it out

// Array creation and manipulation
array names = ["John", "Mary", "Tom"] // Declares an array of names
names.append("Lisa") // Adds a new name to the end of the array
names.remove(2) // Removes the name in the 2nd index position from the array

// Class creation and instantiation
class Person { // Declares a class 'Person'
    var name // Class variable 'name'

    func setName(newName) { // Method to set the name variable
        name = newName // Assigns the newName parameter to the name variable
    }
}

var person1 = new Person // Instantiates a new instance of the Person class
person1.setName("Bob") // Uses the setName method to set the name variable to "Bob"

// File input/output
file = open("input.txt") // Opens a file named "input.txt"
contents = read(file) // Reads the contents of the file and assigns it to a variable 'contents'
close(file) // Closes the file after use
write("output.txt", "The contents of the file are:", contents) // Writes a new output file with the contents of the input file and a message at the beginning

// Object inheritance
class Animal { // Base class 'Animal'
    var name // Class variable 'name'

    func setName(newName) { // Method to set the name variable
        name = newName // Assigns the newName parameter to the name variable
    }
}

class Dog extends Animal { // Subclass 'Dog' that inherits from the Animal class
    var breed // Class variable 'breed'

    func setBreed(newBreed) { // Method to set the breed variable
        breed = newBreed // Assigns the newBreed parameter to the breed variable
    }
}

var dog1 = new Dog // Instantiates a new instance of the Dog class
dog1.setName("Buddy") // Sets the name variable to "Buddy"
dog1.setBreed("Poodle") // Sets the breed variable to "Poodle"

// Exception handling
try { // Attempts to execute the code within the try block
    file = open("nonexistent.txt") // Tries to open a nonexistent file
} catch(err) { // If an error occurs during execution, the catch block is executed
    print("File does not exist") // Prints out an error message
}

// Nested functions
func greet(name) {
    func uppercase(string) { // Nested function to convert a string to uppercase
        return string.toUpperCase() // Returns the uppercase version of the string
    }

    var greeting = "Hello " + uppercase(name) // Creates a greeting message with the uppercase version of the name parameter
    print(greeting) // Prints out the greeting message
}

greet("jill") // Calls the outer greet function with the name parameter "jill", which in turn calls the nested uppercase function to create a proper greeting message

// Parallel execution
spawn thread1() // Spawns a new thread to execute the thread1 function simultaneously
spawn thread2() // Spawns another thread to execute the thread2 function simultaneously

func thread1() {
    // Code to be executed concurrently
}

func thread2() {
    // Code to be executed concurrently
}

// Comments and annotations
// Comments are denoted by double forward slashes in FIFT
// Annotations to document code can be added in triple forward slashes, like this /// Annotation

// End of code snippet