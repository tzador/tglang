;; This is a complex code snippet in FIFT
(let ((x 5)) ;; Define a variable x with value 5
  (if (= x 5) ;; Check if x is equal to 5
      (begin ;; If true, execute the following statements
        (set! x (* x 2)) ;; Multiply x by 2 and reassign the value to x
        (println "The value of x is now" x)) ;; Print the new value of x
      (begin ;; If false, execute the following statements
        (set! x (- x 1)) ;; Subtract 1 from x and reassign the value to x
        (println "The value of x is now" x))) ;; Print the new value of x
  (define lst '(1 2 3 4 5)) ;; Define a list with values 1 to 5
  (define (multiply-list lst multiplier) ;; Define a function that multiplies each element in a list by a given number
    (map (lambda (n) (* n multiplier)) lst)) ;; Use map function to iterate through the list and multiply each element by the given number
  (println "The multiplied list is" (multiply-list lst 3)) ;; Print the result of multiplying the list by 3
  (list-ref lst 2)) ;; Get the third element from the list and return it