;; -----------------------------------------
;; Code snippet in FIFT (F* integrated Tactic)
;; -----------------------------------------

;; Declare new data type called "List"
DECLARE-DATATYPE List
;; Define the constructors for the List type
List ::= Nil | Cons(item: Any, next: List)

;; Define a function to determine the length of a list
DEFINE length(list: List) : Nat = match list with
| Nil -> 0
| Cons(item, next) -> 1 + length(next)

;; Define a function to reverse a list
DEFINE reverse(list: List) : List = match list with
| Nil -> Nil
| Cons(item, next) -> append(reverse(next), Cons(item, Nil))

;; Define a function to concatenate two lists
DEFINE append(list1: List, list2: List) : List = match list1 with
| Nil -> list2
| Cons(item, next) -> Cons(item, append(next, list2))

;; Define a tactic to prove the associative property of append function
DEFINE assoc_tactic(list1: List, list2: List, list3: List) : (append(list1, append(list2, list3))) {->} (append(append(list1, list2), list3)) = {
  intro all;
  induction list1 as [|item1 next1];
  [reflexivity]
  [simplify append];
  [simplify append];
  [simplify append];
  [reflexivity]
}.