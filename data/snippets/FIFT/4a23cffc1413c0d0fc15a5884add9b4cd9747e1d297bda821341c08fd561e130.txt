;; This is an example of a recursive function in FIFT that calculates the factorial of a given number.

;; We start by defining a function `factorial` that takes in one argument, `n`.
: factorial ( n -- result )
    ;; First, we check if `n` is equal to 0, which would be the base case for our recursion.
    ;; If so, we return 1 as the factorial of 0 is 1.
    0 = [ 1 ] [ 
        ;; If `n` is not 0, we multiply `n` by the factorial of `n`-1 and recursively call the function.
        ;; This will continue until `n` reaches 0, at which point the base case will be triggered and 1 will be returned.
        1 - factorial *
    ] ?if ;
    
;; We can now use our `factorial` function to calculate the factorial of a given number, in this case 5.
5 factorial

;; The result will be stored in the stack.
;; We can print it out by using the `.` function, which prints the topmost item in the stack.
. # prints 120, which is the factorial of 5