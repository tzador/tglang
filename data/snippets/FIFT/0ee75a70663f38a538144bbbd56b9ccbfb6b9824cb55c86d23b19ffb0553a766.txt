[ 0 [ 'add' ] #add code to execution stack
  [ dup;x ] #duplicate top of stack value
  [ >0 ] 'if' #if top of stack value is greater than 0, execute next line
  [ 2* ] 'then' #multiply top of stack value by 2
  [ swapn;x;y ] 'else' #swap the top two stack values
  [ 1 ] 'fi' #push 1 to the stack
  [ swapd;y;x ] 'while' #swap the top two stack values and pop the third value, repeat until top of stack equals 0
] ! #end nested list and store in a variable

1 !x #store 1 in variable x
0 !y #store 0 in variable y

x !i #store x in variable i
3 !n #store 3 in variable n

[n #start loop
    i @ #get value from variable i
    1 add !i #add 1 to i and store back in i
    i n > #check if i is greater than n
    [ [0] #store value 0 if condition is true
        [ !x #store x in variable x
        x !x #store x in variable x (duplicate)
        'dub' !d #store 'dub' string in variable d
        ] 'dub' #push string 'dub' to execution stack
        [ d dup ; n ; #call dup function on third and fourth elements in list
        'then' 'foreach' #multiply top of stack value by 2 and execute function on third and fourth elements in list
        ] 'foreach' #push string 'foreach' to execution stack
     ] 'if' #if condition is false, execute code inside if statement
] 'while' #while loop