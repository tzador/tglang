# This program demonstrates the use of complex data types and control structures in FIFT

# Sets up a simple function that returns the factorial of a given input
define factorial(n) {
    if (n == 0) {
        return 1
    } else {
        return n * factorial(n - 1)
    }
}

# Prints out the first 10 iterations of the factorial function
define output_factorials() {
    for (i = 0; i < 10; i++) {
        result = factorial(i)
        print("Factorial of " + i + " is: " + result)
    }
}

# Creates a map with movie titles as keys and their corresponding genres as values 
define movie_map = {
    "Interstellar": "Science Fiction",
    "The Shawshank Redemption": "Drama",
    "The Dark Knight": "Action",
    "Inception": "Thriller",
    "Pulp Fiction": "Crime"
}

# Sets up a function to print out the movie map in a structured format
define print_movie_map() {
    foreach (movie in movie_map) {
        print("Title: " + movie + " | Genre: " + movie_map[movie])
    }
}

# Calls the output_factorials() function to print out the first 10 factorials
output_factorials()

# Calls the print_movie_map() function to print out the movie map
print_movie_map()