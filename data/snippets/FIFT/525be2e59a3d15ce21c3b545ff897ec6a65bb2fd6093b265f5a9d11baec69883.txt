:: Main entry point ::
:: Defines a function that takes in two integers and returns their sum

: ADD DUP 0 OR :: checks if either of the inputs is zero
  IF DROP :: if either number is zero, drop it and continue
  ELSE :: otherwise, continue with calculations
  DUP 0 > :: checks if first number is positive
  IF SWAP :: if it is, swap numbers to put larger number on top
  ELSE :: otherwise, continue with calculations
  SWAP :: swaps numbers back to original order
  DUP 0 > :: checks if second number is positive
  IF 0 > :: if it is, check if first number is also negative
    IF 1 XOR :: if only one number is negative, set sum to 0 initially (carry over later)
    ELSE NEGATE SWAP :: if both numbers are negative, negate both and swap numbers back
  ENDIF :: end if for first negative check
  :: carry over loop for first number ::
  0
  BEGIN
    DUP 10 > :: checks if number is larger than carry over value
    IF :: if it is, continue carrying over
      10 DUPMOD 10 SUB :: calculates carry over value for next digit
      ROT OP DROP :: drop carry over value and rotate stacks
      ROT MUL ADD DUP 10 > :: do calculations to carry over value to next digit
    ELSE :: if it isn't, break loop
      DROP
    ENDIF :: end if for carry over check
  AGAIN :: loop until all digits have been carried over
  ENDIF :: end if for second negative check
  SWAP :: swaps numbers back to original order
  DROP :: drops second number
; :: end function definition

:: Output ::
5 8 ADD . "The sum of 5 and 8 is" . ::
" The sum of 5 and 8 is 13"
;; End of code snippet