// This is a complex code snippet in FIFT
// It uses annotations and loops to perform a complex calculation
// Start of code snippet
DEFINITION: multiply_two_numbers (num1 num2 -- result)
// Define a function that takes in two numbers and multiplies them
num1 num2 * // Multiply the two numbers on top of the stack
SWAP "sum" SET // Store the result in a variable named "sum"
1 1 i 1 i 1 i 1 i 1 i 1 i 1 i 1 i 1 i 1 i 1 i 1 = 1 i * // Use a loop to multiply "sum" by 1, i times where i is the number of times the loop has run and starting at 1
sum @ // Retrieve the value of "sum"
IF 10 < // Check if "sum" is greater than 10
SWAP - // If so, subtract 10 from "sum"
THEN
/* 
    This is a multi-line comment in FIFT
    It is used to explain the code and make it more readable
*/
sum @ // Retrieve the value of "sum" again
IF
DUP "result" SET // Duplicate "sum" and store it in a variable named "result"
ELSE
DROP "result" SET // If "sum" is less than 10, drop it and assign "result" to 0
THEN
ENDDEF // End of function definition
// Example usage of the function:
10 5 multiply_two_numbers // This will result in "result" being equal to 50
// End of code snippet