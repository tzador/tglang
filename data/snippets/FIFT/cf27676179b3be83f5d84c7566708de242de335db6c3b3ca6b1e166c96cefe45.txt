;; This is a complex code snippet in FIFT, the programming language for the TON network

;; First, we define a function 'fact' that calculates the factorial of a given number
;; and stores it in the variable 'result'
;; The function takes in one argument 'n' which represents the number whose factorial is to be calculated
;; We use a recursive approach to calculate the factorial
;; We also add a check to ensure that 'n' is a non-negative integer
fact { n } : result
{
    n 0== IF        ;; if n == 0
        1 'result     ;; return 1 as the factorial of 0 is 1
    ELSE
        n 'result     ;; set 'result' to equal 'n'
        n 1+ fact     ;; recursively call 'fact' on n - 1 and multiply the result with 'n'
        *  'result    ;; multiply the result with 'n'
    THEN
} 'fact

;; Next, we define a function 'sum_fact' that takes in a list of numbers and calculates the sum of their factorials

sum_fact { numbers } : total
{
    { numbers } SIZE IF  ;; if the list of numbers is not empty
        numbers 0 GET 'total ;; set 'total' to equal the first element of 'numbers'
        numbers 0 DROP ;; remove the first element from the list
        { numbers } 'sum_fact 'total :: continue ;; recursively call 'sum_fact' on the remaining list of numbers
    ELSE ;; if the list of numbers is empty
        0 'total ;; set 'total' to 0
    THEN
} 'sum_fact

;; Finally, we call the 'sum_fact' function on a list of numbers (1, 2, 3, 4, 5)
{ 1 2 3 4 5 } 'sum_fact 'total

;; The output should be 153
;; Note: This program may not be the most efficient way to calculate the sum of factorials, but it serves as an example for complex code in FIFT.