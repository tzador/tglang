[instruction] ; annotation ;   # comment

: factorial ( n -- n! )         # defines a word called "factorial" with one parameter n
{                               # start of code block
 
    dup 1 <=                     # duplicate n and check if it is less than or equal to 1
    if                          # if condition is true, start code block
        1                       # push number 1 to the stack
    else                        # if condition is false, start code block
     
        dup 1 -                 # duplicate n and subtract 1
        factorial ;             # recursively calls the word "factorial" with the new number
        
        *                       # multiply the top two stack values
    then                        # end of if code block
}                               # end of code block

5 factorial                     # call the word "factorial" on the number 5