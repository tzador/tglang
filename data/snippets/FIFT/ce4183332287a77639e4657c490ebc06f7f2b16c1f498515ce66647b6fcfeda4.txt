# Program for checking whether a number is prime or not
 
prime: ( n -- ? )
    n 2 >=
    [dup 2 =] [loop_n] if
    # loop_n
    drop
    dup 2 mod
    [ 0 =] [0] ifte
;
\ The function `prime` takes in a number, denoted by `n`, and returns a boolean, with `?` indicating true or false.
\ The line `n 2 >=` checks whether the number is greater than or equal to 2, since 2 is the smallest prime number.
. { /dup /2 /= } { /loop_n /drop } ifelse
\ If the number is greater than or equal to 2, the function `loop_n` is called, which will loop through all the numbers from 2 to n-1.
\ In each iteration, the number is checked if it is equal to n (using `dup 2 =`), and if it is, the loop ends. If not, `loop_n` is called again.
\ Once the loop is finished, `drop` is called to get rid of the remaining number on the stack.
\ The next line uses `dup` to duplicate the number, and then `2 mod` to check if it is divisible by 2.
\ If the number is divisible by 2, the function returns false (0).
\ If the number is not divisible by 2, the next line uses `ifte` to check if it is equal to 0, and if it is, it returns true (1). If not, it returns false (0).