{ This is a code snippet in FIFT }

#env

// Environment functionality

{ This is a comment in FIFT }

// Create a new environment
: create-env
  0 dict
;

// Get the value of a key in the environment
: get
  ' key $env !
  env @ key get
;

// Set the value of the key in the environment
: put
  ' key $env !
  ' value
  ' this-env
  ' other-env
  this-env @ key put other-env @
  this-env swap !
;

// Retrieve the number of keys in the environment
: size
  {
    0 ' count
    swap
    { count + } list @
  } zip {
    dup 1 =
    { drop drop count }
    { 1 count - }
    ifte
  } map nip
;

// Delete a key from the environment
: del
  ' key $env !
  env @ key del
;

// Clear the environment
: clear
  this-env @ [] !
;

// Check if a given key exists in the environment
: has
  ' key $env !
  env @ key has
;