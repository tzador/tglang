((* This is a FIFT program that searches for a given key in a binary search tree *))
: 'search_word' ( key -- flag )
smallint search_word ( int8 word_index -- flag )
'word_table word_index + @ word_equiv? ;
'A-WORD-INDEX-VECTOR create free                    (* Declare a fixed-size array for storing word indices *)
: (') 0 , 0 ,     (* Initialize a new vector with two elements *)
!A-WORD-INDEX-VECTOR                            (* Store the vector in the global dictionary *)
word_table 'A-WORD-INDEX-VECTOR !                     (* Link the vector to the word table *)
(* Loop through the word table and call search_word for each word *)
0 do
    dup i @ search_word if                           (* Check if search_word returns true for current word *)
        dup i @ ,'A-WORD-INDEX-VECTOR + @ swap !     (* If true, store the index in the vector *)
        swap 1 + swap                                (* Increment index counter for next iteration *)
    then
loop
'A-WORD-INDEX-VECTOR swap drop                        (* Drop the vector and leave the index counter on the stack *)
(* Check if any matches were found *)
dup 0 = not if
    0 { ' = 2swap } swap 2drop
else
    drop drop
then ;
(* Usage example: 'cat search_word *)