: power ( n1 n2 -- n1^n2 ) // define a power function
  dup 0= if drop 1 exit then // handle base case
  dup 1= if drop swap exit then // handle n2=1 case
  rot dup n2 mod swap -1 = if // check if n2 is odd
    swap n1 * power power exit then // recursive call for odd n2
  dup n2 mod swap 0 = if // check if n2 is even
   over * rot n1 * n2 / power power exit then // recursive call for even n2
; // end of function definition

5 3 power // call power function with n1 = 5 and n2 = 3