# This code snippet is a FIFT program that implements the binary search algorithm in a sorted array.


# The `>>` operator moves the top element of the stack to the left.
# The `<<` operator moves the top element of the stack to the right.

# This function takes in a sorted array and the element to search for as parameters.
: binary_search { array element ->
    # Initialize the lower bound to the beginning of the array.
    0 >> push

    # Initialize the upper bound to the end of the array.
    array size >> 1 + >> push

    # Initialize the middle index of the array.
    0 >> push

    # Begin the binary search loop.
    # This loop runs until the lower bound is greater than the upper bound.
    { dup < } loop

        # Calculate the middle index as the average of the lower and upper bound.
        >> dup >> swap + 2 / >> swap

        # Get the element at the middle index of the array.
        array at >> swap

        # Compare the element to the one we are searching for.
        # If they are equal, return the middle index.
        { dup element = { swap did drop } if } if

        # If the element is less than the one we are searching for,
        # Update the lower bound by moving the middle index to the left.
        { dup element < if { swap >> over >> swap did swap swap did drop } if } if

        # If the element is greater than the one we are searching for,
        # Update the upper bound by moving the middle index to the right.
        { dup element > if { swap << over << swap did swap swap did drop } if } if

    { drop } loop

    # If the loop ends without returning, the element is not present in the array.
    # Return a negative value to indicate that.
    -1
} >> push

# Example usage:

# Initialize an array with 10 sorted elements.
[1 5 7 12 15 19 23 25 27 31] >> push

# Search for the element 23 in the array.
23 >> push

# Call the binary_search function, which returns the index of 23 in the array.
binary_search >> pop >> print

# The output should be:
# 6