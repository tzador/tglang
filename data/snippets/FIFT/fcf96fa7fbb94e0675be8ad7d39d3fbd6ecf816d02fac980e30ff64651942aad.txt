;; Function declaration 
(defn calcFactorial [num]	
  (cond
    ;; Base case: factorial of 0 is 1 
    (zero? num) 1
    ;; Recursive case: call function with one less than num and multiply by num
    :else (* num (calcFactorial (dec num)))))

;; Creating a vector of numbers 
(def nums [1 2 3 4 5])

;; Mapping the calcFactorial function to each number in the vector 
(map calcFactorial nums)

;; Output: [1 2 6 24 120]