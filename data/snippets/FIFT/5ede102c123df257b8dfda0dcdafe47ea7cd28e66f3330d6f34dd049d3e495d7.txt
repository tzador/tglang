;; This is a complex code snippet in the FIFT programming language.

;; The following function calculates the nth Fibonacci number using a recursive algorithm.

;; This code snippet is inspired by the "Fibonacci with Memoization" code from the FIFT tutorial on Rosetta Code.

;; First, we define a helper function that will be used to calculate the Fibonacci number.
;; This function takes two parameters: the current index and a tuple with the last two calculated Fibonacci numbers.
;; It then recursively calculates the next Fibonacci number by adding the last two numbers together.
;; If the current index is 0, it will return the first Fibonacci number (0).
;; If the current index is 1, it will return the second Fibonacci number (1).

defun fib-helper (index fibs)
   (let ((first (fibs 0)) (second (fibs 1)))
     (if (eq index 0)
        first
        (if (eq index 1)
           second
           (fib-helper (- index 1) (cons (+ first second) fibs))))))

;; Next, we define a function that will be called by the user to calculate the Fibonacci number.
;; This function takes one parameter: the index of the Fibonacci number to be calculated.
;; It first checks if the index is a positive integer, if not it raises an error.
;; Then, it initializes a tuple with the first two Fibonacci numbers (0 and 1).
;; Finally, it calls the helper function to calculate the Fibonacci number at the specified index.

defun fibonacci (index)
   (if (>= index 0)
      (fib-helper index (tuple 0 1))
      (err "Index must be a positive integer")))

;; Finally, we call the fibonacci function with an index of 10 and print the result.
;; This should output the 10th Fibonacci number (55).
fibonacci 10 (prl "The 10th Fibonacci number is" (fibonacci 10))