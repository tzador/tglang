// This code snippet is a simple example of a FIFT (Functional Intermediate Form for Transactions) program
// It defines a function called multiply that takes in two integer parameters and returns their product
// FIFT is a functional programming language designed for creating smart contracts on the FreeTON blockchain

;; Takes two integer parameters, multiplies them, and stores the result in register 1
define multiply (x y)
  (let
    ((r1 0)
     (r2 0)
     (product 0))
    ;; Store x and y in registers 1 and 2
    (# store r1 x)
    (# store r2 y)

    ;; Multiply x and y and store the result in register 3
    (# mul product r1 r2)

    ;; Return the product
    (# return product)))

// The main function
define main ()
  (let
    ((x 5)
     (y 7)
     (z 0))
    ;; Call the multiply function with x and y as parameters
    (# call_mul z x y)

    ;; Output the result
    (# output z)))