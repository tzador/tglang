--- ANNOTATIONS ---
# The following code is a snippet in FIFT, a functional language used for processing text files.

--- TYPE DEFINITIONS ---
type expression := 'string' | 'number' | 'boolean' | 'list' | 'function'
type command := 'concat' | 'split' | 'remove' | 'replace' | 'filter' | 'map' | 'sort' | 'reduce'

--- HELPER FUNCTIONS ---
let concat (x: expression) (y: expression): string = x + y
let split (s: string) (delim: string): list = [substring | substring in s.split(delim)]
let remove (s: string) (char: string): string = replace(s, char, '')
let replace (s: string) (old: string) (new: string): string = s.replace(old, new)
let filter (xs: list) (f: function): list = [x | x in xs, f(x) == true]
let map (xs: list) (f: function): list = [f(x) | x in xs]
let sort (xs: list) (cmp: function): list = xs.sort(cmp)
let reduce (xs: list) (f: function) (init: expression): expression = xs.reduce(f, init)

--- MAIN FUNCTION ---
let main (input: string) (command: command) = {
    let output: expression = match command with
        | 'concat' => concat(input, ' world') # concatenates ' world' to input string
        | 'split' => split(input, ' ') # splits input string by space and returns a list
        | 'remove' => remove(input, 'o') # removes all occurrences of 'o' in input string
        | 'replace' => replace(input, 'l', 'r') # replaces all occurrences of 'l' with 'r'
        | 'filter' => filter(split(input, ' '), (x) => x.length < 5) # filters out words with less than 5 characters
        | 'map' => map(split(input, ' '), (x) => x.capitalize()) # capitalizes each word in input string
        | 'sort' => sort(split(input, ' '), (x, y) => x.length > y.length) # sorts words in input string by length
        | 'reduce' => reduce(split(input, ' '), (a, b) => concat(a, b), '') # reduces list of words into a single string
    return output
}

--- EXAMPLE USAGE ---
main('Hello FIFT', 'concat') // output: 'Hello FIFT world'
main('Hello FIFT', 'split') // output: ['Hello', 'FIFT']
main('Hello FIFT', 'remove') // output: 'Hell FIFT'
main('Hello FIFT', 'replace') // output: 'Herro FIFTr'
main('Hello FIFT', 'filter') // output: ['Hello', 'FIFT']
main('Hello FIFT', 'map') // output: ['Hello', 'FIFT']
main('Hello FIFT', 'sort') // output: ['FIFT', 'Hello']
main('Hello FIFT', 'reduce') // output: 'HelloFIFT'