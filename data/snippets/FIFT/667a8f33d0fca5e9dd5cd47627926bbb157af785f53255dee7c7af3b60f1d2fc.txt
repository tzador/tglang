{ "1":^( times: s1 isint not throw "Argument must be an integer" ) ; % define contract for multiplying by integer
  s1 { } % sender always pays for computations
  "Before multiplication:" CR .{% print message before multiplication
  s1 .
}L @multiplicand @multiplier Q not throw % allocate storage cells and move multiplicands there
multiplicand @multiplicand ! % set multiplicand in storage
multiplier @multiplier ! % set multiplier in storage
multiplier 0 <= 0 % check if multiplier is positive
{ "Invalid multiplier: must be greater than 0" throw } "multiplier must be greater than 0" assert_chk % if not, throw an error
# multiplicator = multiplier 0 >= 
{// if multiplier is positive, set multiplicator to 1
  1 @multiplicator !
} {
  multiplicator multiplier { multiplicator @multiplicand @multiplicand + } % loop to compute multiplication
  { } % keep looping until multiplier reaches 0
  L ! % list result in stack
} cond  % end of if statement
multiplicator L ! % list result in top of stack
{% print message after multiplication
"Result:" CR .
} % end of contract