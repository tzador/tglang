/**
* This code snippet uses the FIFT programming language
* to perform a complex calculation on a list of numbers.
* It uses recursion and higher-order functions to achieve its logic.
**/

// Define a function to calculate the square root of a number
define sqrt {
  input num
  output returns
  // Base case for recursive function
  if (num == 0) {
    return 0
  }
  // Otherwise, use Newton's method to approximate
  else {
    return num / 2 + num / (2 * sqrt(num))
  }
}

// Define a higher-order function to map over a list
define map {
  input list, func
  output returns
  // Base case for recursive function
  if (list == []) {
    return []
  }
  // Apply the function to each element in the list
  else {
    return [func(list[0])] + map(list[1:], func)
  }
}

// Define a function to calculate the product of a list of numbers
define product {
  input num_list
  output returns
  // Base case for recursive function
  if (num_list == []) {
    return 1
  }
  // Otherwise, use map and reduce to calculate product
  else {
    return reduce (num_list, *, 1)
  }
}

// Define a list of numbers
my_list = [2, 4, 6, 8, 10]

// Use map to calculate the square root of each number in the list
sqrt_list = map(my_list, sqrt)

// Use product to calculate the product of the square roots
final_result = product(sqrt_list)

// Print the final result to the console
print(final_result)