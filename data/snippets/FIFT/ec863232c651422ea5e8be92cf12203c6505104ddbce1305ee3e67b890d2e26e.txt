// This is a code snippet in `FIFT`

// Create a function that takes in two numbers and returns their sum
: add ( a b -- c )
  swap + ; // Swaps the top two elements on the stack and adds them

// Define two variables for testing
20 35 add // Stores the sum (55) on top of the stack
30 25 add // Stores the sum (55) on top of the stack
swap 30 add // Adds the two previous sums together (110)

// Output the final sum
. // Prints the top element of the stack (110)

// Define a loop function that takes in a number and counts down to 0
: countdown ( a -- )
  dup // Duplicates the top element on the stack (to check for 0)
  ?dup // Duplicates the duplicated element and checks if it's 0
  if (if 0, then end)
    drop // If it is 0, drop the duplicated element (end the loop)
  else (if not 0, then subtract 1 and continue)
    1 - // Subtracts 1 from the duplicated element on the stack
    countdown // Recursively calls the loop function with the new element
end if // Ends the if statement
;

// Test the loop function with the number 10
10 countdown // Outputs: 10 9 8 7 6 5 4 3 2 1 0

// Define variables for calculating factorial using recursion
variable n // Creates a variable n to store the number
variable result // Creates a variable result to store the final result

// Define a function that calculates factorial using recursion
: factorial ( -- result )
  dup // Duplicates the top element on the stack (to check for 0)
  2 < // Checks if the duplicated element is less than 2
  if (if less than 2, then end recursion)
    result ! // Stores the final result in the result variable
  else (if greater than or equal to 2, then recursively call factorial)
    dup // Duplicates the duplicated element on the stack
    1 - // Subtracts 1 from the duplicated element
    factorial // Recursively calls the factorial function with the new element
    swap * // Swaps the two top elements and multiplies them (calculates factorial)
  end if  // Ends the if statement
;

// Test the factorial function with the number 5
5 n ! // Stores the number 5 in the n variable
n @ factorial // Calculates the factorial of 5 and stores it in the result variable
result @ . // Prints the result (120)