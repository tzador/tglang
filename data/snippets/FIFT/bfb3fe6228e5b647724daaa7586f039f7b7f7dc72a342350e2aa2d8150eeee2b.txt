;; This code snippet converts an integer into its binary representation
;; using the bitwise operation "AND"
 
;; Stack: { -'n } n
 
-: to-binary
  NIP # Removes unnecessary input value
  [ # Starts loop
    [ # Starts binary sequence
      >> # Shifts input value to the right by 1 bit
      [ # Starts condition
        2 # Pushes binary number 2 to the stack
        >r # Stores value in return stack
        % # Pushes remainder after dividing input value by binary number
        ] # Ends condition
      [ # Starts condition
        0 # Pushes binary number 0 to the stack
        ] # Ends condition
      CASE? # Evaluates condition and chooses number based on remainder
      # Loops until input value becomes 0
    ] # Ends binary sequence
    1 # Pushes binary number 1 to the stack
    ROT # Rotates top three values on the stack
    AND # Bitwise operation AND
    # Continues loop until binary sequence is complete
  ] WHILE # Ends loop
  FLIP # Flips binary sequence to correct order
;
 
;; Example:
10 to-binary   # Returns binary value of 10 which is 1010
;; Output: { ['1 0 1 0] }