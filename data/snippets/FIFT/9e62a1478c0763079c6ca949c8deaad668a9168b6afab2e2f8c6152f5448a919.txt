;; This is a code snippet in FIFT, a functional programming language for developing smart contracts

;; This code snippet shows a basic function that calculates the factorial of a given number

;; The function takes in one argument, `x`, which is the number whose factorial needs to be calculated

;; The function recursively calculates the factorial, reducing the value of `x` by 1 until it reaches 0

;; The factorial of a number can be calculated as: x! = x * (x-1) * (x-2) * ... * 1

;; Define the `factorial` function
: factorial { 
    { x } s x @<= 
    { 1 } { x @ x x 1 - x } ?if dup 0 = 
    { [ ] } { [ 1 ] swap [ dup 1 - factorial * ] } ?if 
};

;; Calculate the factorial of 5 and store the result in `fac`
5 factorial $fac !