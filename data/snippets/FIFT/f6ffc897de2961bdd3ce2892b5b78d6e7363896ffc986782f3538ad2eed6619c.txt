;; This is a complex and long code snippet in FIFT language

;; Define a map function
: map ( seq{A}  bool -- seq{B} )
  % ^ Takes a sequence of type A and a boolean as input, and returns a sequence of type B
  { }          % ^ Initializes an empty sequence
  0 swap       % ^ Places a 0 on top of the stack, and swaps it with the boolean input
  % ^ Will act as a counter for the sequence elements
  [ ( x step -- x' ) ]  % ^ Defines a loop where x is the current element and x' is the transformed element
  rot dup seq len 0 >= [ | a more | ] % ^ If the sequence is not empty, execute the loop
    [ swap a push step a 1 + a swap ]  % ^ Pushes the transformed element onto the sequence and increments counter by 1
    [ drop ]                           % ^ If the sequence is empty, drop the boolean input
    if
  loop
  swap nip ; % ^ Remove the counter and boolean inputs from the stack before returning the new sequence

;; Define a function for squaring numbers, used as step in map function
+ dup * ;

;; Main program starts here
123 seq\
  % ^ Creates a sequence with the numbers 1, 2 and 3
  key swap
% ^ Uses input as boolean to either square or cube the numbers in the sequence
-2 > 1 0 ?*
% ^ Uses input as boolean to either convert numbers to positive or negative
map
% ^ Maps input sequence with the function defined above
. cr
;; Outputs the final sequence, should be [-1, 4, 9]