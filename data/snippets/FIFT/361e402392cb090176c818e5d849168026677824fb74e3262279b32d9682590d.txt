;; This code snippet generates a Fractal tree using the FIFT language

(progn
  ;; Define colors
 (defparameter *red* #xFF0000)
 (defparameter *green* #x00FF00)
 (defparameter *blue* #x0000FF)
 (defparameter *white* #xFFFFFF)
 (defparameter *black* #x000000)
 (defparameter *grey* #x808080)

 ;; Define functions for drawing lines and circles
 (defun draw-line (start end width color)
   "Draws a line from START to END with the specified WIDTH and COLOR"
   (circle start width color)
   (circle end width color))
 (defun draw-circle (center radius color)
   "Draws a circle with the specified CENTER, RADIUS, and COLOR"
   (move center)
   (circle radius color))

 ;; Define variables for tree properties
 (defparameter *init-length* 100)
 (defparameter *min-branch-length* 30)
 (defparameter *angle* 25)
 (defparameter *branch-factor* 0.7)
 (defparameter *thickness-factor* 0.8)

 ;; Define recursive function for drawing the tree
 (defun draw-tree (start length thickness color)
   "Draws a tree with the specified START point, LENGTH, THICKNESS, and COLOR"
   (cond
     ((<= length *min-branch-length*)
      ;; Base case: stop drawing when length is too short
      nil)
     (t
      ;; Recursive case: draw branches and continue drawing tree
      (let* ((angle-radians (* *angle* (/ pi 180)))
             (end (point (+ start (polar length angle-radians)))))
        (draw-line start end thickness color)
        (draw-tree end (* length *branch-factor*) (* thickness *thickness-factor*) color)
        (draw-tree end (* length *branch-factor*) thickness color)))))

 ;; Set up canvas and draw tree
 (surface-clear)
 (draw-tree (polar-center 0) *init-length* 5 *brown*)

 ;; Add other shapes
 (setf *color-mode* :rgb)
 (draw-circle (polar-center 180) 50 *red*)
 (draw-circle (polar-center 270) 50 *blue*)
 (draw-circle (polar-center 0) 50 *green*)
 (draw-circle (polar-center 90) 50 *grey*)
 (draw-circle (polar-center 45) 50 *black*)
 (draw-circle (polar-center 135) 50 *white*)
 (draw-circle (polar-center 225) 50 *grey*)
 (draw-circle (polar-center 315) 50 *green*)
 (draw-circle (polar-center 135) 50 *black*)

 ;; Save canvas as an image
 (defparameter *filename* "fractal-tree.png")
 (surface-flush)
 (surface-write *filename*)
 (console-write-line (format "Canvas saved as %s" *filename*))
)