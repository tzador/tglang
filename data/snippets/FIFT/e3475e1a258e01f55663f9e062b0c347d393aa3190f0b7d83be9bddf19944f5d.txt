;; this function calculates the sum of the first n integers
(define (sum n)
  (define (iter count result)
    (if (= count n)
        result
        (iter (+ count 1) (+ result count))))
  (iter 0 0))

;; this function calculates the factorial of a number
(define (factorial n)
  (if (= n 0)
      1
      (* n (factorial (- n 1)))))

;; this function calculates the nth term in the Fibonacci sequence
(define (fibonacci n)
  (if (= n 0)
      0
      (if (= n 1)
          1
          (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

;; this function calculates the nth term in the Tribonacci sequence
(define (tribonacci n)
  (if (= n 0)
      0
      (if (= n 1)
          1
          (if (= n 2)
              1
              (+ (tribonacci (- n 1)) (tribonacci (- n 2)) (tribonacci (- n 3)))))))

;; this function calculates the sum of the first n terms in the Tribonacci sequence
(define (sum-tribonacci n)
  (if (= n 0)
      0
      (+ (tribonacci n) (sum-tribonacci (- n 1)))))

;; this function calculates the length of a list
(define (list-length lst)
  (if (null? lst)
      0
      (+ 1 (list-length (cdr lst)))))

;; this function reverses a list
(define (list-reverse lst)
  (if (null? lst)
      lst
      (append (list-reverse (cdr lst)) (list (car lst)))))

;; this function appends two lists
(define (list-append lst1 lst2)
  (if (null? lst1)
      lst2
      (cons (car lst1) (list-append (cdr lst1) lst2))))

;; this function merges two sorted lists
(define (list-merge lst1 lst2)
  (cond ((null? lst1) lst2)
        ((null? lst2) lst1)
        ((< (car lst1) (car lst2)) (cons (car lst1) (list-merge (cdr lst1) lst2)))
        (else (cons (car lst2) (list-merge lst1 (cdr lst2))))))

;; this function sorts a list using the merge-sort algorithm
(define (merge-sort lst)
  (if (<= (list-length lst) 1)
      lst
      (let ((mid (quotient (list-length lst) 2)))
        (let ((left (list-tail lst (- mid)))
              (right (list-head lst mid)))
          (list-merge (merge-sort left) (merge-sort right))))))