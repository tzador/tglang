(* Define a function that calculates the factorial of a given number *)
let rec factorial (n) =
    if n <= 0 then 1
    else n * factorial(n-1)

(* Define a recursive function that calculates the nth Fibonacci number *)
let rec fibonacci (n) =
    if n <= 0 then 0
    else if n = 1 then 1
    else fibonacci(n-1) + fibonacci(n-2)

(* Define a function that checks if a given number is a prime number *)
let is_prime (n) =
    (* Create a helper function to check if a number is divisible by any number from 2 to its square root *)
    let rec is_divisible (num, divisor) =
        if divisor * divisor > num then false
        else if num % divisor = 0 then true
        else is_divisible(num, divisor + 1)
    
    (* Check if given number is equal to 2 or if it is greater than 2 and not divisible by any number from 2 to its square root *)
    n = 2 || (n > 2 && not(is_divisible(n, 2)))
    
(* Define a function that sorts a list of numbers using bubble sort algorithm *)
let rec bubblesort (lst) =
    (* Create a helper function that swaps two elements in a given list *)
    let swap (lst, i, j) =
        lst[i] <- lst[j]
        lst[j] <- lst[i]
    
    (* Base case: If list has only 1 element, return the list as it is already sorted *)
    if List.length lst < 2 then lst
    else
        (* Loop through the list and swap adjacent elements if they are in wrong order *)
        for i = 0 to List.length lst - 2 do
            if lst[i] > lst[i+1] then swap(lst, i, i+1)
        
        (* Recursively call bubblesort on the list without the last element which is already in correct position *)
        bubblesort(List.take (List.length lst - 1) lst) @ [List.last lst]