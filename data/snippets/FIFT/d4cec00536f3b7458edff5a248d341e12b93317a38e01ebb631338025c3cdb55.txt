(defun encrypt (key message)
    "Encrypts a message using a given key"
    (let ((encrypted-message ""))
        (dotimes (i (length message))
            (setq encrypted-message (concat encrypted-message (char-to-string (+ (char-to-integer (elt message i)) key)))))
    encrypted-message)
 
(defun decrypt (key message)
    "Decrypts a message using a given key"
    (let ((decrypted-message ""))
        (dotimes (i (length message))
            (setq decrypted-message (concat decrypted-message (char-to-string (- (char-to-integer (elt message i)) key)))))
    decrypted-message)
 
(defun brute-force-decrypt (message)
    "Performs a brute force decryption on a message, attempting all possible keys until a readable message is found"
    (let ((key 0)
          (decrypted-message "")
          (readable nil))
        (while (and (<= key 255) (not readable))
            (setq decrypted-message (decrypt key message))
            (if (test-readable decrypted-message)
                (setq readable t))
            (setq key (1+ key)))
        (if readable
            decrypted-message
            "Could not decrypt")))
 
(defun test-readable (message)
    "Checks if a message is readable by comparing each character to printable ASCII characters"
    (let ((readable t))
        (dotimes (i (length message))
            (if (or (<= (char-to-integer (elt message i)) 31) (>= (char-to-integer (elt message i)) 127))
                (setq readable nil)))
        readable))
 
(defmacro define-hello-world ()
    "Defines a hello world function"
    (list 'defun 'hello-world '()
        (list 'format nil "\"Hello World!\"")))
 
(define-hello-world) ;should print "Hello World!"