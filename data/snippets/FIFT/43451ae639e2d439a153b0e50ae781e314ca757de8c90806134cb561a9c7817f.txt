# Function to generate a list of prime numbers using the Sieve of Eratosthenes
prime_list: ( lim -- primes )
: prime_list ( lim -- primes )
  dup 0 > (
    {1,} ( start at 2 )
    dup ( keep a copy of the starting value )
    1+ ( increment count by 1 for the next number to check )
    swap ( swap stack elements to put starting value at the bottom )
    over ( keep a copy of the limit )
    swap ( swap stack elements to put limit at the bottom )
    swap ( swap stack elements to put starting value back at the top )
    1- ( decrement count by 1 to make it an inclusive limit )
    +loop # loop through the range from starting value to limit
        >r ( move range start value to return stack )
        ( indicates whether number is prime or not )
        clr ( clear stack )
        >r ( move number to return stack )
        clr ( clear stack )
        prime_list ( recursive call to calculate prime list )
        ( save current list of primes )
        rot ( move number to top of stack )
        [ cr ] ( output number on a new line )
        r> ( move return stack value to stack )
        mod ( check if current number is divisible by previously found primes )
        0= ( if no remainder, number is not prime )
        [ ( continue loop if not divisible )
            ( if divisible, save temp list and break out of loop )
            >r ( move current number to return stack )
            ( save the number for the temp list )
            clr ( clear stack )
            loop ( continue loop )
        ] when ( end of if statement )
        clr ( clear stack )
        r> ( move return stack value to stack )
        prime_list ( recursive call to calculate prime list )
        rot ( move temp list to top of stack )
        cat ( concatenate current list and temp list )
        ( save the new list of primes )
        swap ( swap stack elements to put temp list back at the top )
    cr ( start a new line for spacing )
    rot ( move the final list of primes back to the top of the stack )
)
( end loop and return final list of primes )
; ( end of function and return value on stack )

( Example usage: print the first 100 prime numbers )
100 prime_list
100 2 # # ( reverse the list to print in ascending order )
do [ i [ dup cr . cr ] >>n ] nloop
( Output: 
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97
... and so on until 541, the 100th prime number )