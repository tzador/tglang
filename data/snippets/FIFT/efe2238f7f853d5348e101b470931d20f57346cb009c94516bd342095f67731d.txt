;; The following code snippet contains a complex function in FIFT that calculates the nth
;; Fibonacci number recursively. The function takes in an integer n and returns the
;; corresponding Fibonacci number.

:: nthfib ( n -- fibn )
	1 swap dup 1 = if drop 1 exit then		; Check if n is equal to 1, if true, return 1
	2 rotate swap over 1 - dup 1 = if drop 1 exit then ; Check if n is equal to 2, if true, return 1
	dup 1 - dup - rot 1 - nthfib +	; Calculate the (n-1)th and (n-2)th Fibonacci numbers
	rot over 2 - swap - swap swap	; to get the nth Fibonacci number
	dup 0 < if drop 0 else swap 1 - nthfib + then ; Check for negative n values
	rot swap - swap
	;

;; Usage:
6 nthfib							; Returns 8, the 6th Fibonacci number
3 nthfib							; Returns 2, the 3rd Fibonacci number
9 nthfib							; Returns 34, the 9th Fibonacci number