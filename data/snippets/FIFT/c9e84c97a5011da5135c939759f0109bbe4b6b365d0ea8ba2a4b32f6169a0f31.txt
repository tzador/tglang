;; This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm

;; Define function that generates a list of numbers up to a given limit
: num-list ( limit -- list )
    limit 0 ?do
        i ' list-append! ( list ) ,  ; append number to end of list
    loop
    nip ; drop the input limit from the stack
;

;; Set limit for the number list to be generated
15 'num-list ( 15 -- list ) ;

;; Define function to check if a number is prime
: is-prime? ( n -- ? )
    1 1 ; initial values for loop condition (i and result)
    begin
        begin
            dup d= ; check if the number is divisible by i
            case
                ( n -- n i n%i==0 ) 
                break ( number is divisible, exit loop )
            of
                ( n -- n i n%i!=0 ) 
                rot ( n i n -- n n%i i )
                i 1+ 1 = ( n n%i i -- n n%i i+1 1 )
                if
                    nip nip ( n i -- )
                    true swap ( i ? )
                else
                    over + swap ( n+i -- n+n%i i )
                then
            endcase
        tmp ( temp result for loop condition, dup for while-do )
        result ( update result, store old one on the stack )
        dup length 0= not ( check if list is empty )
    while
    nip ; drop the last value in the stack (loop condition)
;

;; Generate list of prime numbers using the Sieve of Eratosthenes algorithm
: sieve ( list -- primes )
    'list-append!
    begin
        dup num-list ( list -- list list' )
        dup length dup primize ( list list' ) 
        over last length 1+ swap ' take ( list list' take-n ) 
        2 swap num-list ( list list' n-2 ) dup '( n-2 list list' ) 
        over repeat extract ( list list' list-primes )
        dup empty?? not ( list-primes -- list-primes take-n )
    while
    nip ( list-primes take-n -- list-primes )
;

;; Run the sieve function on a list of numbers up to 100
100 'num-list sieve

;; Output the list of prime numbers generated
list