-- This code snippet is a complex sorting algorithm in FIFT.
-- Input data: an array of integers
-- Output data: the sorted array in ascending order

-- Function to swap array elements
swap =: ( n m ! x -- n' m' )
    dup (array.) swap get dup
    swap (array.) swap getLabel 2! (array.)
    swap get dup rot 1 rot 1 rot
    getLabel 2! swap rot rot swap
        swap push (array.)
    swap setLabel swap (array.)
    x ;

-- Function to partition the array based on a pivot element
partition =: ( L R ! pivot -- pivot L' R' )
     2over < ;
    IF
        swap "/" 1- get 2over > IF rot swap ELSE 1- swap rot (L) THEN
        "/" move' STO 1+ 1 roll 1+ ;
    IF
        swap alt clear swap 1> 2over fixnum.zeros (R) cmove ;
    ELSE
        swap (R) cmove swap R !
        swap 1- swap -1 1
        ( -- L' R' ! )
    ELSE
        ( R ) swap 1 2over - 2over R ! ( L R' ! )
    THEN
    ( pivot L' R' ! )
 ;

-- Function to perform quicksort
quicksort =: ( from to -- )
    IF
        from from 1 < arg THROW then
    IF
        TO DUP SIZE ( to ) - 2 FETCH ( $array.array-n ) *
        from SIZE ( from ) - 2 FETCH ( $array.array-n ) / ( to from ! )
        swap pivot partition
        " quiksort L" . wordheader hasheer execute;
        " quiksort R" . wordheader hasheer execute;
    THEN
    x ;