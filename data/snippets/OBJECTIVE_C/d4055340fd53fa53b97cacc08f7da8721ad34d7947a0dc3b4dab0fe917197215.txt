//This is a sample code snippet in Objective-C

#import <Foundation/Foundation.h> //importing the Foundation framework for working with objects and data types

@interface Person : NSObject //defining a class called Person which will be a subclass of NSObject
//instance variables for the Person class
@property (nonatomic, strong) NSString *name; //instance variable of type NSString which will store the name of the person
@property (nonatomic, assign) int age; //instance variable of type int which will store the age of the person
@property (nonatomic, strong) NSString *occupation; //instance variable of type NSString which will store the occupation of the person

//defining methods for the Person class
- (void)introduceSelf; //method to print a greeting and introduce the person
- (void)sayAge; //method to print the person's age
- (void)changeOccupation:(NSString*)newOccupation; //method to change the person's occupation

@end //end of interface declaration

@implementation Person //implementation of the Person class

- (void)introduceSelf { //implementation of the introduceSelf method
    NSLog(@"Hi, my name is %@ and I am a %@.", self.name, self.occupation); //printing the person's name and occupation using the instance variables
}

- (void)sayAge { //implementation of the sayAge method
    NSLog(@"I am %d years old.", self.age); //printing the person's age using the instance variable
}

- (void)changeOccupation:(NSString*)newOccupation { //implementation of the changeOccupation method
    self.occupation = newOccupation; //updating the person's occupation using the instance variable and the passed in parameter
}

@end //end of implementation

int main(int argc, const char * argv[]) { //main function, the entry point for the program
    @autoreleasepool { //autoreleasepool to manage memory
        //creating an instance of the Person class and setting its properties
        Person *person = [[Person alloc] init]; //allocating memory for the object and initializing it
        person.name = @"John"; //setting the name property
        person.age = 25; //setting the age property
        person.occupation = @"Developer"; //setting the occupation property
        
        [person introduceSelf]; //calling the introduceSelf method
        [person sayAge]; //calling the sayAge method
        
        [person changeOccupation:@"Designer"]; //calling the changeOccupation method, passing in a new occupation
        
        [person introduceSelf]; //calling the introduceSelf method again to see the updated occupation
        
        //output:
        //Hi, my name is John and I am a Developer.
        //I am 25 years old.
        //Hi, my name is John and I am a Designer.
    }
    return 0; //returning 0 to indicate successful execution of the program
}