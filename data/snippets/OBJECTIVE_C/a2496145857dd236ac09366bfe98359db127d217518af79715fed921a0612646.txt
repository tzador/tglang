//OBJECTIVE-C code for a linked list data structure

//Declare LinkedListNode class
@interface LinkedListNode : NSObject

//Declare node properties
@property(nonatomic, strong) id data;
@property(nonatomic, strong) LinkedListNode *next;

//Initialize node with given data
- (instancetype)initWithData:(id)data;

@end

@implementation LinkedListNode

//Implementation of node initializer
- (instancetype)initWithData:(id)data {
    self = [super init];
    if (self) {
        self.data = data;
        self.next = nil;
    }
    return self;
}

@end

//Declare LinkedList class
@interface LinkedList : NSObject

//Declare properties for head and tail nodes
@property(nonatomic, strong) LinkedListNode *head;
@property(nonatomic, strong) LinkedListNode *tail;

//Insert a new node at the end of the list
- (void)insertData:(id)data;

//Remove the first occurrence of a given data
- (void)removeData:(id)data;

@end

@implementation LinkedList

//Implementation of insert method
- (void)insertData:(id)data {
    LinkedListNode *newNode = [[LinkedListNode alloc] initWithData:data];
    //Check if list is empty
    if (self.head == nil) {
        self.head = newNode;
        self.tail = newNode;
    }
    else {
        self.tail.next = newNode;
        self.tail = newNode;
    }
}

//Implementation of remove method
- (void)removeData:(id)data {
    //Check if list is empty
    if (self.head == nil) {
        printf("List is empty\n");
        return;
    }
    LinkedListNode *currentNode = self.head;
    //Check if the data to be removed is at the head of the list
    if (currentNode.data == data) {
        self.head = currentNode.next;
        return;
    }
    LinkedListNode *previousNode = nil;
    //Traverse the list until the data is found or the end is reached
    while (currentNode != nil && currentNode.data != data) {
        previousNode = currentNode;
        currentNode = currentNode.next;
    }
    //Check if the data was not found in the list
    if (currentNode == nil) {
        printf("Data not found in list\n");
        return;
    }
    //Detach the node from the list
    previousNode.next = currentNode.next;
}

@end

//Example usage
//Create a linked list
LinkedList *list = [[LinkedList alloc] init];
//Insert nodes with data
[list insertData:@5];
[list insertData:@3];
[list insertData:@7];
[list insertData:@9];
//Remove a node with data
[list removeData:@7];