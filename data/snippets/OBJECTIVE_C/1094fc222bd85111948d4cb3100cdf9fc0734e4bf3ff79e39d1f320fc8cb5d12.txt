#import <Foundation/Foundation.h> //include the Foundation framework

@interface Person : NSObject //create a class called Person that inherits from NSObject
{
    @private //set access attribute to private
    NSString *_name; //create a private variable of type NSString
    int _age; //create a private variable of type int
}

- (instancetype)initWithName:(NSString *)name andAge:(int)age; //create a custom initializer method
- (void)sayHello; //create a method called sayHello that returns void
@end //end of interface

@implementation Person //start implementation of the Person class
{
    NSString *_name; //create a private variable of type NSString
    int _age; //create a private variable of type int
}

- (instancetype)initWithName:(NSString *)name andAge:(int)age //implement the custom initializer method
{
    self = [super init]; //call the default initializer on the super class
    if (self) { //check if initialization was successful
        _name = name; //set the private variable _name to the passed in name parameter
        _age = age; //set the private variable _age to the passed in age parameter
    }
    return self; //return the initialized object
}

- (void)sayHello //implement the sayHello method
{
    NSLog(@"Hello, my name is %@ and I am %d years old.", _name, _age); //print out a greeting using the private variables
}

@end //end of implementation

int main(int argc, const char * argv[]) { //start of main function
    @autoreleasepool { //create an autorelease pool for memory management
        Person *person = [[Person alloc] initWithName:@"John" andAge:25]; //create a Person object using the custom initializer
        [person sayHello]; //call the sayHello method on the person object
    }
    return 0; //return 0 to indicate successful execution
}