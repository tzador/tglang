//Create an object
MyObject *myObject = [[MyObject alloc] init];

//Set properties
myObject.name = @"John";
myObject.age = 25;
myObject.height = 175;

//Call methods
[myObject sayHello];
[myObject eatFood:@"Pizza"];

//Create a dictionary
NSDictionary *myDictionary = @{@"name":@"John", @"age":@"25", @"profession":@"Software Developer"};

//Loop through dictionary
for (NSString *key in myDictionary) {
    NSLog(@"%@", [myDictionary objectForKey:key]);
}

//Create an array
NSArray *myArray = @[@"apple", @"orange", @"banana"];

//Loop through array
for (NSString *fruit in myArray) {
    NSLog(@"%@", fruit);
}

//Create a block
void (^myBlock)(NSString *) = ^(NSString *message) {
    NSLog(@"%@", message);
};

//Call block
myBlock(@"Hello World");

//Create a singleton class
@interface MySingleton : NSObject
+(instancetype)sharedInstance;
@end

@implementation MySingleton

+(instancetype)sharedInstance {
    static MySingleton *instance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        instance = [[MySingleton alloc] init];
    });
    return instance;
}

@end

//Create a category
@interface NSString (MyCategory)
-(NSString *)reversedString;
@end

@implementation NSString (MyCategory)

-(NSString *)reversedString {
    NSMutableString *reversedString = [NSMutableString string];
    NSInteger charIndex = [self length];
    while (charIndex > 0) {
        charIndex--;
        NSRange subStrRange = NSMakeRange(charIndex, 1);
        [reversedString appendString:[self substringWithRange:subStrRange]];
    }
    return reversedString;
}

@end

//Create a protocol
@protocol MyProtocol <NSObject>
@property (nonatomic, strong) NSString *name;
-(void)sayHello;
@end

//Implement protocol in a class
@interface MyClass : NSObject <MyProtocol>
@property (nonatomic, strong) NSString *name;
@end

@implementation MyClass

-(void)sayHello {
    NSLog(@"Hello, my name is %@", self.name);
}

@end