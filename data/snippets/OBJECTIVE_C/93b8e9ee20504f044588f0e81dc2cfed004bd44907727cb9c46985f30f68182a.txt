id __weak variableName = someValue;  // declare a weak reference variable named variableName with the value of someValue

[object doSomethingWithVariable:variableName];  // call the doSomethingWithVariable method of the object, passing in the variableName as an argument

for (int i = 0; i < variableName.length; i++) {  // start a for loop with a variable i, looping through the length of the variableName
    NSLog(@"%d", i);  // print the value of i to the console
}

if (variableName) {  // check if the variableName is not nil
    NSLog(@"This variable is not nil");  // if the variableName is not nil, print a message to the console
} else {  // if the variableName is nil
    NSLog(@"This variable is nil");  // print a different message to the console
}

@try {  // start a try-catch block
    [object performSelector:@selector(someMethod) withObject:nil afterDelay:1.0];  // invoke the someMethod method of the object after a delay of 1.0 seconds
}
@catch (NSException *exception) {  // catch any exceptions that may occur
    NSLog(@"Error: %@", exception.reason);  // print the reason for the exception to the console
}
@finally {  // finally block, will always execute
    NSLog(@"Finally - program has completed");  // print a message to the console
}

@interface CustomClass : NSObject  // create a new custom class named CustomClass, inheriting from the NSObject class

@property (nonatomic, strong) NSString *name;  // create a strong property named 'name' of type NSString

- (void)methodWithCompletionHandler:(void (^)(BOOL success, NSError *error))completionHandler;  // declare a method with a completion handler as a parameter, taking in a block with a success boolean value and an NSError object