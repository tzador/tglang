//initializing a string
NSString *myString = @"This is a long and complex code snippet in Objective-C.";

//converting the string to uppercase
myString = [myString uppercaseString];

//creating an array of characters from the string
NSMutableArray *characterArray = [[NSMutableArray alloc] init];
for (int i = 0; i < [myString length]; i++) {
    NSString *character = [myString substringWithRange:NSMakeRange(i, 1)];
    [characterArray addObject:character];
}

//sorting the characters in ascending order
[characterArray sortUsingSelector:@selector(localizedCaseInsensitiveCompare:)];

//printing the sorted characters
for (NSString *character in characterArray) {
    NSLog(@"%@", character);
}

//creating a dictionary to count the occurrences of each character
NSMutableDictionary *characterDictionary = [[NSMutableDictionary alloc] init];
for (NSString *character in characterArray) {
    if ([characterDictionary objectForKey:character]) {
        int count = [[characterDictionary objectForKey:character] intValue];
        count++;
        [characterDictionary setValue:[NSNumber numberWithInt:count] forKey:character];
    } else {
        [characterDictionary setObject:[NSNumber numberWithInt:1] forKey:character];
    }
}
    
//printing the character dictionary
NSLog(@"%@", characterDictionary);

//creating a function that checks if a string is a palindrome
BOOL isPalindrome(NSString *string) {
    if ([string length] < 2) {
        return YES;
    } else {
        if ([[string substringToIndex:1] isEqualToString:[string substringFromIndex:[string length] - 1]]) {
            return isPalindrome([string substringWithRange:NSMakeRange(1, [string length] - 2)]);
        } else {
            return NO;
        }
    }
}

//calling the function to check if our string is a palindrome
BOOL palindrome = isPalindrome(myString);
NSLog(@"Is %@ a palindrome? %d", myString, palindrome);