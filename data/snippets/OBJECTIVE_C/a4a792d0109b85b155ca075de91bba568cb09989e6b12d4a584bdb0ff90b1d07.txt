/*!
 * @abstract This class is used to represent a graph data structure.
 * @discussion It contains methods to add and remove nodes and edges, as well as perform graph traversals.
 * @version 1.0
 */

// Defining a class named "Graph" in Objective-C
@interface Graph : NSObject

// Defining properties for the graph
@property (nonatomic, strong) NSMutableDictionary *nodes; // Stores the nodes in the graph
@property (nonatomic, strong) NSMutableDictionary *adjacencyList; // Stores the edges in the graph
@property (nonatomic, assign) NSInteger count; // Stores the number of nodes in the graph

/*!
 * @abstract Adds a node to the graph.
 * @param node The node to be added.
 */
- (void)addNode:(id)node;

/*!
 * @abstract Creates a connection (edge) between two nodes in the graph.
 * @param node1 The first node to be connected.
 * @param node2 The second node to be connected.
 */
- (void)addEdgeFromNode:(id)node1 toNode:(id)node2;

/*!
 * @abstract Performs a depth-first search traversal of the graph.
 * @param startNode The starting node for the traversal.
 * @return An array containing the nodes in the order they were visited.
 */
- (NSArray *)depthFirstSearchFromNode:(id)startNode;

/*!
 * @abstract Performs a breadth-first search traversal of the graph.
 * @param startNode The starting node for the traversal.
 * @return An array containing the nodes in the order they were visited.
 */
- (NSArray *)breadthFirstSearchFromNode:(id)startNode;

@end

@implementation Graph

// Initializing the graph
- (id)init {
    if (self = [super init]) {
        self.nodes = [NSMutableDictionary dictionary];
        self.adjacencyList = [NSMutableDictionary dictionary];
        self.count = 0;
    }
    return self;
}

// Method to add a node to the graph
- (void)addNode:(id)node {
    // Check if the node already exists in the graph
    if (![self.nodes objectForKey:node]) {
        // Add the node to the nodes dictionary
        [self.nodes setObject:node forKey:node];
        // Create an empty array for the edges of the new node
        [self.adjacencyList setObject:[NSMutableArray array] forKey:node];
        // Increase the count of nodes
        self.count++;
    }
}

// Method to create an edge between two nodes in the graph
- (void)addEdgeFromNode:(id)node1 toNode:(id)node2 {
    // Check if both nodes exist in the graph
    if ([self.nodes objectForKey:node1] && [self.nodes objectForKey:node2]) {
        // Add the edge to the adjacency list for each node
        [[self.adjacencyList objectForKey:node1] addObject:node2];
        [[self.adjacencyList objectForKey:node2] addObject:node1];
    }
}

// Method to perform a depth-first search traversal of the graph
- (NSArray *)depthFirstSearchFromNode:(id)startNode {
    // Create an array to store the visited nodes
    NSMutableArray *visited = [NSMutableArray array];
    // Create a stack to keep track of nodes to visit
    NSMutableArray *stack = [NSMutableArray arrayWithObject:startNode];
    // While there are still nodes to visit
    while ([stack count] > 0) {
        // Pop the last node from the stack
        id currentNode = [stack lastObject];
        [stack removeLastObject];
        // If the node has not already been visited
        if (![visited containsObject:currentNode]) {
            // Add the node to the visited array
            [visited addObject:currentNode];
            // Add any unvisited neighbors to the stack
            for (id neighbor in [self.adjacencyList objectForKey:currentNode]) {
                if (![visited containsObject:neighbor]) {
                    [stack addObject:neighbor];
                }
            }
        }
    }
    // Return the visited nodes in the order they were visited
    return [visited copy];
}

// Method to perform a breadth-first search traversal of the graph
- (NSArray *)breadthFirstSearchFromNode:(id)startNode {
    // Create an array to store the visited nodes
    NSMutableArray *visited = [NSMutableArray array];
    // Create a queue to keep track of nodes to visit
    NSMutableArray *queue = [NSMutableArray arrayWithObject:startNode];
    // While there are still nodes to visit
    while ([queue count] > 0) {
        // Dequeue the first node from the queue
        id currentNode = [queue objectAtIndex:0];
        [queue removeObjectAtIndex:0];
        // If the node has not already been visited
        if (![visited containsObject:currentNode]) {
            // Add the node to the visited array
            [visited addObject:currentNode];
            // Add any unvisited neighbors to the queue
            for (id neighbor in [self.adjacencyList objectForKey:currentNode]) {
                if (![visited containsObject:neighbor]) {
                    [queue addObject:neighbor];
                }
            }
        }
    }
    // Return the visited nodes in the order they were visited
    return [visited copy];
}

@end