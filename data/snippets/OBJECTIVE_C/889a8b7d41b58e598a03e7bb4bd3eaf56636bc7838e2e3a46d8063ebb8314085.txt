#import <Foundation/Foundation.h> //Imports the Foundation framework

@protocol Animal <NSObject> //Defines a protocol called Animal that inherits from NSObject

@property (nonatomic, strong) NSString *species; //Defines a property called species of type NSString

- (void)speak; //Defines a method called speak with no return type and no parameters

@optional //Specifies that the following methods are optional for classes conforming to the protocol

- (void)eatFood:(NSString *)food; //Defines a method called eatFood with no return type and a parameter of type NSString

@end //End of the protocol declaration

@interface Dog : NSObject <Animal> //Defines a class called Dog that inherits from NSObject and conforms to the Animal protocol

@property (nonatomic, strong) NSString *name; //Defines a property called name of type NSString

- (instancetype)initWithName:(NSString *)name; //Defines an initializer method called initWithName with a return type of 'instancetype' and a parameter of type NSString

@end //End of the interface declaration

@implementation Dog //Start of the implementation section for the Dog class

- (instancetype)initWithName:(NSString *)name //Implementation of the initWithName method
{
    self = [super init]; //Calls the superclass's initializer
    
    if (self) { //Checks if the superclass's initializer was successful
        
        self.name = name; //Sets the name property to the value passed in as a parameter
        
        self.species = @"Canis lupus familiaris"; //Sets the species property to a default value
        
    }
    
    return self; //Returns the initialized Dog object
}

- (void)speak //Implementation of the speak method
{
    NSLog(@"Woof woof, my name is %@!", self.name); //Prints a message with the dog's name
}

- (void)eatFood:(NSString *)food //Implementation of the eatFood method
{
    NSLog(@"%@ is eating %@", self.name, food); //Prints a message indicating what the dog is eating
}

@end //End of the implementation section for the Dog class

int main(int argc, const char * argv[]) //Main function for the program
{
    @autoreleasepool { //Start of an autorelease pool to manage memory
        
        Dog *fido = [[Dog alloc] initWithName:@"Fido"]; //Creates a new Dog object with the name "Fido"
        
        [fido speak]; //Calls the speak method on the fido object
        
        [fido eatFood:@"bone"]; //Calls the eatFood method on the fido object, passing in "bone" as the food parameter
        
    }
    
    return 0; //Indicates successful completion of the program
}