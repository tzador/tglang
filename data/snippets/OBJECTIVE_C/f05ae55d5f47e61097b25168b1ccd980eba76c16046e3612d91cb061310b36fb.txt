/**
 * This is a complex code snippet in Objective-C
 * It is a custom class that implements a linked list data structure
 */
@interface LinkedList : NSObject // Declare the class

@property (nonatomic, strong) Node *head; // Declare a property to store the head node of the linked list

/**
 * Method to check if the linked list is empty
 * Returns a boolean value (YES if the list is empty, NO otherwise)
 */
- (BOOL)isEmpty;

/**
 * Method to add a new node to the end of the linked list
 * Takes in a value as the new node's data
 */
- (void)addNodeAtEnd:(int)value;

/**
 * Method to insert a new node at a specific index in the linked list
 * Takes in a value as the new node's data and an integer index
 */
- (void)insertNode:(int)value atIndex:(int)index;

/**
 * Method to remove the first node in the linked list
 * Returns the removed node's data
 */
- (int)removeFirstNode;

/**
 * Method to remove the last node in the linked list
 * Returns the removed node's data
 */
- (int)removeLastNode;

/**
 * Method to remove a node at a specific index in the linked list
 * Takes in an integer index
 * Returns the removed node's data
 */
- (int)removeNodeAtIndex:(int)index;
 
@end

@implementation LinkedList

- (BOOL)isEmpty {
    return self.head == nil;
}

- (void)addNodeAtEnd:(int)value {
    // Create a new node with the given value
    Node *newNode = [[Node alloc] init]; 
    newNode.data = value;
    
    // If the list is empty, set the new node as the head
    if ([self isEmpty]) { 
        self.head = newNode;
    } else {
        // Traverse to the end of the list
        Node *currentNode = self.head;
        while (currentNode.nextNode != nil) {
            currentNode = currentNode.nextNode;
        }
        
        // Add the new node at the end
        currentNode.nextNode = newNode;
    }
}

- (void)insertNode:(int)value atIndex:(int)index {
    // Create a new node with the given value
    Node *newNode = [[Node alloc] init]; 
    newNode.data = value;
    
    // Insert at the beginning if the index is 0
    if (index == 0) {
        newNode.nextNode = self.head;
        self.head = newNode;
    } else {
        // Traverse to the node at the given index
        Node *currentIndex = self.head;
        for (int i = 0; i < index - 1; i++) {
            currentIndex = currentIndex.nextNode;
        }
        
        // Insert the new node at the given index
        Node *nextNode = currentIndex.nextNode;
        currentIndex.nextNode = newNode;
        newNode.nextNode = nextNode;
    }
}

- (int)removeFirstNode {
    // Check if list is empty
    if ([self isEmpty]) { 
        NSLog(@"Error - Cannot remove from an empty list");
        return 0;
    }
    
    // Get the data of the first node
    int removedData = self.head.data;
    
    // Set the head to the next node
    self.head = self.head.nextNode;
    
    // Return the removed node's data
    return removedData;
}

- (int)removeLastNode {
    // Check if list is empty
    if ([self isEmpty]) { 
        NSLog(@"Error - Cannot remove from an empty list");
        return 0;
    }
    
    // Traverse to the second to last node
    Node *currentNode = self.head;
    while (currentNode.nextNode.nextNode != nil) { 
        currentNode = currentNode.nextNode;
    }
    
    // Get the data of the last node
    int removedData = currentNode.nextNode.data;
    
    // Set the second to last node as the last node
    currentNode.nextNode = nil;
    
    // Return the removed node's data
    return removedData;
}

- (int)removeNodeAtIndex:(int)index {
    // Check if list is empty
    if ([self isEmpty]) { 
        NSLog(@"Error - Cannot remove from an empty list");
        return 0;
    }
    
    // Remove the first node if the index is 0
    if (index == 0) {
        return [self removeFirstNode];
    } else {
        // Traverse to the node at the given index
        Node *currentIndex = self.head;
        for (int i = 0; i < index - 1; i++) {
            currentIndex = currentIndex.nextNode;
            
            // Check if index is out of bounds
            if (currentIndex == nil) {
                NSLog(@"Error - Index out of bounds");
                return 0;
            }
        }
        
        // Get the data of the node at the given index
        int removedData = currentIndex.nextNode.data;
        
        // Point the previous node's next node to the next node of the removed node
        currentIndex.nextNode = currentIndex.nextNode.nextNode;
        
        // Return the removed node's data
        return removedData;
    }
}

@end

/**
 * Node class to represent a single node in the linked list
 */
@interface Node : NSObject

@property (nonatomic, assign) int data; // Data stored in the node
@property (nonatomic, strong) Node *nextNode; // Pointer to the next node in the linked list

@end

@implementation Node

@end

// Example usage:

// Create a new linked list
LinkedList *list = [[LinkedList alloc] init];

// Add nodes to the list
[list addNodeAtEnd:5];
[list addNodeAtEnd:10];
[list addNodeAtEnd:15];
[list addNodeAtEnd:20]; // Current list: 5 -> 10 -> 15 -> 20

// Insert a node at a specific index
[list insertNode:12 atIndex:2]; // Current list: 5 -> 10 -> 12 -> 15 -> 20

// Remove the first and last nodes
[list removeFirstNode]; // Removed node with data 5, current list: 10 -> 12 -> 15 -> 20
[list removeLastNode]; // Removed node with data 20, current list: 10 -> 12 -> 15

// Remove a node at a specific index
[list removeNodeAtIndex:1]; // Removed node with data 12, current list: 10 -> 15