// MARK: - Import Frameworks and Libraries
#import <Foundation/Foundation.h> // Import the Foundation framework
#import "MyCustomClass.h" // Import a custom class

int main(void) {
    // MARK: - Initialize Variables
    int num1 = 10;
    int num2 = 5;
    float pi = 3.14159;
    NSString *str = @"Objective-C is cool!"; // Initialize a NSString object

    // MARK: - Printing
    printf("Welcome to my Objective-C code snippet!\n"); // Print a welcome message
    printf("%d + %d = %d\n", num1, num2, num1 + num2); // Print the sum of num1 and num2
    printf("The value of pi is %f\n", pi); // Print the value of pi
    printf("%s\n", [str UTF8String]); // Print the string using UTF8 encoding

    // MARK: - Conditional Statements
    if(num1 > num2) { // If num1 is greater than num2
        printf("num1 is greater than num2.\n"); // Print a message
    }
    else if(num1 < num2) { // If num1 is less than num2
        printf("num1 is less than num2.\n"); // Print a message
    }
    else { // If num1 is equal to num2
        printf("num1 is equal to num2.\n"); // Print a message
    }

    // MARK: - Loops
    for(int i = 0; i < num1; i++) { // For loop to print numbers from 0 to num1
        printf("%d ", i); // Print the current value of i
    }
    printf("\n");
    int j = 0;
    while(j < num1) { // While loop to print numbers from 0 to num1
        printf("%d ", j); // Print the current value of j
        j++;
    }
    printf("\n");

    // MARK: - Custom Class
    MyCustomClass *custom = [[MyCustomClass alloc] initWithName:@"John" andAge:25]; // Initialize an instance of MyCustomClass
    [custom printInfo]; // Call the printInfo method of custom

    // MARK: - Memory Management
    [custom release]; // Release the memory allocated for custom

    return 0;
}

// MARK: - Custom Class Implementation
@implementation MyCustomClass {
    // MARK: - Variables
    NSString *_name;
    int _age;
}

// MARK: - Initializers
// Initialize with name and age
- (instancetype)initWithName:(NSString *)name andAge:(int)age {
    self = [super init]; // Call the superclass' init method
    if(self) {
        // Set the variables
        _name = name;
        _age = age;
    }
    return self;
}

// MARK: - Methods
// Print the name and age of the instance
- (void)printInfo {
    printf("%s is %d years old.\n", [_name UTF8String], _age);
}

// MARK: - Memory Management
- (void)dealloc {
    // Release the memory allocated for name
    [_name release];
    [super dealloc]; // Call the superclass' dealloc method
}
@end