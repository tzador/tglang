// This is a complex code snippet in Objective-C 
// that generates a sorted array using the quicksort algorithm 

// Function to swap two elements in an array 
void swap(int arr[], int low, int high) 
{ 
    int temp = arr[low]; 
    arr[low] = arr[high]; 
    arr[high] = temp; 
} 

// Function to partition the array and return the pivot index 
int partition(int arr[], int low, int high) 
{ 
    // Choosing the last element as the pivot 
    int pivot = arr[high]; 
    
    // Index of smaller element 
    int i = (low - 1);  
    
    // Loop through the array elements 
    for (int j = low; j <= high - 1; j++) 
    { 
        // If current element is smaller than or equal to pivot 
        if (arr[j] <= pivot) 
        { 
            // Increment the smaller element index 
            i++; 
              
            // Swap the current element with the smaller element 
            swap(arr, i, j); 
        } 
    } 
    
    // Swap the pivot element with the element at the current smaller index 
    swap(arr, i + 1, high); 
    
    // Return the current smaller index 
    return (i + 1); 
} 

// Function to implement quicksort algorithm using recursion 
void quicksort(int arr[], int low, int high) 
{ 
    // Check if the array is empty or only has one element 
    if (low < high) 
    { 
        // Partition the array and get the pivot index 
        int pivot_index = partition(arr, low, high); 
        
        // Sort the elements before and after the pivot index recursively 
        quicksort(arr, low, pivot_index - 1); 
        quicksort(arr, pivot_index + 1, high); 
    } 
} 

// Driver code 
int main() 
{ 
    // Declare and initialize an array 
    int arr[] = {5, 2, 1, 4, 3}; 
    
    // Calculate the size of the array 
    int n = sizeof(arr) / sizeof(arr[0]); 
    
    // Print the original array 
    printf("Original array:"); 
    for (int i = 0; i < n; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
    
    // Call the quicksort function 
    quicksort(arr, 0, n - 1); 
    
    // Print the sorted array 
    printf("Sorted array:"); 
    for (int i = 0; i < n; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
    
    return 0; 
}