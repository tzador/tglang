#import <UIKit/UIKit.h>
// Import the UIKit framework to access UI elements

@interface ViewController : UIViewController <UITextFieldDelegate>
// Create a custom ViewController class that inherits from the UIViewController class and conforms to the UITextFieldDelegate protocol
@property (nonatomic, strong) UILabel *titleLabel; // Create a property for a UILabel
@property (nonatomic, strong) UITextField *textField; // Create a property for a UITextField
@property (nonatomic, strong) UIButton *button; // Create a property for a UIButton

@end // End the interface

@implementation ViewController // Implementation section

- (void)viewDidLoad {
    [super viewDidLoad]; // Call the super class's viewDidLoad method
    self.view.backgroundColor = [UIColor whiteColor]; // Set the background color of the view to white
    
    self.titleLabel = [[UILabel alloc] initWithFrame:CGRectZero]; // Initialize the titleLabel with a CGRectZero frame
    self.titleLabel.translatesAutoresizingMaskIntoConstraints = NO; // Set the translatesAutoresizingMaskIntoConstraints property to NO to enable auto layout
    self.titleLabel.text = @"Enter your name:"; // Set the text for the label
    self.titleLabel.textColor = [UIColor blackColor]; // Set the text color to black
    self.titleLabel.font = [UIFont systemFontOfSize:20]; // Set the font to system font with a size of 20
    [self.view addSubview:self.titleLabel]; // Add the label as a subview of the view
    
    self.textField = [[UITextField alloc] initWithFrame:CGRectZero]; // Initialize the textField with a CGRectZero frame
    self.textField.translatesAutoresizingMaskIntoConstraints = NO; // Set the translatesAutoresizingMaskIntoConstraints property to NO
    self.textField.placeholder = @"Name"; // Set a placeholder text
    self.textField.borderStyle = UITextBorderStyleRoundedRect; // Set the border style to rounded rect
    self.textField.delegate = self; // Set the delegate to self to handle text field events
    [self.view addSubview:self.textField]; // Add the text field as a subview of the view
    
    self.button = [UIButton buttonWithType:UIButtonTypeCustom]; // Initialize the button as a custom button
    self.button.translatesAutoresizingMaskIntoConstraints = NO; // Set the translatesAutoresizingMaskIntoConstraints property to NO
    [self.button setTitle:@"Submit" forState:UIControlStateNormal]; // Set the title for the button
    [self.button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal]; // Set the title color to white
    [self.button setBackgroundColor:[UIColor blueColor]]; // Set the background color to blue
    [self.button addTarget:self action:@selector(submitButtonPressed) forControlEvents:UIControlEventTouchUpInside]; // Add an action for when the button is pressed
    [self.view addSubview:self.button]; // Add the button as a subview of the view
    
    // Set up auto layout constraints for the UI elements
    NSDictionary *views = @{@"titleLabel": self.titleLabel, @"textField": self.textField, @"button": self.button};
    // Create a dictionary to map the views to their respective names for easier referencing
    NSDictionary *metrics = @{@"padding": @20}; // Create a dictionary to store metrics such as spacing
    // Add constraints for the label
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-padding-[titleLabel]-padding-|" options:0 metrics:metrics views:views]]; // Align the label with a 20pt padding on both sides
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-padding-[titleLabel]" options:0 metrics:metrics views:views]]; // Vertically align the label with a 20pt padding at the top
    // Add constraints for the text field
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-padding-[textField]-padding-|" options:0 metrics:metrics views:views]]; // Align the text field with a 20pt padding on both sides
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:[titleLabel]-padding-[textField]" options:0 metrics:metrics views:views]]; // Vertically align the text field below the label with a 20pt padding in between
    // Add constraints for the button
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-padding-[button]-padding-|" options:0 metrics:metrics views:views]]; // Align the button with a 20pt padding on both sides
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:[textField]-padding-[button]" options:0 metrics:metrics views:views]]; // Vertically align the button below the text field with a 20pt padding in between
}

- (void)submitButtonPressed {
    NSLog(@"Button pressed!"); // Print to the console when the button is pressed
    if ([self.textField.text length] > 0){ // Check if the text field has any text entered
        [self.titleLabel removeFromSuperview]; // Remove the label from the view
        [self.textField removeFromSuperview]; // Remove the text field from the view
        [self.button removeFromSuperview]; // Remove the button from the view
        NSString *name = self.textField.text; // Get the text from the text field
        NSLog(@"Hello, %@!", name); // Print a greeting message with the entered name
    }
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder]; // Dismiss the keyboard when the return key is pressed
    return YES;
}

@end // End the implementation