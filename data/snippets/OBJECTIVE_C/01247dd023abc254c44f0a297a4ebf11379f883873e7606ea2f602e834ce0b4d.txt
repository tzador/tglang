// This code snippet is a simple implementation of a binary search algorithm in Objective-C

#import <Foundation/Foundation.h> // Import the Foundation framework for Objective-C

// Function to perform binary search
int binarySearch(int array[], int target, int low, int high)
{
    while (low <= high) { // Repeat the search until low is less than or equal to high
        int mid = low + (high - low) / 2; // Find the middle element of the array

        if (target == array[mid]) // Check if the target is equal to the middle element
            return mid; // Return the index of the target if found

        if (target < array[mid]) // If target is less than the middle element
            high = mid - 1; // Ignore the right half of the array
        else // If target is greater than the middle element
            low = mid + 1; // Ignore the left half of the array
    }

    return -1; // Return -1 if target is not found
}

int main()
{
    @autoreleasepool {
        // Initialize an array of integers in sorted order
        int array[] = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50};

        int target = 30; // Target element to search for
        int size = sizeof(array) / sizeof(array[0]); // Get the size of the array

        int result = binarySearch(array, target, 0, size - 1); // Perform binary search

        // Check if result is -1, which means target was not found in the array
        if (result == -1)
            printf("Target not found");
        else
            printf("Target found at index %d", result);
    }

    return 0;
}

/* OUTPUT:
Target found at index 5
*/