/// Function that checks if a given string is a palindrome
/// @param str NSString object that contains the string to be checked
/// @return Boolean value, true if the string is a palindrome, false if it is not
- (BOOL)isPalindrome:(NSString *)str {
  // Create mutable copy of string
  NSMutableString *mutableString = [str mutableCopy];

  // Remove all punctuation and whitespace
  NSCharacterSet *whitespaceAndPunctuationSet = [NSCharacterSet whitespaceAndPunctuationCharacterSet];
  NSRange range = [mutableString rangeOfCharacterFromSet:whitespaceAndPunctuationSet];
  while (range.location != NSNotFound) {
    [mutableString deleteCharactersInRange:range];
    range = [mutableString rangeOfCharacterFromSet:whitespaceAndPunctuationSet];
  }

  // Convert string to lowercase
  NSString *lowercaseString = [mutableString lowercaseString];

  // Check if string is equal to its reverse
  NSString *reversedString = [self reverseString:lowercaseString];
  if ([lowercaseString isEqualToString:reversedString]) {
    return YES;
  }
  return NO;
}

/// Function that reverses a given string
/// @param str NSString object that contains the string to be reversed
/// @return NSString object that contains the reversed string
- (NSString *)reverseString:(NSString *)str {
  NSMutableString *reversedString = [NSMutableString string];
  NSInteger charIndex = [str length];
  while (charIndex > 0) {
    charIndex--;
    NSRange subStrRange = NSMakeRange(charIndex, 1);
    [reversedString appendString:[str substringWithRange:subStrRange]];
  }
  return reversedString;
}