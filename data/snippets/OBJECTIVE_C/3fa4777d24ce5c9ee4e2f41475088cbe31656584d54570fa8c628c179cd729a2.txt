//  Triangle.h
//  CustomShapes
//
//  Created by John Smith on 1/1/20.
//

#import <Foundation/Foundation.h>

// Forward declare Point class
@class Point;

NS_ASSUME_NONNULL_BEGIN

@interface Triangle : NSObject

@property (nonatomic, strong) Point *pointA;
@property (nonatomic, strong) Point *pointB;
@property (nonatomic, strong) Point *pointC;

/**
 Initializes a new Triangle object with specified points

 @param pointA The first point of the triangle
 @param pointB The second point of the triangle
 @param pointC The third point of the triangle
 @return An initialized Triangle instance
 */
- (instancetype)initWithPointA:(Point *)pointA pointB:(Point *)pointB pointC:(Point *)pointC;

/**
 Calculates and returns the perimeter of the triangle

 @return The perimeter of the triangle
 */
- (double)calculatePerimeter;

/**
 Calculates and returns the area of the triangle

 @return The area of the triangle
 */
- (double)calculateArea;

@end

NS_ASSUME_NONNULL_END

//  Triangle.m
//  CustomShapes
//
//  Created by John Smith on 1/1/20.
//

#import "Triangle.h"
#import "Point.h"

@implementation Triangle

- (instancetype)initWithPointA:(Point *)pointA pointB:(Point *)pointB pointC:(Point *)pointC {
    self = [super init];
    if (self) {
        self.pointA = pointA;
        self.pointB = pointB;
        self.pointC = pointC;
    }
    return self;
}

- (double)calculatePerimeter {
    // Calculate length of sides using distance formula
    double sideAB = sqrt(pow(self.pointB.x - self.pointA.x, 2) + pow(self.pointB.y - self.pointA.y, 2));
    double sideBC = sqrt(pow(self.pointC.x - self.pointB.x, 2) + pow(self.pointC.y - self.pointB.y, 2));
    double sideCA = sqrt(pow(self.pointA.x - self.pointC.x, 2) + pow(self.pointA.y - self.pointC.y, 2));
    
    return sideAB + sideBC + sideCA;
}

- (double)calculateArea {
    // Calculate area using Heron's formula
    double sideAB = sqrt(pow(self.pointB.x - self.pointA.x, 2) + pow(self.pointB.y - self.pointA.y, 2));
    double sideBC = sqrt(pow(self.pointC.x - self.pointB.x, 2) + pow(self.pointC.y - self.pointB.y, 2));
    double sideCA = sqrt(pow(self.pointA.x - self.pointC.x, 2) + pow(self.pointA.y - self.pointC.y, 2));
    
    double s = (sideAB + sideBC + sideCA)/2;
    
    return sqrt(s * (s - sideAB) * (s - sideBC) * (s - sideCA));
}

@end