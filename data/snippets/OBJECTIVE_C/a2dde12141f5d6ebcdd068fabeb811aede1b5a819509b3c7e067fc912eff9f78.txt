// This is a long, complex code snippet in Objective-C

// Header file
#import <Foundation/Foundation.h> // Import the Foundation framework

// Create a class called "Person"
@interface Person : NSObject

// Interface section
@property (nonatomic, strong) NSString *name; // Declare a property called "name" of type NSString
@property (nonatomic, assign) NSInteger age; // Declare a property called "age" of type NSInteger

// Declare a custom initializer method
- (instancetype)initWithName:(NSString *)name andAge:(NSInteger)age;

// Declare a method called "greet" that takes in a parameter of type NSString
- (void)greet:(NSString *)name;

// End of interface section
@end

// Implementation file
@implementation Person // Implementation section

// Implement the custom initializer method
- (instancetype)initWithName:(NSString *)name andAge:(NSInteger)age {
    self = [super init]; // Call the designated initializer of the superclass
    if (self) {
        self.name = name; // Set the value of "name" property to the passed in value
        self.age = age; // Set the value of "age" property to the passed in value
    }
    return self; // Return self object
}

// Implement the "greet" method
- (void)greet:(NSString *)name {
    NSLog(@"Hello %@, my name is %@ and I am %ld years old.", name, self.name, (long)self.age); // Print a personalized greeting
}

// End of implementation section
@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Create an instance of Person called "john" using the custom initializer method
        Person *john = [[Person alloc] initWithName:@"John" andAge:25];
        [john greet:@"Samantha"]; // Call the "greet" method on the "john" instance
        
        // Create an array of Person objects
        NSArray *people = @[john, [[Person alloc] initWithName:@"Sarah" andAge:30]];
        
        // Use fast enumeration to print the names of each person in the array
        for (Person *person in people) {
            NSLog(@"%@", person.name); // Print the name of the current person
        }
    }
    return 0;
}