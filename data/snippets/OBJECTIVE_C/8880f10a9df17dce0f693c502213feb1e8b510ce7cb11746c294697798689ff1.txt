//This code snippet implements a LinkedList data structure in Objective-C
#import <Foundation/Foundation.h>

//Creating a Node class to represent each element in the LinkedList
@interface Node : NSObject

@property (nonatomic) id data; //Data to be stored in the node
@property (nonatomic) Node *next; //Pointer to the next node in the LinkedList

@end

@implementation Node

@end

//Creating a LinkedList class to manage and manipulate the Nodes
@interface LinkedList : NSObject

@property (nonatomic) Node *head; //Pointer to the head of the LinkedList

//Method to add a new element at the front of the LinkedList
-(void)addFront:(id)element;

//Method to add a new element at the end of the LinkedList
-(void)addBack:(id)element;

//Method to remove an element from the LinkedList at a given index
-(void)removeAtIndex:(int)index;

//Method to remove the first occurrence of a given element in the LinkedList
-(void)removeElement:(id)element;

//Method to print all the elements in the LinkedList
-(void)printLinkedList;

@end

@implementation LinkedList

//Implementation of the addFront method
-(void)addFront:(id)element {
    Node *newNode = [[Node alloc] init]; //Creating a new node
    newNode.data = element; //Assigning the data to the node
    newNode.next = self.head; //Pointing the next pointer to the previous head
    self.head = newNode; //Updating the head pointer to point to the new node
}

//Implementation of the addBack method
-(void)addBack:(id)element {
    Node *newNode = [[Node alloc] init]; //Creating a new node
    newNode.data = element; //Assigning the data to the node
    
    //If the LinkedList is empty, set the head pointer to the new node and return
    if (self.head == nil) {
        self.head = newNode;
        return;
    }
    
    //Iterating through the LinkedList to find the last node
    Node *temp = self.head;
    while (temp.next != nil) {
        temp = temp.next;
    }
    
    //Pointing the next pointer of the last node to the new node
    temp.next = newNode;
}

//Implementation of the removeAtIndex method
-(void)removeAtIndex:(int)index {
    
    //If the LinkedList is empty, return
    if (self.head == nil) {
        return;
    }
    
    //If the given index is 0, remove the head node and update the head pointer to point to the next node
    if (index == 0) {
        self.head = self.head.next;
    }
    
    //Iterating through the LinkedList to find the node at the given index
    Node *temp = self.head;
    int i = 0;
    while (temp.next != nil && i < index-1) {
        temp = temp.next;
        i++;
    }
    
    //If the given index is out of bounds, return
    if (i != index-1) {
        return;
    }
    
    //If the next node of the node at the given index is null, that means the given index is at the end of the LinkedList
    if (temp.next == nil) {
        return;
    }
    
    //Updating the next pointer of the node at the given index to point to the next of the next node
    temp.next = temp.next.next;
}

//Implementation of the removeElement method
-(void)removeElement:(id)element {
    
    //If the LinkedList is empty, return
    if (self.head == nil) {
        return;
    }
    
    //If the head node contains the element, remove the head node and update the head pointer to point to the next node
    if ([self.head.data isEqual:element]) {
        self.head = self.head.next;
    }
    
    //Iterating through the LinkedList to find the node that contains the given element
    Node *temp = self.head;
    while (temp.next != nil) {
        
        //If the next node contains the element, update the next pointer of the current node to point to the next of the next node
        if ([temp.next.data isEqual:element]) {
            temp.next = temp.next.next;
            return;
        }
        
        temp = temp.next;
    }
}

//Implementation of the printLinkedList method
-(void)printLinkedList {
    
    //If the LinkedList is empty, return
    if (self.head == nil) {
        return;
    }
    
    //Iterating through the LinkedList and printing the data of each node
    Node *temp = self.head;
    while (temp != nil) {
        NSLog(@"%@", temp.data);
        temp = temp.next;
    }
}

@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        
        //Creating a LinkedList object
        LinkedList *list = [[LinkedList alloc] init];
        
        //Adding elements to the front of the LinkedList
        [list addFront:@1];
        [list addFront:@2];
        [list addFront:@3];
        
        //Adding elements to the back of the LinkedList
        [list addBack:@4];
        [list addBack:@5];
        [list addBack:@6];
        
        //Printing the LinkedList
        [list printLinkedList]; //Output: 3, 2, 1, 4, 5, 6
        
        //Removing the element at index 2
        [list removeAtIndex:2];
        [list printLinkedList]; //Output: 3, 2, 4, 5, 6
        
        //Removing the element @4
        [list removeElement:@4];
        [list printLinkedList]; //Output: 3, 2, 5, 6
        
        return 0;
    }
}