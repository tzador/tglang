#define kDefaultMaxValue 100
//The above line creates a constant variable with a value of 100 

//Helper function to add two numbers
int add(int num1, int num2) {
    //Returns the sum of the two numbers
    return num1 + num2;
}

//Class declaration
@interface Calculator : NSObject

//Instance variables
@property int max; //Max value for calculations
@property int currentValue; //Current value of calculator

//Initializers
- (instancetype)init; //Default initializer
- (instancetype)initWithMax:(int)maxValue; //Initializer with max value parameter

//Method to reset the calculator
- (void)reset;

//Method to add a number to the currentValue
- (void)addNumber:(int)num;

//Method to perform addition with a given number
- (void)additionWithNumber:(int)num;

//Method to perform subtraction with a given number
- (void)subtractionWithNumber:(int)num;

//Method to perform multiplication with a given number
- (void)multiplicationWithNumber:(int)num;

//Method to perform division with a given number
- (void)divisionWithNumber:(int)num;

@end

//Class implementation
@implementation Calculator

//Initializer methods implementation
- (instancetype)init {
    self = [super init]; //Calling super class initializer
    
    if (self) {
        _max = kDefaultMaxValue; //Setting max value to default constant value
        _currentValue = 0; //Setting current value to 0
    }
    
    return self;
}

- (instancetype)initWithMax:(int)maxValue {
    self = [super init]; //Calling super class initializer
    
    if (self) {
        _max = maxValue; //Setting max value to passed in value
        _currentValue = 0; //Setting current value to 0
    }
    
    return self;
}

//Calculator methods implementation
- (void)reset {
    self.currentValue = 0; //Setting current value to 0
}

- (void)addNumber:(int)num {
    self.currentValue = add(self.currentValue, num); //Calling helper function to add the number to the current value
}

- (void)additionWithNumber:(int)num {
    if (self.currentValue + num > self.max) { //Checking if result will exceed max value
        self.currentValue = self.max; //Setting current value to max value if result exceeds max
    } else {
        self.currentValue += num; //Otherwise, adding the number to the current value
    }
}

- (void)subtractionWithNumber:(int)num {
    if (self.currentValue - num < 0) { //Checking if result will be negative
        self.currentValue = 0; //Setting current value to 0 if result would be negative
    } else {
        self.currentValue -= num; //Otherwise, subtracting the number from the current value
    }
}

- (void)multiplicationWithNumber:(int)num {
    if (self.currentValue * num > self.max || self.currentValue * num < 0) { //Checking for overflow or underflow in multiplication
        self.currentValue = self.max; //Setting current value to max if overflow/underflow occurs
    } else {
        self.currentValue *= num; //Otherwise, multiplying the current value by the number
    }
}

- (void)divisionWithNumber:(int)num {
    if (num == 0) { //Checking for division by 0
        NSLog(@"Error: Cannot divide by 0"); //Printing error message
    } else {
        self.currentValue /= num; //Otherwise, dividing the current value by the number
    }
}

@end