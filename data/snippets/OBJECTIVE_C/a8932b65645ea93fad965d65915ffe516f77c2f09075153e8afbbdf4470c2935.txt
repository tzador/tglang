// Objective-C code for implementing a binary search tree

// Define the Tree Node class
@interface TreeNode : NSObject

// Properties for left and right child nodes
@property (nonatomic, retain) TreeNode *leftChild;
@property (nonatomic, retain) TreeNode *rightChild;

// Properties for node data and parent node
@property (nonatomic, retain) id data;
@property (nonatomic, weak) TreeNode *parentNode;

// Method for inserting a new node into the tree
- (void)insertData:(id)data;

// Method for finding a specific node in the tree
- (TreeNode *)findNodeWithData:(id)data;

// Method for printing the tree in a specific order (in-order, pre-order, or post-order)
- (void)printTreeInOrder;
- (void)printTreePreOrder;
- (void)printTreePostOrder;

@end

// Implementation of the Tree Node class
@implementation TreeNode

// Method for inserting a new node into the tree
- (void)insertData:(id)data {
    // Check if the new data already exists in the tree
    if (self.data != nil && [self.data isEqual:data]) {
        return;
    }
    
    // Check if the new data is less than the current node's data
    if ([data compare:self.data] == NSOrderedAscending) {
        // If there is no left child, create a new node and set it as the left child
        if (self.leftChild == nil) {
            self.leftChild = [[TreeNode alloc] init];
            self.leftChild.parentNode = self;
        }
        
        // Recursively call the insert method on the left child
        [self.leftChild insertData:data];
    } else {
        // If there is no right child, create a new node and set it as the right child
        if (self.rightChild == nil) {
            self.rightChild = [[TreeNode alloc] init];
            self.rightChild.parentNode = self;
        }
        
        // Recursively call the insert method on the right child
        [self.rightChild insertData:data];
    }
}

// Method for finding a specific node in the tree
- (TreeNode *)findNodeWithData:(id)data {
    // Check if the current node's data matches the specified data
    if (self.data != nil && [self.data isEqual:data]) {
        return self;
    }
    
    // Check if the specified data is less than the current node's data
    if ([data compare:self.data] == NSOrderedAscending) {
        // If there is a left child, recursively call the find method on the left child
        if (self.leftChild != nil) {
            return [self.leftChild findNodeWithData:data];
        } else {
            // If there is no left child, the specified data does not exist in the tree
            return nil;
        }
    } else {
        // If there is a right child, recursively call the find method on the right child
        if (self.rightChild != nil) {
            return [self.rightChild findNodeWithData:data];
        } else {
            // If there is no right child, the specified data does not exist in the tree
            return nil;
        }
    }
}

// Method for printing the tree in a specific order (in-order, pre-order, or post-order)
- (void)printTreeInOrder {
    // Traverse the tree in-order (left subtree, current node, right subtree)
    if (self.leftChild != nil) {
        [self.leftChild printTreeInOrder];
    }
    NSLog(@"%@", self.data);
    if (self.rightChild != nil) {
        [self.rightChild printTreeInOrder];
    }
}

- (void)printTreePreOrder {
    // Traverse the tree in pre-order (current node, left subtree, right subtree)
    NSLog(@"%@", self.data);
    if (self.leftChild != nil) {
        [self.leftChild printTreePreOrder];
    }
    if (self.rightChild != nil) {
        [self.rightChild printTreePreOrder];
    }
}

- (void)printTreePostOrder {
    // Traverse the tree in post-order (left subtree, right subtree, current node)
    if (self.leftChild != nil) {
        [self.leftChild printTreePostOrder];
    }
    if (self.rightChild != nil) {
        [self.rightChild printTreePostOrder];
    }
    NSLog(@"%@", self.data);
}

@end