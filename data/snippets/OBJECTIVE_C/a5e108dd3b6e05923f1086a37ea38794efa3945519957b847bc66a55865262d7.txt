// Declare and initialize an array of strings
NSArray *stringArray = @[@"Hello", @"world", @"this", @"is", @"an", @"array", @"of", @"strings"];

// Create a mutable dictionary
NSMutableDictionary *mutableDict = [[NSMutableDictionary alloc] init];

// Add key-value pairs to the dictionary
[mutableDict setObject:@"value1" forKey:@"key1"];
[mutableDict setObject:@(10) forKey:@"key2"];
[mutableDict setObject:stringArray forKey:@"key3"];

// Declare and initialize a for loop to iterate through the dictionary
for (NSString *key in mutableDict) {
    // Print the key and value for each key-value pair
    NSLog(@"Key: %@", key);
    NSLog(@"Value: %@", [mutableDict objectForKey:key]);
}

// Declare and initialize a typedef for a block
typedef void (^CompletionBlock)(BOOL success, NSString *message);

// Declare a function that takes in a block as a parameter
- (void)doSomethingWithCompletion:(CompletionBlock)completionBlock {
    // Perform some task
    BOOL success = YES;
    NSString *message = @"Task completed successfully!";
    
    // Call the completion block with the results
    completionBlock(success, message);
}

// Call the function and pass in a block as the parameter
[self doSomethingWithCompletion:^(BOOL success, NSString *message) {
    if (success) {
        NSLog(@"Task was successful with message: %@", message);
    } else {
        NSLog(@"Task failed with message: %@", message);
    }
}];