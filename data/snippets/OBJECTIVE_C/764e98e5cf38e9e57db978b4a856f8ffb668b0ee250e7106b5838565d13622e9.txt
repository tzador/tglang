#pragma mark - Helper macros

#define MY_MAX(a, b) ((a) > (b) ? (a) : (b))
#define MY_MIN(a, b) ((a) < (b) ? (a) : (b))

#pragma mark - Custom classes

@interface Person : NSObject

@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSNumber *age;

- (instancetype)initWithName:(NSString *)name andAge:(NSNumber *)age;

@end

@implementation Person

- (instancetype)initWithName:(NSString *)name andAge:(NSNumber *)age
{
    self = [super init];
    if (self) {
        _name = name;
        _age = age;
    }
    return self;
}

@end

#pragma mark - Main function

int main(int argc, const char * argv[]) {
    
    // Create a mutable array of Person objects
    NSMutableArray<Person *> *people = [[NSMutableArray alloc] init];
    
    // Add new Person objects to the array
    [people addObject:[[Person alloc] initWithName:@"John" andAge:@30]];
    [people addObject:[[Person alloc] initWithName:@"Mark" andAge:@25]];
    [people addObject:[[Person alloc] initWithName:@"Sarah" andAge:@35]];
    
    // Sort the array based on age, using custom comparison block
    NSArray<Person *> *sortedPeople = [people sortedArrayUsingComparator:^NSComparisonResult(Person *person1, Person *person2) {
        // Compare person1's age to person2's age
        return [person1.age compare:person2.age];
    }];
    
    // Print the sorted array
    for (Person *person in sortedPeople) {
        NSLog(@"%@, %@", person.name, person.age);
    }
    
    return 0;
}