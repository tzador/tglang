@interface Car : NSObject

// Declaring properties
@property (nonatomic, strong) NSString *make;
@property (nonatomic, strong) NSString *model;
@property (nonatomic, strong) NSNumber *year;
@property (nonatomic, assign) BOOL isElectric;

// Declaring initializers
- (instancetype)initWithMake:(NSString *)make model:(NSString *)model year:(NSNumber *)year isElectric:(BOOL)isElectric;
- (instancetype)init;

// Declaring instance methods
- (void)drive;
- (void)honk;
- (void)changeTires;

// Declaring class method
+ (NSString *)carBrand;

@end

@implementation Car

// Initializing instance variables
- (instancetype)initWithMake:(NSString *)make model:(NSString *)model year:(NSNumber *)year isElectric:(BOOL)isElectric {
    self = [super init];
    if (self) {
        _make = make;
        _model = model;
        _year = year;
        _isElectric = isElectric;
    }
    return self;
}

// Initializing with default values
- (instancetype)init {
    return [self initWithMake:@"Toyota" model:@"Corolla" year:@(2019) isElectric:NO];
}

// Instance methods implementation
- (void)drive {
    NSLog(@"Driving the %@ %@", self.make, self.model);
}

- (void)honk {
    NSLog(@"Beep beep!");
}

- (void)changeTires {
    NSLog(@"Changing the tires on the %@ %@", self.make, self.model);
}

// Class method implementation
+ (NSString *)carBrand {
    return @"Toyota";
}

@end

// Creating instance of Car class
Car *myCar = [[Car alloc] initWithMake:@"Ford" model:@"Mustang" year:@(2018) isElectric:NO];

// Using instance methods
[myCar drive];
[myCar honk];
[myCar changeTires];

// Calling class method
NSString *brand = [Car carBrand];

// Output: Driving the Ford Mustang
// Output: Beep beep!
// Output: Changing the tires on the Ford Mustang