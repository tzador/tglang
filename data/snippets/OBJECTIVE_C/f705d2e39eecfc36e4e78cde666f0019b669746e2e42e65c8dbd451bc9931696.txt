#import <Foundation/Foundation.h> // imports the Foundation framework

@interface Person: NSObject // creates a class Person which inherits from NSObject

// class properties
@property (nonatomic, strong) NSString *name; // creates a strong property of string type named 'name'
@property (nonatomic, assign) NSInteger age; // creates an assign property of integer type named 'age'

// class methods
- (instancetype)initWithName:(NSString *)name age:(NSInteger)age; // creates a designated initializer for the class
+ (void)sayHello; // creates a class method that prints 'Hello'

// instance methods
- (void)introduceMyself; // creates an instance method that prints 'Hello, my name is [name] and I am [age] years old.'

@end

@implementation Person // implementation of the Person class

// implementation of the instance methods
- (instancetype)initWithName:(NSString *)name age:(NSInteger)age { // implementation of the designated initializer
    self = [super init]; // calls the designated initializer of the superclass
    if (self) { // checks if initialization was successful
        self.name = name; // sets the 'name' property to the passed in value
        self.age = age; // sets the 'age' property to the passed in value
    }
    return self; // returns the initialized instance
}

- (void)introduceMyself { // implementation of the instance method
    NSLog(@"Hello, my name is %@ and I am %ld years old.", self.name, (long)self.age); // prints out the introduction using the properties
}

// implementation of the class methods
+ (void)sayHello { // implementation of the class method
    NSLog(@"Hello!"); // prints out 'Hello!'
}

@end

int main(int argc, const char * argv[]) { // main function
    @autoreleasepool { // creates an autorelease pool
        // creates two instances of Person
        Person *person1 = [[Person alloc] initWithName:@"John" age:25]; // uses the designated initializer to initialize the instance
        Person *person2 = [Person new]; // uses the default initializer to initialize the instance
        
        // sets the properties of the second instance using dot notation
        person2.name = @"Jane";
        person2.age = 30;
        
        [Person sayHello]; // calls the class method 'sayHello'
        [person1 introduceMyself]; // calls the instance method 'introduceMyself'
        [person2 introduceMyself];
    }
    return 0; // returns 0 to indicate successful execution
}