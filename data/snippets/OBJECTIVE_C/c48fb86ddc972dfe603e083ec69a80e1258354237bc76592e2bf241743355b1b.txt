// Implementation of the Binary Search Tree data structure
// Defining the Node class    
@interface Node : NSObject

// Properties
@property (nonatomic, assign) int data;
@property (nonatomic, strong) Node *leftChild;
@property (nonatomic, strong) Node *rightChild;

// Initialization method
- (instancetype)initWithData:(int)data;

// Insert method
- (void)insertData:(int)data;

// Search method
- (Node *)searchData:(int)data;

// Delete method
- (Node *)deleteData:(int)data;

@end

// Implementation of the Node class
@implementation Node

// Initialization method
- (instancetype)initWithData:(int)data {
    self = [super init];
    if (self) {
        self.data = data;
        self.leftChild = nil;
        self.rightChild = nil;
    }
    return self;
}

// Insert method
- (void)insertData:(int)data {
    // Check if data is smaller than current node's data
    if (data < self.data) {
        // If left child is nil, create a new node and set it as the left child
        if (!self.leftChild) {
            Node *newNode = [[Node alloc] initWithData:data];
            self.leftChild = newNode;
        }
        // If left child already exists, recursively call insert method on the left child
        else {
            [self.leftChild insertData:data];
        }
    }
    // If data is larger than current node's data
    else if (data > self.data) {
        // If right child is nil, create a new node and set it as the right child
        if (!self.rightChild) {
            Node *newNode = [[Node alloc] initWithData:data];
            self.rightChild = newNode;
        }
        // If right child already exists, recursively call insert method on the right child
        else {
            [self.rightChild insertData:data];
        }
    }
}

// Search method
- (Node *)searchData:(int)data {
    // If current node's data is equal to search data, return current node
    if (self.data == data) {
        return self;
    }
    // If search data is smaller than current node's data, recursively call search method on left child
    else if (data < self.data) {
        return [self.leftChild searchData:data];
    }
    // If search data is larger than current node's data, recursively call search method on right child
    else {
        return [self.rightChild searchData:data];
    }
}

// Delete method
- (Node *)deleteData:(int)data {
    // First search for the node to be deleted
    Node *nodeToDelete = [self searchData:data];
    
    // If node is found
    if (nodeToDelete) {
        // Case 1: Node has no children
        if (!nodeToDelete.leftChild && !nodeToDelete.rightChild) {
            // Simply remove the node from its parent
            [nodeToDelete removeFromParent];
        }
        // Case 2: Node has one child
        else if (!nodeToDelete.leftChild || !nodeToDelete.rightChild) {
            // Set child node as the new child of its parent
            [nodeToDelete setChildAsParent];
        }
        // Case 3: Node has two children
        else {
            // Find the successor of the node to be deleted
            Node *successor = [nodeToDelete findSuccessor];
            // Replace node's data with successor's data
            nodeToDelete.data = successor.data;
            // Delete the successor node
            [successor deleteData:successor.data];
        }
    }
    return nodeToDelete;
}

@end