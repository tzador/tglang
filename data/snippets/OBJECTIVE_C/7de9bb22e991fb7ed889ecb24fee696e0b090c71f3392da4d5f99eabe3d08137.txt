// Define a @protocol named MyProtocol
@protocol MyProtocol

// Declare a required class method
// This method takes in two parameters, an NSString and an integer
// It returns an NSArray
+ (NSArray *)requiredMethodWithString:(NSString *)string andInt:(NSInteger)integer;

// Declare an optional instance method
// This method takes in an id (for polymorphism) and returns an NSDictionary
- (NSDictionary *)optionalMethodWithId:(id)object;

@end

// Create a NSObject subclass and conform to MyProtocol
@interface MyClass : NSObject <MyProtocol>

// Declare properties
@property (nonatomic, strong) NSString *name;
@property (nonatomic, assign) NSInteger age;

// Define a static constant string variable
// This variable is accessible globally within the program
static NSString *const myConstant = @"This is a constant string";

@end

@implementation MyClass

// Implement the required class method
+ (NSArray *)requiredMethodWithString:(NSString *)string andInt:(NSInteger)integer
{
  // Create an NSMutableArray object
  NSMutableArray *array = [NSMutableArray array];

  // Repeat the addition of the string to the array based on the integer value
  for (int i = 0; i < integer; i++) {
    [array addObject:string];
  }

  // Return the array
  return array;
}

// Implement the optional instance method
- (NSDictionary *)optionalMethodWithId:(id)object
{
  // Check if the object is of type NSString
  if ([object isKindOfClass:[NSString class]]) {
    // Create a mutable dictionary
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];

    // Add the object as a value for the key "string"
    [dictionary setObject:object forKey:@"string"];

    // Return the dictionary
    return dictionary;
  }

  // If the object is not of type NSString, return nil
  return nil;
}

@end

// Instantiate a MyClass object
MyClass *myObject = [[MyClass alloc] init];

// Set the properties of the object
myObject.name = @"John Doe";
myObject.age = 25;

// Call the required class method and store the returned array
NSArray *array = [MyClass requiredMethodWithString:@"Hello World" andInt:3];

// Print the values in the array
for (NSString *string in array) {
  NSLog(@"%@", string);
}

// Call the optional instance method and store the returned dictionary
NSDictionary *dictionary = [myObject optionalMethodWithId:myObject.name];

// Print the value associated with the key "string"
NSLog(@"%@", [dictionary objectForKey:@"string"]);

// Access the global constant variable
NSLog(@"%@", myConstant);