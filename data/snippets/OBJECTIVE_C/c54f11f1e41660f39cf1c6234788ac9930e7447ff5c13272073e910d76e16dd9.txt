// This is a comment in Objective-C
// This code snippet demonstrates a complex class that implements a protocol

#import <Foundation/Foundation.h> // Import the Foundation framework

/// A protocol to represent a person
@protocol PersonProtocol <NSObject>

@required
@property (nonatomic, strong) NSString *name; // The person's name

@optional
- (void)eat; // A method to represent eating
- (void)work; // A method to represent working
- (void)play; // A method to represent playing

@end

/// A class to represent a person
@interface Person : NSObject <PersonProtocol> // Conform to the PersonProtocol

@property (nonatomic, strong) NSString *name; // The person's name

- (instancetype)initWithName:(NSString *)name; // Initializer method

@end

@implementation Person

- (instancetype)initWithName:(NSString *)name {
    self = [super init];
    if (self) {
        self.name = name; // Set the person's name
    }
    return self;
}

// Implement the required methods of the PersonProtocol
- (void)eat {
    NSLog(@"%@ is eating", self.name);
}

- (void)work {
    NSLog(@"%@ is working", self.name);
}

- (void)play {
    NSLog(@"%@ is playing", self.name);
}

@end

int main(int argc, char * argv[]) {
    @autoreleasepool {
        // Create a Person object
        Person *person = [[Person alloc] initWithName:@"John"];
        
        // Call the methods defined in the PersonProtocol
        [person eat];
        [person work];
        [person play];
    }
    
    return 0;
}

/**
 Output:
 
 John is eating
 John is working
 John is playing
 */