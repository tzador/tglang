//Initialize a custom object
MyObject *object = [[MyObject alloc] init];

//Set properties of the object
object.propertyOne = @"ValueOne";
object.propertyTwo = 2;

//Call a method on the object
[object doSomethingWithParameter:@"Parameter"];

//Create a mutable array
NSMutableArray *array = [[NSMutableArray alloc] init];

//Add objects to the array
[array addObject:@"Object1"];
[array addObject:@"Object2"];

//Iterate through the array using a for loop
for (int i = 0; i < array.count; i++) {
    NSLog(@"Object at index %i: %@", i, [array objectAtIndex:i]);
}

//Define a custom protocol
@protocol MyProtocol
- (void)performAction;
@end

//Implement the protocol in a class
@interface MyClass : NSObject <MyProtocol>
@end

@implementation MyClass
- (void)performAction {
    NSLog(@"Action performed!");
}
@end

//Create an instance of the class
MyClass *myClass = [[MyClass alloc] init];

//Call the method defined in the protocol
[myClass performAction];

//Use a block to perform a task asynchronously
dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_async(queue, ^{
    NSLog(@"Doing something in a background thread...");
    //Perform a long task here
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"Task completed!");
    });
});