// This is a header file with the implementation of a doubly linked list data structure using Objective-C

#import <Foundation/Foundation.h>

// Defining the Node class with properties for data, previous node and next node
@interface Node : NSObject
@property int data;
@property Node *previous;
@property Node *next;
@end

@implementation Node // Implementation of the Node class
@end

// Defining the DoublyLinkedList class with properties for head and tail nodes
@interface DoublyLinkedList : NSObject
@property Node *head;
@property Node *tail;
@end

@implementation DoublyLinkedList // Implementation of the DoublyLinkedList class

- (void)addAtHead:(int)data { // Method to add a new node at the head of the list
    Node *newNode = [[Node alloc]init]; // Creating a new node
    newNode.data = data; // Setting its data to the given value
    newNode.next = self.head; // Pointing the next pointer of the new node to the head of the list
    newNode.previous = nil; // Since we are adding at the head, the previous pointer will be nil
    if (self.head != nil) { // Checking if the list is not empty
        self.head.previous = newNode; // Setting the previous pointer of the current head to the new node
        self.head = newNode; // Making the new node as the head
    } else { // If the list is empty, the new node will be both the head and tail
        self.head = newNode;
        self.tail = newNode;
    }
}

- (void)addAtTail:(int)data { // Method to add a new node at the tail of the list
    Node *newNode = [[Node alloc]init]; // Creating a new node
    newNode.data = data; // Setting its data to the given value
    newNode.next = nil; // Since we are adding at the tail, the next pointer will be nil
    if (self.tail != nil) { // Checking if the list is not empty
        self.tail.next = newNode; // Setting the next pointer of the current tail to the new node
        newNode.previous = self.tail; // Setting the previous pointer of the new node to the current tail
        self.tail = newNode; // Making the new node as the tail
    } else { // If the list is empty, the new node will be both the head and tail
        self.head = newNode;
        self.tail = newNode;
    }
}

- (void)insertAtIndex:(int)data index:(int)index { // Method to insert a new node at a given index
    if (index == 0) { // If the index is 0, new node will be added at the head
        [self addAtHead:data];
        return;
    }
    int count = 1; // Variable to keep track of the current index
    Node *current = self.head; // Starting from the head node
    while (current.next != 0) { // Looping till last node is reached
        if (count == index) { // If current index is equal to given index, new node will be inserted here
            Node *newNode = [[Node alloc]init]; // Creating a new node
            newNode.data = data; // Setting its data to the given value
            newNode.next = current.next; // Setting the next pointer of the new node to the current node's next
            newNode.previous = current; // Setting the previous pointer of the new node to the current node
            current.next.previous = newNode; // Setting the previous pointer of the current node's next to the new node
            current.next = newNode; // Setting the next pointer of the current node to the new node
            return;
        }
        current = current.next; // Moving on to the next node
        count++; // Incrementing the index
    }
    if (index == count) { // If the loop reaches the last node and current index is equal to given index,
        [self addAtTail:data]; // new node will be added at the tail
    }
}

- (void)removeAtIndex:(int)index { // Method to remove a node at a given index
    int count = 0; // Variable to keep track of current index
    Node *current = self.head; // Starting from the head node
    while (current != nil) { // Looping till the end of the list is reached
        if (count == index) { // If current index is equal to given index, current node will be removed
            if (current.previous != nil) { // Checking if the previous node exists
                current.previous.next = current.next; // Deleting the current node by adjusting the next pointer of previous node
            } else { // If there is no previous node, it means the current node is the head
                self.head = current.next; // Making the next node as the head
            }
            if (current.next != nil) { // Checking if the next node exists
                current.next.previous = current.previous; // Deleting the current node by adjusting the previous pointer of next node
            } else { // If there is no next node, it means the current node is the tail
                self.tail = current.previous; // Making the previous node as the tail
            }
            current = nil; // Removing the current node
            return;
        }
        current = current.next; // Moving on to the next node
        count++; // Incrementing the index
    }
}

- (void)printList { // Method to print the list
    printf("Printing list:\n");
    Node *current = self.head; // Starting from the head node
    while (current != nil) { // Looping till the end of list is reached
        printf("%d ", current.data); // Printing the data of the current node
        current = current.next; // Moving on to the next node
    }
    printf("\n");
}

@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        DoublyLinkedList *list = [[DoublyLinkedList alloc] init]; // Creating a new list
        
        // Adding nodes at the head and tail
        [list addAtHead:10];
        [list addAtTail:20];
        
        // Printing the list
        [list printList];
        
        // Inserting a new node at index 1
        [list insertAtIndex:15 index:1];
        
        // Printing the modified list
        [list printList];
        
        // Removing a node at index 2
        [list removeAtIndex:2];
        
        // Printing the final list
        [list printList];
        
        // Output:
        // Printing list:
        // 10 20
        // Printing list:
        // 10 15 20
        // Printing list:
        // 10 15
    }
    return 0;
}