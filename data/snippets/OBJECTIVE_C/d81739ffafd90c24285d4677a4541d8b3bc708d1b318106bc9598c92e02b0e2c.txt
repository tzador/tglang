// Declare variables
int a = 5;
int b = 10;
float c = 0.5;

// Create a function that multiplies two numbers and returns the result
-(int)multiplyNumbers:(int)num1 withNumber:(int)num2 {
    return num1 * num2;
}

// Call the function and assign the result to a new variable
int multiplyResult = [self multiplyNumbers:a withNumber:b];

// Create a for loop that iterates through numbers from 1 to 10
for (int i = 1; i <= 10; i++) {
    // Print the current number
    NSLog(@"Current Number: %d", i);
    
    // Check if the number is divisible by 2 and print a message
    if (i % 2 == 0) {
        NSLog(@"%d is divisible by 2", i);
    }
}

// Create a class called Animal
@interface Animal : NSObject

// Declare properties for the name, age, and sound of the animal
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) NSNumber *age;
@property (nonatomic, strong) NSString *sound;

// Create a method that prints the animal's name and sound
-(void)printNameAndSound {
    NSLog(@"%@ says %@", self.name, self.sound);
}

@end

// Create an instance of the Animal class and assign values to its properties
Animal *dog = [[Animal alloc] init];
dog.name = @"Max";
dog.age = @5;
dog.sound = @"Woof";

// Call the method to print the animal's name and sound
[dog printNameAndSound];

// Create an array of numbers
NSArray *numbers = @[@1, @2, @3, @4, @5];

// Create a dictionary with the numbers as keys and their squares as values
NSMutableDictionary *squares = [[NSMutableDictionary alloc] init];
for (NSNumber *number in numbers) {
    [squares setObject:@([number intValue] * [number intValue]) forKey:number];
}

// Use a block to sort the dictionary by keys in descending order
NSArray *sortedKeys = [squares keysSortedByValueUsingComparator:^NSComparisonResult(id obj1, id obj2) {
    return [obj2 compare:obj1];
}];

// Print the sorted keys and their corresponding values
for (NSNumber *key in sortedKeys) {
    NSLog(@"Key: %@, Value: %@", key, [squares objectForKey:key]);
}

// Create a protocol called Vehicle
@protocol Vehicle <NSObject>

// Declare two required methods for starting and stopping the vehicle
@required
-(void)start;
-(void)stop;

@end

// Create a class called Car that conforms to the Vehicle protocol
@interface Car : NSObject <Vehicle>

// Implement the required methods for starting and stopping a car
@implementation Car

-(void)start {
    NSLog(@"Starting the car...");
}

-(void)stop {
    NSLog(@"Stopping the car...");
}

@end

// Create an instance of the Car class and call the required methods
Car *myCar = [[Car alloc] init];
[myCar start];
[myCar stop];