//Implementation of a linked list data structure in Objective-C

//Definition of a node in the linked list
@interface LinkedListNode : NSObject
@property (nonatomic, strong) id data;
@property (nonatomic, strong) LinkedListNode *next;
@end

//Implementation of the node
@implementation LinkedListNode
@end

//Definition of the linked list
@interface LinkedList : NSObject
@property (nonatomic, strong) LinkedListNode *head;
@end

//Implementation of the linked list
@implementation LinkedList

//Method to insert a node at the beginning of the linked list
- (void)insertNodeAtHead:(id)data {
    if (self.head == nil) {
        self.head = [[LinkedListNode alloc] init];
        self.head.data = data;
    } else {
        LinkedListNode *newNode = [[LinkedListNode alloc] init];
        newNode.data = data;
        newNode.next = self.head;
        self.head = newNode;
    }
}

//Method to insert a node at the end of the linked list
- (void)insertNodeAtTail:(id)data {
    if (self.head == nil) {
        self.head = [[LinkedListNode alloc] init];
        self.head.data = data;
    } else {
        LinkedListNode *currentNode = self.head;
        while (currentNode.next != nil) {
            currentNode = currentNode.next;
        }
        
        LinkedListNode *newNode = [[LinkedListNode alloc] init];
        newNode.data = data;
        currentNode.next = newNode;
    }
}

//Method to delete a node from the linked list
- (void)deleteNode:(id)data {
    if (self.head == nil) {
        return;
    }
    
    //If the head node has the data to be deleted
    if ([self.head.data isEqual:data]) {
        self.head = self.head.next;
    } else {
        LinkedListNode *previousNode = self.head;
        LinkedListNode *currentNode = self.head.next;
        
        //Traverse through the list until the data is found or the end is reached
        while (currentNode != nil) {
            if ([currentNode.data isEqual:data]) {
                previousNode.next = currentNode.next;
                return;
            } else {
                previousNode = currentNode;
                currentNode = currentNode.next;
            }
        }
    }
}

//Method to check if the linked list contains a given data value
- (BOOL)contains:(id)data {
    if (self.head == nil) {
        return NO;
    }
    
    LinkedListNode *currentNode = self.head;
    while (currentNode != nil) {
        if ([currentNode.data isEqual:data]) {
            return YES;
        }
        currentNode = currentNode.next;
    }
    
    return NO;
}

@end

//Example usage
LinkedList *list = [[LinkedList alloc] init];
[list insertNodeAtHead:@5];
[list insertNodeAtTail:@10];
[list insertNodeAtTail:@15];
NSLog(@"Linked list contains 10? %d", [list contains:@10]); //Prints "Linked list contains 10? 1"

[list deleteNode:@10];
NSLog(@"Linked list contains 10? %d", [list contains:@10]); //Prints "Linked list contains 10? 0"