// Declare a Person class with properties for name, age, and occupation
@interface Person : NSObject

// Property for name (string)
@property (nonatomic, strong) NSString *name;

// Property for age (integer)
@property (nonatomic, assign) NSInteger age;

// Property for occupation (string)
@property (nonatomic, strong) NSString *occupation;

// Method for introducing the person with their name and occupation
- (void)introduceSelf {
    NSLog(@"Hi, my name is %@ and I am a %@.", self.name, self.occupation);
}

// Initialize method with name, age, and occupation parameters
- (instancetype)initWithName:(NSString *)name age:(NSInteger)age occupation:(NSString *)occupation {
    if (self = [super init]) {
        self.name = name;
        self.age = age;
        self.occupation = occupation;
    }
    return self;
}

@end

// Declare a subclass of Person called Employee with additional property for company
@interface Employee : Person

// Property for company (string)
@property (nonatomic, strong) NSString *company;

// Method for introducing the employee with their name, occupation, and company
- (void)introduceSelfAsEmployee {
    NSLog(@"Hi, my name is %@ and I work for %@ as a %@.", self.name, self.company, self.occupation);
}

// Initialize method with name, age, occupation, and company parameters
- (instancetype)initWithName:(NSString *)name age:(NSInteger)age occupation:(NSString *)occupation company:(NSString *)company {
    if (self = [super initWithName:name age:age occupation:occupation]) {
        self.company = company;
    }
    return self;
}

@end

// Create a Person object named "John" and introduce him using the introduceSelf method
Person *john = [[Person alloc] initWithName:@"John" age:25 occupation:@"Engineer"];
[john introduceSelf];

// Create an Employee object named "Jane" and introduce her using the introduceSelfAsEmployee method
Employee *jane = [[Employee alloc] initWithName:@"Jane" age:30 occupation:@"Designer" company:@"XYZ Corp."];
[jane introduceSelfAsEmployee];