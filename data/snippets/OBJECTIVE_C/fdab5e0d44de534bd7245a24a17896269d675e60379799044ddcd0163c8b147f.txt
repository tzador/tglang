@protocol WidgetDelegate <NSObject> // Defines a protocol named WidgetDelegate that inherits from NSObject class
@required                          // Indicates that these methods are required to be implemented by the conforming class
- (void) widgetDidTap;              // Required method: Notifies delegate when widget is tapped
@optional                          // Indicates that these methods are optional to be implemented by the conforming class
- (void) widgetDidRotate;           // Optional method: Notifies delegate when widget is rotated
- (void) widgetDidClose;            // Optional method: Notifies delegate when widget is closed
@end                               // Ends the protocol declaration 

@interface Widget : NSObject // Defines a class named Widget that inherits from NSObject class
@property (nonatomic, weak) id<WidgetDelegate> delegate; // Declares a weak property named delegate with type id (any object) that conforms to WidgetDelegate protocol
@property (nonatomic, strong) NSString *name; // Declares a strong property named name with type NSString
@property (nonatomic, assign) BOOL isActive; // Declares an assign property named isActive with type BOOL
- (instancetype) initWithName:(NSString *)name; // Constructor method: Initializes a Widget object with a given name
- (void) tapWidget; // Public method: Invokes widgetDidTap method on delegate object when widget is tapped
@end

@implementation Widget // Implementation of Widget class
- (instancetype) initWithName:(NSString *)name // Implementation of constructor method for Widget class
{
    self = [super init]; // Calls super class's (NSObject) initialize method
    if (self) { // Checks if self is not nil
        self.name = name; // Sets name property to given name
    }
    return self; // Returns initialized Widget object
}

- (void) tapWidget // Implementation of tapWidget method for Widget class
{
    if ([self.delegate respondsToSelector:@selector(widgetDidTap)]) { // Checks if delegate responds to widgetDidTap method
        [self.delegate widgetDidTap]; // Invokes widgetDidTap method on delegate object
    }
    
    self.isActive = YES; // Sets isActive property to true
}

- (void) rotateWidget // Implementation of rotateWidget method for Widget class
{
    if ([self.delegate respondsToSelector:@selector(widgetDidRotate)]) { // Checks if delegate responds to widgetDidRotate method
        [self.delegate widgetDidRotate]; // Invokes widgetDidRotate method on delegate object
    }
}

- (void) closeWidget // Implementation of closeWidget method for Widget class
{
    if ([self.delegate respondsToSelector:@selector(widgetDidClose)]) { // Checks if delegate responds to widgetDidClose method
        [self.delegate widgetDidClose]; // Invokes widgetDidClose method on delegate object
    }
    
    self.isActive = NO; // Sets isActive property to false
}

@end