// Simulate a deck of cards
#import <Foundation/Foundation.h>

// Define a Card class
@interface Card : NSObject
// Declare properties
@property (strong, nonatomic) NSString *suit;
@property (nonatomic) int rank;

// Declare methods
- (id)initWithSuit:(NSString *)suit rank:(int)rank;
- (NSString *)description;
- (BOOL)isEqual:(Card *)card;
@end

// Implement the Card class
@implementation Card

// Initialize method
- (id)initWithSuit:(NSString *)suit rank:(int)rank
{
    self = [super init];

    if (self) {
        self.suit = suit;
        self.rank = rank;
    }

    return self;
}

// Description method
- (NSString *)description
{
    // Use switch statement to convert rank int to corresponding string
    switch (self.rank) {
        case 1:
            return [NSString stringWithFormat:@"Ace of %@", self.suit];
            break;
        case 11:
            return [NSString stringWithFormat:@"Jack of %@", self.suit];
            break;
        case 12:
            return [NSString stringWithFormat:@"Queen of %@", self.suit];
            break;
        case 13:
            return [NSString stringWithFormat:@"King of %@", self.suit];
            break;
        default:
            return [NSString stringWithFormat:@"%d of %@", self.rank, self.suit];
            break;
    }
}

// Override isEqual method to compare two cards
- (BOOL)isEqual:(Card *)card
{
    if (card.rank == self.rank && [card.suit isEqualToString:self.suit])
        return YES;

    return NO;
}

@end

// Define a Deck class
@interface Deck : NSObject
// Declare properties
@property (strong, nonatomic) NSMutableArray *cards;

// Declare methods
- (void)addCard:(Card *)card;
- (Card *)dealCard;
@end

// Implement the Deck class
@implementation Deck

// Initialize method
- (id)init
{
    self = [super init];

    if (self) {
        // Initialize with an empty array
        self.cards = [[NSMutableArray alloc] init];
        // Iterate through suits and ranks to create 52 cards
        for (int i = 0; i < 4; i++) {
            for (int j = 1; j <= 13; j++) {
                // Create a Card object with suit and rank
                Card *card = [[Card alloc] initWithSuit:[self getSuits][i] rank:j];
                // Add card to the deck
                [self.cards addObject:card];
            }
        }
    }

    return self;
}

// Helper method to get an array of suits
- (NSArray *)getSuits
{
    NSArray *suits = @[@"Hearts", @"Diamonds", @"Spades", @"Clubs"];
    return suits;
}

// Method to add a card to the deck
- (void)addCard:(Card *)card
{
    [self.cards addObject:card];
}

// Method to deal a card from the deck
- (Card *)dealCard
{
    // Check if deck is not empty
    if (self.cards.count != 0) {
        // Get the top card
        Card *topCard = self.cards[0];
        // Remove the card from deck
        [self.cards removeObject:topCard];
        return topCard;
    } else {
        // Deck is empty, return nil
        return nil;
    }
}

@end

int main(int argc, char * argv[]) {
    @autoreleasepool {
        // Initialize a deck
        Deck *deck = [[Deck alloc] init];
        // Add a card to the deck
        Card *card = [[Card alloc] initWithSuit:@"Hearts" rank:3];
        [deck addCard:card];
        // Deal a card from the deck
        Card *dealtCard = [deck dealCard];
        // Check if the dealt card is the same as the one added
        if ([dealtCard isEqual:card]) {
            NSLog(@"Dealt card is equal to the added card");
        }
        // Print the description of the dealt card
        NSLog(@"%@", [dealtCard description]);
    }
    return 0;
}

// Output:
// Dealt card is equal to the added card
// 3 of Hearts