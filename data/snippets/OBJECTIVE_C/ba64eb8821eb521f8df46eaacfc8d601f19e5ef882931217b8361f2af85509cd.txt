// Implementation of a binary search tree

// Defining a class for the tree's node
@interface Node : NSObject

@property int value;
@property Node *left;
@property Node *right;

@end

@implementation Node

// Initializing a node with a given value
- (id)initWithValue:(int)value {
    self = [super init];
    
    if (self) {
        self.value = value;
        self.left = NULL;
        self.right = NULL;
    }
    
    return self;
}

@end

// Defining a class for the binary search tree
@interface BinarySearchTree : NSObject

@property Node *root; // The root node of the tree

- (void)insertIntoTree:(int)value;
- (void)deleteFromTree:(int)value;
- (void)traverseInOrder;
- (void)traversePreOrder;
- (void)traversePostOrder;

@end

@implementation BinarySearchTree

// Method to insert a new node into the tree
- (void)insertIntoTree:(int)value {
    
    // Creating a new node with the given value
    Node *newNode = [[Node alloc] initWithValue:value];
    
    // Checking if the tree is empty
    if (self.root == NULL) {
        self.root = newNode;
    }
    else {
        Node *currentNode = self.root;
        
        // Looping through the tree to find the correct position for the new node
        while (1) {
            if (value < currentNode.value) {
                // If the value is less than the current node's value, go to the left child
                if (currentNode.left == NULL) {
                    // If the left child is empty, insert the new node
                    currentNode.left = newNode;
                    break;
                }
                else {
                    // If the left child is not empty, move to that child and continue looping
                    currentNode = currentNode.left;
                }
            }
            else {
                // If the value is greater than or equal to the current node's value, go to the right child
                if (currentNode.right == NULL) {
                    // If the right child is empty, insert the new node
                    currentNode.right = newNode;
                    break;
                }
                else {
                    // If the right child is not empty, move to that child and continue looping
                    currentNode = currentNode.right;
                }
            }
        }
    }
}

// Method to delete a node from the tree
- (void)deleteFromTree:(int)value {
    
    // Initializing pointers to track the current and previous nodes while traversing the tree
    Node *currentNode = self.root;
    Node *previousNode = currentNode;
    
    // Looping through the tree to find the node to be deleted
    while (currentNode != NULL) {
        // If the value is found, break from the loop
        if (currentNode.value == value) {
            break;
        }
        else if (value < currentNode.value) {
            // If the value is less than the current node's value, go to the left child
            previousNode = currentNode;
            currentNode = currentNode.left;
        }
        else {
            // If the value is greater than the current node's value, go to the right child
            previousNode = currentNode;
            currentNode = currentNode.right;
        }
    }
    
    // If the node is not found, the tree remains unchanged
    if (currentNode == NULL) {
        printf("The node to be deleted does not exist in the tree.\n");
        return;
    }
    
    // If the node to be deleted is the root
    if (currentNode == self.root) {
        // If the root has no right child, the left child becomes the new root
        if (currentNode.right == NULL) {
            self.root = currentNode.left;
        }
        else {
            // If the root has a right child, the left child becomes the new root and the right child becomes a subtree of the new root
            self.root = currentNode.left;
            Node *rightChild = currentNode.right;
            Node *rightChildCurrent = self.root;
            
            // Looping through the right subtree to find the correct position for the right child
            while (rightChildCurrent.right != NULL) {
                rightChildCurrent = rightChildCurrent.right;
            }
            // Inserting the right child into the right subtree
            rightChildCurrent.right = rightChild;
        }
    }
    else if (currentNode == previousNode.left) {
        // If the node to be deleted is the left child of its parent
        if (currentNode.right == NULL) {
            // If the left child has no right child, the left child's left child becomes the new left child of the parent
            previousNode.left = currentNode.left;
        }
        else {
            // If the left child has a right child, the left child's right child becomes the new left child of the parent, and the left child's left child becomes a subtree of the new left child
            previousNode.left = currentNode.right;
            Node *leftChild = currentNode.left;
            Node *leftChildCurrent = previousNode.left;
            
            // Looping through the left subtree to find the correct position for the left child
            while (leftChildCurrent.left != NULL) {
                leftChildCurrent = leftChildCurrent.left;
            }
            // Inserting the left child into the left subtree
            leftChildCurrent.left = leftChild;
        }
    }
    else {
        // If the node to be deleted is the right child of its parent
        if (currentNode.right == NULL) {
            // If the right child has no right child, the right child's left child becomes the new right child of the parent
            previousNode.right = currentNode.left;
        }
        else {
            // If the right child has a right child, the right child's right child becomes the new right child of the parent, and the right child's left child becomes a subtree of the new right child
            previousNode.right = currentNode.right;
            Node *rightChild = currentNode.left;
            Node *rightChildCurrent = previousNode.right;
            
            // Looping through the right subtree to find the correct position for the right child
            while (rightChildCurrent.right != NULL) {
                rightChildCurrent = rightChildCurrent.right;
            }
            // Inserting the right child into the right subtree
            rightChildCurrent.right = rightChild;
        }
    }
    
    // Freeing the memory allocated for the deleted node
    currentNode = NULL;
}

// Method to traverse the tree in-order (left - root - right)
- (void)traverseInOrder {
    if (self.root == NULL) {
        printf("The tree is empty.\n");
        return;
    }
    
    printf("The tree in-order: ");
    
    // Creating an empty stack to keep track of the nodes
    NSMutableArray *stack = [[NSMutableArray alloc] init];
    
    Node *currentNode = self.root;
    
    // Looping until the stack is empty and the current node is NULL
    while ([stack count] > 0 || currentNode != NULL) {
        // Pushing all the left children onto the stack until reaching a NULL node
        if (currentNode != NULL) {
            [stack addObject:currentNode];
            currentNode = currentNode.left;
        }
        else {
            // If the stack is not empty, popping the top node and printing its value
            currentNode = [stack lastObject];
            [stack removeLastObject];
            printf("%d ", currentNode.value);
            
            // Moving to the right child of the popped node
            currentNode = currentNode.right;
        }
    }
    
    printf("\n");
}

// Method to traverse the tree pre-order (root - left - right)
- (void)traversePreOrder {
    if (self.root == NULL) {
        printf("The tree is empty.\n");
        return;
    }
    
    printf("The tree pre-order: ");
    
    // Creating an empty stack to keep track of the nodes
    NSMutableArray *stack = [[NSMutableArray alloc] init];
    
    // Pushing the root node onto the stack
    [stack addObject:self.root];
    
    // Looping until the stack is empty
    while ([stack count] > 0) {
        // Popping the top node and printing its value
        Node *currentNode = [stack lastObject];
        [stack removeLastObject];
        printf("%d ", currentNode.value);
        
        // Pushing the right child onto the stack first (since stacks are LIFO)
        if (currentNode.right != NULL) {
            [stack addObject:currentNode.right];
        }
        
        // Pushing the left child onto the stack next (since it will be popped last)
        if (currentNode.left != NULL) {
            [stack addObject:currentNode.left];
        }
    }
    
    printf("\n");
}

// Method to traverse the tree post-order (left - right - root)
- (void)traversePostOrder {
    if (self.root == NULL) {
        printf("The tree is empty.\n");
        return;
    }
    
    printf("The tree post-order: ");
    
    // Creating an empty stack to keep track of the nodes
    NSMutableArray *stack = [[NSMutableArray alloc] init];
    
    Node *currentNode = self.root;
    Node *previousNode = NULL; // To check if the current node is the parent node of the previous node (will determine the order of visiting nodes)
    
    // Looping until the stack is empty and the current node is NULL
    while ([stack count] > 0 || currentNode != NULL) {
        // Pushing all the left children onto the stack until reaching a NULL node
        if (currentNode != NULL) {
            [stack addObject:currentNode];
            currentNode = currentNode.left;
        }
        else {
            // If the stack is not empty, storing the top node in a temporary variable
            Node *tempNode = [stack lastObject];
            
            // If the temporary node's right child is NULL (or the previous node was its parent), popping and printing the top node
            if (tempNode.right == NULL || tempNode.right == previousNode) {
                [stack removeLastObject];
                printf("%d ", tempNode.value);
                previousNode = tempNode;
            }
            // If the temporary node's right child is not NULL and the previous node was not its parent, moving to the right child
            else {
                currentNode = tempNode.right;
            }
        }
    }
    
    printf("\n");
}

@end

// Creating an instance of the binary search tree
BinarySearchTree *tree = [[BinarySearchTree alloc] init];

// Inserting nodes into the tree
[tree insertIntoTree:6];
[tree insertIntoTree:4];
[tree insertIntoTree:2];
[tree insertIntoTree:1];
[tree insertIntoTree:5];
[tree insertIntoTree:9];
[tree insertIntoTree:7];
[tree insertIntoTree:8];
[tree insertIntoTree:10];

// Traversing the tree in different orders
[tree traverseInOrder];
[tree traversePreOrder];
[tree traversePostOrder];

// Deleting nodes from the tree
[tree deleteFromTree:5];
[tree deleteFromTree:9];

// Traversing the tree to show the changes after deletion
[tree traverseInOrder];