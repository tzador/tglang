// Objective-C code snippet for sorting an array of numbers using selection sort

#import <Foundation/Foundation.h>

@interface SelectionSort : NSObject

// method to perform selection sort on an array of numbers
- (NSArray *)sortArray:(NSArray *)numbers {
    
    NSUInteger count = [numbers count]; // finding the number of elements in the array
    
    // loop through the array
    for (NSUInteger i = 0; i < count - 1; i++) {
        
        NSUInteger minIndex = i; // keep track of the index of the current minimum element
        
        // loop through the remaining elements
        for (NSUInteger j = i + 1; j < count; j++) {
            
            // if the current element is smaller than the current minimum, update the minIndex
            if (numbers[j] < numbers[minIndex]) {
                minIndex = j;
            }
        }
        
        // swap the current minimum element with the first element in the remaining unsorted array
        [numbers exchangeObjectAtIndex:i withObjectAtIndex:minIndex];
    }
    
    return numbers; // return the sorted array
}

@end

int main(int argc, const char * argv[]) {
    
    @autoreleasepool {
        
        SelectionSort *sorter = [[SelectionSort alloc] init]; // initialize the selection sort class
        
        NSArray *unsortedArray = @[@2, @6, @4, @1, @9, @3, @5, @8, @7]; // create an array of unsorted numbers
        
        // print the unsorted array
        NSLog(@"Unsorted array: %@", unsortedArray);
        
        NSArray *sortedArray = [sorter sortArray:unsortedArray]; // perform selection sort on the unsorted array
        
        // print the sorted array
        NSLog(@"Sorted array: %@", sortedArray);
    }
    return 0;
}

// Output:
// Unsorted array: (2, 6, 4, 1, 9, 3, 5, 8, 7)
// Sorted array: (1, 2, 3, 4, 5, 6, 7, 8, 9)