// Declaring a Custom Class with Inheritance

// Reusable interface for ShowVehicle
@protocol ShowVehicle

// Required methods for ShowVehicle interface
@required
// Method to show vehicle type
- (void)showVehicleType;
// Method to show vehicle brand
- (void)showVehicleBrand;
// Method to show vehicle color
- (void)showVehicleColor;
// Method to show vehicle price
- (void)showVehiclePrice;

@end

// Base class Vehicle
@interface Vehicle : NSObject <ShowVehicle>

// Initializing properties for Vehicle class
@property (nonatomic, strong) NSString *type;
@property (nonatomic, strong) NSString *brand;
@property (nonatomic, strong) NSString *color;
@property (nonatomic, assign) int price;

// Initializing constructor for Vehicle class
- (instancetype)initWithType:(NSString *)type brand:(NSString *)brand color:(NSString *)color price:(int)price;

@end

// Inheriting from Vehicle class to create a Car subclass
@interface Car : Vehicle

// Initializing properties for Car class
@property (nonatomic, strong) NSString *model;
@property (nonatomic, strong) NSString *engineType;

// Initializing constructor for Car class
- (instancetype)initWithType:(NSString *)type brand:(NSString *)brand color:(NSString *)color price:(int)price model:(NSString *)model engineType:(NSString *)engineType;

@end

// Implementation of required methods for ShowVehicle interface
@implementation Vehicle

// Method to show vehicle type
- (void)showVehicleType {
    NSLog(@"Type: %@", self.type);
}

// Method to show vehicle brand
- (void)showVehicleBrand {
    NSLog(@"Brand: %@", self.brand);
}

// Method to show vehicle color
- (void) showVehicleColor {
    NSLog(@"Color: %@", self.color);
}

// Method to show vehicle price
- (void)showVehiclePrice {
    NSLog(@"Price: $%d", self.price);
}

@end

// Implementation of Car subclass
@implementation Car

// Initializing constructor for Car class
- (instancetype)initWithType:(NSString *)type brand:(NSString *)brand color:(NSString *)color price:(int)price model:(NSString *)model engineType:(NSString *)engineType {
    
    // Calling super constructor from Vehicle class
    self = [super initWithType:type brand:brand color:color price:price];
    
    // Setting properties for Car class
    self.model = model;
    self.engineType = engineType;
    
    return self;
}

@end

// Creating and initializing instance of Car class
Car *bmw = [[Car alloc] initWithType:@"Car" brand:@"BMW" color:@"Silver" price:50000 model:@"M3" engineType:@"V6"];

// Showing all information for bmw instance using required methods from ShowVehicle interface
[bmw showVehicleType];
[bmw showVehicleBrand];
[bmw showVehicleColor];
[bmw showVehiclePrice];