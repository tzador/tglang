/*
This code snippet demonstrates a complex sorting algorithm
using recursion and a custom comparator function.
*/

// Custom comparator function that compares two strings based on their length
NSInteger customComparator(NSString *str1, NSString *str2) {
    if (str1.length == str2.length) { // if lengths are equal, sort alphabetically
        return [str1 compare:str2];
    }
    else if (str1.length > str2.length) { // if str1 is longer, str2 comes first
        return NSOrderedAscending;
    }
    else { // if str2 is longer, str1 comes first
        return NSOrderedDescending;
    }
}

// Recursive function that sorts an array of strings using the custom comparator
NSMutableArray* customSort(NSArray *arr) {
    // Base case: if array has only one element, return it as it is already sorted
    if (arr.count == 1) {
        return [NSMutableArray arrayWithObject:arr[0]];
    }
    
    // Divide the array in two parts: left and right
    NSInteger mid = arr.count / 2;
    NSMutableArray *leftArr = [NSMutableArray arrayWithArray:[arr subarrayWithRange:NSMakeRange(0, mid)]];
    NSMutableArray *rightArr = [NSMutableArray arrayWithArray:[arr subarrayWithRange:NSMakeRange(mid, arr.count - mid)]];
    
    // Sort the left and right parts recursively
    NSMutableArray *sortedLeftArr = customSort(leftArr);
    NSMutableArray *sortedRightArr = customSort(rightArr);
    
    // Merge the sorted left and right arrays while maintaining the order using the custom comparator function
    NSMutableArray *sortedArr = [NSMutableArray array];
    while (sortedLeftArr.count > 0 && sortedRightArr.count > 0) {
        // Compare the first elements of the left and right arrays
        NSComparisonResult result = customComparator(sortedLeftArr[0], sortedRightArr[0]);
        
        // Add the smallest element to the sorted array
        if (result == NSOrderedAscending || result == NSOrderedSame) {
            [sortedArr addObject:sortedLeftArr[0]];
            [sortedLeftArr removeObjectAtIndex:0];
        }
        else {
            [sortedArr addObject:sortedRightArr[0]];
            [sortedRightArr removeObjectAtIndex:0];
        }
    }
    
    // Add any remaining elements from the left or right array
    if (sortedLeftArr.count > 0) {
        [sortedArr addObjectsFromArray:sortedLeftArr];
    }
    else if (sortedRightArr.count > 0) {
        [sortedArr addObjectsFromArray:sortedRightArr];
    }
    
    // Return the sorted array
    return sortedArr;
}

// Sample usage
NSArray *arr = @[@"four", @"five", @"one", @"three", @"two"];
NSArray *sortedArr = customSort(arr); // Output: @[@"one", @"two", @"four", @"five", @"three"]