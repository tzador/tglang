/**
 *  This is a complex code snippet in Objective-C.
 *  It demonstrates the use of inheritance and protocols.
 *  It also includes complex control flow and memory management.
 *  Feel free to use and modify this code for your projects.
 */

// ClassA is the base class with a property and a method with parameter
@interface ClassA : NSObject

@property (nonatomic, strong) NSString *name;

- (void)doSomethingWithNumber:(NSInteger)number;

@end

@implementation ClassA

- (void)doSomethingWithNumber:(NSInteger)number {
    NSLog(@"%ld", (long)number);
}

@end

// ClassB inherits from ClassA and conforms to the CustomProtocol
@interface ClassB : ClassA <CustomProtocol>

@property (nonatomic, strong) NSArray *array;

- (instancetype)initWithName:(NSString *)name;

@end

@implementation ClassB

- (instancetype)initWithName:(NSString *)name {
    self = [super init];
    if (self) {
        self.name = name;
    }
    return self;
}

- (void)doSomethingWithNumber:(NSInteger)number {
    [super doSomethingWithNumber:number];
    self.array = [[NSArray alloc] initWithObjects:@1, @2, @3, nil];
    for (NSNumber *num in self.array) {
        if (num.integerValue == number) {
            // If the number is present in the array, log a message
            NSLog(@"%@ contains %ld", self.name, (long)number);
        } else {
            // Otherwise, log a different message
            NSLog(@"%@ does not contain %ld", self.name, (long)number);
        }
    }
}

// CustomProtocol defines a method that returns an object of type CustomObject
@protocol CustomProtocol <NSObject>

- (CustomObject *)customObjectForName:(NSString *)name;

@end

@interface CustomObject : NSObject

@property (nonatomic, strong) NSString *name;

- (instancetype)initWithName:(NSString *)name;

@end

@implementation CustomObject

- (instancetype)initWithName:(NSString *)name {
    self = [super init];
    if (self) {
        self.name = name;
    }
    return self;
}

@end

// ClassC conforms to CustomProtocol and implements the customObjectForName: method
@interface ClassC : NSObject <CustomProtocol>

@end

@implementation ClassC

- (CustomObject *)customObjectForName:(NSString *)name {
    CustomObject *customObject = [[CustomObject alloc] initWithName:name];
    return customObject;
}

@end

// Main function for testing the code
int main(int argc, char *argv[]) {
    @autoreleasepool {
        ClassB *classB = [[ClassB alloc] initWithName:@"ClassB"];
        CustomObject *customObject = [(ClassC *)classB customObjectForName:@"Custom Object"];
        [classB doSomethingWithNumber:2];
        NSLog(@"%@", customObject.name);
    }
    return 0;
}