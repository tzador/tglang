/**
 * This is a complex code snippet in OBJECTIVE_C that implements a data structure
 * for a binary search tree
 **/

// Defining the structure for each node in the binary search tree
struct tree_node {
    int data;
    struct tree_node *left;
    struct tree_node *right;
};

// Function to create a new node with the given data
struct tree_node* createNewNode(int data) {
    // Allocating memory for the new node
    struct tree_node *node = malloc(sizeof(struct tree_node));
    // Setting the data of the node
    node->data = data;
    // Setting the left and the right child of the node to NULL
    node->left = NULL;
    node->right = NULL;
    // Returning the newly created node
    return node;
}

// Function to insert a new node into the binary search tree
void insert(struct tree_node *root, int data) {
    // Creating a new node with the given data
    struct tree_node *newNode = createNewNode(data);
    // If the root is NULL, make the newNode as the root
    if(root == NULL) {
        root = newNode;
        return;
    }
    // Traverse the tree to find the correct position for the new node
    struct tree_node *currNode = root;
    while(currNode != NULL) {
        // If the data is less than the current node's data, go to the left child
        if(data < currNode->data) {
            // If the left child is NULL, insert the new node here
            if(currNode->left == NULL) {
                currNode->left = newNode;
                return;
            }
            // Otherwise, continue traversing the left subtree
            else {
                currNode = currNode->left;
            }
        }
        // If the data is greater than the current node's data, go to the right child
        else if(data > currNode->data) {
            // If the right child is NULL, insert the new node here
            if(currNode->right == NULL) {
                currNode->right = newNode;
                return;
            }
            // Otherwise, continue traversing the right subtree
            else {
                currNode = currNode->right;
            }
        }
        // If the data is equal to the current node's data, return (no duplicate nodes allowed)
        else {
            return;
        }
    }
}

// Function to search for a value in the binary search tree
struct tree_node* search(struct tree_node *root, int data) {
    // Starting at the root node
    struct tree_node *currNode = root;
    // Looping until either a match is found or we reach a leaf node
    while(currNode != NULL) {
        // If the current node's data is equal to the value we are searching for, return the node
        if(currNode->data == data) {
            return currNode;
        }
        // If the data is less than the current node's data, search in the left subtree
        else if(data < currNode->data) {
            currNode = currNode->left;
        }
        // If the data is greater than the current node's data, search in the right subtree
        else {
            currNode = currNode->right;
        }
    }
    // If no match is found, return NULL
    return NULL;
}

// Function to find the minimum value in the binary search tree
int findMinimum(struct tree_node *root) {
    // Starting at the root node
    struct tree_node *currNode = root;
    // Looping until we reach the leftmost leaf node
    while(currNode->left != NULL) {
        currNode = currNode->left;
    }
    // Return the minimum value found
    return currNode->data;
}

// Function to find the maximum value in the binary search tree
int findMaximum(struct tree_node *root) {
    // Starting at the root node
    struct tree_node *currNode = root;
    // Looping until we reach the rightmost leaf node
    while(currNode->right != NULL) {
        currNode = currNode->right;
    }
    // Return the maximum value found
    return currNode->data;
}

// Function to print the elements of the binary search tree in pre-order traversal
void preOrder(struct tree_node *root) {
    // If the root is NULL, return
    if(root == NULL) {
        return;
    }
    // Print the root's data
    printf("%d ", root->data);
    // Recursively print the left subtree
    preOrder(root->left);
    // Recursively print the right subtree
    preOrder(root->right);
}

// Function to print the elements of the binary search tree in in-order traversal
void inOrder(struct tree_node *root) {
    // If the root is NULL, return
    if(root == NULL) {
        return;
    }
    // Recursively print the left subtree
    inOrder(root->left);
    // Print the root's data
    printf("%d ", root->data);
    // Recursively print the right subtree
    inOrder(root->right);
}

// Function to print the elements of the binary search tree in post-order traversal
void postOrder(struct tree_node *root) {
    // If the root is NULL, return
    if(root == NULL) {
        return;
    }
    // Recursively print the left subtree
    postOrder(root->left);
    // Recursively print the right subtree
    postOrder(root->right);
    // Print the root's data
    printf("%d ", root->data);
}

/**
 * Sample usage:
 **/
int main() {
    // Creating a binary search tree with root node as 5
    struct tree_node *root = createNewNode(5);
    // Inserting nodes into the tree
    insert(root, 2);
    insert(root, 7);
    insert(root, 1);
    insert(root, 3);
    insert(root, 6);
    // Printing the elements in pre-order traversal
    printf("Pre-order traversal: ");
    preOrder(root);
    // Printing the elements in in-order traversal
    printf("\nIn-order traversal: ");
    inOrder(root);
    // Printing the elements in post-order traversal
    printf("\nPost-order traversal: ");
    postOrder(root);
    // Searching for a value in the tree
    struct tree_node *searchedNode = search(root, 3);
    if(searchedNode != NULL) {
        // Printing the value of the searched node
        printf("\nSearched node: %d\n", searchedNode->data);
    }
    else {
        printf("\nSearched node not found\n");
    }
    // Finding the minimum value in the tree
    printf("Minimum value: %d\n", findMinimum(root));
    // Finding the maximum value in the tree
    printf("Maximum value: %d\n", findMaximum(root));
}