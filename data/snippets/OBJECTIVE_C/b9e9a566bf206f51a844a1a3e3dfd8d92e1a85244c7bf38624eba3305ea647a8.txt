// Function to sort an array using quicksort algorithm
void quickSort(int arr[], int low, int high) {

    // Base case - check if array is empty or only has one element
    if (low >= high)
        return;
        
    // Choose pivot element - in this case, last element in array
    int pivot = arr[high];
    
    // Initialize indices for partitions
    int i = low - 1; // Index of smaller element
    int j; // Index of current element being compared
    
    // Loop through array and partition elements around pivot
    for (j = low; j < high; j++) {
        
        // If current element is smaller than pivot, swap with element at i+1 and increment i
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    
    // Put pivot in correct position in sorted array
    int temp = arr[i+1];
    arr[i+1] = pivot;
    arr[high] = temp;
    
    // Recursively sort the two partitions on either side of pivot
    quickSort(arr, low, i);
    quickSort(arr, i+2, high);
}