// This is a sample implementation of a linked list in Objective-C

// Define a linked list node class
@interface LinkedListNode : NSObject
@property (nonatomic, strong) id data;
@property (nonatomic, strong) LinkedListNode *next;
@end

// Implement the linked list node class
@implementation LinkedListNode
@end

// Define the linked list class
@interface LinkedList : NSObject
@property (nonatomic, strong) LinkedListNode *head;
@property (nonatomic, strong) LinkedListNode *tail;
@property (nonatomic, assign) int length;
@end

// Implement the linked list class
@implementation LinkedList

// Initialize the linked list with a head and tail node
- (instancetype)init {
    self = [super init];
    if (self) {
        self.head = [[LinkedListNode alloc] init];
        self.tail = self.head;
    }
    return self;
}

// Method to add a node to the end of the list
- (void)addNode:(id)data {
    LinkedListNode *newNode = [[LinkedListNode alloc] init];
    newNode.data = data;
    self.tail.next = newNode;
    self.tail = newNode;
    self.length++;
}

// Method to remove a node at a specific index
- (void)removeNodeAtIndex:(int)index {
    // Check if index is in range
    if (index < 0 || index >= self.length) {
        NSLog(@"Index out of range.");
        return;
    }
    // If index is 0, set new head node
    if (index == 0) {
        self.head = self.head.next;
    }
    else {
        LinkedListNode *currentNode = self.head;
        // Traverse through list until index is reached
        for (int i = 0; i < index - 1; i++) {
            currentNode = currentNode.next;
        }
        // Set the next node to be the one after the removed node
        currentNode.next = currentNode.next.next;
        // Check if removed node was the tail and set new tail if so
        if (index == self.length - 1) {
            self.tail = currentNode;
        }
    }
    self.length--;
}

@end

// Create a new instance of a linked list
LinkedList *list = [[LinkedList alloc] init];

// Add nodes to the list
[list addNode:@1];
[list addNode:@2];
[list addNode:@3];

// Remove a node at index 1
[list removeNodeAtIndex:1];

// Output the list's length
NSLog(@"Length of list: %i", list.length); // Output: 2