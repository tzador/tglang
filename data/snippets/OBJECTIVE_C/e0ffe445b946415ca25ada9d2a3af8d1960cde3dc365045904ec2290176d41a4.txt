//Declare an array of strings
NSArray *strArray = @[@"Hello", @"World", @"This", @"Is", @"An", @"Array"];

//Create a mutable dictionary
NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];

//Add key-value pairs to the dictionary
[dict setObject:@"John" forKey:@"name"];
[dict setObject:@"Apple" forKey:@"company"];
[dict setObject:@"Developer" forKey:@"profession"];

//Initialize a date formatter
NSDateFormatter *formatter = [[NSDateFormatter alloc] init];

//Set the date format
[formatter setDateFormat:@"yyyy-MM-dd"];

//Convert NSDate to string
NSString *dateString = [formatter stringFromDate:[NSDate date]];

//Initialize an integer variable
int num = 5;

//Create a function that prints the value of an object
void printValue(id obj)
{
    NSLog(@"Value: %@\n", obj);
}

//Loop through the array and call the printValue function on each element
for (NSString *str in strArray) {
    printValue(str);
}

//Print the current date
printValue(dateString);

//Add an element to the array
[strArray addObject:@"New"];

//Remove an element from the dictionary
[dict removeObjectForKey:@"profession"];

//Check if the integer variable is equal to 5
if (num == 5) {
    //If true, print a message
    printValue(@"The number is equal to 5.");
} else {
    //If false, print a different message
    printValue(@"The number is not equal to 5.");
}

//Declare a block variable that takes in two integers and multiplies them
int (^multiplyBlock)(int, int) = ^(int num1, int num2){
    return num1 * num2;
};

//Call the block variable
int result = multiplyBlock(2, 3);

//Print the result
printValue([NSString stringWithFormat:@"The result is %d.", result]);

//Declare a delegate protocol
@protocol CustomDelegate

-(void)doSomething;

@end

//Create a class that conforms to the delegate protocol
@interface CustomClass : NSObject <CustomDelegate>

//Declare a property for the delegate
@property (nonatomic, weak) id<CustomDelegate> delegate;

@end

//Implement the doSomething method in the CustomClass
@implementation CustomClass

-(void)doSomething
{
    //Print a message
    printValue(@"I am doing something!");
}

@end

//Initialize an instance of the CustomClass
CustomClass *customObj = [[CustomClass alloc]init];

//Set the delegate to self
customObj.delegate = self;

//Call the doSomething method through the delegate
[customObj.delegate doSomething];