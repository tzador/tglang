// MARK: - Complex Calculation Class
@interface ComplexCalculation: NSObject

// MARK: Properties
@property (nonatomic, assign) int firstNumber;
@property (nonatomic, assign) int secondNumber;
@property (nonatomic, assign) int result;

// MARK: Initialization
- (instancetype)initWithFirstNumber:(int)firstNumber andSecondNumber:(int)secondNumber;

// MARK: Public Methods
- (void)calculateAddition;
- (void)calculateSubtraction;
- (void)calculateMultiplication;
- (void)calculateDivision;

@end

@implementation ComplexCalculation

// MARK: Initialization
- (instancetype)initWithFirstNumber:(int)firstNumber andSecondNumber:(int)secondNumber
{
    self = [super init];
    if (self) {
        self.firstNumber = firstNumber;
        self.secondNumber = secondNumber;
    }
    return self;
}

// MARK: Public Methods
- (void)calculateAddition
{
    self.result = self.firstNumber + self.secondNumber;
    NSLog(@"The result of addition is %d", self.result);
}

- (void)calculateSubtraction
{
    self.result = self.firstNumber - self.secondNumber;
    NSLog(@"The result of subtraction is %d", self.result);
}

- (void)calculateMultiplication
{
    self.result = self.firstNumber * self.secondNumber;
    NSLog(@"The result of multiplication is %d", self.result);
}

- (void)calculateDivision
{
    if (self.secondNumber == 0) {
        NSLog(@"Error: Cannot divide by zero.");
    } else {
        self.result = self.firstNumber / self.secondNumber;
        NSLog(@"The result of division is %d", self.result);
    }
}

@end

// MARK: - Main Function
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // create an instance of ComplexCalculation class
        ComplexCalculation *complexCalculation = [[ComplexCalculation alloc] initWithFirstNumber:10 andSecondNumber:5];
        
        // perform addition
        [complexCalculation calculateAddition];
        
        // perform subtraction
        [complexCalculation calculateSubtraction];
        
        // perform multiplication
        [complexCalculation calculateMultiplication];
        
        // perform division
        [complexCalculation calculateDivision];
    }
    return 0;
}