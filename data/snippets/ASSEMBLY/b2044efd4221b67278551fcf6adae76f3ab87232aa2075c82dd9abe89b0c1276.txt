; Set up registers for arithmetic operations
mov eax, 5 ; move the value 5 into the eax register
mov ebx, 10 ; move the value 10 into the ebx register
add eax, ebx ; add the values in eax and ebx, result stored in eax

; Set up loop to multiply values in registers
mov ecx, 1 ; set loop counter to 1
mul ebx ; multiply eax by ebx, result stored in edx:eax register pair
loop_start: ; define loop label
inc ecx ; increment loop counter
mul ebx ; multiply eax by ebx, result stored in edx:eax register pair
cmp ecx, 5 ; compare loop counter with value of 5
jne loop_start ; jump back to loop_start if not equal

; Store the result in a variable
mov [result], eax ; move value in eax register to memory location "result"

; Print the result to the screen
mov eax, 4 ; store syscall number (print) into eax register
mov ebx, 1 ; store file descriptor (stdout) into ebx register
mov ecx, result ; store memory location of result into ecx register
mov edx, 4 ; store length of string (result) into edx register
int 0x80 ; call system interrupt to execute syscall

; Exit the program
mov eax, 1 ; store syscall number (exit) into eax register
mov ebx, 0 ; store exit code (success) into ebx register
int 0x80 ; call system interrupt to execute syscall

section .data ; data section for stored variables
result db 'Result: ', 0xA ; define a string variable "result" with newline character
section .bss ; uninitialized data section
res resd 1 ; reserve 1 doubleword (4 bytes) for result variable

section .text ; code section
global _start ; starting point for program execution
_start: ; define label for program start