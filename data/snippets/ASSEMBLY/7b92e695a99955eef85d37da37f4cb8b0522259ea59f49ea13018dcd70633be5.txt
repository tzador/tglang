.section .data
    ;creating a structure with 4 fields: id, name, age, and city
    person:
        id: .int 1234  ;assigning integer value 1234 to id field
        name: .asciz "John"  ;assigning string value "John" to name field
        age: .byte 32  ;assigning byte value 32 to age field
        city: .asciz "New York"  ;assigning string value "New York" to city field

.section .bss
    ;declaring variables for user input
    input_id: .resd 1  ;reserve space for 1 doubleword integer
    input_name: .resb 20  ;reserve space for 20 bytes string
    input_age: .resb 1  ;reserve space for 1 byte integer
    input_city: .resb 20  ;reserve space for 20 bytes string

.section .text
    .global _start
    
    _start:
        ;prompt user to enter id and store the input in input_id variable
        movl $1, %eax  ;system call for write
        movl $1, %ebx  ;file descriptor for stdout
        movl $msg_id, %ecx  ;address of prompt message for id
        movl $msg_len, %edx  ;length of prompt message
        int $0x80  ;call kernel
        
        movl $3, %eax  ;system call for read
        movl $0, %ebx  ;file descriptor for stdin
        movl $input_id, %ecx  ;address of input_id variable
        movl $4, %edx  ;maximum number of bytes to read
        int $0x80  ;call kernel

        ;prompt user to enter name and store the input in input_name variable
        movl $1, %eax  ;system call for write
        movl $1, %ebx  ;file descriptor for stdout
        movl $msg_name, %ecx  ;address of prompt message for name
        movl $msg_len, %edx  ;length of prompt message
        int $0x80  ;call kernel
        
        movl $3, %eax  ;system call for read
        movl $0, %ebx  ;file descriptor for stdin
        movl $input_name, %ecx  ;address of input_name variable
        movl $20, %edx  ;maximum number of bytes to read
        int $0x80  ;call kernel

        ;prompt user to enter age and store the input in input_age variable
        movl $1, %eax  ;system call for write
        movl $1, %ebx  ;file descriptor for stdout
        movl $msg_age, %ecx  ;address of prompt message for age
        movl $msg_len, %edx  ;length of prompt message
        int $0x80  ;call kernel
        
        movl $3, %eax  ;system call for read
        movl $0, %ebx  ;file descriptor for stdin
        movl $input_age, %ecx  ;address of input_age variable
        movl $1, %edx  ;maximum number of bytes to read
        int $0x80  ;call kernel

        ;prompt user to enter city and store the input in input_city variable
        movl $1, %eax  ;system call for write
        movl $1, %ebx  ;file descriptor for stdout
        movl $msg_city, %ecx  ;address of prompt message for city
        movl $msg_len, %edx  ;length of prompt message
        int $0x80  ;call kernel
        
        movl $3, %eax  ;system call for read
        movl $0, %ebx  ;file descriptor for stdin
        movl $input_city, %ecx  ;address of input_city variable
        movl $20, %edx  ;maximum number of bytes to read
        int $0x80  ;call kernel

        ;store user input into the person structure
        movl $input_id, %eax  ;move input_id variable address to eax register
        movl %eax, person+0(%ebx)  ;store value in eax register to id field in person structure
        movl $input_name, %eax  ;move input_name variable address to eax register
        movl %eax, person+4(%ebx)  ;store value in eax register to name field in person structure
        movl $input_age, %eax  ;move input_age variable address to eax register
        movl %eax, person+24(%ebx)  ;store value in eax register to age field in person structure
        movl $input_city, %eax  ;move input_city variable address to eax register
        movl %eax, person+25(%ebx)  ;store value in eax register to city field in person structure

        ;print the person structure to console
        movl $1, %eax  ;system call for write
        movl $1, %ebx  ;file descriptor for stdout
        movl $person, %ecx  ;address of person structure
        movl $30, %edx  ;length of structure (4 fields x 4 bytes each + 18 bytes for strings)
        int $0x80  ;call kernel

        ;exit program
        movl $1, %eax  ;system call for exit
        xor %ebx, %ebx  ;exit status code
        int $0x80  ;call kernel

    .section .rodata
        ;prompt messages for user input
        msg_id: .asciz "Enter ID: "
        msg_name: .asciz "Enter name: "
        msg_age: .asciz "Enter age: "
        msg_city: .asciz "Enter city: "
        msg_len: .int 12  ;length of prompt messages (excluding null terminator)