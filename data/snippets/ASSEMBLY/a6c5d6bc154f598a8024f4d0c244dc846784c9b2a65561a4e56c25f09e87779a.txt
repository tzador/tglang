section .data
    message db 'Hello, world!', 0AH, 0DH ;creating a variable "message" with the value "Hello, world!" and adding line feed (\n) and carriage return (\r) characters
    length equ $-message ;equating "length" variable to the length of "message" variable, denoted by $
    counter dw 0 ;creating a word-sized variable "counter" and initializing it with value 0
    max dw 10 ;creating a word-sized variable "max" and initializing it with value 10

section .text
    global _start    ;defining _start as a global label
_start:
    mov rdx, length ;moving the value of "length" variable into rdx register
    mov rcx, message ;moving the value of "message" variable into rcx register
    mov rbx, 1 ;moving the value 1 into rbx register, which represents the STDOUT file descriptor
    mov rax, 4 ;moving the value 4 into rax register, which represents the sys_write system call
    int 80H ;interrupting the process and calling the Linux kernel to execute the sys_write system call
    inc counter ;incrementing the value of "counter" variable by 1
    cmp counter, max ;comparing the values of "counter" and "max" variables
    jne _start ;jumping back to _start label if counter is not equal to max
    mov eax, 1 ;moving the value 1 into eax register, which represents the sys_exit system call
    int 80H ;interrupting the process and calling the Linux kernel to execute the sys_exit system call