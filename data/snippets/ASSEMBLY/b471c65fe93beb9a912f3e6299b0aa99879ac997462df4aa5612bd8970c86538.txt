; Initialize registers
    mov ax, 0x0000 ; move value into ax register
    mov bx, 0x0010 ; move value into bx register
    mov cx, 0x0020 ; move value into cx register
    mov dx, 0x0030 ; move value into dx register

; Use arithmetic operations
    add ax, bx ; add bx value to ax value
    sub cx, dx ; subtract dx value from cx value
    mul ax, cx ; multiply ax value by cx value
    div dx, bx ; divide dx value by bx value

; Compare and jump statements
    cmp ax, bx ; compare ax and bx values
    je eq_label ; jump to eq_label if equal
    jg gt_label ; jump to gt_label if greater than
    jl lt_label ; jump to lt_label if less than

; Looping
    mov cx, 10 ; set loop counter to 10
    loop_start: ; start of loop
        ; do some operations here
        dec cx ; decrease loop counter by 1
        jnz loop_start ; jump to loop_start if cx is not zero

; Procedure/Subroutine
    proc_name proc ; define a procedure named proc_name
        ; procedure instructions go here
        ret ; return from procedure
    endp ; end of procedure declaration

; Calling a procedure
    call proc_name ; call the proc_name procedure

; Interrupts
    int 0x21 ; call interrupt with specified value

; Macros
    %macro assign_value 2 ; define macro with 2 arguments
        mov %1, %2 ; move second argument into first argument
    %endmacro ; end of macro definition

; Using a macro
    assign_value bx, 0xFF ; call the assign_value macro with bx and 0xFF as arguments