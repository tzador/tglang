.DATA ; beginning of data segment
	
array_count DB 0 ; variable to store the count of the array
array_size DW 0 ; variable to store the size of the array
array DW 1, 3, 5, 7, 9 ; array of 5 unsigned words
	
.CODE ; beginning of code segment

start: MOV AX, @data ; move the starting address of data segment to AX
MOV DS, AX ; move the value in AX to the data segment register
MOV AX, 0 ; initialize AX to 0
	
LEA SI, array ; load the address of the array into SI
MOV CX, array_count ; move the value of array_count to CX
	
loop: MOV BX, 0 ; initialize BX to 0
MOV AX, [SI] ; move the value at the address stored in SI to AX
CMP AX, 0 ; compare AX to 0
	
JE skip ; jump to skip if AX = 0
ADD BX, AX ; add the value in AX to BX
INC array_count ; increment the value of array_count
ADD SI, 2 ; move to the next element in the array
	
skip: LOOP loop ; jump back to loop if CX > 0
	
MOV AX, BX ; move the sum to AX
DIV CX ; divide AX by CX
	
MOV array_size, AX ; move the quotient to array_size
	
EXIT ; end of program
END start ; end of main