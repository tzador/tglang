;; This code snippet calculates the factorial of a given number using recursion

;; Function to calculate the factorial
Factorial:
    ;; Push arguments onto stack
    push ebp
    mov ebp, esp

    ;; Compare argument with 0
    cmp dword [ebp+8], 0
    jle End                 ; Jump to End if argument is less than or equal to 0

    ;; Compare argument with 1
    cmp dword [ebp+8], 1
    je ReturnOne            ; Jump to ReturnOne if argument is equal to 1

    ;; Push return address onto stack
    push ReturnVal

    ;; Call Factorial function recursively, passing argument - 1
    mov eax, [ebp+8]
    dec eax
    push eax
    call Factorial

    ;; Multiply result with argument
    mul dword [ebp+8]

    ;; Pop return address from stack and jump to it
    pop eax
    jmp eax

ReturnOne:
    ;; Return 1
    mov eax, 1
    jmp ReturnVal

End:
    ;; Return 0
    xor eax, eax

ReturnVal:
    ;; Clean up stack and return
    pop ebp
    ret

;; Entry point
_start:
    ;; Get input from user
    mov eax, 5              ; Placeholder value, in reality, this would come from user
    push eax

    ;; Call Factorial function with input as argument
    call Factorial

    ;; Output result
    mov ebx, eax            ; Move result to ebx, as eax will contain return address
    call PrintNum           ; Function to display number, not shown in this code snippet

    ;; Exit program
    mov eax, 1
    int 0x80