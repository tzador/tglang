SECTION .text  ; Section for code

global _start  ; Global symbol for start of code

; Function to add two numbers and return the sum 
_add_numbers:   
    push ebp  ; Save base pointer
    mov ebp, esp ; Move base pointer to stack pointer
    push ebx ; Save ebx register
    ; ----- Function begins -----

    mov ebx, [ebp+8] ; Move first parameter to ebx register
    mov eax, [ebp+12] ; Move second parameter to eax register
    add ebx, eax ; Add ebx and eax register
    mov eax, ebx ; Move sum to eax register as return value 

    ; ----- Function ends -----
    pop ebx ; Restore ebx register
    mov esp, ebp ; Move ebp back to esp
    pop ebp ; Restore base pointer
    ret ; Return to calling function

; Function to subtract two numbers and return the difference 
_subtract_numbers:
    push ebp ; Save base pointer
    mov ebp, esp ; Move base pointer to stack pointer
    push ebx ; Save ebx register
    ; ----- Function begins -----

    mov ebx, [ebp+8] ; Move first parameter to ebx register
    mov eax, [ebp+12] ; Move second parameter to eax register
    sub ebx, eax ; Subtract eax from ebx register
    mov eax, ebx ; Move difference to eax register as return value 

    ; ----- Function ends -----
    pop ebx ; Restore ebx register
    mov esp, ebp ; Move ebp back to esp
    pop ebp ; Restore base pointer
    ret ; Return to calling function

; Main code
_start:
    ; Call _add_numbers function and store the sum in eax register
    push 6 ; First parameter (6) 
    push 4 ; Second parameter (4)
    call _add_numbers ; Call _add_numbers function
    add esp, 8 ; Clean up stack after function call (2 parameters * 4 bytes each)

    ; Call _subtract_numbers function and store the difference in eax register
    push 10 ; First parameter (10)
    push 7 ; Second parameter (7)
    call _subtract_numbers ; Call _subtract_numbers function
    add esp, 8 ; Clean up stack after function call (2 parameters * 4 bytes each)

    mov ebx, eax ; Move difference from eax to ebx for printing

    ; Print message to console
    mov eax, 4 ; System call for printing to console
    mov ebx, 1 ; File descriptor for standard output (console)
    mov ecx, result ; Pointer to message to print
    mov edx, 27 ; Length of message
    int 0x80 ; Interrupt to execute system call

    ; Exit program with value stored in ebx register (difference)
    mov eax, 1 ; System call for exiting program
    xor ebx, ebx ; Clear ebx register
    int 0x80 ; Interrupt to execute system call 

section .data ; Section for data
    result db 'The difference is %d', 10, 0 ; Message to print with %d as placeholder for value