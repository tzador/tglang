; Print the Fibonacci sequence of the first 10 numbers in Assembly

.data ; Data section
prompt_message db "Enter the number of terms: $" ; Prompt message for user input
fibonacci_message db "The first 10 terms of the Fibonacci sequence are: $" ; Message to print the Fibonacci sequence
input_number db ? ; Variable to store user input
fibonacci_sequence db 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ; Array to store the first 10 terms of the Fibonacci sequence

.code ; Code section
main PROC ; Main function
; Print the prompt message
mov ah, 09h ; Set the print function
mov dx, offset prompt_message ; Load the message into the data register
int 21h ; Print the message

; Get user input
mov ah, 01h ; Set the input function
int 21h ; Read a character
sub al, 30h ; Convert the character to a number
mov input_number, al ; Store the number in input_number

; Calculate the Fibonacci sequence
mov bl, 2 ; Start at the third term of the sequence
mov cl, input_number ; Number of terms entered by user
add cl, 2 ; Add 2 to the number of terms to account for the initial 0 and 1
L1:
mov al, fibonacci_sequence[bl-2] ; Load the previous term (n-2)
mov ah, fibonacci_sequence[bl-1] ; Load the current term (n-1)
add al, ah ; Add the previous and current terms
mov fibonacci_sequence[bl], al ; Store the sum in the current term (n)
inc bl ; Increment the index
loop L1 ; Loop until all terms are calculated

; Print the Fibonacci sequence
mov ah, 09h ; Set the print function
mov dx, offset fibonacci_message ; Load the message into the data register
int 21h ; Print the message
mov bl, 0 ; Reset the index
L2:
mov dl, fibonacci_sequence[bl] ; Load the current term to print
add dl, 30h ; Convert the number to a character
mov ah, 02h ; Set the output function
int 21h ; Print the term
inc bl ; Increment the index
cmp bl, input_number ; Compare the index to the number of terms entered by user
jne L2 ; Jump to L2 if they are not equal

mov ah, 4ch ; Set the exit function
int 21h ; Exit the program

main ENDP ; End of main function

end main ; End of program