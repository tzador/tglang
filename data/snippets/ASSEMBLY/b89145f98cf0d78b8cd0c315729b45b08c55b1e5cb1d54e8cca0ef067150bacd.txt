section .text                       ; Creates a section for executable code
    global _start                   ; Sets the label for the entry point of our program

_start: 
    ; === Variable Initialization ===
    mov eax, 0                      ; Initializes eax register to 0
    mov ebx, 25                     ; Initializes ebx register to 25
    
    ; === Loop ===
loop_start:
    add eax, ebx                    ; Adds ebx to eax register
    cmp ebx, 0                      ; Compares ebx to 0
    je loop_end                     ; Jump to loop_end label if ebx is equal to 0
    dec ebx                         ; Decrements ebx by 1
    jmp loop_start                  ; Jumps back to loop_start label for next iteration
    
loop_end:
    ; === Output ===
    mov eax, 4                      ; Initializes eax with system call number for 'write'
    mov ebx, 1                      ; Initializes ebx with first argument for 'write' (file descriptor - stdout)
    mov ecx, message                ; Initializes ecx with second argument for 'write' (pointer to message)
    mov edx, message_len            ; Initializes edx with third argument for 'write' (length of message)
    int 0x80                        ; Calls the kernel to execute the 'write' system call
    
    ; === Exit ===
    mov eax, 1                      ; Initializes eax with system call number for 'exit'
    xor ebx, ebx                    ; Initializes ebx with exit status (0 for successful execution)
    int 0x80                        ; Calls the kernel to execute the 'exit' system call
    
section .data                       ; Creates a section for initialized data
    message db 'Result: ', 0xA, 0xD ; Declares a message in ascii format with line feed and carriage return characters
    message_len equ $ - message     ; Calculates the length of the message