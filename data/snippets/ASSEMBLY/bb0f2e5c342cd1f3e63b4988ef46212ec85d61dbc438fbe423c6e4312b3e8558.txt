;; This code snippet performs a binary search algorithm in assembly language

;; Creating variables
section .data
array dd 5, 10, 15, 20, 25         ; array of numbers to be searched
key dd 15                          ; key to be searched in the array
len equ $ - array                  ; length of the array, denoted by the difference between the current address and the start of the array

section .text
global _start                      ; declaring the start of the program

_start:
    mov eax, array                 ; moving the start address of the array to eax register
    mov ecx, len                   ; moving the length of the array to ecx register
    mov ebx, key                   ; moving the key to be searched to ebx register

    ;; performing binary search algorithm
    loop_start:
        cmp ecx, 0                 ; comparing the length with 0
        jle not_found              ; if length is less than or equal to 0, key not found

        mov edx, ecx               ; moving the value of ecx register to edx register
        shr edx, 1                 ; shifting the value of edx register to the right by 1 (dividing by 2)
        mov esi, eax               ; moving the start address of the array to esi register
        lea edi, [esi + edx * 4]   ; calculating the middle index of the array and storing it in edi register
        mov eax, [edi]             ; moving the value at the calculated middle index to eax register
        cmp eax, ebx               ; comparing the value at the calculated middle index with the key
        je found                   ; if they are equal, key found
        jl move_right              ; if eax is less than ebx, move the starting index to the right
        jg move_left               ; if eax is greater than ebx, move the ending index to the left

    move_right:
        inc edi                    ; incrementing the starting index
        jmp loop_start             ; jumping back to the beginning of the loop

    move_left:
        dec ecx                    ; decrementing the ending index
        jmp loop_start             ; jumping back to the beginning of the loop

    not_found:
        mov eax, 0                 ; if key not found, move 0 to eax register
        jmp exit                   ; jump to the exit of the program

    found:
        sub edi, eax               ; subtracting the start address of the array from the index of the found value
        mov eax, edi               ; moving the value to be searched to eax register

    exit:
        mov ebx, 1                 ; system call number for exit
        int 0x80                   ; interrupt to perform the system call