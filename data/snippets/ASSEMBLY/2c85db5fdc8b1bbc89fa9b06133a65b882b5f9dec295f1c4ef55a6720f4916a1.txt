.global _start
_start:
	movl $2, %eax    // move the value 2 to register eax
	movl $1, %ebx    // move the value 1 to register ebx
	movl $1, %ecx    // move the value 1 to register ecx
loop:
	imull %eax, %ebx // multiply the values in registers eax and ebx, store result in ebx
	dec %ecx         // decrement the value in register ecx
	jnz loop         // jump to loop if the value in register ecx is not zero
	movl $4, %eax    // move the value 4 to register eax (sys_write)
	movl $1, %ebx    // move the value 1 to register ebx (stdout)
	movl %ebx, %ecx  // move the value in register ebx to register ecx (buffer)
	movl $4, %edx    // move the value 4 to register edx (length of buffer)
	int $0x80        // execute the system call (sys_write)
	movl $1, %eax    // move the value 1 to register eax (sys_exit)
	xor %ebx, %ebx   // xor the values in register ebx and ebx (clears ebx)
	int $0x80        // execute the system call (sys_exit)