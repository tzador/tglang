.data ;start of data segment
str1 db "Hello World!",0xa,0x0 ;string variable with "Hello World!" and two new line characters
;0xa represents a new line and 0x0 represents the null character
str2 db "This is an example of assembly code",0xa,0x0 ;string variable with "This is an example of assembly code" and two new line characters
.code ;start of code segment
main proc ;main program block begins
mov ah, 0x09 ;move 0x09 into the ah register to prepare for printing
mov dx, offset str1 ;move the address of str1 into the dx register
int 0x21 ;interrupt to print the string stored at the address in the dx register
mov ah, 0x09 ;move 0x09 into the ah register again
mov dx, offset str2 ;move the address of str2 into the dx register
int 0x21 ;interrupt to print the string stored at the address in the dx register
mov ah, 0x09 ;move 0x09 into the ah register once again
lea dx, [str1+3] ;load effective address of str1+3 (offset of "Hello World!" with two null characters)
int 0x21 ;interrupt to print the sub-string starting from "World!" onwards
mov ah, 0x0a ;move 0x0a into the ah register to prepare for reading input
int 0x21 ;interrupt to read input and store it at the address in the dx register
lea dx, [str1+12] ;load effective address of str1+12 (offset of "orld!" with one null character)
int 0x21 ;interrupt to compare the input to the sub-string at that address
jz equal ;if input is equal to sub-string, jump to the label equal
unequal: ;if input is unequal to sub-string, continue to next instruction
mov ax, 0 ;move 0 into the ax register to represent a false value
jmp end ;jump to the end of the program
equal: ;if input is equal to sub-string, continue to next instruction
mov ax, 1 ;move 1 into the ax register to represent a true value
end: ;end of program
mov ah, 0x4c ;move 0x4c into the ah register to tell the operating system we are done
int 0x21 ;interrupt to terminate the program
main endp ;main program block ends
end main ;end of program