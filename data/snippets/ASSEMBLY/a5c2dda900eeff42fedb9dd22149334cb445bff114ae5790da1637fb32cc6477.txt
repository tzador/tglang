.section .text
.globl _start     ; make symbol '_start' visible outside

_start:
    mov $1, %eax ; set system call number for 'exit'
    xor %ebx, %ebx ; set exit status to 0
    int $0x80 ; call kernel interrupt to exit program
                  
.section .data
message:
    .ascii "Hello, World!" ; store ASCII string in 'message'
msglen = . -message ; calculate length of message
    
.section .bss
buffer:
    .space 128 ; allocate 128 bytes of uninitialized data in 'buffer'
  
.section .text
.globl main     ; make symbol 'main' visible outside

main:
    push %ebp ; save old base pointer on stack
    mov %esp, %ebp ; set new base pointer to current stack pointer
    
    movl $4, %eax ; system call number for 'write'
    movl $1, %ebx ; file descriptor for 'standard output'
    movl $message, %ecx ; pointer to 'message' data
    movl $msglen, %edx ; length of message
    int $0x80 ; call kernel interrupt to write message to standard output
    
    mov %esp, %ebp ; restore old base pointer from stack
    pop %ebp ; restore old stack pointer from stack
    
    mov $0, %eax ; set return value to 0
    ret ; return to '_start' or operating system