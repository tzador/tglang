; This program uses a loop to reverse a string
section .data

    ; Input string
    inputString db "Hello, World!", 0

    ; Length of input string
    inputLength equ $-inputString 

    ; Output string
    outputString db inputLength dup(?) ; Reserve space for output string

section .text

    global _start

_start:

    ; Loop counter (initialize to zero)
    mov ecx, 0  

    ; Point to last character of input string
    mov esi, inputLength
    dec esi

    ; Move output string pointer to end
    mov edi, outputString    
    add edi, esi

reverse_loop:

    ; Check if all characters have been processed
    cmp ecx, inputLength
    jge end_loop

    ; Copy character from input to output
    mov al, [inputString + ecx]  
    mov [edi], al

    ; Decrement input string pointer
    dec edi

    ; Increment output string pointer
    inc ecx

    ; Continue loop
    jmp reverse_loop

end_loop:

    ; Terminate output string with NULL
    mov [edi], byte 0

    ; Print output string
    mov eax, 4  ; System call for write 
    mov ebx, 1  ; File descriptor (stdout)
    mov ecx, outputString ; String to be printed
    mov edx, inputLength ; Length of string
    int 0x80  ; Invoke system call

    ; Exit program
    mov eax, 1  ; System call for exit 
    xor ebx, ebx  ; Exit status code
    int 0x80  ; Invoke system call