; This program calculates the factorial of a given number

section .text ; starting the text section

global _start ; declaring the global start label

_start: ; defining the start label
    mov ecx, 1 ; initialize counter to 1
    mov edx, 1 ; initialize factorial to 1

input_loop: ; defining input loop label
    ; prompt user for input
    mov eax, 4 ; specifying write system call
    mov ebx, 1 ; specifying standard output file descriptor
    mov ecx, input_prompt ; specifying input prompt message stored in data section
    mov edx, input_prompt_len ; specifying input prompt message length
    int 80h ; calling the kernel to perform the write system call

    ; read user input
    mov eax, 3 ; specifying read system call
    mov ebx, 0 ; specifying standard input file descriptor
    mov ecx, input_buffer ; specifying input buffer to store user input
    mov edx, input_buffer_len ; specifying maximum number of characters to read
    int 80h ; calling the kernel to perform the read system call

    ; convert input to integer
    mov eax, input_buffer ; moving input buffer to eax register
    mov ebx, 0 ; clearing ebx register before using it for conversion
    sub eax, '0' ; converting ASCII character to integer
    add edx, ecx ; shifting previous factorial value to make room for new value
    mul edx ; multiplying previous value with current number
    mov edx, eax ; saving result in edx register

    ; decrement counter
    dec ecx ; decrementing counter by 1

    ; check if counter is greater than 0
    cmp ecx, 0
    jg input_loop ; if greater, continue looping

output_result: ; defining output result label
    ; convert factorial value to string
    mov eax, edx ; moving factorial value to eax register
    mov ebx, 10 ; specifying base 10
    add eax, '0' ; converting integer to ASCII character
    mov [result_buffer], eax ; storing converted value in result buffer

    ; print result
    mov eax, 4 ; specifying write system call
    mov ebx, 1 ; specifying standard output file descriptor
    mov ecx, result_buffer ; specifying result buffer stored in data section
    mov edx, result_buffer_len ; specifying result buffer length
    int 80h ; calling the kernel to perform the write system call

    ; exit program
    mov eax, 1 ; specifying exit system call
    mov ebx, 0 ; specifying exit code
    int 80h ; calling the kernel to perform the exit system call

section .data ; starting the data section

input_prompt db "Enter a number to calculate its factorial: ", 0xa ; defining input prompt message
input_prompt_len equ $ - input_prompt ; calculating input prompt message length

input_buffer times 5 db 0 ; defining input buffer to store user input
input_buffer_len equ $ - input_buffer ; calculating input buffer length

result_buffer times 11 db 0 ; defining result buffer to store result
result_buffer_len equ $ - result_buffer ; calculating result buffer length