# This program performs matrix multiplication
# Assumes that matrix A is stored in memory starting at address 0
# Assumes that matrix B is stored in memory starting at address 100
# The result will be stored in memory starting at address 200

# Define variables
.data
  rowsA WORD 4     # number of rows in matrix A
  colsA WORD 3     # number of columns in matrix A
  rowsB WORD 3     # number of rows in matrix B
  colsB WORD 2     # number of columns in matrix B
  result WORD 12   # size of result matrix (rowsA * colsB)

# Initialize counters and indices
  mov cx, rowsA    # loop counter for rows of matrix A
  mov di, 0        # index for elements of matrix A
  mov si, 100      # index for elements of matrix B
  mov bx, 200      # index for elements of result matrix

# Loop for rows of matrix A
loop1:
  push cx          # save loop counter on stack
  push bx          # save index of result matrix on stack

# Loop for columns of matrix B
  mov cx, colsB    # loop counter for columns of matrix B
  mov dx, 0        # index for elements of columns of matrix B
loop2:
  push cx          # save loop counter on stack
  push dx          # save index of columns of matrix B on stack

# Loop for rows of matrix B and columns of matrix A
  mov ax, 0        # accumulator for result
  mov bx, di       # save index of elements of matrix A in bx
  mov si, dx       # save index of elements of matrix B in si
loop3:
  mov ah, [bx]     # load element from matrix A
  mov bh, [si]     # load element from matrix B
  mul bh           # multiply elements
  add ax, result   # add result to accumulator
  add si, colsB    # shift index of elements of matrix B to next row
  loop loop3       # loop until all rows are multiplied and added

# Store result in memory
  mov [bx], ax     # store result in result matrix at index bx

# Restore loop counters and indices
  pop dx           # restore index of elements of columns of matrix B
  pop cx           # restore loop counter for columns of matrix B
  add si, 1        # shift index of columns of matrix B to next column
  loop loop2       # loop until all columns are multiplied

# Restore loop counters and indices
  pop bx           # restore index of result matrix
  pop cx           # restore loop counter for rows of matrix A
  add di, colsA    # shift index of elements of matrix A to next row
  loop loop1       # loop until all rows are multiplied

# Halt program
  mov ah, 0        # set exit code
  int 21h          # terminate program
  end              # end of program
.end