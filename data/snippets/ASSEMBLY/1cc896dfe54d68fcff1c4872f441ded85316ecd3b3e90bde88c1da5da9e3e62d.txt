section .text  ;Start of the code section
global _start ;Global access to the _start label

_start: ;Entry point for the code

;Creating a variable
mov ebx, 5 ;Moves the value 5 into the ebx register
jmp main ;Jumps to the main label
 
addition: ;Label for addition subroutine
;Takes two numbers from the stack and adds them
pop ebx ;Pops the top value from the stack into ebx register
add [esp], ebx ;Adds the value in ebx to the top value on the stack

main: ;Main label
push 2 ;Pushes the value 2 onto the stack
push 3 ;Pushes the value 3 onto the stack
call addition ;Calls the addition subroutine
mov eax, [esp] ;Moves the result from the top of the stack into the eax register
;The result can now be used for further calculations or output

_exit: ;Label for exit subroutine
mov ebx, 0 ;Moves the value 0 into the ebx register
mov eax, 1 ;Moves the value 1 into the eax register
int 0x80 ;Calls the system call to exit the program
 
section .data ;Start of the data section
msg db "The result of the addition is: %d", 10, 0 ;Message to print the result of the addition
len equ $-msg ;Length of the message in bytes
 
section .bss ;Start of the uninitialized data section
res resd 1 ;Reserve 1 doubleword (4 bytes) for the result of the addition

;Printing the result
mov [res], eax ;Moves the result from the eax register into the reserved memory
mov eax, 4 ;Moves the value 4 (system call for writing to standard output) into the eax register
mov ebx, 1 ;Moves the value 1 (standard output file descriptor) into the ebx register
mov ecx, msg ;Moves the address of the message into the ecx register
mov edx, len ;Moves the length of the message into the edx register
int 0x80 ;Calls the system call to write to standard output

;Exiting the program
call _exit ;Calls the exit subroutine