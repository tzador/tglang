.data                   // start of data section
    array DWORD 10, 20, 30, 40      // declaring an array with values 10, 20, 30, 40
    size DWORD ($ - array) / 4       // calculating the size of the array (4 bytes per element)

.code                   // start of code section
    main PROC
        mov eax, 0           // initialize register eax with 0
        mov ebx, 0           // initialize register ebx with 0
        mov esi, 0           // initialize register esi with 0

    loop_start:           // loop label
        cmp esi, size       // compare current index to size of array
        jge loop_end        // if current index is greater than or equal to size, end the loop

        mov eax, array[esi]     // move element at current index in array to register eax
        add ebx, eax            // add current element to sum in register ebx

        inc esi             // increment current index
        jmp loop_start      // jump to loop label and repeat loop

    loop_end:           // loop end label
        mov sum, ebx        // move final sum in register ebx to variable sum
        mov eax, sum        // move sum to register eax

    main ENDP

END main                   // end of program