;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This is a complex code snippet written in Assembly language.
; It calculates the Fibonacci sequence up to an inputted number.
;
; Inputs:
;   0x20    ; Represents the number of Fibonacci numbers to calculate
;
; Outputs:
;   The calculated Fibonacci sequence, stored in the 'sequence' variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Create a variable to store the inputted number
    .data
inputNum  db 0
;
; Create a variable to store the sequence
sequence  db 0
;
; Initialize the registers
    .code
    .startup
start:
    mov     ah, 0x0a        ; Move 0x0a into the AH register for input
    mov     dx, offset msg  ; Move the message prompt into the DX register
    int     0x21            ; Call the DOS interrupt to print the message
    mov     ah, 0x01        ; Move 0x01 into the AH register for input
    int     0x21            ; Call the DOS interrupt to receive input
    sub     al, 0x30        ; Subtract 0x30 (ASCII value of '0') from the input
    mov     inputNum, al    ; Store the inputted number in the inputNum variable
    mov     sequence[0], 0  ; Initialize the first element of the sequence to 0
    mov     sequence[1], 1  ; Initialize the second element of the sequence to 1
    mov     cl, inputNum    ; Move the inputted number into CL register for counting
    mov     bx, 2           ; Initialize BX register as the index for the sequence array
loop:
    mov     ax, sequence[bx-1]  ; Move the value at the previous index into AX register
    add     ax, sequence[bx-2]  ; Add the value at the second previous index
    mov     sequence[bx], ax    ; Store the result in the current index of the sequence
    inc     bx                  ; Increment the index
    loop    loop                ; Repeat for the remaining numbers
;
; Print the calculated sequence
print:
    mov     ah, 0x02        ; Move 0x02 into the AH register for output
    add     sequence[bx], 0 ; Add 0 to convert the value to ASCII character
    add     sequence[bx], 0x30 ; Add 0x30 to convert the value to its ASCII equivalent
    mov     dl, sequence[bx] ; Move the value into the DL register for output
    int     0x21            ; Call the DOS interrupt to output the character
    dec     bx              ; Decrement the index
    cmp     bx, 1           ; Compare the index to 1, the starting point of the sequence
    jne     print           ; Repeat until the entire sequence is printed
;
    .exit                   ; End the program
    end     start           ; Set the start label as the entry point