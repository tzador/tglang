; This code snippet is a function that takes in two integers as parameters and returns the larger of the two.

; Set up function prologue
push ebp      ; save current base pointer
mov ebp, esp  ; set new base pointer
push ebx      ; save callee-saved registers
push ecx
push edx

; Get parameters from stack
mov eax, [ebp+8]   ; move first parameter to eax register
mov ebx, [ebp+12]  ; move second parameter to ebx register

; Compare the two parameters
cmp eax, ebx       ; compare eax and ebx
jg _return_eax     ; jump to _return_eax label if eax is greater than ebx
jl _return_ebx     ; jump to _return_ebx label if ebx is greater than eax

; Both parameters are equal, return either one
jmp _return_eax    ; jump to _return_eax label

_return_eax:       ; label to return value in eax register
mov esp, ebp       ; restore stack pointer
pop edx            ; restore callee-saved registers
pop ecx
pop ebx
pop ebp            ; restore base pointer
ret                ; return to caller with value in eax register

_return_ebx:       ; label to return value in ebx register
mov esp, ebp       ; restore stack pointer
pop edx            ; restore callee-saved registers
pop ecx
pop ebx
pop ebp            ; restore base pointer
mov eax, ebx       ; move value in ebx register to eax register
ret                ; return to caller with value in eax register

; Set up function epilogue
_pop_parameters:   ; label to clean up parameters on stack
add esp, 8         ; add 8 bytes to stack pointer to clean up 2 parameters
ret                ; return to caller