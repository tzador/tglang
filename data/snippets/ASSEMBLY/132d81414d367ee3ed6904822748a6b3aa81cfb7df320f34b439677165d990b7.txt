; This code snippet calculates the sum of two numbers in assembly language

org 100h ; sets starting address for the code

main: ; main function
   mov ax, num1 ; moves value of num1 into ax register
   add ax, num2 ; adds value of num2 to ax register
   mov result, ax ; moves result to memory location
  
   mov ah, 09h ; prepares print statement
   mov dx, msg ; moves message to register
   int 21h ; prints message
  
   mov ax, result ; moves result into ax register
   mov bh, 0 ; sets output color to black
   mov bl, 10 ; sets output base to decimal
   call print ; calls print function to display result
  
   mov ah, 4Ch ; ends program execution
   int 21h ; interrupts program
  
print: ; print function
   push ax ; saves ax register value to stack
   push bx ; saves bx register value to stack
  
   mov cx, 0 ; counter for number of digits
   mov bx, 10 ; sets divisor to 10
   xor dx, dx ; clears dx register
   div bx ; divides ax by bx, quotient in ax, remainder in dx
  loop: ; loop to get number of digits in result
   inc cx ; increments counter
   xor dx, dx ; clears dx register
   div bx ; divides ax by bx again
   cmp ax, 0 ; checks if ax is equal to 0
   jne loop ; loops if ax is not equal to 0
  
   mov bx, cx ; moves number of digits into bx register
   mov ah, 02h ; prepares print statement for character output
   xor cx, cx ; clears cx register
   pop ax ; restores previous ax register value from stack
  
  outputLoop: ; loop to output digits in result
   mov dl, 48 ; sets dl to '0' ASCII value
   div bx ; divides ax by bx, quotient in ax, remainder in dx
   or dl, al ; adds remainder (0-9) to '0' to get ASCII value of digit
   mov bx, 0 ; resets bx register
   mov dl, ah ; moves character to dl register for output
   mov ah, 02h ; prepares print statement for character output
   int 21h ; outputs character
   mov bx, result ; moves result back to bx register
   sub dx, dx ; clears dx register
   xor ax, ax ; clears ax register
   cmp bl, 0 ; checks if bx register is equal to 0
   jne outputLoop ; loops if bx register is not equal to 0
  
   pop bx ; restores previous bx register value from stack
   pop ax ; restores previous ax register value from stack
   ret ; returns from function
  
msg db 'The sum of ', num1, ' and ', num2, ' is: $' ; message to be printed
result dw ? ; memory location to store result
num1 dw 15 ; first number to be added
num2 dw 27 ; second number to be added
  
end main ; ends main function