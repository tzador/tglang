BITS 32                ; sets the assembly code to 32-bit mode

global main            ; declares the main function as global

section .text          ; declares section for storing code

main :                 ; start of the main function

    mov ecx, 0         ; moves the value 0 into the ecx register for looping
    mov ebx, 1         ; moves the value 1 into the ebx register for comparison
    mov eax, 0         ; moves the value 0 into the eax register for holding results

    start_loop :
        cmp ecx, 5     ; compares the value in ecx to 5
        je exit_loop   ; if equal, jump to the exit_loop label

        add eax, ebx   ; adds the value in ebx to the value in eax and stores the result in eax
        inc ecx        ; increments the value in ecx by 1
        jmp start_loop ; jumps back to the start_loop label for looping again

    exit_loop :
        mov edx, eax   ; moves the value in eax to the edx register for printing

section .data          ; declares section for storing data

    message db 'The result is: ', 0Ah   ; declares string with new line character (0Ah) at the end
    len equ $ - message                ; calculates the length of the string and stores it in len

section .text          ; declares section for storing code

    mov eax, 4         ; moves the system call number for printing to eax
    mov ebx, 1         ; moves the file descriptor (stdout) to ebx
    mov ecx, message   ; moves the address of the string to the ecx register
    mov edx, len       ; moves the length of the string to the edx register
    int 80h            ; calls the system interrupt for printing (prints "The result is: [result]")

    mov eax, 1         ; moves the system call number for exiting to eax
    xor ebx, ebx       ; clears the ebx register
    int 80h            ; calls the system interrupt for exiting