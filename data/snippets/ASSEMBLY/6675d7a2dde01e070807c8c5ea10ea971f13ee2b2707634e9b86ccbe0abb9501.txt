.code
  ; Define variables
  variable1 DB 12     ; Define variable1 as a byte and initialize to 12
  variable2 DW 100    ; Define variable2 as a word and initialize to 100
  variable3 DD 10     ; Define variable3 as a double word and initialize to 10
  ; Reserve space for arrays
  array1 RB 10        ; Reserves 10 bytes of space for array1
  array2 RW 5         ; Reserves 5 words of space for array2
  array3 RD 3         ; Reserves 3 double words of space for array3
  ; Move values into arrays
  MOV array1[0], 1    ; Move 1 into the first index of array1
  MOV array2[3], 2    ; Move 2 into the fourth index of array2
  MOV array3[1], 3    ; Move 3 into the second index of array3
  ; Access variables and arrays
  MOV EAX, variable1  ; Move the value of variable1 into the EAX register
  ADD EAX, variable2  ; Add the value of variable2 to the EAX register
  ; Perform conditional jump based on result in EAX
  CMP EAX, 120        ; Compare the value in EAX to 120
  JA check1           ; Jump to check1 if EAX is greater than 120
  JBE check2          ; Jump to check2 if EAX is less than or equal to 120
  ; Create a loop
  MOV ECX, 5          ; Initialize loop counter to 5
  loop_start:         ; Label for the start of the loop
  ; Move values into array dynamically
  MOV array1[ECX], ECX   ; Move the value of ECX into the index of array1
  DEC ECX                ; Decrement the loop counter
  JNZ loop_start         ; Jump to loop_start if ECX is not equal to zero
  ; End of program
  JMP end_program        ; Jump to end_program
  check1:
  ; Do something if EAX is greater than 120
  check2:
  ; Do something if EAX is less than or equal to 120
  end_program:
  ; End of program, code continues here
.endcode