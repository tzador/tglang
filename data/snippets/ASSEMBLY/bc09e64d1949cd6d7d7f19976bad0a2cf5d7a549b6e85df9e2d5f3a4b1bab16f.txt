; Sample code for Fibonacci series in assembly language

    SECTION .text       ; Code section

    global _start       ; Declare _start symbol for linking

_start:                 ; Beginning of _start block

    mov ecx, 0          ; Initialize counter to 0
    mov ebx, 1          ; Initialize previous value to 1
    mov eax, 1          ; Initialize current value to 1

    ; Print first two numbers in Fibonacci series - 0 and 1
    mov edx, 0          ; Zero out edx to hold the first digit
    mov al, [ecx]       ; Move counter value to al
    add al, 48          ; Convert counter value to ASCII code for printing
    mov [num1], eax     ; Move first number to variable num1
    mov eax, 1
    mov [num2], eax     ; Move second number to variable num2
    mov eax, 4          ; System call number for 'write'
    mov ebx, 1          ; Standard output
    mov ecx, num1       ; Address of num1 variable
    mov edx, 1          ; Number of characters to print - 1
    int 0x80            ; Call kernel to print first number
    mov eax, 4
    mov ebx, 1
    mov ecx, num2       ; Address of num2 variable
    mov edx, 1
    int 0x80            ; Call kernel to print second number
    inc ecx             ; Increment counter for the next number in Fibonacci series

    ; Loop to generate and print the rest of the Fibonacci series
loop:
    add eax, ebx        ; Add current and previous values to get next value in series
    mov edx, 0
    mov al, [ecx]       ; Move counter value to al
    add al, 48          ; Convert counter value to ASCII code for printing
    mov [num1], eax     ; Move next number to variable num1
    mov eax, 4          ; System call number for 'write'
    mov ecx, num1       ; Address of num1 variable
    mov edx, 1          ; Number of characters to print - 1
    int 0x80            ; Call kernel to print next number

    mov ebx, [num2]     ; Move current value to ebx to use it as previous value for next iteration
    mov eax, [num1]     ; Move next value to eax to use it as current value for next iteration
    inc ecx             ; Increment counter for the next number in Fibonacci series

    ; Check if counter has reached maximum value of 10
    cmp ecx, 10
    jne loop            ; If not, jump back to loop

    ; End program
    mov eax, 1          ; System call number for 'exit'
    xor ebx, ebx        ; Return 0 (success)
    int 0x80            ; Call kernel to exit program

    SECTION .bss        ; Uninitialized data section
    num1 resb 4         ; Reserve 4 bytes for variable num1
    num2 resb 4         ; Reserve 4 bytes for variable num2