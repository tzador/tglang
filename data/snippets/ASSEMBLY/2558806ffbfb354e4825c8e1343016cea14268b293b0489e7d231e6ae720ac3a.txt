.section .data
message: db 'Hello, World!',0xa,0x0 ; declaring a string variable

.section .bss
buffer: resb 20 ; reserving 20 bytes of space for a buffer variable

.section .text
.globl _start
_start:
    movl $4, %eax ; setting the sys_write system call number to eax register
    movl $1, %ebx ; setting file descriptor of standard output to ebx register
    movl $message, %ecx ; loading the address of the message variable to ecx register
    movl $15, %edx ; setting the length of the message to edx register
    int $0x80 ; invoking the system call using interrupt

    movl $3, %eax ; setting the sys_read system call number to eax register
    movl $0, %ebx ; setting file descriptor of standard input to ebx register
    movl $buffer, %ecx ; loading the address of the buffer variable to ecx register
    movl $20, %edx ; setting the maximum number of characters to read to edx register
    int $0x80 ; invoking the system call using interrupt

    movl %eax, %ebx ; saving the number of characters read to ebx register
    movl $4, %eax ; setting the sys_write system call number to eax register
    movl $1, %ebx ; setting file descriptor of standard output to ebx register
    movl $buffer, %ecx ; loading the address of the buffer variable to ecx register
    int $0x80 ; invoking the system call using interrupt

    movl $1, %eax ; setting the sys_exit system call number to eax register
    movl $0, %ebx ; setting the exit status to 0
    int $0x80 ; invoking the system call using interrupt