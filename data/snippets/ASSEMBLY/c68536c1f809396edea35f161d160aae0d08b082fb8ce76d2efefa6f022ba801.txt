;; Beginning of Assembly code
;;;;;;;; CODE SEGMENT
    ORG 100h ; specify the start address for the program at 100h
 
    MOV AX,0   ; clear AX register
    MOV BX,7   ; load BX with the value 7
    MOV CX,10  ; load CX with the value 10
 
    LOOP_START: ; define a label for the beginning of loop
 
    ; do some arithmetic operations
    ADD AX,CX
    ADD BX,AX
    SUB CX,1
 
    CMP CX,0   ; compare CX with 0
    JNZ LOOP_START ; jump to LOOP_START if CX is not equal to 0
 
    ; print the final result
    MOV AH,02h  ; specify the function for printing
    MOV DL, 'A' ; load the character 'A' to DL register
    INT 21h ;
;;;;;;;;END_CODE
  
;;;;;;; CODE ENDS

;;;;;;; DATA SEGMENT
    ORG 200h ; specify the start address for the data segment at 200h
    MESSAGE DB 'Hello World!',0 ; define a string variable
;;;;;;; END_DATA


;;;;;;; STACK SEGMENT
;;;;;;; CODE ENDS
 
    MOV AX,100h ; load the start address of the code segment to AX
    MOV SS,AX ; set the stack segment to the code segment
    MOV SP,START ; set the stack pointer to the beginning of the stack
 
    ; insert any additional code here
 
    ; exit program
    MOV AH,4Ch ; specify the exit function
    INT 21h ;
 
;;;;;;; MAIN PROC
    .START: ; define the beginning of the program execution
 
    ; insert any code here
 
    CALL CODE_SEGMENT ; call the code segment
    CALL DATA_SEGMENT ; call the data segment
    CALL STACK_SEGMENT ; call the stack segment
;;;;;;; ENDPROC  ; end of the main procedure
 
;;;;;;; END_MAIN
;; End of Assembly code