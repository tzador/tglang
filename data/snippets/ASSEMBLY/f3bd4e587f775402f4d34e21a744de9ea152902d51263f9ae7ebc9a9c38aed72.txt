; This code snippet checks for a prime number using the Sieve of Eratosthenes algorithm

section .data
    num dw 131 ; change the value to check for different numbers

section .text
    global _start

_start:
    mov ax, 0
    mov bx, 2
    mov cx, 2
    div bx ; number divided by 2 to start checking from 2
    cmp dx, 0 ; check if there's a remainder
    je not_prime ; if there is, number is not prime

    ; initialize the array to store possible divisors
    mov di, 2
    mov word [di], 2 ; set first divisor as 2
    inc di ; increment index for next possible divisor

    ; loop to check for other possible divisors
divisor_loop:
    cmp cx, di ; check if all possible divisors have been checked
    je prime ; if all have been checked, number is prime
    mov ax, [di] ; get next possible divisor
    mov dx, 0 ; clear dx register
    div bx ; divide number by divisor
    cmp dx, 0 ; check if there's a remainder
    je not_prime ; if there is, number is not prime

    ; store next possible divisor in array and increment index
    add ax, 1 ; increase divisor by 1
    mov word [di], ax
    inc di

    jmp divisor_loop ; repeat loop to check next possible divisor

prime:
    ; output success message
    mov ax, 4
    mov bx, 1
    lea dx, [prime_message]
    mov cx, prime_message_len
    int 0x21

    ; exit program
    mov ax, 1
    mov bx, 0
    int 0x21

not_prime:
    ; output failure message
    mov ax, 4
    mov bx, 1
    lea dx, [not_prime_message]
    mov cx, not_prime_message_len
    int 0x21

    ; exit program
    mov ax, 1
    mov bx, 0
    int 0x21

section .data
    prime_message db "The number is prime.", 0xa, 0xd ; success message
    prime_message_len equ $ - prime_message ; length of success message
    not_prime_message db "The number is not prime.", 0xa, 0xd ; failure message
    not_prime_message_len equ $ - not_prime_message ; length of failure message