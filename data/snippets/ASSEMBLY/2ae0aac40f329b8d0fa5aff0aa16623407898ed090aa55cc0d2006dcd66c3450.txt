; This code snippet calculates the Fibonacci sequence up to a specified number
section .data
  num db 10 ; number of Fibonacci numbers to calculate
  sequence db 0, 1 ; initial values of the sequence

section .text
  global _start

_start:
  mov eax, 0 ; initialize counter
  mov ecx, num ; load number into counter
  mov ebx, 2 ; set ebx to 2 for indexing
  mov [sequence + 2], ecx ; store num in sequence at index 2

calculate_sequence:
  ; Calculate the next Fibonacci number

  ; Move the last two numbers in the sequence into ecx and edx
  mov ecx, [sequence + eax]
  mov edx, [sequence + ebx]

  ; Add the two numbers together and store in eax
  add ecx, edx
  mov eax, ecx

  ; Store the new number in the sequence
  mov [sequence + ebx + 1], eax

  ; Increment counters
  inc eax
  inc ebx

  ; Check if we have reached the end of the sequence
  cmp eax, num
  jne calculate_sequence ; if not, jump back to calculate_sequence
  
  ; Print out the Fibonacci sequence
  mov eax, 1 ; set the count to 1
  print_sequence:
    mov ebx, eax ; move count to ebx for indexing
    ; Move the Fibonacci numbers from sequence into ecx to be printed
    mov ecx, [sequence + ebx]
    ; Print out the number in ecx
    mov eax, 4 ; set eax to 4 for printf syscall
    mov ebx, 1 ; set ebx to 1 for stdout
    int 0x80 ; call the syscall
    inc eax
    cmp eax, num ; check if we have reached the end of the sequence
    jne print_sequence ; if not, jump back to print_sequence
    
  ; End program
  mov eax, 1 ; set eax to 1 for exit syscall
  xor ebx, ebx ; set ebx to 0
  int 0x80 ; call the syscall