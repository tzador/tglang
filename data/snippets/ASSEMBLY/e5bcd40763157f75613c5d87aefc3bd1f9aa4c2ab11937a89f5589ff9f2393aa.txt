; This program calculates the factorial of a given number using recursion

section .data ; Define data section
    msg db "Factorial of %d is %d", 0xA, 0x0 ; Define message to print at the end of the program

section .text ; Define code section
    global _start ; Declare the entry point of the program as '_start'

_start:
    mov eax, 6 ; Move the given number to register 'eax' (i.e. 6!)
    call factorial ; Call the 'factorial' subroutine to calculate the factorial
    add eax, 48 ; Add 48 to the result to convert it into ASCII character
    push eax ; Push the result onto the stack
    mov eax, 4 ; Load system call number for 'write' from './include/unistd_64.asm'
    mov ebx, 1 ; Load file descriptor for 'stdout'
    mov ecx, esp ; Load the address of the result from the top of the stack
    mov edx, 2 ; Load number of characters to print (two digits for the ASCII character)
    int 0x80 ; Call the Linux system call to print the result

    mov eax, 1 ; Load system call number for 'exit'
    xor ebx, ebx ; Load exit status of 0
    int 0x80 ; Call the Linux system call to exit the program

; Subroutine for calculating the factorial using recursion
factorial:
    push ebp ; Save the base pointer onto stack
    mov ebp, esp ; Set the base pointer to the top of the stack
    cmp dword [ebp+8], 1 ; Check if the given number is less than or equal to 1
    jle .base_case ; If yes, jump to the base case
    dec dword [ebp+8] ; Decrement the given number by 1
    push dword [ebp+8] ; Push the decremented number onto the stack
    call factorial ; Call the 'factorial' subroutine again with the decremented number
    imul dword [ebp+8], eax ; Multiply the returned result with the original number
    jmp .end ; Jump to the end of the subroutine
.base_case:
    mov eax, 1 ; Set the result to 1
.end:
    mov esp, ebp ; Restore the stack pointer to the base pointer
    pop ebp ; Restore the base pointer from the stack
    ret ; Return from the subroutine