main:
    push ebp       ; push base pointer onto stack
    mov ebp,esp    ; move stack pointer into base pointer
    sub esp,8      ; allocate 8 bytes on stack for local variables

    push eax       ; push eax onto stack
    push ebx       ; push ebx onto stack

    mov ebx,0      ; initialize ebx as counter
    mov eax,1      ; initialize eax as first Fibonacci number 
    mov ecx,10     ; set loop counter to 10

fib_loop:
    mov edx,eax    ; copy current Fibonacci number into edx
    add edx,ebx    ; add previous Fibonacci number to current
    mov ebx,eax    ; move current number into ebx
    mov eax,edx    ; move sum into eax to set next number

    push eax       ; push eax onto stack
    call print     ; call function to print current Fibonacci number
    add esp,4      ; adjust stack pointer by 4 bytes

    loop fib_loop  ; continue loop until ecx becomes 0

    pop ebx        ; pop previous value of ebx off stack
    pop eax        ; pop previous value of eax off stack

    add esp,8      ; deallocate 8 bytes from stack
    pop ebp        ; restore base pointer
    ret            ; return to calling function

print:
    push ebp       ; push base pointer onto stack
    mov ebp,esp    ; move stack pointer into base pointer
    sub esp,4      ; allocate 4 bytes on stack for local variables

    mov eax,[ebp+8] ; move Fibonacci number parameter into eax
    push eax        ; push eax onto stack
    call convert    ; call function to convert number into ASCII string
    add esp,4       ; adjust stack pointer by 4 bytes

    mov eax,4       ; prepare for system call
    mov ebx,1       ; file descriptor for stdout
    mov ecx,[ebp-4] ; address of ASCII string parameter
    mov edx,[ebp+4] ; length of string parameter
    int 0x80        ; make system call

    add esp,4       ; deallocate 4 bytes from stack
    pop ebp         ; restore base pointer
    ret             ; return to calling function

convert:
    push ebp        ; push base pointer onto stack
    mov ebp,esp     ; move stack pointer into base pointer
    sub esp,8       ; allocate 8 bytes on stack for local variables

    mov esi,[ebp+8] ; move number parameter into esi
    mov edi,[ebp-4] ; move address of string variable into edi
    mov ecx,10      ; set loop counter to 10 (for up to 10 digit numbers)

convert_loop:
    xor eax,eax     ; clear eax
    div ecx         ; divide number by 10
    add al,'0'      ; convert remainder to ASCII character
    mov [edi],al    ; store character in string variable
    inc edi         ; increment string variable address
    cmp esi,0       ; check if number is 0
    je end_convert  ; if number is 0, exit loop
    jmp convert_loop; else, continue loop

end_convert:
    mov byte [edi],0 ; add null terminator to end of string
    add esp,8        ; deallocate 8 bytes from stack
    pop ebp          ; restore base pointer
    ret              ; return to calling function