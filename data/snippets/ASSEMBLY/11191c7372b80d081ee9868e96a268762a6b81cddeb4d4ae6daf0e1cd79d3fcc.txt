; Code to convert a binary number to decimal

; Initializing necessary variables
Bit_Value  DW  128         ; Value of the MSB (Most Significant Bit)
Multiplier DW  1           ; Stores the multiplier for each bit position
Binary_Num DW  10010111b   ; Binary number to be converted
Decimal_Num DW  0          ; Variable to store the resulting decimal number

; Loop to convert binary number to decimal
Loop:
    MOV  AX, Binary_Num      ; Move the binary number to the AX register
    AND  AX, Bit_Value       ; Perform AND operation on the binary number and bit value
    CMP  AX, 0               ; Compare the result with 0
    JE   NextBit             ; If result is 0, skip to the next bit
    ADD  Decimal_Num, Multiplier   ; If result is not 0, add the multiplier to the decimal number
NextBit:
    SHR  Bit_Value, 1        ; Shift the bit value to the right by 1
    ADD  Multiplier, Multiplier    ; Double the multiplier for the next bit position
    CMP  Bit_Value, 0        ; Compare the bit value with 0
    JNE  Loop                ; If bit value is not 0, continue loop

; Print the resulting decimal number
    MOV  AX, Decimal_Num     ; Move the decimal number to the AX register
    CALL Print_Dec           ; Call print subroutine to print the decimal number
    RET                      ; Return to main program

; Subroutine to print a decimal number
Print_Dec:
    PUSH AX              ; Save AX register value
    MOV  CX, 10          ; Initialize CX as the divisor
    XOR  DX, DX          ; Clear DX register
Div_Loop:
    DIV  CX              ; Divide AX by CX
    ADD  DL, '0'         ; Convert remainder to ASCII
    MOV  AH, 02h         ; Use AH=02h to print character
    INT  21h             ; Print the character
    XOR  AX, AX          ; Clear AX register for next division
    CMP  AX, 0           ; Check if AX = 0
    JNE  Div_Loop        ; If not, continue division
    MOV  AL, 0Dh         ; Newline character
    INT  21h             ; Print newline character
    POP  AX              ; Restore AX register value
    RET                  ; Return to main program