; This code snippet is an example of a bubble sort algorithm implemented in Assembly
; It takes an array of integers and sorts it in ascending order

; Declare variables
array     DW     6, 5, 4, 3, 2, 1      ; Define array of size 6 with unsorted integers
size      EQU    6                     ; Define constant for array size
temp      DW     ?                     ; Define temporary variable for swapping
i         DW     ?                     ; Define counter variable
j         DW     ?                     ; Define counter variable

; Initialize counter variables
mov       i, 0                       ; Initialize i = 0
mov       j, 0                       ; Initialize j = 0

; Outer loop
outer: cmp     i, size                ; i < size
       jnz     exit                   ; If i = size, exit loop
         
; Inner loop
inner: mov     ax, 0                  ; Initialize ax = 0
       mov     bx, 0                  ; Initialize bx = 0
       mov     ax, [array + j]        ; Load current array element into ax
       mov     bx, [array + j + 2]    ; Load next array element into bx
       cmp     ax, bx                 ; Compare ax and bx
       jle     continue               ; If ax <= bx, continue sorting
       xchg    ax, bx                 ; Swap elements
       mov     [array + j], ax        ; Store new value in current array element
       mov     [array + j + 2], bx    ; Store new value in next array element
   continue:
       inc     j                      ; Increment j
       cmp     j, size - 1            ; j < size - i - 1
       jne     inner                  ; If j != size - i - 1, continue inner loop
       
; Increment i and restart inner loop
inc        i                          ; Increment i
jmp        outer                      ; Go to next iteration of outer loop

; Exit loop
exit:     mov     ax, [array]          ; Load first element of sorted array
          mov     bx, [array + 2]      ; Load second element of sorted array
          cmp     ax, bx               ; Compare first and second element
          jle     done                 ; If first element <= second element, array is sorted
          jmp     outer                ; Else, continue sorting

; Print sorted array
done:     mov     ax, 0                 ; Initialize ax = 0
          mov     bx, 0                 ; Initialize bx = 0
          mov     ax, [array]           ; Load first element of sorted array
          mov     bx, [array + 2]       ; Load second element of sorted array
          jmp     print                 ; Jump to printing subroutine

; Subroutine to print array elements
print:    add     ax, 30h               ; Convert integer to ASCII character
          add     bx, 30h               ; Convert integer to ASCII character
          mov     ah, 0Eh               ; Initialize ah register for printing
          int     10h                   ; Print character in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          mov     al, ' '               ; Print space between elements
          int     10h                   ; Print space in al register
          add     bx, 30h                ; Convert integer to ASCII character
          mov     al, bl                 ; Store second element in al register for printing
          int     10h                    ; Print character in al register
          mov     al, 0Dh                ; Print carriage return
          int     10h                    ; Print carriage return
          cmp     ax, size - 1           ; ax < size
          jnz     print                  ; If ax != size - 1, continue printing
          
; End of program
          mov     ah, 0                 ; Initialize ah register for printing
          int     20h                   ; Exit program