; This code snippet calculates the first 10 Fibonacci numbers and stores them in an array

; Data section initializes array and variables
.data
array:  DW 10 DUP (?)    ; define an array of 10 values, each of size DWORD
n1:     DWORD 0          ; initialize first Fibonacci number to zero
n2:     DWORD 1          ; initialize second Fibonacci number to one
count:  DWORD 10         ; initialize loop count to 10 for first 10 Fibonacci numbers

; Code section
.code
main:
    mov esi, 0           ; esi points to start of array
    mov ecx, count       ; store loop count in ecx register
    mov eax, n1          ; store first Fibonacci number in eax register
    mov ebx, n2          ; store second Fibonacci number in ebx register
    add esi, 4           ; increment esi to point to next index in array

loop:
    mov [esi], eax       ; store current Fibonacci number in array
    add esi, 4           ; increment esi to point to next index in array
    mov edx, eax         ; store current Fibonacci number in edx register
    add edx, ebx         ; add current and previous Fibonacci numbers
    mov eax, ebx         ; store previous Fibonacci number in eax register
    mov ebx, edx         ; store new Fibonacci number in ebx register
    loop loop            ; loop until ecx register is decremented to zero

; Print array elements
    mov esi, 0           ; esi points to start of array
print_loop:
    mov edx, [esi]       ; move value from array to edx register
    call print_decimal   ; call a function to print decimal numbers
    add esi, 4           ; increment esi to point to next index in array
    loop print_loop      ; loop until all array elements are printed

; End of code section
exit:
    mov ah, 0            ; set ah register to 0
    int 21h              ; terminate program


; Function to print decimal numbers
; Input: edx register contains decimal integer to print
print_decimal proc
    push ax           ; save contents of registers
    push bx
    pushcx
    push dx

    mov bx, 10        ; divisor for dividing decimal number by 10
    xor ecx, ecx      ; initialize counter

    repeat:
    xor dx, dx        ; clear dx register
    div bx            ; divide edx register by 10
    push dx           ; push remainder (digit) onto stack
    inc ecx           ; increment counter
    or  ax, ax        ; check if edx is zero
    jne repeat        ; loop until edx is zero

    mov ah, 9         ; set ah register to 9 for printing string
    mov ecx, esp      ; point to top of stack
    pop dx            ; pop digit off stack
    print_loop:       ; loop to print digits in reverse order
    pop ax            ; pop digit off stack
    add al, 48        ; convert to ASCII character
    int 21h           ; call interrupt to print character
    loop print_loop   ; loop until all digits are printed
    pop dx            ; pop remaining digit off stack

    pop cx           ; restore contents of registers
    pop bx
    pop ax

    ret                 ; return from function

print_decimal endp

end main                  ; specify end of main program
    .EXIT                ; pseudo-op to end program execution
end                        ; end of assembly code