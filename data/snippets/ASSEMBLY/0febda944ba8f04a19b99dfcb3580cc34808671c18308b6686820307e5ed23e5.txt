; Sample code snippet in Assembly

; Data section
.data
    array              dw      1, 2, 3, 4, 5      ; Define array of size 5

; Code section
.code
    .main
        mov      dx, offset array         ; Load the address of array into DX
        mov      cx, 5                    ; Initialize the counter to 5
        mov      ax, 0                    ; Initialize the sum to 0

    .loop:
        add      ax, [dx]                 ; Add the value at the current index to the sum
        add      dx, 2                    ; Increment the address by 2 bytes
        loop     .loop                    ; Decrement the counter and loop until it reaches 0
        cmp      ax, 15                   ; Compare the sum with 15
        je       .equal                   ; Jump to .equal if they are equal
        jne      .not_equal               ; Jump to .not_equal if they are not equal

    .equal:
        mov      bx, 1                    ; Set BX register to 1
        mov      [dx], bx                 ; Store the value of BX at the current index in array
        jmp      .end                     ; Jump to .end

    .not_equal:
        mov      bx, 0                    ; Set BX register to 0
        mov      [dx], bx                 ; Store the value of BX at the current index in array
        jmp      .end                     ; Jump to .end

    .end:
        mov      ah, 4Ch                  ; Set AH to 4Ch for exiting
        int      21h                      ; Call interrupt 21h to exit the program

end .main                               ; End of main program