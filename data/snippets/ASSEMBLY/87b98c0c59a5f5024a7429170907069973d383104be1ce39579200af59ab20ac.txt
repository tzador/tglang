; This code snippet calculates the factorial of a number using recursion

section .data    ; declaring data section

    number db 5    ; the number whose factorial is to be calculated
    res dw 1    ; variable to store the result

section .text    ; declaring code section

    global _start    ; global label for start of code

    _start:    ; start of code

    mov al, number    ; moving the number to al register
    call fact    ; calling the fact function
    jmp exit    ; jump to exit label

fact:    ; fact function

    cmp al, 1    ; comparing number in al register to 1
    jle end_fact    ; jumping to end_fact label if number is less than or equal to 1

    dec al    ; decrementing the number in al register
    push ax    ; pushing ax register onto stack
    call fact    ; calling the fact function again
    pop ax    ; popping the top value from stack into ax register
    mul al, res    ; multiplying current number in al register with res variable
    mov res, al    ; moving the result to res variable

end_fact:    ; end_fact label
    ret    ; return to previous caller

exit:    ; exit label
    mov cx, res    ; moving the result to cx register
    call print    ; calling the print function
    mov ah, 0    ; moving 0 to ah register
    mov al, 1    ; moving 1 to al register for exit system call
    int 0x80    ; executing the exit system call

print:    ; print function

    push bx    ; pushing bx register onto stack
    mov bx, cx    ; moving the result in cx register to bx register
    mov al, bl    ; moving the low-order byte of bx to al register
    mov ah, 0x0E    ; moving 0x0E to ah register for printing character
    add al, 48    ; adding 48 to al register to convert to ASCII character
    int 0x10    ; executing the interrupt to print character
    mov al, bh    ; moving the high-order byte of bx to al register
    mov ah, 0x0E    ; moving 0x0E to ah register for printing character
    add al, 48    ; adding 48 to al register to convert to ASCII character
    int 0x10    ; executing the interrupt to print character
    pop bx    ; popping the top value from stack into bx register
    ret    ; return to previous caller