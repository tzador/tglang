; Example of a complex code snippet in ASSEMBLY
.MODEL small                                ; Define the memory model as "small"
.STACK 100h                                 ; Define the stack size as 100 hexadecimal
.DATA                                       ; Start the data segment
    message1 db 'Hello, World!',0Dh,0Ah,'$' ; Define a string message
    number dw 12345                          ; Define a word variable
    array1 db 10 dup(?)                      ; Define a 10-byte array with uninitialized elements
    array2 db 5 dup('!')                     ; Define a 5-byte array with initialized elements
    matrix3 dw 2 dup(5 dup(?))               ; Define a 2x5 matrix with uninitialized elements
.CODE                                       ; Start the code segment
    main PROC                               ; Declare the main procedure
        mov ax,@DATA                        ; Load the data segment into the AX register
        mov ds,ax                           ; Move the AX value into the DS register
        lea dx,message1                     ; Load the address of message1 into the DX register
        mov ah,09h                          ; Set the AH register to 09h to print a string
        int 21h                             ; Call the DOS interrupt 21h to print the string
        mov cx,number                       ; Move the value of number into the CX register
        mov ah,02h                          ; Set the AH register to 02h to print a character
        add cx,30h                          ; Add 30h to convert CX value to ASCII
        int 21h                             ; Call the DOS interrupt 21h to print the character
        mov si,0                            ; Initialize the SI register for the loop
        mov cx,10                           ; Initialize the CX register for the loop
    L1:                                     ; Start of the loop
        mov array1[si],cl                   ; Move the ASCII value of CL into the array1 element at index SI
        inc si                              ; Increment the SI register
        inc cl                              ; Increment the CL register
        loop L1                             ; Repeat the loop until CX reaches 0
        mov si,0                            ; Reset the SI register for the next loop
        mov cx,5                            ; Reset the CX register for the next loop
    L2:                                     ; Start of the loop
        mov array2[si],al                   ; Move the ASCII value of AL into the array2 element at index SI
        inc si                              ; Increment the SI register
        loop L2                             ; Repeat the loop until CX reaches 0
        mov si,0                            ; Reset the SI register for the next loop
        mov ah,09h                          ; Set the AH register to 09h to print a new line
        mov dl,0Dh                          ; Set the DL register to the ASCII value for carriage return
        int 21h                             ; Call the DOS interrupt 21h to print the new line
        mov dl,0Ah                          ; Set the DL register to the ASCII value for line feed
        int 21h                             ; Call the DOS interrupt 21h to print the new line
        mov cx,2                            ; Initialize the CX register for the outer loop
        mov bx,0                            ; Initialize the BX register for the inner loop
    L3:                                     ; Start of the outer loop
        mov dx,matrix3[bx]                  ; Move the value at index BX in matrix3 into the DX register
        mov cx,5                            ; Initialize the CX register for the inner loop
    L4:                                     ; Start of the inner loop
        add dx,30h                          ; Add 30h to convert DX value to ASCII
        mov ah,02h                          ; Set the AH register to 02h to print a character
        int 21h                             ; Call the DOS interrupt 21h to print the character
        inc bx                              ; Increment the BX register
        loop L4                             ; Repeat the inner loop until CX reaches 0
        mov ah,09h                          ; Set the AH register to 09h to print a new line
        mov dl,0Dh                          ; Set the DL register to the ASCII value for carriage return
        int 21h                             ; Call the DOS interrupt 21h to print the new line
        mov dl,0Ah                          ; Set the DL register to the ASCII value for line feed
        int 21h                             ; Call the DOS interrupt 21h to print the new line
        loop L3                             ; Repeat the outer loop until CX reaches 0
        mov ah,4Ch                          ; Set the AH register to 4Ch to terminate the program
        int 21h                             ; Call the DOS interrupt 21h to terminate the program
    main ENDP                               ; End of the main procedure
END main                                    ; End of the program with the label "main" as the entry point