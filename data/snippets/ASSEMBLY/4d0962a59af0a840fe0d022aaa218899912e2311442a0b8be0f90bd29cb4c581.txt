; Set up a loop to iterate through an array
; Registers:
; 1. ESI: points to the current array index
; 2. ECX: holds the number of elements in the array
; 3. EBX: holds the starting memory address of the array
; 4. EDX: empty register to hold temporary values

mov ebx, ARRAY_ADDRESS  ; Load the starting memory address of the array into EBX
mov ecx, ARRAY_SIZE     ; Load the number of elements in the array into ECX
mov esi, 0              ; Initialize ESI to 0, the first array index
loop_start:

; Check if we have reached the end of the array
cmp esi, ecx            ; Compare ESI to ECX
jge loop_end            ; If ESI >= ECX, jump to the end of the loop

; Access the current element in the array
mov edx, [ebx + esi*4]  ; Calculate the memory address of the current element using EBX and ESI, and load its value into EDX

; Perform operations on the element here
; ...

; Increment ESI to move to the next array index
inc esi                 ; Increase ESI by 1
jmp loop_start          ; Jump back to the beginning of the loop

loop_end:
; Loop ends here