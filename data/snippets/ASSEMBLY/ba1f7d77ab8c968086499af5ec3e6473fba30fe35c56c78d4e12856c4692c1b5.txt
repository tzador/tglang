SECTION .text          ; Declares section of code as '.text' for execution
 
global _start          ; Declares '_start' as starting point for execution
 
_start:
    ; Set up counters
    mov ecx, 0          ; Set counter for outer loop
    mov edx, 0          ; Set counter for inner loop
 
    ; Outer loop
    outer_loop:
        cmp ecx, 5      ; Compare counter to 5
        je end_outer    ; If equal, jump to end of outer loop
 
        ; Inner loop
        inner_loop:
            cmp edx, 3  ; Compare counter to 3
            je end_inner; If equal, jump to end of inner loop
 
            ; Perform computation using counters
            mov eax, ecx    ; Move value of outer loop counter into 'eax' register
            mul edx         ; Multiply value of inner loop counter with 'eax'
 
            ; Print result
            mov ebx, 1      ; Set 'ebx' register to 1 for 'write' system call
            mov ecx, msg    ; Move address of message to be printed into 'ecx' register
            mov edx, 8      ; Move length of message (8 bytes) into 'edx' register
            int 0x80        ; Call 'write' system call
 
            ; Increment inner loop counter
            inc edx         ; Increment value of 'edx' register
 
            jmp inner_loop  ; Jump back to beginning of inner loop
 
        end_inner:
        ; Reset inner loop counter
        mov edx, 0          ; Set inner loop counter back to 0
 
        ; Increment outer loop counter
        inc ecx             ; Increment value of 'ecx' register
 
        jmp outer_loop      ; Jump back to beginning of outer loop
 
    end_outer:
 
    ; Exit program
    mov ebx, 0          ; Set 'ebx' register to 0 for 'exit' system call
    mov eax, 1          ; Move '1' (exit status code) into 'eax' register
    int 0x80            ; Call 'exit' system call
 
SECTION .data          ; Declares section of code as '.data' for data storage
 
msg db "Result: %d", 0x0A  ; Declares 'msg' variable as string with newline character at end, specifies to print as decimal
 
SECTION .bss           ; Declares section of code as '.bss' for uninitialized global variables
 
; No uninitialized variables in this code