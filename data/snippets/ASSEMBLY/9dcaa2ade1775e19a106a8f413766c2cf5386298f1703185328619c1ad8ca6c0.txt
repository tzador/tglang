; This program finds the median of a list of numbers
SECTION .text ; states that the following lines are in the code section

global _start ; defines the entry point of the program

_start: ; start of the program code

; initialize variables
mov ecx, 0 ; counter for number of inputs
mov ebx, 0 ; sum of all inputs
mov esi, 0 ; address of first input

; loop through inputs
mov edx, [esi] ; move first input to edx
cmp edx, 0 ; compare input to zero
je end_loop ; jump to end of loop if input is zero
add ebx, edx ; add input to sum
inc ecx ; increment counter
add esi, 4 ; move to next input address
jmp loop ; jump to beginning of loop

end_loop: ; end of loop code
mov eax, ebx ; move sum to eax
mov edx, 0 ; set edx to zero for division
div ecx ; divide sum by number of inputs
cmp eax, edx ; compare quotient to zero
je even_number ; jump to even number code if quotient is zero
jmp odd_number ; jump to odd number code if quotient is not zero

even_number: ; code for even number of inputs
shr ecx, 1 ; shift counter right by 1 (divides by 2)
mov esi, 0 ; reset input address
loope: ; beginning of loop for even number of inputs
mov edx, [esi] ; move input to edx
cmp edx, 0 ; compare input to zero
je end_even_loop ; jump to end of loop if input is zero
inc esi ; increment input address
loop loope ; loop through inputs again

end_even_loop: ; end of loop code
mov eax, edx ; move input to eax
cmp eax, edx ; compare input to itself
ja end_even_check ; jump to end of even number check if input is greater than itself
mov edx, 0 ; set edx to zero for division
div ecx ; divide input by number of inputs
jmp end_program ; jump to end of program code

end_even_check: ; code to handle issue if input is not symmetric
sub eax, edx ; subtract input from itself
add eax, edx ; add input to itself
cmp eax, edx ; compare result to input
je end_program ; jump to end of program code if input is symmetric
mov eax, -1 ; set eax to -1 to indicate that input is not symmetric

odd_number: ; code for odd number of inputs
mov esi, 0 ; reset input address
loopo: ; beginning of loop for odd number of inputs
mov edx, [esi] ; move input to edx
cmp edx, 0 ; compare input to zero
je end_odd_loop ; jump to end of loop if input is zero
inc esi ; increment input address
loop loopo ; loop through inputs again

end_odd_loop: ; end of loop code
mov eax, edx ; move input to eax
cmp eax, edx ; compare input to itself
ja end_odd_check ; jump to end of odd number check if input is greater than itself
mov edx, 0 ; set edx to zero for division
div ecx ; divide input by number of inputs
jmp end_program ; jump to end of program code

end_odd_check: ; code to handle issue if input is not symmetric
sub eax, edx ; subtract input from itself
add eax, edx ; add input to itself
cmp eax, edx ; compare result to input
je end_program ; jump to end of program code if input is symmetric
mov eax, -1 ; set eax to -1 to indicate that input is not symmetric

end_program: ; end of program code
mov ebx, eax ; move final result to ebx
mov eax, 1 ; set eax to exit syscall number
int 0x80 ; execute syscall