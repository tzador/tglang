; Use stack to calculate the Factorial of an input number

section .data
    number db 5 ; input number to calculate factorial

section .bss
    result resb 1 ; reserve space for result

section .text
    global _start

_start:
    ; push input number onto stack
    push word number 

    ; call calculate factorial function
    call calculate_factorial

    ; pop result off stack and store in result variable
    pop byte [result]

    ; print result
    mov eax, 4 ; system call for printing
    mov ebx, 1 ; file descriptor (stdout)
    mov ecx, result ; result to print
    mov edx, 1 ; length of result
    int 0x80 ; call kernel

    ; exit the program
    mov eax, 1 ; system call for exit
    xor ebx, ebx ; exit code 0
    int 0x80 ; call kernel

; function to calculate factorial of input number
calculate_factorial:
    push ebp ; save base pointer
    mov ebp, esp ; set new base pointer
    sub esp, 4 ; reserve space for local variable
    mov byte [ebp-4], 1 ; initialize factorial to 1

    ; loop through numbers counting down from input number
    mov ecx, dword [ebp+8] ; get input number
    loop_start:
        cmp ecx, 1 ; compare input number to 1
        jle end_loop ; if input number is less than or equal to 1, end loop
        imul dword [ebp-4], ecx ; multiply factorial with current number
        dec ecx ; decrement current number
        jmp loop_start ; jump back to start of loop
    end_loop:

    ; store result in eax register
    mov eax, dword [ebp-4]

    ; restore stack and base pointer
    mov esp, ebp
    pop ebp

    ret ; return to caller