;; This is a code snippet in Assembly language that uses the MIPS instruction set. It calculates the factorial of a given number and stores the result in register $v0.
.text ;Start of text section

main:
  addi $sp, $sp, -4 ;Allocate space on the stack for the return address
  sw $ra, ($sp) ;Store the return address

  li $v0, 10 ;Read the input number from the user
  syscall

  move $a0, $v0 ;Move the input number to register $a0
  jal factorial ;Jump to the factorial function

  li $v0, 1 ;Print the result
  syscall

  lw $ra, ($sp) ;Load the return address from the stack
  addi $sp, $sp, 4 ;Deallocate the space on the stack
  jr $ra ;Jump back to the return address and end the program

factorial:
  addi $sp, $sp, -12 ;Allocate space on the stack for three variables
  sw $ra, 8($sp) ;Store the return address
  sw $a0, 4($sp) ;Store the input number
  sw $t0, ($sp) ;Store the result

  addi $t0, $a0, -1 ;Subtract 1 from the input number
  beqz $t0, baseCase ;If the input number is 0, jump to the base case

  jal factorial ;Recursive call to the factorial function with input number - 1
  lw $t0, ($sp) ;Load the result from the previous recursion
  mul $t0, $t0, $a0 ;Multiply with the input number
  b endFactorial ;Jump to the end of the factorial function

baseCase:
  li $t0, 1 ;Set the result to 1 for the base case

endFactorial:
  lw $a0, 4($sp) ;Load the input number
  lw $ra, 8($sp) ;Load the return address
  addi $sp, $sp, 12 ;Deallocate the space on the stack
  move $v0, $t0 ;Move the result to register $v0
  jr $ra ;Jump back to the return address and return to the previous recursion or main