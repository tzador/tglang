;This code snippet calculates the factorial of a given number

section .rodata ;declares a read-only section
    msg db "The factorial of ",0xA,0xD ;defines a string to display
    err_msg db "Please enter a positive number!",0xA,0xD ;defines an error message

section .text ;declares a code section

global main ;declares the entry point as 'main'

main: ;main function
    ;prompt user for input
    mov eax, 4 ;set system call number for 'write' to 4
    mov ebx, 1 ;set file descriptor for 'stdout' to 1
    mov ecx, msg ;set message to display
    mov edx, 15 ;set length of message
    int 0x80 ;call system interrupt to display message

    ;get user input
    mov eax, 3 ;set system call number for 'read' to 3
    mov ebx, 0 ;set file descriptor for 'stdin' to 0
    mov ecx, num ;set variable to store input
    mov edx, 4 ;set number of characters to read
    int 0x80 ;call system interrupt to read input

    ;convert input to integer
    mov eax, num ;move input to eax register
    sub eax, '0' ;convert character to integer
    mov ebx, 1 ;set counter for factorial loop to 1
    mov ecx, eax ;store input in ecx register
    dec ecx ;decrement input for later use in loop

fact_loop:
    mul ebx ;multiply eax by ebx
    inc ebx ;increment counter
    loop fact_loop ;loop until counter is 0

    ;display result
    mov eax, 4 ;set system call number for 'write' to 4
    mov ebx, 1 ;set file descriptor for 'stdout' to 1
    mov ecx, msg ;set message to display
    mov edx, 19 ;set length of message (including input)
    int 0x80 ;call system interrupt to display message

    ;convert result to string
    mov eax, eax ;move result to eax register
    add eax, '0' ;convert integer to character
    mov [result+3], eax ;move character to variable

    ;display result
    mov eax, 4 ;set system call number for 'write' to 4
    mov ebx, 1 ;set file descriptor for 'stdout' to 1
    mov ecx, result ;set variable to display
    mov edx, 4 ;set length of variable
    int 0x80 ;call system interrupt to display variable

    ;exit program
    mov eax, 1 ;set system call number for 'exit' to 1
    mov ebx, 0 ;set exit code to 0
    int 0x80 ;call system interrupt to exit

section .bss ;declares an uninitialized data section
    num resb 4 ;reserves 4 bytes of memory for user input
    result resb 4 ;reserves 4 bytes of memory for result