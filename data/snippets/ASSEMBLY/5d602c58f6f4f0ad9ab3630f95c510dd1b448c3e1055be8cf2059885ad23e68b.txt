;Example code snippet in assembly language
;Initialize registers
xor eax, eax ;Set eax to 0
xor ebx, ebx ;Set ebx to 0
xor ecx, ecx ;Set ecx to 0
xor edx, edx ;Set edx to 0

;Move values into registers
mov eax, 5 ;Move the value 5 into eax
mov ebx, 10 ;Move the value 10 into ebx

;Perform arithmetic operations
add eax, ebx ;Add the values in eax and ebx, store result in eax
sub eax, 3 ;Subtract 3 from eax, store result in eax
imul eax, 2 ;Multiply eax by 2, store result in eax
idiv ebx ;Divide eax by ebx, store quotient in eax and remainder in edx

;Compare values
cmp eax, 5 ;Compare eax to 5
je label ;Jump to label if they are equal

;Looping
mov ecx, 0 ;Set the loop counter to 0
start:
    inc ecx ;Increment loop counter
    cmp ecx, 10 ;Compare loop counter to 10
    jle start ;Jump back to start of loop if it is less than or equal to 10

;Strings and input/output
section .data ;Defines variables and constants
    message db 'Enter a number: ' ;Define a message to be printed
    length equ $-message ;Calculate the length of the message
    result db 'The result is: ', 10, 0 ;Define a string to store the result
section .bss ;Defines uninitialized variables
    num resb 1 ;Define a variable to store the user's input
section .text ;Defines the section for executable instructions
global _start ;Defines the entry point for the program
_start:
    ;Print message
    mov eax, 4 ;Set the system call number for "write" to eax
    mov ebx, 1 ;Set the file descriptor of stdout to ebx
    mov ecx, message ;Set the address of the message to ecx
    mov edx, length ;Set the length of the message to edx
    int 80h ;Call the system call

    ;Get user input
    mov eax, 3 ;Set the system call number for "read" to eax
    mov ebx, 0 ;Set the file descriptor of stdin to ebx
    mov ecx, num ;Set the address of the variable to store input to ecx
    mov edx, 1 ;Set the number of bytes to read to edx
    int 80h ;Call the system call

    ;Convert string to integer
    sub al, '0' ;Convert ASCII character to integer
    xor ah, ah ;Clear upper bits of ah
    dec eax ;Decrement eax to undo earlier conversion of ASCII character
    mov ebx, eax ;Move the number stored in eax to ebx for later use

    ;Perform arithmetic operations
    add eax, 5 ;Add 5 to the user's input, store result in eax

    ;Convert integer to string
    add al, '0' ;Convert integer to ASCII character
    mov [result+13], al ;Move ASCII character to result string

    ;Print result
    mov eax, 4 ;Set the system call number for "write" to eax
    mov ebx, 1 ;Set the file descriptor of stdout to ebx
    mov ecx, result ;Set the address of the result string to ecx
    mov edx, 14 ;Set the length of the result string to edx
    int 80h ;Call the system call

    ;Exit program
    mov eax, 1 ;Set the system call number for "exit" to eax
    mov ebx, 0 ;Set the exit code to 0
    int 80h ;Call the system call

;Label used for conditional jump
label:
    ;Code to be executed if comparison was true