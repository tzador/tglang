section .text
global _start

_start:
    ; print message
    mov eax, 4 ; write syscall
    mov ebx, 1 ; stdout file descriptor
    mov ecx, hello ; address of message
    mov edx, 5 ; length of message
    int 0x80 ; execute syscall
    
    ; read input
    mov eax, 3 ; read syscall
    mov ebx, 0 ; stdin file descriptor
    mov ecx, buffer ; address of buffer
    mov edx, 10 ; maximum number of bytes to read
    int 0x80 ; execute syscall
    
    ; convert input to uppercase
    mov esi, buffer ; move address of buffer to esi
    loop:
    cmp byte [esi], 0 ; check if end of string
    je done ; if end of string, jump to done
    cmp byte [esi], 'a' ; check if lowercase letter
    jb continue ; if not, continue to next character
    cmp byte [esi], 'z'
    ja continue
    sub byte [esi], 32 ; convert to uppercase
continue:
    inc esi ; move to next character
    jmp loop ; jump back to loop
    
    done:
    ; print converted string
    mov eax, 4 ; write syscall
    mov ebx, 1 ; stdout file descriptor
    mov ecx, buffer ; address of converted string
    mov edx, 10 ; length of string
    int 0x80 ; execute syscall
    
    ; exit program
    mov eax, 1 ; exit syscall
    mov ebx, 0 ; exit code
    int 0x80 ; execute syscall

section .data
hello db 'hello', 10 ; define string with line break
buffer db 10 ; define buffer to store input