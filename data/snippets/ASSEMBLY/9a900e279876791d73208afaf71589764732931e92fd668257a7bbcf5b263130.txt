;Initialize registers
mov eax, 0x0      ; move the value 0x0 into the eax register
mov ebx, 0x1      ; move the value 0x1 into the ebx register
mov ecx, 0x2      ; move the value 0x2 into the ecx register

;Loop through an array
looper:           ; label for the loop
cmp ecx, 0xA      ; compare the value in ecx with 0xA (10 in decimal)
jg endLoop        ; jump to endLoop if the value in ecx is greater than 0xA
mov edx, [ebx + ecx*4]      ; move the value of the [ebx + ecx*4] memory location into the edx register
add eax, edx      ; add the value in the edx register to the eax register
inc ecx           ; increment the value in ecx by 1
jmp looper        ; jump back to the looper label

endLoop:          ; label for the end of the loop
;Perform some final calculations
mov esi, 0x0      ; move the value 0x0 into the esi register
sub ebx, 0x4      ; subtract the value 0x4 from the ebx register
multiply:         ; label for the multiplication loop
cmp ebx, 0x0      ; compare the value in ebx with 0x0
je done           ; jump to done label if the value in ebx is equal to 0x0
imul [ebx], esi   ; multiply the value at the [ebx] memory location with the esi register
inc ebx           ; increment the value in ebx by 1
jmp multiply      ; jump back to the multiply label

done:             ; label for the end of the multiplication loop
;Print the final value in eax register
mov eax, [ebx]    ; move the value at the [ebx] memory location into the eax register
call print_eax    ; call the print_eax subroutine to print the value in the eax register

;Subroutine to print the value in the eax register
print_eax:
push ebx          ; store the value in ebx onto the stack
mov ebx, eax      ; move the value in eax into the ebx register
mov eax, 0x4      ; move the value 0x4 (system call number for 'write') into the eax register
int 0x80          ; invoke the system call interrupt
pop ebx           ; restore the value in ebx from the stack
ret               ; return from the subroutine