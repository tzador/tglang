; This code snippet is an example of a bubble sort algorithm in Assembly language.
; It takes in a list of numbers and sorts them in ascending order.

; Initializing variables
.data
numbers DB 9, 3, 5, 1, 7, 2, 4, 8, 6	; list of numbers to be sorted
size DB 9	; size of the list

; Code segment
.code
_start:
; outer loop for comparing numbers
	mov ecx, size	; set loop counter to size of list
L1:
	dec ecx	; decrease loop counter
	jz done	; if counter is 0, jump to done
; inner loop for swapping numbers
	mov esi, 0	; index for inner loop
L2:
	cmp esi, ecx	; compare index to loop counter
	jge L1		; if index is greater or equal to loop counter, jump to outer loop
	; swapping algorithm
	mov al, [numbers + esi]	; save first number into al register
	mov bl, [numbers + esi + 1]	; save second number into bl register
	cmp al, bl	; compare numbers
	jg swap	; if first number is greater than second, jump to swap
	; if numbers are not swapped, continue to next iteration of loop
	inc esi	; increment index
	jmp L2	; jump back to beginning of inner loop
; swap algorithm
swap:
	mov [numbers + esi + 1], al	; overwrite second number with first number 
	mov [numbers + esi], bl	; overwrite first number with second number
	inc esi	; increment index
	jmp L2	; jump back to beginning of inner loop
; done with sorting
done:
	; printing sorted numbers
	mov esi, 0	; index for loop
print_loop:
	cmp esi, size	; compare index to size of list
	jz exit		; if index equals size of list, jump to exit
	; printing algorithm
	mov dl, [numbers + esi]	; move number into dl register (ASCII value)
	add dl, '0'	; convert ASCII value to character
	mov ah, 02h	; set print function code
	int 21h		; call DOS interrupt for printing
	inc esi	; increment index
	jmp print_loop	; jump back to beginning of loop
; exiting program
exit:
	mov ah, 4ch	; set exit function code
	int 21h		; call DOS interrupt for exiting
end _start		; end of program