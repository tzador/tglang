;; This code snippet initializes and prints out a Fibonacci sequence up to a given limit

global fib 
extern printf

section .data
    msg:   db "Fibonacci Sequence: %d", 10, 0      ; string to be printed
    limit: dd 10                                    ; limit for sequence

section .bss
    fib_arr resd 10                                 ; array to store Fibonacci sequence

section .text
    fib:
        push ebp                                    ; start of function 
        mov ebp, esp
        push ebx 
        push esi
        push edi

        mov esi, fib_arr                            ; set esi to point to the array
        mov ebx, [limit]                            ; set ebx to limit 
        add ebx, 2                                  ; add 2 to account for starting 0 and 1 in sequence 
        mov dword [esi], 0                          ; initialize first element of array to 0
        mov dword [esi+4], 1                        ; initialize second element of array to 1 

        mov ecx, 2                                  ; initialize loop counter to 2
    loop:
        mov eax, [esi+ecx-2]                        ; set eax to previous number
        add eax, [esi+ecx-1]                        ; add previous 2 numbers
        mov [esi+ecx], eax                          ; store result in array
        inc ecx                                     ; increment loop counter
        cmp ecx, ebx                                ; compare loop counter to limit
        jl loop                                     ; continue loop if less than limit

        mov eax, 0                                  ; clear eax before calling printf
        mov edi, msg                                ; set edi to point to message string
        call printf                                 ; call printf to print message 

        mov edi, [limit]                            ; set edi to point to variable limit 
        mov esi, fib_arr                            ; set esi to point to array
        call print_arr                              ; call print_arr function to print array 

        pop edi                                     ; restore registers 
        pop esi 
        pop ebx 
        mov esp, ebp                                ; end of function
        pop ebp        
        ret
        
print_arr:
    push ebp                                        ; start of function
    mov ebp, esp                                   
    push ebx
    push esi
    push edi

    mov ebx, [edi]                                  ; set ebx to limit
    mov esi, [esi]                                  ; set esi to point to array 
    mov edi, 0                                      ; initialize loop counter to 0
    mov ecx, ebx                                    ; set ecx to limit for loop 
    mov edi, format                                 ; set edi to point to format string
    mov eax, [esi+edi]                              ; set eax to first element of array 
    push eax                                        ; push first element onto stack for printf 
    
    mov edi, msg                                    ; set edi to point to message string 
    call printf                                     ; call printf to print message
    
loop_arr:
    push dword [esi+edi]                            ; push next element onto stack for printf 
    add edi, 4                                      ; increment loop counter 
    loop loop_arr                                   ; loop until all elements are printed 
    
    mov eax, 0                                      ; clear eax before returning
    pop edi                                         ; restore registers 
    pop esi
    pop ebx 
    mov esp, ebp                                   
    pop ebp 
    ret

section .data
    format: db "%d", 10, 0                          ; format string to print array elements

section .bss
    msg: resb 20                                    ; space for message string