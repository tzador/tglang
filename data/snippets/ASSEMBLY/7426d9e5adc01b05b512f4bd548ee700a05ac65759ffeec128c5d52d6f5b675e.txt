; Initialize loop_counter
mov loop_counter, 0

; Start loop: compare loop_counter to 10
cmp loop_counter, 10
je loop_end ; if equal, jump to loop_end

; Add 1 to loop_counter
inc loop_counter

; Print loop_counter
mov eax, loop_counter ; move loop_counter value to eax register
call print_eax ; call function to print register eax

; Jump back to start of loop
jmp loop_start

loop_end:

; End of loop
; Print end message
mov edx, msg_end ; move end message to edx register
call print_edx ; call function to print register edx

; Exit program
mov eax, 1 ; move 1 to eax register (exit syscall number)
xor ebx, ebx ; clear ebx register (success status)
int 0x80 ; interrupt to execute syscall

; Define variables
section .data
loop_counter dd 0 ; initialize loop_counter variable
msg_end db 'End of loop', 0xA ; initialize end message variable