; This is a complex code snippet in Assembly language which performs a recursive factorial calculation
    .model small
    .stack 100h
    
    .data
    fact        db      10          ; input number to calculate factorial of
    result      dw      ?           ; result variable
    
    .code
    main proc
        mov ax, @data               ; initialize data segment
        mov ds, ax
        
        mov al, fact                ; move input number into AL register
        call calculate_factorial    ; call subroutine to calculate factorial
        
        mov result, ax              ; move result into output variable
        
        mov ah, 4ch                 ; terminate program
        int 21h
    main endp
    
    ; Subroutine to calculate factorial
    ; Takes input number from AL register
    ; Returns result in AX register
    ; Uses recursive approach to calculate factorial
    calculate_factorial proc
        cmp al, 1                   ; check if input number is 1
        je base_case                ; if yes, return 1
        dec al                      ; decrement input number by 1
        push ax                     ; save AL register onto stack
        call calculate_factorial    ; recursively call subroutine
        pop ax                      ; retrieve data from stack into AL register
        mul al                      ; multiply result with current input number
        jmp end                     ; jump to end of subroutine
    base_case:
        mov al, 1                   ; set AL register to 1
    end:
        ret
    calculate_factorial endp
    
    end main                      ; end of program