.text
.global main                          // global label for the main function

main:
    xor %eax, %eax                    // sets eax to 0
    movl $42, %ebx                    // sets ebx to 42
    cmp $42, %ebx                     // compares ebx and 42
    je equal                          // jumps to equal if equal
    jne not_equal                     // jumps to not_equal if not equal
    jmp end                           // jumps to end

equal:
    movl $1, %eax                     // sets eax to 1 (equal)
    jmp end                           // jumps to end

not_equal:
    movl $0, %eax                     // sets eax to 0 (not equal)

end:                                  // end label
    movl %eax, %ecx                   // moves the value of eax to ecx
    addl %eax, %ecx                   // adds eax and ecx
    subl %eax, %ecx                   // subtracts eax from ecx
    imull $2, %ecx                    // multiplies ecx by 2
    idivl %ecx                        // divides eax by ecx
    movl %ecx, %edx                   // moves the quotient to edx
    inc %edx                          // increments edx by 1
    dec %edx                          // decrements edx by 1
    push %eax                         // pushes eax onto the stack
    pop %ebx                          // pops the top value on the stack into ebx
    call print                        // calls the print function
    movl $1, %eax                     // sets eax to 1 (exit code 1)
    int $0x80                         // system call to exit

print:
    push %ebp                         // saves the previous base pointer
    movl %esp, %ebp                   // sets the current stack pointer as base pointer
    subl $12, %esp                    // makes space on the stack for 3 variables
    movl 8(%ebp), %ecx                // moves the value of the first argument into ecx
    movl 12(%ebp), %edx               // moves the value of the second argument into edx
    movb $0, -4(%ebp)                 // sets the first byte of the third argument to 0
    movl $4, %eax                     // sets eax to 4 (system call for write)
    movl $1, %ebx                     // sets ebx to 1 (stdout)
    leal -4(%ebp), %ecx               // loads the address of the third argument into ecx
    int $0x80                         // system call to write
    addl $12, %esp                    // deallocates the space on the stack
    pop %ebp                          // restores the previous base pointer
    ret                               // returns to the main function