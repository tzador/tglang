; This code snippet calculates the factorial of a number using recursion 

.section .data      ; Defines the data section
    num: .word 5    ; Stores the number whose factorial is to be calculated
    factorial: .word 0  ; Stores the result of factorial

.section .text      ; Defines the text section, where code is written
.globl _start       ; Defines the entry point of the program

_start:
    movl num, %eax  ; Moves the value of num to the eax register
    movl %eax, %ebx ; Moves the value of eax to the ebx register

    call factorial  ; Calls the factorial function
    movl %eax, factorial ; Moves the result from eax register to factorial variable

    ; Prints the result to the console
    movl $4, %eax   ; Sets eax register to 4, which represents the sys_write function
    movl $1, %ebx   ; Sets ebx register to 1, which represents standard output
    movl $factorial, %ecx   ; Moves the address of factorial variable to ecx register
    movl $4, %edx   ; Sets edx register to 4, which represents the number of bytes to write
    int $0x80       ; Interrupt to call the system function
    jmp _end        ; Jumps to the end of the program

factorial:
    ; Checks if the number is 0 or 1, in which case the result is 1
    cmpl $0, %ebx   ; Compares ebx register to 0
    je end_factorial ; Jumps to end if ebx register is 0
    cmpl $1, %ebx   ; Compares ebx register to 1
    je end_factorial ; Jumps to end if ebx register is 1
    
    ; If the number is not 0 or 1, then recursively calculates the factorial
    decl %ebx       ; Decrements ebx register by 1
    pushl %ebx      ; Pushes the value of ebx register onto the stack

    call factorial  ; Calls the factorial function again
    ; After the recursive call, the result is in eax register
    movl (%esp), %ebx   ; Moves the top value of the stack (which is ebx) to ebx register
    imul %ebx, %eax     ; Multiplies ebx register with the result in eax register
    addl $4, %esp       ; Removes the top value from the stack (ebx)
    
end_factorial:
    ret             ; Returns to the previous function call
_end:
    movl $1, %eax   ; Sets eax register to 1, which represents the sys_exit function
    xor %ebx, %ebx  ; Clears the ebx register
    int $0x80       ; Interrupt to call the system function