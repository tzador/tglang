; Example of complex code in Assembly
section .data
    ; Declare variables to store data
    myNum dd 100 ; Declare 32-bit integer with initial value of 100
    myString db "Hello, World!",0 ; Declare string with null termination character
    myArray dd 1,2,3,4,5 ; Declare array of 5 32-bit integers

section .bss
    ; Reserve space for uninitialized variables
    myVar resb 1 ; Reserve 1 byte of space for a variable

section .text
    ; Start of code section
    global _start ; Declare entry point of program

_start:
    ; Print out "Hello, World!" string
    mov edx, 13 ; Set string length to be printed (not including null termination)
    mov ecx, myString ; Set address of string to be printed
    mov ebx, 1 ; Set file descriptor (1 for standard output)
    mov eax, 4 ; Set system call number for 'write'
    int 0x80 ; Execute system call

    ; Calculate the sum of the array of numbers
    mov esi, myArray ; Set address of array to be looped through
    mov ebx, 0 ; Set register to store the sum of the numbers
    mov ecx, 5 ; Set number of iterations (5 numbers in array)
sum_loop:
    add ebx, [esi] ; Add value at current array index to ebx
    add esi, 4 ; Move to next element in the array
    loop sum_loop ; Loop until ecx is 0 (5 iterations)
    
    ; Store the sum in myNum variable
    mov [myNum], ebx ; Store the sum in myNum variable
    
    ; Call a function
    call myFunction ; Jump to the myFunction label
    
    ; Exit the program
    mov eax, 1 ; Set system call number for 'exit'
    xor ebx, ebx ; Set exit status to 0
    int 0x80 ; Execute system call

myFunction:
    ; Perform some calculations
    mov eax, [myNum] ; Store myNum variable in eax register
    inc eax ; Increment eax value by 1
    cmp eax, 200 ; Compare eax value to 200
    jle smaller ; Jump to smaller label if eax is less than or equal to 200
    mov ebx, 200 ; Set ebx to 200 if eax is greater than 200
    jmp end_function ; Jump to end_function label
smaller:
    mov ebx, eax ; Set ebx to eax value if it is less than 200
end_function:
    ; Return to main program
    ret