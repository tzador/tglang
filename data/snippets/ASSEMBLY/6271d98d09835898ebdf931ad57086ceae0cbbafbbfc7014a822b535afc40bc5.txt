;The following code is a basic loop that calculates the factorial of a given number in Assembly language.
;The user is prompted to enter the number and the result is stored in the variable "fact".
;This code snippet uses the x86 Assembly syntax.

.model small

.stack 100h

.data
    msg db 'Enter a number: $'
    result db 'Factorial = $'
    fact dw 1            ;variable to store the factorial result
    num dw ?             ;variable to store the user input

.code
main proc
    mov ax, @data        ;initialize data segment
    mov ds, ax

    mov ah, 09h          ;print the message
    mov dx, offset msg
    int 21h

    ;get user input
    mov ah, 0ah
    mov dx, offset num   ;store the input in "num" variable
    int 21h

    ;convert the user input to number
    sub dx, 30h          ;subtract 30h from the first digit
    xor ax, ax           ;clear ax to store the converted number
    mov cx, 10           ;set the multiplier to 10 (since the number is in decimal)
    mul cx               ;multiply dx by 10
    add ax, dx           ;add dx to ax
    ;
    sub dx, 30h          ;repeat for the second digit
    xor cx, cx           ;clear cx
    mov cx, 10
    mul cx
    add ax, dx
    ;
    sub dx, 30h          ;repeat for the third digit
    xor cx, cx
    mov cx, 10
    mul cx
    add ax, dx
    ;
    sub dx, 30h          ;repeat for the fourth digit
    xor cx, cx
    mov cx, 10
    mul cx
    add ax, dx
    ;
    mov bx, ax           ;move the converted number from ax to bx
    
    ;calculate the factorial
    mov cx, bx           ;move the number to cx (loop counter)
    loop_start:
        mul fact         ;multiply ax by "fact"
        mov fact, ax     ;store the result in "fact" variable
        dec cx           ;decrement loop counter
        cmp cx, 0        ;check if loop counter is zero
        jne loop_start   ;if not, jump back to loop_start
    
    ;print the factorial result
    mov ah, 09h          ;print the message
    mov dx, offset result
    int 21h
    ;convert the number to ASCII for printing
    add ax, 3030h        ;add 3030h to the result in ax
    mov bl, al           ;move the first digit of the result to bl
    mov ah, 02h
    mov dl, bl           ;print the first digit
    int 21h
    xor bl, bl           ;clear bl
    mov bl, ah           ;move the second digit of the result to bl
    mov ah, 02h
    mov dl, bl           ;print the second digit
    int 21h

    mov ah, 4ch          ;exit the program
    int 21h 
main endp
end main