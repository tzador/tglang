; Set up stack pointer
mov rbp, rsp ; Move current stack pointer to base pointer
sub rsp, 128 ; Reserve 128 bytes for stack

; Load 4 bytes from memory address into register
mov eax, dword ptr [rdi] ; dword ptr specifies 4 bytes
; Load 8 bytes from memory address into register
mov rax, qword ptr [rdi] ; qword ptr specifies 8 bytes

; Add two values in registers and save result in another register
add rax, rbx ; Add value in rbx to value in rax and store in rax

; Multiply two values and save result in another register
imul rax, rdx ; Multiply rax by rdx and store in rax

; Call function and pass arguments
push rdi ; Push first argument onto stack
push rsi ; Push second argument onto stack
call function_name ; Call function
add rsp, 16 ; Remove arguments from stack (4 bytes for each argument)

; Compare two values and jump to label if condition is met
cmp rax, rbx ; Compare values in rax and rbx
je label ; Jump to label if equal

; Loop through a section of code a certain number of times
mov ecx, 10 ; Set loop counter to 10
loop_start: ; Label for start of loop
; Code to be repeated goes here
dec ecx ; Decrement loop counter
cmp ecx, 0 ; Compare loop counter to 0
jne loop_start ; Jump to loop label if not equal (loop again)