section .data  ;This section contains any initialized data that the program needs to access.

    message db 'Hello World!',0xA,0xD  ;Declare a string variable named message and initialize it with the message 'Hello World!'.

section .bss  ;This section contains any uninitialized data that the program needs to access.

    buffer resb 128  ;Reserve 128 bytes of memory for a buffer variable. It is not initialized and can hold any type of data.

section .text  ;This section contains the actual code of the program.

    global _start  ;_start is the default symbol for the starting point of a program.

_start:  ;This is the starting point of the program, where execution begins.
    
    ;Print the message 'Hello World!' to the screen using the syscall write.
    
    mov rax, 1  ;Set the system call number for write to 1.
    mov rdi, 1  ;Set the first argument for write to 1, which represents stdout.
    mov rsi, message  ;Set the second argument for write to the address of the message variable.
    mov rdx, 13  ;Set the third argument for write to 13, which is the length of the string.
    syscall  ;Call the write system call.

    ;Read user input from the keyboard and store it in the buffer variable using the syscall read.

    mov rax, 0  ;Set the system call number for read to 0.
    mov rdi, 0  ;Set the first argument for read to 0, which represents stdin.
    mov rsi, buffer  ;Set the second argument for read to the address of the buffer variable.
    mov rdx, 128  ;Set the third argument for read to 128, which is the maximum number of bytes to read.
    syscall  ;Call the read system call.
    
    ;Print the user input to the screen using the syscall write.

    mov rax, 1  ;Set the system call number for write to 1.
    mov rdi, 1  ;Set the first argument for write to 1, which represents stdout.
    mov rsi, buffer  ;Set the second argument for write to the address of the buffer variable.
    mov rdx, rax  ;Set the third argument for write to the value in rax, which is the number of bytes read from the user.
    syscall  ;Call the write system call.

    ;Exit the program using the syscall exit.

    mov rax, 60  ;Set the system call number for exit to 60.
    xor rdi, rdi  ;Set the first argument for exit to 0, which represents a successful exit.
    syscall  ;Call the exit system call.