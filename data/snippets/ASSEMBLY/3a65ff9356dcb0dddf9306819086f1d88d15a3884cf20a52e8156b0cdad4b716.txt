; This code snippet calculates the factorial of a number using recursion

[SECTION .data] ; section for defining data variables
    number dw 5 ; number whose factorial is to be calculated
    result dw 0 ; variable to store the factorial result

[SECTION .text] ; section for main program instructions
    global _start ; declaring the global label for main program

_start:
    ; setting up the stack for recursion
    push ebp ; pushing the base pointer to the stack
    mov ebp, esp ; move the value of the stack pointer to the base pointer

    ; calling the recursive function
    mov eax, [number] ; move the value of number to eax register
    call factorial ; call the factorial function

    ; storing the result in the result variable
    mov [result], eax ; move the value of eax register to result variable
    mov eax, 4 ; storing the system call number for printing
    mov ebx, 1 ; storing the file descriptor for stdout
    mov ecx, result ; storing the address of result variable in ecx
    mov edx, 4 ; storing the length of the string to be printed in edx
    int 0x80 ; call the system call interrupt

    ; cleaning up the stack
    mov esp, ebp ; move the value of base pointer back to stack pointer
    pop ebp ; pop the base pointer from stack

    ; exit the program
    mov eax, 1 ; storing the system call number for exit
    xor ebx, ebx ; setting exit status to 0
    int 0x80 ; call the system call interrupt

factorial:
    ; checking for base case (if number is 0 or 1)
    cmp eax, 0 ; compare eax register with 0
    je .end ; jump to end label if equal
    cmp eax, 1 ; compare eax register with 1
    je .end ; jump to end label if equal

    ; otherwise, calculate factorial recursively
    dec eax ; decrement eax register
    push eax ; push the value of eax register to the stack
    call factorial ; call the factorial function recursively
    mov ebx, eax ; move the factorial result to ebx register
    pop eax ; pop the value of eax register from the stack
    mul ebx ; multiply eax register by ebx
    ret ; return to the caller function

.end:
    mov eax, 1 ; store 1 in eax register for base case result
    ret ; return to the caller function