;This code snippet calculates the factorial of a number using recursion.

.section .data
n:   .word 5         ;input number, change to a desired value
 
.section .text
.globl _start
 
_start:
    movl $1, %ebx    ;initialize counter
    movl n, %eax     ;move input number into eax
    call factorial   ;call factorial function
 
    movl %eax, %ebx
    movl $0, %eax    ;exit with 0, indicate successful execution
    int $0x80
 
 .globl factorial  ;global function for recursion
 
factorial:
    pushl %ebp       ;store base pointer on stack
    movl %esp, %ebp  ;set ebp as current top of stack
    subl $0x14, %esp ;reserve space for local variables, 0x14 = 20 bytes
 
    cmpl $1, (%ebp+8) ;compare input number with 1
    jle return_one     ;if n <= 1, return 1
 
    movl 8(%ebp), %eax ;move input number n into eax
    decl %eax           ;decrement n to n-1
    pushl %eax          ;push n-1 onto stack for recursive call
    call factorial     ;call factorial with n-1
 
    popl %eax             ;restore n-1 from stack
    imull (%ebp+8), %eax ;multiply n-1 with original n from ebp+8
 
    movl (%ebp+8), %ebx   ;move original n back into ebx
    cmpl $1,%ebx          ;compare with 1
    je end_recursion      ;if equal, end recursion
 
    popl %eax             ;restore n-1 from stack
    movl %eax, 8(%ebp)    ;move n-1 into ebp+8 to replace original n
 
    call factorial         ;recursive call with n-1
 
return_one:
    movl $1, %eax           ;return 1 for base case
 
end_recursion:
    leave                   ;break down stack frame
    ret                      ;return to caller