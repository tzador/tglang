; This code snippet is an example of a Fibonacci sequence calculation in Assembly language
; It takes user input as the length of the sequence and prints out the resulting sequence

.data ; Defining data section
    msg1 db 'Enter the length of Fibonacci sequence: $' ; Message to prompt user for input
    msg2 db 0dh, 0ah, 'Fibonacci sequence: $' ; Message to print out the resulting sequence
    num1 db ? ; Variable to store user input
    num2 db ? ; Variable to store previous number in the sequence
    num3 db ? ; Variable to store current number in the sequence

.code ; Code section
main proc ; Start of main procedure
    mov ax, @data ; Move data segment to AX register
    mov ds, ax ; Move data segment to DS register

    ; Print out prompt message and read user input
    mov ah, 09h ; Set up for printing string
    lea dx, msg1 ; Load address of prompt message
    int 21h ; Call interrupt 21h to print string
    mov ah, 01h ; Set up for input operation
    int 21h ; Call interrupt 21h to read single character
    sub al, '0' ; Convert ASCII character to actual number
    mov num1, al ; Store input in variable

    ; Handle edge cases for sequence length
    mov bl, num1 ; Move input to BL register
    cmp bl, 0 ; Check if input is 0
    je zero_length ; Jump to zero_length if input is 0
    cmp bl, 1 ; Check if input is 1
    je one_length ; Jump to one_length if input is 1

    ; Calculate and print out Fibonacci sequence
    mov num2, 0 ; Initialize previous number in sequence to 0
    mov num3, 1 ; Initialize current number in sequence to 1
    mov bx, num1 ; Move input to BX register
    dec bx ; Decrement BX to account for first two numbers in sequence
    mov ah, 09h ; Set up for printing string
    lea dx, msg2 ; Load address of result message
    int 21h ; Call interrupt 21h to print string
    mov dl, '0' ; Set up for printing single digit to screen
    add dl, num2 ; Add ASCII value of num2 to get actual number to print
    mov ah, 02h ; Set up for printing single character
    int 21h ; Call interrupt 21h to print single character
    mov dl, ' ' ; Set up for printing space between numbers
    mov ah, 02h ; Set up for printing single character
    int 21h ; Call interrupt 21h to print single character
    mov dl, '1' ; Set up for printing single digit to screen
    mov ah, 02h ; Set up for printing single character
    int 21h ; Call interrupt 21h to print single character

    ; Loop to calculate and print remaining numbers in sequence
    fibonacci_loop:
        mov al, num3 ; Move current number to AL register
        add al, num2 ; Add previous number to get next number in sequence
        mov num2, num3 ; Store current number in previous number variable
        mov num3, al ; Store result in current number variable
        add dl, al ; Add ASCII value of calculated number to get actual number to print
        mov ah, 02h ; Set up for printing single character
        int 21h ; Call interrupt 21h to print single character
        mov dl, ' ' ; Set up for printing space between numbers
        mov ah, 02h ; Set up for printing single character
        int 21h ; Call interrupt 21h to print single character
        loop fibonacci_loop ; Repeat loop until BX register reaches 0

    ; Handle output for sequences with 0 or 1 length
    zero_length:
        mov ah, 02h ; Set up for printing single character
        mov dl, '0' ; Move ASCII value of 0 to DL register
        int 21h ; Call interrupt 21h to print single character
        jmp end_of_program ; Jump to end_of_program

    one_length:
        mov ah, 02h ; Set up for printing single character
        mov dl, '0' ; Move ASCII value of 0 to DL register
        int 21h ; Call interrupt 21h to print single character
        mov dl, ' ' ; Set up for printing space
        int 21h ; Call interrupt 21h to print space
        mov ah, 02h ; Set up for printing single character
        mov dl, '1' ; Move ASCII value of 1 to DL register
        int 21h ; Call interrupt 21h to print single character

    end_of_program:
    mov ah, 4ch ; Set up for program termination
    int 21h ; Call interrupt 21h to terminate program

main endp ; End of main procedure

end main ; Tell the assembler where the program ends