; This code snippet demonstrates a recursive function that calculates the factorial of a given integer
; It uses the MIPS assembly language
    .data ; Data section where variables are declared
num: .word 5 ; the number whose factorial will be calculated
fact: .word 1 ; default value for factorial
        .text ; Code section where the actual code is written
main:
    lw $s0, num ; load the value of 'num' into register $s0
    jal factorial ; jump to the 'factorial' function
    move $s1, $v0 ; move the result of 'factorial' into register $s1
    li $v0, 1 ; print integer system call
    lw $a0, fact ; load the value of 'fact' into register $a0
    syscall ; execute the print system call
    jr $ra ; return to the main program
factorial:
    addi $sp, $sp, -4 ; decrement the stack pointer to create space for a new variable
    sw $ra, ($sp) ; save the return address on the stack
    beq $a0, 1, base ; base case: if the input is 1, return 1
    addi $sp, $sp, -4 ; decrement the stack pointer again if the base case is not met
    sw $a0, ($sp) ; save the input on the stack
    addi $a0, $a0, -1 ; subtract 1 from the input
    jal factorial ; jump to the factorial function with the new input
    lw $a0, ($sp) ; load the previous input from the stack
    addi $sp, $sp, 4 ; increment the stack pointer
    mul $v0, $v0, $a0 ; multiply the result with the previous input
    lw $ra, ($sp) ; load the return address from the stack
    addi $sp, $sp, 4 ; increment the stack pointer
    jr $ra ; return to the previous function call
base:
    lw $a0, fact ; load the default value for factorial into register $a0
    jr $ra ; return to the previous function call