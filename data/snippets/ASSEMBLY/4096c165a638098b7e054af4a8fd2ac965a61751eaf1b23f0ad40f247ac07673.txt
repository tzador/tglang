; Setting up interrupt handlers
code segment
    assume cs:code, ds:data
code ends

data segment
    msg db 'Interrupt Error!', '$'
data ends

main proc    
    mov ax, @data        ; move data segment value into ax register
    mov ds, ax           ; move ax value into data segment register
    mov ah, 36h          ; store interrupt handler number into ah register
    mov al, 0            ; store low byte of interrupt number into al register
    mov ds:0005h, offset ISR ; store ISR address into interrupt vector (0000:0005)
    mov dl, 0            ; clear DL register for BIOS teletype output
    mov ah, 9            ; BIOS teletype output function
    mov dx, offset msg   ; load message offset into dx register
    int 21h              ; call interrupt 21h to output message
    mov ah, 0            ; clear ah register
    int 20h              ; terminate program
main endp

ISR proc    
    push ax              ; push ax register onto stack
    push bx              ; push bx register onto stack
    push cx              ; push cx register onto stack
    push dx              ; push dx register onto stack
    mov ax, @data        ; move data segment value into ax register
    mov ds, ax           ; move ax value into data segment register
    mov al, 0            ; store low byte of interrupt number into al register
    jmp @cs:mp#01F6     ; jump to address of label mp#01F6
ISR endp

code ends
end main