; This program checks for an integer input and determines if it's even or odd

; .data section is used for declaring variables and constants
.data

; variable to store input integer
input DW 0

; variable to store quotient of division by 2
quotient DW 0

; variable for storing remainder of division by 2
remainder DW 0

; .text is used for code section
.text

; main code starts here
main:

; allows user to input an integer
lea dx, input ; load effective address of input into dx register
mov ah, 1 ; set ah register to read character input
int 21h ; interrupt to read input character
sub dx, '0' ; subtract ascii value of '0' to get actual integer value
mov input, dx ; move input to input variable

; divide input by 2 to check for even or odd
mov ax, input ; move input to ax register
mov bx, 2 ; move 2 to bx register for division
xor dx, dx ; set dx register to 0 for division
div bx ; divide ax by bx
mov quotient, ax ; move quotient to quotient variable
mov remainder, dx ; move remainder to remainder variable

; check if remainder is 0, meaning input is even
cmp remainder, 0 ; compare remainder variable to 0
je even ; jump to even label if remainder is 0

; remainder is not 0, meaning input is odd
mov ah, 9 ; set ah register to display string
lea dx, odd_msg ; load effective address of odd_msg string into dx register
int 21h ; interrupt to display odd_msg string
jmp end ; jump to end label

; label for even output
even:
mov ah, 9 ; set ah register to display string
lea dx, even_msg ; load effective address of even_msg string into dx register
int 21h ; interrupt to display even_msg string
jmp end ; jump to end label

; label for end
end:
mov ah, 4Ch ; set ah register to exit program
int 21h ; interrupt to exit program

; strings for displaying even or odd message
odd_msg db 'Input is an odd number', 13, 10, '$'
even_msg db 'Input is an even number', 13, 10, '$'

; end of program
end main ; end of main code