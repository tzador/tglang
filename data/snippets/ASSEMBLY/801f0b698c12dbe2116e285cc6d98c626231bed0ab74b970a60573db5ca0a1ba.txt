.data ; this section is for declaring variables and constants
    str1 db "Hello", 0xA, 0xD, "World!", 0xA, 0xD ; defining a string with line breaks
    num1 dd 10 ; defining a double word (4 bytes) variable with initial value of 10
    array1 db 1,2,3,4,5,6 ; defining an array of bytes
.code ; this section is for writing actual instructions
main PROC ; declaring main procedure
    mov ah, 09h ; move string print function code (09h) to ah register 
    mov dx, OFFSET str1 ; move the offset address of str1 (string variable) to dx register 
    int 21h ; interrupt to call DOS service 
    mov ah, 01h ; move char input function code (01h) to ah register
    int 21h ; interrupt to call DOS service 
    sub al, 30h ; subtract 30h (ASCII value of '0') from the input to get the actual number
    mov byte ptr[num1], al ; move the input value to num1 variable
    mov bx, 0 ; initialize bx register to use as counter
    mov dl, array1[bx] ; move first element of the array to dl register
    add bx, 1 ; increment bx register to point to next element in the array
    cmp bx, 6 ; compare bx register with the size of the array
    jnl skip ; if bx is greater than or equal to 6, jump to skip label
    loop : ; loop label for repetition
    add al, dl ; add the value of dl to al register 
    add dl, array1[bx] ; add next element of the array to the value of dl register
    add bx, 1 ; increment bx register to point to next element in the array 
    cmp bx, 6 ; compare bx register with the size of the array
    jl loop ; if bx is less than 6, repeat the loop
    skip : ; skip label to jump to after the loop
    mov edx, OFFSET num1 ; move the offset address of num1 variable to edx register
    call print_num ; call the print_num subroutine
    mov ah, 0 ; move zero to ah register to signal successful execution
    int 21h ; interrupt to call DOS service 
main ENDP ; end of main procedure
print_num PROC ; defining the print_num subroutine
    mov ah, 0 ; clear ah register to use as counter 
    mov bx, 10 ; bx register will hold divisor value of 10
    mov cx, 0 ; clear cx register for number of digits
    mov al, byte ptr[num1] ; move value of num1 to al register
    mov dl, 0 ; clear dl register to use as temporary holder for remainder
    div bx ; divide al by bx 
    inc cl ; increment cx register for each digit
    push dx ; push remainder to stack 
    loop : ; loop for repetition
    inc ah ; increment ah register to use as counter 
    mov dl, 0 ; clear dl register to use as temporary holder for remainder
    div bx ; divide al by bx 
    inc cl ; increment cx register for each digit
    push dx ; push remainder to stack 
    cmp ah, 2 ; compare ah register with 2 (used for checking if all digits have been processed)
    jne loop ; if not equal, repeat the loop
    display : ; label for displaying the number 
    pop dx ; pop the topmost value of the stack to dx register 
    add dl, 30h ; add 30h to get the ASCII value 
    mov ah, 02 ; move char print function code (02h) to ah register
    int 21h ; interrupt to call DOS service 
    loop display ; repeat for all digits 
    mov ah, 02 ; move char print function code (02h) to ah register
    mov dl, 0xA ; move ASCII value for new line 
    int 21h ; interrupt to call DOS service 
    pop dx ; pop the topmost value of the stack to dx register 
    add dl, 30h ; add 30h to get the ASCII value 
    mov ah, 02 ; move char print function code (02h) to ah register
    int 21h ; interrupt to call DOS service 
    ret ; return from subroutine 
print_num ENDP ; end of print_num subroutine
END main ; end of program