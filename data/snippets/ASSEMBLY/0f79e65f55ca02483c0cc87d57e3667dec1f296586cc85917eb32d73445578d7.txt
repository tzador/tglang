;This code snippet calculates the factorial of a given number using a recursive function
section .data ;data section
    number db 5 ;declaring the number whose factorial is to be calculated
    output db 10 ;placeholder for the factorial result

section .text ;code section
global _start ;declaring the entry point of code

_start: ;start of the program
    mov eax, 0 ;clearing the accumulator
    mov ebx, number ;moving the number to ebx register for calculations
    call factorial ;calling the recursive factorial function
    mov [output], eax ;storing the result in output variable

    ;printing the result
    mov edx, 1 ;setting the value of edx to 1 for printing
    mov ecx, output ;moving the output variable to ecx register for printing
    mov eax, 4 ;system call code for printing
    int 80h ;interrupt to call the kernel for printing
    jmp end ;jumping to the end label to end the program

factorial:
    ;calculating the factorial using recursion
    cmp ebx, 1 ;comparing the number with 1
    jle base_case ;if the number is less than or equal to 1, jump to base case
    dec ebx ;decrementing the number
    push ebx ;pushing the decremented number to the stack
    call factorial ;calling the function again for the next iteration
    pop ebx ;popping the number from the stack
    mul ebx ;multiplying the accumulator with the number
    ret ;returning to the caller

base_case:
    ;base case, return 1 when the number is 1
    mov eax, 1 ;setting the value of accumulator to 1
    ret ;returning to the caller

end: ;end label
    mov eax, 1 ;system call code for exit
    xor ebx, ebx ;clearing the ebx register
    int 80h ;interrupt to call the kernel for exit