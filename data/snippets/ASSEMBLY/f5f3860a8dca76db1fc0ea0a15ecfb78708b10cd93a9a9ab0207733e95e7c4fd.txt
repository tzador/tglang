section .text     ; defines the code section
    global _start     ; makes the _start label globally accessible

    _start:
        ; initializes the stack pointer
        mov esp, ebp

        ; stores the return address on the stack
        push _exit

    _loop:
        ; moves the current value from register eax to register ebx
        mov ebx, eax

        ; checks if ebx is equal to 0 and jumps to _end if true
        test ebx, ebx
        je _end

        ; prints the current value in ebx to standard output
        mov eax, 4      ; sets the system call number for `write` call
        mov ebx, 1      ; sets the file descriptor for standard output
        mov ecx, ebx    ; sets the buffer address to output
        mov edx, 1      ; sets the number of bytes to output (in this case 1, since we are printing one character at a time)
        int 0x80        ; performs the system call

        ; increments the value in register eax by 1
        inc eax

        ; jumps back to _loop label to continue looping
        jmp _loop

    _end:
        ; cleans up the stack by removing the return address
        pop ebp

        ; exits the program with status code 0
        mov eax, 1      ; sets the system call number for `exit` call
        xor ebx, ebx    ; sets the exit status code to 0
        int 0x80        ; performs the system call

    section .data     ; defines the data section
    msg db 'Hello World!',0xa     ; declares a string variable, ending with a new line character and null terminator

    section .bss      ; defines the uninitialized data section
    buffer resb 1     ; reserves 1 byte of memory to be used as a buffer for reading input