/* This program calculates the factorial of a number using recursion */

.data
prompt: .asciiz "Enter a number: "           /* define string for user prompt */
result: .asciiz "The factorial is: "          /* define string for result */

.text
.globl main
main:
  li $v0, 4                                    /* load print string system call code */
  la $a0, prompt                               /* load prompt string address */
  syscall                                      /* call print string */
  
  li $v0, 5                                    /* load read integer system call code */
  syscall                                      /* call read integer */
  move $t0, $v0                                /* save input in $t0 register */
  
  li $t1, 1                                    /* initialize $t1 register to 1 */
  move $a0, $t1                                /* set $a0 register to 1 for multiplication */
  move $a1, $t0                                /* set $a1 register to user input for multiplication */
  jal factorial                                /* jump to factorial function */
  
  li $v0, 4                                    /* load print string system call code */
  la $a0, result                               /* load result string address */
  syscall                                      /* call print string */
  move $a0, $v0                                /* set $a0 register to factorial result */
  li $v0, 1                                    /* load print integer system call code */
  syscall                                      /* call print integer */
  
  li $v0, 10                                   /* load exit system call code */
  syscall                                      /* call exit */
  
factorial:
  beq $a1, $zero, base                         /* check if input is equal to 0 */
  bne $a1, $t1, calculation                    /* check if input is not equal to 1 */
  move $v0, $a0                                /* return result in $v0 register */
  jr $ra                                       /* return to main */
  
base:
  addi $v0, $t1, -1                            /* set result to -1 for input 0 */
  jr $ra                                       /* return to factorial function caller */
  
calculation:
  addi $sp, $sp, -8                            /* allocate space on stack for 2 variables */
  sw $ra, 4($sp)                               /* save return address on stack */
  sw $a1, 0($sp)                               /* save input on stack */
  addi $a1, $a1, -1                            /* subtract 1 from input for recursive call */
  jal factorial                                /* jump to factorial function */
  lw $a1, 0($sp)                               /* restore input from stack */
  lw $ra, 4($sp)                               /* restore return address from stack */
  addi $sp, $sp, 8                             /* deallocate space on stack */
  mult $a0, $a1                                /* multiply result by input */
  mflo $v0                                     /* move low-order bits to $v0 register */
  jr $ra                                       /* return to factorial function caller */