; This is a program written in Assembly language
; It takes in two integers from the user and performs multiplication

section .data ; Data section
  operand1 dw 0 ; First operand, stored as a word
  operand2 dw 0 ; Second operand, stored as a word
  result dw 0 ; Result of the multiplication, stored as a word

section .bss ; BSS section
  buf resb 5 ; Buffer to hold the user input, reserved for 5 bytes

section .text ; Text section
  global _start ; Main entry point of the program

_start: ; Start of the program execution
  ; Display a message to prompt the user for the first operand
  mov eax, 4 ; System call to print a string
  mov ebx, 1 ; Standard output file descriptor
  mov ecx, msg1 ; Pointer to the string
  mov edx, len1 ; Length of the string
  int 0x80 ; Interrupt to make the system call

  ; Read the first operand from the user and store it in operand1
  mov eax, 3 ; System call to read user input
  mov ebx, 0 ; Standard input file descriptor
  mov ecx, buf ; Pointer to the buffer for user input
  mov edx, 5 ; Maximum number of bytes to read
  int 0x80 ; Interrupt to make the system call
  mov [operand1], ax ; Move the user input to operand1

  ; Display a message to prompt the user for the second operand
  mov eax, 4 ; System call to print a string
  mov ebx, 1 ; Standard output file descriptor
  mov ecx, msg2 ; Pointer to the string
  mov edx, len2 ; Length of the string
  int 0x80 ; Interrupt to make the system call

  ; Read the second operand from the user and store it in operand2
  mov eax, 3 ; System call to read user input
  mov ebx, 0 ; Standard input file descriptor
  mov ecx, buf ; Pointer to the buffer for user input
  mov edx, 5 ; Maximum number of bytes to read
  int 0x80 ; Interrupt to make the system call
  mov [operand2], ax ; Move the user input to operand2

  ; Perform the multiplication operation
  mov ax, [operand1] ; Move the first operand to ax
  mul [operand2] ; Multiply ax with the second operand and store the result in ax
  mov [result], ax ; Move the result to the result variable

  ; Display a message with the result of the multiplication
  mov eax, 4 ; System call to print a string
  mov ebx, 1 ; Standard output file descriptor
  mov ecx, msg3 ; Pointer to the string
  mov edx, len3  ; Length of the string
  int 0x80 ; Interrupt to make the system call

  ; Display the result in hexadecimal format
  mov eax, 4 ; System call to print a string
  mov ebx, 1 ; Standard output file descriptor
  mov ecx, hex_msg ; Pointer to the string
  mov edx, hex_len ; Length of the string
  int 0x80 ; Interrupt to make the system call
  mov eax, 4 ; System call to print a string
  mov ebx, 1 ; Standard output file descriptor
  mov ecx, [result] ; Move the result to the register for printing
  mov edx, 4 ; Length of the 4 bytes to be printed
  mov ebx, 0 ; Base 10 for printing in hexadecimal format
  int 0x80 ; Interrupt to make the system call

  ; Exit the program with system call
  mov eax, 1 ; System call to exit the program
  mov ebx, 0 ; Exit status code
  int 0x80 ; Interrupt to make the system call

section .data ; Data section
  msg1    db "Enter the first operand: ", 0xa ; Initialize the message with a new line character
  len1    equ $-msg1 ; Length of the string
  msg2    db "Enter the second operand: ", 0xa ; Initialize the message with a new line character
  len2    equ $-msg2 ; Length of the string
  msg3    db "The result of the multiplication is: ", 0xa ; Initialize the message with a new line character
  len3    equ $-msg3 ; Length of the string
  hex_msg db "In hexadecimal format: ", 0xa ; Initialize the message with a new line character
  hex_len equ $-hex_msg ; Length of the string