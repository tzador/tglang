; This is a complex code snippet in assembly language
; It uses multiple registers and instructions to perform various tasks
.model small
.stack 100h    ; allocating 100h bytes of memory for stack

.data
    array1 db 10, 20, 30, 40, 50    ; declaring an array with 5 elements
    array2 db 5, 10, 15, 20, 25     ; declaring another array with 5 elements
    msg1 db 'The sum of array1 is: $'    ; declaring a message to be printed
    msg2 db 'The sum of array2 is: $'    ; declaring another message

.code
main proc
    mov ax, @data    ; moving the address of data segment to ax register
    mov ds, ax       ; moving the address of data segment to data segment register

    lea bx, array1   ; loading the address of array1 to bx register
    lea cx, array2   ; loading the address of array2 to cx register
    mov si, 0        ; initializing si register to 0 to use as index

sum_array1:         ; loop to sum the elements of array1
    add al, [bx+si]    ; add the value at bx+si to al register
    inc si            ; increment si by 1 to move to the next element
    cmp si, 5         ; compare si to 5, the size of the array
    jne sum_array1    ; jump to sum_array1 if si is not equal to 5

    mov bl, al        ; move the sum of array1 to bl register
    add bl, 48        ; convert bl to ASCII character

    lea dx, msg1      ; load the address of msg1 to dx register
    mov ah, 09h       ; set ah register to 09h to print string
    int 21h           ; interrupt 21h to print the message
    mov dl, bl        ; move the sum of array1 to dl register
    mov ah, 02h       ; set ah register to 02h to print character
    int 21h           ; interrupt 21h to print the character

    mov al, 0         ; reset al register to 0
    xor si, si        ; reset si register to 0 to use as index for array2
sum_array2:         ; loop to sum the elements of array2
    add al, [cx+si]    ; add the value at cx+si to al register
    inc si            ; increment si by 1 to move to the next element
    cmp si, 5         ; compare si to 5, the size of the array
    jne sum_array2    ; jump to sum_array1 if si is not equal to 5

    mov bl, al        ; move the sum of array2 to bl register
    add bl, 48        ; convert bl to ASCII character

    lea dx, msg2      ; load the address of msg2 to dx register
    mov ah, 09h       ; set ah register to 09h to print string
    int 21h           ; interrupt 21h to print the message
    mov dl, bl        ; move the sum of array2 to dl register
    mov ah, 02h       ; set ah register to 02h to print character
    int 21h           ; interrupt 21h to print the character

    mov ax, 4c00h     ; set ax register to 4c00h to terminate program
    int 21h           ; interrupt 21h to terminate program

main endp
end main