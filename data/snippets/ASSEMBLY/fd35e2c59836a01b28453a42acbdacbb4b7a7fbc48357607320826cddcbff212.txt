; Declare variables
    loop_counter DB 0     ; Loop counter initialized to 0
    index DB 0            ; Index initialized to 0
    array DB 5 DUP(?)     ; Array of 5 elements, values initialized later
    result DB 0           ; Result variable to store final output
    
; Initialize array with random values
    mov AH, 40            ; Set AH to 40 for random number generation
    mov CX, 5             ; Set CX to 5 for 5 array elements
    mov DI, 0             ; Set DI register to 0 for indexing
random:                  ; Label for random number generation loop
    int 21h               ; Generate a random number using interrupt 21h
    mov [array + DI], AL  ; Move the random number to array at DI index
    inc DI                ; Increment DI to point to next array element
    loop random           ; Loop until all array elements are initialized
    
; Calculate sum of array elements
sum:                     ; Label for sum calculation loop
    cmp DI, 5             ; Compare DI with 5 to check if all elements have been added
    je print_result       ; If DI equals 5, jump to label print_result
    add result, [array + DI] ; Add the current array element to result
    inc DI                ; Increment DI to point to next array element
    jmp sum               ; Jump back to sum label to continue loop
    
; Print the final result
print_result:            ; Label for printing final result
    mov AH, 2             ; Set AH to 2 for printing a single character
    mov DL, result        ; Move the result value to DL register
    add DL, 48            ; Add 48 to DL to convert it to ASCII character
    int 21h               ; Print the result using interrupt 21h
    
; End of program
    mov AH, 4Ch           ; Set AH to 4Ch to indicate end of program
    int 21h               ; Terminate the program using interrupt 21h