; This code snippet performs a bubble sort on an array of integers
; Input: Starting address of the array in AX register, number of elements in BX register
; Output: Sorted array in the same memory location

.code

MOV CX, BX ; CX register will keep track of number of elements
MOV DI, AX ; DI register will point to the start of the array

outer_loop:
    DEC CX ; decrement CX register to exclude last element already sorted
    MOV BX, CX ; BX register will keep track of inner loop iterations

inner_loop:
    MOV AX, [DI] ; load current element into AX register
    MOV DX, [DI + 2] ; load next element into DX register
    CMP AX, DX ; compare the two elements
    JG swap ; jump to swap if AX is greater than DX

no_swap:
    INC DI ; increment DI to point to next element
    DEC BX ; decrement inner loop counter
    JNZ inner_loop ; jump to inner loop if BX is not 0
    LOOP outer_loop ; jump to outer loop if CX is not 0
    JMP end ; jump to end of program if all elements are sorted

swap:
    XCHG AX, DX ; swap the elements
    MOV [DI], AX ; store the first element
    SUB DI, 2 ; move DI back to original position
    MOV [DI + 2], DX ; store the second element
    INC DI ; increment DI to point to next element
    DEC BX ; decrement inner loop counter
    JNZ inner_loop ; jump to inner loop if BX is not 0
    LOOP outer_loop ; jump to outer loop if CX is not 0

end:
    RET ; return from subroutine to main program

.end