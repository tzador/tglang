; This code snippet performs binary search on an array of sorted integers
; Input:
; rsi - starting address of array
; rdi - length of array
; rcx - key to be searched for

; Setup stack frame and reserve space for variables
    push    rbp
    mov     rbp, rsp
    sub     rsp, 16
    
; Initialize variables
    mov     rax, rdi        ; move array length to rax
    xor     rbx, rbx        ; clear rbx for use as array index
    mov     r8, rsi         ; move array address to r8
    mov     r9, rcx         ; move key to r9
    mov     r10, 0          ; initialize low index to 0
    mov     r11, rax        ; initialize high index to array length
    
; Check if array length is zero
    cmp     rax, rbx
    jz      .not_found      ; if array length is zero, key is not found
    
; Binary search loop
.binary_search:
    ; Calculate midpoint
    mov     r12, r11        ; move high index to r12
    add     r11, r10        ; add low index to high index
    shr     r11, 1          ; divide by 2
    
    ; Check if midpoint is the key
    lea     rbp, [r11 * 4]  ; multiply midpoint by 4 to get correct index
    add     rbp, r8         ; add array address to index
    mov     rbx, [rbp]      ; move value at index to rbx
    cmp     rbx, r9         ; compare value to key
    je      .found          ; if equal, key is found
    
    ; Check if midpoint is higher or lower than key
    jl      .lower          ; if lower, move high index to midpoint
    mov     r11, r12
    inc     r11             ; add 1 to high index to prevent infinite loop
    jmp     .binary_search

.lower:
    ; Check if midpoint is lower than key and high index is greater than low index
    cmp     r11, r10
    jg      .binary_search  ; if high index is greater than low index, continue binary search
    jmp     .not_found      ; else, key is not found
    
.found:
    ; Calculate index of key and move to rax
    sub     r11, r10        ; subtract low index from high index
    add     r11, 1          ; add 1 to get correct index
    mov     rax, r11
    jmp     .exit
    
.not_found:
    ; Set rax to -1 to indicate key was not found
    mov     rax, -1
    
.exit:
    ; Restore stack frame and return
    add     rsp, 16
    pop     rbp
    ret