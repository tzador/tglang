;This code snippet demonstrates a bubble sort algorithm in Assembly language

;Initialize array of integers
mov ax, @data
mov ds, ax
mov si, offset array ;pointer to first element of array
mov cx, length		 ;length is the number of elements in the array

;Outer loop to iterate through all elements
outerLoop:
	mov bx, si		 ;copy the pointer to bx
	inc bx			 ;increment bx to access next element

	;Inner loop to compare adjacent elements and swap if necessary
	innerLoop:
		xor ax, ax		 ;clear ax register
		mov ax, [bx]	 ;move second element into ax register
		cmp [si], ax	 ;compare with first element
		jg skipSwapping	 ;jump if first element is greater and no swapping is needed
		mov ax, [si]	 ;move first element into ax register
		mov [si], [bx]	 ;move second element into first element's position
		mov [bx], ax	 ;move first element into second element's position

	skipSwapping:
		inc si			 ;increment si to access next element
		dec cx			 ;decrement cx to reduce length by one
		jnz innerLoop	 ;jump to inner loop if length is not zero

	dec cx				 ;decrement cx to avoid accessing out of bounds
	jnz outerLoop		 ;jump to outer loop if length is not zero

;Print sorted array
mov ah, 09h			;system call to print string
mov dx, offset msg		;pointer to string to print
int 21h

lea si, array		;pointer to first element of array
mov cx, length		;length is the number of elements in the array
loopPrint:
	mov ax, [si]	;move element into ax register
	add ax, '0'		;convert to ASCII
mov dl, al		;move ASCII value into dl register
int 21h				;system call to print character
inc si				;increment si to access next element
loop loopPrint		;repeat until cx is zero

;Exit program
mov ax, 4c00h		;system call to terminate program
int 21h

data segment
array db 5, 1, 4, 2, 3	;array of integers to be sorted
msg db 'Sorted array: $'
length dw 5				;length of array
data ends

end