.data		; data section
_count:		.resw 1		; declare count variable as a word (2 bytes)
_result: .resw 1		; declare result variable as a word (2 bytes)
		
		.text		; code section
		.globl _main	; define main function as global

_main:					
		ldx #0 		; load index register with value 0
		lda #10 	; load accumulator with value 10
		ldy #1 		; load y register with value 1
loop: 	adda,_count,x	; add value at count address + index to accumulator
		cmpa,_result	; compare accumulator with result
		beq end 		; if equal, jump to end
		sta,_result 	; store accumulator value in result variable
		inx		 		; increment x register
		iny		 		; increment y register
		lda,_count,y	; load accumulator with value at address count + y
		cmpa,_result	; compare accumulator with result
		bgt loop 		; if above, jump back to loop
end: 	inx 				; increment x register
		iny 				; increment y register
		lda,_count,x 	; load accumulator with value at count + x
		cmpa,_result 	; compare accumulator with result
		ifge loop 		; if greater than or equal, jump back to loop
_exit: 	swab			; swap bytes of accumulator
		halt 			; stop execution