; This code snippet is a simple example of a basic assembly language program
; It takes two numbers as input and adds them together, then outputs the result

section .data ; data section
    num1 dw 10 ; define first number as word
    num2 dw 20 ; define second number as word
    result dw ? ; define result as word, initialized to 0

section .text ; code section
    global _start ; global definition for linker

_start: ; program entry point
    ; input first number
    mov ax, num1 ; move first number to AX register
    call readNum ; call subroutine to read number from user input
    mov [num1], ax ; save number back to num1 variable
    ; input second number
    mov ax, num2 ; move second number to AX register
    call readNum ; call subroutine to read number from user input
    mov [num2], ax ; save number back to num2 variable
    ; add the two numbers
    mov ax, [num1] ; move first number to AX register
    add ax, [num2] ; add second number to AX register
    mov [result], ax ; save result to result variable
    ; output the result
    mov ax, 4 ; move system call number for 'print string' to AX register
    mov bx, 1 ; move file descriptor for stdout to BX register
    mov cx, result ; move result variable to CX register
    mov dx, 2 ; move length of string to DX register (2 bytes)
    int 80h ; interrupt to call kernel and execute system call
    ; exit program
    mov ax, 1 ; move system call number for 'exit' to AX register
    xor bx, bx ; clear BX register
    int 80h ; interrupt to call kernel and execute system call

; subroutine to read number from user input
readNum: ; subroutine entry point
    push bx ; save BX register value on stack
    push cx ; save CX register value on stack
    push dx ; save DX register value on stack
    mov ax, 3 ; move system call number for 'read' to AX register
    mov bx, 0 ; move file descriptor for stdin to BX register
    mov cx, num ; move variable to store input to CX register
    mov dx, 2 ; move length of input to DX register (2 bytes)
    int 80h ; interrupt to call kernel and execute system call
    pop dx ; restore DX register value from stack
    pop cx ; restore CX register value from stack
    pop bx ; restore BX register value from stack
    ret ; return from subroutine