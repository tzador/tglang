; This code snippet declares an array of 10 integers and initializes them with values 1-10
; It then sorts the array in ascending order using bubble sort algorithm and prints the sorted array

section .data ; declaring the data section

array:  times 10 dw 0 ; declaring an array of 10 words (integers) and initializing them to 0

section .text ; declaring the text section

global _start ; declaring the _start label for the entry point

bubble_sort: ; defining the bubble_sort function

    mov ebx, 10 ; moving the length of the array into the ebx register
    dec ebx ; decrementing ebx as the length of the array is one less than the size
    jmp .outer_loop ; jumping to the outer loop

.inner_loop: ; defining the inner loop

    mov ecx, ebx ; moving the length of the unsorted elements into ecx register
    mov eax, dword [array + 4] ; moving the first element of the unsorted elements into eax register
    cmp eax, dword [array] ; comparing the first and second elements of the unsorted elements
    jle .skip_swap ; jumping to skip_swap if first element is less than or equal to second element

    ; swap the elements
    xchg eax, dword [array] ; exchanging the values of the two elements
    mov dword [array + 4], eax ; moving the first element back into its original position
    mov dword [array], ebx ; moving the second element to its new position in the array

.skip_swap: ; label to skip swapping if elements are already in ascending order

    add dword [array], 4 ; incrementing the array pointer
    loop .inner_loop ; repeating inner loop until all elements are sorted

.outer_loop: ; defining the outer loop

    cmp ebx, 0 ; comparing the length of the unsorted elements with 0
    jg .inner_loop ; jumping to the inner loop if length is greater than 0

print_array: ; defining the print_array function

    mov esi, array ; moving the array starting address into esi register
    mov ecx, 10 ; moving the length of the array into ecx register

.loop: ; defining loop label to repeat printing

    mov eax, dword [esi] ; moving the value of the current element into eax register
    add eax, '0' ; converting integer to ascii character
    mov byte [number], al ; moving the character into the number variable

    mov eax, 4 ; moving the system call for printing to eax register
    mov ebx, 1 ; moving the stdout file descriptor to ebx register
    mov ecx, number ; moving the character to be printed into ecx register
    mov edx, 1 ; moving the length of the character to be printed to edx register
    int 0x80 ; calling the system call to print the character

    inc esi ; incrementing the array pointer
    loop .loop ; repeating loop until all elements are printed

exit: ; defining the exit function

    mov eax, 1 ; moving the system call for exit to eax register
    mov ebx, 0 ; moving the exit status code to ebx register
    int 0x80 ; calling the system call to exit the program

_start: ; defining the _start label

    call bubble_sort ; calling the bubble_sort function
    call print_array ; calling the print_array function
    call exit ; calling the exit function