section .text ; Declares section for text segment
	global _start ; Global variables and functions

_start: ; Program execution starts here
	mov eax, 1 ; Move 1 into EAX register
	mov ebx, 5 ; Move 5 into EBX register
	add eax, ebx ; Add EBX to EAX and store result in EAX
	mov ecx, eax ; Move EAX into ECX

loop: ; Label for loop
	cmp ebx, 0 ; Compare EBX to 0
	je end_loop ; If EBX is 0, jump to end_loop
	sub ecx, 1 ; Subtract 1 from ECX
	jmp loop ; Jump back to loop label

end_loop: ; Label for end of loop
	mov edx, ecx ; Move ECX into EDX
	mov eax, 4 ; System call code for 'write'
	mov ebx, 1 ; File descriptor for stdout
	mov ecx, message ; Address of message variable
	mov edx, 4 ; Size of message variable
	int 0x80 ; Execute system call

	mov eax, 1 ; System call code for 'exit'
	xor ebx, ebx ; Set exit status to 0
	int 0x80 ; Execute system call

section .data ; Declares section for data segment

message db 'The result is: ', 0xa ; Message to print to stdout, 0xa is line feed