; Setting up a subroutine to perform a binary search in assembly

; This subroutine takes in three parameters: the address of the array, the length of the array, and the value to search for
; It also returns the index of the value if found, or -1 if not found

bin_search:

  ; Save the base pointer onto the stack
  push        ebp
  mov         ebp, esp
  
  ; Retrieve the parameters from the stack and store them in local variables
  ; [ebp+8] is the address of the array
  ; [ebp+12] is the length of the array
  ; [ebp+16] is the value to search for
  mov         eax, [ebp+8] ; eax = array address
  mov         ecx, [ebp+12] ; ecx = array length
  mov         edx, [ebp+16] ; edx = value
  
  ; Set up the loop counter (i) and the high (hi) and low (lo) bounds
  xor         ebx, ebx ; ebx = i
  mov         esi, edx ; esi = hi
  mov         edi, -1 ; edi = lo
  
search_loop:

  ; Calculate the midpoint
  mov         ebp, ecx ; ebp = length
  sar         ebp, 1 ; divide by 2 (since eax is already in length)
  add         ebx, ebp ; ebx = i + length/2
  add         eax, ebp ; eax = array address + length/2
  
  ; Load the value at the midpoint into eax and compare it to the search value
  mov         eax, [eax] ; eax = array[midpoint]
  cmp         eax, edx ; compare to search value
  
  ; If they are equal, found
  je          found
  
  ; If array[midpoint] < value, set new low bound to midpoint+1
  jg          set_lo
  
  ; If array[midpoint] > value, set new high bound to midpoint-1
  jl          set_hi
  
  ; Increment the loop counter
  inc         ebx
  jmp         search_loop

set_lo:

  ; Set new low bound to midpoint+1
  mov         edi, ebx ; edi = midpoint+1
  jmp         search_loop

set_hi:

  ; Set new high bound to midpoint-1
  mov         esi, ebx ; esi = midpoint-1
  jmp         search_loop

found:

  ; Store the index (ebx) in a register to return
  mov         eax, ebx ; eax = index
  jmp         exit
  
not_found:

  ; Set the return value to -1
  mov         eax, -1

exit:

  ; Restore the base pointer and return
  pop         ebp
  ret