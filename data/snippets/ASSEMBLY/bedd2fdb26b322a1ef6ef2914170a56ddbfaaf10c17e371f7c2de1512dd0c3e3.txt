; The following code snippet calculates the factorial of a given number using recursion

section .text       ; declaring text section
    global _start   ; declaring global symbol _start

    _start:         ; start of the program
        ; initializing variables
        mov ecx, 5   ; ecx holds the number whose factorial is to be found
        push ecx     ; pushing the number onto the stack
        call factorial  ; calling the factorial function
        add esp, 4   ; adjusting the stack pointer
        jmp print_result  ; jumping to print_result function

    factorial:      ; method to calculate factorial
        mov eax, [esp+4]  ; accessing the number from the stack
        cmp eax, 1    ; comparing number with 1
        jg calculate  ; jumping to calculate if the number is greater than 1
        mov eax, 1    ; assigning 1 to eax if the number is 1
        ret           ; returning from the function

    calculate:      ; method to calculate factorial recursively
        dec eax       ; decreasing the number by 1
        push eax      ; pushing the decreased number onto the stack
        call factorial  ; calling the factorial function recursively
        imul [esp+4]  ; multiplying the result of the recursive call with the original number
        add esp, 4    ; adjusting the stack pointer
        ret           ; returning from the function

    print_result:   ; method to print the result
        push eax      ; pushing the result onto the stack
        push message  ; pushing the message string onto the stack
        call printf   ; calling the printf function to print the result and message
        add esp, 8    ; adjusting the stack pointer
        mov eax, 1    ; assigning 1 to eax to indicate successful termination
        xor ebx, ebx  ; clearing ebx
        int 0x80      ; calling the interrupt to terminate the program

section .data       ; declaring data section
    message db "The factorial of %d is %d", 10, 0  ; declaring and initializing the message string