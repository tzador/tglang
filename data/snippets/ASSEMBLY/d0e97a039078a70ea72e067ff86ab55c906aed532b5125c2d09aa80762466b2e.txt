.code
main PROC

;set up stack pointer
mov ebp, esp
push esi
push edi

;initialize data segment
mov ax, @data
mov ds, ax

;loop through array
mov ecx, 0
loopStart:
cmp ecx, 10
jge loopEnd

;multiply array value by 5
mov eax, [array + ecx * 4] ;array[ecx]
mov ebx, 5
mul ebx
mov [array + ecx * 4], eax ;array[ecx] = eax

;print array value
mov edi, OFFSET array
add edi, ecx * 4 ;pointer to current array value
push eax ;save eax
push ecx ;save ecx
push edx ;save edx
mov eax, [edi] ;move value into eax
call printValue ;prints the value in eax
pop edx ;restore edx
pop ecx ;restore ecx
pop eax ;restore eax

;continue loop
inc ecx
jmp loopStart

loopEnd:
;clean up memory
pop edi
pop esi
mov esp, ebp
mov ebp, esp

;end program
mov ah, 0
int 20h

main ENDP

;subroutine to print value in eax
printValue PROC
push eax ;save eax
push ecx ;save ecx
push edx ;save edx
mov ecx, 10 ;max number of digits
mov edx, 0 ;initialize digit counter
cmp eax, 0 ;check if value is 0
jne continue
mov dl, 48 ;if 0, set dl to ASCII code for '0'
jmp printDigit

continue:
;convert value to string
mov ebx, 10 ;divide by 10 to get each digit
div ebx ;eax now holds quotient
add dl, al ;add ASCII code of digit to dl
mov al, ah ;remainder is left in ah
inc edx ;increment digit counter

printDigit:
cmp ecx, 0
jle printEnd ;check if all digits have been printed
dec ecx ;decrement digit counter
mov ah, 0eh ;set up for interrupt to print character
int 10h ;print dl
jmp continue ;continue loop

printEnd:
pop edx ;restore edx
pop ecx ;restore ecx
pop eax ;restore eax
ret
printValue ENDP