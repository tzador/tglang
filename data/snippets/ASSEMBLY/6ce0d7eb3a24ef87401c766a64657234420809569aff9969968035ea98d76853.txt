;Initializing Registers
mov AX, 0x0050          ; Move value 0x0050 into AX register
mov BX, 0x0060          ; Move value 0x0060 into BX register

;Loading memory address into register
lea CX, mem_address     ; Load memory address into CX register

;Move data from one register to another
mov DX, AX              ; Move data from AX register to DX register
mov SI, BX              ; Move data from BX register to SI register

;Performing arithmetic operations
add AX, BX              ; Add contents of BX register to AX register
sub DX, 0x0010          ; Subtract 0x0010 from DX register
imul CX, DX             ; Multiply contents of DX register with CX register
idiv BX, AX             ; Divide contents of AX register by BX register

;Saving and loading data from memory
mov [mem_address], SI   ; Save data from SI register to memory address
mov DI, [mem_address]   ; Load data from memory address to DI register

;Jumping to different sections of code
jmp label1              ; Jump to label1 in code
je label2               ; Jump to label2 if condition is equal
jne label3              ; Jump to label3 if condition is not equal

;Defining and using labels
label1:                 ; Define label1
mov AX, 0x000F          ; Move value 0x000F into AX register
label2:                 ; Define label2
jmp label3              ; Jump to label3
label3:                 ; Define label3
cmp AX, 0x0055          ; Compare value in AX register with 0x0055
jge label1              ; Jump to label1 if greater than or equal

;Looping through code
mov CX, 0x000A          ; Move value 0x000A into CX register
loop:                   ; Define loop label
add DX, AX              ; Add contents of AX register to DX register
dec CX                  ; Decrement CX register
jnz loop                ; Jump to loop label if CX is not equal to zero