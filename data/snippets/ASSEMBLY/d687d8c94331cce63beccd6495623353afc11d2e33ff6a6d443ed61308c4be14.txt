;This is a sample code snippet in Assembly language

global _main ;declaring _main as a global label for the entry point of the program
extern _scanf ;declares _scanf as a label for a function in a different file that reads user input
extern _printf ;delcares _printf as a label for a function in a different file that prints output
section .data ;section for declaring data variables
    input_msg db "Please enter a number: ", 0 ;stores the message to be displayed to the user
    output_msg db "Result: %d", 10, 0 ;stores the message to be displayed with the output
    
section .bss ;section for declaring uninitialized variables
    num resd 1 ;reserves 1 double-word (4 bytes) of space for the input number
    result resd 1 ;reserves 1 double-word (4 bytes) of space for the result
    
section .text ;section for program instructions
    _main: ;_main label for program entry point
        push ebp ;saves base pointer
        mov ebp, esp ;sets base pointer as current stack pointer
        
        ;prompts user for input and stores it in the 'num' variable
        push input_msg ;pushes the input message onto the stack
        call _printf ;calls the _printf function
        add esp, 4 ;cleans up the stack after the function call
        
        ;reads user input and stores it in the 'num' variable
        mov eax, num ;moves the address of 'num' into eax register
        push eax ;pushes the address onto the stack
        push dword format_int ;pushes the format specifier onto the stack
        call _scanf ;calls the _scanf function
        add esp, 8 ;cleans up the stack after the function call
        
        ;multiplies the input number by 2 and stores the result in 'result' variable
        mov eax, [num] ;moves the value of 'num' into eax register
        add eax, eax ;multiplies eax by 2
        mov [result], eax ;stores the result in 'result' variable
        
        ;prints the result using the 'output_msg' variable
        push dword [result] ;pushes the content of 'result' onto the stack
        push output_msg ;pushes the output message onto the stack
        call _printf ;calls the _printf function
        add esp, 8 ;cleans up the stack after the function call
        
        ;sets the return value of the function to 0
        mov eax, 0
        ;restores base pointer and returns to the operating system
        mov esp, ebp
        pop ebp
        ret
        
    section .data ;section for declaring format specifiers
        format_int db "%d", 0 ;format specifier for integer values