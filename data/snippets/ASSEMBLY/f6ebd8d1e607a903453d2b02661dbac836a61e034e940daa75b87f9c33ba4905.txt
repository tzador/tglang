; This code snippet calculates the factorial of a given number

.LC0: ; Set up a constant value for '1'
	.word	1
; 'factorial' function starts here
.fcn_factorial:
	pushq	%rbp ; Save the base pointer
	movq	%rsp, %rbp ; Set the stack pointer as new base pointer
	subq	$16, %rsp ; Make space for local variables

	movl	%edi, -4(%rbp) ; Move the input number to the stack

	cmpl	$1, -4(%rbp) ; Check if input is equal to '1'
	jle	.L2 ; If true, jump to end of function (.L2)

	movl	-4(%rbp), %eax ; Move number to be multiplied to 'eax'
	subl	$1, %eax ; Subtract '1' from 'eax'
	movsbl	(%eax,%rfp),%eax ; Move value from stack pointer to 'eax'
	movl	%eax, %esi ; Store the value in 'esi'

	call	fcn_factorial ; Recursive call for factorial function
	movl	%eax, -8(%rbp) ; Store result of factorial function on stack

	movl	-4(%rbp), %eax ; Move number to be multiplied to 'eax'
	imul	-8(%rbp), %eax ; Multiply input and result of recursive call
	jmp	.L3 ; Jump to end of function (.L3)

.L2: ; If input is equal to '1'
	movl 	.LC0, %esi ; Move constant '1' to 'esi'
.L3: ; Set the return value
	movl	%esi, %eax ; Move the return value to 'eax'
	movq	%rbp, %rsp ; Restore the stack pointer
	popq 	%rbp ; Restore the base pointer
	ret ; Return from the function