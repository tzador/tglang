; This code snippet counts the number of even numbers in an array
section .text		; Indicates start of program
	global _start
; The _start label signifies the beginning of the program
_start:
	
; Initialize the counter register and index register
	xor ecx, ecx	; Counter register (ECX) initializes to 0
	mov esi, 0		; Index register (ESI) initializes to 0
	
; Loop through the array
loop:	
	mov eax, [array+esi]	; Move current element to accumulator (EAX)
	and al, 1		; Check if least significant bit is 0 (i.e. even)	
	cmp al, 0		; Compare AL (current element) to 0
	jne not_even	; If not even, jump to not_even section

; If element is even, increase counter
inc_ctr:
	inc ecx			; Increment counter by 1
	jmp next		; Jump to next iteration of loop
	
not_even:
	inc esi			; If element is not even, increment index register
next:	
	cmp esi, [array_len]	; Compare index register to length of array
	jl loop			; If index is less than length of array, continue loop

; End of loop, print result
	print_result:
		mov eax, ecx		; Move counter register to accumulator
		mov ebx, 2		; Move value 2 to divisor register (EBX)
		xor edx, edx		; Clear division remainder register (EDX)
		div ebx			; Divide accumulator (even count) by divisor (2)	
		mov eax, ecx		; Move quotient (even count) to accumulator
		add eax, 0x30		; Convert to ascii character
		mov [result], eax	; Save result in variable
exit:
		mov eax, 1		; Move exit system call number to accumulator
		xor ebx, ebx		; Clear exit status register (EBX)
		int 0x80		; Perform system call
section .data		; Indicates start of data section
	array        db 23, 8, 11, 22, 17		; Initialize array with 5 elements
	array_len    equ $ - array		; Variable to store length of array
	result       db "The number of even elements in the array is: ", 0 
; 0 is used to terminate the string
section .bss		; Indicates start of uninitialized data section
	even_count	resb 1		; Reserve space for result of even count (1 byte)