;;; Input parameters:
;;;
;; R0 = Number of elements in array
;; R1 = Address of array

;; Loop to swap elements
swap_loop:
    ADD R2, R0, -1   ; R2 = (Number of elements - 1)
    LDR R3, [R1, R2] ; R3 = Last element in array
    LDR R4, [R1]     ; R4 = First element in array

;; Swap elements
    STR R3, [R1]     ; First element in array now contains last element
    STR R4, [R1, R2] ; Last element in array now contains first element

;; Update loop counter and check if loop is done
    ADD R1, R1, 4     ; Increment address by 4 to move to next element
    SUB R0, R0, 1     ; Decrement number of elements
    CMP R0, 0       ; If R0 == 0, loop is done
    BNE swap_loop   ; Loop again if not done

;;; Output:
;;;
;; R1 = Address of sorted array, points to first element