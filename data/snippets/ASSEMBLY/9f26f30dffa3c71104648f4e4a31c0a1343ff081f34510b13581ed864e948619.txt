;; This code calculates the factorial of a number using recursive assembly function

section .data ; section for storing data

num dw 5 ; number for which factorial will be calculated, change this value for different outputs

section .bss ; section for storing uninitialized variables

factorial resw 1 ; variable to store the result

section .text ; code section

global _start ; declaring the global symbol _start

_start: ; start of the code segment

mov cx, [num] ; move the number to be calculated to cx register
call factorial_calculation ; calling the recursive function

mov bx, [factorial] ; move the result to bx register
mov ax, 1 ; initialize ax register to 1 for multiplying
cmp bx, 0 ; compare if the result is 0
je exit ; jump to exit label if the result is 0

loop: ; loop label

mul bx ; multiply ax and bx registers
dec bx ; decrement bx register
cmp bx, 1 ; compare if bx register is equal to 1
jne loop ; if not equal, jump to loop label and repeat the process

exit: ; exit label

mov [factorial], ax ; move the final result to factorial variable

mov eax, 1 ; system exit call code
xor ebx, ebx ; exit status code
int 0x80 ; interrupt to execute system call

factorial_calculation: ; recursive function for calculating factorial

push bp ; push the base pointer for function stack
mov bp, sp ; move stack pointer to base pointer
sub sp, 2 ; reserve 2 bytes for return address

cmp cx, 1 ; compare if cx register is equal to 1
je base ; if equal, jump to base label and return 1
jz base ; if zero, jump to base label and return 1

push cx ; push the value of cx register to stack
dec cx ; decrement cx register
call factorial_calculation ; recursively call the function

base: ; base label 

mov [bp+2], ax ; move the calculated result to base pointer + 2
pop cx ; pop the value of cx register from stack
mov ax, cx ; move the value of cx register to ax register

pop bp ; restore the base pointer value
ret ; return from function

section .data ; section for storing data

msg db "The factorial of ", [num], " is ", [factorial], ".$" ; message to display the result

section .text ; code section

_print: ; function for displaying the message

pusha ; push all registers to stack
mov eax, 4 ; system call for printing
mov ebx, 1 ; file descriptor, 1 for standard output
mov ecx, msg ; message to print
mov edx, 16 ; length of message
int 0x80 ; interrupt to execute system call
popa ; pop all registers from stack
ret ; return from function

call _print ; call the print function for displaying the result
jmp exit ; jump to exit label for program termination