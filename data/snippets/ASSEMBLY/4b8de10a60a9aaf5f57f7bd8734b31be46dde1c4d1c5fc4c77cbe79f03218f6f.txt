; This code snippet is a basic implementation of a bubble sort algorithm in assembly.
; It takes in an array of integers and sorts them in ascending order.
 ; Input:
 ; * r1 - address of the array
 ; * r2 - length of the array
  
; Output:
 ; * r1 - address of the sorted array
 
 section .data ; Define our data section
     array: db 2, 5, 1, 7, 4, 3 ; Array of unsorted integers
    array_size: equ $ - array ; Constant for length of array
    temp: db 0 ; Temporary variable for swapping
 
 section .text ; Start of the code section
     global _start ; Define our entry point
     _start:
         
         ; Save r1 and r2 to stack
         push r1
         push r2
         
         ; Loop to compare elements
         outer_loop:
             xor ecx, ecx ; Counter for inner loop
             xor r1, r1 ; Reset r1 to point to start of array
             mov eax, array_size ; Move array size to eax
             dec eax ; Decrement eax as the outer loop will already check for the last element
             
             ; Inner loop to compare adjacent elements and swap if needed
             inner_loop:
                 mov dl, [r1] ; Move first element to dl
                 mov dh, [r1+1] ; Move next element to dh
                 cmp dl, dh ; Compare elements
                 jle end_if ; If dl is less than or equal to dh, no need to swap
                 mov temp, dl ; Move dl (first element) to temporary variable
                 mov dl, dh ; Move dh (second element) to dl
                 mov dh, temp ; Move temp (first element) to dh
                 mov [r1], dl ; Move updated first element back to array
                 mov [r1+1], dh ; Move updated second element back to array
                 
             end_if:
                 inc r1 ; Increment r1 to point to next set of elements
                 inc ecx ; Increment counter for inner loop
                 cmp ecx, eax ; Compare counter with eax (array size - 1)
                 jl inner_loop ; If less, continue inner loop
                 
             ; Decrement eax as one element is already sorted at the end
             dec eax
             cmp eax, 0 ; Check if all elements are sorted
             jne outer_loop ; If not sorted, continue outer loop
             
         ; Restore r1 and r2 from stack
         pop r2
         pop r1
         
         ; Exit
         mov eax, 1 ; 1 is the exit syscall
         mov ebx, 0 ; Return 0 for successful execution
         int 0x80 ; Call kernel
 
 ; End of code