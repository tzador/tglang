;This block of code performs a bubble sort algorithm on an array of integers

section .data ;declare data section
    numbers db 5,2,7,1,9,3 ;array of numbers to be sorted
    size equ $-numbers ;equates the size of the array to the total number of bytes (6)

section .text ;declare code section
    global _start

_start: ;program entry point
    mov ecx, size ;set loop counter to size of array
    mov esi,numbers ;set source index to first element of array

outerloop:
    xor eax, eax ;clear accumulator
    mov ebx, ecx ;set inner loop counter to size of array
    mov edi, esi ;set destination index to first element of array

innerloop:
    mov al, [edi] ;move element at current index into accumulator
    cmp al, [edi + 1] ;compare with next element
    jle skipswap ;if less than or equal, skip swap

    ;swap elements
    mov dl, [edi + 1] ;save next element in temp register
    mov byte [edi], dl ;move temp register value to current index
    mov byte [edi + 1], al ;move accumulator value to next index

skipswap:
    add edi, 1 ;increment destination index by 1
    loop innerloop ;decrement inner loop counter and continue looping if not zero

    add esi, 1 ;increment source index by 1
    loop outerloop ;decrement outer loop counter and continue looping if not zero

    ;exit program
    mov eax, 1 ;set system call to exit
    xor ebx, ebx ;clear error code
    int 0x80 ;execute system call