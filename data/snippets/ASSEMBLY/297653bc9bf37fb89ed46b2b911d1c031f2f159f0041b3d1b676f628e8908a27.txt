; This code snippet demonstrates a basic sorting algorithm implemented in assembly
; The algorithm used is insertion sort
; Start of code

.data
    ; Define an array of data to be sorted
    dataArray:   db 27h, 53h, 14h, 17h, 9h, 65h, 23h, 87h, 12h
    length db 9    ; Store the length of the array

.code
main proc
    mov ax, @data           ; Set data segment
    mov ds, ax

    ; Use a loop to iterate through the array
    ; Outer loop (i corresponds to the index of the next element to be sorted)
    mov cx, length           ; Counter for outer loop
    dec cx                   ; Decrement the counter to compensate for zero-based indexing
    outerLoop:
    mov dx, cx               ; Set dx equal to i
    jz done                  ; If dx is zero, the outer loop is done

    ; Inner loop (j corresponds to the index of the element to be compared with the next element)
    mov di, dx               ; Set di equal to i
    dec di                   ; Decrement di to compare with previous element
    innerLoop:
    mov si, di               ; Set si to j
    inc si                   ; Increment si to compare with next element
    mov al, dataArray[si]    ; Load next element into al
    cmp al, dataArray[di]    ; Compare with current element
    jge next                 ; If the next element is greater than the current element, go to next element

    ; If the next element is smaller than the current element, swap them
    mov ah, dataArray[di]  ; Move current element to ah
    mov bx, di             ; Store index in bx
    mov dataArray[bx], al  ; Set current element to next element
    mov dataArray[si], ah  ; Set next element to current element

    next:
    dec di                 ; Decrement di to compare with previous element
    jnz innerLoop          ; Repeat inner loop as long as di is not zero

    ; Increment outer loop counter and repeat
    dec cx
    jmp outerLoop

    done:
    ; Print sorted array
    mov ah, 9      ; Set interrupt function to print string
    lea dx, dataArray    ; Load array into dx
    int 21h        ; Call interrupt

    ; End program
    mov ah, 4ch
    int 21h

main endp
end main