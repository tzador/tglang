;Description: This code snippet performs a binary search algorithm on a given array of integers, returning the index of the target element if found, or -1 if not found.
;
;Inputs: R0 - pointer to the array
;        R1 - size of the array
;        R2 - target element to be searched
;
;Output: If target element is found, R3 stores the index of the element. If not found, R3 is set to -1.

CMP R1, #0 ; check if array size is 0
BEQ not_found ; if size is 0, target element is not found
MOV R4, #0 ; initialize starting index
ADD R5, R1, #-1 ; initialize ending index
loop:
CMP R4, R5 ; check if starting index is equal to ending index
BEQ not_found
ADD R6, R4, R5 ; calculate middle index using BISECT function
MOV R6, R6, ASR #1 ; divide by 2
LDR R3, [R0, R6, LSL #2] ; load element at middle index
CMP R3, R2 ; compare with target element
BEQ found ; if equal, target element is found
BHS check_right ; if greater, check right half of array
check_left:
CMP R4, R6 ; update ending index
BEQ not_found
ADD R5, R6, #-1
B loop ; go back to loop
check_right:
CMP R5, R6 ; update starting index
BEQ not_found
ADD R4, R6, #1
B loop ; go back to loop
found:
MOV R3, R6 ; move index of target element to R3
B exit
not_found:
MOV R3, #-1 ; initialize result to -1
exit: ; exit loop