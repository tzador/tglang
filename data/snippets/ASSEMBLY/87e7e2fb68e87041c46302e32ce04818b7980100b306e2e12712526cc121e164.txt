; This code snippet calculates the factorial of a number
; Input: n = number to calculate factorial for
; Output: the factorial of n
; Uses rax and rbx as temporary registers

section .text
global _start		; Entry point for the program

; _start is defined as an external function
extern _start

; Function to calculate the factorial
_factorial:
    mov rbx, 1		; Initialize rbx to 1 (starting value for factorial)
    mov rax, 1		; Initialize rax to 1 (counter for factorial loop)
    cmp rax, rdi	; Compare counter with input number
    jge _end		; If counter >= input, jump to end of function
_factorial_loop:
	mul rax, rbx	; Multiply current counter value with current factorial value
	add rax, 1		; Increment counter by 1
	cmp rax, rdi	; Compare counter with input number again
	jz _end			; If counter == input, jump to end of function
	jmp _factorial_loop	; Otherwise, continue looping
_end:
	ret				; Return the result in rax

; Main function
_start:
	mov rdi, 10		; Assign input number (in this case, 10) to rdi register
	call _factorial	; Call the factorial function
	mov rbx, rax	; Move the result (in rax) to rbx for printing
	mov rax, 1		; System call number for printing (sys_write)
	mov rdi, 1		; Standard output file descriptor (1)
	mov rsi, rbx	; Message to print (result of factorial)
	mov rdx, 8		; Number of characters to print (8 for 64-bit)
	syscall			; Make system call to print result
	mov rax, 60		; System call number for exiting (sys_exit)
	xor rdi, rdi	; Return 0 (success)
	syscall			; Make system call to exit program