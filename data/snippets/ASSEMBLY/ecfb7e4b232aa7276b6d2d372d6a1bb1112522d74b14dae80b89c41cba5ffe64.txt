; initialize data sizes and operands
.model small
.stack 100
.data
    num1 dw 3 ; define a word (16 bits) variable named 'num1' with value 3
    num2 dw 6 ; define a word (16 bits) variable named 'num2' with value 6
.code
main proc
; perform addition
    mov ax, @data ; load data segment address into ax
    mov ds, ax ; set data segment register
    mov ax, num1 ; move value of 'num1' into ax register
    add ax, num2 ; add value of 'num2' to ax register
    mov num1, ax ; store result in 'num1' variable
; perform subtraction
    mov ax, num1 ; move value of 'num1' into ax register
    sub ax, num2 ; subtract value of 'num2' from ax register
    mov num1, ax ; store result in 'num1' variable
; perform multiplication
    mul num1 ; multiply ax by value in 'num1' and store in ax
    mov num1, ax ; store result in 'num1' variable
; perform division
    mov ax, num1 ; move value of 'num1' into ax register
    div num2 ; divide ax by value in 'num2' and store quotient in ax, remainder in dx
    mov result, ax ; store quotient in 'result' variable
    mov result2, dx ; store remainder in 'result2' variable
    mov ah, 09h ; display message on screen
    lea dx, message1 ; load message into dx register
    int 21h ; display message
    mov ah, 01h ; wait for user input
    int 21h ; read user input
    mov ah, 09h ; display message on screen
    mov dl, result ; move result into dl register
    add dl, 30h ; convert result to ASCII character
    mov ah, 02h ; display single character
    int 21h ; display result
    mov ah, 09h ; display message on screen
    mov dl, result2 ; move remainder into dl register
    add dl, 30h ; convert remainder to ASCII character
    mov ah, 02h ; display single character
    int 21h ; display remainder
    mov ah, 09h ; display message on screen
    lea dx, message2 ; load message into dx register
    int 21h ; display message
    mov ah, 09h ; display message on screen
    mov dl, result ; move result into dl register
    mov ah, 02h ; display single character
    int 21h ; display result
    mov ah, 09h ; display message on screen
    mov dl, result2 ; move remainder into dl register
    mov ah, 02h ; display single character
    int 21h ; display remainder
    mov ah, 4ch ; end program
    int 21h
main endp ; end of main procedure
end main ; end of program

.data
    result db 0 ; define a byte (8 bits) variable named 'result' with initial value 0
    result2 db 0 ; define a byte (8 bits) variable named 'result2' with initial value 0
    message1 db "The quotient is: $"
    message2 db "The remainder is: $"