; This is a complex assembly code snippet that calculates the Fibonacci series up to a given number
.model small
.stack 100h ; creates a 100-byte stack
.data
input DB 10 ; variable to hold user input
currNum DB ? ; variable to store current number in the sequence
prevNum DB ? ; variable to store previous number in the sequence
nextNum DB ? ; variable to store next number in the sequence
count DB 0 ; variable to count number of terms in the sequence
.code
main PROC
MOV AX, @data ; moves data segment to AX register
MOV DS, AX ; moves data segment to DS register
MOV AH, 1 ; sets AH to 1 for input
INT 21H ; interrupts to get input from user
MOV currNum, AL ; moves input value to current number variable
MOV BL, 0 ; sets BL register to 0 for first iteration
MOV CL, 1 ; sets CL register to 1 for second iteration
MOV prevNum, BL ; moves value of 0 to previous number variable
MOV nextNum, CL ; moves value of 1 to next number variable
MOV count, CL ; sets count to 1 for first two iterations
fibonacci:
ADD currNum, prevNum ; adds current and previous number to get next number
MOV prevNum, currNum ; moves current number to previous number for next iteration
MOV currNum, nextNum ; moves next number to current number
INC count ; increments number of terms
CMP currNum, input ; compares current number to user input
JG display ; jumps to display if current number is greater than input
MOV nextNum, prevNum ; moves previous number to next number for next iteration
JB fibonacci ; jumps back to fibonacci for next iteration if current number is not greater than input
display:
MOV AH, 09H ; sets AH to 09H for displaying output
MOV DX, offset result ; moves offset of result to DX register for printing
INT 21H ; interrupts to print output
MOV AX, 4C00H ; sets AX to 4C00H for program termination
INT 21H ; interrupts to terminate program
main ENDP
end main ; ends main program
result DB "The Fibonacci series up to ", 13, 10, "$" ; string literal to be displayed
END main ; ends program