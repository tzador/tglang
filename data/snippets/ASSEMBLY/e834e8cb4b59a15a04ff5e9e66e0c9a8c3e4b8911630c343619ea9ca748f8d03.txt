; This code snippet generates a Fibonacci sequence
%define n 10              ; Set the number of elements in the sequence

section .text            ; .text section is where the main code is written
    global _start

_start:
    mov ecx, n           ; Move the value of n into the ECX register
    mov eax, 1           ; Set the first element of the sequence to 1
    mov ebx, 0           ; Set the second element of the sequence to 0

loop:
    mov edx, eax         ; Move the value of eax into the EDX register
    add eax, ebx         ; Add the value of ebx to the value of eax, sets eax to the sum
    mov ebx, edx         ; Move the value of edx (previous eax) into ebx
    call print           ; Call the print function to output the current value of eax
    dec ecx              ; Decrease the value of ecx by 1
    jnz loop             ; If ecx is not equal to 0, jump back to the loop label

exit:
    mov eax, 1           ; Set the system call number for exit to 1
    xor ebx, ebx         ; Set the exit status code to 0
    int 0x80             ; Perform the system call to exit the program

print:
    mov eax, 4           ; Set the system call number for write to 4
    mov ebx, 1           ; Set the file descriptor to stdout
    mov edx, 4           ; Set the length of the string to be printed
    mov ecx, eax         ; Set the starting address of the string to be printed
    int 0x80             ; Perform the system call to write to stdout
    ret                  ; Return from the print function