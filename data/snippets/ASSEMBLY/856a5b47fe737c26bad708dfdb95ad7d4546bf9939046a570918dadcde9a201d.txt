;; This code snippet calculates the factorial of a number
segment .data ; data segment
    number dw 6 ; variable to store the number
    result dw 0 ; variable to store the result

segment .text ; code segment
    global _start ; define main function
    
_start:
    mov ax, number ; move number into ax register
    mov bx, ax ; move number into bx register
    mov cx, ax ; move number into cx register
    
    ; loop label
    loop:
        dec bx ; decrement the bx value by 1
        cmp bx, 0 ; compare bx value with 0
        
        ; if statement to check if bx value is 0 or not
        jz print_result ; jump to print_result label if bx value is 0
        
        ; else statement
        mul bx ; multiply ax register with bx register
        loop loop ; repeat loop until bx value is 0
        jmp end ; jump to end label
        
    print_result:
        mov result, ax ; move result from ax register to result variable
        mov bx, 0 ; set bx register to 0
        
        ; loop to convert result into ASCII characters
        convert_loop:
            div cx ; divide ax by cx
            add bl, '0' ; add '0' to bl register to convert to ASCII
            push bx ; push bx onto stack
            mov bx, 0 ; reset bx register
            
            cmp ax, 0 ; compare ax value with 0
            jz print_stack ; jump to print_stack label if ax value is 0
            
            loop convert_loop ; repeat loop until ax value is 0
            
        print_stack:
            pop bx ; pop top value from stack into bx register
            mov ah, 0x0e ; set output mode
            mov al, bl ; move ASCII value from bl register to al register
            int 0x10 ; call interrupt 0x10 to print character
            
            cmp bx, 0 ; compare bx value with 0
            jz end ; jump to end label if bx value is 0
            jmp print_stack ; else jump back to print_stack label to print next character
            
    end:
        mov ah, 0x0a ; set output mode to new line
        mov al, 0x0d ; move carriage return value to al register
        int 0x10 ; call interrupt 0x10 to print carriage return
        mov ah, 0x0a ; set output mode to new line
        mov al, 0x0a ; move line feed value to al register
        int 0x10 ; call interrupt 0x10 to print line feed
        
        mov ah, 0x09 ; set output mode to print string
        lea dx, [result] ; load address of result variable into dx register
        int 0x21 ; call interrupt 0x21 to print string
        mov ah, 0x0a ; set output mode to new line
        mov al, 0x0a ; move line feed value to al register
        int 0x10 ; call interrupt 0x10 to print line feed
        
        mov ah, 0x08 ; set input mode
        int 0x21 ; call interrupt 0x21 to get user input
        mov ah, 0x00 ; clear ah register
        
        mov dl, al ; move user input value into dl register
        sub dl, 48 ; subtract 48 from ASCII value to get actual number
        
        mov number, dl ; move number into variable
        
        jmp _start ; jump back to _start label to calculate factorial of new number
        
end _start ; end of _start function