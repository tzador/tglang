section .data         ; declaring data section
    msg db 'Hello, world!', 0xA  ; defining a string with newline character
    len equ $-msg  ; getting the length of the string by subtracting current location from start
    arr db 1, 2, 3, 4  ; defining an array of 4 bytes
    size equ $-arr  ; getting the size of the array
    num dw 1234h  ; defining a word with hexadecimal value

section .bss  ; declaring bss section
    buff resb 20  ; reserving 20 bytes for buffer
    cnt resw 1  ; reserving 1 word for counter variable

section .text  ; declaring text section
    global _start  ; declaring entry point
    _start:  ; defining the start label
        ; printing the string msg
        mov eax, 4  ; setting system call for output
        mov ebx, 1  ; setting file descriptor for standard output
        mov ecx, msg  ; setting the address of string to be printed
        mov edx, len  ; setting the length of string
        int 0x80  ; executing system call

        ; calculating sum of elements in array arr
        mov eax, 0  ; setting accumulator to 0
        mov ecx, arr  ; setting the starting address of array
        mov ebx, size  ; setting the size of array
        loop_start:  ; defining loop label
            add eax, [ecx]  ; adding value at current index to accumulator
            add ecx, 1  ; moving to next index
            loop loop_start  ; looping until ebx becomes 0

        ; printing the sum
        mov edx, 4  ; setting the length of output string to 4
        mov ebx, 1  ; setting file descriptor for standard output
        mov ecx, eax  ; setting the sum as output
        mov eax, 4  ; setting system call for output
        int 0x80  ; executing system call

        ; reading input from user and storing in buffer
        mov edx, 20  ; setting the size of input buffer
        mov ecx, buff  ; setting the address of buffer
        mov ebx, 0  ; setting file descriptor for standard input
        mov eax, 3  ; setting system call for input
        int 0x80  ; executing system call

        ; converting input into decimal and storing in counter variable
        mov edx, 0  ; setting the starting index for conversion
        mov eax, buff  ; setting the address of input buffer
        mov ebx, 0  ; setting base 10 for decimal conversion
        mov ecx, cnt  ; setting the address of counter variable to store result
        mov esi, 10  ; setting the divisor for decimal conversion
convert_loop:  ; defining loop label
        cmp byte[eax], 0  ; checking if end of input string is reached
        je convert_end  ; jumping to end if reached
        mul esi  ; multiplying current result by 10
        sub byte[eax], '0'  ; converting from ASCII to decimal
        add dword[ecx], eax  ; adding current digit to result
        add eax, 1  ; moving to next digit
        jmp convert_loop  ; looping until end of string is reached
convert_end:

        ; printing the decimal value from counter variable
        mov edx, 4  ; setting the length of output string to 4
        mov ebx, 1  ; setting file descriptor for standard output
        mov ecx, [cnt]  ; setting the decimal value as output
        mov eax, 4  ; setting system call for output
        int 0x80  ; executing system call

        ; exit system call
        mov eax, 1  ; setting system call for exit
        mov ebx, 0  ; setting exit code
        int 0x80  ; executing system call