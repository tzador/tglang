; This code snippet calculates the factorial of a given number using recursion
section .data ; Data section
   num dw 5 ; Input number
   res dw 1 ; Result variable

section .text ; Code section
global _start ; Declare label for entry point

_start: ; Entry point
   ; Setup stack for recursive function call
   push dword num
   call factorial
   add esp, 4

   ; Print the result
   mov eax, 4 ; Syscall number for printing
   mov ebx, 1 ; File descriptor for stdout
   mov ecx, res ; Address of result variable
   mov edx, 2 ; Length of result variable
   int 0x80 ; Call syscall

   ; Exit program
   xor ebx, ebx ; Syscall number for exit
   mov eax, 1 ; Exit status code
   int 0x80 ; Call syscall

; Recursive function to calculate factorial
factorial:
   push ebp
   mov ebp, esp ; Create stack frame

   ; Save current number and result to local variables
   mov dword [ebp-4], dword [ebp+8] ; num
   mov dword [ebp-8], dword [ebp+12] ; res

   ; Check if num is equal to 0, if yes return 1 as result
   cmp dword [ebp-4], 0
   jne .factorial_start
   mov dword [ebp-8], 1
   jmp .factorial_end

.factorial_start:
   ; Recursive call with num-1
   dec dword [ebp-4]
   push dword [ebp-4]
   call factorial
   add esp, 4

   ; Multiply the result with the current number
   imul dword [ebp-4], [ebp-8]

.factorial_end:
   ; Restore stack frame and return
   mov esp, ebp
   pop ebp
   ret