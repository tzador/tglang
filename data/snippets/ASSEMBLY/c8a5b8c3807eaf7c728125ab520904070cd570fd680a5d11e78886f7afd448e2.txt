.text
	.globl _start
	
	_start:         ; beginning of program code
	
	movl $1, %eax   ; move the value 1 into the %eax register
	movl $0, %ebx   ; move the value 0 into the %ebx register
	int $0x80       ; interrupt to invoke system call
	
	movl $0, %eax   ; move the value 0 into the %eax register
	ret             ; return from function
	
	.data           ; beginning of data section
	
	message:        ; label for string "Hello, World!"
		.ascii "Hello, World!\n"   ; actual string with newline character
		length = .-message    ; calculates length of string
	
	.bss            ; beginning of uninitialized data section
	
	.space 10       ; creates 10 bytes of empty space for future use
	
	.text           ; back to code section
	
	_start:         ; beginning of program code
	
	movl $4, %eax   ; move the value 4 (system call number for 'write') into the %eax register
	movl $1, %ebx   ; move the value 1 (file descriptor for standard output) into the %ebx register
	movl $message, %ecx   ; move the address of the string 'message' into the %ecx register
	movl $length, %edx    ; move the length of the string in %edx register
	int $0x80       ; invoke system call
	
	movl $1, %eax   ; move the value 1 (system call number for 'exit') into the %eax register
	movl $0, %ebx   ; move the value 0 (exit status code) into the %ebx register
	int $0x80       ; invoke system call