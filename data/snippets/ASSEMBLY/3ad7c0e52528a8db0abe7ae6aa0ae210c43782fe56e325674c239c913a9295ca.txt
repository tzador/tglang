; The following code snippet is in assembly language

; Define a data segment
DATA SEGMENT
    ; Declare a variable named 'num' with initial value 5
    ; Use 'DB' to declare a byte-sized variable
    ; '5' is the initial value of the variable
    num DB 5
    ; Declare another variable named 'sum' with initial value 0
    ; Use 'DW' to declare a word-sized variable
    ; '0' is the initial value of the variable
    sum DW 0
DATA ENDS

; Define a code segment
CODE SEGMENT
    ; Use 'ASSUME' to assign the logical names of the segments
    ; In this case, the data segment is assigned the logical name 'DATA'
    ASSUME DS:DATA
    
    ; Initialize a register for counting the loop
    ; Use 'CX' as a counter register
    MOV CX, num
    
    ; Use the 'LEA' (load effective address) instruction to load the memory address
    ; of 'sum' into the 'AX' register
    ; This will be used as the accumulator for the addition
    LEA AX, sum
    
    ; Use 'LOOP' instruction to start the loop
    ; This instruction decrements the counter in CX and jumps to the specified label
    ; as long as CX is not equal to 0
    LOOP ADD_LABEL
    
    ; After the loop, store the final sum back into the 'sum' variable
    ; Use 'MOV' instruction to move the value in 'AX' register to 'sum' variable
    MOV sum, AX
    
    ; Display the value of 'sum' on the screen
    ; Use 'MOV' to move the value of 'sum' variable to the 'AX' register
    MOV AX, sum
    
    ; Use 'LEA' to load the memory address of 'sum' into the 'DX' register
    LEA DX, sum
    
    ; Use 'HLT' (halt) instruction to stop the program
    ; This is used to prevent the program from exiting without displaying the result
    HLT
    
    ; Display the value of 'sum' on the screen
    ; Use the 'OUT' instruction to output the value in the 'AX' register
    ; to the port specified in the 'DX' register, which is the screen
    OUT DX, AX
    
    ; End the program by using the 'END' directive
    ; This ensures that the program does not continue to execute
    ; anything after it
    END
CODE ENDS