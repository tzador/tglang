section .text                        ;start of text section

global _start                        ;make _start label visible to linker

_start:                              ;start label

  mov rax, 60                        ;system call for exit
  mov rdi, 0                         ;exit success
  syscall                            ;execute syscall

  push rbp                           ;save base pointer
  mov rbp, rsp                       ;move rsp value to rbp

  lea rdi, [rbp - 8]                 ;load address of variable into rdi
  mov dword [rdi], 123456            ;move value into specified address

  mov dword [rip + variable], 10     ;move value into global variable specified by label

  mov eax, 1                         ;system call for write
  mov edi, 1                         ;file descriptor for stdout
  mov rsi, [rbp - 8]                 ;pointer to string
  mov edx, 6                         ;length of string
  syscall                            ;execute syscall for write

  mov eax, [rdi]                     ;move value from memory address into eax
  xor rax, rax                       ;xor eax with itself to set register to 0

  pop rbp                            ;restore base pointer

  jmp _start                         ;jump back to start label

section .data                        ;start of data section

  variable dd 0                      ;declare global variable and assign value 0

  msg db "Hello World", 0xA           ;create string with newline character at end

  section .bss                       ;start of uninitialized data section

  uninitialized resb 10              ;create reserved space for 10 bytes of data