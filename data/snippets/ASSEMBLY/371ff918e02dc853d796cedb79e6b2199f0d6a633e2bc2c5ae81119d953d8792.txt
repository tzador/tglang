section .text          ; Indicates the beginning of the code section. 

global _start           ; Makes _start the global entry point of the program.

_start:                 ; The start label. 

mov eax, 1              ; Copies the value 1 into the EAX register, which is used for system calls. 

xor ebx, ebx            ; Clears the EBX register.

int 0x80                ; Performs a system call using the EAX and EBX registers. 

cmp eax, 0              ; Compares the return value from the previous system call with 0.

jne exit                ; Jumps to the exit label if the return value is not equal to 0. 

mov eax, 4              ; Copies the value 4 into the EAX register, which is used for the `write` system call. 

mov ebx, 1              ; Copies the value 1 into the EBX register, which represents the standard output.

mov ecx, message        ; Copies the memory address of the message string into the ECX register.

mov edx, message_len    ; Copies the length of the message string into the EDX register.

int 0x80                ; Performs the `write` system call using the EAX, EBX, ECX, and EDX registers.

exit:
mov eax, 1              ; Copies the value 1 into the EAX register, which is used for the `exit` system call.

xor ebx, ebx            ; Clears the EBX register.

int 0x80                ; Performs the `exit` system call using the EAX and EBX registers.

section .data          ; Indicates the beginning of the data section.

message db 'Hello, World!', 10  ; Defines a string with a newline character at the end.

message_len equ $-message        ; Calculates the length of the message string and assigns it to the `message_len` constant.