; Initialize counter
mov cx, 0            

; Loop through array values
for:
mov eax, [arr + cx*4]    ; Get value at index (4 bytes per value)
cmp eax, 50              ; Compare value to 50
jle skip                 ; If less than or equal, skip to next iteration
add eax, 10              ; Otherwise, add 10 to value
mov [arr + cx*4], eax    ; Store updated value back in array
skip:                    ; Label for skipping
inc cx                   ; Increment counter
cmp cx, 10               ; Compare counter to 10 (array size)
jl for                   ; If less than, loop again

; Print updated array values
mov ecx, 0               ; Initialize loop counter
print:
mov eax, [arr + ecx*4]   ; Get value at index (4 bytes per value)
call print_num           ; Custom function to print number
inc ecx                  ; Increment counter
cmp ecx, 10              ; Compare counter to 10 (array size)
jl print                 ; If less than, loop again

; Custom print_num function
print_num:
push eax                 ; Save value to stack
push ecx                 ; Save loop counter to stack
mov ecx, 10              ; Set loop counter to 10 (for printing digits)
mov ebx, 10              ; Initialize divisor for extracting digits
jmp print_loop           ; Jump to loop

; Loop for extracting digits and printing
print_loop:
xor edx, edx             ; Clear edx register for division
div ebx                  ; Divide eax by ebx (extracts rightmost digit)
add dl, '0'              ; Convert digit value to ASCII code
mov [num], dl            ; Store ASCII code in variable for printing
push num                 ; Push ASCII code to stack
inc ecx                  ; Increment loop counter
cmp ecx, 10              ; Compare loop counter to 10
jl print_loop            ; If less than, loop again

; Loop for printing digits
print_digit:
pop eax                  ; Pop from stack into eax register
call print_char          ; Custom function to print character
dec ecx                  ; Decrement loop counter
cmp ecx, 0               ; Compare loop counter to 0
jne print_digit          ; If not equal, loop again

; End of print_num function
pop ecx                  ; Pop loop counter from stack
pop eax                  ; Pop value from stack
ret                      ; Return from function

; Custom print_char function
print_char:
push eax                 ; Save value to stack
mov ah, 0x0e             ; Set print function to 0x0e
int 0x10                 ; Call interrupt to print character stored in al register
pop eax                  ; Pop value from stack
ret                      ; Return from function

; Data section
section .data
arr dd 45, 26, 78, 12, 86, 32, 67, 59, 91, 75   ; Array of 10 numbers
num db 0                  ; Variable to store ASCII code for printing