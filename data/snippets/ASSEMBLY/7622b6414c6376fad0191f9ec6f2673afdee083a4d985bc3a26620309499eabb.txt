section .data ; Defines a section for variables and constants
    message db "Hello World!",0xA,0xD ; Declares a variable 'message' with the string value "Hello World!" and line breaks
    num1 dw 10 ; Declares a word (16 bits) variable 'num1' with the value 10
    num2 dw 20 ; Declares a word (16 bits) variable 'num2' with the value 20
    result dd 0 ; Declares a double word (32 bits) variable 'result' with initial value of 0
    
section .text ; Defines a section for code instructions
    global _start ; Declares the entry point of the program
    
_start: ; Program starts executing from here
    ; mov instruction moves a value into a register or memory location
    mov ax, num1 ; Moves the value of 'num1' into the AX register
    mov bx, num2 ; Moves the value of 'num2' into the BX register
    add ax, bx ; Adds the values in AX and BX and stores the result in AX
    mov [result], ax ; Moves the value of AX into the memory location 'result'
    
    ; syscalls are used to interact with the operating system
    mov eax, 4 ; Moves the value 4 into the EAX register (syscall number for 'write')
    mov ebx, 1 ; Moves the value 1 into the EBX register (file descriptor for standard output)
    mov ecx, message ; Moves the address of 'message' into the ECX register (pointer to the message)
    mov edx, 14 ; Moves the value 14 into the EDX register (length of the message)
    int 80h ; Interrupt 80h triggers the 'write' syscall
    
    ; syscalls can also be used to terminate the program
    mov eax, 1 ; Moves the value 1 into the EAX register (syscall number for 'exit')
    mov ebx, 0 ; Moves the value 0 into the EBX register (exit code)
    int 80h ; Interrupt 80h triggers the 'exit' syscall