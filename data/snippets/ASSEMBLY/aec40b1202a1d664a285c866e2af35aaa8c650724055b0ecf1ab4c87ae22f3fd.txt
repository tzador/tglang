;Define variables
        section .data
    message1 db 'Hello', 0xa, 0xd ;String variable for "Hello"
    message2 db 'World', 0xa, 0xd ;String variable for "World"
    sum db 0 ;Define variable for sum

        section .text
        global _start

;Start of program
_start:
    mov edx, 5 ;Move value 5 into register edx
    mov ecx, 10 ;Move value 10 into register ecx
    add edx, ecx ;Add values in registers edx and ecx and store in edx
    mov [sum], edx ;Move value in register edx into variable sum

    ;Print message1
    mov eax, 4 ;Move value 4 into register eax for system call "write"
    mov ebx, 1 ;Move value 1 into register ebx for file descriptor (stdout)
    mov ecx, message1 ;Move address of message1 into register ecx
    mov edx, 6 ;Move number of bytes to write (length of "Hello") into register edx
    int 0x80 ;Perform system call

    ;Print message2
    mov eax, 4 ;Move value 4 into register eax for system call "write"
    mov ebx, 1 ;Move value 1 into register ebx for file descriptor (stdout)
    mov ecx, message2 ;Move address of message2 into register ecx
    mov edx, 6 ;Move number of bytes to write (length of "World") into register edx
    int 0x80 ;Perform system call

    ;Print sum
    mov eax, 4 ;Move value 4 into register eax for system call "write"
    mov ebx, 1 ;Move value 1 into register ebx for file descriptor (stdout)
    mov ecx, sum ;Move address of sum into register ecx
    mov edx, 2 ;Move number of bytes to write (length of sum) into register edx
    int 0x80 ;Perform system call

    mov eax, 1 ;Move value 1 into register eax for system call "exit"
    mov ebx, 0 ;Move value 0 into register ebx for exit status
    int 0x80 ;Perform system call to exit program