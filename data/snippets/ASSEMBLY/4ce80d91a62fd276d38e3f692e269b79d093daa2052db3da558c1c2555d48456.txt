; This program calculates the sum of the first 10 positive integers
.section .data       ; Declare data section

sum         dw 0     ; Declare sum variable and initialize to 0
count       dw 1     ; Declare count variable and initialize to 1

.section .text       ; Declare code section

main:
    mov [sum], 0     ; Set sum variable to 0
    mov [count], 1   ; Set count varaible to 1

    loop:
        add [sum], [count] ; Add current count value to sum
        inc [count]         ; Increment count
        cmp [count], 10     ; Compare count to 10
        jg end              ; If count is greater than 10, jump to end

    jmp loop            ; Jump back to loop

end:
    mov eax, [sum]      ; Move sum value into eax register
    push eax            ; Push result onto stack
    call disp_result    ; Call disp_result function
    jmp finish          ; Jump to finish

disp_result:
    mov ebx, [esp+4]    ; Move result from stack to ebx register
    mov ecx, msg        ; Move msg address to ecx register
    mov edx, len        ; Move msg length to edx register
    mov eax, 4          ; Set write system call number
    int 0x80            ; Call kernel

    ret                 ; Return from function

finish:
    nop                 ; No operation
    mov eax, 1          ; Set exit system call number
    int 0x80            ; Call kernel

.section .bss           ; Declare uninitialized data section

    msg:    db 'The result is: %d', 10 ; Declare msg variable
    len:    equ $ - msg                ; Declare len variable and set value to current position - start of msg address
    result: resb 4                     ; Reserve 4 bytes for result variable