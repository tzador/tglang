.section .data 					; declares a section for storing data
	output_msg:
		.ascii "Hello, world!"			; declares a string containing the message to be output

	.section .text					; declares a section for storing code
	.globl _start					; declares the entry point of the program

	_start:
		; prints "Hello, world!"
		movl $4, %eax				; loads the system call for printing a string into %eax
		movl $1, %ebx				; loads stdout into %ebx
		movl $output_msg, %ecx			; loads the address of the string into %ecx
		movl $13, %edx				; loads the length of the string into %edx
		int $0x80				; calls the kernel to execute the system call

		; exits the program
		movl $1, %eax				; loads the system call for exiting a program into %eax
		xorl %ebx, %ebx				; sets %ebx to 0 (return code)
		int $0x80				; calls the kernel to execute the system call

	.end _start					; marks the end of the program