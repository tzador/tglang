; Program to check if a number is a prime number
section .data
  msg db "Not a prime number", 0xA, 0xD ; Message to be displayed if number is not a prime number
  msgLength equ $ - msg ; Length of the message

  primeMsg db "Prime number", 0xA, 0xD ; Message to be displayed if number is a prime number
  primeMsgLength equ $ - primeMsg ; Length of the message

section .bss
  num resb 2 ; Allocate space for the number to be checked

section .text
  global _start

_start:
  mov eax, 3 ; Initialize counter
  mov ebx, 0 ; Initialize remainder to 0
  loop:
    mov ecx, num ; Move number into ECX register
    mov edx, 0 ; Reset remainder in EDX register
    div ecx ; Divide number by counter

    cmp edx, 0 ; Check if remainder is 0
    je notPrime ; Jump to notPrime label if remainder is 0

    inc eax ; Increment counter
    cmp eax, num ; Compare counter with number
    jg prime ; Jump to prime label if counter is greater than number
    jmp loop ; Loop until counter is greater than number

  prime:
    mov eax, 4 ; System call to display primeMsg
    mov ebx, 1 ; File descriptor for standard output
    mov ecx, primeMsg ; Pointer to message to be displayed
    mov edx, primeMsgLength ; Length of the message
    int 0x80 ; Interrupt to execute system call
    jmp exit ; Jump to exit label

  notPrime:
    mov eax, 4 ; System call to display msg
    mov ebx, 1 ; File descriptor for standard output
    mov ecx, msg ; Pointer to message to be displayed
    mov edx, msgLength ; Length of the message
    int 0x80 ; Interrupt to execute system call

  exit:
    mov eax, 1 ; System call to exit program
    mov ebx, 0 ; Exit code
    int 0x80 ; Interrupt to execute system call