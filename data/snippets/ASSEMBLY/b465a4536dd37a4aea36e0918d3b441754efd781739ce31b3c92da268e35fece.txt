; Multiplication subroutine in assembly
mul:
push eax ;Save register values to stack
push ecx
push edx
mov eax, [esp+0x10] ;First operand (multiplier)
mov ecx, [esp+0x14] ;Second operand (multiplicand)
xor edx, edx
xor ebx, ebx
.mul_loop:
test ecx, ecx ;Check if second operand is 0
jz .mul_end ;If true, jump to end of subroutine
shr ecx, 1 ;Shift second operand to the right by 1
jnc .zero ;If carry flag is not set, jump to zero label
add ebx, eax ;Add first operand to accumulator
.zero:
add eax, eax ;Multiply first operand by 2
jmp .mul_loop ;Jump back to loop
.mul_end:
mov [esp+0x18], ebx ;Store result (product) in stack
pop edx ;Restore register values from stack
pop ecx
pop eax
ret ;Return from subroutine