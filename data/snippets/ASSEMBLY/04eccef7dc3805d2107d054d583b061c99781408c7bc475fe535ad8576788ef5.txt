.text
.global _start

_start:
    # declare variables
    movia r14, arrayA      # base address of arrayA
    movia r15, arrayB      # base address of arrayB
    movia r16, arrayC      # base address of arrayC

    # initialize constants
    seti 5, r17            # multiply constant
    seti 10, r18           # add constant
    seti 20, r19           # subtract constant

    # load values from arrayA and arrayB into registers
    ldm r14, r1, 0         # load value at index 0 of arrayA into r1
    ldm r15, r2, 0         # load value at index 0 of arrayB into r2

    # perform calculations
    mpy r1, r17, r3		  # multiply r1 by r17 and store result in r3
    add r2, r18, r4		  # add r2 and r18 and store result in r4
    sub r3, r19, r5		  # subtract r3 and r19 and store result in r5

    # store result in arrayC at index 0
    stm r5, r16, 0         # store value in r5 at index 0 of arrayC

    # repeat calculations and store result in arrayC at index 1
    addi r1, r1, 1         # increment r1 by 1
    addi r2, r2, 1         # increment r2 by 1
    mpy r1, r17, r3        # multiply r1 by r17 and store result in r3
    add r2, r18, r4        # add r2 and r18 and store result in r4
    sub r3, r19, r5        # subtract r3 and r19 and store result in r5
    stm r5, r16, 4         # store result in r5 at index 1 of arrayC

    # exit program
    callx 0, 0             # call exit system call
    break 0                # end program
.data
arrayA: .long 2, 4        # array of 2 and 4
arrayB: .long 3, 7        # array of 3 and 7
arrayC: .long 0, 0        # array for storing results