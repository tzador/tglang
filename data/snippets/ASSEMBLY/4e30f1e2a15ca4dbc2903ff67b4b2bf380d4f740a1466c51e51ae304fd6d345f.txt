; This program calculates the nth Fibonacci number using recursion

section .data ; stores initialized data values
input_msg db "Enter the value of n: ", 0xa, 0xd ; message to prompt user for input
output_msg db "The nth Fibonacci number is: " ; message to display output
newline db 0xa, 0xd ; new line character

section .bss ; stores uninitialized data values
n resb 1 ; reserve 1 byte of memory for input value
fib resb 4 ; reserve 4 bytes of memory for calculated output

section .text ; stores instructions

global _start ; define entry point for program

_start: ; entry point label

; print prompt message
mov eax, 4 ; system call for 'write'
mov ebx, 1 ; file descriptor for STDOUT
mov ecx, input_msg ; load address of input_msg into register
mov edx, 19 ; length of input_msg
int 80h ; execute system call

; get user input
mov eax, 3 ; system call for 'read'
mov ebx, 0 ; file descriptor for STDIN
mov ecx, n ; load address of n into register
mov edx, 1 ; length of user input
int 80h ; execute system call

; convert input to integer
sub eax, 0x30 ; convert ASCII value to numerical value
mov [n], eax ; store input in n variable

; call recursive function
mov eax, [n] ; load n into register
call fib_recursive ; jump to fib_recursive function

; print output
mov eax, 4 ; system call for 'write'
mov ebx, 1 ; file descriptor for STDOUT
mov ecx, output_msg ; load address of output_msg into register
mov edx, 25 ; length of output_msg
int 80h ; execute system call

; convert output to string
add eax, 0x30 ; convert numerical value to ASCII value
mov [fib], eax ; store output in fib variable

; print calculated Fibonacci number
mov eax, [fib] ; load fib into register
call print ; jump to print function

; exit program
mov eax, 1 ; system call for 'exit'
xor ebx, ebx ; exit code 0
int 80h ; execute system call

; recursive function to calculate Fibonacci number
fib_recursive: ; function start label
cmp eax, 2 ; check if n is smaller than 2
jle .exit ; if true, jump to exit label

; calculate Fibonacci number
dec eax ; decrement n by 1
push eax ; push n onto stack
call fib_recursive ; recursively call function
add [esp], eax ; add previous value to current value
pop eax ; pop n off stack
dec eax ; decrement n by 1
jmp fib_recursive ; jump back to start of function

.exit: ; exit label
ret ; return from function

; function to print calculated Fibonacci number
print: ; function start label
mov eax, [fib] ; load fib into register
add eax, 0x30 ; convert numerical value to ASCII value
mov [fib], eax ; store output in fib variable
mov eax, 4 ; system call for 'write'
mov ebx, 1 ; file descriptor for STDOUT
mov ecx, [fib] ; load address of fib variable into register
mov edx, 4 ; length of output
int 80h ; execute system call
ret ; return from function