; This code snippet generates a random number between 1 and 10 and prints it on the screen

; Define constant values for the lower and upper bounds of the random number
LOWER_BOUND equ 1
UPPER_BOUND equ 10

; Setup stack pointer and initialize registers
.data
stack_ptr: dw $      ; Stack pointer
.random_num: db ?    ; Variable to store the random number
.code
main:
    mov ax, @data       ; Initialize data segment register
    mov ds, ax          ; Point ds to data segment

    mov ax, stack_ptr   ; Initialize stack pointer
    mov ss, ax          ; Point ss to stack segment
	add sp, 256         ; Allocate 256 bytes for the stack

    call generate_random_number ; Call subroutine to generate random number
    mov ah, 2           ; Set ah to 2 for DOS print function
    mov dl, [random_num] ; Move random number to dl register
    int 21h             ; Call DOS print function

    mov ah, 4Ch         ; Set ah to 4C for DOS exit function
    mov al, 0           ; Set al to 0 for exit status
    int 21h             ; Call DOS exit function

; Subroutine to generate random number
; Input: stack pointer
; Output: random number
generate_random_number:
    push bp             ; Save bp register
    mov bp, sp          ; Set bp to stack pointer

    ; Generate random number using clock cycle count
    rdtsc               ; Read time stamp counter
    xor ah, ah          ; Clear ah register
    div UPPER_BOUND     ; Divide timestamp by upper bound
    add ax, LOWER_BOUND ; Add lower bound to result
    mov [random_num], al ; Move result to random number variable

    pop bp              ; Restore bp register
    ret                 ; Return to main program
end main