.386
.model flat, stdcall
option casemap: none

include \masm32\include\kernel32.inc
include \masm32\include\masm32.inc
includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\masm32.lib

.code ; begin code segment

; Example of a procedure that adds two numbers together and returns the result
add_proc proc uses ebx edx a:dword, b:dword               ; define add_proc procedure
    mov eax, a                                             ; move a into eax register
    add eax, b                                             ; add b to eax
    mov edx, eax                                           ; move result into edx register
    add edx, ebx                                           ; add ebx to edx (ebx is used as a placeholder for return address)
    retn 8                                                  ; return with stack cleanup of 8 bytes
add_proc endp

start:
    push 10                                                 ; push first number as argument
    push 20                                                 ; push second number as argument
    call add_proc                                           ; call add_proc procedure
    push edx                                                ; push result onto stack
    push offset msg                                         ; push address of msg onto stack
    call [printf]                                           ; call printf function to print message with result
    add esp, 8                                              ; clean up stack (remove arguments)
    push -1                                                 ; push exit code onto stack (used by ExitProcess)
    call [ExitProcess]                                      ; call ExitProcess function to end program
    ret                                                     ; return to operating system

.data ; begin data segment

    msg db 'The result is %d', 10, 0                         ; define message with placeholder for result

end start ; end of code snippet