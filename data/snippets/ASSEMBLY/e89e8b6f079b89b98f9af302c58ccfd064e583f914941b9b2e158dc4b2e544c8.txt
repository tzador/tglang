;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ASM code for bubble sort
section .data              ; Declare data section
    numbers db 5,2,7,1,3   ; Array of numbers to be sorted

section .bss               ; Declare BSS section
    temp resb 1            ; Reserve one byte of memory for temporary variable

section .text              ; Declare code section
    global _start          ; Declare global entry point

_start:                    ; Program entry point
    mov ecx, 5             ; Move number of elements into ecx register
    outer_loop:            ; Outer loop label
        mov ebx, 0         ; Reset ebx register to 0
        inner_loop:        ; Inner loop label
            mov al, [numbers + ebx]   ; Move element at current index into al register
            cmp al, [numbers + ebx + 1] ; Compare current element with next element
            jbe skip_swap    ; Jump if below or equal (sorted)
            mov dl, [numbers + ebx + 1] ; Move next element into dl register
            mov [temp], dl    ; Save next element in temporary variable
            mov [numbers + ebx], dl    ; Move next element into current index
            mov [numbers + ebx + 1], al ; Move current element into next index
            mov al, [temp]    ; Move temporary variable into al register
            skip_swap:
            add ebx, 1        ; Increment ebx (move to next element)
            cmp ebx, ecx      ; Compare ebx with number of elements
            jb inner_loop     ; Jump back to inner loop if below
    dec ecx                 ; Decrement ecx (decrease inner loop iterations)
    cmp ecx, 1              ; Compare ecx with 1
    jg outer_loop           ; Jump back to outer loop if greater than 1
    mov eax, 1              ; Set exit code to 1 (success)
    xor ebx, ebx            ; Set ebx to 0 (no error)
    int 0x80                ; System call to exit program