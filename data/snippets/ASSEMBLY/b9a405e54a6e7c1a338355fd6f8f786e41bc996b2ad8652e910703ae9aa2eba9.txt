.section .text
.global main
.type main, @function

# This is the main function
main:
  movl $1, %eax # Move the value 1 into the EAX register
  movl $2, %ebx # Move the value 2 into the EBX register

  addl %ebx, %eax # Add the value in EBX to the value in EAX and store in EAX

  cmp $3, %eax # Compare the value in EAX to the value 3
  jne else # Jump to else if the values are not equal

  movl $0, %ebx # Move the value 0 into the EBX register for else statement
  jmp end # Jump to the end of the program

# Else statement
else:
  movl $1, %ebx # Move the value 1 into the EBX register for else statement

# Print statement
print:
  pushl %eax # Push the value in EAX onto the stack
  call printf # Call the printf function to print the value
  addl $4, %esp # Add 4 bytes to the stack pointer to remove the value pushed earlier
  ret # Return to the main function

# End statement
end:
  movl $1, %eax # Move the value 1 into the EAX register for the exit system call
  int $0x80 # Make the exit system call to terminate the program

# Data section
.section .data
  string:
    .asciz "The sum is %d\n" # String to be printed by the printf function

# Function for calling the printf function
.section .text
  .globl printf
  .type printf, @function
printf:
  pushl %ebp # Push the base pointer onto the stack
  movl %esp, %ebp # Set the base pointer to the current stack pointer
  subl $8, %esp # Allocate space on the stack for local variables
  movl 8(%ebp), %ecx # Move the address of the first argument into the ECX register
  movl 12(%ebp), %edx # Move the value of the second argument into the EDX register
  movl $string, %eax # Move the address of the string to be printed into the EAX register
  pushl %edx # Push the second argument onto the stack
  pushl %eax # Push the address of the string onto the stack
  call printf # Call the printf function
  addl $8, %esp # Add 8 bytes to the stack pointer to remove the arguments pushed earlier
  leave # Restore the previous base pointer and stack pointer
  ret # Return to the main function