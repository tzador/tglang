; This code snippet is for counting the number of vowels in a given string
.386
.model flat, stdcall

; Output: Total number of vowels in the string

; Define data segment
.data
input_string db 'Hello, this is a sample string with vowels',0 ; Input string to be checked
vowel_count dd 0 ; Variable to store the count of vowels
counter dd 0 ; Counter to keep track of current index in the string
str_len dd 0 ; Variable to store the length of the string

; Define code segment
.code
main PROC
    ; Get the length of the string
    mov ecx, 0 ; Initialize counter to 0
    mov eax, input_string ; Load input string into accumulator
    mov bl, [eax+ecx] ; Load first character into bl
    strlen:
        cmp bl, 0 ; Check if end of string has been reached
        je finalize ; If so, jump to finalize to output result
        inc str_len ; Increment string length variable
        inc ecx ; Increment counter
        mov bl, [eax+ecx] ; Move to next character in string
        jmp strlen ; Jump back to loop

    ; Count the number of vowels in the string
    mov ecx, 0 ; Initialize counter to 0
    mov eax, input_string ; Load input string into accumulator
    mov bl, [eax+ecx] ; Load first character into bl
    count_vowels:
        cmp bl, 0 ; Check if end of string has been reached
        je finalize ; If so, jump to finalize to output result
        cmp bl, 'a' ; Check if character is 'a'
        je increment_vowel_count ; If so, jump to increment_vowel_count
        cmp bl, 'e' ; Check if character is 'e'
        je increment_vowel_count ; If so, jump to increment_vowel_count
        cmp bl, 'i' ; Check if character is 'i'
        je increment_vowel_count ; If so, jump to increment_vowel_count
        cmp bl, 'o' ; Check if character is 'o'
        je increment_vowel_count ; If so, jump to increment_vowel_count
        cmp bl, 'u' ; Check if character is 'u'
        je increment_vowel_count ; If so, jump to increment_vowel_count
        inc ecx ; If not a vowel, increment counter
        mov bl, [eax+ecx] ; Move to next character in string
        jmp count_vowels ; Jump back to loop

    ; Increment vowel count variable
    increment_vowel_count:
        inc vowel_count ; Increment variable
        inc ecx ; Increment counter
        mov bl, [eax+ecx] ; Move to next character in string
        jmp count_vowels ; Jump back to loop

    ; Output the result
    finalize:
        mov eax, vowel_count ; Load vowel count into accumulator
        mov ebx, str_len ; Load string length into ebx
        div ebx ; Divide vowel count by string length to get percentage
        mov vowel_count, eax ; Store result in vowel_count variable
        call print_result ; Call function to print result
        ret ; Return from main

; Function to print result
print_result PROC
    push ebp ; Save current base pointer
    mov ebp, esp ; Set base pointer to current stack pointer
    mov eax, vowel_count ; Load vowel count into accumulator
    call print_int ; Call function to print integer
    mov ebx, 100 ; Load constant 100 into ebx
    call print_str ; Call function to print string '%'
    pop ebp ; Restore previous base pointer
    ret ; Return from function

; Function to print integer
print_int PROC
    push eax ; Save accumulator value
    push ebx ; Save ebx value
    push ecx ; Save ecx value
    push edx ; Save edx value
    mov ecx, 10 ; Set denominator for division
    xor edx, edx ; Clear edx for division
    div ecx ; Divide accumulator by 10
    cmp eax, 0 ; Check if quotient is 0 (last digit)
    jne print_digit ; If not, jump to print_digit to print next digit
    xor edx, edx ; Clear edx for division
    mov eax, ebx ; Move original value of accumulator
    div ecx ; Divide accumulator by 10
    jz print_digit ; Jump to print_digit to skip leading zeroes
    loop:
        cmp eax, 0 ; Check if quotient is 0 (end of number)
        je done ; If so, jump to done to stop looping
        mov ebx, eax ; Move quotient into temporary variable
        div ecx ; Divide quotient by 10
        cmp eax, 0 ; Check if quotient is 0 (last digit)
        je print_zero ; If so, jump to print_zero to print leading zeroes
        jmp print_digit ; Jump to print_digit to print next digit
    print_zero:
        mov al, '0' ; Move character '0' into accumulator
        call print_char ; Call function to print character
        mov eax, ebx ; Move previous quotient into accumulator
        jz done ; If previous quotient was 0, jump to done to stop looping
        jmp loop ; If not, jump back to loop
    print_digit:
        add al, '0' ; Convert digit to character by adding '0'
        call print_char ; Call function to print character
        jmp loop ; Jump back to loop
    done:
        pop edx ; Restore previous edx value
        pop ecx ; Restore previous ecx value
        pop ebx ; Restore previous ebx value
        pop eax ; Restore original accumulator value
        ret ; Return from function

; Function to print character
print_char PROC
    push eax ; Save current accumulator value
    push ebx ; Save ebx value
    push ecx ; Save ecx value
    push edx ; Save edx value
    mov ebx, 1 ; Set output handle to standard output
    mov ecx, eax ; Move character to be printed into ecx
    xor eax, eax ; Clear eax
    mov edx, 1 ; Set length of string to be printed
    int 0x80 ; Call operating system to print character
    pop edx ; Restore previous edx value
    pop ecx ; Restore previous ecx value
    pop ebx ; Restore previous ebx value
    pop eax ; Restore original accumulator value
    ret ; Return from function

; Function to print string
print_str PROC
    push eax ; Save current accumulator value
    push ebx ; Save ebx value
    push ecx ; Save ecx value
    push edx ; Save edx value
    mov ebx, 1 ; Set output handle to standard output
    mov edx, 1 ; Set length of string to be printed
    int 0x80 ; Call operating system to print string
    pop edx ; Restore previous edx value
    pop ecx ; Restore previous ecx value
    pop ebx ; Restore previous ebx value
    pop eax ; Restore original accumulator value
    ret ; Return from function

main ENDP ; End of main procedure

END main ; End of program