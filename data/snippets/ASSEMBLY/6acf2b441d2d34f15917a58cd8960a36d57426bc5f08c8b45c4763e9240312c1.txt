; This code snippet is written in Assembly language

; Define variables
    section .data
    var1 DB 10   ; Define byte variable with value 10
    var2 DW 100  ; Define word variable with value 100
    var3 DD 1000 ; Define double word variable with value 1000

; Code section
    section .text
    global _start   ; Entry point for program execution

_start:
    ; Move values into registers
    mov bl, [var1]  ; Move value of var1 into register BL
    mov ax, [var2]  ; Move value of var2 into register AX
    mov edx, [var3] ; Move value of var3 into register EDX

    ; Perform arithmetic operations
    add bl, al  ; Add contents of BL and AL, store result in BL
    sub dx, ax  ; Subtract contents of AX from DX, store result in DX
    mul bx      ; Multiply contents of BX with AX, store result in AX

    ; Print results
    mov eax, 4        ; Move value 4 into register EAX, indicating 'syscall' function
    mov ebx, 1        ; Move value 1 into register EBX, indicating 'stdout' file descriptor
    mov ecx, bl       ; Move value of BL into register ECX, containing result of addition operation
    mov edx, 1        ; Move value 1 into register EDX, indicating size of output (1 byte)
    int 0x80          ; Call syscall to print output to console

    mov ecx, dx       ; Move value of DX into register ECX, containing result of subtraction operation
    mov edx, 1        ; Move value 1 into register EDX, indicating size of output (1 byte)
    int 0x80          ; Call syscall to print output to console

    mov ecx, ax       ; Move value of AX into register ECX, containing result of multiplication operation
    mov edx, 2        ; Move value 2 into register EDX, indicating size of output (2 bytes)
    int 0x80          ; Call syscall to print output to console

    ; End program
    mov eax, 1    ; Move value 1 into register EAX, indicating 'exit' function
    mov ebx, 0    ; Move value 0 into register EBX, indicating 'no error' exit code
    int 0x80      ; Call syscall to exit program