;This is a code snippet in Assembly language that calculates and displays n-th term of the Fibonacci sequence
;Inputs: n (integer value representing the term to be calculated)
;Outputs: nth_term (the value of the n-th term in the Fibonacci sequence)

;Declare the variables
nth_term    EQU     0     ;nth_term variable is set to 0
n           EQU     4     ;n variable is set to 4 (first term)
prev_term   EQU     0     ;previous term variable is set to 0
next_term   EQU     1     ;next term variable is set to 1
counter     EQU     1     ;counter variable is set to 1

;Start of the program
START       LD      R0, n          ;Load the n value into R0 register
            ST      R0, n          ;Store the n value in the n variable
            LD      R1, prev_term  ;Load the previous term value into R1 register
            ST      R1, prev_term  ;Store the previous term value in the prev_term variable
            LD      R2, next_term  ;Load the next term value into R2 register
            ST      R2, next_term  ;Store the next term value in the next_term variable
            LD      R3, nth_term   ;Load the nth_term value into R3 register
            ST      R3, nth_term   ;Store the nth_term value in the nth_term variable

LOOP        LD      R0, n          ;Load the value of n into R0 register
            ADD     R1, R2, R3     ;Add the values of previous and next terms and store in R3
            BRZ     END_LOOP       ;Branch to END_LOOP if R3 value is 0
            ST      R3, prev_term  ;Store the calculated value in the prev_term variable
            ST      R2, next_term  ;Store the value of next term into previous term variable
            ST      R3, next_term  ;Store the calculated value in the next_term variable
            ADD     R3, counter, 4 ;Add 4 to the counter variable and store in R3
            ST      R3, counter    ;Store the updated value in the counter variable
            BR      LOOP           ;Branch back to LOOP
END_LOOP    LD      R3, nth_term   ;Load the final calculated value into R3 register
            BRP     DISPLAY        ;Branch to DISPLAY if the nth_term value is positive
            NOT     R3, R3         ;If the nth_term value is negative, negate it using bitwise NOT
            ADD     R3, 1, R3      ;Add 1 to account for the negative sign
DISPLAY     OUT     R3             ;Output the value of the nth_term
            HALT                    ;Halt the program

            END     START           ;End of the program