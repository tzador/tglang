# Program to check if a number is prime

.section .text
.globl _start

# _start function

_start:
    
    # Initialize registers
    movl $4, %edi         # set %edi to 4 (sys_write identifier)
    movl $1, %ebx         # set %ebx to 1 (stdout file descriptor)
    
    # Ask user to input a number
    movl $0, %eax         # clear out %eax
    movl $1, %edi         # set %edi to 1 (sys_read identifier)
    movl $0, %esi         # set %esi to 0 (buffer to read into)
    movl $10, %edx        # length of input (up to 10 bytes)
    syscall               # make the system call
    movl %ebx, %esi       # move input into %esi

    # Convert input to integer
    xorl %eax, %eax       # clear out %eax
    movb (%esi), %ch      # get first character of input
    inc %esi              # increment %esi
    subb $'0', %ch        # convert ASCII to integer
    movb %ch, (%esp)      # store integer onto the stack
    
    # Check if input is prime
    push %eax             # save %eax onto stack
    push %ebx             # save %ebx onto stack
    xorl %eax, %eax       # clear out %eax
    movl $2, %ebx         # set %ebx to 2 (starting divisor)
    jmp loop              # jump to loop label
    
    check_prime:
        movl $1, %ecx     # set %ecx to 1 (flag for prime number)
        movl %ebp, %edi   # move %ebp to %edi (input integer)
        subl %ebx, %edi   # subtract divisor from input
        test %edi, %edi   # check if result is 0 (no remainder)
        jne not_prime     # jump to not_prime label if not 0
        movl $0, %ecx     # set %ecx to 0 (flag for not prime)
        
    not_prime:
        inc %ebx          # increment divisor
        cmpl %ebp, %ebx   # compare divisor to input
        jle loop          # jump to loop label if less than or equal to
        movl %ecx, %eax   # move flag into %eax
    
    # Print result
    loop:
        cmpl $1, %eax     # compare %eax to 1 (flag for prime)
        jne not_prime     # jump to not_prime label if not 1
        movl $6, %edi     # set %edi to 6 (sys_write identifier)
        movl $1, %eax     # set %eax to 1 (stdout file descriptor)
        movl $msg, %esi   # move message address into %esi
        movl $msglen, %edx # length of message
        syscall           # make system call
        
    # Exit program
    xorl %eax, %eax       # clear out %eax
    inc %eax              # increment %eax (sys_exit identifier)
    movl %ebx, %esi       # move flag into %esi
    syscall               # make system call

.section .data

# Message to be printed
.msg:
    .ascii "The number is prime\n"
.msglen = . - msg