; Example of a complex code snippet in assembly language
; This code is a bubble sort algorithm that sorts an array of integers in ascending order

.data ; data section
array DB 5, 3, 7, 1, 2 ; array to be sorted
count DB 5 ; number of elements in the array

.code ; code section
main PROC ; main procedure

    ; initialize variables
    mov CX, count ; set CX register to count value
    mov SI, 0 ; SI used as counter for array traversal
    mov DI, 0 ; DI used as counter for inner loop

outer_loop:
    mov BX, SI ; set BX to SI for outer loop comparison

inner_loop:
    add BX, 1 ; increment BX for inner loop comparison
    cmp BX, CX ; compare BX to CX
    jge outer_end ; jump to outer_end if BX >= CX

    mov AL, array[SI] ; load element at index SI into AL
    cmp AL, array[BX] ; compare element at index SI to element at index BX
    jle inner_loop_end ; jump to inner_loop_end if AL <= array[BX]

    ; swap elements if necessary
    xchg AL, array[BX] ; swap elements in AL and array[BX]
    mov array[SI], AL ; store swapped element in array[SI]

inner_loop_end:
    inc DI ; increment DI for inner loop counter
    cmp DI, CX ; compare DI to CX
    jl inner_loop ; jump to inner_loop if DI < CX

    inc SI ; increment SI for outer loop counter
    jmp outer_loop ; jump to outer_loop

outer_end:
    mov AX, 4C00h ; set AX to exit program code
    int 21h ; interrupt to terminate program

main ENDP ; end of main procedure
END main ; end of program