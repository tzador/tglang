.text
main:
    # set up stack pointer 
    mov %rsp, %rbp

    # allocate memory for array
    mov $100, %r15
    shl $3, %r15 # shift left by 3 bits to calculate size of array

    sub %r15, %rsp # subtract size of array from stack pointer to allocate memory

    # initialize array with values 
    mov $1, %eax # set initial value to 1
    lea (%rsp), %rdi # load address of array into destination register
    mov %r15, %rcx # set counter to size of array
    rep stosd # repeat store double word instruction to initialize array

    # iterate through array
    xor %r14, %r14 # set loop counter to 0
    mov $100, %r14 # set upper bound for loop
    
    .loop:
        cmp $1, (%rsp, %r14, 8) # compare value in array to 1
        jne .not_equal # jump to not_equal if not equal
        # if equal, print message and increment counter
        push %rdi # save address of array
        mov %r14, %rdi # move counter value into destination register
        call print_message # call function to print message
        inc %r14 # increment counter
        pop %rdi # restore address of array
    .not_equal:
        inc %r14 # increment counter
        cmp %r15, %r14 # compare counter to size of array
        jl .loop # jump back to loop if counter is less than size of array

    # clean up
    add %r15, %rsp # add size of array back to stack pointer to deallocate memory
    pop %rbp # restore base pointer
    mov $0, %eax # set return value to 0
    ret # return from function

.data
    message: db "Value is 1!", 10, 0 # define message as string followed by newline character and null terminator

.text
    print_message:
        push %rbp # save base pointer
        mov %rsp, %rbp # set base pointer
        push %rdi # save value of counter
        mov $0, %rdx # set to 0 to print null terminated string
        mov $message, %rsi # set source of string to message variable
        mov $1, %rdi # set destination to stdout
        mov $13, %rax # set print system call number
        syscall # make system call to print message
        pop %rdi # restore value of counter
        pop %rbp # restore base pointer
        ret # return from function