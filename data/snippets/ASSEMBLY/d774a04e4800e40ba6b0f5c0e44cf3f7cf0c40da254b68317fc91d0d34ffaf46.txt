; This code snippet calculates the average of an array of numbers

; Define variables
[section .data]
    num_array   DD 10, 20, 30, 40, 50   ; array of numbers to be averaged
    size        EQU $-num_array         ; length of the array
    sum         DD 0                    ; variable to hold the sum
    result      DD 0                    ; variable to hold the result

; Loop through the array to calculate sum
[section .text]
    global _start                       ; entry point for program
    _start:
        mov esi, num_array              ; move array address to esi register
        mov ecx, size                   ; move size of array to ecx register

    loop:
        cmp ecx, 0                      ; compare ecx register to 0
        je calculate_average            ; if equal, jump to calculate_average
        add sum, [esi]                  ; add value at esi register to sum variable
        add esi, 4                      ; move to next element in array
        dec ecx                         ; decrement ecx register
        jmp loop                        ; jump to loop to continue iterating

; Calculate average and store in result variable
calculate_average:
    mov eax, sum                        ; move sum to eax register
    idiv size                           ; divide eax register by size to get average
    mov result, eax                     ; move average to result variable

; Print result to console
    mov ebx, 1                          ; file descriptor, 1 = stdout
    mov ecx, result                     ; move result to ecx register
    mov edx, 4                          ; length of result variable, 4 bytes
    mov eax, 4                          ; write to console syscall
    int 0x80                            ; call kernel

    ; Exit program
    mov eax, 1                          ; exit syscall
    xor ebx, ebx                        ; exit code, 0 = no errors
    int 0x80                            ; call kernel