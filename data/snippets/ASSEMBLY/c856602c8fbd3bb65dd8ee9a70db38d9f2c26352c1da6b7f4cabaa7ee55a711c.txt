;  This code is a simple program written in Assembly language
;  It takes two numbers from user input, adds them together
;  and prints the sum to the console
section .data                  ;  Data section
    msg1 db "Enter first number: ", 0xA, 0xD ;  Input prompt for first number
    msg1Len equ $-msg1         ;  Length of the first message
    msg2 db "Enter second number: ", 0xA, 0xD ;  Input prompt for second number
    msg2Len equ $-msg2         ;  Length of the second message
    result db "Sum is: ", 0xA, 0xD ;  Output message
    resultLen equ $-result   ;  Length of the output message

section .bss                  ;  BSS section
    num1 resb 1               ;  Reserve 1 byte for first number
    num2 resb 1               ;  Reserve 1 byte for second number

section .text                 ;  Text section
    global _start             ;  Entry point
_start:                       ;  Label for entry point
    mov eax, 4                ;  System call number for "write"
    mov ebx, 1                ;  File descriptor (1 is stdout)
    mov ecx, msg1             ;  Message to be printed
    mov edx, msg1Len          ;  Length of the message
    int 0x80                  ;  Call the kernel

    mov eax, 3                ;  System call number for "read"
    mov ebx, 0                ;  File descriptor (0 is stdin)
    mov ecx, num1             ;  Address where input will be stored
    mov edx, 1                ;  Maximum number of bytes to read
    int 0x80                  ;  Call the kernel

    mov eax, 4                ;  System call number for "write"
    mov ebx, 1                ;  File descriptor (1 is stdout)
    mov ecx, msg2             ;  Message to be printed
    mov edx, msg2Len          ;  Length of the message
    int 0x80                  ;  Call the kernel

    mov eax, 3                ;  System call number for "read"
    mov ebx, 0                ;  File descriptor (0 is stdin)
    mov ecx, num2             ;  Address where input will be stored
    mov edx, 1                ;  Maximum number of bytes to read
    int 0x80                  ;  Call the kernel

    ;  Converting inputs to integers
    sub al, '0'               ;  Convert ASCII value of first number to integer
    sub bl, '0'               ;  Convert ASCII value of second number to integer

    add al, bl                ;  Add the values together and store in al

    ;  Converting result back to ASCII value
    add al, '0'               ;  Convert integer back to ASCII value

    mov [result+9], al        ;  Store the result in the output message

    mov eax, 4                ;  System call number for "write"
    mov ebx, 1                ;  File descriptor (1 is stdout)
    mov ecx, result           ;  Message to be printed
    mov edx, resultLen        ;  Length of the message
    int 0x80                  ;  Call the kernel

    mov eax, 1                ;  System call number for "exit"
    xor ebx, ebx              ;  Return code of 0
    int 0x80                  ;  Call the kernel