; This code snippet implements a binary search algorithm
section     .text           ; Code section

global      _start          ; Global entry point label
_start:                     ; Entry point
    mov     ecx, 0          ; Initialize loop counter
    mov     edx, arr_len    ; Load array length into edx register
    dec     edx             ; Decrement edx to work with indexes

binary_search:
    cmp     ecx, edx        ; Compare loop counter to array length
    jg      exit            ; Exit loop if counter is greater than length

    mov     eax, ecx        ; Move loop counter to eax register
    add     eax, edx        ; Add edx to eax to get middle index
    shr     eax, 1          ; Shift eax right by 1 to find middle element
    
    mov     ebx, [array + eax*4]     ; Load middle element into ebx register
    cmp     ebx, search_key          ; Compare middle element to search key
    je      found                   ; Jump to found label if equal

    jl      is_lower                ; Jump to is_lower label if middle element is lower
    inc     ecx                     ; Increment loop counter
    jmp     binary_search           ; Jump back to binary_search label

is_lower:
    mov     edx, eax        ; Move middle index to edx
    sub     edx, 1          ; Subtract 1 to create new end index
    jmp     binary_search   ; Jump back to binary_search label

found:
    mov     output, eax     ; Move middle index to output variable
    jmp     end             ; Jump to end label to exit program

exit:
    mov     output, -1      ; If key is not found, output -1

end:
    ; Output result
    mov     eax, 1          ; Syscall number 1: sys_exit
    mov     ebx, 0          ; Exit status code
    int     80h             ; Interrupt 80h to invoke syscall
    
    ; Data section
section     .data
    array       dd 2, 5, 6, 8, 12        ; Sorted array to search through
    arr_len     equ ($ - array)/4         ; Length of array in number of elements
    
    search_key  dd 6            ; Key to search for
    output      dd 0            ; Variable to store output (index of found key or -1)