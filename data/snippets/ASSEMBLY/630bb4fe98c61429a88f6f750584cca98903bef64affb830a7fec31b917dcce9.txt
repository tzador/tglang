;; Initialize registers
  MOV AX, 0x00      ; Move 0x00 into the AX register
  MOV BX, 0x01      ; Move 0x01 into the BX register
  MOV CX, 0x02      ; Move 0x02 into the CX register

  ;; Calculate sum of AX and BX
  ADD AX, BX        ; Add BX value to the AX register
  MOV DX, AX        ; Move AX value to the DX register for storage

  ;; Perform bitwise AND operation
  AND AX, CX        ; Perform AND operation on AX and CX, store result in AX

  ;; Shift left by 2 bits
  SHL BX, 2         ; Shift BX register left by 2 bits

  ;; Store result in memory
  MOV [0x100], BX   ; Move value of BX into memory address 0x100

  ;; Compare values and set flags
  CMP DX, AX        ; Compare DX and AX values and set flags accordingly

  ;; Jump if equal
  JE equal          ; Jump to label 'equal' if ZF (zero flag) is set

  ;; If not equal, loop back to beginning
  JMP loop          ; Unconditional jump to label 'loop'

  ;; Label for equal
equal:
  NOP               ; Do nothing

  ;; Label for loop
loop:
  DEC CX            ; Decrement CX register by 1
  JNZ loop          ; Jump to label 'loop' if CX is not equal to 0 (ZF not set)