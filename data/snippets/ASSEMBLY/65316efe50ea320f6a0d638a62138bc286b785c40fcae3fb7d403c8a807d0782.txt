.globl main                    ; declare main as global symbol
main:                               ; start of main function
      push %ebp                     ; save the base pointer onto the stack
      mov %esp, %ebp                ; set the stack pointer as base pointer
      sub $0x10, %esp               ; allocate 16 bytes of space on the stack
      movl $0x5, -0x4(%ebp)         ; store value 5 in the memory location 4 bytes below ebp
      movl $0x7, -0x8(%ebp)         ; store value 7 in the memory location 8 bytes below ebp
      movl -0x4(%ebp), %eax         ; move the value at memory location 4 bytes below ebp into eax register
      movl -0x8(%ebp), %ebx         ; move the value at memory location 8 bytes below ebp into ebx register
      add %ebx, %eax                ; add the values in eax and ebx and store result in eax
      movl %eax, -0xc(%ebp)         ; move the result to the memory location 12 bytes below ebp
      xor %edx, %edx                ; zero out edx register
      movl $0x11, %eax              ; move value 17 into eax register
      idiv %eax                     ; divide edx:eax by eax and store quotient in eax and remainder in edx
      movl %eax, -0x10(%ebp)        ; move quotient to the memory location 16 bytes below ebp
      leave                         ; restore previous stack frame
      ret                           ; return to calling function