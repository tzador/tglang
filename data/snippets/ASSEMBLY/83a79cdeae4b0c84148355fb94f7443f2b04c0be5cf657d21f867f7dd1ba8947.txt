ENT     EQU     32          ; Define constant for single character printing           
           ORG     0C00H                ; Set starting address of program           
START:     MOV     P1,#PAR1             ; Move the value in the variable PAR1 into the P1 register           
           MOV     P2,#PAR2             ; Move the value in the variable PAR2 into the P2 register           
           CLR     ACC                  ; Clear the accumulator register           
           CLR     B                    ; Clear the B register           
           
LOOP:      INC     B                    ; Increment the B register           
           MOV     R3,B                ; Move the value of B into R3 register           
           JZ      CHECK               ; Jump to CHECK if B is equal to 0           
           ACALL   MULTIPLY            ; Call the MULTIPLY subroutine           
           JMP     LOOP                ; Jump back to LOOP           
           
CHECK:     JZ      ZERO                ; Jump to ZERO if ACC is equal to 0           
           ADD     A,#ENT              ; Add the constant ENT to the accumulator           
           INC     DPTR                ; Increment the Data Pointer register           
           SJMP    CHECK               ; Stay in CHECK loop until accumulator is equal to 0           
           
ZERO:      MOV     A,#PAR3             ; Move the value of PAR3 into the accumulator           
           MOV     R0,B                ; Move the value of B into R0 register           
           
OUTPUT:    MOV     P0,A                ; Move the value in the accumulator into the P0 register           
           MOV     P2,R0               ; Move the value in the R0 register into the P2 register           
           MOV     P1,#PAR4            ; Move the value in the variable PAR4 into the P1 register           
           
           RET                        ; Return from subroutine           
           
MULTIPLY:  MOV     A,R3                ; Move the value in the R3 register into the accumulator           
           DJNZ    B,MULTIPLY          ; Decrement B and jump back to MULTIPLY until B is equal to 0           
           RET                        ; Return from subroutine           
           
PAR1:      DB      'A'                 ; Define variable for character 'A'           
PAR2:      DB      'B'                 ; Define variable for character 'B'           
PAR3:      DB      1                   ; Define variable for the number 1           
PAR4:      DB      4                   ; Define variable for the number of times to print the characters           
           
           END                        ; End of program