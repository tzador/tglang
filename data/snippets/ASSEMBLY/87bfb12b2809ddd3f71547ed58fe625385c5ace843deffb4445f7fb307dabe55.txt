; This code snippet performs a binary search on an array of numbers
;
; Input:
; r0 - pointer to the array
; r1 - number to search for
; r2 - length of the array
;
; Output:
; r0 - index of the found number (-1 if not found)

; Initialize starting index as 0
start_index:
    mov r0, #0

; Initialize ending index as array length - 1
end_index:
    sub r2, r2, #1

; Check if starting index is greater than ending index, if so, number is not found
cmp r0, r2
bgt element_not_found

; Calculate middle index
middle_index:
    add r3, r0, r2
    lsr r3, r3, #1

; Load middle element from array into r4
get_elem:
    ldr r4, [r3, r1, lsl #2]

; Compare middle element with search number
cmp_elements:
    cmp r4, r1
    beq element_found

; If middle element is greater than search number, move ending index to middle - 1
move_end_index:
    sub r2, r3, #1
    b end_index

; If middle element is less than search number, move starting index to middle + 1
move_start_index:
    add r0, r3, #1
    b start_index

; If element is not found, return -1
element_not_found:
    mov r0, #-1
    bx lr

; If element is found, return middle index as result
element_found:
    mov r0, r3
    bx lr

; Main function
main:
    ; Initialize array of 10 numbers
    array:  .word   2, 3, 6, 8, 9, 12, 15, 17, 22, 25

    ; Set search number to 12
    mov r1, #12

    ; Set array length to 10
    mov r2, #10

    ; Call binary search function
    bl binary_search

    ; Print result
    mov r7, #1      ; Write to stdout
    mov r2, r0      ; Move result to r2
    lsl r3, r2, #2  ; Multiply result by 4 to get index position
    add r3, r3, #4  ; Add 4 to skip the array length value
    ldr r0, =format ; Load format string
    svc #0          ; Call kernel
    mov r0, #0      ; Clean up
    mov r7, #0      ; Exit function

; Format string to print result
format: .asciz "Result: %d\n"

; Binary search function
binary_search:
    ; Save return address and registers
    push {lr, r0, r1, r2, r3, r4}

    ; Call main function
    bl main

    ; Restore return address and registers
    pop {lr, r0, r1, r2, r3, r4}
    bx lr