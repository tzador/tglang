; This code snippet calculates the factorial of a number using recursion
; Input: R0 = number to calculate factorial of
; Output: R1 = factorial of the input number

; Setup stack pointer
LDI R16, STACK_ADDR
OUT SP, R16

; Make space on stack for return address and current argument value
ST -1, R31 ; Return address
ST -2, R30 ; Current argument value

; Check if input number is 0 or 1
CP R0, R0 ; Copy R0 into R16
BRZE END ; If R0 == 0, return 1
BRZE END_MINUS_ONE ; If R0 == 1, return 1

; Recursively call factorial function with input number - 1
PUSH R0 ; Push input number onto stack
ADDI R0, -1 ; Subtract 1 from input number
CALL FACTORIAL ; Call factorial function
ST R1, RETURN_ADDR ; Store return address
POP R0 ; Pop input number from stack

; Multiply input number with factorial result from previous call
MUL R1, R0 ; Multiply input number with factorial result
BR RETURN ; Branch to return address

; Function to calculate factorial of input number
FACTORIAL:
    ; Save current argument value onto stack
    ST -2, R30
    ; Decrement argument value
    SUBI R0, 1
    ; Check if argument value is 0 or 1
    CP R0, R0
    BRZE FACTORIAL_RETURN ; If R0 == 0, return 1
    BRZE FACTORIAL_RETURN ; If R0 == 1, return 1
    ; Recursively call factorial function with argument value
    ST R1, RETURN_ADDR ; Store return address
    POP R0 ; Pop input number from stack
    CALL FACTORIAL
FACTORIAL_RETURN:
    ; Multiply argument value with factorial result from previous call
    MUL R1, R30
RETURN:
    ; Return to previous call
    JR R31

; Return addresses and stack setup
RETURN_ADDR: EQU 0
STACK_ADDR: EQU 0x4000