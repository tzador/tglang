; This code snippet demonstrates a bubble sort algorithm implemented in Assembly language.

; Define variables
array DW 8, 7, 6, 5, 4, 3, 2, 1
length EQU 8
temp DW 0
i DW 0
j DW 0

START:
; Initialize loop counters
MOV i, 0
MOV j, 0

; Outer loop
OUTER_LOOP:
; Check if i is less than length - 1
CMP i, length-1
JGE END

; Inner loop
INNER_LOOP:
; Compare array[j] and array[j+1]
MOV AX, [array+j]
MOV BX, [array+j+1]
CMP AX, BX
JLE SKIP_SWAP

; Swap elements
; Move array[j] to temp variable
MOV temp, AX
; Move array[j+1] to array[j]
MOV [array+j], BX
; Move temp to array[j+1]
MOV [array+j+1], temp

; Skip swap
SKIP_SWAP:
; Increment j
INC j
; Check if j is less than length - i - 1
CMP j, length-i-1
JL INNER_LOOP

; Increment i
INC i
; Jump to outer loop
JMP OUTER_LOOP

END:
; Print sorted array
MOV CX, length
MOV SI, 0
PRINT_LOOP:
MOV DX, [array+SI]
ADD DX, 30h ; Convert to ASCII
MOV AH, 2
INT 21h ; Output character
INC SI
LOOP PRINT_LOOP

; Halt program
MOV AH, 4Ch
MOV AL, 0
INT 21h