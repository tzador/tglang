;; This code snippet calculates the factorial of a number using a recursive function

;; Define the main program
.section .data
    num:    .long   6       ; The number whose factorial is to be calculated
    result: .long   0       ; Placeholder for storing the factorial result

.section .text
.global _start
_start:
    ;; Save register values on the stack
    pushl   %ebx
    pushl   %ecx

    ;; Call the recursive factorial function
    movl    num, %ebx   ; Move the number into the ebx register
    call    factorial

    ;; Move the result into the result placeholder
    movl    %eax, result   ; Move the result from the eax register into the result placeholder

    ;; Print the result
    movl    $1, %eax    ; Set the eax register to 1 (for the write system call)
    movl    $1, %ebx    ; Set the ebx register to 1 (for standard output)
    movl    $result, %ecx   ; Move the address of the result placeholder into the ecx register
    movl    $4, %edx    ; Set the edx register to 4 (for the length of the string to print)
    int     $0x80       ; Call the write system call to print the result

    ;; Exit the program
    movl    $1, %eax    ; Set the eax register to 1 (for the exit system call)
    xorl    %ebx, %ebx  ; Set the ebx register to 0 (for the exit code)
    int     $0x80       ; Call the exit system call


;; Define the recursive factorial function
.section .text
factorial:
    movl    $1, %ecx        ; Set the ecx register to 1 (for the base case)
    cmpl    %ebx, %ecx      ; Compare the number with the base case
    jle     end_factorial   ; Jump to end_factorial if number <= base case

    ;; Set up the recursive call
    dec     %ebx            ; Decrement the number
    pushl   %ebx            ; Push the number onto the stack
    call    factorial       ; Call the recursive function
    popl    %ebx            ; Pop the number off the stack

    ;; Calculate the factorial
    imull   %ebx, %eax      ; Multiply the number by the accumulator (eax register)

end_factorial:
    ret                     ; Return from the function