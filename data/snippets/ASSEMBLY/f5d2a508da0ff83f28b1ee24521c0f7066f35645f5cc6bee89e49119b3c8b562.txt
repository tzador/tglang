main:

    ; set up stack pointer
    mov sp, #0x10000
    
    ; get user input
    ldr r0, =USER_PROMPT ; load address of prompt
    bl printf ; call printf function
    ; check for input error
    cmp r0, #0 ; compare result to 0
    beq input_error ; branch if equal to 0
    
    ; continue execution if no error
    ldr r1, =user_input ; load address of input buffer
    ldr r2, =input_size ; load address of size limit
    bl fgets ; call fgets function
    
    ; check for end of file
    cmp r0, #0xa ; compare result to new line character
    beq end_of_file ; branch if equal to new line character
    
    ; handle input error
    input_error:
        ldr r0, =ERROR_MESSAGE ; load address of error message
        bl printf ; call printf function
        b exit_program ; branch to exit program
        
    ; handle end of file
    end_of_file:
        ldr r0, =SUCCESS_MESSAGE ; load address of success message
        bl printf ; call printf function
        b exit_program ; branch to exit program
        
exit_program:
    ; clean up and exit
    mov r7, #1  ; load exit syscall into r7
    swi #0     ; call exit syscall
.data
    USER_PROMPT: .asciz "Enter your input: "
    ERROR_MESSAGE: .asciz "Input error."
    SUCCESS_MESSAGE: .asciz "Success."
.bss
    user_input: .space input_size ; declare input buffer
input_size:
    .equ 16