; Assembly code for bubble sort algorithm

; Data section

.data
    array  DWORD 9, 6, 3, 8, 5, 2, 7, 4, 1 ; original unsorted array
    n  DWORD 9 ; size of array
    i  DWORD 0 ; loop counter
    j  DWORD 0 ; loop counter
    temp  DWORD 0 ; temporary variable for swapping

; Code section

.code
    main PROC

 ; Outer loop: Loop through the entire array (n-1) times
 for1:
    mov i, 0 ; initialize loop counter i
    cmp i, n-1
    jge done1 ; jump to done1 section if condition is met (i >= n-1)

 ; Inner loop: Compare adjacent elements and swap if necessary
 for2:
    mov j, 0 ; initialize loop counter j
    cmp j, n-i-1
    jge done2 ; jump to done2 section if condition is met (j >= n-i-1)

 ; Compare adjacent elements
    mov eax, array[j]
    cmp eax, array[j+1]
    jle noSwap ; jump to noSwap section if condition is met (array[j] <= array[j+1])

 ; Swap elements
    mov temp, array[j]
    mov array[j], array[j+1]
    mov array[j+1], temp

 noSwap:
    inc j ; increment loop counter j
    jmp for2 ; jump back to for2 loop

 done2:
    inc i ; increment loop counter i
    jmp for1 ; jump back to for1 loop

 done1:
 ; Print sorted array as output
    mov ecx, n ; initialize loop counter for print loop
    mov esi, 0 ; initialize array index
    mov ebx, OFFSET array

 printLoop:
    mov eax, [ebx] ; load element at array index to eax register
    call WriteInt ; print integer to console
    inc ebx ; increment array index
    loop printLoop ; loop for n times

 ; Exit program
    exit

    main ENDP
    END main