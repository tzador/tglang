; Description: This code snippet is a Fibonacci sequence generator in assembly language
	.data
		current_num   DD       0   ; variable to store current number in sequence
		next_num      DD       1   ; variable to store next number in sequence
		count         DD       10  ; variable to store number of iterations
		sequence      DD       10 DUP(?)  ; variable to store final sequence
	.code
		MAIN PROC
		mov esi,OFFSET current_num   ; move current_num value into esi register
		mov edi,OFFSET next_num   ; move next_num value into edi register
		mov ecx, count   ; move count value into ecx register
		lea ebx,sequence   ; load address of sequence variable into ebx register
loop_start:
		mov [ebx], esi   ; storing current_num value into sequence variable
		add esi, edi   ; adding current_num and next_num values and storing result into esi register
		mov [ebx+4], esi   ; storing next_num value into sequence variable
		add ebx, 8   ; incrementing ebx register by 8 bits
		dec ecx   ; decreasing ecx register by 1
		jnz loop_start   ; jump to loop_start if ecx register is not equal to zero
		; printing sequence
		mov ebx, OFFSET sequence   ; move address of sequence variable into ebx register
		mov ecx, count   ; move count value into ecx register
		lea edx, sequence_str   ; load address of sequence_str variable into edx register
		lea eax, print_str   ; load address of print_str variable into eax register
		push ecx   ; push count value onto the stack
		push ebx   ; push address of sequence variable onto the stack
		push edx   ; push address of sequence_str variable onto the stack
		push eax   ; push address of print_str variable onto the stack
		call printf   ; calling printf function to print the sequence
		add esp, 16   ; balancing the stack
		MAIN ENDP
	END MAIN