section .text              ; (.text section for code)
  global _start            ; (_start function is entry point)
  
_start:                    ; (_start function label)
  mov eax, [var1]          ; (move value at var1 into eax register)
  cmp eax, [var2]          ; (compare value at var2 and eax)
  jne not_equal            ; (if not equal, jump to not_equal label)
  jmp continue             ; (if equal, jump to continue label)
  
not_equal:
  mov ecx, [var2]          ; (move value at var2 into ecx register)
  sub ecx, [var1]          ; (subtract value at var1 from ecx)
  mov [var3], ecx          ; (move result into var3)
  jmp end                  ; (jump to end label)
  
continue:
  mov ecx, [var1]          ; (move value at var1 into ecx register)
  add ecx, [var2]          ; (add value at var2 to ecx)
  mov [var3], ecx          ; (move result into var3)
  
end:
  mov eax, 1               ; (system call for exit)
  xor ebx, ebx             ; (set exit status to 0)
  int 80h                  ; (invoke system call)
  
section .data              ; (.data section for data)
  var1 dd 5                ; (define variable var1 with value of 5)
  var2 dd 10               ; (define variable var2 with value of 10)
  var3 dd 0                ; (define variable var3 with initial value of 0)