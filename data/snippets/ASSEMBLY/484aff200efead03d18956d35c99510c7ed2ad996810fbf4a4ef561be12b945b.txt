; This code snippet implements a bubble sort algorithm in assembly

.data
array DWORD 12, 5, 9, 3, 8, 20, 18, 6, 1, 15 ; initialize an array of numbers
length DWORD 10 ; length of the array

.code
main PROC ; main procedure

; initialize counter and flag variables
MOV ecx, length ; counter variable for outer loop
MOV ebx, 0 ; flag variable for inner loop
MOV edx, 0 ; holds the current largest number in the inner loop

outerLoop: ; outer loop label
MOV eax, 0 ; reset eax register to 0 for comparison

innerLoop: ; inner loop label
CMP ebx, ecx ; compare counter and flag variables
JE endInner ; if ebx = ecx, then end inner loop

MOV esi, 0 ; reset esi register to 0 for array index
MOV edi, 4 ; holds the index of the next element in the array

MOV eax, [array + esi] ; load current element in array into eax register
CMP eax, [array + edi] ; compare current element with next element

JG swapElements ; if current element > next element, jump to swapElements

increaseIndex: ; label to increase index and continue inner loop
ADD esi, 4 ; increment esi register by 4 to move to next element
ADD edi, 4 ; increment edi register by 4 to move to next element

MOV eax, [array + esi] ; load current element in array into eax register
CMP eax, [array + edi] ; compare current element with next element

JNG increaseIndex ; if current element <= next element, jump to increaseIndex

swapElements: ; label to swap elements
MOV edx, [array + esi] ; load current element into edx register
MOV [array + esi], [array + edi] ; move next element into current element's position
MOV [array + edi], edx ; move current element into next element's position

ADD ebx, 1 ; increment flag variable
JMP innerLoop ; jump back to innerLoop

endInner: ; label to end inner loop
MOV ebx, 0 ; reset flag variable
SUB ecx, 1 ; decrement counter variable
JNE outerLoop ; jump back to outerLoop if counter != 0

endOuter: ; label to end outer loop

; print sorted array
MOV esi, 0 ; reset esi register to 0 for array index
printLoop: ; print loop label
LEA eax, [array + esi] ; load address of current element in array into eax register
PUSH eax ; push address onto stack
CALL WriteInt ; call WriteInt function to print element
ADD esp, 4 ; clean up stack
ADD esi, 4 ; increment esi register by 4 to move to next element
CMP esi, length ; compare esi with length of array
JL printLoop ; jump back to printLoop if esi < length of array

exit:
MOV eax, 0 ; exit code 0
RET ; return to operating system

main ENDP ; end of main procedure

END main ; end of program