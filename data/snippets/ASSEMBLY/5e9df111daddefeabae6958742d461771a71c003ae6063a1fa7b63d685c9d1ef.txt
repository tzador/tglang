; setting up registers
mov rax, 0 ; set rax to 0
mov rbx, 1 ; set rbx to 1
mov rcx, 10 ; set rcx to 10
mov rdx, 1 ; set rdx to 1

outer_loop:
; looping until rcx is 0
cmp rcx, 0 ; compare rcx to 0
jz end ; jump to end if rcx equals 0

inner_loop:
; looping until rbx reaches rax
cmp rbx, rax ; compare rbx to rax
jz increment_outer ; jump to increment_outer if rbx equals rax
multiply:
mul rbx ; multiply rax by rbx
inc rbx ; increment rbx
jmp inner_loop ; jump back to inner_loop

increment_outer:
inc rax ; increment rax
inc rdx ; increment rdx
dec rcx ; decrement rcx
jmp outer_loop ; jump back to outer_loop

end:
; print out final result
mov rsi, rax ; move rax into rsi
lea rdi, [rel format] ; load address of format string into rdi
mov rax, 0 ; set rax to 0 for printf call
call printf ; call printf function to print final result

; exit program
mov rax, 0 ; set rax to 0 for exit call
call exit ; call exit function
db 'The factorial of 10 is %d', 10, 0 ; define format string

format db '%d', 10, 0 ; define format string for printing newline