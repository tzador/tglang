; Declare a new variable
mov eax, 0   ; move 0 into eax register

; Add two numbers and store result in a variable
mov ebx, 5   ; move 5 into ebx register
add ebx, 10  ; add 10 to ebx register
mov [result], ebx ; store result in the specified variable

; Loop through an array and print each element
mov ecx, 0   ; move 0 into ecx register (counter for loop)
mov edx, 4   ; move 4 into edx register (length of array)
loop_start:
    mov eax, [array + ecx*4] ; move value at address array + ecx*4 (element in array) into eax register
    ; multiply ecx by 4 since each element in array is 4 bytes
    ; [array + ecx*4] is equivalent to array[ecx]
    ; multiple operations can be performed inside brackets [operation1 + operation2 * 4]

    ; Print element
    mov ebx, 1   ; move 1 into ebx register (file descriptor for stdout)
    ; stdin = 0, stdout = 1, stderr = 2
    mov ecx, eax ; move value in eax (current element) into ecx register
    mov edx, 1   ; move length of value to be printed into edx register
    int 0x80     ; system call to print to stdout, prints contents of ecx register (current element)

    ; Exit loop if counter is equal to length of array
    cmp ecx, edx ; compare ecx register (counter) to edx register (length)
    jne loop_start ; jump to loop_start if not equal / continue looping

; Exit program
mov eax, 1   ; move 1 into eax register (system call for exit)
xor ebx, ebx ; set ebx to 0 (error code for successful exit)
int 0x80     ; system call for exit, uses eax and ebx register