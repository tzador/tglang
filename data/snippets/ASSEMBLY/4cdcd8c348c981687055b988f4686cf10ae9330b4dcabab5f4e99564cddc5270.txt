.intel_syntax noprefix 
.section .text 
.global main 

main: 

  # Initialize variables 
  mov eax, 5 # Move the value 5 into the eax register 
  mov ebx, 10 # Move the value 10 into the ebx register 
  mov ecx, 0 # Move the value 0 into the ecx register 

  # Loop through ebx and add each iteration to ecx 
  loop_start: 
  add ecx, eax # Add the value in eax to ecx 
  dec ebx # Decrease the value in ebx by 1 
  cmp ebx, 0 # Compare ebx to 0 
  jg loop_start # If ebx is greater than 0, jump back to loop start 

  # Print the final result 
  mov eax, 4 # Move the value 4 into the eax register (sys_write) 
  mov ebx, 1 # Move the value 1 into the ebx register (STDOUT) 
  mov ecx, final_result # Move the value of final_result label into ecx register 
  mov edx, 10 # Move the value 10 (length of final_result string) into edx register 
  int 0x80 # Call the kernel 
  mov eax, 1 # Move the value 1 into the eax register (sys_exit) 
  xor ebx, ebx # Set ebx to 0 
  int 0x80 # Call the kernel 

.data 
final_result db "The final result is: ", 0xA, 0xD, 0 

  # End of program 
  .section .bss 
  # Reserve 4 bytes of memory to store our result 
  res: .resd 1