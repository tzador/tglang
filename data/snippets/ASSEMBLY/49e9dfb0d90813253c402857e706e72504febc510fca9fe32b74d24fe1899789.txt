;This is a complex code snippet in Assembly language
;It declares variables, performs arithmetic operations, and prints the result

SECTION .data           ;declare variables
    var1 DW 5           ;define a word variable with value 5
    var2 DW 2           ;define a word variable with value 2

    str1 DB 'The sum of var1 and var2 is: '   ;define a string
    str2 DB '%d', 10, 0                       ;define format specifier and new line character

SECTION .bss            ;reserve space for variables
    result RESW 1       ;reserve a word variable for result

SECTION .text           ;start of program
    global _start       ;declare global entry point

_start:                 ;start of program execution
    mov ax, var1        ;move value of var1 into ax register
    add ax, var2        ;add value of var2 to ax register
    mov [result], ax    ;move result into reserved variable

    lea rdi, [str1]     ;load address of str1 into rdi register (for printing)
    mov rsi, result     ;move address of result into rsi register (for printing)
    mov rax, 0          ;set rax to 0 (to indicate success)
    call printf         ;call C library function for printing

    ;print new line
    lea rdi, [str2]     ;load address of str2 into rdi register (for printing)
    xor rax, rax        ;set rax to 0 (to indicate success)
    call printf         ;call C library function for printing

    ;exit program
    mov rax, 1          ;set rax to 1 (to indicate exit system call)
    xor rbx, rbx        ;set rbx to 0 (to indicate success)
    int 0x80            ;make system call

;print function for printing using C library
;Inputs:
;rdi - address of string to print
;rsi - address of variable to print
;Returns:
;0 - on success
printf:
    push rbp                    ;save base pointer
    mov rbp, rsp                ;set base pointer
    push rdi                    ;push arguments onto stack
    push rsi
    push rax
    push rbx
    push rdx
    mov rdx, rsi                ;set rdx to address of variable
    mov rsi, rdi                ;set rsi to address of string
    mov rdi, rax                ;set rdi to 0 (for format specifier)
    xor rax, rax                ;set rax to 0 (to indicate success)
    call printf                 ;call C library function for printing
    pop rdx                     ;restore registers
    pop rbx
    pop rax
    pop rsi
    pop rdi
    leave                       ;restore stack frame
    ret                         ;return to calling code