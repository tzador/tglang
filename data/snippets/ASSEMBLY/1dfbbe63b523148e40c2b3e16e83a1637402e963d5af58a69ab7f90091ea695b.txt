; Set and Load Constant
mov eax, 10 ; Move value 10 into accumulator

; Add two values
add eax, 20 ; Add 20 to accumulator

; Store accumulator result in memory
mov [result], eax ; Move accumulator value into memory address of result

; Load value from memory
mov ebx, [result] ; Move value from memory address of result into EBX register

; Compare two values
cmp ebx, 30 ; Compare EBX register value with 30
 
; Conditional Jump based on comparison result
jg greater ; Jump to label "greater" if comparison result is greater

; If not greater, jump to "less" label
jl less ; Jump to label "less" if comparison result is less

; If neither greater nor less, jump to "equal" label
je equal ; Jump to label "equal" if comparison result is equal

; Label for greater result
greater:
    mov ecx, 1 ; Move value 1 into ECX register

; Label for less result
less:
    mov edx, 2 ; Move value 2 into EDX register

; Label for equal result
equal:
    mov esi, 3 ; Move value 3 into ESI register

; Print results
mov ah, 0x0E ; Set AH register value to 0x0E for print function
mov dl, ecx ; Move value in ECX register into DL register for printing
int 0x21 ; Call interrupt 0x21, which triggers the print function

mov dl, edx ; Move value in EDX register into DL register for printing
int 0x21 ; Call interrupt 0x21 again for second print

mov dl, esi ; Move value in ESI register into DL register for printing
int 0x21 ; Call interrupt 0x21 for third print