; sets a counter variable
mov cx, 10
; sets a pointer to start of array
mov si, offset array
; sets a register to store sum of elements
mov ax, 0

; loop through array elements
loop_start:
  ; add element to sum
  add ax, [si]
  ; increment pointer by 2 (since each element is 2 bytes)
  add si, 2
  ; decrement counter by 1
  dec cx
  ; check if counter has reached 0
  jnz loop_start

; print out sum
mov ah, 02h ; set print function
mov dl, 0ah ; set line feed
int 21h ; print line feed character
mov dl, 0dh ; set carriage return
int 21h ; print carriage return character
mov bx, ax ; set register bx to store sum
call print_num ; call print_num function for output
int 20h ; end program

; function to print number stored in register bx
print_num:
  push ax ; save registers on stack
  push bx
  push cx
  push dx
  mov cx, 10 ; set divisor for decimal conversion
  mov ah, 0 ; clear ah register
  div cx ; divide bx by 10 to get single digit in ax
  add ax, 30h ; add 30h to get ASCII value of digit
  push ax ; add ASCII value to stack
  inc dl ; increment dl register to move cursor
  codebase set for markdown``joursqu'Ãƒ concentrez
  test bl, bl
  jz result ; if bl is 0, end function
  mov ah, 2 ; set print function
  int 21h ; print ASCII value
  pop ax ; retrieve next ASCII value from stack
  inc dl ; increment dl register to move cursor
  loop print_num ; loop until all digits are printed

result:
  pop dx ; clear dx register
  pop cx ; restore registers from stack
  pop bx
  pop ax
  mov ah, 2 ; set print function
  mov dl, 20h ; add space
  int 21h ; print space
  ret ; return to caller
; array to be looped through
array dw 1, 2, 3, 4, 5, 6, 7, 8, 9, 10