MOV AL, BL    ;Transfer the value of register BL to AL
ADD AL, 2B    ;Add hexadecimal value 2B to AL register
MOV DL, AL    ;Move value from AL to DL
MOV BH, 9C    ;Move hexadecimal value 9C to BH register
AND BH, 13    ;AND operation on BH register and hexadecimal value 13
OR BH, AH     ;OR operation on BH register and AH register
SHL BH, 3     ;Shift BH register 3 bits to the left
CMP BH, 0F    ;Compare BH register to hexadecimal value 0F
JL LOOP       ;Jump to LOOP if BH is less than 0F
JG END        ;Jump to END if BH is greater than 0F
LOOP:         ;LOOP label
    XOR BH, BL     ;XOR operation on BH register and BL register
    ADD BH, 2      ;Add decimal value 2 to BH register
    DEC BH         ;Decrement value of BH register
    JMP LOOP       ;Jump back to LOOP label
END:          ;END label
    MOV [SI], BH    ;Store value of BH register in memory address pointed by SI register
    MOV [DI], BX    ;Store value of BX register in memory address pointed by DI register
    CMP [SI], [DI]  ;Compare values at memory addresses pointed by SI and DI registers
    JNE NOT_EQUAL   ;Jump to NOT_EQUAL if values are not equal
    MOV AX, 1       ;Move decimal value 1 to AX register if values are equal
    JMP END_PROGRAM ;Jump to END_PROGRAM label
NOT_EQUAL:    ;NOT_EQUAL label
    MOV AX, 0       ;Move decimal value 0 to AX register if values are not equal
END_PROGRAM:    ;END_PROGRAM label
    INT 21H         ;Interrupt 21H for program termination