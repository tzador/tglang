.global main                 ; marks the beginning of the program

main:  mov 0x05, %eax               ; move the value 0x05 (decimal 5) into the EAX register
       cmp $0x00, %eax              ; compare the value in EAX with 0x00
       je zero_check                ; jump to zero_check if values are equal

       mov $0x01, %ebx              ; move the value 0x01 (decimal 1) into the EBX register
       jmp print_result             ; jump to print_result

zero_check:
       mov $0x00, %ebx              ; move the value 0x00 (decimal 0) into the EBX register
       jmp print_result             ; jump to print_result

print_result:
       mov $0x04, %eax              ; move the value 0x04 (system call for "write" function) into the EAX register
       mov $0x01, %ecx              ; move the value 0x01 (standard output file descriptor) into the ECX register
       lea msg, %edx                ; load the address of the string "The result is: " into the EDX register
       mov $0x12, %esi              ; move the value 0x12 (length of the string) into the ESI register
       int $0x80                    ; make a system call

       mov %ebx, %eax               ; move the value in EBX into EAX (the result)
       mov $0x01, %ecx              ; move the value 0x01 (standard output file descriptor) into the ECX register
       mov $0x04, %ebx              ; move the value 0x04 (system call for "write" function) into the EBX register
       int $0x80                    ; make a system call

       mov $0x01, %eax              ; move the value 0x01 (system call for "exit" function) into the EAX register
       xor %ebx, %ebx               ; clear the value in EBX (representing the error code)
       int $0x80                    ; make a system call

       .section .data               ; marks the beginning of the data section
msg:   .string "The result is: "     ; defines a string variable with the value "The result is: "