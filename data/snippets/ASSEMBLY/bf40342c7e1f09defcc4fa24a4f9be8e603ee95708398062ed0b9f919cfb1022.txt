.section .data
    ; This section is used to declare variables and constants
    msg db "Hello, World!", 0x0A ; Declares a string variable and adds a new line character
    num dd 10 ; Declares a double word variable with the value 10
    array dw 1, 2, 3, 4, 5 ; Declares an array with 5 elements

.section .text
    global _start
    _start:
        ; This is the entry point of the program
        mov eax, 4 ; System call for printing
        mov ebx, 1 ; File descriptor for standard output
        mov ecx, msg ; Address of the string variable
        mov edx, 14 ; Number of bytes to be printed, including null character and new line
        int 0x80 ; Interrupt to execute the system call
        ; Prints "Hello, World!" to the standard output

        mov eax, 1 ; System call for exit
        xor ebx, ebx ; Exit status code 0
        int 0x80 ; Interrupt to execute the system call
        ; Exits the program with 0 as the exit status code

; This section is used to define functions or subroutines
print_array:
    ; Prints the contents of an array to the standard output
    push ebp ; Saves the value of the base pointer
    mov ebp, esp ; Sets the base pointer to point to the top of the stack
    mov eax, 4 ; System call for printing
    mov ebx, 1 ; File descriptor for standard output
    mov ecx, [ebp + 8] ; First argument - address of the array
    mov edx, [ebp + 12] ; Second argument - size of the array
    mov esi, 0 ; Index to keep track of the array elements
    loop:
        mov eax, [ecx + esi * 2] ; Moves the value at the current index to the eax register
        mov edx, 2 ; Number of bytes to be printed for each element
        int 0x80 ; Interrupt to execute the system call
        add esi, 1 ; Increases the index by 1
        cmp esi, [ebp + 12] ; Compares the index to the size of the array
        jne loop ; Jumps back to "loop" if the index is less than the size of the array
    pop ebp ; Restores the value of the base pointer
    ret ; Returns from the function

main:
    ; Calls the function to print the array
    push array ; Pushes the address of the array as the first argument
    push dword 5 ; Pushes the size of the array as the second argument
    call print_array ; Calls the function
    add esp, 8 ; Removes the arguments from the stack

    mov eax, 1 ; System call for exit
    xor ebx, ebx ; Exit status code 0
    int 0x80 ; Interrupt to execute the system call
    ; Exits the program with 0 as the exit status code