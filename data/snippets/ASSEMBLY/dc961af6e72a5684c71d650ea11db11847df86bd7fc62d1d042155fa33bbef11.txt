; This code snippet shows how to implement a Fibonacci sequence algorithm in Assembly language
;
; Input: 8 (number of Fibonacci numbers to generate)
; Output: fib1 = 0, fib2 = 1, fib3 = 1, fib4 = 2, fib5 = 3, fib6 = 5, fib7 = 8, fib8 = 13

; Initialize variables
fib1 dw 0
fib2 dw 1
fib3 dw 0 ; Placeholder for current Fibonacci number
fibIndex dw 2 ; Keeps track of current Fibonacci index
totalNums dw 8 ; Number of Fibonacci numbers to generate
fibToPrint dw 0 ; Stores current Fibonacci number to be printed
index dw 1 ; Loop index

 ; Start loop to generate Fibonacci numbers
generateFib:
     ; Add previous two numbers to get current Fibonacci number
     mov ax, [fib1] ; Moves first previous number into accumulator
     add ax, [fib2] ; Adds second previous number to accumulator
     mov [fib3], ax ; Moves result into current Fibonacci number placeholder

     ; Swap values for next loop
     mov ax, [fib2] ; Moves second previous number into accumulator
     mov [fib1], ax ; Moves it into first previous number variable

     ; Move current Fibonacci number into accumulator to print
     mov ax, [fib3]
     mov [fibToPrint], ax

     ; Print current Fibonacci number
     call printValue

     ; Increment index and check if all numbers have been generated
     inc [fibIndex]
     cmp [fibIndex], [totalNums]
     jne generateFib ; If not, continue loop

 ; Ends program
endProgram:
    ret

; Prints a given value
; Input: ax (value to print)
printValue:
    ; Convert value to ASCII and store in array
    MOV CX, 0 ; Initialize CX as counter
    LEA DI, [values] ; Load array address into DI
    call intToStr

    ; Print each character in array
    mov si, 0 ; Initialize SI as index
    loop1:
         mov ah, 02h ; Set function for printing character
        mov dl, [values + si] ; Move character from array into DL
         int 21h ; Print character
         inc si ; Increment index
         cmp si, cx ; Check if all characters have been printed
         jne loop1 ; If not, continue loop

    ; Print new line
    call newLine

    ret
; Converts a given integer to ASCII and stores it in an array
; Input: ax (value to convert)
; Output: array with ASCII characters of converted value
intToStr:
    ; Convert value into ASCII
    mov bx, 10 ; Set base 10 for division
    xor dx, dx ; Clear DX for division
    div bx ; Divide ax by bx, quotient in al, remainder in ah
    add al, '0' ; Convert remainder to ASCII character
    mov [values + cx], al ; Store in array
    inc cx ; Increment counter

    cmp ax, 0 ; Check if value has been fully converted
    jne intToStr ; If not, continue loop

    ; Reverse array elements
    mov si, 0 ; Initialize SI as start index
    mov di, cx ; Initialize DI as end index
    dec di ; Adjust DI to last index
    swapElements:
    mov al, [values + si] ; Move first element into AL
    mov bh, [values + di] ; Move last element into BH
    mov [values + si], bh ; Swap elements
    mov [values + di], al ;
    inc si ; Increment start index
    dec di ; Decrement end index
    cmp si, di ; Check if all elements have been swapped
    jge endSwap ; If not, continue loop
    jmp swapElements
endSwap:
    ret

; Prints a new line
newLine:
    mov ah, 02h ; Set function for printing character
    mov dl, 10 ; Move line feed character into DL
    int 21h ; Print new line
    ret

; Data section
values db 10 dup ('$') ; Array to store ASCII characters of converted value