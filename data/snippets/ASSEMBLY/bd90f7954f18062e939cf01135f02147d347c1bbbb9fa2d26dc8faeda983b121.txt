SECTION .data       ; Data section

    message db 'Hello, World!'    ; Define string to be printed
    length equ $-message         ; Define length of string
    num1 dd 5                    ; Define first number
    num2 dd 10                   ; Define second number
    output db 0                  ; Define variable to store result


SECTION .text       ; Code section

global _start     ; Global entry point

_start:

    ; Print 'Hello, World!'
    mov rax, 1       ; Syscall: write
    mov rdi, 1       ; File descriptor: STDOUT (1)
    mov rsi, message ; Message to print
    mov rdx, length  ; Length of message
    syscall          ; Call kernel

    ; Add num1 and num2
    mov eax, [num1]  ; Move first number to EAX register
    add eax, [num2]  ; Add second number to EAX register
    mov [output], eax  ; Move result to output variable

    ; Print result
    mov rax, 1       ; Syscall: write
    mov rdi, 1       ; File descriptor: STDOUT (1)
    mov rsi, output  ; Result to print
    mov rdx, 4       ; Length of integer (number of bytes)
    syscall          ; Call kernel

    ; Exit program with return code 0
    mov rax, 60      ; Syscall: exit
    mov rdi, 0       ; Return code: 0 (success)
    syscall          ; Call kernel