;-----------------------------------------
; This code snippet performs a bubble sort on an array of integers

; Define variables
section .data
    array db 5, 2, 9, 1, 3, 7, 4, 6, 8        ; array to be sorted
    array_len equ $ - array                   ; length of the array
    temp  db 0                                ; temp variable for swapping
    sorted dw 0                               ; flag to check if array is sorted
    
; Code to initialize and print array before sorting
section .text
    global _start
    
_start:
    mov ecx, array_len                ; initialize counter
    mov esi, array                     ; point source index to array
    mov edi, array                     ; point destination index to array
    
    ; Print original array before sorting
    mov eax, 4                         ; system call for 'write'
    mov ebx, 1                         ; file descriptor for stdout
    mov ecx, array                     ; pointer to array
    mov edx, array_len                 ; number of bytes to write
    int 80h                            ; call kernel
    
; Bubble sort algorithm
outer_loop:
    xor ecx, ecx                      ; reset counter
    inc ecx                           ; increment counter
    cmp ecx, array_len                ; check if loop has reached the end of the array 
    je done                           ; if yes, array is sorted
    
inner_loop:
    mov al, [edi]                        ; load current element into temporary register
    cmp al, [edi+1]                      ; compare with next element in array

    jle swap                             ; if first element is less than or equal to second element, swap
    ; else, continue with next iteration of inner loop
    mov byte [sorted], 0                 ; set flag to 0 if swap was made

    inc ecx                              ; increment counter
    cmp ecx, array_len - 1               ; check if end of inner loop has been reached
    jl inner_loop                        ; if not, continue looping
    
    cmp byte [sorted], 1                 ; check if flag is still 1 (array is sorted)
    je done                              ; if yes, array is sorted
    
    jmp outer_loop                       ; continue with outer loop if array is not yet sorted


swap:
    mov cl, [edi]                        ; load current element into temporary register
    mov [temp], cl                       ; save current element to temp variable
    mov cl, [edi+1]                      ; load next element into temporary register
    mov [edi], cl                        ; overwrite current element with next element in array
    mov [edi+1], [temp]                  ; overwrite next element with current element (stored in temp variable)
    mov byte [sorted], 0                 ; set flag to 0 since swap was made
    jmp inner_loop                       ; continue with inner loop
    
done:
    ; Print sorted array
    mov eax, 4
    mov ebx, 1
    mov ecx, array
    mov edx, array_len
    int 80h
    
    ; End program
    mov eax, 1
    xor ebx, ebx
    int 80h