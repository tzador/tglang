global main                                             ; declares 'main' as global label 
section .data                                          ; defines section for storing initialized data
    helloMsg db 'Hello, world!', 0x0A, 0x0D             ; string 'Hello, world!' with line feed and carriage return

section .text                                          ; defines section for executable instructions
main:                                                   ; main function label
    ; function prologue
    push ebp                                            ; save old base pointer
    mov ebp, esp                                        ; set new base pointer
    push ebx                                            ; save ebx register onto stack
    push esi                                            ; save esi register onto stack

    ; function body
    mov edx, helloMsg                                   ; load address of helloMsg into edx register
    mov ecx, len(helloMsg)                              ; get length of string helloMsg and store in ecx register
    mov ebx, 1                                          ; set ebx register to 1 for stdout
        
    ; invoke system call 'write'
    mov eax, 4                                          ; set eax register to write 
    int 0x80                                            ; interrupt to invoke system call
        
    ; function epilogue
    pop esi                                             ; restore esi register from stack
    pop ebx                                             ; restore ebx register from stack
    mov esp, ebp                                        ; restore stack pointer
    pop ebp                                             ; restore base pointer       
    mov eax, 0                                          ; set eax register to 0 to indicate successful execution
    ret                                                 ; return to calling function

len:
    mov eax, 0                                          ; initialize length to 0
    mov edi, 0                                          ; initialize index to 0
loop:
    cmp byte [edx + edi], 0                             ; compare current character to null terminator
    je done                                             ; jump to done if null terminator is found
    inc eax                                             ; increment length counter
    inc edi                                             ; increment index
    jmp loop                                            ; jump back to loop
done:
    ret                                                 ; return to calling function