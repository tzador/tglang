; Initialize registers
xor %eax, %eax
xor %ebx, %ebx
xor %ecx, %ecx
xor %edx, %edx

; Store array size
mov $10, %eax

; Allocate memory for array
mov $SYS_mmap, %eax
mov $0, %ebx
mov $10, %ecx
mov $PROT_READ | $PROT_WRITE, %edx
mov $MAP_PRIVATE | $MAP_ANONYMOUS, %esi
mov $-1, %edi
xor %ebp, %ebp
int $0x80

; Store address of allocated memory in ebx
mov %eax, %ebx

; Fill array with values
mov $0, %ecx
fill_loop:
mov %ecx, (%ebx)
inc %ecx
cmp $10, %ecx
jne fill_loop

; Print values in array
mov $SYS_write, %eax
mov $STDOUT, %ebx
mov $address_of_array, %ecx
mov $10, %edx
int $0x80

; Deallocate memory
mov $SYS_munmap, %eax
mov $address_of_array, %ebx
mov $10, %ecx
int $0x80

; Exit program
mov $SYS_exit, %eax
mov $0, %ebx
int $0x80

section .DATA
SYS_mmap equ 90 ; mmap system call number
PROT_READ equ 1 ; constant for read permission
PROT_WRITE equ 2 ; constant for write permission
MAP_PRIVATE equ 2 ; constant for private mapping
MAP_ANONYMOUS equ 0x20 ; flag for anonymous mapping
SYS_write equ 4 ; write system call number
STDOUT equ 1 ; standard output file descriptor
SYS_munmap equ 91 ; munmap system call number
SYS_exit equ 1 ; exit system call number