;This code snippet is an example of a basic assembly language program for calculating the factorial of a number.
;The number is inputted by the user using the "read" function and the result is outputted through the "write" function.

section .text
global _start

_start:
    ;Initialize registers
    mov eax, 1    ;Counter
    mov ebx, 0    ;Factorial value
    mov ecx, 1    ;Multiplier
    mov edx, 0    ;Input value

input:
    ;Read in user input
    push eax        ;Save value of eax register on stack
    push ecx        ;Save value of ecx register on stack
    push edx        ;Save value of edx register on stack
    mov eax, 3      ;System call code for "read"
    mov ebx, 0      ;File descriptor for standard input (stdin)
    mov ecx, edx    ;Buffer to store input
    mov edx, 2      ;Number of bytes to read
    int 0x80        ;Call kernel to perform read operation
    pop edx         ;Restore value of edx register from stack
    pop ecx         ;Restore value of ecx register from stack
    pop eax         ;Restore value of eax register from stack

    ;Convert string input to integer
    sub eax, 48     ;Convert ASCII character to decimal value
    mul ecx         ;Multiply input by current multiplier value
    mov ecx, eax    ;Store result in ecx register

    ;Calculate factorial
    cmp eax, 1      ;Check if input is equal to 1
    je output       ;Jump to output if true
    mul ebx         ;Multiply current factorial value by input
    mov ebx, eax    ;Store result in ebx register
    inc edx         ;Increment counter
    inc eax         ;Increment input
    jmp input       ;Jump back to input label

output:
    ;Print result
    push ebx        ;Save value of ebx register on stack
    push edx        ;Save value of edx register on stack
    push edx        ;Save value of edx register on stack
    mov eax, 4      ;System call code for "write"
    mov ebx, 1      ;File descriptor for standard output (stdout)
    mov ecx, ebx    ;Buffer holding result
    mov edx, 4      ;Number of bytes to write
    int 0x80        ;Call kernel to perform write operation
    pop edx         ;Restore value of edx register from stack
    pop edx         ;Restore value of edx register from stack
    pop ebx         ;Restore value of ebx register from stack

    ;Exit program
    mov eax, 1      ;System call code for "exit"
    xor ebx, ebx    ;Set exit code to 0
    int 0x80        ;Call kernel to perform exit operation