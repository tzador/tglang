;----------------------------------------------------------
; This code snippet is an example of a bubble sort algorithm
; Description: Sorts an array of integers in ascending order
; Input: An array of integers, length of array
; Output: Sorted array of integers
;----------------------------------------------------------

; Define variables
;---------------------------------------
.section .data
unsorted_array dd 5, 3, 7, 2, 9, 1 ; Input array of integers
sorted_array dd 6 dup(0) ; Array to store sorted integers
size dw 6 ; Length of array

; Main code
;---------------------------------------
.section .text
.global _start

_start:
    push size ; Push length of array onto stack
    push unsorted_array ; Push address of input array onto stack
    call bubblesort ; Call bubblesort function
    add esp, 8 ; Clean up stack after function call

    ; Display sorted array
    mov ecx, size ; Move length of array into ecx for loop
    mov esi, unsorted_array ; Move address of input array into esi
    mov edi, sorted_array ; Move address of sorted array into edi
display_loop:
    mov eax, [esi] ; Move integer from input array into eax
    mov [edi], eax ; Move integer into sorted array
    add esi, 4 ; Move to next integer in input array
    add edi, 4 ; Move to next empty position in sorted array
    loop display_loop ; Loop until all integers have been moved

    ; Exit program
    mov eax, 1 ; System call for exit
    xor ebx, ebx ; Return code 0
    int 0x80 ; Interrupt to call kernel

; Bubblesort function
; Input: Array of integers, length of array
; Output: Sorted array of integers
bubblesort:
    push ebp
    mov ebp, esp ; Set up base pointer
    mov ebx, [ebp+8] ; Move address of array into ebx
    mov ecx, [ebp+12] ; Move length of array into ecx

outer_loop:
    mov ebp, esp ; Set up base pointer
    mov esi, ebx ; Move address of array into esi
    mov edi, [ebp+12] ; Move length of array into edi
    dec edi ; Decrease edi by 1, will be used for inner loop

inner_loop:
    mov eax, [esi] ; Move first integer into eax
    cmp eax, [esi+4] ; Compare to next integer in array
    jle noswap ; If less than or equal, skip swap
    xchg eax, [esi+4] ; Swap integers
    mov [esi], eax ; Move integer back into array
noswap:
    add esi, 4 ; Move to next integer in array
    dec edi ; Decrease edi by 1
    cmp edi, 0 ; Check if end of array has been reached
    jne inner_loop ; If not, continue inner loop

    loop outer_loop ; Decrease ecx by 1 and loop until array is sorted

    pop ebp
    ret ; Return to main code