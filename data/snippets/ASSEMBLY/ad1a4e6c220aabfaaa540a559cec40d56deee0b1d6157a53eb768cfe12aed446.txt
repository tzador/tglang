; This code snippet is a function that calculates the GCD (Greatest Common Divisor) of two numbers, using the Euclidean Algorithm

; Input:
; - Argument 1: First number (stored in register r1)
; - Argument 2: Second number (stored in register r2)

; Output:
; - Greatest Common Divisor (stored in register r0)

    .global gcd         ; declaring function as global

gcd:

    mov r0, r1          ; moving first number to r0 (will be used as the remainder)
    mov r1, r2          ; moving second number to r1 (will be used as the divisor)

    cmp r0, #0          ; comparing r0 with 0
    beq end             ; if r0 = 0, jump to end

    cmp r1, #0          ; comparing r1 with 0
    beq end             ; if r1 = 0, jump to end

loop:
    cmp r0, r1          ; comparing r0 with r1
    bge subtract        ; if r0 >= r1, jump to subtract

    mov r2, r1          ; moving r1 to r2 (will be used as the new remainder)
    mov r1, r0          ; moving r0 to r1 (will be used as the new divisor)
    mov r0, r2          ; moving r2 to r0 (new remainder)

    b loop              ; branching back to loop

subtract:
    sub r0, r0, r1      ; subtracting r1 from r0 (reduces r0 to be smaller than r1)
    b loop              ; branching back to loop

end:
    mov r0, r1          ; moving r1 (final divisor) to r0 (final GCD)

    bx lr               ; returning from function