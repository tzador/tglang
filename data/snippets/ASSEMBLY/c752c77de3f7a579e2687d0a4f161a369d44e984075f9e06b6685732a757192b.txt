; Code to print "Hello World!" in Assembly

section .data 				; Declaring data section
	message db 'Hello World!', 0xA	; Defining a string to be printed, ending with newline character
	message_len equ $-message	; Calculating the length of the string

section .text 				; Declaring code section

global _start 				; Specifying starting point of program

_start:
	mov eax, 4			; System call number for write
	mov ebx, 1			; File descriptor for stdout
	mov ecx, message		; Pointer to string to be printed
	mov edx, message_len		; Length of string to be printed
	int 0x80			; Calling interrupt to execute system call

	mov eax, 1			; System call number for exit
	xor ebx, ebx			; Exit status code (0 means success)
	int 0x80			; Calling interrupt to execute system call

;: This code uses the Linux system call interface to print the string "Hello World!" to the standard output (stdout).
;: The string is defined in the data section, along with its length.
;: The code section starts with the label "_start", which marks the beginning of the program.
;: Initially, the values of the registers eax, ebx, ecx, and edx are set according to the system call convention.
;: The system call number 4 (eax) specifies the "write" function, with the file descriptor for stdout (ebx).
;: The pointer to the string (ecx) and its length (edx) are also passed as arguments.
;: The int 0x80 instruction triggers a software interrupt, which invokes the kernel to execute the system call.
;: After printing the string, the code then uses the "exit" function (system call number 1) to terminate the program.
;: The exit status code (ebx) is set to 0 to indicate success, and another software interrupt is called to execute the system call.
;: This terminates the program and control is returned to the operating system.