.section .data

; Define variables
myNum: .long 10 ; Integer variable with initial value of 10
myChar: .char 'A' ; Character variable with initial value of 'A'
myString: .string "Hello, World!" ; String variable with initial value of "Hello, World!"

.section .text

; Start of program
.global _start

_start:

; Store memory addresses of variables in registers
movl $myNum, %eax ; Moves myNum memory address into EAX register
movl $myChar, %ebx ; Moves myChar memory address into EBX register
movl $myString, %ecx ; Moves myString memory address into ECX register 

; Output values to console
movl $4, %eax ; System call number for printing to console
movl $1, %ebx ; File descriptor for standard output
movl $myNum, %ecx ; Value of myNum variable
movl $4, %edx ; Length of data to be outputted
int $0x80 ; System call to print

movl $4, %eax ; System call number for printing to console
movl $1, %ebx ; File descriptor for standard output
movl $myChar, %ecx ; Value of myChar variable
movl $1, %edx ; Length of data to be outputted
int $0x80 ; System call to print

movl $4, %eax ; System call number for printing to console
movl $1, %ebx ; File descriptor for standard output
movl $myString, %ecx ; Value of myString variable
movl $13, %edx ; Length of data to be outputted
int $0x80 ; System call to print

; Add myNum and ASCII value of myChar
movl $myNum, %eax ; Moves myNum value into EAX register
addb myChar, %al ; Adds ASCII value of myChar to lower byte of EAX register

; Output result to console
movl $4, %eax ; System call number for printing to console
movl $1, %ebx ; File descriptor for standard output
movl %eax, %ecx ; Value of EAX register
movl $4, %edx ; Length of data to be outputted
int $0x80 ; System call to print

; End of program
movl $1, %eax ; Syscall number for exit
int $0x80 ; Exit program