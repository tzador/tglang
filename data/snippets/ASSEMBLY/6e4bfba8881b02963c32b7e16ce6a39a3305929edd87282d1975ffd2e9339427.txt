;;;; Multi-line comments
	.DATA			; this section is for declaring data
var1:	.DB	10			; declaring a byte variable with initial value of 10
var2:	.DW	1234H			; declaring a word variable with initial value of 1234H
var3:	.DD	65536			; declaring a double word variable with initial value of 65536
var4:	.DQ	123456789ABCDEFH	; declaring a quad word variable with initial value of 123456789ABCDEFH
var5:	.DT	3.14			; declaring a ten byte decimal variable with initial value of 3.14 
	.CODE			; this section is for writing actual code

;;;;;;;; Operand types that can be used in Assembly
; Register
MOV	EAX, var1		; move var1 to EAX register
MOV	EBX, var2		; move var2 to EBX register
MOV	ECX, var3		; move var3 to ECX register
MOV	EDX, var4		; move var4 to EDX register
MOV	ESP, var5		; move var5 to ESP register

; Immediate value
MOV	EAX, 10		; move immediate value 10 to EAX register
MOV	EBX, 1234H		; move immediate value 1234H to EBX register
MOV	ECX, 65536		; move immediate value 65536 to ECX register
MOV	EDX, 123456789ABCDEFH	; move immediate value 123456789ABCDEFH to EDX register
MOV	ESP, 3.14		; move immediate value 3.14 to ESP register

; Memory address
MOV	EAX, [var1]		; move value at memory address var1 to EAX register
MOV	EBX, [var2]		; move value at memory address var2 to EBX register
MOV	ECX, [var3]		; move value at memory address var3 to ECX register
MOV	EDX, [var4]		; move value at memory address var4 to EDX register
MOV	ESP, [var5]		; move value at memory address var5 to ESP register

; Register indirect addressing
MOV	EAX, [EBX]		; move value at memory address stored in EBX register to EAX register
MOV	EBX, [ECX]		; move value at memory address stored in ECX register to EBX register
MOV	ECX, [EDX]		; move value at memory address stored in EDX register to ECX register
MOV	EDX, [ESP]		; move value at memory address stored in ESP register to EDX register
MOV	ESP, [EBP]		; move value at memory address stored in EBP register to ESP register

; Adress displacement
MOV	EAX, [EBX + 4]		; move value at memory address stored in EBX register plus 4 bytes to EAX register
MOV	EBX, [ECX - 8]		; move value at memory address stored in ECX register minus 8 bytes to EBX register
MOV	ECX, [EDX + 12]	; move value at memory address stored in EDX register plus 12 bytes to ECX register
MOV	EDX, [ESP - 16]	; move value at memory address stored in ESP register minus 16 bytes to EDX register
MOV	ESP, [EBP + 20]	; move value at memory address stored in EBP register plus 20 bytes to ESP register

;;;;;;;; Arithmetic operations
; Addition
ADD	EAX, EBX		; add value of EBX register to EAX register
ADD	EBX, ECX		; add value of ECX register to EBX register
ADD	ECX, EDX		; add value of EDX register to ECX register
ADD	EDX, ESP		; add value of ESP register to EDX register
ADD	ESP, EBP		; add value of EBP register to ESP register

; Subtraction
SUB	EAX, EBX		; subtract value of EBX register from EAX register
SUB	EBX, ECX		; subtract value of ECX register from EBX register
SUB	ECX, EDX		; subtract value of EDX register from ECX register
SUB	EDX, ESP		; subtract value of ESP register from EDX register
SUB	ESP, EBP		; subtract value of EBP register from ESP register

;;;;;;;; Conditional jumps
CMP	EAX, EBX
JE	label1			; jump to label1 if EAX is equal to EBX
JNE	label2			; jump to label2 if EAX is not equal to EBX
JG	label3			; jump to label3 if EAX is greater than EBX
JL	label4			; jump to label4 if EAX is less than EBX
JGE	label5			; jump to label5 if EAX is greater than or equal to EBX
JLE	label6			; jump to label6 if EAX is less than or equal to EBX

;;;; Proc section
	PROC main
	; code for main function goes here
	label1:
	; code for label1 goes here
	label2:
	; code for label2 goes here
	label3:
	; code for label3 goes here
	label4:
	; code for label4 goes here
	label5:
	; code for label5 goes here
	label6:
	; code for label6 goes here
	.ENDP			; end of main function
	END			; end of assembly code