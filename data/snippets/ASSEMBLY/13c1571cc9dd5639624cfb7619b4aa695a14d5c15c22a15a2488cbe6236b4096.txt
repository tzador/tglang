section .text                     ; Initialize the 'text' section
global _start                     ; Global entry point '_start'

_start:                           ; Main Program start
    mov ecx, 10                   ; Set register 'ecx' to value 10
    xor eax, eax                  ; Clear register 'eax'
    xor edx, edx                  ; Clear register 'edx'
    add eax, 1                    ; Add 1 to 'eax' register
    loop _start                   ; Loop back to start until 'ecx' reaches 0
    mov ebx, eax                  ; Move 'eax' value to 'ebx' register
    mov eax, 4                    ; Set system call 'write' to 'eax'
    mov ecx, msg                  ; Set the message to be printed in 'ecx' register
    mov edx, msglen               ; Set the length of the message to be printed in 'edx' register
    int 0x80                      ; Call the system interrupt to execute the system call
    mov eax, 1                    ; Set system call 'exit' to 'eax'
    xor ebx, ebx                  ; Clear register 'ebx'
    int 0x80                      ; Call the system interrupt to execute the system call

section .data                     ; Initialize the 'data' section
msg db 'Hello World', 0x0A       ; Define the message to be printed
msglen equ $-msg                  ; Calculate the length of the message