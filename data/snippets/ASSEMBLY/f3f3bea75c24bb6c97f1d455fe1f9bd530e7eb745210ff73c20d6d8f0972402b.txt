.section     .text
.globl       _start

# This is a comment

_start:
  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $48, %esi # move the value 48 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack 
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $48, %esi # move the value 48 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $50, %esi # move the value 50 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $10, %esi # move the value 10 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $40, %esi # move the value 40 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

end:

.globl       _end
.data
  msg db 'Hello, World!', 0xA # string to be printed
  msg_len equ $ - msg # length of string

.section     .text
.globl       _start

_start:
  movl $4, %eax # move the value 4 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $msg, %ecx # move the memory address of msg into the ecx register
  movl $msg_len, %edx # move the value of msg_len into the edx register
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $10, %esi # move the value 10 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  jmp end # jump to the end label

.exit:
  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  xor %ecx, %ecx # clear the ecx register
  int $0x80 # call the system interrupt to perform a exit system call

# This is the end label
end:

.globl       _end
.data
  result db 'Assembly code generated!', 0xA # string to be printed
  result_len equ $ - result # length of string

.section     .text
.globl       _start

_start:
  movl $4, %eax # move the value 4 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $result, %ecx # move the memory address of result into the ecx register
  movl $result_len, %edx # move the value of result_len into the edx register
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $10, %esi # move the value 10 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  jmp end # jump to the end label

.end:
  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  xor %ecx, %ecx # clear the ecx register
  int $0x80 # call the system interrupt to perform a exit system call

# This is the end label
end:

.globl       _end
.data
  var1 dd 10 # declare var1 as a double word (4 bytes) and initialize it with the value 10
  var2 dd 5 # declare var2 as a double word (4 bytes) and initialize it with the value 5
  result dd ? # declare result as a double word (4 bytes) and leave it uninitialized

.section     .text
.globl       _start

_start:
  fild var1 # load the value stored in var1 into the floating point register st0
  fidiv var2 # divide the value in st0 by the value stored in var2 and store the result back in st0
  fist result # store the truncated result from st0 into the memory location of result

  movl $4, %eax # move the value 4 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $msg, %ecx # move the memory address of result into the ecx register
  movl $result_len, %edx # move the value of result_len into the edx register
  int $0x80 # call the system interrupt to perform a system call

  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  movl $10, %esi # move the value 10 into the esi register
  push %esi # push the value of esi onto the stack
  push %ebx # push the value of ebx onto the stack
  int $0x80 # call the system interrupt to perform a system call

  jmp end # jump to the end label

.exit:
  movl $1, %eax # move the value 1 into the eax register
  movl $1, %ebx # move the value 1 into the ebx register
  xor %ecx, %ecx # clear the ecx register
  int $0x80 # call the system interrupt to perform a exit system call

# This is the end label
end: