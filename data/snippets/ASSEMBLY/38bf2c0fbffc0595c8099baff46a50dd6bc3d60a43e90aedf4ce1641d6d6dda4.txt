SECTION .data  ; Defines a section for initialized data

    msg db "Hello, world!",0xA,0xD ; Creates a variable 'msg' containing the message "Hello, world!" followed by a line feed (0xA) and a carriage return (0xD)
    msgLen equ $-msg ; Defines a variable 'msgLen' containing the length of the 'msg' variable

SECTION .bss ; Defines a section for uninitialized data

    num resb 1 ; Reserves space for 1 uninitialized byte and names it 'num'
    sum resb 1 ; Reserves space for 1 uninitialized byte and names it 'sum'

SECTION .text ; Defines a section for executable code

global _start ; Makes '_start' label visible to the linker so it can be used as an entry point for the program

_start:

    mov [num], 2 ; Moves the value 2 into the 'num' variable
    mov [sum], 0 ; Moves the value 0 into the 'sum' variable

    loop:
    cmp [num], 0 ; Compares the value in 'num' to 0
    je end     ; Jumps to 'end' label if they are equal
    add [sum], [num] ; Adds the value in 'num' to the value in 'sum'
    dec [num] ; Decrements the value in 'num'
    jmp loop ; Jumps back to 'loop' label to repeat the process

    end:
    push msg ; Pushes the 'msg' variable onto the stack
    push msgLen ; Pushes the 'msgLen' variable onto the stack
    call _print ; Calls the '_print' function to print the value stored in 'msg' variable
    add esp, 8 ; Cleans up the stack by adding 8 bytes back to the stack pointer

    mov eax, 1 ; Moves the value 1 into the 'eax' register
    xor ebx, ebx ; Clears the 'ebx' register
    int 0x80 ; Executes a system call to exit the program

_print:
    mov eax, 4 ; Moves the value 4 into the 'eax' register for the system call 'write'
    mov ebx, 1 ; Moves the value 1 into the 'ebx' register for the file descriptor of 'stdout'
    mov ecx, [esp+4] ; Moves the value of the 'esp' register plus 4 (pointer to the 'msgLen' variable) into the 'ecx' register as the message length
    mov edx, [esp+8] ; Moves the value of the 'esp' register plus 8 (pointer to the 'msg' variable) into the 'edx' register as the message address
    int 0x80 ; Executes the system call to output the message stored in 'msg' variable