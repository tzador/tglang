; This code snippet demonstrates how to perform a bubble sort on an array
; Input: Array of integer values in memory starting at address 0x5000
; Output: Sorted array in memory starting at address 0x5000

; Define constants
.array_start EQU 0x5000 ; Starting address of array
.array_length EQU 10 ; Length of array
.temp_var EQU 0x6000 ; Temporary variable to hold swapped values

; Main loop
MAIN: 
    MOV R0, #0 ; Initialize inner loop counter to 0
    MOV R1, #1 ; Initialize outer loop counter to 1
OUTER_LOOP:
    CMP R1, .array_length ; Check if outer loop counter has reached end of array
    BEQ DONE ; If yes, jump to DONE
INNER_LOOP:
    LDR R2, [.array_start, R0, LSL #2] ; Load current element into R2
    LDR R3, [.array_start, R0, LSL #2, #4] ; Load next element into R3
    CMP R2, R3 ; Compare current element with next element
    BLE NEXT ; If current element is less than or equal to next element, jump to NEXT
    STR R2, [.temp_var] ; Store current element in temporary variable
    STR R3, [.array_start, R0, LSL #2] ; Store next element in current element's address
    STR R2, [.array_start, R0, LSL #2, #4] ; Store temporary variable in next element's address
NEXT:
    ADD R0, R0, #1 ; Increment inner loop counter
    CMP R0, .array_length - 1 ; Check if inner loop counter has reached end of array
    BNE INNER_LOOP ; If not, jump to INNER_LOOP
    ADD R1, R1, #1 ; Increment outer loop counter
    B OUTER_LOOP ; Jump back to OUTER_LOOP
DONE:
    HALT ; Halt the program

; End of code snippet