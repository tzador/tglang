section .bss  ;Define section for uninitialized data
    buffer RESB 20  ;Reserve 20 bytes for buffer
    num1 RESB 4  ;Reserve 4 bytes for num1
    num2 RESB 4  ;Reserve 4 bytes for num2

section .text  ;Define section for executable instructions
    global _start  ;Declare _start as global label for entry point
    _start:  ;Start of program
        mov eax, 0  ;Set eax to 0
        jmp initialize  ;Jump to initialize label
        
    initialize:  ;Initialize buffer with values in num1 and num2
        mov ebx, num1  ;Move num1 to ebx
        mov ecx, buffer  ;Move buffer to ecx
        mov edx, 4  ;Set edx to 4 (number of bytes to move)
        mov esi, [ebx]  ;Move value at ebx (num1) to esi
        mov [ecx], esi  ;Move value in esi to buffer
        add ecx, 4  ;Increment ecx by 4 (to move to next 4 bytes)
        mov ebx, num2  ;Move num2 to ebx
        mov esi, [ebx]  ;Move value at ebx (num2) to esi
        mov [ecx], esi  ;Move value in esi to buffer
        
    exit:  ;Exit program
        mov eax, 1  ;Set eax to 1 (exit system call)
        xor ebx, ebx  ;Set ebx to 0 (error code)
        int 0x80  ;Call interrupt 0x80 (system call)