.section .data    ; start of data section
greeting: .asciz "Hello, world!"    ; defining a string variable 'greeting' with value "Hello, world!"
number: .long 42    ; defining a long variable 'number' with value 42

.section .text    ; start of code section
.global _start    ; declaring '_start' as a global label
_start:    ; start of '_start' code
    movl $4, %eax    ; move the value 4 into the 'eax' register (system call for 'write')
    movl $1, %ebx    ; move the value 1 into the 'ebx' register (file descriptor for 'stdout')
    movl $greeting, %ecx    ; move the address of 'greeting' variable into the 'ecx' register (pointer to string)
    movl $13, %edx    ; move the value 13 (length of string) into the 'edx' register
    int $0x80    ; call the system interrupt to perform the 'write' system call
    movl $4, %eax    ; move the value 4 into the 'eax' register (system call for 'write')
    movl $1, %ebx    ; move the value 1 into the 'ebx' register (file descriptor for 'stdout')
    movl $number, %ecx    ; move the address of 'number' variable into the 'ecx' register (pointer to number)
    movl $4, %edx    ; move the value 4 (length of number) into the 'edx' register
    int $0x80    ; call the system interrupt to perform the 'write' system call
    movl $1, %eax    ; move the value 1 into the 'eax' register (system call for 'exit')
    movl $0, %ebx    ; move the value 0 into the 'ebx' register (exit status)
    int $0x80    ; call the system interrupt to perform the 'exit' system call