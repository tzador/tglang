; This code snippet is written in assembly language.
; It declares several variables, performs arithmetic operations, and outputs the result.

; Declare variables
section .data
    variable1 db 10 ; declaring variable1 of data type byte with value 10
    variable2 dw 25 ; declaring variable2 of data type word with value 25
    variable3 dd 100 ; declaring variable3 of data type double word with value 100
    variable4 dq 1000 ; declaring variable4 of data type quad word with value 1000

; Perform arithmetic operations
section .text
    global _start ; defining the entry point of the program as _start

_start:
    ; Store the result of adding variable1 and variable2 in register eax
    mov eax, [variable1] ; move the value of variable1 into register eax
    add eax, [variable2] ; add the value of variable2 to register eax

    ; Store the result of multiplying variable3 and variable4 in register ebx
    mov ebx, [variable3] ; move the value of variable3 into register ebx
    imul ebx, [variable4] ; multiply the value of variable4 with register ebx

    ; Subtract the value in register ebx from register eax
    sub eax, ebx

; Output the result
    mov ecx, eax ; move the result in register eax into register ecx
    call print_int ; call the print_int function to output the value in register ecx
    jmp exit ; jump to the exit label to end the program

; Function to output an integer
print_int:
    push eax ; save the value in register eax onto the stack
    push ecx ; save the value in register ecx onto the stack
    push ebx ; save the value in register ebx onto the stack

    mov eax, 4 ; move the code of the print_string system call into register eax
    mov ebx, 1 ; move the file descriptor (stdout) into register ebx
    mov edx, 10 ; move the length of the string (10 characters) into register edx
    mov ecx, output ; move the memory address of the string output into register ecx
    int 0x80 ; call the kernel interrupt to execute the system call

    pop ebx ; get the value in register ebx from the stack
    pop ecx ; get the value in register ecx from the stack
    pop eax ; get the value in register eax from the stack
    ret ; return to the calling function

; Exit the program
exit:
    mov eax, 1 ; move the code of the exit system call into register eax
    xor ebx, ebx ; set the exit status to 0
    int 0x80 ; call the kernel interrupt to execute the system call

; Data section for string output
section .data
    output db 'The result is: %d', 10 ; declare the string to be outputted, with a placeholder for the integer result and a newline character

; Define the length of the string as a constant
section .bss
    output_len equ $-output ; define the length of the string as the current address minus the start address, using the label as a static symbol

; end of program