; This code snippet uses the Intel x86 assembly language

; To define a data section
.data

; Define a variable "num1" with an initial value of 10
num1 dd 10

; Define a string variable "message" with a maximum length of 20 characters
message db 20 dup('$')

; To define a code section
.code

; Start of program
start:

; Move the value of "num1" into the EAX register
mov eax, num1

; Subtract 5 from EAX
sub eax, 5

; Move the result back into the "num1" variable
mov num1, eax

; Display a message
mov eax, message ; Move the address of "message" into EAX
mov edx, offset message ; Move the length of "message" into EDX
mov ecx, 1 ; Move the file descriptor for standard output into ECX
mov ebx, 1 ; Move the standard output file handle into EBX
int 80h ; System call to write to standard output

; End of program
end:
mov eax, 1 ; Move the program exit code into EAX
int 80h ; System call to exit the program

; Define a constant
.const

; Pi constant with a value of 3.14
pi dd 3.14

; Define a string constant
hello db 'Hello, world!', 0 ; "0" indicates end of string

; Function to calculate the area of a circle
area_of_circle:
; Function parameters
push ebp ; Save the current value of the base pointer
mov ebp, esp ; Set the base pointer to the current stack pointer
push ebx ; Save the current value of EBX register

; Calculate the area using the formula pi * radius * radius
; Parameter "radius" is at [ebp + 8] (function parameters are pushed onto the stack in reverse order)
fldpi ; Load the value of pi onto the floating-point stack
fld dword ptr[ebp + 8] ; Load the value of "radius" onto the floating-point stack
fmulp st1, st0 ; Multiply pi by radius
fmulp st1, st0 ; Multiply the result by radius again
fstp dword ptr[ebp + 8] ; Store the result back into "radius"

; Clean up the stack and restore saved registers
pop ebx ; Restore the value of EBX register
pop ebp ; Restore the base pointer
ret ; Return from the function

; To call the function and pass in a radius of 5
mov eax, 5 ; Move the value of radius into EAX
push eax ; Push the parameter onto the stack
call area_of_circle ; Call the function
add esp, 4 ; Clean up the stack after the function call

; To access a specific bit in a data
.data
bytes db 0 ; Define a byte variable with initial value of 0
.code
; To set the 5th bit to 1
mov ebx, offset bytes ; Move the address of "bytes" variable into EBX
mov al, 1 ; Move the value 1 into AL register
shl al, 5 ; Shift the value in AL register to the 5th bit position
or byte ptr[ebx], al ; Bitwise OR operation to set the 5th bit to 1 in the "bytes" variable

; To check the value of the 5th bit
; (Assuming the 5th bit is set to 1 in "bytes" variable)
mov eax, byte ptr[ebx] ; Move the value of "bytes" into EAX
shr eax, 5 ; Shift the value in EAX to the first bit position
cmp al, 1 ; Compare the least significant bit to 1
je bit_is_set ; If equal, jump to "bit_is_set" label
; If not equal, the bit is not set
jmp bit_not_set ; Jump to "bit_not_set" label

; Labels for conditional jumps
bit_is_set:
; Do something if the bit is set
jmp end_check_bit

bit_not_set:
; Do something if the bit is not set

end_check_bit:
; End of program
end:
mov eax, 1 ; Move the program exit code into EAX
int 80h ; System call to exit the program