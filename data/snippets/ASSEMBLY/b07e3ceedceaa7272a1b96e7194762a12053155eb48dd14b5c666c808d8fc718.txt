; This code snippet shows how to perform a bubble sort on an array of numbers
; Input:
;   r1: pointer to the array
;   r2: length of the array
; Output:
;   r1: pointer to the sorted array

bubble_sort:
    push r1      ; saving current pointer to the array in the stack
    mov r3, 0    ; outer loop counter
    mov r4, 0    ; inner loop counter
    mov r5, 0    ; flag to keep track if any swaps were made
    loop_outer:
        cmp r3, r2    ; compare outer loop counter with length of array
        jge exit      ; exit outer loop if counter exceeds length

    loop_inner:
        cmp r4, r2    ; compare inner loop counter with length of array
        jge next      ; jump to next outer loop iteration if counter exceeds length
        add r7, r7, 2 ; move to next element in the array by incrementing the pointer by 2 bytes (assuming integers)
        mov r6, [r7]  ; store current element in r6
        add r8, r7, 2 ; move to next element in the array by incrementing the pointer by 2 bytes (assuming integers)
        mov r9, [r8]  ; store next element in r9
        cmp r6, r9    ; compare current element with next element
        jg swap       ; jump to swap if current element is greater than next element
        inc r4        ; increment inner loop counter
        jmp loop_inner ; jump back to loop_inner

    swap:
        mov [r7], r9  ; swap elements by storing next element in current element's position
        mov [r8], r6  ; and vice versa
        inc r4        ; increment inner loop counter
        mov r5, 1     ; set flag to 1 to indicate a swap was made

    next:
        mov r7, r1    ; reset pointer to the beginning of the array
        inc r3        ; increment outer loop counter
        cmp r5, 0     ; check if any swaps were made in the previous iteration
        jne loop_outer ; if so, jump back to loop_outer

    exit:
        pop r1      ; restore original pointer to the array
        ret