; This code snippet is an example of a bubble sort algorithm written in assembly language
; It takes an array of 16-bit integers and sorts them in ascending order

    .model small
    .stack 100h

    .data
array db 10h, 3h, 7h, 2h, 8h, 5h, 6h, 1h, 4h, 9h ; array of unsorted integers
n db 10 ; size of array
swapped db 0 ; variable to keep track of whether swaps were made
temp dw 0 ; temporary variable for swapping values

    .code
main proc

; outer loop to go through all elements in array
outerLoop:
    mov dl, n ; number of elements
    dec dl ; decrements loop count
    cmp dl, 0 ; checks if loop count is zero
    je exit ; jumps to exit if loop count is zero

; inner loop to compare adjacent elements and make swaps if necessary
innerLoop:
    mov al, 0 ; reset value of al to 0
    mov bl, 0 ; reset value of bl to 0

    ; compares element at i with element at i+1
    mov al, array[bl] ; loads value of element at i into al
    inc bl ; increments index of element at i+1
    cmp al, array[bl] ; compares value at i and i+1
    jg swap ; jumps to swap if value at i is greater than i+1

    dec dl ; decrements loop count
    cmp dl, 0 ; checks if loop count is zero
    je outerLoop ; jumps to outerLoop if loop count is zero
    jmp innerLoop ; jumps back to start of inner loop

swap:
    mov temp, ax ; stores value at i in temporary variable
    mov ax, array[bl] ; moves value at i+1 into ax
    mov array[bl], temp ; moves value at temp into array at i+1
    mov swapped, 1 ; marks that a swap has been made
    jmp innerLoop ; jumps back to start of inner loop

exit:
    mov al, swapped ; checks if any swaps were made
    cmp al, 0 ; checks if swapped variable is 0
    je end ; jumps to end if swapped variable is 0
    jmp outerLoop ; jumps back to start of outer loop

end:
    mov ax, 4c00h ; exit code for program
    int 21h ; ends program

main endp
end main