; Compute array sum

; Allocating memory for the array
SECTION .data
    array    dd    1, 2, 3, 4, 5

; Setting up registers
SECTION .text
    global _start

_start:
    ; Initializing sum variable and loop counter
    mov     eax, 0
    mov     ecx, 0

    ; Starting loop to compute sum
    array_loop:
        ; Checking if end of array has been reached
        cmp     ecx, 5
        je      end_loop

        ; Adding current element to sum variable
        add     eax, [array + ecx * 4]

        ; Incrementing loop counter
        inc     ecx

        ; Jumping back to start of loop
        jmp     array_loop

    end_loop:
        ; Printing sum variable
        mov     ebx, eax
        mov     eax, 4
        mov     ecx, msg
        mov     edx, msg_len
        int     0x80
        
        ; Exiting program
        mov     eax, 1
        xor     ebx, ebx
        int     0x80

; Initialized variables for printing
SECTION .data
    msg         db  "The sum is: %d", 10, 0
    msg_len     equ $-msg

; End of program