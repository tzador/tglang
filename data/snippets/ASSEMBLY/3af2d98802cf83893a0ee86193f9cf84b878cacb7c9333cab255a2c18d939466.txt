; This code snippet is a function that checks if a given string is a palindrome
;

check_palindrome PROC

; Save the base pointer
push    ebp
mov     ebp, esp

; Get the address of the input string and save it in eax
mov     eax, [ebp+8]

; Initialize pointers to the first and last character of the string
mov     ebx, eax ; ebx points to the first character
add     ecx, eax ; ecx points to the last character

; Get the length of the string by subtracting the pointers
sub     ecx, ebx
shr     ecx, 1 ; divide by 2 since we only need to check half of the string

; Loop to check if the characters at the two pointers are equal
; ex. compare first and last characters, then second and second to last, etc.
cmp_loop:
cmp     byte ptr [ebx], [ecx] ; compare current characters
jne     not_palindrome

; Increment the first pointer and decrement the second pointer
inc     ebx
dec     ecx

; If the first pointer crosses over the second, the string is a palindrome
cmp     ecx, 0
jle     palindrome

; Otherwise, continue looping
jmp     cmp_loop

; If the characters are not equal, jump to this label
not_palindrome:
mov     eax, 0 ; set return value to 0

; Cleanup
pop     ebp
ret

; If the characters are equal and the loop finishes, jump to this label
palindrome:
mov     eax, 1 ; set return value to 1

; Cleanup
pop     ebp
ret

check_palindrome ENDP