; Fibonacci number generator program
; Uses the recursive method to calculate the nth Fibonacci number

section .data ; Data section
    prompt1 db 10, "Enter the value of n: ", 0 ; Prompt for input
    prompt2 db 10, "The nth Fibonacci number is: ", 0 ; Prompt for output
    nl db 10, 0 ; New line character for printing

section .bss ; BSS section
    n resb 2 ; Reserve memory for storing the value of n
    result resb 2 ; Reserve memory for storing the result

section .text ; Text section
    global _start ; Entry point for the program

_start: ; Start of the program
    
    ; Get input from the user
    mov eax, 3 ; System call number for reading input
    mov ebx, 0 ; File descriptor (stdin)
    mov ecx, n ; Buffer where input will be stored
    mov edx, 2 ; Maximum number of bytes to read
    int 0x80 ; Call the kernel to read input
    
    ; Convert the input string to integer
    mov al, [n] ; Get the first digit of the input
    sub al, '0' ; Convert from ASCII to integer
    mov bl, 10 ; Initialize BL with 10 (used for multiplication)
    mul bl ; Multiply AL by 10
    mov bl, [n+1] ; Get the second digit of the input
    sub bl, '0' ; Convert from ASCII to integer
    add al, bl ; Add the second digit to AL
    mov [n], eax ; Store the result in n
    
    ; Calculate the nth Fibonacci number
    xor ecx, ecx ; Clear ECX register
    mov [result], word 1 ; Initialize result as 1
    inc ecx ; Increment ECX (current Fibonacci number)
    
    fib: ; Label for the recursive function
    
    cmp ecx, [n] ; Check if current Fibonacci number = n
    jge print ; If equal, go to print label
    
    ; Calculate the next Fibonacci number
    mov ax, [result] ; Get the current result
    mov bx, [result-2] ; Get the previous result
    add ax, bx ; Calculate new result
    mov [result], ax ; Store new result
    inc ecx ; Increment ECX (current Fibonacci number)
    
    jmp fib ; Go back to the fib label for next iteration
    
    print: ; Label for printing the result
    
    ; Print the result
    mov eax, 4 ; System call number for printing
    mov ebx, 1 ; File descriptor (stdout)
    mov ecx, prompt2 ; Print prompt for output
    mov edx, 28 ; Length of prompt2
    int 0x80 ; Call the kernel to print output
    
    mov ax, [result] ; Get the result
    add al, '0' ; Convert from integer to ASCII
    mov [result], ax ; Store the result
    
    mov eax, 4 ; System call number for printing
    mov ebx, 1 ; File descriptor (stdout)
    mov ecx, result ; Print the result
    mov edx, 2 ; Length of result
    int 0x80 ; Call the kernel to print output
    
    ; Exit the program
    mov eax, 1 ; System call number for exit
    xor ebx, ebx ; Return code 0
    int 0x80 ; Call the kernel to exit