; Initialize counters
MOV CX, 10 ; Set CX to 10
MOV BX, 0 ; Set BX to 0

; Loop through 10 times
LOOP_START:
; Multiply CX and BX registers
MUL BX ; CX * BX
; Store result in AX register
MOV AX, BX

; Increment BX
INC BX

; Decrement CX
DEC CX

; Check if CX is zero
CMP CX, 0
JNZ LOOP_START ; Jump to LOOP_START if CX is not zero

; Display result
LEA DX, MSG ; Load message 'The result is: ' into DX
MOV AH, 9 ; Set print function to 09h (display string)
INT 21 ; Call interrupt 21h (print)

; Convert result from binary to decimal
AND AX, 00FFh ; Keep only lower byte
ADDBLANK:
CMP AX, 10 ; Check if result is greater than 10
JGE NOCONVC ; Jump to NOCONVC if result is greater than or equal to 10
ADD AX, 30h ; Convert result to ASCII
JMP MAIN_LOOP ; Jump to MAIN_LOOP
NOCONVC:
ADD AX, 37h ; Convert result to ASCII
MAIN_LOOP:
MOV DX, AX ; Move result to DX
MOV AH, 02 ; Set print function to 02h (display character)
INT 21 ; Call interrupt 21h (print)

; Exit program
MOV AH, 4Ch ; Set exit function to 4Ch (terminate with return code)
INT 21 ; Call interrupt 21h (exit)

; Data section
MSG DB 'The result is: $' ; Define string variable