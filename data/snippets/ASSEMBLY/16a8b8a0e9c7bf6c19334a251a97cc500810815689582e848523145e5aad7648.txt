; Start of program
  .text         ; Assembly code section indicator
  .globl _start ; Defines _start as the program entry point
 
  _start:
    mov $1, %eax ; System call number (sys_exit)
    xor %ebx, %ebx ; Status code of 0
    int $0x80 ; Invoke Linux system call
 
  ; Creates a function called "recursive_factorial"
  recursive_factorial:
    ; Function prologue
    push %ebp ; Saves current base pointer
    mov %esp, %ebp ; Sets base pointer to current stack pointer
    push %edi ; Saves current destination index register
    push %esi ; Saves current source index register
 
    ; Function body
    cmp $0, %ebx              ; Checks if input is 0
    je factorial_result      ; If input is 0, exit function
    mov $1,%ecx              ; Sets counter to 1
    mov %ebx,%edi            ; Moves input into destination index register
    mov %ebx,%esi            ; Moves input into source index register
    dec %edi                ; Decrements destination index register by 1
 
  factorial_loop:
    mul %edi ; Retrieves the product of the accumulator (eax) and the destination index register (edi)
    dec %edi ; Decrements destination index register by 1
    loop factorial_loop ; Loops until counter (ecx) is 0
 
   factorial_result:
    ; Function epilogue
    movl %ebp, %esp ; Resets stack pointer to its previous location
    pop %esi ; Restores source index register
    pop %edi ; Restores destination index register
    
    mov %eax,%ebx ; Moves result into status code register
    xor %eax,%eax ; Clear accumulator for return value
    pop %ebp ; Restores base pointer
    ret ; Returns to caller function
 
  ; End of program
  .end _start ; End of program indicator