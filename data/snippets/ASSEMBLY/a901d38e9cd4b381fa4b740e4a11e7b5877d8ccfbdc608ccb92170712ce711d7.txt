; A complex code snippet in assembly language
; Initializing registers
mov ax, 0 ; move 0 to ax register
mov bx, 10 ; move 10 to bx register
mov cx, 20 ; move 20 to cx register
mov dx, 30 ; move 30 to dx register

; Looping through values in bx and cx
loop_start:
    cmp bx, cx ; compare values in bx and cx
    jg loop_end ; if bx is greater than cx, end loop
    add ax, bx ; add value in bx to ax
    inc bx ; increment bx by 1
    jmp loop_start ; jump to loop start
    
loop_end:
; Storing result in memory
mov [result], ax ; move value in ax to memory address 'result'
mov [result+2], dx ; move value in dx to next memory address
hlt ; halt program

result: ; memory address for storing result
dw 0 ; define word (2 bytes) with initial value of 0
dw 0 ; define second word with initial value of 0