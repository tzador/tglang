; This code snippet is a simple program that utilizes subroutines
; to perform multiplication and division operations

global _start    ; declare the global symbol _start for linker
        section .text  ; declare section .text for instructions

_start: ; starting point of the program
        ; call the subroutine for multiplication
        mov eax, 10       ; move number 10 into eax register
        mov ebx, 2       ; move number 2 into ebx register
        call multiply    ; call the subrutine for multiplication
        mov ebx, eax     ; store the result in ebx register
        ; call the subroutine for division
        mov eax, 20        ; move number 20 into eax register
        mov ebx, 4       ; move number 4 into ebx register
        call divide      ; call the subroutine for division
        mov ebx, eax      ; store the result in ebx register
        ; call the print function to display the results
        mov eax, 4        ; move system call for print to eax register
        mov ebx, 1        ; move stdout file descriptor to ebx register
        mov ecx, result   ; move the address of result variable to ecx register
        mov edx, 4        ; move the length of result string to edx register
        int 80h           ; issue system call to print the result
        mov eax, 1        ; move system call for exit to eax register
        xor ebx, ebx      ; set status code to 0
        int 80h           ; issue system call to exit the program

multiply: ; subroutine for multiplication
        push ebp         ; save base pointer on the stack
        mov ebp, esp     ; make ebp point to the top of the stack
        mul ebx          ; multiply eax and ebx (result stored in edx:eax)
        mov esp, ebp     ; restore stack pointer to base pointer value
        pop ebp          ; restore base pointer from stack
        ret              ; return to _start

divide: ; subroutine for division
        push ebp         ; save base pointer on the stack
        mov ebp, esp     ; make ebp point to the top of the stack
        div ebx          ; divide eax by ebx (remainder stored in edx, quotient stored in eax)
        mov esp, ebp     ; restore stack pointer to base pointer value
        pop ebp          ; restore base pointer from stack
        ret              ; return to _start

section .data  ; declare section .data for data variables
        result db "The result is: ", 0x0a ; declare string variable for result