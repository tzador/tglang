;This code snippet creates a function that calculates the factorial of a number 
;Input: value to calculate factorial of
;Output: factorial value

;Initializing the function
    .text
    .globl factorial
factorial:

    ;Saving previous stack frame pointer
    push %ebp
    
    ;Moving current stack pointer to base pointer
    movl %esp, %ebp

    ;Setting up local variables
    subl $8, %esp

    ;Storing input value in local variable
    movl 8(%ebp), %eax
    movl %eax, -4(%ebp)

    ;Initial check for input value of 0
    cmpl $0, -4(%ebp)
    jne .L2

    ;Setting return value of 1 if input value is 0
    movl $1, %eax
    
    ;Cleaning up stack and returning to previous frame
    addl $8, %esp
    pop %ebp

    ;Returning result
    ret

;Calculating factorial
.L2:
    ;Setting up loop counter
    movl -4(%ebp), %eax
    dec %eax

    ;Storing current loop counter value in local variable
    movl %eax, -8(%ebp)

    ;Setting up loop condition
    cmpl $1, -8(%ebp)
    jle .L4

    ;Multiplying current value with previous factorial value
    movl -4(%ebp), %eax
    imull -8(%ebp), %eax

    ;Recursive call to calculate factorial for smaller value
    push %eax
    call factorial
    addl $4, %esp

    ;Storing result in local variable
    movl %eax, -4(%ebp)

    ;Updating loop counter
    dec %eax
    cmpl $0, %eax
    jne .L2

    ;Returning final result
    movl -4(%ebp), %eax

    ;Cleaning up stack and returning to previous frame
    addl $8, %esp
    pop %ebp
    ret