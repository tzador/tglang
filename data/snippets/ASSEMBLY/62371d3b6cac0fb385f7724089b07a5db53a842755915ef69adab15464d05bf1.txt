;Program to swap two numbers using bitwise operators

    .data       ;.data directive to declare data

    num1    dw  10  ;first number
    num2    dw  20  ;second number

    .code       ;.code directive to declare code segment

    main proc   ;beginning of program

    ;swapping using exclusive OR (XOR) bitwise operator

    mov ax, @data   ;move data segment address to ax register
    mov ds, ax      ;move data segment address to ds register

    lea si, num1    ;load address of num1 to si register
    mov ax, [si]    ;move value of num1 to ax register
    lea si, num2    ;load address of num2 to si register
    mov bx, [si]    ;move value of num2 to bx register

    mov dx, ax      ;move value of num1 to dx register
    xor dx, bx      ;move value of num1 bitwise XOR with num2 to dx register
    mov bx, ax      ;swapping complete
    xor bx, dx      ;num1 = num2
    mov ax, dx      ;num2 = num1
    xor ax, bx      ;num1 = num1 bitwise XOR with num2
    mov dx, ax      ;moving value back to dx register

    ;displaying output

    lea si, num1    ;load address of num1 to si register
    mov ax, [si]    ;move value of num1 to ax register
    call display_num ;call display_num subroutine to display value in ax register
    lea si, num2    ;load address of num2 to si register
    mov ax, [si]    ;move value of num2 to ax register
    call display_num ;call display_num subroutine to display value in ax register

    mov ah, 4ch     ;exit interrupt code
    int 21h         ;terminate program

    main endp   ;end of program

    display_num proc near   ;subroutine to display number
        push bp         ;save base pointer
        mov bp, sp      ;move stack pointer to base pointer
        mov ax, [bp+04h]    ;move value passed to subroutine to ax register
        mov cx, 0       ;initialize counter
        mov bx, 10      ;divide number by 10 to get rightmost digit
        div bx          ;divide ax register by bx register
        add ah, 30h     ;convert remainder to ASCII
        push ax         ;push ASCII code of rightmost digit to stack
        inc cx          ;increment counter
        cmp ax, 0       ;check if value in ax register is 0
        jz display_dig  ;if it is 0, jump to display_dig subroutine
    loop:               ;loop to continue dividing number until value in ax register is 0
        mov ax, [bp+04h]    ;move value passed to subroutine to ax register
        mov bx, 10      ;divide number by 10 to get rightmost digit
        div bx          ;divide ax register by bx register
        add ah, 30h     ;convert remainder to ASCII
        push ax         ;push ASCII code of rightmost digit to stack
        inc cx          ;increment counter
        cmp ax, 0       ;check if value in ax register is 0
        jnz loop        ;if it is not 0, jump back to loop
    display_dig:                ;subroutine to display digits
        mov ah, 02h             ;get character interrupt code
        pop ax                  ;pop ASCII code of rightmost digit from stack
        add al, 30h             ;convert ASCII code to character
        int 21h                 ;display character
        loop display_dig        ;loop until all digits are displayed
        pop bp                  ;restore base pointer
        ret                     ;return from subroutine
    display_num endp        ;end of display_num subroutine

end main    ;end of program