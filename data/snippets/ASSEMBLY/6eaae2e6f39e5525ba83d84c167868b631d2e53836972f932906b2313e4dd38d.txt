section .data ; Specifies the data section
    message db 'Hello world!',0xA ; Initializes a byte variable named 'message' with the string 'Hello world!' and a new line character
    messageLength equ $-message ; Calculates the length of the message by subtracting the current location (denoted by $) from the starting location (denoted by 'message')

section .text ; Specifies the text section
; Prints the message stored in the 'message' variable
    global _start ; Marks the start of the program
_start:
    mov eax, 4 ; Move the value 4 into the 'eax' register, indicating a 'write' system call
    mov ebx, 1 ; Move the value 1 into the 'ebx' register, indicating the file descriptor for standard output
    mov ecx, message ; Move the value stored in the 'message' variable into the 'ecx' register, which holds the address of the data to be printed
    mov edx, messageLength ; Move the value stored in the 'messageLength' variable into the 'edx' register, which holds the length of the data to be printed
    int 0x80 ; Interrupt the CPU, triggering the 'write' system call

; Exits the program
    mov eax, 1 ; Move the value 1 into the 'eax' register, indicating an 'exit' system call
    xor ebx, ebx ; Move the value 0 into the 'ebx' register to indicate a successful exit status
    int 0x80 ; Interrupt the CPU, triggering the 'exit' system call