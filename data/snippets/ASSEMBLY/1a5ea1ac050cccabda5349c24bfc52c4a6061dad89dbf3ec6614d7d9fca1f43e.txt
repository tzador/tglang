/* This code snippet is written in assembly language and calculates the factorial of a number */

section .text
	global _start	; Global function _start

	; Function to calculate factorial
	factorial:
		mov eax, [esp+4]	; Put argument in EAX
		mov ecx, eax		; Copy argument to ECX
		dec ecx				; Decrement ECX to use as loop counter
		xor edx, edx		; Clear EDX
		jmp factorial_loop	; Jump to loop

	factorial_loop:
		inc edx				; Increment EDX (equivalent to EDX++)
		mul ecx				; Multiply EAX and EDX (EAX * EDX) and store result in EAX
		cmp ecx, 1			; Compare ECX to 1
		jne factorial_loop	; Jump to loop if ECX is not equal to 1

		ret					; Return from function

	; Function to initialize and print result
	_start:
		mov ebx, 5			; Initialize argument to 5
		call factorial		; Call function factorial
		push eax			; Push result (in EAX) to stack
		call print_result	; Call function to print result
		add esp, 4 			; Adjust stack pointer

		; Unix system call to print result
		mov eax, 1			; System call number for write
		mov ebx, 1			; File descriptor (1 for stdout)
		mov ecx, result 	; Address of result variable
		mov edx, 4			; Length of string to be printed (in bytes)
		int 0x80			; Interrupt to make system call

		; End program
		mov eax, 0			; System call number for exit
		xor ebx, ebx		; Return status code 0
		int 0x80			; Interrupt to make system call

	; Function to print result
	print_result:
		mov eax, 4			; System call number for write
		mov ebx, 1			; File descriptor (1 for stdout)
		mov ecx, esp		; Address of result (on top of stack)
		mov edx, 4			; Length of result (in bytes)
		int 0x80			; Interrupt to make system call
		ret					; Return from function

	section .bss
		result resb 4		; Buffer for result, to be printed as string

	; Output:
	; 120