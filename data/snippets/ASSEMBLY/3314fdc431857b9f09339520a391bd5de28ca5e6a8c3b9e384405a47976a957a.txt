; Function to check if number is prime
; Input: r0 = number to check
; Output: r0 = 1 if prime, 0 if not
prime_check:
    mov r1, #2      ; Counter to check all possible factors
    mov r2, #0      ; Register to store the remainder
    mov r3, #0      ; Register to store the quotient
    cmp r0, #2      ; Check if number is 2
    beq prime       ; If true, number is prime
    cmp r0, #1      ; Check if number is 1
    beq not_prime   ; If true, number is not prime
    loop:
        cmp r0, r1      ; Compare number with counter
        beq prime       ; If equal, number is prime
        blt not_prime   ; If number is less than counter, it's not prime
        mov r3, r0      ; Move number to quotient register
        sdiv r3, r1     ; Divide number by counter
        mul r1, r3      ; Multiply counter by quotient
        sub r2, r0, r1  ; Calculate remainder (r2 = r0 - r1)
        cmp r2, #0      ; Check if remainder is 0
        beq not_prime   ; If equal, number is not prime
        add r1, #1      ; Increment counter by 1
        b loop          ; Continue loop
    prime:
        mov r0, #1      ; Move 1 to r0 (number is prime)
        bx lr           ; Return from function
    not_prime:
        mov r0, #0      ; Move 0 to r0 (number is not prime)
        bx lr           ; Return from function