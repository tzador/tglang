; This code snippet demonstrates binary search in assembly language
; It takes an array of sorted numbers and a target number as input
; The output is the index at which the target number is found, or -1 if not found
  .data ; section declaration for data
    array DB 1, 4, 7, 9, 10, 13, 16, 18, 20 ; array of sorted numbers to search from
    target DB 9 ; target number to search for
    low DB 0 ; lower bound for binary search
    high DB 8 ; upper bound for binary search
    found DB 0 ; flag to store whether target number has been found or not
    index DB ? ; variable to store the index at which target number is found, initialized to be empty
    mid DB ? ; variable to store the index of the middle element in the array
  .code ; section declaration for code
    main: ; main function

        ; initialize variables to start the binary search
        mov si, offset array ; load address of array into si register
        mov al, target ; load target number into al register
        mov cl, low ; load lower bound into cl register
        mov ch, high ; load upper bound into ch register
        
    loop:
        cmp cl, ch ; compare lower and upper bounds
        jg not_found ; if lower bound is greater than upper bound, target number is not present
        jz found ; if lower and upper bounds are equal, target number is found
        
        ; find the middle index of the array
        mov dl, ch ; copy upper bound into dl register
        sub dl, cl ; calculate the distance between lower and upper bounds
        div dl ; divide distance by 2 to get the middle index
        add al, dl ; add middle index to target number to get the middle element in the array
        
        cmp al, [si+dl] ; compare target number to middle element in the array
        jz found ; if target number is equal to middle element, it has been found
        jl move_up ; if target number is less than middle element, move upper bound to middle index - 1
        inc cl ; if target number is greater than middle element, move lower bound to middle index + 1
        jmp loop ; jump back to loop to check again
        
    move_up:
        mov ch, dl ; move middle index - 1 into upper bound
        jmp loop ; jump back to loop to check again
        
    found:
        mov index, dl ; store middle index in index variable
        inc index ; increment index by 1 to match array indexes
        mov found, 1 ; set flag to indicate target number has been found
        
    not_found:
        cmp found, 0 ; check if target number was found
        jz not_found_exit ; if not found, jump to exit
        mov ah, 09h ; if found, prepare to print output
        mov dx, msg_found ; load message to print
        int 21h ; print message
        mov ah, 01h ; prepare to print index
        add index, '0' ; convert index to printable character
        mov dl, index ; load index into dl register
        int 21h ; print index
        jmp exit
        
    not_found_exit:
        mov ah, 09h ; prepare to print output
        mov dx, msg_not_found ; load message to print
        int 21h ; print message
        
    exit:
        mov ah, 4ch ; exit program
        int 21h
        
    msg_found db 'The target number is found at index ', 0 ; message to print if target number is found
    msg_not_found db 'The target number is not found', 0 ; message to print if target number is not found
        
    end main ; end of main function
END ; end of assembly program