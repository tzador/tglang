# Set up initial values
  mov cx, 10     ; initialize cx to 10
  xor eax, eax   ; clear eax
  mov ebx, 15    ; initialize ebx to 15

# Start loop
_loop:
  mov edx, 0     ; clear edx
  div ebx        ; divide eax by ebx, result in eax, remainder in edx
  push dx        ; push remainder onto stack
  loop _loop     ; decrement cx and loop until cx = 0

# Print result
  mov si, msg    ; load address of string into si
  call print     ; call print function
  jmp finish     ; jump to finish

# Print function
print:
  mov ah, 0Eh    ; set up for printing
  mov dl, [si]   ; load character from address in si
  inc si         ; increment si to point to next character
  cmp dl, 0      ; check for null terminator
  je print_end   ; if equal, end print
  int 10h        ; otherwise, print character (interrupt 10h)
  jmp print      ; loop back to print next character
print_end:
  ret            ; return from function

# Finish loop
finish:
  pop dx         ; pop remainder from stack into dx
  xor bh, bh     ; clear bh
  mov cl, dh     ; move first digit of remainder into cl
  mov dl, bl     ; move second digit of remainder into dl
  add cl, '0'    ; convert to ASCII code
  add dl, '0'    ; convert to ASCII code
  mov [result], cl ; store first digit in result variable
  mov [result+1], dl ; store second digit in result variable