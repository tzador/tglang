; this is a comment
; initialize variables
section .data
    string1 dd "Hello ", 0x0a, 0x0d ; string variable with line feed and carriage return
    string2 db "World!", 0x0a, 0x0d ; string variable with line feed and carriage return
    number1 dd 5 ; integer variable with value of 5
    number2 dd 10 ; integer variable with value of 10

; main program
section .text
global _start ; declare global label
_start: ; label for start of program

    ; print string1 variable
    mov edx, 10 ; length of string1
    mov ecx, string1 ; address of string1
    mov ebx, 1 ; file descriptor for stdout
    mov eax, 4 ; system call number for 'write'
    int 0x80 ; execute system call

    ; print string2 variable
    mov edx, 7 ; length of string2
    mov ecx, string2 ; address of string2
    mov ebx, 1 ; file descriptor for stdout
    mov eax, 4 ; system call number for 'write'
    int 0x80 ; execute system call

    ; perform addition
    mov eax, [number1] ; move value of number1 into eax
    add eax, [number2] ; add value of number2 to eax
    mov [number1], eax ; store result back into number1 variable

    ; print result
    mov eax, [number1] ; move value of number1 into eax
    call print_int ; call subroutine to print integer

    ; exit program
    mov eax, 1 ; system call number for 'exit'
    xor ebx, ebx ; clear ebx register
    int 0x80 ; execute system call

; subroutine to print integer
; parameters: eax (integer variable to print)
print_int:
    mov ecx, msg ; string variable for output format
    mov ebx, 1 ; file descriptor for stdout
    mov eax, 4 ; system call number for 'write'
    int 0x80 ; execute system call

    ; convert integer to string
    mov eax, [ebp+8] ; move value of ebp+8 into eax register
    add eax, 48 ; convert value to ASCII code
    mov byte [buf], al ; store first digit in buffer
    mov byte [buf+1], 0 ; terminate string with null character

    ; print string (first digit)
    mov ecx, buf ; address of buffer
    mov ebx, 1 ; file descriptor for stdout
    mov eax, 4 ; system call number for 'write'
    int 0x80 ; execute system call

    ret ; return from subroutine

; variables for subroutine
section .data
    msg db "%d", 0x0a, 0x0d ; string variable for output format
    buf times 2 db 0 ; buffer for storing converted string