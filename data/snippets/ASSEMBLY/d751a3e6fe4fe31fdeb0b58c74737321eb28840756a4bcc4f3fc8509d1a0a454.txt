.section .text                     ; Declare section for executable code
.global main                       ; Declare main as global label for entry point
main:                              ; Main function label
        mov $1, %rax               ; Move system call number 1 (exit) into RAX register
        mov $0, %rdi               ; Move exit status 0 into RDI register
        syscall                    ; Call kernel to execute system call
.section .data                     ; Declare section for initialized data
msg:   .ascii "Hello, world!\n"     ; Declare label for string message
        .align 4                    ; Align string on 4-byte memory boundary
msg_len:                            ; Declare label for string length
        .int 14                     ; Define integer 14 as string length
.section .bss                      ; Declare section for uninitialized data
buffer:                             ; Declare label for buffer
        .lcomm buffer, 1024        ; Define buffer with 1024 bytes of memory
.section .text                     ; Declare section for executable code
        mov $1, %rax               ; Move system call number 1 (exit) into RAX register
        mov $1, %rdi               ; Move file descriptor 1 (stdout) into RDI register
        lea buffer(%rip), %rsi     ; Move address of buffer into RSI register
        mov $1024, %rdx            ; Move buffer size into RDX register
        syscall                    ; Call kernel to execute system call
        mov $60, %rax              ; Move system call number 60 (exit) into RAX register
        xor %rdi, %rdi             ; XOR RDI register with itself (set to 0)
        syscall                    ; Call kernel to execute system call