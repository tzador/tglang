; This code snippet implements a simple bubble sort algorithm in Assembly

; Initialize array of numbers to be sorted
numbers: dw 7, 4, 12, 3, 6, 9, 2, 8, 1, 5, 10, 11

; Define variables for looping
i: dw 0
j: dw 0

; Define variables for storing array values during sorting
temp: dw 0
temp1: dw 0

; Set up outer loop to iterate through array
outer_loop:
mov cx, 12            ; Set counter to length of array
mov i, 0              ; Initialize i to 0

; Set up inner loop to compare array values and swap if needed
inner_loop:
mov j, 0              ; Initialize j to 0

; Compare two adjacent values and swap if necessary
compare:
mov ax, numbers      ; Load first value into accumulator
add ax, j            ; Add j to ax to access correct array value
mov temp, ax         ; Store first value in temp variable

mov ax, numbers
add ax, j+1          ; Add 1 to j to access next value in array
mov temp1, ax        ; Store second value in temp1 variable

; Compare values and swap if necessary
cmp temp, temp1
jle no_swap           ; Jump to no_swap label if first value is less than or equal to second value

; Swap values
mov ax, numbers
add ax, j             ; Load first value into accumulator
xchg ax, temp         ; Exchange values

mov ax, numbers
add ax, j+1           ; Load second value into accumulator
mov temp, ax          ; Move second value to temp variable

; Update values in array
mov ax, numbers
add ax, j+1           ; Load first value into accumulator
mov [ax], temp        ; Store temp value in first position

mov ax, numbers
add ax, j             ; Load second value into accumulator
mov [ax], temp1       ; Store temp1 value in second position

no_swap:               ; Label for no_swap jump

inc j                  ; Increment inner loop counter
loop inner_loop       ; Loop until counter reaches 12

inc i                  ; Increment outer loop counter
loop outer_loop       ; Loop until counter reaches 12

; Output sorted array
mov cx, 12            ; Set counter to length of array
mov i, 0              ; Initialize i to 0

output_loop:
mov ax, numbers      ; Load first value into accumulator
add ax, i            ; Add i to ax to access correct array value
mov bx, [ax]         ; Move value to bx register for printing
mov ah, 02h          ; Set ah to 02h for printing character

; Convert value to ASCII character and print
add bx, 30h          ; Add 30h to convert number to ASCII character
int 21h              ; Interrupt for printing

inc i                ; Increment output loop counter
loop output_loop    ; Loop until counter reaches 12

; End of program
mov ah, 4ch          ; Set ah to 4ch for ending program
int 21h              ; Interrupt to exit program