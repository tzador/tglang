section .data ; This section is used for declaring statically allocated data
    msg db 'Hello, world!',0xA ; Declares a string variable named msg with the value 'Hello, world!'
    num dw 1234 ; Declares a word variable named num with the value 1234
    arr db 1, 2, 3, 4, 5 ; Declares an array named arr with the values 1, 2, 3, 4, 5
    char1 db 'a' ; Declares a character variable named char1 with the value 'a'
section .text ; This section is used for writing executable instructions
    global _start ; This directive makes the label _start available to the linker
_start: ; The entry point of the program
    ; Print 'Hello, world!'
    mov rax, 1 ; Sets the system call number to 1 (for write)
    mov rdi, 1 ; Sets the first argument (file descriptor) to 1 (for stdout)
    mov rsi, msg ; Sets the second argument (string to be printed) to the address of msg variable
    mov rdx, 14 ; Sets the third argument (length of string to be printed) to 14 (since 'Hello, world!' has 13 characters and an additional 0xA character)
    syscall ; Calls the system call, which will print 'Hello, world!'
    
    ; Calculate the sum of numbers 1 to 100
    xor rbx, rbx ; Clears the register rbx
    mov rax, 0 ; Sets the first operand of add instruction to 0
    inc rbx ; Increments rbx by 1 (rbx is now 1)
.add_loop: ; A label for the loop
    add rax, rbx ; Adds rbx to rax (1 is added in the first iteration, 2 in the second iteration, and so on)
    inc rbx ; Increments rbx by 1 (rbx is now 2, 3, 4, and so on)
    cmp rbx, 100 ; Compares rbx to 100 (to check if 100 iterations have been completed)
    jle .add_loop ; Jumps back to the .add_loop label if rbx is less than or equal to 100
    ; At this point, rax will contain the sum of numbers 1 to 100
    
    ; Print the sum
    mov rax, 1 ; Sets the system call number to 1 (for write)
    mov rdi, 1 ; Sets the first argument (file descriptor) to 1 (for stdout)
    mov rsi, rax ; Sets the second argument (string to be printed) to the value of rax (which is the sum)
    mov rdx, 8 ; Sets the third argument (length of string to be printed) to 8 (since the sum of numbers 1 to 100 is a 64-bit number)
    syscall ; Calls the system call, which will print the sum
    mov rax, 60 ; Sets the system call number to 60 (for exit)
    xor rdi, rdi ; Clears the register rdi
    syscall ; Calls the system call, which will exit the program