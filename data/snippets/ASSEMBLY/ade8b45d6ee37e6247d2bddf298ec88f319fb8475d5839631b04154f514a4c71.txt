# Load values into registers
mov cx, 10    ; Move 10 into CX register
mov edx, 0    ; Move 0 into EDX register

# Loop through counting up to 10
start_loop:
inc edx       ; Increment EDX register
cmp edx, 10   ; Compare EDX to 10
jg end_loop   ; Jump to end_loop if EDX > 10
jmp start_loop; Jump to start_loop to continue looping

# Print out values in EDX register
end_loop:
push edx      ; Push EDX onto stack
mov eax, 4    ; Move 4 into EAX register (system call for 'write')
mov ebx, 1    ; Move 1 into EBX register (file descriptor for stdout)
mov ecx, edx  ; Move value in EDX to ECX register
mov edx, 1    ; Move 1 into EDX register (number of bytes to write)
int 0x80      ; System call to write value in ECX register to stdout
pop edx       ; Pop EDX from stack

# Exit program
mov eax, 1    ; Move 1 into EAX register (system call for 'exit')
xor ebx, ebx  ; XOR EBX with itself to set it to 0
int 0x80      ; System call to exit program