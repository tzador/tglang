.global main // denotes the start of the main function

main:
        push {lr} // save return address
        mov r0, #5 // move the value 5 into register r0
        ldr r1, =7 // load the value 7 from memory into register r1
        add r0, r0, r1 // add the values in r0 and r1, result stored in r0
        lsl r0, r0, #1 // left shift r0 by 1 bit, result stored in r0
        stmdb sp!, {r0-r2} // decrement stack pointer and store registers r0-r2 onto the stack
        b another_function // branch to another_function
        ldmia sp!, {r3-r5} // load registers r3-r5 from the stack and increment stack pointer
        mov r1, #2 // move the value 2 into register r1
        cmp r0, r1 // compare values in r0 and r1
        beq equal // if equal, branch to equal
        b exit // otherwise, branch to exit

another_function:
        mov r1, #3 // move the value 3 into register r1
        ldr r2, =4 // load the value 4 from memory into register r2
        mul r0, r1, r2 // multiply values in r1 and r2, result stored in r0
        bx lr // branch and exchange instruction to return to the caller

equal:
        ldr r0, =123 // load the value 123 from memory into register r0
        bl printf // branch and link to the printf function to print the value in r0

exit:
        pop {pc} // restore return address and return from main function