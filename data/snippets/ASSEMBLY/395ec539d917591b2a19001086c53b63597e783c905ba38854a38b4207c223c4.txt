.section .text
.global main  # Global symbol for program entry

main:
    pushl %ebp  # Save base pointer
    movl %esp, %ebp
    pushl %edi  # Save callee-saved registers
    pushl %esi
    pushl %ebx
    
    subl $128, %esp  # Allocate space on the stack for variables
    
    # Loop to perform some computation
    movl $0, %eax  # Initial value for counter
    LoopStart:
        cmpl $10, %eax  # Compare counter to 10
        je LoopEnd      # Jump to end of loop if equal
        
        # Increment counter
        incl %eax
        
        # Multiply counter by 2
        movl %eax, %ebx  # Move counter to %ebx
        movl $2, %esi    # Move constant 2 to %esi
        mull %esi        # %eax = %eax * %esi
        
        # Print result
        movl %eax, %edi  # Move result to %edi
        movl $4, %eax    # Move system call number for 'write' to %eax
        movl $1, %ebx    # Move file descriptor for stdout to %ebx
        movl %edi, %ecx  # Move result to %ecx
        movl $4, %edx    # Move number of bytes to write to %edx
        int $0x80        # Call system interrupt to execute the system call
        
        # Jump back to start of loop
        jmp LoopStart
    
    LoopEnd:
    
    # Clean up the stack
    addl $128, %esp
    
    popl %ebx  # Restore callee-saved registers
    popl %esi
    popl %edi
    
    movl %ebp, %esp  # Restore stack pointer
    popl %ebp        # Restore base pointer
    
    ret  # Return from main and end program