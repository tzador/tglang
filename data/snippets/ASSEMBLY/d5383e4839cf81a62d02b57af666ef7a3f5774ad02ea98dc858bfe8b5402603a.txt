; Sample code snippet in Assembly

section .text             ; Start of the 'text' section

global _start             ; Global declaration for '_start' function

_start:                   ; Start of the '_start' function

    mov eax, 1            ; Move value 1 to register 'eax'
    mov ebx, 5            ; Move value 5 to register 'ebx'
    add eax, ebx          ; Add values in registers 'eax' and 'ebx' and store result in 'eax'

    cmp eax, 10           ; Compare value in register 'eax' with 10
    jg greater_than      ; If 'eax' > 10, jump to 'greater_than' label
    jl less_than         ; If 'eax' < 10, jump to 'less_than' label
    je equal_to          ; If 'eax' == 10, jump to 'equal_to' label

greater_than:           ; Label for when 'eax' > 10

    mov eax, 10         ; Move value 10 to register 'eax'
    jmp exit            ; Jump to 'exit' label

less_than:              ; Label for when 'eax' < 10

    mov eax, 0          ; Move value 0 to register 'eax'
    jmp exit            ; Jump to 'exit' label 

equal_to:               ; Label for when 'eax' == 10

    mov eax, 5          ; Move value 5 to register 'eax'
    jmp exit            ; Jump to 'exit' label

exit:                   ; Label for end of program

    mov ebx, 0          ; Move value 0 to register 'ebx', representing a successful program termination
    mov eax, 1          ; Move value 1 to register 'eax', representing the 'exit' system call
    int 0x80            ; System call to exit program with status code 0