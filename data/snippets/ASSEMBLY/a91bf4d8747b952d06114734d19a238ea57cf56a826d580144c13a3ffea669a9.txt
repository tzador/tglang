.code
main PROC
	lea si, var1 ; load effective address of var1 into register si
	mov ax, var1 ; move contents of var1 into register ax
	mov bx, var2 ; move contents of var2 into register bx
	add ax, bx ; add contents of bx to ax
	cmp ax, 100 ; compare ax to value 100
	jg greater ; if ax is greater than 100, jump to label 'greater'
	jmp lesser ; if ax is not greater than 100, jump to label 'lesser'

greater:
	mov ax, 100 ; set ax to value 100
	xchg bx, ax ; exchange values of bx and ax
	add bx, 10 ; add 10 to bx
	jmp exit ; jump to exit label

lesser:
	mov ax, 50 ; set ax to value 50
	mov cx, 1 ; move value 1 into register cx
loop:
	add ax, cx ; add value 1 to ax
	inc cx ; increment value of cx by 1
	cmp cx, 5 ; compare value of cx to 5
	jl loop ; if cx is less than 5, jump back to loop label
	jmp exit ; if cx is not less than 5, jump to exit label

exit:
	mov var1, ax ; move final value of ax into var1
	mov var2, bx ; move final value of bx into var2
	mov di, var1 ; move contents of var1 into di
	add di, 10 ; add 10 to di
	push di ; push di onto the stack
	pop bx ; pop value from stack into register bx
	call output ; call output subroutine
	exit ; exit program

output:
	mov dl, '(' ; move ASCII character '(' into dl
	call display ; call display subroutine
	mov dl, 'A' ; move ASCII character 'A' into dl
	call display ; call display subroutine
	xor dl, dl ; set dl to 0
	mov dh, 10 ; move value 10 into dh
	call display ; call display subroutine
	mov dl, ')' ; move ASCII character ')' into dl
	call display ; call display subroutine
	mov dl, 'S' ; move ASCII character 'S' into dl
	call display ; call display subroutine
	mov dl, 'M' ; move ASCII character 'M' into dl
	call display ; call display subroutine
	ret ; return from subroutine

display:
	mov ah, 2 ; set function to display character
	int 21h ; call BIOS interrupt to display character
	ret ; return from subroutine

.data
var1 dw 0 ; variable 1, initialized to 0
var2 dw 0 ; variable 2, initialized to 0

end main ; end main program
end ; end assembly program