# Program to sort an array of numbers using bubble sort algorithm
# Input: array of numbers (stored in memory starting at label "numbers"), length of array (stored in register $s1)
# Output: sorted array (stored in memory starting at label "sorted")

# Following is a function to swap two numbers in an array using assembly

# Function: swap
# Input: address of first number (stored in register $s2), address of second number (stored in register $s3)
# Output: sorted array (stored in memory starting at label "sorted")

# Store contents of first number from memory to register $t0
lw $t0, 0($s2)
# Store contents of second number from memory to register $t1
lw $t1, 0($s3)
# Swap the numbers in the registers
add $t2, $t0, $zero 
sub $t0, $t1, $zero
sub $t1, $t2, $zero
# Store the swapped numbers back in memory
sw $t0, 0($s2)
sw $t1, 0($s3)
# End of function

# Main program starts here

# Loop through the array
OuterLoop:
# Set loop counter to (length - 1)
addi $s4, $zero, -1
# Loop condition
Top:
# Increment loop counter
addi $s4, $s4, 1
# Multiply loop counter by 4 to get address of current element in array
sll $s4, $s4, 2
# Load current element from memory to register $s5
lw $s5, numbers($s4)
# Compare current element with next element
beq $s4, $s1, End # If at end of array, go to End
addi $s6, $s4, 4
sll $s6, $s6, 2
lw $s6, numbers($s6)
bgt $s5, $s6, Swap # If current element > next element, swap and go to Swap
# If not, continue to next iteration of loop
j Top
# End of loop

# Swap function call
Swap:
# Pass addresses of current and next elements in array to swap function
addi $a0, $s4, 4 # Pass address of current element
addi $a1, $s4, 0 # Pass address of next element
jal swap # Call swap function
j OuterLoop
# End of loop

# End of program, return sorted array
End:
# Store sorted array in memory starting at label "sorted"
addi $s7, $s1, 4
sll $s7, $s7, 2 # Multiply length by 4 to get address
addi $s8, $s0, -1
sll $s8, $s8, 2 # Multiply length-1 by 4 to get address
add $s7, $s7, $s8 # Add both addresses
sw $s5, sorted($s7)
j EndSort # Jump to end of sort

# End of sort
EndSort:
# End of program
jr $ra # Return to calling program