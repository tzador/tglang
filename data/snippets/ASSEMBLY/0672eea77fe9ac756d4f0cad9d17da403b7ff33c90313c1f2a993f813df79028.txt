.section .data
    string db "Hello World!",0xA,0xD
    count dw 10
    sum dd 0
.section .text
    .globl _start
    .type _start, @function
_start:
    mov $string, %eax  # move address of string to eax register
    mov $4, %ebx  # specify sys_write syscall number
    mov $1, %ecx  # specify file descriptor (stdout)
    mov $13, %edx # specify length of string
    int $0x80  # invoke syscall
    mov $0, %eax  # clear eax register
    mov $5, %eax  # specify sys_open syscall number
    mov $0, %ebx  # specify file name (null for stdin)
    mov $2, %ecx  # specify flags (O_RDONLY)
    int $0x80  # invoke syscall
    sub $1, %eax  # decrement file descriptor (now stdin)
    mov $3, %ebx  # specify sys_read syscall number
    mov $0, %edx  # clear edx register
    mov $count, %ecx # move count variable to ecx register
    int $0x80  # invoke syscall
    mov $0, %eax  # clear eax register
    mov $sum, %ebx  # move sum variable to ebx register
    mov $counter, %ecx # move counter variable to ecx register
add_loop:
    add (%ebx), %eax  # add value at address stored in ebx to eax
    inc %ebx  # increment ebx to point to next value
    dec %ecx  # decrement ecx to keep track of loop count
    test %ecx, %ecx  # check if ecx is equal to 0
    jne add_loop  # jump to add_loop if not equal to 0
    mov $1, %eax  # specify sys_exit syscall number
    int $0x80  # invoke syscall