; This program performs a binary search on an array of integers
	.data
array DWORD 3, 6, 10, 14, 20, 22, 28, 36 ; array of sorted integers to search through
target DWORD 14 ; target value to search for
	.code
    ; initialize registers
	mov edi, 0 ; pointer to first element of array
	mov esi, LENGTHOF array - 1 ; pointer to last element of array
	mov ebx, target ; load target value into ebx register
	mov ecx, -1 ; initialized to -1 for conditional check
while_loop:
    ; calculate midpoint
	mov eax, esi ; move index of last element to eax
	sub eax, edi ; subtract index of first element from eax
	shr eax, 1 ; divide by 2 to calculate midpoint
	add eax, edi ; add index of first element back to get actual midpoint
	; check if target matches midpoint value
	cmp ebx, array[eax*4] ; multiply index by 4 to get index in DWORD array
	je found ; jump to found label if value matches
	; otherwise, check if target is greater or less than midpoint value
	jg target_greater
target_less:
	; if target is less than midpoint value, move pointer to left side of array
	mov esi, eax ; move midpoint index to last element index
	jmp while_loop ; jump back to beginning of while loop
target_greater:
	; if target is greater than midpoint value, move pointer to right side of array
	mov edi, eax ; move midpoint index to first element index
	mov ecx, eax ; store midpoint index in ecx for conditional check
	inc ecx ; increment to next element index
	cmp ebx, array[ecx*4] ; multiply index by 4 to get index in DWORD array
	jne while_loop ; jump back to beginning of while loop if value does not match
	jmp found ; otherwise, jump to found label
found:
	; target value has been found, print success message and exit
	lea eax, array[eax*4] ; multiply index by 4 to get index in DWORD array
	push eax ; push address of target value onto the stack
	push OFFSET fmt_success ; push address of success message format
	call crt_printf ; call printf function to print success message
	add esp, 8 ; clear stack
	mov eax, 0 ; set return value to 0
	ret ; return to operating system
	; format string for success message
fmt_success db "Target value %d found at index %d.", 0ah, 0dh, 0
end while_loop ; end while_loop label to mark end of loop
end ; end main label to mark end of program
	end