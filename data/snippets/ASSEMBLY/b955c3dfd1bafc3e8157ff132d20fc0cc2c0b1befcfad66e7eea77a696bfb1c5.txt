;; This code snippet performs a Fibonacci sequence using the recursive algorithm

;; Define our base case values
.set n, 10       ; number of Fibonacci numbers to generate
.set index, 0    ; used to increment through Fibonacci sequence
.set first, 0    ; first number in sequence
.set second, 1   ; second number in sequence

;; Define function for recursive Fibonacci algorithm
fibonacci_function:
    push    {lr}                ; push link register onto stack
    cmp     r0, #2              ; compare input with 2
    blt     end                 ; if n < 2, then finish recursion
    sub     r0, r0, #1          ; decrement input by 1
    bl      fibonacci_function  ; recursive call with input-1
    mov     r3, r0              ; store result in r3
    sub     r0, r0, #1          ; decrement input by 1
    bl      fibonacci_function  ; recursive call with input-1
    add     r0, r0, r3          ; add both results
    pop     {pc}                ; return from function

;; Loop through n times and call the Fibonacci function for each iteration
loop:
    cmp     index, n            ; compare index with n
    bge     end                 ; if index >= n, then finish loop
    push    {index}             ; push index onto stack
    push    {first}             ; push first number onto stack
    push    {second}            ; push second number onto stack
    bl      fibonacci_function  ; call Fibonacci function
    pop     {second}            ; pop second number from stack
    pop     {first}             ; pop first number from stack
    pop     {index}             ; pop index from stack
    add     index, index, #1    ; increment index
    b       loop                ; jump back to loop

;; End of program, print result and finish
end:
    .data
    first:   .word first          ; define first number in memory
    .data
    second:  .word second         ; define second number in memory
    .text
    @ output the Fibonacci sequence
    mov     r0, first            ; move first number into r0 for printing
    bl      printf               ; call printf function
    mov     r0, second           ; move second number into r0 for printing
    bl      printf               ; call printf function
    @ loop through and print the rest of the numbers in the sequence
    mov     r1, #2               ; set r1 to 2 for indexing
    print:
        ldr     r2, [first, r1]   ; load number from memory at r1 index
        mov     r0, r2            ; move number into r0 for printing
        bl      printf            ; call printf function
        add     r1, r1, #1        ; increment index
        cmp     r1, n             ; compare index with n
        blt     print             ; if index < n, then loop back
    mov     r0, #0                ; set r0 to 0 for successful exit
    mov     r7, #1                ; set r7 to 1 for exit system call
    swi     0                     ; call swi instruction to exit
    .end