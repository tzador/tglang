.section .data       // declaring a data section
    arr dd 1,2,3,4,5 // declaring an array containing 5 elements
    msg db 'Hello', 0 // declaring a string constant
.text                 // declaring a text section
_start:               // defining the _start label
    mov eax, 4        // loading the system call number for 'write' into the eax register
    mov ebx, 1        // loading the file descriptor (stdout) into the ebx register
    mov ecx, msg      // loading the address of msg into the ecx register
    mov edx, 5        // loading the length of msg into the edx register
    int 0x80          // calling the kernel interrupt to execute the 'write' system call
    mov eax, 1        // loading the system call number for 'exit' into the eax register
    xor ebx, ebx      // setting the exit code to 0
    int 0x80          // calling the kernel interrupt to execute the 'exit' system call

    mov eax, 3        // loading the system call number for 'read' into the eax register
    mov ebx, 0        // loading the file descriptor (stdin) into the ebx register
    mov ecx, arr      // loading the address of arr into the ecx register
    mov edx, 20       // loading the maximum number of bytes to be read into the edx register
    int 0x80          // calling the kernel interrupt to execute the 'read' system call
    jmp _start        // jumping back to the _start label to repeat the process