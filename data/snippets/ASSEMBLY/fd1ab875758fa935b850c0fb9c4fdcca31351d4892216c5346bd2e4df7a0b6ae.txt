; This code snippet performs a binary search in assembly language
; Input:
;  r0 = pointer to array containing sorted data
;  r1 = length of array
;  r2 = search value
; Output:
;  r0 = index of search value, -1 if not found

.data
array: .word 1, 3, 5, 7, 9, 11, 13, 15 ; example sorted array
length: .word 8 ; length of array
search_value: .word 7 ; value to search for

.text
.global _start

_start:
  ; Getting input values from registers
  ldr r0, =array ; loading address of array into r0
  ldr r1, =length ; loading value of length into r1
  ldr r2, =search_value ; loading value of search_value into r2
  mov r3, #0 ; initializing index variable to 0
  mov r4, r1 ; initializing max index variable to length
  mov r5, r3 ; initializing min index variable to 0

loop:
  cmp r5, r4 ; comparing min index and max index
  blt search_value_not_found ; branch if min index is greater than max index
  mov r6, r5 ; moving min index to r6
  add r6, r6, r4 ; adding max index to min index and storing in r6
  asr r6, r6, #1 ; dividing r6 by 2 to get midpoint index
  ldr r7, [r0, r6, LSL #2] ; loading value at midpoint index into r7
  cmp r7, r2 ; comparing value at midpoint index with search value
  beq search_value_found ; branch if equal to found condition
  bge update_max_index ; branch if greater than or equal to (value at midpoint index is greater)
  mov r4, r6 ; updating max index to midpoint index if value at midpoint index is less
  b update_loop ; branch to loop condition for next iteration

search_value_found:
  mov r0, r6 ; setting r0 to midpoint index (index of search value)
  b exit ; branch to exit condition

search_value_not_found:
  mov r0, #0 ; setting r0 to -1 (indicating search value not found)

exit:
  ; code to exit the program

update_max_index:
  add r5, r6, #1 ; updating min index to midpoint index + 1
  b update_loop ; branch to loop condition for next iteration

update_min_index:
  sub r4, r6, #1 ; updating max index to midpoint index - 1
  b update_loop ; branch to loop condition for next iteration
  br loop ; branch to the loop label if no condition is met.

end:
  ; end of program, return to operating system
  mov r7, #1 ; setting syscall_exit to 1
  swi 0 ; executing software interrupt call