; This code snippet uses Assembly language to sort an array of integers
; Inputs:
;   ebx: base address of array
;   ecx: array size
; Outputs:
;   sorted array in memory

top:
  mov esi, ebx ; move base address into esi register
  mov edi, eax ; move array size into edi register
  mov ebp, 0   ; set ebp to 0, used as a flag for loop termination

  ; Outer loop to iterate through array
outerLoop:
  cmp ebp, 1   ; compare ebp to 1 to check if inner loop is done
  je done      ; jump to done if inner loop is done

  ; Inner loop to compare and swap adjacent elements
  dec edi      ; decrement array size for loop iteration
  mov ebx, esi ; move base address into ebx register
  add ebx, edi ; add array size to ebx to access last element
  mov edx, 0   ; set edx to 0, used for loop iteration

innerLoop:
  mov eax, [ebx]  ; move last element into eax register
  mov ecx, [ebx-4] ; move second to last element into ecx register
  cmp eax, ecx    ; compare elements to see if swap is needed
  jge noSwap      ; jump to noSwap if elements are in correct order
  push eax        ; push last element onto stack
  push ecx        ; push second to last element onto stack
  pop eax         ; pop second to last element into eax
  pop ecx         ; pop last element into ecx
  mov [ebx], eax  ; move second to last element into last element's spot
  mov [ebx-4], ecx; move last element into second to last element's spot

noSwap:
  inc edx        ; increment loop counter
  cmp edx, edi   ; compare loop counter to array size
  jl innerLoop   ; jump to inner loop if loop counter is less than array size
  inc ebp        ; increment flag to indicate inner loop is done, outer loop continues
  jmp outerLoop  ; jump back to outer loop

done:
  ret