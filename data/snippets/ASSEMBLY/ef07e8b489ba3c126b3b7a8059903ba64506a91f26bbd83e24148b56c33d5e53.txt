; This code snippet is a basic example of a loop in Assembly language
; It prints the numbers 1-10 using a 'dec' (decrement) instruction

.section .data
    start_num DB 10 ; starting number to decrement
    end_num DB 1 ; ending number (inclusive)

.section .text
    _start:
        mov ax, start_num ; move starting number to ax register
        dec ax ; decrement the value in ax by 1
        mov dl, al ; move the value in ax to dl register (dl is used to store values to be printed)
        mov ah, 02h ; set ah register to print the character in dl
        int 21h ; call the print function
        cmp ax, end_num ; compare the value in ax to end_num
        jnz _start ; if not equal, jump back to _start
        mov ah, 0 ; set ah register back to 0
        int 20h ; exit program

; Explanation:
; In Assembly, a loop is created by using conditional jumps (jumps that only occur if certain conditions are met).
; The 'cmp' instruction compares the values in two registers, in this case ax (which holds the number being decremented) and end_num.
; If the values are not equal (as indicated by the 'jnz' instruction), the program jumps back to the beginning of the loop and the process is repeated.
; Once the values are equal, the program exits.
; This loop will print the numbers 1-10 because the starting number is 10 and it is being decremented by 1 until it reaches 1 (which is same as end_num)