; This code snippet performs bubble sort on an array of integers
; Input:
; - array: Address of the first element in the array
; - length: Length of the array
bubbleSort:
  mov ecx, [array] ; Move the address of the first element to ecx
  mov edx, [length] ; Move the length of the array to edx

outerLoop:
  sub edx, 1 ; Decrement the length of the array
  cmp edx, 0 ; Compare if the length is 0
  je exit ; If length is 0, exit the loop

  mov esi, ecx ; Move the address of first element to esi
  mov edi, esi ; Move the address of first element to edi
  mov eax, [esi] ; Move the first element to eax

innerLoop:
  add edi, 4 ; Increment the address by 4 bytes
  mov ebx, [edi] ; Move the current element to ebx
  cmp eax, ebx ; Compare the first element with the current element
  jle skip ; If first element is less than or equal to current element, skip swap

  ; Swap elements
  mov [esi], ebx ; Move current element to address of first element
  mov [edi], eax ; Move first element to current element

skip:
  mov eax, ebx ; Move current element to eax
  cmp edi, [ecx + edx * 4] ; Compare if edi is equal to last element
  jne innerLoop ; If not equal, continue inner loop

  jmp outerLoop ; Jump to the beginning of the outer loop

exit:
  ret ; Return from the function