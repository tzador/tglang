;Declare variables
variable1 db 10     ;Declare 8-bit variable1 and assign initial value of 10
variable2 dw 200    ;Declare 16-bit variable2 and assign initial value of 200
variable3 dd 1000   ;Declare 32-bit variable3 and assign initial value of 1000

;Initialize stack
SP dw 100h     ;Initialize stack pointer to 100h
BP dw 200h     ;Initialize base pointer to 200h

;Start of main program
Main:
mov ax, @data   ;Load data segment into AX register
mov ds, ax      ;Point data segment to DS register

;Add variable1 and variable2 and store result in variable3
mov al, variable1
mov bx, variable2
add al, bl
mov variable3, al

;Push variable1 and variable3 onto stack
push variable1
push variable3

;Pop values from stack and perform multiplication
pop ax
pop bx
mul bx          ;Multiply ax and bx register and store result in dx:ax register
mov variable4, ax   ;Store lower 16 bits of result in variable4

;Check if result is positive or negative
cmp dx, 0       ;Compare upper 16 bits of result with 0
jge positive    ;Jump to positive label if result is greater than or equal to 0
neg variable4   ;Negate variable4 if result is negative
jmp end         ;Jump to end label
positive:
nop             ;No operation (placeholder)
end:
;End of main program

;Define variables used in multiplication
variable4 dw 0  ;Declare 16-bit variable4 for storing multiplication result
variable5 dw 5  ;Declare 16-bit variable5 as multiplier

;Multiply variable4 and variable5 and store result in new variables
mov ax, variable4
mov bx, variable5
mul bx          ;Multiply ax and bx register and store result in dx:ax register
cmp dx, 0       ;Compare upper 16 bits of result with 0
jge positive2   ;Jump to positive2 label if result is greater than or equal to 0
neg ax          ;Negate lower 16 bits of result
neg dx          ;Negate upper 16 bits of result
positive2:
xor cx, cx      ;Clear cx register (used as counter)
mov bx, ax      ;Move lower 16 bits of result to bx register
mov ax, dx      ;Move upper 16 bits of result to ax register
loop multiply   ;Loop for number of times specified in cx register
mov variable6, ax   ;Store lower 16 bits of result in variable6
mov variable7, bx   ;Store upper 16 bits of result in variable7
multiply:
add ax, bx      ;Add upper and lower 16 bits of result
loop multiply   ;Loop until cx register is 0
;End of multiplication

;Print variable6 and variable7 on screen
mov ah, 9       ;Move 9 to AH register (command for printing string)
mov dx, variable6   ;Move address of variable6 to DX register
int 21h         ;Print contents of DX register (variable6)
mov dx, variable7   ;Move address of variable7 to DX register
int 21h         ;Print contents of DX register (variable7)

;End of program
mov ah, 4ch     ;Move 4ch to AH register (command for exiting program)
int 21h         ;Call interrupt 21h (exit program)
;Define data segment
@data ends
end Main        ;End of Main program
end             ;End of assembly program