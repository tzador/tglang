; this is a comment in assembly code
; set up registers
mov rax, 5  ; move the value 5 into register rax
mov rbx, 2  ; move the value 2 into register rbx

; perform arithmetic operations
add rax, rbx  ; add the values in rax and rbx, storing the result in rax
sub rbx, 1  ; subtract 1 from the value in rbx
imul rax, rbx  ; multiply the values in rax and rbx, storing the result in rax
xor rbx, rbx  ; bitwise exclusive OR operation on rbx with itself

; compare values
cmp rax, rbx  ; compare the values in rax and rbx
jge rax_gt_rbx  ; jump to label if rax is greater than or equal to rbx
jl rbx_gt_rax  ; jump to label if rbx is greater than rax

; labels and instructions
rax_gt_rbx:  ; label for the jump instruction
mov rcx, 10  ; move the value 10 into register rcx
jmp end  ; unconditional jump to end label
rbx_gt_rax:  ; label for the jump instruction
mov rcx, 20  ; move the value 20 into register rcx
nop  ; no operation
end:  ; end label

; output result
mov rdx, 0  ; move 0 into register rdx
mov rsi, rcx  ; move the value in register rcx to register rsi
mov rdi, 1  ; move 1 into register rdi
mov rax, 1  ; move 1 into register rax (for write system call)
syscall  ; make system call to write the value in register rsi (rcx) to standard output