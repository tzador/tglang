;This code snippet calculates the factorial of a given number using recursion

.text
.global _start

_start:
    mov rax, 1        ;Load 1 into the accumulator register (rax)
    mov rbx, 5        ;Load 5 into the base register (rbx)
    call factorial   ;Call the factorial subroutine
    mov rbx, rax     ;Move the result from rax to rbx for printing
    mov rax, 0       ;Clear the accumulator register
    mov rdi, 1       ;Set the output file descriptor to stdout
    mov rsi, rbx     ;Load the result into the second argument register (rsi)
    mov rdx, 1       ;Set the number of bytes to print (1 for each digit)
    mov rax, 1       ;Set the system call number to write
    syscall         ;Call the operating system to write the result to stdout

    mov rax, 0       ;Set the system call number to exit
    syscall         ;Call the operating system to terminate the program

factorial:
    cmp rbx, 0        ;Compare the base register (rbx) to 0
    jz .base          ;If rbx equals 0, jump to the base case

    push rax         ;Push the accumulator onto the stack
    dec rbx          ;Decrement the base register (rbx) by 1
    call factorial  ;Recursive call to the factorial subroutine
    pop rdi         ;Pop the top value of the stack into rdi (base)
    mul rdi         ;Multiply the accumulator by the base
    ret             ;Return to the previous function call

.base:
    mov rax, 1       ;Load 1 into the accumulator (base case)
    ret              ;Return to the previous function call