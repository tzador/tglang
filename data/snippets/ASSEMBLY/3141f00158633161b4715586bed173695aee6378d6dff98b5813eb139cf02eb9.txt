section .text
global _start
_start:
    ; set up stack pointer
    mov esp, stack_top
    ; set up base pointer
    mov ebp, esp
    ; perform calculations and store result in eax register
    mul dword [ebp+4]
    add eax, dword [ebp+8]
    ; store result in variable 'result'
    mov [result], eax
    
    ; print result
    mov eax, 4  ; system call number for 'write'
    mov ebx, 1  ; file descriptor for 'stdout'
    mov ecx, result  ; address of result variable
    mov edx, 4  ; number of bytes to write
    int 0x80    ; call kernel

    ; exit program
    mov eax, 1  ; system call number for 'exit'
    xor ebx, ebx  ; exit status code, 0 for success
    int 0x80    ; call kernel

section .data
    ; define variable 'result'
    result dd 0

section .bss
    ; reserve space for stack
    stack_bottom resd 1
    stack_top resb 65536  ; 64KB stack space