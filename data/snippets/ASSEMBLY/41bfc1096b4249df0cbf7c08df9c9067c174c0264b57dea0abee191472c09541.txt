.section .data
    my_var1: .byte 5   ; defining a byte variable with initial value of 5
    my_var2: .word 100 ; defining a word variable with initial value of 100
    my_var3: .long 1000000 ; defining a double-word variable with initial value of 1000000
    my_var4: .asciz "Hello, world!" ; defining a null-terminated string variable
.section .bss
    my_array1: .skip 10 ; defining an uninitialized array with 10 bytes of memory
    my_array2: .space 10 ; defining an uninitialized array with 10 bytes of memory and setting all values to 0
.section .text
    _start:
        mov %eax, my_var1 ; moving the value of my_var1 into the eax register
        add $5, %eax  ; adding 5 to the value in the eax register
        mov my_var2, %ebx ; moving the value of my_var2 into the ebx register
        sub $10, %ebx ; subtracting 10 from the value in the ebx register

        ; printing the value of my_var1 and my_var2
        mov $4, %eax ; setting system call number for 'write' to 4
        mov $1, %ebx ; setting file descriptor for stdout to 1
        mov $my_var1, %ecx ; setting pointer to my_var1 for 'write' function
        mov $1, %edx ; setting number of bytes to write to 1
        int $0x80 ; calling operating system to execute 'write' function
        mov $my_var2, %ecx ; setting pointer to my_var2 for 'write' function
        mov $1, %edx ; setting number of bytes to write to 1
        int $0x80 ; calling operating system to execute 'write' function

        ; comparing values and branching
        cmp %eax, %ebx ; comparing the values in the eax and ebx registers
        jg greater ; jumping to 'greater' label if eax > ebx
        jl less ; jumping to 'less' label if eax < ebx
        je equal ; jumping to 'equal' label if eax = ebx

greater:
        ; do something if eax > ebx
        jmp end ; jump to end label to skip over 'less' and 'equal' sections

less:
        ; do something if eax < ebx
        jmp end ; jump to end label to skip over 'equal' section

equal:
        ; do something if eax = ebx

end:
        ; end of program
        mov $1, %eax ; setting system call number for 'exit' to 1
        xor %ebx, %ebx ; setting exit status to 0
        int $0x80 ; calling operating system to execute 'exit' function