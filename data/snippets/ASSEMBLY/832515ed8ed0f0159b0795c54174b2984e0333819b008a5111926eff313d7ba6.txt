; This code snippet shows the implementation of a function in Assembly language

section .text
global _start

_start:
    ; Before calling the function, we need to initialize the parameters
    ; In this example, we are passing two integers
    push DWORD 3 ; First parameter: 3
    push DWORD 4 ; Second parameter: 4
    call _add ; Call the function
    add esp, 8 ; Clean up the stack after the function call

    ; Code snippet for the _add function
    _add:
        push ebp ; Save the base pointer
        mov ebp, esp ; Set the base pointer to the current stack position

        ; Get the first parameter from the stack and store it in EAX
        mov eax, [ebp + 8]

        ; Get the second parameter from the stack and store it in EBX
        mov ebx, [ebp + 12]

        ; Add the two parameters and store the result in EAX
        add eax, ebx

        ; Clean up the stack and return the result
        mov esp, ebp ; Restore the stack pointer
        pop ebp ; Restore the base pointer
        ret ; Return from the function

; Expected output:
; Function calling:
; push DWORD 3
; push DWORD 4
; call _add
; add esp, 8

; Function implementation:
; push ebp
; mov ebp, esp
; mov eax, [ebp + 8]
; mov ebx, [ebp + 12]
; add eax, ebx
; mov esp, ebp
; pop ebp
; ret