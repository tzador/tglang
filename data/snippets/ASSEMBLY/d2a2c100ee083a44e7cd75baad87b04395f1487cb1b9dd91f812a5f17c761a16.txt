; This code snippet calculates the first 20 terms of the Fibonacci sequence

section .text ; Defines the code section
global _start ; Defines the entry point of the code

_start: ; Code starts here

    mov eax, 0 ; Initializes eax register to store the current term in the sequence
    mov ebx, 1 ; Initializes ebx register to store the previous term in the sequence
    mov ecx, 20 ; The number of terms to calculate
    mov edx, 0 ; Counter variable for loop
    
loop: ; Loop to calculate and output the terms
    
    add eax, ebx ; Adds the current and previous terms
    mov [ebx], eax ; Stores the result in the ebx register
    mov eax, ebx ; Moves the previous term to the current term
    mov ebx, [ebx - 4] ; Moves the previous previous term to the previous term
    ; The reason for -4 is because each term takes up 4 bytes of memory
    ; and we need to move 4 bytes back to access the previous term

    ; Output the current term
    mov eax, 4 ; System call number for "write"
    mov ebx, 1 ; The file descriptor for stdout
    mov ecx, ebx ; Pointer to the current term in the sequence
    mov edx, 4 ; Number of bytes to write
    int 0x80 ; System call to display to the standard output

    ; Add a comma and space for formatting
    mov eax, 4 ; System call number for "write"
    mov ebx, 1 ; The file descriptor for stdout
    mov ecx, comma ; Pointer to the address of the comma
    mov edx, 2 ; Number of bytes to write
    int 0x80 ; System call to display to the standard output

    ; Increment counter variable
    inc edx
    
    ; Check if all terms have been calculated
    cmp edx, ecx
    jne loop ; If not, go back to loop
    
    ; Exit the program
    mov eax, 1 ; System call number for "exit"
    xor ebx, ebx ; Return value of 0
    int 0x80 ; System call to exit the program

section .data ; Stores the data section

comma db ', ' ; Stores the comma and space for formatting purposes