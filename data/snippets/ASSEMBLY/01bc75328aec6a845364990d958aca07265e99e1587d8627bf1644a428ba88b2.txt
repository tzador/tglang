; Assembly code for calculating the factorial of a number using recursion
;
; Input:
; - rcx: number to calculate factorial of
; - rdx: result of the factorial
;
; Output:
; - rax: factorial of the input number
;
; Algorithm:
; - Check if input number is equal to 0, if yes then return 1 as the factorial
; - If input number is not equal to 0, decrement the input number by 1 and call the function recursively
; - Multiply the value stored in rdx by the input number and store it in rdx
; - Return the value stored in rdx

calculate_factorial:
    ; Check if input number is 0, if yes then return 1 as factorial
    mov rax, 0          ; Move 0 to rax
    cmp rcx, 0          ; Compare rcx with 0
    je return_one       ; If rcx is 0, jump to return_one
    jmp continue        ; Otherwise jump to continue

return_one:
    mov rax, 1          ; Move 1 to rax
    ret                 ; Return 1 as the factorial

continue:
    ; Decrement input number by 1 and call the function recursively
    push rcx            ; Push rcx on the stack
    dec rcx             ; Decrement rcx by 1
    call calculate_factorial ; Call calculate_factorial function with new input number
    pop rcx             ; Pop rcx from the stack

    ; Multiply the value stored in rdx by the input number and store it in rdx
    mul rcx             ; Multiply rdx by rcx and store result in rdx

    ret                 ; Return the value stored in rdx as the factorial