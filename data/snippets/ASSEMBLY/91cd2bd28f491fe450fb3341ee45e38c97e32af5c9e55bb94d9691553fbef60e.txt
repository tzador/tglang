; This code snippet is written in Assembly language
; It calculates the factorial of a given number

%macro factorial 2                  ; Define a macro for calculating factorial
    mov ecx, 1                      ; Initialize counter
    mov eax, %1                     ; Load number into accumulator

loop_start:                         ; Start of loop
    mul ecx                         ; Multiply accumulator with counter
    inc ecx                         ; Increment counter by 1
    cmp ecx, %2                     ; Compare counter with number
    jle loop_start                  ; Jump back to loop start if less than or equal

    mov %1, eax                     ; Move result to first parameter
%endmacro                           ; End of macro definition

global _start                       ; Entry point for program

section .data
    n resb 1                        ; Reserve 1 byte for input number

section .text
_start:
    ; Get input number
    mov eax, 3                      ; System call number for input
    mov ebx, 0                      ; Standard input file descriptor
    mov ecx, n                      ; Address of input buffer
    mov edx, 1                      ; Maximum number of bytes to read
    int 0x80                        ; Call kernel to read input from user

    ; Convert input from ASCII to integer
    sub byte [n], '0'               ; Subtract ASCII offset to get actual number

    ; Call factorial macro with input number as first parameter
    call factorial

    ; Display result
    mov eax, 4                      ; System call number for output
    mov ebx, 1                      ; Standard output file descriptor
    mov ecx, n                      ; Address of result buffer
    mov edx, 1                      ; Maximum number of bytes to write
    int 0x80                        ; Call kernel to output result to user

    ; Exit program
    mov eax, 1                      ; System call number for exit
    xor ebx, ebx                    ; Return value for exit = 0
    int 0x80                        ; Call kernel to exit program