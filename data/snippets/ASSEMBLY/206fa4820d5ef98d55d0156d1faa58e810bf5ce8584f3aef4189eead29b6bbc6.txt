;This code snippet calculates the factorial of a number using recursion

section .text    ;text section where the code resides
    global _start ;entry point for the program
    
_start:           ;start label
    mov ecx, 5    ;store the number whose factorial needs to be calculated in ecx register
    call factorial ;call the factorial function
    
    mov eax, 1    ;set eax to 1, used to multiply in the recursive function
    ret           ;return from function and continue with code execution

;-----Factorial Function-----
factorial:                                           ;label for the factorial function
    cmp ecx, 1                                        ;compare the value in ecx with 1
    je .end                                           ;if equal, jump to end label and return 1 as result
    
    push ecx                                          ;push ecx onto the stack for later use
    dec ecx                                           ;decrement ecx by 1 for next recursive call
    call factorial                                    ;call the factorial function again with the decremented value
    
    pop ecx                                           ;pop the value of ecx from stack back to register
    mul ecx                                           ;multiply eax with the value in ecx
    jmp .end                                          ;jump to the end label to return the result
    
.end:                                                ;end label for the function
    ret                                               ;return from function with the result in eax

;-----Data section-----
section .data                                        ;data section where variables are declared
    msg db 'The factorial of 5 is: ', 10, 0           ;message to print the result

;-----Print Function-----
print:                                                ;label for the print function
    push eax                                          ;push eax onto the stack
    push msg                                          ;push the message onto the stack
    call printf                                       ;call the printf function to print the message
    add esp, 8                                        ;clear the stack by adding 8 bytes (4 bytes for message, 4 bytes for eax)
    ret                                                ;return to the caller
    
;-----Standard Library Functions-----
extern printf                                         ;declare the external function printf from standard library
extern exit                                           ;declare the external function exit from standard library