;; The following code snippet is a basic example of a bubble sort algorithm in Assembly language.
;; It takes in an array of 32-bit integers and sorts them in ascending order.

;; Define variables
.section .data
array: .long 5, 2, 8, 1, 3, 6, 7, 4 ; array of 32-bit integers to be sorted
len: .long 8 ; length of the array

;; Main program
.section .text
.globl _start
_start:
  movl len, %ecx ; move length of array into counter register
  cmpl $0, %ecx ; compare counter with 0
  jle sorted ; if counter is less than or equal to 0, array is already sorted
  xorl %eax, %eax ; set accumulator to 0

bubble_sort:
  movl $1, %edx ; set flag to 1 for loop execution
  movl $0, %edi ; set index to 0 for array traversal
  movl array(,%edi,4), %ebx ; load first element into register for comparison

inner_loop:
  movl array+4(,%edi,4), %esi ; load next element into register
  cmpl %esi, %ebx ; compare current element with next element
  jle continue ; jump if current element is less than or equal to next element
  movl %esi, array(,%edi,4) ; swap elements if current element is larger
  movl %ebx, array+4(,%edi,4)
  movl $1, %edx ; set flag to 1, indicating a swap has occurred

continue:
  incl %edi ; increment index
  decl %ecx ; decrement counter
  cmpl $1, %ecx ; compare counter with 1
  jg inner_loop ; if counter is greater than 1, continue inner loop
  cmpl $1, %edx ; compare flag with 1
  jne bubble_sort ; if no swap has occurred, array is sorted

sorted:
  movl $1, %eax ; set accumulator to 1, indicating successful sort
  movl $1, %ebx ; set exit code to 1
  movl $1, %ecx ; set exit status to 1
  int $0x80 ; exit program