; Initialize data segment
.DATA
; Reserve space for arrays A, B, C
A       DW      1000 DUP (?)
B       DW      1000 DUP (?)
C       DW      1000 DUP (?)

; Initialize code segment
.CODE
; Our main program starts here
MAIN    PROC
        ; Set up stack
        MOV     AX, @DATA
        MOV     SS, AX
        MOV     SP, 100H

        ; Load values into arrays A and B
        MOV     CX, 1000       ; Set loop counter
        MOV     SI, 0          ; Initialize array index
LOOP    MOV     AX, SI         ; Load array index into AX
        ADD     AX, 2          ; Add 2 to array index
        MOV     A[AX], AX      ; Store value in array A
        ADD     AX, 3          ; Add 3 to array index
        MOV     B[AX], AX      ; Store value in array B
        INC     SI             ; Increment array index
        LOOP    LOOP

        ; Perform calculations on arrays A and B
        MOV     CX, 1000       ; Set loop counter
        MOV     SI, 0          ; Initialize array index
LOOP2   MOV     AX, SI         ; Load array index into AX
        ADD     AX, 2          ; Add 2 to array index
        MOV     AX, A[AX]      ; Load value from array A
        ADD     AX, B[AX]      ; Add value from array B
        MOV     C[AX], AX      ; Store result in array C
        INC     SI             ; Increment array index
        LOOP    LOOP2

        ; Print out values in array C
        MOV     CX, 1000       ; Set loop counter
        MOV     SI, 0          ; Initialize array index
LOOP3   MOV     AX, SI         ; Load array index into AX
        ADD     AX, 2          ; Add 2 to array index
        MOV     AX, C[AX]      ; Load value from array C
        CALL    PRINT_NUM      ; Call function to print value
        INC     SI             ; Increment array index
        LOOP    LOOP3

        ; Exit program
        MOV     AX, 4C00H      ; Set return code
        INT     21H            ; Call interrupt to exit program
MAIN    ENDP
        ; End main program

; Function to print out a number
PRINT_NUM PROC
        ; Set up registers
        PUSH    AX
        PUSH    BX
        PUSH    CX
        PUSH    DX

        ; Move number to AX
        MOV     BX, AX
        ;

        ; Divide number by 10
        MOV     CX, 10
        DIV     BX

        ; Store remainder in DL
        MOV     DL, AH

        ; Add '0' to convert to ASCII
        ADD     DL, '0'

        ; Print out the digit
        MOV     AH, 02H
        INT     21H

        ; Move second digit to AX
        MOV     AH, DL

        ; Divide number by 10
        MOV     CX, 10
        DIV     BX

        ; Store remainder in DL
        MOV     DL, AH

        ; Add '0' to convert to ASCII
        ADD     DL, '0'

        ; Print out the digit
        MOV     AH, 02H
        INT     21H

        ; Restore registers
        POP     DX
        POP     CX
        POP     BX
        POP     AX

        ; Return from function
        RET
PRINT_NUM ENDP

; End of code segment
END     MAIN