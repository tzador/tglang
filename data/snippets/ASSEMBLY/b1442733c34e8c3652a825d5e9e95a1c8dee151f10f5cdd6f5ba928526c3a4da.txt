; This code snippet uses the x86 assembly language.
; It calculates the factorial of a number using a recursive function.

section .data ; Data section
    msg db "The factorial of %d is %d", 10, 0 ; Message string for printing the result

section .bss ; BSS section to define uninitialized variables
    num resb 4 ; Reserve 4 bytes of space for the input number

section .text ; Text section containing the main program

global _start ; Start label for the program

_start:

    ; Prompt user to enter a number
    mov esi, msg ; Move message string into esi register
    mov eax, 4 ; Syscall to print the string
    mov ebx, 1 ; File descriptor for stdout
    mov ecx, esi ; Pass message string as fourth argument
    mov edx, 27 ; Length of message string
    int 0x80 ; Execute the syscall

    ; Read input from user
    mov eax, 3 ; Syscall to read input from stdin
    mov ebx, 0 ; File descriptor for stdin
    mov ecx, num ; Address of num variable to store input
    mov edx, 4 ; Maximum number of bytes to read
    int 0x80 ; Execute the syscall

    ; Convert input string to integer
    xor ebx, ebx ; Clear ebx register for future use
    mov bl, byte [num] ; Move first character of input to bl register
    cmp bl, '0' ; Check if input is a single digit number
    jl print_error ; Jump to print_error if input is invalid
    sub bl, '0' ; Convert character to integer and store in bl register
    jmp calc_factorial ; Jump to recursive factorial function

calc_factorial:
    push eax ; Save the value of eax register
    push ebx ; Save the value of ebx register
    cmp bl, 0 ; Check if input is 0
    je print_result ; If input is 0, jump to print_result
    dec ebx ; Decrement ebx register by 1
    call calc_factorial ; Recursively call calc_factorial function
    mul ebx ; Multiply eax register by ebx register
    pop ebx ; Restore the value of ebx register
    pop eax ; Restore the value of eax register

print_result:
    ; Print result to console
    xor eax, eax ; Clear eax register
    mov al, 4 ; Syscall to print result message
    mov ebx, 1 ; File descriptor for stdout
    mov ecx, esi ; Message string in esi register
    mov edx, 27 ; Length of message string
    int 0x80 ; Execute the syscall

    ; Exit the program
    xor eax, eax ; Clear eax register
    mov al, 1 ; Syscall to exit program
    xor ebx, ebx ; Exit code set to 0
    int 0x80 ; Execute the syscall

print_error:
    ; Print error message to console
    xor eax, eax ; Clear eax register
    mov al, 4 ; Syscall to print error message
    mov ebx, 1 ; File descriptor for stdout
    mov esi, error_msg ; Error message string in esi register
    mov edx, 13 ; Length of error message string
    int 0x80 ; Execute the syscall

    ; Exit the program
    xor eax, eax ; Clear eax register
    mov al, 1 ; Syscall to exit program
    mov ebx, 1 ; Exit code set to 1 to indicate error
    int 0x80 ; Execute the syscall

section .bss ; BSS section to define uninitialized variables
    error_msg resb 13 ; Reserve 13 bytes of space for error message

section .data ; Data section
    error_msg db "Invalid input", 10, 0 ; Error message string for printing invalid input