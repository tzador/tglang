;;This code snippet calculates the factorial of a given number using recursion
;;Input: rdi = number, rax = result
;;Output:
    mov rax, rdi ;;move the number into result register
    cmp rax, 1 ;;compare the number with 1
    jl .end ;;if number is less than 1, skip to .end
    dec rax ;;decrement number by 1
    push rdi ;;save number on the stack
    call factorial ;;recursive call to factorial function
    pop rdi ;;restore number from stack
    imul rax, rdi ;;multiply result by number
    .end: ;;end of function
ret ;;return to calling function
factorial:
    push rbp ;;save base pointer
    mov rbp, rsp ;;set base pointer to stack pointer
    sub rsp, 8 ;;make space for local variables
    mov qword [rbp-8], rax ;;store result register in local variable
    cmp qword [rbp-8], 1 ;;compare local variable with 1
    jl .end ;;if local variable is less than 1, skip to .end
    dec qword [rbp-8] ;;decrement local variable by 1
    call factorial ;;recursive call to factorial function
    mov rax, qword [rbp-8] ;;move local variable into result register
    imul rax, qword [rbp+16] ;;multiply result by number
    mov rsp, rbp ;;restore stack pointer
    pop rbp ;;restore base pointer
    ret ;;return to calling function