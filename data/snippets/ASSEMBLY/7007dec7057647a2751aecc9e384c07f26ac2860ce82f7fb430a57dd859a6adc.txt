section .bss  ; declares a section for uninitialized data

my_array     resd 10; declares an array with 10 double-word (4 bytes) elements
my_counter   resd 1 ; declares a counter variable that occupies 4 bytes

section .text ; declares a section for executable code

global _start ; marks the entry point of the program
_start:

mov ecx, 0 ; initializes the counter to 0

loop_start: ; defines a label for the loop start
mov eax, DWORD [my_array + 4*ecx] ; loads the value of the array at index ecx into eax

inc edx ; increments edx to keep track of the number of iterations
cmp eax, 0 ; compares the value in eax with 0
je loop_end ; jumps to loop_end if the value is 0 (end of array)

mul edx ; multiplies eax with edx and stores the result in eax

add eax, DWORD [my_counter] ; adds the counter variable to eax
mov DWORD [my_counter], eax ; stores the result back in the counter variable

inc ecx ; increments ecx to move to the next element in the array
jmp loop_start ; jumps back to the beginning of the loop

loop_end: ; defines a label for the end of the loop

mov DWORD [my_counter], ecx ; stores the final value of ecx (number of elements in array) in the counter variable

mov eax, 1 ; loads the exit syscall number into eax
xor ebx, ebx ; clears ebx as it is not used by this syscall
int 0x80 ; executes the exit syscall with the parameters in eax and ebx