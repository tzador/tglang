; This code snippet is an example of a recursive factorial function in MIPS assembly
; It takes in an integer as input and returns its factorial as output
.data
input: .word 6           ; change the value of input to test different inputs

.text
.globl main

main:
 	la $a0, input 	 ; load input into $a0 register
 	jal factorial      ; jump to factorial function
 	move $a0, $v0      ; move factorial result from $v0 to $a0 register
 	
 	# print the result
 	li $v0, 1	    ; load print code into $v0 to indicate print integer
 	syscall		    ; system call to print integer
	 
 	jr $ra		    ; jump back to main and return to operating system

factorial:
 	addi $sp, $sp, -4    ; decrement stack pointer by 4 bytes to make space for $a0 register
 	sw $a0, 0($sp)       ; store $a0 register into stack
 	addi $a0, $a0, -1    ; decrement $a0 register by 1 for recursive call 
 	beqz $a0, end	    ; base case: if $a0 register becomes 0, jump to end 
 	jal factorial	    ; recursive call to factorial function
 	lw $a0, 0($sp)	    ; load $a0 register from stack
 	addi $sp, $sp, 4	    ; increment stack pointer by 4 bytes
 	mul $v0, $v0, $a0    ; multiply result of recursive call with $a0 register
 	end: 
 	move $v0, $a0	    ; move result from $a0 register to $v0 register for return
 	jr $ra		    ; return to caller function