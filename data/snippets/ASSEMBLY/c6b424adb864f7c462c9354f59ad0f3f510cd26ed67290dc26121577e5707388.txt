; This code snippet is a final exam question for a computer science course.
; It demonstrates a function that calculates the factorial of a number using recursion.
; The code is written in NASM Assembly for x86 architecture.

; Declare the function called 'factorial', which takes one argument 'num'
; and returns the calculated factorial of 'num'
factorial:
  ; Function prologue
  push ebp        ; Push base pointer onto the stack
  mov ebp, esp    ; Move stack pointer to base pointer

  ; Check if 'num' is equal to 0 (base case)
  cmp dword [ebp + 8], 0    ; Compare 'num' to 0
  je .base_case            ; Jump to '.base_case' if 'num' is equal to 0

  ; Calculate 'num - 1' and store it in 'ebx' register
  mov ebx, [ebp + 8]    ; Move value of 'num' into 'ebx'
  sub ebx, 1            ; Subtract 1 from 'ebx'

  ; Push 'ebx' onto the stack (the argument for the recursive call)
  push ebx

  ; Call the 'factorial' function recursively
  call factorial

  ; Multiply the returned value by 'num' and store it in 'eax' register
  pop ebx              ; Pop the argument value from the stack
  mov eax, [ebp + 8]   ; Move value of 'num' into 'eax'
  imul ebx             ; Multiply 'eax' by 'ebx'

  ; Function epilogue
  mov esp, ebp    ; Restore stack pointer
  pop ebp         ; Pop base pointer from the stack
  ret             ; Return control to the calling function

.base_case:
  ; If 'num' is 0, return 1
  mov eax, 1      ; Move value 1 into 'eax' register
  jmp end         ; Jump to 'end' label

end:
  ; Exit the function and return control to the calling function
  ret