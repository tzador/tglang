; This code snippet is a program that performs bubble sort on an array.
section .data ; declaring data section
array db 10, 6, 8, 3, 5, 2, 7, 1, 9, 4 ; initializing an array
size equ $-array ; assigning size of the array to a variable
section .text ; declaring text section
global _start ; global label for main function
_start: ; main function
mov ecx, size ; moving the size of the array into ecx register
mov ebx, 0 ; moving value 0 into ebx register for index
outer_loop: ; outer loop for iterating through the array
mov esi, 0 ; resetting the value of esi register for comparison
inner_loop: ; inner loop for comparing elements
mov eax, [array+esi] ; moving value of first element to eax register
cmp eax, [array+esi+1] ; comparing first element with second element
jg swap ; jumping to swap function if first element is greater than second element
inc esi ; incrementing esi register for next element
cmp esi, ecx ; checking if all elements have been compared
jge end_inner_loop ; jumping to end_inner_loop label if all elements have been compared
jmp inner_loop ; jumping back to inner loop for next comparison
swap: ; swap function for swapping elements
mov edx, [array+esi+1] ; moving second element to edx register
mov [array+esi+1], [array+esi] ; moving first element to second element's position in array
mov [array+esi], edx ; moving second element to first element's position in array
end_inner_loop: ; label to end inner loop
inc ebx ; incrementing ebx register for next iteration of outer loop
cmp ebx, ecx ; checking if all elements have been iterated through
jge end_outer_loop ; jumping to end_outer_loop label if all elements have been iterated through
jmp outer_loop ; jumping back to outer loop for next iteration
end_outer_loop: ; label to end outer loop
mov eax, 1 ; moving system call number for exit to eax register
xor ebx, ebx ; setting the exit status to 0
int 0x80 ; making system call to exit program