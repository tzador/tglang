use strict; # Enforces stricter syntax checking
use warnings; # Prints warnings for potential errors
use feature 'say'; # Enables the use of modern Perl features
use List::Util qw(sum); # Imports the 'sum' function from List::Util module

my @numbers = (1..10); # Creates an array of numbers from 1 to 10

if (scalar @numbers > 0) { # Checks if the array contains any elements
    my $total = sum(@numbers); # Sums all the elements in the array
    say "The total sum is: $total"; # Prints the total sum
} else {
    say "The array is empty.";
}

foreach my $num (@numbers) { # Loops through each element in the array
    if ($num % 2 == 0) { # Checks if the element is even
        say "$num is an even number.";
    } else {
        say "$num is an odd number.";
    }
}

my %students = ( # Creates a hash (key-value pairs)
    "John" => 25,
    "Sara" => 30,
    "Emily" => 28
);

say "\nStudent Details:";
for my $student (keys %students) { # Loops through each key in the hash
    say "$student is $students{$student} years old."; # Prints the key and corresponding value
}

sub multiply { # Defines a subroutine named 'multiply'
    my ($x, $y) = @_; # Assigns the first and second arguments to $x and $y respectively
    return $x * $y; # Returns the result of multiplying $x and $y
}

say "\nThe product of 4 and 5 is " . multiply(4, 5); # Calls the multiply subroutine and prints the result

__END__ # Denotes the end of the code