# This code snippet uses the Perl programming language
# to create a complex nested data structure and then print its contents.

# Declare a hash reference with two key-value pairs
my $complex_data = {
    name => 'John Doe',
    age => 30,
};

# Add an array reference as a value for the 'hobbies' key
$complex_data->{hobbies} = [
    'reading',
    'coding',
    'hiking',
];

# Add another hash reference as a value for the 'address' key
$complex_data->{address} = {
    street => '123 Main St',
    city => 'New York',
    state => 'NY',
};

# Loop through the keys and values of the main hash reference
foreach my $key (keys %$complex_data) {
    # Print the key and value as a string
    print "$key: $complex_data->{$key}\n";

    # Check the value type, if it is a reference
    if (ref $complex_data->{$key}) {
        # Loop through the keys and values of the nested hash or array reference
        foreach my $nested_key (keys %{$complex_data->{$key}}) {
            # Print the nested key and value as a string
            print "\t$nested_key: $complex_data->{$key}->{$nested_key}\n";
        }
    }
}

# Output:
# name: John Doe
# hobbies: ARRAY(0x7fbd58)
#     0: reading
#     1: coding
#     2: hiking
# address: HASH(0x7f4528)
#     street: 123 Main St
#     city: New York
#     state: NY
#
# In this code snippet, we create a complex data structure using hashes and arrays in Perl. First, we declare a hash reference with two key-value pairs. Then, we add an array reference and another hash reference as the values for 'hobbies' and 'address' keys, respectively. After that, we loop through the keys and values and print them out as strings. We also check for nested references and print the keys and values accordingly. This allows us to access and manipulate nested data structures in Perl.