#!/usr/bin/perl

# This is a comment in PERL

# Declaring and initializing variables using my keyword
my $num1 = 10;
my $num2 = 5;

# Performing arithmetic operations using operators
my $addition = $num1 + $num2;
my $subtraction = $num1 - $num2;
my $multiplication = $num1 * $num2;
my $division = $num1 / $num2;

# Printing the results in a formatted string
print "Addition: $addition\n";
print "Subtraction: $subtraction\n";
print "Multiplication: $multiplication\n";
print "Division: $division\n";

# Creating a conditional statement
if($addition > $num1){
    print "The addition is greater than the first number.\n";
} elsif($subtraction < $num2) {
    print "The subtraction is less than the second number.\n";
} else {
    print "The multiplication is equal to the division.\n";
}

# Using loops to generate a Fibonacci sequence
my $fib_num = 0;
my $prev_num = 0;
my $current_num = 1;
my $fib_limit = 10;

# While loop
while($fib_num < $fib_limit){
    # Calculating the next Fibonacci number
    $fib_num = $prev_num + $current_num;
    # Updating the previous and current numbers
    $prev_num = $current_num;
    $current_num = $fib_num;
    # Printing the result in a formatted string
    print "Fibonacci number: $fib_num\n";
}

# For loop
for(my $i = 0; $i < $fib_limit; $i++) {
    # Calculating the Fibonacci number
    $fib_num = $prev_num + $current_num;
    # Updating the previous and current numbers
    $prev_num = $current_num;
    $current_num = $fib_num;
    # Printing the result in a formatted string
    print "Fibonacci number: $fib_num\n";
}

# Generating a random number between 1 and 10
my $rand_num = int(rand(10)) + 1;
print "Random number between 1 and 10: $rand_num\n";

# Subroutine to determine if a number is prime or not
sub is_prime {
    my $num = shift; # Gets the argument passed to the subroutine
    for(my $i = 2; $i <= $num/2; $i++) {
        # Checks if the number is divisible by any number other than 1 and itself
        if($num % $i == 0) {
            return 0; # Not a prime number
        }
    }
    return 1; # Prime number
}

# Checking if the random number generated is prime or not
if(is_prime($rand_num)) {
    print "$rand_num is a prime number.\n";
} else {
    print "$rand_num is not a prime number.\n";
}

# Creating a hash table
%courses = (1 => "Math", 2 => "Science", 3 => "English");

# Printing the hash table's keys and values
foreach my $key (keys %courses) {
    print "Key: $key, Value: $courses{$key}\n";
}

# Accessing individual elements in the hash table
print "Value at key 2: $courses{2}\n";
print "Value at key 3: $courses{3}\n";

# Adding a new key-value pair to the hash table
$courses{4} = "History";
print "Added a new course, Key: 4, Value: $courses{4}\n";

# Deleting a key-value pair from the hash table
delete $courses{2};
print "Key 2 deleted\n";

# Updating the value of an existing key
$courses{1} = "Computer Science";
print "Updated value at key 1: $courses{1}\n";

# Sorting and printing the hash table in alphabetical order of the values
print "Hash table sorted by values:\n";
foreach my $key (sort {$courses{$a} cmp $courses{$b}} keys %courses) {
    print "Key: $key, Value: $courses{$key}\n";
}

# Declaring a multi-dimensional array
@matrix = ([1, 2, 3], [4, 5, 6], [7, 8, 9]);

# Printing the array using a nested loop
print "2D array:\n";
for(my $row = 0; $row < 3; $row++) {
    for(my $col = 0; $col < 3; $col++) {
        print $matrix[$row][$col] . " "; # Prints each element separated by a space
    }
    print "\n"; # Prints a new line after each row
}

# Accessing individual elements in the array
print "Value at row 2, column 3: $matrix[2][3]\n";

# Adding a new row to the array
push(@matrix, [10, 11, 12]);
print "New row added:\n";
for(my $row = 0; $row < 4; $row++) {
    for(my $col = 0; $col < 3; $col++) {
        print $matrix[$row][$col] . " ";
    }
    print "\n";
}

# Deleting a column from the array
foreach my $row (@matrix) {
    pop(@{$row}); # Removes the last element from each row
}
print "Column deleted:\n";
for(my $row = 0; $row < 4; $row++) {
    for(my $col = 0; $col < 2; $col++) {
        print $matrix[$row][$col] . " ";
    }
    print "\n";
}