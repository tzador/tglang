use strict;         # pragma indicating strict syntax checking
use warnings;       # pragma for warning messages
use Data::Dumper;   # module for printing data structures
use feature qw(say);      # keyword for enabling modern Perl features

my %fruit_basket = (     # declaring a hash called 'fruit_basket'
    apples => 5,
    oranges => 8,
    bananas => 12,
    grapes => 3,
);

foreach my $fruit (keys %fruit_basket){    # looping through the keys in the hash and assigning each key to the variable '$fruit'
    say "I have $fruit_basket{$fruit} $fruit";     # printing the quantity and name of the fruit in the format "I have <quantity> <fruit>"
}

my @fruits = qw( apples oranges strawberries peaches );    # declaring an array called 'fruits' with four elements

foreach my $fruit (@fruits){    # looping through the elements in the array and assigning each element to the variable '$fruit'
    if (exists $fruit_basket{$fruit}){   # checking if the current element in the array exists as a key in the 'fruit_basket' hash
        say "$fruit is already in the fruit basket!";  # printing a message indicating that the fruit is already in the fruit basket
    }
    else {      # if the element does not exist in the hash, execute the following block of code
        $fruit_basket{$fruit} = 2;  # adding the fruit as a key in the hash and assigning a value of 2 to it
        say "Added 2 $fruit to the fruit basket";  # printing a message indicating the fruit was added to the fruit basket
    }
}

foreach my $fruit (sort keys %fruit_basket){   # looping through the keys in the hash in sorted order
    say "There are $fruit_basket{$fruit} $fruit in the fruit basket";   # printing the quantity and name of the fruit in the format "There are <quantity> <fruit> in the fruit basket"
}

print Dumper \%fruit_basket;    # printing the contents of the 'fruit_basket' hash using the Data::Dumper module