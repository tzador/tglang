#!/usr/bin/perl
# This is a comment in PERL
use strict; # pragma used to enforce stricter rules
use warnings; # pragma used to enable warnings
use feature qw(say); # pragma used to enable new features
use PDL; # package used for scientific computation
use Data::Dumper; # package used to view data structures

# Declare variables
my $a = 5;
my @array = ("apple", "orange", "banana");
my %hash = (
    name => "John",
    age => 25,
    occupation => "programmer"
);

# Create a subroutine
sub add {
    my ($x, $y) = @_; # input parameters stored in local variables using destructuring
    return $x + $y;
}

# Create a class
package Person;

sub new {
    my $class = shift; # input parameter stored in scalar variable
    my $self = {
        name => shift,
        age => shift,
        occupation => shift
    };
    bless $self, $class;
    return $self;
}

sub get_name {
    my ($self) = @_; # input parameter stored in local variable using destructuring
    return $self->{name};
}

sub get_age {
    my ($self) = @_;
    return $self->{age};
}

sub get_occupation {
    my ($self) = @_;
    return $self->{occupation};
}

# Create an array with numbers
my @numbers = (1..10); # range operator used to generate numbers from 1 to 10

# Create a scalar variable with a string
my $string = "Hello world!";

# Use if statement to check for condition
if ($a == 5) {
    say "a equals 5";
}

# Use foreach loop to iterate over an array
foreach my $fruit (@array) {
    say "$fruit is a fruit";
}

# Use while loop to iterate over a list of numbers
while (my $number = shift @numbers) { # shift function used to remove first element from array and return its value
    say "$number is a number";
}

# Use for loop to generate and print a multiplication table
for (my $i = 1; $i <= 10; $i++) {
    for (my $j = 1; $j <= 10; $j++) {
        say "$i x $j = " . $i * $j;
    }
}

# Use regular expression to filter out numbers
my $sentence = "This is a sentence with numbers 123 in it.";
my @numbers_in_sentence = $sentence =~ /\d+/g; # regular expression used to match one or more numbers, g modifier to match all occurrences
say Dumper(\@numbers_in_sentence);

# Create a new person object
my $person = Person->new("Jane", 30, "doctor");

# Print out person information using class methods
say $person->get_name() . " is a " . $person->get_age() . " year old " . $person->get_occupation();

# Print out result of adding two numbers
say add(2, 3);