#!/usr/bin/perl
use strict; # strict pragma enforces good coding practices
use warnings; # warnings pragma helps catch common errors

my @numbers = (1, 2, 3, 5, 8); # creates an array of numbers
my %colors = (red => "FF0000", blue => "0000FF", green => "008000"); # creates a hash of colors and their hex codes

for (my $i = 0; $i < scalar @numbers; $i++) { # for loop to iterate through array
    print "Number " . ($i+1) . ": " . $numbers[$i] . "\n"; # prints each number in array with index value
}

foreach my $color (keys %colors) { # foreach loop to iterate through hash keys
    print "Color " . uc($color) . ": " . $colors{$color} . "\n"; # prints each color in hash and its corresponding hex code
}

sub fibonacci { # creates a subroutine for calculating the fibonacci sequence
    my ($n) = @_; # takes in parameter for desired sequence length
    my @sequence = (0, 1); # initializes array for sequence with first two values
    for (my $i = 2; $i < $n; $i++) { # for loop to generate rest of sequence
        $sequence[$i] = $sequence[$i-1] + $sequence[$i-2]; # calculates next value based on previous two values
    }
    return @sequence; # returns the complete sequence
}

my @fibonacci_sequence = fibonacci(10); # calls fibonacci subroutine with desired sequence length

print "The first 10 numbers in the Fibonacci sequence are: @fibonacci_sequence\n"; # prints the fibonacci sequence

__END__ # marks the end of the code