#This code is a complex algorithm that sorts a list of numbers in descending order using the bubble sort method.
sub bubble_sort {  #define subrountine bubble_sort
    my @list = @_;  #assign input list to an array @list
    my $n = scalar @list;  #get the number of elements in the list
    my $swapped;  #declare variable $swapped for tracking if a swap occured
    do {  #start a do while loop
        $swapped = 0;  #set $swapped to 0 at the beginning of each loop
        for (my $i = 1; $i < $n; $i++) {  #start a for loop to iterate through the list
            if ($list[$i-1] < $list[$i]) {  #check if the previous element is smaller than the current element
                ($list[$i-1], $list[$i]) = ($list[$i], $list[$i-1]); #if so, swap the elements
                $swapped = 1; #set $swapped to 1 to indicate a swap occurred
            }
        }
    } while ($swapped);  #continue looping if $swapped is still 1
    return @list; #return the sorted list
}
 
my @unsorted = (9, 5, 2, 8, 1);
my @sorted = bubble_sort(@unsorted);  #call bubble_sort subroutine on the unsorted list
print "@sorted";  #print the sorted list in descending order (9 8 5 2 1)