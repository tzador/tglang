#!/usr/bin/perl

# Code snippet in Perl

# Importing necessary modules
use strict;
use warnings;
use POSIX qw(strftime); # Module for handling date and time in a portable way
use File::Spec; # Module for manipulating file specifications
use Getopt::Long; # Module for processing command line options and arguments

# Setting default values of command line arguments
my $dir = '.'; # Specifies the working directory
my $outfile = 'output.txt'; # Specifies the output file name

# Processing command line options and arguments
GetOptions (
    'dir=s' => \$dir, # Specifies the working directory
    'outfile=s' => \$outfile, # Specifies the output file name
);

# Opening output file in write mode
open (OUT, '>', $outfile) or die "Cannot open $outfile: $!";

# Retrieving current time and date
my $now = strftime("%Y-%m-%d %H:%M:%S", localtime(time));

# Printing header to output file
print OUT "Output generated on $now\n";
print OUT "Working directory: $dir\n";

# Opening working directory
opendir (DIR, $dir) or die "Cannot open $dir: $!";
my @files = readdir (DIR); # Retrieving list of files in working directory

# Closing working directory
closedir (DIR);

# Looping through each file in working directory
foreach my $file (@files) {
    # Skipping '.' and '..' directory entries
    next if ($file =~ /^\.\.?$/);
    
    # Creating full path for current file
    my $filepath = File::Spec->catfile($dir, $file);
    
    # Opening file in read mode
    open (FILE, '<', $filepath) or die "Cannot open $filepath: $!";
    
    # Reading file contents and storing in an array
    my @lines = <FILE>;
    
    # Closing file
    close (FILE);
    
    # Printing file name and number of lines to output file
    print OUT "\nFile: $file\n";
    print OUT "Number of lines: ".scalar(@lines)."\n\n";
}

# Closing output file
close (OUT);