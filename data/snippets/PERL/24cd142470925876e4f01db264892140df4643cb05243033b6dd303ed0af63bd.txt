#!/usr/bin/perl

use strict;
use warnings;

# This is a comment

my $string = "Hello, world!"; # Initializing a string variable with a value
my @numbers = (1, 2, 3, 4, 5); # Initializing an array variable with values
my %hash = ( # Initializing a hash variable with key-value pairs
    "key1" => "value1",
    "key2" => "value2",
    "key3" => "value3"
);

print "The string variable contains: $string\n"; # Using the print function to output the value of a variable
print "The first element of the numbers array is: $numbers[0]\n"; # Accessing array elements using index
print "The value of key2 in the hash is: $hash{'key2'}\n"; # Accessing hash values using keys

# Using control structures
if ($string eq "Hello, world!") { # Conditional statement
    print  "The string is equal to 'Hello, world!'\n";
}
else {
    print "The string is not equal to 'Hello, world!'\n";
}

foreach my $number (@numbers) { # Looping through arrays
    if ($number % 2 == 0) {
        print "$number is an even number\n";
    }
}

# Creating and using subroutines
my $sum = add_numbers(8, 12); # Calling the add_numbers subroutine with two arguments
print "The sum of 8 and 12 is $sum\n"; # Printing the result of the subroutine

# Subroutine to add two numbers and return the sum
sub add_numbers {
    my ($num1, $num2) = @_; # Assigning the arguments passed to the subroutine to variables
    my $result = $num1 + $num2; # Performing addition
    return $result; # Returning the result
}

# Using regular expressions
my $phone_number = "555-1234"; # Initializing a string with a phone number
if ($phone_number =~ /(\d+)-(\d+)/) { # Matching the string with a regex pattern
    print "The area code is $1 and the number part is $2\n"; # Printing the captured groups
}

# Creating and using objects
package Person; # Creating a package

sub new { # Creating a constructor method 
    my $class = shift; # The first argument in a method is always the class or object
    my $self = {
        name => shift,
        age => shift
    };
    bless $self, $class; # Blessing the object with the package name
    return $self; # Returning the object
}

sub get_name { # Creating a method to retrieve the name
    my ($self) = @_; # Assigning the object passed to the method to a variable
    return $self->{name}; # Accessing the name key in the object's hash
}

sub get_age { # Creating a method to retrieve the age
    my ($self) = @_; # Assigning the object passed to the method to a variable
    return $self->{age}; # Accessing the age key in the object's hash
}

# Creating an object and using methods
my $person = Person->new("John Doe", 30); # Creating an object with the name and age parameters
print "The person's name is " . $person->get_name() . " and their age is " . $person->get_age() . "\n"; # Calling methods on the object and printing the results