use strict; # enables strict checking of variable declarations
use warnings; # enables warnings for potential errors
use Data::Dumper; # allows for convenient debugging by printing data structures
my @array = (1, 2, 3, 4, 5); # initializes an array with 5 elements
my %hash = ( # initializes a hash with key-value pairs
    "name" => "John",
    "age" => 24,
    "hobby" => "coding"
);
sub find_even_numbers { # declares a subroutine
    my ($array_ref) = @_; # takes in a reference to an array as input
    my @even_numbers; # initializes an empty array to store the even numbers
    foreach my $num (@$array_ref) { # loops through the elements in the array
        if ($num % 2 == 0) { # checks if the number is even
            push @even_numbers, $num; # adds the even number to the array
        }
    }
    return \@even_numbers; # returns a reference to the array of even numbers
}
my $even_numbers_ref = find_even_numbers(\@array); # calls the subroutine with the array reference as input
print Dumper \%hash; # prints the contents of the hash for debugging
print "Even numbers: @$even_numbers_ref\n"; # prints the even numbers using the array reference