# This code snippet is a basic implementation of a binary search algorithm in Perl.
# It demonstrates how to use recursion and conditional statements in Perl for efficient searching.

# Function to perform binary search on a sorted array
sub binary_search {
    my ($array, $target, $start, $end) = @_; # Declaring parameters passed to the function

    # Calculating mid index to divide the array into two halves
    my $mid = int(($start + $end) / 2);

    # If target is found at mid index, return the mid index
    if ($array->[$mid] == $target) {
        return $mid;
    }

    # If target is smaller than mid element, recursively call the function on the first half of the array
    if ($target < $array->[$mid]) {
        return binary_search($array, $target, $start, $mid - 1);
    }

    # If target is larger than mid element, recursively call the function on the second half of the array
    if ($target > $array->[$mid]) {
        return binary_search($array, $target, $mid + 1, $end);
    }

    # If target is not found, return -1
    return -1;
}

# Example code to test the binary_search function
my @array = (5, 10, 15, 20, 25, 30, 35, 40, 45, 50);
my $target = 30;
my $index = binary_search(\@array, $target, 0, $#array); # Pass the array, target element, start index and end index as parameters
print "Target $target found at index $index" if ($index != -1); # Print the result if target is found
print "Target $target not found in the array" if ($index == -1); # If target is not found, print an error message