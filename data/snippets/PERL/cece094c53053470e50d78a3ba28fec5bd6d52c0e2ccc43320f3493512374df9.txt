sub find_subsequence {

    # This function takes in two arrays and returns
    # a subsequence of the first array that contains
    # all elements from the second array in the same order

    my ($arr1, $arr2) = @_; # assign input arrays to variables

    my $subsequence = ""; # initialize empty subsequence string
    my $index = 0; # initialize index variable

    # Loop through first array
    foreach my $num (@$arr1) {

        # Check if current element is equal to first element of second array
        if ($num == @$arr2[0]) {
            $subsequence .= $num; # append element to subsequence
            $index++; # increment index by 1

            # Loop through remaining elements of second array
            for (my $i = 1; $i < scalar(@$arr2); $i++) {

                # Check if next element in first array is equal to current element in second array
                if (@$arr1[$index] == @$arr2[$i]) {
                    $subsequence .= @$arr1[$index]; # append element to subsequence
                    $index++; # increment index by 1

                    # Check if all elements of second array have been found in first array
                    if ($i == scalar(@$arr2) - 1) {
                        return $subsequence; # return subsequence
                    }
                }
                else {
                    $subsequence = ""; # reset subsequence string
                    $index = 0; # reset index
                    last; # break out of inner loop
                }
            }
        }
    }

    return "No subsequence found"; # if no subsequence found, return error message
}

# Example code to test the function
my @array1 = (1, 2, 3, 4, 5);
my @array2 = (2, 4);

my $result = find_subsequence(\@array1, \@array2);
print "The subsequence is: $result";