use strict;
use warnings;
use JSON::XS; // Importing the JSON::XS module for handling JSON data.
my $json_file = 'data.json'; // Creating a variable to store the name of the JSON file.
my $input = '{"name": "John Smith", "age": 30, "occupation": "Software Engineer"}'; // Sample JSON input for testing.
my $json = JSON::XS->new->utf8->decode($input); // Converting the JSON input into a Perl data structure.
if($json->{occupation} eq 'Software Engineer'){ // Checking if the occupation is "Software Engineer".
    print "Name: " . $json->{name} . "\nAge: " . $json->{age} . " years old\n"; // Printing the name and age of the person.
}
else{ // If the occupation is not "Software Engineer".
    print "Invalid occupation."; // Printing an error message.
}
# Output: 
# Name: John Smith
# Age: 30 years old
# Comment:This code snippet demonstrates how to use the JSON::XS module to handle and manipulate JSON data in Perl. It first imports the module and creates a variable to store the name of the JSON file. Then, a sample JSON input is created and converted into a Perl data structure using the decode() function. The code then checks if the occupation is "Software Engineer" and prints the name and age of the person if it is. Otherwise, it prints an error message.