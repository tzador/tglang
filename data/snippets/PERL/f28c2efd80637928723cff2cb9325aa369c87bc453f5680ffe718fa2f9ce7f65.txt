use strict; # enables strict syntax checking
use warnings; # displays warning messages
use feature qw(say switch); # enables modern features and switches
use Getopt::Long; # allows for command line arguments
use Scalar::Util qw(looks_like_number); # for checking if input is a number
use Data::Dumper; # for debugging and examining data structures
use File::Basename; # allows for manipulating file paths and names
use constant PI => 3.14; # creates a constant variable

# function to calculate circumference of a circle
sub calculate_circumference {
    my $radius = shift; # takes in the radius as an argument
    if(!looks_like_number($radius)){ # checks if radius is a number
        die "Error: Radius is not a number.\n";
    }
    my $circumference = 2 * PI * $radius; # calculates the circumference
    return $circumference; # returns the value
}

# function to calculate area of a circle
sub calculate_area {
    my $radius = shift; # takes in the radius as an argument
    if(!looks_like_number($radius)){ # checks if radius is a number
        die "Error: Radius is not a number.\n";
    }
    my $area = PI * ($radius ** 2); # calculates the area
    return $area; # returns the value
}

# main code
my $radius = 5; # sets the radius to 5
my $circumference = calculate_circumference($radius); # calls the calculate_circumference function
my $area = calculate_area($radius); # calls the calculate_area function

# prints the results
say "For a circle with radius $radius:";
say "Circumference is $circumference";
say "Area is $area";