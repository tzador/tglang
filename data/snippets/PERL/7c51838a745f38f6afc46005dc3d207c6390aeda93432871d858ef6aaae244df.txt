#!/usr/bin/perl
use strict;
use warnings;

# This is a multi-line comment.
# You can write multiple lines inside a set of three double quotes.

# The following code prints "Hello, world!" to the console.
print "Hello, world!\n";

# This is a variable assignment, where the variable $name is assigned the value "John".
my $name = "John";

# The following code uses interpolation to print out a personalized greeting using the $name variable.
print "Hello, $name! Welcome to my program.\n";

# This is a conditional statement that checks the length of the $name variable and prints a different message based on its length.
if (length($name) > 5) {
    print "Hey, $name, that's a long name!";
}
else {
    print "Nice to meet you, $name.";
}

# This is a loop that iterates through a list of numbers from 1 to 10 and prints them out.
for (my $i = 1; $i <= 10; $i++) {
    print "$i\n";
}

# This is an array declaration with multiple elements.
my @colors = ("red", "green", "blue");

# This is a loop that iterates through the colors array and prints out each element.
foreach my $color (@colors) {
    print "$color\n";
}

# This is a subroutine declaration.
sub greeter {
    my $name = shift;  # Shift the first argument into the $name variable.
    print "Hello, $name! Welcome to my program.\n";
}

# This is a function call to the greeter subroutine.
greeter($name);

# This is a hash declaration with key-value pairs.
my %person = (
    name => "Jane",
    age => 25,
    profession => "Teacher",
);

# This is a loop that iterates through the person hash and prints out each key-value pair.
while (my ($key, $value) = each %person) {
    print "$key: $value\n";
}

# This is a regular expression that searches for the word "Perl" in a given string.
my $string = "I love Perl, it's my favorite programming language!";
if ($string =~ /Perl/) {  # =~ is the pattern matching operator.
    print "Yes, $string contains the word Perl.";
}