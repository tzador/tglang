# This code snippet creates a maze using the recursive backtracking algorithm
# and outputs it as a 2D array.

# Defining variables for maze dimensions
my $width = 10;
my $height = 10;

# Creating 2D array for maze
my @maze;

# Initializing all cells as walls
for (my $row = 0; $row < $height; $row++) {
    for (my $column = 0; $column < $width; $column++) {
        $maze[$row][$column] = "#";
    }
}

# Choosing random cell as starting point
my $start_row = int(rand($height));
my $start_column = int(rand($width));
$maze[$start_row][$start_column] = " ";

# Using recursive backtracking algorithm to create maze
generate_maze($start_row, $start_column);

# Subroutine for recursive backtracking
sub generate_maze {
    my ($row, $column) = @_;

    # Creating array to store possible directions to move
    my @directions = ("N", "E", "S", "W");

    # Shuffling directions array for random order
    @directions = shuffle(@directions);

    # Looping through possible directions
    foreach my $direction (@directions) {
        # Calculating new row and column coordinates based on chosen direction
        my $new_row = $row;
        my $new_column = $column;

        if ($direction eq "N") {
            $new_row--;
            $new_row--;
        } elsif ($direction eq "E") {
            $new_column++;
            $new_column++;
        } elsif ($direction eq "S") {
            $new_row++;
            $new_row++;
        } elsif ($direction eq "W") {
            $new_column--;
            $new_column--;
        }

        # Checking if new coordinates are within bounds and not already visited
        if ($new_row >= 0 && $new_row < $height && $new_column >= 0 && $new_column < $width && $maze[$new_row][$new_column] eq "#") {
            # Removing walls between current and new cell
            $maze[$new_row + int(($row - $new_row)/2)][$new_column + int(($column - $new_column)/2)] = " ";

            # Marking new cell as visited
            $maze[$new_row][$new_column] = " ";

            # Recursive call to explore new cell
            generate_maze($new_row, $new_column);
        }
    }
}

# Printing maze as 2D array
foreach my $row (@maze) {
    print join("", @$row), "\n";
}