# Basic Permutations Function
# Given an array of values, this function will return all possible permutations of those values.

sub permutations {
    my ($list) = @_; # assign input array to variable
    
    if ( scalar @$list == 0 ){ # base case, if array is empty, return empty array
        return @$list;
    }
    elsif (scalar @$list == 1){ # base case, if array only has one element, return an array with that element
        return [$list];
    }
    else { # recursive case
        my @permutations; # create empty array to store permutations
        foreach my $element ( @$list ){ # loop through elements in input array
            my @remaining_elements = grep { $_ ne $element } @$list; # create new array without the current element
            my @sub_permutations = permutations (\@remaining_elements); # recursively call permutations function on remaining elements
            foreach my $sub_permutation (@sub_permutations){ # loop through sub-permutations
                push @permutations, [$element, @$sub_permutation]; # add current element to beginning of sub-permutation and push to permutations array
            }
        }
        return @permutations; # return array of permutations
    }
}

# Example Usage:
my @values = (1,2,3);
my @permutations = permutations(\@values);
print "@permutations"; # prints "1 2 3, 1 3 2, 2 1 3, 2 3 1, 3 1 2, 3 2 1"