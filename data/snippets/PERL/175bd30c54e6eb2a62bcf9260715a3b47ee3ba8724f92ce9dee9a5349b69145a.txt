## This code snippet creates a calendar using PERL's DateTime module.

## Import necessary modules
use DateTime;
use DateTime::Calendar::Month;

## Set the current date
my $current_date = DateTime->now();

## Create a DateTime object for the first day of the month
my $first_day = DateTime->new(
    year   => $current_date->year(),
    month  => $current_date->month(),
    day    => 1
);

## Create a DateTime object for the last day of the month
my $last_day = $first_day->clone()->truncate( to => 'month' )->add( days => 31 );

## Create a DateTime::Calendar::Month object with the first and last day of the month
my $calendar = DateTime::Calendar::Month->new(
    month      => $current_date->month(),
    year       => $current_date->year(),
    start_day  => $first_day,
    end_day    => $last_day
);

## Print the calendar header
print "| Sun | Mon | Tue | Wed | Thu | Fri | Sat |\n";

## Loop through each day in the month and print the date
foreach my $day ( $calendar->days() ) {
    ## Create a DateTime object for the current day
    my $current_day = DateTime->new(
        year   => $calendar->year(),
        month  => $calendar->month(),
        day    => $day
    );
    
    ## Use DateTime's strftime method to format the date as "DD"
    my $formatted_date = $current_day->strftime("%d");
    
    ## Pad single digit dates with a space for formatting
    if ( length($formatted_date) == 1 ) {
        $formatted_date = " " . $formatted_date;
    }
    
    ## Check if the current day is today, and if so, add an "*" to the date
    if ( $current_day->day() == $current_date->day() ) {
        $formatted_date .= "*";
    }
    
    ## Print the date with "|" on either side for formatting
    print "| " . $formatted_date . " ";
    
    ## If it's Saturday, print a new line for the next row in the calendar
    if ( $current_day->day_of_week() == 6 ) {
        print "|\n";
    }
}

## Close the final row of the calendar and print an empty line
print "| " . " " x 7 . "|\n\n";