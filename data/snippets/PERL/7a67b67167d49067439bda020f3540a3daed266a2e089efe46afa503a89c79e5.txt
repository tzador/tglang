# define your variables and assign them different values
my $num = 5;
my $str = "Hello";
my @arr = (1, 2, 3);
my %hash = ('key1' => 'value1', 'key2' => 'value2');

# create a subroutine that takes in a number as an argument
sub square {
    my $num = shift; # assign the argument to a local variable
    my $result = $num * $num; # perform some computation on the variable
    return $result; # return the result
}

# use a for loop to iterate through the array
for my $num (@arr) {
    print "Number: $num\n"; # print out the current element in the array
    my $squared = square($num); # call the square subroutine and pass in the current element
    print "Squared: $squared\n"; # print out the result of the square subroutine
}

# use a while loop to iterate through the hash
while (my ($key, $value) = each %hash) {
    print "Key: $key, Value: $value\n"; # print out the current key and value pair
}

# use a conditional statement to check if the string variable contains a specific word
if ($str =~ /hello/i) {
    print "The string variable contains the word 'hello'\n"; # print a message if the condition is true
} else {
    print "The string variable does not contain the word 'hello'\n"; # print a message if the condition is false
}

# use a regex to replace all occurrences of a string in another string
my $new_str = "Hello, my name is Bob.";
$new_str =~ s/Bob/John/; # replace all instances of 'Bob' with 'John'
print "New string: $new_str\n"; # print the new string with the replacement

# use the map function to perform some operation on every element in a list
my @nums = (1, 2, 3, 4, 5);
my @doubled_nums = map { $_ * 2 } @nums; # doubles every element in the nums array
print "Doubled numbers: @doubled_nums\n"; # print the new array with the doubled numbers