use strict; # enable strict mode for better code quality

# create a variable with a long and complex name
my $long_and_complex_variable_name = "This is a long and complex variable.";

# create a function that takes in two parameters and returns their sum
sub add_numbers {
    my ($num1, $num2) = @_; # assign the parameters to variables
    my $sum = $num1 + $num2; # perform addition
    return $sum; # return the result
}

# create a loop to iterate through a range of numbers
for (my $i = 1; $i <= 10; $i++) {
    print "The current number is: $i\n"; # print the current number
}

# split a string into an array based on a specific delimiter
my $string = "Hello,World,I,am,learning,PERL";
my @array = split /,/, $string; # split the string at every comma and assign the elements to an array

# use regular expressions to search for a specific pattern in a string
my $pattern = "learn";
if ($string =~ /$pattern/) { # check if the string matches the pattern
    print "The string '$string' contains the word '$pattern'\n";
}

# declare and initialize a hash with key-value pairs
my %students = (
    "John" => 18,
    "Jane" => 20,
    "Alex" => 22,
);

# loop through the hash and print out the key-value pairs
foreach my $name (keys %students) {
    print "Student $name is $students{$name} years old.\n";
}

# use modules to add additional functionality
use Math::Complex; # include the Math::Complex module
my $complex_number = Math::Complex->make(3, 4); # create a complex number
my $square = $complex_number->csquare(); # perform the complex square operation
print "The square of $complex_number is $square\n";