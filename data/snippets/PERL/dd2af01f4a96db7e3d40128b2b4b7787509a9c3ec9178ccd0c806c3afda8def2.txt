# This program demonstrates a complex sorting algorithm
my @array = ("four", "one", "eight", "two", "six", "three", "nine", "five", "seven");
my @indices = (0..$#array);

# This sub-routine recursively sorts the array using a divide and conquer approach
sub complexSort {
    my ($arrayRef, $indexRef) = @_;
    return unless @$arrayRef > 1;   # Base case: If the array has 1 or less elements, it is already sorted
 
    # Partition the array into two sub-arrays by choosing a pivot element
    my $pivot = $arrayRef->[int(rand(@$arrayRef))];
    my (@left, @right);
    foreach my $index (@$indexRef) {
        if ($arrayRef->[$index] le $pivot) {
            push @left, $index;
        } else {
            push @right, $index;
        }
    }
 
    # Sort the left and right sub-arrays using recursion
    complexSort($arrayRef, \@left);
    complexSort($arrayRef, \@right);
 
    # Merge the two sorted sub-arrays back into the original array using a modified merge sort algorithm
    my $i = $indexRef->[0];
    foreach my $leftIndex (@left) {
        $arrayRef->[$i] = $array[$leftIndex];
        $i++;
    }
    foreach my $rightIndex (@right) {
        $arrayRef->[$i] = $array[$rightIndex];
        $i++;
    }
    my $j = 0;
    for my $k ($indexRef->[0] .. $indexRef->[-1]){
        if ($arrayRef->[$k] eq $arrayRef->[$j]) {
            $indexRef->[$k] = $j;
            $j++
        }
    }
    return;
}

# Call the sub-routine to sort the array and output the result
complexSort(\@array, \@indices);
print "@array\n";  # Output: eight four one seven five three two nine six