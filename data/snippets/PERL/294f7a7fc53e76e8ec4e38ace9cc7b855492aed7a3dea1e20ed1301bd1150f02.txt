#!usr/bin/perl
use strict; # strict pragma for stricter variable scoping rules
use warnings; # warnings pragma for showing compile-time warnings
#--
my $num = 5; # declares a scalar variable and assigns the value 5 to it
my @arr = (1, 2, 3, 4); # declares an array variable containing 4 integer elements
my %hash = ( # declares a hash variable
    "key1" => "value1", # assigns key-value pairs to the hash
    "key2" => "value2",
    "key3" => "value3",
);
#--
sub add_numbers { # defines a subroutine named 'add_numbers'
    my ($x, $y) = @_; # declares two scalar variables and assigns the values passed to the subroutine to them
    return $x + $y; # returns the sum of the two variables
}
#--
print "The value of the scalar variable is $num \n"; # prints the value of the scalar variable
print "The values in the array are @arr \n"; # prints the values in the array
print "The values in the hash are: \n"; # prints the string
foreach my $key (keys %hash) { # starts a loop to iterate through the keys in the hash
    print "$key: $hash{$key}\n"; # prints each key-value pair in the hash
}
#--
my $sum = add_numbers($num, $arr[2]); # calls the subroutine with the scalar variable and third element in the array as arguments
print "The sum of the scalar variable and third element in the array is $sum"; # prints the result of the subroutine