#!/usr/bin/perl
#
# Package definition: name your package
#
package ComplexCode;
use strict;
use warnings;

# Importing modules
use Some::Module qw( function1 function2 );
use Another::Module qw( function3 );

##
# Global variables
#
my $counter;            # This is a scalar variable
my @array;              # This is an array variable
my %hash;               # This is a hash variable

##
# Function definitions
#

# This function takes in two numbers and returns their sum
sub add_numbers{
    my ($num1, $num2) = @_;      # Using list assignment to retrieve the parameters passed to the function
    my $sum = $num1 + $num2;     # Adding the numbers together
    return $sum;                 # Returning the sum as the function's output
}

# This function checks if a string is a palindrome
sub is_palindrome {
    my $string = shift;          # Using shift to retrieve the first argument passed to the function
    my $reverse = reverse $string;   # Reversing the string using the built-in reverse function
    if ($reverse eq $string) {        # Checking if the reversed string is equal to the original string
        return 1;                     # If so, return 1 (true)
    }
    else {
        return 0;                     # Otherwise, return 0 (false)
    }
}

##
# Main code
#

# Getting user input for num1 and num2
print "Enter a number: ";
my $num1 = <STDIN>;                # Using the STDIN filehandle to retrieve user input
chomp $num1;                 # Removing the newline character at the end of the input
print "Enter another number: ";
my $num2 = <STDIN>;
chomp $num2;

# Calling the add_numbers function and printing the result
my $result = add_numbers($num1,$num2);
print "The sum of $num1 and $num2 is $result\n";

# Getting user input for a string
print "Enter a string: ";
my $string = <STDIN>;
chomp $string;

# Calling the is_palindrome function and printing the result
my $palindrome = is_palindrome($string);
if ($palindrome) {        # Checking if the result is true
    print "$string is a palindrome\n";
}
else {                    # Otherwise, it is false
    print "$string is not a palindrome\n";
}

# Creating a loop to iterate through the elements of an array
my @colors = qw( red blue green yellow );
my $index = 0;   # Setting the initial index to 0
while ($index < scalar @colors) {   # Using scalar to get the size of the array and loop while the index is smaller
    print "The color at index $index is $colors[$index]\n";
    $index++;                     # Incrementing the index to move to the next element
}

# Creating a hash with key-value pairs
$hash{'fruit'} = 'apple';
$hash{'vegetable'} = 'broccoli';
$hash{'dessert'} = 'cake';
# Looping through the keys and printing the corresponding values
foreach my $key (keys %hash) {
    print "The $key is $hash{$key}\n";
}

# Using a module function to print a random number
my $random_number = Some::Module::function1();
print "The random number is $random_number\n";

# Using a module function with an alias
my $result = function3();
print "The result of function3() is $result\n";

# End of program