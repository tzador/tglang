#!/usr/bin/perl

# This program will generate a random password using a combination of numbers, letters, and symbols
# The user can choose the length of the password and the number of special characters included

use strict;
use warnings;

# Prompt user for desired password length
print "Enter desired password length: ";
my $length = <STDIN>;
chomp $length;

# Prompt user for number of special characters
print "Enter number of special characters to include: ";
my $special_characters = <STDIN>;
chomp $special_characters;

# List of possible characters to include in password
my @chars = qw/a b c d e f g h i j k l m n o p q r s t u v w x y z
			  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
			  0 1 2 3 4 5 6 7 8 9
			  ! @ # $ % ^ & * ( ) _ - + = [ ] { } | ; : ' " , . ? < > / /;

# Shuffle array of characters
my @shuffled_chars = shuffle(@chars);

# Generate random password using desired length and number of special characters
my $password = generate_password($length, $special_characters);

# Print the generated password
print "Your password is: $password\n";

# Function to generate password using desired length and number of special characters
sub generate_password {
	# Get arguments
	my ($length, $special_characters) = @_;
	# Generate random string of length $length
	my $string = join('', @shuffled_chars[0 .. $length - 1]);
	# Insert $special_characters randomly into the string
	for (my $i = 0; $i < $special_characters; $i++) {
		my $random_position = int(rand(length($string)));
		my $random_char = $shuffled_chars[rand @shuffled_chars];
		substr($string, $random_position, 0, $random_char);
	}
	# Return the generated password
	return $string;
}

# Function to shuffle an array
sub shuffle {
	# Get arguments
	my @array = @_;
	# Loop through elements of array
	for (my $i = @array; --$i;) {
		# Swap element at index $i with random element preceding it
		my $j = int(rand($i + 1));
		next if $i == $j;
		@array[$i, $j] = @array[$j, $i];
	}
	# Return the shuffled array
	return @array;
}