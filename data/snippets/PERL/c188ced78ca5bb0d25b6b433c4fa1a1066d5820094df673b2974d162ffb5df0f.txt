#!/usr/bin/perl

use strict;   # strict pragma enforces lexical scoping and other best practices in Perl
use warnings; # warnings pragma enables additional warning messages

# this is a subroutine that calculates the nth fibonacci number
sub fibonacci {
    my $number = shift; # the first argument passed to the subroutine
    if ($number < 2) {  # base case: if number is less than 2, return itself
        return $number;
    } else {            # recursive case: calculate fibonacci number by adding previous two numbers
        return fibonacci($number-1) + fibonacci($number-2);
    }
}

# this is a subroutine that prints a message with the computed fibonacci number
sub print_fibonacci_message {
    my $number = shift;
    my $fibonacci = fibonacci($number); # calculate fibonacci number using the fibonacci subroutine
    print "The $number-th fibonacci number is $fibonacci\n"; # print message with calculated fibonacci number
}

# main program
print "Enter a number: ";
my $number = <STDIN>; # take user input
chomp $number; # remove newline character from user input
print_fibonacci_message($number); # call subroutine to print message with fibonacci number