# This code snippet generates a list of prime numbers up to a user-defined limit
# This uses the Sieve of Eratosthenes algorithm
# Adapted from https://www.geeksforgeeks.org/sieve-of-eratosthenes-in-perl/

use strict;
use warnings;

# Function to generate prime numbers using Sieve of Eratosthenes
# Takes in a limit as parameter and returns a list of prime numbers up to that limit
sub generate_prime_list {
    my $limit = shift; # Limit provided by user
    my $max = $limit - 1; # Max potential prime number
    my @primes = (); # List to store prime numbers
    my @is_prime = (1) x $max; # Array to track if number is prime or not, initialized to all true 

    # Loop through numbers starting from 2 (since 1 is not prime)
    for (my $i = 2; $i * $i <= $limit; $i++) {
        # If number is marked as prime
        if ($is_prime[$i]) {
            # Mark all multiples of $i as not prime (by setting 0)
            for (my $j = $i * 2; $j <= $max; $j += $i) {
                $is_prime[$j] = 0;
            }
        }
    }

    # Loop through array again to find all prime numbers
    for (my $i = 2; $i <= $max; $i++) {
        # If element is still marked as prime
        if ($is_prime[$i]) {
            # Add to list of primes
            push @primes, $i;
        }
    }

    # Return list of primes
    return @primes;
}

# Prompt user for limit
print "Enter the maximum limit: ";
my $limit = <STDIN>;
chomp $limit; # Remove newline from input

# Generate prime list
my @result = generate_prime_list($limit);

# Print list of primes
print "Prime numbers up to $limit are: @result";