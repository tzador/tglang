#!usr/bin/perl 

use strict; # this line enables strict mode for better coding practices
use warnings; # this line enables warnings to catch potential bugs

# this is a variable holding a string of text
my $str = "Hello, world!"; 

# this is a variable holding an array of numbers
my @numbers = (1, 2, 3, 4, 5); 

# this is a loop that iterates through the array and prints each number
foreach my $num (@numbers) { 
    print "$num\n"; # prints the number and moves to next line
}

# this is a subroutine that takes in two numbers and returns their product
sub multiply { 
    my ($num1, $num2) = @_; # these are the input parameters received by the subroutine
    return $num1 * $num2; # returns the product of the two numbers
}

# this is a variable holding the result of the subroutine with input parameters of 2 and 3
my $product = multiply(2, 3); 

print "The product of 2 and 3 is $product.\n"; # prints the result statement with the product value

# this is an if statement that checks if the product is greater than 10
if ($product > 10) { 
    print "The product is greater than 10.\n"; # if the statement is true, prints the message
} elsif ($product < 10) { # if not, checks if the product is less than 10
    print "The product is less than 10.\n"; # if this statement is true, prints the message
} else { # if both if and elsif statements are false, executes the else statement
    print "The product is equal to 10.\n"; # prints the message
}

# this is a hash variable holding key-value pairs of names and their corresponding ages
my %ages = ("John" => 25, "Mary" => 30, "Bob" => 45); 

# this is a for loop that iterates through the keys and values of the hash
foreach my $name (keys %ages) { 
    print "$name is $ages{$name} years old.\n"; # prints the full sentence for each name and age pair
}

# this is a regular expression that checks if the string contains a comma
if ($str =~ /,/) { 
    print "The string contains a comma.\n"; # if the statement is true, prints the message
} else { # if false, executes the else statement
    print "The string does not contain a comma.\n"; # prints the message
}

# this is a try-catch block that will try to open a file and catch potential errors
eval { 
    open (my $file, '<', 'input.txt') or die $!; # tries to open the file, if fails, throws an error
}; # the catch block 
if ($@) { # checks if there was an error captured by the try block
    print "Unable to open file: $@"; # if true, prints the error message
}