# This is a complex function in Perl that takes in two arrays and returns the
# concatenated result
sub concat_arrays {
    my ($array1, $array2) = @_; # Declaring two array variables, assigning the input arrays to them using list assignment
    my @result = (); # Declaring a new empty array for the result of concatenation

    for (my $i = 0; $i < scalar(@$array1); $i++) { # Using a for loop to iterate through the first array
        push @result, $array1->[$i]; # Using the push function to append the element at index $i to the result array
    }

    for (my $j = 0; $j < scalar(@$array2); $j++) { # Using another for loop to iterate through the second array
        push @result, $array2->[$j]; # Appending each element of the second array to the result array
    }

    return @result; # Returning the concatenated array
}

# Example usage of the function
my @array1 = (1, 2, 3, 4);
my @array2 = (5, 6, 7, 8);
my @concatenated = concat_arrays(\@array1, \@array2); # Calling the function with two array references as arguments
print "@concatenated"; # Printing the result array, which should be "1 2 3 4 5 6 7 8" in this case