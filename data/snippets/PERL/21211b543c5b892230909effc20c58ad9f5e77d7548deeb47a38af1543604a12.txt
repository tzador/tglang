#!/usr/bin/perl

# This is a comment in Perl

use strict; # This enforces stricter syntax and catch common errors
use warnings; # This enables helpful warning messages

my $x = 10; # This declares and initializes a variable with the value 10
my $y; # This declares a variable without any initial value

print "The value of x is: $x\n"; # This prints the value of x on the command line

if ($x < 5) { # This is a conditional statement
    print "x is less than 5\n"; # This prints a message if the condition is met
}
else { # This is the else statement for the conditional
    print "x is greater than or equal to 5\n"; # This prints a message if the condition is not met
}

for (my $i = 0; $i < $x; $i++) { # This is a for loop that runs $x times
    print "The value of i is: $i\n"; # This prints the current value of i in each iteration
}

while ($x > 0) { # This is a while loop that runs as long as the condition is true
    print "The value of x is: $x\n"; # This prints the current value of x in each iteration
    $x--; # This decrements the value of x by 1
}

my @array = (1, 2, 3, 4, 5); # This is an array with 5 elements
print "The third element of the array is: $array[2]\n"; # This prints the third element of the array

foreach my $element (@array) { # This is a foreach loop that iterates through each element in the array
    print "The value of element is: $element\n"; # This prints the current value of the element
}

sub add_numbers { # This is a subroutine
    my $num1 = $_[0]; # This assigns the first argument passed to the subroutine to a variable
    my $num2 = 5; # This assigns a constant value to a variable
    my $sum = $num1 + $num2; # This adds the two numbers
    return $sum; # This returns the sum
}

print "The sum of x and 5 is: " . add_numbers($x) . "\n"; # This calls the subroutine and prints the result

__END__

This is the end of the Perl code snippet.