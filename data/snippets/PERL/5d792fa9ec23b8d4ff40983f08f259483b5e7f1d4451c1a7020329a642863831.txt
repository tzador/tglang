# This code snippet generates a random alphabetic string of given length
use strict;
use warnings;
use List::Util qw(shuffle);
use List::MoreUtils qw(firstidx);

# Function to generate a random string
sub generate_random_string {
    my ($length) = @_; # Input length of string
    my @chars = ('A'..'Z', 'a'..'z'); # Array of alphabets
    my $random_string = ""; # Variable to store the random string
    for(my $i = 0; $i < $length; $i++) {
        # Generate random index to select character from array
        my $index = int(rand(scalar(@chars)));
        # Append the selected character to the string
        $random_string .= $chars[$index];
    }
    return $random_string;
}

# Function to check if a string is already sorted
sub is_sorted {
    my (@array) = @_; # Input array
    my $sorted = 1; # Variable to store sorting status, default to 1 (true)
    for (my $i = 0; $i < $#array; $i++) {
        # Get index of first alphabetically greater character
        my $index = firstidx { $array[$i] gt $_ } @array[$i+1..$#array];
        if ($index != -1) {
            $sorted = 0; # Set sorting status to 0 (false)
            last; # Exit loop if not sorted
         }
    }
    return $sorted;
}

# Take user input for length of random string and generate until sorted
print "Enter length of random string: ";
my $length = <STDIN>;
chomp($length); # Remove new line character
my $string = generate_random_string($length); # Generate random string
print "Randomly generated string: $string\n";
while (!is_sorted(split //, $string)) { # Check if string is sorted
    $string = generate_random_string($length); # Generate new random string
    print "New random string: $string\n";
}
print "Final sorted string: $string\n"; # Output final sorted string