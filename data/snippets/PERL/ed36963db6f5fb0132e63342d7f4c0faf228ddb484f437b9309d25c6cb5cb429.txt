# This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm

# Define a subroutine to check if a number is prime
sub is_prime {
    my $num = shift; # accept input number
    my $sqrt = int(sqrt($num)); # find square root of number and round down
    for (my $i = 2; $i <= $sqrt; $i++) { # loop from 2 to square root of number
        if ($num % $i == 0) { # check if number is divisible by current loop value
            return 0; # if divisible, not prime
        }
    }
    return 1; # if not divisible, prime
}

# Define a subroutine to generate a list of prime numbers up to a given limit
sub generate_primes {
    my $limit = shift; # accept input limit
    my @primes; # initialize empty array to hold primes
    my @numbers = (0..$limit); # initialize array with numbers from 0 to limit
    for (my $i = 2; $i <= $limit; $i++) { # loop through numbers from 2 to limit
        if ($numbers[$i]) { # check if current number is not marked as composite
            push @primes, $i; # if not marked, add to list of primes
            for (my $j = $i+$i; $j <= $limit; $j += $i) { # mark multiples of current prime as composite
                $numbers[$j] = 0;
            }
        }
    }
    return @primes; # return list of primes
}

# Accept input from user for limit of prime numbers
print "Enter the limit for prime number generation: ";
my $limit = <STDIN>; # read input and store in variable

chomp($limit); # remove newline character from input

# Validate input
while ($limit !~ /^[0-9]+$/ || $limit < 2) { # check if input is a positive integer greater than 2
    print "Invalid input. Please enter a positive integer greater than 2: ";
    $limit = <STDIN>; # read new input
    chomp($limit); # remove newline character
}

# Generate list of prime numbers up to given limit
my @primes = generate_primes($limit);

# Print list of prime numbers
print "List of prime numbers up to $limit:\n";
print join(', ', @primes); # join array elements with comma and space
print "\n";