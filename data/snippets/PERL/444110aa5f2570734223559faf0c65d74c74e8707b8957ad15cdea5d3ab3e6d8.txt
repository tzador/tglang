# This code snippet is using the PERL programming language to generate a random password with a complex pattern
use strict; # Ensures strict rules are followed in the code
use warnings; # Displays warnings for potential errors
use Digest::SHA qw(sha256_hex); # Uses the sha256 hashing algorithm for password generation
 
# Define the password length
my $length = 10;
 
# Define arrays for each character set
my @numbers = (0..9);
my @upper_case = ('A'..'Z');
my @lower_case = ('a'..'z');
my @special_chars = ('!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '-', '+', '=', '{', '}', '[', ']');
 
# Create an empty array to store characters for password
my @password;
 
# Randomly select 2 numbers, 2 upper case characters, 2 lower case characters, and 2 special characters
# and add them to the password array
push @password, $numbers[rand @numbers] for 1..2;
push @password, $upper_case[rand @upper_case] for 1..2;
push @password, $lower_case[rand @lower_case] for 1..2;
push @password, $special_chars[rand @special_chars] for 1..2;
 
# Generate a random number to determine the starting index for the password array
my $start_index = int(rand(10));
 
# Shuffle the password array using the Fisher-Yates algorithm
for (my $i = $#password; $i > 0; $i--) {
    my $j = int(rand($i+1));
    @password[$i, $j] = @password[$j, $i];
}
 
# Convert the password array into a string
my $password = join("", @password);
 
# Generate a random salt for added security
my $salt = rand();
 
# Hash the password using sha256
my $hashed_password = sha256_hex($password.$salt);
 
# Print the password and the hashed password
print "Generated Password: $password\n";
print "Hashed Password: $hashed_password\n";