#!/usr/bin/perl
use strict; # turn on strict mode for safer code
use warnings; # turn on warnings for debugging
use Data::Dumper; # include Data::Dumper module for easier data dumping
 
my $a = 5; # declare and initialize variable $a to value 5
 
# create a subroutine called hello that takes in an argument $name
sub hello {
    my $name = shift; # assign argument to variable $name
 
    # print statement that greets the given name
    print "Hello, $name!\n"; # \n is for line break
 
    # set variable $b equal to $a plus 2
    my $b = $a + 2;
 
    # call another subroutine within hello
    add_numbers($b, 10); # pass variables $b and 10 as arguments
 
    # print statement to show that $b has been changed within add_numbers
    print "\$b is now equal to $b!\n";
}
 
# create another subroutine called add_numbers that takes in two arguments $num1 and $num2
sub add_numbers {
    my ($num1, $num2) = @_; # assign arguments to array called @_
 
    # add the two numbers and assign the result to $sum
    my $sum = $num1 + $num2;
 
    # print statement showing the result
    print "The sum of $num1 and $num2 is $sum.\n";
 
    # change global variable $a to $sum
    $a = $sum;
}
 
# call subroutine hello and pass in name "John"
hello("John");
 
# print statement to show that $a has been changed within hello and add_numbers
print "\$a is now equal to $a!\n";
 
# example of using Data::Dumper module to dump a hash data structure
my %hash = (
    fruits => ["apple", "banana", "orange"],
    vegetables => ["carrot", "broccoli", "spinach"]
);
 
print Dumper(\%hash); # Dumper function converts the hash to a string for printing
 
# example of using for loop to iterate through a list of numbers
for (my $i = 1; $i <= 10; $i++) {
    print "This is number $i\n";
}