# This is a code snippet in PERL, a high-level, general-purpose programming language. It stands for "Practical Extraction and Reporting Language".
# Here we define a subroutine that performs a merge sort on an array of integers.
# The subroutine is called "mergeSort" and takes in two parameters: the array to be sorted and the size of the array.

sub mergeSort {
  my ($arr, $size) = @_;
	
  my $mid = $size / 2;
	
  # Base case: if size of array is 1, return the array
  return $arr if $size == 1;
	
  # Split the array into two halves
  my @left = @{$arr}[0 .. $mid-1];
  my @right = @{$arr}[$mid .. $size-1];
	
  # Recursively call mergeSort on each half of the array
  mergeSort(\@left, $mid);
  mergeSort(\@right, $size-$mid);
	
  # Merge the two sorted halves back together
  my $i = 0; # index for left half
  my $j = 0; # index for right half
  my $k = 0; # index for merged array
	
  while ($i < $mid && $j < $size-$mid) {
    if ($left[$i] <= $right[$j]) {
      $arr[$k] = $left[$i];
      $i++;
    } else {
      $arr[$k] = $right[$j];
      $j++;
    }
    $k++;
  }
	
  # Copy any remaining elements of left half into the merged array
  while ($i < $mid) {
    $arr[$k] = $left[$i];
    $i++;
    $k++;
  }
	
  # Copy any remaining elements of right half into the merged array
  while ($j < $size-$mid) {
    $arr[$k] = $right[$j];
    $j++;
    $k++;
  }

  # Return the merged and sorted array
  return @arr;
}

# Example of how to use the subroutine:

my @unsorted = (5, 2, 9, 1, 3, 7, 4, 8, 6);
my @sorted = mergeSort(\@unsorted, scalar @unsorted); # pass in reference to unsorted array and its size

print join(",", @sorted); # output: 1,2,3,4,5,6,7,8,9