# This is a comment in PERL
use strict; # This ensures strict variable declaration and usage
use warnings; # This turns on warnings for potential errors

# This is a multi-line statement in PERL, using here-document syntax
my $multi_line = <<END_OF_STATEMENT;
This statement is spread
across multiple lines
END_OF_STATEMENT

# This is a subroutine (function) in PERL
sub add_numbers {
    # Parameters are stored in the special array @_
    my ($num1, $num2) = @_;

    # Check if parameters are numeric
    unless ($num1 =~ /^\d+$/ && $num2 =~ /^\d+$/) {
        die "Parameters must be numbers!";
    }

    # Add the numbers and return the result
    return $num1 + $num2;
}

# Call the subroutine with two numbers as arguments
my $sum = add_numbers(10, 5);
print "The sum is: $sum\n";

# This is an array in PERL
my @fruits = ("apple", "banana", "orange");

# Loop through the array and print out each value
foreach my $fruit (@fruits) {
    print "$fruit\n";
}

# Create a hash (key-value pair) in PERL
my %ages = (
    "John" => 25,
    "Sarah" => 31,
    "Emily" => 19
);

# Access a specific value by key
print "John's age is: $ages{'John'}\n";

# This is a regular expression in PERL
my $string = "Hello World!";
if ($string =~ /Hello/) {
    print "The string starts with 'Hello'\n";
}

# This is a file input/output operation in PERL
# Open a file for reading
my $file = "my_file.txt";
open(my $fh, '<', $file) or die "Could not open file: $!";

# Read the contents of the file and store it in a variable
my $file_contents;
while (my $line = <$fh>) {
    $file_contents .= $line;
}

# Close the file
close($fh);

# Print out the contents of the file
print "The file contents are:\n$file_contents\n";