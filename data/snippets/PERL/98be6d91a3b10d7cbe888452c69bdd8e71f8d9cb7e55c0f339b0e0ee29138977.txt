use strict; # turns on strict mode, enforcing good coding practices
use warnings; # enable compiler warnings for possible errors
use Try::Tiny; # import the Try::Tiny module for exception handling

my $num = 42; # create a scalar variable with a value of 42

# create a subroutine that doubles the value passed in as a parameter
sub double {
    my $value = shift; # retrieve the first parameter passed in
    my $result = $value * 2; # perform the doubling operation
    return $result; # return the result
}

# create a subroutine that divides the first parameter by the second parameter
sub divide {
    my ($numerator, $denominator) = @_; # retrieve the first and second parameters passed in
    try { # attempt to execute the following code
        my $result = $numerator / $denominator; # perform the division operation
        return $result; # return the result
    } catch { # catch any exceptions
        print "Division by zero is not allowed.\n"; # print an error message
    }
}

# call the double subroutine and print the result
my $doubled = double($num);
print "The double of $num is $doubled\n";

# attempt to call the divide subroutine with the values 10 and 5
my $divided = divide(10, 5);
print "10 divided by 5 is $divided\n";

# attempt to call the divide subroutine with the values 10 and 0
my $divided_by_zero = divide(10, 0);
print "10 divided by 0 is $divided_by_zero\n"; # this line will not be executed due to the exception caught in the divide subroutine