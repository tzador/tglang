#!/usr/bin/perl

use strict;
use warnings;

# This is a comment in the PERL program
# It will not be executed by the compiler

# Variables can be declared using the "my" keyword
my $string = "Hello World";

# Some built-in functions in PERL
my $length = length($string); # returns the length of the string
my $reversed = reverse($string); # reverses the order of characters in the string
my $substring = substr($string, 0, 5); # returns a substring starting from index 0 and 5 characters long

# Control flow statements
if ($length > 10) {
  print "The length of the string is greater than 10\n";
} elsif ($length >= 5) {
  print "The length of the string is between 5 and 10\n";
} else {
  print "The length of the string is less than 5\n";
}

# Loops
my $count = 1;
while ($count <= 10) {
  print "Count is $count\n";
  $count++;
}

for (my $i = 0; $i < 5; $i++) {
  print "i is $i\n";
}

# Arrays
my @fruit = ("apple", "banana", "orange");
print "The second element in the array is $fruit[1]\n";

# Functions
sub add {
  my ($num1, $num2) = @_;
  return $num1 + $num2;
}

my $result = add(3, 5);
print "The result of adding 3 and 5 is $result\n";

# Regular expressions
my $uppercase = uc($string); # converts string to uppercase
my $lowercase = lc($string); # converts string to lowercase

if ($string =~ /World/) { # checks if string contains the word "World"
  print "The string contains the word World\n";
}

# File handling
open(my $file, "<", "input.txt") or die "Cannot open file: $!"; # open file for reading
my $line = <$file>; # reads a line from the file
print "The first line in the file is $line\n";
close($file); # close the file after use

# Object-Oriented Programming
package Cat; # declare a package

sub new { # constructor method
  my ($class, $name) = @_;
  my $self = {
    name => $name,
    age => 5
  };
  bless $self, $class; # bless object reference into the class
  return $self;
}

sub meow { # instance method
  my ($self) = @_;
  print "Meow! My name is $self->{name}\n";
}

# Inheritance
package Kitten; # declare another package

# Kitten inherits from Cat
our @ISA = qw(Cat);

# Constructor method
sub new {
  my ($class, $name) = @_;
  my $self = $class->SUPER::new($name); # calls parent class constructor
  $self->{age} = 0; # override age to be zero for kittens
  return $self;
}

# Overriding instance method
sub meow {
  my ($self) = @_;
  print "Meeeeow! My name is $self->{name}, I'm a kitten\n";
}