#!/usr/bin/perl
# The above line specifies the path to the Perl interpreter, allowing for direct execution of this script.

use strict; # Enables strictness checking, preventing undeclared variables from being used
use warnings; # Enables warnings for common errors and warnings for stylistic errors

my @numbers = (1, 2, 3, 4, 5); # Creates an array containing the numbers 1 to 5
my %hash = ('key1' => 'value1', 'key2' => 'value2'); # Creates a hash (key-value pair) with two elements

for my $number (@numbers) { # Iterates through each element in the numbers array
  if ($number % 2 == 0) { # Checks if the number is even
    print "$number is even\n"; # Prints the number and a message
  } else { # If the number is not even
    print "$number is odd\n"; # Prints the number and a different message
  }
}

my $key = 'key1'; # Stores 'key1' in a scalar variable
if (exists $hash{$key}) { # Checks if the hash contains the key stored in $key
  print "The value for $key is $hash{$key}\n"; # Prints the key and its corresponding value
} else { # If the key does not exist in the hash
  print "Key not found\n"; # Prints an error message
}

print "Please enter your name: "; # Prompts user for input
my $name = <STDIN>; # Stores user input in the $name variable
chomp $name; # Removes any trailing newline characters from the input

print "Hello, $name!"; # Greets the user with their inputted name

# This is a long and complex code snippet in PERL that covers various concepts such as arrays, hashes, loops, conditional statements, user input, and more.
# It demonstrates the use of strict and warnings for better code quality and the ability to specify the path to the interpreter for direct execution of the script.