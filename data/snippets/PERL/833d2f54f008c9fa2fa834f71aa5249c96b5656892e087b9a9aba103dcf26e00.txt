## Description
# This code snippet is a Perl program that generates pseudo-random passwords using a combination of letters, numbers, and special characters. 
# It prompts the user for the desired password length and allows for customization of the character set to be used.
# The resulting password is stored in a variable and printed to the terminal.

## Setting up variables and arrays:
# Set minimum and maximum password length
my $min_length = 8;
my $max_length = 16;

# Define character arrays for different types of characters
my @letters = ("a".."z", "A".."Z");
my @numbers = (0..9);
my @symbols = ("!", "@", "#", "$", "%", "^", "&", "*");

# Create empty array to store selected characters
my @combined_chars;

# Ask user for desired password length and character set preferences
print "Enter desired password length (8-16 characters): ";
my $length = <STDIN>; # reads input from user
chomp $length; # removes newline character from input

print "Use letters? (y/n): ";
my $use_letters = <STDIN>;
chomp $use_letters;

print "Use numbers? (y/n): ";
my $use_numbers = <STDIN>;
chomp $use_numbers;

print "Use symbols? (y/n): ";
my $use_symbols = <STDIN>;
chomp $use_symbols;

## Constructing the password:
# Check user's input and append selected character arrays to @combined_chars
if ($use_letters eq "y") {
  push @combined_chars, @letters;
}

if ($use_numbers eq "y") {
  push @combined_chars, @numbers;
}

if ($use_symbols eq "y") {
  push @combined_chars, @symbols;
}

# Generate random password by selecting elements from @combined_chars array
my $password = join '', map $combined_chars[rand @combined_chars], 0..$length;

# Check if generated password meets minimum length requirement and generate new password if not
while (length($password) < $min_length) {
  $password = join '', map $combined_chars[rand @combined_chars], 0..$length;
}

# Print password to terminal
print "Your generated password is: $password";