# This is a code snippet in PERL which generates a list of prime numbers using the Sieve of Eratosthenes algorithm
# First we define the upper limit of the range of numbers to check for primes in
my $upper_limit = 100000;

# Initialize an array with all numbers from 2 to the upper limit
my @numbers = (2..$upper_limit);

# Initialize an empty array to store the prime numbers
my @primes = ();

# Loop through each number in the array and check if it is a prime number
foreach my $num (@numbers) {
  # Default assumption is that the number is a prime
  my $is_prime = 1;
  
  # Loop through all numbers from 2 to the square root of the current number
  for (my $i = 2; $i * $i <= $num; $i++) {
    # Check if the current number is divisible by any number in the loop
    if ($num % $i == 0) {
      # If it is divisible, then it is not a prime number
      $is_prime = 0;
      last; # Break out of the loop
    }
  }

  # If the number is still marked as a prime, add it to the primes array
  push(@primes, $num) if $is_prime;
}

# Print out all the prime numbers in the array
print "List of prime numbers from 2 to $upper_limit:\n";
foreach my $prime (@primes) {
  print "$prime\n";
}