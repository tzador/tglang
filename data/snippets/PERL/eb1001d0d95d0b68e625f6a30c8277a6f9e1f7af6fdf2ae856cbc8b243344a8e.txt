#!/usr/bin/perl
print "Hello, World!\n\n";
# This is a simple print statement in Perl to output "Hello, World!" with a line break.

my $num = 5;
if ($num < 10) {
  print "The number is less than 10\n\n";
} else {
  print "The number is not less than 10\n\n";
}
# This is a conditional statement that checks if the variable $num is less than 10. If it is, the code will print "The number is less than 10", otherwise it will print "The number is not less than 10".

my @fruits = ("apple", "banana", "orange");
print "My favorite fruit is: $fruits[0]\n\n";
# This is an array in Perl containing three fruits. The code then prints the first element in the array, "apple", by accessing it using the index [0].

my %students = (
  "John" => 20,
  "Mary" => 25,
  "Adam" => 22
);
print "Mary's age is: $students{'Mary'}\n\n";
# This is a hash in Perl containing three key-value pairs. The code then prints the value associated with the key "Mary", which is 25.

sub add_nums {
  my ($num1, $num2) = @_;  # Assigning arguments to variables
  my $sum = $num1 + $num2;  # Performing addition
  print "The sum of $num1 and $num2 is: $sum\n\n";
}

add_nums(2, 4);  # Calling the function with arguments 2 and 4
# This is a subroutine in Perl that takes two arguments and prints their sum.

foreach my $fruit (@fruits) {
  print "I like $fruit\n";
}
# This is a foreach loop in Perl that iterates through each element in the @fruits array and prints "I like [fruit name]" for each element.

my $x = 1;
while ($x <= 5) {
  print "$x\n";
  $x += 1;
}
# This is a while loop in Perl that prints the value of $x and increments it by 1 until $x reaches 5.

my $input = <STDIN>;  # Taking user input
chomp($input);  # Removing the newline character
print "You entered: $input\n\n";
# This code uses the <STDIN> function to take user input and chomps off the newline character before printing the user's input.

my $filename = "sample.txt";
open(my $file_handle, '<', $filename) or die "Could not open file $filename: $!";  # Opening a file
while (my $line = <$file_handle>) {
  print $line;
}
close($file_handle);  # Closing the file
# This code opens the file "sample.txt" and prints its contents line by line using a while loop. It then closes the file. If the file cannot be opened, the die statement will print the error message.