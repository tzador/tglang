#!/usr/bin/perl
# This is a comment
use strict;
use warnings;

my $num1 = 5; # declaring a variable with a value of 5
my $num2 = 10; # declaring a second variable with a value of 10
my $sum = $num1 + $num2; # adding the two variables together and assigning the result to a new variable

print "The value of the sum is: $sum\n"; # printing out the value of the sum variable, using escape sequence \n for a line break

my @names = ('John', 'Jane', 'Bob'); # declaring an array with three strings
print "The first name in the array is: $names[0]\n"; # printing out the first element in the array

foreach my $name (@names) { # looping through the array using a foreach loop
  print "Hello, $name!\n"; # printing out a greeting for each name in the array
}

if ($sum > 15) { # conditional statement that checks if the sum variable is greater than 15
  print "The sum is greater than 15!\n"; # printing a message if the condition is true
} elsif ($sum == 15) { # elsif statement that checks if the sum variable is equal to 15
  print "The sum is equal to 15!\n"; # printing a message if the condition is true
} else { # else statement for any other case
  print "The sum is less than 15.\n"; # printing a message if the condition is false
}

my $input = <STDIN>; # reading user input from the command line and assigning it to the input variable
chomp $input; # removing the newline character from the end of the input
print "You entered: $input\n"; # printing out the user's input

my %ages = ( # declaring a hash with string keys and numeric values
  "John" => 25,
  "Jane" => 30,
  "Bob" => 45
);

print "Jane's age is: $ages{'Jane'}\n"; # accessing a value in the hash using the key 'Jane'

foreach my $key (keys %ages) { # looping through the hash using the keys function
  my $value = $ages{$key}; # accessing the value corresponding to each key
  print "$key is $value years old.\n"; # printing out each key-value pair
}

# This is the end of the code snippet.