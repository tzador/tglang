#!/usr/bin/perl

use strict;
use warnings;

# declaration of scalar variables
my $string = "Programming";
my $number = 12345;
my $float  = 3.1415;
my $bool   = 1;

# print statements
print "String: $string\n";
print "Number: $number\n";
print "Float: $float\n";
print "Bool: $bool\n";

# array declaration and assignment
my @array = qw(1 2 3 4 5);

# loop through array and print each element
foreach my $element (@array) {
    print "Array element: $element\n";
}

# hash declaration and assignment
my %hash = (key1 => "value1",
            key2 => "value2",
            key3 => "value3");

# loop through hash and print each key-value pair
while (my ($key, $value) = each %hash) {
    print "Hash key: $key, value: $value\n";
}

# subroutine to check if number is prime
sub is_prime {
    my $num = shift;

    # return false if number is less than 2
    return 0 if $num < 2;

    # loop through possible divisors
    for (my $i = 2; $i < $num; $i++) {

        # if number is divisible by divisor, it is not prime
        if ($num % $i == 0) {
            return 0;
        }
    }

    # if no divisor was found, number is prime
    return 1;
}

# call subroutine to check if number is prime
if (is_prime($number)) {
    print "$number is prime\n";
} else {
    print "$number is not prime\n";
}

# regex pattern matching
my $pattern = qr/[aeiou]/;

# loop through string and check for vowels using pattern matching
foreach my $character (split //, $string) {
    if ($character =~ /$pattern/) {
        print "$character is a vowel\n";
    } else {
        print "$character is not a vowel\n";
    }
}

# file handling - create, write and read a file
my $file = "output.txt";

# open file for writing
open(my $fh, ">", $file) or die "Could not open file for writing";

# write string variable to file
print $fh $string;

# close file after writing
close($fh);

# open file for reading
open($fh, "<", $file) or die "Could not open file for reading";

# read file line by line and print each line
while (my $line = <$fh>) {
    print $line;
}

# close file after reading
close($fh);

# command line arguments
my ($arg1, $arg2) = @ARGV;

# check if arguments were provided
if (!defined $arg1 || !defined $arg2) {
    print "Please provide two arguments in the command line\n";
    exit;
}

# perform addition operation and print result
my $result = $arg1 + $arg2;
print "Result: $result\n";

# END OF CODE SNIPPET