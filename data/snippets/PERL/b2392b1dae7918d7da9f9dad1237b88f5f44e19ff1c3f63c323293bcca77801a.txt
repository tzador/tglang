# This is a code snippet showcasing complex data manipulation in PERL
# First, we define a multi-dimensional array with different data types
my @complex_data = ('string', 2, 3.14, qw(apple orange banana), [9, 8, 7], {key1 => 'value1', key2 => 'value2'});

# Next, we loop through the array and manipulate the data
for my $i (0..$#complex_data) {
    
    # Check if the current element is an array or hash
    if (ref $complex_data[$i] eq 'ARRAY') {
        
        # If it's an array, we loop through its elements and print them out
        for my $j (0..$#{ $complex_data[$i] }) {
            
            # Print the value of the current element
            print $complex_data[$i][$j] . "\n";
            
            # Multiply the current value by 2 and replace it in the array
            $complex_data[$i][$j] *= 2;
        }
    }
    elsif (ref $complex_data[$i] eq 'HASH')  {

        # If it's a hash, we loop through its keys and print out the values
        foreach my $key (keys %{ $complex_data[$i] }) {
            
            # Print the key-value pair
            print "$key: $complex_data[$i]{$key}\n";
            
            # Convert the value to uppercase and replace it in the hash
            $complex_data[$i]{$key} = uc $complex_data[$i]{$key};
        }
    }
    else {
        
        # If it's not an array or hash, just print out the value
        print $complex_data[$i] . "\n";
    }
}

# Print out the updated multi-dimensional array
print "@complex_data\n";