# This code snippet is a Perl program that sorts a list of numbers using the selection sort algorithm

#!/usr/bin/perl

# define a subroutine that implements the selection sort algorithm
# takes in a reference to an unsorted list of numbers
# and modifies the list in-place to be sorted
sub selection_sort {
    my $input = $_[0]; # dereference input list
    my $length = scalar @$input; # get length of input list
    
    # loop through the list using indices
    for (my $i = 0; $i < $length - 1; $i++) {
        
        # set current index as minimum
        my $min = $i;
        
        # loop through the unsorted part of the list
        for (my $j = $i + 1; $j < $length; $j++) {
            
            # if current element is smaller than current minimum,
            # update the minimum
            if ($input->[$j] < $input->[$min]) {
                $min = $j;
            }
        }
        
        # swap the minimum element with the first unsorted element
        my $temp = $input->[$i];
        $input->[$i] = $input->[$min];
        $input->[$min] = $temp;
    }
    
    # return the sorted list
    # note: no need to explicitly return as input list is modified in-place
}

# define a sample list of numbers
my @numbers = (5, 2, 8, 1, 3);

# print the unsorted list
print "Unsorted list: @numbers\n";

# call the selection_sort subroutine, passing in a reference to the list
selection_sort(\@numbers);

# print the sorted list
print "Sorted list: @numbers\n";

### Output ###
# Unsorted list: 5 2 8 1 3
# Sorted list: 1 2 3 5 8