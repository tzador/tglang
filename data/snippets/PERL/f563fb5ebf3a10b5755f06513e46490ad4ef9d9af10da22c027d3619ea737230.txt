#!/usr/bin/perl
# This is a comment
use strict;
# Strict mode for better error reporting

# Subroutine to print prime numbers within a given range
# Takes two arguments: lower bound (integer) and upper bound (integer)
sub find_primes {
    my ($lower, $upper) = @_;
    my @primes = ();    # Initialize empty array to store primes
    for my $num ($lower..$upper) {
        # Skip if number is less than 2 (not prime)
        next if ($num < 2);

        # Check if number is divisible by any number less than its square root
        my $is_prime = 1;     # Flag to track if number is prime or not
        for my $divisor (2..sqrt($num)) {
            if ($num % $divisor == 0) {
                $is_prime = 0;      # Set flag to false if number is divisible
                last;       # Break out of loop
            }
        }

        # Add number to primes array if it is prime
        if ($is_prime) {
            push @primes, $num;
        }
    }

    # Print out the primes within the range
    print "Prime numbers between $lower and $upper are:\n";
    for my $prime (@primes) {
        print "$prime\n";
    }
}

# Call subroutine with user input
print "Enter lower bound: ";
my $lower = <STDIN>;
chomp $lower;    # Remove newline character from input
print "Enter upper bound: ";
my $upper = <STDIN>;
chomp $upper;    # Remove newline character from input

# Call find_primes subroutine with the user inputs as arguments
find_primes($lower, $upper);