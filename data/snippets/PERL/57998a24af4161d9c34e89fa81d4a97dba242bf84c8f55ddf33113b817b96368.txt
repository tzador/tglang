#!/usr/bin/perl

use strict; # enables strictures, a set of rules that enforce safer coding practices

# assigns a string value to a variable called $text
my $text = "Hello, world!";

# assigns the result of the length() function, which counts the characters in a string, to a variable called $length
my $length = length($text);

# prints the value of $text, along with a line break, to the standard output using the print() function
print "Text: $text\n";

# prints the value of $length, along with a line break, to the standard output using the printf() function
printf "Length: %d\n", $length;

# creates an empty array called @numbers
my @numbers = ();

# uses a for loop to push the numbers 1-10 into the @numbers array
for (my $i = 1; $i <= 10; $i++) {
    push(@numbers, $i);
}

# prints the array @numbers using the join() function, which converts the array into a string separated by commas
print "Numbers: " . join(", ", @numbers) . "\n";

# defines a subroutine called greeting that takes in a single argument
sub greeting {
    my ($name) = @_; # assigns the value passed into the subroutine to a variable called $name
    
    # uses a string interpolation to print a personalized greeting
    print "Hello, $name! How are you doing today?\n";
}

# calls the greeting subroutine and passes in a string argument "John"
greeting("John");

# assigns a list of strings to an array called @fruits
my @fruits = ("apple", "banana", "orange", "strawberry");

# prints the index and value of each item in the @fruits array using a foreach loop
print "Fruits: \n";
foreach my $index (0 .. $#fruits) {
    print "$index: $fruits[$index]\n";
}

# assigns a hash with key-value pairs to a variable called %personal_info
my %personal_info = (
    name => "Jane",
    age => 25,
    occupation => "Software Engineer",
);

# prints the value associated with the key "name" using the arrow notation
print "Name: " . $personal_info{name} . "\n";

# prints the value associated with the key "occupation" using the dereferencing notation
print "Occupation: " . $$personal_info{occupation} . "\n";

# checks if $length is greater than 10 and prints a message if it is true
if ($length > 10) {
    print "The length of the text is greater than 10 characters.\n";
}

# defines a subroutine called factorial that takes in a single argument
sub factorial {
    my ($num) = @_; # assigns the value passed into the subroutine to a variable called $num
    
    # checks if the value of $num is 0 or 1 and returns 1 if it is
    if ($num == 0 || $num == 1) {
        return 1;
    }
    # otherwise, uses recursion to calculate the factorial of $num
    else {
        return $num * factorial($num-1);
    }
}

# calls the factorial subroutine and passes in the value 5, which will calculate the factorial of 5 (5! = 5*4*3*2*1 = 120)
my $result = factorial(5);

# prints the result of the factorial calculation
print "5! = $result\n";

# defines a variable called $num and assigns it a value of 1
my $num = 1;

# uses a while loop to print numbers from 1 to 10
while ($num <= 10) {
    # uses string interpolation to print the value of $num
    print "$num\n";
    
    # increments the value of $num by 1
    $num++;
}