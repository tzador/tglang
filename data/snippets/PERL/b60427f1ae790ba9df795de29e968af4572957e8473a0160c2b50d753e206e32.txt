# Example of a complex PERL code snippet

use strict; # Enforce declarations of all variables

my $string = "Hello, world!"; # Assign a string to a variable
my @array = qw(one, two, three); # Assign an array of strings to a variable
my %hash = ( # Assign a hash (associative array) of key-value pairs to a variable
    key1 => "value1",
    key2 => "value2",
    key3 => "value3"
);

# Use a for loop to iterate through the array
for my $index (0..$#array) { # $#array returns the last index of the array
    print "Index: $index, Value: $array[$index]\n";
}

# Use a while loop to iterate through the hash
while (my ($key, $value) = each %hash) { # Loop through each key-value pair in the hash
    print "Key: $key, Value: $value\n";
}

# Create a subroutine (function)
sub addition {
    my ($num1, $num2) = @_; # Assign function arguments to variables
    return $num1 + $num2; # Return the sum of the arguments
}

my $result = addition(1, 2); # Call the subroutine with arguments and assign the return value to a variable
print "Result: $result\n"; # Print the result

# Use regular expressions to manipulate strings
$string =~ s/world/Earth/; # Replace "world" with "Earth" in the string
print "$string\n"; # Print the updated string

# Use modules to extend functionality
use Math::Complex; # Import the Math::Complex module
my $complex = i + 2; # Create a complex number
print "Real part: $complex->Re(), Imaginary part: $complex->Im()\n"; # Print the real and imaginary parts of the number