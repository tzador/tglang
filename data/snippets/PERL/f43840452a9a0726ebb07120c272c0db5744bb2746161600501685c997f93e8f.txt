use strict; #enforces strict variable declaration
use feature qw(say); #enables advanced features like `say` function
use Data::Dumper; #module for debugging and printing complex data structures
my @numbers = (1, 2, 3, 4, 5); #declare an array of numbers
my %hash = ( #declare a hash of key-value pairs
    name => "John",
    age => 30,
    hobbies => ["reading", "coding", "hiking"]
);
#subroutine to check if a number is even or odd
sub check_even_odd {
    my $num = shift; #pass the argument as the first element of @_ variable
    if($num % 2 == 0){ #if number is divisible by 2, then it is even
        return "Even";
    }
    else{ #if number is not divisible by 2, then it is odd
        return "Odd";
    }
}
say check_even_odd($numbers[1]); #prints "Even" as 2 is even
my $hobby = $hash{"hobbies"}[2]; #assign the third element of "hobbies" array as a scalar variable
say "John's favorite hobby is $hobby"; #prints "John's favorite hobby is hiking"
say Dumper(\%hash); #prints the contents of the hash, including the array inside it