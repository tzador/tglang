use strict; # enables strict mode, requires variable declarations
use warnings; # enables warnings for potential errors
use Scalar::Util qw(looks_like_number); # imports the looks_like_number function from the Scalar::Util module

my @array = (1, 'two', '3', 4.5); # initializes an array with elements of different data types

foreach my $element (@array) { # loops through each element in the array
    if (looks_like_number($element)) { # checks if the element is a number
        print "Element $element is a number!\n"; # prints a message if it is a number
    }
    else {
        print "Element $element is not a number!\n"; # prints a message if it is not a number
    }
}

my %hash = ( # initializes a hash with key-value pairs
    "fruit" => "apple", 
    "color" => "red", 
    "number" => "three"
);

while (my ($key, $value) = each %hash) { # loops through each key-value pair in the hash
    if ($key eq 'color') { # checks if the key is equal to 'color'
        print "The $key is $value!\n"; # prints the key-value pair if it is 'color'
    }
}