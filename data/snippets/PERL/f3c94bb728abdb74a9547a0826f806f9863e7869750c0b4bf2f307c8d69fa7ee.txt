##### This code sorts a given input array using the quicksort algorithm #####

# defining the subroutines for partition and quicksort
sub quickSort{
    # declaring the intial variables
    my $array = $_[0];
    my $left = $_[1];
    my $right = $_[2];

    # checking for empty and invalid array
    if ($#{$array} < 0) {
        return "Invalid array";
    }
    elsif ($right - $left == 0) {
        return [@{$array}[$left]];
    }
    elsif ($right - $left == 1) {
        return (@{$array}[$left] < @{$array}[$right]) ? ($array->[$left], $array->[$right]) : ($array->[$right], $array->[$left]);
    }
    else {
        # choosing the pivot element
        my $pivot = @{$array}[($left + $right)/2];
        my (@less, @equal, @more);
        for (my $i = $left; $i < $right+1; $i++) {
            # dividing the elements into less, equal and more arrays
            if (@{$array}[$i] < $pivot) {
                push @less, @{$array}[$i];
            }
            elsif (@{$array}[$i] == $pivot) {
                push @equal, @{$array}[$i];
            }
            else {
                push @more, @{$array}[$i];
            }
        }
        # recursively sorting the arrays
        @less = quickSort(\@less, 0, $#less) if $#less > 0;
        @more = quickSort(\@more, 0, $#more) if $#more > 0;
        # combining the sorted arrays with pivot in the middle
        return (@less, @equal, @more);
    }
}

# input array
my @input = (9, 3, 6, 1, 10, 5, 2, 7, 4, 8);

# using the quicksort subroutine
my @sorted = quickSort(\@input, 0, $#input);

# output the sorted array
print "Sorted array: @sorted";