#This function calculates the factorial of a given number
sub factorial{
    my ($num) = @_; #assigns the input parameter to a variable
    my $factorial = 1; #initializes the factorial value to 1
    for (my $i = 1; $i <= $num; $i++){ 
        $factorial = $factorial * $i; #calculates the factorial value
    }
    return $factorial; #returns the factorial value
}

#This function checks if a number is prime or not
sub isPrime{
    my ($num) = @_; #assigns the input parameter to a variable
    my $flag = 0; #initializes a flag variable to keep track of factors
    for (my $i = 2; $i <=sqrt($num); $i++){
        if ($num % $i == 0){
            $flag = 1; #if there is a factor, sets the flag to 1
            last; #exits the loop as the number is not prime
        }
    }
    if ($flag == 0){
        return 1; #returns 1 if the number is prime
    }
    else {
        return 0; #returns 0 if the number is not prime
    }
}

#This function calculates the nth Fibonacci number
sub fibonacci{
    my ($num) = @_; #assigns the input parameter to a variable
    if ($num == 0 || $num == 1){
        return $num; #returns the input number if it is 0 or 1
    }
    else {
        return fibonacci($num - 1) + fibonacci($num - 2); #calculates the Fibonacci number recursively
    }
}

#This function checks if two strings are anagrams or not
sub isAnagram{
    my ($str1, $str2) = @_; #assigns the input parameters to variables
    #converts both strings to lowercase and removes spaces
    $str1 = lc($str1);
    $str2 = lc($str2);
    $str1 =~ s/\s+//g;
    $str2 =~ s/\s+//g;

    #sorts both strings alphabetically
    my @arr1 = split(//, $str1);
    my @arr2 = split(//, $str2);
    @arr1 = sort(@arr1);
    @arr2 = sort(@arr2);

    #checks if the sorted strings are equal
    if (join("", @arr1) eq join("", @arr2)){
        return 1; #returns 1 if the strings are anagrams
    }
    else {
        return 0; #returns 0 if the strings are not anagrams
    }
}