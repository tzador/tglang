#!/usr/bin/perl

use strict;
use warnings;

# Define a string variable
my $string = "This is a complex code snippet in PERL.";

# Print the variable to the console
print "Input string: $string\n";

# Define a regular expression to find all words starting with 'c'
my $pattern = qr/\bc\w+/;

# Match the regular expression with the input string
if ($string =~ /$pattern/) {
    # If there is a match, print the matched string to the console
    print "Matched string: $&\n";
} else {
    # If there is no match, print an error message
    print "No match found.\n";
}

# Define a function to convert all lowercase characters to uppercase
sub to_uppercase {
    # Take a string as input
    my $input = shift;
    
    # Convert the string to uppercase and return it
    my $output = uc $input;
    return $output;
}

# Call the function with the input string as argument
my $uppercase_string = to_uppercase($string);

# Print the converted string to the console
print "Uppercase string: $uppercase_string\n";

# Define a hash that stores information about programming languages
my %programming_languages = (
    "PERL" => {
        "year" => 1987,
        "developer" => "Larry Wall",
        "website" => "https://www.perl.org/"
    },
    "Java" => {
        "year" => 1995,
        "developer" => "James Gosling",
        "website" => "https://www.java.com/"
    },
    "Python" => {
        "year" => 1991,
        "developer" => "Guido van Rossum",
        "website" => "https://www.python.org/"
    }
);

# Print the information about PERL to the console
print "Information about PERL:\n";
print "Year: " . $programming_languages{"PERL"}{"year"} . "\n";
print "Developer: " . $programming_languages{"PERL"}{"developer"} . "\n";
print "Website: " . $programming_languages{"PERL"}{"website"} . "\n";

# Iterate through the hash and print all information about each programming language
print "Information about all programming languages:\n";
foreach my $language (keys %programming_languages) {
    print "Name: $language\n";
    print "Year: " . $programming_languages{$language}{"year"} . "\n";
    print "Developer: " . $programming_languages{$language}{"developer"} . "\n";
    print "Website: " . $programming_languages{$language}{"website"} . "\n";
}

# Define a list of numbers
my @numbers = (1, 2, 3, 4, 5);

# Create a new list by applying a function to each number in the list
my @doubled_numbers = map { $_ * 2 } @numbers;

# Print the original list and the new list to the console
print "Original list: @numbers\n";
print "Doubled list: @doubled_numbers\n";

# Define a multidimensional array
my @matrix = (
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
);

# Print the second row of the array
print "Second row of the array: @{$matrix[1]}\n";

# Define a subroutine that calculates the factorial of a number
sub factorial {
    # Take a number as input
    my $n = shift;
    
    # Handle edge case of 0
    if ($n == 0) {
        return 1;
    }
    
    # Use recursion to calculate factorial
    return $n * factorial($n-1);
}

# Call the function with a number as argument
my $n = 5;
my $factorial = factorial($n);

# Print the result to the console
print "Factorial of $n: $factorial\n";