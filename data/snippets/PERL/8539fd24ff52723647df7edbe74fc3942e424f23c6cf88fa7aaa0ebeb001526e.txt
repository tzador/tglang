#!/usr/bin/perl #Shebang line to specify the perl interpreter location

use strict; #Enables strict coding standards in perl
use warnings; #Displays warnings during execution

#This is a comment in perl
#VARIABLE DECLARATIONS
my $name = "John"; #Scalar variable
my @numbers = (1, 2, 3); #Array variable
my %hash = ( #Hash variable
    "key1" => "value1",
    "key2" => "value2"
);

#SUBROUTINE DECLARATION
sub print_name { #Subroutine to print the name variable
    print "$name\n";
}

#FOR LOOP
for (my $i = 0; $i < 3; $i++) { #Loop to print the numbers array
    print "$numbers[$i]\n";
}

#HASH LOOP
foreach my $key (keys %hash) { #Loop to print the hash variable
    print "$key = $hash{$key}\n";
}

#FILE INPUT/OUTPUT
open (FILE, "<input.txt") or die "Cannot open file for reading: $!"; #Opens input file for reading or prints error message
while (my $line = <FILE>) { #Loop to read each line from the input file
    chomp($line); #Removes the newline character from the end of each line
    print "$line\n"; #Prints the line
}
close (FILE); #Closes the file after reading

open (FILE, ">output.txt") or die "Cannot open file for writing: $!"; #Opens output file for writing or prints error message
print FILE "Output text"; #Writes the text to the output file
close (FILE); #Closes the file after writing

#REGULAR EXPRESSION
if ($name =~ /([a-zA-Z]+)$/) { #Checks if the name variable contains only letters
    print "Name only contains letters\n";
} else {
    print "Name contains numbers or special characters\n";
}

#CONDITIONAL STATEMENTS
if ($numbers[0] == 1) { #Checks if the first element of the numbers array is equal to 1
    print "First number is equal to 1\n";
} elsif ($numbers[1] == 2) { #Checks if the second element of the numbers array is equal to 2
    print "Second number is equal to 2\n";
} else {
    print "Numbers do not match\n";
}

#INPUT FROM USER
print "Enter a number: "; #Prompts the user for input
my $input = <STDIN>; #Stores the user input in a variable
chomp($input); #Removes the newline character from the end of the input
print "You entered: $input\n"; #Prints the input back to the user

#FILES AND DIRECTORIES
my $directory = "documents"; #Directory to be created
mkdir $directory, 0777; #Creates the directory with permissions set to 777

unlink "output.txt"; #Deletes the output.txt file

#MODULES
use CGI; #Module to handle CGI scripts
use Math::Complex; #Module for complex mathematical operations

#OBJECT ORIENTED PROGRAMMING
package Animal; #Class declaration
sub new { #Constructor method
    my $class = shift; #Assigns the class name to a variable
    my $self = { #Creates a hash to store object attributes
        _name => shift,
        _type => shift
    };

    bless $self, $class; #Converts the hash into an object of the class
    return $self; #Returns the object
}

sub get_name { #Accessor method for name attribute
    my ($self) = @_;
    return $self->{_name};
}

sub set_name { #Mutator method for name attribute
    my ($self, $name) = @_;
    $self->{_name} = $name if defined($name);
    return $self->{_name};
}

sub get_type { #Accessor method for type attribute
    my ($self) = @_;
    return $self->{_type};
}

sub set_type { #Mutator method for type attribute
    my ($self, $type) = @_;
    $self->{_type} = $type if defined($type);
    return $self->{_type};
}

#CREATING AN OBJECT
my $cat = Animal->new("Fluffy", "Cat"); #Creates a new Animal object with name and type attributes
print "Name: " . $cat->get_name() . "\n"; #Accesses the name attribute using the get_name method
print "Type: " . $cat->get_type() . "\n"; #Accesses the type attribute using the get_type method

#INHERITANCE
package Dog; #Child class declaration
use base Animal; #Specifies the parent class
sub new { #Constructor method
    my $class = shift; #Assigns the class name to a variable
    my $self = $class->SUPER::new(shift, shift); #Calls the parent class constructor method

    bless $self, $class; #Converts the hash into an object of the class
    return $self; #Returns the object
}

#CREATING AN OBJECT
my $dog = Dog->new("Buddy", "Dog"); #Creates a new Dog object with name and type attributes
print "Name: " . $dog->get_name() . "\n"; #Accesses the name attribute using the get_name method
print "Type: " . $dog->get_type() . "\n"; #Accesses the type attribute using the get_type method