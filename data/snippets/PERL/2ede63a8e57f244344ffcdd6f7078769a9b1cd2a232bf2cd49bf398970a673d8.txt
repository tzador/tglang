#!/usr/bin/perl

use strict; # This line enables strict checking of variable declarations and usage
use warnings; # This line enables warning messages to be displayed during compilation

# This line defines a scalar variable named $name and initializes it with a string value
my $name = "John";

# This line defines a lexical array named @ages and initializes it with a list of numbers
my @ages = (25, 36, 42, 18);

# This line defines a hash named %info and initializes it with key-value pairs
my %info = (
  "name" => $name,
  "age" => $ages[0],
  "occupation" => "Software Engineer"
);

# This line defines a subroutine named print_info which takes in a hash as parameter
sub print_info {
  my (%data) = @_; # This line assigns the hash passed in as argument to a new lexical hash variable
  foreach my $key (keys %data) { # This line starts a foreach loop to iterate through the keys of the hash
    print "Key: $key, Value: $data{$key}\n"; # This line prints the key-value pair for each iteration
  }
}

print_info(%info); # This line calls the subroutine with the previously defined hash as argument

# This line defines a new scalar variable named $message and initializes it with a string value
my $message = "Hello, world!";

# This line defines a new lexical subroutine named reverse_string which takes in a scalar as parameter
sub reverse_string {
  my ($str) = @_; # This line assigns the scalar passed in as argument to a new lexical scalar variable
  my $reversed = ""; # This line defines a new lexical scalar variable named $reversed
  my @chars = split(//, $str); # This line splits the string into an array of characters
  for (my $i = $#chars; $i >= 0; $i--) { # This line starts a for loop to iterate through the array in reverse order
    $reversed .= $chars[$i]; # This line appends the current character to the end of the $reversed string
  }
  return $reversed; # This line returns the reversed string
}

print reverse_string($message); # This line calls the reverse_string subroutine with $message as argument and prints the returned value

# This line defines a new scalar variable named $number and assigns it a randomly generated integer between 1 and 10
my $number = int(rand(10) + 1);

# This line defines a new subroutine named check_even_odd which takes in a scalar as parameter
sub check_even_odd {
  my ($num) = @_; # This line assigns the scalar passed in as argument to a new lexical scalar variable
  if ($num % 2 == 0) { # This line checks if the number is even by dividing it by 2 and checking the remainder
    print "$num is even.\n"; # This line prints a message if the number is even
  } else { # This line starts the else block if the number is not even
    print "$num is odd.\n"; # This line prints a message if the number is odd
  }
}

check_even_odd($number); # This line calls the check_even_odd subroutine with $number as argument