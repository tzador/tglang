#!/usr/bin/perl
use strict;
use warnings;

# Define a hash with key-value pairs to represent a person's information
my %person_info = (
    name => "John Smith",
    age => 30,
    occupation => "Software Engineer",
    language => "PERL"
);

# Loop through the hash and print out each key-value pair
foreach my $key (keys %person_info) {
    print "$key: $person_info{$key}\n";
}

# Define a subroutine to check if a person is older than a given age
sub check_age {
    my $person = shift;    # First parameter is person's name
    my $given_age = shift; # Second parameter is given age
    print "Checking age for $person...\n";
    if ($person_info{$person}{age} > $given_age) { # Use person's name to access age key
        print "Person is older than $given_age!\n";
    }
    else {
        print "Person is younger than or equal to $given_age!\n";
    }
}

# Call the subroutine with different parameters
check_age("John Smith", 40); # Prints "Person is younger than or equal to 40!"
check_age("John Smith", 25); # Prints "Person is older than 25!"

# Define a regular expression to match a valid email address
my $email_regex = qr/^.+@.+\..+$/;

# Prompt user for email address and validate it
print "Please enter your email address: ";
my $entered_email = <STDIN>;
chomp $entered_email; # Remove newline character
if ($entered_email =~ $email_regex) {
    print "Valid email address!\n";
}
else {
    print "Invalid email address!\n";
}

# Define a variable to hold a nested array
my @nested_array = ([1, 2, 3], [4, 5, 6], [7, 8, 9]);

# Loop through the nested array and print out each value
for my $i (0 .. $#nested_array) { # Use scalar context to get size of outer array
    for my $j (0 .. $#{$nested_array[$i]}) { # Use dereference to get size of inner array
        print "\$nested_array[$i][$j] = $nested_array[$i][$j]\n";
    }
}

# Define a variable to hold a reference to a subroutine
my $add = \&add_numbers;

# Call the subroutine using the reference
print "Result of add_numbers(5, 10) = " . $add->(5, 10) . "\n";

# Define a subroutine to add two numbers
sub add_numbers {
    my ($num1, $num2) = @_; # Use special variables to get parameters
    return $num1 + $num2; # Return sum as function result
}