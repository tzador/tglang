# This is a code snippet in PERL that creates a bioinformatics tool for analyzing DNA sequences

#! /usr/bin/perl
use strict;
use warnings;

# Declare variables to store input sequences and analysis results
my $sequence1;
my $sequence2;
my $analysis_result;

# Prompt user to enter two DNA sequences
print "Enter the first DNA sequence:";
$sequence1 = <STDIN>;
chomp $sequence1;
print "Enter the second DNA sequence:";
$sequence2 = <STDIN>;
chomp $sequence2;

# Check if the sequences are of equal length
if (length($sequence1) == length($sequence2)) {

    # Calculate the GC content for both sequences
    my $gc_content1 = analyzeGCContent($sequence1);
    my $gc_content2 = analyzeGCContent($sequence2);

    # Compare the GC content of both sequences
    if ($gc_content1 > $gc_content2) {
        $analysis_result = "$sequence1 has a higher GC content than $sequence2";
    } elsif ($gc_content2 > $gc_content1) {
        $analysis_result = "$sequence2 has a higher GC content than $sequence1";
    } else {
        $analysis_result = "Both sequences have the same GC content";
    }

    # Print out the analysis result
    print "$analysis_result\n";

} else {
    print "The two DNA sequences are of different lengths. Please try again\n";
}

# Subroutine to calculate GC content
sub analyzeGCContent {
    my ($sequence) = @_;
    my $total_bases = length($sequence);
    my $gc_count = ($sequence =~ tr/GC//); # Count the number of G and C bases in the sequence
    my $gc_content = ($gc_count / $total_bases) * 100; # Calculate the GC content as a percentage
    return $gc_content; # return the GC content
}