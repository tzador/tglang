########## Annotated Perl Code #########

#!/usr/bin/perl

# This is a comment in Perl, denoted by a '#' symbol at the beginning of the line.
# Comments are used to provide information and explanations to the code.
# They are not actually executed by the computer.

use strict; # This statement enables strict syntax checking in Perl.

my $num = 10; # Declaring a variable, 'my' is used to restrict the scope of the variable.

if ($num > 5) { # Conditional statement, 'if' is used to check if a condition is true.
	print "The number is greater than 5\n"; # Code to be executed if the condition is true.
} elsif ($num == 5) { # 'elsif' is used to check an additional condition if the first one is false.
	print "The number is equal to 5\n"; # Code to be executed if the condition is true.
} else { # 'else' is used to execute code if all previous conditions are false.
	print "The number is less than 5\n"; # Code to be executed if the condition is true.
}

my @numbers = (1, 2, 3, 4, 5); # Declaring an array, denoted by '@'.

foreach my $num (@numbers) { # 'foreach' is used to iterate through each element in the array.
	print "$num\n"; # Code to be executed for each element in the array.
}

sub add_numbers { # Declaring a subroutine, 'sub' is used to denote a subroutine.
	my ($x, $y) = @_; # Declaring subroutine parameters, 'my' is used to restrict their scope.
	return $x + $y; # Returning the sum of the parameters.
}

print "\n"; # Adds a blank line for readability.

my $sum = add_numbers(2, 3); # Calling the subroutine and assigning its return value to $sum.

print "The sum of 2 and 3 is $sum"; # Printing the value of $sum, 'print' is used to display output.