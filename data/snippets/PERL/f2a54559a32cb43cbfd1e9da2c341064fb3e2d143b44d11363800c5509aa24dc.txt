# This code snippet uses the GD module to create a complex image using nested loops and conditional statements

# Import the GD module
use GD;

# Create a new image with a width and height of 600 pixels
my $image = new GD::Image(600, 600);

# Allocate colors for the image
my $black = $image->colorAllocate(0, 0, 0); # black
my $white = $image->colorAllocate(255, 255, 255); # white
my $red = $image->colorAllocate(255, 0, 0); # red

# Create a nested loop to iterate through x and y coordinates
for (my $x = 0; $x < 600; $x++) {
    for (my $y = 0; $y < 600; $y++) {

        # Use conditional statements to determine the color of each pixel based on its coordinates
        if ($x < 300 && $y < 300) {
            $image->setPixel($x, $y, $black); # set pixel to black in top left quadrant
        }
        elsif ($x >= 300 && $y < 300) {
            $image->setPixel($x, $y, $red); # set pixel to red in top right quadrant
        }
        elsif ($x < 300 && $y >= 300) {
            $image->setPixel($x, $y, $white); # set pixel to white in bottom left quadrant
        }
        else {
            $image->setPixel($x, $y, $black); # set pixel to black in bottom right quadrant
        }
    }
}

# Add text to the image
my $font = GD::Font->Small;
$image->string($font, 250, 250, "PERL Code", $white); # draw text in the center of the image

# Output the image as a png file
print $image->png;