# This program uses the LWP::UserAgent module to retrieve the HTML content of a given URL
# and print out the title of the page and all the links on the page.

use strict; # enable strict mode
use warnings; # enable warnings

use LWP::UserAgent; # import the LWP::UserAgent module for making HTTP requests

# define a subroutine to retrieve the HTML content of a given URL
sub get_html_content {
    my $url = shift; # get the URL passed in as a parameter
    my $ua = LWP::UserAgent->new(); # create a new UserAgent object
    my $response = $ua->get($url); # use the UserAgent object to make a GET request to the URL
    if ($response->is_success) { # check if the request was successful
        return $response->decoded_content; # if it was, return the decoded content (HTML code)
    } else {
        die "Error: " . $response->status_line; # if there was an error, print out the error message
    }
}

# define a subroutine to parse the HTML content and extract the title and links
sub parse_html_content {
    my $html_content = shift; # get the HTML content passed in as a parameter
    my @links; # initialize an empty array to store the links
    if ($html_content =~ /<title>(.*?)<\/title>/i) { # use a regular expression to match the title tag and its content
        my $title = $1; # store the title in a variable
        print "Title: $title\n"; # print out the title
    }
    while ($html_content =~ /<a\s.*?href="(.*?)".*?>.*?<\/a>/gi) { # use a regular expression to match all anchor tags and their href attribute
        my $link = $1; # store the link in a variable
        push(@links, $link); # add the link to the array
    }
    return @links; # return the array of links
}

# main program
my $url = "https://www.example.com"; # specify the URL to retrieve the HTML content from
my $html_content = get_html_content($url); # call the get_html_content subroutine to retrieve the HTML code
my @links = parse_html_content($html_content); # call the parse_html_content subroutine to extract the title and links

# print out the links
print "Links:\n";
foreach my $link (@links) { # loop through the array of links
    print "$link\n"; # print out each link on a new line
}

# output:
# Title: Example Domain
# Links:
# https://www.iana.org/domains/example
# https://www.iana.org