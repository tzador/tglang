use strict;          # Declaring strict subs and variables
use warnings;        # Enabling warnings
use feature qw(say); # Enabling the say feature

my @array = ();      # Declaring an empty array

for (my $i = 0; $i < 10; $i++) {  # Looping through numbers 0 to 9
    push @array, $i;               # Adding each number to the array
}

say "The array contains: ";  # Using the say function to print a string
foreach my $element (@array) {   # Looping through each element in the array
    say $element;               # Printing out each element on a new line
}

my %hash = (            # Declaring a hash with key-value pairs
    apple   => "red",
    banana  => "yellow",
    orange  => "orange"
);

say "The hash contains: ";   # Using the say function to print a string
foreach my $key (keys %hash) {  # Looping through the keys of the hash
    say "$key is $hash{$key}";  # Printing out each key-value pair
}

for (my $i = 0; $i < 10; $i++) {  # Looping through numbers 0 to 9
    if ($i % 2 == 0) {            # Checking if the number is even
        next;                     # Skipping to the next iteration
    }
    else {
        say "The number $i is odd";  # Using the say function to print a string
    }
}

say "The sum of the numbers is " .  # Using the say function to print a string
    (sum(@array) + sum(values %hash));  # Calculating the sum of the array and hash and concatenating it to the string

sub sum {         # Defining a sum function
    my @nums = @_;   # Assigning function arguments to an array
    my $total = 0;   # Initializing total variable
    foreach my $num (@nums) {  # Looping through each number
        $total += $num;        # Adding number to total
    }
    return $total;   # Returning the total
}