#!/usr/bin/perl

# This is a long and complex code snippet in PERL
# It demonstrates the use of regular expressions and file handling

use strict; # strict pragma for error checking
use warnings;
use File::Basename; # module for working with file paths
use Data::Dumper; # module for printing data structures

# open a file for reading
my $filename = "data.txt"; 
open(my $fh, '<', $filename) or die "Could not open file '$filename' $!";

# array to store the extracted data
my @data;

# read each line in the file
while (my $line = <$fh>) {
  # use regular expression to extract the desired data
  if ($line =~ /(\d+)\s(.+)\s(.+)\s(.+)/) {
    # create a hash with the extracted data
    my %info = (
      id => $1,
      name => $2,
      age => $3,
      occupation => $4
    );

    # push the hash into the array
    push @data, \%info;
  }
}

# print out the extracted data
print Dumper \@data;

# close the file
close($fh); 

# subroutine to write data to a new file
sub write_data {
  my ($name, $age, $occupation) = @_;

  # generate a unique ID for the new data
  my $id = int(rand(1000));

  # open a new file for writing
  my $new_file = "new_data.txt";
  open(my $fh, '>>', $new_file) or die "Could not open file '$new_file' $!";

  # construct the new data string
  my $new_data = "$id $name $age $occupation\n";

  # write the new data to the file
  print $fh $new_data;

  # close the file
  close($fh);
}

# call the write_data subroutine to add new data
write_data("John Doe", 25, "Engineer");

# call the write_data subroutine again with different data
write_data("Jane Smith", 30, "Teacher");

# print out the updated data
print "Updated data:\n";
print Dumper \@data;