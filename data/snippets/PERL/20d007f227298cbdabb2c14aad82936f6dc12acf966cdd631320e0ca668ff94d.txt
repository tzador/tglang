# This program generates a random password
# with a length of 10 characters and
# includes at least one special character
use strict;
use warnings;
use feature qw/say/;
use List::Util qw(shuffle);

my $length = 10; # specify password length here

# create arrays of possible characters for each character type
my @lower_case = ('a'..'z');
my @upper_case = ('A'..'Z');
my @numbers = (0..9);
my @special_chars = qw(! @ # $ % ^ & * ( ) - _ = + [ ] { } | \ : ; " ' < > , . / ?);

# initialize password
my $password = '';

# loop to randomly select characters from each character type arrays
# to create password
for (my $i = 0; $i < $length; $i++) {
    my $type = int(rand(4)); # randomly select character type
    if ($type == 0) { # select from lower case array
        $password .= $lower_case[rand @lower_case];
    } elsif ($type == 1) { # select from upper case array
        $password .= $upper_case[rand @upper_case];
    } elsif ($type == 2) { # select from number array
        $password .= $numbers[rand @numbers];
    } else { # select from special character array
        $password .= $special_chars[rand @special_chars];
    }
}

# shuffle password to add more randomness
$password = join('', shuffle(split(//, $password)));

say "Generated password: $password"; # output generated password