#This code snippet is a function that takes in an array and returns a sorted version of that array using the insertion sort algorithm

sub insertion_sort {
    my @arr = @_; #initialize input array as a local variable
    my $n = scalar @_; #get length of array
    for my $i (1 .. $n-1) { #loop through each element in array, starting at the second element
        my $val = $arr[$i]; #store the value of the current element
        my $j = $i - 1; #set the second pointer to the previous element
        while ($j >= 0 && $arr[$j] > $val) { #while the second pointer is not at the beginning of array and the value at that position is greater than the current element value
            $arr[$j+1] = $arr[$j]; #shift the second pointer element to the right
            $j--; #decrement the second pointer
        }
        $arr[$j+1] = $val; #insert the current element in the correct sorted position
    }
    return @arr; #return the sorted array
}

my @unsorted_arr = (9, 3, 10, 1, 5); #example unsorted array
my @sorted_arr = insertion_sort(@unsorted_arr); #call function to sort the array
print "@sorted_arr"; #print the sorted array to the console