#This code snippet uses a hash to store and manipulate data
my %hash = ('key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3');

#Accessing values in the hash
my $value1 = $hash{'key1'};

#Adding a new key-value pair to the hash
$hash{'key4'} = 'value4';

#Iterating through the hash and printing key-value pairs
foreach my $key (keys %hash) {
    print "$key : $hash{$key}\n";
}

#Deleting a key-value pair from the hash
delete $hash{'key3'};

#Checking if a key exists in the hash
if (exists $hash{'key1'}) {
    print "Key 1 exists in the hash\n";
}

#Sorting the hash by keys and printing key-value pairs
foreach my $key (sort keys %hash) {
    print "$key : $hash{$key}\n";
}

#Sorting the hash by values and printing key-value pairs
foreach my $key (sort { $hash{$a} cmp $hash{$b} } keys %hash) {
    print "$key : $hash{$key}\n";
}

#Converting the hash to an array for easier manipulation
my @array = %hash;

#Looping through the array and printing values
foreach my $value (@array) {
    print "$value\n";
}

#Finding the length of the array
my $length = $#array + 1;
print "Length of array: $length\n";

#Adding an element to the end of the array
push @array, 'value5';

#Removing an element from the beginning of the array
shift @array;

#Reversing the array and printing its elements
my @reversed_array = reverse(@array);
foreach my $value (@reversed_array) {
    print "$value\n";
}

#Joining the elements of the array into a string
my $string = join(",", @array);
print "String: $string\n";

#Splitting a string into an array
my $new_string = "one,two,three,four";
my @new_array = split(/,/, $new_string);

#Using regular expressions to filter and manipulate strings
my $email = "john.doe@example.com";
if ($email =~ /^(\w+)@(\w+)\.(com|net|org)$/) {
    my $username = $1;
    my $domain = $2;
    my $extension = $3;
    print "Username: $username\n";
    print "Domain: $domain\n";
    print "Extension: $extension\n";
}

#Creating a subroutine
sub greet {
    my ($name) = @_;
    print "Hello $name!\n";
}

#Calling the subroutine with an argument
greet("John"); 

#Using default arguments in a subroutine
sub add {
    my ($num1, $num2) = @_;
    if (!$num2) { #if num2 is not provided, set it to 1
        $num2 = 1;
    }
    my $sum = $num1 + $num2;
    print "Sum: $sum\n";
}

#Calling the subroutine with and without providing arguments
add(5, 2); #Output: Sum: 7
add(5); #Output: Sum: 6