#! /usr/bin/perl

# Annotated Markdown Code

use strict;
use warnings;

# Define a function to print the sum of two numbers
sub sum_func {
    my ($num1, $num2) = @_; # declare arguments using list context
    my $sum = $num1 + $num2; # perform the sum operation
    return $sum; # return the sum as a result of the function
}

# Define an array of numbers
my @numbers = (5, 10, 15, 20);

# Use a loop to iterate through the array and print each number
foreach my $num (@numbers) {
    print "$num\n"; # use the print function to print each number on a new line
}

# Use the sum_func function to calculate the sum of two numbers from the array
my $result = sum_func($numbers[1], $numbers[2]);
print "The sum of $numbers[1] and $numbers[2] is $result.\n"; # use the print function to display the result

# Define a hash of animals and their corresponding sounds
my %animal_sounds = (
    "cat" => "meow",
    "dog" => "woof",
    "bird" => "tweet"
);

# Use a loop to iterate through the hash and print each animal and its sound
while (my ($animal, $sound) = each %animal_sounds) {
    print "The $animal says $sound.\n"; # use the print function to display each animal and its sound
}

# Create a new file and write the animal_sounds hash to it
open(my $file, '>', 'animals.txt') or die "Could not open file: $!"; # open the file for writing or print error message if it fails
foreach my $animal (keys %animal_sounds) {
    print $file "$animal: $animal_sounds{$animal}\n"; # write each animal and its sound to the file
}
close($file); # close the file

# Define a regular expression pattern to match email addresses
my $email_pattern = "[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}";

# Use the pattern to check if a string is a valid email address
my $email = "example@test.com";
if ($email =~ /$email_pattern/i) { # use the regular expression match operator (~~) to check if the email address matches the pattern
    print "$email is a valid email address.\n"; # use the print function to display a message if the email address is valid
}

# Define a subroutine to calculate the factorial of a number
sub factorial {
    my $num = $_[0]; # define the argument using scalar context
    if ($num <= 1) { # base case - factorial of 0 and 1 is 1
        return 1;
    } else { # recursive case - call the factorial function on a smaller number and multiply it by the current number
        return $num * factorial($num - 1);
    }
}

# Use the factorial subroutine to calculate the factorial of 5
my $factorial = factorial(5);
print "Factorial of 5 is $factorial.\n"; # use the print function to display the result