#!/usr/bin/perl # This is a comment indicating the location of the Perl interpreter
use strict; # This line enforces strict rules on the code for better formatting and bug prevention

# This is a multiline comment explaining the purpose of the code
# This code snippet uses various conditional statements and loops to manipulate data and print the results
# It also utilizes subroutines to reuse code and improve readability

my @numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9); # This line creates an array named @numbers with 9 integers
my $sum = 0; # This line creates a variable named $sum and initializes it to 0

# This for loop iterates through the array and adds each element to the $sum variable
for my $i (0..$#numbers) {
    $sum += $numbers[$i];
}

# This if statement checks if the $sum variable is greater than 20
# If yes, it calls the print_numbers subroutine passing in the @numbers array as an argument
# Else, it prints a message indicating the total sum
if ($sum > 20) {
    print_numbers(@numbers); # This line calls the print_numbers subroutine with the @numbers array as an argument
} else {
    print "The total sum of the numbers is $sum\n"; # This line prints a message with the value of $sum
}

# This subroutine prints all the numbers in the array separated by a comma
sub print_numbers {
    my @array = @_; # This line creates a copy of the passed in @numbers array
    my $last_index = $#array; # This line creates a variable containing the last index of the array

    # This for loop iterates through the array and prints each element followed by a comma
    for my $i (0..$last_index) {
        print "$array[$i], ";
    }

    print "\n"; # This line prints a new line
}

# This while loop checks if the array contains the number 3
# If yes, it uses the splice function to remove it from the array
# Once removed, it prints a message indicating the updated array
while (my $index = grep { $numbers[$_] == 3 } 0..$#numbers) { # This line uses the grep function to check for the number 3 in the array
    splice @numbers, $index, 1; # This line uses the splice function to remove the element at the specified index
    print "Number 3 has been removed from the array: @numbers\n"; # This line prints a message with the updated array
}

# This do-while loop creates a new array with the even numbers from the original array
# It then prints a message indicating the new array
do {
    my @even_numbers; # This line creates an empty array
    for my $i (0..$#numbers) {
        if ($numbers[$i] % 2 == 0) { # This line checks if the element is even
            push @even_numbers, $numbers[$i]; # This line uses the push function to add the element to the new array
        }
    }
    print "The even numbers in the original array are: @even_numbers\n"; # This line prints a message with the new array
} while (0); # This line creates an infinite loop as the condition is always false

# This foreach loop iterates through the array and squares each element
# It then prints a message with the updated array
foreach my $num (@numbers) { # This line uses the foreach loop to iterate through the array
    $num = $num ** 2; # This line squares each element
}
print "The array has been squared: @numbers\n"; # This line prints a message with the updated array

__END__