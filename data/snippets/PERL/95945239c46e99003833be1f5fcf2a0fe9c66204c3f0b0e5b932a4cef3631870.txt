use strict
# This line enables strict mode, which forces us to declare all variables before using them

# Declare an empty array
my @fruits;

# Add elements to the array using the push function
push(@fruits, "apple");
push(@fruits, "orange");
push(@fruits, "banana");
push(@fruits, "grapes");

# Loop through the array and print out each element
foreach my $fruit (@fruits) {
    print "$fruit\n";
}

# Declare a hash table (associative array)
my %person = (
    "name" => "John",
    "age" => 30,
    "occupation" => "programmer"
);

# Access and print individual value in the hash table
print "Name: $person{'name'}\n";

# Add new key-value pairs to the hash table
$person{"hobby"} = "reading";
$person{"location"} = "New York";

# Loop through the hash table and print out each key-value pair
while (my ($key, $value) = each(%person)) {
    print "$key: $value\n";
}

# Define a function that checks if a number is prime
sub is_prime {
    my $num = $_[0]; # Get the first argument passed to the function
    my $is_prime = 1; # Set a flag variable to true

    # Use a for loop to check if $num is divisible by any number other than 1 and itself
    for (my $i = 2; $i < $num; $i++) {
        if ($num % $i == 0) {
            $is_prime = 0; # Set the flag to false if $num is divisible by $i
            last; # Break out of the loop as soon as a divisor is found
        }
    }

    return $is_prime;
}

# Call the function and print the result
my $number = 17;
if (is_prime($number)) {
    print "$number is a prime number\n";
} else {
    print "$number is not a prime number\n";
}