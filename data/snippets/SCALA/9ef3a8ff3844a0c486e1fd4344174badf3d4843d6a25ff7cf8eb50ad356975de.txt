/**
 * This class represents a binary tree data structure.
 * @tparam T the type of elements stored in the tree
 * @constructor creates an empty binary tree
 */
class BinaryTree[T] extends Iterable[T] { // implementing Iterable trait for use in for-comprehensions

    /**
     * Node class represents a node in the binary tree.
     * @param value the value stored in the node
     * @param left the left child of the node
     * @param right the right child of the node
     */
    case class Node(value: T, left: Option[Node], right: Option[Node])

    private var root: Option[Node] = None // initially, the tree is empty

    /**
     * Adds a new element to the tree.
     * @param elem the element to be added
     */
    def add(elem: T): Unit = {
        // if tree is empty, create a root node with the given element
        if (root.isEmpty) {
            root = Some(Node(elem, None, None))
        } else {
            addHelper(elem, root.get)
        }
    }

    /**
     * Recursive helper method to add an element to the tree.
     * @param elem the element to be added
     * @param node the current node being traversed
     */
    private def addHelper(elem: T, node: Node): Unit = {
        // if element is less than current node's value, go left
        if (elem < node.value) {
            // if left child is empty, create a new node and assign it as left child
            if (node.left.isEmpty) {
                node.left = Some(Node(elem, None, None))
            } else {
                // otherwise, recursively call addHelper on left child
                addHelper(elem, node.left.get)
            }
            // if element is greater than current node's value, go right
        } else if (elem > node.value) {
            // if right child is empty, create a new node and assign it as right child
            if (node.right.isEmpty) {
                node.right = Some(Node(elem, None, None))
            } else {
                // otherwise, recursively call addHelper on right child
                addHelper(elem, node.right.get)
            }
        } else {
            // element is equal to current node's value, so do nothing
        }
    }

    /**
     * Checks whether an element is present in the tree.
     * @param elem the element to be checked
     * @return true if element is present, false otherwise
     */
    def contains(elem: T): Boolean = {
        containsHelper(elem, root)
    }

    /**
     * Recursive helper method to check if an element is present in the tree.
     * @param elem the element to be checked
     * @param node the current node being traversed
     * @return true if element is present, false otherwise
     */
    private def containsHelper(elem: T, node: Option[Node]): Boolean = {
        // base case: if node is empty, then element is not present in the tree
        if (node.isEmpty) {
            false
        } else if (elem < node.get.value) {
            // if element is less than current node's value, go left
            containsHelper(elem, node.get.left)
        } else if (elem > node.get.value) {
            // if element is greater than current node's value, go right
            containsHelper(elem, node.get.right)
        } else {
            // element is equal to current node's value, so it is present in the tree
            true
        }
    }

    /**
     * Returns an iterator for the tree's elements.
     * @return an iterator for the tree's elements
     */
    def iterator: Iterator[T] = {
        // the iterator will use in-order traversal to return the tree's elements
        def inOrderTraversal(node: Option[Node]): Iterator[T] = {
            if (node.isEmpty) {
                Iterator.empty
            } else {
                // recursively call inOrderTraversal on left child, then return current node's value
                inOrderTraversal(node.get.left) ++ Iterator(node.get.value) ++ inOrderTraversal(node.get.right)
            }
        }
        inOrderTraversal(root)
    }
}

// example usage of the BinaryTree class
val tree = new BinaryTree[Int]
tree.add(5)
tree.add(3)
tree.add(8)
tree.add(1)

// check if element is present in the tree
val containsOne = tree.contains(1) // true
val containsTen = tree.contains(10) // false

// print elements of the tree using for-comprehension
for (num <- tree) {
    println(num) // 1, 3, 5, 8
}