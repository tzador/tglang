/**
* Function to calculate the nth Fibonacci number
* with memoization to optimize performance
* @param n the nth Fibonacci number to calculate
*/
def memoizedFibonacci(n: Int): Int = {
  if(n <= 0) return 0
  if(n == 1) return 1

  // Memoization cache to store calculated fibonacci numbers
  val cache = collection.mutable.Map(0 -> 0, 1 -> 1)

  // Function to check if the nth fibonacci number is already calculated
  // and return from cache if available, else calculate and add to cache
  def fibonacciHelper(n: Int): Int = {
    if(cache.contains(n)) return cache(n)
    else {
      val result = fibonacciHelper(n-1) + fibonacciHelper(n-2)
      cache += n -> result
      return result
    }
  }

  return fibonacciHelper(n)
}