def fibonacci(n: Int): Int = {
  // Memoized function to improve performance
  val memo = scala.collection.mutable.Map(0 -> 0, 1 -> 1)

  // Recursive function to calculate the nth Fibonacci number
  // Uses pattern matching to handle base cases and memoization to avoid recalculating the same value
  def fib(n: Int): Int = n match {
    case 0 => memo(0)
    case 1 => memo(1)
    case _ =>
      if (!memo.contains(n)) {
        memo(n) = fib(n - 1) + fib(n - 2)
      }
      memo(n)
  }

  fib(n)
}

// Call the function with input n = 10
val result = fibonacci(10)
println(result)

// Output: 55