// Annotated markdown code snippet
// Class definition with a generic type parameter
class MyClass[T] {
  // Annotated variable declaration with inferred type
  val myVariable = "Hello, world!"

  // Function definition with a generic type parameter and explicit return type
  def myFunction[A, B]: T = {
    // Annotated if statement with boolean expression
    if (A == B) {
      // Annotated print statement
      println("The generic types are equal!")
      // Annotated return statement with inferred type
      myVariable.asInstanceOf[T]
    } else {
      // Annotated print statement
      println("The generic types are not equal.")
      // Annotated return statement with explicit type
      myVariable.asInstanceOf[String].asInstanceOf[T]
    }
  }
}

// Annotated variable declaration with explicit type
val myObject: MyClass[Int] = new MyClass[Int]

// Annotated function call with explicit type parameters
myObject.myFunction[Boolean, Boolean]