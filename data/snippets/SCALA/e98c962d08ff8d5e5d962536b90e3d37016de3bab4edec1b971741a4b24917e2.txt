//This code snippet shows how to implement a merge sort algorithm in Scala

object MergeSort {

  //function to perform merge operation 
  def mergeSort(arr: Array[Int]): Array[Int] = {

    //function to merge two sorted subarrays
    def merge(left: Array[Int], right: Array[Int]): Array[Int] = {

      //initialize an array to store the merged result
      val mergedArray = new Array[Int](left.length + right.length)
      
      //initialize indices for left, right and merged arrays
      var leftIndex = 0
      var rightIndex = 0
      var mergedIndex = 0
      
      //merge until either left or right array is fully processed
      while (leftIndex < left.length && rightIndex < right.length) {

        //compare elements from the left and right arrays and add the smaller element to the merged array
        if (left(leftIndex) <= right(rightIndex)) {
          mergedArray(mergedIndex) = left(leftIndex)
          leftIndex += 1
        } else {
          mergedArray(mergedIndex) = right(rightIndex)
          rightIndex += 1
        }
        mergedIndex += 1
      }

      //copy remaining elements from left array to merged array if any
      while (leftIndex < left.length) {
        mergedArray(mergedIndex) = left(leftIndex)
        leftIndex += 1
        mergedIndex += 1
      }

      //copy remaining elements from right array to merged array if any
      while (rightIndex < right.length) {
        mergedArray(mergedIndex) = right(rightIndex)
        rightIndex += 1
        mergedIndex += 1
      }

      //return the merged array
      mergedArray
    }

    //function to perform merge sort recursively
    def mergeSortRecursive(arr: Array[Int]): Array[Int] = {
      //base case: if array has size 1 or less, it is already sorted
      if (arr.length <= 1) {
        arr
      } else {
        //find the middle index of the array
        val mid = arr.length / 2
        
        //divide array into two subarrays
        val left = arr.slice(0, mid)
        val right = arr.slice(mid, arr.length)
        
        //recursively call mergeSort on each subarray and merge the results
        merge(mergeSortRecursive(left), mergeSortRecursive(right))
      }
    }

    //call mergeSortRecursive function and return the result
    mergeSortRecursive(arr)
  }

  def main(args: Array[String]): Unit = {

    //initialize an array of unsorted numbers
    val arr = Array(6, 3, 8, 2, 9, 1, 5, 4, 7)

    //print the unsorted array
    println("Unsorted array: " + arr.mkString(" "))

    //call mergeSort function to sort the array
    val sortedArr = mergeSort(arr)

    //print the sorted array
    println("Sorted array: " + sortedArr.mkString(" "))
  }
}