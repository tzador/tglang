// Define a class Person
class Person(val name: String, var age:Int) {
  // Define a method to print person's information
  def printInfo(): Unit = {
    println(s"Name: $name, Age: $age")
  }
}

// Create an object of class Person
val person = new Person("John", 25)

// Call the printInfo method
person.printInfo()

// Define a case class called Book
case class Book(name: String, author: String, pages: Int)

// Create a list of books
val bookList = List(
  Book("Pride and Prejudice", "Jane Austen", 279),
  Book("To Kill a Mockingbird", "Harper Lee", 281),
  Book("1984", "George Orwell", 328),
  Book("The Great Gatsby", "F. Scott Fitzgerald", 218)
)

// Use pattern matching and map function to get the total number of pages from the list of books
val totalPages = bookList.map{
  case Book(_, _, pages) => pages  // Underscores are used as placeholders for values we don't care about
}.sum

// Print the total number of pages
println(s"Total pages: $totalPages")

// Create a recursive function to calculate the factorial of a number
def factorial(n: BigInt): BigInt = {
  if(n <= 1) 1
  else n * factorial(n-1)
}
// Call the function to get the factorial of 7 and print it
println(s"Factorial of 7: ${factorial(7)}")

// Define a trait called Shape
trait Shape {
  // Define an abstract method to calculate area
  def getArea(): Double
}

// Define a class Rectangle that extends the Shape trait
class Rectangle(base: Double, height: Double) extends Shape {
  // Implement the getArea method for Rectangle
  def getArea(): Double = base * height
}

// Create an object of class Rectangle
val rectangle = new Rectangle(5, 2)

// Call the getArea method
println(s"Area of rectangle: ${rectangle.getArea()}")