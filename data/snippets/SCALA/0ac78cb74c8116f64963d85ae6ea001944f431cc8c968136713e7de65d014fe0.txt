def mergeSort[T: Ordering](list: List[T]): List[T] = {
  val middle = list.length / 2
  if (middle == 0) return list  // base case
  def merge(list1: List[T],list2: List[T]): List[T] =
    (list1, list2) match {
      case(Nil, _) => list2
      case(_, Nil) => list1
      case(x :: xs, y :: ys) =>
        if (implicitly[Ordering[T]].lt(x, y)) x :: merge(xs, list2) // tailrec
        else y :: merge(list1, ys)
    }
  val (first, second) = list.splitAt(middle)
  merge(mergeSort(first), mergeSort(second))
}

// Example Usage
val unsortedList = List("cat", "dog", "bird", "zebra", "ant")
val sortedList = mergeSort(unsortedList)

println(sortedList)