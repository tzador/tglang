// define a generic function
  def genericFunction[T <: AnyRef](obj: T, newObj: T): T = {
    // create a new instance of type T
    val newObject = newObj.getClass.getConstructor().newInstance()

    // copy all fields from obj to newObject
    val fields = obj.getClass.getDeclaredFields()
    for (field <- fields) {
      field.setAccessible(true)
      field.set(newObject, field.get(obj))
    }

    // return the newObject
    newObject
  }

// create a case class to use with the generic function
case class Person(name: String, age: Int)

// create an instance of the Person class
val person = Person("John", 25)

// use the generic function to create a new instance of Person with changed name
val newPerson = genericFunction[Person](person, Person("Jane", person.age))

// print the newPerson object
println(newPerson)