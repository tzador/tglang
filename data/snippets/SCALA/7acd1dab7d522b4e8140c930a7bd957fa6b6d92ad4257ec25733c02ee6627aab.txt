/* 
This code snippet demonstrates how to use Scala's higher-order functions to create a list of functions. 
The functions in this list take an Int as input and return a Boolean as output. 
*/

// Create a function that takes an Int as input and returns a Boolean representing if it is even or not.
val isEven: Int => Boolean = (x) => if (x % 2 == 0) true else false

// Create a function that takes an Int as input and returns a Boolean representing if it is a positive number or not.
val isPositive: Int => Boolean = (x) => if (x > 0) true else false

// Create a function that takes an Int as input and returns a Boolean representing if it is a multiple of 3 or not.
val isMultipleOf3: Int => Boolean = (x) => if (x % 3 == 0) true else false

// Create a list containing the three functions we just defined.
val functionList: List[Int => Boolean] = List(isEven, isPositive, isMultipleOf3)

// Create a function that takes in a list of functions as input and an Int to test against each function.
def testFunctions(list: List[Int => Boolean], num: Int): List[Boolean] = {
  // Use Scala's higher-order function map to apply each function in the list to the input Int and return a list of results.
  list.map(f => f(num))
}

// Test the functionList on the input 6 and print the results in a formatted string.
println(testFunctions(functionList, 6).mkString("The functions in the list evaluated to: ", ", ", " for input 6."))