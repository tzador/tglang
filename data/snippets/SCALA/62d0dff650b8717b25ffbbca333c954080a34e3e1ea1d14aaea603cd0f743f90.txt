// Define a case class Person, with name and age as parameters
case class Person(name: String, age: Int)

// Create a list of Person objects
val peopleList = List(Person("John", 25), Person("Jane", 30), Person("Bob", 45))

// Filter the list based on age
val filteredList = peopleList.filter(_.age > 30)

// Define a function to calculate the average age of a list of Persons
def averageAge(people: List[Person]): Double = {
  // Use pattern matching to handle empty lists
  people match {
    // If list is empty, return 0
    case Nil => 0
    // If list has one element, return the age of that element
    case person :: Nil => person.age
    // If list has multiple elements, calculate the sum of all ages and divide by list size
    case list => list.map(_.age).sum.toDouble / list.size
  }
}

// Call the averageAge function on the filteredList we created earlier
val average = averageAge(filteredList)

// Print out the average age
println(s"The average age is $average.")