//Define a case class for a person
case class Person(name: String, age: Int)

//Create a list of Persons
val people = List(
  Person("Alice", 25),
  Person("Bob", 30),
  Person("Charlie", 40),
  Person("David", 35),
  Person("Emily", 27)
)

//Filter the list to only include people over the age of 30
val filteredPeople = people.filter(_.age > 30)

//Map the filtered list to create a new list of names
val names = filteredPeople.map(_.name)

//Print the list of names
println(names)

//Define a trait for an animal that can run
trait Runner {
  def run(): Unit = println("I am running!")
}

//Create a class for a cheetah that extends the Runner trait
class Cheetah extends Runner

//Initialize a new instance of the Cheetah class
val cheetah = new Cheetah()

//Call the run method on the cheetah instance
cheetah.run()

//Define an anonymous function that multiplies two numbers
val multiply = (x: Int, y: Int) => x * y

//Use the function to multiply 5 and 10
println(multiply(5, 10))

//Create a higher-order function that takes in a function and a list of numbers
def squareNumbers(numbers: List[Int], func: (Int, Int) => Int): List[Int] = {
  numbers.map(x => func(x, x))
}

//Call the squareNumbers function with the multiply function and a list of numbers
val squared = squareNumbers(List(1, 2, 3, 4), multiply)

//Print the list of squared numbers
println(squared)