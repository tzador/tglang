// This is a function that takes a list of strings and returns a new list with the strings in reverse order
def reverseList(list: List[String]): List[String] = {
  if (list.isEmpty) List()
  else list.last :: reverseList(list.dropRight(1))
}

// This is a higher order function that takes another function as a parameter
def mapList(list: List[String], func: String => String): List[String] = {
  if (list.isEmpty) List()
  else func(list.head) :: mapList(list.tail, func)
}

// This is a case class that represents a person with a name, age and list of hobbies
case class Person(name: String, age: Int, hobbies: List[String])

// This is a list of Person instances
val people = List(
  Person("John", 22, List("Reading", "Hiking", "Cooking")),
  Person("Sarah", 26, List("Baking", "Singing", "Traveling")),
  Person("Mike", 30, List("Fishing", "Gardening", "Painting"))
)

// This is a partial function that will filter out people over the age of 25 and only return their names and hobbies
val filterPeople = (p: Person) => if (p.age > 25) (p.name, p.hobbies) else ()

// This is a list comprehension that filters the people list using the filterPeople function and maps the result to a string
val filteredNamesAndHobbies = for {
  p <- people if filterPeople.isDefinedAt(p)
  (name, hobbies) = filterPeople(p)
} yield s"$name's hobbies are: ${hobbies.mkString(", ")}."

// This is a partial function that will calculate the average age of people in the people list
val calculateAverageAge = (people: List[Person]) => {
  val totalAge = people.map(_.age).sum
  val numPeople = people.length
  totalAge / numPeople
}

// This is a higher order function that takes in a list of people and a partial function, and returns a new list using the partial function
def processPeople(people: List[Person], func: List[Person] => Int): List[Int] = {
  if (people.isEmpty) List()
  else func(people) :: processPeople(people.tail, func)
}

// This is the final list which contains the average ages of the people in the people list
val averageAges = processPeople(people, calculateAverageAge).mkString(", ")