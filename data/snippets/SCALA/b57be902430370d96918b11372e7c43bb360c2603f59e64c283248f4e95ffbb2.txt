// This is a complex code snippet in SCALA showcasing recursion, pattern matching and higher-order functions
// Fibonacci function using tail recursion with pattern matching
def fib(n: Int): Int = {
  @tailrec
  def fibHelper(n: Int, a: Int, b: Int): Int = n match {
    case 0 => a
    case _ => fibHelper(n - 1, b, a + b)
  }
  fibHelper(n, 0, 1)
}

// Map function using higher-order function
def map[A, B](xs: List[A], f: A => B): List[B] = xs match {
  case Nil => Nil
  case y :: ys => f(y) :: map(ys, f)
}

// Annotated markdown code snippet