object Main extends App {

  // defining case classes
  case class Person(name: String, age: Int, occupation: String)
  case class Student(name: String, age: Int, major: String)

  // pattern matching on case classes
  def greeting(person: Person): Unit = person match {
    case Person(name, _, "Teacher") =>
      println(s"Hello $name, welcome to our school!")
    case Person(name, _, "Doctor") =>
      println(s"Hello Dr. $name, how may I assist you?")
    case Person(name, _, _) =>
      println(s"Hi $name, nice to meet you!")
  }

  // using higher order functions
  def map[A, B](list: List[A], function: A => B): List[B] = {
    if (list.isEmpty)
      List()
    else
      function(list.head) :: map(list.tail, function)
    }
  val nums = List(1, 2, 3, 4, 5)
  val squares = map(nums, (x: Int) => x * x)
  println(squares) // List(1, 4, 9, 16, 25)

  // using anonymous functions
  val add = (x: Int, y: Int) => x + y
  println(add(5, 10)) // 15

  // using higher order methods
  val nums2 = List(2, 4, 6, 8, 10)
  val sum = nums2.foldLeft(0)((x: Int, y: Int) => x + y)
  println(sum) // 30

  // using currying
  def addAndMultiply(x: Int)(y: Int)(z: Int): Int = x + y * z
  val result = addAndMultiply(3)(4)(5)
  println(result) // 23

  // defining implicit classes
  implicit class StringImprovements(s: String) {
    def reverse: String = s.reverse
    def multiply(i: Int): String = s * i
  }
  val name = "John"
  println(name.reverse) // "nhoJ"
  println(name.multiply(3)) // "JohnJohnJohn"

}