/**
 * A class representing a binary tree data structure.
 *
 * @tparam T the type of data stored in the tree nodes.
 * @param root the root node of the tree.
 * @param leftTree the left subtree of the root node.
 * @param rightTree the right subtree of the root node.
 */
class BinaryTree[T](val root: T, val leftTree: Option[BinaryTree[T]], val rightTree: Option[BinaryTree[T]]) {
  /**
   * A method to insert a new node into the binary tree.
   *
   * @param data the data to be stored in the new node.
   * @return the updated binary tree with the new node inserted.
   */
  def insert(data: T): BinaryTree[T] = {
    // If the data is equal to the root node, return the current tree.
    if (data == root) this
    // If the data is less than the root node, insert it into the left subtree.
    else if (data < root) {
      leftTree match {
        // If the left subtree is empty, create a new node and insert it as the left subtree.
        case None => new BinaryTree(root, Some(new BinaryTree(data)), rightTree)
        // If the left subtree is not empty, recursively call insert on the left subtree.
        case Some(tree) => new BinaryTree(root, Some(tree.insert(data)), rightTree)
      }
    }
    // If the data is greater than the root node, insert it into the right subtree.
    else {
      rightTree match {
        // If the right subtree is empty, create a new node and insert it as the right subtree.
        case None => new BinaryTree(root, leftTree, Some(new BinaryTree(data)))
        // If the right subtree is not empty, recursively call insert on the right subtree.
        case Some(tree) => new BinaryTree(root, leftTree, Some(tree.insert(data)))
      }
    }
  }

  /**
   * A method to search for a specific node in the binary tree.
   *
   * @param data the data to be searched for.
   * @return true if the node is found, false otherwise.
   */
  def search(data: T): Boolean = {
    // If the data is equal to the root node, return true.
    if (data == root) true
    // If the data is less than the root node, search in the left subtree.
    else if (data < root) {
      leftTree match {
        // If the left subtree is empty, the node doesn't exist.
        case None => false
        // If the left subtree is not empty, recursively call search on the left subtree.
        case Some(tree) => tree.search(data)
      }
    }
    // If the data is greater than the root node, search in the right subtree.
    else {
      rightTree match {
        // If the right subtree is empty, the node doesn't exist.
        case None => false
        // If the right subtree is not empty, recursively call search on the right subtree.
        case Some(tree) => tree.search(data)
      }
    }
  }

  /**
   * A method to traverse the binary tree in-order.
   *
   * @return a list of the data in the tree nodes in-order.
   */
  def traverseInOrder: List[T] = {
    // If both subtrees are empty, return a list with just the root node.
    if (leftTree.isEmpty && rightTree.isEmpty) List(root)
    // If the left subtree is empty but the right subtree is not, recursively call traverseInOrder
    // on the right subtree, then append the list with the root node.
    else if(leftTree.isEmpty) rightTree.get.traverseInOrder ::: List(root)
    // If the right subtree is empty but the left subtree is not, recursively call traverseInOrder
    // on the left subtree, then prepend the list with the root node.
    else if(rightTree.isEmpty) List(root) ::: leftTree.get.traverseInOrder
    // If both subtrees are not empty, recursively call traverseInOrder on the left subtree,
    // then append the list with the root node, then recursively call traverseInOrder on the
    // right subtree.
    else leftTree.get.traverseInOrder ::: List(root) ::: rightTree.get.traverseInOrder
  }
}