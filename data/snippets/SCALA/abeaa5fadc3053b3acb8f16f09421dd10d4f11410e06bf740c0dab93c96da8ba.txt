import scala.collection.mutable._         // Importing mutable collections package

class CustomQueue[A] {                     // Defining a custom queue class with generic type A
    private val queue = Queue[A]()         // Private field of type Queue containing elements of type A
    
    def enqueue(element: A): Unit = {      // Method to add an element to the end of the queue
        queue.enqueue(element)
    }
    
    def dequeue(): A = {                   // Method to remove and return the first element in the queue
        queue.dequeue()
    }
    
    def size: Int = {                      // Getter method to return the size of the queue
        queue.size
    }
    
    override def toString: String = {      // Overriding the toString method to print elements of the queue in a readable format
        queue.mkString(", ")
    }
}

val queue = new CustomQueue[String]       // Creating an instance of the custom queue with String type

queue.enqueue("Hello")                    // Adding elements to the queue
queue.enqueue("World")
queue.enqueue("!")

println(queue)                            // Output: Hello, World, !

queue.dequeue()                           // Removing the first element from the queue and returning it

println(queue)                            // Output: World, !

println(queue.size)                       // Output: 2