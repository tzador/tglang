import scala.util.Random

object MarkovChain{
  val alphabet = ('a' to 'z').toList
  val transitionMatrix = Array.ofDim[Double](26, 26)
  val initialStateDistribution = Array.fill(26)(1.0/26)

  def generateSequence(n: Int): Unit = {
    var currentState = Random.shuffle(alphabet).head // choose a random starting state

    // generate n states
    for (i <- 1 to n) {
      // generate a random number between 0 and 1
      val randNum = Random.nextDouble()
      // find the next state based on the probability distribution
      var nextState = alphabet(0)
      var cumulativeProbability = transitionMatrix(alphabet.indexOf(currentState))(alphabet.indexOf(nextState))
      while (cumulativeProbability < randNum) {
        nextState = alphabet(alphabet.indexOf(currentState) + 1)
        cumulativeProbability += transitionMatrix(alphabet.indexOf(currentState))(alphabet.indexOf(nextState))
      }
      // print the current state
      print(currentState)
      // update the current state
      currentState = nextState
    }
  }

  // main method
  def main(args: Array[String]): Unit = {
    // set the transition matrix
    for (i <- 0 until 26; j <- 0 until 26) {
      if (i != j) {
        transitionMatrix(i)(j) = Random.nextDouble()
      }
    }

    // generate and print a sequence of 10 states
    generateSequence(10)
  }
}