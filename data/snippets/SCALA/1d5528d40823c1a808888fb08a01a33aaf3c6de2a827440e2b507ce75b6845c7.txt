trait Shape {
        //abstract method to calculate area
        def area: Double
        //abstract method to calculate perimeter
        def perimeter: Double
        //method to print information about the shape
        def info: Unit = println(s"This ${this.getClass.getSimpleName} has an area of ${area} and a perimeter of ${perimeter}")
}

//class Rectangle inheriting from Shape trait
class Rectangle(l: Double, w: Double) extends Shape {
        //implementation of area method
        def area: Double = l * w
        //implementation of perimeter method
        def perimeter: Double = 2 * (l + w)
}

//class Square inheriting from Shape trait
class Square(s: Double) extends Shape {
        //implementation of area method
        def area: Double = s * s
        //implementation of perimeter method
        def perimeter: Double = 4 * s
}

//class Circle inheriting from Shape trait
class Circle(r: Double) extends Shape {
        //implementation of area method
        def area: Double = math.Pi * r * r
        //implementation of perimeter method
        def perimeter: Double = 2 * math.Pi * r
}

//object to test the classes
object TestShapes {
        def main(args: Array[String]): Unit = {
                //creating instances of the classes
                val rectangle = new Rectangle(5, 3)
                val square = new Square(4)
                val circle = new Circle(2.5)
                //calling the info method to print information about the shapes
                rectangle.info
                square.info
                circle.info
        }
}