/*This code snippet performs a quicksort algorithm on an integer array and outputs the sorted array.*/

object QuickSort extends App {

    /*This function takes in an array and partitions it by choosing a pivot (last element) and
    placing all elements smaller than the pivot to the left and larger elements to the right.*/
    def partition(low: Int, high: Int, arr: Array[Int]): Int = {
        val pivot = arr(high)
        var i = low - 1
        for (j <- low until high) {
            if (arr(j) <= pivot) {
                i += 1
                val temp = arr(i)
                arr(i) = arr(j)
                arr(j) = temp
            }
        }
        val temp = arr(i + 1)
        arr(i + 1) = arr(high)
        arr(high) = temp
        i + 1
    }

    /*This function recursively calls itself using the partition function to sort the left and right subarrays.*/
    def quickSort(low: Int, high: Int, arr: Array[Int]): Unit = {
        if (low < high) {
            val pivotIndex = partition(low, high, arr)
            quickSort(low, pivotIndex - 1, arr)
            quickSort(pivotIndex + 1, high, arr)
        }
    }

    /*Example input array*/
    val arr = Array(9, 3, 12, 1, 7, 5)
    /*Output before sorting*/
    println("Before sorting: " + arr.mkString(" "))
    /*Sorting using quickSort function*/
    quickSort(0, arr.length - 1, arr)
    /*Output after sorting*/
    println("After sorting: " + arr.mkString(" "))
}

/*Output:
Before sorting: 9 3 12 1 7 5
After sorting: 1 3 5 7 9 12
*/