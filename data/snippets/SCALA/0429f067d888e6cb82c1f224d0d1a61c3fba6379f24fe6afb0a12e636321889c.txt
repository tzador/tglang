//Case class representing a Person with two fields
case class Person(name: String, age: Int)

//Function to create instances of Person class
def createPerson(name: String, age: Int): Person = {
  Person(name, age)
}

//Create a list of Person instances
val peopleList = List(Person("John", 25), Person("Jane", 30), Person("Mark", 28))

//Filter the list to only include People with age less than 30
val filteredList = peopleList.filter(_.age < 30)

//Print out the names of the filtered people in a new list
val filteredNames = for (person <- filteredList) yield person.name

//Create a map of the filtered people, with their name as the key and age as the value
val filteredMap = filteredList.map(person => person.name -> person.age).toMap

//Print out the keys and values of the map
println("Keys: " + filteredMap.keys)
println("Values: " + filteredMap.values) 

//Output:
//scala.collection.immutable.Set[java.lang.String] = Set(Jane, John, Mark)
//scala.collection.immutable.Iterable[Int] = List(25, 28)