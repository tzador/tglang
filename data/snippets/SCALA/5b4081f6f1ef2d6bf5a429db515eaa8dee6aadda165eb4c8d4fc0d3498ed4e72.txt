val myList = List(1, 2, 3, 4, 5) // Creating a list of integers
val myMap = Map("a" -> 1, "b" -> 2, "c" -> 3) // Creating a map with string keys and integer values
val mySet = Set(1, 2, 3) // Creating a set of integers

// Creating a function that returns the sum of all elements in a list
def sumList(list: List[Int]): Int = {
  var sum = 0 // Initializing sum variable to 0
  for(element <- list){
    sum += element // Adding each element to sum
  }
  sum // Returning the final sum
}

// Creating a function that returns a new list with all values in a map
def mapToList(map: Map[String, Int]): List[Int] = {
  var list = List[Int]() // Initializing an empty list
  for((key, value) <- map){
    list = value :: list // Prepending each value to the list
  }
  list.reverse // Reversing the list to maintain the correct order
}

// Creating a function that returns the union of two sets
def setUnion(set1: Set[Int], set2: Set[Int]): Set[Int] = {
  set1.union(set2) // Using the union method to combine the two sets
}

val sum = sumList(myList) // Calling the sumList function on myList
val newList = mapToList(myMap) // Calling the mapToList function on myMap
val union = setUnion(mySet, Set(4, 5, 6)) // Calling the setUnion function on mySet and another set with some common elements