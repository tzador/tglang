// Define a case class
case class Person(name: String, age: Int)

// Create a list of persons
val persons = List(Person("John", 25), Person("Jane", 30), Person("Bob", 20))

// Use pattern matching to print out the name and age of each person
persons.foreach {
  case Person(name, age) => println(s"$name is $age years old")
}

// Define a higher-order function that takes in a list of persons and returns a list of their names
def getNames(persons: List[Person]): List[String] = {
  persons.map(_.name)
}

// Use the higher-order function to get the list of names from the list of persons
val names = getNames(persons)

// Filter out persons who are under 25 years old
val filteredPersons = persons.filter(_.age >= 25)

// Use foldLeft to sum the ages of all the persons
val totalAge = persons.foldLeft(0)((sum, person) => sum + person.age)

// Use a for comprehension to create a list of persons under 30 years old
val youngPersons = for {
  person <- persons
  if person.age < 30
} yield person