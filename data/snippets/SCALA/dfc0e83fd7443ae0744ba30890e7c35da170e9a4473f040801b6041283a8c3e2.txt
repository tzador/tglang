import scalaz.std.option._ // importing standard option functions from Scalaz library
import scala.concurrent.{Await, Future} // importing concurrent and future classes from scala library

case class Person(name: String, age: Int) // defining a case class Person with name and age attributes

val people: List[Person] = List( // creating a list of person objects
    Person("Alice", 25),
    Person("Bob", 30),
    Person("Charlie", 35)
)

def filterByAge(age: Int, people: List[Person]): Option[Person] = people
  .find(_.age == age) // using .find function on list to find person with specified age
  .filter(_.name.length > 4) // using .filter function to filter person by name length
  .map(p => Person(p.name.toUpperCase, p.age + 5)) // using .map function to transform person object

val person: Option[Person] = filterByAge(35, people) // calling filterByAge function and storing result in person variable

val result: Future[Option[String]] = Future { // creating a future object that will eventually hold an option of string
  println("Processing...") // printing a message before starting the processing
  Thread.sleep(2000) // simulating a 2 second processing time
  person.map(_.name) // using .map function to extract the name attribute from person object
}

Await.result(result, scala.concurrent.duration.Duration.Inf) // waiting for the future object to complete