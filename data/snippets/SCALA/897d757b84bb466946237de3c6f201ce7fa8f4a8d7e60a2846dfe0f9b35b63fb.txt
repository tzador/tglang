// This program implements a function to calculate the nth Fibonacci number
// It uses recursion and pattern matching to handle base cases
def fibonacci(n: Int): Int = n match {
  case 1 | 2 => 1
  case _ => fibonacci(n-1) + fibonacci(n-2)
}

// This function uses tail recursion to calculate the nth Fibonacci number
// It uses accumulator to keep track of previous values
def fibonacciTail(n: Int): Int = {
  def fibHelper(n: Int, prev: Int, curr: Int): Int = n match {
    case 0 => prev
    case _ => fibHelper(n-1, curr, curr + prev)
  }
  fibHelper(n, 0, 1)
}

// Printing out the results for the first 10 Fibonacci numbers
for (i <- 1 to 10) {
  println("Fibonacci of " + i + " is " + fibonacci(i))
  println("Fibonacci of " + i + " using tail recursion is " + fibonacciTail(i))
}