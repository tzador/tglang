//This code snippet demonstrates the use of higher-order functions and anonymous functions in Scala

//Define a function that takes in a list and a function as parameters
def higherOrderFunction(list: List[Int], func: Int => Int): List[Int] = {
  //Create a new list to store the transformed elements
  var newList = List[Int]()
  
  //Iterate through the original list and apply the given function to each element
  list.foreach(element => {
    //Call the function passed in as a parameter and add the returned value to the new list
    newList = newList :+ func(element)
  })
  
  //Return the new list with transformed elements
  newList
}

//Define an anonymous function that multiplies the given number by 2
val multBy2 = (num: Int) => num * 2

//Create a list of numbers
val numbers = List(1, 2, 3, 4, 5)

//Call the higher-order function and pass in the list and the anonymous function as parameters
val transformedNumbers = higherOrderFunction(numbers, multBy2)

//Print the transformed list
println(transformedNumbers) //Prints: List(2, 4, 6, 8, 10)