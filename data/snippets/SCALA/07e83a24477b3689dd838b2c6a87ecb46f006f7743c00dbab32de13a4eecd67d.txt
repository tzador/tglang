//Implicit class for adding a custom method to the Seq collection
implicit class SeqEnhancer[A](seq: Seq[A]) {
  def customMethod[B](func: A => B): Seq[B] = {
    seq.map(func)
  }
}

//Function to concatenate two lists of strings
def concatenateLists(list1: List[String], list2: List[String]): List[String] = {
  list1.:::(list2)
}

//Higher-order function that takes in a function and a list and calls the function on each element in the list
def applyFuncOnList[A, B](list: List[A], func: A => B): List[B] = {
  list.map(func)
}

//Class representing a car with make, model, and year properties
case class Car(make: String, model: String, year: Int)

//List of cars
val cars = List(
  Car("Toyota", "Corolla", 2010),
  Car("Honda", "Civic", 2012),
  Car("Ford", "Mustang", 2015)
)

//Filtering cars by make using pattern matching syntax
val filteredCars = cars.filter {
  case Car("Toyota", _, _) => true
  case _ => false
}

//Creating a map of car makes and their corresponding models
val carMap = Map(
  "Toyota" -> "Corolla",
  "Honda" -> "Civic",
  "Ford" -> "Mustang"
)

//Looping through the keys and values of the map and printing them
for ((make, model) <- carMap) {
  println(s"Make: $make | Model: $model")
}

//Defining a generic trait with a method that returns a generic type
trait CustomTrait[A] {
  def getValue: A
}

//Implementing the trait for String type
class StringTrait extends CustomTrait[String] {
  override def getValue: String = "Hello, World!"
}

//Creating an instance of the StringTrait and calling the getValue method
val strTrait = new StringTrait()
println(strTrait.getValue)