// Creates an abstract class `Animal` with abstract methods `speak` and `move`
abstract class Animal {

  // Abstract method `speak` which needs to be implemented by child classes
  def speak(): String

  // Abstract method `move` which needs to be implemented by child classes
  def move(): Unit
}

// Creates a class `Dog` which extends `Animal` class
class Dog extends Animal {

  // Implements `speak` method by returning a string "Woof!"
  def speak(): String = "Woof!"

  // Implements `move` method by printing a statement
  def move(): Unit = println("Dog is walking.")
}

// Creates a class `Cat` which extends `Animal` class
class Cat extends Animal {

  // Implements `speak` method by returning a string "Meow!"
  def speak(): String = "Meow!"

  // Implements `speak` method by printing a statement
  def move(): Unit = println("Cat is running.")
}

// Creates an object `animal` of type `Animal` and initializes it with an instance of `Dog` class
val animal: Animal = new Dog

// Calls `speak` method of `animal` and prints the output
println(animal.speak())

// Calls `move` method of `animal` which prints the output
animal.move()

// Changes the type of `animal` object to `Cat` class
animal = new Cat

// Calls `speak` method of `animal` and prints the output
println(animal.speak())

// Calls `move` method of `animal` which prints the output
animal.move()


# This code snippet demonstrates inheritance and polymorphism in Scala. 
# The abstract class `Animal` has two abstract methods: `speak` and `move`.
# The child classes `Dog` and `Cat` implement these abstract methods.
# An object `animal` is created of type `Animal` and initialized with an instance of `Dog` class.
# The `speak` and `move` methods of `animal` are called, printing "Woof!" and "Dog is walking." respectively.
# The type of `animal` is then changed to `Cat` class and the methods are called again, printing "Meow!" and "Cat is running."