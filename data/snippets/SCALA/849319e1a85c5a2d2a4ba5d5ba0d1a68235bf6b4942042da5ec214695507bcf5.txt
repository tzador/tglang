sealed trait BinaryTree[+A]  // declaring a sealed trait for a binary tree, allowing pattern matching on its subclasses

case object Leaf extends BinaryTree[Nothing]  // defining an object for a leaf node of the tree

case class Node[A](value: A, left: BinaryTree[A], right: BinaryTree[A]) extends BinaryTree[A] // defining a case class for a node with a value and left and right subtrees of type BinaryTree[A]

object BinaryTree {  // declaring an object for binary tree operations
  def isEmpty[A](tree: BinaryTree[A]): Boolean = tree match { // defining a method to check if a binary tree is empty
    case Leaf => true // empty if the root node is a leaf
    case Node(_, _, _) => false // not empty if the root node is a non-leaf node
  }
  
  def countNodes[A](tree: BinaryTree[A]): Int = tree match {  // method to count the total number of nodes in a binary tree
    case Leaf => 0  // if the root node is a leaf, then the tree has no nodes
    case Node(_, left, right) => 1 + countNodes(left) + countNodes(right) // recursively count nodes by adding 1 for the current node and the number of nodes in the left and right subtrees
  }
  
  def depth[A](tree: BinaryTree[A]): Int = tree match {  // method to calculate the maximum depth of a binary tree
    case Leaf => 0 // if the root node is a leaf, then the tree has a depth of 0
    case Node(_, left, right) => 1 + math.max(depth(left), depth(right)) // recursively calculate the depth by adding 1 for the current node and the maximum depth of the left and right subtrees
  }
  
  def contains[A](tree: BinaryTree[A], value: A): Boolean = tree match { // method to check if a given value exists in a binary tree
    case Leaf => false // if the root node is a leaf, the tree does not contain the value
    case Node(v, _, _) if v == value => true // if the root node has the same value as the given value, then the tree contains the value
    case Node(_, left, right) => contains(left, value) || contains(right, value) // recursively check if the value exists in the left or right subtrees
  }
}