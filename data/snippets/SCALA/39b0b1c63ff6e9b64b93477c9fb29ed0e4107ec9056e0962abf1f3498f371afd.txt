// This is a complex code snippet in SCALA

// Defining a function to calculate the factorial of a given number
def factorial(n: Int): Int = {
  // Creating a recursive function to calculate the factorial
  def factorialHelper(n: Int, accumulator: Int): Int = {
    if (n == 0) accumulator  // Base case: if n is 0, return the accumulator value
    else factorialHelper(n - 1, accumulator * n)  // Recursive case: multiply accumulator with current n value
  }
  factorialHelper(n, 1)  // Call the helper function with n and initial accumulator value of 1
}

// Creating a list of numbers for which we want to calculate the factorial 
val numbers = List(3, 5, 7, 9)

// Using the map function to apply the factorial function to each element in the list
val factorials = numbers.map(factorial)

// Printing the resulting list
println(factorials)