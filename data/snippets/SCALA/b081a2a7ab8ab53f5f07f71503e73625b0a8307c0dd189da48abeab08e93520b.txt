// Define a case class called Employee with two parameters: name of type String and salary of type Double
case class Employee(name: String, salary: Double)

// Create a list of Employee objects
val employees = List(Employee("John", 50000.0), Employee("Jane", 60000.0), Employee("Bob", 40000.0))

// Define a function to calculate the total salary of all employees using pattern matching
def totalSalary(employees: List[Employee]): Double = employees match {
    // If the list is empty, return 0 as the total salary
    case Nil => 0.0
    // If the list is not empty, use the head and tail pattern to recursively calculate the total salary
    case head :: tail => head.salary + totalSalary(tail)
}

// Call the totalSalary function and store the result in a variable
val total = totalSalary(employees)

// Print the total salary with a message
println(s"The total salary of all employees is $total.")