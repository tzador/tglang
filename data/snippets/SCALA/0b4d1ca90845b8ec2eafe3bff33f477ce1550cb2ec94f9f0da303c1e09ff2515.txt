/**
 * This is a complex code snippet in Scala
 * It uses functional programming concepts
 * and higher-order functions to perform a series
 * of operations on a list of numbers
 */

// Define a list of numbers
val numbers: List[Int] = List(1, 2, 3, 4, 5)

// Create a higher-order function that takes in a list
// and a function as parameters and applies the function
// to each element in the list
def mapList(list: List[Int], f: Int => Int): List[Int] = {
  list.map(f)
}

// Create a function that doubles a number
val double: Int => Int = _ * 2

// Create a function that squares a number
val square: Int => Int = num => num * num

// Apply the mapList function to the numbers list,
// using the double function as a parameter
val doubledList: List[Int] = mapList(numbers, double) // Output: List(2, 4, 6, 8, 10)

// Apply the mapList function to the numbers list,
// using the square function as a parameter
val squaredList: List[Int] = mapList(numbers, square) // Output: List(1, 4, 9, 16, 25)

// Create a higher-order function that takes in a list
// and a function as parameters and returns the sum of
// applying the function to each element in the list
def foldList(list: List[Int], f: Int => Int): Int = {
  list.fold(0)((acc, num) => acc + f(num))
}

// Apply the foldList function to the numbers list,
// using the double function as a parameter
val sumAfterDouble: Int = foldList(numbers, double) // Output: 30

// Apply the foldList function to the numbers list,
// using the square function as a parameter
val sumAfterSquare: Int = foldList(numbers, square) // Output: 55

// Combine the mapList and foldList functions
// to calculate the sum of a list of numbers after doubling them
val sumAfterDoubleMap: Int = foldList(mapList(numbers, double), (num: Int) => num) // Output: 30

// Combine the mapList and foldList functions
// to calculate the sum of a list of numbers after squaring them
val sumAfterSquareMap: Int = foldList(mapList(numbers, square), (num: Int) => num) // Output: 55