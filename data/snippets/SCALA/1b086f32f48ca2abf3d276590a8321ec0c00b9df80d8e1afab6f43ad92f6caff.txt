import scala.concurrent.{Await, Future}
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

// Define a case class representing a user
case class User(name: String, age: Int)

// Create a list of users
val userList = List(User("John", 25), User("Emily", 30), User("Jessica", 27))

// Function to calculate the average age of a list of users
def calculateAverageAge(users: List[User]): Future[Double] = Future {
  // Use a foldLeft to calculate the total age of all users
  val totalAge = users.foldLeft(0)((total, user) => total + user.age)
  // Calculate the number of users
  val count = users.length
  // Calculate the average age
  totalAge / count.toDouble
}

// Create a future to asynchronously calculate the average age of the userList
val averageAgeFuture = calculateAverageAge(userList)

// Wait for the future to finish and get the result
val averageAge = Await.result(averageAgeFuture, 5.seconds)

// Print the result
println(s"The average age is $averageAge")

// Expected output: The average age is 27.33333333