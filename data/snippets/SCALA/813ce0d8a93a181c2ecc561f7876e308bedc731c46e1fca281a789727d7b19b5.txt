def prime(num: Int): Boolean = {
  // this function checks if a number is prime
  if (num <= 1) return false // a prime number must be greater than 1
  for (i <- 2 until num) { // loop to check if number is divisible by any number less than it
    if (num % i == 0) return false // if divisible, not a prime number
  }
  return true // number is prime if it makes it through the loop without being divisible
}

// a function to generate a list of prime numbers up to a given limit
def generatePrimes(limit: Int): List[Int] = {
  var primes: List[Int] = List()
  for (i <- 2 until limit) { // loop through numbers up to the limit
    if (prime(i)) primes = i :: primes // check if number is prime and add to primes list if it is
  }
  return primes
}

println(generatePrimes(20)) // prints: List(2, 3, 5, 7, 11, 13, 17, 19)

// a function to filter out even numbers from a given list
def filterEven(nums: List[Int]): List[Int] = {
  var filteredNums: List[Int] = List()
  for (num <- nums) { // loop through numbers in given list
    if (num % 2 != 0) filteredNums = num :: filteredNums // add number to filtered list if it is not even
  }
  return filteredNums
}

println(filterEven(List(1, 2, 3, 4, 5, 6, 7))) // prints: List(1, 3, 5, 7)