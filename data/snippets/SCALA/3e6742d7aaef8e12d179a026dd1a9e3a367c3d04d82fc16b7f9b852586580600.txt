//Define a class for a binary tree
class BinaryTree[T](value: T, leftChild: Option[BinaryTree[T]], rightChild: Option[BinaryTree[T]]) {
    
    //Method to insert new value into the tree
    def insert(newValue: T): BinaryTree = {
        
        //If new value is less than current value, insert into left subtree
        if (newValue.asInstanceOf[Comparable[T]].compareTo(value) < 0) {
            leftChild match {
                case Some(left) => left.insert(newValue)
                case _ => BinaryTree(newValue, Some(BinaryTree.empty), Some(BinaryTree.empty))
            }
        }
        //If new value is greater than current value, insert into right subtree
        else if (newValue.asInstanceOf[Comparable[T]].compareTo(value) > 0) {
            rightChild match {
                case Some(right) => right.insert(newValue)
                case _ => BinaryTree(newValue, Some(BinaryTree.empty), Some(BinaryTree.empty))
            }
        }
        //If new value is equal to current value, do not insert
        else {
            this
        }
    }
    
    //Method to check if a value exists in the tree
    def contains(target: T): Boolean = {
        
        //If target is less than current value, check left subtree
        if (target.asInstanceOf[Comparable[T]].compareTo(value) < 0) {
            leftChild match {
                case Some(left) => left.contains(target)
                case None => false
            }
        }
        //If target is greater than current value, check right subtree
        else if (target.asInstanceOf[Comparable[T]].compareTo(value) > 0) {
            rightChild match {
                case Some(right) => right.contains(target)
                case None => false
            }
        }
        //If target is equal to current value, return true
        else {
            true
        }
    }
    
    //Method to get a sorted list of all values in the tree
    def toList: List[T] = {
        
        //In order traversal to add values to list in correct order
        (leftChild match {
            case Some(left) => left.toList
            case None => List.empty
        }) ::: List(value) ::: (rightChild match {
            case Some(right) => right.toList
            case None => List.empty
        })
    }
}

//Companion object for BinaryTree
object BinaryTree {
    
    //Method to create an empty tree
    def empty[T]: BinaryTree[T] = new BinaryTree[T](null.asInstanceOf[T], None, None)
    
    //Method to create a tree with one value only
    def singleton[T](value: T): BinaryTree[T] = new BinaryTree(value, Option(BinaryTree.empty), Option(BinaryTree.empty))
}

//Example usage
val tree = BinaryTree.empty.insert(2).insert(5)
tree.contains(5) //returns true
tree.contains(7) //returns false
tree.toList //returns List(2,5)