// Define a case class for a Person with two attributes - name and age
case class Person(name: String, age: Int)

// Create a list of Person objects
val people = List(Person("John", 30), Person("Jane", 25), Person("Henry", 40))

// Filter the list to only include people above the age of 35
val filteredPeople = people.filter(_.age > 35)

// Map the filtered list to return only the names of the people
val names = filteredPeople.map(_.name)

// Create a class for a Book with three attributes - title, author, and year
class Book(val title: String, val author: String, val year: Int)

// Create a list of Book objects
val books = List(new Book("Harry Potter", "J.K Rowling", 1997),
                  new Book("To Kill a Mockingbird", "Harper Lee", 1960),
                  new Book("1984", "George Orwell", 1949))

// Use pattern matching to print the title, author, and year of each book in the list
books.foreach {
  case Book(title, author, year) =>
    println(s"Title: $title | Author: $author | Year: $year")
}

// Define a recursive function to calculate the factorial of a given number
def factorial(n: Int): Int = {
  if (n == 0) 1
  else n * factorial(n - 1)
}

// Use tail recursion to calculate the factorial of a given number
def tailRecFactorial(n: Int): Int = {
  // Define an internal helper function with an accumulator variable
  @tailrec
  def helper(acc: Int, x: Int): Int = {
    if (x == 0) acc
    else helper(acc * x, x - 1)
  }
  helper(1, n)
}

// Calculate the factorial of 6 using both functions
val factorial6 = factorial(6)
val tailRecFactorial6 = tailRecFactorial(6)

// Print the results
println(s"Factorial of 6 using recursion: $factorial6")
println(s"Factorial of 6 using tail recursion: $tailRecFactorial6")