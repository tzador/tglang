/**
 * This class represents a Magic Square.
 * A Magic Square is a square grid of numbers where the sum of numbers in each row, column, and diagonal are equal.
 * @param size the size of the magic square
 */
class MagicSquare(size: Int) {
  private val N = size * size
  private val result = Array.ofDim[Int](N)

  /**
   * Function to solve the magic square.
   * @return the solved magic square as a two-dimensional matrix of integers.
   */
  def solve(): Array[Array[Int]] = {
    // initializing the first row
    result(0) = 1

    // initializing variables for row and column
    var row = size - 1
    var col = size / 2

    // iterating through all numbers from 2 to N
    for (num <- 2 to N) {
      // if num is a multiple of size, move to next row
      if (num % size == 1) {
        row += 1
      }
      // if num is not a multiple of size, move up and to the right
      else {
        row -= 1
        col += 1
      }
      // if row becomes -1, wrap around to the last row
      if (row == -1) {
        row = size - 1
      }
      // if column becomes size, wrap around to the first column
      if (col == size) {
        col = 0
      }
      // set the number in the magic square grid
      result(row * size + col) = num
    }
    // convert the 1D array into a 2D matrix and return it
    result.grouped(size).toArray
  }
}

// create a new instance of MagicSquare with size 3 and solve it
val magicSquareExample = new MagicSquare(3)
val solvedMagicSquare = magicSquareExample.solve()

// print the solved magic square
println(solvedMagicSquare.deep.mkString(" +\n") + " = " + solvedMagicSquare.flatten.sum)

// output: