def mergeSort(list: List): List = {

  // base case: if list is empty or has only one element, return the list
  if (list.isEmpty || list.length == 1) 
    list
  else {
    
    // divide the list in half
    val (left, right) = list.splitAt(list.length / 2)

    // recursive call to continue splitting the sub-lists
    val sortedLeft = mergeSort(left)
    val sortedRight = mergeSort(right)

    // function to merge the sorted sub-lists
    def merge(left: List, right: List): List = {
      // empty list to hold the sorted elements
      var sorted = List.empty

      // loop until one of the sub-lists is empty
      while (left.nonEmpty && right.nonEmpty) {

        // compare first elements of sub-lists and add the smaller one to the sorted list
        if (left.head <= right.head) {
          sorted = sorted :+ left.head
          left = left.tail
        } else {
          sorted = sorted :+ right.head
          right = right.tail
        }
      }

      // add the remaining elements from the non-empty sub-list to the sorted list
      sorted ++ left ++ right
    }

    // call the merge function to combine the sorted sub-lists
    merge(sortedLeft, sortedRight)
  }
}

// example input list
val list = List(9, 7, 3, 1, 8, 2, 4, 6, 5)

// call the mergeSort function on the input list
val sortedList = mergeSort(list)

// print the sortedList
println(sortedList) // output: List(1, 2, 3, 4, 5, 6, 7, 8, 9)