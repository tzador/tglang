/** Example of a complex code snippet in SCALA */

// Define a class named "Person" with two fields: name of type String and age of type Integer
// The class includes a constructor and a method to print the details of the person
class Person(val name: String, val age: Int) {
	def printDetails(): Unit = {
		println("Name: " + name)
		println("Age: " + age)
	}
}

// Create a list of Person objects, with different names and ages
val people = List(new Person("John", 25), new Person("Emily", 30), new Person("Tom", 22))

// Filter the list to only include people over the age of 25
val filteredPeople = people.filter(_.age > 25) // uses shorthand syntax for lambda expression

// Create a map of the filtered people, where the key is the person's name and the value is their age
val ageMap = Map(filteredPeople.map(p => (p.name, p.age)): _*) // uses the special syntax for converting a sequence of tuples to a map

// Print the map
println(ageMap)

// Output:
//