object ComplexMathFunctions {
    // Object class with complex math functions

    def factorial(n: Int): Int = {
        // Function to calculate the factorial of a given number
        if (n < 0) {
            throw new IllegalArgumentException("Number must be a positive integer")
        }
        else if (n == 0) {
            1
        }
        else {
            n * factorial(n-1)
        }
    }

    def fibonacci(n: Int): Int = {
        // Function that returns the nth element in the Fibonacci sequence
        if (n == 0) {
            0
        }
        else if (n == 1) {
            1
        }
        else {
            fibonacci(n-1) + fibonacci(n-2)
        }
    }

    def gcd(a: Int, b: Int): Int = {
        // Function that returns the greatest common divisor of two numbers
        if (b == 0) {
            a
        }
        else {
            gcd(b, a % b)
        }
    }

    def primeFactors(n: Int): List[Int] = {
        // Function that returns a list of prime factors of a given number
        def primeFactorsHelper(num: Int, divisor: Int, factorList: List[Int]): List[Int] = {
            if (divisor * divisor > num) {
                num :: factorList
            }
            else if (num % divisor == 0) {
                primeFactorsHelper(num / divisor, divisor, divisor :: factorList)
            }
            else {
                primeFactorsHelper(num, divisor + 1, factorList)
            }
        }
        
        primeFactorsHelper(n, 2, List())
    }
}