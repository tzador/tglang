/**
 * This is a complex recursive function in Scala
 * It takes in an integer as a parameter and returns a list of integers
 * Each item in the list is the sum of the previous two numbers in the sequence
 */
def fibonacci(n: Int): List[Int] = {
  if (n < 0) throw new IllegalArgumentException("Input must be a positive integer")
  if (n == 0) List()
  else if (n == 1) List(1)
  else {
    val fibonacciList = fibonacci(n-1)// recursive call to the function
    fibonacciList ++ List(getFibonacciNumber(n)) // add the current number to the list
  }
}

/**
 * This helper function calculates the nth fibonacci number
 * It takes in an integer as a parameter and returns the nth fibonacci number
 */
def getFibonacciNumber(n: Int): Int = {
  if (n < 0) throw new IllegalArgumentException("Input must be a positive integer")
  if (n == 0) 0
  else if (n == 1) 1
  else getFibonacciNumber(n-1) + getFibonacciNumber(n-2) // recursive call to the function
}

// Example output - calling the fibonacci function with 6 as parameter
val fibNumbers = fibonacci(6)
println(fibNumbers)
// Output: List(1, 1, 2, 3, 5, 8)