/**
 * This class represents a generic stack data structure 
 * with a fixed capacity and supports operations like push, pop, and peek.
 *
 * @param capacity the maximum capacity of the stack
 * @tparam T the generic type for the stack elements
 */
class FixedStack[T](capacity: Int) {
  private var stack: Array[T] = new Array[T](capacity)
  private var top: Int = -1 // keeps track of the topmost element in the stack

  /**
   * Adds a new element to the top of the stack.
   *
   * @param element the element to add to the stack
   */
  def push(element: T): Unit = {
    if (top < capacity - 1) {
      top += 1
      stack(top) = element
    } else {
      throw new IndexOutOfBoundsException("Stack is full")
    }
  }

  /**
   * Removes and returns the topmost element from the stack.
   *
   * @return the topmost element in the stack
   */
  def pop(): T = {
    if (top >= 0) {
      val element = stack(top)
      top -= 1
      element
    } else {
      throw new NoSuchElementException("Stack is empty")
    }
  }

  /**
   * Returns the topmost element in the stack without removing it.
   *
   * @return the topmost element in the stack
   */
  def peek(): T = {
    if (top >= 0) {
      stack(top)
    } else {
      throw new NoSuchElementException("Stack is empty")
    }
  }

  /**
   * Checks if the stack is empty.
   *
   * @return true if the stack is empty, false otherwise
   */
  def isEmpty: Boolean = {
    top == -1
  }

  /**
   * Checks if the stack is full.
   *
   * @return true if the stack is full, false otherwise
   */
  def isFull: Boolean = {
    top == capacity - 1
  }
}