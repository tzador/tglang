/**
 * The following class represents a binary search tree data structure.
 * It contains methods for inserting, searching, and deleting
 * values in the tree.
 */
class BinarySearchTree(var root: Node = null) {

  /**
   * The Node class represents a node in the binary search tree.
   * It contains a value and references to its left and right children.
   */
  class Node(var value: Int, var left: Node = null, var right: Node = null)

  /**
   * This method inserts a new value into the binary search tree.
   * If the tree is empty, the value becomes the root.
   * If the value is less than the current node's value, it is inserted to the left.
   * If the value is greater than the current node's value, it is inserted to the right.
   * Time complexity: O(log n) if the tree is balanced, otherwise O(n)
   * @param value the value to be inserted
   */
  def insert(value: Int): Unit = {
    if (root == null) {
      root = new Node(value)
    } else {
      var current = root
      var parent: Node = null
      while (current != null) {
        parent = current
        if (value < current.value) {
          current = current.left
          if (current == null) {
            parent.left = new Node(value)
          }
        } else {
          current = current.right
          if (current == null) {
            parent.right = new Node(value)
          }
        }
      }
    }
  }

  /**
   * This method searches for a given value in the binary search tree.
   * If the value is found, it returns true, otherwise false.
   * Time complexity: O(log n) if the tree is balanced, otherwise O(n)
   * @param value the value to search for
   * @return true if the value is found, false otherwise
   */
  def contains(value: Int): Boolean = {
    var current = root
    while (current != null && current.value != value) {
      if (value < current.value) {
        current = current.left
      } else {
        current = current.right
      }
    }
    if (current == null) {
      false
    } else {
      true
    }
  }

  /**
   * This method deletes a given value from the binary search tree.
   * If the value is found, it is removed and the tree is rebalanced.
   * Time complexity: O(log n) if the tree is balanced, otherwise O(n)
   * @param value the value to be deleted
   * @return true if the value is successfully deleted, false otherwise
   */
  def delete(value: Int): Boolean = {
    var current = root
    var parent: Node = null
    var found = false
    // Find the node to be deleted and its parent
    while (current != null && !found) {
      if (value < current.value) {
        parent = current
        current = current.left
      } else if (value > current.value) {
        parent = current
        current = current.right
      } else {
        found = true
      }
    }
    // If the value is not found in the tree, return false
    if (current == null) {
      false
    } else {
      // Delete the node
      if (current.left == null && current.right == null) { // If the node is a leaf
        if (parent == null) { // If the node is the root of the tree
          root = null
        } else if (parent.left == current) {
          parent.left = null
        } else {
          parent.right = null
        }
      } else if (current.left == null) { // If the node has only right child
        if (parent == null) {
          root = current.right
        } else if (parent.left == current) {
          parent.left = current.right
        } else {
          parent.right = current.right
        }
      } else if (current.right == null) { // If the node has only left child
        if (parent == null) {
          root = current.left
        } else if (parent.left == current) {
          parent.left = current.left
        } else {
          parent.right = current.left
        }
      } else { // If the node has both left and right children
        // Find the minimum value in the right subtree
        var min = current.right
        var minParent = current
        while (min.left != null) {
          minParent = min
          min = min.left
        }
        // Replace the current node's value with the minimum value
        current.value = min.value
        // Delete the minimum node
        if (minParent.left == min) {
          minParent.left = min.right
        } else {
          minParent.right = min.right
        }
      }
      true
    }
  }
}