def mergeSort[T](list: List[T])(implicit ordering: Ordering[T]): List[T] = {
    /* Split list into two halves */
    val (first, second) = list.splitAt(list.size / 2)
  
    /* Recursively sort the two halves */
    val sortedFirst = mergeSort(first)
    val sortedSecond = mergeSort(second)
  
    /* Function to merge two sorted lists */
    def merge(first: List[T], second: List[T], acc: List[T]): List[T] = (first, second) match {
        case (Nil, _) => acc ++ second
        case (_, Nil) => acc ++ first
        case (x :: xs, y :: ys) =>
            if (ordering.lt(x, y)) merge(xs, second, acc :+ x)
            else merge(first, ys, acc :+ y)
    }
  
    merge(sortedFirst, sortedSecond, List())
}

/* Example usage */
val myList = List(5, 2, 10, 1, 8)
val sortedList = mergeSort(myList)
println(sortedList) // Output: List(1, 2, 5, 8, 10)