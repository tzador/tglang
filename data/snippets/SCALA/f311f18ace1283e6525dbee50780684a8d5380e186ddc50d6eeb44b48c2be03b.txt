/**
 * This is a class for creating a Binary Search Tree data structure
 * @param <T> the type of the items in the tree
 */
class BinarySearchTree[T: Ordering] {
  // declare a tree node class
  abstract class Tree

  // define a tree node with value and two children
  case class Node(left: Tree, value: T, right: Tree) extends Tree

  // define an empty tree
  case class EmptyTree() extends Tree

  // initialise root node as an empty tree
  var root: Tree = EmptyTree()

  // function to insert a new value into the tree
  def insert(value: T): Unit = {
    // use ordering to compare values
    val ordering = implicitly[Ordering[T]]
    import ordering._

    // define an insert helper function
    def insertHelper(curr: Tree): Tree = {
      curr match {
        // if the current node is empty, insert value into tree
        case EmptyTree() => Node(EmptyTree(), value, EmptyTree())
        // if the value is less than the current node's value, insert into left subtree
        case Node(left, v, right) if (value < v) => Node(insertHelper(left), v, right)
        // if the value is greater than the current node's value, insert into right subtree
        case Node(left, v, right) if (value > v) => Node(left, v, insertHelper(right))
        // otherwise, the value is equal to the current node's value, return unchanged tree
        case _ => curr
      }
    }
    // update root with new tree
    root = insertHelper(root)
  }

  // function to search for a value in the tree
  def search(value: T): Boolean = {
    // use ordering to compare values
    val ordering = implicitly[Ordering[T]]
    import ordering._

    // define a search helper function
    def searchHelper(curr: Tree): Boolean = {
      curr match {
        // if the current node is empty, value does not exist in tree
        case EmptyTree() => false
        // if the value is less than the current node's value, search in left subtree
        case Node(left, v, right) if (value < v) => searchHelper(left)
        // if the value is greater than the current node's value, search in right subtree
        case Node(left, v, right) if (value > v) => searchHelper(right)
        // otherwise, the value is equal to the current node's value, return true
        case _ => true
      }
    }
    // return result of search helper function with starting node as root
    searchHelper(root)
  }

  // function to delete a value from the tree
  def delete(value: T): Boolean = {
    // use ordering to compare values
    val ordering = implicitly[Ordering[T]]
    import ordering._

    // define a delete helper function
    def deleteHelper(curr: Tree): Tree = {
      curr match {
        // if the current node is empty, value does not exist in tree, return unchanged tree
        case EmptyTree() => curr
        // if the value is less than the current node's value, delete from left subtree
        case Node(left, v, right) if (value < v) => Node(deleteHelper(left), v, right)
        // if the value is greater than the current node's value, delete from right subtree
        case Node(left, v, right) if (value > v) => Node(left, v, deleteHelper(right))
        // otherwise, the value is equal to the current node's value
        case Node(left, v, right) =>
          // if the current node is a leaf, delete it by returning an empty tree
          if (left == EmptyTree() && right == EmptyTree()) EmptyTree()
          // if the current node has one child, replace it with the child
          else if (left == EmptyTree()) right
          else if (right == EmptyTree()) left
          // if the current node has two children, find the successor value and replace it with the current node
          else {
            // find the successor value by finding the minimum value in the right subtree
            // and replace the value of the current node with it
            val successorValue = findMin(right)
            Node(left, successorValue, deleteHelper(right))
          }
      }
    }
    // check if value to be deleted exists in tree
    if (search(value)) {
      // update root with new tree
      root = deleteHelper(root)
      true
    }
    else false
  }

  // function to find the minimum value in a tree
  def findMin(tree: Tree): T = {
    tree match {
      // if the tree is empty, return null
      case EmptyTree() => null.asInstanceOf[T]
      // if the tree is a single node, return its value
      case Node(EmptyTree(), value, EmptyTree()) => value
      // otherwise, recursively find the minimum value in the left subtree
      case Node(left, _, _) => findMin(left)
    }
  }

  // function to print the tree in order
  def printTree(): Unit = {
    // use ordering to compare values
    val ordering = implicitly[Ordering[T]]
    import ordering._

    // helper function to recursively print the tree
    def printHelper(curr: Tree): Unit = {
      curr match {
        case EmptyTree() => // do nothing for empty tree
        case Node(left, value, right) =>
          // print the left subtree
          printHelper(left)
          // print the current node's value
          print(value + " ")
          // print the right subtree
          printHelper(right)
      }
    }
    // call helper function with starting node as root
    printHelper(root)
  }

}