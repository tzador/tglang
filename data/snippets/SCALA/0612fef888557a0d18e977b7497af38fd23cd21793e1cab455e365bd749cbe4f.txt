/**
 * This class represents a custom Linked List
 * @tparam T the type of elements in the list
 * @param head the head node of the list
 */
class LinkedList[T](var head: Node[T] = null) {

  /**
   * This method adds an element to the end of the list
   * @param data the element to be added
   */
  def append(data: T): Unit = {
    if (head == null) {
      head = new Node(data)
    } else {
      var current = head
      while (current.next != null) {
        current = current.next
      }
      current.next = new Node(data)
    }
  }

  /**
   * This method removes the first occurrence of the given element from the list
   * @param data the element to be removed
   */
  def remove(data: T): Unit = {
    if (head != null) {
      if (head.data == data) {
        head = head.next
      } else {
        var current = head
        var prev: Node[T] = null
        while (current != null && current.data != data) {
          prev = current
          current = current.next
        }
        if (current != null) {
          prev.next = current.next
        }
      }
    }
  }

  /**
   * This method reverses the list in-place
   */
  def reverse(): Unit = {
    var prev: Node[T] = null
    var current = head
    while (current != null) {
      val next = current.next
      current.next = prev
      prev = current
      current = next
    }
    head = prev
  }

  /**
   * This method returns the number of elements in the list
   * @return the size of the list
   */
  def size(): Int = {
    var count = 0
    var current = head
    while (current != null) {
      count += 1
      current = current.next
    }
    count
  }

  /**
   * This method prints the list
   */
  def printList(): Unit = {
    var current = head
    while (current != null) {
      print(current + " ")
      current = current.next
    }
    println()
  }

  /**
   * This inner class represents a node in the Linked List
   * @param data the data to be stored in the node
   * @param next the next node in the list
   */
  class Node[T](var data: T, var next: Node[T] = null)

}

// sample usage:

// create a new Linked List
val list = new LinkedList[Int]()

// add elements to the list
list.append(5)
list.append(10)
list.append(15)

// print the size of the list
println("List size: " + list.size())

// remove an element from the list
list.remove(10)

// reverse the list
list.reverse()

// print the list
list.printList()

// output:
// 15 5