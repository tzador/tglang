// This is an example of a complex code snippet in Scala

// Creating a case class named "Person" with three parameters
case class Person(name: String, age: Int, city: String)

// Creating a list of Persons
val peopleList = List(Person("John", 25, "New York"), Person("Mary", 30, "London"), Person("Bob", 35, "Tokyo"))

// Defining a function to filter the list by age
def filterByAge(age: Int, people: List[Person]): List[Person] = {
    // Using pattern matching to filter the list
    people match {
        case Nil => Nil // If the list is empty, return an empty list
        case x :: xs => {
            if (x.age == age) // If the age of the first element matches the given age, add it to the filtered list
                x :: filterByAge(age, xs) 
            else // Otherwise, call the function recursively on the rest of the list
                filterByAge(age, xs)
        }
    }
}

// Calling the filterByAge function to filter the list by age 25
val filteredList = filterByAge(25, peopleList)

// Printing the filtered list
println(filteredList)