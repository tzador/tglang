/**
  * This is a code snippet demonstrating the use of a for comprehension in Scala.
  * It combines generators, filters, and yield statements to generate a complex sequence.
  */

// Create a list of words to be used in the for comprehension
val words = List("apple", "banana", "cherry", "durian")

// Create a list of numbers to be used in the for comprehension
val numbers = List(1, 2, 3, 4)

// Create a list of pair of letters to be used in the for comprehension
val letters = List(('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'))

// Use a for comprehension to create a sequence of tuples containing a word, number, and pair of letters
val output = for {
  word <- words // generator: generates a tuple (word, number, pair of letters) for each word in the words list
  number <- numbers // generator: generates a tuple (word, number, pair of letters) for each number in the numbers list
  letterPair <- letters // generator: generates a tuple (word, number, pair of letters) for each pair of letters in the letters list
  if word.length > letterPair._1 // filter: ensures that the word is longer than the first letter in the pair
  yield (word, number, letterPair) // yield: creates a tuple (word, number, letterPair) and adds it to the sequence
}

// Print out the sequence
println(output)