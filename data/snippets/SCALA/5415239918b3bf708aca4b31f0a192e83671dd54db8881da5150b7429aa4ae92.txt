trait MathFunc[T]{ // creating a trait with a type parameter
  val num: T // declaring a value with type T
  def performFunction(x: T): T // defining a function that takes in a parameter of type T and returns a value of type T
}

object Calculate extends App { // creating an object with main method
  def calculate[T](num1: T, num2: T)(implicit math: MathFunc[T]): T = { // defining a generic function with implicit parameter
    math.performFunction(num1 + num2) // calling the performFunction method from MathFunc trait
  }
  
  implicit val intMath = new MathFunc[Int] { // creating an implicit value of type Int for MathFunc trait
    override def performFunction(x: Int): Int = x * x // defining the performFunction method to square an Int value
  }
  
  implicit val doubleMath = new MathFunc[Double] { // creating an implicit value of type Double for MathFunc trait
    override def performFunction(x: Double): Double = x / 2 // defining the performFunction method to half a Double value
  }

  println(calculate(5, 3)) // calling the calculate function with Int parameters, output: 64
  println(calculate(12.5, 4.2)) // calling the calculate function with Double parameters, output: 3.15
}