/**
  * This class represents a graph data structure that can be
  * used to model relationships between objects.
  * @constructor creates a new directed graph
  * @tparam T the type of data stored in the graph
  */
class DirectedGraph[T] {

  // initialize empty adjacency list
  private var adjacencyList = Map.empty[T, Set[T]]

  /**
    * Adds a new vertex to the graph.
    * @param vertex the vertex to be added
    */
  def addVertex(vertex: T): Unit = {

    // if vertex is not already in adjacency list, add it with an empty set as value
    if (!adjacencyList.contains(vertex)) {
      adjacencyList += (vertex -> Set.empty[T])
    }
  }

  /**
    * Creates a directed edge between two existing vertices in the graph.
    * @param from the starting vertex of the edge
    * @param to the ending vertex of the edge
    */
  def addEdge(from: T, to: T): Unit = {

    // first check if both vertices exist in the graph
    if (adjacencyList.contains(from) && adjacencyList.contains(to)) {

      // retrieve the set of adjacent vertices to 'from' vertex
      val adjacentVertices = adjacencyList(from)

      // add 'to' vertex to the set of adjacent vertices for 'from' vertex
      adjacencyList += (from -> (adjacentVertices + to))
    }
  }

  /**
    * Removes a vertex and all of its outgoing edges from the graph.
    * @param vertex the vertex to be removed
    */
  def removeVertex(vertex: T): Unit = {

    // first check if vertex exists in the graph
    if (adjacencyList.contains(vertex)) {

      // remove vertex from adjacency list
      adjacencyList -= vertex

      // remove any outgoing edges involving the vertex
      adjacencyList.foreach(entry => {
        if (entry._2.contains(vertex)) adjacencyList += (entry._1 -> entry._2.filter(v => v != vertex))
      })
    }
  }

  /**
    * Removes an edge between two vertices in the graph.
    * @param from the starting vertex of the edge
    * @param to the ending vertex of the edge
    */
  def removeEdge(from: T, to: T): Unit = {

    // first check if both vertices exist in the graph
    if (adjacencyList.contains(from) && adjacencyList.contains(to)) {

      // retrieve the set of adjacent vertices to 'from' vertex
      val adjacentVertices = adjacencyList(from)

      // remove 'to' vertex from the set of adjacent vertices for 'from' vertex
      adjacencyList += (from -> (adjacentVertices.filter(v => v != to)))
    }
  }

  /**
    * Returns a collection of all the vertices in the graph.
    * @return the collection of vertices in the graph
    */
  def getAllVertices: Iterable[T] = {
    adjacencyList.keys
  }

  /**
    * Returns a collection of outgoing edges from a specific vertex in the graph.
    * @param vertex the vertex to get outgoing edges from
    * @return the collection of outgoing edges
    */
  def getOutgoingEdges(vertex: T): Iterable[T] = {
    adjacencyList(vertex)
  }

  /**
    * Checks if a directed edge exists between two vertices in the graph.
    * @param from the starting vertex of the edge
    * @param to the ending vertex of the edge
    * @return true if the edge exists, false otherwise
    */
  def hasEdge(from: T, to: T): Boolean = {

    // first check if both vertices exist in the graph
    if (adjacencyList.contains(from) && adjacencyList.contains(to)) {

      // retrieve the set of adjacent vertices to 'from' vertex
      val adjacentVertices = adjacencyList(from)

      // check if 'to' vertex is contained in the set of adjacent vertices
      adjacentVertices.contains(to)
    } else {
      false
    }
  }
}