// Define a list of integers
val numbers = List(1, 2, 3, 4, 5, 6)

// Filter out even numbers from the list and store in a new list
val evenNumbers = numbers.filter(_ % 2 == 0)

// Define a case class to represent a person
case class Person(name: String, age: Int)

// Create a list of Person objects
val people = List(Person("John", 25), Person("Sarah", 30), Person("Mike", 35))

// Use pattern matching to filter out people over 30 years old
val maturePeople = people.filter {
  case Person(_, age) => age > 30
}

// Create a higher-order function to calculate the sum of squares of a list of numbers
def sumOfSquares(list: List[Int]): Int = {
  list.map(x => x * x).sum
}

// Use currying to create a function that calculates the nth power of a number
def power(n: Int)(x: Int): Int = {
  if (n == 0) 1
  else x * power(n - 1)(x)
}

// Use a for comprehension to create a list of power values from 1 to 5
val powerList = for (n <- 1 to 5) yield power(n)(3)

// Define an implicit class to add a 'isPositive' method to Int type
implicit class IntExtensions(value: Int) {
  def isPositive: Boolean = value > 0
}

// Use the 'isPositive' method on an integer
val num = 10
num.isPositive // returns true

// Create a partial function that only applies to even numbers
val isEven: PartialFunction[Int, String] = {
  case x if x % 2 == 0 => s"$x is even"
}

// Use the partial function with a map and collect to create a new list of even numbers
val outputList = numbers.map(isEven).collect { case s: String => s }

// Define a parameterized class that takes a type T
class Box[T](value: T) {
  // Define a map function to apply a given function to the value inside the box
  def map[U](f: T => U): Box[U] = new Box(f(value))
}

// Create a Box of type Int with value 5 and map it to a Box of type String with value "5"
val intBox = new Box(5)
val stringBox = intBox.map(_.toString)