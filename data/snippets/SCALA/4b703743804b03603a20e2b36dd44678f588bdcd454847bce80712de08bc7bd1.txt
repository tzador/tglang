// An example of a complex data structure - a tree
// Node represents a single node in the tree
case class Node(value: Int, left: Option[Node], right: Option[Node])

// Tree class implements binary tree
// with left and right child nodes
class Tree {
  private var root: Option[Node] = None

  def insert(value: Int): Unit = {
    root = insertHelper(value, root)
  }

  // Helper function for inserting a new node in the tree
  private def insertHelper(value: Int, node: Option[Node]): Option[Node] = {
    node match {
      case None => Some(Node(value, None, None))
      // If value is less than current node, go left
      case Some(currentNode) if (value < currentNode.value) => Some(Node(currentNode.value, insertHelper(value, currentNode.left), currentNode.right))
      // If value is greater than current node, go right
      case Some(currentNode) if (value > currentNode.value) => Some(Node(currentNode.value, currentNode.left, insertHelper(value, currentNode.right)))
      // If value already exists, do not insert
      case _ => node
    }   
  }

  // In-order traversal of the tree
  def inOrderTraversal(): Unit = {
    inOrderTraversalHelper(root)
  }

  // Helper function for in-order traversal
  private def inOrderTraversalHelper(node: Option[Node]): Unit = {
    node match {
      case None => // do nothing for empty node
      case Some(currentNode) => {
        inOrderTraversalHelper(currentNode.left) // go left
        println(currentNode.value) // print current node
        inOrderTraversalHelper(currentNode.right) // go right
      }
    }
  } 
}

// Example usage
val tree = new Tree()
tree.insert(5)
tree.insert(3)
tree.insert(7)
tree.insert(4)
tree.inOrderTraversal()

// Output: 3 4 5 7