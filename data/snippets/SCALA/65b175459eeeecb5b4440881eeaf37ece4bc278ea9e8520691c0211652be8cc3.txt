// Imports
import scala.collection.mutable.ArrayBuffer
import scala.util.Random
import scala.concurrent.{Await, Future}
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

// Define a case class to represent a car
case class Car(make: String, model: String, year: Int, owner: String)

// Create a list of cars
val cars = List(
  Car("Toyota", "Camry", 2020, "John"),
  Car("Honda", "Civic", 2019, "Anna"),
  Car("Ford", "Mustang", 2018, "Alex"),
  Car("Chevrolet", "Corvette", 2021, "Rachel")
)

// Filter the list to only include cars with a year greater than 2018
val newCars = cars.filter(_.year > 2018)

// Create a random number generator
val random = new Random()

// Create a future that sleeps for a random amount of time
val future = Future {
  println("Future starting...")
  Thread.sleep(random.nextInt(1000))
  println("Future completed!")
}

// Wait for the future to complete and print out the result
val result = Await.result(future, 1.second)
print(result)

// Create an ArrayBuffer to store strings
val strings = ArrayBuffer[String]()

// Add strings to the ArrayBuffer
strings += "Hello"
strings += "World!"

// Create a function that prints the contents of the ArrayBuffer
def printStrings(strings: ArrayBuffer[String]): Unit = {
  for (string <- strings) {
    println(string)
  }
}

// Call the function to print out the contents of the ArrayBuffer
printStrings(strings)

// Create a map to store the number of cars owned by each person
val carOwners = Map(
  "John" -> 2,
  "Anna" -> 1,
  "Alex" -> 1,
  "Rachel" -> 2
)

// Create a pattern match to handle different cases based on the number of cars owned
def checkCarsOwned(owner: String): String = {
  carOwners.get(owner) match {
    case Some(x) if x == 1 => "You own 1 car"
    case Some(x) if x < 4 => s"You own $x cars"
    case None => "You do not own any cars"
  }
}

// Call the function with different owners to test the pattern match
println(checkCarsOwned("John"))
println(checkCarsOwned("Jenny"))
println(checkCarsOwned("Anna"))
println(checkCarsOwned("Rachel"))

// Create a method that returns an Option
def divide(x: Int, y: Int): Option[Double] = {
  if (y == 0) None else Some(x.toDouble / y)
}

// Use pattern matching to handle the Option
divide(10, 5) match {
  case Some(result) => println(s"The result of the division is $result")
  case None => println("Cannot divide by 0")
}

// Create a partial function to handle different cases
val taxCalculator: PartialFunction[Int, Int] = {
  case x if x <= 10000 => x * 0.05
  case x if x > 10000 && x <= 50000 => x * 0.10
  case x if x > 50000 => x * 0.15
}

// Use the partial function to calculate taxes for different incomes
println(taxCalculator(5000))
println(taxCalculator(20000))
println(taxCalculator(100000))

// Create a recursive function to calculate the factorial of a number
def factorial(num: Int): Int = {
  if (num == 0) 1
  else num * factorial(num - 1)
}

// Call the function to calculate factorial of 5
println(factorial(5))