// Define a case class Person with two properties, name and age
case class Person(name: String, age: Int)

// Create an empty list of Person objects
val peopleList: List[Person] = List.empty

// Use for-comprehension to loop through list of names and ages
for {
  name <- List("John", "Samantha", "Emily")
  age <- List(25, 32, 41)
} yield {
// Create a Person object and add it to the list
  peopleList :+ Person(name, age)
}

// Define a higher-order function that takes in a function and applies it to each element in a list
def applyToList[A, B](list: List[A], f: A => B): List[B] = {
  list.map(f)
}

// Create a function that returns the name of a Person object
def getName(person: Person): String = {
  person.name
}

// Use the higher-order function to apply the getName function to the list of Person objects
val names: List[String] = applyToList(peopleList, getName)

// Output the list of names
names.foreach(println)