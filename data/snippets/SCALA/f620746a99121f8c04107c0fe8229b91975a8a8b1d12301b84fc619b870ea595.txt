/**
 * This class represents a singly linked list
 * @param head the head of the list
 * @param tail the tail of the list
 * @tparam A the generic type of the list
 */
class SinglyLinkedList[A] (head: Option[A], tail: Option[SinglyLinkedList[A]]) {

  /**
   * Appends an element to the end of the list
   * @param data the element to be appended
   * @return a new SinglyLinkedList with the element appended
   */
  def append(data: A): SinglyLinkedList[A] = {
    tail match {
      case Some(t) =>
        val newTail = t.append(data)
        new SinglyLinkedList(head, Some(newTail))
      case None =>
        new SinglyLinkedList(Some(data), None)
    }
  }

  /**
   * Retrieves the first element in the list
   * @return the first element in the list, or None if the list is empty
   */
  def first: Option[A] = head

  /**
   * Retrieves the last element in the list
   * @return the last element in the list, or None if the list is empty
   */
  def last: Option[A] = {
    tail match {
      case Some(t) => t.last
      case None => head
    }
  }
}

/**
 * This object contains methods for manipulating SinglyLinkedLists
 */
object SinglyLinkedList {

  /**
   * Creates an empty SinglyLinkedList
   * @tparam A the generic type of the list
   * @return an empty SinglyLinkedList
   */
  def empty[A]: SinglyLinkedList[A] =
    new SinglyLinkedList[A](None, None)

  /**
   * Creates a SinglyLinkedList from a sequence of elements
   * @param elements the elements to be added to the list
   * @tparam A the generic type of the list
   * @return a SinglyLinkedList with the given elements
   */
  def apply[A](elements: A*): SinglyLinkedList[A] = {
    elements.foldLeft(empty[A])((list, element) => list.append(element))
  }
}