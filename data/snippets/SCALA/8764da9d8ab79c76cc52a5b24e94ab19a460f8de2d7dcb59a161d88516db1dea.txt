import scala.io.Source
// Importing library for reading input

val numList = List(1, 2, 3, 4, 5)
// Creating a list of numbers

// Using higher order function 'map' to multiply each element in list by 2
val doubledList = numList.map(x => x * 2)

// Using 'fold' function to sum all elements in list
val sum = numList.fold(0)((a, b) => a + b)

// Creating a case class for representing a person
case class Person(name: String, age: Int)

// Creating a list of Person objects
val personList = List(Person("John", 30), Person("Sarah", 25), Person("Mike", 40))

// Using pattern matching to print the names of people aged 30 or above
personList.foreach {
  case Person(name, age) if age >= 30 => println(name)
}

// Creating a function to calculate factorial using recursion
def factorial(n: Int): Int = {
  if (n == 0) 1
  else n * factorial(n - 1)
}

// Using pattern matching in a function to calculate the length of a list
def listLength(list: List[Any]): Int = list match {
  case Nil => 0
  case _ :: tail => 1 + listLength(tail)
}

// Using 'for' loop to iterate through a list and print each element
for (num <- numList) {
  println(num)
}

// Using 'try-catch' block to handle exceptions
try {
  val file = Source.fromFile("input.txt")
  for (line <- file.getLines()) {
    println(line)
  }
  file.close()
} catch {
  case e: Exception => println("File not found or unable to read.")
}