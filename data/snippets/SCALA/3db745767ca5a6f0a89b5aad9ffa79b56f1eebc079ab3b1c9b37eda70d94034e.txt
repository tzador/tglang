/** 
*This is a class that represents a complex number in Scala.
*It has properties for the real and imaginary parts of the complex number.
**/
class ComplexNumber(val real: Double, val imaginary: Double) {
  
  /** 
  *Method for adding two complex numbers together and returning a new ComplexNumber object.
  **/
  def +(other: ComplexNumber): ComplexNumber = new ComplexNumber(real + other.real, imaginary + other.imaginary)
  
  /** 
  *Method for multiplying two complex numbers together and returning a new ComplexNumber object.
  **/
  def *(other: ComplexNumber): ComplexNumber = new ComplexNumber((real * other.real) - (imaginary * other.imaginary), (real * other.imaginary) + (imaginary * other.real))
  
  /** 
  *Method for calculating the absolute value of a complex number.
  **/
  def abs(): Double = scala.math.sqrt((real*real) + (imaginary*imaginary))
  
  /** 
  *Method for calculating the phase (argument) of a complex number.
  **/
  def phase(): Double = scala.math.atan2(imaginary, real)
  
  /** 
  *Method for creating a conjugate of a complex number.
  **/
  def conjugate(): ComplexNumber = new ComplexNumber(real, -imaginary)
  
  /** 
  *Method for converting a complex number to a string.
  **/
  override def toString: String = real + " + " + imaginary + "i"
  
}

// Example usage:
val complex1 = new ComplexNumber(2, 3)
val complex2 = new ComplexNumber(4, 5)
println(complex1 + complex2) // Output: 6.0 + 8.0i
println(complex1 * complex2) // Output: -7.0 + 22.0i
println(complex1.abs()) // Output: 3.605551275463989
println(complex2.phase()) // Output: 0.8960553845713439