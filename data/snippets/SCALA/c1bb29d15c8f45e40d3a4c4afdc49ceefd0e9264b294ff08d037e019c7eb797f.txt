//define trait with two abstract methods
trait Shape {
  def area: Double
  def perimeter: Double
}

//define class Rectangle that implements Shape trait
class Rectangle(length: Double, width: Double) extends Shape {

  //implementation of abstract methods
  override def area: Double = length * width

  override def perimeter: Double = 2 * (length + width)

  //define companion object with apply method
  object Rectangle {
    def apply(length: Double, width: Double): Rectangle = new Rectangle(length, width)
  }

  //define implicit class to add methods to Double type for calculating diagonal and square
  implicit class DoubleOperations(value: Double) {
    def diagonal: Double = math.sqrt((length * length) + (width * width))

    def square: Double = length * width
  }
}

//create instance of Rectangle class
val rectangle = Rectangle(5, 10)

//print area and perimeter using methods from Shape trait
println(s"Area of rectangle: ${rectangle.area}") //output: Area of rectangle: 50
println(s"Perimeter of rectangle: ${rectangle.perimeter}") //output: Perimeter of rectangle: 30

//import implicit class to use diagonal and square methods on Double type
import Rectangle.DoubleOperations

//calculate diagonal and square of rectangle using implicit methods
println(s"Diagonal of rectangle: ${rectangle.area.diagonal}") //output: Diagonal of rectangle: 11.180339887498949
println(s"Square of rectangle: ${rectangle.area.square}") //output: Square of rectangle: 50