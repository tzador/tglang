// This is a Scala program that implements the Sieve of Eratosthenes algorithm to find prime numbers up to a specified limit

// Define a function to generate a list of all numbers up to a given limit
def createList(limit: Int): List[Int] = {
  List.range(2, limit + 1)
}

// Define a function to filter out non-prime numbers using the Sieve of Eratosthenes algorithm
def sieve(numbers: List[Int]): List[Int] = {
  numbers match {
    // Base case: an empty list (no more numbers to check), return an empty list
    case Nil => Nil
    // Recursive case:
    // 1. Add the first element of the list (which is known to be prime) to a new list
    // 2. Filter out all multiples of the first element from the remaining numbers using the built-in filter function
    // 3. Recursively call sieve function on the filtered list
    case head :: tail => head :: sieve(tail.filter(_ % head != 0))
  }
}

// Define a function to print the resulting list of prime numbers
def printPrimes(numbers: List[Int]): Unit = {
  println("The prime numbers are:")
  // Loop through the list of prime numbers and print each one
  for (num <- numbers) {
    print(num + " ")
  }
}

// Specify the limit (the upper bound for prime numbers to be generated)
val limit = 20

// Create a list of all numbers from 2 to the limit
val numbers = createList(limit)

// Filter out non-prime numbers using the sieve function
val primes = sieve(numbers)

// Print the resulting list of primes
printPrimes(primes)