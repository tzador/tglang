//create a case class named Student that takes in two parameters: name of type String and age of type Int
case class Student(name: String, age: Int)

//create a list of instances of the Student case class
val studentList = List(Student("John", 20), Student("Mary", 22), Student("Adam", 19))

//create a function named getStudentByName that takes in a String as a parameter and returns an optional Student
def getStudentByName(name: String): Option[Student] = {
  //loop through the list of students and check if their names match the given parameter
  for (student <- studentList) {
    if (student.name == name) {
      //if the names match, return Some(student), which is an optional Student
      return Some(student)
    }
  }
  //return None if no matching student is found
  None
}

//call the function and store the result in a variable
val result = getStudentByName("Mary")

//check if the result is an optional Student and print out the student's age if it exists
result match {
  case Some(student) => println(student.age) //should print 22
  case None => println("Student not found") //should not be reached in this case
}