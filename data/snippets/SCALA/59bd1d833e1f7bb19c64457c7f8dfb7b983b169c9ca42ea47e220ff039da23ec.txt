// Define a case class Person with name and age as parameters
case class Person(name: String, age: Int)

// Define a list of Person objects
val people = List(Person("John", 25), Person("Mary", 30), Person("Jack", 22))

// Use pattern matching to filter out all the people under the age of 28
val filteredPeople = people.filter{
  case Person(_, age) => age < 28
}

// Print out the names of the filtered people
println(filteredPeople.map(_.name))

// Create a function to double the age of a person
def doubleAge(person: Person): Person = {
  // Use pattern matching to extract the name and age values of the person
  // And create a new Person object with twice the age
  val Person(name, age) = person
  Person(name, age * 2)
}

// Use map function and the doubleAge function to create a new List with updated ages
val updatedPeople = people.map(doubleAge)

// Print out the updated ages
println(updatedPeople.map(_.age))