/* This code snippet is a basic implementation of a binary search tree in Scala */
class BinaryTree(var value: Int = 0) { // initializing the binary tree class with a root value of 0
  var left: Option[BinaryTree] = None // creating an option for the left node of the binary tree
  var right: Option[BinaryTree] = None // creating an option for the right node of the binary tree

  /* Function to insert a new value into the binary tree */
  def insert(value: Int): Unit = {
    if (value <= this.value) { // if the value is less than or equal to the root value
      if (this.left == None) { // if the left node is empty, insert the value
        this.left = Some(new BinaryTree(value)) // creating a new binary tree with the value and setting it as the left node
      } else { // if left node is not empty, recursively call insert function on the left node
        this.left.get.insert(value) // using 'get' to access the element inside the 'Option'
      }
    } else { // if the value is greater than the root value
      if (this.right == None) { // if the right node is empty, insert the value
        this.right = Some(new BinaryTree(value)) // creating a new binary tree with the value and setting it as the right node
      } else { // if right node is not empty, recursively call insert function on the right node
        this.right.get.insert(value) // using 'get' to access the element inside the 'Option'
      }
    }
  }

  /* Function to search for a value in the binary tree */
  def search(value: Int): Boolean = {
    if (value == this.value) { // if the value matches the root value, return true
      true
    } else if (value < this.value && this.left != None) { // if the value is less than the root value, and left node is not empty
      this.left.get.search(value) // recursively call search function on the left node
    } else if (value > this.value && this.right != None) { // if the value is greater than the root value, and right node is not empty
      this.right.get.search(value) // recursively call search function on the right node
    } else {
      false // if value is not found, return false
    }
  }

  /* Function to delete a value from the binary tree */
  def delete(value: Int): Unit = {
    if (value == this.value) { // if the value matches the root value
      if (this.left == None && this.right == None) { // if both left and right nodes are empty, delete the node
        this.value = 0 // setting the value of the node to 0
      } else if (this.left == None) { // if left node is empty, set the value of the node to the value of the right node
        this.value = this.right.get.value
        this.left = this.right.get.left // setting the left node to equal the left node of the right node
        this.right = this.right.get.right // setting the right node to equal the right node of the right node
      } else if (this.right == None) { // if right node is empty, set the value of the node to the value of the left node
        this.value = this.left.get.value
        this.right = this.left.get.right // setting the right node to equal the right node of the left node
        this.left = this.left.get.left // setting the left node to equal the left node of the left node
      } else { // if both left and right nodes are not empty
        val min = this.right.get.findMin() // finding the minimum value in the right subtree
        this.value = min // setting the value of the node to the minimum value
        this.right.get.delete(min) // recursively calling the delete function on the right subtree to delete the minimum value
      }
    } else if (value < this.value && this.left != None) { // if the value is less than the root value, and left node is not empty
      this.left.get.delete(value) // recursively call delete function on the left node
    } else if (value > this.value && this.right != None) { // if the value is greater than the root value, and right node is not empty
      this.right.get.delete(value) // recursively call delete function on the right node
    }
  }

  /* Function to find the minimum value in a binary tree */
  def findMin(): Int = {
    if (this.left == None) this.value // if the left node is empty, the current node is the minimum, return the value
    else this.left.get.findMin() // if left node is not empty, recursively call findMin function on the left node
  }

  /* Function to traverse the binary tree in-order */
  def inOrder(): Unit = {
    if (this.left != None) this.left.get.inOrder() // recursively call inOrder function on the left subtree
    println(this.value) // print the value of the current node
    if (this.right != None) this.right.get.inOrder() // recursively call inOrder function on the right subtree
  }

  /* Function to traverse the binary tree pre-order */
  def preOrder(): Unit = {
    println(this.value) // print the value of the current node
    if (this.left != None) this.left.get.preOrder() // recursively call preOrder function on the left subtree
    if (this.right != None) this.right.get.preOrder() // recursively call preOrder function on the right subtree
  }

  /* Function to traverse the binary tree post-order */
  def postOrder(): Unit = {
    if (this.left != None) this.left.get.postOrder() // recursively call postOrder function on the left subtree
    if (this.right != None) this.right.get.postOrder() // recursively call postOrder function on the right subtree
    println(this.value) // print the value of the current node
  }
}

// creating a new binary tree with a root value of 10
val binaryTree = new BinaryTree(10)

// inserting values into the binary tree
binaryTree.insert(5)
binaryTree.insert(2)
binaryTree.insert(15)
binaryTree.insert(12)
binaryTree.insert(3)

// printing the inorder traversal of the binary tree
binaryTree.inOrder()

// output:
/*
2
3
5
10
12
15
*/