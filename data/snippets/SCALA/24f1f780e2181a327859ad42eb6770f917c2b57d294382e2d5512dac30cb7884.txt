object Sorting {
  // This function takes in an array of integers and sorts them in ascending order using the quick sort algorithm
  // Parameters: 'arr' is the input array, 'left' and 'right' are the left and right indices of the subarray being sorted
  // Output: the sorted array
  def quickSort(arr: Array[Int], left: Int = 0, right: Int = arr.length - 1): Array[Int] = {
    // Check if the subarray is empty or contains a single element
    if (left >= right) {
      return arr
    }
    // Choose a pivot element, in this case the last element of the subarray is chosen, and set the left and right pointers
    var pivot = arr(right)
    var l = left
    var r = right - 1
    // Loop until the left and right pointers meet
    while (l <= r) {
      // Move the left pointer to the right until it reaches an element larger than the pivot
      while (l <= r && arr(l) < pivot) {
        l += 1
      }
      // Move the right pointer to the left until it reaches an element smaller than the pivot
      while (l <= r && arr(r) > pivot) {
        r -= 1
      }
      // If the left and right pointers have not crossed each other, swap the elements they point to
      if (l <= r) {
        val temp = arr(l)
        arr(l) = arr(r)
        arr(r) = temp
        // Increment left pointer and decrement right pointer
        l += 1
        r -= 1
      }
    }
    // Swap the pivot element with the element pointed to by the left pointer
    arr(r + 1) = arr(left)
    arr(left) = pivot
    // Recursively sort the subarrays to the left and right of the pivot
    quickSort(arr, left, r)
    quickSort(arr, r + 2, right)
    // Return the sorted array
    arr
  }
}