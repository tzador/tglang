/* This code snippet generates a binary search tree and inserts new nodes */

// define a case class to represent a tree node
case class Node(value: Int, left: Option[Node], right: Option[Node])

// define a function to insert a new node into the tree
def insert(root: Option[Node], value: Int): Node = {
    root match {
        case None => // if root is None, create a new node with the given value
            Node(value, None, None)
        case Some(node) => // if root is a node, check the value and insert into appropriate subtree
            if (value < node.value) {
                // if value is less than current node value, insert into left subtree
                Node(node.value, Some(insert(node.left, value)), node.right)
            } else {
                // if value is greater than or equal to current node value, insert into right subtree
                Node(node.value, node.left, Some(insert(node.right, value)))
            }
    }
}

// initialize an empty root node
var root: Option[Node] = None

// insert new nodes into the tree
root = Some(insert(root, 10))
root = Some(insert(root, 7))
root = Some(insert(root, 12))
root = Some(insert(root, 8))
root = Some(insert(root, 5))
root = Some(insert(root, 14))

// print the binary search tree
root.foreach(println)