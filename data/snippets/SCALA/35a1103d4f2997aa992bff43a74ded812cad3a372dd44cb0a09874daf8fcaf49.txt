// Defining a case class named Employee
case class Employee(name: String, age: Int, salary: Double) 

// Creating a companion object for the case class
object Employee { 
  // Defining a method to determine the average salary of a list of employees
  def getAverageSalary(employees: List[Employee]): Double = { 
    // Using pattern matching to match the list with the case class and extract the salary values
    employees match { 
      // If the list is empty, return 0
      case Nil => 0 
      // If the list contains a single employee, return their salary
      case employee :: Nil => employee.salary 
      // If the list contains multiple employees, recursively call the method on the remaining list and add the salaries
      case employee :: tail => employee.salary + getAverageSalary(tail) 
    } / employees.length // Divide the total salary by the number of employees to get the average 
  } 
} 

// Creating a list of employees
val employeesList = List( 
  Employee("Alice", 25, 35000.00), 
  Employee("Bob", 30, 40000.00), 
  Employee("Claire", 28, 38000.00) 
) 

// Calling the method to determine the average salary of the list of employees
val averageSalary = Employee.getAverageSalary(employeesList) 

// Outputting the result
println(s"The average salary of the employees is $averageSalary")