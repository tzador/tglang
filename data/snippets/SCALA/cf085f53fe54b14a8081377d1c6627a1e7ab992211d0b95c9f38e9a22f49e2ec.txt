// Defining a case class
case class Person(name: String, age: Int)

// Creating an instance of the case class
val person1 = Person("John", 30)

// Defining a function that returns the name and age of a Person instance
def getNameAndAge(person: Person): (String, Int) = {
  (person.name, person.age)
}

// Creating a list of Person instances
val peopleList = List(
  Person("Jane", 25),
  Person("Bob", 40),
  Person("Mary", 35)
)

// Using pattern matching to filter the list and returning only the names
val namesList = peopleList.collect {
  case Person(name, _) => name
}

// Using higher-order function to filter the list and return only people under 30 years old
val youngPeopleList = peopleList.filter(person => person.age < 30)

// Defining an implicit ordering for Person instances based on their age
implicit val personOrdering: Ordering[Person] = Ordering.by(_.age)

// Sorting the list of Person instances using the implicit ordering
val sortedPeopleList = peopleList.sorted

// Printing the output
println("Names: " + namesList)
println("Young people: " + youngPeopleList)
println("Sorted people: " + sortedPeopleList)