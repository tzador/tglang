// This code snippet uses case classes and pattern matching in Scala to create a nested data structure with custom defined types and extract information from it.

// Define case classes for different types of employees
case class Designer(name: String, age: Int, department: String)
case class Developer(name: String, age: Int, department: String)
case class Manager(name: String, age: Int, department: String)

// Create a list of employees
val employees = List(Designer("John Smith", 28, "Design"), Developer("Laura Miller", 32, "Development"), Manager("Mark Davis", 40, "Management"))

// Use pattern matching to extract information from the employee list
employees.foreach {
  case Designer(name, age, department) => println(s"$name is a designer, $age years old, working in the $department department")
  case Developer(name, age, department) => println(s"$name is a developer, $age years old, working in the $department department")
  case Manager(name, age, department) => println(s"$name is a manager, $age years old, working in the $department department")
}