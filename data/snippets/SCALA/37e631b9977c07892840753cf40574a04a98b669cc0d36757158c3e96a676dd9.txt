/**
* A class that represents a user's shopping cart
*/
class ShoppingCart(private val items: List[String]) {
  
  /**
  * Adds a new item to the shopping cart
  * @param newItem - the item to be added
  * @return - a new shopping cart with the new item added
  */
  def addItem(newItem: String): ShoppingCart = 
    new ShoppingCart(items :+ newItem)

  /**
  * Removes an item from the shopping cart
  * @param item - the item to be removed
  * @return - a new shopping cart with the item removed
  */
  def removeItem(item: String): ShoppingCart = 
    new ShoppingCart(items.filter(_ != item))

  /**
  * Gets the total number of items in the shopping cart
  * @return - the number of items in the shopping cart
  */
  def getTotalItems: Int = items.length

  /**
  * Gets the total cost of all the items in the shopping cart
  * @return - the total cost of all items
  */
  def getTotalCost: Double = items.map(_.toInt).sum

  /**
  * Prints out all the items in the shopping cart
  */
  def printItems(): Unit = println("Items: " + items.mkString(", "))

  /**
  * Checks if the shopping cart is empty
  * @return - true if the shopping cart is empty, false otherwise
  */
  def isEmpty: Boolean = items.isEmpty 
}

// example usage
val myCart = new ShoppingCart(List("shirt", "pants", "shoes"))
myCart.addItem("hat") // returns a new ShoppingCart with the item "hat" added
myCart.printItems() // prints "Items: shirt, pants, shoes, hat"
myCart.getTotalCost // returns the total cost of all items as a Double