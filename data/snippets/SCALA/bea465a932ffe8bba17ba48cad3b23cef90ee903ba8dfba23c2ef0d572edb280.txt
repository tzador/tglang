// This is a complex code snippet in SCALA
// It defines a case class named "Person"
// It also includes trait, object, and companion object
// The case class has parameters name, age, and occupation
// The object has a function to calculate years left until retirement
// The companion object has a function to print job role based on occupation

// Defining the trait "Greeting"
trait Greeting {
  val greeting: String
}

// Defining the object "RetirementCalculator" with a function to calculate years left until retirement
object RetirementCalculator {  
  def calculateYearsLeft(age: Int): Int = {
    val retirementAge = 65
    retirementAge - age
  }
}

// Defining the case class "Person" with parameters name, age, and occupation
case class Person(name: String, age: Int, occupation: String) extends Greeting {
  val greeting = "Hello, my name is " + name + " and I am " + age + " years old."
  
  // Using pattern matching to print job role based on occupation
  def printJobRole(): Unit = {
    occupation match {
      case "Engineer" => println("I am an engineer.")
      case "Doctor" => println("I am a doctor.")
      case "Teacher" => println("I am a teacher.")
      case _ => println("I have a different job.")
    }
  } 
}

// Defining the companion object "Person"
object Person {
  // Creating a sample Person instance
  val person = Person("John", 35, "Engineer")
  
  // Calling the printJobRole function on the sample instance
  person.printJobRole()
  
  // Using the RetirementCalculator object's function to calculate years left until retirement
  val yearsLeft = RetirementCalculator.calculateYearsLeft(person.age)
  
  // Printing the years left until retirement
  println("I have " + yearsLeft + " years left until retirement.")
}

// Output: