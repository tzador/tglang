object ComplexMath {
  // define case class for complex number
  case class Complex(real: Double, imag: Double) {
    // define addition function for complex numbers
    def +(that: Complex): Complex = {
      Complex(this.real + that.real, this.imag + that.imag)
    }

    // define subtraction function for complex numbers
    def -(that: Complex): Complex = {
      Complex(this.real - that.real, this.imag - that.imag)
    }

    // define multiplication function for complex numbers
    def *(that: Complex): Complex = {
      Complex(this.real * that.real - this.imag * that.imag, this.real * that.imag + this.imag * that.real)
    }

    // define division function for complex numbers
    def /(that: Complex): Complex = {
      val denominator = (that.real * that.real) + (that.imag * that.imag)
      val newReal = ((this.real * that.real) + (this.imag * that.imag)) / denominator
      val newImag = ((this.imag * that.real) - (this.real * that.imag)) / denominator
      Complex(newReal, newImag)
    }

    // define absolute value function for complex numbers
    def abs: Double = {
      scala.math.sqrt((this.real * this.real) + (this.imag * this.imag))
    }

    // define conjugate function for complex numbers
    def conj: Complex = {
      Complex(this.real, -this.imag)
    }

    // define exponential function for complex numbers
    def exp: Complex = {
      val expReal = scala.math.exp(this.real)
      Complex(expReal * scala.math.cos(this.imag), expReal * scala.math.sin(this.imag))
    }

    // define logarithm function for complex numbers
    def log: Complex = {
      Complex(scala.math.log(abs), scala.math.atan2(this.imag, this.real))
    }

    // override toString method for a nicer output
    override def toString: String = {
      if (this.imag < 0) this.real + " - " + scala.math.abs(this.imag) + "i"
      else this.real + " + " + this.imag + "i"
    }
  }

  // create an instance of Complex number
  val complex1 = Complex(5.0, 7.0)
  val complex2 = Complex(3.0, 2.0)

  // perform arithmetic operations on complex numbers
  val addResult = complex1 + complex2
  val subResult = complex1 - complex2
  val multiResult = complex1 * complex2
  val divResult = complex1 / complex2

  // print out the results
  println("Addition result: " + addResult)
  println("Subtraction result: " + subResult)
  println("Multiplication result: " + multiResult)
  println("Division result: " + divResult)
}