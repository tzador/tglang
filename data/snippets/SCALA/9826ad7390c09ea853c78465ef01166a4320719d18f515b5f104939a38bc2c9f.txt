/** This is a complex code snippet in Scala that implements a function to check if a given string is a palindrome
 * It takes in a string parameter and returns a boolean value
 * The function first converts the string to a list of characters and then uses a recursive approach to check if the first and last characters match
 * If they match, the function checks if the string has more than two characters and then recursively calls itself on the remaining substring
 * If there are no more characters left, the function returns true since all previous checks have been successful
 * If any of the checks fail, the function returns false
 */

// Declare the function with a parameter 'input'
def isPalindrome(input: String): Boolean = {
    // Convert the input string to a list of characters
    val charList = input.toList
    // Check for an empty string and return false if necessary
    if (charList.isEmpty) false
    // Check if there is only one character left in the list, which would mean it is a palindrome
    else if (charList.length == 1) true
    // Check if the first and last characters match, and recursively call the function on the substring without those characters
    else if (charList.head == charList.last) isPalindrome(charList.slice(1, charList.length - 1).mkString)
    // If any of the checks fail, return false
    else false
}

// Test the function with different inputs and print the result
println(isPalindrome("radar")) // Output: true
println(isPalindrome("racecar")) // Output: true
println(isPalindrome("hello")) // Output: false
println(isPalindrome("")) // Output: false
println(isPalindrome("a")) // Output: true