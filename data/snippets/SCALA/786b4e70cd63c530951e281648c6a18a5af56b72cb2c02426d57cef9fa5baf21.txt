// Define a case class for a Person with two fields: name (String) and age (Int)
case class Person(name: String, age: Int)

// Define a "PersonDatabase" trait with methods to add a person, retrieve a person's age, and update a person's age
trait PersonDatabase {
  // Define a mutable Map to store Person objects with their names as keys
  val database = scala.collection.mutable.Map[String, Person]()

  // Method to add a person to the database
  def addPerson(name: String, age: Int): Unit = {
    val newPerson = Person(name, age) // Create a new Person object
    database(name) = newPerson // Add the Person object to the database
  }

  // Method to retrieve a person's age from the database
  def getAge(name: String): Int = {
    database(name).age // Retrieve the age of the person with the given name
  }

  // Method to update a person's age in the database
  def updateAge(name: String, newAge: Int): Unit = {
    database(name).age = newAge // Update the age of the person with the given name
  }
}

// Define a class "Employee" that extends the Person class
class Employee(name: String, age: Int, employeeId: String) extends Person(name, age)

// Define a "SalaryDatabase" trait with methods to add an employee, retrieve an employee's salary, and update an employee's salary
trait SalaryDatabase {
  // Define a mutable Map to store Employee objects with their employee IDs as keys
  val salaryDatabase = scala.collection.mutable.Map[String, Employee]()

  // Method to add an employee to the salary database
  def addEmployee(name: String, age: Int, employeeId: String, salary: Double): Unit = {
    val newEmployee = new Employee(name, age, employeeId) // Create a new Employee object
    salaryDatabase(employeeId) = newEmployee // Add the Employee object to the salary database
  }

  // Method to retrieve an employee's salary from the database
  def getSalary(employeeId: String): Double = {
    salaryDatabase(employeeId).salary // Retrieve the salary of the employee with the given employee ID
  }

  // Method to update an employee's salary in the database
  def updateSalary(employeeId: String, newSalary: Double): Unit = {
    salaryDatabase(employeeId).salary = newSalary // Update the salary of the employee with the given employee ID
  }
}

// Create an object that implements both the "PersonDatabase" and "SalaryDatabase" traits
object EmployeeInfo extends PersonDatabase with SalaryDatabase

// Add a new person to the database
EmployeeInfo.addPerson("John", 25)

// Add a new employee to the database
EmployeeInfo.addEmployee("Jane", 30, "12345", 50000.00)

// Retrieve the age of John and Jane from the database
val ageJohn = EmployeeInfo.getAge("John")
val ageJane = EmployeeInfo.getAge("Jane")

// Update the age of Jane in the database
EmployeeInfo.updateAge("Jane", 35)

// Retrieve the salary of Jane from the database
val salaryJane = EmployeeInfo.getSalary("12345")