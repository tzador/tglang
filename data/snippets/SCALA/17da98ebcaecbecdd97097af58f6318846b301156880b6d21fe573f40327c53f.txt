// Create a case class named "Car" with parameters for "make", "model", and "year"
case class Car(make: String, model: String, year: Int)

// Create a list of Car objects
val carList = List(
  Car("Toyota", "Camry", 2021),
  Car("Ford", "Escape", 2020),
  Car("Chevrolet", "Camaro", 2019),
  Car("Honda", "Accord", 2018)
)

// Create a function to filter the car list by make
def filterByMake(carList: List[Car], make: String): List[Car] = {
  for (car <- carList if car.make == make) yield car
}

// Use pattern matching to print the info of the cars with make "Toyota"
val toyotaCars = filterByMake(carList, "Toyota")
toyotaCars.foreach { 
  case Car(make, model, year) => println(make + " " + model + " " + year) 
  // Output: Toyota Camry 2021
}

// Create a trait to define a "vehicle" and implement it for the "Car" class
trait Vehicle {
  def getMake: String
  def getModel: String
  def getYear: Int
}

implicit object CarVehicle extends Vehicle {
  def getMake: String = make
  def getModel: String = model
  def getYear: Int = year
}

// Use higher-order functions to calculate the average year of the cars
val averageYear = carList.map(_.getYear).reduce(_ + _) / carList.size.toDouble 
// Output: 2020.5