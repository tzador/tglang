sealed abstract class Animal // declaring a sealed abstract class named Animal
case class Dog(name: String, age: Int) extends Animal // creating a case class named Dog which extends the Animal class
case class Cat(name: String) extends Animal // creating a case class named Cat which extends the Animal class
trait Behavior { // creating a trait named Behavior
  def greet(name: String) = s"Hello $name" // declaring a method named greet which takes in a string parameter and returns a string interpolation
}

object Main extends App { // creating a singleton object named Main which extends the App trait
  def makeAnimalGreet(animal: Animal) = animal match { // creating a method named makeAnimalGreet which takes in an Animal parameter and matches the input
    case Dog(name, age) => println(Behavior.greet(name) + s", you are $age years old!") // if input is a Dog, print the return value of Behavior.greet and add the age in string interpolation
    case Cat(name) => println(Behavior.greet(name) + " the cat!") // if input is a Cat, print the return value of Behavior.greet with added string
  }
  val dog = Dog("Max", 3) // creating an instance of Dog with a given name and age
  val cat = Cat("Whiskers") // creating an instance of Cat with a given name
  makeAnimalGreet(dog) // calling the makeAnimalGreet method with the dog instance as input
  makeAnimalGreet(cat) // calling the makeAnimalGreet method with the cat instance as input
}
// Output:
// Hello Max, you are 3 years old!
// Hello Whiskers the cat!