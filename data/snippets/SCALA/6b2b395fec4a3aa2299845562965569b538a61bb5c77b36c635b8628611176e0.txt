// Define a case class for a Product
case class Product(id: Int, name: String, description: String)

// Define an object for general helper functions
object Helper {

    // Create a method to check if an integer is even
    def isEven(num: Int): Boolean = {
        if (num % 2 == 0) {
            true
        } else {
            false
        }
    }

    // Create a method to calculate the square of a number
    def square(num: Int): Int = {
        num * num
    }

    // Create a map to store products
    val productMap = Map(
        "A" -> Product(1, "Apple", "A delicious fruit"),
        "B" -> Product(2, "Banana", "A yellow fruit"),
        "C" -> Product(3, "Carrot", "A root vegetable")
    )

    // Create a list of numbers
    val numbers = List(1, 2, 3, 4, 5)

    // Create a method to filter the list of numbers based on a given condition
    def filterNumbers(condition: Int => Boolean): List[Int] = {
        numbers.filter(condition)
    }
}
// Create an alias for the productMap
val fruits = Helper.productMap

// Loop through each product in the map and print their descriptions
for ((key, value) <- fruits) {
    println(s"The description of $key is ${value.description}")
}

// Create a new list by mapping each number in the list to its square
val squaredNumbers = numbers.map(Helper.square(_))

// Filter the numbers list to only contain even numbers
val evenNumbers = Helper.filterNumbers(Helper.isEven)

// Print the squared numbers and even numbers
println(s"Squared numbers: $squaredNumbers")
println(s"Even numbers: $evenNumbers")