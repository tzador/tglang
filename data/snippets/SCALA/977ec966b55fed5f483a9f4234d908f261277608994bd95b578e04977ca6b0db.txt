**How to implement a binary search tree in Scala**

// Define a class for the tree nodes
class Node(val value: Int) {
  var left: Node = _
  var right: Node = _
}

// Define a function to insert values into the tree
def insert(root: Node, newValue: Int): Node = {
  // Create a new node with the given value
  val newNode = new Node(newValue)
  // Check if the tree is empty
  if (root == null) {
    // Set the new node as the root
    root = newNode
  } else {
    // Start from the root
    var currentNode = root
    // Create a variable to keep track of the parent node
    var parentNode: Node = null
    // Loop until we find a spot to insert the new node
    while (currentNode != null) {
      // Set the parent node to the current node
      parentNode = currentNode
      // If the new value is less than the current node's value
      if (newValue < currentNode.value) {
        // Move to the left child
        currentNode = currentNode.left
      } else {
        // Otherwise, move to the right child
        currentNode = currentNode.right
      }
    }
    // Check the new value against the parent node's value
    if (newValue < parentNode.value) {
      // If it's less, insert the new node as the left child
      parentNode.left = newNode
    } else {
      // Otherwise, insert the new node as the right child
      parentNode.right = newNode
    }
  }
  // Return the root node
  root
}

// Define a function to search for a value in the tree
def search(root: Node, value: Int): Node = {
  // Start from the root
  var currentNode = root
  // Loop until we find the value or reach a leaf node
  while (currentNode != null && currentNode.value != value) {
    // If the value is less than the current node's value
    if (value < currentNode.value) {
      // Move to the left child
      currentNode = currentNode.left
    } else {
      // Otherwise, move to the right child
      currentNode = currentNode.right
    }
  }
  // Return the node containing the value, or null if not found
  currentNode
}

// Create an empty tree
val root: Node = null
// Insert values into the tree
insert(root, 5)
insert(root, 3)
insert(root, 7)
insert(root, 1)
// Search for a value in the tree
val searchedNode = search(root, 3)
// Print the value of the searched node
println(searchedNode.value)