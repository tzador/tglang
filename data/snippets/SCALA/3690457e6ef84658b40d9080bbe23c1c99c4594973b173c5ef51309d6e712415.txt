def mergeSort[T](list: List[T])(implicit ord: Ordering[T]): List[T] = {
    list match {
      case Nil => Nil
      case head :: Nil => List(head)
      case _ =>
        val (left, right) = list.splitAt(list.length / 2)
        merge(mergeSort(left), mergeSort(right))
    }
  }

  def merge[T](left: List[T], right: List[T])(implicit ord: Ordering[T]): List[T] = {
    (left, right) match {
      case (Nil, Nil) => Nil
      case (list, Nil) => list
      case (Nil, list) => list
      case (leftHead :: leftTail, rightHead :: rightTail) =>
        if (ord.lt(leftHead, rightHead))
          leftHead :: merge(leftTail, right)
        else
          rightHead :: merge(left, rightTail)
    }
  }

  val unsortedList = List(3, 6, 2, 8, 4)
  val sortedList = mergeSort(unsortedList)
  println(s"Sorted list: ${sortedList}")