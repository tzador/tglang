// Creating a List of Integers
val myIntList = List(1, 2, 3, 4, 5)

// Using pattern matching to filter out odd numbers
val oddNumList = myIntList.collect {
  case num if num % 2 != 0 => num
}

// Using higher-order function map to double all numbers
val doubledList = myIntList.map(x => x*2)

// Creating a function that returns the sum of a list of Integers
def sumList(inputList: List[Int]): Int = {
  inputList.foldLeft(0)(_ + _)
}

// Using a for comprehension to filter out even numbers from a List
val filteredList = for {
  num <- myIntList
  if num % 2 == 0
} yield num

// Creating a case class to represent a person with name and age
case class Person(name: String, age: Int)

// Creating a List of Person objects
val personList = List(
  Person("John", 27),
  Person("Jane", 30),
  Person("Bob", 42),
  Person("Alice", 21),
)

// Creating a Map from person name to age
val personMap = personList.map(person => person.name -> person.age).toMap