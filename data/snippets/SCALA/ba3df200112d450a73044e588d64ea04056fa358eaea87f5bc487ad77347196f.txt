// Create a case class for a Person with name and age fields
case class Person(name: String, age: Int)

// Define a trait for a method that greets a given person
trait Greetable {
  def greet(p: Person): Unit = println(s"Hello ${p.name}, you are ${p.age} years old.")
}

// Create an object that extends the Greetable trait
object Greeting extends Greetable

// Create an instance of the Person case class
val john = Person("John", 30)

// Use the greet method from the Greeting object to greet the person
Greeting.greet(john)

// Define a higher-order function that takes in a function and executes it twice
def executeTwice(func: () => Unit): Unit = {
  func()
  func()
}

// Define a function that prints a message
def printMessage(): Unit = println("This function was executed.")

// Call the executeTwice function with the printMessage function as the argument
executeTwice(printMessage())

// Create a list of numbers
val numbers = List(1, 2, 3, 4, 5)

// Use map to add 2 to each number in the list
val numbersPlusTwo = numbers.map(_ + 2)

// Use filter to filter out even numbers from the list
val evenNumbers = numbers.filter(_ % 2 == 0)

// Use foldLeft to find the sum of all numbers in the list
val sum = numbers.foldLeft(0)(_ + _)