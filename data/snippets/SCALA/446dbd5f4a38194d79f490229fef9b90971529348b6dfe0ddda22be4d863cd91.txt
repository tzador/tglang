// Define a case class for a person
case class Person(name: String, age: Int) 

// Define a list of people
val peopleList = List(
  Person("John", 34),
  Person("Jane", 28),
  Person("Bob", 45)
)

// Use map function to create a new list of people with increased age by 2
val increasedAgeList = peopleList.map(person => Person(person.name, person.age + 2))

// Print out the new list of people
println(increasedAgeList)

// Define a function to calculate the average age of a list of people
def calculateAverageAge(peopleList: List[Person]): Int = {
  var totalAge = 0
  for(person <- peopleList) {
    totalAge += person.age
  }
  totalAge / peopleList.length
}

// Call the function to get the average age of the original list
val averageAge = calculateAverageAge(peopleList)

// Print out the average age
println(s"The average age of people is: $averageAge")

// Define an implicit ordering for sorting people by age
implicit val orderingByAge = Ordering.by((person: Person) => person.age)

// Call the sorted method on the original list using the implicit ordering
val sortedList = peopleList.sorted

// Print out the sorted list of people
println(sortedList)