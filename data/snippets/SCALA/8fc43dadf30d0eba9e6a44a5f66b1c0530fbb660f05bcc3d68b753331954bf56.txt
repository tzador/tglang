/**
  * This is a complex class in Scala that implements a binary search tree
  * @param comparator a type parameter for the ordering of the tree
  */
class BinarySearchTree[comparator: Ordering] {

  /* Private case class Node for creating nodes in the tree */
  private case class Node(value: comparator, var left: Option[Node], var right: Option[Node])

  /* Root node of the tree */
  private var root: Option[Node] = None

  /**
    * Insert method to insert new nodes into the tree
    * @param value the value to be inserted into the tree
    */
  def insert(value: comparator): Unit = {
    root = insertRecursive(root, value)
  }

  /**
    * Recursive helper method for inserting a new node into the tree
    * @param node the current node being checked
    * @param value the value to be inserted into the tree
    */
  private def insertRecursive(node: Option[Node], value: comparator): Option[Node] = {
    node match {
      case None => Some(Node(value, None, None)) // If the current node is None, create a new node with the given value
      case Some(n) => {
        /* Use implicit ordering to compare the values of the nodes */
        import Ordering.Implicits._

        /* Check whether the value is less than or greater than the current node's value */
        if (value < n.value) {
          /* Insert the value into the left subtree */
          n.left = insertRecursive(n.left, value)
        } else {
          /* Insert the value into the right subtree */
          n.right = insertRecursive(n.right, value)
        }
        Some(n) // Return updated node
      }
    }
  }

  /**
    * Method to search for a given value in the tree
    * @param value the value to be searched for
    * @return true if value is present in the tree, false otherwise
    */
  def search(value: comparator): Boolean = {
    searchRecursive(root, value)
  }

  /**
    * Recursive helper method for searching a given value in the tree
    * @param node the current node being checked
    * @param value the value to be searched for
    * @return true if value is present in the tree, false otherwise
    */
  private def searchRecursive(node: Option[Node], value: comparator): Boolean = {
    node match {
      case None => false // If current node is None, then value not present in tree
      case Some(n) => {
        /* Use implicit ordering to compare the values of the nodes */
        import Ordering.Implicits._

        /* Check whether the value is equal to, less than or greater than the current node's value */
        if (value == n.value) {
          true // Value is present in tree
        } else if (value < n.value) {
          searchRecursive(n.left, value) // Search the left subtree
        } else {
          searchRecursive(n.right, value) // Search the right subtree
        }
      }
    }
  }
}

/* Example usage */
val tree = new BinarySearchTree[Int]
tree.insert(5)
tree.insert(3)
tree.insert(7)
println(tree.search(3)) // Prints true
println(tree.search(8)) // Prints false