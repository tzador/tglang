// This is a scala program that implements a binary search tree
class BinarySearchTree[T](cmp: (T, T) => Boolean) {
  import BinarySearchTree.Node

  // Initializing a node for the tree structure
  private case class Node(value: T, var left: Option[Node], var right: Option[Node])

  // Creating a reference to the root node, initialized as null
  private var root: Option[Node] = None

  // Function to insert a new node into the tree
  def insert(value: T): Unit = {
    // Creating a new node with the inserted value
    val newNode = Node(value, None, None)

    // Check if tree is empty
    if (root.isEmpty) {
      // Set the new node as the root
      root = Some(newNode)
    } else {
      // Creating references to the current node and its parent
      var current = root
      var parent: Option[Node] = None

      // Loop until the correct position for the new node is found
      while (current.isDefined) {
        // Check if the inserted value is less than the current node's value
        if (cmp(value, current.get.value)) {
          // Update the parent reference to the current node
          parent = current
          // Move to the left child
          current = current.get.left
        } else {
          // Update the parent reference to the current node
          parent = current
          // Move to the right child
          current = current.get.right
        }
      }

      // Check the value of the current node's parent
      if (cmp(value, parent.get.value)) {
        // Insert the new node as the left child
        parent.get.left = Some(newNode)
      } else {
        // Insert the new node as the right child
        parent.get.right = Some(newNode)
      }
    }
  }

  // Function to search for a value in the tree
  def search(value: T): Boolean = {
    // Creating a reference to the current node, initialized as the root
    var current = root

    // Loop until the value is found or the end of the tree is reached
    while (current.isDefined) {
      // Check if the value matches the current node's value
      if (cmp(value, current.get.value)) {
        // Move to the left child
        current = current.get.left
      } else if (cmp(current.get.value, value)) {
        // Move to the right child
        current = current.get.right
      } else {
        // Value is found, return true
        return true
      }
    }

    // Value is not found, return false
    false
  }
}