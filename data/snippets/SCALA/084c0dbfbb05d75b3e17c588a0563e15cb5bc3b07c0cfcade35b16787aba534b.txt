// This code snippet creates a function that generates the nth Fibonacci number
def fibonacci(n: Int): Int = {
  if (n == 0 || n == 1) n // base cases
  else {
    val memoized = scala.collection.mutable.Map[Int, Int]() // create a mutable map to store previously calculated values
    def fib(n: Int): Int = { // inner function that calculates the nth Fibonacci number
      if (memoized.contains(n)) memoized(n) // check if the value has already been calculated
      else {
        val result = fib(n-1) + fib(n-2) // recursively calculate the previous two Fibonacci numbers
        memoized += (n -> result) // add the new value to the map
        result // return the calculated value
      }
    }
    fib(n) // call the inner function to calculate the nth Fibonacci number
  }
}

val result = fibonacci(10) // call the function to get the 10th Fibonacci number
println(result) // print the result