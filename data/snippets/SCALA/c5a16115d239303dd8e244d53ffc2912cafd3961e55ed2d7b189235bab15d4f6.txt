// Define a case class named "Person" with two parameters, "name" of type String and "age" of type Int
    case class Person(name: String, age: Int)
    
    // Create an instance of the case class with the name "John" and age 25
    val person1 = Person("John", 25)
    
    // Create another instance of the case class with the name "Sarah" and age 30
    val person2 = Person("Sarah", 30)
    
    // Define a function that takes in a list of Person objects and returns the average age as a Double
    def getAverageAge(people: List[Person]): Double = {
        // Use pattern matching to handle empty lists and lists with only one person
        // If the list is empty, return a default average age of 0
        // If the list has only one person, return that person's age as the average
        // If the list contains multiple people, use the underscore notation to iterate through the list
        people match {
            case Nil => 0
            case List(person) => person.age
            case _ => 
                // Use the map function to extract the age values from the list of Person objects
                // Then use the sum function to get the total sum of all the ages
                // Finally, divide the sum by the length of the list to get the average age
                people.map(_.age).sum.toDouble / people.length
        }
    }
    
    // Create a list of Person objects with the previously defined person1 and person2
    val personList = List(person1, person2)
    
    // Call the getAverageAge function with the personList as an argument and assign the result to a variable
    val averageAge = getAverageAge(personList)
    
    // Print the averageAge to the console
    println(averageAge)