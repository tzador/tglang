/**
 * The following code snippet shows an implementation of a binary search tree data structure in Scala.
 */

class BinarySearchTree[T <% Ordered[T]] {
  case class Node(var key: T,
                  var left: Option[Node],
                  var right: Option[Node])
  var root: Option[Node] = None
  
  /**
   * Adds a new node to the tree, maintaining the binary search tree property.
   * @param key the key to add to the tree
   */
  def add(key: T): Unit = {
    if (root.isEmpty) {
      // If tree is empty, create root node
      root = Some(Node(key, None, None))
    } else {
      var curr = root
      var prev = root
      
      // Traverse through the tree until a suitable empty spot is found
      while (curr.isDefined) {
        prev = curr
        curr = if (key < curr.get.key) curr.get.left else curr.get.right
      }
      
      // Add the new node to the correct position
      if (key < prev.get.key) {
        prev.get.left = Some(Node(key, None, None))
      } else {
        prev.get.right = Some(Node(key, None, None))
      }
    }
  }
  
  /**
   * Searches for a specified key in the tree.
   * @param key the key to search for
   * @return true if the key is found, false otherwise
   */
  def search(key: T): Boolean = {
    var curr = root
    while (curr.isDefined && curr.get.key != key) {
      curr = if (key < curr.get.key) curr.get.left else curr.get.right
    }
    // If the current node is None, key is not found
    curr.isDefined
  }
}

/**
 * Example usage of the BinarySearchTree class.
 */
object Main extends App {
  val bst = new BinarySearchTree[Int]
  bst.add(5)
  bst.add(3)
  bst.add(9)
  bst.add(2)
  bst.add(7)
  println(bst.search(9)) // prints true
  println(bst.search(4)) // prints false
}