/*
This is a multi-line comment
that describes the purpose of this code snippet
in the programming language Scala.
*/

// Defining a case class for a Person
case class Person(name: String, age: Int)

// Creating a List of Person objects
val people = List(
  Person("John", 25),
  Person("Jane", 28),
  Person("Bob", 30)
)

// Using Scala's higher order function 'flatMap' to flatten the list and return a new list of ages
val ages = people.flatMap(_.age)

// Using pattern matching to filter out people above the age of 25 and return their names
val names = people.collect {
  case Person(name, age) if age > 25 => name
}

// Defining a partial function to check if a given person is above a certain age
val isAboveAge: PartialFunction[Person, Int] = {
  case Person(_, age) if age > 30 => age
}

// Using the partial function to check the age of a person and return a boolean value
val isBobAboveAge = isAboveAge.isDefinedAt(Person("Bob", 30))

// Using Scala's 'for' comprehension to return a list of names of people above the age of 25
val filteredNames = for {
  Person(name, age) <- people
  if age > 25
} yield name