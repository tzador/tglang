/** A class representing a car.
  *
  * @constructor creates a new car with the given make and model
  * @param make the make of the car
  * @param model the model of the car
  */
class Car(val make: String, val model: String) {
  // private variable to keep track of the car's speed
  private var speed = 0

  /** A method to accelerate the car's speed by the given amount
    *
    * @param amount the amount to accelerate the car's speed by
    */
  def accelerate(amount: Int): Unit = {
    this.speed += amount
  }

  /** A method to decelerate the car's speed by the given amount
    *
    * @param amount the amount to decelerate the car's speed by
    */
  def decelerate(amount: Int): Unit = {
    this.speed -= amount
  }

  /** A method to check if the car is currently moving or not
    *
    * @return true if the car's speed is greater than 0, false otherwise
    */
  def isMoving(): Boolean = {
    if (this.speed > 0) {
      true
    } else {
      false
    }
  }

  /** A method to display the car's make and model
    *
    * @return a string containing the car's make and model
    */
  override def toString: String = {
    s"$make $model"
  }
}

// Creating an instance of the Car class with make "Toyota" and model "Corolla"
val myCar = new Car("Toyota", "Corolla")

// Printing the car's make and model
println(myCar)

// Accelerate the car's speed by 30
myCar.accelerate(30)

// Check if the car is currently moving
println(myCar.isMoving())

// Decelerate the car's speed by 10
myCar.decelerate(10)

// Check if the car is currently moving
println(myCar.isMoving())