// A complex Scala class with multiple methods and properties
class ComplexClass {
   // Properties
   var property1: String = _
   val property2: Int = 10

   // Methods
   def method1(): Unit = {
       println("Method 1 called")
   }

   def method2(param: String): String = {
       return "Method 2 called with parameter: " + param
   }

   def method3(param1: Int, param2: Int): Int = {
       return param1 + param2 + property2
   }

   def method4(): Unit = {
       val newProperty: String = "New property value"
       property1 = newProperty
       println("New property value assigned: " + property1)
   }

   // Nested class
   class NestedClass {
       def nestedMethod(): String = {
           return "Nested method inside NestedClass"
       }
   }
}

// Create an instance of the complex class
val complexClass = new ComplexClass()

// Call methods and access properties
complexClass.method1()
val method2Result = complexClass.method2("test parameter")
val method3Result = complexClass.method3(5,7)
complexClass.method4()

// Create an instance of the nested class
val nestedClass = new complexClass.NestedClass()
// Call a method inside the nested class
val nestedMethodResult = nestedClass.nestedMethod()