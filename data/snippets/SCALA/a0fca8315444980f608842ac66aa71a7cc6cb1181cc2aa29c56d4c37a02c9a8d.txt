/**
 * This is a simple class that represents a person.
 *
 * @param firstName the person's first name
 * @param lastName the person's last name
 * @param age the person's age, must be a positive integer
 * @param email the person's email address
 */
class Person(val firstName: String, val lastName: String, val age: Int, val email: String) {

  // Method to print the person's full name
  def printFullName(): Unit = {
    println(s"${this.firstName} ${this.lastName}")
  }

  /**
   * A nested class that represents a hobby of the person.
   * @param name the name of the hobby
   * @param durationInHours the duration of the hobby in hours, must be a positive integer
   */
  class Hobby(val name: String, val durationInHours: Int) {

    /**
     * A method to print information about the hobby.
     */
    def printInfo(): Unit = {
      println(s"$name is a hobby that ${firstName} has been doing for ${durationInHours} hours.")
    }
  }

  /**
   * A method to add a new hobby to the person's list of hobbies.
   * @param name the name of the hobby to add
   * @param durationInHours the duration of the hobby in hours
   */
  def addHobby(name: String, durationInHours: Int): Unit = {
    val newHobby = new Hobby(name, durationInHours)
    hobbies += newHobby
  }

}

/**
 * A companion object that provides methods for creating and accessing Person objects.
 */
object Person {

  /**
   * A method to create a new Person object.
   * @param firstName the person's first name
   * @param lastName the person's last name
   * @param age the person's age
   * @param email the person's email address
   * @return a new Person object
   */
  def create(firstName: String, lastName: String, age: Int, email: String): Person = {
    if (age < 0) {
      throw new IllegalArgumentException("Age must be a positive integer.")
    }
    new Person(firstName, lastName, age, email)
  }

}

// Create a new Person object
val person = Person.create("John", "Smith", 30, "jsmith@example.com")

// Add a new hobby to the person's list of hobbies
person.addHobby("photography", 100)

// Print person's full name and information about their hobbies
person.printFullName()

// Print information about each hobby
person.hobbies.foreach(_.printInfo())