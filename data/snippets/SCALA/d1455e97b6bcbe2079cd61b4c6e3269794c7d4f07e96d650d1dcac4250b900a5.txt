// Creates a new case class named Family with two parameters
case class Family(name: String, members: Int)

// Creates an instance of the Family case class
val myFamily = Family("Smith", 4)

// Prints the name and number of members in the family
println(s"The ${myFamily.name} family has ${myFamily.members} members.")

// Defines a higher order function that takes in a family's name and members and returns a string
def describeFamily(family: Family): String = {
  s"The ${family.name} family has ${family.members} members."
}

// Applies the higher order function to the myFamily instance and prints the result
println(describeFamily(myFamily))

// Creates a list of Family instances
val familyList = List(
  Family("Johnson", 3),
  Family("Garcia", 5),
  Family("Miller", 2)
)

// Defines a for loop to iterate through the familyList and print the result of the higher order function
for (family <- familyList) {
  println(describeFamily(family))
}

// Creates a map of Family instances with the family name as the key and the number of members as the value
val familyMap = Map(
  "Smith" -> 4,
  "Johnson" -> 3,
  "Garcia" -> 5,
  "Miller" -> 2
)

// Defines a match expression that prints the result of the higher order function for a specific family name
val description = familyMap.get("Garcia") match {
  case Some(x) => describeFamily(Family("Garcia", x))
  case None => "No information found."
}

println(description)