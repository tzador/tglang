// Define a case class named `Person` with two private properties `name` and `age`
case class Person(private val name: String, private val age: Int)

// Create an object of type `Person` with name "John" and age 30
val john = Person("John", 30)

// Create an abstract class `Animal` with an abstract method `makeSound`
abstract class Animal {
  def makeSound(): String
}

// Create a class named `Dog` that extends `Animal` and implements `makeSound` method
class Dog extends Animal {
  def makeSound(): String = "Woof!"
}

// Create a class named `Cat` that extends `Animal` and implements `makeSound` method
class Cat extends Animal {
  def makeSound(): String = "Meow!"
}

// Create a function named `printAnimalSound` that takes in a list of animals and prints out their respective sounds
def printAnimalSound(animals: List[Animal]): Unit = {
  animals.foreach(animal => println(animal.makeSound()))
}

// Create a list of animals containing one instance of `Dog` and two instances of `Cat`
val animalsList: List[Animal] = List(new Dog(), new Cat(), new Cat())

// Call the `printAnimalSound` function with the animals list as the argument
printAnimalSound(animalsList)