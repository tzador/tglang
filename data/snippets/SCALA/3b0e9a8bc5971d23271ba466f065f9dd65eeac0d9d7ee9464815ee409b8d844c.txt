def mergeSort[A](list: List[A])(implicit ordering: Ordering[A]): List[A] = {
  // function to merge two sorted lists
  def merge(left: List[A], right: List[A]): List[A] = {
    (left, right) match {
      case (Nil, _) => right  // if left list is empty, return right list
      case (_, Nil) => left  // if right list is empty, return left list
      case (x::xs, y::ys) =>
        if (ordering.lt(x, y)) x::merge(xs, right)  // if x < y, add x to result and recurse with remaining left list
        else y::merge(left, ys)  // if x >= y, add y to result and recurse with remaining right list
    }
  }
  
  // recursive merge sort function
  def sort(l: List[A]): List[A] = {
    if (l.length <= 1) l  // if list has only 1 element, return list
    else {
      val (left, right) = l.splitAt(l.length / 2)  // split list into two halves
      merge(sort(left), sort(right))  // recursively sort both halves and merge the results
    }
  }

  sort(list)  // call sort function with the given list
}