// Defines a function that takes in two integers and returns their sum
def sum(a: Int, b: Int): Int = a + b

// Defines a recursive function that calculates the factorial of a given number
def factorial(n: Int): Int = {
  if (n <= 1) 1
  else n * factorial(n - 1)
}

// Defines a case class for representing a person
case class Person(name: String, age: Int)

// Uses pattern matching to check the type of a given value
val result = "Hello World!"
result match {
  case s: String => println("String value: " + s)
  case i: Int => println("Integer value: " + i)
}

// Creates a list of integers from 1 to 10
val list = List.range(1, 11)

// Uses map and filter to manipulate the list and returns a new list
val newList = list.map(_ * 2).filter(_ % 2 == 0)

// Defines a higher-order function that takes in a function and returns a new function
def addBy(n: Int): Int => Int = m => n + m

// Uses currying to define a function that adds two numbers
def add(x: Int)(y: Int): Int = x + y

// Uses partial application to define a function that adds 5 to any given number
val addFive = add(5) _

// Uses closures to create a counter function that increments by 1 each time it is called
var counter = 0
val increment = () => {
  counter += 1
  counter
}

// Uses try-catch-finally to handle any potential exceptions in the code
try {
  val x = 10 / 0
} catch {
  case e: Exception => println("Error: " + e.getMessage)
} finally {
  println("Done!")
}

// Uses implicit parameters to pass additional configuration information to a function
def printConfiguration(text: String)(implicit config: Map[String, String]): Unit = {
  println(text + ": " + config("color"))
}
implicit val config = Map("color" -> "blue")

// Calls the function with implicit parameters
printConfiguration("My favorite color")