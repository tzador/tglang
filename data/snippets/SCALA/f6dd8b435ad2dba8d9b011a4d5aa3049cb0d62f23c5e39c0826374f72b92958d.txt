// Define a case class with a constructor parameter
case class Person(name: String)

// Define an implicit class to add a greet method to the Person class
implicit class GreetablePerson(person: Person) {
  def greet(): Unit = println(s"Hello ${person.name}!")
}

// Define an immutable list of Person objects
val people = List(Person("John"), Person("Jane"), Person("Bob"), Person("Alice"))

// Use pattern matching to extract the name of the first person in the list
people.head match {
    case Person(name) => println(s"The first person in the list is $name")
}

// Use the greet method on each Person in the list
people.foreach(_.greet())

// Define a higher-order function that takes a function and applies it to each Person in the list
def applyFunctionToEachPerson(function: Person => Unit): Unit = people.foreach(function)

// Use the higher-order function and an anonymous function to greet each Person in the list
applyFunctionToEachPerson(person => println(s"Welcome, ${person.name}!"))

// Define a recursive function to find the factorial of a given number
def factorial(num: Int): Int = {
  if (num <= 1) 1
  else num * factorial(num - 1)
}

// Call the factorial function on a number and print the result
val num = 5
println(s"The factorial of $num is ${factorial(num)}")