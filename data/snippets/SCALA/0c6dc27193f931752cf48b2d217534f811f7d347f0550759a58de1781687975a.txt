/**
 * This is a class that represents a mathematical expression tree.
 * It supports addition, subtraction, multiplication, and division operations.
 * Each node in the tree can have child nodes, which are also mathematical expressions.
 *
 * @param value The value represented by this node.
 * @param left The left child node of this node.
 * @param right The right child node of this node.
 */
class ExpressionTree(val value: Int, val left: ExpressionTree, val right: ExpressionTree) {
  /**
   * Evaluates the mathematical expression represented by this tree.
   *
   * @return The result of the expression.
   */
  def evaluate(): Int = {
    value match {
      case 0 => 0
      case 1 => 1
      case _ => left.evaluate() + right.evaluate()
    }
  }
}

// This is a function that creates an ExpressionTree object using a given list of values and operators.
// The values and operators are stored in separate lists, with values in ascending order.
// Values and operators are represented by their corresponding characters.
def createExpressionTree(values: List[Char], operators: List[Char]): ExpressionTree = {
  // Recursive function that builds the tree from the bottom up, starting with the leaf nodes.
  def buildTree(values: List[Char], operators: List[Char], index: Int): ExpressionTree = {
    // Create a new node with the current value.
    val node = new ExpressionTree(values(index).asDigit, null, null)

    // If there are no more operators, we have reached the bottom of the tree.
    if (operators.isEmpty) {
      return node
    }

    // Otherwise, determine the left and right child nodes and set them accordingly.
    val left = node
    val right = buildTree(values, operators, index + 1)

    // Check the current operator and perform the appropriate operation.
    operators.head match {
      case '+' => new ExpressionTree(left.value + right.evaluate(), left, right)
      case '-' => new ExpressionTree(left.value - right.evaluate(), left, right)
      case '*' => new ExpressionTree(left.value * right.evaluate(), left, right)
      case '/' => new ExpressionTree(left.value / right.evaluate(), left, right)
    }
  }

  // Call the recursive function to build the tree.
  buildTree(values, operators, 0)
}

// Example usage:
val values = List('1', '2', '3') // values = [1, 2, 3]
val operators = List('+', '*')    // operators = ['+', '*']

val tree = createExpressionTree(values, operators)

// Evaluate the expression:
val result = tree.evaluate() // result = 7