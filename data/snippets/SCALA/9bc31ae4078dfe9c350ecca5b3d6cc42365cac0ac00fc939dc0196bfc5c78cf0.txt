// This code snippet generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm
object Sieve {
  // Function to generate a list of prime numbers using the Sieve of Eratosthenes algorithm
  def sieveOfEratosthenes(limit: Int): List[Int] = {
    // Create a range from 2 to the given limit
    val numbers = 2 to limit
    // Create a mutable map to store the numbers and their corresponding prime status
    val map = scala.collection.mutable.Map.from(numbers.map(_ -> true))
    // Loop through the numbers starting from 2
    for (i <- 2 until limit) {
      // Check if the current number is marked as prime
      if (map(i)) {
        // Loop through the numbers starting from the square of the current number,
        // with increments of the current number, and mark them as non-prime
        for (j <- i * i to limit by i) {
          map(j) = false
        }
      }
    }
    // Return a list of numbers marked as prime
    map.filter(_._2).keys.toList
  }
}

// Print the list of prime numbers up to 100
println(Sieve.sieveOfEratosthenes(100))