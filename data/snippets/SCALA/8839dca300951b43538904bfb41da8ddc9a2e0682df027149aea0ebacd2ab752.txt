/** This is a comment in scala */
 
// Basic function that takes in two parameters and returns their sum
def sum(x: Int, y: Int): Int = {
    return x + y
}

// Declaration of an empty list
var list = List[Int]()

// Use of pattern matching to add elements to the list
list = 1 :: list
list = 2 :: list
list = 3 :: list

// Higher-order function to square all elements in the list
val squaredList = list.map(x => x * x)

// Recursive function to calculate the factorial of a number
def factorial(num: Int): Int = {
    if (num == 0 || num == 1) {
        1
    } else {
        num * factorial(num - 1)
    }
}

// Anonymous function to multiply two numbers
val multiply = (x: Int, y: Int) => x * y

// Class definition with a constructor and method
class Person(name: String, age: Int) {
    def speak(): Unit = {
        println(s"My name is $name and I am $age years old.")
    }
}

// Creating an instance of the class
val person = new Person("John", 25)

// Pattern matching with case classes
case class Car(brand: String, model: String, year: Int)
val car = Car("Toyota", "Camry", 2019)
car match {
    case Car(brand, model, year) => println(s"Brand: $brand | Model: $model | Year: $year")
}