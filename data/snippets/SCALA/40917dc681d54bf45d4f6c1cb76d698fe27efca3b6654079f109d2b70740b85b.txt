// Define a case class named Person with two parameters: name which is a String and age which is an Integer
case class Person(name: String, age: Int)

// Create an object named People
object People {  
  // Create an empty List of type Person 
  val emptyList: List[Person] = List.empty[Person]
  // Define a function named addPerson that takes in a List of type Person as a parameter and a Person object
  // This function will add the passed-in Person object to the given List and return the updated List
  def addPerson(list: List[Person], person: Person): List[Person] = {
    // Use pattern matching to check if the given List is empty
    list match {
      // If the List is empty, return a new List with just the passed-in Person object
      case Nil => List(person)
      // If the List is not empty, use the :: operator to add the passed-in Person object to the head of the List
      // Then return the updated List
      case head :: tail => person :: list
    }
  }
  // Define a function named getAverageAge that takes in a List of type Person as a parameter
  // This function will calculate the average age of all the persons in the given List
  def getAverageAge(list: List[Person]): Int = {
    // Use pattern matching to check if the given List is empty
    list match {
      // If the List is empty, return 0
      case Nil => 0
      // If the List is not empty, use recursion to calculate the sum of all the ages in the List
      // Then divide the sum by the size of the List to get the average age
      case head :: tail => (head.age + getAverageAge(tail)) / list.size
    }
  }
}

// Create a new Person object with name "John" and age 25
val john = Person("John", 25)

// Add the above Person object to the emptyList using the addPerson function defined in the People object
val updatedList = People.addPerson(People.emptyList, john)

// Print the updatedList
println(updatedList)

// Create another Person object with name "Jane" and age 27
val jane = Person("Jane", 27)

// Add the above Person object to the updatedList using the addPerson function defined in the People object
val newUpdatedList = People.addPerson(updatedList, jane)

// Print the updatedList
println(newUpdatedList)

// Calculate the average age of all the persons in the newUpdatedList using the getAverageAge function defined in the People object
val averageAge = People.getAverageAge(newUpdatedList)

// Print the average age
println(averageAge)