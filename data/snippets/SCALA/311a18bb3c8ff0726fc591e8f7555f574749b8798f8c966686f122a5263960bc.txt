def mergeSort(list: List[Int]): List[Int] = { // defining mergeSort function with Int List as parameter
    if (list.length <= 1) // if list has one or less elements, return list
        list 
    else { // else call merge function with two sorted halves of the list as parameters
        val (left, right) = list.splitAt(list.length / 2)
        merge(mergeSort(left), mergeSort(right))
    }
}

def merge(left: List[Int], right: List[Int]): List[Int] = { // defining merge function with two Int Lists as parameters
    if (right.isEmpty) // if right list is empty, return left list
        left
    else if (left.isEmpty) // if left list is empty, return right list
        right
    else if (left.head < right.head) // if first element of left list is smaller than right list, add it to the merged list and call merge function recursively
        left.head :: merge(left.tail, right)
    else // else, add first element of right list to merged list and call merge function recursively
        right.head :: merge(left, right.tail)
}

val unsortedList = List(5, 9, 4, 2, 10, 3, 8, 6, 1, 7) // create a list of unsorted integers
val sortedList = mergeSort(unsortedList) // call mergeSort function on the unsorted list
println(sortedList) // print sorted list
// Output: List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)