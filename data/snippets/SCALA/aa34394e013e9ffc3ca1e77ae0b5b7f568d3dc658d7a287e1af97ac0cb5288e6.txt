def mergeSort[A](list: List[A])(implicit ord: Ordering[A]): List[A] = {

  /**
  * Uses a divide and conquer approach to merge two sorted lists into one
  * @param left The first sorted list
  * @param right The second sorted list
  * @param rev The reversed list containing the sorted elements
  */
  def merge(left: List[A], right: List[A], rev: List[A] = Nil): List[A] = (left, right) match {
    case (Nil, Nil) => rev.reverse
    case (Nil, h :: t) => merge(Nil, t, h :: rev)
    case (h :: t, Nil) => merge(t, Nil, h :: rev)
    case (h1 :: t1, h2 :: t2) =>
      if (ord.lteq(h1, h2)) merge(t1, right, h1 :: rev)
      else merge(left, t2, h2 :: rev)
  }

  val n = list.length / 2
  if (n == 0) list
  else {
    val (left, right) = list.splitAt(n)
    merge(mergeSort(left), mergeSort(right))
  }
}