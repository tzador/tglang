/**
* A class representing a linked list
* @tparam T the type of elements in the list
*/
class LinkedList[T] {
  // private field for storing the head element
  private var head: Node[T] = null

  /**
  * Function to add an element to the front of the list
  * @param element the element to be added
  */
  def addFirst(element: T): Unit = {
    // create a new node with the given element
    val newNode = new Node(element)

    // check if the list is empty
    if (head == null) {
      // if empty, set the new node as head
      head = newNode
    } else {
      // if not empty, set the new node as the new head and link it to the previous head
      newNode.next = head
      head = newNode
    }
  }

  /**
  * Function to remove the first element in the list
  * @return the removed element
  */
  def removeFirst(): T = {
    // check if the list is empty
    if (head == null) {
      // if empty, throw an error
      throw new NoSuchElementException("List is empty")
    } else {
      // if not empty, save the head element and set the next element as the new head
      val removedElement = head.value
      head = head.next
      removedElement
    }
  }

  /**
  * Function to get the element at a specific index
  * @param index the index of the element to be retrieved
  * @return the element at the given index
  */
  def get(index: Int): T = {
    // check if the list is empty
    if (head == null) {
      // if empty, throw an error
      throw new NoSuchElementException("List is empty")
    } else if (index < 0) {
      // if the given index is negative, throw an error
      throw new IndexOutOfBoundsException("Index must be non-negative")
    } else {
      // if not empty and index is valid, loop through the list and return the element at the given index
      var temp = head
      var currentIndex = 0
      while (temp != null) {
        if (currentIndex == index) {
          return temp.value
        }
        temp = temp.next
        currentIndex += 1
      }
      // if index is out of bound, throw an error
      throw new IndexOutOfBoundsException("Index is out of bound")
    }
  }

  /**
  * Function to convert the list to a string representation
  * @return string representation of the list
  */
  override def toString(): String = {
    // check if the list is empty
    if (head == null) {
      "Empty list"
    } else {
      // if not empty, loop through the list and append elements to a string
      var result = ""
      var temp = head
      while (temp != null) {
        result += temp.value + " "
        temp = temp.next
      }
      result
    }
  }

  /**
  * A class representing a node in the list
  * @param value the value to be stored in the node
  */
  private class Node[T](val value: T) {
    // field for storing the next node
    var next: Node[T] = null
  }
}