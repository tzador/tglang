/** 
* A generic class that implements a binary tree.

* @param T the type of elements to be stored in the tree
*/
class BinaryTree[T] {

  // private case class representing a node in the tree
  private case class Node(value: T, left: Option[Node] = None, right: Option[Node] = None)

  /* Private variable to store the root node of the tree */
  private var root: Option[Node] = None

  /**
  * Adds a new node to the tree with the given value.
  *
  * @param value the value to be added to the tree
  */
  def add(value: T): Unit = {
    // if root is empty, create a new node and set it as the root
    if (root.isEmpty) {
      root = Some(Node(value))
    } else {
      // otherwise, call the private function addNode to add the new node at the appropriate location
      addNode(value, root.get)
    }
  }

  /**
  * Private method to add a new node to the tree recursively.
  *
  * @param value the value to be added to the tree
  * @param current the current node being traversed
  */
  private def addNode(value: T, current: Node): Unit = {
    // check if the given value is smaller than the current node's value
    if (value < current.value) {
      // if left child is empty, create a new node and set it as the left child
      if (current.left.isEmpty) {
        current.left = Some(Node(value))
      } else {
        // otherwise, recurse on the left child
        addNode(value, current.left.get)
      }
    } else {
      // if right child is empty, create a new node and set it as the right child
      if (current.right.isEmpty) {
        current.right = Some(Node(value))
      } else {
        // otherwise, recurse on the right child
        addNode(value, current.right.get)
      }
    }
  }

  /**
  * Returns the value of the node with the given value, if it exists in the tree.
  *
  * @param value the value to be searched for in the tree
  * @return Option[T] the value of the node, if found, else None
  */
  def find(value: T): Option[T] = {
    // call the private function findNode to search for the given value starting from the root node
    findNode(value, root)
  }

  /**
  * Private method to search for a node with the given value in the tree recursively.
  *
  * @param value the value to be searched for in the tree
  * @param current the current node being traversed
  * @return Option[T] the value of the node, if found, else None
  */
  private def findNode(value: T, current: Option[Node]): Option[T] = {
    // base case: if current node is empty, return None
    if (current.isEmpty) {
      None
    }
    // check if the given value matches the current node's value
    else if (value == current.get.value) {
      Some(value)
    } else {
      // if the given value is smaller than the current node's value, recurse on the left child
      if (value < current.get.value) {
        findNode(value, current.get.left)
      } else {
        // otherwise, recurse on the right child
        findNode(value, current.get.right)
      }
    }
  }

  /**
  * Returns the height of the tree.
  *
  * @return Int the height of the tree
  */
  def height(): Int = {
    // call the private function calculateHeight to calculate the height starting from the root node
    calculateHeight(root)
  }

  /**
  * Private method to calculate the height of the tree recursively.
  *
  * @param current the current node being traversed
  * @return Int the height of the tree
  */
  private def calculateHeight(current: Option[Node]): Int = {
    // base case: if current node is empty, return 0
    if (current.isEmpty) {
      0
    } else {
      // calculate the height of the left and right subtrees recursively
      val leftHeight = calculateHeight(current.get.left)
      val rightHeight = calculateHeight(current.get.right)
      // return the maximum of the left and right subtree heights, +1 for the current level
      1 + Math.max(leftHeight, rightHeight)
    }
  }

  /**
  * Performs an inorder traversal on the tree and prints the values of the nodes in sorted order.
  */
  def inorderTraversal(): Unit = {
    // call the private function inorderTraversalHelper to perform the traversal starting from the root node
    inorderTraversalHelper(root)
  }

  /**
  * Private method to perform an inorder traversal on the tree recursively.
  *
  * @param current the current node being traversed
  */
  private def inorderTraversalHelper(current: Option[Node]): Unit = {
    // base case: if current node is empty, return
    if (current.isEmpty) {
      return
    } else {
      // recursively traverse the left subtree
      inorderTraversalHelper(current.get.left)
      // print the value of the current node
      print(current.get.value + " ")
      // recursively traverse the right subtree
      inorderTraversalHelper(current.get.right)
    }
  }

  /**
  * Performs a preorder traversal on the tree and prints the values of the nodes.
  */
  def preorderTraversal(): Unit = {
    // call the private function preorderTraversalHelper to perform the traversal starting from the root node
    preorderTraversalHelper(root)
  }

  /**
  * Private method to perform a preorder traversal on the tree recursively.
  *
  * @param current the current node being traversed
  */
  private def preorderTraversalHelper(current: Option[Node]): Unit = {
    // base case: if current node is empty, return
    if (current.isEmpty) {
      return
    } else {
      // print the value of the current node
      print(current.get.value + " ")
      // recursively traverse the left subtree
      preorderTraversalHelper(current.get.left)
      // recursively traverse the right subtree
      preorderTraversalHelper(current.get.right)
    }
  }

  /**
  * Performs a postorder traversal on the tree and prints the values of the nodes.
  */
  def postorderTraversal(): Unit = {
    // call the private function postorderTraversalHelper to perform the traversal starting from the root node
    postorderTraversalHelper(root)
  }

  /**
  * Private method to perform a postorder traversal on the tree recursively.
  *
  * @param current the current node being traversed
  */
  private def postorderTraversalHelper(current: Option[Node]): Unit = {
    // base case: if current node is empty, return
    if (current.isEmpty) {
      return
    } else {
      // recursively traverse the left subtree
      postorderTraversalHelper(current.get.left)
      // recursively traverse the right subtree
      postorderTraversalHelper(current.get.right)
      // print the value of the current node
      print(current.get.value + " ")
    }
  }

  /**
  * Removes a node with the given value from the tree.
  *
  * @param value the value of the node to be removed
  */
  def remove(value: T): Unit = {
    // call the private function removeNode to find and remove the node with the given value, starting from the root node
    root = removeNode(value, root)
  }

  /**
  * Private method to remove a node with the given value from the tree recursively.
  *
  * @param value the value of the node to be removed
  * @param current the current node being traversed
  * @return Option[Node] the updated node, if found and removed, else None
  */
  private def removeNode(value: T, current: Option[Node]): Option[Node] = {
    // base case: if current node is empty, return None
    if (current.isEmpty) {
      None
    }
    // check if the given value matches the current node's value
    else if (value == current.get.value) {
      // check if the node is a leaf
      if (current.get.left.isEmpty && current.get.right.isEmpty) {
        // simply return None to remove the leaf node
        None
      }
      // check if the node has only a left child
      else if (current.get.left.isDefined && current.get.right.isEmpty) {
        // return the left child to replace the current node
        current.get.left
      }
      // check if the node has only a right child
      else if (current.get.left.isEmpty && current.get.right.isDefined) {
        // return the right child to replace the current node
        current.get.right
      }
      // otherwise, the node has both left and right children
      else {
        // find the minimum value in the right subtree to replace the current node
        val replacement = findMinimum(current.get.right)
        // remove the replacement node from the right subtree
        current.get.right = removeNode(replacement.value, current.get.right)
        // set the replacement node's children to the current node's children
        replacement.left = current.get.left
        replacement.right = current.get.right
        // return the replacement node to replace the current node
        Some(replacement)
      }
    } else {
      // if the given value is smaller than the current node's value, recurse on the left child
      if (value < current.get.value) {
        current.get.left = removeNode(value, current.get.left)
      } else {
        // otherwise, recurse on the right child
        current.get.right = removeNode(value, current.get.right)
      }
      // return the current node after any potential changes
      current
    }
  }

  /**
  * Private method to find the minimum value in a subtree starting from the given node.
  *
  * @param current the current node being traversed
  * @return Node the node with the minimum value found
  */
  private def findMinimum(current: Option[Node]): Node = {
    // base case: if current node's left child is empty, it is the minimum node
    if (current.get.left.isEmpty) {
      current.get
    } else {
      // otherwise, recurse on the left child
      findMinimum(current.get.left)
    }
  }

  /**
  * Returns a string representation of the tree in sorted order.
  *
  * @return String the string representation of the tree
  */
  override def toString: String = {
    // call the private function toStringHelper to recursively build the string starting from the root node
    toStringHelper(root)
  }

  /**
  * Private method to recursively build a string representation of the tree.
  *
  * @param current the current node being traversed
  * @return String the string representation of the tree
  */
  private def toStringHelper(current: Option[Node]): String = {
    // base case: if current node is empty, return an empty string
    if (current.isEmpty) {
      ""
    } else {
      // recursively build the string for the left and right subtrees
      val leftString = toStringHelper(current.get.left)
      val rightString = toStringHelper(current.get.right)
      // combine the string for the current node and the strings for the subtrees
      s"$leftString ${current.get.value} $rightString"
    }
  }
}