object ComplexMath {
  
  // define a class for complex numbers
  case class Complex(real: Double, imaginary: Double) {
    
    // define a method to add two complex numbers
    def +(other: Complex): Complex =
      Complex(real + other.real, imaginary + other.imaginary)
    
    // define a method to subtract two complex numbers
    def -(other: Complex): Complex =
      Complex(real - other.real, imaginary - other.imaginary)
      
    // define a method to multiply two complex numbers
    def *(other: Complex): Complex =
      Complex(real * other.real - imaginary * other.imaginary,
              real * other.imaginary + imaginary * other.real)
      
    // define a method to calculate the absolute value of a complex number
    def abs: Double = Math.sqrt(real * real + imaginary * imaginary)
    
    // define a method to calculate the phase angle of a complex number
    def phase: Double = Math.atan2(imaginary, real)
  }
  
  // define an implicit class to create complex numbers from integers
  implicit class ComplexOps(r: Int) {
    def +(i: Int): Complex = Complex(r, i)
  }
  
  // create two complex numbers
  val c1: Complex = Complex(5, 3)
  val c2: Complex = 7 + 2
  
  // perform various operations on the complex numbers
  val sum: Complex = c1 + c2
  val difference: Complex = c1 - c2
  val product: Complex = c1 * c2
  val c1Abs: Double = c1.abs
  val c2Phase: Double = c2.phase
}