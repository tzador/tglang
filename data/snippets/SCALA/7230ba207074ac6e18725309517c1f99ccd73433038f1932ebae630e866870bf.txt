// import libraries
import scala.collection.mutable.ArrayBuffer
import scala.concurrent.{ExecutionContext, Future}
import scala.util.{Failure, Success}
import java.util.concurrent.Executors

// create execution context
implicit val ec = ExecutionContext.fromExecutor(Executors.newFixedThreadPool(8))

// define function to calculate Fibonacci sequence
def fibonacci(n: Int): Int = {
    if (n <= 1) {
        return n
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2)
    }
}

// create array buffer to store calculated values
val results = ArrayBuffer.empty[Int]

// create future to calculate fibonacci sequence for numbers 1-10
val f = Future {
    for (i <- 1 to 10) {
        // call fibonacci function for each number
        val result = fibonacci(i)
        // add result to array buffer
        results += result
    }
}

// handle future completion
f.onComplete {
    case Success(_) => 
        // print results once future is complete
        println(results)
    case Failure(e) => 
        // handle any failures
        println("Error calculating fibonacci: " + e.getMessage)
}

// wait for future to complete
Await.result(f, 10 seconds)