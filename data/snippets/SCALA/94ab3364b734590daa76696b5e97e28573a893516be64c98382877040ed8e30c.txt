object Complex extends App {  
  implicit def complex2string(c: Complex) = s"${c.real} + ${c.imaginary}i"  

  class Complex(val real: Double, val imaginary: Double) {  
    def +(c: Complex) = new Complex(real + c.real, imaginary + c.imaginary)  
    def -(c: Complex) = new Complex(real - c.real, imaginary - c.imaginary)  
    def unary_- = new Complex(-real, -imaginary)  
    def *(c: Complex) = new Complex(real * c.real - imaginary * c.imaginary, real * c.imaginary + imaginary * c.real)  
    def /(c: Complex) = {  
      val denominator = c.real * c.real + c.imaginary * c.imaginary  
      new Complex((real * c.real + imaginary * c.imaginary) / denominator, (imaginary * c.real - real * c.imaginary) / denominator)  
    }  
    override def toString = s"${real} + ${imaginary}i"  
  }  

  // Creating two complex numbers  
  val c1 = new Complex(2, 5)  
  val c2 = new Complex(3, -4)  

  // Addition operation  
  println(c1 + c2)  // Output: 5 + 1i  

  // Subtraction operation  
  println(c1 - c2)  // Output: -1 + 9i  

  // Unary negation operation  
  println(-c1)  // Output: -2 + -5i  

  // Multiplication operation  
  println(c1 * c2)  // Output: 26 + 7i  

  // Division operation  
  println(c1 / c2)  // Output: 0.24 + 1.4i  
}