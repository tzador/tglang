// Define a case class for a Rectangle with parameters for width and height
case class Rectangle(width: Double, height: Double) {
  // Define a method to calculate the area of the rectangle
  def area: Double = width * height
  // Define an overloaded method to calculate the perimeter of the rectangle with optional parameter for units
  def perimeter(units: String = "cm"): Double = 2 * (width + height) + units

  // Define a method to check if the rectangle is a square
  def isSquare: Boolean = width == height

  // Define a method to rotate the rectangle by 90 degrees
  def rotate: Rectangle = Rectangle(height, width)

  // Define a method to scale the rectangle by given factor
  def scale(factor: Double): Rectangle = Rectangle(width * factor, height * factor)

  // Define a method to find the larger rectangle between this rectangle and another given rectangle
  def largerRectangle(other: Rectangle): Rectangle = {
    if (this.area > other.area) this
    else other
  }
}

// Create an instance of Rectangle with width 5 and height 10
val rect1 = Rectangle(5, 10)

// Calculate the area of the rectangle
val area = rect1.area

// Print the result
println(s"The area of the rectangle is: $area")

// Rotate the rectangle
val rotatedRect = rect1.rotate

// Scale the rectangle by a factor of 2
val scaledRect = rect1.scale(2)

// Check if the rectangle is a square
val isSquare = rect1.isSquare

// Print the result
println(if (isSquare) "The rectangle is a square" else "The rectangle is not a square")

// Create another rectangle with width 10 and height 10
val rect2 = Rectangle(10, 10)

// Find the larger rectangle between rect1 and rect2
val largerRect = rect1.largerRectangle(rect2)

// Print the larger rectangle's width and height
println(s"The larger rectangle has a width of ${largerRect.width} and a height of ${largerRect.height}")