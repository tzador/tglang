//Define a case class for a person
case class Person(name: String, age: Int)

//Create two instances of the Person class
val person1 = Person("John", 25)
val person2 = Person("Jane", 30)

//Define a function that compares the ages of two Person objects
def compareAges(person1: Person, person2: Person): String = {
  if (person1.age > person2.age) {
    s"${person1.name} is older than ${person2.name}"
  } else if (person1.age < person2.age) {
    s"${person2.name} is older than ${person1.name}"
  } else {
    s"${person1.name} and ${person2.name} are the same age"
  }
}

//Call the function and print the result
println(compareAges(person1, person2))

//Define a list of Person objects
val people = List(
  Person("Bob", 21),
  Person("Alice", 27),
  Person("David", 19)
)

//Filter the list to only include people above the age of 25
val filteredPeople = people.filter(_.age > 25)

//Print the names of the filtered people
filteredPeople.foreach(person => println(person.name))

//Define a higher-order function that takes in a function and a list of Person objects
def applyFunctionToPersonList(func: (Person) => Unit, list: List[Person]): Unit = {
  list.foreach(func)
}

//Define a function that prints out a greeting for each person
def greet(person: Person): Unit = {
  println(s"Hello ${person.name}, you are ${person.age} years old")
}

//Call the higher-order function passing in the greet function and the list of people
applyFunctionToPersonList(greet, people)

/* Output:
John is older than Jane
Alice
David
Hello Bob, you are 21 years old
Hello Alice, you are 27 years old
Hello David, you are 19 years old
*/