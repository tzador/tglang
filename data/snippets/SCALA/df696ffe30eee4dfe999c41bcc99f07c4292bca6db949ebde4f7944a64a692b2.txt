object ComplexNumbers {

  //  defining a class for complex numbers
  class Complex(re: Double, im: Double) {

    //  overriding the toString method for printing complex numbers
    override def toString(): String = {
      if (im >= 0) {
        //  if imaginary part is positive, print with a '+' sign
        return s"$re+${im}i"
      } else {
        //  if imaginary part is negative, print without a '+' sign
        return s"$re${im}i"
      }
    }

    //  overloading the '+' operator for adding two complex numbers
    def +(that: Complex): Complex = {
      //  add the real and imaginary parts separately
      val real = this.re + that.re
      val imaginary = this.im + that.im
      //  return a new complex number
      return new Complex(real, imaginary)
    }

    //  overloading the '-' operator for subtracting two complex numbers
    def -(that: Complex): Complex = {
      //  subtract the real and imaginary parts separately
      val real = this.re - that.re
      val imaginary = this.im - that.im
      //  return a new complex number
      return new Complex(real, imaginary)
    }

    //  overloading the '*' operator for multiplying two complex numbers
    def *(that: Complex): Complex = {
      //  perform complex multiplication
      val real = this.re * that.re - this.im * that.im
      val imaginary = this.re * that.im + that.re * this.im
      //  return a new complex number
      return new Complex(real, imaginary)
    }

    //  overloading the '==' operator for checking equality of two complex numbers
    def ==(that: Complex): Boolean = {
      if (this.re == that.re && this.im == that.im) {
        //  if real and imaginary parts are equal, return true
        return true
      } else {
        //  else return false
        return false
      }
    }

    //  overloading the '/' operator for dividing two complex numbers
    def /(that: Complex): Complex = {
      //  perform complex division
      val denominator = that.re * that.re + that.im * that.im
      val real = (this.re * that.re + this.im * that.im) / denominator
      val imaginary = (this.im * that.re - this.re * that.im) / denominator
      //  return a new complex number
      return new Complex(real, imaginary)
    }

    //  calculating the modulus of a complex number
    def modulus(): Double = {
      //  use Pythagoras theorem to calculate the magnitude
      return math.sqrt(this.re * this.re + this.im * this.im)
    }

  }

  def main(args: Array[String]) {
    //  creating two complex numbers
    val c1 = new Complex(2, 3)
    val c2 = new Complex(4, -5)

    //  adding two complex numbers
    val c3 = c1 + c2
    println(c3.toString())  //  output: 6-2i

    //  subtracting two complex numbers
    val c4 = c1 - c2
    println(c4.toString())  //  output: -2+8i

    //  multiplying two complex numbers
    val c5 = c1 * c2
    println(c5.toString())  //  output: 23+2i

    //  checking equality of two complex numbers
    println(c1 == c2)  //  output: false
    println(c1 == c1)  //  output: true

    //  dividing two complex numbers
    val c6 = c1 / c2
    println(c6.toString())  //  output: -0.2413793103448276+0.48275862068965514i

    //  calculating the modulus of a complex number
    println(c1.modulus())  //  output: 3.605551275463989
  }
}