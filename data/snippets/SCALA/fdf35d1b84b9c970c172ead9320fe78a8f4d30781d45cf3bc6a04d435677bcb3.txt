/**
 * This is a simple function that takes in an integer
 * and returns the double of that integer.
 *
 * @param num the integer to be doubled
 * @return the double of the integer
 */
def double(num: Int): Int = {
  return num * 2
}

// This is a recursive function that calculates the factorial of a number
// Given a non-negative number, it returns the factorial of that number
// For example, the factorial of 4 is 4 * 3 * 2 * 1 = 24
def factorial(num: Int): Int = {
  if (num == 0) {
    return 1
  } else {
    return num * factorial(num - 1)
  }
}

// This is a higher-order function that takes in a function and applies it to a list of integers
def mapList(list: List[Int], func: Int => Int): List[Int] = {
  return list.map(func)
}

// Example usage of the mapList function
val myList = List(1, 2, 3, 4, 5)
val doubledList = mapList(myList, double)
println(doubledList) // Output: List(2, 4, 6, 8, 10)

// This is a class called "Person" with two private attributes (name and age)
class Person(private val name: String, private val age: Int) {

  // Getter methods for the private attributes
  def getName: String = name
  def getAge: Int = age

  // Method to print out information about the person
  def printInfo(): Unit = {
    println(s"$name is $age years old.")
  }
}

// Creating an instance of the Person class
val person1 = new Person("John", 25)
person1.printInfo() // Output: John is 25 years old.

// This is a trait (similar to an interface) that defines the "Greet" method
trait Greeting {
  def greet(name: String): Unit
}

// This is a class that implements the Greeting trait and overrides the "greet" method
class GreetPerson extends Greeting {
  override def greet(name: String): Unit = {
    println(s"Hello $name, nice to meet you!")
  }
}

// Creating an instance of the GreetPerson class and calling the "greet" method
val greeter = new GreetPerson()
greeter.greet("Emily") // Output: Hello Emily, nice to meet you!