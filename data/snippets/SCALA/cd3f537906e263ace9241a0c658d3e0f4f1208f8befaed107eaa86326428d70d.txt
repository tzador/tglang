// Defines a generic class called DoubleLinkedList

class DoubleLinkedList[A] {

  // Creates a private node class to store data and next/previous references
  private class Node[A](data: A, var next: Node[A], var prev: Node[A])

  // Keeps track of the head and tail of the list
  private var head: Node[A] = null
  private var tail: Node[A] = null

  // Adds a new element to the head of the list
  def addHead(data: A): Unit = {
    val newNode = new Node[A](data, null, head) // Creates a new node with given data and initial references

    if (head != null) { // If head is not null, set its previous reference to new node
      head.prev = newNode
    } else { // Otherwise, set tail to new node (only node in list)
      tail = newNode
    }

    head = newNode // Set head to new node
  }

  // Adds a new element to the tail of the list
  def addTail(data: A): Unit = {
    val newNode = new Node[A](data, tail, null) // Creates a new node with given data and initial references

    if (tail != null) { // If tail is not null, set its next reference to new node
      tail.next = newNode
    } else { // Otherwise, set head to new node (only node in list)
      head = newNode
    }

    tail = newNode // Set tail to new node
  }

  // Removes and returns the head of the list
  def removeHead(): A = {
    if (head == null) { // If head is null, list is empty, return null
      null.asInstanceOf[A]
    } else {
      // Save the data of head and move head reference to next node
      val data = head.data
      head = head.next

      if (head != null) { // If new head exists, set its previous reference to null
        head.prev = null
      } else { // Otherwise, list is now empty, set tail to null
        tail = null
      }

      data // Return saved data
    }
  }

  // Removes and returns the tail of the list
  def removeTail(): A = {
    if (tail == null) { // If tail is null, list is empty, return null
      null.asInstanceOf[A]
    } else {
      // Save the data of tail and move tail reference to previous node
      val data = tail.data
      tail = tail.prev

      if (tail != null) { // If new tail exists, set its next reference to null
        tail.next = null
      } else { // Otherwise, list is now empty, set head to null
        head = null
      }

      data // Return saved data
    }
  }

  // Returns the size of the list
  def size(): Int = {
    var count = 0
    var current = head

    while (current != null) { // Iterate through list and count nodes until current is null
      count += 1
      current = current.next
    }

    count // Return count
  }

  // Returns a list of all elements in the list
  def getList: List[A] = {
    var list = List[A]()
    var current = head

    while (current != null) { // Iterate through list and add elements to list until current is null
      list = list :+ current.data
      current = current.next
    }

    list // Return list
  }

  // Prints all elements in the list
  def printList(): Unit = {
    var current = head

    while (current != null) { // Iterate through list and print elements until current is null
      print(current.data + " ")
      current = current.next
    }
    println()
  }
}

// Example usage
val list = new DoubleLinkedList[Int]
list.addHead(5)
list.addHead(3)
list.addTail(8)
list.addTail(10)
list.printList() // Output: 3 5 8 10
list.removeHead() // Output: 3
list.removeTail() // Output: 10
list.printList() // Output: 5 8
println(list.size()) // Output: 2
println(list.getList) // Output: List(5, 8)