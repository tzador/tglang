// create a case class for a person
case class Person(name: String, age: Int)

// create a list of people
val peopleList = List(
  Person("John", 25),
  Person("Anna", 30),
  Person("Mark", 40),
  Person("Jane", 35)
)

// filter the list to only include people under 40 years old
val youngPeople = peopleList.filter(_.age < 40)

// create a map of people's names and their ages
val peopleMap = peopleList.map(person => person.name -> person.age).toMap

// create a function that squares a number
def square(num: Int): Int = num * num

// use the function to map a list of numbers to their squared values
val numbers = List(1, 2, 3, 4, 5)
val squaredNumbers = numbers.map(square)

// use pattern matching to handle different cases
val result = youngPeople match {
  case head :: _ :: _ => "There are at least two young people in the list"
  case head :: Nil => "There is only one young person in the list"
  case _ => "There are no young people in the list"
}

// define an abstract superclass
abstract class Animal {
  def makeSound(): Unit
}

// create a subclass
class Dog extends Animal {
  override def makeSound(): Unit = println("Woof")
}

// create an instance of Dog and call its method
val dog = new Dog()
dog.makeSound()