// This class represents a binary tree with an 'Option' type of value
class BinaryTree[A](value: Option[A], left: Option[BinaryTree[A]], right: Option[BinaryTree[A]]) {

  // Method to add a new value to the binary tree
  def add(valueToAdd: A): BinaryTree[A] = {
    // Check if the current tree node has any value, if not, create a new node with the value
    if (value.isEmpty) {
      new BinaryTree(Some(valueToAdd), None, None)
    }
    else {
      // Check whether the value to be added is less than the current node's value
      // If so, add it to the left subtree
      if (value.get > valueToAdd) {
        new BinaryTree(value, left.map(_.add(valueToAdd)), right)
      }
      // If not, add it to the right subtree
      else {
        new BinaryTree(value, left, right.map(_.add(valueToAdd)))
      }
    }
  }
  
  // Method to check if a value is present in the binary tree
  def contains(valueToFind: A): Boolean = {
    // Check if the current node has the same value as the one being searched for
    if (value.contains(valueToFind)) {
      true
    }
    else {
      // Check whether the value to be searched for is less than the current node's value
      // If so, search in the left subtree
      if (value.get > valueToFind) {
        left match {
            case Some(node) => node.contains(valueToFind)
            case None => false
        }
      }
      // If not, search in the right subtree
      else {
        right match {
            case Some(node) => node.contains(valueToFind)
            case None => false
        }
      }
    }
  }
  
  // Method to remove a value from the binary tree
  def remove(valueToRemove: A): BinaryTree[A] = {
    // Check if the current node has the same value as the one being removed
    if (value.contains(valueToRemove)) {
      // If it does, remove the value and return the modified tree
      new BinaryTree(None, left, right)
    }
    else {
      // Check whether the value to be removed is less than the current node's value
      // If so, remove it from the left subtree
      if (value.get > valueToRemove) {
        new BinaryTree(value, left.map(_.remove(valueToRemove)), right)
      }
      // If not, remove it from the right subtree
      else {
        new BinaryTree(value, left, right.map(_.remove(valueToRemove)))
      }
    }
  }
  
  // Method to convert the binary tree to a list in ascending order
  def toList: List[A] = {
    // Use a helper function to recursively traverse the tree and add values to the list
    def addToList(tree: BinaryTree[A], currentList: List[A]): List[A] = {
      tree.value match {
          case Some(value) => addToList(tree.left.getOrElse(new BinaryTree(None, None, None)), value :: addToList(tree.right.getOrElse(new BinaryTree(None, None, None)), currentList))
          case None => currentList
      }
    }
    // Call the helper function with the current tree and an empty list
    addToList(this, List.empty).reverse
  }
  
  // Method to print the binary tree
  def printTree: Unit = {
    // Use a helper function to recursively print out the tree
    def printTreeHelper(tree: BinaryTree[A], space: Int): Unit = {
      // Print spaces according to the depth of the tree
      for (i <- 0 until space) {
        print(" ")
      }
      // Print the current node's value
      tree.value match {
          case Some(value) => println(value)
          case None => println(" ")
      }
      // Recursively call the helper function on the left subtree
      tree.left match {
          case Some(node) => printTreeHelper(node, space + 2)
          case None =>
      }
      // Recursively call the helper function on the right subtree
      tree.right match {
          case Some(node) => printTreeHelper(node, space + 2)
          case None =>
      }
    }
    // Call the helper function with the current tree and a starting space of 0
    printTreeHelper(this, 0)
  }

}

// Create an empty binary tree with an 'Option' of integers
val tree = new BinaryTree(None, None, None)

// Add values to the binary tree
val updatedTree = tree.add(5).add(3).add(7).add(1).add(4).add(6).add(9)

// Check if a value is present in the binary tree
println(updatedTree.contains(6)) // prints 'true'
println(updatedTree.contains(10)) // prints 'false'

// Remove a value from the binary tree
val modifiedTree = updatedTree.remove(5)

// Print the binary tree
modifiedTree.printTree 
// prints:
//     9
//   7
// 6
//  4
// 3
//   1

// Convert the binary tree to a list in ascending order
val list = modifiedTree.toList
println(list) // prints 'List(1, 3, 4, 6, 7, 9)'