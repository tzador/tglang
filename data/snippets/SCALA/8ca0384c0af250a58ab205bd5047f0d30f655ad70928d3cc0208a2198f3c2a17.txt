/**
 * This class represents a binary search tree.
 * @param T the type of data stored in the tree
 * @param ordering the implicit ordering used for comparisons
 */

class BinarySearchTree[T](implicit ordering: Ordering[T]) {

  // Inner Node class
  private class Node(var data: T , var leftChild: Node = null, var rightChild: Node = null)

  // Root node
  private var root: Node = null

  /**
   * Adds a new element to the tree.
   * If the element already exists in the tree, it will not be added.
   * @param elem the element to be added
   */
  def add(elem: T): Unit = {
    if (root == null) { // If there is no root, make new element the root
      root = new Node(elem)
    } else { // If there is a root, use recursive helper function
      addHelper(root, elem)
    }
  }

  /**
   * A recursive helper function for the add method.
   * @param node the current node being evaluated
   * @param elem the element to be added
   */
  private def addHelper(node: Node, elem: T): Unit = {
    // Check if element should be placed in left or right subtree
    if (ordering.compare(elem, node.data) < 0) { // If element is less than current node, go left
      if (node.leftChild == null) { // If there is no left child, add new node
        node.leftChild = new Node(elem)
      } else { // If there is a left child, use recursion on left subtree
        addHelper(node.leftChild, elem)
      }
    } else if (ordering.compare(elem, node.data) > 0) { // If element is greater than current node, go right
      if (node.rightChild == null) { // If there is no right child, add new node
        node.rightChild = new Node(elem)
      } else { // If there is a right child, use recursion on right subtree
        addHelper(node.rightChild, elem)
      }
    } else { // If element is already in tree, do nothing
      return
    }
  }

  /**
   * Checks if the given element is present in the tree.
   * @param elem the element to search for
   * @return true if element is present, false otherwise
   */
  def contains(elem: T): Boolean = {
    if (root == null) { // If there is no root, element is not in tree
      false
    } else { // If there is a root, use recursive helper function
      containsHelper(root, elem)
    }
  }

  /**
   * A recursive helper function for the contains method.
   * @param node the current node being evaluated
   * @param elem the element to search for
   * @return true if element is present, false otherwise
   */
  private def containsHelper(node: Node, elem: T): Boolean = {
    // Check if current node contains element
    if (node.data == elem) { // If current node is element, element is present
      true
    } else if (ordering.compare(elem, node.data) < 0) { // If element is less than current node, check left subtree
      if (node.leftChild == null) { // If there is no left subtree, element is not in tree
        false
      } else { // If there is a left subtree, use recursion
        containsHelper(node.leftChild, elem)
      }
    } else { // If element is greater than current node, check right subtree
      if (node.rightChild == null) { // If there is no right subtree, element is not in tree
        false
      } else { // If there is a right subtree, use recursion
        containsHelper(node.rightChild, elem)
      }
    }
  }
}