/* This code snippet demonstrates the use of higher-order functions and currying in Scala */
/* Define a higher-order function that takes in a function as a parameter and returns a new function */

def higherOrderFunction(func: (Int, Int) => Int): Int => Int = {
  /* The returned function takes in an integer and curries it with the given function */
  (x: Int) => func(x, 5)
}

/* Define a function to add two integers */
def add(x: Int, y: Int): Int = x + y

/* Use the higher-order function to create a new function that adds 5 to a given integer */
val addFive = higherOrderFunction(add)

/* Call the new function using the curried function syntax */
val result = addFive(10)

/* Print the result */
println(result) // Output: 15