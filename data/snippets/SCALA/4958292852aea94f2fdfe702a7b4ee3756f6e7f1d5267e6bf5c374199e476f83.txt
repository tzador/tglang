import scala.concurrent.{Await, Future}
import scala.concurrent.duration._
import scala.util.{Success, Failure}
import scala.concurrent.ExecutionContext.Implicits.global

case class Person(name: String, age: Int)

val names = List("John", "Jane", "Bob", "Linda", "Mike")

def getAge(name: String): Future[Option[Int]] = {
  Future {
    val randomTime = util.Random.nextInt(500)
    println(s"Getting age for $name. Sleeping for $randomTime")
    Thread.sleep(randomTime)
    if (name == "John" || name == "Jane") Some(30)
    else None
  }
}

def getInfo(person: Person): Future[String] = {
  getAge(person.name).map {
    case Some(age) => s"${person.name} is $age years old."
    case None => s"${person.name}'s age is unknown."
  }
}

val futures: List[Future[String]] = names.map(name => getInfo(Person(name, 0)))

val futureResult: Future[List[String]] = Future.sequence(futures)

val result = Await.result(futureResult, 2.seconds)

println(result.mkString("\n"))