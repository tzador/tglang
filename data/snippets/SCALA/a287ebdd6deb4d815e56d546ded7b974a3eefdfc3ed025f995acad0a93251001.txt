/**
* This is a class that represents a binary tree structure
*/
class BinaryTree[T](value: T, left: BinaryTree[T], right: BinaryTree[T]) {

  /**
  * Returns the size of the binary tree
  */
  def size: Int = {
    var count = 0
    var stack = List(this)
    while (stack.nonEmpty) {
      val curr = stack.head
      stack = stack.tail
      count += 1
      if (curr.left != null) {
        stack = curr.left :: stack
      }
      if (curr.right != null) {
        stack = curr.right :: stack
      }
    }
    count
  }

  /**
  * Returns a new binary tree with a given mapping function
  */
  def map[U](f: T => U): BinaryTree[U] = {
    def mapHelper(node: BinaryTree[T]): BinaryTree[U] = node match {
      case null => null
      case BinaryTree(newValue, left, right) => BinaryTree(f(newValue), mapHelper(left), mapHelper(right))
    }
    mapHelper(this)
  }

  /**
  * Returns the depth of the binary tree
  */
  def depth: Int = {
    def depthHelper(node: BinaryTree[T]): Int = node match {
      case null => 0
      case BinaryTree(_, left, right) => 1 + Math.max(depthHelper(left), depthHelper(right))
    }
    depthHelper(this)
  }

  /**
  * Returns whether this binary tree is equal to a given object
  */
  override def equals(obj: Any): Boolean = obj match {
    case that: BinaryTree[T] => this.value == that.value && this.left == that.left && this.right == that.right
    case _ => false
  }

  /**
  * Returns the in-order traversal of the binary tree as a list
  */
  def inOrder: List[T] = {
    var result = List[T]()
    def inOrderHelper(node: BinaryTree[T]): Unit = node match {
      case null =>
      case BinaryTree(value, left, right) =>
        inOrderHelper(left)
        result = result ++ List(value)
        inOrderHelper(right)
    }
    inOrderHelper(this)
    result
  }

  /**
  * Returns the post-order traversal of the binary tree as a list
  */
  def postOrder: List[T] = {
    var result = List[T]()
    def postOrderHelper(node: BinaryTree[T]): Unit = node match {
      case null =>
      case BinaryTree(value, left, right) =>
        postOrderHelper(left)
        postOrderHelper(right)
        result = result ++ List(value)
    }
    postOrderHelper(this)
    result
  }

  /**
  * Returns the pre-order traversal of the binary tree as a list
  */
  def preOrder: List[T] = {
    var result = List[T]()
    def preOrderHelper(node: BinaryTree[T]): Unit = node match {
      case null =>
      case BinaryTree(value, left, right) =>
        result = result ++ List(value)
        preOrderHelper(left)
        preOrderHelper(right)
    }
    preOrderHelper(this)
    result
  }
}