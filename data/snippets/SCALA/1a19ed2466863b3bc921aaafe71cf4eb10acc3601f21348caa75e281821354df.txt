// Define a trait called `Animal` with two abstract methods, `makeSound` and `eat`
trait Animal {
    def makeSound: Unit
    def eat: Unit
}

// Define a class `Dog` that extends `Animal` trait and implements the two methods
class Dog extends Animal {
    override def makeSound: Unit = {
        println("Woof!")
    }
    override def eat: Unit = {
        println("The dog is eating.")
    }
}

// Define a class `Cat` that extends `Animal` trait and implements the two methods
class Cat extends Animal {
    override def makeSound: Unit = {
        println("Meow!")
    }
    override def eat: Unit = {
        println("The cat is eating.")
    }
}

// Create an object of `Dog` class and call the `makeSound` and `eat` methods
val dog = new Dog()
dog.makeSound
dog.eat
// Output:
// Woof!
// The dog is eating.

// Create an object of `Cat` class and call the `makeSound` and `eat` methods
val cat = new Cat()
cat.makeSound
cat.eat
// Output:
// Meow!
// The cat is eating.