def primeFactors(n: Int): List[Int] = { //function declaration with parameter 'n' of type integer
    require(n > 1) //pre-condition to check if 'n' is greater than 1
    def primeFactorsRecursive(n: Int, ps: Stream[Int]): List[Int] = ps match { //function declaration with 2 parameters, a nested function to handle recursive calls
        case ph #:: pt if ph * ph > n => List(n) //pattern matching, if the square of current element in stream is greater than 'n', return a list with 'n'
        case ph #:: pt if n % ph == 0 => ph :: primeFactorsRecursive(n / ph, ps) //if 'n' is divisible by current element, return a list with current element and recursive call with updated value of 'n' and same stream
        case ph #:: pt => primeFactorsRecursive(n, pt) //if none of the above cases match, call recursive function with same value of 'n' and remaining stream
        case _ => throw new IllegalArgumentException() //if none of the above cases match, throw an exception
    }
    primeFactorsRecursive(n, primes) //call nested function with input value 'n' and a stream 'primes' which returns a list of prime factors
}