/** 
  * This is a complex code snippet in Scala.
  * It creates a function that checks if a number is a prime number and returns a Boolean value.
  * The function takes in an integer as its parameter.
  * It uses a for loop and if statement to check if there is any number between 2 and the given number that divides evenly.
  * If there is, then the number is not a prime number and the function returns false.
  * If not, the number is a prime number and the function returns true.
  */

def isPrime(num: Int): Boolean = {
    //initialize a variable to store the number of divisors
    var divisors = 0

    //loop from 2 to the given number
    for (i <- 2 to num) {

        //if the given number is divisible by the current value of i, increment the divisors variable
        if (num % i == 0) {
            divisors += 1
        }
    }

    //if the number of divisors is greater than 1, return false as the number is not a prime number
    if (divisors > 1) {
        return false
    }
    //else, return true as the number is a prime number
    else {
        return true
    }
}

//example usage
val num1 = 11
val isNum1Prime = isPrime(num1) //returns true since 11 is a prime number

val num2 = 15
val isNum2Prime = isPrime(num2) //returns false since 15 is not a prime number

//printing out the results
println(s"Is $num1 a prime number? $isNum1Prime")
println(s"Is $num2 a prime number? $isNum2Prime")

/* Output:
Is 11 a prime number? true
Is 15 a prime number? false
*/