/**
 * This is a class that represents a bookstore
 * It has properties for name, location, and inventory
 */
class Bookstore(name: String, location: String, inventory: Seq[Book]) {

  /**
   * Method to add a book to the inventory
   * @param book the book to be added
   */
  def addBook(book: Book): Bookstore = {
    new Bookstore(name, location, inventory :+ book)
  }

  /**
   * Method to remove a book from the inventory
   * @param book the book to be removed
   */
  def removeBook(book: Book): Bookstore = {
    new Bookstore(name, location, inventory.filterNot(_ == book))
  }
}

/**
 * This is a trait for a book
 * It has properties for title, author, and price
 */
trait Book {
  val title: String
  val author: String
  val price: Double
}

/**
 * This is a case class that represents a specific book
 * It implements the Book trait
 * @param title the title of the book
 * @param author the author of the book
 * @param price the price of the book
 */
case class SpecificBook(title: String, author: String, price: Double) extends Book

// Create an instance of a bookstore
val bookstore = new Bookstore("Best Books", "New York", Seq())

// Add two books to the inventory
val book1 = SpecificBook("Pride and Prejudice", "Jane Austen", 10.99)
val book2 = SpecificBook("To Kill a Mockingbird", "Harper Lee", 12.99)

bookstore.addBook(book1)
bookstore.addBook(book2)

// Remove book1 from the inventory
bookstore.removeBook(book1)

// Print the remaining books in the inventory
bookstore.inventory.foreach(book => println(s"Title: ${book.title}, Author: ${book.author}, Price: ${book.price}"))