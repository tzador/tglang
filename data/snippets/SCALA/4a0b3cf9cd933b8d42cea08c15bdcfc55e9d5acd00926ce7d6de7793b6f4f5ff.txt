/** class definition with generics and implicit parameters */
class ComplexNumber[T <% Ordered[T]](real: T, imaginary: T) {
  // fields with default values
  var r = real
  var i = imaginary
  
  // implicit conversion for arithmetic operations
  implicit def conv(num: T): ComplexNumber[T] = new ComplexNumber(num, num)
  
  // method for addition
  def +(other: ComplexNumber[T]): ComplexNumber[T] = new ComplexNumber(r + other.r, i + other.i)
  
  // method for subtraction
  def -(other: ComplexNumber[T]): ComplexNumber[T] = new ComplexNumber(r - other.r, i - other.i)
  
  // method for multiplication
  def *(other: ComplexNumber[T]): ComplexNumber[T] = new ComplexNumber(r * other.r - i * other.i, r * other.i + i * other.r)
  
  // method for division
  def /(other: ComplexNumber[T]): ComplexNumber[T] = {
    val divisor = (other.r * other.r) + (other.i * other.i)
    val newR = (r * other.r) + (i * other.i)
    val newI = (i * other.r) - (r * other.i)
    new ComplexNumber(newR / divisor, newI / divisor)
  }
  
  // method to check for equality
  def ===(other: ComplexNumber[T]): Boolean = (r == other.r) && (i == other.i)
  
}

// instantiate class with Integer type
val c1 = new ComplexNumber(2, 4)
val c2 = new ComplexNumber(3, 5)

// calculate c1 + c2 and print result
println(c1 + c2)

// calculate c1 - c2 and print result
println(c1 - c2)

// calculate c1 * c2 and print result
println(c1 * c2)

// calculate c1 / c2 and print result
println(c1 / c2)

// check for equality and print result
println(c1 === c2)