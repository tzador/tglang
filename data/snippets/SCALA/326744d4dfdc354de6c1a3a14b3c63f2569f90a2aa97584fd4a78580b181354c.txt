// This code snippet demonstrates the use of the 'Option' data type and higher-order functions in Scala

// 'Option' is a data type that represents a value that can be present or not
val someNum: Option[Int] = Some(5) // creates an Option with a value of 5
val noNum: Option[Int] = None // creates an Option with no value

// higher-order functions are functions that take other functions as arguments or return functions as their result

// 'map' is a higher-order function that applies a function to the value inside an Option and returns a new Option with the result
val squared: Option[Int] = someNum.map(x => x * x) // returns an Option with the squared value of someNum (25)

// 'flatMap' is similar to 'map' but it returns an Option by applying a function that returns an Option itself
val doubled: Option[Int] = someNum.flatMap(x => Some(x * 2)) // returns an Option with the doubled value of someNum (10)

// 'filter' is a higher-order function that returns an Option containing the value if it satisfies the specified condition, otherwise it returns None
val evenNum: Option[Int] = someNum.filter(x => x % 2 == 0) // returns None since 5 is not even

// 'fold' is a higher-order function that can be used to handle both cases of an Option (Some or None)
val sum: Int = someNum.fold(0)(x => x) // returns 5 since the Option contains a value, otherwise it would return 0

// 'getOrElse' is a higher-order function that returns the value inside an Option if it exists, otherwise it returns the specified default value
val value: Int = noNum.getOrElse(10) // returns 10 since the Option contains no value, otherwise it would return the default value of 10

// 'for' comprehension is a shorthand for nested 'map', 'flatMap' and 'filter' calls
val result: Option[Int] = for {
  num <- someNum
  doubled <- Some(num * 2)
  squared <- Some(doubled * doubled)
  if squared > 50
} yield squared // returns an Option with the value 100, the squared and filtered result of the 'for' comprehension