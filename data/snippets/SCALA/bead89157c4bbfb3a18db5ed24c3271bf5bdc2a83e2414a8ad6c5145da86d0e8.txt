// Declaring an abstract base class
abstract class Shape {
    // Abstract method to calculate area
    def area: Double

    // Non-abstract method to print shape name
    def printName(): Unit = println("Shape")

    // Method to calculate perimeter
    def perimeter: Double = {
        val unit = "meters"
        println(s"Calculating perimeter in $unit ...")
        0.0
    }
}

// Implementing a derived class
class Rectangle(length: Double, width: Double) extends Shape {
    // Overriding abstract method to calculate area
    override def area: Double = length * width

    // Overriding method to print shape name
    override def printName(): Unit = println("Rectangle")

    // Overriding method to calculate perimeter
    override def perimeter: Double = 2 * (length + width)
}

// Implementing another derived class
class Circle(radius: Double) extends Shape {
    // Overriding abstract method to calculate area
    override def area: Double = Math.PI * radius * radius

    // Overriding method to print shape name
    override def printName(): Unit = println("Circle")

    // Overriding method to calculate perimeter
    override def perimeter: Double = 2 * Math.PI * radius
}

// Creating an instance of the Rectangle class
val rect = new Rectangle(5.0, 3.0)

// Printing the name and area of the rectangle
println("Name: ")
rect.printName()
println("Area: " + rect.area + " meters squared")

// Creating an instance of the Circle class
val circle = new Circle(2.5)

// Printing the name and perimeter of the circle
println("Name: ")
circle.printName()
println("Perimeter: " + circle.perimeter + " meters")