// This is a comment in Scala

// Creating a function to calculate the area of a triangle
def triangleArea(base: Double, height: Double): Double = {
    val area = 0.5 * base * height // Calculating the area
    return area // Returning the area
}

// Defining a class for a rectangle
class Rectangle(width: Double, height: Double) {
    // Defining variables for the width and height
    val rectWidth: Double = width
    val rectHeight: Double = height

    // Creating a method to calculate the area of the rectangle
    def calcArea(): Double = {
        return rectWidth * rectHeight // Returning the area
    }

    // Creating a method to calculate the perimeter of the rectangle
    def calcPerimeter(): Double = {
        return 2 * (rectWidth + rectHeight) // Returning the perimeter
    }
}

// Creating an instance of the Rectangle class
val rectangle = new Rectangle(5, 10)

// Printing the area of the rectangle
println("Rectangle area: " + rectangle.calcArea())

// Printing the perimeter of the rectangle
println("Rectangle perimeter: " + rectangle.calcPerimeter())

// Creating an array of integers
val numbers = Array(1, 2, 3, 4, 5)

// Looping through the array and printing each element
for (number <- numbers) {
    println(number)
}

// Creating a map of fruits and their prices
val fruitPrices = Map("apple" -> 1.99, "banana" -> 0.99, "orange" -> 2.50)

// Checking if "apple" is in the map and printing its price
if (fruitPrices.contains("apple")) {
    println("Apple price: " + fruitPrices("apple"))
} else {
    println("Apple not found")
}

// Creating a variable to store the result of a match expression
val result = "Sunday" match {
    case "Monday" => "Start of the week"
    case "Tuesday" => "Second day of the week"
    case "Wednesday" => "Middle of the week"
    case "Thursday" => "Fourth day of the week"
    case "Friday" => "End of the week"
    case "Saturday" => "Weekend"
    case "Sunday" => "Last day of the week"
    case _ => "Invalid day"
}

// Printing the result of the match expression
println(result)

// Creating a higher-order function to apply a function to a list of integers
def applyFunction(numbers: List[Int], func: Int => Int): List[Int] = {
    return numbers.map(func) // Applying the function to the list
}

// Defining a function to square a number
def square(num: Int): Int = {
    return num * num // Squaring the number
}

// Applying the square function to the list of numbers
val squaredNumbers = applyFunction(List(1, 2, 3, 4, 5), square)

// Printing the squared numbers
println("Squared numbers: " + squaredNumbers)