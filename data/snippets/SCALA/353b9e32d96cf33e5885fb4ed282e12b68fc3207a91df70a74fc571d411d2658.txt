/** 
 * This is a multiline 
 *comment in SCALA. 
 *It is used to provide explanations 
 *about the code.
*/

// This is a single line comment in SCALA.

// Declare and initialize a variable of type String
val programmingLanguage = "SCALA"

// Create a class with a constructor that takes in two parameters
class Person(var name: String, var age: Int)

// Create a function that calculates the square of a number
def square(num: Int): Int = {
  num * num
}

// Create a case class which represents a book with three properties
case class Book(title: String, author: String, year: Int)

// Define a list of books
val bookList = List(
  Book("The Great Gatsby", "F. Scott Fitzgerald", 1925),
  Book("Pride and Prejudice", "Jane Austen", 1813),
  Book("To Kill a Mockingbird", "Harper Lee", 1960)
)

// Use pattern matching to print out the titles of all books published before 1900
bookList.foreach { 
  case Book(title, _, year) if year < 1900 => println(title)
}

// Create an immutable map of programming languages and their creators
val programmingLanguages = Map(
  "SCALA" -> "Martin Odersky",
  "Java" -> "James Gosling",
  "Python" -> "Guido van Rossum"
)

// Use a for loop to print out all programming languages with their creators
for ((language, creator) <- programmingLanguages) {
  println(s"$creator created $language.")
}