/**
 * This class represents a binary tree node.
 *
 * @param data the data stored in the node
 * @param leftChild the left child of the node
 * @param rightChild the right child of the node
 */
case class Node[+T](data: T, leftChild: Option[Node[T]], rightChild: Option[Node[T]]) {

  /**
   * This method applies the given function to the data stored in the node
   * and returns a new node with the transformed data.
   *
   * @param f the function to be applied
   * @tparam U the type of the new node data
   * @return the new node with the transformed data
   */
  def map[U](f: T => U): Node[U] = Node[U](f(data), leftChild.map(_.map(f)), rightChild.map(_.map(f)))

  /**
   * This method applies the given function to the data stored in the node
   * and returns a new node with the transformed data, and the first node
   * in the path through the tree that satisfies the predicate.
   *
   * @param f the function to be applied
   * @param isFirst a boolean indicating whether this is the first node in the path
   * @tparam U the type of the new node data
   * @return the new node with the transformed data and the first node in the path
   */
  def flatMap[U](f: T => (U, Node[T]))(implicit isFirst: Boolean = true): (Node[U], Option[Node[T]]) = {
    val mapped = f(data)
    val newLeft = leftChild.flatMap(_.flatMap(f)(isFirst = false))
    val newRight = rightChild.flatMap(_.flatMap(f)(isFirst = false))
    (Node[U](mapped._1, newLeft.map(_._2), newRight.map(_._2)), if (isFirst) Some(this) else None)
  }
}