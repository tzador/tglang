// Define a case class `Person` with `name`, `age`, `gender` fields
case class Person(name: String, age: Int, gender: String)
// Define a list of `Person` objects
val personList = List(
    Person("John", 28, "Male"),
    Person("Jane", 30, "Female"),
    Person("Bob", 35, "Male")
)
// Define a function `getOldest` that returns the `Person` with the highest age from a given list of `Person` objects
def getOldest(people: List[Person]): Person = {
    // Use pattern matching to handle empty lists
    // If the list is not empty, sort the people by age in descending order
    // and return the first element, which will be the oldest person
    people match {
        case Nil => throw new Exception("List is empty")
        case _ => people.sortBy(_.age)(Ordering[Int].reverse).head
    }
}
// Call the `getOldest` function on our `personList` and print the result
println(getOldest(personList))