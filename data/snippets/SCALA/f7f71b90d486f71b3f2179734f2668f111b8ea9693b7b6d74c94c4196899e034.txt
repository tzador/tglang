// Define an abstract class Vehicle with two properties: make and model
abstract class Vehicle(val make: String, val model: String) 

// Define a case class for a car with an additional property: year
case class Car(make: String, model: String, year: Int) extends Vehicle(make, model) 

// Define a case class for a truck with an additional property: capacity
case class Truck(make: String, model: String, capacity: Int) extends Vehicle(make, model)

// Create a list of vehicles
val vehicles = List(
    Car("Toyota", "Camry", 2015),
    Car("Honda", "Civic", 2010),
    Truck("Ford", "F-150", 2008, 3000),
    Truck("Chevrolet", "Silverado", 2018, 5000)
)

// Use pattern matching to filter the list for only cars
val cars = vehicles.collect {
    case car: Car => car
}

// Use higher-order functions to calculate the average year of the cars in the list
val averageYear = cars.map(_.year).sum / cars.length

// Print out the average year of the cars in the list
println(s"The average year of the cars is $averageYear")