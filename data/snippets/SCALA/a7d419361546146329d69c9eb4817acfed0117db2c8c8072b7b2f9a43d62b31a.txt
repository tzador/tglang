// This class represents a node in a binary tree
// with left and right children and a value of type T
class Node[T](val left: Option[Node[T]], val right: Option[Node[T]], val value: T) {
  // Function to insert a new node with the given value
  def insert(newValue: T): Node[T] = {
    if (newValue < value) {
      left match {
        case Some(l) => new Node(l.insert(newValue), right, value)
        case None => new Node(Some(new Node(None, None, newValue)), right, value)
      }
    } else {
      right match {
        case Some(r) => new Node(left, r.insert(newValue), value)
        case None => new Node(left, Some(new Node(None, None, newValue)), value)
      }
    }
  }
  // Function to convert the binary tree to a string representation
  override def toString: String = {
    val leftString = left match {
      case Some(l) => l.toString
      case None => ""
    }
    val rightString = right match {
      case Some(r) => r.toString
      case None => ""
    }
    s"$leftString $value $rightString"
  }
}
// Example usage:
// Create a binary tree with integer values
val tree = new Node[Int](None, None, 10)
// Insert new nodes
val newTree = tree.insert(5).insert(15).insert(7).insert(12)
// Print string representation of the tree
println(newTree.toString())