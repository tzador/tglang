//sorts a list of integers using merge sort algorithm

object MergeSort {

  //a function to merge two sorted lists into one sorted list
  def merge(list1: List[Int], list2: List[Int]): List[Int] = (list1, list2) match {
    case (a, Nil) => a
    case (Nil, b) => b
    case (x :: xs, y :: ys) =>
      if (x < y) x :: merge(xs, list2)
      else y :: merge(list1, ys)
  }

  //the actual merge sort function
  def mergeSort(list: List[Int]): List[Int] = {
    val middle = list.length / 2
    if (middle == 0) list //if the list contains only one element, then it is already sorted
    else {
      val (left, right) = list.splitAt(middle) //split the list into two halves
      merge(mergeSort(left), mergeSort(right)) //merge the sorted halves
    }
  }

  def main(args: Array[String]): Unit = {
    val list = List(8, 4, 2, 6, 1, 7, 5, 9, 3) //input list to be sorted
    val sortedList = mergeSort(list) //call the mergeSort function
    println(sortedList) //print the sorted list
  }
}