import akka.actor._

/** The MyActor class is a subclass of the Actor trait, which provides the receive method.
  * This method is the main functionality of the actor.
  * The actor's behavior is defined by matching incoming messages with case statements.
  * Each case statement specifies the type of message and the corresponding action to take. */
class MyActor extends Actor {
  
  /** The receive method takes in a 'message: Any' and returns 'Unit'.
    * This corresponds to the type of message the actor receives and does not return any value. */
  def receive: Receive = {
    
    /** The case statement 'case "hello" =>' specifies that if the actor receives a message of type String with the value "hello",
      * it will print "Hello World!" to the console. */
    case "hello" => println("Hello World!")
    
    /** The case statement 'case x: Int =>' specifies that if the actor receives a message of type Int,
      * it will print "Received Int: " and the value of the message to the console. */
    case x: Int => println("Received Int: " + x)
    
    /** The case statement 'case ActorRef =>' specifies that if the actor receives a message of type ActorRef,
      * it will print "Received ActorRef: " and the reference of the actor to the console. */
    case ActorRef => println("Received ActorRef: " + self)
    
    /** The case statement 'case GetCount =>' specifies that if the actor receives a message of type GetCount,
      * it will call the getCount method and print the result to the console. */
    case GetCount => println("Current Count: " + getCount())
    
    /** The case statement 'case _ =>' specifies a default action for any other type of message the actor receives.
      * In this case, it will print "Unknown message received" to the console. */
    case _ => println("Unknown message received")
  }
  
  /** The getCount method returns the current count of the actor.
    * This is an example of adding custom methods to an actor. */
  def getCount(): Int = {
    // Code to get the current count
    return 0
  }
}

/** The StartActor class is a singleton object, which serves as the entry point for running the actor system.
  * It defines the actor system, creates an instance of the MyActor class, and sends it messages to test its behavior. */
object StartActor extends App {
  // Create the actor system
  val actorSystem = ActorSystem("MyActorSystem")
  
  // Create an instance of the MyActor class
  val myActor = actorSystem.actorOf(Props[MyActor], "myActor")
  
  // Send messages to the actor
  myActor ! "hello" // Prints "Hello World!"
  myActor ! 5 // Prints "Received Int: 5"
  
  /** This code snippet creates a class called 'ActorRef', which is a reference to an actor.
    * It also creates a case class called 'GetCount' to be used as a message type. */
  case class ActorRef()
  case class GetCount()
  
  // Send messages of type ActorRef and GetCount to the actor
  myActor ! ActorRef // Prints "Received ActorRef: Actor[akka://MyActorSystem/user/myActor#-1258448590]"
  myActor ! GetCount // Calls the getCount method and prints "Current Count: 0"
}