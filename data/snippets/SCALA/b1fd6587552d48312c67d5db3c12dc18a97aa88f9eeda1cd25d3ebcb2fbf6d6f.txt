/**
* This is a function that takes in a list of integers and returns the median value
* @param list the list of integers
* @return the median value
**/
def findMedian(list: List[Int]): Int = {
  /**
  * Recursive helper function that returns the middle element of the list
  * @param left the left index of the list
  * @param right the right index of the list
  * @return the middle element of the list
  **/
  def medianHelper(left: Int, right: Int): Int = {
    val pivotIndex: Int = (left + right) / 2
    val pivotValue: Int = list(pivotIndex)
    var smaller: Int = left
    var larger: Int = right

    //move elements smaller than pivot value to the left and elements larger to the right
    while (smaller <= larger) {
      while (list(smaller) < pivotValue) {
        smaller += 1
      }
      while (list(larger) > pivotValue) {
        larger -= 1
      }
      if (smaller <= larger) {
        //swap elements
        val temp: Int = list(smaller)
        list(smaller) = list(larger)
        list(larger) = temp
        smaller += 1
        larger -= 1
      }
    }
    //if the list is even, return the average of the two middle elements
    if (list.length % 2 == 0) {
      (list(pivotIndex) + list(larger + 1)) / 2
    } else {
      list(larger + 1)
    }
  }

  medianHelper(0, list.length - 1)
}