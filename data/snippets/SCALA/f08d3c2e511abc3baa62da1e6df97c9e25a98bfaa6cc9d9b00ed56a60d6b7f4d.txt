// Define case classes to model data
case class Student(name: String, age: Int, courses: Seq[String])
case class Course(name: String, professor: String)

// Create a list of students
val students = List(
  Student("John", 20, Seq("Math", "Biology", "English")),
  Student("Sarah", 22, Seq("Chemistry", "Psychology", "History")),
  Student("Mark", 21, Seq("Economics", "Sociology", "Literature"))
)

// Create a list of courses
val courses = List(
  Course("Math", "Dr. Smith"),
  Course("Biology", "Dr. Watson"),
  Course("English", "Dr. Jones"),
  Course("Chemistry", "Dr. Brown"),
  Course("Psychology", "Dr. Davis"),
  Course("History", "Dr. Wilson"),
  Course("Economics", "Dr. Lopez"),
  Course("Sociology", "Dr. Garcia"),
  Course("Literature", "Dr. Lee")
)

// Create a function to find the course with the longest name
def longestCourseName(courses: List[Course]): String = {
  // Initialize a variable to store the longest course name
  var longest = ""
  // Loop through the list of courses
  for(course <- courses) {
    // If the current course name is longer than the current longest, update the longest variable
    if(course.name.length > longest.length) {
      longest = course.name
    }
  }
  // Return the longest course name
  longest
}

// Create a function to map students to their favorite courses
def getFavoriteCourses(students: List[Student], courses: List[Course]): Map[String, String] = {
  // Initialize an empty map to store student names and their favorite courses
  var favorites = Map[String, String]()
  // Loop through the list of students
  for(student <- students) {
    // Add the student name and their first course from the courses list to the favorites map
    favorites += (student.name -> student.courses.head)
  }
  // Return the favorites map
  favorites
}

// Create a function to filter courses based on the professor's name
def filterCoursesByProfessor(courses: List[Course], professorName: String): List[Course] = {
  // Initialize an empty list to store the filtered courses
  var filteredCourses = List[Course]()
  // Loop through the list of courses
  for(course <- courses) {
    // If the professor's name matches the given name, add the course to the filtered list
    if(course.professor == professorName) {
      filteredCourses = course :: filteredCourses
    }
  }
  // Return the filtered courses list
  filteredCourses
}

// Create a function to combine two lists of courses and remove duplicates
def combineAndRemoveDuplicates(courses1: List[Course], courses2: List[Course]): List[Course] = {
  // Combine the two lists of courses using the "++" operator
  val combined = courses1 ++ courses2
  // Remove duplicates using the "distinct" method
  val distinct = combined.distinct
  // Return the list of combined and distinct courses
  distinct
}

// Call the functions and print the output
println("Longest course name: " + longestCourseName(courses))
println("Student favorite courses: " + getFavoriteCourses(students, courses))
println("Courses taught by Dr. Smith: " + filterCoursesByProfessor(courses, "Dr. Smith"))
println("Combined and distinct courses: " + combineAndRemoveDuplicates(courses, courses))