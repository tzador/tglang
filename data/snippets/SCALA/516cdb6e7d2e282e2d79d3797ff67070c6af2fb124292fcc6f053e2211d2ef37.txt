//This code snippet creates a class for a restaurant

class Restaurant(name: String, cuisine: String, capacity: Int) {

  //private variables
  private var _seatsRemaining: Int = capacity
  private var _reservations: Map[String, Int] = Map()

  //getters
  def seatsRemaining: Int = _seatsRemaining
  def reservations: Map[String, Int] = _reservations

  //method to make a reservation
  def makeReservation(name: String, partySize: Int): Boolean = {
    if (_seatsRemaining >= partySize) { //checks if there are enough seats available
      _seatsRemaining -= partySize //updates seatsRemaining
      _reservations += (name -> partySize) //adds reservation to mapping
      true
    } else {
      false
    }
  }

  //method to cancel a reservation
  def cancelReservation(name: String): Boolean = {
    if (_reservations.contains(name)) { //checks if name is in reservations map
      val partySize = _reservations(name) //gets party size from mapping
      _seatsRemaining += partySize //updates seatsRemaining
      _reservations -= name //removes reservation from mapping
      true
    } else {
      false
    }
  }

  //method to print information about the restaurant
  override def toString: String = {
    s"Restaurant Name: $name, Cuisine: $cuisine, Capacity: $capacity, Seats Remaining: $seatsRemaining," +
      s" Current Reservations: ${reservations.mkString(",")}"
  }
}

//example usage
val myRestaurant = new Restaurant("Delicious Diner", "American", 50)
myRestaurant.makeReservation("John Smith", 4) //true
myRestaurant.makeReservation("Jane Doe", 10) //true
myRestaurant.makeReservation("Joe Bloggs", 20) //false - not enough seats
myRestaurant.cancelReservation("John Smith") //true
println(myRestaurant) //Restaurant Name: Delicious Diner, Cuisine: American, Capacity: 50, Seats Remaining: 46,
                      //Current Reservations: (Jane Doe,10)