/** * Functional Programming with Scala * This code snippet demonstrates how to use functional programming concepts in Scala * * Following are the imports required for the code snippet */ import scala.util.Try import scala.concurrent.Future import scala.concurrent.ExecutionContext.Implicits.global import scala.util.Random /** * A case class representing a student with attributes name, age and gpa */ case class Student(name: String, age: Int, gpa: Double) { /** * Returns the student's name with prefix "Mr." */ def getPrefixedName(): String = s"Mr. $name" /** * Returns a new student object with age increased by 1 */ def increaseAge(): Student = this.copy(age = age + 1) } /** * A trait for comparing objects based on a specific attribute */ trait Comparable[T] { /** * Compares two objects and returns an Int based on the comparison * @param obj1 first object to compare * @param obj2 second object to compare * @return Int representing the comparison result */ def compare(obj1: T, obj2: T): Int } /** * An implementation of Comparable trait for comparing students based on their gpa */ object StudentGpaComparator extends Comparable[Student] { /** * Compares two students based on their gpa * @param student1 first student to compare * @param student2 second student to compare * @return Int representing the comparison result */ def compare(student1: Student, student2: Student): Int = { if (student1.gpa == student2.gpa) 0 else if (student1.gpa > student2.gpa) 1 else -1 } } /** * An example usage of functional programming in Scala * * Creates a list of 10 random students with names and ages, and sorts them based on their gpa using the StudentGpaComparator * Then, prints the names of the top 3 students based on their sorted gpa */ object Main { def main(args: Array[String]) { // Create a list of 10 random students with names and ages val studentsList = List.tabulate(10)(n => Student(s"Student${n+1}", Random.nextInt(25), Try(Random.nextDouble()).getOrElse(1.0))) // Sort the students based on their gpa val sortedStudents = studentsList.sortWith((s1, s2) => StudentGpaComparator.compare(s1, s2) > 0) // Print the names of the top 3 students based on their sorted gpa println(sortedStudents.take(3).map(s => s.getPrefixedName()).mkString(", ")) } }