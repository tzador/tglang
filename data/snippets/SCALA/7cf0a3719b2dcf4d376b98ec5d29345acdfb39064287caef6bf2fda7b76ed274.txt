//Defining a case class
case class Person(name: String, age: Int)

//Creating an object of case class
val john = Person("John", 28)

//Using pattern matching to access object fields
john match {
  case Person(name, age) => println(s"$name is $age years old.")
  case _ => println("Invalid person object.")
}

//Creating a list of tuples
val animals = List(("cat", 4), ("dog", 4), ("bird", 2), ("snake", 0))

//Using map and filter to manipulate data
val numOfLegs = animals.map(x => (x._1, x._2 * 2)).filter(_._2 >= 4)

//Printing the modified list
println(numOfLegs)

//Defining a higher order function to return a function
def mathFunc(x: Int, y: Int, func: (Int, Int) => Int): Int = {
  func(x, y)
}

//Defining a function to add two numbers
def add(x: Int, y: Int): Int = {
  x + y
}

//Using the higher order function to add two numbers
val result = mathFunc(4, 5, add)

//Printing the result
println(result)

//Creating a lazy stream to generate Fibonacci series
lazy val fibs: Stream[Int] = 0 #:: 1 #:: fibs.zip(fibs.tail).map(p => p._1 + p._2)

//Printing the first 10 numbers in the Fibonacci series
println(fibs.take(10).toList)