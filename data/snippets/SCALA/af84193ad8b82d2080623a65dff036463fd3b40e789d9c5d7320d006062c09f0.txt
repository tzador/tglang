// This is an annotated code snippet written in Scala
// It defines a function named "fibonacci" which takes in an integer "n" as parameter
// and returns the nth number in the Fibonacci sequence

def fibonacci(n: Int): Long = { // Defines a function named "fibonacci" which takes in an integer "n" as parameter and returns a Long value
  require(n > 0, "n must be a positive integer") // Throws an exception if n is not a positive integer
  var previous = 0L // Initializes a variable "previous" with a Long value of 0
  var current = 1L // Initializes a variable "current" with a Long value of 1
  var i = 1 // Initializes a variable "i"

  while (i < n) { // Executes the code block until i is less than n
    val temp = current // Initializes a variable "temp" with the value of "current"
    current = previous + current // Assigns "current" to the sum of "previous" and "current"
    previous = temp // Assigns "temp" to "previous"
    i = i + 1 // Increments the value of i by 1
  }

  current // Returns the value of "current", which is the nth number in the Fibonacci sequence
}

// Example usage
val result = fibonacci(10) // Calls the "fibonacci" function with a parameter value of 10 and assigns the return value to a variable "result"
println(result) // Prints the value of "result" to the console