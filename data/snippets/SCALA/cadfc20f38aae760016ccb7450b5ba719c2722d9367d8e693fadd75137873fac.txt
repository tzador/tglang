// This code snippet implements a binary search tree data structure
// Data structure will support insert, delete, search, and print operations
// Node class defines the structure of a single node in the tree
class Node(var value: Int, var left: Option[Node], var right: Option[Node])

// BST class defines the binary search tree and its operations
class BST {
  private var root: Option[Node] = None // Root node of the tree

  // Insert a new node into the tree
  def insert(value: Int): Unit = {

    // Recursive function to insert a node into the tree
    def insertHelper(node: Option[Node], value: Int): Option[Node] = {
      node match {
        // If given node is None, create a new node and return
        case None => Some(new Node(value, None, None))
        // If value is less than current node value, insert into left subtree
        case Some(n) if value < n.value => n.left = insertHelper(n.left, value)
        // If value is greater than current node value, insert into right subtree
        case Some(n) if value > n.value => n.right = insertHelper(n.right, value)
        // Value already exists in the tree, return the tree
        case _ => node
      }
    }

    // Call the helper function to insert the node
    root = insertHelper(root, value)
  }

  // Delete a node from the tree
  def delete(value: Int): Unit = {

    // Recursive function to delete a node from the tree
    def deleteHelper(node: Option[Node], value: Int): Option[Node] = {
      node match {
        // If given node is None, return None since value doesn't exist in the tree
        case None => None
        // If value is less than current node value, delete from left subtree
        case Some(n) if value < n.value => n.left = deleteHelper(n.left, value)
        // If value is greater than current node value, delete from right subtree
        case Some(n) if value > n.value => n.right = deleteHelper(n.right, value)
        // Value is found, now delete the node
        case Some(n) if value == n.value => deleteNode(n)
        // If value is equal to current node value, delete the node and return its new root
        case _ => node
      }
    }

    // Function to aid in deleting the node
    def deleteNode(node: Node): Option[Node] = {
      // Case 1: If node has no children, just delete it
      if (node.left.isEmpty && node.right.isEmpty) {
        None
      }
      // Case 2: If node has only one child, replace it with its child
      else if (node.left.isEmpty) {
        node.right
      }
      else if (node.right.isEmpty) {
        node.left
      }
      // Case 3: If node has two children, find inorder succesor and replace it with node to be deleted
      else {
        node.left match {
          // If node has left child, find the inorder successor by going as far right as possible
          case Some(l) => {
            // Function to find the inorder successor (smallest value in right subtree)
            def findSuccessor(node: Option[Node]): Node = {
              node match {
                case Some(n) if n.right.isDefined => findSuccessor(node.right)
                case Some(n) => n
              }
            }

            // Delete the inorder successor from its original place
            val successor = findSuccessor(node.right)
            delete(successor.value)

            // Replace the value of deleted node with inorder successor's value
            node.value = successor.value
            node // Return updated node
          }
        }
      }
    }

    // Call the helper function to delete the node
    root = deleteHelper(root, value)
  }

  // Search a value in the tree
  def search(value: Int): Option[Node] = {

    // Recursive function to search for a value in the tree
    def searchHelper(node: Option[Node], value: Int): Option[Node] = {
      // If given node is None, value does not exist in the tree
      if (node.isEmpty)
        None
      // If value is less than current node value, search in left subtree
      else if (value < node.get.value)
        searchHelper(node.get.left, value)
      // If value is greater than current node value, search in right subtree
      else if (value > node.get.value)
        searchHelper(node.get.right, value)
      // If value is equal to current node value, return the node
      else
        node
    }

    // Call the helper function to search for the value
    searchHelper(root, value)
  }

  // Print the tree in-order (left, root, right)
  def printInOrder(): Unit = {

    // Recursive function to traverse the tree in-order
    def printInOrderHelper(node: Option[Node]): Unit = {
      node match {
        case Some(n) => {
          printInOrderHelper(n.left)
          print(n.value + " ")
          printInOrderHelper(n.right)
        }
        case None => Unit // Ignore the empty nodes
      }
    }

    // Call the helper function to print the tree in-order
    printInOrderHelper(root)
    println() // Add a new line after printing the tree
  }
}

// Sample code to create a binary search tree and test its operations
object Main extends App {
  val bst = new BST() // Create a new binary search tree

  // Insert some values into the tree
  bst.insert(5)
  bst.insert(2)
  bst.insert(8)
  bst.insert(1)
  bst.insert(4)
  bst.insert(6)
  bst.insert(7)
  bst.insert(3)

  // Print the tree in-order
  bst.printInOrder() // Output: 1 2 3 4 5 6 7 8

  // Delete a node from the tree
  bst.delete(4)

  // Print the tree in-order after deleting a node
  bst.printInOrder() // Output: 1 2 3 5 6 7 8

  // Search for a value in the tree
  val result = bst.search(8)
  result match {
    case Some(n) => println(n.value + " was found in the tree") // Output: 8 was found in the tree
    case None => println("Value was not found in the tree") // Output: Value was not found in the tree
  }
}