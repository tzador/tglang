// Define an abstract class Shape
abstract class Shape {
  // Define an abstract method to compute perimeter
  def perimeter: Double

  // Define an abstract method to compute area
  def area: Double
}

// Define a trait Color with a default value of "red"
trait Color {
  val color: String = "red"
}

// Define a class Circle that extends Shape and mixes in the Color trait
class Circle(val radius: Double) extends Shape with Color {
  // Define perimeter method for Circle, using radius to calculate
  def perimeter: Double = 2 * math.Pi * radius

  // Define area method for Circle, using radius to calculate
  def area: Double = math.Pi * radius * radius
}

// Define a class Rectangle that extends Shape and mixes in the Color trait
class Rectangle(val length: Double, val width: Double) extends Shape with Color {
  // Define perimeter method for Rectangle, using length and width to calculate
  def perimeter: Double = 2 * (length + width)

  // Define area method for Rectangle, using length and width to calculate
  def area: Double = length * width
}

// Define a method to compute the total area of a list of shapes
def totalArea(shapes: List[Shape]): Double =
  // Use a fold left to sum up the areas of each shape in the list
  shapes.foldLeft(0.0)((acc, shape) => acc + shape.area)

// Create a list of shapes, including a Circle and Rectangle
val shapes = List(new Circle(5), new Rectangle(4, 6))

// Print the total area of the shapes in the list, using the totalArea method
println(s"The total area of the shapes is ${totalArea(shapes)}")