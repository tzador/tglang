// This code snippet generates a list of Fibonacci numbers up to a specific limit
// The output will be in the form of a list of integers

// Define a function called 'generateFibonacci' that takes a limit as input
def generateFibonacci(limit: Int): List[Int] = {
    // Create an empty list to store the Fibonacci numbers
    var fibonacciList: List[Int] = List.empty

    // Define two variables to keep track of the previous two numbers in the sequence
    // Start with the first two Fibonacci numbers, 0 and 1
    var current = 0
    var next = 1

    // Loop until the limit is reached
    while (current < limit) {
        // Add the current number to the list
        fibonacciList = fibonacciList :+ current

        // Calculate the next number in the sequence by adding the previous two numbers
        val temp = current + next

        // Update the previous two numbers
        current = next
        next = temp
    }

    // Return the list of Fibonacci numbers
    fibonacciList
}

// Call the function with a limit of 100 and store the output in a variable called 'fibonacciList'
var fibonacciList = generateFibonacci(100)

// Print the output (list of Fibonacci numbers)
println(fibonacciList)

// Output:
// List(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)