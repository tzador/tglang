import scala.collection.immutable.HashMap
import scala.util.Random

// create a function that generates a random sentence
def generateSentence(sentenceLength: Int): Unit = {
  // define an array of words to choose from
  val words = Array("The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog.")

  // create an empty HashMap to store word frequencies
  var wordFreq: HashMap[String, Int] = HashMap[String, Int]()

  // loop through the words array and randomly select words to add to the sentence
  for (i <- 0 until sentenceLength) {
    // randomly select a word from the array
    val selectedWord = words(Random.nextInt(words.length))

    // check if the word is already in the HashMap
    if (wordFreq.contains(selectedWord)) {
      // if it is, increment its frequency by 1
      wordFreq += (selectedWord -> (wordFreq(selectedWord) + 1))
    } else {
      // if it is not, add the word to the HashMap with a frequency of 1
      wordFreq += (selectedWord -> 1)
    }
  }

  // create an empty string to store the sentence
  var sentence: String = ""

  // loop through the HashMap and add the words to the sentence in the order of their frequencies
  for ((word, freq) <- wordFreq.toSeq.sortBy(-_._2)) {
    sentence += (word + " ")
  }

  // print out the final sentence
  println(sentence)
}

// call the generateSentence function with a sentence length of 10
generateSentence(10)