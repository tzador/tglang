// Define a trait for a class that can be ordered
trait Ordered[A] {
  def compare(that: A): Int  // Abstract method for comparing objects of type A

  // Define a method for checking if the object is greater than another
  def >(that: A): Boolean = (this.compare(that) > 0)

  // Define a method for checking if the object is less than or equal to another
  def <=(that: A): Boolean = (this.compare(that) <= 0)

  // Define a method for checking if the object is greater than or equal to another
  def >=(that: A): Boolean = (this.compare(that) >= 0)

  // Define a method for checking if the object is less than another
  def <(that: A): Boolean = (this.compare(that) < 0)

  // Define a method for checking if the object is equal to another
  def ==(that: A): Boolean = (this.compare(that) == 0)
}

// Define a class that implements the Ordered trait
class Person(name: String, age: Int) extends Ordered[Person] {
  
  // Implement the compare method for comparing two Person objects
  override def compare(that: Person): Int = {
    if (this.name == that.name) {  // Compare names first
      this.age - that.age  // Then compare ages if names are equal
    } else {
      this.name.compareTo(that.name)  // Otherwise, compare names alphabetically
    }
  }
}

// Create two Person objects for testing the compare method
val person1 = new Person("John", 25)
val person2 = new Person("Jane", 30)

// Test the comparison methods
println("Is person1 greater than person2? " + (person1 > person2))  // Output: false
println("Is person1 less than or equal to person2? " + (person1 <= person2))  // Output: true
println("Is person1 greater than or equal to person2? " + (person1 >= person2))  // Output: false
println("Is person1 less than person2? " + (person1 < person2))  // Output: true
println("Is person1 equal to person2? " + (person1 == person2))  // Output: false