/**
 * An abstract class representing a Person
 */
abstract class Person(age: Int, name: String) {
  // A method to get the person's age
  def getAge(): Int = {
    return age
  }

  // A method to get the person's name
  def getName(): String = {
    return name
  }

  // An abstract method to greet the person
  def greet(): Unit
}

// A class representing a Student, which extends the Person class
class Student(age: Int, name: String, major: String) extends Person(age, name) {
  // A method to get the student's major
  def getMajor(): String = {
    return major
  }

  // An implementation of the greet() method for a student
  def greet(): Unit = {
    println("Hello, my name is " + name + " and I am a student majoring in " + major + ".")
  }
}

// A class representing a Teacher, which extends the Person class
class Teacher(age: Int, name: String, subject: String) extends Person(age, name) {
  // A method to get the teacher's subject
  def getSubject(): String = {
    return subject
  }

  // An implementation of the greet() method for a teacher
  def greet(): Unit = {
    println("Hello, my name is " + name + " and I am a teacher who teaches " + subject + ".")
  }
}

// Create a new Student object
val student = new Student(21, "John", "Computer Science")

// Create a new Teacher object
val teacher = new Teacher(35, "Mrs. Smith", "Math")

// Call the greet() method for both the student and teacher objects
student.greet()
teacher.greet()