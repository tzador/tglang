// Define a case class with parameters
case class Person(firstName: String, lastName: String, age: Int, occupation: String)

// Create a list of Person objects
val peopleList = List(
  Person("John", "Smith", 30, "Engineer"),
  Person("Mary", "Johnson", 25, "Teacher"),
  Person("Alex", "Brown", 40, "Manager"),
  Person("Emily", "Wilson", 35, "Doctor")
)

// Create a map of Person objects with their last names as keys
val peopleMap = peopleList.map(person => person.lastName -> person).toMap

// Create a function that checks if a person is over 30 years old
def isOver30(person: Person) : Boolean = {
  person.age > 30
}

// Filter the list of Person objects based on the isOver30 function
val over30 = peopleList.filter(isOver30)

// Sort the list of Person objects in ascending order by age
val sortedPeopleList = peopleList.sortBy(_.age)

// Calculate the total number of people in the list
val totalPeople = peopleList.length

// Print out the occupation of each person in the list
peopleList.foreach(person => println(person.occupation))

// Use pattern matching to match on the occupation of the first person in the list
peopleList.head match {
  case Person(_, _, _, "Engineer") => println("The first person in the list is an engineer.")
  case _ => println("The first person in the list is not an engineer.")
}

// Create a function that updates a person's occupation
def updateOccupation(person: Person, newOccupation: String) : Person = {
  Person(person.firstName, person.lastName, person.age, newOccupation)
}

// Update the occupation of the first person in the list
val updatedPerson = updateOccupation(peopleList.head, "Software Developer")

// Print out the updated occupation
println(updatedPerson.occupation)