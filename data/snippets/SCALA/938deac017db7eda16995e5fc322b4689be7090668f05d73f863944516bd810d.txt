// Define a class for a binary search tree
class BinarySearchTree {
  var root: Node = _
  
  // Define a node class with left and right child nodes
  class Node(var value: Int) {
    var left: Node = _
    var right: Node = _
  }
  
  // Function to insert a value into the tree
  def insert(value: Int): Unit = {
    if (root == null) { // If tree is empty, value becomes the root
      root = new Node(value)
    } else { // Otherwise, insert value into appropriate child node
      insert(root, value)
    }
  }
  
  // Helper function for insert method
  private def insert(currentNode: Node, value: Int): Unit = {
    // If value is less than the current node, insert into left child node
    if (value < currentNode.value) {
      if (currentNode.left == null) {
        currentNode.left = new Node(value)
      } else {
        // Recursively call insert function on the left child node
        insert(currentNode.left, value)
      }
    } else { // If value is greater than or equal to the current node, insert into right child node
      if (currentNode.right == null) {
        currentNode.right = new Node(value)
      } else {
        // Recursively call insert function on the right child node
        insert(currentNode.right, value)
      }
    }
  }
  
  // Function to search for a value in the tree
  def search(value: Int): Boolean = {
    // If tree is empty, return false
    if (root == null) {
      return false
    }
    // Call helper function with the root node
    search(root, value)
  }
  
  // Helper function for search method
  private def search(currentNode: Node, value: Int): Boolean = {
    // If value matches the current node, return true
    if (value == currentNode.value) {
      return true
    }
    
    // If value is less than the current node, recursively search in the left child node
    if (value < currentNode.value) {
      if (currentNode.left == null) {
        return false
      } else {
        return search(currentNode.left, value)
      }
    } else { // If value is greater than the current node, recursively search in the right child node
      if (currentNode.right == null) {
        return false
      } else {
        return search(currentNode.right, value)
      }
    }
  }
  
  // Function to delete a node with a given value
  def delete(value: Int): Unit = {
    root = deleteNode(root, value)
  }
  
  // Helper function to delete a node with a given value
  private def deleteNode(currentNode: Node, value: Int): Node = {
    // If tree is empty, return null
    if (currentNode == null) {
      return null
    }
    
    // If value is less than the current node, recursively call deleteNode function on the left child node
    if (value < currentNode.value) {
      currentNode.left = deleteNode(currentNode.left, value)
    } else if (value > currentNode.value) { // If value is greater than the current node, recursively call deleteNode function on the right child node
      currentNode.right = deleteNode(currentNode.right, value)
    } else { // If value matches the current node
      if (currentNode.left == null && currentNode.right == null) { // Case 1: Node has no children
        return null
      } else if (currentNode.left == null) { // Case 2a: Node has only right child
        return currentNode.right
      } else if (currentNode.right == null) { // Case 2b: Node has only left child
        return currentNode.left
      } else { // Case 3: Node has both left and right children
        // Find the minimum value in the right subtree
        var minNode: Node = currentNode.right
        while (minNode.left != null) {
          minNode = minNode.left
        }
        
        // Replace current node value with the minimum value from the right subtree
        currentNode.value = minNode.value
        // Recursively call deleteNode function on the right subtree to delete the minimum node
        currentNode.right = deleteNode(currentNode.right, minNode.value)
      }
    }
    // Return the current node after deletion
    currentNode
  }
  
  // Function to print the tree in order
  def printInOrder(): Unit = {
    // Call helper function with the root node
    printInOrder(root)
  }
  
  // Helper function for printInOrder method
  private def printInOrder(currentNode: Node): Unit = {
    // If current node is not null, recursively call printInOrder function on the left child node
    if (currentNode != null) {
      printInOrder(currentNode.left)
      // Print current node value
      println(currentNode.value)
      // Recursively call printInOrder function on the right child node
      printInOrder(currentNode.right)
    }
  }
}

// Example usage:
val bst = new BinarySearchTree
bst.insert(50) // Insert root node
bst.insert(30) // Insert left child
bst.insert(70) // Insert right child
bst.insert(20) // Insert left child of left child
bst.insert(40) // Insert right child of left child
bst.insert(60) // Insert left child of right child
bst.insert(80) // Insert right child of right child

bst.printInOrder() // Output: 20, 30, 40, 50, 60, 70, 80
bst.search(30) // Output: true
bst.search(100) // Output: false
bst.delete(20) // Delete node with value 20
bst.printInOrder() // Output: 30, 40, 50, 60, 70, 80