// This code snippet demonstrates the use of higher order functions and recursion in Scala
// Higher Order Functions - Functions that take other functions as parameters or return a function
// Tail Recursion - A form of recursion where the function calls itself as its final action

def map[A,B](list: List[A], func: A => B): List[B] = { //defining a higher order function called map
  if (list.isEmpty) Nil                               //checks if the list is empty, if yes, returns an empty list
  else list.headOption.map(func) :: map(list.tail, func)  // else maps the function param to the head of the list and
}                                                         // appends it to the result of recursively calling the function on the tail of the list
//End of higher order function definition

def factorial(n: Int): Int = {               // defining a factorial function using tail recursion
  @tailrec                                  // annotation that ensures the function will be tail recursive
  def factorialHelper(x: Int, acc: Int): Int = { // defining a helper function with accumulator to keep track of factorial
    if (x == 0) acc                                  //checks if we have reached the end by reaching 0, then returns accumulator
    else factorialHelper(x-1, acc*x)                // else calls itself with decremented value of x and updated accumulator
  }

  factorialHelper(n,1) // calling helper function with initial value of accumulator as 1
}

print(map(List(1,2,3,4), (x: Int) => x * 2))  // prints the mapped list [2, 4, 6, 8]

print(factorial(5)) //prints the factorial of 5 as 120