object MazeSolver {
  def solve(maze: Array[Array[Int]], start: (Int, Int), end: (Int, Int)): Array[Array[Int]] = {

    // Create a 2D array to keep track of visited cells
    val visited = Array.ofDim[Boolean](maze.length, maze(0).length)

    // Create a stack to keep track of cells to visit
    val stack = scala.collection.mutable.Stack[(Int, Int)](start)

    // Create a 2D array to keep track of final path
    val path = Array.ofDim[Int](maze.length, maze(0).length)

    // Define a recursive function to find the path
    def findPath(currentCell: (Int, Int)): Boolean = {
      // Check if current cell is the end cell
      if (currentCell == end) {
        path(end._1)(end._2) = 1 // mark end cell as part of the path
        return true
      }

      // If current cell is not the end, mark it as visited
      visited(currentCell._1)(currentCell._2) = true

      // Check for adjacent cells and their validity
      // Adjacent cells are top, bottom, left, and right of current cell
      val adjacentCells = List(
        (currentCell._1 - 1, currentCell._2),
        (currentCell._1 + 1, currentCell._2),
        (currentCell._1, currentCell._2 - 1),
        (currentCell._1, currentCell._2 + 1)
      )

      // Loop through adjacent cells
      for (cell <- adjacentCells) {
        // Check if cell is within maze bounds and not visited
        if (cell._1 >= 0 && cell._1 < maze.length && cell._2 >= 0 && cell._2 < maze(0).length && !visited(cell._1)(cell._2)) {
          // Check if cell is a valid move (not a wall)
          if (maze(cell._1)(cell._2) == 1) {
            // Push cell onto stack to visit
            stack.push(cell)

            // Mark cell as part of the path
            path(cell._1)(cell._2) = 1
          }
        }
      }

      // If stack is not empty, recursively call the function with next cell
      if (stack.nonEmpty) {
        findPath(stack.pop())
      }
      else {
        // If stack is empty, no path was found, so return false
        false
      }
    }

    // Call the recursive function to find the path
    // If path is found, return the final path
    // If path is not found, return an empty array
    if (findPath(start)) {
      path
    }
    else {
      Array.ofDim[Int](maze.length, maze(0).length)
    }
  }
}

// Example usage:
val maze = Array(
  Array(1, 1, 1, 0),
  Array(1, 0, 1, 0),
  Array(1, 1, 1, 1),
  Array(0, 0, 1, 1)
)

val start = (0, 0)
val end = (3, 3)
val solution = MazeSolver.solve(maze, start, end)

// Print solution
for (row <- solution) {
  println(row.mkString(" "))
}