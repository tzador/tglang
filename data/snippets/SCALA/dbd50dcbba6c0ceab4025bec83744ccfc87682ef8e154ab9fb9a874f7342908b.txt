// Defines a case class called User with two fields, name and age
case class User(name: String, age: Int)

// Creates an instance of the User class with name "John" and age 30
val user = User("John", 30)

// Prints out the user's name and age
println(s"User name: ${user.name}, User age: ${user.age}")

// Defines an abstract class called Animal with an abstract method "speak"
abstract class Animal {
  def speak: String
}

// Defines a class Dog that extends the Animal class and implements the "speak" method
class Dog extends Animal {
  def speak = "Woof!"
}

// Creates a new instance of the Dog class
val dog = new Dog()

// Prints out the result of calling the "speak" method on the dog instance
println(dog.speak)

// Defines a sealed trait called Shape with three subclasses - Circle, Square, and Rectangle
sealed trait Shape
case class Circle(radius: Double) extends Shape
case class Square(sideLength: Double) extends Shape
case class Rectangle(length: Double, width: Double) extends Shape

// Creates a list of different shapes
val shapes = List(Circle(2.5), Square(5.0), Rectangle(3.0, 4.0))

// Uses pattern matching to calculate the area of each shape and print it out
shapes.foreach {
  case Circle(radius) => println(s"Circle with radius $radius has an area of ${math.Pi * math.pow(radius, 2)}")
  case Square(sideLength) => println(s"Square with side length $sideLength has an area of ${math.pow(sideLength, 2)}")
  case Rectangle(length, width) => println(s"Rectangle with length $length and width $width has an area of ${length * width}")
}