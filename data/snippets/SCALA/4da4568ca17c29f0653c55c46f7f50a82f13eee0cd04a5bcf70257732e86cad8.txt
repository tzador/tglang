//This code snippet is a function that implements bubble sort on a list of integers
def bubbleSort(lst: List[Int]): List[Int] = {//declaring function with input parameter List of Integers
  def bubbleSortAcc(lst: List[Int], acc: List[Int]): List[Int] = lst match { //recursive function with initial accumulator set to an empty list
    case Nil => acc //base case: if list is empty, return accumulator
    case x :: Nil => x :: acc //base case: if list has only one element, return accumulator with the element
    case x :: tail => if (x > tail.head) bubbleSortAcc(x :: tail.tail, acc :+ tail.head) //if first element is larger than second element, move second element to accumulator; continue sorting remaining elements
                      else bubbleSortAcc(tail, acc :+ x) //if first element is smaller than or equal to second element, move first element to accumulator; continue sorting remaining elements
  }
  bubbleSortAcc(lst, Nil).reverse //call recursive function with initial accumulator and return the reversed accumulator (sorted list)
}

//Example call of function:
val numbers = List(9, 4, 6, 2, 8, 5) //declare a list of integers
val sortedNumbers = bubbleSort(numbers) //call function to sort the list
println(sortedNumbers) //output: List(2, 4, 5, 6, 8, 9)