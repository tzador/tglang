object ParkingLot {
  //Create a class for the parking lot with parameters for size and availability
  class Lot(size: Int, available: Boolean)
  
  //Create a function to check if a parking spot is available
  def checkAvailability(spots: Array[Lot]): Boolean = {
    for (spot <- spots) {
      if (spot.available) {
        return true
      }
    }
    return false
  }
  
  //Instantiate a parking lot with 10 spots
  val lot = new Array[Lot](10)
  
  //Initialize each spot with a size of 1 and set availability to true
  for (spot <- lot) {
    spot.size = 1
    spot.available = true
  }
  
  //Function to park a car in the first available spot
  def parkCar(car: Car): Unit = {
    for (spot <- lot) {
      if (spot.available && spot.size == car.size) {
        spot.available = false
        println("Car parked in spot " + spot)
        return
      }
    }
    //If no spot is available, print error message
    println("No available spots for this car")
  }
  
  //Function to remove a car from the parking lot
  def removeCar(car: Car): Unit = {
    for (spot <- lot) {
      if (!spot.available && spot.size == car.size) {
        spot.available = true
        println("Car removed from spot " + spot)
        return
      }
    }
    //If the car is not found, print error message
    println("Car not found in this parking lot")
  }
  
  //Create a car with size of 1 and park it
  val car1 = new Car(1)
  parkCar(car1)
  
  //Create a car with size of 2 and park it
  val car2 = new Car(2)
  parkCar(car2)
  
  //Remove the first car and park a new car with size of 1
  removeCar(car1)
  val car3 = new Car(1)
  parkCar(car3)
}

//Create a class for a car with size parameter
class Car(size: Int)

//Output:
Car parked in spot ParkingLot$Lot@5a39699c
Car parked in spot ParkingLot$Lot@18880f85
Car removed from spot ParkingLot$Lot@5a39699c
Car parked in spot ParkingLot$Lot@5a39699c