import scala.io.Source // Importing the scala.io.Source library
import java.io.File // Importing the java.io.File library

object FileProcessor { // Creating a singleton object FileProcessor
  def main(args: Array[String]): Unit = { // Defining the main method with a parameter of type array of strings
    val filePath = "./file.txt" // Creating a constant variable filePath and assigning it a file path
    val lines = readFile(filePath) // Calling the readFile function and storing its output in a variable
    val fileDataWithHeaders = addHeaders(lines) // Calling the addHeaders function and storing its output in a new variable
  }

  /* Function to read file content and return a list of lines */
  def readFile(filePath: String): List[String] = { // Defining a function with a parameter of type string and return type of list of strings
    val file = Source.fromFile(new File(filePath)) // Creating a file object using the filePath and calling the fromFile method of Source
    val lines = (for (line <- file.getLines()) yield line).toList // Using a for loop to iterate over the lines and converting the result to a list
    file.close() // Closing the file
    lines // Returning the list of lines
  }

  /* Function to add headers to file data */
  def addHeaders(lines: List[String]): List[String] = { // Defining a function with a parameter of type list of strings and return type of list of strings
    if (lines.length == 0) List("No data found") // Checking if the list is empty, if yes, then return a list with the message "No data found"
    else { // If the list is not empty
      val headers = lines.head.split(",") // Splitting the first line of the list by comma and storing the result in a variable
      val fileData = lines.tail // Removing the first line from the list and storing the remaining lines in a new variable
      val fileDataWithHeaders = headers :: fileData // Combining the headers and file data to create a new list
      fileDataWithHeaders // Returning the new list
    }
  }
}