def mergeSort(arr: Array[Int]): Array[Int] = {
  if(arr.length == 1) arr //base case
  
  else { //recursive case
    val middle = arr.length / 2
    val left = mergeSort(arr.slice(0, middle)) //recursive call on left half
    val right = mergeSort(arr.slice(middle, arr.length)) //recursive call on right half
    
    var i = 0
    var j = 0
    var k = 0
    
    while(i < left.length && j < right.length) {
      if(left(i) < right(j)) {
        arr(k) = left(i)
        i += 1
      }
      else {
        arr(k) = right(j)
        j += 1
      }
      k += 1
    }
    
    while(i < left.length) {
      arr(k) = left(i)
      i += 1
      k += 1
    }
    
    while(j < right.length) {
      arr(k) = right(j)
      j += 1
      k += 1
    }
    
    arr
  }
}

//Example usage:
val unsortedArr = Array(9,8,7,6,5,4,3,2,1)
println(mergeSort(unsortedArr).mkString(", ")) //outputs: 1, 2, 3, 4, 5, 6, 7, 8, 9