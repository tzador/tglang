class Graph[T](val map: Map[T, List[T]]) {

  def addVertex(node: T) = {
    if (map.contains(node))
      throw new Exception("Node already exists.")
    else
      new Graph[T](map + (node -> List()))
  }

  def addEdge(from: T, to: T) = {
    if (!map.contains(from) || !map.contains(to))
      throw new Exception("One of the nodes does not exist in the graph.")
    else if (map(from).contains(to))
      throw new Exception("Edge already exists between the two nodes.")
    else
      new Graph[T](map + (from -> (to :: map(from))))
  }

  def depthFirstTraversal(start: T) = {
    def dfs(node: T, visited: Set[T]): List[T] = {
      if (visited(node))
        List()
      else {
        val neighbors = map(node)
        node :: neighbors.flatMap(n => dfs(n, visited + node)).toList
      }
    }

    val visited = Set[T]()
    dfs(start, visited)
  }

  def breadthFirstTraversal(start: T) = {
    def bfs(nodes: List[T], visited: Set[T]): List[T] = {
      nodes match {
        case Nil => Nil
        case head :: tail =>
          if (visited(head))
            bfs(tail, visited)
          else {
            val neighbors = map(head)
            head :: bfs(tail ++ neighbors, visited + head)
          }
      }
    }

    val visited = Set[T]()
    bfs(List(start), visited)
  }
}

val graph = new Graph[Int](Map(1 -> List(2, 3), 2 -> List(4, 5), 3 -> List(6), 4 -> List(), 5 -> List(7), 6 -> List(2), 7 -> List(3)))
println(s"Depth first traversal from 1: ${graph.depthFirstTraversal(1)}")
println(s"Breadth first traversal from 1: ${graph.breadthFirstTraversal(1)}")