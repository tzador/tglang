// The following code snippet is a Scala implementation of a Binary Search Tree data structure

// Define a trait for the tree Node
trait Node[A] {
  def value: A
  def left: Node[A]
  def right: Node[A]
  def isEmpty: Boolean
}

// Define a case class for the Non-Empty node
case class NonEmptyNode[A](override val value: A, override val left: Node[A], override val right: Node[A]) extends Node[A] {
  val isEmpty = false
}

// Define a case object for the Empty node
case object EmptyNode extends Node[Nothing] {
  def value = throw new NoSuchElementException("EmptyNode.value")
  def left = throw new NoSuchElementException("EmptyNode.left")
  def right = throw new NoSuchElementException("EmptyNode.left")
  def isEmpty = true
}

// Define the Binary Search Tree class
class BinarySearchTree[A <% Ordered[A]] {
  private var root: Node[A] = EmptyNode
  
  // Method to add an element to the tree
  def add(elem: A): Unit = root = addNode(root, elem)
  
  // Method to recursively add an element to the tree
  private def addNode(currNode: Node[A], elem: A): Node[A] = currNode match {
    // If the current node is empty, create a new NonEmptyNode with given element
    case EmptyNode => NonEmptyNode(elem, EmptyNode, EmptyNode)
    // If the current node is non-empty, compare the value of the element to the value of the current node
    // If the element is less than the current node's value, add it to the left subtree
    case NonEmptyNode(value, left, right) if elem < value => NonEmptyNode(value, addNode(left, elem), right)
    // If the element is greater than or equal to the current node's value, add it to the right subtree
    case NonEmptyNode(value, left, right) => NonEmptyNode(value, left, addNode(right, elem))
  }
  
  // Method to check if the tree contains a given element
  def contains(elem: A): Boolean = containsNode(root, elem)
  
  // Method to recursively check if an element is in the tree
  private def containsNode(currNode: Node[A], elem: A): Boolean = currNode match {
    // If the current node is empty, return false
    case EmptyNode => false
    // If the current node is non-empty, compare the value of the element to the value of the current node
    // If the element is equal to the current node's value, return true
    case NonEmptyNode(value, _, _) if elem == value => true
    // If the element is less than the current node's value, check the left subtree
    case NonEmptyNode(value, left, _) if elem < value => containsNode(left, elem)
    // If the element is greater than or equal to the current node's value, check the right subtree
    case NonEmptyNode(value, _, right) => containsNode(right, elem)
  }
  
  // Method to remove an element from the tree
  def remove(elem: A): Unit = root = removeNode(root, elem)
  
  // Method to recursively remove an element from the tree
  private def removeNode(currNode: Node[A], elem: A): Node[A] = currNode match {
    // If the current node is empty, return it
    case EmptyNode => EmptyNode
    // If the current node is non-empty, compare the value of the element to the value of the current node
    // If the element is less than the current node's value, remove it from the left subtree
    case NonEmptyNode(value, left, right) if elem < value => NonEmptyNode(value, removeNode(left, elem), right)
    // If the element is greater than the current node's value, remove it from the right subtree
    case NonEmptyNode(value, left, right) if elem > value => NonEmptyNode(value, left, removeNode(right, elem))
    // If the element is equal to the current node's value, remove the node
    case NonEmptyNode(value, left, right) => {
      // If the left subtree is empty, return the right subtree
      if (left.isEmpty) right
      // If the right subtree is empty, return the left subtree
      else if (right.isEmpty) left
      // Otherwise, find the smallest element in the right subtree and replace the current node's value with it
      else {
        val min = findMin(right)
        NonEmptyNode(min.value, left, removeNode(right, min.value))
      }
    }
  }
  
  // Method to recursively find the smallest element in a tree
  private def findMin(currNode: Node[A]): Node[A] = currNode.left match {
    // If the left subtree is empty, return the current node
    case EmptyNode => currNode
    // Otherwise, keep going left
    case _ => findMin(currNode.left)
  }
}