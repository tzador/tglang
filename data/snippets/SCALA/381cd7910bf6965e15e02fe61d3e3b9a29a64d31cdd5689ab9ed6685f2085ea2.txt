/* This is a complex code snippet in SCALA */

// Define a case class for a Person with two parameters
case class Person(name: String, age: Int)

// Create a list of Person objects 
val peopleList = List(
    Person("John", 25),
    Person("Jane", 30),
    Person("Mark", 28),
    Person("Lisa", 26),
    Person("David", 32)
)

// Define a function to filter out people over the age of 30
def filterPeople(personList: List[Person]): List[Person] = {
    personList.filter(_.age > 30)
}

// Call the filterPeople function on the peopleList and store the result in a new list
val filteredList = filterPeople(peopleList)

// Print out the filtered list of people
println(filteredList) // Output: List(Person(Jane, 30), Person(David, 32))

// Define a class for a Calculator with a method to calculate the factorial of a number
class Calculator{
    def factorial(n: Int): Int = {
        if(n <= 1){
            1
        }
        else{
            n * factorial(n-1)
        }
    }
}

// Instantiate the Calculator class
val calc = new Calculator()

// Calculate the factorial of 5 using the factorial method
val factorialResult = calc.factorial(5)

// Print out the factorial of 5
println(factorialResult) // Output: 120

// Define a higher-order function to square a number and apply it to a list using map
val squaredList = List(1, 2, 3, 4, 5).map(x => x * x)

// Print out the squared list
println(squaredList) // Output: List(1, 4, 9, 16, 25)