class Tree[+A] {
  def add[B >: A](value: B)(implicit comp: Ordering[B]): Tree[B] = {
    import comp.mkOrderingOps
    this match {
      case Empty => Node(value, Empty, Empty)
      case Node(v, left, right) if value < v => Node(v, left.add(value), right)
      case Node(v, left, right) if value > v => Node(v, left, right.add(value))
      case _ => this
    }
  }
  def height: Int =
    this match {
      case Empty => 0
      case Node(_, left, right) => (left.height max right.height) + 1
    }
  protected case class Empty() extends Tree[Nothing]
  protected case class Node[A](value: A, left: Tree[A], right: Tree[A]) extends Tree[A]
}

def buildTree[A](values: A*): Tree[A] = {
  var result: Tree[A] = Tree.Empty
  for (value <- values) {
    result = result.add(value)
  }
  result
}

abstract sealed class DatabaseEvent

trait EventLog {
  def subscribe(callback: DatabaseEvent => Unit): Unit
  def publish(event: DatabaseEvent): Unit
}