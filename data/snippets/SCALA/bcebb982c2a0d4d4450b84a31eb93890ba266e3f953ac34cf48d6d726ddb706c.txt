// Defining a case class named 'Person' with two parameters, 'name' of type 'String' and 'age' of type 'Int'
case class Person(name: String, age: Int)

// Creating a list of objects of type 'Person'
val peopleList = List(
  Person("John", 25),
  Person("Emily", 30),
  Person("Mike", 35)
)

// Defining a function named 'oldestPerson' that takes a list of 'Person' objects and returns the oldest person's name as a string
def oldestPerson(people: List[Person]): String = {
  // Using a match expression on the list of people to find the maximum age
  val maxAge = people match {
    // If the list is empty, return -1 as the maximum age
    case Nil => -1
    // If the list contains only one person, return that person's age as the maximum age
    case person :: Nil => person.age
    // If the list contains more than one person, recursively call the function on the remaining list and compare with the current person's age to find the maximum age
    case person :: remainingPeople => math.max(person.age, oldestPerson(remainingPeople))
  }

  // Using a for loop to iterate through the list of people and find the person with the maximum age
  for (person <- people if person.age == maxAge) {
    // Returning the oldest person's name as a string
    return person.name
  }
  // If no person is found, return an empty string
  ""
}

// Calling the 'oldestPerson' function passing in the 'peopleList' and printing the output
println(s"The oldest person is ${oldestPerson(peopleList)}!")