/**
 * This is a function that takes in two lists and returns their cartesian product
 *
 * @param lst1 First list to be multiplied
 * @param lst2 Second list to be multiplied
 * @return A list representing the cartesian product of the two input lists
 */
def cartesianProd(lst1: List[Int], lst2: List[Int]): List[List[Int]] = {
  // Helper function to create the cartesian product given two lists
  def createProduct(lst1: List[Int], lst2: List[Int]): List[List[Int]] = {
    for (i <- lst1; j <- lst2) yield List(i, j)
  }
  // Recursively create the cartesian product by calling the helper function
  lst1 match {
    case Nil => Nil
    case h :: t => createProduct(h, lst2) ++ cartesianProd(t, lst2)
  }
}

// Example usage
val lst1 = List(1, 2, 3)
val lst2 = List(4, 5)

// Calling the function and storing the output in a variable
val cartesian = cartesianProd(lst1, lst2)

// Printing the output
println(s"The cartesian product of $lst1 and $lst2 is $cartesian")