/**
* This is a class that represents a binary tree, with various methods and operations for manipulating the tree.
* @tparam T the type of data stored in the nodes of the tree
* @param root the root node of the tree
*/
class BinaryTree[T](var root: Option[BinaryTreeNode[T]]) {
	
	/**
	* A method to recursively traverse the tree in pre-order, performing some operation on each node.
	* @param op the operation to be performed on each node
	*/
	def traversePreOrder(op: BinaryTreeNode[T] => Unit): Unit = {
		def traverse(node: BinaryTreeNode[T]): Unit = {
			op(node)
			node.left.foreach(traverse)
			node.right.foreach(traverse)
		}
		root.foreach(traverse)
	}

	/**
	* A method to insert a new node with the given data into the tree.
	* @param data the data to be inserted into the new node
	*/
	def insert(data: T): Unit = {
		def insertNode(node: BinaryTreeNode[T]): Unit = {
			val newNode = new BinaryTreeNode(data, None, None)
			if (data < node.data) {
				node.left match {
					case None => node.left = Some(newNode)
					case Some(left) => insertNode(left)
				}
			} else if (data > node.data) {
				node.right match {
					case None => node.right = Some(newNode)
					case Some(right) => insertNode(right)
				}
			}
		}
		root match {
			case None => root = Some(new BinaryTreeNode(data, None, None))
			case Some(rootNode) => insertNode(rootNode)
		}
	}

	/**
	* A method to remove a node from the tree with the given data, if it exists.
	* @param data the data to be removed from the tree
	*/
	def remove(data: T): Unit = {
		def findMinNode(node: BinaryTreeNode[T]): Option[BinaryTreeNode[T]] = {
			node.left match {
				case None => Some(node)
				case Some(left) => findMinNode(left)
			}
		}

		def removeNode(node: BinaryTreeNode[T], parent: Option[BinaryTreeNode[T]], isLeft: Boolean): Unit = {
			if (data == node.data) {
				if (node.left.isEmpty && node.right.isEmpty) {
					if (isLeft) {
						parent.foreach(_.left = None)
					} else {
						parent.foreach(_.right = None)
					}
				} else if (node.left.isEmpty || node.right.isEmpty) {
					val replacementNode = if (node.left.isEmpty) node.right else node.left
					if (isLeft) {
						parent.foreach(_.left = replacementNode)
					} else {
						parent.foreach(_.right = replacementNode)
					}
				} else {
					val minNode = findMinNode(node.right.get)
					minNode.foreach(n => {
						remove(n.data)
						node.data = n.data
					})
				}
			} else if (data < node.data) {
				node.left.foreach(removeNode(_, Some(node), isLeft = true))
			} else {
				node.right.foreach(removeNode(_, Some(node), isLeft = false))
			}
		}

		root.foreach { rootNode =>
			removeNode(rootNode, None, isLeft = false)
		}
	}
}

/**
* This is a class that represents a node in a binary tree.
* @tparam T the type of data stored in the node
* @param data the data stored in the node
* @param left the left child of the node
* @param right the right child of the node
*/
class BinaryTreeNode[T](var data: T, var left: Option[BinaryTreeNode[T]], var right: Option[BinaryTreeNode[T]])