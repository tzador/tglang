/**
  * This is a class for creating and manipulating a linked list
  * @param head the first node of the linked list
  * @tparam T the type of elements stored in the linked list, constrained to be of type Comparable
  */
class LinkedList[T <: Comparable[T]](var head: Node[T]) {

  /**
    * Adds a new node to the front of the linked list
    * @param value the value to be stored in the new node
    */
  def addToFront(value: T): Unit = {
    val newNode = new Node[T](value, head)
    head = newNode
  }

  /**
    * Adds a new node to the end of the linked list
    * @param value the value to be stored in the new node
    */
  def addToEnd(value: T): Unit = {
    var current = head
    while (current.next != null) {
      current = current.next
    }
    current.next = new Node[T](value)
  }

  /**
    * Removes the first occurrence of a given value in the linked list
    * @param value the value to be removed
    * @return true if the value was found and removed, false otherwise
    */
  def remove(value: T): Boolean = {
    var current = head
    var previous: Node[T] = null
    while (current != null && current.value != value) {
      previous = current
      current = current.next
    }
    if (current != null) {
      previous.next = current.next
      true
    } else false
  }

  /**
    * Returns the number of nodes in the linked list
    * @return the number of nodes in the linked list
    */
  def size: Int = {
    var current = head
    var count = 0
    while (current != null) {
      count += 1
      current = current.next
    }
    count
  }
}

/**
  * This is a class representing a node in a linked list
  * @param value the value stored in the node
  * @param next the next node in the linked list, default value of null if not specified
  */
class Node[T](var value: T, var next: Node[T] = null)