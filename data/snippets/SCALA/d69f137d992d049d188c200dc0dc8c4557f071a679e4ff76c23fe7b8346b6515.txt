def mergeSort[A](list: List[A])(implicit ord: Ordering[A]): List[A] = {
  def merge(list1: List[A], list2: List[A]): List[A] = (list1, list2) match {
    case (Nil, list2) => list2
    case (list1, Nil) => list1
    case (x :: xs, y :: ys) =>
      if (ord.lt(x, y)) x :: merge(xs, list2)
      else y :: merge(list1, ys)
  }
  val n = list.length / 2
  if (n == 0) list
  else {
    val (firstHalf, secondHalf) = list splitAt n
    merge(mergeSort(firstHalf), mergeSort(secondHalf))
  }
}

// Example
val unsortedList = List(5, 3, 8, 1, 6, 9, 2)
val sortedList = mergeSort(unsortedList) // returns List(1, 2, 3, 5, 6, 8, 9)