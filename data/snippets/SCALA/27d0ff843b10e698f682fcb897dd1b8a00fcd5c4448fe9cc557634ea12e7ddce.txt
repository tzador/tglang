// This program generates a list of prime numbers up to a given limit
// using the sieve of Eratosthenes algorithm
// Define a function to generate the prime numbers
def generatePrimes(limit: Int): List[Int] = {
  // Checks if a number is prime by dividing it with all the
  // numbers up to its square root
  def isPrime(n: Int): Boolean =
    (2 to math.sqrt(n).toInt).forall(n % _ != 0)

  // Initialize a list with all numbers from 2 to the limit
  var numbers = List.range(2, limit + 1)

  // Loop through the numbers and remove the multiples of the first number
  // which is prime
  // Iterate until we reach the square root of the limit
  while (numbers.head <= math.round(math.sqrt(limit))) {
    // Get the first number (which is prime) and remove it from the list
    val prime = numbers.head
    numbers = numbers.tail

    // Filter out all the multiples of the prime number
    // and update the numbers list
    numbers = numbers.filter(_ % prime != 0)
  }

  // Return the list of prime numbers
  numbers
}

// Define a function to print out the generated list of prime numbers
def printPrimes(primes: List[Int]): Unit = {
  // Loop through the list and print out each prime number
  primes.foreach(println)
}

// Call the generatePrimes function and pass in a limit of 100
val primes = generatePrimes(100)
// Print out the generated list of prime numbers
printPrimes(primes)