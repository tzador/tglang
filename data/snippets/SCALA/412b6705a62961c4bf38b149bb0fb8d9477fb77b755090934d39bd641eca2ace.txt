object ComplexMath {
  // This class represents a complex number with real and imaginary parts
  class Complex(real: Double, imaginary: Double) {
    // Method to add two complex numbers
    def add(that: Complex): Complex = {
      new Complex(real + that.real, imaginary + that.imaginary)
    }
    
    // Method to subtract two complex numbers
    def subtract(that: Complex): Complex = {
      new Complex(real - that.real, imaginary - that.imaginary)
    }
    
    // Method to multiply two complex numbers
    def multiply(that: Complex): Complex = {
      new Complex(real * that.real - imaginary * that.imaginary, real * that.imaginary + imaginary * that.real)
    }
    
    // Method to divide two complex numbers
    def divide(that: Complex): Complex = {
      val denominator = that.real * that.real + that.imaginary * that.imaginary
      new Complex((real * that.real + imaginary * that.imaginary) / denominator, (imaginary * that.real - real * that.imaginary) / denominator)
    }
    
    // Method to calculate the absolute value of a complex number
    def abs(): Double = {
      Math.sqrt(real * real + imaginary * imaginary)
    }
    
    // Method to calculate the conjugate of a complex number
    def conjugate(): Complex = {
      new Complex(real, -imaginary)
    }
    
    // Method to create a complex number from its polar representation
    // Takes in a real paramenter (r) and an imaginary parameter (phi)
    def fromPolar(r: Double, phi: Double): Complex = {
      new Complex(r * Math.cos(phi), r * Math.sin(phi))
    }
    
    // Method to convert a complex number to its polar representation
    // Returns a tuple of the real and imaginary parts in polar form
    def toPolar(): (Double, Double) = {
      val r = abs()
      val phi = Math.atan2(imaginary, real)
      (r, phi)
    }
  }
}