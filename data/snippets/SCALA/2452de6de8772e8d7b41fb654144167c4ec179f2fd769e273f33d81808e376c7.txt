/*
  This is a complex code snippet in Scala.
  It uses multiple types, functions and control structures.
*/

// Define a case class for a person
case class Person(name: String, age: Int)

// Create a list of Person objects
val people = List(Person("John", 25), Person("Jane", 30), Person("Bob", 40))

// Define a function to filter out people older than a specified age
def filterOlderPeople(inputList: List[Person], age: Int): List[Person] = {
  // Filter the input list based on the custom filtering condition
  val filteredList = inputList.filter(person => person.age > age)
  // Return the filtered list
  filteredList
}

// Call the function with the given list and age
val filteredPeople = filterOlderPeople(people, 35)

// Print the names of the filtered people
for (person <- filteredPeople) {
  println(s"Name: ${person.name}")
}

// Define a recursive function to calculate the factorial of a number
def factorial(n: Int): Int = {
  if (n == 0) {
    // Return 1 when the input is 0
    1
  } else {
    // Multiply the number with the factorial of n-1
    n * factorial(n - 1)
  }
}

// Calculate the factorial of 5
val result = factorial(5)

// Print the result
println(s"Factorial of 5 is: $result")