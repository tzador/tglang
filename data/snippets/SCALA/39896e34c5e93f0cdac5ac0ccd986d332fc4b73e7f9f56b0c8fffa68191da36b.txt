// Create a class for a binary tree
class BinaryTree{
  // Create a node class with a value and left/right child pointers
  class Node(var value: Int, var left: Node, var right: Node)

  // Create a constructor for the binary tree class
  def this(value: Int) = this(value, null, null)

  // Create a method to insert a new value into the binary tree
  def insert(value: Int): Unit = {
      // If the current node is null, create a new node with the given value
      if (this.value == 0) {
          this.value = value
      // Otherwise, compare the value to the current node's value
      } else if (value < this.value) {
          // If the value is smaller, check if the left child is null
          if (left == null) {
              // If it is, create a new node with the given value and set it as the left child
              left = new Node(value, null, null)
          // If the left child is not null, recursively call the insert method on the left child
          } else {
              left.insert(value)
          }
      // If the value is larger than or equal to the current node's value
      } else {
          // Check if the right child is null
          if (right == null) {
              // If it is, create a new node with the given value and set it as the right child
              right = new Node(value, null, null)
          // If the right child is not null, recursively call the insert method on the right child
          } else {
              right.insert(value)
          }
      }
  }

  // Create a method to search for a value in the binary tree
  def search(value: Int): Boolean = {
      // If the current node is not null and its value is equal to the search value, return true
      if (this.value == value) {
          return true
      // If the search value is smaller than the current node's value
      } else if (value < this.value) {
          // Check if the left child is null, if it is, return false
          if (left == null) {
              return false
          // If the left child is not null, recursively call the search method on the left child
          } else {
              return left.search(value)
          }
      // If the search value is larger than the current node's value
      } else {
          // Check if the right child is null, if it is, return false
          if (right == null) {
              return false
          // If the right child is not null, recursively call the search method on the right child
          } else {
              return right.search(value)
          }
      }
  }
}