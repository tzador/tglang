//Function to compute the factorial of a given number
def factorial(n: Int): Int = {
    if (n == 1) { //base case
        1
    } else {
        n * factorial(n - 1) //recursive case
    }
}

//Function to print the first n numbers in the Fibonacci series
def fibonacci(n: Int): Unit = {
    var a = 0 //first number in series
    var b = 1 //second number in series
    var i = 0 //counter variable
    while (i < n) { //loop until reaches n
        print(a + " ") //print current number
        val temp = a + b //temporary variable to store next number
        a = b //update first number
        b = temp //update second number
        i = i + 1 //increment counter
    }
}

//Function to calculate the nth term in the Fibonacci series
def fibonacci(n: Int): Int = {
    if (n <= 1) { //base case
        return n
    } else { //recursive case
        return fibonacci(n - 1) + fibonacci(n - 2) //compute sum of previous two terms
    }
}

//Function to check if the given number is prime or not
def isPrime(n: Int): Boolean = {
    var i = 2 //counter variable
    while (i < n) { //loop until reaches n
        if (n % i == 0) { //if n is divisible by i
            return false //not a prime number
        }
        i = i + 1 //increment counter
    }
    return true //number is prime
}

//Function to print all prime numbers between 1 to n
def printPrimes(n: Int): Unit = {
    for (i <- 2 to n) { //loop through numbers from 2 to n
        if (isPrime(i)) { //check if number is prime
            print(i + " ") //print prime number
        }
    }
}