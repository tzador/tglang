//This code snippet implements a binary search tree in Scala
class BinarySearchTree[T] (var root: Node[T] = null, var count: Int = 0) {

  //Node class for creating tree nodes
  class Node[T] (var data: T, var left: Node[T] = null, var right: Node[T] = null)

  //Insert method to add new node to the tree
  def insert(data: T): Unit = {
    if (root == null) root = new Node(data)  //if tree is empty, set root node to new node
    else {
      var currentNode = root  //set current node to root
      var parent: Node[T] = null
      var isLeft = false  //flag for checking left or right child

      //loop through the tree until an empty branch is found
      while (currentNode != null) {
        parent = currentNode
        if (data < currentNode.data) {
          isLeft = true
          currentNode = currentNode.left  //move to left child
        } else {
          isLeft = false
          currentNode = currentNode.right  //move to right child
        }
      }
      //create and attach new node to the empty branch
      if (isLeft) parent.left = new Node(data)
      else parent.right = new Node(data)
    }
    count += 1  //increase tree size
  }

  //Search method to find a specific data in the tree
  def search(data: T): Boolean = {
    var currentNode = root  //set current node to root
    var isFound = false
    //loop through the tree until an empty branch is found or data is found
    while (currentNode != null && !isFound) {
      if (currentNode.data == data) isFound = true  //if data is found, update flag
      else if (data < currentNode.data) currentNode = currentNode.left  //move to left child
      else currentNode = currentNode.right  //move to right child
    }
    isFound
  }

  //Func method for printing the tree in inorder traversal
  private def print(node: Node[T]): Unit = {
    if (node != null) {
      print(node.left)  //recursively print left subtree
      print(node.data + " ")  //print current node
      print(node.right)  //recursively print right subtree
    }
  }

  //Method to print the tree
  def printTree(): Unit = {
    print(root)
  }
}

//Example usage:
//Create a new tree and insert some keys
val tree = new BinarySearchTree[Int]()
tree.insert(20)
tree.insert(10)
tree.insert(30)
tree.insert(15)
tree.insert(25)

//Print the tree
tree.printTree()

//Output:
//10 15 20 25 30