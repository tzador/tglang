object ComplexSnippet {
    // Define a case class for a person with name and age properties
    case class Person(name: String, age: Int)

    // Create a list of type Person
    val people = List(
        Person("Jane", 22),
        Person("John", 30),
        Person("Sarah", 26),
        Person("Mike", 35)
    )

    // Use pattern matching to filter the list and return only people over the age of 25
    val filteredPeople = people.filter {
        case Person(_, age) => age > 25
    }

    // Define a function that takes in a list of integers and returns the sum of all numbers
    def sum(numbers: List[Int]): Int = {
        // Use recursion to sum up the numbers
        numbers match {
            // Base case: empty list
            case Nil => 0
            // Recursive case: add the head of the list to the sum of the rest of the list
            case head :: tail => head + sum(tail)
        }
    }

    // Print out the sum of numbers from 1 to 10 using the `sum` function
    println(sum((1 to 10).toList))
}