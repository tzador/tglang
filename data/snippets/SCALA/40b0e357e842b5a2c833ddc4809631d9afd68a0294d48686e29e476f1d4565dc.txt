// This is a function that calculates the factorial of a given number
def factorial(num: Int): Int = {
  if (num == 0) 1 // if number is 0, return 1
  else num * factorial(num - 1) // otherwise, multiply number by factorial of number minus 1
}

// This is a recursive function that checks if a given string is a palindrome
def isPalindrome(str: String): Boolean = {
  if (str.length <= 1) true // if string length is 1 or less, return true
  else if(str.head == str.last) isPalindrome(str.tail.dropRight(1)) // if first and last characters are equal, call function on string without those characters
  else false // otherwise, return false
}

// This is an anonymous function that multiplies all numbers in a list by a given factor
val multiply = (list: List[Int], factor: Int) => list.map(_ * factor)

// This is a trait (interface) for a shape with methods to calculate area and perimeter
trait Shape {
  def area: Double // calculate area of shape
  def perimeter: Double // calculate perimeter of shape
}

// This is a class that implements the Shape trait and represents a circle
class Circle(radius: Double) extends Shape {
  val area: Double = math.Pi * radius * radius // area of circle = pi * r^2
  val perimeter: Double = 2 * math.Pi * radius // perimeter of circle = 2 * pi * r
}

// This is a case class representing a person with a name and age
case class Person(name: String, age: Int)

// This is an object with a main method that creates a list of people
object Main {
  def main(args: Array[String]): Unit = {
    val people = List(
      Person("John", 25),
      Person("Jane", 30),
      Person("Bob", 40),
      Person("Sally", 35)
    ) // create list of Person objects
    val adults = people.filter(_.age >= 30) // filter out people under 30
    val names = adults.map(_.name) // get list of names of remaining people
    println(names) // print list of names ("Jane", "Bob", "Sally")
  }
}