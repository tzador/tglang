/** A class representing a complex number */
class Complex(real: Double, imaginary: Double) {

  /** Method for adding two complex numbers */
  def +(other: Complex): Complex = new Complex(real + other.real, imaginary + other.imaginary)

  /** Method for multiplying two complex numbers */
  def *(other: Complex): Complex = new Complex(real * other.real - imaginary * other.imaginary,
    real * other.imaginary + imaginary * other.real)

  /** Method for obtaining the magnitude of a complex number */
  def magnitude(): Double = math.sqrt(real * real + imaginary * imaginary)

  /** Method for obtaining the phase of a complex number */
  def phase(): Double = math.atan2(imaginary, real)

  /** Overridden method for displaying the complex number in the form "a + bi" */
  override def toString(): String = {
    if (real == 0 && imaginary == 0) "0"
    else if (real == 0) s"${imaginary}i"
    else if (imaginary == 0) s"${real}"
    else if (imaginary < 0) s"${real} - ${-imaginary}i"
    else s"${real} + ${imaginary}i"
  }

  /** Overridden method for checking equality between two complex numbers */
  override def equals(other: Any): Boolean = other match {
    case c: Complex => real == c.real && imaginary == c.imaginary
    case _ => false
  }

  /** Overridden method for obtaining the hash code of a complex number */
  override def hashCode(): Int = {
    val prime = 31
    var result = 1
    result = prime * result + real.toInt
    result = prime * result + imaginary.toInt
    result
  }
}

/** A standalone object containing helper methods for complex numbers */
object Complex {

  /** Method for creating a complex number from polar coordinates */
  def fromPolar(magnitude: Double, phase: Double): Complex = {
    new Complex(magnitude * math.cos(phase), magnitude * math.sin(phase))
  }
}

// Example usage of the complex number class
val c1 = new Complex(3.5, 2.5)
val c2 = new Complex(-1.2, 6.7)
val c3 = c1 + c2
val c4 = c1 * c2
val c5 = Complex.fromPolar(4, math.Pi / 6)