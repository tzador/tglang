// A complex function that checks if a given string is a palindrome

def isPalindrome(word: String): Boolean = {
  val len = word.length // get length of string
  
  // base case, for strings of length 0 or 1
  if (len == 0 || len == 1) 
    return true  
  
  // get first and last characters of string
  val first = word(0) 
  val last = word(len - 1) 
  
  // recursion case
  // if first and last characters are equal
  // recursively call isPalindrome function on substring
  if (first == last) 
    return isPalindrome(word.substring(1, len - 1)) 
  
  // if first and last characters are not equal, return false
  return false
}

val word1 = "racecar" // palindrome
val word2 = "hello" // not a palindrome

// print output
println(s"$word1 is a palindrome: ${isPalindrome(word1)}") // output: racecar is a palindrome: true
println(s"$word2 is a palindrome: ${isPalindrome(word2)}") // output: hello is a palindrome: false