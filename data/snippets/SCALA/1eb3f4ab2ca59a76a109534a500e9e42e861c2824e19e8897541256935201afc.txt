// Define a class for a binary tree
class BinaryTree[T](var root: Option[Node[T]]) {
  // Define a method to insert a new value into the tree
  def insert(value: T)(implicit ord: Ordering[T]): Unit = {
    // Create a new Node object with the given value
    val newNode = Node(value, None, None)
    // Check if the tree is empty
    if (root.isEmpty) {
      // If tree is empty, set the new node as the root
      root = Some(newNode)
    } else {
      // Otherwise, recursively insert the new node into the tree
      insertNode(newNode, root.get)
    }
  }

  // Define a method to recursively insert a new node into the tree
  private def insertNode(node: Node[T], currNode: Node[T])(implicit ord: Ordering[T]): Unit = {
    // If the value of the new node is less than the current node, go left
    if (ord.lt(node.value, currNode.value)) {
      // Check if the left child of the current node is empty
      if (currNode.left.isEmpty) {
        // If it is, set the new node as the left child of the current node
        currNode.left = Some(node)
      } else {
        // Otherwise, recursively insert the new node into the left subtree
        insertNode(node, currNode.left.get)
      }
    } else {
      // Otherwise, go right
      // Check if the right child of the current node is empty
      if (currNode.right.isEmpty) {
        // If it is, set the new node as the right child of the current node
        currNode.right = Some(node)
      } else {
        // Otherwise, recursively insert the new node into the right subtree
        insertNode(node, currNode.right.get)
      }
    }
  }
  
  // Define a method to check if the tree contains a given value
  def contains(value: T)(implicit ord: Ordering[T]): Boolean = {
    // Start at the root node
    var currentNode = root.get
    // Continuously traverse down the tree until the value is found or the end is reached
    while (currentNode != null) {
      // If the value of the current node is equal to the given value, return true
      if (ord.equiv(currentNode.value, value)) {
        return true
      } else {
        // Otherwise, go left if the given value is less than the current node's value
        if (ord.lt(value, currentNode.value)) {
          currentNode = currentNode.left.get
        } else {
          // Otherwise, go right
          currentNode = currentNode.right.get
        }
      }
    }
    // If the value is not found, return false
    false
  }
}

// Define a case class for a Node in the tree
case class Node[T](value: T, var left: Option[Node[T]], var right: Option[Node[T]])