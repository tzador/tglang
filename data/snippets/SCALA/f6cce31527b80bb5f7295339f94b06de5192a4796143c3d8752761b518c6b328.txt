/**
  * This class represents a binary tree
  * @tparam T the type of values stored in the tree
  * @param value the value at the root of the tree
  * @param left the left subtree of the tree
  * @param right the right subtree of the tree
  */
  class BinaryTree[T](value: T, left: Option[BinaryTree[T]], right: Option[BinaryTree[T]]) {
    /**
      * This method applies a function to every element in the tree
      * @param f the function to be applied
      * @tparam U the type of the resulting tree
      * @return a new tree with the resulting values
      */
      def map[U](f: T => U): BinaryTree[U] = {
        new BinaryTree[U](f(value), left.map(_.map(f)), right.map(_.map(f)))
      }

    /**
      * This method applies a function that returns a tree to every element in the tree
      * @param f the function to be applied
      * @tparam U the type of the resulting tree
      * @return a new tree with the resulting trees
      */
      def flatMap[U](f: T => BinaryTree[U]): BinaryTree[U] = {
        val res = f(value)
        new BinaryTree[U](res.value, res.left.map(_.flatMap(f)), res.right.map(_.flatMap(f)))
      }
  }

  //Example usage:

  val tree = new BinaryTree(5, Option(new BinaryTree(3, Option(new BinaryTree(1, None, None)), Option(new BinaryTree(4, None, None)))), Option(new BinaryTree(8, Option(new BinaryTree(6, None, None)), None)))

  val mappedTree = tree.map(_ * 2) //BinaryTree[Int] = BinaryTree(10,Some(BinaryTree(6,Some(BinaryTree(2,None,None)),Some(BinaryTree(8,None,None)))),Some(BinaryTree(16,Some(BinaryTree(12,None,None)),None)))

  val flatMappedTree = tree.flatMap(i => new BinaryTree(i.toString, None, None)) //BinaryTree[String] = BinaryTree(5,Some(BinaryTree(3,Some(BinaryTree(1,None,None)),Some(BinaryTree(4,None,None)))),Some(BinaryTree(8,Some(BinaryTree(6,None,None)),None)))

  //Note: this code snippet is an oversimplified example and may not accurately represent best practices in Scala