// This is a comment in SCALA

// Importing libraries
import scala.collection.mutable.{Map, Set}

// Defining a class
class Person(age: Int, name: String) {
  // Class variables
  private var _age = age
  private var _name = name
  // Getter and setter methods
  def age: Int = _age
  def name: String = _name
  def age_=(newAge: Int): Unit = _age = newAge
  // Defining a method inside the class
  def description: String = s"My name is ${_name} and I am ${_age} years old."
}

// Defining a companion object for the Person class
object Person {
  // Method to create a new Person instance
  def create(age: Int, name: String): Person = new Person(age, name)
}

// Creating instances of the Person class
val person1 = Person.create(25, "John")
val person2 = Person.create(30, "Amy")

// Creating a Map of Integers and Strings
val ageMap = Map(1 -> "One", 2 -> "Two", 3 -> "Three")

// Iterating through the map
for ((key, value) <- ageMap) {
  println(s"The key is ${key} and the value is ${value}")
}

// Creating a Set of names
val nameSet = Set("John", "Amy", "Mike")

// Checking if a name exists in the Set
if (nameSet.contains("John")) {
  println("John exists in the set")
}

// Creating a higher order function to double a given integer
def doubleFunc(x: Int, func: Int => Int): Int = {
  func(x) * 2
}

// Calling the higher order function with an anonymous function
val result = doubleFunc(5, (x: Int) => x * x)

// Printing the result
println(s"The result is ${result}")