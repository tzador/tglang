/**
*
*
* The following code snippet creates an abstract class Shape and two subclasses Rectangle and Circle
* that inherit from Shape. It also implements the trait Measurements for calculating the area and perimeter of shapes.
*
*
**/

// Abstract class Shape with two abstract methods for calculating area and perimeter
abstract class Shape {
  def area: Double
  def perimeter: Double
}

// Subclass Rectangle inheriting from Shape
class Rectangle(length: Double, width: Double) extends Shape {

  // Overridden methods for calculating area and perimeter
  override def area: Double = length * width
  override def perimeter: Double = 2 * (length + width)
}

// Subclass Circle inheriting from Shape
class Circle(radius: Double) extends Shape {

  // Overridden methods for calculating area and perimeter
  override def area: Double = Math.PI * radius * radius
  override def perimeter: Double = 2 * Math.PI * radius
}

// Trait Measurements with two abstract methods for calculating area and perimeter
trait Measurements {
  def area: Double
  def perimeter: Double
}

// Implementing the trait Measurements for the Rectangle subclass
class RectangleWithMeasurements(length: Double, width: Double) extends Measurements {
  override def area: Double = length * width
  override def perimeter: Double = 2 * (length + width)
}

// Implementing the trait Measurements for the Circle subclass
class CircleWithMeasurements(radius: Double) extends Measurements {
  override def area: Double = Math.PI * radius * radius
  override def perimeter: Double = 2 * Math.PI * radius
}