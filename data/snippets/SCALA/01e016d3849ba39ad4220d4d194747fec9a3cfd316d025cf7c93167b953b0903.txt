// This is a complex code snippet in SCALA

// Define a class called 'Complex'
class Complex(real: Double, imaginary: Double) {
  // Define a constructor with validation
  def this(real: Double) = this(real, 0)
  // Define field variables
  val r = real
  val i = imaginary
  // Define methods for complex arithmetic
  def +(that: Complex): Complex = 
    new Complex(r + that.r, i + that.i)
  def *(that: Complex): Complex = 
    new Complex(r*that.r - i*that.i, r*that.i + i*that.r)
  // Override toString method to print in proper format
  override def toString() = {
    if (i > 0) {
      r + " + " + i + "i"
    } else if (i < 0) {
      r + " - " + (-i) + "i"
    } else {
      r.toString
    }
  }
}

// Define main function
object Main {
  def main(args: Array[String]): Unit = {
    // Create an instance of Complex with real and imaginary values
    val complex1 = new Complex(2, 4)
    val complex2 = new Complex(5, -3)
    // Call methods on instances and print the results
    println(complex1 + complex2)
    println(complex1 * complex2)
    // Output:
    // 7 + i
    // 26 - 2i
  }
}