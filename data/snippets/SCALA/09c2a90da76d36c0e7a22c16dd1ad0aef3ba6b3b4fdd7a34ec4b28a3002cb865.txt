// Define a trait with two abstract methods
trait BankAccount {
  def deposit(amount: Int)
  def withdraw(amount: Int)
  // Define a concrete method with implementation
  def balance: Int = 0
}

// Create a class that extends the trait
class CheckingAccount extends BankAccount {
  private var balance = 0
  // Implement the deposit method
  def deposit(amount: Int): Unit = {
    balance += amount
  }
  // Implement the withdraw method
  def withdraw(amount: Int): Unit = {
    if(balance >= amount) {
      balance -= amount
    }
    else {
      throw new Exception("Insufficient balance")
    }
  }
}

// Create an instance of the CheckingAccount class
val checkingAccount = new CheckingAccount()
// Call the deposit method on the instance
checkingAccount.deposit(500)
// Call the balance method on the instance
// Output: 500 (annotated markdown code snippet)