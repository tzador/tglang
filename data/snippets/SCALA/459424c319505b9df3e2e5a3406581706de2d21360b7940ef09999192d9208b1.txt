/**
  * A class that represents a binary tree data structure
  * @constructor Creates a new binary tree with the given root node
  * @param root The root node of the binary tree
  * @tparam T The generic type of the binary tree elements
  */
  class BinaryTree[T](root: BinaryNode[T]) {

    /**
    * A method that traverses the binary tree and checks if it contains the given value
    * @param value The value to check for in the binary tree
    * @return Boolean indicating if the value is present in the binary tree
    */
    def contains(value: T): Boolean = {
      var found = false
      var currentNode = root

      // Helper function for recursively traversing the binary tree
      def helper(node: BinaryNode[T]): Unit = {
        if (!found && node != null) {
          if (node.value == value) found = true
          helper(node.left)
          helper(node.right)
        }
      }

      helper(currentNode)
      found
    }

    /**
    * A method that returns the height of the binary tree
    * @return Int representing the height of the binary tree
    */
    def height(): Int = {
      var maxDepth = 0
      var stack = List((root, 1))

      // Helper function for iteratively calculating the height of the binary tree
      def helper(): Unit = {
        if (stack.nonEmpty) {
          val (node, depth) = stack.head
          stack = stack.tail
          maxDepth = math.max(maxDepth, depth)
          if (node.left != null) stack = (node.left, depth + 1) :: stack
          if (node.right != null) stack = (node.right, depth + 1) :: stack
          helper()
        }
      }

      helper()
      maxDepth
    }
  }