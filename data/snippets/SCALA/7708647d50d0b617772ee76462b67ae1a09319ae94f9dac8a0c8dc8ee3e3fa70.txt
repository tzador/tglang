// Define a case class
case class Person(name: String, age: Int)

// Create a list of Person objects
val people = List(Person("John", 22), Person("Lisa", 32), Person("Thomas", 45), Person("Emily", 29))

// Filter the list by age greater than 30
val filteredList = people.filter(_.age > 30)

// Create a map of Person objects using their name as key and age as value
val map = people.map(person => person.name -> person.age).toMap

// Create a function that returns the sum of ages in a list of Person objects
def sumAges(people: List[Person]): Int = people.foldLeft(0)((total, person) => total + person.age)

// Invoke the function on the original list
val totalAge = sumAges(people)

// Display the results
println("Filtered by age: " + filteredList)
println("Map of names and ages: " + map)
println("Total age: " + totalAge)