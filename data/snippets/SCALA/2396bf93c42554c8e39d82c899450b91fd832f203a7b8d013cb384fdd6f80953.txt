/*
This is a complex code snippet in Scala
The purpose of this code is to sort a list of integers
using the QuickSort algorithm
*/

// Define a function to perform QuickSort
def quickSort(list: List[Int]): List[Int] = {
    // Base case: if the list is empty or has only one element, return the list
    if (list.isEmpty || list.tail.isEmpty) list
    // Recursive case: get the pivot as the last element in the list
    else {
        val pivot = list.last
        // Sort elements smaller than pivot into a new list
        val smaller = quickSort(list.filter(_ < pivot))
        // Sort elements larger than pivot into a new list
        val larger = quickSort(list.filter(_ > pivot))
        // Return the concatenated sorted lists with the pivot in between
        smaller ::: List(pivot) ::: larger
    }
}

// Define a list of unsorted integers
val unsortedList = List(3, 6, 1, 8, 2, 4, 5, 9, 7)

// Call the quickSort function on the unsorted list
val sortedList = quickSort(unsortedList)

// Print the sorted list
println(sortedList)

/* Output:
List(1, 2, 3, 4, 5, 6, 7, 8, 9)
*/

// This code snippet has a complexity of O(nlogn) as
// it has to split the list into smaller parts and sort each part separately before merging them back together.