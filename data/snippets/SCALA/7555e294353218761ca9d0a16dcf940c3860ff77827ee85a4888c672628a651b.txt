// This is a comment in Scala

/* This is also a comment in Scala
which can span multiple lines */ 

// This is an example of Scala code using a function with multiple parameters
def sum(a: Int, b: Int, c: Int, d: Int): Int = {
    a + b + c + d
}

// In Scala, functions can be passed as arguments to other functions
def operateOnFunction(f: (Int, Int) => Int, x: Int, y: Int): Int = {
    f(x,y)
}

// This is a partial function, only defined for even numbers
val divideEven: PartialFunction[Int, Int] = {
    case x if (x % 2 == 0) => x / 2
}

// In Scala, we can use pattern matching to handle different cases
val fruit = "apple"
fruit match {
    case "apple" => println("This is an apple")
    case "orange" => println("This is an orange")
    case _ => println("This is a fruit")
}

// Tuples are a data structure in Scala that can hold multiple values of different types
val myTuple: (String, Int, Boolean) = ("John", 25, true)

// We can access tuple elements using indexing, starting from 1
val name = myTuple._1 // name = "John"
val age = myTuple._2 // age = 25

// We can also declare and use classes in Scala
class Person(val name: String, val age: Int) {
    def sayHello(): Unit = {
        println(s"Hello, my name is $name and I am $age years old.")
    }
}

// Creating an instance of the Person class and calling the sayHello method
val john = new Person("John", 25)
john.sayHello()