/**
 * This is a custom case class that represents a Person.
 *
 * @param name the name of the person
 * @param age the age of the person in years
 * @param occupation the job title of the person
 * @param location the current location of the person
 * @param isEmployed a boolean flag indicating if the person is employed
 */
case class Person(name: String, age: Int, occupation: String, location: String, isEmployed: Boolean)

// Instantiate a new Person object using the case class and specify values for each parameter
val person1 = Person("John", 30, "Software Developer", "San Francisco", true)

// Print out the information for the person
println(s"${person1.name} is a ${person1.occupation} who is ${person1.age} years old and currently resides in ${person1.location}.")

// Create a list of Person objects
val personList = List(
  Person("Jane", 25, "Data Scientist", "New York", true),
  Person("Alex", 40, "Marketing Manager", "Chicago", true),
  Person("Emily", 35, "Graphic Designer", "Los Angeles", false)
)

// Filter the list to only include employed people
val employedPeople = personList.filter(_.isEmployed == true)

// Map the list to only include the names of each person
val names = employedPeople.map(_.name)

// Sort the list alphabetically
val sortedNames = names.sortWith(_ < _)

// Print out the sorted list of names
println(sortedNames)