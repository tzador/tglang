/**
* Example class with generically typed parameters
*
* @param A the type of the first parameter
* @param B the type of the second parameter
* @param C the type of the third parameter
*/
class Example[A, B, C] {
  /**
  * Applies a unary function to the first parameter
  *
  * @param f the function to be applied
  * @return an Example with the resulting value as the first parameter and the same value for the second and third parameters
  */
  def mapFirst(f: A => A): Example[A, B, C] = new Example(f(first), second, third) // Example of a generic method

  /**
  * Combines the first and second parameters using a binary function
  *
  * @param f the function to combine the first and second parameters
  * @return an Example with the resulting value as the first parameter and the same value for the second and third parameters
  */
  def combine(f: (A, B) => A): Example[A, B, C] = new Example(f(first, second), second, third) // Another example of a generic method

  /**
  * Filters out the third parameter if it meets the given condition
  *
  * @param condition the condition to be checked
  * @return an Example with the third parameter set to None if it meets the condition, otherwise the same Example object
  */
  def filterThird(condition: C => Boolean): Example[A, B, Option[C]] = {
    if (condition(third)) new Example(first, second, None)
    else new Example(first, second, Some(third)) // Example of pattern matching
  }

  /**
  * Nested function that calculates the sum of the first and second parameters
  *
  * @return the sum of the first and second parameters
  */
  private def sum(): A = {
    // Nested function with recursive addition
    def loop(a: A, b: A): A = {
      if (a == 0) b
      else loop(a - 1, b + 1)
    }
    loop(first, second)
  }
}