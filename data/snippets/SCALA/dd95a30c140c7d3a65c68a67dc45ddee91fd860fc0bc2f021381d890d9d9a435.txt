/**
* The following code snippet creates a class and implements a function that checks if a given number is prime.
*/
class PrimeChecker {
  
  /**
  * This function takes in a number and checks if it is prime using trial division algorithm.
  * @param num the number to be checked
  * @return true if the given number is prime, otherwise false
  */
  def isPrime(num: Int): Boolean = {
    /**
    * The algorithm checks for prime numbers using the rules that every prime number is either 2 or a multiple of an odd number.
    * Also, the algorithm only iterates through the odd numbers starting from 3 up to the square root of the given number.
    * If any of the odd numbers divides evenly into the given number, then the given number is not prime.
    */
    if (num == 2) return true                  // 2 is the only even prime number
    else if (num < 2 || num % 2 == 0) return false  // negative numbers, 0 and even numbers (except 2) are not prime
    else if (num == 3) return true                  // 3 is prime
    else {
      val maxDiv = Math.sqrt(num).toInt + 1    // highest odd number to check for divisibility
      for (n <- 3 to maxDiv by 2) {
        if (num % n == 0) return false               // if odd number divides evenly, then it is not prime
      }
    }
    return true                             // if none of the above conditions satisfy, then the number is prime
  }
}

/**
* An object is created to test the PrimeChecker class, and the result is printed to the console.
*/
object TestPrimeChecker extends App {
  val checker = new PrimeChecker()
  val prime = 31
  val nonPrime = 91
  println(prime + " is prime? " + checker.isPrime(prime))         // prints "31 is prime? true"
  println(nonPrime + " is prime? " + checker.isPrime(nonPrime))   // prints "91 is prime? false"
}