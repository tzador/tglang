// Define a case class to represent a person with name, age, and gender
case class Person(name: String, age: Int, gender: String)

// Create an instance of the Person case class
val person1 = Person("John", 25, "male")

// Define a list of Persons
val peopleList = List(
    Person("Sarah", 32, "female"),
    Person("Mike", 41, "male"),
    Person("Emily", 19, "female")
)

// Define a function that filters the list of Persons based on a specified age
def filterByAge(personList: List[Person], age: Int): List[Person] = {
    // Use pattern matching to filter out Person objects with age greater than the specified age
    personList match {
        case Nil => Nil // if list is empty, return empty list
        case head :: tail => { // otherwise, check head of list
            if (head.age > age) filterByAge(tail, age) // if age is greater, call function again with tail of list
            else head :: filterByAge(tail, age) // if age is less or equal, add head to returned list and call function with tail
        }
    }
}

// Call the function with age 30 to filter the list of Persons
val filteredList = filterByAge(peopleList, 30)

/* Output:
 List(
    Person("Mike", 41, "male"),
    Person("Sarah", 32, "female")
 )
*/