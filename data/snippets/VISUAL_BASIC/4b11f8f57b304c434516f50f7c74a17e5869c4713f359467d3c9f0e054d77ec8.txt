Public Class Employee
    'A class representing an employee
    Public Property Name As String 'Property containing employee's name
    Public Property HourlyRate As Double 'Property containing employee's hourly rate
    Private Property TotalSales As Double 'Private property containing employee's total sales
    Public Property CommissionRate As Double 'Property containing employee's commission rate

    'Constructor for the Employee class
    Public Sub New(ByVal name As String, ByVal hourlyRate As Double, ByVal commissionRate As Double)
        Me.Name = name 'Initializing employee's name
        Me.HourlyRate = hourlyRate 'Initializing employee's hourly rate
        Me.CommissionRate = commissionRate 'Initializing employee's commission rate
    End Sub

    'Method to calculate employee's weekly pay
    Public Function CalculatePay(ByVal hoursWorked As Double) As Double
        Dim basePay As Double = hoursWorked * HourlyRate 'Calculating base pay for hours worked
        Dim commission As Double = TotalSales * CommissionRate 'Calculating commission based on total sales
        Dim totalPay As Double = basePay + commission 'Adding base pay and commission for total weekly pay
        Return totalPay 'Returning total pay to calling code
    End Function

    'Method to add employee's sales to total sales
    Public Sub AddSales(Byval salesAmount As Double)
        TotalSales += salesAmount 'Adding sales amount to total sales
    End Sub
End Class

'Main code
Sub Main()
    'Creating new instance of Employee class
    Dim newEmployee As New Employee("John Smith", 20, 0.15)
    'Adding sales for employee
    newEmployee.AddSales(500)
    'Calculating pay for 40 hours worked
    Dim weeklyPay As Double = newEmployee.CalculatePay(40)
    Console.WriteLine($"Weekly pay for {newEmployee.Name}: {weeklyPay}") 'Printing weekly pay for employee
End Sub