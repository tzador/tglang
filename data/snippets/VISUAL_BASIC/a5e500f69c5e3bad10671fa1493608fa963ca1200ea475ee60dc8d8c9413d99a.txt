' This subroutine checks if the input number is a prime number

Sub checkPrimeNumber(number As Integer)

    Dim isPrime, i As Integer
    isPrime = 1 ' Indicator for prime number

    If number <= 1 Then
        isPrime = 0 ' If number is 1 or less, not prime
    Else
        ' Loop through numbers 2 to number - 1
        For i = 2 To number - 1
            ' Check if number is divisible by any number in that range
            If number Mod i = 0 Then
                isPrime = 0 ' If divisible, not prime
                Exit For ' Exit loop
            End If
        Next i
    End If
    
    ' Print result based on isPrime value
    If isPrime = 1 Then
        Debug.Print number & " is a prime number."
    Else
        Debug.Print number & " is not a prime number."
    End If

End Sub

' Example call to the subroutine
checkPrimeNumber(17) ' Output: 17 is a prime number.
checkPrimeNumber(12) ' Output: 12 is not a prime number.

' Explanation:
'
' This subroutine takes in an input number and checks if it is a prime number.
' The first line defines the subroutine and specifies the input parameter as an integer.
' Then, two variables are declared - isPrime to indicate the status of the number and i for the loop counter.
' The isPrime variable is initialized to 1, assuming the number is prime.
' Next, an if statement checks if the number is less than or equal to 1. If so, the number cannot be prime and isPrime is set to 0.
' If the number is greater than 1, a for loop is used to check every number from 2 to number - 1 (as 1 and number itself are not considered).
' Within the loop, the number is checked if it is divisible by the counter value. If so, it is not prime and the loop is exited using the exit statement.
' After the loop, another if statement is used to print the result based on the value of isPrime.
' Finally, an example call to the subroutine is shown, where 17 is a prime number and 12 is not.