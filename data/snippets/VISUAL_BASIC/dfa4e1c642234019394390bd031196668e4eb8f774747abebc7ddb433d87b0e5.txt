' This code snippet generates a random maze using depth-first search algorithm

' Define the size of the maze
Const rows As Integer = 10
Const columns As Integer = 10

' Create an empty maze
Dim maze(rows, columns) As String

' Set the starting position as (0,0)
Dim currentRow As Integer = 0
Dim currentColumn As Integer = 0

' Create a stack to keep track of visited cells
Dim visitedCells As New Stack()

' Create a random number generator
Dim rand As New Random()

' Set the current cell as visited
maze(currentRow, currentColumn) = "Visited"

' Loop until all cells are visited
While visitedCells.Count > 0

    ' Get the unvisited neighboring cells
    Dim neighborCells As New List(Of String)

    ' Top neighbor
    If currentRow - 1 >= 0 And maze(currentRow - 1, currentColumn) = "" Then
        neighborCells.Add("Top")
    End If

    ' Bottom neighbor
    If currentRow + 1 < rows And maze(currentRow + 1, currentColumn) = "" Then
        neighborCells.Add("Bottom")
    End If

    ' Left neighbor
    If currentColumn - 1 >= 0 And maze(currentRow, currentColumn - 1) = "" Then
        neighborCells.Add("Left")
    End If

    ' Right neighbor
    If currentColumn + 1 < columns And maze(currentRow, currentColumn + 1) = "" Then
        neighborCells.Add("Right")
    End If

    ' If there are unvisited neighboring cells
    If neighborCells.Count > 0 Then

        ' Choose a random neighboring cell
        Dim randIndex As Integer = rand.Next(neighborCells.Count)
        Dim nextCell As String = neighborCells(randIndex)

        ' Remove walls between current cell and chosen neighbor
        Select Case nextCell
            Case "Top"
                maze(currentRow, currentColumn) &= "Top:Visited"
                maze(currentRow - 1, currentColumn) &= "Bottom:Visited"
            Case "Bottom"
                maze(currentRow, currentColumn) &= "Bottom:Visited"
                maze(currentRow + 1, currentColumn) &= "Top:Visited"
            Case "Left"
                maze(currentRow, currentColumn) &= "Left:Visited"
                maze(currentRow, currentColumn - 1) &= "Right:Visited"
            Case "Right"
                maze(currentRow, currentColumn) &= "Right:Visited"
                maze(currentRow, currentColumn + 1) &= "Left:Visited"
        End Select

        ' Push current cell to stack
        visitedCells.Push(currentRow & "_" & currentColumn)

        ' Set chosen neighbor cell as current cell
        Select Case nextCell
            Case "Top"
                currentRow -= 1
            Case "Bottom"
                currentRow += 1
            Case "Left"
                currentColumn -= 1
            Case "Right"
                currentColumn += 1
        End Select

        ' Set chosen neighbor cell as visited
        maze(currentRow, currentColumn) = "Visited"

    ' If there are no unvisited neighboring cells
    Else
        ' Pop a cell from stack
        Dim cell As String = visitedCells.Pop()

        ' Set popped cell as current cell
        Dim cellIndexes() As String = cell.Split("_")
        currentRow = Convert.ToInt32(cellIndexes(0))
        currentColumn = Convert.ToInt32(cellIndexes(1))
    End If
End While

' Print the maze
For i As Integer = 0 To rows -1
    For j As Integer = 0 To columns -1
        Console.Write(maze(i, j) & " ")
    Next
    Console.WriteLine()
Next