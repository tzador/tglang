' This code defines a class called "Employee" with various properties and methods
Public Class Employee 
    ' Declare private variables for encapsulation
    Private _id As Integer, _name As String, _salary As Double
    Private _department As String, _position As String, _hired As Boolean

    ' Add property procedures for each variable
    Public Property ID() As Integer
        Get
            Return _id
        End Get
        Set(value As Integer)
            ' Validate input before setting
            If value > 0 Then
                _id = value
            Else
                ' Throw an error if input is invalid
                Throw New ArgumentException("ID must be a positive integer")
            End If
        End Set
    End Property

    Public Property Name() As String
        Get
            Return _name
        End Get
        Set(value As String)
            ' Validate input before setting
            If Not String.IsNullOrEmpty(value) Then
                _name = value
            Else
                ' Throw an error if input is invalid
                Throw New ArgumentException("Name cannot be empty")
            End If
        End Set
    End Property

    Public Property Salary() As Double
        Get
            Return _salary
        End Get
        Set(value As Double)
            ' Validate input before setting
            If value > 0 Then
                _salary = value
            Else
                ' Throw an error if input is invalid
                Throw New ArgumentException("Salary must be a positive number")
            End If
        End Set
    End Property

    Public Property Department() As String
        Get
            Return _department
        End Get
        Set(value As String)
            ' Validate input before setting
            If Not String.IsNullOrEmpty(value) Then
                _department = value
            Else
                ' Throw an error if input is invalid
                Throw New ArgumentException("Department cannot be empty")
            End If
        End Set
    End Property

    Public Property Position() As String
        Get
            Return _position
        End Get
        Set(value As String)
            ' Validate input before setting
            If Not String.IsNullOrEmpty(value) Then
                _position = value
            Else
                ' Throw an error if input is invalid
                Throw New ArgumentException("Position cannot be empty")
            End If
        End Set
    End Property

    Public Property Hired() As Boolean
        Get
            Return _hired
        End Get
        Set(value As Boolean)
            _hired = value
        End Set
    End Property

    ' Add a method to give an employee a raise
    Public Sub GiveRaise(amount As Double)
        ' Validate input before proceeding
        If amount > 0 Then
            ' Check if employee is already hired
            If Hired Then
                ' Give the raise by adding it to the current salary
                Salary += amount
            Else
                ' If not hired, throw an error
                Throw New InvalidOperationException("Employee is not currently hired")
            End If
        Else
            ' If input is invalid, throw an error
            Throw New ArgumentException("Raise amount must be a positive number")
        End If
    End Sub
End Class