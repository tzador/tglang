#Region "Data"

' Declaring constants for maximum number of students and courses
Const MAX_STUDENTS As Integer = 50
Const MAX_COURSES As Integer = 10

' Creating arrays to store student data
Dim studentNames(MAX_STUDENTS) As String       ' Array for student names
Dim studentGrades(MAX_STUDENTS, MAX_COURSES) As Double    ' Array for student grades
Dim studentGPA(MAX_STUDENTS) As Double         ' Array for student GPAs

' Creating arrays to store course data
Dim courseNames(MAX_COURSES) As String          ' Array for course names
Dim courseCredits(MAX_COURSES) As Integer       ' Array for course credits
Dim courseGrades(MAX_COURSES) As Double         ' Array for course grades

#End Region

#Region "Subroutines and Functions"

' Subroutine to add a new student
Sub AddStudent(ByVal name As String)

    ' Check if maximum number of students has been reached
    If Array.IndexOf(studentNames, Nothing) = -1 Then
        Console.WriteLine("Maximum number of students has been reached.")
    Else
        ' Find first available index in studentNames array
        Dim index As Integer = Array.IndexOf(studentNames, Nothing)

        ' Add student name to array
        studentNames(index) = name

        ' Initialize student GPA to 0
        studentGPA(index) = 0

        ' Display confirmation message
        Console.WriteLine("Student {0} has been added successfully.", name)
    End If

    ' Wait for user input
    Console.ReadLine()

End Sub

' Function to calculate student's GPA
Function CalculateGPA(ByVal studentIndex As Integer) As Double

    ' Initialize total grade points and total credits to 0
    Dim totalGradePoints As Double = 0
    Dim totalCredits As Integer = 0

    ' Loop through course grades for the specified student
    For Each grade As Double In studentGrades(studentIndex)

        ' Check if grade is not 0 (i.e. course was taken)
        If grade <> 0 Then
            ' Update total grade points and total credits
            totalGradePoints += grade * courseCredits(Array.IndexOf(studentGrades(studentIndex), grade))
            totalCredits += courseCredits(Array.IndexOf(studentGrades(studentIndex), grade))
        End If
    Next

    ' Return calculated GPA
    Return totalGradePoints / totalCredits
    
End Function

#End Region

#Region "Main"

' Prompt user for number of students
Console.Write("How many students do you want to add? ")
Dim numStudents As Integer = Console.ReadLine()

' Loop through the number of students entered
For i As Integer = 1 To numStudents

    ' Prompt user for student name
    Console.Write("Enter student #{0}'s name: ", i)
    Dim name As String = Console.ReadLine()

    ' Add student to studentNames array
    AddStudent(name)

    ' Prompt user for number of courses for the student
    Console.Write("How many courses did {0} take? ", name)
    Dim numCourses As Integer = Console.ReadLine()

    ' Loop through the number of courses entered
    For j As Integer = 1 To numCourses

        ' Prompt user for course name
        Console.Write("Enter course #{0}'s name: ", j)
        Dim courseName As String = Console.ReadLine()

        ' Add course name to courseNames array
        courseNames(j - 1) = courseName

        ' Prompt user for course credits
        Console.Write("Enter course #{0}'s credits: ", j)
        Dim credits As Integer = Console.ReadLine()

        ' Add course credits to courseCredits array
        courseCredits(j - 1) = credits

        ' Prompt user for course grade
        Console.Write("Enter course #{0}'s grade (out of 100): ", j)
        Dim grade As Double = Console.ReadLine()

        ' Add course grade to courseGrades array
        courseGrades(j - 1) = grade

        ' Update student grades array with course grade
        studentGrades(i - 1, j - 1) = grade
    Next

    ' Calculate student's GPA
    studentGPA(i - 1) = CalculateGPA(i - 1)

    ' Display student's information
    Console.WriteLine("Student #{0}: {1}", i, studentNames(i - 1))
    Console.WriteLine("GPA: {0}", studentGPA(i - 1))
    Console.WriteLine("Courses taken:")
    For j As Integer = 1 To numCourses
        Console.WriteLine("{0} - {1} credits - Grade:{2}", courseNames(j - 1), courseCredits(j - 1), courseGrades(j - 1))
    Next

    ' Wait for user input
    Console.ReadLine()

Next

#End Region