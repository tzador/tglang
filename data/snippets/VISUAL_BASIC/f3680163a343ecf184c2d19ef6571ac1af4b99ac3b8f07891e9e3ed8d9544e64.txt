Imports System

' A class to represent a bank account
Public Class BankAccount

    ' Private fields for storing account number, owner name, and balance
    Private _accountNumber As String
    Private _ownerName As String
    Private _balance As Double

    ' Constructor to initialize account number and owner name
    Public Sub New(accountNumber As String, ownerName As String)
        _accountNumber = accountNumber
        _ownerName = ownerName
        _balance = 0 ' Initialize balance to 0
    End Sub

    ' Property for accessing and modifying account number
    Public Property AccountNumber As String
        Get
            Return _accountNumber
        End Get
        Set(value As String)
            _accountNumber = value
        End Set
    End Property

    ' Property for accessing and modifying owner name
    Public Property OwnerName As String
        Get
            Return _ownerName
        End Get
        Set(value As String)
            _ownerName = value
        End Set
    End Property

    ' Property for accessing and modifying balance
    Public Property Balance As Double
        Get
            Return _balance
        End Get
        Set(value As Double)
            _balance = value
        End Set
    End Property

    ' A method to deposit money into the account
    Public Sub Deposit(amount As Double)
        _balance += amount
    End Sub

    ' A method to withdraw money from the account
    Public Sub Withdraw(amount As Double)
    
        ' Check if amount is not greater than balance
        If amount > _balance Then
            Throw New ArgumentException("Insufficient balance")
        End If
        
        ' If amount is valid, deduct from balance
        _balance -= amount
    End Sub

    ' A method to transfer money from this account to another account
    Public Sub Transfer(amount As Double, destination As BankAccount)
    
        ' Withdraw money from this account
        Withdraw(amount)
        
        ' Deposit money into destination account
        destination.Deposit(amount)
    End Sub
    
End Class

' A class to represent a savings account, inherits from BankAccount
Public Class SavingsAccount
    Inherits BankAccount
    
    ' Private field for storing interest rate
    Private _interestRate As Double
    
    ' Constructor to initialize account number, owner name, and interest rate
    Public Sub New(accountNumber As String, ownerName As String, interestRate As Double)
        MyBase.New(accountNumber, ownerName)
        _interestRate = interestRate
    End Sub
    
    ' Property for accessing and modifying interest rate
    Public Property InterestRate As Double
        Get
            Return _interestRate
        End Get
        Set(value As Double)
            _interestRate = value
        End Set
    End Property
    
    ' A method to calculate and add interest to the account
    Public Sub CalculateInterest()
        Dim interest As Double = _balance * (_interestRate/100)
        Deposit(interest)
    End Sub
End Class

' Main code block
Sub Main()
    
    ' Create a new bank account object with account number and owner name
    Dim myAccount As New BankAccount("123456789", "John Smith")

    ' Deposit $500 into the account
    myAccount.Deposit(500)

    ' Withdraw $200 from the account
    myAccount.Withdraw(200)

    ' Display the current balance
    Console.WriteLine("Current balance: $" & myAccount.Balance)

    ' Create a new savings account with account number, owner name, and interest rate
    Dim mySavingsAccount As New SavingsAccount("987654321", "Jane Smith", 5)

    ' Deposit $1000 into the savings account
    mySavingsAccount.Deposit(1000)

    ' Calculate interest on the savings account
    mySavingsAccount.CalculateInterest()

    ' Display the current balance
    Console.WriteLine("Current savings balance: $" & mySavingsAccount.Balance)

    ' Transfer $500 from bank account to savings account
    myAccount.Transfer(500, mySavingsAccount)

    ' Display the balances of both accounts
    Console.WriteLine("New bank account balance: $" & myAccount.Balance)
    Console.WriteLine("New savings account balance: $" & mySavingsAccount.Balance)

End Sub