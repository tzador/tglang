' This is a function that returns the largest element in an integer array
Function GetMaxValue(arr As Integer()) As Integer
    ' Initialize variable to store largest element
    Dim max As Integer = arr(0)
    ' Loop through the array to compare each element with the current max value
    For i As Integer = 1 To arr.Length - 1
        ' Check if current element is larger than max value
        If arr(i) > max Then
            ' If it is, update the max value
            max = arr(i)
        End If
    Next
    ' Return the max value
    Return max
End Function

' This is a sub procedure that sorts an array of strings in descending order
Sub SortDescending(arr As String())
    ' Loop through the array to compare each element with the following elements
    For i As Integer = 0 To arr.Length - 1
        ' Loop through the remaining elements to compare with current element
        For j As Integer = i + 1 To arr.Length - 1
            ' Check if current element is smaller than the one being compared with
            If arr(i) < arr(j) Then
                ' If it is, swap their positions in the array
                Dim temp As String = arr(i)
                arr(i) = arr(j)
                arr(j) = temp
            End If
        Next
    Next
End Sub

' This is a class that represents a car
Class Car
    ' Properties for the car's make, model, and year
    Public Property Make As String
    Public Property Model As String
    Public Property Year As Integer

    ' Constructor for the class
    Public Sub New(make As String, model As String, year As Integer)
        ' Set the properties to the values passed in
        Me.Make = make
        Me.Model = model
        Me.Year = year
    End Sub

    ' Method to display the car's information
    Public Sub ShowInfo()
        ' Concatenate the car's make, model, and year into a string
        Dim info As String = "This car is a " & Me.Year & " " & Me.Make & " " & Me.Model
        ' Display the string in a message box
        MsgBox(info)
    End Sub
End Class

' This is an interface that defines the methods and properties for a shape
Interface IShape
    ' Property for the shape's color
    Property Color As String

    ' Method to calculate the shape's area
    Function CalculateArea() As Double
End Interface

' This is a class that represents a rectangle and implements the IShape interface
Class Rectangle Implements IShape
    ' Property for the rectangle's dimensions
    Public Property Width As Double
    Public Property Height As Double
    ' Property from the IShape interface
    Public Property Color As String Implements IShape.Color

    ' Constructor for the class
    Public Sub New(width As Double, height As Double, color As String)
        ' Set the properties to the values passed in
        Me.Width = width
        Me.Height = height
        Me.Color = color
    End Sub

    ' Implementation of the CalculateArea method from the IShape interface
    Public Function CalculateArea() As Double Implements IShape.CalculateArea
        ' Calculate the area by multiplying the width and height
        Dim area As Double = Me.Width * Me.Height
        ' Return the area
        Return area
    End Function
End Class