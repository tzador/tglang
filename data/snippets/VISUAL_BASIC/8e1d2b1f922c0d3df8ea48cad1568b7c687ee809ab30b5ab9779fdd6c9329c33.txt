Option Explicit
' Specifying explicit declaration of variables

Sub Main()
    Dim x As Integer = 5 ' Declaring and initializing a variable
    Dim y As Integer = 7 ' Declaring and initializing another variable
    Dim z As Integer ' Declaring a third variable
    
    z = x + y ' Assigning a value to the third variable by performing an operation
    
    ' Displaying the result
    Console.WriteLine("The sum of " & x & " and " & y & " is " & z)
    
    Dim i As Integer ' Declaring a loop counter variable
    
    ' Looping through a set of numbers
    For i = 1 To 10
        ' Checking if the current number is divisible by 2
        If i Mod 2 = 0 Then
            ' If yes, display the number
            Console.WriteLine(i)
        End If
    Next i
    
    ' Creating a string variable
    Dim name As String = "John"
    
    ' Using string interpolation to display a message with the variable value
    Console.WriteLine($"Hello {name}!")
    
    ' Creating a class
    Class Car
        ' Declaring properties of the class
        Public Property Model As String
        Public Property Year As Integer
        
        ' Creating a method
        Public Sub DisplayInfo()
            ' Displaying the car's information using the properties
            Console.WriteLine($"The car model is {Model} and it was made in {Year}.")
        End Sub
    End Class
    
    ' Initializing an instance of the class
    Dim myCar As New Car()
    
    ' Assigning values to the properties
    myCar.Model = "Honda Civic"
    myCar.Year = 2015
    
    ' Calling the method to display the car's information
    myCar.DisplayInfo()
    
    ' Creating a function to add two numbers
    Function AddNumbers(num1 As Integer, num2 As Integer) As Integer
        Return num1 + num2
    End Function
    
    ' Calling the function and storing the result in a variable
    Dim result As Integer = AddNumbers(3, 4)
    
    ' Displaying the result
    Console.WriteLine($"The sum of 3 and 4 is {result}.")
    
    ' Creating a sub procedure to display a message
    Public Sub DisplayMessage()
        Console.WriteLine("This is a message from a sub procedure.")
    End Sub
    
    ' Calling the subroutine
    DisplayMessage()
    
    ' Creating a multi-dimensional array
    Dim matrix(2, 2) As Integer
    
    ' Storing values in the array
    matrix(0, 0) = 1
    matrix(0, 1) = 2
    matrix(1, 0) = 3
    matrix(1, 1) = 4
    
    ' Accessing values from the array and displaying them
    Console.WriteLine($"The value at position (0,0) is {matrix(0, 0)}.")
    Console.WriteLine($"The value at position (0,1) is {matrix(0, 1)}.")
    Console.WriteLine($"The value at position (1,0) is {matrix(1, 0)}.")
    Console.WriteLine($"The value at position (1,1) is {matrix(1, 1)}.")
    
    ' Creating a user-defined data type (structure)
    Structure Person
        ' Declaring data fields
        Public Name As String
        Public Age As Integer
    End Structure
    
    ' Initializing a variable of type Person
    Dim john As Person
    
    ' Assigning values to the data fields
    john.Name = "John Smith"
    john.Age = 30
    
    ' Displaying the person's information
    Console.WriteLine($"{john.Name} is {john.Age} years old.")
    
    ' Creating a dynamic array of type Person
    Dim people() As Person
    
    ' Resizing the array to store 3 elements
    ReDim people(2)
    
    ' Adding values to the array
    people(0).Name = "Jane Doe"
    people(0).Age = 25
    people(1).Name = "Bob Johnson"
    people(1).Age = 40
    people(2).Name = "Sarah Williams"
    people(2).Age = 35
    
    ' Looping through the array and displaying the information of each person
    For Each person In people
        Console.WriteLine($"{person.Name} is {person.Age} years old.")
    Next person
    
    ' Creating a custom exception class
    Class CustomException
        Inherits Exception ' Inheriting from the base Exception class
        
        ' Overriding the default constructor to set a custom message
        Public Sub New()
            MyBase.New("This is a custom exception.")
        End Sub
    End Class
    
    ' Creating a function that throws the custom exception
    Function ThrowCustomException() As Integer
        Throw New CustomException()
    End Function
    
    ' Calling the function inside a Try-Catch block to handle the exception
    Try
        ThrowCustomException()
    Catch ex As CustomException
        Console.WriteLine(ex.Message)
    End Try
End Sub

' Calling the Main subroutine to start the program
Main()