' The following code snippet demonstrates a complex sorting algorithm implemented in Visual Basic

Option Explicit

' Function to perform a QuickSort on a given array
Private Function QuickSort(ByRef arr As Variant, ByVal First As Integer, ByVal Last As Integer) As Variant
    Dim LowIndex As Integer
    Dim HighIndex As Integer
    Dim Pivot As Integer
    Dim Temp As Variant
   
    LowIndex = First
    HighIndex = Last
    Pivot = arr((First + Last) / 2) ' Choosing the middle element as the pivot
   
    ' Partitioning the array
    Do While (LowIndex <= HighIndex)
        While (arr(LowIndex) < Pivot)
            LowIndex = LowIndex + 1
        End While
       
        While (arr(HighIndex) > Pivot)
            HighIndex = HighIndex - 1
        End While
       
        If (LowIndex <= HighIndex) Then
            ' Swapping the elements
            Temp = arr(LowIndex)
            arr(LowIndex) = arr(HighIndex)
            arr(HighIndex) = Temp
           
            LowIndex = LowIndex + 1
            HighIndex = HighIndex - 1
        End If
    Loop
   
    ' Recursively calling the QuickSort function on the subarrays
    If (First < HighIndex) Then Call QuickSort(arr, First, HighIndex)
    If (LowIndex < Last) Then Call QuickSort(arr, LowIndex, Last)
   
    QuickSort = arr
End Function

Sub Main()
    ' Sample array
    Dim nums As Variant
    nums = Array(9, 5, 2, 7, 3, 6, 8, 1, 4)
   
    ' Sorting the array using QuickSort
    nums = QuickSort(nums, 0, UBound(nums))
   
    ' Outputting the sorted array
    For i = LBound(nums) To UBound(nums)
        Debug.Print nums(i)
    Next i
End Sub

' Output:
' 1
' 2
' 3
' 4
' 5
' 6
' 7
' 8
' 9