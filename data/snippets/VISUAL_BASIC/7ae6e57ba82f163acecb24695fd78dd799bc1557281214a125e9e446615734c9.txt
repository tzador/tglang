Public Class Person 'Creates a new class called Person
    
    Private _firstName As String 'Private variable to store first name
    Private _lastName As String 'Private variable to store last name
    
    'Public property to access and set first name
    Public Property FirstName() As String 
        Get
            Return _firstName 'Returns the stored first name
        End Get
        Set(ByVal value As String) 
            _firstName = value 'Sets the first name to the passed in value
        End Set
    End Property
    
    'Public property to access and set last name
    Public Property LastName() As String
        Get
            Return _lastName 'Returns the stored last name
        End Get
        Set(ByVal value As String)
            _lastName = value 'Sets the last name to the passed in value
        End Set
    End Property
    
    'Public function to get full name as a string
    Public Function GetFullName() As String
        Return _firstName + " " + _lastName 'Concatenates first and last name with a space
    End Function
    
    'Public subroutine to print full name
    Public Sub PrintFullName()
        Console.WriteLine(GetFullName()) 'Calls the GetFullName function and prints it to the console
    End Sub
    
    'Public constructor to initialize a new Person object with a first and last name
    Public Sub New(ByVal firstName As String, ByVal lastName As String)
        _firstName = firstName 'Sets the first name using the passed in value
        _lastName = lastName 'Sets the last name using the passed in value
    End Sub
    
    'Public shared function to check if two Person objects have the same first and last name
    Public Shared Function IsSameName(ByVal person1 As Person, ByVal person2 As Person) As Boolean
        Return person1.FirstName = person2.FirstName AndAlso person1.LastName = person2.LastName 'Uses conditional AND operator to check if both first and last names are equal
    End Function
    
    'Public shared subroutine to capitalize the first letter of a string
    Public Shared Sub CapitalizeFirstLetter(ByRef name As String) 'ByRef keyword indicates that parameter will be modified and passed back to the caller
        If Not String.IsNullOrEmpty(name) Then 'Checks if string is not null or empty
            name = Char.ToUpper(name(0)) + name.Substring(1) 'Converts first character to uppercase and concatenates it with the rest of the string
        End If
    End Sub
    
End Class

'Instantiating a new Person object with first and last name
Dim person1 As New Person("John", "Doe")
Console.WriteLine(person1.GetFullName()) 'Prints "John Doe" to the console

'Creating another Person object with the same first and last name
Dim person2 As New Person("John", "Doe")

'Using the IsSameName function to compare the two Person objects
If Person.IsSameName(person1, person2) Then
    Console.WriteLine("The two persons have the same name") 'Prints "The two persons have the same name" to the console
End If

'Capitalizing the first letter of the first name using the CapitalizeFirstLetter subroutine
Dim firstName As String = person1.FirstName
Person.CapitalizeFirstLetter(firstName)
Console.WriteLine("Capitalized first name: " + firstName) 'Prints "Capitalized first name: J" to the console