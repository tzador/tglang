' This code snippet demonstrates a complex sorting algorithm using Visual Basic

' Declare a function to perform bubble sort on an array of integers
' Takes in an array of integers as parameter
Function BubbleSort(nums() As Integer) As Integer()

    ' Get the length of the array
    Dim length As Integer = nums.Length

    ' Declare a boolean flag to keep track of swaps
    Dim swapped As Boolean = True

    ' Loop through the array until no more swaps are needed
    While swapped
        ' Set the flag to false
        swapped = False

        ' Loop through the array from index 0 to the second to last element
        For i As Integer = 0 To length - 2

            ' Check if the current element is greater than the next element
            If nums(i) > nums(i + 1) Then

                ' If it is, swap the elements
                Dim temp As Integer = nums(i)
                nums(i) = nums(i + 1)
                nums(i + 1) = temp

                ' Set the flag to true
                swapped = True

            End If

        Next
    End While
    
    ' Return the sorted array
    Return nums
    
End Function

' Declare an array of unsorted integers
Dim unsorted_nums() As Integer = {5, 2, 1, 8, 3}

' Call the bubble sort function and pass in the unsorted array
Dim sorted_nums() As Integer = BubbleSort(unsorted_nums)

' Loop through the sorted array and print out the elements
For i As Integer = 0 To sorted_nums.Length - 1
	Console.WriteLine(sorted_nums(i))
Next

' Output:
' 1
' 2
' 3
' 5
' 8