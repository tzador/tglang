' This is a comment in Visual Basic
Option Explicit 'Enforces explicit declaration of variables
#Const USE_NEW_FEATURES = False 'Sets the constant value to False

' Class declaration 
Class MyClass 'Defines a new class 
    Implements IMyInterface 'Implements the IMyInterface interface 

    #Region "Fields" 'Marks a block of code as a region for organization 
    Private myField As Integer 'Private field of type Integer
    Public Shared otherField As String = "Hello World!" 'Public shared field of type String with a default value
    #End Region
    
    #Region "Properties"
    Public Property MyProperty As String 'Public property of type String
        Get 'Property getter
            Return _myProperty 
        End Get
        Set(value As String) 'Property setter
            _myProperty = value
        End Set
    End Property
    #End Region
    
    #Region "Methods"
    Public Sub New() 'Class constructor
        ' Initialize fields and properties
        myField = 10
        _myProperty = "Default"
    End Sub
    
    Public Function MyMethod(num As Integer) As String 'Public function with a parameter and return type of String
        Dim result As String = "Result = " & (myField * num) 'Variable declaration and assignment
        Return result 'Return statement
    End Function
    
    Private Overridable Function ProtectedMethod() As Boolean 'Private overridable function with return type of Boolean
        Return True 'Return statement
    End Function
    
    Protected NotOverridable Sub ProtectedSub() 'Protected not overridable sub procedure
        ' Do something
    End Sub
    
    Public Sub UseExtensionMethods() 'Public sub procedure
        Dim num As Integer = 20
        Dim result As Integer = num.MyExtensionMethod() 'Using an extension method on an Integer variable
        #If USE_NEW_FEATURES Then 'Conditional compilation directive
            Console.WriteLine("Result = " & result)
        #Else
            Console.WriteLine("New features are not enabled")
        #End If
    End Sub
    #End Region
    
    #Region "Events"
    Public Event MyEvent As EventHandler 'Public event declaration
    #End Region
End Class

' Module declaration
Module MyModule 
    Public Sub Main() 'Main sub procedure
        Dim myClassObj As New MyClass() 'Class instance creation
        Console.WriteLine(myClassObj.MyMethod(5)) 'Calling a class method
        myClassObj.MyProperty = "New value" 'Setting property value
        Console.WriteLine(myClassObj.MyProperty) 'Getting property value
        Console.WriteLine(MyClass.otherField) 'Accessing shared field
        AddHandler myClassObj.MyEvent, AddressOf HandleEvent 'Adding an event handler
        RaiseEvent myClassObj.MyEvent() 'Raising an event
        myClassObj.UseExtensionMethods() 'Calling a class sub procedure
    End Sub
    
    Private Sub HandleEvent(sender As Object, e As EventArgs) 'Event handler sub procedure
        Console.WriteLine("Event handled") 'Console output
    End Sub
End Module