' This code snippet performs a quicksort algorithm on an array of integers
Option Explicit

Sub QuickSort(ByRef arr() As Integer, ByVal L As Long, ByVal R As Long)
    Dim i As Long
    Dim j As Long
    Dim pivot As Integer
    Dim temp As Integer
    
    i = L
    j = R
    pivot = arr((L + R) \ 2) ' Pivot is the middle element of the array
    
    ' Partitioning step
    Do While (i <= j)
        ' Find the first element on the left that is greater than the pivot
        Do While (arr(i) < pivot)
            i = i + 1
        Loop
        
        ' Find the first element on the right that is less than the pivot
        Do While (arr(j) > pivot)
            j = j - 1
        Loop
        
        ' Swap the elements at i and j if i and j have not crossed each other
        If (i <= j) Then
            temp = arr(i)
            arr(i) = arr(j)
            arr(j) = temp
            i = i + 1
            j = j - 1
        End If
    Loop
    
    ' Recursively call QuickSort on the partitions
    If (L < j) Then QuickSort arr, L, j
    If (i < R) Then QuickSort arr, i, R
End Sub

' Example usage
Sub Example()
    Dim arr() As Integer
    Dim i As Integer
    
    ' Generate an array of random integers
    For i = 0 To UBound(arr)
        arr(i) = Int((100 * Rnd) + 1)
    Next i
    
    ' Print the unsorted array
    Debug.Print "Unsorted array: "
    For i = 0 To UBound(arr)
        Debug.Print arr(i)
    Next i
    
    ' Sort the array using QuickSort
    QuickSort arr, LBound(arr), UBound(arr)
    
    ' Print the sorted array
    Debug.Print "Sorted array: "
    For i = 0 To UBound(arr)
        Debug.Print arr(i)
    Next i
End Sub