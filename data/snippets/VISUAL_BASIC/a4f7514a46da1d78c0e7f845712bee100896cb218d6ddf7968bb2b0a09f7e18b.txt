Option Explicit 'forces explicit declaration of all variables in the code

Dim num1, num2, result As Integer 'declaration of multiple variables in one line, result is explicitly declared as Integer

num1 = 10 'assigning value to num1 variable
num2 = 5 'assigning value to num2 variable

result = num1 * num2 'performing multiplication operation and storing result in result variable

If result Mod 2 = 0 Then 'if condition to check if result is divisible by 2 with no remainder
    MsgBox "Result is an even number." 'displaying message box with the result is even number
Else 'if condition is not met
    MsgBox "Result is an odd number." 'displaying message box with the result is odd number
End If 'end of if statement

For i = 1 To num1 'for loop to iterate from 1 to num1 value, i is implicitly declared as Integer
    If i Mod 2 = 0 Then 'if condition to check if i is divisible by 2 with no remainder
        MsgBox i & " is an even number." 'displaying message box with the current value of i
    Else 'if condition is not met
        MsgBox i & " is an odd number." 'displaying message box with the current value of i
    End If 'end of if statement
Next i 'end of for loop

Select Case result 'select case statement to check the value of result variable
    Case 50 'if result is equal to 50
        MsgBox "Result is equal to 50." 'displaying message box with the result is equal to 50
    Case Is > 50 'if result is greater than 50
        MsgBox "Result is greater than 50." 'displaying message box with the result is greater than 50
    Case Is < 50 'if result is less than 50
        MsgBox "Result is less than 50." 'displaying message box with the result is less than 50
End Select 'end of select case statement

Sub PrintMessage() 'declaring and defining a sub procedure
    MsgBox "Printing from sub procedure." 'displaying message box with the printed message
    result = result + 1 'updating result variable
End Sub 'end of sub procedure

Call PrintMessage 'calling the sub procedure to execute its code

Dim arr(5) As String 'declaring an array variable with 5 elements, all elements are explicitly declared as String
arr(0) = "Hello" 'assigning value to first element of the array
arr(1) = "World" 'assigning value to second element of the array

For Each item In arr 'for each loop to iterate through each element in the array
    MsgBox item 'displaying message box with the current element value
Next item 'end of for each loop

Dim num3 As Integer 'declaring a variable for a nested if statement
num3 = 60 'assigning value to num3 variable

If result > 50 Then 'if condition to check if result is greater than 50
    If num3 Mod 2 = 0 Then 'if condition to check if num3 is divisible by 2 with no remainder
        MsgBox "Both result and num3 are even numbers." 'displaying message box with the nested if condition is met
    End If 'end of nested if statement
End If 'end of if statement

Do While num1 < num3 'do while loop to continuously execute code while condition is true
    MsgBox num1 & " is less than " & num3 'displaying message box with the current values of num1 and num3
    num1 = num1 + 1 'updating value of num1 variable
Loop 'end of do while loop

Function AddNumbers(x, y) 'declaring and defining a function to add two numbers
    AddNumbers = x + y 'setting the return value of the function
End Function 'end of function

MsgBox AddNumbers(num1, num2) 'displaying message box with the result of the function by passing in num1 and num2 variables as parameters

Class Car 'declaring a class
    Private make As String 'private variable for the class
    Private model As String 'private variable for the class

    Property Let Make(value As String) 'property let method to set value for the make variable
        make = value
    End Property

    Property Get Make() As String 'property get method to retrieve value from the make variable
        Make = make
    End Property

    Property Let Model(value As String) 'property let method to set value for the model variable
        model = value
    End Property

    Property Get Model() As String 'property get method to retrieve value from the model variable
        Model = model
    End Property
End Class 'end of class

Dim myCar As Car 'declaring an object variable of type Car
Set myCar = New Car 'instantiating the object

myCar.Make = "Honda" 'setting value for the make property
myCar.Model = "Civic" 'setting value for the model property

MsgBox "My car is a " & myCar.Make & " " & myCar.Model 'displaying message box with the values of make and model properties