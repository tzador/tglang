Function sortArray(arrayToSort As Variant, startPos As Integer, endPos As Integer)
    'This function uses the quicksort algorithm to sort an array of values

    Dim pivotValue As Variant
    Dim startPointer As Integer
    Dim endPointer As Integer

    'Initialize pointers to starting and ending positions of array
    startPointer = startPos
    endPointer = endPos
    'Calculate pivot value as middle element of array
    pivotValue = arrayToSort((startPos + endPos) \ 2)

    Do
        'Move start pointer towards end of array until value > pivot value
        While (arrayToSort(startPointer) < pivotValue)
            startPointer = startPointer + 1
        Wend
        'Move end pointer towards start of array until value < pivot value
        While (arrayToSort(endPointer) > pivotValue)
            endPointer = endPointer - 1
        Wend
        'Swap values at start and end pointers
        If (startPointer <= endPointer) Then
            Dim temp
            temp = arrayToSort(startPointer)
            arrayToSort(startPointer) = arrayToSort(endPointer)
            arrayToSort(endPointer) = temp
            'Update pointers
            startPointer = startPointer + 1
            endPointer = endPointer - 1
        End If
    Loop While (startPointer <= endPointer)
    'Recursively call function on unsorted portions of array
    If (startPos < endPointer) Then sortArray arrayToSort, startPos, endPointer
    If (startPointer < endPos) Then sortArray arrayToSort, startPointer, endPos
End Function

'Example usage:
Dim myArray As Variant
myArray = Array(9, 2, 5, 1, 7, 3)
Call sortArray(myArray, 0, UBound(myArray)) 'Will sort the entire array in ascending order