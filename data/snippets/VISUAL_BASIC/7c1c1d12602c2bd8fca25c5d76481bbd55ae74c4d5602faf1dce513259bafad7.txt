' This code snippet is a function that implements the Sieve of Eratosthenes algorithm
' to find prime numbers up to a given limit.

Function FindPrimeNumbers(limit As Integer) As Integer()
    ' Set up a boolean array to keep track of prime numbers
    Dim isPrime(limit + 1) As Boolean
    
    ' Initialize all elements to `True` to indicate they are potentially prime
    For i = 0 To limit + 1
        isPrime(i) = True
    Next i

    ' Since 0 and 1 are not prime numbers, we set their corresponding array elements to `False`
    isPrime(0) = False
    isPrime(1) = False

    ' Loop through each number up to the square root of the limit
    For i = 2 To Math.Sqrt(limit)
        ' If the number is marked as prime, then we mark all its multiples as not prime
        If isPrime(i) = True Then
            For j = i * i To limit Step i
                isPrime(j) = False
            Next j
        End If
    Next i

    ' Create an array to store the prime numbers we've found
    Dim primes() As Integer
    Dim count As Integer = 0

    ' Loop through each number from 2 to the given limit
    For i = 2 To limit
        ' If the current number is marked as prime, then we add it to our primes array
        If isPrime(i) = True Then
            ' Increase the size of our primes array by 1 and add the current prime number
            ReDim Preserve primes(count)
            primes(count) = i
            count = count + 1
        End If
    Next i

    ' Return the array of prime numbers
    Return primes
End Function