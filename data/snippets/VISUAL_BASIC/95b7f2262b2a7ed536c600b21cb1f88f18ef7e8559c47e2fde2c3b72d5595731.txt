Option Explicit

' Declaring variables
Dim i As Integer
Dim j As Integer
Dim k As Integer

' Initializing values
i = 1
j = 2
k = 3

' Nested loop for calculation
For i = 1 To 3
    For j = 1 To 3
        k = i * j
        Debug.Print "Value of i: " & i & ", Value of j: " & j & ", Value of k: " & k
    Next j
Next i

' Output:
' Value of i: 1, Value of j: 1, Value of k: 1
' Value of i: 1, Value of j: 2, Value of k: 2
' Value of i: 1, Value of j: 3, Value of k: 3
' Value of i: 2, Value of j: 1, Value of k: 2
' Value of i: 2, Value of j: 2, Value of k: 4
' Value of i: 2, Value of j: 3, Value of k: 6
' Value of i: 3, Value of j: 1, Value of k: 3
' Value of i: 3, Value of j: 2, Value of k: 6
' Value of i: 3, Value of j: 3, Value of k: 9

' Assigning first 10 Fibonacci numbers to an array
Dim fibonacci(10) As Integer
fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(2) = 1

' Loop for calculating remaining Fibonacci numbers
For i = 3 To UBound(fibonacci) - 1
    fibonacci(i) = fibonacci(i - 1) + fibonacci(i - 2)
Next i

' Output:
' fibonacci(0) = 0
' fibonacci(1) = 1
' fibonacci(2) = 1
' fibonacci(3) = 2
' fibonacci(4) = 3
' fibonacci(5) = 5
' fibonacci(6) = 8
' fibonacci(7) = 13
' fibonacci(8) = 21
' fibonacci(9) = 34
' fibonacci(10) = 55

' Creating a user-defined function to check if a number is prime
Function CheckPrime(number As Integer) As Boolean
    Dim i As Integer
    For i = 2 To number - 1
        If number Mod i = 0 Then
            CheckPrime = False
            Exit Function
        End If
    Next i
    CheckPrime = True
End Function

' Printing out the first 20 prime numbers
Dim primeNumber As Integer
Dim count As Integer
count = 0
For primeNumber = 2 To 100
    If CheckPrime(primeNumber) Then
        Debug.Print primeNumber
        count = count + 1
        If count = 20 Then
            Exit For
        End If
    End If
Next primeNumber

' Output:
' 2
' 3
' 5
' 7
' 11
' 13
' 17
' 19
' 23
' 29
' 31
' 37
' 41
' 43
' 47
' 53
' 59
' 61
' 67
' 71