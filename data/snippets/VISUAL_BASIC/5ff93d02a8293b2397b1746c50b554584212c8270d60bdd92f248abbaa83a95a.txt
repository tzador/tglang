' Define and initialize variables
Dim num1 As Integer = 5
Dim num2 As Integer = 7
Dim result As Integer

' Check if the first number is larger than the second number
If num1 > num2 Then
    ' If true, subtract the second number from the first number and store result in variable
    result = num1 - num2
Else
    ' If false, add the first number to the second number and store result in variable
    result = num1 + num2
End If

' Print the result to the console
Console.WriteLine("The result is: " & result)

' Create a loop to continue the number sequence
For i As Integer = 1 To 5
    ' Print the current number in the sequence
    Console.WriteLine("Number: " & i)
Next

' Define a function to check if a given number is prime
Function IsPrime(num As Integer) As Boolean
    ' Check for special case of 1
    If num = 1 Then
        Return False
    End If
    
    ' Loop through all numbers from 2 to the square root of the given number
    For i As Integer = 2 To Math.Sqrt(num)
        ' Check if the number is divisible by any number in the range
        If num Mod i = 0 Then
            ' If true, the number is not prime
            Return False
        End If
    Next
    
    ' If no previous return statements were executed, the number is prime
    Return True
End Function

' Call the IsPrime function and print the result
Console.WriteLine(IsPrime(10))

' Define and initialize an array
Dim names As String() = {"John", "Mary", "Tom", "Emily"}

' Loop through the array and print each element
For Each name As String In names
    Console.WriteLine("Name: " & name)
Next

' Create a class
Class Person

    ' Define properties of the class
    Public Property Name As String
    Public Property Age As Integer

    ' Define a constructor to set initial values
    Sub New(name As String, age As Integer)
        Me.Name = name
        Me.Age = age
    End Sub

    ' Define a method to print out the person's information
    Public Sub PrintInfo()
        Console.WriteLine("Name: " & Me.Name & ", Age: " & Me.Age)
    End Sub

End Class

' Create an instance of the Person class
Dim person1 As New Person("Jane", 25)

' Call the PrintInfo method on the instance
person1.PrintInfo()

' Define a generic class with a generic type parameter
Class List(Of T)
    ' Define an array to store values of the generic type
    Dim items As T()
    
    ' Define a method to add a new item to the array
    Public Sub Add(item As T)
        ' Check if the array is null
        If items Is Nothing Then
           ' If true, create a new array with size 1 and add the item
           items = New T(0){}
           items(0) = item
        Else
            ' If false, create a new array with size 1 greater than the current array
            ' and copy all items from the current array to the new array
            Dim temp As T() = items
            ReDim items(items.Length)
            Array.Copy(temp, items, temp.Length)
            
            ' Add the new item to the end of the array
            items(items.Length - 1) = item
        End If
    End Sub
End Class

' Create an instance of the List class with String as the generic type
Dim stringList As New List(Of String)

' Add some strings to the list
stringList.Add("Hello")
stringList.Add("World")

' Loop through the list and print each item
For Each item As String In stringList.items
    Console.WriteLine(item)
Next