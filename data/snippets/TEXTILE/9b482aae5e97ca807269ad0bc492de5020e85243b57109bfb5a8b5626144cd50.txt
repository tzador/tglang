#Page Title
h1. **This is my page title**

A page for my programming language of choice.

#Table of Contents
h2. **Table of Contents**

* "Introduction":#introduction
* "Variables":#variables
* "Functions":#functions
* "Loops":#loops
* "Arrays":#arrays
* "Classes":#classes

#Introduction
h2. **Introduction**

Programming languages are the backbone of modern technology. They allow us to communicate our instructions to computers, and produce complex systems that make our lives easier.

#Variables
h2. **Variables**

Variables are used to store and manipulate data in programming languages. They can hold different types of data, such as strings, integers, and booleans.

Variable names should be descriptive and follow a specific naming convention, such as camelCase or snake_case.

Here is an example of declaring and assigning a string variable:

bc.. my_name = "John Doe"

#Functions
h2. **Functions**

Functions are blocks of code that perform a specific task or set of tasks. They typically take in parameters, perform operations, and return a value.

Here is an example of a simple function that takes in two parameters and returns their sum:

bc.. fn add_numbers(a, b)
  return a + b
end

#Loops
h2. **Loops**

Loops are used to repeat a block of code for a specific number of times or until a certain condition is met. This allows us to automate repetitive tasks and make our code more efficient.

Here is an example of a for loop that prints the first 10 even numbers:

bc.. for i in 0..9
  if i % 2 == 0
    puts i
  end
end

#Arrays
h2. **Arrays**

Arrays are used to store a collection of data of the same type. They can be accessed and manipulated using their index or specific methods.

Here is an example of declaring and manipulating an array of strings:

bc.. fruits = ["apple", "banana", "orange"] // declaring array
fruits.push("grape")                      // adding element to array
fruits.pop()                              // removing last element from array

#Classes
h2. **Classes**

Classes are used to create objects with specific attributes and behaviors in object-oriented programming. They serve as blueprints for creating multiple instances, also known as objects.

Here is an example of a simple class with an attribute and a behavior:

bc.. class Person
  attr_reader :name      // declaring attribute
  def initialize(name)   // constructor method
    @name = name
  end
  def greet             // behavior method
    puts "Hello, my name is #{@name}."
  end
end

person1 = Person.new("Jane")
person1.greet // output: Hello, my name is Jane.