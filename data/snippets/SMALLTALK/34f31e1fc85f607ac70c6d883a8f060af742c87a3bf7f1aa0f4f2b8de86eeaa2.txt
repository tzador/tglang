| primeNumbers firstNumber secondNumber |

primeNumbers := OrderedCollection new.  "create an empty OrderedCollection to hold prime numbers"

firstNumber := 2.  "setting initial value for firstNumber variable"
secondNumber := 1.  "setting initial value for secondNumber variable"

[primeNumbers size < 10] whileTrue: [  "loop to find the first 10 prime numbers"
    | isPrime |
    isPrime := true.
    firstNumber to: secondNumber - 1 do: [  "loop to check if a number is prime"
        :i |  "variable to hold current number being checked"
        ((secondNumber \\ i) = 0) ifTrue: [  "if number is divisible by any other number, it is not prime"
            isPrime := false.
            ^self.   "exit the loop"
        ]
    ].
    isPrime ifTrue: [  "if number is prime, add it to the OrderedCollection"
        primeNumbers add: secondNumber.
        firstNumber := secondNumber.  "increment the firstNumber"
    ].
    secondNumber := secondNumber + 1.  "increment the secondNumber"
].

primeNumbers inspect.  "print out the contents of the OrderedCollection holding the prime numbers"
primeNumbers do: [  "loop to print out the first three prime numbers"
    :number |
    Transcript show: number; cr.  "print out the number on a new line"
    (primeNumbers at: 1) + 1 to: primeNumbers at: 2 do: [  "loop to print out the first three prime numbers add their sum"
        :i |
        Transcript show: i + number; cr.
        (primeNumbers at: 2) + 1 to: primeNumbers at: 3 do: [  "loop to print out the first three prime numbers add their sum and add the product"
            :j |
            Transcript show: (i + number) * (j + number); cr.
        ].
    ].
]