| romanNumerals |

romanNumerals := Dictionary new.
romanNumerals
    at: 1 put: 'I';
    at: 2 put: 'II';
    at: 3 put: 'III';
    at: 4 put: 'IV';
    at: 5 put: 'V';
    at: 6 put: 'VI';
    at: 7 put: 'VII';
    at: 8 put: 'VIII';
    at: 9 put: 'IX';
    at: 10 put: 'X';
    at: 20 put: 'XX';
    at: 30 put: 'XXX';
    at: 40 put: 'XL';
    at: 50 put: 'L';
    at: 60 put: 'LX';
    at: 70 put: 'LXX';
    at: 80 put: 'LXXX';
    at: 90 put: 'XC';
    at: 100 put: 'C'.
"creates a dictionary with key-value pairs for Roman numerals from 1 to 100"

| convertToRoman |
"declares a variable to hold a method"

convertToRoman := [ :number |
    "square brackets indicate a block of code"
    | result divisor addedNum |
    "declares local variables"
    result := ''.
    "initializes the result variable as an empty string"
    number >= 100 ifTrue:[
        "if statement, if number is greater than or equal to 100"
        divisor := number // 100.
        "divides the number by 100 and assigns the quotient to the divisor variable"
        result := result , romanNumerals at: divisor * 100.
        "appends the Roman numeral for the hundreds place to the result variable"
        number := number \\ 100.
        "uses modulus to get the remainder after dividing by 100"
    ].
    "end of if statement"
    number >= 10 ifTrue:[
        "checks if number is greater than or equal to 10"
        divisor := number // 10.
        "divides the number by 10 and assigns the quotient to the divisor variable"
        result := result , romanNumerals at: divisor * 10.
        "appends the Roman numeral for the tens place to the result variable"
        number := number \\ 10.
        "uses modulus to get the remainder after dividing by 10"
    ].
    "end of if statement"
    number > 0 ifTrue:[
        "checks if number is greater than 0"
        result := result , romanNumerals at: number.
        "appends the Roman numeral for the ones place to the result variable"
    ].
    "end of if statement"
    result "returns the final result"
].
"end of block"