| PrimeNumberGenerator |
PrimeNumberGenerator := Object subclass: #PrimeNumberGenerator 
	instanceVariableNames: 'currentPrime primes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numbers-Generators'.
	
PrimeNumberGenerator class >> currentPrime 
	^ 2

PrimeNumberGenerator class >> initialize 
	^ self new initialize
	
PrimeNumberGenerator >> nextPrime
	| nextPrime |
	currentPrime isNil ifTrue: [ currentPrime := PrimeNumberGenerator currentPrime].
	[
		nextPrime := primes detect: [:each | (currentPrime \\ each) = 0] ifNone: [ currentPrime ].
		prime := currentPrime.
	]
	while: [ nextPrime = currentPrime ].

PrimeNumberGenerator >> reset 
	currentPrime := nil.
	primes := nil.
	
PrimeNumberGenerator >> initialize 
	currentPrime := PrimeNumberGenerator currentPrime
	
PrimeNumberGenerator class >> generate: n 
	| primes |
	generator := PrimeNumberGenerator new initialize.
	primes := OrderedCollection new.
	n timesRepeat: [ primes  
		add: generator nextPrime ].
	^primes.T