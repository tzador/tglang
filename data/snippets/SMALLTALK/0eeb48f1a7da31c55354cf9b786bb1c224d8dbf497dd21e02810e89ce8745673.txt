| array source result |
"Creates an array with random numbers"
array := Array new: 10.
array at: 1 put: (2 atRandom: 100).
array at: 2 put: (3 atRandom: 100).
array at: 3 put: (5 atRandom: 100).
array at: 4 put: (7 atRandom: 100).
array at: 5 put: (11 atRandom: 100).
array at: 6 put: (13 atRandom: 100).
array at: 7 put: (17 atRandom: 100).
array at: 8 put: (19 atRandom: 100).
array at: 9 put: (23 atRandom: 100).
array at: 10 put: (29 atRandom: 100).

"Sorts the array in ascending order using QuickSort"
source := array.
result := Array new: array size.
1 to: array size do: [:i |
    | pivot lt gt |
    "Sets the pivot as the first element in the array"
    pivot := source first.
    lt := Array new.
    gt := Array new.
    "Splitting the array into arrays with elements less and greater than the pivot value"
    source allButFirst do: [:val |
        (val <= pivot)
            ifTrue: [lt add: val]
            ifFalse: [gt add: val].
    ].
    "Combining the sorted arrays and the pivot value"
    result at: lt size + 1 put: pivot.
    result replaceFrom: 1 to: lt size with: lt.
    result replaceFrom: lt size + 2 to: result size with: gt.
    "Continue sorting recursively for the left and right subarrays"
    lt size > 1 ifTrue: [result replaceFrom: 1 to: lt size with: (self quickSort: lt)].
    gt size > 1 ifTrue: [result replaceFrom: lt size + 2 to: result size with: (self quickSort: gt)].
].
^ result.  "Returns the sorted array"