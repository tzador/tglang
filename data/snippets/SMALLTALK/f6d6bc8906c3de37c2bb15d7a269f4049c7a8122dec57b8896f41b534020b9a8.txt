"Sieve of Eratosthenes implementation in Smalltalk"
| numbers primes candidate |
numbers := (2 to: 100) asOrderedCollection. "create an ordered collection from numbers 2 to 100"
candidate := numbers at: 1. "initialize the candidate variable to the first number in the collection"
primes := OrderedCollection new. "create an empty ordered collection to store the prime numbers"

[ candidate <= 10 ] whileTrue: [ "iterate until the candidate is greater than 10"
  primes add: candidate. "add the candidate to the primes collection"
  numbers removeAllSuchThat: [:n | n isMultipleOf: candidate]. "remove all numbers in the collection that are multiples of the candidate"
  candidate := numbers at: 1. "update the candidate to the new first number in the collection"
].

candidate := 11. "set the candidate to the next prime number"
[ candidate <= 100 ] whileTrue: [ "iterate until the candidate is greater than 100"
  numbers removeAllSuchThat: [:n | n isMultipleOf: candidate]. "remove all numbers in the collection that are multiples of the candidate"
  candidate := numbers at: 1. "update the candidate to the new first number in the collection"
].

primes addAll: numbers. "add all remaining numbers in the collection to the primes collection"

^primes asArray. "return the prime numbers as an array"