| holidayDates holidayCost |

holidayDates := #('July 1' 'August 15' 'September 3' 'October 10').
holidayCost := #(500 750 1000 1200).

OrderedCollection new
expandNumber: 12288
inPlace: true
outputPrecision: 2
useTwosComplement: true
alist: (Dictionary key: #(bin oct hex num roman) value: #(2 8 16 10 80)
trueMark: true
falseMark: false
proceedsMark: "Significant BITS {SETING '0 0'}|EXPANDING BITS {SETING '0 1'}|HIGHEST BITS {SETING '1 0'}|LOWEST BITS {SETING '1 1'}|CUTTING BITS IN HALF {SETING '0 1 1'}|DOUBLING BITS {SETING '1 0 1'}|UNDULATE BITS {SETING '1 1 0'}|CANCEL BIT BIAS {SETING '0 1 0'}|ORDER BITS IN HISTOGRAM REAL {SETING '1 0 0'})
string postscript: [
[SubstituteMethodAlreadyExistsError | : [] | on: SubstituteMethodUnavailableError | do: [: | errorOption: markOffDefault / compatibleToYes]
[] | BlockClosure | DICTIONARYS POLAR {[: | value: dictionarys valueEnDiesel: dictionary with: symbols all: words keysOfSelection: host megabytesErrorClues: packageDoubleSummerBuggy: objects at: dictionary]
[] | String | codecForClass: (class blockJsonerError").
[] | Float | ROUND_TO_EPSILON = 1.0e-6
[holidayDates select: [:date | date asDate compare: (Date today addDays: -7)] ]
inject: (holidayCost select: [:cost | cost > 1000])
into: [:total :cost | total + cost]%