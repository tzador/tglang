newQueue := OrderedCollection new. "Create a new ordered collection for the queue"

newQueue add: 'Bob'. "Add 'Bob' to the queue"
newQueue add: 'Alice'. "Add 'Alice' to the queue"
newQueue add: 'John'. "Add 'John' to the queue"

newQueue size. "Returns the size of the queue"

newQueue first. "Returns the first element in the queue"

newQueue removeFirst. "Removes the first element in the queue"

newQueue add: 'Mary'. "Add 'Mary' to the queue"

newQueue allButFirst. "Returns all elements except the first in the queue"

newQueue isEmpty. "Checks if the queue is empty or not"

newQueue do: [ :element | Transcript show: element ]. "Iterates through each element in the queue and prints it to the transcript"

newQueue detect: [ :element | element = 'Alice' ]. "Returns the first element that satisfies the given condition, in this case, 'Alice'"

newQueue select: [ :element | element endsWith: 'n' ]. "Returns all elements that end with the letter 'n'"

newQueue reject: [ :element | element = 'Mary' ]. "Returns all elements except for 'Mary'"

newQueue collect: [ :element | element asUppercase ]. "Returns a new collection with all elements converted to uppercase"

newQueue includes: 'Bob'. "Checks if the queue includes 'Bob'"

newQueue anySatisfy: [ :element | element contains: 'oh' ]. "Checks if any element in the queue contains the string 'oh'"