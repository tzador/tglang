| students courses taken classes |
students := Dictionary new.
courses := Set new.
taken := OrderedCollection new.
classes := OrderedCollection new.

students at: 'John'put: 'Computer Science'.
students at: 'Mary' put: 'Mathematics'.
students at: 'Michael' put: 'English'.
students at: 'Samantha' put: 'Biology'.

courses add:'Data Structures'.
courses add:'Statistics'.
courses add:'Literature'.

taken addAll: (students at: 'John') => courses select: [:course | course contains: 'Science'].
taken addAll: (students at: 'Mary') => courses reject: [:course | course contains: 'Statistics'].
taken addAll: (students at: 'Michael') => courses copyWithout: 'English'.
taken addAll: (students at: 'Samantha') => courses select: [:course | course contains: 'logy'].

classes addAll: taken.
classes add: 'Art History'.
classes add: 'Economics'.

"Nested loop to print out the classes each student is taking"
students keysAndValuesDo: [:student :courseList |
  'Student: ' print.
  student printNl.
  'Courses: ' print.
  courseList do: [:course |
    course printNl.
  ].
  '==============' printNl.
].

"Output:
Student: John
Courses: 
Computer Science
Data Structures
=============
Student: Mary
Courses: 
Mathematics
Literature
=============
Student: Michael
Courses: 
English
=============
Student: Samantha
Courses: 
Biology
Statistics
Literature
=============