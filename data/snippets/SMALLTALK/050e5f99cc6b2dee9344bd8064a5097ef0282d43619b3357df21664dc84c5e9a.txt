"Create a class named 'BankAccount' with instance variables 'owner' and 'balance'"
BankAccount subclass: #BankAccount
	instanceVariableNames: 'owner balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Banking'

"Add a method to the class to deposit an amount into the account"
BankAccount>>deposit: anAmount
	balance := balance + anAmount.

"Add a method to the class to withdraw an amount from the account, ensuring there are sufficient funds"
BankAccount>>withdraw: anAmount
	"Check if there are sufficient funds"
	owner notNil ifTrue: [
		"Check if the balance is greater than or equal to the amount to be withdrawn"
		(balance >= anAmount) ifTrue: [
			balance := balance - anAmount.
		] ifFalse: [
			self error: 'Insufficient funds.'.
		]
	].
	
"Add a method to the class to transfer an amount from one account to another, ensuring there are sufficient funds"
BankAccount>>transfer: anAmount to: aBankAccount
	"Check if there are sufficient funds"
	owner notNil ifTrue: [
		"Check if the balance is greater than or equal to the amount to be transferred"
		(balance >= anAmount) ifTrue: [
			"Withdraw the amount from this account"
			self withdraw: anAmount.
			"Deposit the amount into the specified account"
			aBankAccount deposit: anAmount.
		] ifFalse: [
			self error: 'Insufficient funds.'.
		]
	].
	
"Add a method to the class to print the account details"
BankAccount>>printDetails
	Transcript show: 'Account owner: ', owner, Cr.
	Transcript show: 'Account balance: ', balance asString, Cr.