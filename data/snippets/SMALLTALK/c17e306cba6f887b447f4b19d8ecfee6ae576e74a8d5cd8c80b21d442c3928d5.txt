\** Multi-threaded Class *\
class MultiThreadedExample:Integer {
    private int counter

    MultiThreadedExample(){
        counter = 0
    }

    // Method to increment counter
    // @param int incrementBy - value to increment counter by
    // @return int - the updated value of counter
     setCounter(incrementBy) {
        counter := counter + incrementBy
    }

    // Method to decrement counter
    // @param int decrementBy - value to decrement counter by
    // @return int - the updated value of counter
    decreaseCounter(decrementBy) {
        counter := counter - decrementBy
    }

    // Method to get current value of counter
    // @return int - the current value of counter
    getCounter() {
        ^ counter
    }

    // Method to start a new thread
    // @param Runnable runnable - the code to be executed in the new thread
    startThread(runnable) {
        // Create and run the thread
        thread := Thread new: [runnable run].
        thread resume.
    }
}

// Create a new instance of the MultiThreadedExample class
example := MultiThreadedExample new.

// Set counter to 10 in a new thread
example startThread: [example setCounter: 10].

// Decrement counter by 5 in the main thread
example decreaseCounter: 5.

// Get current value of counter
counter := example getCounter.