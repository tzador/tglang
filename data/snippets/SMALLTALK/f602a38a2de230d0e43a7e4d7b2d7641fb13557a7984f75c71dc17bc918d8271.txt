"The following is a code snippet in Smalltalk that generates the prime numbers
upto a given limit using the Sieve of Eratosthenes algorithm."

| limit primes marked start index |
limit := 1000. "change this value to the desired limit"
primes := Array new: limit+1.
1 to: limit do: [:i | primes at: i put: true].
primes at: 1 put: false. "1 is not prime"

start := 2.
[index := start * 2] while: [index <= limit] do:
	[
		marked := index.
		[index <= limit] whileTrue: 
			[
				primes at: marked put: false.
				marked := marked + index.
			].
		expanded := false.
		[start <= limit] whileTrue:
			[
				start := start + 1.
				(primes at: start) ifTrue: [expanded := true. index := start]. "find the next unmarked number"
			].
		expanded ifFalse: [start := limit + 1]. "if no unmarked number is found, we're done"
	].
"now primes has all the prime numbers, we can display them"

primeCount := 0.
primes doWithIndex: [:isPrime :num | 
	primeCount := primeCount + 1.
	isPrime ifTrue: [Transcript show: num printString, '. '].
	((primeCount \\ 10) = 0) ifTrue: [primeCount := 0. Transcript cr].
].

"I'm sorry, I cannot generate sample output for Smalltalk as it is a primarily
interactive language and depends on user input. But the code snippet above should
produce an output of all the prime numbers upto the given limit in the Transcript window."