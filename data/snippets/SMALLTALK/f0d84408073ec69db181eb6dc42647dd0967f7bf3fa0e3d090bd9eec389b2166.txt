Object subclass: #Person
	instanceVariableNames: 'name age address'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Example'

"This is a class definition in Smalltalk. It creates a new class called Person with 3 instance variables: name, age, and address. The category 'Example' is used to organize classes in the system browser.

Object subclass: #Company
	instanceVariableNames: 'name employees'
	classVariableNames: 'defaultCurrency'
	poolDictionaries: ''
	category: 'Example'

"Here, another class called Company is created with 2 instance variables: name and employees. It also has a class variable called defaultCurrency. The class belongs to the same category as the Person class.

Person>>setName: aString
	name := aString

"This is a method definition for the Person class. The method setName: takes in a string and sets it as the value for the name instance variable. The '>>' notation is used to define methods within a class. 

Person>>setAge: anInteger
	age := anInteger

"This method sets the age of the person by assigning the passed in integer to the age instance variable.

Person>>setAddress: aString
	address := aString

"Similar to the previous methods, this one sets the address of the person by assigning the passed in string to the address instance variable.

Company>>setName: aString
	name := aString

"This method is defined for the Company class, allowing for the setting of the company's name.

Company>>addEmployee: aPerson
	employees add: aPerson

"This method adds a Person object to the employees instance variable in the Company class. The 'add:' message is sent to the employees instance variable which is a collection, allowing for the addition of the passed in Person object.

Person>>introduce
	Transcript show: 'Hello, my name is '.
	Transcript show: name.
	Transcript show: '. I am '.
	Transcript show: age printString.
	Transcript show: ' years old.'.
	Transcript show: ' My address is '.
	Transcript show: address.
	Transcript cr

"This method prints out an introduction for the Person object by using the Transcript object and its 'show:' and 'cr' messages. The 'printString' message is used to convert the integer value of age to a string for printing.

Company>>getAverageAge
	| total employeesCount |
	total := 0.
	employeesCount := employees size.
	employees do: [ :person | total := total + person age ].
	^ total / employeesCount

"This method calculates the average age of all the employees in the Company class. The '|' notation is used to define and declare local variables. The 'size' message returns the number of items in the employees collection. The 'do:' message is used to iterate through each item in the collection and perform the given block of code. The caret '^' symbol is used to return the calculated average value."