"Create a class that represents a car"
Object subclass: #Car
     instanceVariableNames: 'make model year color price'
     classVariableNames: 'totalCars'
     poolDictionaries: ''
     category: 'CarDealership'

"Set up the initialization method for the Car class"
Car>>initializeMake: aMake model: aModel year: aYear color: aColor price: aPrice
   make := aMake.
   model := aModel.
   year := aYear.
   color := aColor.
   price := aPrice.
   self addToTotalCars.

"Create a class method to add a new car to the totalCars count"
Car class>>addToTotalCars
   totalCars := totalCars + 1.

"Create an instance method to calculate the total cost of the car"
Car>>calculateTotalCost
   | tax totalCost |
   tax := price * 0.07.
   totalCost := price + tax.
   ^ totalCost.

"Create a class method to reset the totalCars count"
Car class>>resetTotalCars
   totalCars := 0. 

"Create a class method to print out the total number of cars"
Car class>>printTotalCars
   Transcript cr; show: 'Total number of cars: ', totalCars asString.

"Now we can create instances of the Car class and interact with them"
| car1 car2 car3 totalCost1 totalCost2 totalCost3 |
car1 := Car new initializeMake: 'Toyota' model: 'Camry' year: 2018 color: 'blue' price: 25000.
car2 := Car new initializeMake: 'Honda' model: 'Accord' year: 2019 color: 'red' price: 30000.
car3 := Car new initializeMake: 'Ford' model: 'Fusion' year: 2020 color: 'silver' price: 28000.

"Calculate the total cost of each car and print it out"
totalCost1 := car1 calculateTotalCost.
Transcript cr; show: 'Total cost of ', car1 make, ' ', car1 model, ': ', totalCost1 asString.
totalCost2 := car2 calculateTotalCost.
Transcript cr; show: 'Total cost of ', car2 make, ' ', car2 model, ': ', totalCost2 asString.
totalCost3 := car3 calculateTotalCost.
Transcript cr; show: 'Total cost of ', car3 make, ' ', car3 model, ': ', totalCost3 asString.

"Reset the totalCars count and print it out"
Car resetTotalCars.
Car printTotalCars.