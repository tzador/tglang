| shoppingList cart |

cart := Set new. "create a new empty set for the shopping cart"

shoppingList := OrderedCollection with: 'milk' with: 'eggs' with: 'bread' with: 'cheese' with: 'butter'. "create an ordered collection with items to add to the cart"

shoppingList do: [ :item | cart add: item ]. "use the do: method to iterate through the shopping list and add each item to the cart"

cart remove: 'bread'. "remove an item from the cart"

cart size. "get the size of the cart"

cart includes: 'butter'. "check if the cart includes a particular item"

cart isEmpty. "check if the cart is empty"

cart anySatisfy: [ :item | item size > 4 ]. "use the anySatisfy: method to check if any item in the cart has a size greater than 4 characters long"

cart detect: [ :item | item = 'cheese' ]. "use the detect: method to find the first item in the cart that equals 'cheese'"

cart select: [ :item | item endsWith: 's' ]. "use the select: method to find all items in the cart that end with 's'"

cart collect: [ :item | item asUppercase ]. "use the collect: method to create a new collection with each item in the cart converted to uppercase"

cart atRandom. "get a random item from the cart"

cart = Set new. "compare the cart to an empty set"

cart allSatisfy: [ :item | item isString ]. "use the allSatisfy: method to check if all items in the cart are of type String"

cart isEmpty ifTrue: [ Transcript show: 'The cart is empty!' ]. "use the ifTrue: method to execute code only if the cart is empty"