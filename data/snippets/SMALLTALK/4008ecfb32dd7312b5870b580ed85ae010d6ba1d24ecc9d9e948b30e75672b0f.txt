"Create a class called Glass"
Object subclass: Glass [
    | capacity contents remaining |
    
    "Initialize the class with a given capacity and no contents"
    Glass new [
        capacity := 12.
        contents := 0.
        remaining := 12.
    ]
    
    "Method that fills the glass with a given amount"
    fill: amount [
        amount > remaining
        ifTrue: [amount := remaining].                 
        amount > 0
        ifTrue: [contents := contents + amount.
            remaining := remaining - amount]
    ]
    
    "Method that empties the glass"
    empty [
        contents := 0.
        remaining := capacity.
    ]
    
    "Initialize the glass with a given capacity and specified contents"
    setContents: newContents [
        (newContents >= 0) & (newContents <= capacity)
        ifTrue: [contents := newContents.
            remaining := capacity - newContents]
    ]
    
    "Method that returns the amount of remaining space in the glass"
    getRemaining [
        ^remaining
    ]
    
    "Method that returns the current contents of the glass"
    getContents [
        ^contents
    ]
]

"Create a glass with a capacity of 10"
glass := Glass new.

"Fill the glass with 6 ounces of water"
glass fill: 6.

"Empty the glass"
glass empty.

"Set the glass contents to 8 ounces"
glass setContents: 8.

"Print out the current remaining space in the glass"
Transcript show: 'Remaining space: ', glass getRemaining printString.

"Print out the current contents of the glass"
Transcript show: 'Contents: ', glass getContents printString.