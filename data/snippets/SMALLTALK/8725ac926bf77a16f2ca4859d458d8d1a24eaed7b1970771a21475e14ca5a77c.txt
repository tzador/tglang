| daysOfWeek |
daysOfWeek := #('Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' 'Sunday').
(daysOfMonthAndWeekday := Dictionary new) at: '1st day of a month' put: daysOfWeek first.
(daysOfMonthAndWeekday at: '1st day of a month') at: 'Weekday' put: true.
(daysOfMonthAndWeekday keys = daysOfWeek) ifFalse: [Transcript show: 'Invalid data entered'.
^ 0].
((((Integer readln) between: 1 and: 28)
and: ((InputStdin ask: 'Which day? ' choices: daysOfWeek) = (daysOfMonthAndWeekday at: '1st day of a month')))
ifTrue: [Transcript show: 'This day falls on the first day of the month.'; cr.
^ 1]
ifFalse: [((Integer readln) between: 1 and: daysOfMonthAndWeekday size)
ifTrue: [(daysOfMonthAndWeekday includesKey: (((daysOfWeek select: [:d | daysOfWeek indexOf: d between: 1 and: 400) includes: d.Year ifTrue: [d = day]) select: [:d | d between: 1 and: 400) includes: daysOfWeek indexdOf: (InputStdin ask: 'On which weekday? ' choices: daysOfWeek))) ifTrue: [Transcript show: 'This day falls on the first'.
Transcript show: 'Previously entered day'.
Transcript show: 'Which weekday?'.
Transcript show: (daysOfWeek at: (((daysOfWeek lastIndex) - ((daysOfMonthAndWeekday size) + (daysOfMonthAndWeekday size-*))))).
Transcript show: 'Total Days: '.
Transcript show: (daysOfMonthAndWeekday at: '1st day of a month') size].
daysOfMonthAndWeekday at: '1st day of a month' is: true] ifTrue: [Transcript show: 'Doesn't fall on that day.'].
^ 2])