| player board squares |

"The game board is represented as an array of arrays,
where each element represents a square on the board."

player := 'X'.
board := #(#('-' '-' '-') #('-' '-' '-') #('-' '-' '-')).

"The 'squares' variable keeps track of all the
squares that are still available to play on the board."

squares := #(1 2 3 4 5 6 7 8 9).

"Function to display the board in a user-friendly format
with numbered squares for reference."

displayBoard := [
    "Print the top row of dashes and numbers."
    Transcript cr.
    Transcript show: '-------------'.
    Transcript nextPut: Character cr.

    Transcript show: '|'.
    Transcript show: '1'.
    Transcript show: '|'.
    Transcript show: '2'.
    Transcript show: '|'.
    Transcript show: '3'.
    Transcript nextPut: Character cr.

    "Print the next row."
    Transcript show: '-------------'.
    Transcript nextPut: Character cr.

    Transcript show: '|'.
    Transcript show: '4'.
    Transcript show: '|'.
    Transcript show: '5'.
    Transcript show: '|'.
    Transcript show: '6'.
    Transcript nextPut: Character cr.

    "Print the next row."
    Transcript show: '-------------'.
    Transcript nextPut: Character cr.

    Transcript show: '|'.
    Transcript show: '7'.
    Transcript show: '|'.
    Transcript show: '8'.
    Transcript show: '|'.
    Transcript show: '9'.
    Transcript nextPut: Character cr.

    "Print the bottom row of dashes and numbers."
    Transcript show: '-------------'.
    Transcript nextPut: Character cr.
].

"Function to check if a player has won the game."

checkWin := [ :player |
    "Check rows."
    (board at: 1) = (board at: 2) = (board at: 3) = player |
    (board at: 4) = (board at: 5) = (board at: 6) = player |
    (board at: 7) = (board at: 8) = (board at: 9) = player |

    "Check columns."
    (board at: 1) = (board at: 4) = (board at: 7) = player |
    (board at: 2) = (board at: 5) = (board at: 8) = player |
    (board at: 3) = (board at: 6) = (board at: 9) = player |

    "Check diagonals."
    (board at: 1) = (board at: 5) = (board at: 9) = player |
    (board at: 3) = (board at: 5) = (board at: 7) = player
].

"Function to update the board with a player's move."

makeMove := [ :square :player |
    "Update the board."
    (board at: square) := player.

    "Remove the played square from the available squares list."
    squares := squares select: [ :x | x ~= square ].

    "Display the updated board."
    displayBoard value.
].

"Function to check if a square is available to play."

squareAvailable := [ :square |
    "Check if the square is in the list of available squares."
    squares includes: square
].

"Function for the main game loop."

main := [
    "Print a welcome message and display the initial board."
    Transcript cr.
    Transcript show: 'Welcome to Tic-Tac-Toe!'.
    Transcript nextPut: Character cr.
    displayBoard value.

    "Loop until a player wins or the board is full."
    [ true ] whileTrue: [
        "Ask the current player to enter their move."
        Transcript cr.
        Transcript show: player.
        Transcript show: ', please enter your move: '.
        | move |
        move := (Sensor keyboard next) asNumber.

        "Check if the move is within the bounds of the board."
        (move > 0 and: [ move < 10 ]) ifFalse: [ 
            Transcript show: 'Please enter a valid move from 1-9.'.
            exit.
        ].

        "Check if the chosen square is available."
        (squareAvailable value: move) ifFalse: [
            Transcript show: 'That square is already taken, please try again.'.
            exit.
        ].

        "Update the board with the player's move."
        makeMove value: move value: player.

        "Check if the player has won the game."
        (checkWin value: player) ifTrue: [
            Transcript show: player.
            Transcript show: ' is the winner!'.
            exit.
        ].

        "If there are no available squares left, it's a tie game."
        squares isEmpty ifTrue: [
            Transcript show: 'It's a tie game!'.
            exit.
        ].

        "Switch players."
        player := player = 'X' ifTrue: [ 'O' ] ifFalse: [ 'X' ].
    ]
].

"Start the game."
main value.