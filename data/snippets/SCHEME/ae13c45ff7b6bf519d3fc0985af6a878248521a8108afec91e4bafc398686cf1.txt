; Define the factorial function in Scheme
(define (factorial n)
  (if (= n 0)  ; Check if the input is 0
      1         ; Return 1 if the input is 0
      (* n (factorial (- n 1)))))  ; Multiply n with factorial of (n-1)

; Define a function to calculate the nth Fibonacci number
(define (fibonacci n)
  (cond ((= n 0) 0)  ; If n is 0, return 0 as the nth Fibonacci number
        ((= n 1) 1)  ; If n is 1, return 1 as the nth Fibonacci number
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))  ; Calculate nth Fibonacci number by adding the previous two numbers in the sequence

; Define a function to calculate the sum of a list of numbers
(define (sum lst)
  (if (null? lst)  ; Check if the list is empty
      0             ; If list is empty, return 0 as the sum
      (+ (car lst) (sum (cdr lst)))))  ; Else, add the first element to the sum of the rest of the list 

; Example usage and outputs
(factorial 5)  ; Output: 120 (5! = 120)
(fibonacci 6)  ; Output: 8 (6th Fibonacci number is 8)
(sum '(1 2 3 4 5))  ; Output: 15 (Sum of list (1 2 3 4 5) is 15)