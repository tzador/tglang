;; Define a function that calculates the factorial of a number
(define (factorial n)
  (if (<= n 1) ;; Check if n is less than or equal to 1
      1 ;; If true, return 1
      (* n (factorial (- n 1))))) ;; If false, multiply n by the factorial of (n-1) and return the result

;; Define a function that calculates the nth Fibonacci number
(define (fibonacci n)
  (if (<= n 1) ;; Check if n is less than or equal to 1
      n ;; If true, return n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ;; If false, add the results of (n-1) and (n-2) in the Fibonacci sequence and return the result

;; Define a function that checks if a number is prime
(define (is-prime n)
  (define (check-divisor x) ;; Define an inner function that checks if x is a divisor of n
    (if (= x 1) ;; Check if x is 1
        #t ;; If true, return true (1 is always a divisor)
        (if (= (modulo n x) 0) ;; If false, check if n is divisible by x
            #f ;; If true, return false (n has a divisor other than 1 and itself)
            (check-divisor (- x 1))))) ;; If false, reduce x by 1 and re-run the function

  (if (= n 1) ;; Check if n is equal to 1
      #f ;; If true, return false (1 is not a prime number)
      (check-divisor (- n 1)))) ;; If false, reduce n by 1 and run the inner function to check for divisors