(define (check-prime num) ; define a function to check if a number is prime
  (if (equal? num 1) #f) ; if the number is 1, it is not prime
  (if (equal? num 2) #t) ; if the number is 2, it is prime
  (if (= (mod num 2) 0) #f) ; if the number is even, it is not prime
  (define (check-factor divisor) ; define a helper function to check if the number has any other factors
    (if (equal? divisor num) #t) ; if the divisor is equal to the number, then it has no other factors and is prime
    (if (equal? (mod num divisor) 0) #f) ; if the number is divisible by the divisor, it is not prime
    (check-factor (+ divisor 2))) ; increment the divisor by 2 to skip even numbers
  (check-factor 3)) ; start the recursive function with a divisor of 3 (skipping even numbers)