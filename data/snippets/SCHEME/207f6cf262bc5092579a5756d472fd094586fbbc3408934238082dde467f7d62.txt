(define (powerset lst)                                       ;Define a procedure called "powerset" that takes in a parameter "lst"
  (if (null? lst)                                            ;If the list is empty
      '(() (list))                                           ;Return a list of empty set and a list containing an empty list
      (let ((rest (powerset (cdr lst))))                     ;Else, get the powerset of the list without the first element
        (append rest (map (lambda (x) (cons (car lst) x)) rest)))))    ;Append to the result of powerset with result of mapping a lambda function that
                                                                    ;Constructs a new list by appending the first element of original list
                                                                    ;To the beginning of every list in the powerset of the rest of the list