;; define a function to find the nth term of the Fibonacci sequence
(define (fibonacci n)
  (cond ((= n 0) 0) ;; base case
        ((= n 1) 1) ;; base case
        (else (+ (fibonacci (- n 1)) ;; recursive call for (n-1)th term
                 (fibonacci (- n 2)))) ;; recursive call for (n-2)th term
  )
)

;; example usage
(fibonacci 8) ; returns 21 (8th term in Fibonacci sequence)

;; define a function to calculate the factorial of a number
(define (factorial n)
  (define (factorial-helper n result)
    (if (= n 0)
        result ;; return result when n reaches 0
        (factorial-helper (- n 1) (* n result)) ;; recursive call with updated n and result
    )
  )
  (factorial-helper n 1) ;; start with 1 as the result
)

;; example usage
(factorial 5) ; returns 120 (5! = 5 * 4 * 3 * 2 * 1)