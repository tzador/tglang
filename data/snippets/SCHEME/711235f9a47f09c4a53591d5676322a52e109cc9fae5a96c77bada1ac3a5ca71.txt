;;; A function to check if a number is prime

(define (is-prime? n)
  (let ((is-prime #t)
        (counter 2))
    (cond ((equal? n 2) #t)  ; the number 2 is always prime
          ((or (<= n 1) (= (remainder n 2) 0)) #f)  ; integers less than 2 and even numbers are not prime
          (else (begin (-2 n) ( % 2 n)))
                 ; subtracts 2 from the number and checks the remainder when divided by 2,
                 ; if remainder is 0, then the number is not prime
          (do () ((>= counter n) is-prime)  ; looping through to check all possible factors less than n
            (cond ((= (remainder n counter) 0)
                   (set! is-prime #f)  ; if any factor other than 1 and n is found, number is not prime
                   (set! counter n))  ; exits loop
                  (else (set! counter (+ counter 1))))))))

;; Example call:
;; (is-prime? 23)
;; => #t (23 is prime)