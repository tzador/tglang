(define (factorial n)                             ; Defines a function called factorial with one parameter n
  (if (<= n 1)                                    ; Checks if n is less than or equal to 1
      1                                            ; Returns 1 if true
      (* n (factorial (- n 1)))))                  ; Multiplies n by the result of the factorial function with n-1 as parameter

(define (fibonacci n)                             ; Defines a function called fibonacci with one parameter n
  (if (< n 2)                                      ; Checks if n is less than 2
      n                                            ; Returns n if true
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; Adds the results of fibonacci functions with n-1 and n-2 as parameters

(define (sum-of-squares a b)                       ; Defines a function called sum-of-squares with two parameters a and b
  (+ (* a a) (* b b)))                             ; Multiplies a by a and b by b, then adds the results

(define (list-length list)                         ; Defines a function called list-length with one parameter list
  (if (null? list)                                ; Checks if the list is empty
      0                                            ; Returns 0 if true
      (+ 1 (list-length (cdr list)))))              ; Adds 1 to the result of the list-length function called with the rest of the list 

(define (quicksort list)                           ; Defines a function called quicksort with one parameter list
  (if (null? list)                                 ; Checks if the list is empty
      list                                         ; Returns the empty list if true
      (let ((pivot (car list))                      ; Defines a variable pivot as the first element of the list
            (less-than (lambda (x) (< x pivot)))    ; Defines a function that returns true if x is less than pivot
            (greater-than (lambda (x) (> x pivot)))) ; Defines a function that returns true if x is greater than pivot
        (append (quicksort (filter less-than (cdr list))) ; Returns a list with elements less than pivot sorted recursively
                (list pivot)                        ; The pivot element
                (quicksort (filter greater-than (cdr list))))))) ; Returns a list with elements greater than pivot sorted recursively

(quicksort '(5 2 8 4 9 1))                         ; Calls the quicksort function with a list of numbers as input
;Output: (1 2 4 5 8 9)                             ; Prints the sorted list as output