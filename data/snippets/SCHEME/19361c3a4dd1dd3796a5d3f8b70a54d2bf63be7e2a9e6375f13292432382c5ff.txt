;; Function to check if a number is a prime number
(define (is-prime? num)
    (cond
        ;; Base case: 2, 3, and 5 are prime numbers
        ((or (= num 2) (= num 3) (= num 5))
            #t)
        ;; If the number is even or a multiple of 3 or 5, it is not prime
        ((or (even? num) (= (modulo num 3) 0) (= (modulo num 5) 0))
            #f)
        ;; Check if the number is divisible by any number between 7 and its square root
        (else (define (check-prime? div)
                    (if (>= div (sqrt num))
                        #t
                        (if (= (modulo num div) 0)
                            #f
                            (check-prime? (+ div 2)))))
            (check-prime? 7))))

;; Function to find the next prime number after a given number
(define (next-prime num)
    (if (is-prime? (+ num 1))
        (+ num 1)
        (next-prime (+ num 1))))

;; Function to generate a list of prime numbers up to a given limit
(define (prime-list limit)
    (define (helper limit primes)
        (if (>= (length primes) limit)
            primes
            (helper limit (cons (next-prime (car primes)) primes))))
    (reverse (helper limit (list 7))))

;; Example usage: generate a list of 10 prime numbers
(prime-list 10)