;;
;; A generic tree data structure in Scheme
;;

;; Define a procedure for creating a tree
(define (make-tree value children)
  (cons value children))

;; Define a procedure for getting the value of a tree
(define (tree-value tree)
  (car tree))

;; Define a procedure for getting the children of a tree
(define (tree-children tree)
  (cdr tree))

;; Define a procedure for adding a child to a tree
(define (add-child tree child)
  (set-cdr! tree (cons (tree-children tree) (list child))))

;; Define a procedure for finding a target value in a tree
(define (find-value tree target)
  ;; Check if the current value is equal to the target
  (if (= (tree-value tree) target)
      ;; If equal, return the current tree
      tree
      ;; Else, iterate through all children and check if target is in the subtree
      (let loop ((children (tree-children tree)))
        (cond
          ((null? children) #f)
          ((find-value (car children) target) => (lambda (x) x))
          (else (loop (cdr children)))
      )
  ))
)