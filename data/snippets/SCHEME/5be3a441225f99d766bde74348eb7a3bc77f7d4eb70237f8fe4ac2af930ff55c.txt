(define (factorial n) ; defining a function named 'factorial' with a parameter 'n'
    (cond ; using the 'cond' statement to check for conditions
        ((= n 0) 1) ; if n is equal to 0, return 1
        (else (* n (factorial (- n 1)))) ; else, multiply n with factorial of n-1 
    )
)

(define (fibonacci n) ; defining a function named 'fibonacci' with a parameter 'n'
    (cond ; using the 'cond' statement to check for conditions
        ((or (= n 0) (= n 1)) n) ; if n is equal to 0 or 1, return n
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) ; else, add fibonacci of n-1 and n-2
    )
)

(define-syntax my-if ; creating a new syntax using 'define-syntax' keyword
    (lambda (x) ; lambda expression to take a conditional statement
        (if (car x) ; checking if the first element in the list is true
            (car (cdr x)) ; if true, return the second element
            (car (cdr (cdr x))) ; if false, return the third element
        )
    )
)

(my-if (list (= 2 2) 5 10)) ; calling my-if function with a list containing a conditional statement and two output values