; The following code snippet uses higher order functions and recursion to calculate the sum of a list of numbers

; define a function that takes two arguments, a function and a list of numbers
(define (sum f lst)
  ; use recursion to iterate through the list
  (if (null? lst) ; if the list is empty
      0 ; then return 0 for the base case
      ; otherwise, recursively call the function with the first element eliminated from the list
      (+ (f (car lst)) (sum f (cdr lst)))))

; define a function that takes one argument, a number
(define (square x)
  ; square the number and return the result
  (* x x))

; define a list of numbers
(define lst '(1 2 3 4 5))

; call the sum function with the square function and the list as arguments
; this will calculate the sum of the squares of all the numbers in the list

(sum square lst) ; returns 55 as the output