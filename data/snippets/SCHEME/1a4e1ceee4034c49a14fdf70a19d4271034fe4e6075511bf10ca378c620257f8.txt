;; Function to calculate the nth Fibonacci number
(define (Fibonacci n)
  (if (< n 2)
      n
      (+ (Fibonacci (- n 1)) (Fibonacci (- n 2)))))

;; Function to convert a list to a binary tree
(define (list-to-tree lst)
  (if (null? lst)
      '()
      (let ((midpoint (quotient (length lst) 2))) 
      	 ;; Use the midpoint to divide the list into left and right subtrees
         (let ((left (list-to-tree (take lst midpoint)))
               (right (list-to-tree (drop lst (+ midpoint 1)))))
         ;; Create a tree node with the first element of lst as the root
         (list (car lst) left right))))

;; Function to compute factorial using tail recursion
(define (factorial n)
  (define (iterate curr acc)
    (if (<= curr 1)
        acc
        (iterate (- curr 1) (* curr acc))))
  (iterate n 1))
  
;; Function to reverse a string using mutation
(define (reverse str)
  (let ((len (string-length str)))
    (let loop ((i (- len 1))
               (res ""))
      (if (>= i 0)
          ;; Append the last character of the string to the result
          (loop (- i 1) (string-append res (string (string-ref str i))))
          res))))