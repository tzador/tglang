;;; This code snippet is an example of a higher-order function in SCHEME.
(define (combine f lst)
  ;;; Takes in a function f and a list of numbers lst
  (cond ((null? lst) ;;; Checks if the list is empty
         lst)
        (else ;;; If list is not empty
         (foldr (lambda (x y) (f x y)) 0 lst))))
  ;;; Applies function f to each element of the list lst
  ;;; and returns the result by folding from right to left.

;; Example usage:
;; (combine + '(1 2 3 4)) ==> 10
;; (combine * '(1 2 3 4)) ==> 24