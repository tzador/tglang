;; Function for calculating the factorial of a number 
(define (factorial x) 
  ; x represents the number whose factorial is to be calculated
  (if (= x 0) 1 (* x (factorial (- x 1))))
)

;; Function for finding the n-th element of a list
(define (nthElement n lst)
  ; n represents the index of the element to be accessed
  ; lst represents the list in which the element will be searched for
  (cond ((< n 0) (error "Index out of range"))
        ((= n 0) (car lst))
        (else (nthElement (- n 1) (cdr lst)))
  )
)

;; Function for finding the sum of squares of numbers in a list 
(define (sumOfSquares lst)
  ; lst represents the list of numbers
  (if (null? lst) 0 (+ (square (car lst)) (sumOfSquares (cdr lst))))
)

;; Function for finding the maximum element in a list 
(define (maxElement lst)
  ; lst represents the list of elements
  (if (null? (cdr lst)) (car lst) (max (car lst) (maxElement (cdr lst))))
)

;; Function for reversing a list 
(define (reverseList lst)
  ; lst represents the list to be reversed
  (let loop ((lst lst) (rev ()))
    (if (null? lst) rev (loop (cdr lst) (cons (car lst) rev)))
  )
)

;; Function for checking if a list is a palindrome 
(define (palindrome? lst)
  ; lst represents the list to be checked
  (equal? lst (reverseList lst))
)

;; Function for finding the nth Fibonacci number 
(define (fibonacci n)
  ; n represents the index of the Fibonacci number to be calculated
  (if (<= n 2) 1 (+ (fibonacci (- n 1)) (fibonacci (- n 2))))
)

;; Function for sorting a list in ascending order 
(define (sort lst)
  ; lst represents the list to be sorted
  (if (null? lst) '()
      (let ((pivot (car lst))
            (smaller (filter (lambda (x) (< x pivot)) (cdr lst)))
            (greater (filter (lambda (x) (> x pivot)) (cdr lst))))
        (append (sort smaller) (list pivot) (sort greater))
      )
  )
)