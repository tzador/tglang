(define (merge-sort l)
    (cond
        ((or (null? l) (<= (length l) 1)) l)
        (else
            (let ((left (merge-sort (take l (/ (length l) 2))))
                  (right (merge-sort (drop l (/ (length l) 2)))))
                (merge left right))))
            
(define (take l n)
    (cond
        ((or (null? l) (<= (length l) 0)) l)
        ((<= n 0) '())
        (else
            (cons (car l) (take (cdr l) (- n 1)))))


(define (drop l n)
    (cond
        ((or (null? l) (<= (length l) 0)) l)
        ((<= n 0) l)
        (else (drop (cdr l) (- n 1)))))


(define (merge l1 l2)
    (cond
        ((null? l1) l2)
        ((null? l2) l1)
        ((<= (car l1) (car l2))
         (cons (car l1) (merge (cdr l1) l2))) 
        (else
            (cons (car l2) (merge l1 (cdr l2))))))

        
(merge-sort '(8 3 6 1 5 2 9 7))