(define (factorial n)             ; Defines a function to calculate the factorial of a given number
  (if (= n 0)                     ; Checks if the number is 0, if yes then returns 1
      1
      (* n (factorial (- n 1))))) ; Multiplies the number with the factorial of the number - 1 and repeats until n is 0

(define (fibonacci n)             ; Defines a function to calculate the nth number in the Fibonacci sequence
  (cond ((= n 0) 0)               ; Checks if n is 0, if yes then returns 0
        ((= n 1) 1)               ; Checks if n is 1, if yes then returns 1
        (else (+ (fibonacci (- n 1))    ; Calculates the nth number by recursively calling fibonacci function with n-1 and n-2
                 (fibonacci (- n 2))))))

(define (merge-lists list1 list2)  ; Defines a function to merge two lists
  (if (null? list1)                ; Checks if list1 is empty, if yes then returns list2 
      list2
      (cons (car list1) (merge-lists (cdr list1) list2))))  ; Appends the first element of list1 to the merged list and recursively calls the merge function with the remaining elements

(define (insertion-sort lst)       ; Defines a function to sort a list using insertion sort algorithm
  (let ((sorted '()))              ; Creates a new list for the sorted list
    (do ((unsorted lst (cdr unsorted)))     ; Iterates through the unsorted list
        ((null? unsorted) sorted)           ; Checks if the unsorted list is empty, if yes then returns the sorted list
      (let ((e (car unsorted)))
        (set! sorted (insert-sorted e sorted))))))


(define (insert-sorted element lst)      ; Defines a function to insert a given element in a sorted list
  (if (null? lst)                        ; Checks if the sorted list is empty, if yes then creates a new list with the element
      (list element)
      (if (>= (car lst) element)          ; Compares the first element of the sorted list with the given element
          (cons element lst)              ; If the element is smaller, it is inserted at the beginning of the list
          (cons (car lst) (insert-sorted element (cdr lst))))))  ; If the element is larger, the function is recursively called with the remaining elements of the list