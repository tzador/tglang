;; This function checks whether a given number is prime or not. Takes in a number and returns 'true' if it is prime, 'false' otherwise.
(define (is-prime? n)
  ;; First, check if the number is a multiple of 2 (even number)
  (cond
    ((= n 2) #t)	;; 2 is the only even prime number
    ((even? n) #f)  ;; If the number is even, it is not prime, return false
    (else
      ;; If the number is not a multiple of 2, we can start checking from 3 to sqrt(n)
      (define (check-divisors num divisor)
        (cond
          ;; If the divisor is greater than sqrt(n), we have checked all possible divisors
          ((> divisor (sqrt num)) #t)
          ;; Check if the number is divisible by the current divisor, if so, it is not prime
          ((= (remainder num divisor) 0) #f)
          ;; Otherwise, recursively check the next divisor
          (else (loop (+ divisor 2)))))

      ;; Use 'check-divisors' function to check all possible divisors starting from 3
      (check-divisors n 3))));; End of function