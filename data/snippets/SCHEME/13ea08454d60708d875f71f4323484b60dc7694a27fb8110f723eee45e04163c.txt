(define depth1                  ;Defines a procedure with the name "depth1"
  (lambda (list1 list2)         ;Takes two lists as its arguments 
    (let ((newlist '()))        ;Creates a new list to store the result
      (map                      ;Maps a procedure over the lists 
        (lambda (elem)          ;Defines a procedure to be applied to each element in the lists 
          (cond                  ;Checks for multiple conditions and executes corresponding code
            ((null? elem)       
             (set! elem newlist)) ;Sets the current element to the value of newlist 
            ((list? elem)         
             (set! elem           ;Sets the current element to the result of calling depth1 on the current element
               (depth1 elem newlist)))  
            (else elem)))         ;If none of the above conditions are met, the current element remains unchanged 
        (append list1 list2)))   ;Appends the two lists and passes the result to map 
    (cdr newlist)))              ;Returns the new list with the updated values