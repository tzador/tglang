;; A function that takes in a list of numbers and returns the sum of all even numbers
(define (sum-even lst)
  (cond ((null? lst) 0)
        ((equal? (remainder (car lst) 2) 0) (+ (car lst) (sum-even (cdr lst))))
        (else (sum-even (cdr lst)))))

sum-even ;Defines the function with one parameter

lst ;The parameter, which is a list of numbers

cond ;Conditional statement that checks multiple conditions

null? ;Checks if the list is empty

0 ;Returns 0 if the list is empty, indicating the end of the recursion

equal? ;Compares two values and returns #t if they are equal, #f if not

remainder ;Calculates the remainder of dividing two numbers

car ;Gets the first element of a list

cdr ;Gets the rest of the list after the first element

+ ;Adds two numbers together

else ;The default condition if none of the previous conditions are met, used as the base case for recursion

Annotated code snippet: