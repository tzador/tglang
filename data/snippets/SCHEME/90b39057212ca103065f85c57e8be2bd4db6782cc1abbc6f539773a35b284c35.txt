(define (count-stairs n)
  (if (< n 0)
      (error 'count-stairs "n must be non-negative")
      (let loop ((step 0) (stairs n) (ways (list 1)))
        (cond ((or (null? stairs) (= (car stairs) 0)) (car ways))
              ((= step 0) 
               (loop (+ step 1) (cdr stairs) (cons 1 ways)))
              ((= step 1)
               (loop 0 (remove-first stairs) (list (+ (car ways) 1))))
              (else
               (loop 0 (remove-first stairs) 
               (cons (+ (car ways) (car (remove-first stairs))) (cddr ways)))))))