(define (bubble-sort lst)\n
  (let loop ((changes #f)
             (lst lst))
    (cond\n
      [(null? lst) (values changes '())]\n
      [(null? (cdr lst)) (values changes (list (car lst)))]\n
      [else
       (let ([x (car lst)] [y (cadr lst)])\n
         (if (< x y)\n
             (let-values ([(changes new-lst) (loop changes (cons x (cddr lst)))])\n
               (if changes (values #t new-lst)\n
                   (values changes lst)))\n
             (let-values ([(changes new-lst) (loop #t (cons y (cons x (cddr lst))))])\n
               (values #t new-lst)))))))