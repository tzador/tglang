(define reverse-list (lambda (xs)                    ;; creates a function to reverse a list
         (if (null? xs)                              ;; checks if the list is empty
             '()                                     ;; if true, return empty list
             (append (reverse-list (cdr xs))         ;; recursively call reverse function on rest of the list
                     (list (car xs))))))             ;; append the first element of the original list to the end
(reverse-list (list 1 2 3 4))                        ;; output: (4 3 2 1)