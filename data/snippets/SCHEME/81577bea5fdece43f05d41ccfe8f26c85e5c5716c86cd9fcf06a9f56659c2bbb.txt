;;define a function that checks if a number is prime
(define (is-prime? n)
  ;;base case, if the number is 2 or 3, return #t (true)
  (cond ((or (= n 2) 
             (= n 3)) 
         #t)
        ;; if the number is less than or equal to 1, return #f (false)
        ((<= n 1) 
         #f)
         ;; check if the number is divisible by 2 or 3, return #f (false)
        ((or (= (modulo n 2) 0) 
             (= (modulo n 3) 0)) 
         #f)
         ;; recursively check if the number is divisible by numbers starting from 5 to its square root
        (else 
         (let loop ((i 5))
           (if (> i (sqrt n))
               #t
               ;; if the number is divisible by i, return #f (false)
               (if (= (modulo n i) 0)
                   #f
                   ;; otherwise, increment i by 2 and continue checking
                   (loop (+ i 2))))))))
                   
;;define a function that returns all prime numbers in a range
(define (prime-range start end)
  ;; create a list to store the prime numbers
  (let ((primes '()))
    ;; loop through numbers from start to end
    (do ((i start (+ i 1)))
        ((> i end))
      ;; check if the current number is prime using the is-prime? function
      (if (is-prime? i)
          ;; if prime, add it to the primes list
          (set! primes (cons i primes))))
    ;; return the list of primes
    primes))
    
;;example usage, returns all prime numbers from 1 to 20
(prime-range 1 20)
;;output: (2 3 5 7 11 13 17 19)