;; This is a function that takes in two arguments and returns the sum of the squares of the arguments.
(define (sum-squares x y)
  (+ (* x x) (* y y)))

;; This is a helper function that multiplies two numbers.
(define (multiply x y)
  (* x y))

;; This is a function that takes in a list of numbers and returns the sum of the squares of each number in the list.
(define (sum-squares-list lst)
  (if (null? lst)
      0
      (+ (sum-squares (car lst) (car lst)) (sum-squares-list (cdr lst)))))

;; This is a function that takes in a list of numbers and a function and applies the function to each element in the list.
(define (map-apply lst func)
  (if (null? lst)
      '()
      (cons (func (car lst)) (map-apply (cdr lst) func))))

;; This is a function that takes in a list of numbers and returns the sum of the squares of the numbers using the map-apply and sum-squares functions.
(define (sum-squares-map lst)
  (apply + (map-apply lst sum-squares)))