(define map
  (lambda (func lst)
    (if (null? lst)
        '()
        (cons (func (car lst)) (map func (cdr lst)))))) ;Defines a higher-order function "map" that takes in a function and a list as parameters to apply the function to each element in the list and return a new list with the function applied to each element.

(define fold
  (lambda (func lst acc)
    (if (null? lst)
        acc
        (fold func (cdr lst) (func acc (car lst)))))) ;Defines a higher-order function "fold" that takes in a function, a list, and an accumulator as parameters to fold the list into a single value by applying the function to each element and the accumulator.

(define filter
  (lambda (pred lst)
    (cond ((null? lst) '()) ;Defines a higher-order function "filter" that takes in a predicate function and a list as parameters to filter the list based on the predicate function and return a new list with only the elements that pass the predicate.
          ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))
          (else (filter pred (cdr lst))))))