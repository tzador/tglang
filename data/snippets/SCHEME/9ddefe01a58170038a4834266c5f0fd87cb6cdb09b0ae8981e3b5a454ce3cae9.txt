;; This function takes in a list of numbers and calculates their product
(define (calculate-product lst)
;; Base case: when the list is empty, return 1 as the product
(cond ((null? lst) 1)
;; Recursive case: multiply the first element of the list with
;; the product of the rest of the list
(else (let ((first (car lst))
(result (calculate-product (cdr lst))))
(* first result))))
)
;; Example usage: 
(calculate-product '(1 2 3 4))
;; Output: 
24