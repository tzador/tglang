;; Function to recursively calculate the factorial of a number
(define (factorial num)
  (if (<= num 1) ;; checks if number is one or less
      1 ;; returns 1
      (* num (factorial (- num 1))))) ;; multiplies number by the factorial of the number minus 1

;; Function to find the sum of all numbers in a list
(define (sum-list lst)
  (if (null? lst) ;; checks if list is empty
      0 ;; returns 0
      (+ (car lst) (sum-list (cdr lst))))) ;; adds first element of list to the sum of the rest of the list

;; Function to convert a binary number to decimal
(define (binary-to-decimal bin)
  (if (null? bin) ;; checks if binary number is empty
      0 ;; returns 0
      (+ (* (car bin) (expt 2 (- (length bin) 1))) (binary-to-decimal (cdr bin))))) ;; multiplies first element by 2 to the power of the length of the list minus 1, and adds it to the result of the function on the rest of the list

;; Function to remove duplicates from a list
(define (remove-duplicates lst)
  (cond ((null? lst) lst) ;; checks if list is empty
        ((null? (cdr lst)) lst) ;; checks if list has only one element
        ((equal? (car lst) (car (cdr lst))) (remove-duplicates (cdr lst))) ;; checks if first two elements are equal and recursively calls function on the rest of the list
        (else (cons (car lst) (remove-duplicates (cdr lst)))))) ;; adds first element to the result of the function on the rest of the list, if no duplicates are found