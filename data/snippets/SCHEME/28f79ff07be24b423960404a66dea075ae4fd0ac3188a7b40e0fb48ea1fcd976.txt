(define (sqrt-iter guess x) ; defining the square root function
  (if (good-enough? guess x) ; checking if guess is close enough to the actual square root
      guess
      (sqrt-iter (improve guess x) x))) ; recursively calling the sqrt-iter function with improved guess

(define (good-enough? guess x) ; defining the good-enough? function
  (< (abs (- (square guess) x)) 0.001)) ; checking if the difference between the square of guess and x is less than 0.001

(define (improve guess x) ; defining the improve function
  (average guess (/ x guess))) ; calculating the average of guess and x/guess and returning it as the new guess

(define (square x) (* x x)) ; defining the square function

(define (average x y) (/ (+ x y) 2)) ; defining the average function

(define (sqrt x) ; defining the actual square root function
  (sqrt-iter 1.0 x)) ; calling the sqrt-iter function with an initial guess of 1.0
)