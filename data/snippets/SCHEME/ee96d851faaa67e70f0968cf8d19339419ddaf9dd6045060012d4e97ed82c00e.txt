(define (map f lst)
  (if (null? lst)
      '()
      (cons (f (car lst)) (map f (cdr lst)))))

; The map function takes in a function f and a list lst
; If lst is empty, returns an empty list
; Otherwise, cons the result of applying f to the first element of lst
; with the result of recursively calling map on the rest of lst
; this essentially applies f to each element of lst and creates a new list
; with the results

(map (lambda (x) (* x x)) '(1 2 3 4 5))
; This line calls the map function with the lambda expression (x) (* x x)
; as the function f and the list '(1 2 3 4 5) as the lst
; the result would be the list (1 4 9 16 25)