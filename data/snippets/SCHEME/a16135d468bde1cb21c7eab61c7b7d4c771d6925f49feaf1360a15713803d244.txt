;; This is a complex code snippet in Scheme
;; It creates a function that checks if a number is prime
;; Input: num (integer)
;; Output: #t (if number is prime) or #f (if number is not prime)

(define (is-prime num)
  (if (= num 2)                      ; If number equals 2
      #t                             ; Return true
      (if (not (integer? num))       ; If number not an integer
          #f                         ; Return false
          (let ((limit (floor (sqrt num))))  ; Define limit as the floor of the square root of number
            (define (check-prime i)           ; Define inner helper function check-prime
              (if (= i limit)          ; If i equals limit
                  #t                  ; Return true
                  (if (= 0 (modulo num i)) ; If number modulo i equals 0
                      #f             ; Return false
                      (check-prime (+ i 1)) ; Else call check-prime with i + 1
                      )))
            (check-prime 2)))))      ; Call inner function with i = 2