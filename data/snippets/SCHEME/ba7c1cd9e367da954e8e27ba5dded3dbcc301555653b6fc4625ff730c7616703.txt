(define (prime-factors n)
    (if (<= n 1) '()
        (let ((f (smallest-divisor n)))
            (cons f (prime-factors (/ n f))))))

(define (smallest-divisor n)
    (define (iter c)
        (define (should-continue?)
            (if (> (* c c) n)
                #t
                (divides? c n)))
        (if (should-continue?)
            c
            (iter (+ c 1))))
    (iter 2))

(define (divides? a b)
    (zero? (modulo b a))

(define (zero? n)
    (eq? n 0)))

'((prime-factors 20) ; returns '(2 2 5)
 (prime-factors 49) ; returns '(7 7)
 (prime-factors 100) ; returns '(2 2 5 5)
 (prime-factors 33)) ; returns '(3 11))