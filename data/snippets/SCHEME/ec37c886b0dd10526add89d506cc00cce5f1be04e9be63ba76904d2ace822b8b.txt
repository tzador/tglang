(define (quicksort lst)                           ; Defines a function called "quicksort" that takes in a list (lst)
    (if (or (null? lst) (<= (length lst) 1))     ; Checks if the list is empty or has only one element
        lst                                     ; If either condition is true, then returns the list unchanged
        (let ((pivot (car lst)))                ; Otherwise, defines a local variable called "pivot" that stores the first element of the list
            (append                                 ; Uses the "append" function to combine multiple lists into one
                (quicksort (filter (lambda (x) (< x pivot)) (cdr lst)))     ; Uses recursion to sort the list of elements smaller than the pivot
                (list pivot)                                               ; Adds the pivot to the sorted list
                (quicksort (filter (lambda (x) (>= x pivot)) (cdr lst)))  ; Uses recursion to sort the list of elements larger than or equal to the pivot
            )
        )
    )
)