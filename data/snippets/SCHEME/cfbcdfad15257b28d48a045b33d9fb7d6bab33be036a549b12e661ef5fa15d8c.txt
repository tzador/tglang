(define (intersect lst1 lst2)
  (cond ((null? lst1) ; checks if lst1 is empty
         '()) ; returns empty list if so
        ((member (car lst1) lst2) ; checks if first element of lst1 is a member of lst2
         (cons (car lst1) (intersect (cdr lst1) lst2))) ; if true, append first element to intersect of rest of lst1 and lst2
        (else ; if the first element is not a member of lst2
         (intersect (cdr lst1) lst2)))) ; recurses on rest of lst1 and lst2