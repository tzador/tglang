(define (tree-map func tree)                       ; `define` and `tree-map` function with parameters `func` and `tree`
  (cond                                           ; `cond` branching expression
    ((null? tree) '())                            ; if `tree` is empty
    ((list? tree)                                 ; if `tree` is a list
     (cons (tree-map func (car tree))              ; call `tree-map` on `func` and `car` of `tree`
           (tree-map func (cdr tree))))            ; call `tree-map` on `func` and `cdr` of `tree`
    ((atom? tree) (func tree))                     ; if `tree` is an atom, apply `func` to it
    (else tree)))                                  ; else return `tree` as it is