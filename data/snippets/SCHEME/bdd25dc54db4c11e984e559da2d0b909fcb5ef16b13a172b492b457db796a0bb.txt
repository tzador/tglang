;; Define 'factorial' function with recursive definition
(define (factorial n)
  ; Condition for base case
  (if (= n 0)
    1
    ; Recursive call to 'factorial' with n-1
    (* n (factorial (- n 1))) ))

;; Define 'fibonacci' function with iterative definition
(define (fibonacci n)
  ; Define helper function with three parameters
  (define (fib-help n a b)
    ; Condition for base case
    (cond ((= n 0) a)
          ((= n 1) b)
          (else (fib-help (- n 1) b (+ a b)))))
  ; Call helper function with initial values
  (fib-help n 0 1))

;; Define 'sum' function with higher-order function 'reduce'
(define (sum lst)
  ; Use 'reduce' to sum all elements in list
  (reduce + lst))

;; Define 'reverse' function with iterative definition
(define (reverse lst)
  ; Define helper function with two parameters
  (define (rev-help lst acc)
    ; Condition for base case
    (if (null? lst)
        acc
        ; Add current element to front of accumulator
        (rev-help (cdr lst) (cons (car lst) acc))))
  ; Call helper function with initial values
  (rev-help lst '()))

;; Define 'insertion-sort' function with iterative definition
(define (insertion-sort lst)
  ; Define helper function with two parameters
  (define (ins-sort-help lst sorted)
    ; Condition for base case
    (if (null? lst)
        sorted
        ; Compare first element in list to elements in sorted list
        ; and insert in correct position
        (ins-sort-help (cdr lst)
                       (insert (car lst) sorted))))
  ; Call helper function with initial values
  (ins-sort-help lst '()))

;; Define 'binary-search' function with iterative definition
(define (binary-search key lst)
  ; Define helper function with parameters for key, list, and indices
  (define (bin-search-help key lst low high)
    ; Condition for base case
    (if (> low high)
        #f
        ; Calculate middle index
        (let ((mid-index (quotient (+ low high) 2)))
          ; Compare key with element at middle index
          (cond ((= key (list-ref lst mid-index)) mid-index)
                ((< key (list-ref lst mid-index))
                 ; Recursively call helper function with updated high index
                 (bin-search-help key lst low (- mid-index 1)))
                (else
                 ; Recursively call helper function with updated low index
                 (bin-search-help key lst (+ mid-index 1) high))))))
  ; Call helper function with initial values
  (bin-search-help key lst 0 (- (length lst) 1)))