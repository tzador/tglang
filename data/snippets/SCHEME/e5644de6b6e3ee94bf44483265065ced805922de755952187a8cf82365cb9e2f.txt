;; This is a function that takes in a list and a number as parameters
;; and returns a new list with the given number added to the end of it.

(define (add-to-end lst num)
    ;; Helper function that takes in two parameters, the original list and the final list
    ;; Returns the final list with all elements from the original list and the new number added
    (define (helper orig final)
        ;; Base case: original list is empty, return final list
        (if (null? orig)
            final
            ;; Recursive case: add first element of original list to the end of final list
            ;; Then call helper function again with the rest of the original list and the updated final list
            (helper (cdr orig) (append final (list (car orig))))
        )
    )
    ;; Call helper function with parameters lst as the original list and an empty list as the final list
    (helper lst '())
)

;; Example call: (add-to-end '(1 2 3) 4)
;; Output: (1 2 3 4)