(define (list-min lst) ; defining a function that takes in a list as its argument
    (cond ; using cond to specify multiple cases
        ((null? lst) lst) ; if list is empty, return empty list
        ((null? (cdr lst)) (car lst)) ; if only one element in list, return that element
        (else ; otherwise
            (let ((rest (list-min (cdr lst)))) ; define a variable 'rest' that stores the minimum of the rest of the list
                (if (< (car lst) rest) ; if the first element is smaller than the rest,
                    (car lst) ;return the first element
                    rest) ; otherwise, return the minimum of the rest of the list
            )
        )
    )
)

(define (list-sort lst) ; defining a function to sort a list
    (if (null? lst) ; base case: if list is empty, return empty list
        lst
        (let ((min (list-min lst))) ; defining a variable 'min' to store the minimum element of the list
            (cons min (list-sort (remove min lst))) ; using cons to add the minimum element to the sorted list and remove it from the original list
        )
    )
)

(display (list-sort (list 9 3 7 2 5 1))) ; displaying the sorted list