; This is a function that checks if a given list is symmetric
(define (is-symmetric lst)
    ; Helper function to reverse a list
    (define (reverse lst)
        ; This function takes in a list and an accumulator
        (define (reverse-recursive lst acc)
            ; If the input list is empty, return the accumulator
            (if (null? lst)
                acc
                ; Else, recursively call the function with the rest of the list and add the first element to the beginning of the accumulator
                (reverse-recursive (cdr lst) (cons (car lst) acc))))
        ; Call the helper function with an empty accumulator
        (reverse-recursive lst '()))
    
    ; Check if the input list is null and return true if it is
    (if (null? lst)
        #t
        ; Else, check if the input list is equal to its reverse using the equal? function
        (equal? lst (reverse lst))))