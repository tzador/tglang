(define (fibonacci n)                            ; defines a function 'fibonacci' with input 'n'
  (letrec ((fib-list (lambda (m)                 ; defines a list of fibonacci numbers as a lambda function with input 'm'
                       (if (or (eq? m 0) (eq? m 1))  ; checks if 'm' is equal to 0 or 1
                           m                            ; if true, return 'm'
                           (+ (fib-list (- m 1)) (fib-list (- m 2)))))))    ; if false, recursively call the function for (m-1) and (m-2), and add the results
    (if (or (eq? n 0) (eq? n 1))                 ; checks if 'n' is equal to 0 or 1
        n                                          ; if true, return 'n'
        (fib-list n))))                          ; if false, call the fib-list lambda function with input 'n' to get the nth fibonacci number