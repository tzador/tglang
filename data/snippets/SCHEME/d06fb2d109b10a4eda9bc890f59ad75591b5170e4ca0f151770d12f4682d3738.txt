;;; A function named duplicate-list that takes in a list as an argument
;;; and returns a new list with elements repeated twice

(define (duplicate-list lst)
  ;;; Helper function named helper
  ;;; Takes in a list and accumulates the repeated elements
  (define (helper acc lst1)
    ;;; Base case when the list is empty
    (if (null? lst1)
        acc
        ;;; Recursive case, append the first element twice to the accumulated list
        (helper (append (list (car lst1) (car lst1)) acc) (cdr lst1))))
  ;;; Call helper function
  (helper '() lst))