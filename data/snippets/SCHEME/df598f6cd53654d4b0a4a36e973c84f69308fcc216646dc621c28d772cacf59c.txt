;; define factorial function
(define (factorial n)
  ;; check for base case
  (if (= n 0)
      1
      ;; recursive function call
      (* n (factorial (- n 1)))))
      
;; define function to find sum of a list
(define (sum lst)
  ;; check for empty list
  (if (null? lst)
      0
      ;; recursive function call
      (+ (car lst) (sum (cdr lst)))))

;; define function to reverse a list
(define (reverse lst)
  ;; check for empty list
  (if (null? lst)
      '()
      ;; recursive function call
      (append (reverse (cdr lst)) (list (car lst)))))

;; define function to check if a number is prime
(define (is-prime n)
  (define (check-prime n div)
    ;; check for base case
    (if (= div 1)
        #t
        ;; check if number is divisible
        (if (= (modulo n div) 0)
            #f
            ;; recursive function call
            (check-prime n (- div 1)))))
  ;; start div at n-1
  (check-prime n (- n 1)))
  
;; define function to calculate Fibonacci sequence
(define (fibonacci n)
  ;; check for base case
  (if (or (= n 0) (= n 1))
      n
      ;; recursive function call
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))