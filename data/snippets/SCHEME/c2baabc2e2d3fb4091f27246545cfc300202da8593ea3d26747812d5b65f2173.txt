(define (factorial n) 
  (if (= n 0) 
      1 
      (* n (factorial (- n 1))))) 
       
(define (fibonacci n) 
  (if (<= n 1) 
      1 
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) 
       
(define (power x n) 
  (if (= n 0) 
      1 
      (* x (power x (- n 1))))) 
       
(define (is-prime n) 
  (define (iter i) 
    (if (< i 2) 
        #t 
        (if (= (modulo n i) 0) 
            #f 
            (iter (- i 1))))) 
  (iter (- n 1))) 
       
(define (reverse lst) 
  (if (null? lst) 
      lst 
      (reverse (cdr lst)))) 
       
(define (map f lst) 
  (if (null? lst) 
      lst 
      (cons (f (car lst)) (map f (cdr lst))))) 
     
(define (filter pred lst) 
  (cond ((null? lst) lst) 
        ((pred (car lst)) 
          (cons (car lst) (filter pred (cdr lst)))) 
        (else (filter pred (cdr lst))))) 
     
(define (reduce f init lst) 
  (if (null? lst) 
      init 
      (f (car lst) (reduce f init (cdr lst)))))