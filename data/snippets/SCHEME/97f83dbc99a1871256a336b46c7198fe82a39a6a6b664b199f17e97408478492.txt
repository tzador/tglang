;; Function to check if a list is in ascending order
(define (ascending? lst)
  (cond
    ((null? lst) #t)                    ; empty list is always ascending
    ((null? (cdr lst)) #t)              ; list with only one element is always ascending
    ((> (car lst) (cadr lst)) #f)       ; if first element is bigger than second, list is not ascending
    (else (ascending? (cdr lst)))       ; recursively call the function on the rest of the list
  )
)

;; Function to sort a given list in ascending order using insertion sort
(define (insertion-sort lst)
  (define (insert lst number)
    (cond
      ((null? lst) (list number))     ; if list is empty, just append number as the only element
      ((< number (car lst)) (cons number lst))    ; if number is smaller than first element, insert it at the beginning
      (else (cons (car lst) (insert (cdr lst) number)))   ; otherwise, recursively insert number in the rest of the list
    )
  )
  (define (insertion-rec lst sorted)
    (if (null? lst)
        sorted   ; if list is empty, return the sorted list
        (insertion-rec (cdr lst) (insert sorted (car lst)))   ; recursively call insert on rest of list and sorted list
    )
  )
  (insertion-rec lst '()   ; call insert on the original list and an empty list
)

;; Main function to take a list as input and output the sorted list
(define (sort-list lst)
  (if (ascending? lst)
      lst    ; if list is already ascending, return the list as output
      (insertion-sort lst)   ; otherwise, call insertion sort on the list and return the sorted list as output
  )
)

;; Example usage
(sort-list '(5 7 2 9 1))   ; Output: (1 2 5 7 9)