(define (merge-sort lst) ; Defines a function named "merge-sort" which takes in a list parameter
  (cond ; Executes a series of conditional statements
    ((null? (cdr lst)) lst) ; Checks if the list is empty, if so returns the list
    ((null? lst) lst) ; Checks if the list is empty, if not returns the list
    (else ; Executes if none of the above conditions are met
      (let* ((mid (quotient (length lst) 2)) ; Defines a variable named "mid" which holds half of the list's length
             (left (merge-sort (take lst mid))) ; Defines a variable named "left" which holds the first half of the list
             (right (merge-sort (drop lst mid)))) ; Defines a variable named "right" which holds the second half of the list
        (merge left right))))) ; Calls the "merge" function passing in "left" and "right" as arguments