#lang racket
(define (factorial n)  ; this function calculates the factorial of a given number
  (if (zero? n)       ; recursive base case
      1               ; if number is zero, then factorial is 1
      (* n (factorial (- n 1)))))  ; else multiply number with factorial of n-1, continues recursion

(define (power x y)  ; this function calculates x raised to the power of y
  (if (zero? y)     ; recursive base case
      1             ; if power is 0, then output is 1
      (* x (power x (- y 1)))))  ; else multiply x with power(x, y-1), continues recursion

(define (fibonacci n)  ; this function calculates the n-th number in the Fibonacci sequence
  (cond ((= n 0) 0)  ; base case #1: if n is 0, return 0
        ((= n 1) 1)  ; base case #2: if n is 1, return 1
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))  ; else, return sum of n-1th and n-2th Fibonacci numbers, continues recursion