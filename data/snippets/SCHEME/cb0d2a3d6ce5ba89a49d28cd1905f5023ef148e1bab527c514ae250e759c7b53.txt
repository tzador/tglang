;; Define a recursive function to find the factorial of a number
(define factorial
  (lambda (n)
    (if (<= n 1)
        1
        (* n (factorial (- n 1))))))

;; Define a function to find the nth Fibonacci number
(define fibonacci
  (lambda (n)
    (if (<= n 2)
        1
        (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

;; Define a function to compute the greatest common divisor (GCD)
(define gcd
  (lambda (a b)
    (if (= b 0)
        a
        (gcd b (remainder a b)))))

;; Define a function to check if a number is prime
(define is-prime?
  (lambda (n)
    (if (<= n 1)
        #f
        (define (factors k)
          (filter (lambda (x) (= (remainder n x) 0))
                  (range 2 (floor (sqrt n) 1))))
        (zero? (length (factors n)))))

;; Define a function to reverse a list
(define reverse-list
  (lambda (lst)
    (if (null? lst)
        '()
        (append (reverse-list (cdr lst)) (list (car lst))))))

;; Define a function to insert an element into a sorted list
(define insert-sorted
  (lambda (x lst)
    (if (null? lst)
        (list x)
        (if (< x (car lst))
            (cons x lst)
            (cons (car lst) (insert-sorted x (cdr lst)))))))