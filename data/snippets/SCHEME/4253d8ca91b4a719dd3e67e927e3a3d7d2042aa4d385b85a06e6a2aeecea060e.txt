;; Define a procedure to sort a list in ascending order, using bubble sort algorithm.
(define (bubble-sort lst)
  (define (swap lst i j)
    (let* ((a (list-ref lst i))
           (b (list-ref lst j)))
      (list-set lst j a)
      (list-set lst i b)))
  (let loop ((done #f))
    (cond
      (done lst)
      (else
        (let loop ((i 0))
          (cond
            ((= i (- (length lst) 1)) (loop #t)) ;; The list is sorted if we reach the end without any swap.
            ((> (list-ref lst i) (list-ref lst (+ i 1))) ;; If the current element is greater than the next one, swap.
              (swap lst i (+ i 1))
              (loop (- i 1)))
            (else (loop (+ i 1)))))))))