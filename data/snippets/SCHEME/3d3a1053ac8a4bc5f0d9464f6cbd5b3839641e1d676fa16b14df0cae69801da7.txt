; Define a procedure `sum-numbers` that takes in a list of numbers and returns
; the sum of all the numbers in the list.
(define (sum-numbers lst)
  (if (null? lst) ; Check if list is empty
    0 ; If list is empty, return 0
    (+ (car lst) (sum-numbers (cdr lst))) ; Else, add first element of list with the result of calling sum-numbers on the rest of the list
  )
)

; Define a procedure `factorial` that takes in a number and returns the factorial of that number.
; A factorial of a number n is represented as n! which is the product of all numbers from 1 to n.
(define (factorial n)
  (if (= n 0) ; Base case: if n is 0, the factorial is 1
    1 ; Return 1
    (* n (factorial (- n 1))) ; Else, multiply n with the factorial of n-1
  )
)

; Define a procedure `fibonacci` that takes in a number n and returns the nth number in the Fibonacci sequence.
; The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding numbers.
(define (fibonacci n)
  (if (or (= n 1) (= n 2)) ; Base case: if n is 1 or 2, fibonacci sequence is 1
    1 ; Return 1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; Else, add the result of calling fibonacci on n-1 and n-2
  )
)

; Define a procedure `perfect-number` that takes in a number n and returns if it is a perfect number.
; A perfect number is a positive integer that is equal to the sum of its positive divisors,
; excluding the number itself.
(define (perfect-number n)
  (define (sum-of-divisors num divs)
    (if (= divs 0) ; If there are no more divisors to check
      0 ; Return 0
      (if (= (modulo num divs) 0) ; If current divisor divides evenly
        (+ divs (sum-of-divisors num (- divs 1))) ; Add it to the running sum and check the rest of the divisors
        (sum-of-divisors num (- divs 1)) ; Else, just check the rest of the divisors
      )
    )
  )

  (if (= (sum-of-divisors n n) n) ; If the sum of all divisors is equal to n
    #t ; Return true
    #f ; Else, return false
  )
)

; Define a procedure `insertion-sort` that takes in a list and returns the list sorted in ascending order.
(define (insertion-sort lst)
  (if (null? lst) ;  Check if list is empty
    '() ; If list is empty, return empty list
    (let ((sorted-list (insertion-sort (cdr lst)))) ; Else, recursively call insertion-sort on the rest of the list
      (insert (car lst) sorted-list) ; Insert the first element of the list into the sorted list
    )
  )
)

; Define a helper procedure `insert` to insert a number into a sorted list and return the new list.
(define (insert num lst)
  (if (null? lst) ; If list is empty
    (list num) ; Return a list with num as its only element
    (if (< num (car lst)) ; If num is less than the first element of the list
      (cons num lst) ; Return a new list with num as the first element and the rest of the list as its second element
      (cons (car lst) (insert num (cdr lst))) ; Else, recursively insert num into the rest of the list and add the first element back to the front
    )
  )
)