(define (prime? n) ; Defines a procedure named `prime?`with `n` as a parameter
	(if (< n 2) #f ; If `n` is less than 2, return false
		(let ((divisor 2)) ; Use a `let` statement to define `divisor` as 2
			(do ((i divisor (+ i 1))) ; Use a `do` statement to loop through `divisor` from 2 to `n`
				((= i n) #t) ; If `i` reaches `n`, return true
				(if (= (remainder n i) 0) #f) ; If `n` is divisible by `i`, return false
			)
		)
	)
)