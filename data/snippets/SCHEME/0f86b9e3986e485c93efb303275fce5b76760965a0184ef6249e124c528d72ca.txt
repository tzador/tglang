(define balanced-tree
     (lambda (n val)
          (module balanced-tree-module 
               (import scheme) 
               (begin 
                    (define large-value (* val n))
                    (define balanced-tree 
                         (lambda (pairs n) 
                                (cond 
                                    ((null? pairs) '())
                                    ((= n 0) '())
                                    (else 
                                         (let* ([left-pairs (floor (/ n 2))
                                                [right-pairs (- n left-pairs))
                                                [shifted-pairs (vector-ref pairs (- n 1))]
                                                [left-values (balanced-tree shifted-pairs n)]
                                                [right-values (balanced-tree pairs (- n 1))]
                                                )
                                               (cons (cons left-values right-values)
                                                     (balanced-tree pairs (- n 1))))))) 
                    (define tree-values (balanced-tree (make-vector n large-value) n))
                    (values tree-values n)))))