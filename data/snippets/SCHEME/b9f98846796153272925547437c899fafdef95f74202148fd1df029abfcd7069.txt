`(define (map func ls)
  (let loop ((ls ls) (acc null))
    (if (null? ls)
        (reverse acc)
        (loop (cdr ls) (cons (func (car ls)) acc)))))`

This code snippet is a function that takes in two arguments, a function and a list. It then uses tail recursion to map the given function onto the elements of the list, returning a new list with the results. The `define` statement defines a function called "map" that takes in two parameters.

The `let` statement creates a local variable `loop` that takes in `ls` and `acc` as its arguments. 

The `if` statement checks if the list `ls` is empty, and if it is, the `reverse` function is called to reverse the elements in the list `acc`. 

If the list `ls` is not empty, the `loop` function is called recursively with `cdr ls` (the rest of the list) as the first argument, and `cons` (adds) the result of the function `func` on the first element of `ls` to the list `acc` as the second argument. This new list is then passed as `acc` to the next iteration of the `loop` function.

The `reverse` function is used to ensure that the returned list is in the same order as the original list. 

This code snippet is an efficient and recursive implementation of the commonly used `map` function in functional programming languages.