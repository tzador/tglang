(define (flatten lst)                                  ; Define a function "flatten" that takes one parameter "lst"
    (cond                                               ; Use the conditional statement "cond" to handle different cases
        ((null? lst) '())                               ; If the list is empty, return an empty list
        ((list? (car lst))                              ; If the first element of the list is another list
            (append (flatten (car lst)) (flatten (cdr lst)))) ; Use recursion to flatten both the first and remaining elements of the list and append them
        (else (cons (car lst) (flatten (cdr lst))))     ; Otherwise, add the first element to the flattened remaining list
    )
)