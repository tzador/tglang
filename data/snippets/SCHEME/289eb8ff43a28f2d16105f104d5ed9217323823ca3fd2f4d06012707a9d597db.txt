(define (merge-sort lst) ;defines a function called merge-sort
  (letrec ;uses letrec to create recursive functions
    ((split (lambda (lst1 lst2) ;defines a split function that takes in two lists
              (if (null? lst1) ;checks if lst1 is empty
                  (list lst2 '()) ;if lst1 is empty, lst2 is returned in a list with an empty list
                  (let* ((mid (floor (/ (length lst1) 2))) ;calculates mid of lst1
                         (start (take lst1 mid)) ;creates a start list using the first half of lst1
                         (end (drop lst1 mid))) ;creates an end list using the second half of lst1
                    (if (>= (length lst1) 2) ;checks if the length of lst1 is greater than or equal to 2
                        (split start (split end lst2)) ;recursive call to split function with updated start and end lists
                        (split (list (first lst1)) (split (rest lst1) lst2))))))) ;recursive call to split function with updated list and lst2
    (merge (lambda (lst1 lst2) ;defines a merge function that takes in two lists
             (if (null? lst1) lst2 ;checks if lst1 is empty, if it is, lst2 is returned
                 (if (null? lst2) lst1 ;checks if lst2 is empty, if it is, lst1 is returned
                     (let ((head1 (first lst1)) ;stores the first element of lst1 in head1
                           (head2 (first lst2))) ;stores the first element of lst2 in head2
                       (if (< head1 head2) ;checks if head1 is less than head2
                           (cons head1 (merge (rest lst1) lst2)) ;if it is, head1 is added to the list and recursive call is made with rest of lst1 and lst2
                           (cons head2 (merge lst1 (rest lst2)))))))) ;if head1 is not less than head2, head2 is added to the list and recursive call is made with lst1 and rest of lst2
    (cond ((or (null? lst) (null? (rest lst))) lst) ;checks if lst is empty or contains only one element, if so, lst is returned
          (else (let ((lst-split (split lst '()))) ;creates a variable lst-split that stores the result of calling split function on lst and an empty list
                  (merge (merge-sort (first lst-split)) (merge-sort (second lst-split)))))))) ;recursive call to merge function with updated lst-split and sorted result from calling merge-sort on first and second elements of lst-split