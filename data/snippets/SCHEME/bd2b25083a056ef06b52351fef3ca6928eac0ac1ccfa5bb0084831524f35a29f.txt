;; Define a function that calculates the factorial of a number
(define (factorial n)
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

;; Define a function that calculates the nth number in the Fibonacci sequence
(define (fibonacci n)
  (if (<= n 2)
    1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; Define a function that takes in a list of numbers and returns their sum
(define (sum-list lst)
  (if (null? lst)
    0
    (+ (car lst) (sum-list (cdr lst)))))

;; Define a function that takes in a list of numbers and returns their product
(define (product-list lst)
  (if (null? lst)
    1
    (* (car lst) (product-list (cdr lst)))))

;; Define a function that takes in a list of strings and returns the concatenated string
(define (concatenate lst)
  (if (null? lst)
    ""
    (string-append (car lst) (concatenate (cdr lst)))))

;; Define a function that takes a number x and a list of numbers and returns a list of numbers multiplied by x
(define (multiply x lst)
  (if (null? lst)
    '()
    (cons (* x (car lst)) (multiply x (cdr lst)))))

;; Define a function that takes a predicate function and a list of elements and returns a list of elements that satisfy the predicate
(define (filter predicate lst)
  (if (null? lst)
    '()
    (if (predicate (car lst))
      (cons (car lst) (filter predicate (cdr lst)))
      (filter predicate (cdr lst)))))

;; Define a function that takes a function and a list of elements and applies the function to each element, returning a list of the results
(define (map func lst)
  (if (null? lst)
    '()
    (cons (func (car lst)) (map func (cdr lst)))))

;; Define a function that takes a function and a list of elements and combines the elements using the function
(define (reduce func lst)
  (if (null? lst)
    '()
    (if (null? (cdr lst))
      (car lst)
      (func (car lst) (reduce func (cdr lst))))))

;; Define a function that takes in a list of symbols and returns the list with all duplicates removed
(define (remove-duplicates lst)
  (if (null? lst)
    '()
    (cons (car lst) (remove-duplicates (filter (lambda (x) (not (eq? x (car lst)))) (cdr lst))))))