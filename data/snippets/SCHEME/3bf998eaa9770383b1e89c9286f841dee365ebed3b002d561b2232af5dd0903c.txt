;(define (fib n) ;; Defines a function to calculate the Fibonacci sequence
  (if (or (= n 0) (= n 1)) ;; Checks if n is 0 or 1
      n ;; Returns n if it is
      (+ (fib (- n 1)) (fib (- n 2))))) ;; Otherwise, recursively calls fib with n-1 and n-2, and adds the results together

;(define (factorial n) ;; Defines a function to calculate the factorial of n
  (if (= n 0) ;; Checks if n is 0
      1 ;; Returns 1 if it is
      (* n (factorial (- n 1))))) ;; Otherwise, recursively calls factorial with n-1 and multiplies the result by n

;(define (list-sum lst) ;; Defines a function to sum up the elements of a list
  (if (null? lst) ;; Checks if lst is empty
      0 ;; Returns 0 if it is
      (+ (car lst) (list-sum (cdr lst))))) ;; Otherwise, recursively adds the first element of the list to the result of calling list-sum on the rest of the list

;(define (list-append lst1 lst2) ;; Defines a function to append two lists together
  (if (null? lst1) ;; Checks if lst1 is empty
      lst2 ;; Returns lst2 if it is
      (cons (car lst1) (list-append (cdr lst1) lst2)))) ;; Otherwise, recursively adds the first element of lst1 to the result of calling list-append on the rest of lst1 and lst2