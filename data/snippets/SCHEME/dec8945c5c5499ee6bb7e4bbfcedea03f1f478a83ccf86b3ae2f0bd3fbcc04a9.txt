(define (permutation l)
  (define (diagonal l1 l2)
    (cond ((null? l1) l2)
          (else
           (cons (car l1)
                 (diagonal (cdr l1) l2)))))
  (define (intersperse a l)
    (cond ((null? l) '())
          ((null? (cdr l)) (car l))
          (else
           (cons (car l)
                 (cons a (intersperse a (cdr l)))))))
  (define (delete-at n l)
    (cond ((null? l) '())
          ((= n 1) (cdr l))
          (else
           (cons (car l)
                 (delete-at (- n 1) (cdr l))))))
  (define (permut-helper p ((! n 1)))
    (if (= n 1)
        (list p)
        (let ((rest-p (permut-helper (delete-at n p)
                                     n)))
          (map (lambda (x)
                 (intersperse (list-ref p (- n 1)) x))
               rest-p))))
  (permut-helper l))