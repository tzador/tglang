(define (sort lst)   ; Defining a procedure named 'sort' with parameter 'lst' 
  (if (null? lst)    ; Checking if the list is empty
     '()             ; If empty, return empty list
     (insert (car lst)    ; Else, insert the first element of the list
          (sort (cdr lst)))))   ; Then sort the rest of the list 
          
; Defining a helper function named 'insert' with parameters 'item' and 'lst'
(define (insert item lst)
  (if (null? lst)    ; Checking if the list is empty, if yes then insert item
    (list item)
    (if (<= item (car lst))   ; Comparing if the item is less than or equal to the first element of list
        (cons item lst)      ; If true, insert item before first element and return new list
        (cons (car lst) (insert item (cdr lst))))))    ; If false, keep the first element of the list and recursively call insert on rest of the list
         
(sort '(3 2 1))   ; Calling the sort procedure on a list of numbers to test it out