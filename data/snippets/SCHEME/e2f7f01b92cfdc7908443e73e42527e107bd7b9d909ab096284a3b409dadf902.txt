;; Defining a list of prime numbers up to a certain limit

;; Returns a list of all prime numbers less than or equal to 'limit'
(define (prime-numbers limit)
  (let ((sieve (make-vector limit #t)) ; Creates a vector, initializing all values to #t (true)
        (result '()))                  ; Initializes result variable to an empty list
    (for ((i (in-range 2 limit)))      ; Loops through numbers starting from 2 up to 'limit'
      (when (vector-ref sieve i)       ; Checks if number at index i is true (not marked as composite)
        (set! result (cons i result))  ; Adds current number to the front of result list
        (for ((j (in-range i (* i limit) i))) ; Loops through multiples of current number up to 'limit'
          (vector-set! sieve j #f))))) ; Marks multiples of current number as composite by setting value to #f (false)

;; Example usage
(prime-numbers 20) ; Output: (19 17 13 11 7 5 3 2)