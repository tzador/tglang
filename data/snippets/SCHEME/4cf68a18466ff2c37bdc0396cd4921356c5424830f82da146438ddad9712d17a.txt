(define (bubble-sort list) ; Defines a function that implements bubble sort
  (let ((sorted list)) ; Assigns the input list to a temporary variable sorted
    (do () ; Starts a do-loop
        ((not (null? (cdr sorted)))) ; Checks if sorted is empty
        (let ((changed? #f)) ; Assigns a boolean variable changed? to false
          (do () ; Starts another do-loop
              ((not (null? (cdr sorted))) ; Checks if sorted is empty
               (set! sorted (cdr sorted))) ; Sets sorted to the next element in the list
              (let ((current (car sorted)) ; Assigns the first element in sorted to the variable current
                    (next (cadr sorted))) ; Assigns the second element in sorted to the variable next
                  (if (> current next) ; Compares current and next 
                      (begin ; If current is greater than next, swap the elements in sorted
                        (set-car! sorted next)
                        (set-car! (cdr sorted) current)
                        (set! changed? #t))) ; Sets changed? to true
                  (set! sorted (cdr sorted)))) ; Sets sorted to the next element in the list
          (if (not changed?) ; Checks if any elements were swapped in the inner do-loop
              (return sorted))))) ; If no swapping occurred, return the sorted list
              
; Example call of bubble-sort function
(bubble-sort '(3 7 6 2 4 9 10 1)) ; Output: (1 2 3 4 6 7 9 10)