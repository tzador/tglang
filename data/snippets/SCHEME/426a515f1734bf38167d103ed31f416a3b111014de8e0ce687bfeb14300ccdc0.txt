;; Define a procedure to calculate the factorial of a given number
(define (factorial n)
  (if (= n 0)
      1 ; If n is 0, factorial is 1
      (* n (factorial (- n 1))))) ; Otherwise, multiply n with factorial of n-1

;; Define a list of numbers for testing
(define test-list '(1 2 3 4 5))

;; Use 'map' to apply the factorial procedure to each element in the list
(map factorial test-list) ; Output: (1 2 6 24 120)

;; Define a procedure to check if a given number is prime
(define (is-prime? n)
  (cond ((<= n 1) #f) ; If n is less than or equal to 1, it's not prime
        ((= n 2) #t) ; If n is equal to 2, it's prime
        (else (let loop ((i 2))
                (if (> (* i i) n) ; If i*i is greater than n, n is prime
                    #t 
                    (if (= (modulo n i) 0) ; If n is divisible by i, it's not prime
                        #f
                        (loop (+ i 1)))))))) ; Otherwise, increase i by 1 and check again

;; Use 'filter' to find all prime numbers in a given range
(define (primes-in-range start end)
  (filter is-prime? (range start end)))

(primes-in-range 1 20) ; Output: (2 3 5 7 11 13 17 19)