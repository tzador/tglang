(define (stream-car stream)
  (car stream))

;; This is a function definition in Scheme
;; It takes in a stream and returns its car (first element)

(define (stream-cdr stream)
  (cdr stream))

;; This is a function definition in Scheme
;; It takes in a stream and returns its cdr (rest of the elements)

(define (stream-cons x stream)
  (cons x (lambda () stream)))

;; This is a function definition in Scheme
;; It takes in an element x and a stream
;; It returns a new stream by adding x to the beginning of the stream

(define-syntax stream
  (syntax-rules ()
    ((stream car x) (stream-car x))
    ((stream cdr x) (stream-cdr x))
    ((stream cons x y) (stream-cons x y))))

;; This is a macro definition in Scheme
;; It allows for easy creation and manipulation of streams using the "stream" keyword

(define (stream-filter pred stream)
  (cond
    ((null? stream) stream)
    ((pred (stream-car stream)) (stream-cons (stream-car stream) (stream-filter pred (stream-cdr stream))))
    (else (stream-filter pred (stream-cdr stream)))))

;; This is a function definition in Scheme
;; It takes in a predicate function and a stream
;; It returns a new stream containing only elements from the original stream that satisfy the predicate

(define (stream-filter-map pred f stream)
  (cond
    ((null? stream) stream)
    ((pred (stream-car stream)) (stream-cons (f (stream-car stream)) (stream-filter-map pred f (stream-cdr stream))))
    (else (stream-filter-map pred f (stream-cdr stream)))))

;; This is a function definition in Scheme
;; It takes in a predicate function, a mapping function, and a stream
;; It returns a new stream containing the results of applying the mapping function to elements from the original stream that satisfy the predicate.

(define (stream-map f stream)
  (cond
    ((null? stream) stream)
    (else (stream-cons (f (stream-car stream)) (stream-map f (stream-cdr stream))))))

;; This is a function definition in Scheme
;; It takes in a mapping function and a stream
;; It returns a new stream containing the results of applying the mapping function to all elements in the original stream

(define (stream-zip-with f a b)
  (stream-map f (stream a b)))

;; This is a function definition in Scheme
;; It takes in a function f and two streams a and b
;; It returns a new stream which is the result of applying the function f to corresponding elements of a and b

(define (stream-length stream)
  (define (l stream result)
    (cond
      ((null? stream) result)
      (else (l (stream-cdr stream) (+ result 1)))))
  (l stream 0))

;; This is a function definition in Scheme
;; It takes in a stream and returns the length of the stream as an integer.