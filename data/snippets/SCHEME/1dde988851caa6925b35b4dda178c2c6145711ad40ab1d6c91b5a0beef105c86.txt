(define (reverse lst) ; function to reverse a list
  ; helper function that takes in two parameters
  (define (iter lst prev)
    (if (null? lst) ; if the list is empty
        prev ; return the reversed list
        (iter (cdr lst) (cons (car lst) prev)))) ; recursively call the helper function with the next element as the list and add the current element to the front of the reversed list
  (iter lst '())) ; call the helper function with the original list and an empty list as the initial reversed list

; example usage
(reverse '(1 2 3 4)) ; output: (4 3 2 1)
(reverse '(a b c)) ; output: (c b a)
(reverse '("hello" "world")) ; output: ("world" "hello")