(define (sublist lst n1 n2)
  ; this function takes in a list, starting index and ending index and returns a sublist from the given list
  (if (or (null? lst) (eq? n1 n2)) ; check if list is empty or indices are equal (base case)
      null
      (if (< n1 n2) ; check if starting index is less than ending index
          (cons (car lst) (sublist (cdr lst) (+ n1 1) n2)) ; recursively add elements to sublist until ending index
          (sublist (cdr lst) (+ n1 1) n2)))) ; otherwise, increment starting index and continue recursion until base case