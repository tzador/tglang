;; Define a function named 'sorted?' that takes in a list 'lst' as a parameter
(define (sorted? lst)
  ;; Define a helper function named 'loop' that takes in three parameters 'acc', 'prev', and 'lst'
  (define (loop acc prev lst)
    ;; Check if the list is empty (base case)
    (if (null? lst)
        ;; Return the value of the accumulator
        acc
        ;; Check if the current element is greater than the previous element
        (if (> (car lst) prev)
            ;; Recursively call the function with updated values
            (loop (+ acc 1) (car lst) (cdr lst))
            ;; If the list is not sorted, return #f
            #f)))
  ;; Call the helper function with an initial accumulator value of 1 and the first element of the list as the previous value
  (loop 1 (car lst) (cdr lst)))