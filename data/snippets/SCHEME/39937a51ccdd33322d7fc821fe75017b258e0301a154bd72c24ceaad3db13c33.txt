;; Define a function to calculate the sum of all elements in a list
(define (sum-elements lst)
  ;; Define a helper function that takes in a list and an accumulator
  ;; to keep track of the sum
  (define (helper lst acc)
    ;; Check if the list is empty, if so, return the accumulator
    (if (null? lst)
        acc
        ;; If the list is not empty, add the first element to the accumulator
        ;; and recursively call the helper function on the remaining elements
        (helper (cdr lst) (+ acc (car lst)))))
  ;; Call the helper function with the input list and an initial accumulator of 0
  (helper lst 0))
;; Example input list
(define lst '(1 2 3 4 5))
;; Print the output of the function call
(display (sum-elements lst))
;; Output: 15