;; Define a procedure to perform binary search on a sorted list
(define (binary-search lst target)
  ;; Define helper procedure for binary search
  (define (helper low mid high)
    ;; Check for base cases
    (cond ((null? lst) #f)           ; if the list is empty, return false
          ((>= low high) #f)         ; if the low index is higher than the high index, return false
          ((= target (list-ref lst mid)) #t)  ; if the target is found at the current mid index, return true
          ;; Recursively call helper procedure with updated low or high index
          ((< target (list-ref lst mid)) (helper low (/ (+ low mid) 2) (- mid 1)))
          ((> target (list-ref lst mid)) (helper (+ mid 1) (/ (+ mid high) 2) high))
          (else #f)))                ; if all other conditions fail, return false

  ;; Check if target is in the list
  (if (member? target lst)
      (helper 0 (/ (length lst) 2) (- (length lst) 1))   ; call helper procedure with initial low, mid, and high index
      #f))                                              ; if target is not found in list, return false