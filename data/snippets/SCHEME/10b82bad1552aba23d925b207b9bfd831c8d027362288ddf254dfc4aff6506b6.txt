;; Define a function that computes the factorial of a given number
(define (factorial n)
  (cond ((= n 0) 1) ; check if n is 0, return 1 if true
        (else (* n (factorial (- n 1)))))) ; multiply n by the factorial of n-1

;; Define a function that reverses a given list
(define (reverse-list lst)
  (cond ((null? lst) lst) ; check if list is empty, return empty list if true
        (else (append (reverse-list (cdr lst)) (list (car lst)))))) ; append reversed sublist to first element

;; Define a function that checks if a given number is prime
(define (prime? n)
  (define (iter i)
    (cond ((= i 1) #t) ; base case: if i is 1, return true
          ((= (remainder n i) 0) #f) ; check if n is divisible by i, return false if true
          (else (iter (- i 1))))) ; recursively call iter with i-1
  (iter (- n 1))) ; start with i=n-1 and iterate down to 1 to check if n is prime

;; Define a function that finds the nth fibonacci number
(define (fib n)
  (cond ((= n 1) 0) ; first fibonacci number is 0
        ((= n 2) 1) ; second fibonacci number is 1
        (else (+ (fib (- n 1)) (fib (- n 2)))))) ; recursively add the previous two numbers to find the nth number