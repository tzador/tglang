(define (sumList lst) ; Defines a function that takes in a list as its argument
    (if (null? lst) ; Checks if the list is empty
        0 ; If it is empty, return 0
        (+ (car lst) (sumList (cdr lst))))) ; If not, add the first element of the list to the sum of the rest of the list

; This section tests the function with various list inputs
(display (sumList '(1 2 3))) ; Output: 6
(display (sumList '(10 20 30 40))) ; Output: 100
(display (sumList '(-10 5 8 -2))) ; Output: 1

(define (power x n) ; Defines a function that takes in x and n as its arguments
    (if (= n 0) ; Checks if n is equal to 0
        1 ; If it is, return 1
        (* x (power x (- n 1))))) ; If not, multiply x with the result of the function with input x and n-1

; This section tests the function with different inputs
(display (power 2 3)) ; Output: 8
(display (power 3 4)) ; Output: 81
(display (power 5 0)) ; Output: 1