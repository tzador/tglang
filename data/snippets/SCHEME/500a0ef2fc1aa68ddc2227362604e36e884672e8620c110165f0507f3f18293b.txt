(define complex-list '((* 3 4) (- 5 2) (/ 9 3) (+ 7 8))) ; Create a list of complex operations
(define map-function ; Define a function that maps a given function to a list
  (lambda (function list) ; Takes in a function and a list as arguments
    (if (null? list) ; Base case: if list is empty, return empty list
        '()
        (cons (function (car list)) ; Apply function to first element of list and recursively call on rest
              (map-function function (cdr list))))))

(define result (map-function (lambda (x) (expt (car x) (cadr x))) complex-list)) ; Call map-function with a lambda function that raises each element in the list to the power of its second element
(display result) ; Display the result: (81 25 27 105675)