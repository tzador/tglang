;; Define a function to calculate the factorial of a number
(define (factorial n)
  (if (= n 0) ; check if number is equal to 0 
      1 ; if yes, return 1 since factorial of 0 is 1
      (* n (factorial (- n 1))))) ; if not, multiply number by factorial of n-1

(define (fibonacci n)
  (if (< n 2) ; check if number is 0 or 1
      n ; if yes, return n as it is in fibonacci sequence
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; if not, return sum of previous two fibonacci numbers

(define (is-prime n)
  (define (iter divisor) ; define inner function to check if a number is prime
    (cond ((= divisor 1) #t) ; if divisor is 1, return true since all numbers are divisible by 1
          ((= (remainder n divisor) 0) #f) ; if number is divisible by divisor, return false
          (else (iter (- divisor 1))))) ; if not, recursively check for lower divisors
  (iter (- n 1))) ; start divisor from n-1 and check for primality

(define (sum-each lst)
  (define (iter lst result)
    (if (null? lst) ; if list is empty, return result
        result
        (iter (cdr lst) (+ result (car lst))))) ; else, recursively sum each element and add to result
  (iter lst 0)) ; start with initial result of 0

(define (flatten lst)
  (cond ((null? lst) '()) ; if list is empty, return empty list
        ((pair? (car lst)) (append (flatten (car lst)) (flatten (cdr lst)))) ; if first element is a list, recursively flatten it and flatten the rest
        (else (cons (car lst) (flatten (cdr lst)))))) ; if first element is not a list, add it to the flattened rest of list