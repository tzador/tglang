;; Function that returns a list of all possible permutations of a given list
(define (permutations lst)
  (if (null? lst)               ; base case: empty list
      (list ')                 ; return empty list
      (append-map (lambda (x)           ; for each element x in lst
    (map (lambda (perm)                 ; for each permutation perm of (delete x lst)
           (cons x perm))                ; add x to the front of perm
         (permutations (delete x lst))))  ; recursively compute permutations of (delete x lst)
    lst)))                               ; combine all lists into one

;; Helper function to delete an element from a list
(define (delete element lst)
  (cond 
    ((null? lst) lst)               ; base case: empty list
    ((equal? element (car lst))     ; if element matches first element in list
     (cdr lst))                     ; return rest of list
    (else 
     (cons (car lst)                 ; add first element to beginning of result list
           (delete element (cdr lst))))))    ; recursively delete element from rest of list