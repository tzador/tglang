;; This is a function that takes in a list of numbers and returns the sum of all odd numbers in the list.

(define (sum-odd-numbers lst)\ ;;Define a function with input parameter lst
  (let ((sum 0))\ ;;Create a variable sum to store the total sum
    (define (helper lst)\ ;;Define a helper function to recursively iterate through the list
      (cond ((null? lst) sum)\ ;;Base case: if list is empty, return sum
            ((odd? (car lst))\ ;;If first element is odd, add it to sum and call helper function recursively on rest of list
             (set! sum (+ sum (car lst)))\
             (helper (cdr lst)))\ ;;Recursive call on the rest of list
            (else (helper (cdr lst)))))\ ;;If first element is even, just call helper function on rest of list
    (helper lst)))\ ;;Call helper function with input list