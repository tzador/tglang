; Defining a procedure that takes in two parameters and returns their sum
(define (sum x y)
  (+ x y))

; Creating a list of numbers
(define numbers '(1 2 3 4 5))

; Using recursion to find the length of the list
(define (length lst)
  (if (null? lst)
      0
      (+ 1 (length (cdr lst)))))

; Applying the built-in map function to multiply each number in the list by 2
(map (lambda (num) (* num 2)) numbers)

; Defining a local procedure to check if a number is even
(define (is-even? x)
  (let loop ((num x))
    (if (= num 0)
        #t
        (loop (- num 2)))))
        
; Using the local procedure to filter out only even numbers from the list
(filter is-even? numbers)