; This code snippet calculates the sum of a list
; Call with (sum lst)
(define sum 
  (lambda (lst)
    ; Define a helper function to recursively iterate through the list
    (define helper 
      (lambda (lst acc) ; Acc is the accumulator for storing the sum
        (if (null? lst) ; If the list is empty, return the accumulator
            acc
            (helper (cdr lst) (+ acc (car lst))))) ; Add the first element to the accumulator and recurse with the rest of the list
    (helper lst 0))) ; Call the helper function with the original list and an initial accumulator value of 0
(sum '(1 2 3 4 5))) ; Output: 15