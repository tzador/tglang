(define (merge-sort lst)                   ; Defines a function called merge-sort that takes in a list as an input
  (let ((len (length lst)))                ; Creates a variable 'len' that gets the length of the list 
    (cond ((< len 2)                       ; Checks if the length is less than 2, if so, returns the list
           lst)
          ((= len 2)                       ; Checks if the length is equal to 2, if so, returns sorted list
           (if (> (car lst) (car (cdr lst)))
               (list (car (cdr lst)) (car lst))
               lst))
          (else                           ; Executes when length is more than 2
           (define (merge l1 l2)          ; Defines a helper function called 'merge' for merging 2 sorted lists
             (cond ((eq? l1 '()) l2)       ; Checks if list 1 is empty, if so, returns list 2 (base case)
                   ((eq? l2 '()) l1)       ; Checks if list 2 is empty, if so, returns list 1 (base case)
                   ((< (car l1) (car l2))  ; Compares the first element in list 1 with list 2, if smaller, adds it to 
                    (cons (car l1)         ; the merge list and calls the 'merge' function again with the rest of list 1 
                          (merge (cdr l1) l2))) 
                   (else                  ; If first element in list 2 is smaller or equal, adds it to the merge list and 
                    (cons (car l2)         ; calls the 'merge' function again with the rest of list 2
                          (merge l1 (cdr l2)))))) 
           (let ((half (quotient len 2)))  ; Creates a variable 'half' that stores half the value of 'len'
             (merge (merge-sort (take lst half))   ; Recursively calls merge-sort on the first half of the list 
                    (merge-sort (drop lst half))))))) ; Recursively calls merge-sort on the second half of the list