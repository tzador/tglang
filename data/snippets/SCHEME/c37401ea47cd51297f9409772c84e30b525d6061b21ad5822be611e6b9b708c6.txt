(define ((lambdavar)
	(cond ((null? list) list)
	((null? (cdr list)) (car list))
	(else  (if (positive? (car list))
			(cons (car list) (filter positive? (cdr list)))
			(filter positive? (cdr list))))))

	(define (f-map mapper list)
	  (cond ((null? list) list)
		    (else (cons (mapper (car list)) (f-map mapper (cdr list))))))

	(define (f-foldr folder seed list)
	  (cond ((null? list) seed)
		    (else (folder (car list) (f-foldr folder seed (cdr list))))))

	(define (tree-filter pred? tree)
	  (cond ((null? tree) '())
		    ((predicate? (car tree)) (cons (car tree) (tree-filter pred? (cdr tree))))
		    (else (tree-filter pred? (cdr tree)))))