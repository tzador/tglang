;; create a higher-order function called `compose`
(define (compose f g)
    (lambda args
        (f (apply g args))))

;; create a list of functions
(define functions
    (list (lambda (x) (+ x 1))
          (lambda (y) (* y 2))
          (lambda (z) (- z 3))))

;; use `compose` function to generate a new function that adds 1, multiplies by 2, and subtracts 3
(define modifier
    (compose (car functions)
             (lambda (a b c) (+ a b c))))

(modifier 5 10 15) ;; returns 33