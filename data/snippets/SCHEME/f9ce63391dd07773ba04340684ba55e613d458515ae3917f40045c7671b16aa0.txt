#lang racket                              ; sets the language to Scheme
(define (my-function n)                    ; defines a function called my-function that takes in one parameter n
  (if (zero? n)                            ; checks if n is equal to 0
      '()                                  ; if true, returns an empty list
      (append '()                          ; if false, appends an empty list to 
              (list (fact n))              ; the result of calling the fact function with n as the parameter
              (my-function (sub1 n)))))    ; and recursively calling my-function with n-1 as the parameter
(define (fact n) (if (< n 2) 1 (* n (fact (- n 1))))) ; defines a function called fact that calculates the factorial of n
(my-function 5)                            ; calls the my-function with 5 as the parameter, causing the program to output a nested list containing the factorial of each number from 5 to 1