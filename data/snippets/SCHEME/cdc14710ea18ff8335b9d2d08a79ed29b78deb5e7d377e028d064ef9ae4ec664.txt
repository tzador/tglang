(define (quicksort lst) ;define a function called quicksort 
  (if (null? lst) ;if list is empty
    '() ;return an empty list 
    (let* ((pivot (car lst)) ;define pivot variable as first element of the list 
           (smaller (quicksort (filter (lambda (x) (< x pivot)) (cdr lst)))) ;define smaller variable as recursively sorting the elements smaller than pivot 
           (bigger (quicksort (filter (lambda (x) (>= x pivot)) (cdr lst))))) ;define bigger variable as recursively sorting the elements bigger than or equal to pivot 
      (append smaller (list pivot) bigger)))) ;return the concatenation of smaller list, pivot and bigger list