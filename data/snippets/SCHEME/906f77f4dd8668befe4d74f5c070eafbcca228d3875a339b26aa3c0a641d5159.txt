(define GCD                   ; Defines a function called GCD
  (lambda (a b)               ; Takes two parameters, 'a' and 'b'
    (if (= a b)               ; Checks if 'a' is equal to 'b'
        a                     ; If they are equal, returns 'a'
        (if (= a 0)           ; Checks if 'a' is equal to 0
            b                 ; If it is, returns 'b'
            (if (= b 0)       ; Checks if 'b' is equal to 0
                a             ; If it is, returns 'a'
                (if (< a b)   ; Checks if 'a' is less than 'b'
                    (GCD a (- b a)) ; If it is, recursively calls the GCD function with 'a' and the difference of 'b' and 'a'
                    (GCD b (- a b))))))) ; If 'b' is less than 'a', recursively calls the GCD function with 'b' and the difference of 'a' and 'b'