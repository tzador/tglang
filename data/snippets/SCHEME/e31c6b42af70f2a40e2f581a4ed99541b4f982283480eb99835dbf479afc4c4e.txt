;; Define a function that checks if a number is prime (recursive version)
(define (prime? n)
  (define (iter m)
    (cond ((= m n) #t) ; if the divisor is equal to the number, it's prime
          ((= (remainder n m) 0) #f) ; if the number is divisible by the divisor, it's not prime 
          (else (iter (+ m 1))))) ; if not, recursively call the function with the next divisor
  (iter 2)) ; start checking with the divisor 2, since every number is divisible by 1

;; Define a function that generates a list of prime numbers up to n (iterative version)
(define (prime-list n)
  (define (iter m lst)
    (if (> m n) ; if the number being checked becomes larger than n, return the list
        lst
        (if (prime? m) ; if the number is prime
            (iter (+ m 1) (append lst (list m))) ; recursively call the function with the next number in the list
            (iter (+ m 1) lst)))) ; if not, recursively call the function with the next number in the list
  (iter 2 '())) ; start checking with the number 2 and an empty list as the initial list

;; Example usage:
(prime? 17) ; returns #t
(prime-list 10) ; returns '(2 3 5 7)