;;function to calculate the factorial of a given number
(define (factorial num)
  (if (= num 0) ;;base case, when num is 0
      1          ;;return 1
      (* num (factorial (- num 1))) ;;recursive case, call factorial with num-1 and multiply result with num
  )
)

;;function to calculate the nth term in the fibonacci sequence
(define (fibonacci n)
  (cond ((= n 0) 0) ;;return 0 when n is 0 
        ((= n 1) 1) ;;return 1 when n is 1
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) ;;recursive case, call fibonacci with n-1 and n-2 and add the results
  )
)

;;function to calculate the area of a circle given its radius
(define (area-of-circle radius)
  (* pi (* radius radius)) ;;formula for area of a circle
)

;;function to calculate the volume of a cylinder given its radius and height
(define (volume-of-cylinder radius height)
  (* pi (* (area-of-circle radius) height)) ;;formula for volume of a cylinder using the area of a circle function
)

;;function to check if a given number is prime
(define (is-prime num)
  (if (< num 2) ;;return false if the number is less than 2, as 1 is not considered to be prime
      #f
      (let loop ((divisor 2)) ;;define a local loop function with starting divisor as 2
        (if (= divisor num) ;;base case, when divisor reaches the given number
            #t ;;return true, as number is only divisible by itself
            (if (= (modulo num divisor) 0) ;;if the number is divisible by the current divisor
                #f                       ;;return false, as it is not prime
                (loop (+ divisor 1))     ;;else, increase the divisor and call the loop function again
            )
        )
      )
  )
)