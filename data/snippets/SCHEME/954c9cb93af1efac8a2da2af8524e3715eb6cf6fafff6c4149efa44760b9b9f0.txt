;;; This is a program written in SCHEME
;; Represents a binary tree
(define struct binary-tree
    (value
     left-subtree
     right-subtree))
     
;; Function to insert a value into a binary tree
;; Parameters: value, binary-tree
;; Returns: binary-tree
(define (insert-binary-tree value tree)
    (if (empty? tree)
        (make-binary-tree value 'empty 'empty)
        (cond ((< value (binary-tree-value tree))
                (make-binary-tree
                    (binary-tree-value tree)
                    (insert-binary-tree value (binary-tree-left-subtree tree))
                    (binary-tree-right-subtree tree)))
              ((> value (binary-tree-value tree))
                (make-binary-tree
                    (binary-tree-value tree)
                    (binary-tree-left-subtree tree)
                    (insert-binary-tree value (binary-tree-right-subtree tree))))
              (else
                tree))))
                
;; Function to traverse a binary tree in order
;; Parameters: binary-tree
;; Returns: list
(define (in-order-traversal tree)
    (if (empty? tree)
        '()
        (append (in-order-traversal (binary-tree-left-subtree tree))
                (list (binary-tree-value tree))
                (in-order-traversal (binary-tree-right-subtree tree)))))
                
;; Example usage
(define my-binary-tree
    (make-binary-tree 5
        (make-binary-tree 2
            (make-binary-tree 1 'empty 'empty)
            (make-binary-tree 4 'empty 'empty))
        (make-binary-tree 7
            (make-binary-tree 6 'empty 'empty)
            (make-binary-tree 9 'empty 'empty))))
            
(in-order-traversal my-binary-tree) ; Output: (1 2 4 5 6 7 9)

(insert-binary-tree 3 my-binary-tree) ; Output: #<binary-tree: #3 #2 #4>