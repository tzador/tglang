(define (max-list lst)
  (cond ((null? lst) #f)                 ; Checks if list is empty
        ((null? (cdr lst)) (car lst))    ; Checks if list only has one element
        (else                            ; Recursive case
         (let ((max-rest (max-list (cdr lst)))  ; Finds max of rest of list
               (fst (car lst)))                ; First element of list
           (if (<= fst max-rest)         ; Checks if first element is less than max of rest
               max-rest                  ; If so, return max of rest
               fst))))                   ; Else return first element
); Output: `#<procedure max-list>`