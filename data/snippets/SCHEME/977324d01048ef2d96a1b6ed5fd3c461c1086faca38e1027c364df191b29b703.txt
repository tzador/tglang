(define (check-prime? n)
  ; This function checks whether a given number is prime or not.
  ; Input: n, an integer.
  ; Output: #t if n is prime, #f if not prime.
  (if (or (< n 2) (= n 2))
      #f
      (let ((comp-num (/ (- n 1) 2)))
        (define (check-mults comp-num)
          (if (= comp-num 1)
              #t
              (if (zero? (remainder n comp-num))
                  #f
                  (check-mults (- comp-num 1)))))
        (check-mults comp-num))))	   


The code checks whether a given number is prime or not by finding all possible multiples of the number, and checking if they divide evenly into it.