;; define a procedure that takes in a list and returns the sum of all positive numbers in the list

(define (sum-positive lst)
  ;; `lst` represents a list of numbers
  (cond
    ((null? lst) 0)                             ;; if list is empty, return 0
    ((<= (car lst) 0) (sum-positive (cdr lst)))  ;; if first element is negative, continue with rest of list
    (else (+ (car lst) (sum-positive (cdr lst)))) ;; if first element is positive, add it to the sum of rest of list
  )
)

;; example call:
(sum-positive '(1 2 -3 4 -5)) ;; returns 7