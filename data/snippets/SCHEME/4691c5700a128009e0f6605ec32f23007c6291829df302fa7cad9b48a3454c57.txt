(define (factorial n) ; define a function called 'factorial' that takes in one parameter 'n'
  (letrec ((aux (lambda (x acc) ; define a helper function 'aux' that takes in two parameters 'x' and 'acc', representing the current number and accumulator respectively
                 (if (= x 1) ; if x is equal to 1 (base case)
                     acc ; return the accumulator
                     (aux (- x 1) (* acc x)))))) ; else, recursively call 'aux' with the current number decremented by 1 and the accumulator multiplied by the current number
    (aux n 1))) ; call helper function with given parameter and an initial accumulator value of 1, representing the base case