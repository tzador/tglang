(define (quicksort lst)               ; define a function named quicksort that takes in a list as an argument
    (if (null? lst)                   ; check if the list is empty
        lst                          ; if it is, return the list itself
        (let ((pivot (car lst)))      ; else, choose the first element as the pivot
          (append                      ; append
            (quicksort (filter         ; the result of recursively calling quicksort on the filtered list where
              (lambda (x)              ; each element
                (< x pivot))           ; is less than the pivot
              (cdr lst)))              ; with the first element (pivot) removed
            (cons pivot                ; to the pivot
              (quicksort (filter       ; and the result of recursively calling quicksort on the filtered list where
                (lambda (x)            ; each element
                  (>= x pivot))        ; is greater than or equal to the pivot
                (cdr lst)))))))         ; with the first element (pivot) removed