(define (fib n)  ;defines the function fib with parameter n
  (if (< n 2)   ;checks if n is less than 2
      n         ;if so, returns n (base case of 0 or 1)
      (+ (fib (- n 1)) (fib (- n 2)))))   ;if n is larger than 1, it recursively calls fib with n-1 and n-2 and sums the results

(define (ack m n)   ;defines the function ack with parameters m and n
  (cond ((= m 0) (+ n 1))   ;if m is 0, returns n+1
        ((= n 0) (ack (- m 1) 1))   ;if n is 0, recursively calls ack with m-1 and 1
        (else (ack (- m 1) (ack m (- n 1))))))   ;if both m and n are non-zero, recursively calls ack with m-1 and ack of the previous value of m and n-1

(define (factorial n)   ;defines the function factorial with parameter n
  (if (= n 0)   ;checks if n is 0
      1   ;if so, returns 1 (base case)
      (* n (factorial (- n 1)))))   ;if n is larger than 0, recursively multiplies n with factorial of n-1

(define (sum lst)   ;defines the function sum with parameter lst (list)
  (if (null? lst)   ;checks if lst is empty
      0   ;if so, returns 0 (base case)
      (+ (car lst) (sum (cdr lst)))))   ;if lst is not empty, recursively adds the first element of lst with the sum of the rest of the elements

(define (binary-search lst val)   ;defines the function binary-search with parameters lst (sorted list) and val (value to search for)
  (let ((mid (quotient (length lst) 2)))   ;calculates the index of the middle element
    (cond ((null? lst) #f)   ;returns false if the list is empty
          ((< (car lst) val) (binary-search (list-tail lst mid) val))   ;if the first element is smaller than the value, recursively calls binary-search on the sublist starting from the middle element
          ((= (car lst) val) #t)   ;if the first element is equal to the value, returns true
          (else (binary-search (list-head lst mid) val)))))   ;if the first element is larger than the value, recursively calls binary-search on the sublist up to the middle element

(define (quick-sort lst) ;defines the function quick-sort with parameter lst (list)
  (if (null? lst)   ;checks if lst is empty
      '()   ;if so, returns an empty list (base case)
      (let ((pivot (car lst)))   ;sets the pivot as the first element of lst
        (append   ;appends the following to the pivot element:
         (quick-sort (filter (lambda (x) (< x pivot)) (cdr lst)))   ;recursively calls quick-sort on the sub-list that contains elements smaller than the pivot
         (list pivot)   ;adds the pivot element back to the list
         (quick-sort (filter (lambda (x) (>= x pivot)) (cdr lst)))))))  ;recursively calls quick-sort on the sub-list that contains elements larger or equal to the pivot element