(define (sum l)
  ; This function calculates the sum of a list of numbers recursively
  (cond ;first check for empty list
    ((null? l) 0) ;if list is empty, return 0 as sum
    (else (+ (car l) (sum (cdr l)))) ;add first number to sum of rest of list
  )
)

(define (difference a b)
  ; This function calculates the difference between two numbers recursively
  (if (= a b) ;if the two numbers are equal, return 0 as difference
      0
      (if (> a b) ;if first number is greater than second number
          (- a (difference a (- b 1))) ;subtract 1 from second number and call function again
          (- b (difference b (- a 1)))) ;subtract 1 from first number and call function again
  )
)

(define (fibonacci n)
  ; This function calculates the nth number in the Fibonacci sequence recursively
  (if (or (= n 0) (= n 1)) ;base cases for first and second numbers in sequence
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ;add previous two numbers in sequence
  )
)

(define (factorial n)
  ; This function calculates the factorial of a number recursively
  (if (= n 0) ;base case for factorial of 0
      1 
      (* n (factorial (- n 1))) ;multiply n by the factorial of n-1
  )
)