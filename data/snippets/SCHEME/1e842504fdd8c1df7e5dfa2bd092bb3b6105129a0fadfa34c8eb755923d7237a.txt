(define (memoize f)
  (let ((cache (make-hash)))
    (lambda args 
      (let ((result (hash-ref cache args #f)))
        (if result
            result
            (let ((new-result (apply f args)))
              (hash-set! cache args new-result)
              new-result))))))
; This function takes in a function, f, as input.
; It then creates a hash table to serve as a cache.
; The returned function takes a variable number of arguments, args.
; It then checks if the result for the given arguments already exists in the cache.
; If it does, it immediately returns the result.
; If not, it applies the input function, f, to the given arguments and stores the result in the cache.
; Finally, it returns the result. This function can be used to optimize recursive or repetitive functions.