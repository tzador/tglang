#lang racket

;; This is a comment in Scheme
(define (factorial n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; This function calculates the factorial of a given number using recursion

(define (fibonacci n)
  (if (<= n 2)
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; This function calculates the nth element in the fibonacci sequence using recursion

(define (flatten lst)
  (cond ((null? lst) '())
        ((list? (car lst)) (append (flatten (car lst)) (flatten (cdr lst))))
        (else (cons (car lst) (flatten (cdr lst))))))

;; This function flattens a nested list into a single level list using recursion

(define (sum lst)
  (if (null? lst)
      0
      (+ (car lst) (sum (cdr lst)))))

;; This function calculates the sum of all elements in a list using recursion

(define (quick-sort lst)
  (cond ((null? lst) '())
        ((<= (length lst) 1) lst)
        (else (let ((pivot (car lst)))
                (append (quick-sort (filter (lambda (x) (< x pivot)) (cdr lst)))
                        (list pivot)
                        (quick-sort (filter (lambda (x) (>= x pivot)) (cdr lst))))))))

;; This function implements the quick sort algorithm to sort a list in ascending order