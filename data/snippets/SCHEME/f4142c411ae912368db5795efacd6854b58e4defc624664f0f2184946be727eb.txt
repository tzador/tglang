;; The following code implements the quicksort algorithm in Scheme

;; Define helper function for partitioning
(define (partition lst pivot less-greater equal)
  ;; Initialize temporary lists for partitions
  (define less '())
  (define greater '())
  
  ;; Iterate through list and split elements into appropriate partition
  (map (lambda (x) (if (less-greater x pivot) (set! less (cons x less)) (set! greater (cons x greater)))) lst)
  
  ;; Return list with elements partitioned
  (list (reverse greater) (list pivot) (reverse less)))

;; Define the quicksort function that takes in a list and a predicate function
(define (quicksort lst less-greater)
  ;; Base case: If list is empty, return empty list
  (if (null? lst) lst
  ;; Recursive case: Pick a pivot element and partition the list, then recursively sort the two partitions
        (let* ((pivot (car lst)) 
               (partitions (partition (cdr lst) pivot less-greater))
               (less (car partitions))
               (equal (cadr partitions))
               (greater (caddr partitions)))
           (append (quicksort less less-greater) (list pivot) (quicksort greater less-greater)))))

;; Example usage
(quicksort '(3 5 2 1 4) <) ;; Output: (1 2 3 4 5)