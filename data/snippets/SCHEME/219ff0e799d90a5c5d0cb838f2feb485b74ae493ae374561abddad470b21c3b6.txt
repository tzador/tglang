#lang scheme
; this is a comment
(define y 10)
(set! y (+ y 1)) ; reassign y to be y + 1
(display "The value of y is: ")
(display y) ;output the current value of y
(newline) ; new line
(define x (- y 5)) ; create a new variable x with a value of y - 5
(if (> x 0) ; checks if x is greater than 0
    (begin ; if true, execute the following expressions
      (display "X is greater than 0") 
      (newline)
      (define z (* x 2)) ; create a new variable z with a value of x * 2
      (display "Z is: ")
      (display z) ; output the current value of z
      (newline)
      (if (= z 18) ; checks if z is equal to 18
          (begin ; if true, execute the following expressions
            (display "Z is equal to 18")
            (newline)
            (set! y (- y 3)) ; reassign y to be y - 3
            (display "The new value of y is: ")
            (display y) ; output the current value of y
            (newline))
          (begin ; if false, execute the following expressions
            (display "Z is not equal to 18")
            (newline)
            (set! y (- y 1)) ; reassign y to be y - 1
            (display "The new value of y is: ")
            (display y) ; output the current value of y
            (newline))))
    (begin ; if false, execute the following expressions
      (display "X is not greater than 0")
      (newline)
      (set! x (abs x)) ; reassign x to be the absolute value of x
      (define w (+ x y)) ; create a new variable w with a value of x + y
      (display "W is: ")
      (display w) ; output the current value of w
      (newline)))
      
;Output:
;The value of y is: 11
;X is greater than 0
;Z is: 12
;Z is equal to 18
;The new value of y is: 8
;W is: 16