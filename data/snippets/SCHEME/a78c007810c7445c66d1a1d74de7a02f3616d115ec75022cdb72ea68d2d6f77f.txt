;; Fibonacci function using memoization
;; Returns the nth Fibonacci number
(define (fib n)
  (define memo (make-vector (+ n 1) #f)) ;; creates a vector of size n+1 filled with false values
  
  (define (fib-helper n)
    (if (< n 2)
        n
        (+ (fib-memo (- n 1))
           (fib-memo (- n 2)))))
  
  (define (fib-memo n)
    (if (vector-ref memo n) ;; checks if memoized value already exists
        (vector-ref memo n) ;; if yes, return the memoized value
        (begin (vector-set! memo n (fib-helper n)) ;; otherwise, calculate the value using fib-helper
               (vector-ref memo n))))
  
  (fib-memo n)) ;; calls the memoized function with input n