;; Define a higher-order function that takes in a predicate function and a list
;; and returns a new list of elements that satisfy the predicate
(define (filter pred lst)
  ;; Define a helper function that adds elements to the new list if they satisfy the predicate
  (define (filter-hlp newlst lst)
    ;; If the list is empty, return the new list
    (if (null? lst)
        newlst
        ;; Otherwise, check if the first element satisfies the predicate
        (if (pred (car lst))
            ;; If it does, add it to the new list and recursively call filter-hlp on the rest of the list
            (filter-hlp (cons (car lst) newlst) (cdr lst))
            ;; If it doesn't, just recursively call filter-hlp on the rest of the list
            (filter-hlp newlst (cdr lst)))))
  ;; Call filter-hlp with an empty new list and the given list
  (filter-hlp '() lst))