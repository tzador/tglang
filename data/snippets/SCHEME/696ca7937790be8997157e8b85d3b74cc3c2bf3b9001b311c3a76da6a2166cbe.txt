;; This is a function that implements the quicksort algorithm in Scheme

(define (quicksort lst) ; Define the function "quicksort" which takes in a list "lst" as a parameter
  (if (or (null? lst) (<= (length lst) 1)) ; Check if the list is empty or has length of 1 or less
    lst ; If true, return the list as it is (base case)
    (let ((pivot (car lst)) ; Else, set the first element of the list as the pivot
          (rest (cdr lst))) ; And store the rest of the list in a variable
      (append ; Use the "append" function to combine the following lists:
        (quicksort (filter (lambda (x) (<= x pivot)) rest)) ; Sort the elements in "rest" that are smaller than or equal to the pivot
        (list pivot) ; Add the pivot to the end of the sorted list
        (quicksort (filter (lambda (x) (> x pivot)) rest)) ; Sort the elements in "rest" that are greater than the pivot
      )
    )
  )
)

;; Example usage:

(quicksort '(12 3 6 8 4)) ; Output: (3 4 6 8 12)