(define get-list-avg
  (lambda (list)
    (if (null? list)
      (display "List is empty")
      (letrec ((sum 0)
               (count 0))
        (define (helper list)
          (if (null? list)
            (display (/ sum count))
            (begin
              (set! sum (+ sum (car list)))
              (set! count (+ count 1))
              (helper (cdr list)))))
        (helper list)))))

'Here we define a function called get-list-avg that takes in a list as its parameter. We first check if the list is empty, if it is, we display a message saying "List is empty". If the list is not empty, we use a letrec expression to create two variables, sum and count, both initially set to zero.

We then define a helper function that takes in the list as its parameter. Inside the helper function, we check if the list is empty. If it is, we display the average by dividing the sum by the count. If the list is not empty, we use the set! expression to update the values of sum and count by adding the first element of the list to sum and increasing count by 1, and then we recursively call the helper function with the rest of the list.

Lastly, we call the helper function with the original list passed in as the parameter, which allows us to calculate the average for any given list.'