(define (map f lst) ;; define a function named "map" that takes in two parameters (f: function, lst: list)
  (if (null? lst) ;; check if the list is empty
      '() ;; if so, return an empty list
      (cons (f (car lst)) (map f (cdr lst))) ;; if not, recursively apply function f to car of lst and concat it with the mapped result of the rest of the list (cdr)
    )
  )

(map (lambda (x) (* x 2)) '(1 2 3 4 5)) ;; call map function with an anonymous function that multiplies each element in the list by 2 and a sample list as parameters