; This is a function that checks if the input number is prime or not
(define is-prime
  (lambda (n)
    (cond ; This is a conditional statement
      ((< n 2) #f) ; If the input number is less than 2, it is not prime
      ((= n 2) #t) ; If the input number is 2, it is prime
      (else (loop n 2)))) ; Otherwise, call the loop function to check if n is divisible by any number from 2 to n-1

; This is a function that checks if n is divisible by any number from 2 to n-1
(define loop
  (lambda (n m)
    (cond ; This is a conditional statement
      ((= m n) #t) ; If m becomes equal to n, that means n is not divisible by any number from 2 to n-1, hence it is prime
      ((= (remainder n m) 0) #f) ; If n is divisible by m, then it is not prime, return #f
      (else (loop n (+ m 1)))))) ; Otherwise, increase m by 1 and call the loop function again

; Example calls:
(is-prime 7) ; Output: #t (7 is prime)
(is-prime 12) ; Output: #f (12 is not prime)