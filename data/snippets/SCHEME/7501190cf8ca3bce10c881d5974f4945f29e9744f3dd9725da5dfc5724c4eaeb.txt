;; Function to calculate the LCM of two numbers
(define (lcm a b)
  (define (gcd a b) ;; Helper function to calculate GCD
    (if (= b 0)
        a
        (gcd b (remainder a b))))
  (/ (* a b) (gcd a b)))

;; Code to check if a number is prime
(define (prime? n)
  (if (= n 2)  ;; Check if n is equal to 2
      #t ;; If n is 2, return true
      (if (= (remainder n 2) 0) ;; Check if n is divisible by 2
          #f ;; If n is divisible by 2, return false
          (let loop ((i 3)) ;; Use a named let to loop through odd numbers starting from 3
            (cond ((> i (sqrt n)) ;; Check if i is greater than sqrt(n)
                   #t) ;; If i is greater than sqrt(n), return true - n is prime
                  ((= (remainder n i) 0) ;; Check if n is divisible by i
                   #f) ;; If n is divisible by i, return false - n is not prime
                  (else
                   (loop (+ i 2)))))))) ;; If none of the conditions are met, recurse with the next odd number

;; Example output - calculating LCM and checking if numbers are prime
(lcm 12 18) ;; Outputs 36
(prime? 7) ;; Outputs #t (7 is prime)
(prime? 8) ;; Outputs #f (8 is not prime)