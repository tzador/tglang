(define (fibonacci n)
  (cond ((= n 0) 0) ; checks if n equals 0
        ((= n 1) 1) ; checks if n equals 1
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) ; recursive calculation of fibonacci series
  )

;Factorial function that takes in an integer n and returns the factorial of n
(define (factorial n)
  (if (= n 0) ; checks if n equals 0
      1 ; if n equals 0, return 1
      (* n (factorial (- n 1))))) ; recursive calculation of factorial

;List function that takes in a list and returns the sum of all its elements
(define (list-sum lst)
  (if (null? lst) ; checks if lst is empty
      0 ; if lst is empty, return 0
      (+ (car lst) (list-sum (cdr lst))))) ; recursive calculation of sum of elements in the list

;Function that takes in two integers a and b and returns the greatest common divisor
(define (gcd a b)
  (if (= b 0) ; checks if b equals 0
      a ; if b equals 0, return a
      (gcd b (remainder a b)))) ; finds the remainder of a when divided by b, and recursively calls gcd with b and the remainder as arguments

;Function that takes in a number n and returns a list of all prime numbers less than n
(define (sieve n)
  (let ((marked (make-vector n #t))) ; creates a vector of size n with all elements initially set to #t
    (do ((i 2 (+ i 1))) ; starting from 2, increments i by 1
        ((< (* i i) n)) ; loop until i*i is less than n
      (unless (vector-ref marked i) ; checks if current number is already marked as non-prime
        (do ((j (* i i) (+ j i))) ; starting from i*i, increments j by i
            ((< j n)) ; loop until j is less than n
          (vector-set! marked j #f)))) ; marks all multiples of i as non-prime
    (filter (lambda (x) (vector-ref marked x)) (iota (- n 2))))) ; creates a list of prime numbers by filtering out all non-prime numbers from 2 to n