;; Define the factorial function to calculate the factorial of a given number

(define (factorial n) ;;; The function takes in one parameter 'n'
(let loop ;; Creating a named let loop for tail recursion
((result 1) ;; Initializing the result to 1
(idx 1)) ;; Initializing the index to 1
(if (> idx n) ;; Base case: If index is greater than given number
result ;; Return the result
(loop (* result idx) (+ idx 1))))) ;; Recursive case: Call loop with new result and incremented index

;; Example usage and output
(factorial 5) ;;; Returns 120 (5! = 5*4*3*2*1 = 120)
(factorial 10) ;;; Returns 3628800 (10! = 10*9*8*7*6*5*4*3*2*1 = 3628800)