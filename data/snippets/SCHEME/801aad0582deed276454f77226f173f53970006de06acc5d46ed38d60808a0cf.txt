;; This function calculates the factorial of a given number
(define (factorial n)
  (if (<= n 1) ; stop when n is 1 or less
      1 ; return 1 as final result
      (* n (factorial (- n 1))) ; recurse, multiplying n by the factorial of n-1
  )
)

;; This function calculates the Fibonacci sequence of a given number
(define (fibonacci n)
  (if (<= n 1) ; stop when n is 1 or less
      n ; return n as final result
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; recurse, adding the previous two numbers in the sequence
  )
)

;; This function calculates the power of a given base raised to a given exponent
(define (power base exponent)
  (if (= exponent 0) ; stop when exponent is 0
      1 ; return 1 as final result
      (* base (power base (- exponent 1))) ; recurse, multiplying base by itself for the exponent number of times
  )
)

;; This function calculates the sum of a list of numbers
(define (sum lst)
  (if (null? lst) ; stop when lst is empty
      0 ; return 0 as final result
      (+ (car lst) (sum (cdr lst))) ; recurse, adding the first element of lst to the sum of the remaining elements
  )
)

;; This function returns the length of a given list
(define (length lst)
  (if (null? lst) ; stop when lst is empty
      0 ; return 0 as final result
      (+ 1 (length (cdr lst))) ; recurse, adding 1 to the length of the remaining elements
  )
)

;; This function checks if a given number is prime
(define (is-prime n)
  (define (iter i)
    (cond ; check various conditions using a cond statement
      ((= i n) #t) ; if i is equal to n, return #t (true)
      ((= (modulo n i) 0) #f) ; if n is divisible by i, return #f (false)
      (else (iter (+ i 1))) ; otherwise, recursively call iter with i incremented by 1
    )
  )
  (iter 2) ; call iter with an initial value of 2
)