;; Define a function to check if a number is prime
(define (is-prime num)
  (define (iter div)
    (cond ((= div 1) #t) ;; if div equals 1, returns true
          ((= (modulo num div) 0) #f) ;; if the remainder of num/div is 0, returns false
          (else (iter (- div 1))))) ;; otherwise, recursively calls iter with div-1
  (iter (- num 1))) ;; starts iter with num-1 as div, since num is not divisible by itself

;; Define a function to generate a list of prime numbers up to a given limit
(define (generate-primes limit)
  (define (iter num prime-list)
    (cond ((> num limit) prime-list) ;; if num is greater than the limit, returns the prime-list
          ((is-prime num) (iter (+ num 1) (append prime-list (list num)))) ;; if num is prime, adds it to the prime-list and recursively calls iter with num+1
          (else (iter (+ num 1) prime-list)))) ;; otherwise, recursively calls iter with num+1
  (iter 2 '())) ;; starts iter with num=2 and an empty prime-list as parameters