(letrec (
  (fact (lambda (n)
    (if (zero? n)
      1
      (* n (fact (- n 1))))))
  (fib (lambda (n)
    (if (< n 2)
      1
      (+ (fib (- n 1)) (fib (- n 2))))))
)
; This function takes in a number and returns its factorial value
(define (calculate-factorial n)
  (fact n))
; This function takes in a number and returns its fibonacci value
(define (calculate-fibonacci n)
  (fib n))
; This function takes in a list and returns the sum of all its elements
(define (calculate-sum lst)
  (cond
    ((eq? lst '()) 0)
    (else (+ (car lst) (calculate-sum (cdr lst))))
  )
)