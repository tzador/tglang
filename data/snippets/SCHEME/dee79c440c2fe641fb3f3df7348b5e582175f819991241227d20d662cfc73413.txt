(define (factorial n)
(if (= n 0)
  1 
  (* n (factorial (- n 1)))))
  
;;; This is a function that calculates the factorial of a given number
;;; Takes in one parameter, n, and recursively multiplies it with the factorial of n-1
;;; If n equals 0, it returns 1
;;; Otherwise, it multiplies n with the factorial of n-1 and returns the result

;;; Example: (factorial 5) returns 120 because 5 * 4 * 3 * 2 * 1 = 120

(define (fibonacci n)
  (if (< n 2)
    n 
    (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
  
;;; This is a function that calculates the nth number in the Fibonacci sequence
;;; Takes in one parameter, n, and recursively calculates the sum of the previous two numbers in the sequence
;;; If n is less than 2, it returns n
;;; Otherwise, it calculates the sum of the previous two numbers in the sequence and returns the result

;;; Example: (fibonacci 6) returns 8 because the 6th number in the sequence is 8 (0, 1, 1, 2, 3, 5, 8)

(define (reverse lst)
  (if (null? lst)
    '()
    (append (reverse (cdr lst)) (list (car lst)))))

;;; This is a function that reverses a given list
;;; Takes in one parameter, lst, and recursively calls itself on the list without the first element while adding the first element to the end of the reversed list
;;; If the list is empty, it returns an empty list
;;; Otherwise, it adds the first element of the list to the end of the reversed list using the "append" built-in function
;;; Uses the "cdr" built-in function to get the list without the first element, and the "car" built-in function to get the first element of the list

;;; Example: (reverse '(1 2 3 4)) returns '(4 3 2 1)