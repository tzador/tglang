;; Define a factorial function that takes in a single argument
(define (factorial n)
  ;; Base case: If n is 0, return 1 
  (if (= n 0)
      1
      ;; Recursive case: Multiply n by the factorial of n-1 
      (* n (factorial (- n 1)))))

;; Define a function to calculate the sum of two numbers
(define (sum a b)
  ;; Base case: If b is 0, return a 
  (if (= b 0)
      a
      ;; Recursive case: Keep adding 1 to a and subtracting 1 from b until b is 0 
      (sum (+ a 1) (- b 1))))

;; Define a function to calculate the nth term of the Fibonacci sequence
(define (fib n)
  ;; Base case: If n is less than or equal to 1, return n 
  (if (<= n 1)
      n
      ;; Recursive case: Calculate the previous two terms of the sequence and add them together 
      (+ (fib (- n 1)) (fib (- n 2)))))

;; Define a function to check if a number is prime
(define (is-prime n)
  ;; Define a helper function to check if a number is divisible by any number from 2 to the square root of n 
  (define (helper x)
    ;; Base case: If x is equal to the square root of n, return true 
    (if (= x (sqrt n))
        #t
        ;; Recursive case: Check if n is divisible by x, if not, increment x and call helper again 
        (if (not (= (modulo n x) 0))
            (helper (+ x 1))
            #f)))
  ;; If n is less than or equal to 1, it is not prime 
  (if (<= n 1)
      #f
      ;; Otherwise, call the helper function with an initial x value of 2 
      (helper 2)))