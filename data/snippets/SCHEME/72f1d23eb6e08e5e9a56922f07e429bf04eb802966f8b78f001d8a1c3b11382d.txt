(define (merge-sort ls)
  (if (or (null? ls) (null? (cdr ls)))
      ls 
      (letrec ((split (lambda (ls lst1 lst2)
                        (if (null? ls) 
                            (list lst1 lst2) 
                            (split (cdr ls) (cons (car ls) lst2) (cons (cadr ls) lst1))))))
        (let ((lst (split ls '() '()))) 
            (let ((left (merge-sort (car lst))) 
                  (right (merge-sort (cadr lst))))
              (define (merge lst1 lst2)
                (if (or (null? lst1) (null? lst2)) 
                    (append lst1 lst2) 
                    (if (< (car lst1) (car lst2))
                        (cons (car lst1) (merge (cdr lst1) lst2))
                        (cons (car lst2) (merge lst1 (cdr lst2)))))) 
              (merge left right))))))