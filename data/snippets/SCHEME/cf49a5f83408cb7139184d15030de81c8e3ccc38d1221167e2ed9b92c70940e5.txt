(define (even-length? lst)
    ; This function checks if the length of a list is even or not.
    (if (null? lst)
        ; Base case: If list is empty, return #t
        #t
        ; Recursive case: Call function with cdr of list
        (even-length? (cdr lst)))
)

(define (fib n)
    ; This function calculates the Nth number in the Fibonacci sequence.
    (cond ((= n 0) ; Base case: If n is 0, return 0
            0)
          ((= n 1) ; Base case: If n is 1, return 1
            1)
          (else ; Recursive case: Call function twice with n-1 and n-2
            (+ (fib (- n 1)) (fib (- n 2))))
     )
)

(define (merge lst1 lst2)
    ; This function merges two sorted lists into one sorted list.
    (if (or (null? lst1) (null? lst2))
        ; Base case: If either list is empty, return the other list
        (if (null? lst1)
            lst2
            lst1)
        ; Recursive case: Compare first elements of both lists and merge accordingly
        (if (< (car lst1) (car lst2))
            (cons (car lst1) (merge (cdr lst1) lst2))
            (cons (car lst2) (merge lst1 (cdr lst2))))
    )
)

(define (powerset s)
    ; This function generates the powerset of a given set.
    (if (null? s)
        ; Base case: If set is empty, return a list with empty list as its only element
        (list '())
        ; Recursive case: Call function with cdr of set, add current element to each set in powerset and combine them
        (let ((rest (powerset (cdr s))))
            (append (map (lambda (subset) (cons (car s) subset)) rest)
                    rest)
        )
    )
)