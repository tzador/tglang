(define (is-perfect-num? n) ; defining a procedure with one parameter
  (cond ((<= n 0) #f) ; base case: if n is less than or equal to 0, return false
        (else (let ((sum 0)) ; otherwise, create a binding for sum with value 0
                (do ((i 1 (+ i 1))) ; set i to 1 and increment by 1 each loop
                    ((= i n)) ; loop until i equals n
                  (cond ((= (modulo n i) 0) ; if n is divisible by i with no remainder
                         (set! sum (+ sum i))) ; add i to sum
                        (else)) ; otherwise do nothing
                  ))
              ; after the loop is completed, if sum equals n, return true, else return false
              (if (= sum n) #t #f))))