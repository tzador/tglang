;; define a function that checks if a list is empty
(define (is-empty lst)
  (if (null? lst)
    #t ;; if the list is empty, return true
    #f ;; otherwise, return false
  )
);; end the function definition


;; define a function that finds the length of a list
(define (list-length lst)
  (if (null? lst) 
    0 ;; if the list is empty, length is 0
    (+ 1 (list-length (cdr lst))))) ;; otherwise, add 1 to the length of the rest of the list


;; define a function that checks if a list contains an element
(define (contains? lst ele)
  (if (null? lst)
    #f ;; if the list is empty, return false
    (if (eq? (car lst) ele)
      #t ;; if the first element in the list is equal to the searched element, return true
      (contains? (cdr lst) ele)))) ;; otherwise, recursively check the rest of the list


;; define a function that reverses a list
(define (reverse lst)
  (if (null? lst)
    '() ;; if the list is empty, return an empty list
    (append (reverse (cdr lst)) (list (car lst))))) ;; otherwise, append the first element of the list to the end of the reversed rest of the list


;; define a function that flattens a nested list
(define (flatten lst)
  (cond ((null? lst) '()) ;; if the list is empty, return an empty list
        ((pair? (car lst)) (append (flatten (car lst)) (flatten (cdr lst)))) ;; if the first element is a list, recursively flatten it and append it to the flattened rest of the list
        (else (cons (car lst) (flatten (cdr lst)))))) ;; otherwise, cons the first element to the flattened rest of the list