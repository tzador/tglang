(define (calculate-factorial n)
  (if (= n 0) ; Check if n is 0
      1 ; Return 1 if n is 0
      (* n (calculate-factorial (- n 1))) ; Otherwise, multiply n with factorial of n-1
  )
)

; Function to print the first n terms of the Fibonacci sequence
(define (fibonacci n)
  (if (or (= n 1) (= n 2)) ; Check if n is 1 or 2
      1 ; Return 1 if n is 1 or 2
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; Otherwise, add the previous two terms of the sequence
  )
)

; Function to check if a given number is prime
(define (is-prime n)
  (define (is-prime-helper n divisor) ; Helper function to check if n is divisible by any number up to its square root
    (if (> divisor (sqrt n)) ; Check if divisor is greater than square root of n
        true ; If yes, n is prime
        (if (= (modulo n divisor) 0) ; Otherwise, check if n is divisible by divisor
            false ; If yes, n is not prime
            (is-prime-helper n (+ divisor 1)) ; If not, recursively call the helper function with a higher divisor
        )
    )
  )
  (if (< n 2) ; If n is less than 2, return false as it is not a prime number
      false
      (is-prime-helper n 2) ; Otherwise, call the helper function starting with a divisor of 2
  )
)