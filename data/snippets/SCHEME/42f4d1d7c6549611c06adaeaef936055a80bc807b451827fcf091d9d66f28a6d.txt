(define (sort lst)
  (if (null? lst)
  '()
  (insert (car lst) (sort (cdr lst)))))

(define (insert x lst)
  (if (null? lst)
    (list x)
    (if (< x (car lst))
      (cons x lst)
      (cons (car lst) (insert x (cdr lst))))))
  
; This function takes in a list as input and uses the insertion sort algorithm
; to return a sorted list in ascending order.

; The 'sort' function first checks if the list is empty, if it is then it returns
; an empty list. If the list is not empty, it calls the 'insert' function with the
; first element of the list and the sorted list of the remaining elements.

; The 'insert' function takes in an element (x) and a list (lst) as input and
; recursively inserts the element in the correct position in the list.

; If the list is empty, it simply creates a new list with the element.

; If the element is smaller than the first element in the list, it is inserted 
; at the beginning of the list using the 'cons' function.

; If the element is larger than the first element in the list, it is recursively 
; inserted into the rest of the list using the 'cdr' function and then the first 
; element is placed back at the beginning using the 'car' function and 'cons' function.