;; This code snippet uses recursion to find the maximum value in a list
(define (max-element lst)
  (if (null? (cdr lst)) ; checks if list only has one element left
      (car lst) ; return the only element in list as maximum
      (let ((max (max-element (cdr lst)))) ; recursive call to find maximum in rest of list
        (if (> (car lst) max) ; checks if current element is larger than the maximum found so far
            (car lst) ; if yes, return current element as maximum
            max))))