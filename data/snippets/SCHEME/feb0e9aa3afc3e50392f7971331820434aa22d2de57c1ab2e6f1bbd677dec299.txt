(define (bubble-sort lst)
  (letrec ((bubble-aux
            (lambda (lst bubbleflag)
              (if (null? (cdr lst)) lst
                  (if (> (car lst) (cadr lst))
                      (cons (cadr lst)
                            (bubble-aux (cons (car lst) (cddr lst)) #t))
                      (cons (car lst)
                            (bubble-aux (cdr lst) bubbleflag))))))
           (start-lst lst))
  (let loop ((res start-lst))
    (let ((n (bubble-aux res #f)))
      (if (null? n)
          res
          (loop n))))))