#lang racket

;; define a function to check if a list is sorted in ascending order
(define (sorted? lst)
  (cond
    [(empty? lst) #t] ; if list is empty, return true
    [(= (length lst) 1) #t] ; if list has only one element, return true
    [(> (car lst) (cadr lst)) #f] ; if first element is greater than second element, return false
    [else (sorted? (cdr lst))] ; recursively check the rest of the list
  )
)

;; define a function to merge two sorted lists into one sorted list
(define (merge lst1 lst2)
  (cond
    [(empty? lst1) lst2] ; if first list is empty, return second list
    [(empty? lst2) lst1] ; if second list is empty, return first list
    [(< (car lst1) (car lst2)) (cons (car lst1) (merge (cdr lst1) lst2))] ; if first element in first list is smaller, add it to merged list
    [else (cons (car lst2) (merge lst1 (cdr lst2)))] ; if first element in second list is smaller, add it to merged list
  )
)

;; define a function to merge sort a list
(define (merge-sort lst)
  (cond
    [(empty? lst) lst] ; if list is empty, return empty list
    [(= (length lst) 1) lst] ; if list has only one element, return list
    [else (let ([mid (quotient (length lst) 2)]) ; find middle index of list
            (let ([left (take lst mid)] ; split list into two halves
                  [right (drop lst mid)])
              (merge (merge-sort left) (merge-sort right)) ; recursively merge sort the two halves and merge them together
            )
          )
    ]
  )
)