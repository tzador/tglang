;; Define a function to calculate the factorial of a number
(define (factorial n)
  (if (= n 0) ;; check if n is equal to 0
      1 ;; if so, return 1 as the factorial of 0 is 1
      (* n (factorial (- n 1))) ;; if not, multiply n by factorial of n-1
    )
  )

;; Define a function to calculate the sum of squares of numbers in a list
(define (sum-of-squares lst)
  (if (null? lst) ;; check if the list is empty
      0 ;; if so, return 0
      (+ (* (car lst) (car lst)) (sum-of-squares (cdr lst))) ;; if not, square the first element and add it to the sum of squares of the rest of the list
    )
  )

;; Define a function to calculate the nth Fibonacci number
(define (fib n)
  (if (or (= n 1) (= n 2)) ;; check if n is equal to 1 or 2
      1 ;; if so, return 1 as the first two Fibonacci numbers are 1
      (+ (fib (- n 1)) (fib (- n 2))) ;; if not, find the sum of the previous two Fibonacci numbers
    )
  )

;; Define a function to check if a number is prime
(define (prime? n)
  (define (helper n div)
    (if (= div 1) ;; reached 1, so n is prime
        #t ;; return true
        (if (= (remainder n div) 0) ;; check if n is divisible by div
            #f ;; if so, n is not prime
            (helper n (- div 1)) ;; if not, check with the next smallest divisor
          )
      )
    )
  (helper n (- n 1)) ;; start with n-1 as the largest possible divisor
  )

;; Define a function to create a list of all primes less than or equal to a given number
(define (primes-to n)
  (define (helper n prime lst)
    (if (= prime n) ;; reached n, check if it is prime
        (if (prime? n) ;; if so, add it to the list
            (cons n lst)
            lst
          )
        (if (prime? prime) ;; if prime is prime, add it to list and move on to the next number
            (helper n (+ prime 1) (cons prime lst))
            (helper n (+ prime 1) lst) ;; if not prime, move on to next number
          )
      )
    )
  (reverse (helper n 2 '())) ;; reverse the list as it is built backwards
  )

;; Define a function to concatenate all strings in a list
(define (concatenate lst)
  (if (null? lst)
      "" ;; return empty string if list is empty
      (string-append (car lst) (concatenate (cdr lst))) ;; else, append current string to the concatenation of the rest of the list
    )
  )

;; Define a function to calculate the area of a circle
(define (area-of-circle r)
  (* 3.141592653 (* r r)) ;; use the formula pi * r^2
  )

;; Define a function to calculate the average of a list of numbers
(define (average lst)
  (if (null? lst)
      0 ;; if list is empty, return 0
      (/ (sum lst) (length lst)) ;; calculate the sum of the list and divide by the length
    )
  )

;; Define a function to check if a list is sorted in ascending order
(define (sorted? lst)
  (if (or (null? lst) (null? (cdr lst))) ;; if list is empty or has only one element, it is sorted
      #t ;; return true
      (and (<= (car lst) (cadr lst)) (sorted? (cdr lst))) ;; otherwise, check if first two elements are in order and recursively check the rest of the list
    )
  )