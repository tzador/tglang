(define (factorial n)                   ; Defines a function named 'factorial' that takes a single parameter 'n'
  (if (= n 0)                           ; Checks if 'n' is equal to 0
      1                                 ; Returns 1 if 'n' is 0
      (* n (factorial (- n 1)))))       ; Otherwise, multiplies 'n' with the result of calling 'factorial' with 'n - 1'
 
(define (fibonacci n)                   ; Defines a function named 'fibonacci' that takes a single parameter 'n'
  (if (or (= n 0) (= n 1))              ; Checks if 'n' is equal to either 0 or 1
      n                                 ; Returns 'n' if the condition is true
      (+ (fibonacci (- n 1))            ; Otherwise, calls 'fibonacci' with 'n - 1' and adds it to the result of
         (fibonacci (- n 2)))))         ; calling 'fibonacci' with 'n - 2'
 
(define (sum lst)                       ; Defines a function named 'sum' that takes a single parameter 'lst'
  (if (null? lst)                       ; Checks if the list 'lst' is empty
      0                                 ; Returns 0 if the list is empty
      (+ (car lst) (sum (cdr lst)))))   ; Otherwise, adds the first element of the list to the result of
                                        ; calling 'sum' with the rest of the list and returns the result
 
(define (binary-search lst target low high)   ; Defines a function named 'binary-search' that takes 4 parameters:
                                             ; a list 'lst', a target value 'target', and two index values
                                             ; 'low' and 'high'
  (if (>= low high)                            ; Checks if 'low' is greater than or equal to 'high'
      #f                                       ; Returns #f (false) if the condition is true, meaning
                                               ; that the target value was not found in the list
      (let* ((mid (floor (/ (+ low high) 2)))  ; Otherwise, defines a local variable 'mid' that is the midpoint
                                               ; between 'low' and 'high'
             (mid-val (list-ref lst mid)))     ; Defines another local variable 'mid-val' that contains
                                               ; the value at the mid-index of the list
        (cond ((= target mid-val)               ; Checks if the target value is equal to 'mid-val'
               mid)                             ; Returns 'mid' if the condition is true, meaning that
                                                ; the target was found at the midpoint
              ((> target mid-val)                ; Checks if the target value is greater than 'mid-val'
               (binary-search lst target (add1 mid) high))  ; Calls 'binary-search' again with a new 'low' value
                                                           ; of 'mid + 1' and the same 'high' value
              (else                             ; Otherwise, the target value must be less than 'mid-val'
               (binary-search lst target low (sub1 mid))))))  ; Calls 'binary-search' again with the same 'low' value
                                                              ; and a new 'high' value of 'mid - 1'