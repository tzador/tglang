(define (sum-list lst) ; defining a function sum-list that takes in a list as parameter
  (letrec ((sum 0) ; creating a local variable sum and initializing it to 0
           (add-next #t)) ; creating a local variable add-next and initializing it to true
    (do () ; creating a do loop
        ((= (length lst) 0) sum) ; exit condition, when length of list is 0, return sum
      (if (and (pair? lst) add-next) ; checking if input is a list and add-next is true
          (begin (set! sum (+ sum (car lst))) ; adding value to sum
                 (set! lst (cdr lst)) ; moving to next element in list
                 (set! add-next #f)) ; setting add-next to false
          (begin (set! lst '()) ; otherwise set lst to empty list
                 (set! add-next #t))) ; and set add-next to true
    )))