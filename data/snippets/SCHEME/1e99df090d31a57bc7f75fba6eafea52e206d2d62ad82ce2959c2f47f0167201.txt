;; An example function that uses tail recursion
(define (factorial x)   ;;; Defines a function called 'factorial' that takes one parameter 'x'
  (let iter ((n x)       ;;; Creates a local function called 'iter' with parameter 'n' which is set to 'x'
             (acc 1))    ;;; Creates an accumulator variable 'acc' set to 1
    (if (<= n 1)        ;;; Checks if parameter 'n' is less than or equal to 1
        acc             ;;; If true, return the accumulator value
        (iter (- n 1)   ;;; If false, calls the 'iter' function recursively with a decreased 'n' value
              (* acc n)))))   ;;; Multiplies the accumulator with 'n' and sets the accumulator to this new value