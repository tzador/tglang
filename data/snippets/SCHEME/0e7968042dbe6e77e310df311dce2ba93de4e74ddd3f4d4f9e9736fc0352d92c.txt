;;Defines a procedure that takes in two parameters, a list and a function
(define (apply-function lst fnc)
    (if (null? lst) '()
       ;;Applies the function to each element in the list
       (cons (fnc (car lst))
             ;;Recursively calls the procedure on the rest of the list
             (apply-function (cdr lst) fnc))))

;;Example of using the procedure by squaring each number in a list
(apply-function '(1 2 3 4 5) (lambda (x) (* x x)))

;;Output: '(1 4 9 16 25)