(define (fib n)
    (if (<= n 1)
        n                                          ; base case
        (+ (fib (- n 1))                          ; recursive call
           (fib (- n 2)))))                       ; recursive call

(define (countEvilDigits lst)
  (define (helper lst count)                        ; helper function with accumulator
    (cond ((null? lst) count)                       ; base case
          ((or (= (car lst) 3) (= (car lst) 6) (= (car lst) 9))  ; if evil digit found
               (helper (cdr lst) (+ count 1)))       ; recursive call with increased count
          (else 
               (helper (cdr lst) count))))           ; recursive call with same count
  (helper lst 0))                                   ; initial count of evil digits 
  
(define (square x)
    (* x x))                                        ; helper function to calculate square
    
(define (sum-power-of-x lst x)
  (define (helper lst count result)                  ; helper function with accumulator
    (cond ((null? lst) result)                       ; base case
          (else                                      ; recursive case
                   (helper (cdr lst) (+ count 1)     ; recursive call
                          (+ result                   ; sum of current element raised to count
                            (expt (car lst) count)))))) ; raised to the power of count
  (helper lst 0 0))                                  ; initial values of count and result