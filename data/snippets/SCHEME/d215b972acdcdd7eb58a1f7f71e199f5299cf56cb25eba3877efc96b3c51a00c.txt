(define (factorial n)
  (if (<= n 1) ; checks if n is less than or equal to 1
    1 ; if so, return 1
    (* n (factorial (- n 1))))) ; otherwise, multiply n by the factorial of n-1 and continue recursively

(define (fibonacci n)
  (if (<= n 1) ; base case: returns n if n is equal to or less than 1
    n ; if n is 0 or 1, return n
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; otherwise, return the sum of the fibonacci numbers for n-1 and n-2 recursively

(define (quicksort lst)
  (if (null? lst) ; base case: if list is empty, return empty list
    lst
    (let ((pivot (car lst))) ; set the pivot to be the first element of the list
      (append (quicksort (filter (lambda (x) (<= x pivot)) (cdr lst))) ; recursively quicksort the list of elements smaller than or equal to the pivot
              (list pivot) ; add the pivot back into the final sorted list
              (quicksort (filter (lambda (x) (> x pivot)) (cdr lst))))))) ; recursively quicksort the list of elements larger than the pivot 
              
(define (binary-search lst target)
  (cond ((null? lst) #f) ; if list is empty, return false
        ((= (length lst) 1) ; if list has only one element
          (if (= (car lst) target) lst #f)) ; and it's equal to the target, return list, otherwise return false
        (else (let ((midpoint (/ (length lst) 2)) ; calculate the midpoint of the list
                    (mid-ele (list-ref lst (/ (length lst) 2)))) ; get the element at the midpoint
                (cond ((= mid-ele target) lst) ; if the midpoint element is equal to target, return list
                      ((< mid-ele target) (binary-search (list-tail lst (+ midpoint 1)) target)) ; if it's less than target, recursively search the right half of the list
                      (else (binary-search (list-head lst midpoint) target))))))) ; otherwise, recursively search the left half of the list