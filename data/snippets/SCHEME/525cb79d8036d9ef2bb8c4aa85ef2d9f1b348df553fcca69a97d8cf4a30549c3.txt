;; Define a function to find the factorial of a number
(define (factorial x)
  (if (= x 0)
      1
      (* x (factorial (- x 1)))
  )
)

;; Define a function to find the nth term in the Fibonacci series
(define (fibonacci n)
  (if (or (= n 0) (= n 1))
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))
  )
)

;; Define a function to find the greatest common divisor of two numbers
(define (gcd x y)
  (if (= x 0)
      y
      (gcd (modulo y x) x)
  )
)

;; Define a function to calculate the nth power of a number
(define (power x n)
  (if (= n 0)
      1
      (* x (power x (- n 1)))
  )
)

;; Define a function to reverse a list
(define (reverse lst)
  (if (null? lst)
      '()
      (append (reverse (cdr lst)) (list (car lst)))
  )
)

;; Define a function to check if a list is sorted in ascending order
(define (is-sorted? lst)
  (if (or (null? lst) (null? (cdr lst)))
      #t
      (and (<= (car lst) (cadr lst)) (check-sorted? (cdr lst)))
  )
)

;; Define a function to check if a list contains a certain element
(define (contains? lst element)
  (if (null? lst)
      #f
      (or (equal? (car lst) element) (contains? (cdr lst) element))
  )
)