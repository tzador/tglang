#lang racket

#| This code snippet demonstrates the use of closures in Scheme.
A closure is a function that captures the environment in which it was defined, including all the variables and bindings present at that time.
Here, we define a higher-order function, `make-adder`, which takes in a number `x` and returns a closure that adds `x` to its input.
We then call `make-adder` twice to create two different functions, `add-5` and `add-10`, which add 5 and 10 respectively to their input.
|#

(define (make-adder x)
  (lambda (y) (+ x y)))

(define add-5 (make-adder 5))
(define add-10 (make-adder 10))

;; Returns 7
(add-5 2)

;; Returns 15
(add-10 5)