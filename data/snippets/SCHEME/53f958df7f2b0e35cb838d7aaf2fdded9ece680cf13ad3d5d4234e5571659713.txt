;;; Declare Global Variables
(define *tree* '(1 2 3 4 5))

;;; Function to Square Numbers
(define (square x)
  (* x x))

;;; Function to Find Sum of List of Numbers
(define (sum-list lst)
  (if (null? lst)
      0
      (+ (car lst) (sum-list (cdr lst)))))

;;; Function to Map Function Over List
(define (map fn lst)
  (if (null? lst)
      null
      (cons (fn (car lst))
            (map fn (cdr lst)))))

;;; Function to Filter List of Numbers
(define (filter pred lst)
  (if (null? lst)
      null
      (if (pred (car lst))
          (cons (car lst) (filter pred (cdr lst)))
          (filter pred (cdr lst)))))

;;; Function to Fold Left over List
(define (foldl fn acc lst)
  (if (null? lst)
      acc
      (foldl fn (fn (car lst) acc) (cdr lst))))

;;; Example Code using the Functions
(display (foldl square 0 *tree*)) ; Output: 55

(display (foldl + 0 *tree*)) ; Output: 15

(display (foldl (lambda (x acc) (if (< x 4) (+ x acc) acc)) 0 *tree*)) ; Output: 6

(display (map square *tree*)) ; Output: (1 4 9 16 25)

(display (filter odd? *tree*)) ; Output: (1 3 5)

(display (sum-list *tree*)) ; Output: 15

;;; Output:
; 55
; 15
; 6
; (1 4 9 16 25)
; (1 3 5)
; 15