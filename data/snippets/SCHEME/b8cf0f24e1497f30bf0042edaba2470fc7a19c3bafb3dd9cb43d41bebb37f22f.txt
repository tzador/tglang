(define (factorial n) ;Creates a function to find factorial of given input n
    (if (zero? n) ;Checks if n is equal to 0
        1 ;If true, returns 1 (base case)
        (* n (factorial (- n 1))) ;Otherwise, multiplies n with factorial of n-1
    ) ;End of if statement
) ;End of function definition

(define (fibonacci n) ;Creates a function to find the nth term in fibonacci series
    (if (or (zero? n) (= n 1)) ;Checks if n is 0 or 1
        1 ;If true, returns 1 (base cases)
        (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ;Otherwise, calculates nth term by adding previous two terms
    ) ;End of if statement
) ;End of function definition

(let ((list '(1 2 3 4 5))) ;Creates a list of numbers
    (let loop ((lst list) (sum 0)) ;Creates a loop that takes in a list and an initial sum value
        (if (null? lst) ;Checks if list is empty
            sum ;If true, returns the sum
            (loop (cdr lst) (+ sum (car lst))) ;Otherwise, adds current element to sum and calls loop with next element
        ) ;End of if statement
    ) ;End of loop function
) ;End of let statement