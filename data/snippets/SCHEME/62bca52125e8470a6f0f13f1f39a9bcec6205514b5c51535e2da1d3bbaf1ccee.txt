;; Define a function that takes in a list of numbers and returns the sum of all odd numbers
(define (sum-odd-numbers ls)
  (let ((total 0)) ; create a local variable 'total' with initial value of 0
    (define (helper lst)
      (if (null? lst) ; check if the list is empty
          total ; if empty, return the current total
          (if (odd? (car lst)) ; check if the first element in the list is odd
              (helper (cdr lst)) ; if odd, call the helper function recursively with the rest of the list
              (begin
                (set! total (+ total (car lst))) ; if even, add the number to the total
                (helper (cdr lst)))))) ; call the helper function recursively with the rest of the list
  (helper ls)) ; call the helper function with the input list