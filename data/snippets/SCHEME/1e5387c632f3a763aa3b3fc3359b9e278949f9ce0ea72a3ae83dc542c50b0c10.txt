;; define a function to calculate the factorial of a number
(define (factorial num)
  (if (= num 0)          ; base case: if number is 0, return 1
      1
      (* num (factorial (- num 1)))))   ; recursive case: multiply number with the factorial of the number - 1

;; define another function to calculate the sum of all numbers in a list
(define (sum-list lst)
  (if (null? lst)       ; base case: if list is empty, return 0
      0
      (+ (car lst) (sum-list (cdr lst)))))   ; recursive case: add the first element of list with the sum of the rest of the list

;; define a function to calculate the exponential of a number
(define (exp num)
  (if (= num 1)         ; base case: if number is 0, return 1
      1
      (* num (exp (- num 1)))))   ; recursive case: multiply number with the exponential of the number - 1

;; define a function to check if a number is prime
(define (prime? num)
  (define (prime-helper divisor)    ; define a helper function with a parameter for divisor
    (if (= divisor 1)               ; base case: if divisor becomes 1, number is prime
        true
        (if (= (modulo num divisor) 0)     ; if number is divisible by the divisor, not prime
            false
            (prime-helper (- divisor 1))))) ; recursive case: decrement the divisor by 1 and check again

  (if (= num 1)       ; edge case: 1 is not a prime number
      false
      (prime-helper (- num 1)))) ; call the helper function with initial divisor as number - 1