(define (merge-sort lst)
  (if (<= (length lst) 1) 
      lst
      (let* ((mid (quotient (length lst) 2))
             (left (take lst mid))
             (right (drop lst mid)))
        (merge (merge-sort left) (merge-sort right)))))

(define (merge left right)
  (if (or (null? left) (null? right))
      (append left right)
      (if (<= (car left) (car right))
          (cons (car left) (merge (cdr left) right))
          (cons (car right) (merge left (cdr right))))))

; Example usage:
(merge-sort '(8 5 2 3 1 9 4 6 7))