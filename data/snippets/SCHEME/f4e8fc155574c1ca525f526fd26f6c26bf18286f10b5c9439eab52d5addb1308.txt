;;Define reverse function that takes in a list and returns the reversed list
(define (reverse lst)
  ;;Internal reverse function that takes in two parameters: a list and an accumulator
  (define (reverse-helper lst acc)
    ;;If the list is empty, return the accumulator
    (if (null? lst)
        acc
        ;;Otherwise, recursively call the reverse-helper function with the rest of the list as the first parameter
        ;;and the cons of the first element of the list and the accumulator as the second parameter
        (reverse-helper (cdr lst) (cons (car lst) acc))))
  ;;Call the internal reverse-helper function with the given list and an empty list as the accumulator
  (reverse-helper lst '()))
  
;;Example call to reverse function
(reverse '(1 2 3 4)) ;Output: '(4 3 2 1)