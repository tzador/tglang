;; Fibonacci function that uses memoization for better performance
;; Takes in one parameter, n, representing the nth number in the Fibonacci sequence
;; Returns the value of the nth number

(define fib-memo
  (lambda (n)
    (define memo-table (list 0 1)) ; Initialize memoization table with first two values
    (define fib-helper
      (lambda (n)
        (if (< n (length memo-table)) ; If value is already memoized, return it
            (list-ref memo-table n)
            (let* ((n1 (fib-helper (- n 1))) ; Get previous two values
                   (n2 (fib-helper (- n 2)))
                   (res (+ n1 n2))) ; Calculate current value
              (set! memo-table (append memo-table (list res))) ; Memoize current value
              res))))
    (fib-helper n)))