;; Function to calculate factorial of a number
(define (factorial n)
    (if (equal? n 0)
        1
    (* n (factorial (- n 1)))
))

;; Function to generate a list of fibonacci numbers up to a given limit
(define (fibonacci-generator limit)
    (let ((fibonacci-list '(1 1)))
        (let loop ((a 1)
                   (b 1))
            (if (> b limit)
                (reverse fibonacci-list)
                (loop b (+ a b) (set! fibonacci-list (cons b fibonacci-list)))
            )
        )
    )
)

;; Function to determine if a number is prime
(define (prime? n)
    (if (<= n 1)
        #f
        (let loop ((i 2))
            (if (> i (sqrt n))
                #t
                (if (= (modulo n i) 0)
                    #f
                    (loop (+ i 1))
                )
            )
        )
    )
)