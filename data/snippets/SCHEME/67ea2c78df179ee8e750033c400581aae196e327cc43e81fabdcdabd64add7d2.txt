;;; An implementation of the DPLL algorithm for propositional logic

(define (evaluate-clause assignments clause)
  (let loop ((clause clause))
    (cond ((null? clause) #t)
          ((member (car clause) assignments) #t)
          ((member (- (car clause)) assignments)
           (loop (cdr clause)))
          (else #f))))

(define (evaluate-formula formula assignments)
  (cond ((null? formula) #t)
        ((evaluate-clause assignments (car formula))
         (evaluate-formula (cdr formula) assignments))
        (else #f)))

(define (dpll formula-vars formula assignments)
  (if (null? formula-vars)
      (if (evaluate-formula formula assignments)
          assignments
          #f)
      (or (dpll (cdr formula-vars) formula (cons (car formula-vars) assignments))
          (dpll (cdr formula-vars) formula (cons (- (car formula-vars)) assignments)))))