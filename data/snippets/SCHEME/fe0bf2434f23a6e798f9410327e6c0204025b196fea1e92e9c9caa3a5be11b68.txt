(define (generate-list lst) ; a function to create a list
  (letrec ; defines a local recursive function
    ((helper (lambda (lst1 lst2) ; a helper function that takes two parameters
               (cond ; conditional statement
                 ((null? lst1) lst2) ; if the first list is empty, return the second list
                 ((pair? (car lst1)) (helper (cdr lst1) (append (generate-list (car lst1)) lst2))) ; if the first element is a pair, use recursion to call the generate-list function on the car and then append it to the second list
                 (else (helper (cdr lst1) (cons (car lst1) lst2))))))) ; otherwise, add the first element to the second list
    (helper lst '()))) ; calls the helper function on the input list and an empty list, which will eventually contain the generated list