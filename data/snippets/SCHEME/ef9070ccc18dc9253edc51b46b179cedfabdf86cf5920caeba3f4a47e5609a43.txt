(define (merge-sort lst)
  ; This function implements the merge sort algorithm
  ; Takes in a list of elements lst and returns a sorted list
  
  ; First, we check if the list is empty or contains only one element
  (if (or (null? lst) (<= (length lst) 1))
      lst
  
  ; Otherwise, we divide the list into left and right halves
  (let* ((mid (quotient (length lst) 2))
         (left (take lst mid))
         (right (drop lst mid)))
         
    ; Recursively sort the two halves
    (let* ((sorted-left (merge-sort left))
           (sorted-right (merge-sort right)))
           
      ; Merge the two sorted halves
      (let loop ((left sorted-left)
                 (right sorted-right)
                 (result (list)))
        (cond ((null? left) (append result right)) ; If left half is empty, append the right half to result
              ((null? right) (append result left)) ; If right half is empty, append the left half to result
              ((<= (car left) (car right)) ; Compare first elements of left and right halves
               (loop (cdr left) right (append result (list (car left))))) ; Append smaller element to result and continue looping
              (else (loop left (cdr right) (append result (list (car right))))))) ; Append smaller element to result and continue looping
  )
  )
)