(define (sum lst) 
  (if (null? lst) 
      0 
      (+ (car lst) 
         (sum (cdr lst)))); Define a sum function that takes in a list 
                           ; as an argument and returns the total 
                           ; sum of all the elements in the list recursively
(define (fib n) 
  (if (< n 2) 
      n 
      (+ (fib (- n 1)) 
         (fib (- n 2)))) ; Define a Fibonacci function that takes 
                          ; in a number as an argument and recursively 
                          ; returns the Fibonacci number at that position
(define (factorial n) 
  (if (= n 1) 
      1 
      (* n (factorial (- n 1))))) ; Define a factorial function that takes 
                                 ; in a number as an argument and 
                                 ; recursively returns the factorial 
                                 ; of that number
(define (tree-sum tree) 
  (if (null? tree) 
      0 ; If tree is empty, return 0
      (+ (car tree) ; Else, add the value of the current node to the sum 
         (tree-sum (cdr tree))))) ; and recursively call tree-sum on the 
                                  ; rest of the tree
(define (list-flatten lst) 
  (if (null? lst) 
      '() ; If lst is empty, return an empty list
      (if (list? (car lst)) 
          (append (list-flatten (car lst)) (list-flatten (cdr lst))) ; If the first 
                                                                    ; element of lst 
                                                                    ; is a list, 
                                                                    ; recursively 
                                                                    ; flatten it and 
                                                                    ; combine it with 
                                                                    ; the flattened 
                                                                    ; rest of lst
          (cons (car lst) (list-flatten (cdr lst)))))) ; If the first element of lst 
                                                       ; is not a list, keep it at 
                                                       ; the beginning and recurse 
                                                       ; on the rest of lst