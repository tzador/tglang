;; Function to calculate the factorial of a number
(define (factorial n)
  (if (= n 1) ; base case
    1
    (* n (factorial (- n 1))) ; recursive case
  )
)

;; Helper function to calculate the combination of two numbers
(define (combination n k)  
  (/ (factorial n) (* (factorial k) (factorial (- n k))))
)

;; Function to generate Pascal's triangle up to a given number of rows
(define (pascals-triangle num-rows)  
  (let ((triangle '()))    ; define empty list to store triangle
    (do ((row 0 (+ row 1))) ; loop over rows
      ((= row num-rows)     ; exit loop at num-rows
       (reverse triangle))  ; reverse triangle and return
      (let ((current-row '()) ; define empty list to store current row
            (current-col 0))  ; define current column index
        (do ((col 0 (+ col 1))) ; loop over columns
          ((> col row))         ; exit loop when column index > row index
          (if (or (= col 0) (= col row)) ; if first or last column
              (set! current-row (cons 1 current-row))
              (set! current-row (cons (+ (combination row col) 
                                        (car (cdr (list-ref triangle (- row 1 (car triangle)))))) ; calculate combination of previous row's two numbers
                                      current-row)
          )
          (set! current-col (+ current-col 1))) ; increment current column index
        (set! triangle (cons current-row triangle)) ; add current row to triangle
      )
    )
  )
)