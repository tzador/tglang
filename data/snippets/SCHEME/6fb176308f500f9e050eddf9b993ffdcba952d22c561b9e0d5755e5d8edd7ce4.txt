(define (factorial n)
  (if (= n 0)       ; base case: factorial of 0 is 1
      1
      (* n (factorial (- n 1))))) ; recursive case: n * factorial(n-1)


;; function to calculate the nth Fibonacci number
(define (fibonacci n)
  (if (or (= n 1) (= n 2))    ; base cases: Fibonacci of 1 and 2 is 1
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))    ; recursive case: Fibonacci(n-1) + Fibonacci(n-2)
      
;; function to return the nth power of a given number
(define (power n x)
  (if (= n 0)                      ; base case: power of 0 is 1
      1
      (* x (power (- n 1) x))))    ; recursive case: x * power(n-1, x) 
      
;; function to check if a given number is prime
(define (is-prime n)
  (define (helper d)
    (if (= d 1)                    ; base case: if d is 1, n is prime
        #t
        (if (= (remainder n d) 0)  ; if n is divisible by d, it is not prime
            #f
            (helper (- d 1)))))     ; recursive case: check with next decreasing divisor
  (helper (- n 1)))                ; start with n-1 as largest possible divisor