(define (list-merge lst)
    (define (merge xs ys z)
        (if (or (null? xs) (null? ys))
            (append (reverse z) (append xs ys))
            (if (< (car xs) (car ys))
                (merge (cdr xs) ys (cons (car xs) z))
                (merge xs (cdr ys) (cons (car ys) z)))))
    (let ((len (length lst)))
        (if (or (null? lst) (= len 1)) lst
            (let* ((fst (list-ref lst 0))
                    (snd (list-ref lst 1))
                    (rest (list-ref lst (- len 1)))
                    (left (list-ref lst (/ len 2)))
                    (right (list-ref lst (- len (/ len 2)))))
                (append (merge (list-merge left) (list-merge right) '())
                        (list-merge rest))))))