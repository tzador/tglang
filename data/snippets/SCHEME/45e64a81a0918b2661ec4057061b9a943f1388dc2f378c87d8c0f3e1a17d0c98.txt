(define (map proc items)
  (if (null? items)
      nil
      (cons (proc (car items))
          (map proc (cdr items)))))

;;; Procedure: map
;;; Description: Applies the given procedure to each item in the given list and returns a new list with the results.
;;; Parameters:
;;; - proc: The procedure to be applied to each item.
;;; - items: The list of items to be mapped over.
;;; Output: A new list with the results of applying the given procedure to each item in the given list. 

(define (count-items lst)
  (if (null? lst)
      0
      (+ 1 (count-items (cdr lst)))))

;;; Procedure: count-items
;;; Description: Returns the number of items in the given list.
;;; Parameters:
;;; - lst: The list to be counted.
;;; Output: The number of items in the given list. 

(define (filter proc items)
  (if (null? items)
      nil
      (if (proc (car items))
          (cons (car items)
              (filter proc (cdr items)))
          (filter proc (cdr items)))))

;;; Procedure: filter
;;; Description: Filters the given list by applying the given procedure to each item and returning a list with the items that pass the procedure.
;;; Parameters:
;;; - proc: The procedure used to filter the list.
;;; - items: The list to be filtered.
;;; Output: A new list with the items that passed the given procedure.