; This function takes in a list and multiplies each element by itself
(define (square-list lst)
  (if (null? lst)
      '()
      (cons (* (car lst) (car lst)) (square-list (cdr lst)))
  )
)

; This function takes in a list of numbers and checks if they are all even
(define (check-even lst)
  (if (null? lst)
      #t
      (if (even? (car lst))
          (check-even (cdr lst))
          #f
      )
  )
)

; This function takes two lists and returns a new list with elements that are found in both lists
(define (intersect lst1 lst2)
  (cond ((null? lst1) '())
        ((null? lst2) '())
        ((memq (car lst1) lst2) (cons (car lst1) (intersect (cdr lst1) lst2)))
        (else (intersect (cdr lst1) lst2))
  )
)

; This function uses recursion to calculate the nth Fibonacci number
(define (fib n)
  (if (or (zero? n) (= n 1))
      n
      (+ (fib (- n 1)) (fib (- n 2)))
  )
)

; This function calculates the area of a triangle using Heron's formula
(define (heron a b c)
  (let ((s (/ (+ a b c) 2)))
    (sqrt (* s (- s a) (- s b) (- s c)))
  )
)