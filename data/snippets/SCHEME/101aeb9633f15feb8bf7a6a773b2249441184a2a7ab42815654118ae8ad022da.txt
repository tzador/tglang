(define list-length
  ;; returns the number of elements in a list
  (lambda (lst)
    (if (null? lst) ; if list is empty, return 0
        0 
        (+ 1 (list-length (cdr lst))) ; else, add 1 and recursively call list-length with the rest of the list
    )
  )
)

(define list-sum
  ;; returns the sum of all elements in a list
  (lambda (lst)
    (if (null? lst) ; if list is empty, return 0
        0 
        (+ (car lst) (list-sum (cdr lst))) ; else, add the current element and recursively call list-sum with the rest of the list
    )
  )
)

(define list-average
  ;; returns the average of all elements in a list
  (lambda (lst)
    (if (null? lst) ; if list is empty, return 0
        0 
        (/ (list-sum lst) (list-length lst)) ; else, divide the sum of all elements by the length of the list
    )
  )
)

(define multiply-list
  ;; returns a list where each element is multiplied by the given num
  (lambda (lst num)
    (if (null? lst)
        '() ; if list is empty, return empty list
        (cons (* (car lst) num) (multiply-list (cdr lst) num)) ; else, multiply the first element by the given num and recursively call multiply-list with the rest of the list
    )
  )
)

(define factorial
  ;; returns the factorial of a given number
  (lambda (num)
    (if (= num 0) ; base case: if num is 0, return 1
        1
        (* num (factorial (- num 1))) ; else, recursively call factorial with num-1 and multiply by num
    )
  )
)

(define is-even?
  ;; checks if a given number is even
  (lambda (num)
    (if (= num 0) ; if num is 0, it is even
        #t
        (is-even? (- num 2)) ; else, recursively call is-even? with num-2 (the next even number)
    )
  )
)

(define is-odd?
  ;; checks if a given number is odd
  (lambda (num)
    (if (= num 1) ; if num is 1, it is odd
        #t
        (is-odd? (- num 2)) ; else, recursively call is-odd? with num-2 (the previous odd number)
    )
  )
)

(define is-prime?
  ;; checks if a given number is prime
  (lambda (num)
    (if (< num 2) ; if num is less than 2, it is not prime
        #f
        (define (check-prime div) ; helper function to check if num is divisible by div
          (if (= div 1) ; base case: if div is 1, num is prime
              #t
              (if (= (remainder num div) 0) ; if num is divisible by div, it is not prime
                  #f
                  (check-prime (- div 1)) ; recursively call check-prime with div-1
              )
          )
        )
        (check-prime (- num 1)) ; start with the largest possible divisor, num-1
    )
  )
)

(define reverse-list
  ;; reverses a given list
  (lambda (lst)
    (if (null? lst)
        '() ; if list is empty, return empty list
        (append (reverse-list (cdr lst)) (list (car lst))) ; recursively call reverse-list on the rest of the list and append the first element to the end
    )
  )
)