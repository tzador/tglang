(define (compute-factorial n) ; define a function to calculate the factorial of a given number
  (if (= n 0) ; if n is equal to 0
      1 ; then return 1
      (* n (compute-factorial (- n 1))))) ; else, recursively call the function with n-1 and multiply it by n
  
(define (compute-gcd a b) ; define a function to calculate the greatest common divisor of two numbers
  (if (= a b) ; if a is equal to b
      a ; then return a
      (if (< a b) ; else, if a is less than b
          (compute-gcd a (- b a)) ; then recursively call the function with a and b-a
          (compute-gcd b (- a b))))) ; else, recursively call the function with b and a-b
          
(define (compute-fibonacci n) ; define a function to calculate the n-th number in the Fibonacci sequence
  (if (or (= n 0) (= n 1)) ; if n is equal to 0 or 1
      n ; then return n
      (+ (compute-fibonacci (- n 1)) (compute-fibonacci (- n 2))))) ; else, recursively call the function with n-1 and n-2 and add the results