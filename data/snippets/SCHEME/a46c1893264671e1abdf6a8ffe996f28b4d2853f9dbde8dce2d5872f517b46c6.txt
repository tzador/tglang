(define (sum list) ;; Define a function called 'sum' that takes in a list as a parameter
  (if (null? list) ;; Check if the list is empty
      0 ;; Return 0 if the list is empty
      (+ (car list) (sum (cdr list))) ;; Else, add the first element of the list to the recursive call of the function with the rest of the list as the parameter
  )
)

(define (factorial num) ;; Define a function called 'factorial' that takes in a number as a parameter
  (if (= num 0) ;; Check if the number is equal to 0
      1 ;; Return 1 if the number is 0
      (* num (factorial (- num 1))) ;; Else, multiply the number with the recursive call of the function with the number - 1 as the parameter
  )
)