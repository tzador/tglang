(define (check-prime? num) ; defining a function for checking prime numbers
  (define (check-divisor iter) ; defining a helper function to iterate through possible divisors
    (cond ((> iter (/ num 2)) ; if the iterator is greater than half the number, it is prime
           #t)
          ((= (modulo num iter) 0) ; if the number is divisible by the iterator, it is not prime
           #f)
          (else ; otherwise, keep iterating to find a divisor
           (check-divisor (+ iter 1)))))
  (check-divisor 2)) ; starting the iteration from 2, since 1 is not a prime number

; this is a comment in Scheme
; usage:
; (check-prime? 17) ; -> #t since 17 is a prime number
; (check-prime? 15) ; -> #f since 15 is divisible by 3 and therefore not a prime number