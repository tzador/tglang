;; This function checks if a number is prime
(define (is-prime? num)
  (cond 
    ((<= num 1) 'F) ;; if num is less than or equal to 1, it is not prime
    ((= num 2) 'T) ;; 2 is prime
    ((= (modulo num 2) 0) 'F) ;; if num is even, it is not prime
    (else 
     (letrec ((helper (lambda (div)
                        (if (>= div (floor (sqrt num))) ;; checks all possible divisors up to the square root of num
                            'T ;; if no divisors found, num is prime
                            (if (= (modulo num div) 0) ;; if num is divisible by div, it is not prime
                                'F
                                (helper (+ div 1)) ;; else, continue checking with next divisor
                                )))))
       (helper 3))))) ;; starts checking at 3 because all even numbers (except 2) were already accounted for