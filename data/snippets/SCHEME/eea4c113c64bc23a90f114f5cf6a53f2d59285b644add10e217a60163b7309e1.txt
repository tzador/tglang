(define (find-element lst x)                        ; defines a procedure that takes in a list and an element
    (cond                                           ; conditional statement
        ((null? lst) #f)                            ; if the list is empty, return #f
        ((eq? x (car lst)) (car lst))               ; if the element is found in the first position, return it
        (else (find-element (cdr lst) x))))         ; otherwise, recursively call the procedure on the rest of the list

(define (count-elements lst)                        ; defines a procedure that takes in a list
    (let ((count 0))                                ; creates a local variable count with initial value 0
        (define (helper lst)                        ; defines a helper function that takes in a list
            (if (null? lst)                         ; checks if the list is empty
                count                               ; if it is, return the count variable
                (begin                              ; otherwise, start a sequence of expressions
                    (set! count (+ count 1))         ; increment the count variable by 1
                    (helper (cdr lst)))))            ; recursively call the helper function on the rest of the list
        (helper lst)))                              ; calls the helper function with the input list

(define (calculate-sum lst)                         ; defines a procedure that takes in a list
    (if (null? lst)                                 ; check if the list is empty
        0                                           ; if it is, return 0
        (+ (car lst) (calculate-sum (cdr lst)))))   ; otherwise, recursively call the procedure on the rest of the list and add it to the first element

(define (quicksort lst)                             ; defines a procedure that takes in a list
    (if (null? lst)                                 ; checks if the list is empty
        lst                                         ; if it is, return the list
        (let ((pivot (car lst)))                    ; creates a local variable pivot with the value of the first element
            (append                                  ; uses the append procedure to combine three lists
                (quicksort (filter (lambda (x) (< x pivot)) (cdr lst))) ; recursively calls quicksort on a filtered list of elements less than the pivot
                (list pivot)                        ; adds the pivot to the middle
                (quicksort (filter (lambda (x) (> x pivot)) (cdr lst))))))) ; recursively calls quicksort on a filtered list of elements greater than the pivot

(quicksort '(3 1 5 2 4))                           ; calls the quicksort procedure with the list '(3 1 5 2 4)'