(define (select-sort lst) ;define a function named "select-sort" that takes in a list as a parameter
  (if (null? lst) lst ;if the list is empty, return the list
      (let ((lowest (find-lowest lst)) ;else, use the "find-lowest" function to find the lowest number in the list and bind it to the variable "lowest"
            (rest (remove-lowest lst))) ;use the "remove-lowest" function to remove the lowest number from the list and bind the remaining list to the variable "rest"
    (cons lowest (select-sort rest))))) ;use "cons" to add the lowest number to the sorted list and recursively call the "select-sort" function on the rest of the list
(define (find-lowest lst) ;define a function named "find-lowest" that takes in a list as a parameter
  (if (null? (cdr lst)) (car lst) ;if there is only one element in the list, return that element
      (min (car lst) (find-lowest (cdr lst))))) ;otherwise, use "min" to find the minimum between the first element and the result of recursively calling "find-lowest" on the rest of the list
(define (remove-lowest lst) ;define a function named "remove-lowest" that takes in a list as a parameter
  (if (= (car lst) (find-lowest lst)) (cdr lst) ;if the first element is the lowest, return the rest of the list
      (cons (car lst) (remove-lowest (cdr lst))))) ;else, use "cons" to add the first element to the result of recursively calling "remove-lowest" on the rest of the list