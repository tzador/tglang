(define (weighted-average lst)
  "Function to calculate the weighted average of a given list of numbers."
  (cond
   ((null? lst) #f) ; checks if list is empty
   ((null? (cdr lst)) (car lst)) ; returns value if only one number in list
   (else
    (let ((value (car lst)) ; binds first number in list to variable
          (weight (car (cdr lst)))) ; binds second number in list to variable
      (let ((rest-average (weighted-average (cdr (cdr lst))))) ; recursively calls function to calculate average of rest of the list
        (+ (* value weight) (* rest-average (- 1 weight))))))) ; calculates the weighted average