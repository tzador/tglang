; Function to calculate the factorial of a number using recursion
(define (fact n)
  (if (<= n 1) ; Checks if n is less than or equal to 1
      1         ; Returns 1 if n is 1
      (* n (fact (- n 1))))) ; Multiplies n with the recursive call of (n-1)

; Function to calculate the nth Fibonacci number using recursion
(define (fibonacci n)
  (if (< n 2) ; Checks if n is less than 2
      n        ; Returns n if n is 0 or 1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; Adds the two previous Fibonacci numbers to get the nth number

; Function to check if a list is a palindrome
(define (palindrome? lst)
  (if (<= (length lst) 1) ; Checks if the length of the list is less than or equal to 1
      #t                  ; Returns true if the list is empty or contains only one element
      (if (= (car lst) (last lst)) ; Checks if the first element is equal to the last element
          (palindrome? (cdr (butlast lst))) ; Recursively checks if the list is a palindrome without the first and last elements
          #f)))                             ; Returns false if the first element is not equal to the last element