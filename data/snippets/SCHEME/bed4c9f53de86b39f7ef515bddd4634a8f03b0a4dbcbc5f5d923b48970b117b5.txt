(define (flatten lst)                            ; Defines a function named 'flatten' that takes in a list 'lst'
  (cond ((null? lst) '())                        ; If the list is empty, return an empty list
        ((not (pair? (car lst)))                 ; If the first element is not a list,
         (cons (car lst) (flatten (cdr lst))))   ; add it to the result and recursively call flatten on the rest of the list
        (else                                   ; Otherwise,
         (append (flatten (car lst))             ; Flatten the list and add its elements to the result,
                 (flatten (cdr lst))))))         ; then flatten the rest of the list and add its elements to the result 
                                                 ; (note: append is a built-in function that combines two lists)