;; Define a procedure that takes in two parameters, a list of numbers and
;; a function, and applies the function to each element in the list,
;; returning a new list with the calculated values.

(define (apply-func lst func)
  (cond
    ((null? lst) '()) ; if the list is empty, return an empty list
    (else (cons (func (car lst)) ; apply the function to the first element of the list
                (apply-func (cdr lst) func))))) ; recursively call the procedure with the rest of the list and the function

;; Example usage:
(apply-func '(1 2 3) square) ; returns (1 4 9)
(apply-func '(4 3 6) (lambda (x) (* x 2))) ; returns (8 6 12)