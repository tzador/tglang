;Function to calculate the factorial of a number
(define factorial
  (lambda (n)
    (if (= n 0) 1 (* n (factorial (- n 1))))))

;Function to sort a list in ascending order
(define list-sort
  (lambda (lst)
    (if (null? lst)
        lst
        (let
            ((pivot (car lst))
             (partitions
              (list-sort (filter
                          (lambda (x) (> x pivot)) (cdr lst)))))
            (append
             (list-sort (filter (lambda (x) (equal? x pivot)) lst))
             partitions
             (list-sort (filter (lambda (x) (< x pivot)) lst)))))))

;Function to convert binary numbers to decimal numbers
(define binary-to-decimal
  (lambda (n)
    (cond
     ((null? n) 0)
     (else (+ (car n) (* 2 (binary-to-decimal (cdr n))))))))

;Function to check if a number is prime
(define is-prime
  (lambda (n)
    (and
     (> n 1)
     (let
         ((i 2))
       (let
           ((done (+ (square i) 1)))
         (let
             ((found (falseif (> i n))))
           (do ((i (+ i 1)))
               ((done i)
                (not (++ found))))
           found)))))))

;Function to calculate the sum of a series
(define series-sum
  (lambda (n series-function)
    (if (= n 0)
        0
        (+ (series-function n) (series-sum (- n 1) series-function)))))