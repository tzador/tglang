;; Define a function that checks if a number is a prime number
(define (is-prime? num)
  (cond 
    [(<= num 1) #f] ; prime numbers must be greater than 1
    [(= num 2) #t] ; 2 is the only even prime number
    [(= (modulo num 2) 0) #f] ; any even number (except 2) is not a prime number
    [else 
      (let loop ((divisor 3))
        (cond
          [(> divisor (sqrt num)) #t] ; if the divisor is greater than the square root of num, then num is a prime number
          [(= (modulo num divisor) 0) #f] ; if num is divisible by the divisor, then it is not a prime number
          [else (loop (+ divisor 2))] ; increment the divisor by 2 and continue checking
        )
      )
    ]
  )
)

;; Define a function that returns a list of all prime numbers between two given numbers (inclusive)
(define (list-primes start end)
  (define (helper cur)
    (cond
      [(> cur end) '()] ; if the current number is greater than the end number, return an empty list
      [(is-prime? cur) (cons cur (helper (+ cur 1)))] ; if the current number is a prime number, add it to the list and continue checking the next number
      [else (helper (+ cur 1))] ; if the current number is not a prime number, continue checking the next number
    )
  )
  (helper start))
  
;; Example usage:
(list-primes 1 20) ; returns '(2 3 5 7 11 13 17 19)
(list-primes 1001 1010) ; returns '(1009)