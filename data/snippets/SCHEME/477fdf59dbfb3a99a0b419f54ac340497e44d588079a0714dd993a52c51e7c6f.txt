(define (count-change amount)            ; Defines a function to count change for a given input amount.
  (define (cc amount kinds-of-coins)     ; Defines a helper function that takes in the amount and a list of coin denominations.
    (cond ((= amount 0) 1)               ; If the amount is 0, return 1 (only one way to make change with no coins).
          ((or (< amount 0) (= kinds-of-coins 0)) 0)    ; If the amount is negative or there are no coin denominations left, return 0 (no way to make change).
          (else (+ (cc amount (- kinds-of-coins 1))     ; Otherwise, recursively call the helper function with the same amount but with one less coin denomination.
                   (cc (- amount (first-denomination kinds-of-coins))    ; And also call the helper function with the remaining amount minus the first denomination in the list.
                       kinds-of-coins)))))      ; Finally, return the sum of both calls.
  (define (first-denomination kinds-of-coins)     ; Defines a function to return the first denomination in the list of coins.
    (cond ((= kinds-of-coins 1) 1)            ; If there is only one coin denomination, return it.
          ((= kinds-of-coins 2) 5)            ; If there are two coin denominations, return the larger one (5).
          ((= kinds-of-coins 3) 10)           ; If there are three coin denominations, return the largest one (10).
          ((= kinds-of-coins 4) 25)))         ; If there are four coin denominations, return the largest one (25).
  (cc amount 4))                      ; Calls the helper function with the inputted amount and the number of coin denominations (4).