`;; Define a procedure that performs binary search on a list.
(define (binary-search lst item)
  (let ((start 0)
        (end (length lst)) ;; Setting the starting and ending indices
        (mid (/ (+ start end) 2)))
    (cond
      ((null? lst)
       '()) ;; If list is empty, return empty list
      ((> item (car (drop-right lst 1))) ;; If item is greater than last element, return empty list
       '()) 
      ((< item (car lst)) ;; If item is less than first element, return empty list
       '())
      ((= item (car lst)) ;; If item is equal to first element, return first element
       (list (car lst)))
      ((= item (car (drop-right lst 1))) ;; If item is equal to last element, return last element
       (list (car (drop-right lst 1))))
      ((= item (list-ref lst mid)) ;; If item is equal to middle element, return middle element
       (list-ref lst mid))
      ((< item (list-ref lst mid)) ;; If item is less than middle element, call binary search on first half of list
       (binary-search (take lst mid) item))
      ((> item (list-ref lst mid)) ;; If item is greater than middle element, call binary search on second half of list
       (binary-search (drop lst mid) item))
      (else ;; If none of the above conditions are met, return empty list
       '())))))

`