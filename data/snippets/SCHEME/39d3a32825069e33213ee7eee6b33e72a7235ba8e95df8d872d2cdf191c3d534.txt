;; Define a function to calculate the square of a number
(define (square x)
  (* x x))

;; Define a function to calculate the sum of two numbers
(define (sum x y)
  (+ x y))

;; Define a function to check if a number is divisible by another number
(define (divisible? x y)
  (= (remainder x y) 0))

;; Define a function to calculate the factorial of a number
(define (factorial n)
  (if (= n 0)      ; check if n is equal to 0
      1             ; if yes, return 1 as the base case
      (* n (factorial (- n 1))))) ; if no, calculate n * (n-1) and recursively call factorial with n-1 as the input

;; Define a function to find the nth Fibonacci number
(define (fibonacci n)
  (if (or (= n 1) (= n 2)) ; base case: if n is 1 or 2, return 1
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; if n is greater than 2, calculate the sum of the (n-1)th and (n-2)th Fibonacci numbers recursively

;; Define a function to check if a number is prime
(define (prime? n)
  (define (prime-helper n div)
    (if (= div 1) ; base case: if div is equal to 1, return true (as all numbers are divisible by 1)
        #t
        (if (divisible? n div) ; check if n is divisible by div
            #f                ; if yes, return false
            (prime-helper n (- div 1))))) ; if not, recursively call prime-helper with n and (div-1) as input
  (prime-helper n (- n 1))) ; call prime-helper with n and (n-1) as input to start recursion from n-1

;; Define a function to calculate the sum of a list of numbers
(define (sum-list lst)
  (if (null? lst) ; base case: if lst is empty, return 0 as the sum
      0
      (+ (car lst) (sum-list (cdr lst))))) ; if lst is not empty, add the first element to the sum of rest of the list recursively

;; Define a function to map a given function to each element in a list
(define (map fn lst)
  (if (null? lst) ; base case: if lst is empty, return an empty list
      '()
      (cons (fn (car lst)) (map fn (cdr lst))))) ; if lst is not empty, apply the given function to the first element and recursively map the rest of the list

;; Define a function to filter a list based on a given predicate function
(define (filter pred lst)
  (if (null? lst) ; base case: if lst is empty, return an empty list
      '()
      (if (pred (car lst)) ; check if the first element satisfies the predicate function
          (cons (car lst) (filter pred (cdr lst))) ; if yes, add it to the filtered list and recursively filter the rest of the list
          (filter pred (cdr lst))))) ; if not, recursively filter the rest of the list without adding the first element