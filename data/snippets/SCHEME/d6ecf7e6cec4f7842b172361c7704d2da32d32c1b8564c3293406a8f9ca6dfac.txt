(define (find-max lst) ;Defines a procedure named 'find-max' with a list parameter.
  (let ((acc (car lst))) ;Uses the local variable 'acc' to store the first element of the list.
    (foldl (lambda (x y) ;Uses the 'foldl' function to recursively loop through the list.
             (if (> x y)    ;Compares the current element ('x') to the accumulator ('y').
                 x          ;If 'x' is greater, it becomes the new value of the accumulator.
                 y))        ;Otherwise, the accumulator stays the same.
           acc             ;Sets the accumulator as the starting value of the loop.
           (cdr lst))))    ;Applies the procedure to the rest of the list, starting from the second element.