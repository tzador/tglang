;; This is a function that takes in two lists and returns their cartesian product
(define (cartesian-product a b)
  (if (null? a)
      '()
      (append-lists (pair-combine (car a) b) (cartesian-product (cdr a) b))))

;; Helper function to append two lists
(define (append-lists list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append-lists (cdr list1) list2))))

;; Helper function to combine an element with each element in a list
(define (pair-combine x list1)
  (cond ((null? list1) '())
        (else (cons (list x (car list1))
                    (pair-combine x (cdr list1))))))

;; Example usage
(cartesian-product '(1 2) '(3 4)) ; => ((1 3) (1 4) (2 3) (2 4))