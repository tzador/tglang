(define (factorial n)                ; Defines a function named 'factorial'
  (if (= n 0)                        ; If n equals 0:
      1                              ; Return 1
      (* n (factorial (- n 1)))))    ; Else, multiply n by the result of calling factorial with n - 1 as the argument

(define (fibonacci n)               ; Defines a function named 'fibonacci'
  (if (< n 2)                       ; If n is less than 2:
      n                             ; Return n
      (+ (fibonacci (- n 1))        ; Else, Return the sum of calling fibonacci with n - 1
         (fibonacci (- n 2)))))     ; and calling fibonacci with n - 2 as arguments

(define (power b e)                 ; Defines a function named 'power' that takes in parameters 'b' and 'e'
  (if (= e 0)                       ; If e equals 0:
      1                             ; Return 1
      (* b (power b (- e 1)))))     ; Else, multiply b by the result of calling power again with b and e - 1 as arguments