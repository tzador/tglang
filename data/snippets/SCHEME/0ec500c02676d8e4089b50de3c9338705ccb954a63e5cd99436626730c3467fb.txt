` ` `
(define (merge-sort lst)
  ; Define a procedure that implements the merge-sort algorithm
  (define (merge left right)
    ; Define a recursive helper function to merge two sorted lists
    (cond ((null? left) right) ; If left list is empty, return right list
          ((null? right) left) ; If right list is empty, return left list
          ((< (car left) (car right)) ; If the first element of the left list is smaller
           (cons (car left) (merge (cdr left) right))) ; Append it to the merged list and recurse
          (else (cons (car right) (merge left (cdr right)))))) ; Otherwise, do the same for the right list
  ; Split the list into two halves
  (let ((n (quotient (length lst) 2))) ; Calculate the middle index
    (if (zero? n) lst ; If the list contains only one element, return it
        (let ((left (take lst n)) ; Otherwise, split the list into two halves
              (right (drop lst n)))
          (merge (merge-sort left) (merge-sort right)))))) ; Recursively merge the sorted halves