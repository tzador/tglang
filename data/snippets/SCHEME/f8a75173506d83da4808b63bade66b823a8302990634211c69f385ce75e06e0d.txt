#lang racket

(define (merge-sort lst)
  ; Sorts the given list using the merge-sort algorithm
  (cond ((null? lst) lst)
        ((null? (cdr lst)) lst)
        (else (merge (merge-sort (take lst (quotient (length lst) 2)))
                     (merge-sort (drop lst (quotient (length lst) 2)))))))

(define (merge lst1 lst2)
  ; Merges two sorted lists into one sorted list
  (if (null? lst1) lst2
      (if (null? lst2) lst1
          (if (< (car lst1) (car lst2))
              (cons (car lst1) (merge (cdr lst1) lst2))
              (cons (car lst2) (merge lst1 (cdr lst2)))))))

; Example usage
(merge-sort '(5 2 4 9 3 1)) ; Output: (1 2 3 4 5 9)