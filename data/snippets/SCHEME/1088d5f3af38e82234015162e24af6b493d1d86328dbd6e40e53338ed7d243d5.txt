(define (fib n)
  (if (or (equal? n 0) (equal? n 1))
      n
      (+ (fib (- n 1)) (fib (- n 2)))))

(define (factorial n)
  (if (equal? n 0)
      1
      (* n (factorial (- n 1)))))

(define (sum lst)
  (if (null? lst)
      0
      (+ (car lst) (sum (cdr lst)))))

(define (product lst)
  (if (null? lst)
      1
      (* (car lst) (product (cdr lst)))))

(define (even? n)
  (if (equal? n 0)
      #t
      (odd? (- n 1))))

(define (odd? n)
  (if (equal? n 0)
      #f
      (even? (- n 1))))

(define (sum-odd lst)
  (if (null? lst)
      0
      (if (odd? (car lst))
          (+ (car lst) (sum-odd (cdr lst)))
          (sum-odd (cdr lst)))))

(define (sum-even lst)
  (if (null? lst)
      0
      (if (even? (car lst))
          (+ (car lst) (sum-even (cdr lst)))
          (sum-even (cdr lst)))))

(define (substring string1 string2)
  (if (> (string-length string1) (string-length string2))
      #t
      #f))