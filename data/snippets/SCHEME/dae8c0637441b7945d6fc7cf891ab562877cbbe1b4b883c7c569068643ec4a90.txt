;; This is a complex function that takes in a list of numbers and returns a list of lists with the following structure:
;; (list1 (multiply-all) (divide-all) (add-all))

(define (list-manipulation nums)
  (define (helper mul-div-add nums)
    (if (null? nums)
        '()
        (let ((head (car nums)))
          (list
           (list head (multiply-all mul-div-add head))
           (list head (divide-all mul-div-add head))
           (list head (add-all mul-div-add head))
           )
          )
      )
    )
  (define (multiply-all nums x)
    (if (null? nums)
        '()
        (cons (* x (car nums)) (multiply-all (cdr nums) x))
      )
    )
  (define (divide-all nums x)
    (if (null? nums)
        '()
        (cons (/ x (car nums)) (divide-all (cdr nums) x))
      )
    )
  (define (add-all nums x)
    (if (null? nums)
        '()
        (cons (+ x (car nums)) (multiply-all (cdr nums) x))
      )
    )
  (helper '() nums)
  )