;; Define a function that takes in two numbers and returns
;; the sum of their squares

(define (sum-of-squares x y)
  (+ (* x x) (* y y)))


;; Define a function that takes in a list of numbers and
;; returns the product of all the numbers in the list

(define (product-of-list lst)
  (if (null? lst)
      1
      (* (car lst) (product-of-list (cdr lst)))))


;; Define a function that takes in a list of strings and
;; returns a new list with all the strings in uppercase

(define (convert-to-uppercase lst)
  (map string-upcase lst))


;; Define a function that takes in a number and a max number
;; and returns a list of all the multiples of the number 
;; that are less than or equal to the max number

(define (multiples-of x max)
  (let ((multiples '()))
    (do ((i x (+ i x)))
        ((> i max) multiples)
      (set! multiples (cons i multiples)))))