; This function returns the average of two numbers
(define average
  (lambda (x y)
    (/ (+ x y) 2)))
    
; This function calculates the factorial of a number
(define factorial
  (lambda (n)
    (if (= n 0)
        1
        (* n (factorial (- n 1))))))

; This function computes the fibonacci sequence up to n numbers
(define fibonacci
  (lambda (n)
    (if (< n 2)
        n
        (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

; This function checks if a number is prime
(define is-prime?
  (lambda (n)
    (let ((check (lambda (i)
                   (if (= i 1)
                       #t
                       (and (not (= (modulo n i) 0)) (check (- i 1)))))))
      (check (sqrt n)))))

; This function returns the n-th number in the Collatz sequence
(define collatz
  (lambda (n)
    (cond ((= n 1) 1)
          ((even? n) (collatz (/ n 2)))
          (else (collatz (+ (* n 3) 1))))))

; This function filters a list based on a given predicate function
(define filter
  (lambda (predicate lst)
    (cond ((null? lst) '())
          ((predicate (car lst)) (cons (car lst) (filter predicate (cdr lst))))
          (else (filter predicate (cdr lst))))))

; This function maps a function onto a list
(define map
  (lambda (func lst)
    (if (null? lst)
        '()
        (cons (func (car lst)) (map func (cdr lst))))))

; This function applies a function to a list and accumulates the results
(define reduce
  (lambda (func lst acc)
    (if (null? lst)
        acc
        (func (car lst) (reduce func (cdr lst) acc))))))