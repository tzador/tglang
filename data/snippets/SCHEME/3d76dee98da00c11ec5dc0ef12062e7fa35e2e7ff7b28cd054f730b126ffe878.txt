(define (count-occurrences lst x) ; defines a procedure with name 'count-occurrences' that takes in two parameter, a list and a variable 'x'
  (if (null? lst) ; checks if the list is empty
      0 ; if empty, returns 0
      (+ (if (eq? (car lst) x) ; if the first element in the list is equal to x
             1 ; adds 1 to the counter
             0) ; otherwise, adds 0 to the counter
         (count-occurrences (cdr lst) x)))) ; calls the procedure recursively on the remaining elements in the list and adds the result to the counter

(count-occurrences '(1 2 3 1 4 5 1) 1) ; calls the 'count-occurrences' procedure on the list '(1 2 3 1 4 5 1)' with the variable '1' as the search value
; => 3 ; outputs the result, which is the number of occurrences of '1' in the list