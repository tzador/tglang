(define (list-sum lst) ;; Define a function to calculate the sum of a list
  (if (null? lst) ;; If the list is empty, return 0
      0
      (+ (car lst) (list-sum (cdr lst))))) ;; Add the first element to the sum of the rest of the list
	  
(define (sum-of-squares n) ;; Define a function to calculate the sum of squares from 1 to n
  (if (= n 1) ;; If n is equal to 1, return 1
      1
      (+ (* n n) (sum-of-squares (- n 1))))) ;; Square n and add it to the sum of squares from 1 to n-1

(define (is-perfect n) ;; Define a function to check if the given number is a perfect number
  (= n (sum-of-squares n))) ;; Check if the given number is equal to the sum of squares from 1 to n

(define (perfect-numbers start end) ;; Define a function to find all perfect numbers in a given range
  (if (> start end) ;; If start is greater than end, return an empty list
      '()
      (if (is-perfect start) ;; If start is a perfect number, recursively add it to the list
          (cons start (perfect-numbers (+ start 1) end))
          (perfect-numbers (+ start 1) end)))) ;; Otherwise, continue to the next number in the range

(perfect-numbers 1 100) ;; Find all perfect numbers in the range from 1 to 100