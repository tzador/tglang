(define (recur-power x n)
  (if (= n 0)
      1
      (* x (recur-power (- n 1))))
  )

(define (power x n)  ; This function calculates the power of x by n, using recursion
  (if (<= n 0)
      (error "n should be a positive integer.")
      (if (= n 1)
          x
          (* (recur-power x (/ n 2))
             (recur-power x (/ n 2))))))

; This function checks if a given list contains a given element
(define (contains lst elem)
  (cond ((null? lst) #f)
        ((eq? (car lst) elem) #t)
        (else (contains (cdr lst) elem))))