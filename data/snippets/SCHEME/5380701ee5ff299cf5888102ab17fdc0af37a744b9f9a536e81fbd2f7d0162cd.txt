(define (merge-sort lst)                ;Defines a function merge-sort that takes a list as an argument
    (cond ((null? (cdr lst))            ;Checks if the list is empty or has only one element
           lst)
          (else                         ;Otherwise
           (let ((splits (split lst)))  ;Binds the result of split to the variable splits
             (merge                      ;Calls the merge function
              (merge-sort (car splits))  ;Recursively sorts the first half of the list
              (merge-sort (cdr splits))  ;Recursively sorts the second half of the list
              (lambda (x y)              ;Defines a comparison function for the merge
                (<= x y)))))))           ;Returns true if x is less than or equal to y
                                        ;This function is called on each pair of elements from the two sorted lists