;; Define function to compute the nth Fibonacci number
(define (fib n) 
	(cond ((= n 0) 0) ;; Base case for n = 0
		 	((= n 1) 1) ;; Base case for n = 1
		 	(else (+ (fib (- n 1)) ;; Recursively compute (n-1)th Fibonacci number
		 			 (fib (- n 2)))))) ;; Recursively compute (n-2)th Fibonacci number

;; Define function to return list of Fibonacci numbers from 0 to n
(define (fib-list n)
	(if (= n 0) ;; Base case for n = 0
		'() ;; Return empty list
		(cons (fib n) (fib-list (- n 1))))) ;; Add current Fibonacci number to list and recursively call function with (n-1)

;; Define function to sum all the numbers in a list
(define (sum lst)
	(if (null? lst) ;; Base case for empty list
		0 ;; Return 0
		(+ (car lst) (sum (cdr lst))))) ;; Recursively add current number to sum with rest of list as input

;; Define function to find the sum of all even Fibonacci numbers from 0 to n
(define (even-fib-sum n)
	(let ((lst (fib-list n))) ;; Generate list of Fibonacci numbers from 0 to n
		(letrec ((sum-even-fib (lambda (lst) ;; Define recursive helper function to sum all even Fibonacci numbers
								(if (null? lst) ;; Base case for empty list
									0 ;; Return 0
									(if (even? (car lst)) ;; Check if current number is even
										(+ (car lst) (sum-even-fib (cdr lst))) ;; If even, add to sum and recursively call with rest of list
										(sum-even-fib (cdr lst))))))) ;; If not even, recursively call with rest of list
		(sum-even-fib lst))) ;; Call helper function with generated list as input

(even-fib-sum 10) ;; Output: 44 (0 + 2 + 8 + 34 = 44)