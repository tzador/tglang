;; Define a function to calculate the Fibonacci sequence 
(define (fib n)
  (cond  
    ((= n 0) 0) ;; base case, if n is 0 then return 0
    ((= n 1) 1) ;; base case, if n is 1 then return 1
    (else (+ (fib (- n 1)) (fib (- n 2)))))) ;; recursive case, add previous two numbers in sequence

;; Define a function to calculate the factorial of a number
(define (factorial n)
  (if (= n 0) ;; base case, if n is 0 then return 1
      1 
      (* n (factorial (- n 1))))) ;; recursive case, multiply n with factorial of n-1

;; Define a function to reverse a list
(define (reverse-list lst)
  (if (null? lst) ;; base case, if list is empty then return empty list
      '()
      (append (reverse-list (cdr lst)) ;; recursively call reverse-list on rest of the list
              (list (car lst)))  ;; append current element to the end of the reversed list
;; Define a function to check if a number is prime
(define (is-prime n)
  (define (divides? x y) ;; helper function to check if x divides y
    (= (remainder y x) 0))

  (define (prime-helper x) ;; helper function to recursively check if x is prime
    (cond ((<= x 1) false) ;; if x is less than or equal to 1, it is not a prime number
          ((= x 2) true) ;; if x is 2, it is a prime number
          ((even? x) false) ;; if x is even, it is not a prime number (except 2)
          (else (not (any-divides? (lambda (y) (divides? y x)) ;; check if any number from 2 to x-1 divides x
                                   (range 2 (- x 1)) ;; create a range from 2 to x-1
                                  )))))

  (prime-helper n)) ;; call prime-helper with the input number