;;Function to calculate the nth term in the Fibonacci sequence
(define (fibonacci n)
      (cond ((= n 0) 0) ;;If n is 0, return 0
            ((= n 1) 1) ;;If n is 1, return 1
            (else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) ;;Recursive formula for nth term
      )
  
  ;;Function to calculate the factorial of n
(define (factorial n)
      (if (<= n 1) ;;Base case: if n is less than or equal to 1, factorial is 1
          1
          (* n (factorial (- n 1)))) ;;Recursive formula for factorial
  
  ;;Function to reverse a list
(define (reverse lst)
        (if (null? lst) ;;Base case: if list is empty, return empty list
            '()
            (append (reverse (cdr lst)) (list (car lst))))) ;;Recursive formula to append first element to end of reversed sublist
  
  ;;Function to flatten a list
(define (flatten lst)
        (if (null? lst) ;;Base case: if list is empty, return empty list
            '()
            (if (list? (car lst)) ;;If first element is a list, flatten and append it to remaining list
                (append (flatten (car lst)) (flatten (cdr lst)))
                (cons (car lst) (flatten (cdr lst)))) ;;If first element is not a list, just append it to flattened remaining list
        )
;;;Output:
"Fibonacci sequence: " (fibonacci 10)
"Factorial of 5: " (factorial 5)
"Reversed list: " (reverse '(1 2 3 4 5))
"Flattened list: " (flatten '((1 2) (3 4) 5 (6 (7 (8))))); => (1 2 3 4 5 6 7 8)