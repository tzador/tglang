(define (check-nested-list lst)
  ; This function takes in a nested list and checks if the elements are ordered in ascending or descending order
  (if (or (null? lst) (null? (cdr lst)))
      #t ; If list is empty or only has one element, then return true
      (let ((curr (car lst)) ; Get current element
            (next (cadr lst))) ; Get next element
        (cond ((list? curr) ; If current element is a list, then recursively check the nested list
               (and (check-nested-list curr) (check-nested-list (cdr lst))))
              ((number? curr) ; If current element is a number, then compare with next element
               (case (signum (- curr next)) ; Compare using signum function, returns -1 if negative, 1 if positive, and 0 if equal
                 ((-1) (and (<= curr next) (check-nested-list (cdr lst)))) ; If negative, elements should be in descending order, recursively check rest of list
                 ((1) (and (>= curr next) (check-nested-list (cdr lst)))) ; If positive, elements should be in ascending order, recursively check rest of list
                 (else #f))) ; If not negative or positive, then elements are not in order, return false
              (else #f))))) ; If element is not a list or number, then it is not ordered, return false

; Example input: (check-nested-list '(1 2 3 (4 5) ((6) 7))) 
; Example output: #t