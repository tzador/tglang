(define (fib n)
  (if (< n 2)
      n
      (+ (fib (- n 1))
         (fib (- n 2)))))

(define (facts n)
  (if (= n 0)
      1
      (* n (facts (- n 1)))))

(define (sum-squares lst)
  (if (null? lst)
      0
      (+ (square (car lst))
         (sum-squares (cdr lst)))))

(define (square x)
  (* x x))

(define (sum lst)
  (if (null? lst)
      0
      (+ (car lst)
         (sum (cdr lst)))))

(define (reverse lst)
  (define (iter lst result)
    (if (null? lst)
        result
        (iter (cdr lst) (cons (car lst) result))))
  (iter lst ()))

(define (map fn lst)
  (if (null? lst)
      ()
      (cons (fn (car lst))
            (map fn (cdr lst)))))

(define (filter predicate lst)
  (cond ((null? lst) ())
        ((predicate (car lst))
         (cons (car lst)
               (filter predicate (cdr lst))))
        (else (filter predicate (cdr lst)))))

(define-syntax let
  (syntax-rules ()
    ((let ((var expression) ...) body1 body2 ...)
     ((lambda (var ...) body1 body2 ...) expression ...))))