(define (mergeSort lst) ; Defines a function to perform merge sort on a list
  (if (<= (length lst) 1) ; Checks if list is empty or contains only one element
      lst
      (let* ( ; Creates a new scope for local variables
             (mid (quotient (length lst) 2)) ; Finds the middle index of the list
             (left (take lst mid)) ; Splits the list into two halves
             (right (drop lst mid)))
        (merge ; Calls the merge helper function to merge the two sorted lists
         (mergeSort left) ; Recursively performs merge sort on the left half
         (mergeSort right))))) ; Recursively performs merge sort on the right half

(define (merge lst1 lst2)
  (if (null? lst1) ; Checks if first list is empty
      lst2 ; If yes, return the second list
      (if (null? lst2) ; Checks if second list is empty
          lst1 ; If yes, return the first list
          (if (< (car lst1) (car lst2)) ; Compares the first element of both lists
              (cons (car lst1) (merge (cdr lst1) lst2)) ; Creates a new list by adding the smaller element and calling merge recursively with the rest of the first list and full second list
              (cons (car lst2) (merge lst1 (cdr lst2))))))) ; Creates a new list by adding the smaller element and calling merge recursively with the full first list and rest of the second list

; Example usage
(mergeSort '(5 3 8 1 9 2 7 4)) ; Calls mergeSort function on an unsorted list and returns the sorted list (1 2 3 4 5 7 8 9)