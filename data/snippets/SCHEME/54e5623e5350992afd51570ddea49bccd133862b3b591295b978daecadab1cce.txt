;; define a recursive function to find the maximum element in a list
(define (find-max lst)
  (if (null? (cdr lst))
      (car lst)
      (if (> (car lst) (find-max (cdr lst))) ; check if current element is greater than max of rest of list
          (car lst)                          ; if true, set it as new max
          (find-max (cdr lst)))))            ; else, continue to next element in list
          
;; example usage
(find-max '(5 2 9 3 7 1)) ; returns 9
(find-max '(10 20 30 40 50)) ; returns 50

;; define a function to check if a number is prime
(define (is-prime? n)
  (define (helper d)
    (if (= d n) ; base case: if d equals n, then n is prime
        #t
        (if (= (remainder n d) 0) ; check if n is divisible by d (not prime)
            #f
            (helper (+ d 1))))) ; recurse with d incremented by 1
  (helper 2)) ; start helper function at d = 2, since 1 is not a prime number
  
;; example usage
(is-prime? 23) ; returns #t
(is-prime? 15) ; returns #f