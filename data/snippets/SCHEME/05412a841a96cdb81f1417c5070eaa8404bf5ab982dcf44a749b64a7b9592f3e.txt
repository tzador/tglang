(define (ln x)
  (if (<= x 0)  ; checks if input is less than or equal to 0
      (error "input must be greater than 0")
      (let ((guess 1.0)  ; initial guess for ln
            (error 0.0001)  ; margin of error
            (prev-guess 0)  ; stores previous guess for comparison
            (term 1)  ; stores current term in series
            (i 1))  ; counter variable
        (while (> (abs (- guess prev-guess)) error)  ; loop until margin of error is reached
          (set! prev-guess guess)  ; stores previous guess
          (set! term (/ (expt (- x 1) i) i))  ; calculates current term in series
          (set! guess (+ guess term))  ; adds current term to previous guess
          (set! i (+ i 1)))  ; increases counter
        guess)))  ; returns final guess for ln