;; define a 'box' function that takes in a 'value' and returns a lambda function
(define (box value)
  ;; lambda function has a 'msg'
  (lambda (msg)
    ;; when 'msg' is 'access', return the 'value'
    (if (eq? msg 'access)
        value
        ;; else if 'msg' is 'modify', take in a new 'val' and update the 'value'
        (lambda (val)
          (begin
            (msg (set! value val))
            value)))))

;; use the 'box' function to create a new 'box' with initial value of 10
(define new-box (box 10))

;; access the value of the 'box' using the 'access' message
(new-box 'access)
;; output: 10

;; modify the value of the 'box' using the 'modify' message
(new-box 'modify 5)
(new-box 'access)
;; output: 5