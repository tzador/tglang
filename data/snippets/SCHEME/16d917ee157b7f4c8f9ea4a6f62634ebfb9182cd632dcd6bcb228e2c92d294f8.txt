(define complex-list '((1 (2 3)) 4 5 6)) ; Define a complex nested list
(define (flatten list) ; Define a function to flatten the list
  (cond ((null? list) '()) ; If list is empty, return empty list
        ((pair? (car list)) (append (flatten (car list)) (flatten (cdr list)))) ; If first element is a pair, flatten it and flatten the rest
        (else (cons (car list) (flatten (cdr list)))))) ; If first element is not a pair, add to flattened list and flatten the rest
(flatten complex-list) ; Call the flatten function on the defined complex list