;; Define a function to calculate the factorial of a given number
(define (factorial num)
  (if (= num 0) ; if the number is equal to 0, return 1
      1 ; base case
      (* num (factorial (- num 1))) ; recursive case
  )
)

;; Define a function to calculate the Fibonacci sequence up to a given number
(define (fibonacci num)
  (if (< num 2) ; if the number is less than 2, return the number itself
      num ; base case
      (+ (fibonacci (- num 1)) (fibonacci (- num 2))) ; recursive case
  )
)

;; Define a function to check if a given number is prime
(define (is-prime num)
  (if (= num 2) ; special case for 2 since it is the only even prime number
      #t ; base case
      (and (= 0 (modulo num 2)) ; check if the number is even
           #f) ; if it is, return false
      (let loop ((i 3)) ; start looping from 3
           (if (< num (* i i)) ; if i becomes greater than the number, it is prime
               #t ; return true
               (if (zero? (modulo num i)) ; if the number is divisible by i
                   #f ; return false
                   (loop (+ i 2)) ; else, continue looping with the next odd number
               )
           )
      )
  )
)