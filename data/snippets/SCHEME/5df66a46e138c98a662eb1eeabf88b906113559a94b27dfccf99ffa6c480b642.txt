;; This code snippet generates the first 100 prime numbers
(define (is-prime? num)
  (define (factors? i)
    (if (> i (sqrt num))
        #t
        (if (zero? (modulo num i))
            #f
            (factors? (+ i 1)))))
  (if (< num 2)
      #f
      (factors? 2)))

(define (get-first-n-primes n)
  (define (next-prime current-prime)
    (cond ((is-prime? (+ 1 current-prime)) (+ 1 current-prime))
          (else (next-prime (+ 1 current-prime)))))
  (define (helper n current-prime primes)
    (if (= (length primes) n)
        primes
        (helper n (next-prime current-prime)
                (append-prime current-prime primes))))
  (helper n 2 '()))

(define (append-prime prime primes)
  (if (is-prime? (+ 1 prime))
      (cons prime primes)
      (append-prime (+ 1 prime) primes)))

(get-first-n-primes 100)