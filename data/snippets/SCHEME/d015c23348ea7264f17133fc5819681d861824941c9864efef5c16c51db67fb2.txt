;; This function takes in a list of numbers and returns the sum of their squares
(define (sum-of-squares lst)
  ;; define a helper function to calculate the square of a number
  (define (square x)
    (* x x))
  
  ;; define a base case to end recursion when the list is empty
  (cond ((null? lst) 0)
        ;; call the helper function to calculate the square of the first number in the list
        ;; add it to the recursive call of this function on the rest of the list
        (else (+ (square (car lst)) (sum-of-squares (cdr lst))))))

;; example input
(sum-of-squares '(1 2 3 4 5))

;; output: 
55