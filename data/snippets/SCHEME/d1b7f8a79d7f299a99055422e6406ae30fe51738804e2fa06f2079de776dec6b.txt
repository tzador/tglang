(define (merge-sort lst)

  ;[This function implements the merge sort algorithm on a list.]

  (if (or (null? lst) (null? (cdr lst)))
      lst
      (let ((mid (quotient (length lst) 2)))
        (let ((left (merge-sort (take lst mid)))
              (right (merge-sort (drop lst mid))))
          (merge left right)))))

  ;[This function helper merges two sorted lists.] 

  ;(left right)
  (define (merge left right)

    ;[Initialize variables for list traversal.]

    (let ((result '())
          (l left)
          (r right))

      ;[Compare the first element of each list and append the lower element to the result list.]

      (if (or (null? l) (null? r))
          (append result l r)
          (if (< (car l) (car r))
              (begin (set! result (append result (list (car l))))
                     (set! l (cdr l)))
              (begin (set! result (append result (list (car r))))
                     (set! r (cdr r)))))

      ;[Continue comparing and appending until one list is exhausted.]

      (merge result l r)))