(define (map f lst)
  (if (null? lst) ; checks if the list is empty
      '() ; if empty, return empty list
      (cons (f (car lst)) ; apply the function f to the first element of the list
            (map f (cdr lst))))) ; recursively map the rest of the list

(define (square x) ; define function square that squares a given number
  (* x x))

(display (map square '(1 2 3 4 5))) ; display the result of mapping the function square to the list (1 2 3 4 5)

; Output: (1 4 9 16 25)