(define (insertion-sort lst)
  "Insertion sort algorithm"
  (let loop ((list lst)
             (acc null))
    (if (null? list)
        acc
        (loop (cdr list)
              (insert (car list) acc)))))

(define (insert x lst)
  "Inserts element x into list lst in ascending order"
  (cond ((null? lst) (list x))
        ((< x (car lst)) (cons x lst))
        (else (cons (car lst)
                    (insert x (cdr lst))))))

(innsertion-sort '(7 4 2 9 1)) ; Output: (1 2 4 7 9)