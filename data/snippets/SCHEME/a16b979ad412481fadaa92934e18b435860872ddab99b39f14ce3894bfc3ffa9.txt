(define (merge-sort lst)
  (letrec ((merge
             (lambda (l r)
               (cond ( (null? l) r )
                     ( (null? r) l )
                     ( (<= (car l ) (car r)) (cons (car l) (merge (cdr l) r)) )
                     ( (cons (car l) (merge (cdr l) r)))))))
    (if (or (null? lst) (null? (cdr lst)))
        lst
        (let* ((mid (/ (length lst) 2))
               (left (take lst mid))
               (right (drop lst mid)))
          (merge (merge-sort left) (merge-sort right))))))