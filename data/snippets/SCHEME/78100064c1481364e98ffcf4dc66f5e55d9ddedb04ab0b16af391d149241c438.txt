;;;; An example of a complex code snippet in SCHEME

(define (first-second-sum list)
  ;;; This function takes in a list of pairs and outputs the sum of the first and second elements in each pair
  ;;; Params:
  ;;; list: a list of pairs
  ;;; Returns:
  ;;; The sum of the first and second elements in each pair
  (let ((sum 0)) ;;; Initialize a variable to store the sum
    (cond ((null? list) sum) ;;; Check if the list is empty, if yes, return the sum
          ((not (pair? (car list))) ;;; Check if the first element is a pair, if not, raise an error
           (error "The list should contain pairs only"))
          (else (let ((first (car (car list))) ;;; Get the first element from the first pair
                      (second (cdr (car list)))) ;;; Get the second element from the first pair
                  (set! sum (+ sum first second))) ;;; Update the sum by adding the first and second elements
                (first-second-sum (cdr list))))) ;;; Recursively call the function for the rest of the list