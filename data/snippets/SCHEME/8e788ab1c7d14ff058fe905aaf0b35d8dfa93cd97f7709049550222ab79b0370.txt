;; This code snippet uses recursion to generate a list of the first n fibonacci numbers

(define (fibonacci n) ; define a function that takes in n as a parameter
  (if (< n 1) ; if n is less than 1, return an empty list
      '()
      (if (= n 1) ; if n is equal to 1, return a list containing just 0
          '(0)
          (if (= n 2) ; if n is equal to 2, return a list containing 0 and 1
              '(0 1)
              (letrec ; use letrec to create a recursive function
                  ((fib-list (fibonacci (- n 1)))) ; fib-list is equal to the fibonacci list of n-1
                (append fib-list ; append fib-list to
                        (list (- (car fib-list) (cadr fib-list)))))))) ; the difference between the first two elements of fib-list

(fibonacci 10) ; call the fibonacci function with an argument of 10