(define (factorial n)
  (if (zero? n) ; Checks if n is equal to 0
      1          ; Returns 1 if n is 0
      (* n (factorial (- n 1))))) ; Multiplies n with factorial of n-1

(define (sum-list lst)
  (cond ((null? lst) ; Checks if lst is empty
         0)          ; Returns 0 if lst is empty
        ((pair? lst) ; Checks if lst contains pairs, meaning it is a list
         (+ (car lst) (sum-list (cdr lst)))) ; Adds the first element to the sum of the rest
        (else (error "Invalid input")))) ; Throws an error if lst is not a list

(display (factorial 5)) ; Displays the factorial of 5, which is 120
(display (sum-list '(1 2 3 4 5))) ; Displays the sum of the list (1 2 3 4 5), which is 15