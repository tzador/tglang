(define (max-subsequence-sum lst)
  (letrec ((max-sum 0) ; maximum sum initialized to 0
	   (temp-sum 0) ; temporary sum initialized to 0
	   (lst-len (length lst)) ; length of the list
	   (lst-index 0)) ; index of the current element in the list
    (define (update-max elem)
      (set! temp-sum (+ temp-sum elem)) ; updating temporary sum with current element
      (if (> temp-sum max-sum) ; checking if temporary sum is greater than max sum
	  (begin 
	    (set! max-sum temp-sum) ; updating max sum with temporary sum
	    (if (>= lst-index lst-len) ; checking if we have reached the end of list
		max-sum ; if so, return current max sum
		(update-max (list-ref lst lst-index)) ; else, update max sum with next element
	    )
	  )
	  max-sum ; if temp sum is less than or equal to max sum, return current max sum
      )
    )
    (update-max (list-ref lst lst-index)) ; calling update-max with first element of list
  )
)