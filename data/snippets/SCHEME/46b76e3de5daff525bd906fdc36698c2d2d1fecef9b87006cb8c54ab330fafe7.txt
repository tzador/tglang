;; Define a procedure (function) to check if a given number is a prime number

(define (is-prime num)
  (cond ((= num 2) #t)               ; a prime number is always greater than 1
        ((< num 2) #f)               ; 0 and 1 are not prime numbers
        ((not (integer? num)) #f)    ; check if input is a positive integer
        ((not (= (remainder num 2) 0)) #t) ; every prime number is odd
        (else (let prime? ((i 3)) ; create a helper procedure with a counter
                (cond ((> i (sqrt num)) #t)  ; if counter is greater than square root of given number, it is prime
                      ((= (remainder num i) 0) #f)   ; if remainder is zero, number is not prime
                      (else (prime? (+ i 2))))))))   ; otherwise, increment counter by 2 and repeat procedure