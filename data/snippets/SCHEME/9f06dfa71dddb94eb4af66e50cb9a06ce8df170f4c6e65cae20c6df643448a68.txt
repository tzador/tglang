;; Define a procedure that takes in a list of numbers and returns
;; a list of their squared values

(define (square-list numbers)
  (cond
    ; if the list is empty, return an empty list
    [(null? numbers) '()]
    ; if the list contains only one number, square it and return the result as a list
    [(= (length numbers) 1) (list (* (car numbers) (car numbers)))]
    ; if the list contains more than one number, use recursion to square each number
    ; and add it to the result list
    [else (cons (* (car numbers) (car numbers))
                (square-list (cdr numbers)))]))

;; Test cases
(square-list '(1 2 3 4)) ; Expected output: (1 4 9 16)
(square-list '(5)) ; Expected output: (25)
(square-list '()) ; Expected output: ()