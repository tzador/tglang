(define (sum-len lst) ; define a function named sum-len that takes a list as input
  (letrec ((sum 0) ; create a local variable sum and initialize it to 0
           (len (lambda (lst) ; create another local variable len with anonymous function as its value
                  (if (null? lst) ; check if the list is empty
                      0 ; if so, return 0
                      (+ 1 (len (cdr lst))))))) ; else, add 1 to the result of calling len recursively on the rest of the list
    (let loop ((lst lst)) ; start a loop with input parameter lst
      (if (null? lst) ; check if the list is empty
          sum ; if so, return the value of sum
          (begin ; else, begin a series of expressions
            (set! sum (+ sum (len (car lst)))) ; update the value of sum by adding the length of the first element in the list
            (loop (cdr lst)))))) ; call loop recursively on the rest of the list until it is empty