;; Define a function to calculate the nth Fibonacci number

(define (fib n) 	; define a function called fib with a parameter n
  (if (< n 2) 		; if n is less than 2
      n 			; return n
      (+ (fib (- n 1)) (fib (- n 2))))) ; else, return the sum of the previous two Fibonacci numbers

;; Define a helper function to memoize Fibonacci calculations
(define (fib-helper a b count) 	  ; define a function called fib-helper with parameters a, b and count
  (if (= count 0) 					  ; if count is equal to 0
      a 							  ; return a
      (fib-helper b (+ a b) (- count 1)))) ; else, recursively call fib-helper with updated parameters

;; Define a memoized version of the Fibonacci function
(define (fib-memoize n) 			; define a function called fib-memoize with parameter n
  (letrec ((helper (memoize fib-helper))) 		; define a recursive helper function that memoizes fib-helper
    (lambda (n)							; return a lambda function that takes n as a parameter
      (helper 0 1 (- n 1)))))				; call memoized fib-helper with parameters a=0, b=1 and count=n-1