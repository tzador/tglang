(define (merge x y)
  (cond ((null? x) y)               ; base case if x is empty, return y
        ((null? y) x)               ; base case if y is empty, return x
        ((< (car x) (car y))        ; check if first element of x is smaller than first element of y
         (cons (car x)               ; if true, add first element of x to list and move to next element of x 
               (merge (cdr x) y)))   ; recursively merge rest of x with y
        (else                      ; if first element of y is smaller or equal, 
         (cons (car y)               ; add first element of y to list and move to next element of y
               (merge x (cdr y)))))) ; recursively merge x with rest of y