(define (merge-sort lst)
    (cond
        ((null? lst) lst)
        ((null? (cdr lst)) lst)
        (else 
            (let* ((midpoint (quotient (length lst) 2))
                    (left (take lst midpoint))
                    (right (drop lst midpoint)))
                (merge (merge-sort left) (merge-sort right))))))

(define (merge lst1 lst2)
    (cond
        ((null? lst1) lst2)
        ((null? lst2) lst1)
        ((<= (car lst1) (car lst2)) (cons (car lst1) (merge (cdr lst1) lst2)))
        (else (cons (car lst2) (merge lst1 (cdr lst2))))))