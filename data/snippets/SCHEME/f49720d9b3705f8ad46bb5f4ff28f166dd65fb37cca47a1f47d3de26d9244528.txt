;; define a recursive function to calculate the fibonacci sequence up to n

(define (fib n)
    (if (<= n 1) ; base case, return n
        n
        (+ (fib (- n 1)) ; recursive call to calculate the previous two numbers
           (fib (- n 2)))))

;; define a helper function to store results for better efficiency
(define (fib-helper n cache)
    (if (<= n 1) ; base case, return n
        n
        (if (equal? (hash-ref cache n) #f) ; check if value for n already exists in cache
            (let ((val1 (fib-helper (- n 1) cache))
                  (val2 (fib-helper (- n 2) cache)))
              (hash-set! cache n (+ val1 val2)) ; store the result in cache
              (+ val1 val2)) ; return the result
            (hash-ref cache n)))) ; return the value for n from cache if already cached

;; define a function to validate input and handle edge cases
(define (fibonacci n)
  (if (and (integer? n) (> n 0)) ; check if input is a positive integer
      (fib-helper n (make-hash))) ; call the helper function with an empty cache
      (error "Input must be a positive integer")))