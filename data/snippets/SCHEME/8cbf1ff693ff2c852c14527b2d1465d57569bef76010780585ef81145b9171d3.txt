(define (fibonacci n) ;; function definition for fibonacci sequence
   (if (< n 2) ;; if n is less than 2
      n ;; return n
      (+ (fibonacci (- n 1)) ;; add the recursive call of fibonacci function with n-1
         (fibonacci (- n 2))))) ;; add the recursive call of fibonacci function with n-2

(define (factorial n) ;; function definition for factorial
   (if (= n 0) ;; if n is equal to 0
      1 ;; return 1 since 0! = 1
      (* n (factorial (- n 1))))) ;; multiply n with the recursive call of factorial function with n-1

(define (square x) ;; function definition for calculating square of a number
   (* x x)) ;; multiply number with itself to get the square

(define (is-prime n) ;; function definition for checking if a number is prime
   (if (< n 2) ;; if n is less than 2
      #f ;; return false since 2 is the smallest prime number
      (let loop ((i 2)) ;; create a loop with parameter i starting at 2
         (if (> i (sqrt n)) ;; if i is greater than the square root of n
            #t ;; return true since all possible factors have been checked
            (if (= (modulo n i) 0) ;; if n is divisible by i
               #f ;; return false since n is not a prime number
               (loop (+ i 1))))))) ;; call the loop again with i incremented by 1 to check the next factor

(define (map function list) ;; function definition for mapping a function to a list
   (if (null? list) ;; if list is empty
      '() ;; return empty list
      (cons (function (car list)) ;; apply the function to the first element of list and cons it with
         (map function (cdr list))))) ;; the recursive call of the map function on the rest of list

(define (reduce function initial-value list) ;; function definition for reducing a list using a function
   (if (null? list) ;; if list is empty
      initial-value ;; return initial-value
      (function (car list) (reduce function initial-value (cdr list))))) ;; apply the function to the initial-value and the result of the recursive call of the reduce function on the rest of list

(define (filter function list) ;; function definition for filtering a list
   (if (null? list) ;; if list is empty
      '() ;; return empty list
      (if (function (car list)) ;; if the function returns true for the first element of list
         (cons (car list) (filter function (cdr list))) ;; cons the first element with the recursive call of filter function on the rest of list
         (filter function (cdr list))))) ;; otherwise, call the recursive call of filter function on the rest of list to skip the first element

(define (compose function1 function2) ;; function definition for composing two functions
   (lambda (x) (function1 (function2 x)))) ;; return a lambda function that applies function2 to x and then applies function1 to the result

(define (fibonacci-list n) ;; function definition for creating a list of fibonacci numbers
   (map fibonacci (iota n))) ;; apply the fibonacci function to a list of numbers from 0 to n-1 using the iota function

(define (prime-list n) ;; function definition for creating a list of prime numbers
   (filter is-prime (iota n))) ;; apply the is-prime function to a list of numbers from 0 to n-1 using the iota function

(define (factorial-list n) ;; function definition for creating a list of factorials
   (map factorial (iota n))) ;; apply the factorial function to a list of numbers from 0 to n-1 using the iota function