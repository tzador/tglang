;; This is a function that recursively finds the maximum element in a list
(define (max-list lst)
  ;; Define a helper function to keep track of current max element
  (define (max-helper lst current-max)
    ;; Base case: if list is empty, return current max
    (if (null? lst)
      current-max
      ;; Recursive case: if first element is larger than current max, update current max
      ;; and call max-helper with remaining list elements
      (if (> (car lst) current-max)
        (max-helper (cdr lst) (car lst))
        ;; Otherwise, call max-helper with remaining list elements and same current max
        (max-helper (cdr lst) current-max))))
  ;; Call helper function with initial current max set to first element in list
  (max-helper (cdr lst) (car lst)))

;; Example call to max-list function
(max-list '(9 3 5 7 2)) ; Output: 9