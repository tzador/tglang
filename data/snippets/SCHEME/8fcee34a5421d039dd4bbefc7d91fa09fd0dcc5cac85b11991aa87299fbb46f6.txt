`#lang racket` ;a Scheme dialect with additional features

`(define (fib n) ;define a function named fib with parameter n
  (cond ;begin conditional statement
    ((< n 2) n) ;if n is less than 2, return n
    (else (+ (fib (- n 1)) (fib (- n 2)))))) ;else, add result of fib(n-1) and fib(n-2) and return

`(define (factorial n) ;define a function named factorial with parameter n
  (cond ;begin conditional statement
    ((= n 0) 1) ;if n is equal to 0, return 1
    (else (* n (factorial (- n 1)))))) ;else, multiply n by factorial(n-1) and return

`(define (sum-list lst) ;define a function named sum-list with parameter lst
  (cond ;begin conditional statement
    ((null? lst) 0) ;if lst is an empty list, return 0
    (else (+ (car lst) (sum-list (cdr lst)))))) ;else, add first element of lst to result of sum-list with lst minus first element, and return

`(define (quadratic-roots a b c) ;define a function named quadratic-roots with parameters a, b, and c
  (define delta (- (* b b) (* 4 a c))) ;calculate delta using defined multiplication and subtraction
  (cond ;begin conditional statement
    ((< delta 0) "No real roots") ;if delta is less than 0, return "No real roots"
    ((= delta 0) ;if delta is equal to 0, return list with one root
      (list (/ (- b (sqrt delta)) (* 2 a)))) ;calculate and return root using defined division and square root
    (else ;if delta is greater than 0, return list with two roots
      (list (/ (+ (- b (sqrt delta)) (* -1 (sgn delta))) (* 2 a)) ;calculate first root using division, square root, and defined sign function
            (/ (- (- b (sqrt delta)) (* -1 (sgn delta))) (* 2 a)))))) ;calculate second root using division, square root, and defined sign function