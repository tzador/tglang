;; Define a procedure to calculate the factorial of a number
(define (factorial num)

  ;; Check if num is 0 or 1
  (if (or (= num 0) (= num 1))
      1
      ;; If num is not 0 or 1, recursively call factorial on num-1 and multiply by num
      (* num (factorial (- num 1)))

      ;; Display the result
      (display (factorial 5))    ;; Output: 120
    )

;; Define a procedure to calculate the nth term in the Fibonacci sequence
(define (fibonacci n)

  ;; Check if n is 0 or 1
  (if (or (= n 0) (= n 1))
      n
      ;; If n is not 0 or 1, recursively call fibonacci on n-1 and n-2 and add the results
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))

      ;; Display the result
      (display (fibonacci 7))    ;; Output: 13
    )

;; Define a procedure to reverse a list
(define (reverse lst)

  ;; Check if list is empty
  (if (null? lst)
      lst
      ;; If list is not empty, recursively call reverse on rest of list and append the first element
      (append (reverse (cdr lst)) (list (car lst)))

      ;; Display the result
      (display (reverse '(1 2 3 4)))    ;; Output: (4 3 2 1)
    )