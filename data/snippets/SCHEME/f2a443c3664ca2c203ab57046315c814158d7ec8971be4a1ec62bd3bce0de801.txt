(define (quicksort lst) ;; define a function
  (if (null? lst) ;; base case where the list is empty
      '() ;; return an empty list
      (let ((pivot (car lst))) ;; use the first element of list as the pivot
        (append ;; apply append to the following lists:
          (quicksort ;; call quicksort recursively on the list of elements smaller than pivot
            (filter (lambda (x) (< x pivot)) (cdr lst)))
          (list pivot) ;; wrap pivot in a list and add it to the sorted list
          (quicksort ;; call quicksort recursively on the list of elements larger than pivot
            (filter (lambda (x) (>= x pivot)) (cdr lst)))))))