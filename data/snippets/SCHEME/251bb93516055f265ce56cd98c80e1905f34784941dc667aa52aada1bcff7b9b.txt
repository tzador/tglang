#| This function takes in two lists as parameters and returns the product of the two lists |#

(define (list-product list1 list2)
  (if (and (null? list1) (null? list2)) ; Check if both lists are empty
      '()
      (cons (* (car list1) (car list2)) ; Multiply the first elements of the lists
            (list-product (cdr list1) (cdr list2))))) ; Recursive call with the rest of the lists

#| Example usage:
(list-product '(1 2 3) '(4 5 6)) ; Returns '(4 10 18)
(list-product '(1 2) '(3 4 5)) ; Returns '(3 8) |#