;;; function to calculate the factorial of a number

(define (factorial n)  ; defining the function 'factorial' with parameter 'n'
  (if (= n 0)          ; if 'n' is equal to 0
      1                 ; then return 1
      (* n (factorial (- n 1))))) ; else multiply 'n' by factorial of 'n-1' (recursive call)

;;; function to calculate the power of a number

(define (power x y)       ; defining the function 'power' with parameters 'x' and 'y'
  (if (= y 0)             ; if 'y' is equal to 0
      1                    ; then return 1
      (* x (power x (- y 1))))) ; else multiply 'x' by power of 'x' raised to 'y-1' (recursive call)

(define (binomial-coefficient n k)   ; defining the function 'binomial-coefficient' with parameters 'n' and 'k'
  (if (or (= k 0) (= n k))           ; if 'k' is equal to 0 or 'n' is equal to 'k'
      1                              ; then return 1
      (/ (* n (binomial-coefficient (- n 1) (- k 1)))  ; else divide 'n' by binomial coefficient of 'n-1' and 'k-1'
         (* k (binomial-coefficient (- n 1) k)))))     ; then multiply by binomial coefficient of 'n-1' and 'k'

;;; example usage of functions

(factorial 5)             ; returns 120
(power 2 10)              ; returns 1024
(binomial-coefficient 5 2) ; returns 10