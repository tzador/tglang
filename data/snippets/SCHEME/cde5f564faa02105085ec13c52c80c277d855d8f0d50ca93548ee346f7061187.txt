;; This code snippet generates a list of prime numbers up to a given integer value
(define (is-prime? num) ; function to check if a number is prime
  (cond ((= num 1) #f) ; 1 is not considered a prime number
        ((= num 2) #t) ; 2 is the only even prime number
        ((and (even? num) (= num 2)) #f) ; all other even numbers are not prime
        (else
         (let ((mid (ceiling (sqrt num)))) ; stores the rounded up square root of the number
           (not
            (for/or ((i (in-range 3 (+ mid 1) 2))) ; starts at 3 and increments by 2 to check only odd numbers
              (zero? (modulo num i)))))))) ; checks if there is no remainder when dividing the number by i

(define (generate-primes n) ; function to generate a list of prime numbers up to n
  (define (prime-list count num) ; helper function to generate the list
    (if (< count n)
        (let ((is-prime (is-prime? num))) ; checks if the current number is prime
          (cons (if is-prime num #f) (prime-list (if is-prime (+ count 1) count) (+ num 1))))
        '())) ; returns an empty list when count is equal to n
  (prime-list 0 2)) ; calls the helper function starting at 2 and increasing by 1 each time

(generate-primes 20) ; returns a list of prime numbers up to the value of 20: (2 3 5 7 11 13 17 19)