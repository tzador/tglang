;; Define a function that takes in a list of numbers and
;; returns a list containing the square of each number and
;; the sum of all the squares

(define (square-and-sum lst)                         ; define function with parameter lst
  (let ((squares (map (lambda (x) (* x x)) lst)))     ; use let to bind squares to mapped list of squares
    (list squares (apply + squares))))                ; return list squares and sum of squares using apply

(square-and-sum '(1 2 3 4))                          ; output: (list (1 4 9 16) 30)
(square-and-sum '(-2 5 -6))                           ; output: (list (4 25 36) 65)