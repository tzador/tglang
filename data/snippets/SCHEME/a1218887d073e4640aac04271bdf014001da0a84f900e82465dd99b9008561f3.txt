(define (list-combinations lst)
  ;; This function takes a list as input and returns a list of all possible combinations of elements in the input list
  (if (null? lst)
      '()
      (let ((first (car lst))
            (rest (cdr lst)))
        (if (null? rest)
            (list (list first))
            (append (map (lambda (c) (cons first c))
                         (list-combinations rest))
                    (list-combinations rest))))))