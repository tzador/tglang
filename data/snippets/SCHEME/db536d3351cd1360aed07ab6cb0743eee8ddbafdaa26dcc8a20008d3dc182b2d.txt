(define (bubble-sort lst) ; Define a procedure called bubble-sort that takes in a list as a parameter
    (if (null? lst) ; If the list is empty
        lst ; Return the list
        (let ((sorted (cdr (bubble-sort (cdr lst))))) ; Bind the sorted tail of the list to a variable called sorted
            (if (null? sorted) ; If the sorted list is empty
                (list (car lst)) ; Return a list with the first element of the original list
                (let loop ((unsorted (car lst)) (sorted sorted)) ; Define a recursive procedure called loop with two parameters - unsorted and sorted
                    (cond ((<= (car unsorted) (car sorted)) ; If the first element of the unsorted list is less than or equal to the first element of the sorted list
                            (cons (car unsorted) sorted)) ; Add the first element of the unsorted list to the beginning of the sorted list
                          ((null? (cdr sorted)) ; If the sorted list has only one element left
                            (append sorted (list (car unsorted)))) ; Add the first element of the unsorted list to the end of the sorted list
                          (else ; Otherwise
                            (loop (car (cdr unsorted)) (cdr sorted)))))))) ; Recursively call loop with the second element of the unsorted list and the rest of the sorted list