;This is a procedure that takes in a list of numbers and returns the sum of all the elements in the list
(define (sum-list lst)
  (if (null? lst) ;Check if the list is empty
      0 ;If list is empty, return 0 as sum
      (+ (car lst) (sum-list (cdr lst))))) ;Else, recursively call sum-list on the rest of the list and add it with the first element
 
;Example input and output
> (sum-list '(1 2 3 4 5))
15 ;Output

;Another example input and output
> (sum-list '(-1 4 7 -10 5))
5 ;Output