(define (sum-numbers list) ; defining a function that takes in a list as a parameter
  (cond ((null? list) 0) ; if the list is empty, return 0
        ((number? (car list)) ; if the first element in the list is a number
         (+ (car list) (sum-numbers (cdr list))) ; recursively call the sum-numbers function with the rest of the list, add the first element to the result
        (else
         (sum-numbers (cdr list)))) ; recursively call the sum-numbers function with the rest of the list
  )
)