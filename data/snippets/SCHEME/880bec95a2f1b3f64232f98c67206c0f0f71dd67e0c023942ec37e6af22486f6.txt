(define (factorial n)
  (if (= n 0) 1
      (* n (factorial (- n 1))))) ; This function calculates the factorial of a number.

(define (fibonacci n)
  (if (or (= n 0) (= n 1)) n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; This function calculates the nth term in the fibonacci sequence.

(define (find-max lst)
  (if (null? (cdr lst)) (car lst)
      (if (> (car lst) (car (cdr lst))) (find-max (cons (car lst) (cddr lst)))
          (find-max (cdr lst))))) ; This function finds the maximum value in a list.

(define (bank-balance init-bal interest-rate years)
  (if (= years 0) ; Base case
      init-bal
      (let ((interest-amount (* init-bal (/ interest-rate 100)))) ; Calculates the amount of interest earned
        (bank-balance (+ init-bal interest-amount) interest-rate (- years 1))))) ; Recursively calls the function

(define (tree-sum tree)
  (cond ((null? tree) 0) ; Base case
        ((number? tree) tree) ; If the current node is a number, add it
        (else (+ (tree-sum (car tree)) (tree-sum (cddr tree)))))) ; Recursively calls the function for left and right subtrees

(define (make-countdown-func n)
  (lambda () (begin (set! n (- n 1)) n))) ; This function returns a countdown function with given starting number.

(define (adder x)
  (lambda (y) (+ x y))) ; This function returns a function that adds two numbers together.