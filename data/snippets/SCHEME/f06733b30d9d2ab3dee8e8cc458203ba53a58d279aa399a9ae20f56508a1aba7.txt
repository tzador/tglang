(define (bubble-sort lst)            ; define a function to implement bubble sort
  (let ((sorted #f))                 ; set sorted flag to false
    (while (not sorted)              ; loop until list is sorted
      (set! sorted #t)               ; assume that list is sorted
      (let loop ((curr lst) (next (cdr lst))) ; loop through the list
        (when next                   ; if next element exists
          (when (> (car curr) (car next))      ; if curr element is larger than next
            (set! (car curr) (car next))       ; swap the elements
            (set! (car next) (car curr))
            (set! sorted #f)                   ; list is not sorted yet
          )
          (loop (cdr curr) (cdr next))         ; recursively loop with next elements
        )
      )
    )
  )
  lst                                 ; return the sorted list
)

(bubble-sort '(5 3 2 6 2 1 9))        ; call the function with unsorted list as argument