(define (sum lst)
  ;; Defines a function named 'sum' that takes in a list 
  (if (null? lst) 0 ;; If the list is empty, return 0
      (+ (car lst) (sum (cdr lst)))) ;; Otherwise, recursively call 'sum' on the rest of the list and add it to the first element
	  
(define (max lst)
  ;; Defines a function named 'max' that takes in a list 
  (if (null? (cdr lst)) ;; If the list only has one element, return that element
      (car lst)
	  ;; Otherwise, compare the first element to the maximum of the rest of the list
      (let ((rest-max (max (cdr lst))))
	    (if (> (car lst) rest-max) ;; If the first element is greater, return it
		    (car lst)
			rest-max)))) ;; Otherwise, return the maximum of the rest of the list
	  
(define (fib n)
  ;; Defines a function named 'fib' that takes in a number
  (cond ((= n 1) 0) ;; If n is 1, return 0
	    ((= n 2) 1) ;; If n is 2, return 1
		(else (+ (fib (- n 1)) (fib (- n 2)))))) ;; Otherwise, recursively call 'fib' on n-1 and n-2 and add them together