;; Define a recursive function to calculate the nth Fibonacci number.

(define (fib n)
  (if (or (= n 0) (= n 1)) ; if n is 0 or 1, return n
      n
      (+ (fib (- n 1)) (fib (- n 2))))) ; otherwise, recursively call the function on the previous two numbers and add the results together.

;; Test the function with n = 10
(fib 10) ; Output: 55

;; Define a helper function to calculate the nth Fibonacci number using tail recursion.

(define (fib-tail n)
  (define (fib-helper a b n)
    (if (= n 0) ; if n is 0, return a
        a
        (fib-helper b (+ a b) (- n 1)))) ; otherwise, recursively call the helper function with the next two numbers and decrement n.
  (fib-helper 0 1 n)) ; call the helper function with initial values for a and b.

;; Test the function with n = 10
(fib-tail 10) ; Output: 55