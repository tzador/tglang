;; Define parent function that takes in a list of numbers
(define (parent lst)

  ;; Helper function to check if number is odd
  (define (odd? num)
    (not (even? num)))

  ;; Helper function to check if number is even
  (define (even? num)
    (= (modulo num 2) 0))

  ;; Initialize variables
  (define odds '())
  (define evens '())
  (define result '())

  ;; Loop through the list and separate odd and even numbers
  (for-each
   (lambda (elem)
     (if (odd? elem)
         (set! odds (cons elem odds))
         (set! evens (cons elem evens))))
   lst)

  ;; Reverse the order of the even numbers list
  (set! evens (reverse evens))

  ;; Combine the two lists together
  (set! result (append odds evens))

  ;; Return the final result
  result)