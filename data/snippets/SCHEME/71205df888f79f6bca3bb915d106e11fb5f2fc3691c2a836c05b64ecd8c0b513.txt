(define (find-largest lst) ;define function to find largest number in a list
  (cond ((null? (cdr lst)) ;check if list is empty
         (car lst)) ;if list has only one element, return it
        ((> (car lst) (find-largest (cdr lst))) ;else compare first element to result of recursive call
         (car lst)) ;if first element is larger, return it
        (else ;if first element is not larger, recurse on rest of list
         (find-largest (cdr lst)))))
      ;print result of function call
(print (find-largest '(1, 2, 5, 3, 4))) ;expected output: 5