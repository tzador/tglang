(define (merge-sort lst)
  "Implementation of merge sort algorithm in Scheme."
  (let ((len (length lst)))
    (if (<= len 1)
        lst
        (let ((mid (quotient len 2)))
          (let ((left (merge-sort (take lst mid)))
                (right (merge-sort (drop lst mid))))
            (merge left right))))))

(define (merge xs ys)
  "Merges two sorted lists in ascending order."
  (cond ((null? xs) ys)
        ((null? ys) xs)
        ((< (car xs) (car ys)) (cons (car xs) (merge (cdr xs) ys)))
        (else (cons (car ys) (merge xs (cdr ys))))))

(define (take lst n)
  "Returns the first n elements of a list."
  (if (= n 0)
      nil
      (cons (car lst) (take (cdr lst) (- n 1)))))

(define (drop lst n)
  "Returns the remaining elements of a list after removing the first n elements."
  (if (= n 0)
      lst
      (drop (cdr lst) (- n 1))))