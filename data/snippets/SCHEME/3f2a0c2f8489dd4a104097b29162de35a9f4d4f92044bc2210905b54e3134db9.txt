(define (filter pred lst) ; function to filter list based on predetermined predicate
    (cond ((null? lst) ; if list is empty
            '()) ; return empty list
          ((pred (car lst)) ; if predicate is true for first element in list
              (cons (car lst) ; add first element to filtered list
                  (filter pred (cdr lst)))) ; recursive call to filter rest of list
          (else ; if predicate is not true for first element in list
              (filter pred (cdr lst))))) ; recursive call to filter rest of list, without adding first element

; example usage:
(filter odd? '(1 2 3 4 5)) ; filters list for odd numbers, output will be '(1 3 5)