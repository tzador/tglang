;; Calculates the fibonacci number for a given index using dynamic programming

;; Define a function that takes in the index and a list to store the calculated fibonacci numbers
(define (fibonacci-dp index calculated-list)
  (if (>= index (length calculated-list))
    (begin
      ;; Recursive call to calculate the fibonacci number at the current index
      (let ((new-fibonacci (+ (list-ref calculated-list (- index 1)) (list-ref calculated-list (- index 2)))))
        ;; Add the new calculated fibonacci number to the list
        (set! calculated-list (append calculated-list (list new-fibonacci)))
        ;; Call the function with the updated list
        (fibonacci-dp index calculated-list)))
    ;; Return the calculated fibonacci number at the given index
    (list-ref calculated-list index)))

;; Test the function with index 10
(fibonacci-dp 10 '(0 1))