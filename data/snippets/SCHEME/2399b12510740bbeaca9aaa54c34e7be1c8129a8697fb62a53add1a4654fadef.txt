(define (tree-sum tree) ; Define a procedure that takes in a tree as input
    (cond ; Use a conditional statement to check for different cases
        ((null? tree) 0) ; If the tree is empty, return 0
        ((not (pair? tree)) tree) ; If the tree is not a pair, return it as is
        (else (+ (tree-sum (car tree)) ; Otherwise, recursively call tree-sum on the car (first element)
                 (tree-sum (cdr tree)))))) ; then add it to the result of recursively calling tree-sum on the cdr (rest of the elements)

(tree-sum '(1 2 (3 (4 5) 6) 7)) ; Call the tree-sum procedure on a sample tree (1 2 (3 (4 5) 6) 7), and return the sum of all its elements