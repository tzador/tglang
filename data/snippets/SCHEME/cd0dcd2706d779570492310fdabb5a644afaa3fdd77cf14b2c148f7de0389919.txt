(define (make-pair a b) ;define procedure to create a pair
    (lambda (message) ;take in message
        (cond
            ((eq? message 'first) a) ;if message is 'first, return first element
            ((eq? message 'second) b) ;if message is 'second, return second element
            (else (error "Unknown request -- MAKE-PAIR" message))))) ;if invalid message, throw error

(define x (make-pair 1 2)) ;create pair with elements 1 and 2
(x 'first) ;access first element of pair
(x 'second) ;access second element of pair

(define (append-list lst1 lst2) ;define procedure to append two lists
    (cond
        ((null? lst1) lst2) ;if first list is empty, return second list
        ((null? lst2) lst1) ;if second list is empty, return first list
        (else (cons (car lst1) (append-list (cdr lst1) lst2))))) ;otherwise, add first element of list 1 to result of appending rest of list 1 to list 2

(define a (list 1 2 3)) ;create list with elements 1, 2, and 3
(define b (list 4 5 6)) ;create list with elements 4, 5, and 6
(append-list a b) ;call append-list procedure with lists a and b as arguments