;; This is a function that performs a binary search on a sorted list
(define (binary-search lst val)
  ;; Helper function that recursively performs binary search
  (define (binary-search-helper lst val low high)
    ;; If the low index is greater than the high index, the value is not in the list
    (if (> low high)
        (display "Value not found.")
        ;; Otherwise, find the middle index and check if the value is at that index
        (let ((mid-index (truncate (/ (+ low high) 2)))
              (mid-val (list-ref lst mid-index)))
          ;; If the value is at the middle index, return the index
          (if (equal? val mid-val)
              (display (append "Value " (number->string val) " found at index " (number->string mid-index) ".")))
          ;; If the value is less than the middle value, search in the first half of the list
          (if (< val mid-val)
              (binary-search-helper lst val low (- mid-index 1)))
          ;; If the value is greater than the middle value, search in the second half of the list
          (binary-search-helper lst val (+ mid-index 1) high)
        )
    )
  )
  ;; Call the helper function with the initial low and high indices
  (binary-search-helper lst val 0 (- (length lst) 1))
)

;; Example call with a sorted list and a value to search for
(binary-search '(1 2 3 4 5) 3)