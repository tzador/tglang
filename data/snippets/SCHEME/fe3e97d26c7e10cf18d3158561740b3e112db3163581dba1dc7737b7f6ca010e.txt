;; Define a function to check if a number is prime
(define (is-prime? n)
  (cond ((= 0 n) #f) ; 0 and 1 are not prime numbers
        ((= 1 n) #f)
        ((= 2 n) #t) ; 2 is the only even prime
        ((= 3 n) #t) ; 3 is the only odd prime
        ((= 1 (modulo n 2)) #f) ; checks if n is even
        (else (loop n 3)) ; otherwise, call loop function to check if n is divisible by odd numbers
  )
)

;; Loop function to check if n is divisible by any odd numbers
(define (loop n counter)
  (cond ((> counter (/ n 2)) #t) ; if counter > n/2, then n is prime
        ((= 1 (modulo n counter)) #f) ; if n is divisible by counter, then it is not prime
        (else (loop n (+ counter 2))) ; otherwise, increment counter by 2 to check next odd number
  )
)

;; Output the result of is-prime? function
(display (is-prime? 17)) ; should print #t since 17 is a prime number
(display (is-prime? 27)) ; should print #f since 27 is not a prime number