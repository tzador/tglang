;; Define a procedure to check if a number is prime
(define (is-prime n)
  (define (iter i)
    (cond ((> i (sqrt n)) #t)    ;; If i is greater than the square root of n, n is prime
          ((= (remainder n i) 0) #f)    ;; If i divides evenly into n, n is not prime
          (else (iter (+ i 1)))))    ;; Otherwise, increment i and try again
  (iter 2))

;; Define a procedure to generate a list of prime numbers up to a given number
(define (list-of-primes-up-to n)
  (define (iter i acc)
    (cond ((> i n) acc)    ;; If i is greater than n, return the accumulated list
          ((is-prime i) (iter (+ i 1) (cons i acc)))    ;; If i is prime, add it to the list and continue
          (else (iter (+ i 1) acc))))    ;; Otherwise, continue without adding i to the list
  (iter 2 '()))

;; Call the procedure and print the list of prime numbers up to 20
(print (list-of-primes-up-to 20))