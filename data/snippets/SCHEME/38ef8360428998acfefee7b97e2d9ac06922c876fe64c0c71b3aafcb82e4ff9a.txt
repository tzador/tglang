;; This is a function that takes in a list of numbers and an element,
;; and returns a new list with the element added to every element in the original list

(define (add-element lst num)
  (cond ((null? lst) '())        ; if the list is empty, return an empty list
        ((number? (car lst))     ; if the first element is a number,
         (cons (+ (car lst) num) ; add the element to the first element
               (add-element (cdr lst) num))) ; and recursively call the function on the rest of the list
        (else                     ; if the first element is not a number,
         (cons (car lst)          ; just add it to the list
               (add-element (cdr lst) num))))) ; and recursively call the function on the rest of the list

(add-element '(1 2 3) 5)
;; Output: '(6 7 8)