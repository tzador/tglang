;;; This is an example of a function that takes in a list of numbers and returns the sum of the squares of each number
(define (sum-of-squares l)
  (if (null? l)
      0
      (+ (* (car l) (car l)) (sum-of-squares (cdr l)))))
      
;;; This is an example of a higher-order function that takes in a function and a list, and applies the function to each element in the list
(define (map f l)
  (if (null? l)
      '()
      (cons (f (car l)) (map f (cdr l)))))
      
;;; This is an example of a function that implements quicksort algorithm to sort a list of numbers
(define (quicksort l)
  (if (or (null? l) (<= (length l) 1))
      l
      (let ((pivot (car l))
            (rest (cdr l)))
        (append (quicksort (filter (lambda (x) (< x pivot)) rest))
                (list pivot)
                (quicksort (filter (lambda (x) (>= x pivot)) rest))))))
                
;;; This is an example of a macro that implements "currying" by converting a function that takes multiple arguments into a function that takes one argument and returns a function that takes the remaining arguments
(define-syntax curry
  (syntax-rules ()
    ((curry f)
     (lambda (x)
       (lambda (y) (f x y))))
    ((curry f arg ...)
     (lambda (x)
       (let ((g (curry f arg ...)))
         (g x))))))
         
;;; This is an example of a function that creates an infinite list of numbers starting from a specified number
(define (infinite-list n)
  (cons n (infinite-list (+ n 1))))