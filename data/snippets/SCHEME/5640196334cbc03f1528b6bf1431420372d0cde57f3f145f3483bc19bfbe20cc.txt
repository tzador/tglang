(define (quick-sort input-list)
  ;; Define the predicate function "sorted?" to check if the list is sorted
  (define (sorted? l)
    (or (null? l)
        (null? (cdr l))
        (and (<= (car l) (cadr l))
             (sorted? (cdr l)))))
  ;; Define helper function "partition" to divide the list into three sublists:
  ;; one with elements smaller than the pivot, one with the pivot, and
  ;; one with elements greater than the pivot.
  (define (partition el l)
    (let loop ([acc1 '()]
               [piv '()]
               [acc2 '()]
               [l l])
      (if (null? l)
          (list (reverse acc1) piv acc2)
          (if (= el (car l))
              (loop acc1 (cons (car l) piv) acc2 (cdr l))
              (loop (cons (car l) acc1) piv acc2 (cdr l))))))
  ;; Define helper function "app" to concatenate three lists
  (define (app l1 l2 l3)
    (append (append l1 l2) l3))

  ;; Define the main helper function "qsort" to actually perform quicksort algorithm
  (define (qsort l)
    (if (or (null? l) (null? (cdr l)))
        l
        (let ([parts (partition (car l) (cdr l))])
          (let ([sorted-lower (qsort (car parts))]
                [sorted-upper (qsort (cddr parts))])
            (app sorted-lower (list (cadr parts)) sorted-upper)))))
  ;; Check if the input list is sorted and return the sorted list if true
  (if (sorted? input-list)
      input-list
      (qsort input-list)))