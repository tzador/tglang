(define (find-prime x) ;Defines a function called 'find-prime' which takes in one parameter 'x'
  (if (<= x 1)        ;Checks if x is less than or equal to 1
    #f                ;Returns the boolean value #f if x is less than or equal to 1
    (let loop (       ;Defines a local procedure called 'loop' with no parameters
        (lambda (n)   ;Takes in one parameter 'n'
          (if (= n x) ;Checks if n is equal to x
            #t        ;Returns the boolean value #t if n is equal to x (prime number)
            (if (= (modulo x n) 0) ;Checks if the remainder of x divided by n is equal to 0 (if not a prime number)
              #f                    ;If the remainder is 0, not a prime number, returns #f
              (loop (+ n 1))        ;If the remainder is not 0, calls the local procedure 'loop' with an incremented value of n + 1
            )
          )
        )
      )
      (loop 2) ;Calls the local procedure 'loop' with an initial parameter value of 2 (starting from 2 to check for prime numbers)
    )
  )
)