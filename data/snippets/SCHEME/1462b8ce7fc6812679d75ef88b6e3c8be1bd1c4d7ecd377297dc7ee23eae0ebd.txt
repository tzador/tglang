(define (repeated-map proc lst) ; define a function that takes in a procedure and a list as parameters
  (if (null? lst) ; if the list is empty, return an empty list
      '()
      (cons (proc (car lst)) ; apply the procedure to the first element of the list and add the result to the output list
            (repeated-map proc (cdr lst))))) ; recursively call the function on the remaining elements of the list and add the results to the output list

(define (square x) (* x x)) ; define a function that squares a number

(define list (list 1 2 3)) ; create a list containing the numbers 1, 2, and 3

(display (repeated-map square list)) ; apply the repeated-map function with the square function as the procedure and the list as the input
; output: (1 4 9) ; result of squaring each element in the list using the repeated-map function