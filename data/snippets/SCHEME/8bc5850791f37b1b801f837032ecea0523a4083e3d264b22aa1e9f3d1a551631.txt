#lang racket

;; Function to check if a number is prime
(define (is-prime? n)
  (cond
    ((<= n 1) #f)
    ((= n 2) #t)
    ((= (remainder n 2) 0) #f)
    (else (let loop ((divisor 3))
            (cond
              ((> divisor (sqrt n)) #t)
              ((= (remainder n divisor) 0) #f)
              (else (loop (+ divisor 2))))))))

;; Function to generate a list of prime numbers up to a given limit
(define (generate-primes limit)
  (let loop ((n 2)
             (primes '()))
    (cond
      ((<= n limit) 
        (if (is-prime? n)
            (loop (+ n 1) (cons n primes))
            (loop (+ n 1) primes)))
      (else primes))))

;; Example usage
(generate-primes 50)