(defn merge-sort [coll]
;; Implementation of merge sort function
  (if (<= (count coll) 1)
    coll
    (let [[left right] (->> coll (split-at (/ (count coll) 2)))
        		left-sorted  (merge-sort left)
        		right-sorted (merge-sort right)
        		result       (vec (concat left-sorted right-sorted))]
      (loop [[[lhead & ltail] left-sorted
         		[rhead & rtail] right-sorted
         		acc []]
         (cond
           (nil? lhead)          (reverse acc)
           (nil? rhead)          (reverse acc)
           (< lhead rhead)       (recur ltail right-sorted (conj acc lhead))
           :else                 (recur left-sorted rtail (conj acc rhead)))))))