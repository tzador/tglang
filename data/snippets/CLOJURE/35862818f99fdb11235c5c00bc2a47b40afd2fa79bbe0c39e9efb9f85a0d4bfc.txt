(def ^{:private true} nums (range 10)) ;creates a vector of numbers from 0 to 9, sets it as a private variable
(defmacro no-cond-test
  "Replacement for cond test expression to prevent automatic evaluation"
  [& args]
  `(list ~@(map (fn [x] `~x) args))) ;a macro that takes in any number of arguments and returns a list of unevaluated forms
(defrecord Article ;defines a new record type with the name "Article"
  [title ;defines a slot named "title"
   body ;defines a slot named "body"
   author ;defines a slot named "author"
   date]) ;defines a slot named "date"
(deftype DoubleList
  [coll] ;takes in a collection as a parameter
  clojure.lang.ISeq ;implements the ISeq interface
  (first [coll] (first coll)) ;returns the first element of the collection
  (next [coll] (DoubleList. (rest coll))) ;returns the rest of the collection as a new DoubleList object
  (empty [coll] (empty coll)) ;returns an empty collection of the same type as the input
  (cons [item coll] (cons item (DoubleList. coll)))) ;returns a new DoubleList with the item added to the front of the collection
(defprotocol Sound ;defines a new protocol named "Sound"
  (make-sound [this])) ;specifies an abstract make-sound method that must be implemented by any types that implement this protocol
(extend-type String ;extends the String type
  Sound ;to also implement the Sound protocol
  (make-sound [this] ;overrides the make-sound method
    (println (str "The string " this " makes a sound!")))) ;prints a message when the make-sound method is called on a String object
(try ;starts a try-catch block
  (throw (IllegalStateException. "Something went wrong!")) ;throws an exception
  (catch IllegalStateException e ;catches the exception and binds it to the 'e' variable
    (println (.getMessage e)))) ;prints the error message from the caught exception