(defn bubble-sort [coll]
  (loop [coll coll,
         swapped true]
    (if (not swapped)
      coll
      (let [new-coll (vec (subvec coll 0 (- (count coll) 1))),
            last (last coll)]
        (reduce (fn [sorted item]
              (if (> (first :test map))
                (let [vec_head (vec (take-while #(< % last) sorted))]
                  (vec (concat vec_head [last] (drop (count vec_head) sorted))))
                (let [vec_head (vec (take-while #(<= % last) sorted))]
                  (vec (concat vec_head [last] (drop (count vec_head) sorted)))))
          (conj new-coll last)
          (bubble-sort new-coll))))))