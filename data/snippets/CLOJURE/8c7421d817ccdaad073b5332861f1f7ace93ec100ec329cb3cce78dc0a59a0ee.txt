;; Function to calculate the maximum of two numbers
(defn get-max [num1 num2]
  (if (> num1 num2)
    num1
    num2))

;; Function to calculate the factorial of a number
(defn get-factorial [num]
  (if (= num 0)
    1
    (* num (get-factorial (dec num)))))

;; Function to calculate the sum of a list of numbers
(defn get-sum [nums]
  (reduce + nums))

;; Function to check if a number is prime
(defn is-prime? [num]
  (if (or (<= num 1) (= num 4)) 
    false 
    (if (<= num 3)
      true
      (let [dividers (range 2 (inc (quot num 2)))]
        (every? #(> num %) (filter #(zero? (mod num %)) dividers))))))

;; Function to calculate the average of a list of numbers
(defn get-average [nums]
  (if (seq nums)
    (/ (get-sum nums) (count nums))
    0))

;; Function to convert a list of strings to uppercase
(defn to-upper [strings]
  (map #(clojure.string/upper-case %) strings))

;; Function to merge two maps
(defn merge-maps [map1 map2]
  (merge map1 map2))