;; This is a function that returns the product of two numbers.
(defn product [num1 num2]
  (* num1 num2))
  
;; This is a function that computes the factorial of a number using recursion.
(defn factorial [n]
  (if (< n 2)
    1
    (* n (factorial (dec n)))))

;; This is a function that calculates the sum of all numbers in a list recursively.
(defn sum [nums]
  (if (empty? nums)
    0
    (+ (first nums) (sum (rest nums)))))
    
;; This is a higher-order function that applies a function to every item in a given list.
(defn map [func items]
  (if (empty? items)
    []
    (cons (func (first items)) (map func (rest items)))))
    
;; This is a function that checks if a given number is prime.
(defn prime? [n]
  (and (>= n 2)
    (not-any?
       #(zero? (rem n %))
       (range 2 n))))
       
;; This is a function that takes in two strings and returns the number of common characters between them.
(defn common-characters [str1 str2]
  (loop [count 0, chars1 (set str1), chars2 (set str2)]
    (if (empty? chars1)
      count
      (if (contains? chars2 (first chars1))
        (recur (inc count) (disj chars1 (first chars1)) (disj chars2 (first chars1)))
        (recur count (disj chars1 (first chars1)) chars2)))))
        
;; This is a function that checks if a given string is a palindrome.
(defn palindrome? [str]
  (= (seq (reverse str)) (seq str)))