(defn fib [n] "Function to calculate the nth fibonacci number"
  (if (<= n 1) "Base case, return n"
      (+ (fib (- n 1)) (fib (- n 2))))) "Recursive calls to sum previous two numbers"

(defn factorial [n] "Function to calculate the factorial of a number"
  (if (< n 2) "Base case, return 1"
      (* n (factorial (- n 1))))) "Recursive calls to multiply by previous number"

(defn merge [left right] "Function to merge two sorted lists"
  (if (empty? left) right
      (if (empty? right) left
          (if (< (first left) (first right))
              (cons (first left) (merge (rest left) right)) "Add first element of left list to result and recursively call merge with remaining elements"
              (cons (first right) (merge left (rest right)))))) "Add first element of right list to result and recursively call merge with remaining elements"

(defn mergesort [lst] "Function to implement mergesort algorithm"
  (if (< (count lst) 2) lst
      (let [half (int (/ (count lst) 2))
            left (mergesort (take half lst))
            right (mergesort (drop half lst))]
        (merge left right)))) "Split list into two halves and recursively call mergesort on each half, then merge the sorted halves"

(println "Fibonacci number at position 10 is: " (fib 10))
(println "Factorial of 6 is: " (factorial 6))
(println "Mergesort output for list [5 2 7 1 3] is: " (mergesort [5 2 7 1 3]))