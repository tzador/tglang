(defn merge-sort [coll]
  (let [middle (quot (count coll) 2)]
    (if (<= middle  1) coll
      (loop [[left-arr right-arr] (map #(vec (take middle (drop (* middle %) coll))) [0 1])
             result []]
        (if-let [[left-elem right-elem] (cond
                                          (empty? left-arr) [nil (first right-arr)]
                                          (empty? right-arr) [(first left-arr) nil]
                                          :else (if (< (first left-arr) (first right-arr))
                                                  [(first left-arr) nil]
                                                  [nil (first right-arr)]))]
          (if (and (not (nil? left-elem)) (not (nil? right-elem))) (recur
                                                                    (if (< (first left-arr) (first right-arr))
                                                                      (drop 1 left-arr)
                                                                      left-arr)
                                                                    (if (> (first left-arr) (first right-arr))
                                                                      (drop 1 right-arr)
                                                                      right-arr)
                                                                    (conj result (if (< left-elem right-elem)
                                                                                    left-elem
                                                                                    right-elem)))
                                                                    (concat result left-arr right-arr)))))))