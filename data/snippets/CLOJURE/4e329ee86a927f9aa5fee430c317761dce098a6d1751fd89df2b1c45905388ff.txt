(defn- sub [a b]
  "Recursively subtracts b from a until a is 0 or less, 
  then returns the final value"
  (if (<= a 0)
    a
    (recur (- a b) b)))

(defmacro check-zero [expr]
  "Checks if the result of an expression is 0"
  `(if (= 0 ~expr)
    (println "Result is 0")
    (println "Result is not 0")))

(let [a 10
      b 5
      c (sub a b)]
  (println c) ;;prints 5
  (check-zero (- a b)) ;;prints "Result is 0"
  (check-zero c)) ;;prints "Result is not 0"