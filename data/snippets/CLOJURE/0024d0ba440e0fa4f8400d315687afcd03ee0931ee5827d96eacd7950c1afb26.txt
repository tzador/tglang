;; Define a function that takes in a list and returns a new list with only even numbers
(defn even-numbers [input]
  (filter even? input)) ;; Use the built-in filter function to select only even numbers 

;; Define a recursive function that calculates the factorial of a given number
(defn factorial [n]
  (if (= n 0) ;; Base case
    1 ;; Return 1 when n is 0
    (* n (factorial (dec n))))) ;; Multiply n by the factorial of n-1 using recursion

;; Define a higher-order function that takes in a function and a list, and applies the function to each element of the list
(defn map-custom [f input]
  (reduce #(conj %1 (f %2)) [] input)) ;; Use the built-in reduce function to apply function to each element and add to a new list

;; Define a function that creates a multiplication table for a given number
(defn multiplication-table [n]
  (map-custom (fn [x] (* n x)) (range 1 (inc n)))) ;; Use custom map function to multiply each number in range 1 to n with the given number n, creating a list of multiples