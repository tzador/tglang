(defn fib [n] ; defn is used to define functions in Clojure
  (let [fibs (atom (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))) ; let is used for binding variables
        pos (atom 0) ; atoms are mutable references to values, this one stores the index of the Fibonacci sequence being returned
        result (fn [] ; define an internal function to access the atoms and get the next Fibonacci number
                   (let [n (@pos) ; dereferencing the atom to get the current index value
                         _ (swap! pos inc) ; using swap! to increment the index value after each call
                         current (nth @fibs n)] ; using nth to access the value at the current index in the Fibonacci sequence
                     current))) ; return the current value
  result)) ; calling this function will return a function that returns the next Fibonacci number every time it is called

(def fib-seq (fib 10)) ; calling the function with a given number will return a function that starts at that index
(fib-seq) ; 1
(fib-seq) ; 1
(fib-seq) ; 2
(fib-seq) ; 3
(fib-seq) ; 5
(fib-seq) ; 8
(fib-seq) ; 13
(fib-seq) ; 21
(fib-seq) ; 34
(fib-seq) ; 55
(fib-seq) ; nil (because the Fibonacci sequence only goes up to the 9th index, so on the 10th call it will return nil)