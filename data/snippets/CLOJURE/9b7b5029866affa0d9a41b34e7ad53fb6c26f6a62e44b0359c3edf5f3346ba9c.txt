(defn merge-sort
  "Recursively divides and merges the input list, sorting it using the merge algorithm."
  [input]
  (let [half (quot (count input) 2)]
    (if (<= half 1)
      (first (sort input))
      (let [left (merge-sort (take half input))
            right (merge-sort (drop half input))]
        (merge left right)))))

(defn merge
  "Merges two sorted lists into one sorted list."
  [left right]
  (let [result []]
    (loop [left-list left
           right-list right
           output result]
      (cond
        (empty? left-list) (into output right-list)
        (empty? right-list) (into output left-list)
        (<= (first left-list) (first right-list))
            (recur (rest left-list) right-list (conj output (first left-list)))
        :else
            (recur left-list (rest right-list) (conj output (first right-list)))))))

(println (merge-sort [5 1 3 2 4]))