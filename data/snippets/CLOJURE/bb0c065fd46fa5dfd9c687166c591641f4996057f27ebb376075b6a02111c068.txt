(ns my-project.core
  (:require [clojure.string :as s]
            [clojure.java-io :as io]
            [clojure.math.numeric-tower :as math]))

(defn get-random-string
  "This function generates a random string with a given length."
  [len]
  (str (rand-nth (concat (range 48 58)
                        (range 65 91)
                        (range 97 123)))
       (get-random-string (- len 1))))

(defn- parse-csv
  "This function parses a CSV file and returns a seq of maps with the
  headers as keys and values from each row as values."
  [file]
  (with-open [rdr (io/reader file)]
    (->> (str/split (slurp file) #"\n")
         (map #(str/split % #","))
         (map #(zipmap (first %) (rest %)))
         (map #(into {} (map #(s/trim %) %)))))


(defn- fibonacci-sequence
  "This function generates the Fibonacci sequence up to a given limit."
  [limit]
  (let [fibs (lazy-cat [0 1] (map + fibs (rest fibs)))]
    (filter #(<= % limit) fibs)))

(defn- sum-of-square-roots
  "This function calculates the sum of the square roots of a list of numbers."
  [nums]
  (reduce + (map #(math/sqrt %) nums)))

(defn- reverse-string
  "This function reverses a given string."
  [str]
  (reduce #(str %2 %1) "" str)) ; reverse a string by reducing from right to left

(defn- get-large-prime-factors [n]
  "This function returns the largest prime factors of a given number."
  (let [factors (into #{} (filter #(not (= 0 (mod n %))) (range 2 (math/floor (math/sqrt n)) 1)))
        primes (into #{} (filter #(not (= 0 (mod n %))) (range 2 n 1)))]
    (math/multiply (max factors) (max primes))))

(defn- replace-even-nums-with-zero [nums]
  "This function replaces all even numbers in a given list with 0."
  (map #(if (even? %) 0 %) nums))

(defn- combine-strings-with-spaces [strings]
  "This function combines a list of strings with spaces in between."
  (apply str (interpose " " strings)))