;; Define a recursive function to calculate the factorial of a number
(defn factorial
  "Calculates the factorial of a given number using recursion"
  [n]
  (if (<= n 1) 1
    (* n (factorial (- n 1)))))
    
;; Define a function to calculate the nth Fibonacci number
(defn nth-fibonacci
  "Calculates the nth Fibonacci number using dynamic programming"
  [n]
  (cond
    (= n 0) 0
    (= n 1) 1
    :else (+ (nth-fibonacci (- n 1)) (nth-fibonacci (- n 2)))))
    
;; Define a function to check if a number is prime
(defn is-prime?
  "Checks if a given number is prime or not"
  [n]
  (if (<= n 1) false
  (let [root (Math/sqrt n)]
    (loop [i 2]
      (if (>= i root) true
        (if (zero? (mod n i))
          false
          (recur (inc i))))))))