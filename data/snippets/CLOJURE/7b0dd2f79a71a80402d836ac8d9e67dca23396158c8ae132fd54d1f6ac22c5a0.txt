(defn merge-pairs [coll]
  (loop [new-coll '()
         remaining coll]
    (if (empty? remaining)
      new-coll
      (if (second remaining)
        (recur (conj new-coll (str (first remaining) (second remaining)))
               (drop 2 remaining))
        (recur (conj new-coll (str (first remaining)))
               (rest remaining))))))

;;; This function takes a collection and merges pairs of elements together into a new collection, using recursion and the built-in Clojure functions 'conj', 'empty?', 'second', 'first', 'rest', and 'drop'.
;;; Example input: [1 2 3 4 5 6]
;;; Output: ["12" "34" "56"]