(ns example.core
  (:require [clojure.string :as str]
            [clojure.java.io :as io]
            [clojure.core.async :as async]))

(defn quicksort [[pivot & xs]]
  "Sorts the given sequence using the quicksort algorithm."
  (if (empty? xs)
    [pivot]
    (let [(smaller #(<= % pivot))
          (larger #(>= % pivot))
          [smaller-elements larger-elements] (split-with smaller xs)
          pivot-element                       (list pivot)
          first-remainder                     (quicksort smaller-elements)
          second-remainder                    (quicksort larger-elements)]
      (concat first-remainder pivot-element second-remainder))))

(defn -main []
  "Main function that takes in a file path, reads the file
  and sorts its contents using the quicksort algorithm."
  (let [file-path (first *command-line-args*)
        file-lines (-> file-path
                       io/resource
                       io/reader
                       line-seq)]
    (println "File contents before sorting:")
    (println (str/join "\n" file-lines))
    (println "File contents after sorting:")
    (println (str/join "\n" (quicksort file-lines)))))