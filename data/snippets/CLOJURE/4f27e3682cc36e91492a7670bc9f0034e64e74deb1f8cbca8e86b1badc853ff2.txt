(defn add-multiples
  "A higher-order function that takes in a function 'f' and a number 'n'.
   It returns the cumulative sum of multiples of 'n' generated by 'f' up to 'n'."
  [f n]
  ;; Define an accumulator function 'acc' that takes in a current value 'curr' and an already accumulated sum 'sum'.
  ;; It generates the next multiple of 'n' using the function 'f' and adds it to the 'sum', which is returned.
  (defn acc
    [curr sum]
    (let [next-multiple (f curr)]
      (+ next-multiple sum)))
  ;; Use a reduce function to apply 'acc' to the range of numbers from 1 to 'n'.
  ;; The initial value of 'sum' is set to 0, and each value is passed on as the first argument to 'acc'.
  (reduce acc 0 (range 1 (inc n))))