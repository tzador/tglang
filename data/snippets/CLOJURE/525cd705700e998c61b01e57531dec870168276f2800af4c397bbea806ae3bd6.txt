(defmacro ranged-for [var init last expr]
;; declare a macro function called "ranged-for" which takes in four parameters: "var", "init", "last", and "expr"
  `(let [i# ~init
;; use backquote syntax to create an unevaluated list
         last# ~last]
;; assign the variable "i#" to the value of the "init" parameter, and the variable "last#" to the value of the "last" parameter

     (loop [~var i#]
;; create a "loop" to iterate through the values of "i#" until the expression is evaluated
       (if (< ~var last#)
;; use "if" statement to check if "var" is less than "last"
         (do ~expr
;; if true, execute the "expr" parameter
             (recur (inc ~var)))
;; use "recur" to increment "var" by one for each iteration
         nil))))
;; if false, return "nil"