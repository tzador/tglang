(ns advanced-operations
  (:require [clojure.math.numeric-tower :refer [expt]])) ;; import numeric-tower from clojure.math library
(defn factorial [n]
  (reduce * (range 1 (inc n))))

(defn sum-of-factors [n]
  (let [partial (partial / n)]
    (apply + (map (fn [i] (partial (+ 1.0 (* 0.01 (expt 2 i))))) (range 1 n)))))

(defn collatz [n] ;; collatz conjecture implementation
  (cond
    (= n 1) 1
    (even? n) (inc (collatz (/ n 2)))
    :else (inc (collatz (+ (* 3 n) 1)))))

(defn sieve [n] ;; sieve of Eratosthenes implementation
  (loop [nums (range 2 (inc n))
         primes []]
    (if (empty? nums)
      primes
      (let [p (first nums)]
        (recur (filter #(not= 0 (mod % p)) (rest nums)) (conj primes p))))))

(defn power-set [s] ;; power set implementation
  (reduce (fn [sets x]
            (union sets (map #(conj % x) sets)))
          #{#{}}
          s))