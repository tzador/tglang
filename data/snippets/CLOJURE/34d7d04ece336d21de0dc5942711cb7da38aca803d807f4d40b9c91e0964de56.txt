(ns my.namespace
  (:require [clojure.string :as str]))

(defn remove-duplicates
  "Removes duplicate values from a collection"
  [coll]
  (set coll))

(defn is-even?
  "Checks if a number is even"
  [n]
  (if (zero? (mod n 2))
    true
    false))

(defn increment-values
  "Increments each value in a map by 1"
  [m]
  (into {} (for [[k v] m]
             [k (inc v) ])))

(defmulti number-check
  "Checks the type of a number and performs a specific action"
  (fn [n] (cond
    (> n 0) :positive
    (< n 0) :negative
    :else :zero)))

(defmethod number-check :positive
  "Prints 'Number is positive'"
  [n]
  (println "Number" n "is positive"))

(defmethod number-check :negative
  "Prints 'Number is negative'"
  [n]
  (println "Number" n "is negative"))

(defmethod number-check :zero
  "Prints 'Number is zero'"
  [n]
  (println "Number is zero"))

(defmacro unless
  "Runs an expression only if a condition is false"
  [cond expr]
  `(if-not ~cond ~expr))