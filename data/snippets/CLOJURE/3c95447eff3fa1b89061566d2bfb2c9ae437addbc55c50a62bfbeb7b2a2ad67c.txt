(defn- insertion-sort [ls] ;Declare a function for insertion sorting with input parameter of list
  (loop [sorted ls] ;Define a loop, with initial value of sorted as the input list
    (if (empty? (rest sorted)) ;If the sorted list has only one element, then the list is already sorted
      sorted ;Return the sorted list
      (let [head (first sorted) ;Declare a variable head and assign it the first element of the sorted list
            tail (rest sorted)] ;Declare a variable tail and assign it the rest of the sorted list
        (loop [i 0 ;Define a second loop, with initial value of i as 0
              inserted false ;Declare a variable inserted, used to track if the head was inserted
              result []] ;Declare a variable result to store the sorted list
          (if (empty? tail) ;If the tail is empty, then we have reached the end of the list
            (conj result head) ;Add the head to the result and return it
            (let [curr (first tail) ;Declare a variable curr and assign it the first element of the tail
                  remaining (rest tail)] ;Declare a variable remaining and assign it the rest of the tail
              (if (> curr head) ;If the current element is larger than the head,
                (do (conj result curr) ;Add the current element to the result
                    (if (not inserted) ;If the head has not been inserted yet,
                      (conj result head) ;Add the head to the result
                      result)) ;Otherwise, return the result without changing it
                (do (conj result head) ;Add the head to the result
                    (recur (inc i) true result))))))) ;Recur with i incremented and inserted set to true, and the new result