;; Function to reverse a vector
(defn reverse [v]
  "Reverses a vector."
  (vec (reduce conj () v)))

;; Function to add 1 to each element in a list and return the sum
(defn add-one [lst]
  "Adds one to each element in a list and returns the sum."
  (reduce + (map inc lst)))

;; Function to find the maximum element in a list
(defn maximum [lst]
  "Finds the maximum element in a list."
  (reduce max lst))

;; Function to remove any duplicates from a list
(defn remove-duplicates [lst]
  "Removes any duplicates from a list."
  (vec (set lst)))

;; Function to convert a string to upper case
(defn to-upper [str]
  "Converts a string to upper case."
  (clojure.string/upper-case str))

;; Function to create a map from two lists
(defn create-map [keys vals]
  "Creates a map from two lists."
  (into {} (map vector keys vals)))

;; Function to sort a list in descending order
(defn desc-sort [lst]
  "Sorts a list in descending order."
  (sort > lst))