(defn fibonacci
  "Takes in an integer n and returns the nth number in the Fibonacci sequence."
  [n]
  (let [cache (atom {})]
    (if (< n 0)
      (throw (IllegalArgumentException. "Cannot get a negative index in the Fibonacci sequence."))
      (cond
        (<= n 1) n
        :else
          (let [fib1 (memoize #(if (<= % 1) % (or (@cache (- % 1)) (fibonacci (- % 1)))))
                fib2 (memoize #(or (@cache (- % 2)) (fibonacci (- % 2)))), 
                ans (+ (fib1 (- n 1)) (fib2 (- n 2))))]
            (swap! cache assoc n ans) 
            ans))))