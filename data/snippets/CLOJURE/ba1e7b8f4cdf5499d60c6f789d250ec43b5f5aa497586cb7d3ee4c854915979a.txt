(defmacro for-loop [[sym init check change :as args] & body]
  (let [step (gensym "step__")
        end (gensym "end__")
        start (gensym "start__")]
    `(let [~sym ~init
           ~end ~check
           ~step (- ~end ~sym)
           ~start ~sym]

       (loop []
         (when (< ~step 0)
           (if (>= ~sym ~end)
             (do ~@body
               (let [result# ~change]
                 (if (loop [#^{:once true} ~change])
                   (recur)
                   (done))))
             (done)))
         (when (> ~step 0)
           (if (<= ~sym ~end)
             (do ~@body
               (let [result# ~change]
                 (if (loop [#^{:once true} ~change])
                   (recur)
                   (done))))
             (done)))))))