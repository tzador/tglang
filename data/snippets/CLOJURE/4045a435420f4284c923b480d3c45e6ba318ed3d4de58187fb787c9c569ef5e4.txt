;; Defining a function to calculate the factorial of a number
(defn factorial [n]
  (if (<= n 1)
      ;; If n is less than or equal to 1, return 1
      1
     ;; Otherwise, recursively call the factorial function with n-1
     ;; and multiply it with n
     (* n (factorial (- n 1)))) 

;; Defining a function to calculate the sum of a list
(defn sum [lst]
  (if (empty? lst)
      ;; If the list is empty, return 0
      0
     ;; Otherwise, add the first element in the list
     ;; with the sum of the remaining elements
     (+ (first lst) (sum (rest lst)))))

;; Defining a function to calculate the nth Fibonacci number
(defn fibonacci [n]
  (if (<= n 2)
      ;; If n is less than or equal to 2, return 1
      1
     ;; Otherwise, recursively call the fibonacci function for n-1 and n-2
     ;; and add the results together
     (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; Defining a function to check if a number is prime
(defn is-prime? [n]
  (if (<= n 1)
      ;; If n is less than or equal to 1, return false
      false
     ;; Otherwise, loop through all numbers from 2 to the square root of n
     (loop [i 2]
       (if (<= i (int (Math/sqrt n)))
           ;; If n is divisible by i, return false
           (if (zero? (mod n i))
               false
             ;; Otherwise, recursively call the loop for i+1
             (recur (inc i)))
           ;; If the loop has reached the square root of n, return true
           true))))

;; Defining a function to flatten a nested list
(defn flatten [lst]
  (if (empty? lst)
      ;; If the list is empty, return an empty list
      []
     ;; Otherwise, check if the first element is a list
     (if (list? (first lst))
         ;; If it is a list, use concat to combine
         ;; the first element with flattened version
         ;; of the rest of the list
         (concat (flatten (first lst)) (flatten (rest lst)))
       ;; If it is not a list, use cons to add it
       ;; to the flattened version of the rest of the list
       (cons (first lst) (flatten (rest lst))))))