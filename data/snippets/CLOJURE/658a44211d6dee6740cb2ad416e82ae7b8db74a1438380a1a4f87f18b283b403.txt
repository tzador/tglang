(defn double
  "Return twice the input `x`"
  [x]
  (* x 2))
  
(defn range
  "Returns a range from `start` (inclusive) to `end` (exclusive)"
  [start end]
  (take (- end start) (iterate inc start)))
  
(defn flatten
  "Returns a flattened version of a nested sequence"
  [coll]
  (filter (complement sequential?) coll)
  (reduce #(concat %1 (flatten %2)) coll))
  
(defn map-indexed
  "Maps a `fn` over `coll` and supplies each element's index as the second arg to `fn`"
  [fn coll]
  (reduce-kv #(conj %1 (apply fn %2)) #{} (map-indexed fn coll)))
  
(defn interpose
  "Returns a lazy sequence of `sep` inserted between `coll`"
  [sep coll]
  (when-let [s (seq coll)]
  (let [part (drop 1 s)]
  (concat (list (first s))
  (mapcat #(list sep %) part)))))