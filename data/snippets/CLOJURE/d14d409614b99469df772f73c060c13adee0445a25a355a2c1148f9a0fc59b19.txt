(defn puzzle [matrix target]
    (->> matrix
        ((partial double-item) (length matrix))
        (reduce +)
        (if (> target %) puzzle-shuffle))
    ((partial look-for match target) matrix))

(defn double-item [n]
    (concat (range 0 n) (range 0 n)))

(defn puzzle-shuffle [matrix]
    (let [shuffled-matrix ((partial shuffle seq)) matrix]
        (puzzle shuffled-matrix target)))

(defn look-for [match target matrix]
    (loop [row (first matrix), result []]
        (if (empty? row)
            result
            (let [item (first row)]
                (if (match target item)
                    (recur (rest row) (conj result item))
                    (recur (rest row) result))))))

(defn match [target item]
    (= target item))