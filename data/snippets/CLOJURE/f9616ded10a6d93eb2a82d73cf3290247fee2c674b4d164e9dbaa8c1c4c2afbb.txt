(defn bubble-sort [lst]
  "A function that implements the bubble sort algorithm
   for sorting a list of numbers in ascending order."

  ; Set flag to true to indicate if any swaps have been made
  (let [swapped? true]

    ; If no swaps were made in the last iteration, the list is sorted
    (loop [flag swapped?
           l lst]

      ; Set flag to false and iterate through list
      (if flag
        (recur (reduce-kv
                ; For each index and value
                 (fn [a k v]
                   ; If value at next index is larger, swap and set flag to true
                   (if (< v (get l (inc k)))
                     (do
                       (assoc a k (get l (inc k)))
                       (assoc a (inc k) v)
                       true)
                     a))
                ; Set initial flag and list
                 {:a false :l l}
                ; Reverse list to iterate from end to start
                 (reverse (range (dec (count l)))))
        l))))