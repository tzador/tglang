(defn- nested-fn [x y]
  (map #(* x %) (range y)))
  
(defmacro when-let [[binding & clauses] & body]
  `(let [temp# ~binding]
     (when temp#
       (when-let ~clauses ~@body))))

(defn filter-coll [f coll]
  (when-let [[f] (and (seq coll) (f (first coll)))]
    (cons f (lazy-seq (filter-coll f (rest coll))))))

(let [nested (nested-fn 2 10)]
  (println "Nested function result:" nested)
  (when-let [filtered (filter-coll even? nested)]
    (println "Filtered result:" filtered)))