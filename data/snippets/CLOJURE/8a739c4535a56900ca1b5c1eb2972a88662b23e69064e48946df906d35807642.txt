(defn get-combinations
  "Takes in a list of elements and returns a list of all possible combinations of those elements"
  [elements]
  (let [num-elements (count elements)
        num-combinations (Math/pow 2 num-elements) ;; Determine number of combinations using powers function
        all-combinations (transient [])] ;; Transient vector to store combinations before conversion to persistent vector
    ;; Use bit shifting to generate all combinations
    (loop [combination-num 0]
      (when (< combination-num num-combinations)
        (let [new-combination (bit-shift-left combination-num 1) ;; Shift the combination number over to get the binary representation
              binary-combination (clojure.string/pad-left (Long/toBinaryString new-combination) num-elements \0)] ;; Convert to binary string and pad with leading zeroes
          ;; Map the binary string to its corresponding elements
          (swap! all-combinations conj (for [i (range num-elements)
                                             :when (= (\0 (nth binary-combination i)) \1)]
                                         (nth elements i)))
          (recur (inc combination-num)))))
    ;; Convert to persistent vector and return
    (persistent! all-combinations)))