(defn merge-sort
  "This function recursively divides an input collection into smaller sub-collections,
  merges the sub-collections back together in sorted order using a provided comparison function,
  and returns a sorted collection."
  [coll compare-fn]
  (let [n (count coll)]
    (if (<= n 1)
      coll
      (let [half (quot n 2)
            left (take half coll)
            right (drop half coll)]
        (merge compare-fn
          (merge-sort left compare-fn)
          (merge-sort right compare-fn))))))

(defn merge
  "This function merges two sorted collections into one sorted collection using a provided comparison function."
  ([compare-fn left right]
   (let [result (transient [])]
     (loop [left left
            right right
            result result]
       (cond
         (empty? left) (do
                         (conj! result @right)
                         (persistent! result))
         (empty? right) (do
                          (conj! result @left)
                          (persistent! result))
         (compare-fn (first left) (first right)) (recur
                                                  (rest left)
                                                  right
                                                  (conj! result (first left)))
         :else (recur left
                      (rest right)
                      (conj! result (first right))))))))