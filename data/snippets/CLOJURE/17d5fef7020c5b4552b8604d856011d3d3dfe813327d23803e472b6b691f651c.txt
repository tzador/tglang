(defn bubble-sort
  "A function that implements bubble sort algorithm to sort a vector of numbers in ascending order."
  [nums]
  (let [n (count nums)]
    (dotimes [_ n]
      (doseq [i (range (dec n))]
        (when (> (nums i) (nums (inc i)))
          (let [temp (nums i)]
            (change-nums! nums i (inc i))
            (change-nums! nums (inc i) temp)))))
  nums))

(defn selection-sort
  "A function that implements selection sort algorithm to sort a vector of numbers in ascending order."
  [nums]
  (let [n (count nums)]
    (dotimes [i (dec n)]
      (let [min (apply min (subvec nums i))]
        (when (not= (nums i) min)
          (change-nums! nums i (index-of min nums))
          (change-nums! nums (index-of min nums) (nums i))
      )))
    nums))

(defn merge
  "A function that merges two sorted vectors into one sorted vector."
  [v1 v2]
  (if (empty? v1)
    v2
    (if (empty? v2)
      v1
      (if (< (first v1) (first v2))
        (cons (first v1) (merge (rest v1) v2))
        (cons (first v2) (merge v1 (rest v2))))))

(defn merge-sort
  "A function that implements merge sort algorithm to sort a vector of numbers in ascending order."
  [nums]
  (let [n (count nums)]
    (if (< n 2)
      nums
      (let [mid (long (/ n 2))]
        (let [left (take mid nums)
              right (drop mid nums)]
          (merge (merge-sort left) (merge-sort right)))))))