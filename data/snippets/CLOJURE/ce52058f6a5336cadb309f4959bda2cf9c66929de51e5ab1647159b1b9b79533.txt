(defn bubblesort [nums]
  "Function that performs bubble sort on a given vector of numbers."
  (loop [v nums
         end (count nums)
         swapped? true]
    (if (or (zero? end) (not swapped?))
      v ;; Return sorted vector
      (let [vec (vec v)] ;; Convert to vector to make use of conj!
        (nested-loop [i (dec end)
                      j (inc i)]
          (if (<= i 0) ;; Base case, we're at the beginning of v
            (recur vec (dec end) false) ;; Proceed to next iteration
            (if (< (nth vec (dec i)) (nth vec i)) ;; Swap if needed
              (recur (conj (disj vec (dec i)) (nth vec (dec j)) (nth vec i)) end true)
              (recur vec i swapped?)
            )
          )
        )
      )
    )
  )
)