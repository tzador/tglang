(defn factorial [n]  ; Defines a function with the name "factorial" and parameter "n"
  (if (zero? n)      ; Checks if n is equal to 0
    1                 ; If so, returns 1
    (* n (factorial (dec n)))))  ; If not, multiplies n with the factorial of n-1 and recursively calls the function with decremented n as the parameter

(defn fibonacci [n]  ; Defines a function with the name "fibonacci" and parameter "n"
  (if (or (zero? n) (== n 1))  ; Checks if n is equal to 0 or 1
    1  ; If so, returns 1
    (+ (fibonacci (dec n)) (fibonacci (- n 2)))))  ; If not, recursively calls the function with decremented n and n-2 as the parameters, and adds the results 

(defn prime? [x]  ; Defines a function with the name "prime?" and parameter "x"
  (loop [i 2]  ; Creates a loop with variable i starting at 2
    (if (>= i (Math/sqrt x))  ; Checks if i is greater than or equal to the square root of x
      true  ; If so, it means x is a prime number, so the function returns true
      (if (zero? (rem x i))  ; Otherwise, checks if x is divisible by i
        false  ; If so, it means x is not a prime number, so the function returns false
        (recur (inc i))))))  ; If not, increments i and loops again to check the next possible divisor 

(defmacro let-and
  "Allows for short-circuiting in a `let` binding."
  {:added "1.0"}
  [& bindings]
  (if (= (count bindings) 1)
    (first bindings)
    `(let [~(first bindings)
           ~'and
           (let-and ~@(rest bindings))]
       ~'and))) ; Defines a macro with the name "let-and" that allows for short-circuiting in a `let` binding by recursively calling itself with the rest of the bindings.

(defn map-indexed [f coll]  ; Defines a function with the name "map-indexed" and parameters "f" and "coll"
  (let [indexed-coll (map-indexed coll)]  ; Creates a new collection with each element of coll paired with its index
    (into (empty indexed-coll)  ; Uses into to add the index as the first element of each pair
          (fn [m [i x]]  ; Defines a function with two parameters, m and [i x]
            (assoc m [i (f i x)]))))  ; Uses assoc to update the map with the index and result of the function applied to the original element

(defn filter-map [pred coll]  ; Defines a function with the name "filter-map" and parameters "pred" and "coll"
  (reduce (fn [acc x]  ; Combines map and filter by using reduce and a function that adds the result of applying the function to x if it meets the predicate
            (if (pred x)
              (conj acc (f x))
              acc)) []
          coll))