(defn find-pairs [arr target]
  "Finds all pairs in arr that add up to target"
  (let [n (count arr) ;Number of elements in arr
        pairs [] ;Empty list to store pairs
        seen (hash-map)] ;Hash map to track seen numbers
    (loop [i 0] ;Using loop/recur to iterate through arr
      (when (< i n)
        (let [num (- target (arr i))] ;Target - current element in arr
          (if (get seen num) ;If num is already seen
            (do
              (doseq [j (get seen num)] ;Looping through the list at seen num
                (let [pair [j (arr i)]] ;Creating the pair
                  (when-not (some #(= % pair) pairs) ;Checking if the pair is not already present in pairs list
                    (->> pairs (conj pair))))) ;Conj the pair to the pairs list
              (-> seen (update num conj (arr i)))) ;Update seen list to include the current element
            (-> seen (assoc num [(arr i)]))) ;If num not seen, add it to the seen list
          (recur (inc i))))) ;Recur with next index
    pairs) ;Final list of pairs
)