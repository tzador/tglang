(defn count-pairs-lt[n pairs] ; define a function that takes in a number n and a list of pairs
  (cond ; using 'cond' to check multiple conditions
    (< n 2) 0 ; if n is less than 2, return 0
    (empty? pairs) 0 ; if the list of pairs is empty, return 0
    :else (+ ; for any other case, add the following:
           (count-pairs-lt n (rest pairs)) ; recursively call the function with the number n and the rest of the pairs
           (if (< (first (first pairs)) n) ; if the first element in the first pair is less than n
             1 ; add 1 to the count
             0))) ; if not, add 0 to the count