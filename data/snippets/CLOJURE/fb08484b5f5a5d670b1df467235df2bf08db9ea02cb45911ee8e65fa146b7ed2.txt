(defn map-inc [coll]
  "Increments each element in the given collection by 1"
  (map #(+ % 1) coll))

(defn filter-even [coll]
  "Filters out all odd elements in the given collection"
  (filter even? coll))

(defn reduce-sum [coll]
  "Returns the sum of all elements in the given collection"
  (reduce + coll))

(defn sort-desc [coll]
  "Sorts the given collection in descending order"
  (sort > coll))

(defn transduce-sum [transducer coll]
  "Returns the sum of all elements in the given collection using the given transducer"
  (transduce transducer + 0 coll))

(defn transduce-filter [pred transducer coll]
  "Filters out elements in the given collection using the given predicate
   and returns the result using the given transducer"
  (transduce transducer #(if (pred %) %) coll))

(defn transduce-compose [transducer1 transducer2]
  "Composes two given transducers into a single transducer"
  (comp transducer1 transducer2))

;; Example usage:

(def data [1 2 3 4 5])

(def transducer (transduce-compose (filter-even) (map-inc)))

(transduce-sum transducer data) ;; returns 12

(transduce-filter odd? transducer data) ;; returns (3 5)