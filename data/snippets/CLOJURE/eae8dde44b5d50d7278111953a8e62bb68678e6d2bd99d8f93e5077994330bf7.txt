(defn process-data [data]
  "Takes in a collection of data and processes it in multiple steps."
  (let [step-1 (map #(inc %) data) ; increments each element in the collection
        step-2 (filter odd? step-1) ; filters out all odd numbers from the collection
        step-3 (apply + step-2) ; sums the remaining numbers in the collection
        step-4 (conj step-3 "final result")] ; adds a string to the end of the collection
    step-4)) ; returns the final processed collection with the added string