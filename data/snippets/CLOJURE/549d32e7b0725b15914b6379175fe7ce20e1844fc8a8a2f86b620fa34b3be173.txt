(defn add [x y] "Function to add two numbers" (+ x y)) ; Define a function called 'add' that takes in two parameters, 'x' and 'y'
(comment
  This is a multiline comment in CLOJURE, ignored by the compiler
  This is useful for adding annotations and explanations to code
)

(defn factorial [n] ; Define function to calculate factorial of a number
  "Calculates the factorial of a given number"
  (if (<= n 1) ; If statement with condition that checks if n is less than or equal to 1
    1 ; If condition is met, return 1
    (* n (factorial (- n 1))) ; Else, return the result of multiplying n with the factorial of (n-1)
  )
)

(defn fibonacci [n] ; Define function to calculate nth fibonacci number
  "Calculates the fibonacci sequence for a given number"
  (if (<= n 2) ; If statement with condition that checks if n is less than or equal to 2
    1 ; If condition is met, return 1 (first two numbers in fibonacci sequence)
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; Else, return the sum of the previous two fibonacci numbers
  )
)

(defn hello-world [] ; Define function to print "Hello, world!"
  "Prints the string 'Hello, world!' to the console"
  (println "Hello, world!") ; Print the string to the console
)

(defn palindrome? [s] ; Define function to check if a string is a palindrome
  "Checks if a given string is a palindrome"
  (let [reversed (apply str (reverse s))] ; Create a new variable 'reversed' that stores the reversed string
    (= s reversed) ; Check if the original string is equal to the reversed string
  )
)

(defmacro retry [num retries & body] ; Create a macro that retries a given code block a certain number of times
  "Retries a given code block a specified number of times"
    (list 'loop [counter# retries#] ; Create a loop with parameters 'counter' and 'retries'
    (if (<= counter# retries#) ; If statement with condition that checks if counter is less than or equal to retries
      (do ; If condition is met, execute following expressions
        (try ; Try to execute the code block
          (do body) ; Execute the given body of code
          (catch Exception _ ; If an exception is thrown, catch it and do nothing
          )
        )
        (if (> counter# 0) ; If counter is greater than 0
          (println (str "Attempt " (- retries# counter#) " failed.")) ; Print the attempt number and a message
        )
        (if (= counter# retries#) ; If this is the last attempt
          (println "Exceeded number of retries.") ; Print a message
        )
        (recur (inc counter#) retries#) ; Repeat the loop with an incremented counter
      )
      (println "Code block successfully ran.") ; If condition is not met, print a success message
      (return)
    )
  )
)