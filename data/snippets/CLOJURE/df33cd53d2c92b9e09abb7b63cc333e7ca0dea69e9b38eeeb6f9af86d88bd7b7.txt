(def some-var 5)
;; This line creates a new variable "some-var" with the value of 5.

(set! *warn-on-reflection* true)
;; This line sets the global property "*warn-on-reflection*" to true.

(defn add [x y]
  (+ x y))
;; This line defines a new function "add" that takes two parameters "x" and "y" and returns the sum of the two numbers.

(defn- multiply [x y]
  (* x y))
;; This line defines a private function "multiply" that takes two parameters "x" and "y" and returns the product of the two numbers.

(def cat "Meow")
;; This line creates a new variable "cat" with the value of "Meow".

(if (> some-var 10)
  "some-var is greater than 10"
  "some-var is less than or equal to 10")
;; This line checks if "some-var" is greater than 10. If it is, it returns the string "some-var is greater than 10". If it is not, it returns the string "some-var is less than or equal to 10".

(let [a 2
      b 3]
  (if (= a b)
    "a and b are equal"
    "a and b are not equal"))
;; This line creates a let binding with two variables "a" and "b" and checks if they are equal. If they are, it returns the string "a and b are equal". If they are not, it returns the string "a and b are not equal".