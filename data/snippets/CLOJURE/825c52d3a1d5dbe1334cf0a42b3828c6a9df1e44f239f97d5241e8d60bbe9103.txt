(defn fibonacci
  "Function to calculate the nth number in the fibonacci sequence"
  [n]
  (let [phi (/ (+ 1 (Math/sqrt 5)) 2)
        psi (/ (- 1 (Math/sqrt 5)) 2)]
    (Math/round (/ (Math/pow phi n) (Math/sqrt 5)))))

;; Function to calculate the sum of fibonacci numbers up to n
(defn sum-fibonacci
  "Function to calculate the sum of fibonacci numbers up to n"
  [n]
  (loop [i 1
         total 1]
    (if (> i n)
      total
      (recur (inc i) (+ total (fibonacci i))))))

;; Function to generate a list of truncated fibonacci numbers
(defn truncated-fibonacci
  "Function to generate a list of truncated fibonacci numbers"
  [n]
  (let [fib-seq (map fibonacci (range 0 n))
        sum-fib (sum-fibonacci n)]
    (map #(cast Float/TYPE (long (/ (* % sum-fib) sum-fib))) fib-seq)))