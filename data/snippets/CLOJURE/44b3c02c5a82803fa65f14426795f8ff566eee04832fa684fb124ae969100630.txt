;; This function takes in two numbers and returns their greatest common divisor
(defn gcd [a b]
    (if (zero? b) ; if b is 0, gcd is a
        a          ; return a
        (recur b (mod a b)) ; otherwise, recur with b as a and the remainder of a/b as b
    )
)

;; This function takes in a list of numbers and returns their sum
(defn sum [nums]
    (loop [total 0       ; start with a total of 0
           vals nums]    ; loop through the list of numbers
        (if (empty? vals) ; if the list is empty, return the total
            total
            (recur (+ total (first vals)) (rest vals)) ; otherwise, add the first value to the total and recurse with the rest of the list
        )
    )
)

;; This function takes in a string and converts it to uppercase
(defn to-upper [s]
    (apply str (map #(char (bit-or (bit-and % 223) 32)) s)) ; apply the str function to the mapped char values of the string, converted to uppercase using bitwise functions
)

;; This function takes in a list of words and returns them as a sentence
(defn to-sentence [words]
    (apply str (map-indexed #(if (= (%1 0) 0) ; if the word is the first in the list
                               (to-upper %2)   ; convert it to uppercase
                               (str " " %2))    ; otherwise, add a space before the word
                            words))             ; map each word with its index and apply the str function to concatenate them together
)

;; This function takes in a list of numbers and returns the average
(defn average [nums]
    (/ (sum nums) (count nums)) ; divide the sum of the numbers by the count of the numbers
)