(ns tic-tac-toe
  (:require [clojure.string :as str]))

(def board { :A1 " " :B1 " " :C1 " "
             :A2 " " :B2 " " :C2 " "
             :A3 " " :B3 " " :C3 " " })

(defn print-board
  []
  (doseq [[key value] board]
    (cond (and (= key :B1) (= value " "))
          (println "|---|---|---|")
          (= key :C1) (println "| " value " | " (board :C2) " | " (board :C3) " | \n|---|---|---|")
          (= key :C3) (println "| " value " | " (board :A1) " | " (board :B1) " | \n|---|---|---|")
          :default (print "| " value " |"))))

(defn update-board
  [row column player]
  (assoc-in board [row column] player))

(defn check-board
  []
  (loop [chkboard board]
    (let [moves (into #{} (vals board))]
      (if-not (str/blank? (clojure.string/join "" (vals chkboard))))
      (println "It's a tie!")
      (if (some #{[join "XXX"] "[join "OOO"] [join "OOO"]}[moves])))
      (println (str "Player " move " wins!"))
      (recur (take (inc (.indexOf moves [] move)) chkboard)))
             false)))