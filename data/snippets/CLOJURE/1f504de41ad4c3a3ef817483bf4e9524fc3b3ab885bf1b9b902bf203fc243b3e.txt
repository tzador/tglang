;; Define a function called "factorial" that takes in a number "n" and returns the factorial of n
(defn factorial [n]
  ;; if n is 0 or 1, return 1
  (if (or (= n 0) (= n 1))
    1
    ;; otherwise, recursively call the factorial function on n-1 and multiply it by n
    (* n (factorial (- n 1)))))
  
;; Define a function called "fibonacci" that takes in a number "n" and returns the nth term in the fibonacci sequence
(defn fibonacci [n]
  ;; if n is 0 or 1, return n
  (if (or (= n 0) (= n 1))
    n
    ;; otherwise, recursively call the fibonacci function on n-1 and n-2 and add them together
    (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
  
;; Define an anonymous function that takes in a list of numbers and returns the sum of all the numbers
#(apply + %)
  
;; Create a vector of numbers
(def numbers [1 2 3 4 5])
  
;; Use the anonymous function to find the sum of all the numbers in the vector
(apply #(apply + %) numbers)