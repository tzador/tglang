(defn fib [n]     ;; function to calculate Fibonacci series up to n terms
  (cond
    (= n 0) 0     ;; returns 0 for first term
    (= n 1) 1)   ;; returns 1 for second term
  (+ (fib (- n 1)) (fib (- n 2))))   ;; adds previous two terms recursively

(defn factorial [n]   ;; function to calculate factorial of given number
  (if
  (zero? n) 1         ;; returns 1 for base case of 0
  (* n (factorial (dec n)))))   ;; multiplies n with factorial of n-1 recursively

(defn sum-of-squares [n]   ;; function to calculate sum of squares of numbers up to n
  (->> (range 1 (inc n))    ;; creates a range of numbers from 1 to n
       (map #(* % %))       ;; squares each number using anonymous function
       (reduce +)))         ;; adds the squared numbers using reduce function

(defn check-if-prime [n]    ;; function to check if a given number is prime
  (if (zero? n)             ;; checks if number is 0
    false
    (loop [x 2]             ;; assigns starting value for loop as 2
      (cond
        (= x n) true        ;; if current value is equal to given number, it's prime
        (zero? (rem n x)) false)      ;; if remainder of number divided by current value is 0, it's not prime
        :else (recur (inc x)))))      ;; if not, increments value and repeats loop using recursion