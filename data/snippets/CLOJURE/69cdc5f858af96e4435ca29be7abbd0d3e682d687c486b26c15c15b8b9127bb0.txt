(defn hello-world [name] ;defines the function with name 'hello-world' and argument 'name'
  (println "Hello" name)) ;prints "Hello" and value of 'name' argument

(defn multiply [x y] ;defines the function with name 'multiply' and arguments 'x' and 'y'
  (* x y)) ;returns the product of 'x' and 'y'

(defn divide [x y] ;defines the function with name 'divide' and arguments 'x' and 'y'
  (if (= y 0) ;checks if 'y' is equal to 0
    (throw (Exception. "Division by zero is undefined.")) ;throws an exception if 'y' is 0
    (/ x y))) ;returns the quotient of 'x' and 'y' if 'y' is not 0

(defn factorial [n] ;defines the function with name 'factorial' and argument 'n'
  (loop [num n product 1] ;sets loop with starting values of 'num' as 'n' and 'product' as 1
    (if (zero? num) ;checks if 'num' is equal to 0
      product ;returns 'product' if 'num' is 0
      (recur (dec num) (* product num))))) ;decreases 'num' by 1 and multiplies 'product' with 'num', then repeats the loop

(defn fibonacci [n] ;defines the function with name 'fibonacci' and argument 'n'
  (if (< n 2) ;checks if 'n' is less than 2
    n ;returns 'n' if it is less than 2
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ;adds the previous two numbers in the Fibonacci sequence to get the next number, then repeats the function

(defn quicksort [coll] ;defines the function with name 'quicksort' and argument 'coll'
  (if (empty? coll) ;checks if 'coll' is empty
    coll ;returns 'coll' if it is empty
    (let [pivot (first coll) ;sets 'pivot' as first element in 'coll'
          smaller (filter #(<= % pivot) (rest coll)) ;filters values smaller than or equal to 'pivot' from 'coll'
          larger (filter #(< % pivot) (rest coll))] ;filters values larger than 'pivot' from 'coll'
      (conj (quicksort smaller) pivot (quicksort larger))))) ;uses recursion and the 'conj' function to sort the elements in 'coll' in ascending order based on 'pivot'

(defmacro sum-numbers [& numbers] ;defines the function with name 'sum-numbers' and rest parameters 'numbers'
  `(reduce + ~numbers)) ;uses 'reduce' function to add all the numbers in 'numbers' together and returns the result