(defn merge-sort [coll]
  "Sort a collection using the merge sort algorithm."
  (let [mid (quot (count coll) 2)]
    (if (<= (count coll) 1)
      coll
      (let [[left right] (split-at mid coll)]
        (merge (merge-sort left) (merge-sort right) <)))))

(defn quicksort
  [coll]
  "Sort a collection using the quicksort algorithm."
  (if (empty? coll)
    coll
    (let [pivot (first coll)
          tail (rest coll)
          smaller (filter #(< % pivot) tail)
          larger (filter #(>= % pivot) tail)]
      (concat (quicksort smaller) [pivot] (quicksort larger)))))

(defn heap
  [i n coll]
  "Build a heap structure for a given collection."
  (let [left (* i 2)
        right (inc left)
        l (if (< left n) (nth coll (dec left)))
        r (if (< right n) (nth coll (dec right)))
        largest (apply max coll i left right)]
  (when-not (= largest i)
    (assoc coll i (coll largest)
                  largest (coll i)
                  coll (heap largest n coll)))))