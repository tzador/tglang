(def fib (fn [n] 
            (cond
                (= n 0) 0 
                (= n 1) 1 
                :else (+ (fib (dec n)) (fib (- n 2))))))

(defn factorials [n] 
    (if (zero? n) 
        (println "Please input a non-negative integer!") 
        (let [n (biginteger n)] 
            (reduce * (range 1n (inc n))))))

(comment
    "This Clojure code snippet includes a function that calculates the nth Fibonacci number using recursion, as well as a function that calculates the factorial of a given number using a combination of conditionals and the built-in 'reduce' function. The 'factorials' function also includes a guard clause that checks for negative inputs and outputs an error message. Both functions are defined using the 'def' and 'defn' macros respectively, with the usage of anonymous functions through the 'fn' keyword. The 'let' special form allows for the creation of local bindings within the 'factorials' function. The 'comment' macro allows for the inclusion of comments within the code that will not be evaluated. This complex code snippet showcases the power and flexibility of the Clojure programming language."
  )