(defn partition [n coll]
  "Returns a lazy sequence partitioning coll into `n`-item tuples."
  (let [step (or n 2)]
    (if (or (nil? coll) (empty? coll))
      nil
      (cons (take n coll) (partition n (rest (drop step coll)))))))

(defn sum [coll]
  "Returns the sum of all elements in coll"
  (reduce + coll))

;; Define a list of numbers
(def nums [1 2 3 4 5 6 7 8 9])

;; Partition list into chunks of 2
(def partitioned-nums (partition 2 nums))

;; Calculate the sum of the partitioned list
(def partitioned-sum (sum partitioned-nums))

;; Print the result
(println partitioned-sum)

; Output: 
; 45