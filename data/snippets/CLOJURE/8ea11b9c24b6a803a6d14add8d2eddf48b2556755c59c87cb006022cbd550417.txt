(defn calc-factorial
  "Calculates the factorial of a given number n."
  [n]
  (if (= n 0)
    1
    (* n (calc-factorial (dec n)))))
    
(defn calc-combinatorics
  "Calculates the number of combinations of k elements from a set of n elements."
  [n k]
  (cond
    (> k n) (throw (Exception. "Cannot choose more elements than available.")))
    (= k 0) 1
    :else (/ (calc-factorial n) (* (calc-factorial k) (calc-factorial (- n k))))))

(defn- generate-pascal-triangle
  "Generates a Pascal Triangle up to the nth row."
  [n]
  (if (= n 0)
    []
    (let [prev-row (generate-pascal-triangle (dec n))]
      (conj (reduce (fn [row el]
                      (conj row (+ (first el) (second el))))
                    (concat [(calc-combinatorics n (dec n))] prev-row (concat [(last prev-row)] (drop 1 prev-row)))
                    (list 1))
            []))))

(generate-pascal-triangle 5)