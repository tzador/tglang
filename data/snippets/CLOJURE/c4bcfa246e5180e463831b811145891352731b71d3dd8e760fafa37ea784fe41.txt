(defn squared-sum [x y]
  (let [sum (+ x y)]
    (* sum sum)))
    
(defn calculate-fibonacci [n]
  (if (< n 2)
    n
    (+ (calculate-fibonacci (- n 1)) (calculate-fibonacci (- n 2)))))

(defn factorial [n]
  (if (<= n 1)
    1  
    (* n (factorial (- n 1)))))

(defn replace-word [sentence old-word new-word]
  (clojure.string/replace sentence old-word new-word))

(defn palindrome? [word]
  (= (seq word) (reverse (seq word))))

(defn flatten-list [nested-list]
  (if (empty? nested-list)
    []
    (if (list? (first nested-list))
      (concat (flatten-list (first nested-list)) (flatten-list (rest nested-list)))
      (concat (list (first nested-list)) (flatten-list (rest nested-list))))))