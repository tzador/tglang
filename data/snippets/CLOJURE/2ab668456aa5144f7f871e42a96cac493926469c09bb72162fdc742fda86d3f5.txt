(defn is-prime [num]     ;; Define a function called "is-prime" that takes in one argument "num"
  (let [divisors (range 2 num)]     ;; Create a list of numbers from 2 to "num" and bind it to the variable "divisors"
    (not-any? #(zero? (rem num %)) divisors)))     ;; Use the "not-any?" function to check if any of the numbers in "divisors" can divide "num" with no remainder. If any number can, then the function will return "false", indicating that "num" is not a prime number. If all numbers in "divisors" have a remainder when dividing "num", the function will return "true", indicating that "num" is a prime number.