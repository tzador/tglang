;; Function to generate a Fibonacci sequence up to a given number
(defn generate-fib-seq [n]
  ;; Create a vector to store the sequence
  (let [fib-seq (vector 1)]
    ;; Generate the sequence using a recursive function
    (loop [prev1 0
           prev2 1
           count 1]
      ;; Check if the count has reached the given number
      (if (<= count n)
        ;; Add the sum of the previous two numbers to the sequence
        (do (def fib-num (+ prev1 prev2))
          ;; Add the new number to the sequence
          (def fib-seq (conj fib-seq fib-num))
          ;; Call the function recursively with updated values
          (recur prev2 fib-num (inc count)))
        ;; Return the final sequence
        fib-seq))))