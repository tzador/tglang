(ns my-project.core
  (:require [clojure.string :as str]
            [clojure.walk :refer [postwalk]]
            [clojure.edn :refer [read-string]]))

;; A function that takes in a vector of strings and returns a count of
;; all the vowels in each string.

(defn vowel-count [word]
  (reduce
    (fn [acc char]
      (if (includes? "aeiou" char)
        (inc acc)
        acc))
    0
    word))

;; A higher-order function that takes in a vector of strings and a
;; function as parameters. It applies the function to each string in
;; the vector and returns a new vector with the results.

(defn transform-strings [string-array function]
  (map function string-array))

;; Example usage of the above functions:

(let [strings ["hello" "world" "programming"]
      transformed-strings (transform-strings strings (partial str/replace #"o" "a"))
      vowel-counts (transform-strings transformed-strings vowel-count)]
  (println vowel-counts))

;; Output: (2 1 2)