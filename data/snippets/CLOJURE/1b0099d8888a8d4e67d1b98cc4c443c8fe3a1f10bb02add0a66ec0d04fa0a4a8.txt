(defn fibonacci [n]                 # Defines a function 'fibonacci' that takes in an argument 'n'
  (let [fibs [0 1]                  # Binds the variable 'fibs' to a vector containing the first two numbers of the fibonacci sequence
        i 2]                       # Binds the variable 'i' to a value of 2, used as the index for iteration in the 'while' loop 
    (while (< i n)                 # While loop that runs as long as 'i' is less than or equal to the value of 'n'
      (let [new-fib (+ (fibs (- i 1)) (fibs (- i 2)))]  # Binds the variable 'new-fib' to the sum of the last two numbers in the 'fibs' vector
        (set! fibs (conj fibs new-fib))) # Updates the 'fibs' vector by adding 'new-fib' to the end
      (set! i (inc i))))            # Increments the value of 'i' by 1 after each iteration
  (nth fibs (- n 1)))               # Returns the value at index 'n-1' in the 'fibs' vector, representing the nth number in the fibonacci sequence