(defn factorial [n]
  (if (zero? n)
    1
    (* n (factorial (dec n)))))

(defn fibonacci [n]
  (if (or (zero? n) (= n 1))
    1
    (+ (fibonacci (dec n)) (fibonacci (- n 2)))))

(defn combination [n r]
  (if (or (zero? r) (= n r))
    1
    (/ (* n (combination (dec n) (dec r))) (factorial r))))

(comment "
This code snippet contains three different functions written in Clojure.
The first function calculates the factorial of a given number, the second one 
calculates the n-th Fibonacci number, and the third one calculates the number 
of combinations of r elements from a set of n elements.

Each function uses recursion to compute the desired value, and the if statement 
is used to check for base cases. The else statement, which is not explicitly 
defined, will run if none of the if statements are true.

To use these functions, simply call them with the desired parameters, for example:

(factorial 5) ; Returns 120
(fibonacci 8) ; Returns 21
(combination 10 3) ; Returns 120

Note: In Clojure, all arithmetic operations use prefix notation, where the 
operator is placed before the operands. So instead of writing 5 + 3, we write (+ 5 3).
")