(defn merge-sort 
  "A recursive function that implements the merge-sort algorithm to sort a given list in ascending order."
  [lst] ;; input list to be sorted
  (if (<= (count lst) 1) ;; base case
    lst ;; return the list if it has 1 or less elements
    (let [[left right] (split-at (/ (count lst) 2) lst)
           sorted-left (merge-sort left) ;; recursively sort the left half
           sorted-right (merge-sort right) ;; recursively sort the right half
           result []] ;; empty list to store sorted elements
      (while (and (seq sorted-left) (seq sorted-right))
        ;; use while loop to compare elements from left and right lists
        (if (<= (first sorted-left) (first sorted-right))
          (do ;; add the smaller element to the result list and remove it from the sorted-left list
            (conj! result (first sorted-left))
            (first (drop 1 sorted-left)))
          (do ;; add the smaller element to the result list and remove it from the sorted-right list
            (conj! result (first sorted-right))
            (first (drop 1 sorted-right)))))
      ;; add the rest of the elements from the non-empty list to the result list
      (conj! result (concat sorted-left sorted-right)))))