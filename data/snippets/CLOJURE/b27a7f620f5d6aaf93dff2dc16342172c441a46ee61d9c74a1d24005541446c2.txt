(let [multiples (range 1 100)                ; Defines a range of numbers from 1 to 100
      divisors [3 5]                         ; Sets the divisors as a vector containing the numbers 3 and 5
      fizz "Fizz"                            ; Assigns the value "Fizz" to the variable fizz
      buzz "Buzz"                            ; Assigns the value "Buzz" to the variable buzz
      result (map                              ; Defines a result variable and uses the map function to iterate over the multiples
        (fn [x]                               ; Defines a function that takes in a number
          (cond                                ; Starts a conditional statement
            (and (= 0 (mod x (first divisors))) (= 0 (mod x (second divisors)))) fizzbuzz ; Checks if the number is divisible by both divisors and returns "FizzBuzz"
            (= 0 (mod x (first divisors)))     fizz    ; Checks if the number is divisible by the first divisor and returns "Fizz"
            (= 0 (mod x (second divisors)))    buzz    ; Checks if the number is divisible by the second divisor and returns "Buzz"
            true                                x))     ; Default condition, returns the number
        multiples))                             ; Uses the multiples range as the input for the function
    (doseq [x result]                       ; Uses the doseq function to iterate over the result list
      (println x)))                          ; Prints each value in the result list