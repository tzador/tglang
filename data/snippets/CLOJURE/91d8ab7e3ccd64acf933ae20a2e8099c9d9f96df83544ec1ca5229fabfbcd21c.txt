(defn factorial
    "Calculate the factorial of a given number n"
    [n]
    (if (= n 1)
        1
        (* n (factorial (- n 1)))
    )
)

(defn fibonacci
    "Returns a lazy sequence of fibonacci numbers."
    []
    (letfn [(fib [a b]
                (lazy-seq (cons a (fib b (+ a b)))))]

        (fib 0 1)
    )
)

(defn sum-of-multiples
    "Calculates the sum of all multiples of a given number below a given limit."
    [limit multiple]
    (loop [i 1
           sum 0]
        (if (> i limit)
            sum
            (recur (inc i)
                   (if (= (mod i multiple) 0)
                       (+ sum i)
                       sum
                   )
            )
        )
    )
)

(defn get-prime-factors
    "Calculates the prime factors of a given number n."
    [n]
    (loop [num n
           divisor 2
           factors '()] ; empty list to store factors
        (if (= num 1)
            (reverse factors)
            (if (= (mod num divisor) 0)
                (recur (quot num divisor) divisor ;quotient
                       (cons divisor factors))
                (recur num (inc divisor) factors))))
)