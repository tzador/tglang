;; This is a function that takes in a list and returns a map with the number of occurences of each item in the list
(defn list-to-map [lst]
  ;; First, we define an empty map to store the occurences
  (let [occurrences (hash-map)]
    ;; Next, we use reduce to go through each item in the list and update the map accordingly
    (reduce (fn [acc item]
              (if (contains? acc item)
                ;; If the item already exists in the map, we increment the occurence count by 1
                (update acc item inc)
                ;; Otherwise, we add the item to the map with an initial count of 1
                (assoc acc item 1)))
            occurrences lst)))