(ns my-app.core
    (:require [clojure.string :as str]
              [clojure.data :as data]))

(defn parse-csv [csv-data]
    "Parses a string of CSV data into a vector of maps, using the first row as keys"
    (let [rows (str/split-lines csv-data)
          keys (str/split (first rows) #",")
          data-rows (rest rows)]
          (map (fn [line] (zipmap keys (str/split line #","))) data-rows)))

(defn group-data [data key]
    "Groups a vector of maps by the given key, creating a map with the key as the key and a vector of matching maps as the value"
    (data/group-by #(get % key) data))

(defn sum-column [data key]
    "Sums the values of a specific column in a vector of maps"
    (reduce #(+ %1 (get %2 key)) 0 data))

(def csv-string "Name,Age,Weight\nJohn,25,150\nSarah,30,120\nMichael,35,175")

(def parsed-data (parse-csv csv-string))

(def grouped-data (group-data parsed-data "Age"))

(def sum-weight (sum-column grouped-data "Weight"))

(def output (str "The average weight of people in their 30s is " (/ sum-weight (count (get grouped-data 30))) " pounds."))