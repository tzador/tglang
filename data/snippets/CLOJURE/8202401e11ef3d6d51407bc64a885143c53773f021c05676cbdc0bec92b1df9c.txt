(defn merge-sort [data]
  "Recursive implementation of the merge sort algorithm."
  (let [merge (fn [first-list second-list acc]
                "Merges two lists while maintaining sorting order."
                (if (empty? first-list)
                  (concat acc second-list)
                  (if (empty? second-list)
                    (concat acc first-list)
                    (if (< (first first-list) (first second-list))
                      (recur (rest first-list) second-list (concat acc (list (first first-list))))
                      (recur first-list (rest second-list) (concat acc (list (first second-list))))))))
        split (fn [lst]
                "Splits a list into two halves."
                (let [n (/ (count lst) 2)]
                  [(take n lst) (drop n lst)]))
        merge-sort-recur (fn [lst]
                           "Recursively merges and sorts the halves of a list."
                           (if (<= (count lst) 1)
                             lst
                             (let [[first-half second-half] (split lst)]
                               (merge (recur first-half) (recur second-half) [])))))
    (merge-sort-recur data)))