(defprotocol Burger ; Define a protocol named "Burger"
  
  "Returns the name of the burger"
  (name [burger]  ; Creates the "name" function that takes in a "burger" argument
    (reify Burger ; Use the "reify" macro to implement the "Burger" protocol
      (name [this] "Beef Burger"))) ; Function body that returns the name of the burger

(defrecord CheeseBurger [cheese-type] ; Define a record named "CheeseBurger" with a "cheese-type" field
  Burger ; Implement the "Burger" protocol and use the "Burger" protocol as the parent protocol
  (name [this] ; Use the "name" function from the "Burger" protocol
    (str "Cheese " cheese-type " Burger"))) ; Function body that returns the name of the cheeseburger

(extend-protocol Burger ; Use the "extend-protocol" macro to extend the "Burger" protocol
  ; Add a method for the "name" function that takes in a "Burger" record and returns 
  ; the name of the burger with the "topping" field added
  (name [burger] (str (name burger) " with " (topping burger)))

(defmenu MyMenu ; Define a menu named "MyMenu"
  [Burger] ; Use the "Burger" protocol as the menu's contract
  ; Add a cheeseburger to the menu
  [(CheeseBurger. "American")]) ; Create a new instance of "CheeseBurger" with the specified cheese type and add it to the menu