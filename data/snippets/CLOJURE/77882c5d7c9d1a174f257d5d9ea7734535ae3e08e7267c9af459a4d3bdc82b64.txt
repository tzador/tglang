;;Define a higher-order function called 'map'
(defn map 
  ;;Takes in two arguments, a function 'f' and a sequence 'coll'
  [f coll]
  ;;Checks if the sequence is empty, if so, return an empty sequence.
  (when-let [s (seq coll)]
    ;;Use recursion to iterate through the sequence
    (lazy-seq 
      ;;Returns a lazy-seq (lazy sequence) which allows us to process only as much as needed.
      (if (coll? s)
        ;;If the sequence is a collection, call the function on the first element and recursively call map on the remaining elements.
        (cons (f (first s)) (map f (rest s)))
        ;;If the sequence is not a collection, call the function on the sequence itself.
        (f s))))))