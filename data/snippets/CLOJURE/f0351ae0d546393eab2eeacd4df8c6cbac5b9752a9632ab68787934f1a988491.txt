(defn fibonacci [n]
      "Calculates the nth term in the Fibonacci sequence"
      (if (<= n 1)
        n
        (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
        
(defn memoize [f]
      "Memoizes a function for better performance"
      (let [cache (atom {})]
        (fn [& args]
          (if-let [cached-value (get @cache args)]
            cached-value
            (let [result (apply f args)]
              (swap! cache assoc args result)
              result)))))
              
(defn sum-of-squares [n]
      "Calculates the sum of squares from 1 to n"
      (->> (range 1 (inc n))
           (map #(Math/pow % 2))
           (reduce +)))
           
(def sum (memoize sum-of-squares))
(sum 10) ; output: 385