(defn bubble-sort
  "Implements the bubble sort algorithm to sort a given vector in ascending order."
  [vec]
  (loop [v vec         ;; creating a loop that takes in the vector as input
         swapped false ;; boolean variable to keep track of whether any swaps were made
         n (count vec)  ;; variable to store the length of the vector
         ] 
    (if (and (pos? n) (not swapped))
      v ;; if length of vector is greater than 0 and no swaps were made, return the original vector
      (let [new-vec (vec (take n v))]  ;; create a new vector containing first n elements of the input vector
        (if (or (empty? new-vec)               ;; if new vector is empty
                (= n 1))                       ;; OR length of vector is 1
          v                                   ;; return original vector
          (let [curr (first new-vec)          ;; store first element of new vector as curr
                next (second new-vec)]        ;; store second element of new vector as next
            (if (< curr next)                  ;; if curr is less than next
              (recur (conj (rest new-vec) curr)       ;; swap curr and next, then recurse with updated vector
                     swapped true                ;; set swapped to true
                     (dec n))                     ;; decrease n by 1
              (recur (conj (rest new-vec) next)       ;; else, keep current order and recurse with rest of vector
                     swapped false                ;; set swapped to false
                     (dec n))))                  ;; decrease n by 1
          )))))