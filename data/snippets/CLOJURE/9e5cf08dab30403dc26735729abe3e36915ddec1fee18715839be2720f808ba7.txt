(defn factorial [n]
  "Calculates the factorial of n"
  (if (<= n 1) 1
    (* n (factorial (- n 1)))))

(defn fib [n]
  "Calculates the nth Fibonacci number"
  (condp = n
    0 0
    1 1
    (+ (fib (- n 1)) (fib (- n 2)))))

(defmacro for-loop [init condition update & body]
  "A macro for a basic for loop"
  `(loop [i# ~init]
     (if ~condition
	     (do
	       ~@body
	       (recur ~update))
	     i#)))

(defn- my-filter [pred coll]
  "Filters a collection based on a predicate function"
  (lazy-seq
    (when-let [s (seq coll)]
      (if (pred (first s))
        (cons (first s) (my-filter pred (rest s)))
        (my-filter pred (rest s)))))