;; Define a function that takes in two numbers and returns their product
(defn multiply [num1 num2]
  (* num1 num2))

;; Define a function that takes in a list of numbers and returns the sum
(defn sum [nums]
  (reduce + nums))

;; Define a function that takes in a string and returns it reversed
(defn reverse-string [str]
  (apply str (reverse str)))

;; Define a function that checks if a number is prime
(defn is-prime? [num]
  (if (< num 2)
    false
    (loop [i 2]
      (cond
        (= i num) true
        (zero? (mod num i)) false
        :else (recur (inc i))))))

;; Define a function that calculates the nth Fibonacci number
(defn fibonacci [n]
  (cond
    (zero? n) 0
    (or (= n 1) (= n 2)) 1
    :else (let [seq (take n (iterate (fn [[prev curr]]
                                      [curr (+ prev curr)])
                                    [1 1]))]
            (nth seq (dec n)))))

;; Define a higher-order function that takes in a function and returns a function that applies the input function twice
(defn apply-twice [f]
  (fn [x] (f (f x))))

;; Define a function that checks if a number is even using the apply-twice function
(def is-even? (apply-twice even?))