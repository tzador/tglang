(defn fibonacci [n] ;defines the function with one input parameter, n
  (cond ;checks for different conditions
    (<= n 0) (throw (IllegalArgumentException. "n must be greater than 0")) ;throws an error if n is less than or equal to 0
    (<= n 2) 1 ;returns 1 if n is 1 or 2
    :else (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ;recursively calls the function to calculate the fibonacci sequence
  )
)

(defn -main [& args] ;defines the main function
  (println "Enter the number for which you want to calculate the fibonacci sequence:") ;prints a user prompt message
  (let [input (read-line)] ;reads user input from the command line
    (try ;handles any potential errors
      (let [n (Integer/parseInt input)] ;converts the input to an integer
        (println "The fibonacci sequence for" n "is:")
        (println (fibonacci n))) ;calls the fibonacci function and prints the result
      (catch NumberFormatException e ;handles any formatting errors
        (println "Invalid input. Please enter a valid integer.")))
    (catch Exception e ;handles any other potential errors
      (println "Something went wrong. Please try again."))))