;; Function to multiply two numbers
(defn multiply [x y] 
    "Multiplies two numbers and returns the result" 
    (* x y))
    
;; Function to add three numbers
(defn add [x y z] 
    "Adds three numbers and returns the result" 
    (+ x y z))

;; Function to calculate the factorial of a number
(defn factorial [n] 
    "Calculates the factorial of a number recursively" 
    (if (<= n 1)
        1
        (* n (factorial (- n 1)))))
        
;; Function to check if a number is prime
(defn is-prime [n]
    "Checks if a number is prime or not"
    (if (or (= n 2) (= n 3))
        true
        (and (> n 3) (not (reduce #(or %1 %2) (map #(= (mod n %) 0) (range 2 (inc (Math/floor (Math/sqrt n))))))))))
        
;; Function to convert a string to uppercase
(defn to-uppercase [str]
    "Converts a string to uppercase"
    (apply str (map #(Character/toUpperCase %) str)))

;; Function to calculate the nth Fibonacci number
(defn fibonacci [n]
    "Calculates the nth Fibonacci number recursively"
    (if (or (= n 1) (= n 2))
        1
        (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; Function to sort a list of numbers in ascending order
(defn bubble-sort [nums]
    "Sorts a list of numbers in ascending order using bubble sort"
    (loop [i (count nums)
           nums nums]
        (if (<= i 1)
            nums
            (recur (dec i) (loop [j 0
                                 nums (vec nums)]
                                  (if (<= j (dec i))
                                      (if (> (nth nums j) (nth nums (inc j)))
                                          (recur (inc j) (assoc nums (inc j) (nth nums j) j (nth nums (inc j))))
                                          (recur (inc j) nums))
                                      nums))))))

;; Function to generate a random password
(defn generate-password [length]
    "Generates a random password of specified length"
    (let [all-characters (clojure.string/join (range (int \!) (inc (int \~))))
          password (apply str (repeatedly length #(nth all-characters (rand-int (count all-characters)))))]
        password))