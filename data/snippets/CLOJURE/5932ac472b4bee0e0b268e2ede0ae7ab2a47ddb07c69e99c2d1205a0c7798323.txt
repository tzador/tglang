(defn traverse [[x y]]
  "Function to traverse a given coordinate pair in a grid"
  (if (empty? y)
    (cons x y)
    (lazy-cat (seq x) (traverse (vec (rest y))))))

(defn greedy-search [grid start end]
  "Function to perform a greedy search algorithm on a grid from a given start point to an end point"
  (let [open (cons [start nil] (priority-map (manhattan start end) start))
        closed (ref #{})]
    (loop [route (take 1 open)
           open (rest open)
           closed @closed]
      (if (empty? open)
        (conj route start)
        (let [[current prev] route
              neighbours (remove closed? (traverse (seq current)))
              cost-so-far (+ 1 (get (manhattan current prev)) (get (manhattan current end)))]
        (recur (cons (apply (partial priority-map cost-so-far) neighbours) route)
               (concat neighbours open)
               (apply conj closed neighbours))))))

(println (greedy-search [[1 2 3 4]
                         [5 6 7 8]
                         [9 10 11 12]
                         [13 14 15 16]]
                        [0 0]
                        [3 3]))