(defn parse-csv
  "Takes in a csv string and returns a vector of maps."
  [csv-string]
  (let [csv-data (clojure.string/split csv-string #",")]
    (let [header (first csv-data)
          data (rest csv-data)]
      (let [map-fn (fn [header data] (zipmap header data))]
        (map map-fn header data)))))