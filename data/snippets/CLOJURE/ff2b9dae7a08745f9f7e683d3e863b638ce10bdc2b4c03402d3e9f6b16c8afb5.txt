(ns prime-factors
  "A function that returns the prime factors of a given number"
  (:require [clojure.math.numeric-tower :as math]))

(defn prime-factors
  "Takes a number and returns the prime factors of that number"
  [n]

  ;; Define a helper function that checks if a number is prime
  (defn is-prime?
    "Checks if a number is prime"
    [x]
    (loop [i 2]
      (cond (>= i x) true
            (zero? (rem x i)) false
            :else (recur (inc i)))))

  ;; Use a lazy sequence to generate all possible prime factors
  (defn all-prime-factors
    "Returns a lazy sequence of all possible prime factors of a number"
    [z]
    (let [q (math/floor (math/sqrt z))]
      (cons z (for [i (range 2 (inc q)) :when (is-prime? i) :while (zero? (rem z i))]
                i))))

  ;; Use reduce to find all prime factors of the given number
  (reduce into [] (all-prime-factors n)))