(defn sieve [n]
  "Implements the Sieve of Eratosthenes algorithm to find all prime numbers from 2 to n"
  (let [numbers (repeat n true) ; creates a lazy sequence of n true values
        squared (int (Math/sqrt n)) ; calculates the square root of n
        primes (atom [])] ; creates an atom for storing the prime numbers
    (loop [i 2]
      (cond
        (> i squared) @primes ; if i is greater than the square root, return the prime numbers
        (numbers i) ; if i is true, it's a prime number
          (do
            (swap! primes conj i) ; add i to the list of prime numbers
            (doseq [j (range (* i i) n i)] ; mark all multiples of i as false
              (aset numbers j false)))
          (recur (inc i)))))) ; increment i and repeat the loop