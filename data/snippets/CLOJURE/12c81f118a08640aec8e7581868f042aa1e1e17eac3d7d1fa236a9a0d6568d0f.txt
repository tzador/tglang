(defn make-adder
  "Create a function that adds a given number to the
   argument provided to the function."
  [n]
  (fn [x] (+ x n)))
  
(defn add3
  "Create an adder function that adds 3 to the given argument."
  []
  (make-adder 3))
  
(defn add5
  "Create an adder function that adds 5 to the given argument."
  []
  (make-adder 5))
  
(defn add7
  "Create an adder function that adds 7 to the given argument."
  []
  (make-adder 7))
  
(defn compose
  "Create a function that takes in multiple functions and
   returns a function that is the composition of all the
   functions provided."
  [& fs]
  (fn [& args]
    (let [res (apply (last fs) args)]
      (reduce (fn [acc f] (f acc)) res (reverse (rest fs))))))
 
(defn partial
  "Create a function that takes in a function and a fixed argument
   and returns a function that applies the function to the fixed
   argument and the argument provided to the returned function."
  [f arg]
  (fn [& args]
    (apply f arg args)))
    
(def add8 (partial + 8))

(defn double
  "Create a function that doubles the given argument."
  [x]
  (* x 2))

(defn square
  "Create a function that squares the given argument."
  [x]
  (* x x))
  
(defn factorial
  "Create a function that calculates the factorial of a given number."
  [n]
  (reduce * (range 1 (inc n))))

(defn odd-numbers
  "Create a function that returns a lazy sequence of odd numbers
   starting from the given argument."
  [n]
  (iterate #(+ % 2) (inc (* 2 n))))