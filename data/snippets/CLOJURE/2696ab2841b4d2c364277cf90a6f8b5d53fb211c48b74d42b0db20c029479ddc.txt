(defn factor [n]
   "Calculates the factorial of n"
   (if (zero? n)
       1
       (* n (factor (dec n)))))

(defn selections [n items]
   "Returns all possible selections of items of size n"
   (if (zero? n)
       #{[]}
       (for [i (range (count items))]
         (let [x (nth items i)]
           (for [s (selections (dec n) (take i items) (drop (inc i) items))]
             (cons x s))))

(defn is-even [num]
   "Checks if a given number is even"
   (if (zero? (mod num 2))
       true
       false))

(defn product [lst]
   "Calculates the product of all numbers in a given list"
   (reduce * lst))

(defn fibonacci [n]
   "Generates the first n numbers in the Fibonacci sequence"
   (loop [i 0, a 0, b 1, result ()]
     (if (= i n)
         (reverse result)
         (recur (inc i) b (+ a b) (conj result b)))))

(defn quicksort [lst]
   "Sorts a list using the quicksort algorithm"
   (if (empty? lst)
       ()
       (let [pivot (first lst)
             smaller (filter #(<= % pivot) (rest lst))
             larger (filter #(> % pivot) (rest lst))]
         (concat (quicksort smaller) [pivot] (quicksort larger)))))

(defmacro do-times [n & body]
   "Executes the given code block n times"
   `(do ~@(take (* n 2) (cycle body))))