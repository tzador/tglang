(defn count-seen [x]
  "Counts the number of times a value has been seen in a sequence."
  (loop [counter 0
         seen {}]
    (if (sequential? x)
      (reduce (fn [cnt val]
                (if-not (seen val)
                  (assoc seen val true)
                  (recur (inc cnt) seen)))
              counter x)
      (do
        (when (seen x)
          (recur (inc counter) seen))
        counter))))

;; Example usage:
(count-seen [1 1 2 3 1 2 4 5 5 6 4 3]) 
;; -> 6