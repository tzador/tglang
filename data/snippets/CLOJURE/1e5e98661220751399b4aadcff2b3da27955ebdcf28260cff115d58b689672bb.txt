(defn fib [n]
  "Calculates the n-th Fibonacci number."
  (if (<= n 1)
    n
    (+ (fib (- n 1)) (fib (- n 2)))))

(defn filter-map [pred fn coll]
  "Applies fn to all elements of coll that satisfy pred,
  returning a sequence of the results."
  (loop [res [] coll coll]
    (if (empty? coll)
      res
      (let [current (first coll)]
        (if (pred current)
          (recur (conj res (fn current)) (rest coll))
          (recur res (rest coll)))))))

(defn merge-lists [lists]
  "Merges multiple lists into one, sorted by the provided comparator function."
  (if (empty? lists)
    nil
    (.reduce (fn [acc[xs1 xs2]] (let [sorted (sort (concat xs1 xs2))]
                                  (concat acc sorted)))
             (sort (first lists)) (rest lists))))