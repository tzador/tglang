(defn get-fib-sequence [n]              ;; Define function that takes a number `n` as an argument
  (def current-nums [0 1])              ;; Define a local variable `current-nums` as a vector
  (loop [i 1                             ;; Start a loop that will iterate `n` times, with `i` starting at 1
         seq [0 1] [nth seq (- i 1)]     ;; Bind `seq` to the last two elements in `current-nums` vector
         (nth seq (- i 2))]              ;; Bind `prev` to the last element in `current-nums` vector
    (if (= i n)                         ;; If we have reached desired number of iterations
      (reverse current-nums)           ;; Return the reverse of `current-nums` vector
      (recur (inc i)                    ;; Otherwise, call `recur` with incremented `i` and updated `seq` vector 
             (conj seq (+(nth seq (- i 1)) (nth seq (- i 2))))))) ;; Add the sum of last two elements of `seq` to `current-nums` vector
(get-fib-sequence 10)                   ;; Call function with input value of 10 to get a sequence of Fibonacci numbers