(defn fib
  "Calculates the Fibonacci number at position n.
   Uses recursion with memoization for more efficient computation."
  [n]
  (let [cache (atom {0 0, 1 1})]
    (if (contains? @cache n)
      (get @cache n)
      (let [ans (+ (fib (- n 1)) (fib (- n 2)))]
        (swap! cache assoc n ans)
        ans))))