(defn find-prime
 "This function finds and returns the nth prime number"
[n]
(let [primes (atom [2]) ; initialize atom with a vector containing 2 as the first prime number
      i 3 ; set counter to start at 3
      is-prime? (fn [num] ; define a helper function to check if a number is prime
                  (not-any? #(zero? (mod num %)) @primes))] ; checks if any number in "primes" divides "num" evenly
  (while (< (count @primes) n) ; loop until nth prime is found
    (if (is-prime? i) ; check if current number is prime
      (swap! primes conj i)) ; if so, add to "primes" vector
    (set! i (inc i)))) ; increment counter
  (last @primes) ; return last element of "primes" vector (nth prime)
)