(defn bfs
  "Performs a breadth-first search on a given graph starting from a given node.
  Takes in a graph represented as a map and the starting node.
  Returns a vector of traversed nodes in the order they were visited."
  [graph start]
  (loop [queue [start]      ;initialize queue as a vector with start node
         visited #{start}  ;initialize visited set with start node
         result []]       ;initialize result vector to store traversed nodes
    (if (empty? queue)    ;if queue is empty, return result vector
      result
      (let [node (first queue)                         ;first element in queue
            neighbors (get graph node #{})             ;all neighbors of node
            unvisited (difference neighbors visited)]  ;unvisited neighbors
        (recur (concat (rest queue) unvisited)         ;add all unvisited neighbors to queue
               (into visited unvisited)                ;update visited set
               (conj result node))))))                  ;add node to result vector after visiting it