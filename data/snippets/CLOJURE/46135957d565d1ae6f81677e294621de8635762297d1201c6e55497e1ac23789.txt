(defn merge-with-avg
  [f a b]
  (f a b))

(defn update-average
  [k v m]
  (merge-with-avg
    (fn [a b] (/ (+ a b) 2))
    m
    (hash-map k v)))

(let [students (atom {})
      fname (atom "John")
      lname (atom "Doe")]
  (reset! students
          (assoc @students
                 :fname @fname
                 :lname @lname))
  (swap! students update-average :math 95)
  (swap! students update-average :science 85)
  (atom->map @students))

; Output:
; This is a code snippet in CLOJURE language which defines two functions, `merge-with-avg` and `update-average`.
; The `merge-with-avg` function takes in three parameters, `f`, `a`, and `b`, and returns the result of calling function `f` with parameters `a` and `b`.
; The `update-average` function takes in three parameters, `k`, `v`, and `m`, and uses the `merge-with-avg` function to update the value associated with key `k` in the map `m` with the new value `v`.
; In the next line, we create two atoms `fname` and `lname` with initial values "John" and "Doe" respectively.
; Then, we create an atom `students` with an empty map as its initial value.
; Using the `reset!` function, we update the value of `students` by adding a new key `:fname` with the value of `fname` atom and a new key `:lname` with the value of `lname` atom.
; Next, we use the `swap!` function to update the average value of the key `:math` with a score of 95 and the average value of the key `:science` with a score of 85.
; Finally, we use the `atom->map` function to convert the `students` atom into a regular map and print it as the output.
; Since we used the `swap!` function, the `students` atom will also be updated with the new values.
(defn merge-with-avg
  [f a b]
  (f a b))

(defn update-average
  [k v m]
  (merge-with-avg
    (fn [a b] (/ (+ a b) 2))
    m
    (hash-map k v)))

(let [students (atom {})
      fname (atom "John")
      lname (atom "Doe")]
  (reset! students
          (assoc @students
                 :fname @fname
                 :lname @lname))
  (swap! students update-average :math 95)
  (swap! students update-average :science 85)
  (atom->map @students))