;; This function calculates the factorial of a given number
(defn factorial [n] "Calculates the factorial of n"
  (if (<= n 1)
   1
   (* n (factorial (- n 1)))))

;; This function calculates the nth Fibonacci number
(defn fibonacci [n] "Calculates the nth Fibonacci number"
  (if (<= n 1)
   n
   (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; This function checks if a number is prime
(defn prime? [n] "Checks if n is a prime number"
  (loop [i 2]
    (if (>= i n)
      true
      (if (= 0 (mod n i))
        false
        (recur (inc i))))))

;; This function generates a list of prime numbers up to a given limit
(defn gen-primes [limit] "Generates a list of prime numbers up to limit"
  (let [nums (range 2 limit)
        primes []]
    (doseq [i nums]
      (if (prime? i)
        (conj primes i)))
    primes))