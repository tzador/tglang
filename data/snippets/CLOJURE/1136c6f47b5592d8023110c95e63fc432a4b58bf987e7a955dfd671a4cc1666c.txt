(ns app.core
    (:require [clojure.java.io :as io]
              [clojure.string :as str]))

(defn encode-string [string]
    "Encodes a string by converting it to the UTF-8 format."
    (let [encoded-string (.getBytes string "UTF-8")
          formatted-string (str/join "," encoded-string)]
        formatted-string))

(defn read-file [file-path]
    "Reads the contents of a file and returns an encoded string."
    (let [file (.io/file file-path)
          file-contents (io/slurp file)]
        (encode-string file-contents)))

(defn write-file [file-path contents]
    "Writes contents to a file, overwriting any existing contents."
    (io/make-parents file-path)
    (let [file (.io/file file-path)
          encoded-contents (encode-string contents)]
        (.write file encoded-contents)))

(defn main []
    "Main function that reads a file, modifies its contents, and writes the modified contents to a new file."
    (let [input-file "input.txt"
          output-file "output.txt"]
        (let [file-contents (read-file input-file)
              modified-contents (str/replace file-contents "Hello" "Hello World")]
            (write-file output-file modified-contents)))))

(defn -main []
    "Entry point function that calls the main function."
    (main))