(defn palindrome? [str] ; Defining a function with a parameter str
  (let [rev (clojure.string/reverse str)] ; Creating a variable rev which holds the reversed version of the input string
    (= str rev))) ; Comparing the input string with the reversed string and returning true or false if they are equal

(defn longest-palindrome [str] ; Defining a function with a parameter str
  (let [n (count str) ; Creating a variable n which holds the length of the input string
        palindromes (filter palindrome? (map #(subs str %) ; Creating a list of all possible substrings of the input string
                             (for [i (range n) j (range i n)] [i (inc j)])))] ; Using range function to generate all possible substrings indices
    (apply max-key count palindromes))) ; Applying max-key function to get the longest palindrome from the list of substrings

(defn print-longest-palindrome [str] ; Defining a function with a parameter str
  (let [longest-palindrome (longest-palindrome str)] ; Creating a variable that holds the longest palindrome from the input string
    (printf "The longest palindrome in '%s' is '%s'" str longest-palindrome))) ; Printing the input string and the longest palindrome using printf function

(comment ; Adding a comment to explain the code
  (print-longest-palindrome "racecar") ; Calling the function with the input string "racecar"
  ; Output: The longest palindrome in 'racecar' is 'racecar'
)

(comment
  (print-longest-palindrome "madamimadam") ; Calling the function with the input string "madamimadam"
  ; Output: The longest palindrome in 'madamimadam' is 'madamimadam'
)