(defn get-combinations
  "Returns a vector of all possible combinations given a set and a size."
  [set size]
  (if (or (nil? set) (zero? size))
    [[]] ; base case, empty set or size 0 returns empty combination
    (concat
      ;; first recursive call, without current element of set
      (get-combinations (rest set) size)
      ;; second recursive call, with current element of set
      (map #(cons (first set) %) (get-combinations (rest set) (dec size))))))