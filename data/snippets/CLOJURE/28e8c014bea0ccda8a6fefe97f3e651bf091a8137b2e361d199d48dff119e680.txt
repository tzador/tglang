(defn bubble-sort [lst]                        ; define a function with parameter 'lst'
   (let [length (count lst)                     ; use 'let' to bind 'length' to the size of 'lst'
         swapped (atom false)]                  ; use 'atom' to declare a mutable boolean 'swapped', set initial value to false
     (loop [i 0]                                ; use 'loop' to iterate over indices of 'lst', start at index 0
       (loop [j 0]                              ; use nested 'loop' to track position of current element
         (if (< j (- length i 1))                ; use 'if' to check if position is within range
           (do (when (< (nth lst j) (nth lst (+ j 1)))              ; use 'when' to check if current element is greater than next element
                 (let [temp (nth lst j)]         ; use 'let' to bind 'temp' to current element
                   (reset! (nth lst j)           ; use 'reset!' to update current element
                           (nth lst (+ j 1)))    ; use 'nth' to get next element, use '+j1' to get index of next element
                   (reset! (nth lst (+ j 1)) temp) ; use 'reset!' to update next element with 'temp'
                   (reset! swapped true)))        ; use 'reset!' to update 'swapped' to true
             (recur (inc j))))                    ; use 'recur' to increment current position by 1
         (when-not @swapped                       ; use 'when-not' to check if 'swapped' is false
           @lst)))                                ; use 'nth' to get sorted 'lst'
       (when (< i (- length 1))                    ; use 'when' to check if current index is within range
         (recur (inc i))                           ; use 'recur' to increment current index by 1
         (reset! swapped false))))                ; use 'reset!' to reset 'swapped' to false if inner 'loop' completes
         
(bubble-sort [3 5 1 4 2])                        ; call 'bubble-sort' function with unsorted list as argument, output: [1 2 3 4 5]