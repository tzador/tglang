(defn list-sort [lst]
  "Takes in a list and sorts it using the quicksort algorithm"
  (let [pivot (first lst)]                                           ; set the pivot element to the first element in the list
    (if (empty? lst)                                                  ; check if the list is empty
      nil                                                             ; if list is empty then return nil
      (apply concat                                                    ; else apply concat function to three lists
        (list-sort                                                     ; recursively call list-sort function on smaller elements than pivot
          (filter (partial < pivot) (rest lst)))                       ; filter out elements smaller than pivot and pass it into list-sort
        (filter (partial = pivot) lst)                                 ; filter out elements equal to pivot and add it to resultant list
        (list-sort                                                     ; recursively call list-sort function on larger elements than pivot
          (filter (partial > pivot) (rest lst)))))))                    ; filter out elements larger than pivot and pass it into list-sort

(list-sort [4 2 10 7 3])                                              ; function call with an unsorted list