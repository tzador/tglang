(ns my-project.core
  (:require [clojure.string :as str]))

(defn get-first-letter
  "Takes in a string and returns the first letter"
  [s]
  (str/split s #"")[0])

(defn process-primes
  "Takes in a list of numbers and returns the sum of all prime numbers"
  [numbers]
  (reduce + (filter #(= (count (range 1 (inc %))) 2) numbers)))

(defn nested-map
  "Takes in an nested map and returns a flat map"
  [m]
  (reduce (fn [acc [key value]]
            (reduce-kv
              (fn [inner-acc inner-key inner-value]
                (assoc inner-acc (str key "/" inner-key) inner-value))
              acc value))
          {} m))

(comment

  (println (get-first-letter "Hello, world!"))
  ;; Output: H

  (def primes [2 3 5 7 11 13 17 19])
  (println (process-primes primes))
  ;; Output: 77 (2 + 3 + 5 + 7 + 11 + 13 + 17 + 19)

  (def nested-map
    {:animals {:dog "Rex" :cat "Fluffy"}
     :people {:john "Smith" :jane "Doe"}})
  (println (nested-map nested-map))
  ;; Output: {:animals/dog "Rex" :animals/cat "Fluffy" :people/john "Smith" :people/jane "Doe"}
)