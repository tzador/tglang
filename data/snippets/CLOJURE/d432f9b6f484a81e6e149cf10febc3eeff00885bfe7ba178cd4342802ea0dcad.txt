(defn calculate-fib [n]
  "Calculates the nth Fibonacci number using dynamic programming"
  (let [fib-map (atom {})]
    (fn [n]
      (if (contains? @fib-map n)
        (get @fib-map n)
        (if (or (= n 1) (= n 2))
          1
         (let [result (+ (calculate-fib (- n 1)) (calculate-fib (- n 2)))]
          (swap! fib-map assoc n result)
          result))))))

(defn -main []
  "Main function that prompts user for input and calls calculate-fib"
  (println "Enter a number to calculate nth Fibonacci number:")
  (let [user-input (read-line)]
    (println (str "The " user-input "th Fibonacci number is: " (calculate-fib (Integer/parseInt user-input))))))