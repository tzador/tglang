(defn quicksort [coll]
  (if (<= (count coll) 1)
      coll
      (let [pivot (first coll)
            less (filter #(< % pivot) (rest coll))
            greater (filter #(>= % pivot) (rest coll))]
        (concat (quicksort less) [pivot] (quicksort greater)))))
;; creates a function named quicksort that takes in a collection as a parameter
;; if the count of the collection is less than or equal to 1, return the collection
;; otherwise, set the pivot as the first element of the collection
;; filter the rest of the collection to find all elements less than the pivot and store it in a variable named 'less'
;; filter the rest of the collection to find all elements greater than or equal to the pivot and store it in a variable named 'greater'
;; recursively call quicksort on the 'less' collection and concatenate it with the 'pivot' and recursively called quicksort on the 'greater' collection