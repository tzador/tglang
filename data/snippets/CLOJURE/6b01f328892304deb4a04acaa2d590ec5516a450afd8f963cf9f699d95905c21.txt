;; Function that returns the sum of the squares of two numbers
(defn square-sum [x y]
  (let [sq-x (* x x)
        sq-y (* y y)]
    (+ sq-x sq-y)))
  
;; Recursive function that calculates the factorial of a number
(defn factorial [n]
  (if (= n 0)
    1
    (* n (factorial (- n 1)))))
    
;; Function that checks if a string is a palindrome
(defn palindrome? [str]
  (if (= str (clojure.string/reverse str))
    true
    false))
    
;; Function that sorts a list of numbers in ascending order
(defn sort-ascending [nums]
  (sort nums <))
  
;; Example of using a higher-order function to transform a list
(defn double-list [nums]
  (map #(* 2 %) nums))
  
;; Defining and using a record data structure
(defrecord Person [name age occupation])
(def bob (Person. "Bob" 25 "Engineer"))
(println (:name bob)) ;; Output: "Bob"