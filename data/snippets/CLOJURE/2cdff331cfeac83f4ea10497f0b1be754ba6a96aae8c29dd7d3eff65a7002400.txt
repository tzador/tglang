(defn bubble-sort [data]
  "Performs a bubble sort on the given list of data."
  (loop [n (count data)]
    (if (<= n 1)
      data
      (loop [i 0
             swapped? false]
        (if (>= i (dec n))
          (recur (dec n))
          (let [a (nth data i)
                b (nth data (inc i))]
            (if (> a b)
              (do
                (recur (inc i) true)
                (assoc data i b)
                (assoc data (inc i) a))
              (recur (inc i) swapped?))))))))


(defn binary-search [sorted-data target]
  "Performs a binary search on the given sorted list of data."
  (let [lo 0
        hi (dec (count sorted-data))
        mid (quot (+ lo hi) 2)]
    (loop [mid (quot (+ lo hi) 2)]
      (if (>= lo hi)
        false
        (let [data (nth sorted-data mid)]
          (if (= data target)
            true
            (if (> data target)
              (recur lo mid)
              (recur (inc mid) hi))))))))