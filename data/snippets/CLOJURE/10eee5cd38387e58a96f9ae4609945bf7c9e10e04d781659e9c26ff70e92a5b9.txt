(ns my-project.core
  (:require [clojure.string :as str]
            [clojure.set :as set]
            [clojure.java.io :as io]))

(defn calculate-sum [n]
  "Calculates the sum of a range of numbers from 1 to n."
  (reduce + (range 1 (inc n))))

(defrecord Person [name age occupation]
  Object
  (toString [person]
    (str "Name: " name ", Age: " age ", Occupation: " occupation)))

(defn- get-users [file]
  "Gets user data from a CSV file and returns a list of maps."
  (->> (io/resource file)
       io/file
       io/input-stream
       io/reader
       (csv/read-csv {:headers true})
       (map #(zipmap (map keyword (headers %1)) %1))))

(defn- filter-users [users occupation]
  "Filters a list of users by occupation and returns a set of names."
  (set (map :Name (filter #(= (:Occupation %) occupation) users))))

(let [users (get-users "user_data.csv")
      programmers (filter-users users "Programmer")]
  (println (str "Number of programmers: " (count programmers)))
  (doseq [programmer programmers]
    (println (str "Name: " (.name programmer) ", Age: " (.age programmer)))))