(defn set
  "Creates a new set with the given elements."
  [elements]
  (if (empty? elements)
    #{}
    (cons (first elements) (set (rest elements)))))

(defn set-intersection
  "Returns the intersection of sets a and b."
  [a b]
  (apply clojure.set/intersection (lazy-cat [a b])))

(defn set-difference
  "Returns the difference of sets a and b."
  [a b]
  (apply clojure.set/difference (lazy-cat [a b])))

(defn set-union
  "Returns the union of sets a and b."
  [a b]
  (apply clojure.set/union (lazy-cat [a b])))

(defn set-symmetric-difference
  "Returns the symmetric difference of sets a and b."
  [a b]
  (apply clojure.set/sym-diff (lazy-cat [a b])))

(defn set-complement
  "Returns the complement of set a."
  [a]
  (clojure.set/difference (set universe) a))

(defn set-equals?
  "Checks if sets a and b are equal."
  [a b]
  (and (clojure.set/subset? a b)
       (clojure.set/subset? b a)))

(defn set-disjoint?
  "Checks if sets a and b are disjoint."
  [a b]
  (empty? (set-intersection a b)))

(defn set-subset?
  "Checks if set a is a subset of set b."
  [a b]
  (clojure.set/subset? a b))

(defn set-proper-subset?
  "Checks if set a is a proper subset of set b."
  [a b]
  (and (clojure.set/subset? a b)
       (not (clojure.set/subset? b a)))))