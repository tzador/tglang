(defn tree
  "Takes in a list of values and returns a tree structure"
  [lst]
  (let [node (first lst)  ; take first element as root node
        left (take-nth 2 lst)  ; take 2nd element from every index for left subtree
        right (drop 2 lst)]  ; drop first 2 elements for right subtree
    (if (not (empty? lst))  ; check if list is not empty
      {:value node  ; create node hashmap with value
       :left (tree left)  ; recursively call tree function on left subtree
       :right (tree right)} ; recursively call tree function on right subtree
      nil)))  ; if list is empty, return nil