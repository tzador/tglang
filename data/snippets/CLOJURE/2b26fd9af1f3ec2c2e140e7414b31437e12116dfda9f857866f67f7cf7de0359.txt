(ns my-project.core
  (:require [clojure.string :as str]))

(defn search-keys
  "Takes in a string and returns a map with the string split into
   its individual words as keys and their count as values"
  [input-string]
  (let [formatted-string (str/lower-case input-string)
        word-list (str/split formatted-string #"\s+")]
    (reduce (fn [word-map word]
              (if (contains? word-map word)
                (assoc word-map word (inc (word-map word)))
                word-map))
            {} word-list)))

(defn format-text
  "Takes in a string and formats it by removing all special characters,
   punctuation and converting it to lowercase"
  [input-string]
  (let [formatted-string (str/lower-case input-string)
        char-pattern #"[^a-z\s]"
        special-symbols (re-seq char-pattern formatted-string)]
    (loop [new-string formatted-string
           symbol-list special-symbols]
      (if (empty? symbol-list)
        new-string
        (let [symbol (first symbol-list)
              new-string (str/replace new-string symbol "")]
          (recur new-string (rest symbol-list)))))))

(defn count-words
  "Takes in a string and returns a map with each unique word as key and
   its count as value"
  [input-string]
  (let [formatted-string (format-text input-string)
        word-map (search-keys formatted-string)]
    (reduce (fn [new-map [key value]]
              (assoc new-map key value))
            {}
            (sort-by val > word-map))))