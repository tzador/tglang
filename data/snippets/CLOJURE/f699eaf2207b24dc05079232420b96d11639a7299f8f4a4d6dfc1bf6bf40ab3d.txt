(defn recursive-fib [n] ; Define the function "recursive-fib" with input n
  (if (< n 2) ; If n is less than 2
    n ; Return n
    (+ (recursive-fib (- n 1)) (recursive-fib (- n 2))))) ; Return the sum of the two previous values for recursive-fib
 
(defn memoized-fib [n] ; Define the function "memoized-fib" with input n
  (let [cache (atom {0 0, 1 1})] ; Create an atom object "cache" with initial values 0 and 1
    (defn helper [n] ; Define a helper function with input n
      (if (contains? @cache n) ; If the atom cache contains n
        (get @cache n) ; Return the value associated with n
        (let [result (+ (helper (- n 1)) (helper (- n 2)))] ; Calculate the sum of the two previous values of helper
          (swap! cache assoc n result) ; Update the cache atom with the result
          result)))) ; Return the result
 
(loop [n 0 ; Set the initial value of n to 0
       result 0 ; Set the initial value of result to 0
       prev 1] ; Set the initial value of previous to 1
  (when (< n 10) ; When n is less than 10
    (println result) ; Print the result
    (recur (+ n 1) (+ result prev) result))) ; Recur with updated values of n, result, and previous
 
(defn sequence [n] ; Define the function "sequence" with input n
  (if (<= n 1) ; If n is less than or equal to 1
    [0 1] ; Return the sequence [0 1]
    (let [s (sequence (- n 1)) ; Recurse on n-1 and store the value in s
          new (apply + s)] ; Calculate the sum of the sequence
      (conj s new)))) ; Add the new value to the sequence
 
(defn calc-fib [n] ; Define the function "calc-fib" with input n
  (if (<= n 1) ; If n is less than or equal to 1
    [0 1] ; Return the sequence [0 1]
    (let [s (sequence (- n 1)) ; Recurse on n-1 and store the value in s
          new (apply + s)] ; Calculate the sum of the sequence
      (conj s new) ; Add the new value to the sequence
      (apply + s)))) ; Return the sum of the sequence