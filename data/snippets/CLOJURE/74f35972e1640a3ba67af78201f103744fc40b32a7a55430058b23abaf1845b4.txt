;; Function to recursively flatten a nested list
(defn flatten [lst]
  (if (empty? lst)
    () ;; If list is empty, return empty list
    (if (list? (first lst))
      (concat (flatten (first lst)) (flatten (rest lst))) ;; If the first element is a list, recursively flatten it
      (cons (first lst) (flatten (rest lst)))))) ;; Otherwise, cons the first element and recursively flatten the rest of the list

(flatten [[1 [2 3]] [4 [[[5]] 6]]]) ;; => (1 2 3 4 5 6)