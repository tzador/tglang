(defn sum-fib
  "A function that takes in a number 'n' and returns the sum of all fibonacci numbers up to 'n'"
  [n]
  (if (< n 1)
    0
    (let [fib-num (atom [(BigInt. 1) (BigInt. 1)]) ; using 'atom' to store values in a mutable way
          current-sum (atom (BigInt. 2))
          i (atom 3)]
      (loop []
        (swap! fib-num conj (+ @fib-num (nth @fib-num (- @i 1)) (nth @fib-num (- @i 2)))) ; using 'swap!' to update atom values
        (swap! current-sum + @fib-num)
        (if (< @i n)
          (do
            (reset! i (inc @i))
            (recur))
          @current-sum)))))