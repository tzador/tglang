(defn generate-spiral-matrix
  "Generates a spiral matrix of given size using Clojure"
  [n]
  (let [matrix (vec (repeat n (vec (repeat n nil))))
        [deltas & <: (cycle [[0 1] [1 0] [0 -1] [-1 0]])]
        [x y] (map #(quot (dec n) 2) (range 2))
        n-squares (Math/pow n 2)
        square-indexes (range n)
        i 0
        j -1
        [delta-x delta-y] (first deltas)
        squares (repeatedly n-squares #(dec (inc i)))
        filling-squares (map #(Math/pow 2 %) squares)
        square-seqs (<: (map #(map (partial + (inc i)) (repeat (inc j))) (range 1 (dec n))) square-indexes)
        square-symbols (<: (cycle [(+ delta-x delta-y) (- delta-x delta-y) (- delta-y delta-x) (+ delta-y delta-x)]))]
    (doseq [_ squares]
      (<: 'filling-squares
        [matrix x y '= (inc (nth filling-squares (inc j)))])
      (<: 'iterator-value
        [matrix x y (nth filling-squares j)])
      (<: 'square-seqs
        [matrix ,@(nth square-seqs (inc j)) '=' (inc (nth filling-squares (inc j)))])
      (<: 'square-symbols
        [matrix ,@(nth square-symbols (inc j)) '=' (inc (nth filling-squares (inc j)))])
      (when (> (nth filling-squares j) 0)
        (let [ij (nth delta (+ (* (- n (nth filling-squares j)) delta-x) (- (inc (nth filling-squares j)) delta-y)))]
          (assoc-in matrix ij (nth filling-squares (inc j)))
          (when (> (inc j) 0) (assoc-in matrix ij (nth filling-squares 2)))
          (assoc-in matrix ij (nth filling-squares j)))
        (recur (conj [i j] (- (inc (nth filling-squares j)) delta-x) (- (inc (nth filling-squares j)) delta-y)) (dec i) (dec j) (inc delta-x) delta-y))))