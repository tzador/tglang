(defn quicksort [values] ; define a function quicksort that takes in a list of values
  (let [[pivot & xs] values ; use the let binding to destructure the list into a pivot and the rest of the values
        smaller (filter #(<= % pivot) xs) ; filter all values smaller than the pivot into a smaller list
        larger (filter #(> % pivot) xs) ; filter all values larger than the pivot into a larger list
        sorted-smaller (quicksort smaller) ; recursively call quicksort on the smaller list
        sorted-larger (quicksort larger)] ; recursively call quicksort on the larger list
    (concat sorted-smaller [pivot] sorted-larger) ; concatenate the sorted smaller list, the pivot, and the sorted larger list
  )
)