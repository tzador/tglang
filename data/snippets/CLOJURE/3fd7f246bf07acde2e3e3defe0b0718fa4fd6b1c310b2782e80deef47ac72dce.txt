(def fib
  (memoize
    (fn [n]
      (if (<= n 1)
        n
        (+ (fib (- n 1)) (fib (- n 2)))))))

(let [n 10]
  (println (str "The " n "th Fibonacci number is: " (fib n))))

; This code snippet uses Clojure's memoize function to store previously calculated Fibonacci numbers and improve runtime by avoiding repeated calculations.
; First, we define a function called 'fib' which takes in a parameter 'n' representing the desired Fibonacci number.
; Inside this function, we use an if-statement to check if n is less than or equal to 1.
; If it is, we simply return n as it is either 0 or 1.
; Otherwise, we recursively call the 'fib' function with the previous two Fibonacci numbers and add them together.
; Since we are using the memoize function, the result of this recursive call is stored and reused if needed, avoiding repeated calculations.
; Lastly, we use a let-binding to assign the value 10 to the variable n, and then use the println function to print out a string concatenating the value of n and the calculated Fibonacci number.