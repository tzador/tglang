(defn merge-sort [coll]
  "Implements merge-sort algorithm to sort a given collection of numbers"
  (if (<= (count coll) 1)
    coll
    (let [mid     (quot (count coll) 2)
          left  (subvec coll 0 mid)
          right (subvec coll mid)]
      (merge (merge-sort left) (merge-sort right)))))

This code snippet implements the merge-sort algorithm in Clojure, an efficient divide-and-conquer sorting algorithm that has a time complexity of O(n log n).
The `defn` keyword is used to define a function with the name `merge-sort` and the parameter `coll`.
The docstring follows, explaining the purpose of the function.
Next, a conditional statement is used to check if the size of the collection `coll` is less than or equal to 1. If so, the collection is returned as it is.
If not, the collection is broken into two halves and stored in the `left` and `right` variables using the `subvec` function.
Then, the `merge` function is used recursively on the `left` and `right` halves, which are passed to the `merge-sort` function again.
The `merge` function combines the two sorted halves of the collection together to form a sorted collection.
Finally, the sorted collection is returned by the `merge-sort` function.
This code snippet demonstrates the use of recursion and built-in Clojure functions to implement a common algorithm efficiently.