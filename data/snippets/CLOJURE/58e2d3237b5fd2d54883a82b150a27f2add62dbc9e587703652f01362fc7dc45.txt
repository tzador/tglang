(defn reduce-function [x, y]
  (if (empty? y)
      0
      (+ (first y) (reduce-function x (rest y)))))

;; The `reduce-function` takes in two parameters, `x` and `y`, and checks if `y` is empty. 
;; If it is empty, it returns 0, otherwise it adds the first element of `y` to the recursive 
;; call of `reduce-function` with the first element removed from `y`. This continues until 
;; `y` is empty and the final sum is returned.

(reduce-function [1 2 3 4 5]) ; Output: 15