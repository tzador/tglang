(defn- is-prime? ;; create a function to check if a number is prime
  [n] ;; accepts n as an argument
  (if (< n 2) ;; if n is less than 2
    false ;; then it is not a prime number
    (loop [i 2] ;; otherwise start a loop with i starting from 2
      (if (>= i n) ;; if i is greater than or equal to n
        true ;; then n is a prime number
        (if (zero? (rem n i)) ;; else if the remainder of n divided by i is zero
          false ;; then n is not a prime number
          (recur (inc i))))))) ;; otherwise recursively call the loop with i incremented by 1

(defn largest-prime-factor
  [n] ;; create a function to find the largest prime factor of a number
  (loop [i 2 ;; start the loop with i = 2, the smallest prime number
         max-factor nil] ;; create a variable for storing the maximum prime factor
    (if (> i n) ;; if i is greater than n, all possible factors have been checked
      max-factor ;; then return the maximum prime factor found
      (if (zero? (rem n i)) ;; else if the remainder of n divided by i is zero
        (recur (inc i) (max i max-factor)) ;; update the maximum prime factor and increment i
        (recur (inc i) max-factor))))) ;; otherwise just increment i and continue the loop

(largest-prime-factor 600851475143) ;; call the function with the given number to find the largest prime factor