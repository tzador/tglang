(ns clojure.examples
  (:require [clojure.string :as str]))

(defn greatest-common-divisor
    "Calculates the greatest common divisor of two non-negative integers x and y"
    [x y]
    (if (zero? y)
        x
        (recur y (mod x y))))

(defn is-palindrome?
    "Checks if a given string is a palindrome or not"
    [string]
    (let [reversed-string (str/reverse string)]
        (= string reversed-string)))

(defn merge-sort
    "Uses the merge sort algorithm to sort a given vector"
    [vector]
    (let [len (count vector)]
        (if (<= len 1)
            vector
            (let [mid (quot len 2)
                  left (take mid vector)
                  right (drop mid vector)]
                (merge (merge-sort left) (merge-sort right))))))

(defn factorial
    "Calculates the factorial of a given non-negative integer"
    [n]
    (if (<= n 1)
        1
        (* n (factorial (dec n)))))

(defn sum-of-squares
    "Calculates the sum of squares of a given vector of numbers"
    [vector]
    (reduce + (map #(* % %) vector)))

(defmacro defmacro!
    "Defines a custom macro that can be used to create new macros"
    [macro-name args & body]
    `(defmacro ~macro-name ~args ~@body))

(defn memoize
    "Creates a cached version of a given function for faster execution"
    [f]
    (let [mem (atom {})]
        (fn [& args]
            (if-let [e (find @mem args)]
                (val e)
                (let [result (apply f args)]
                    (swap! mem assoc args result)
                    result)))))