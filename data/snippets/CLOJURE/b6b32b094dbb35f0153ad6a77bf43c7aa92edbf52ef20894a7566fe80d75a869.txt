(defn bubble-sort [lst]    ;; defines a function called bubble-sort that takes in a list as an argument
  (loop [lst lst           ;; creates a loop with lst as the initial value
         n (count lst)]    ;; creates a variable n with the value of the length of the list
    (if (> n 1)            ;; checks if n is greater than 1
      (let [sorted (for [[prev curr] (partition 2 1 lst)]    ;; creates a new list with pairs of elements from the original list using the partition function
                    (if (> prev curr)                         ;; checks if the first element is greater than the second element
                      (conj [] curr prev)                    ;; if true, swaps the elements and adds them to the new list
                      (conj [] prev curr)))]                 ;; if false, adds them as is to the new list
        (recur (flatten sorted) (- n 1)))    ;; recursively calls the function with the new sorted list and decreases the value of n by 1
      lst)))                                 ;; returns the list if n is not greater than 1, thus ending the loop