;; This is a function that takes in two parameters, x and y, and returns the sum of the two.

(defn sum [x y]
  "Returns the sum of the two given numbers"
  (+ x y))
  
;; This is a function that takes in a list of numbers and returns the sum of all the numbers.

(defn sum-list [numbers]
  "Returns the sum of all the numbers in the given list"
  (reduce + numbers))
  
;; This is a function that takes in a list of strings and returns the concatenated string.

(defn concat-string [strings]
  "Returns the concatenated string of all the strings in the given list"
  (apply str strings))
  
;; This is a function that takes in a number and checks if it is even or odd.

(defn even-odd [num]
  "Checks if the given number is even or odd"
  (if (even? num)
    "The number is even."
    "The number is odd."))
    
;; This is a function that takes in a list of numbers and returns a list of only even numbers.

(defn even-list [numbers]
  "Returns a list of only even numbers from the given list"
  (filter even? numbers))
  
;; This is a function that takes in a list of strings and returns a map with the length of each string as the key and the string itself as the value.

(defn map-length [strings]
  "Returns a map with the length of each string as the key and the string as the value"
  (into {} (map #(vector (count %) %) strings)))
  
;; This is a function that takes in a map and checks if every value in the map is a keyword.

(defn check-keywords [map]
  "Checks if all the values in the given map are keywords"
  (every? keyword? (vals map)))