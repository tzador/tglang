(ns myproject.core
  (:require [clojure.string :as str]))

(defn sub-matrices
  "Returns a vector of all possible sub-matrices of a given matrix."
  [matrix]
  (let [n (count (first matrix)) ; get size of matrix
        m (count matrix)
        k (Math/log2 m)]         ; calculate log2 of matrix rows/columns
    (loop [results []             ; define empty vector to store results
           i 0                   ; initialize i for looping over rows
           j 0                   ; initialize j for looping over columns
           k (- n 1)]            ; initialize k for calculating sub-matrix size
      (if (>= i n)                ; check if we have reached the end of rows
        results                   ; if so, return results vector
        (recur (conj results
                (loop [sub-matrix []]
                  (if (>= j n)    ; check if we have reached the end of columns
                    sub-matrix    ; if so, return sub-matrix
                    (recur (assoc sub-matrix j (get-in matrix [i j]))
                      (if (= 0 k) ; check if sub-matrix size is 0
                        nil       ; if so, return nil
                        (recur sub-matrix (- j 1))))))
                (if (= 0 k)       ; check if sub-matrix size is 0
                  nil             ; if so, return nil
                  (recur (assoc results j sub-matrix) (- j 1))))
              (if (= 0 k)         ; check if sub-matrix size is 0
                nil               ; if so, return nil
                (recur results (- j 1))))) ; continue looping until all sub-matrices are found
      [+ 1 i]                    ; increment row counter
      [- k 1]                    ; decrement sub-matrix size
      [- j 1])))))               ; decrement column counter