;; Define a function that takes in two parameters, `x` and `y`
(defn add-numbers [x y]
  ;; Use the `apply` function to add `x` and `y` together
  (apply + [x y])

  ;; Spread operator allows for arbitrary number of arguments
  ;; Use `for` loop to iterate through all arguments given
  ;; Use `:when` to only include arguments that are numbers
  ;; Use `count` function to get number of arguments
  ;; Use `+` function to add all the numbers together
  (apply + (for [arg (rest %) :when (number? arg)] arg count) (args))

  ;; Using `loop` and `recur` to perform a recursive operation
  ;; Use `if` statement to check if there are still arguments left
  ;; If so, add the first argument to the running total and call the function again with the rest of the arguments
  ;; If not, return the running total
  (loop [total 0 args (rest %)]
    (if args
      (recur (+ total (first args)) (rest args))
      total)))

;; Run the function with two numbers as arguments
(add-numbers 5 10)