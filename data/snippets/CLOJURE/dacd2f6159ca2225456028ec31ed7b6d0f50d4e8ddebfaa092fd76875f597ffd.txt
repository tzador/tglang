;; Function to check if a number is prime
(defn is-prime [n]
  (cond
    ;; Negative numbers, 0 and 1 are not primes
    (<= n 1) false
    ;; 2 and 3 are primes
    (<= n 3) true
    ;; Other even numbers are not primes
    (even? n) false
    ;; Check for divisibility by odd numbers starting from 3
    :else
    (loop [i 3]
      ;; Check if the number is divisible by the current odd number
      (if (zero? (mod n i))
        ;; If divisible, not a prime
        false
        ;; If not divisible, check the next odd number
        (if (> (* i i) n)
          ;; If the current odd number is greater than the square root of the number,
          ;; then it is prime
          true
          ;; Otherwise, keep checking the next odd number
          (recur (+ i 2)))))))