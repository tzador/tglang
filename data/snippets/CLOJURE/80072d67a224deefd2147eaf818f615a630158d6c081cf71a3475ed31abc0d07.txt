(defn insertion-sort 
   "A sorting function that uses the insertion sort algorithm to sort a given input list"
   ;; Parameters:
   ;;    input-list: the list to be sorted
   ;; Returns:
   ;;    a sorted list
   [input-list]
   ;; a helper function that inserts an element at the correct position in a sorted sublist
   (defn insert-at-index
      "A helper function that takes in an element and a sorted sublist and inserts the element at the correct position in the sublist"
      [element sorted-sublist]
      ;; Checks if the sublist is empty
      (if (empty? sorted-sublist)
         ;; If empty, returns a list with the element
         (list element)
         ;; Otherwise, compares the element with the first element of the sublist
         (let [first-element (first sorted-sublist)]
            (if (< element first-element)
               ;; If element is smaller, inserts it at the beginning of the sublist
               (cons element sorted-sublist)
               ;; Otherwise, recursively calls insert-at-index with the remaining sublist
               (cons first-element (insert-at-index element (rest sorted-sublist)))))))
   ;; applies insert-at-index to each element of the input list to sort the entire list
   (reduce insert-at-index '() input-list))