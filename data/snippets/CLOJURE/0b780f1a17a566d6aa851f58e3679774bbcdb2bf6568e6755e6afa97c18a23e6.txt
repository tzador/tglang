(defn fibonacci [n]                      ; Define a function named "fibonacci" which takes in one parameter "n"
  (let [result (atom [])]                ; Create an atom named "result" with an empty vector as its value
    (if (= n 0)                          ; If n is equal to 0
      (swap! result conj 0)               ; Add 0 to the "result" vector
      (do                                ; Otherwise, do the following:
        (swap! result conj 0)             ; Add 0 to the "result" vector
        (swap! result conj 1)             ; Add 1 to the "result" vector
        (loop [i 2]                      ; Create a loop with "i" starting at 2
          (if (< i n)                    ; If i is less than n
            (do                          ; Do the following:
              (let [a (nth @result (- i 1)) ; Create a binding named "a" with the value at index (i-1) in the "result" vector
                    b (nth @result (- i 2))] ; Create a binding named "b" with the value at index (i-2) in the "result" vector
                (swap! result conj (+ a b))) ; Add the sum of a and b to the "result" vector
              (recur (inc i)))            ; Increment i and repeat the loop
            (do                            ; Otherwise, do the following:
              (let [a (nth @result (- i 1)) ; Create a binding named "a" with the value at index (i-1) in the "result" vector
                    b (nth @result (- i 2))] ; Create a binding named "b" with the value at index (i-2) in the "result" vector
                (swap! result conj (+ a b)))))) ; Add the sum of a and b to the "result" vector
    @result))                             ; Return the final value of the "result" atom