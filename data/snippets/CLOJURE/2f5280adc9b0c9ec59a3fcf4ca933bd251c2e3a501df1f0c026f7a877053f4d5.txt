;; Function to calculate the factorial of a number
(defn factorial [n] 
  (let [result (atom 1)] 
    (doseq [i (range 1 (inc n))] 
      (swap! result * i)) 
    @result)) 

;; Function to check if number is a prime number 
(defn is-prime [n] 
  (loop [i 2] 
    (cond 
      (< i n) (if (= (mod n i) 0) 
                false 
                (recur (inc i))) 
      :else true))) 

;; Function to sum the prime numbers up to n
(defn sum-primes [n] 
  (let [sum (atom 0)] 
    (doseq [i (range 2 (inc n))] 
      (if (is-prime i) 
        (swap! sum + i))) 
    @sum)) 

;; Example usage of the functions
(println (factorial 5)) ;; Output: 120
(println (is-prime 7)) ;; Output: true
(println (sum-primes 10)) ;; Output: 17 (2 + 3 + 5 + 7)