(defn factorial [n]
  "Calculates the factorial of a given number recursively."
  (if (<= n 1)
    1
    (* n (factorial (dec n))))
)

(defn powers-of-two [n]
  (map (fn [x] (Math/pow 2 x)) (range n))
)

(defn calculate-sum [nums]
  "Calculates the sum of numbers in a given list using reduce."
  (reduce + nums)
)

(defn divide [x y]
  "Divides two numbers."
  (/ x y)
)

(defn calculate-average [nums]
  "Calculates the average of numbers in a given list."
  (/ (calculate-sum nums) (count nums))
)

(defn calculate-volume [length width height]
  "Calculates the volume of a rectangular prism."
  (* length width height)
)

(defn calculate-area [length width]
  "Calculates the area of a rectangle."
  (* length width)
)

(defn check-positive [num]
  "Checks if a number is positive."
  (> num 0)
)

(defn find-max [nums]
  "Finds the maximum value in a given list of numbers."
  (apply max nums)
)

(defn check-odd [num]
  "Checks if a number is odd."
  (not (even? num))
)