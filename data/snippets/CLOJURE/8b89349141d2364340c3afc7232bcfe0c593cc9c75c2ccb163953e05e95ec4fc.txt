(ns my-project.core
  (:require [clojure.set :refer [union]]))

(defn count-numbers
  "Takes in a list of numbers and returns the total count"
  [numbers]
  (count numbers))

(defn sum
  "Takes in a list of numbers and returns the total sum"
  [numbers]
  (reduce + numbers))

(defn average
  "Takes in a list of numbers and returns the average"
  [numbers]
  (/ (sum numbers) (count-numbers numbers)))

(defn square
  "Takes in a number and returns the square"
  [num]
  (* num num))

(defn squared-sum
  "Takes in two numbers and returns the squared sum"
  [a b]
  (let [a2 (square a)
        b2 (square b)]
    (+ a2 b2)))

(defn pythagorean-triple?
  "Checks if a, b, and c form a Pythagorean Triple"
  [a b c]
  (= (squared-sum a b) (square c)))

(defn find-pythagorean-triples
  "Finds all Pythagorean Triples with sides less than or equal to a given limit"
  [limit]
  (let [numbers (range 1 limit)
        pairs (for [a numbers
                    b numbers
                    c numbers
                    :when (pythagorean-triple? a b c)]
                [a b c])]
    (distinct pairs)))