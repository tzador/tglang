(defrecord Person [name age]     ; Defines a Person record with name and age fields
  clojure.lang.ILookup
  (valAt [this k]               ; Defines the 'valAt' method for the record
    (case k
      :name (:name this)         ; Returns the value of 'name' field if key is :name
      :age (:age this)))         ; Returns the value of 'age' field if key is :age

  clojure.lang.IAssociative     ; Implements the 'IAssociative' protocol
  (assoc [this k v]             ; Defines the 'assoc' method for the record
    (case k
      :name (assoc this :name v) ; Replaces the value of 'name' field with new value
      :age (assoc this :age v))) ; Replaces the value of 'age' field with new value

  clojure.lang.ISeqable         ; Implements the 'ISeqable' protocol
  (seq [this]                   ; Defines the 'seq' method for the record
    (list (:name this) (:age this)))) ; Returns a list containing the values of 'name' and 'age' fields