(defn- first-part [n] "Generates the first part of the code snippet, takes in a parameter n which is the desired length of the first part."
  (let [str (format "This is the first section with length %s" n)]
    (println str)))

(defn- second-part [n] "Generates the second part of the code snippet, takes in a parameter n which is the desired length of the second part."
  (let [str (format "This is the second section with length %s" n)]
    (println str)))

(defn- third-part [n] "Generates the third part of the code snippet, takes in a parameter n which is the desired length of the third part."
  (let [str (format "This is the third section with length %s" n)]
    (println str)))

(defn generate-code-snippet [n] "Main function that generates the entire code snippet, takes in a parameter n which is the desired length of each section."
  (let [first (first-part n)
        second (second-part n)
        third (third-part n)]
    (str first second third)))

(generate-code-snippet 10) ; Output: This is the first section with length 10
                           ;         This is the second section with length 10
                           ;         This is the third section with length 10
                           ; ^ This is the code snippet generated with each section having a length of 10.