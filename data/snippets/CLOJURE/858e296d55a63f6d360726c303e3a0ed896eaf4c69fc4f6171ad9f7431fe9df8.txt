(defmulti process-transaction (fn [txn] (:type txn)))

(defmethod process-transaction :payment
  [txn]
  (println "Processing payment " (:amount txn) "from " (:sender txn) "to " (:receiver txn))
  (if (= (:currency txn) "USD")
    (println "Converting to EUR")
    (println "No conversion needed"))
  (println "Payment successful")
  txn)

(defmethod process-transaction :transfer
  [txn]
  (println "Processing transfer " (:amount txn) "from " (:sender txn) "to " (:receiver txn))
  (if (> (:balance (:sender-account txn)) (:amount txn))
    (do 
      (println "Deducting" (:amount txn) "from" (:sender) "balance")
      (println "Adding" (:amount txn) "to" (:receiver) "balance"))
    (println "Insufficient funds"))
  (println "Transfer successful")
  txn)

(defmethod process-transaction :withdrawal
  [txn]
  (println "Processing withdrawal " (:amount txn) "from " (:sender txn))
  (if (> (:balance (:sender-account txn)) (:amount txn))
    (do 
      (println "Deducting" (:amount txn) "from" (:sender) "balance")
      (println "Dispensing cash"))
    (println "Insufficient funds"))
  (println "Withdrawal successful")
  txn)

(defmethod process-transaction :deposit
  [txn]
  (println "Processing deposit " (:amount txn) "from " (:sender txn))
  (println "Adding" (:amount txn) "to" (:receiver) "balance")
  (println "Deposit successful")
  txn)