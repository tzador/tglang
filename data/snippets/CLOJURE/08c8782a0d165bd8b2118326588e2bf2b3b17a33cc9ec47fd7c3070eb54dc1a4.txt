(defn quicksort
  "Recursively sorts a given vector using the quicksort algorithm."
  [coll]
  (let [len (count coll)
        pivot (first coll)]
    (if (<= len 1)
      coll
      (let [left (filter #(<= % pivot) (rest coll))
            right (filter #(>= % pivot) (rest coll))]
        (concat (quicksort left) (list pivot) (quicksort right))))))

(defn- merge
  "Helper function that merges two sorted vectors into one sorted vector."
  [v1 v2]
  (loop [res []
         v1-idx (first v1)
         v2-idx (first v2)
         v1-left (next v1)
         v2-left (next v2)]
    (if (and v1-idx v2-idx)
      (if (< v1-idx v2-idx)
        (recur (conj res v1-idx) (first v1-left) v2-idx v1-left (next v2))
        (recur (conj res v2-idx) v1-idx (first v2-left) (next v1) v2-left))
      (concat res v1-left v2-left))))

(defn mergesort
  "Recursively sorts a given vector using the mergesort algorithm."
  [coll]
  (let [mid (/ (count coll) 2)]
    (if (<= mid 1)
      (quicksort coll)
      (let [[left right] (split-at mid coll)]
        (merge (mergesort left) (mergesort right))))))

(defn selection-sort
  "Sorts a given vector using the selection sort algorithm."
  [coll]
  (loop [res []
         left coll]
    (if (empty? left)
      res
      (let [min-idx (apply min-key (fn [idx] (nth left idx 0)) (range (count left))) ; find index of minimum element
            min-val (nth left min-idx)] ; get value of minimum element
        (recur (conj res min-val) (vec (remove #(= % min-val) left))))))) ; add minimum element to sorted list and remove it from remaining list