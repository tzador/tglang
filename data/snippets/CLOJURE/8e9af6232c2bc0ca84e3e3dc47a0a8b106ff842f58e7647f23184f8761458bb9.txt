(ns my-namespace
  (:require [clojure.string :as str])) ; Require the clojure string library

(defn is-same-length [str1 str2]
  "Checks if two strings have the same length"
  (let [length1 (count str1) ; Use the count function to get the length of str1
        length2 (count str2) ; Use the count function to get the length of str2
        result (if (= length1 length2) ; Check if length1 and length2 are equal
                 true ; If they are equal, set result to true
                 false)] ; If they are not equal, set result to false
    result)) ; Return the value of result

(comment ; Begin a commented section

  (defn concat-strings [strs]
    "Concatenates a list of strings into a single string"
    (reduce str "" strs)) ; Use the reduce function to combine the strings, starting with "" as the initial value

  (defn wrap-string [str char]
    "Wraps a string in the given character"
    (str (str char) str (char str))) ; Use the str function to concatenate the character with the string, then concatenate the string with the character again

  (defn replace-vowels [str]
    "Replaces all vowels in a string with the character '*'"
    (let [vowels #{"a" "e" "i" "o" "u"} ; Define a set of vowels
          result (reduce #(str/replace %1 %2 "*") str vowels)] ; Use the reduce function to replace all vowels in the string with "*"
      result)) ; Return the value of result

  (defn get-fibonacci-sequence [n]
    "Generates the first n numbers in the Fibonacci sequence"
    (let [fib-seq [0 1] ; Initialize the first two numbers in the sequence
          result (loop [i 2] ; Use a loop to generate the remaining numbers in the sequence
                   (if (= i n) ; Check if i has reached the desired number of values
                     fib-seq ; If yes, return the current sequence
                     (let [new-val (+ (last fib-seq) (nth fib-seq (- i 2)))] ; Calculate the next Fibonacci number
                       (recur (inc i) (conj fib-seq new-val)))))] ; Use recur to update the loop with the new sequence
      result)) ; Return the value of result

  (defn get-primes [n]
    "Finds all prime numbers up to n"
    (let [result (set (range 2 n 1)) ; Create a set of numbers from 2 to n
          sieve (loop [i 2] ; Use a loop to sieve out non-prime numbers
                  (if (< (* i i) n) ; Check if i squared is less than n
                    (recur (inc i) (disj result (range (* i i) n i))) ; Remove multiples of i from the set
                    result)))] ; Once i squared is greater than n, return the remaining numbers in the set as prime numbers
      result))) ; Return the value of result