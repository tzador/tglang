(defn check-same? [lst]
  "Takes a list of values and checks if they are all the same"
  (reduce #(if (= %1 %2) %1 (reduced false)) lst))

(defn vector-index [lst value]
  "Returns the index of a given value in a vector"
  (loop [idx 0
         vec (vector)
         v (seq value)]
    (if (= vec value) idx
        (recur (inc idx) (conj vec v)))))

(defn flatten-tree [tree]
  "Flattens a nested list into a single list"
  (filter #(not (nil? %)) (for [x tree] (if (coll? x) (flatten-tree x) x)))) 
(defn capitalize-names [names]
  "Capitalizes the first letter of each name in a list"
  (map #(str/capitalize (subs % 0 1)) names))

(defn reverse-map [f coll]
  "Returns a map with keys as the original values and values as the result of applying the function f"
  (into {} (for [[k v] coll] [v (f k)])))

(defn fizzbuzz [n]
  "Takes a number and returns the appropriate fizzbuzz output"
  (cond
   (zero? (mod n 15)) "FizzBuzz"
   (zero? (mod n 3)) "Fizz"
   (zero? (mod n 5)) "Buzz"
   :else n))