(defn count-pairs-with-sum [lst sum] ; This is a function definition that takes a list and a sum as arguments
  (loop [remaining lst ; This is the loop with bindings for remaining list
         count 0 ; Integer variable to count the number of pairs found
         total sum] ; Variable to keep track of the remaining sum to be found
    (if (empty? remaining) ; Base case
      count ; If list is empty, return the total count of pairs found
      (loop [rest (rest remaining) ; Inner loop with bindings for rest of list
             x (first remaining)] ; Binding for the current number
        (if (> x total) ; If current number is greater than remaining sum
          (recur rest x) ; Move on to the next number in list
          (if (= (+ x (first rest)) total) ; If current number and first number in rest of list equals remaining sum
            (recur (rest remaining) count (+ x (first rest))) ; Call loop with rest of list and updated count and total
            (recur rest count total))))))) ; Otherwise, just move on to the next number and keep the current count and total the same