(require '[clojure.string :as str])

(defn frequency
  "Returns a map of characters to their frequencies in a given string."
  [s]
  (reduce (fn [acc c]
            (update acc c (fnil inc 0)))
          {}
          (str/split s #"")))

(defn scoring-system
  "Calculates a score based on the frequencies of each character in a given string."
  [s]
  (let [freq-map (frequency s)]
    (reduce (fn [score [c f]]
              (condp = c
                \a (+ score (f * 5))
                \e (+ score (f * 4))
                \i (+ score (f * 3))
                \o (+ score (f * 2))
                \u (+ score (f * 1))
                score))
            0
            freq-map)))

(defn vowel-score
  "Calculates the total vowel score of a given string."
  [s]
  (let [score-map (frequency s)]
    (reduce (fn [v-score [c f]]
              (if (contains? "aeiouAEIOU" c)
                (+ v-score f)
                v-score))
            0
            score-map)))

(defn average-score
  "Calculates the average score of a given list of strings."
  [str-list]
  (let [total (reduce + (map scoring-system str-list))
        num-of-strings (count str-list)]
    (/ total num-of-strings)))