~~~clj
(defn recursion
    [n]
    (if (= n 0)
        1
        (* n (recursion (- n 1)))))
    ;; define a function called 'recursion' that takes in a parameter 'n'
    ;; if 'n' is equal to 0, return 1
    ;; otherwise, return the product of 'n' and the result of calling recursion again with 'n' decremented by 1
    ;; this creates a recursive loop that will continue until 'n' eventually becomes 0
    ;; the final result will be the factorial of the original 'n' value
~~~