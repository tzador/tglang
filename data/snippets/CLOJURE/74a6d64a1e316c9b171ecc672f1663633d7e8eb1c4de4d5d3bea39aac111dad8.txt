(defn add [a b] ; defines a function called "add" that takes in two parameters, a and b
	(+ a b)) ; uses the addition operator to add the two parameters and returns the result
; this is a comment and will not be executed
(defn double [num] ; defines a function called "double" that takes in one parameter, num
	(* 2 num)) ; multiplies the parameter by 2 and returns the result
(defn factorial [n] ; defines a function called "factorial" that takes in one parameter, n
	(if (<= n 1) ; checks if the parameter is less than or equal to 1
		1 ; if true, returns 1
		(* n (factorial (dec n))))) ; if false, recursively calls the factorial function with the parameter decreased by 1 and multiplies it with the current parameter
(defn nth-fib [n] ; defines a function called "nth-fib" that takes in one parameter, n
	(if (or (= n 1) (= n 2)) ; checks if the parameter is equal to either 1 or 2
		1 ; if true, returns 1
		(+ (nth-fib (dec n)) (nth-fib (- n 2))))); if false, recursively calls the nth-fib function with the parameter decreased by 1 and added to the result of recursively calling the nth-fib function with the parameter subtracted by 2
(add 5 10) ; calls the add function with parameters 5 and 10, result is 15
(double 5) ; calls the double function with parameter 5, result is 10
(factorial 5) ; calls the factorial function with parameter 5, result is 120
(nth-fib 8) ; calls the nth-fib function with parameter 8, result is 21