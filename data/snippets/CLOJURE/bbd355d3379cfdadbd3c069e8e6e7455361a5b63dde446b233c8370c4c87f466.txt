;; Define a function that takes in a list of numbers
(defn sum [numbers]
  ;; Use the reduce function to add all the numbers in the list
  (reduce + numbers))

;; Define a recursive function that checks if a number is even
(defn is-even? [n]
  ;; Use the modulo operator to check if the number is divisible by 2
  (if (= n 0)
    true
    (odd? (- n 1))))

;; Define a function that takes in a string and reverses its order
(defn reverse-string [str]
  ;; Use the loop function to iterate through the string
  (loop [i (count str) reversed ""]
    ;; Base case: if the index is 0, return the reversed string
    (if (= i 0)
      reversed
      ;; Recursive call: add the character at index i-1 to the reversed string
      (recur (dec i) (str (subs str i (inc i)) reversed)))))

;; Define a map that contains information about a person
(def person {:name "John Doe"
             :age 30
             :occupation "Programmer"})

;; Define a function that checks if a person is older than a given age
(defn is-older? [person age]
  ;; Retrieve the age from the person map using the :age keyword
  (> (:age person) age))