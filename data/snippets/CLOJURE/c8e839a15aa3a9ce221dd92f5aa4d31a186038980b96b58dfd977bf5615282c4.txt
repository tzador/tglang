(defn merge-sorted [coll1 coll2]
  "Merges two sorted collections in O(n) time."
  (let [result (transient []) ; create a transient vector to hold the sorted result
        sorted-coll1 (seq coll1) ; convert the first collection to a sequence
        sorted-coll2 (seq coll2) ; convert the second collection to a sequence
          ] ; closing bracket for the let expression
    (loop [c1 sorted-coll1 ; set the first collection as the initial value for c1
           c2 sorted-coll2 ; set the second collection as the initial value for c2
           result result] ; set the initial result vector as the initial value for result
      (cond ; use a conditional to handle different cases
        (and (empty? c1) (empty? c2)) (persistent! result) ; if both collections are empty, return the persistent result vector
        (empty? c1) (recur nil (rest c2) (conj! result (first c2))) ; if c1 is empty, add the first element of c2 to the result vector and recur with c1 = nil and c2 = rest of c2
        (empty? c2) (recur (rest c1) nil (conj! result (first c1))) ; if c2 is empty, add the first element of c1 to the result vector and recur with c1 = rest of c1 and c2 = nil
        (< (first c1) (first c2)) (recur (rest c1) c2 (conj! result (first c1))) ; if the first element of c1 is smaller, add it to the result vector and recur with c1 = rest of c1 and c2 = c2
        :else (recur c1 (rest c2) (conj! result (first c2)))))) ; if none of the above cases apply, the first element of c2 must be smaller, so add it to the result vector and recur with c1 = c1 and c2 = rest of c2