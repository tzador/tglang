;;

(defn merge-sort [coll]
  "Sorts a collection in ascending order using the merge sort algorithm.
  Takes a sequence of comparable values as input."
  (let [len (count coll)
        ;; Divide into two parts
        mid (quot len 2)
        l (take mid coll)
        r (drop mid coll)
        ;; Recursively sort left and right parts
        sorted-l (if (> (count l) 1) (merge-sort l) l)
        sorted-r (if (> (count r) 1) (merge-sort r) r)]
    (loop [[l & ls] sorted-l
          [r & rs] sorted-r
          sorted []]
      (if (and l r)
        ;; Compare left and right elements and append smaller one to sorted list
        (if (< l r) (recur ls sorted (conj sorted l))
          (recur sorted rs (conj sorted r)))
        ;; If one empty, append the rest of the other list to sorted list
        (conj sorted (concat l r))))))

(;; Uncomment and execute to test the code
;;(merge-sort [5 3 7 2 1])
;; Expected output: (1 2 3 5 7)