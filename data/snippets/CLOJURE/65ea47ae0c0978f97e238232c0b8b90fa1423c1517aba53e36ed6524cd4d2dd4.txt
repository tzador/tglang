(defn merge-sort [coll]
  (if (<= (count coll) 1)
    coll
    (let [[left right]
          (split-at (/ (count coll) 2) coll)]
      (let [l-res (merge-sort left)
            r-res (merge-sort right)]
        (merge l-res r-res)))))
; Function that implements the merge sort algorithm in Clojure.
; Takes in a collection as input, and returns a sorted collection.
; Starts by checking if the length of the collection is less than or equal to 1.
; If so, the collection is already sorted and is returned.
; Otherwise, the collection is split into two halves.
; The left and right halves are recursively sorted using merge-sort.
; The resulting sorted halves are then merged together using the merge function.