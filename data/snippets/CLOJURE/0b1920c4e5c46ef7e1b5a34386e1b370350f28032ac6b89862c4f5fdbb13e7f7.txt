(defn calculate-fib [n] ;Defines a function named `calculate-fib` which takes one argument `n`
  (let [fib-map {1 1 ;Creates a map with `1` as keys and `1` as values
                 2 1}] ;Adds another key-value pair to the map
    (if (fib-map n) ;Checks if the map contains the key `n`
      (get (fib-map n) ;If the key exists, get its corresponding value
           n)
      (+ (calculate-fib (- n 1)) ;If the key is not found, recursively call the function with `n-1` as the argument and add it to
         (calculate-fib (- n 2)))))) ;the result of recursively calling the function with `n-2` as the argument