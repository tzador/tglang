(defn map-multiply
  "Takes in a vector of numbers and a multiplier
  and returns a vector of the original numbers multiplied by the multiplier."
  [numbers multiplier]
  (map #(* % multiplier) numbers))

(map-multiply [1 2 3 4 5] 2)
;; => [2 4 6 8 10]

(map-multiply [3.2 4.7 2.1] 0.5)
;; => [1.6 2.35 1.05]

(map-multiply [5 10 15] -1)
;; => [-5 -10 -15]

;; Further examples:
(map-multiply (range 10) 3)
;; => [0 3 6 9 12 15 18 21 24 27]

(map-multiply [2 4 6 8] (fn [x] (* x x)))
;; => [4 16 36 64]

(map-multiply (map #(+ % 1) [5 10 15]) -2)
;; => [-12 -22 -32]