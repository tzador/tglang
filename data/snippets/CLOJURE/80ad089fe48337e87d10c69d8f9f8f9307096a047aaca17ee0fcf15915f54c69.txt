(defn merge-sort [coll]
  (if (<= (count coll) 1)
    coll
    (let [[left right] (split-at (/ (count coll) 2) coll)]
      (merge-with append (merge-sort left) (merge-sort right)))))

(defn merge-with [f coll1 coll2]
  (loop [result []
         coll1 coll1
         coll2 coll2]
    (if (empty? coll1)
      (concat result coll2)
      (if (empty? coll2)
        (concat result coll1)
        (let [head1 (first coll1)
              head2 (first coll2)]
          (if (< head1 head2)
            (recur (conj result head1) (rest coll1) coll2)
            (recur (conj result head2) coll1 (rest coll2))))))))

;; The merge-sort function takes in a collection and uses recursion to split the collection into smaller sub-collections.
;; It then merges these sub-collections back together in sorted order, using the merge-with function.
;; The merge-with function takes in a function (f) and two collections and merges them together by applying the function to each element.
;; The loop function is used to iterate over the collections and build the resulting sorted collection.
;; The result collection starts off as empty and the merge-sort function is called recursively until the collection has been sorted.
;; The merge function is used to combine the left and right sub-collections by appending them together.
;; Once the collection has been sorted, the result is returned as the final sorted collection.