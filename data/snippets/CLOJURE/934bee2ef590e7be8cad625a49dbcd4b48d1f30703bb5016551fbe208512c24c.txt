;; Define a function that takes in a list of numbers and returns the product of all the elements
;; Takes in a parameter 'lst' which is a list of numbers
(defn product [lst]
  ;; Define a helper function that will be used recursively to calculate the product
  ;; Takes in two parameters: 'nums' which is the current list of numbers being multiplied together,
  ;; and 'prod' which is the current product
  (letfn [(calculate-product [nums prod]
            ;; If the list is empty, return the current product
            (if (empty? nums)
              prod
              ;; Otherwise, multiply the first element in the list with the current product and call the
              ;; helper function again with the remaining elements and the new product
              (calculate-product (rest nums) (* (first nums) prod))))]

    ;; Call the helper function with the initial list and a product of 1
    (calculate-product lst 1)))