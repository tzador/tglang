(letfn [(factorial [n] (if (<= n 1)
                        1
                        (* n (factorial (- n 1))))) ; function to calculate factorial using recursion
        (sum [nums] (reduce + nums)) ; function to find sum of a list of numbers
        (flatten [nested] (filter (complement coll?) nested)) ; function to flatten a nested list
        (singleton? [x] (= 1 (count x))) ; function to check if a list has a single item
        (double [n] (* 2 n))] ; function to double a number

    (println "Factorial of 5:" (factorial 5)) ; prints "Factorial of 5: 120"
    (println "Sum of [1 2 3]:" (sum [1 2 3])) ; prints "Sum of [1 2 3]: 6"
    (println "Flattened list:" (flatten [1 [2 3] [4 [5]]])) ; prints "Flattened list: [1 2 3 4 5]"
    (println "Is [1] a singleton list:" (singleton? [1])) ; prints "Is [1] a singleton list?: true"
    (println "Double of 5:" (double 5))) ; prints "Double of 5: 10"