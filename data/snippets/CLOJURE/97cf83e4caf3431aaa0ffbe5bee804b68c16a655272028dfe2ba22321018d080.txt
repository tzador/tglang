(defn power-set
 "Returns the power set of a given set using a recursive
  algorithm."
 [s]
 (if (empty? s)
   #{#{}}
   (let [ps (power-set (next s))]
    (reduce
      (fn [sets x]
        (union sets (into (set #{#{x}})
                          (map conj ps))))
      #{} s))))

(defn combination
 "Calculates the number of possible combinations given a
  set's size and the number of elements to include.
  Uses factorials to calculate combinations."
 [n k]
 (letfn [(fact [x]
           (if (zero? x)
             1
             (* x (fact (dec x)))))
         (comb [n k]
           (/ (fact n)
             (* (fact k)
               (fact (- n k)))))]
   (comb n k)))

(def memoized-combinations (memoize combination))
(def partial-combinations (partial memoized-combinations
                                   (count (power-set #{1 2 3}))))
 
(partial-combinations 2)