;; Define a function that checks if a given input is a prime number
(defn prime-number? [n]
  (if (< n 2)
    false
    (loop [i 2]
      (if (= n i)
        true
        (if (zero? (mod n i))
          false
          (recur (inc i)))))))

;; Define a function that takes in a list of numbers and returns a list of their prime factors
(defn prime-factors [nums]
  (let [factors (for [n nums
                      :while (prime-number? n)]
                  n)]
    (if (empty? factors)
      []
      (cons (first factors)
            (prime-factors (remove #(zero? (mod % (first factors))) nums))))))

;; Call the function with a list of numbers
(prime-factors [24 36 41 63 81])