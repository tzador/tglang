(ns my-namespace
  (:require [clojure.string :as str]))

(defn my-func [x y] ; This function takes in two parameters, x and y
  (let [z (str/upper-case (str/join " " [x y])) ; The variables z is set to the upper case string of the joined x and y
        a {:a 1 :b 2 :c 3} ; Creates a map with key-value pairs
        b (assoc a :d 4) ; The map is updated with a new key-value pair
        c (if (> z "HELLO WORLD") ; Checks if z is greater than the string "HELLO WORLD"
           (str "Z is greater than HELLO WORLD") ; If z is greater, the string is returned
           (str "Z is not greater than HELLO WORLD")) ; Otherwise, this string is returned
        d (do ; Executes multiple forms in sequence
           (def foo 10) ; The variable foo is set to 10
           (def bar 20) ; The variable bar is set to 20
           (+ foo bar)) ; The sum of foo and bar is returned
        e (for [i (range 10) ; Creates a loop that iterates through the range from 0 to 9
               :when (even? i)] ; Condition that only includes even numbers in the loop
           (* i 2))] ; The loop multiplies each even number by 2 and returns a list of the results
    (println c) ; Prints out the value of variable c
    (println d) ; Prints out the value of variable d
    (println e))) ; Prints out the value of variable e