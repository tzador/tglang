;; This is a function that takes in a list and calculates the product of all the elements in the list.
(defn calculate-product [lst]
  (apply * lst))

;; This function calculates the sum of all numbers from 1 to n.
(defn calculate-sum [n]
  (loop [x 1, sum 0]
    (if (> x n)
      sum
      (recur (inc x) (+ sum x)))))

;; This function returns the factorial of a given number.
(defn factorial [n]
  (if (<= n 1)
    1
    (* n (factorial (dec n)))))

;; This is a recursive function that checks if a given number is prime.
(defn is-prime? [n]
  (cond
    (<= n 1) false
    (= n 2) true
    (even? n) false
    :else (loop [i 3]
            (if (<= i (int (Math/sqrt n)))
              (if (zero? (mod n i))
                false
                (recur (+ i 2)))
              true))))