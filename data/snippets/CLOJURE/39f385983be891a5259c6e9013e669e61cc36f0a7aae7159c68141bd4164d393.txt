(ns my-app.core
  (:require [clojure.string :as str]))

(defn get-names-with-keyword
  ;; This function takes in a collection of names and a search keyword
  ;; and returns a list of names containing that keyword.

  ;; Params:
  ;; names - the collection of names to search through
  ;; keyword - the search keyword to look for

  [names keyword]
  (filter #(str/includes? % keyword) names))

(defn get-unique-names
  ;; This function takes in a collection of names and removes any duplicates.

  ;; Params:
  ;; names - the collection of names to remove duplicates from

  [names]
  (set names))

(defn get-sorted-names
  ;; This function takes in a collection of names and sorts them in alphabetical order.

  ;; Params:
  ;; names - the collection of names to be sorted

  [names]
  (sort names))

(defn print-names
  ;; This function takes in a collection of names and prints each name on a new line.

  ;; Params:
  ;; names - the collection of names to be printed

  [names]
  (doseq [name names]
    (println name)))

;; Example usage:

(def names ["John" "Alice" "Bob" "Chris" "Diana" "Alana" "Max" "Jen"])
(let [keyword "a"]
  (-> names
    (get-names-with-keyword keyword)
    (get-unique-names)
    (get-sorted-names)
    (print-names)))