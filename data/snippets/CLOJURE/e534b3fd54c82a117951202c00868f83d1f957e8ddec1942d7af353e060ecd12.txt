(defn custom-partition
  "Partitions a sequence into sub-sequences using a custom predicate function"
  [pred coll]
  (let [initial (list)
        result (loop [x coll]
                 (if (empty? x) (flatten initial)
                     (let [idx (first x)
                           rest (next x)
                           pass? (pred rest)]
                       (if pass? (recur rest)
                           (let [part (partition-by pass? rest)]
                             (recur (first part) (conj initial (vec idx (flatten (rest part))))))))))
        last (first result)]
    (map #(vec %) (conj initial (mapcat #(cond (and (list? (first %)) ; Checks if it is a sub-list
                                                   (list? (second %))) ; Checks if both sub-lists
                                          (cons (flatten (vec last)) (vec %)) ; Merge nested lists
                                          (list? (second %)) ; Checks if only second list is nested
                                          (vec last) ; Simply merge the two lists
                                          :else ; Otherwise
                                          (vec %)) result))))