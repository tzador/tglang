(defn fib [n] ;;Defines a function named 'fib' that takes in a single parameter 'n'
  (let [terms [0 1] ;;Creates a local variable 'terms' with list values 0 and 1
        count 1 ;;Creates a local variable 'count' with value 1
        result []] ;;Creates an empty list
    (while (< count n) ;;Creates a loop that runs while 'count' is less than 'n'
      (let [first (last terms) ;;Creates a local variable 'first' that takes the last element of 'terms'
            second (get terms 1)] ;;Creates a local variable 'second' that takes the second element of 'terms'
        (set! terms [(+ first second) first]) ;;Replaces 'terms' with a list containing the sum of 'first' and 'second' and 'first' as the first element
        (dosync ;;Executes the subsequent code in a transactional context
          (if (>= (count terms) 3) ;;Checks if the count of 'terms' is greater than or equal to 3
            (do (deref result) (conj! result first)) ;;Replaces 'result' with the dereferenced value and adds 'first' to 'result'
            (conj! result (first terms)))) ;;Adds the first element of 'terms' to 'result'
        (swap! #(assoc %1 %2 (nth result %2)) #{count})) ;;Updates the value at the key 'count' in the map 'result' with the value at index 'count' in 'result'
      (swap! inc count))) ;;Increments the value of 'count' by 1
    result)) ;;Returns the final value of 'result'

(fib 10) ;;Calls the 'fib' function with input 10 and prints the result