(defn fibonacci [n] ; define a function named "fibonacci" that takes in one parameter, n
  (let [cache (atom {0 0, 1 1})] ; create a mutable state with an empty hashmap as its initial value
    (loop [i 2] ; start a loop with i initialized to 2
      (if (>= i n) ; if i is greater than or equal to n, stop the loop
        (do ; do the following:
          (if (= i n) ; if i is equal to n
            (swap! cache assoc i (+ (nth @cache (dec i)) (nth @cache (- i 2)))) ; add the last two values in the hashmap and store it in the hashmap under the key i
            )
          (nth @cache n) ; return the value for key n from the hashmap
          )
        (do ; if i is not greater than or equal to n
          (swap! cache assoc i (+ (nth @cache (dec i)) (nth @cache (- i 2)))) ; add the last two values in the hashmap and store it in the hashmap under the key i
          (recur (inc i)) ; repeat the loop by incrementing i by 1
          )
        )
      )
    )
  )