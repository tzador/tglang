(defn sum [x y]
      (+ x y))

(defn multiply [x y]
      (* x y))

(defn power [x y]
      (if (= y 0)
        1
        (* x (power x (dec y)))))

(defn factorial [n]
      (if (<= n 1)
        1
        (* n (factorial (dec n)))))

(defn fibonacci [n]
      (if (<= n 2)
        1
        (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(defn is-prime [n]
      (loop [d 2]
        (if (<= d (Math/sqrt n))
          (if (zero? (mod n d))
            false
            (recur (inc d)))
          true)))

(defn palindrome? [s]
      (= s (clojure.string/reverse s)))

(defn count-vowels [s]
      (count (re-seq #"aeiou" s)))

(defn count-consonants [s]
      (count (re-seq #"[^aeiou]" s)))