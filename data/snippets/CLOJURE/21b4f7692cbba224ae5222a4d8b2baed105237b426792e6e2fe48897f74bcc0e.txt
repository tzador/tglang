(defn factorial [n] "Function that calculates the factorial of a given number"
  (if (= n 0)
    1
    (* n (factorial (- n 1))))) ;Recursive call to the factorial function
       
(defn fibonacci [n] "Function that calculates the nth term in the Fibonacci sequence"
  (if (or (= n 0) (= n 1))
    n
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ;Recursive call to the fibonacci function
       
(defn merge-sort [list] "Function that implements the merge sort algorithm"
  (let [mid (quot (count list) 2)
        left (take mid list)
        right (drop mid list)
        merge-list (fn [left right] "Function that merges two sorted lists"
                     (if (empty? left)
                       right
                       (if (empty? right)
                         left
                         (if (< (first left) (first right))
                           (conj (merge-list (rest left) right) (first left))
                           (conj (merge-list left (rest right)) (first right))))))]
    (if (<= (count list) 1)
      list
      (merge-list (merge-sort left) (merge-sort right)))))