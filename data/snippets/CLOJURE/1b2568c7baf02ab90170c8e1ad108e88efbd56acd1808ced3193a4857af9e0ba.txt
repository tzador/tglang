(defn factorial [n]                             ; Define a function named factorial that takes a single argument n
  (let [fact (atom 1)]                           ; Create an atom called fact and initialize it to 1
    (doseq [i (range 1 (inc n))]                ; Iterate through numbers from 1 to n (inclusive)
      (swap! fact * i))                         ; Update the value of fact atom by multiplying it with i
    @fact))                                      ; Return the final value of the fact atom

(defn get-sum [a b]                              ; Define a function named get-sum that takes two arguments a and b
  (let [result (+ a b)]                           ; Create a local variable result and assign it the sum of a and b
    (cond                                        ; Conditional statement
      (< result 10) (* a b)                      ; If result is less than 10, return the product of a and b
      (even? result) (* a b)                     ; If result is even, return the product of a and b
      :else (+ a b))))                           ; If none of the conditions are met, return the sum of a and b

(defn generate-powers [n]                         ; Define a function named generate-powers that takes a single argument n
  (loop [i 0]                                     ; Loop through values of i, starting from 0
    (if (< i n)                                   ; Condition: if i is less than n
      (do                                         ; Execute the following expressions as a single unit
        (println (Math/pow 2 i))                  ; Print the power of 2 raised to the value of i
        (recur (inc i))))))                       ; Increment i and repeat the loop

; Call the functions and print the output
(println (factorial 5))                           ; Output: 120
(println (get-sum 3 5))                           ; Output: 15
(generate-powers 10)                              ; Output: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512