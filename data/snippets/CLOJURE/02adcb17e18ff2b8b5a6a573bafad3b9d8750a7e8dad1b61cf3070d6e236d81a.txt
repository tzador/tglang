(defn get-positive-odd-integers
  "Returns a lazy sequence of positive odd integers less than or equal to n."
  [n]
  (let [get-next-odd (fn [i] (+ i 2))]
    (if (zero? n)
      nil
      (lazy-seq (cons 1 (map get-next-odd (range 3 n 2)))))))

(defn sum-list
  "Returns the sum of all elements in a list."
  [lst]
  (if (empty? lst)
    0
    (+ (first lst) (sum-list (rest lst)))))

(defmacro defn-with-log
  "Defines a new function that logs the input arguments and output of the original function."
  [fn-name & body]
  `(defn ~fn-name [& args#]
     (let [result# ~@body]
       (println fn-name "called with args:" args#)
       (println "Result:" result#)
       result#)))

(defmacro defmemo
  "Defines a memoized version of a function using a hashmap to store the results."
  [fn-name & body]
  (let [cache (atom {})]
    `(defn ~fn-name [& args#]
       (let [cached-result# (@cache args#)]
         (if cached-result#
           (println fn-name "returned from cache with args:" args#)
           (let [result# ~@body]
             (println fn-name "called with args:" args#)
             (println "Result:" result#)
             (swap! cache assoc args# result#)
             result#))))))

;; Examples:

(defn my-sum
  "Calculates the sum of three numbers using the defn-with-log macro."
  [a b c]
  (defn-with-log my-sum-body (+ a b c)))

(my-sum 1 2 3)
; Result: 6
; Output:
; my-sum called with args: (1 2 3)
; Result: 6

(defmemo my-sum-memo
  "Calculates the sum of three numbers using the defmemo macro."
  [a b c]
  (defmemo my-sum-memo-body (+ a b c)))
  
(my-sum-memo 1 2 3)
; Result: 6
; Output:
; my-sum-memo called with args: (1 2 3)
; Result: 6