(defn vector-sum [v] ; Defines a function called "vector-sum" with a parameter "v"
  (reduce + v)) ; Reduces the vector using the addition operator to get the sum

(defn vector-sum-recursive [v] ; Defines a function called "vector-sum-recursive" with a parameter "v"
  (if (empty? v) ; If the vector is empty
    0 ; Return 0
    (+ (first v) (vector-sum-recursive (rest v))))) ; Otherwise, add the first element to the result of recursively calling the function on the rest of the vector

(defn vector-average [v] ; Defines a function called "vector-average" with a parameter "v"
  (/ (vector-sum v) (count v))) ; Divides the sum of the vector by the number of elements in the vector to get the average

(defn vector-multiply [v num] ; Defines a function called "vector-multiply" with parameters "v" and "num"
  (map #(* % num) v)) ; Multiplies each element in the vector by the given number using the map function

(defn vector-reverse [v] ; Defines a function called "vector-reverse" with a parameter "v"
  (reduce conj '() v)) ; Reduces the vector by adding each element to an empty vector, effectively reversing the order of the elements

(defn vector-index-of [v item] ; Defines a function called "vector-index-of" with parameters "v" and "item"
  (loop [i 0 v v] ; Creates a loop with an initial index of 0 and a vector parameter
    (if (empty? v) ; If the vector is empty
      nil ; Return nil (item not found)
      (if (= (first v) item) ; If the first element is equal to the given item
        i ; Return the index
        (recur (inc i) (rest v)))))) ; Otherwise, increment the index and recursively call the loop on the rest of the vector