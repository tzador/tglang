;; This code snippet is a function that takes in two lists of numbers and returns
;; the sum of the squares of the elements in each list. It makes use of higher
;; order functions and threading macros.

;; Define the function called "sum-squares" which takes in two parameters, "list1" and "list2"
(defn sum-squares [list1 list2]
  ;; Use the "map" higher order function to square each element in "list1"
  ;; and store the result in a new list called "squared-list1"
  (let [squared-list1 (map #(* % %) list1)
        ;; Use the "map" higher order function to square each element in "list2"
        ;; and store the result in a new list called "squared-list2"
        squared-list2 (map #(* % %) list2)]
    ;; Use the "reduce" higher order function to sum all the elements in "squared-list1"
    ;; and store the result in a variable called "sum1"
    (let [sum1 (reduce + squared-list1)
          ;; Use the "reduce" higher order function to sum all the elements in "squared-list2"
          ;; and store the result in a variable called "sum2"
          sum2 (reduce + squared-list2)]
      ;; Use the "+" function to add "sum1" and "sum2" and return the result
      (+ sum1 sum2))))
      
;; Call the "sum-squares" function with two lists
(sum-squares [1 2 3] [4 5 6]) ;; Output: 91