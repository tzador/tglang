(ns clojure-snippet.core
  (:require [clojure.string :as str]))

;; Define a function to calculate the average of a list of numbers
(defn average [numbers]
  (float (/ (apply + numbers) (count numbers))))

;; Define a function to convert a string to lowercase and remove all non-alphabetical characters
(defn clean-string [text]
  (str/replace (str/lower-case text) #"[^a-z]" ""))

;; Define a function to check if a given string is a palindrome
(defn palindrome? [text]
  (= (clean-string text) (str/reverse (clean-string text))))

;; Define a recursive function to calculate the factorial of a given number
(defn factorial [n]
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

;; Define a memoized version of the factorial function (using Clojure's built-in memoization)
(defn memoized-factorial [n]
  (let [factorial (memoize (fn [n] (if (<= n 1) 1 (* n (factorial (- n 1))))))]
    (factorial n)))

;; Define an anonymous function to calculate the sum of squares from 1 to n
((fn [n]
  (let [numbers (range 1 (inc n))]
    (apply + (map #(* % %) numbers))))
5)

;; Define a function that takes a predicate function and a list, and returns a new list with only the elements that satisfy the predicate
(defn filter [pred coll]
  (if (empty? coll)
    '()
    (let [first-element (first coll)
          rest-elements (rest coll)]
      (if (pred first-element)
        (cons first-element (filter pred rest-elements))
        (filter pred rest-elements)))))

;; Define a higher-order function that takes a function and a value, and applies the function to the value n times
(defn n-times [f n]
  (fn [x]
    (nth (iterate f x) n)))

;; Define a partial application of the n-times function with the factorial function and a value of 5
(def factorial-5 (n-times factorial 5)))