(ns some.namespace
  (:require [clojure.string :as str]))

(defn factorial [n]
  "Calculates the factorial of a number"
  (cond
    (zero? n) 1
    (= 1 n) 1
    :else (* n (factorial (dec n)))))

(defn get-fibonacci-sequence [n]
  "Returns the first n numbers in the Fibonacci sequence"
  (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))

(defn reverse-string [s]
  "Reverses the given string"
  (str/reverse s))

(defmacro with-benchmark [expr]
  "Measures the execution time of the given expression"
  `(let [start-time# (System/currentTimeMillis)
         result# ~expr]
     (println "Execution Time:" (- (System/currentTimeMillis) start-time#))
     result#))
     
(defrecord Person [name age]
  Object
  (toString [this]
    (str "Name: " (:name this) ", Age: " (:age this)))
  IPrintable
  (print [this]
    (with-out-str
      (print "Name: " (:name this) ", Age: " (:age this)))))