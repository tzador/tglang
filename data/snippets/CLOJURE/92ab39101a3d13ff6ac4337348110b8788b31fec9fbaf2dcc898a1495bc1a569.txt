(defn shuffle [deck]
  (loop [remaining deck
         shuffled []]
    (if (empty? remaining)
      shuffled
      (let [random-index (rand-int (count remaining))
            next (nth remaining random-index)
            new-remaining (remove #(= % next) remaining)
            new-shuffled (conj shuffled next)]
        (recur new-remaining new-shuffled)))))