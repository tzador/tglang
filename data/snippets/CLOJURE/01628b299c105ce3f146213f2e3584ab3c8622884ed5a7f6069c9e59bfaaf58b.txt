(ns example.core
  (:refer-clojure :exclude [+= -])
  (:require
    [clojure.string]
    [clojure.math :as math])
  (:import (java.util Date Timer TimerTask)))

(defn get-sum [a b]
  "Calculates the sum of a and b and returns the result.
  Takes two arguments, a and b."
  (+ a b))

(defn get-fib-seq [n]
  "Creates a sequence of the first n Fibonacci numbers.
  Takes one argument, n."
  (let [fib-seq (fn [a b]
                  (lazy-seq (cons a (fib-seq b (+ a b)))))]
    (fib-seq 0 1)))

(defn do-something [x]
  "Performs some operation on x and returns the result.
  Takes one argument, x."
  (for [i (range x)
       :when (even? i)]
    (reduce + i)))

(declare some-func)

(defn do-something-else [y]
  "Performs a different operation on y and returns the result.
  Takes one argument, y."
  (loop [num y
         result 1]
    (if (zero? num)
      result
      (recur (dec num) (* result num)))))

(defn some-func [a b]
  "A helpful function that takes two arguments, a and b,
  and returns a list with the results of calling do-something
  and do-something-else on those arguments."
  (let [sum (get-sum a b)
        fib-seq (get-fib-seq sum)
        other-result (do-something b)]
    [fib-seq other-result]))

(comment "This program demonstrates some basic functions and data structures in Clojure.
It includes functions for calculating sums, generating sequences, and performing operations on numbers.
The program also showcases the use of loop and recur for iterative calculations.
Note: the output of these functions will depend on the arguments provided."