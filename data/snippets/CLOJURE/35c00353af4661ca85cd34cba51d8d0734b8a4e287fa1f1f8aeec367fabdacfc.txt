(defn power-set
  "Takes in a list and returns the power set (a set of all possible
  combinations) of that list. The implementation uses recursion and a
  helper function to generate all subsets. The result is represented as a
  list of lists. Example: (power-set [1 2 3]) results in [[1] [2] [3] [1 2]
  [1 3] [2 3] [1 2 3]]"

  [lst]
  (letfn [(gen-subsets [lst res]
            (if (empty? lst)
              (list res)  ;; add the last empty list
              (concat
                (gen-subsets (rest lst) (conj res (first lst))) ;; recur with next element added into subset
                (gen-subsets (rest lst) res)) ;; recur without adding next element into subset
              ))]
    (gen-subsets lst (list))))