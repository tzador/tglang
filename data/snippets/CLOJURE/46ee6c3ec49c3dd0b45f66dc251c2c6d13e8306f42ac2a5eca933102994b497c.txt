;; This function takes in two vectors of numbers and returns a map containing the sum and product of the two vectors

(defn sum-product [vector1 vector2]
  ;; Define the helper function to recursively iterate through the vectors
  (defn sum-product-helper [vector1 vector2 index sum product]
    ;; Condition for terminating recursion
    (if (= index (count vector1))
      ;; Return map with sum and product as values
      {:sum sum :product product}
      ;; Update sum and product values with current indices of vectors
      (recur vector1 vector2
        (inc index)
        (+ sum (get vector1 index))
        (* product (get vector2 index)))))

  ;; Call helper function with initial index, sum and product values
  (sum-product-helper vector1 vector2 0 0 1))