(defn filter [pred coll]
 "Takes a predicate pred and a collection coll and returns
a lazy sequence of the items in coll for which
(pred item) returns logical true." ;; Annotating the function
  (when-let [s (seq coll)] ;; When-let binding for sequence of coll
    (if (pred (first s)) ;; If the predicate of the first element s evaluates as true
      (lazy-seq-cons
        (first s) ;; Cons the first element of sequence to lazy-seq-cons lazy sequence
                  (filter pred (rest s))) ;; Recursively filter the rest of the sequence
      (filter pred (rest s))))) ;; If the predicate is false, return a filtered lazy sequence of the rest of coll