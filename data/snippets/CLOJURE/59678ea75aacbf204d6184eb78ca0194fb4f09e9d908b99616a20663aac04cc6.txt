(defn bubble-sort [arr]                  ;Define function with input parameter 'arr'
  (let [n (count arr)                     ;Define local variable 'n' as count of input array
        swapped (volatile! false)]       ;Define volatile variable 'swapped' with initial value 'false'
    (dotimes [_ (dec n)]                  ;Loop n-1 times
      (dotimes [i (dec n)]                ;Loop n-1 times
        (if (> (arr i) (arr (inc i)))     ;If current element is greater than next element
          (do (let [temp (arr i)]         ;Define local variable 'temp' as current element
                (vreset! (arr i) (arr (inc i)))    ;Swap current and next element
                (vreset! (arr (inc i)) temp)       ;Set next element as temp
                (vreset! swapped true))))          ;Set 'swapped' variable as true
        (when-not @swapped                ;If 'swapped' is not true
          (return @arr))))                ;Return the sorted array