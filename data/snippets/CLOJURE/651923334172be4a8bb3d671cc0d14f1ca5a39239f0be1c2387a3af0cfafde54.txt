(defn add-values [x y]
  "This function takes in two numbers x and y, and adds them together."
  (+ x y))
  
(let [nums (range 1 6)]
  "This let block creates a range of numbers from 1 to 5 and assigns it to the variable nums"
  (apply concat (map #(repeat % %) nums)))
  
(map #(str "Number " %) (range 5))
  "This map function takes a range of numbers from 0 to 4 and maps each number to a string that says 'Number' followed by the number itself."
  
(defprotocol Animal
  "This protocol defines the basic functions for an animal."
  (speak [animal] "Prints out the sound the animal makes")
  (eat [animal food] "Takes in a food and prints out what the animal eats"))
  
(defrecord Dog [name age color]
  "This record defines a Dog with name, age, and color properties and implements the Animal protocol."
  Animal
  (speak [animal]
    (println (str (:name animal) " says woof!")))
  (eat [animal food]
    (println (str (:name animal) " eats " food))))