(defmacro unless [pred a b]
  "Evaluates body `b` if `pred` is not truthy."
  `(if (not ~pred) ~b ~a))

(defmacro my-cond [& clauses]
  "An implementation of the traditional conditional statement using Clojure's `cond`."
  (when clauses
    (let [[pred body] (first clauses)
          else (gensym)
          remaining (next clauses)]
      `(if ~pred ~body
         (if (and (seq ~remaining) (not (= ~else (first ~remaining))))
           (my-cond ~@remaining)
           ~else)))))

(def macro-function []
  (if (= 2 3)
    (unless true 1 2)
    (my-cond
      (= 1 2) "One equals two."
      (= 2 3) [1 2 3]
      (not= 4 5) (do
                   (println "It is not true."
                   5)))))