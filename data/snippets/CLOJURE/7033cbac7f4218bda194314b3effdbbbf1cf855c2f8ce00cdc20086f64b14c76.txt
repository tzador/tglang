(defn bubble-sort [arr]       ;define a function named "bubble-sort" that takes in an array as a parameter
  (loop [a arr                 ;create a new loop with the array as the starting value
         swapped false]        ;initialize a boolean variable "swapped" to false
    (if-not swapped            ;if "swapped" is not true
      a                        ;return the array as it is
      (let [b (vec (drop-last a))    ;else binding "b" to a new vector created by dropping the last element of the array
            i (atom 0)]             ;and initializing an atom "i" to 0
        (do (doseq [[idx val] (map-indexed vector b)]    ;perform a sequence of statements, iterating through the elements of "b"
              (if (> (b idx) (b (inc idx)))             ;if the current element is greater than the next element in the sequence
                (do (reset! i (inc @i))                ;increment the value of "i"
                    (dosync (swap! b assoc idx (b (inc idx)))
                            (swap! b assoc (inc idx) (b idx))))
                (reset! i @i)))                        ;else reset the value of "i" to 0
            (swap! b assoc (@i 0) (b (@i 1)))                    ;swap the elements at indices "i" and "i+1" in the vector
            (swap! b assoc (@i 1) (b (@i 0)))              
            (if-not (= a b)                          ;if the array is not equal to the vector
              (recur b true)                         ;recurse and call the function with the new vector and true as parameters
              b))))                                  ;else return the sorted vector