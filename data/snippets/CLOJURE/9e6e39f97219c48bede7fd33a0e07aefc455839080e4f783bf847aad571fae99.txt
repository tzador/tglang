;; This function calculates the factorial of a given number
(defn factorial [n]
  (if (<= n 1) 
    1 
    (* n (factorial (- n 1)))))

;; This function checks if a given number is prime or not
(defn is-prime? [n]
  (if (<= n 1)
    false
    (not-any?
      (fn [x] (zero? (mod n x)))
      (range 2 n))))

;; This function calculates the nth prime number using recursion and the is-prime? function
(defn nth-prime [n]
  (loop [curr 2
         count 0]
    (if (is-prime? curr)
      (if (= count (dec n))
        curr
        (recur (inc curr) (inc count)))
      (recur (inc curr) count))))

;; This function takes in a list of numbers and returns another list containing only the prime numbers in the original list
(defn prime-list [numbers]
  (filter is-prime? numbers))

;; This function takes in a list of numbers and returns a list of lists, where each inner list contains all the factors of the corresponding number in the original list, including 1 and the number itself
(defn factor-list [numbers]
  (map 
    (fn [num] (filter 
                (fn [x] (= (mod num x) 0)) 
                (range 1 (inc num))))
    numbers))

;; This function uses the prime-list and factor-list functions to find all the prime factors of a given number
(defn prime-factors [n]
  (filter is-prime? 
    (flatten 
      (factor-list (range 1 n)))))

;; This function uses the prime-list and factor-list functions to find the prime factors of all numbers in a given list
(defn prime-factor-list [numbers]
  (map prime-factors numbers))