;; A function that calculates the factorial of a given number
(defn factorial [n]
  "Calculates the factorial of n using recursion"
  (if (<= n 1)
    1
    (* n (factorial (dec n)))))

;; A function that finds the nth element in a list
(defn nth-element [n lst]
  "Returns the nth element of lst, counting from 0"
  (if (= n 0)
    (first lst)
    (nth-element (dec n) (rest lst))))

;; A function that appends two lists together
(defn append-lists [lst1 lst2]
  "Returns a list containing the elements of lst1 followed by the elements of lst2"
  (if (empty? lst1)
    lst2
    (cons (first lst1) (append-lists (rest lst1) lst2))))
    
;; A function that calculates the nth Fibonacci number
(defn fibonacci [n]
  "Calculates the nth Fibonacci number using recursion"
  (if (or (= n 1) (= n 2))
    1
    (+ (fibonacci (dec n)) (fibonacci (- n 2)))))

;; A function that checks if a given number is prime
(defn is-prime? [n]
  "Checks if n is a prime number"
  (if (< n 2)
    false
    (loop [i 2]
      (if (> i (Math/sqrt n))
        true
        (if (zero? (mod n i))
          false
          (recur (inc i)))))))

;; A function that merges two sorted lists
(defn merge-lists [lst1 lst2]
  "Merges two sorted lists lst1 and lst2 into a single sorted list"
  (if (empty? lst1)
    lst2
    (if (empty? lst2)
      lst1
      (if (< (first lst1) (first lst2))
        (cons (first lst1) (merge-lists (rest lst1) lst2))
        (cons (first lst2) (merge-lists lst1 (rest lst2)))))))