;; This code snippet creates a function that takes in two lists and
;; returns a list with all the unique elements from the two lists
(defn unique-elements [list1 list2]                      ;; defining function with two parameters, list1 and list2
  (set (concat list1 list2)))                            ;; returns a set of the combined elements from list1 and list2
                                                       
(comment "This is another way to write the same function
          using a for loop instead of the built-in set function")
(defn unique-elements [list1 list2]
  (let [combined (concat list1 list2)                    ;; creates a new list that combines elements from list1 and list2
        unique (->> (for [x combined                     ;; for loop that iterates through every element in 'combined' list
                          :when (or (not (contains? list1 x))  ;; checks if element is not already in list1 
                                    (not (contains? list2 x)))];; checks if element is not already in list2
                      x)                                  ;; returns the element if not already in either list
                      (distinct))]                        ;; removes any duplicates from the list
    unique))                                              ;; returns the list of unique elements