(defn fibo [n]
  "Returns the nth Fibonacci number."
  (let [fib (fn [n]
              (if (<= n 2)
                n
                (+ (fib (- n 1))
                   (fib (- n 2))))) ;recursive function to calculate Fibonacci number
        cache (atom {})]
    (memoize (fn [n] ;using memoization to store previously calculated values
               (if (contains? @cache n)
                 (get @cache n)
                 (let [result (fib n)]
                   (swap! cache assoc n result)
                   result)))))