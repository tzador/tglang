(defn factor [n]
    (loop [acc 1
           i 1]
      (if (<= i n)
        (recur (* acc i) (inc i))
        acc)))

(defn multiply [x y]
    (* x y))

(defn power [x n]
    (loop [acc x
           i 0]
      (if (< i n)
        (recur (multiply acc x) (inc i))
        acc)))

(defn product [list]
    (reduce multiply list))

(defn factorial [n]
    (if (< n 0)
        (throw (IllegalArgumentException. "n must be a non-negative integer."))
        (power (product (range 1 n)) n)))

(factorial 5)