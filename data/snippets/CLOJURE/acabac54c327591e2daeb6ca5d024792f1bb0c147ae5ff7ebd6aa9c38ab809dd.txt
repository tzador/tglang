;; Define a function that checks if a given argument is a valid email address
(defn valid-email? [email]
  "Takes in an email as a string and returns true if it is a valid email, false otherwise"
  (def pattern #"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]")
  (if (re-matches pattern email)
    true
    false))

;; Define a function that creates a new user account
(defn create-user [name email password]
  "Takes in a name, email, and password as arguments and creates a new user account"
  (if (valid-email? email)
    (def user {:name name
              :email email
              :password password
              :created-at (java.util.Date.)})
    (throw (java.lang.IllegalArgumentException. "Invalid email address"))))

;; Define a function that updates a user's email address
(defn update-email [user new-email]
  "Takes in a user map and a new email address and updates the user's email in the map"
  (if (valid-email? new-email)
    (assoc user :email new-email)
    (throw (java.lang.IllegalArgumentException. "Invalid email address"))))