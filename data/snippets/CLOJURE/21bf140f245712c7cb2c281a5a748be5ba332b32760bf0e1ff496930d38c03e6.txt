;; Define a function that takes in a list of numbers
(defn complex-funct [nums]
  ;; Sort the list in ascending order
  (sort nums)
  ;; Multiply each number by itself and add 1
  (map #(inc (* % %)) nums)
  ;; Filter out any numbers that are not prime
  (filter #(= (count (filter (fn [x] (zero? (rem % x))) (range 2 %))) 0) nums)
  ;; Take the sum of the remaining numbers
  (reduce + nums)
)