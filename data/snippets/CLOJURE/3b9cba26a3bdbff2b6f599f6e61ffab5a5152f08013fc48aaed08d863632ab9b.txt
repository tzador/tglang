(defn recursive-factorial
  "Calculates the factorial of a given number using recursion"
  [n]
  (if (= n 0)
    1
    (recur (* n (dec n)))))

(defn iterative-factorial
  "Calculates the factorial of a given number using iteration"
  [n]
  (loop [current 1
         result 1]
    (if (> current n)
      result
      (recur (inc current) (* result current)))))

(defn timed
  "Decorator function to measure the execution time of a function"
  [f]
  (fn
    [& args]
    (let [startTime (System/currentTimeMillis)
          result (apply f args)
          endTime (System/currentTimeMillis)]
      (print "Execution Time: " (- endTime startTime) "ms\n")
      result)))

(defn memoize
  "Memoizes the result of a function for faster execution"
  [f]
  (let [cache (atom {})]
    (fn [& args]
      (let [result (@cache args)]
        (if result
          result
          (let [newResult (apply f args)]
            (swap! cache assoc args newResult)
            newResult))))))

(defn tail-call
  "Decorator function that optimizes tail call recursion"
  [f]
  (fn [& args]
    (loop [result (apply f args)]
      (if (not (fn? result))
        result
        (recur (result))))))

(defn gcd
  "Calculates the greatest common divisor using the Euclidean algorithm"
  [a b]
  (if (= b 0)
    a
    (recur b (mod a b))))

(defn prime?
  "Checks if a given number is prime"
  [n]
  (let [sqrt (Math/sqrt n)]
    (loop [i 2]
      (if (< i sqrt)
        (if (= (mod n i) 0)
          false
          (recur (inc i)))
        true))))