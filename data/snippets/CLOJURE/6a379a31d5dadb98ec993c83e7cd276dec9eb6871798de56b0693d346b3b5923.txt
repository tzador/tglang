(defn fibonacci [n] ; function named 'fibonacci' with parameter 'n'
  (if (or (= n 0) (= n 1)) ; if n is equal to 0 or 1
      n ; return n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; otherwise, return the sum of the fibonacci of n-1 and n-2
  )
)

(defn get-fibonacci-sequence [n] ; function named 'get-fibonacci-sequence' with parameter 'n'
  (loop [i 0 ; loop counter starting at 0
         seq []] ; empty list to store fibonacci sequence
    (if (>= i n) ; if i is greater than or equal to n
      seq ; return the current sequence
      (recur (inc i) (conj seq (fibonacci i))) ; increment i and add fibonacci of i to sequence, then recurse
    )
  )
)

; Example usage:
(get-fibonacci-sequence 10) ; returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]