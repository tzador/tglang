(defn factorial
  "Calculates the factorial of n"
  [n]
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

(defn nth-tribonacci
  "Calculates the nth term in the Tribonacci sequence"
  [n]
  (if (<= n 3)
    1
    (+ (nth-tribonacci (- n 1))
       (nth-tribonacci (- n 2))
       (nth-tribonacci (- n 3)))))

(defn make-random-list
  "Creates a list of n randomly generated numbers"
  [n]
  (loop [i 0
         lst []]
    (if (>= i n)
      (reverse lst)
      (recur (inc i)
             (conj lst (rand-int 10))))))

(defn count-distinct
  "Counts the number of distinct elements in a list"
  [lst]
  (count (distinct lst)))

(defn format-date
  "Formats a date into a string in the format of MM/DD/YYYY"
  [date]
  (let [month (str (nth date 1))
        day (str (nth date 2))
        year (str (nth date 0))]
    (str month "/" day "/" year)))

(defn quicksort
  "Sorts a list of numbers using the quicksort algorithm"
  [lst]
  (if (empty? lst)
    lst
    (let [pivot (first lst)
          smaller (filter #(< % pivot) (rest lst))
          bigger (filter #(>= % pivot) (rest lst))]
      (concat (quicksort smaller)
              (list pivot)
              (quicksort bigger)))))

(defn closest-point
  "Calculates the closest point to the given point in a list of points"
  [point lst]
  (let [distances (map #(Math/sqrt
                         (+
                          (Math/pow (- (first point) (first %)) 2)
                          (Math/pow (- (second point) (second %)) 2)))
                       lst)]
    (nth lst (read-string (str (nth (vec (sort distances)) 0))))))