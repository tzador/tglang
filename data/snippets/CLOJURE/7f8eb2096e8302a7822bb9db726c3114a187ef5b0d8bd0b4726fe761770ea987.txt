(defn merge-sort [lst]                         ;; define function merge-sort that takes in a list as an input
  (if (<= (count lst) 1)                       ;; if the list has only one element, return the list
    lst
    (let [mid (quot (count lst) 2)             ;; otherwise, split the list into two parts
          left (take mid lst)
          right (drop mid lst)]
      (merge (merge-sort left) (merge-sort right)))))  ;; merge the two sorted parts, using the merge function

(defn merge [left right]                       ;; define function merge that takes in two lists as inputs
  (if (empty? left)                       ;;; if the left list is empty, return the right list
    right
    (if (empty? right)                      ;; if the right list is empty, return the left list
      left
      (if (<= (first left) (first right))    ;; otherwise, compare the first elements of the two lists
        (conj (merge (rest left) right) (first left))  ;; if the first element of left is smaller, add it to the result and continue merging the remaining elements
        (conj (merge left (rest right)) (first right))))))  ;; if the first element of right is smaller, add it to the result and continue merging the remaining elements