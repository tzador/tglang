;; Define a function that takes in two arguments, x and y
(defn multiply [x y]
  ;; Use recursion to multiply x with y
  (if (= y 0)
    0
    (+ x (multiply x (dec y)))))
    
;; Call the function with 5 and 3 as arguments and store the result in a variable
(def result (multiply 5 3))

;; Print the stored result to the console
(println "The result of multiplying 5 and 3 is" result)

;; Create a list of numbers to pass as arguments to the multiply function
(def numbers [1 2 3 4 5])

;; Define a function to apply the multiply function to a list of numbers using reduce
(defn apply-multiply [nums]
  (reduce multiply nums))

;; Call the apply-multiply function with the numbers list and store the result in a variable
(def multiply-result (apply-multiply numbers))

;; Print the result to the console
(println "The result of multiplying all numbers in the list" numbers "is" multiply-result)

;; Define a function that takes in a number and returns the factorial using recursion
(defn factorial [n]
  (if (= n 0)
    1
    (* n (factorial (dec n)))))

;; Call the factorial function with 5 as an argument and store the result in a variable
(def factorial-result (factorial 5))

;; Print the result to the console
(println "The factorial of 5 is" factorial-result)