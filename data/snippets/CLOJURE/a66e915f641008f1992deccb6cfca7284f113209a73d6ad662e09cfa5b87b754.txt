(defn shortest-distance [source target]
  (let [source-positions (atom {})
        target-positions (atom {})
        current-depth 1
        max-depth 50
        shortest-distance (atom nil)
        next-level-sources (fn [current-level-sources]
                             (reduce #(into %1 (:reached %2)) {}
                               (map (fn [source]
                                      (let [reached (into {:reached {source true}
                                                          :distance 1}
                                                          source-positions)]
                                        (swap! shortest-distance #(if (or (nil? %1) (> %2 (:distance reached)))
                                                                  %1 (:distance reached)))
                                        reached))
                                current-level-sources)))
        check-targets (fn [source]
                        (if (contains? target-positions source)
                          (swap! shortest-distance #(if (or (nil? %1) (> %2 current-depth))
                                                    %1 current-depth))))
        visit-level (fn [current-level-sources]
                      (if (or (>= current-depth max-depth)
                              (= current-level-sources {})
                              (not (nil? @shortest-distance)))
                        (deref shortest-distance)
                        (visit-level (next-level-sources current-level-sources))))]
    (visit-level {source true})))