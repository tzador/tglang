;; This function takes in a list of numbers as input and returns the sum
(defn calculate-sum [numbers]
  (reduce + numbers))

;; This function takes in any number of arguments and returns their product
(defn calculate-product [& args]
  (reduce * args))

;; This function takes in a keyword as input and returns a string
(defn keyword-to-string [k]
  (name k))

;; This function takes in a string as input and returns the number of words
(defn count-words [s]
  (count (clojure.string/split s #"\s+")))

;; This function takes in a vector of strings as input and returns a map with each string as the key
(defn vector-to-map [vector]
  (zipmap vector (repeat nil)))

;; This function takes in a map and returns a vector of its values
(defn map-to-vector [map]
  (map #(second %) map))

;; This function takes in a number and returns its factorial
(defn factorial [n]
  (->> n range reverse (reduce * 1)))

;; This function takes in a list of numbers and returns a list of their squares
(defn squares [numbers]
  (map #(Math/pow % 2) numbers))