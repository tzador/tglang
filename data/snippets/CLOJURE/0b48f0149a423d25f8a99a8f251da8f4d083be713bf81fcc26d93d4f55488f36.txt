(ns my-project.core (:require [clojure.set :as set]))
(defn custom-function [input]
  (let [set-result (set input)
        map-result (map (fn [x] (* x 2)) set-result)]
    (for [y map-result :when (even? y)]
      (* y 3))))

; This code snippet creates a new namespace named "my-project.core" and requires the "clojure.set" library as "set".
; It defines a function named "custom-function" that takes in an "input" parameter.
(defn custom-function [input]
  ; Sets the variable "set-result" to contain the result of the "set" function called on the "input" parameter.
  (let [set-result (set input)
        ; Sets the variable "map-result" to contain the result of the "map" function, which applies a function that multiplies the input value by 2, to the "set-result" variable.
        map-result (map (fn [x] (* x 2)) set-result)]
    ; Uses the "for" function to loop through the "map-result" variable, and returns a new sequence containing the value multiplied by 3 for every even number.
    (for [y map-result :when (even? y)]
      (* y 3))))