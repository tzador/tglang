(defn recursive-fib
  [n]
  (if (or (zero? n) (<= n 2))
    1
    (+ (recursive-fib (dec n)) 
       (recursive-fib (- n 2)))))

(defn dynamic-fib
  [n]
  (let [list (atom (vec (repeat n nil)))]
    (dotimes [i n]
      (if (or (zero? i) (<= i 2))
        (swap! list assoc i 1)
        (swap! list assoc i (+ @list (- i 1) (- i 2)))))
    (@list (- n 1))))

(defn memoize-helper
  [f]
  (let [cache (atom {})]
    (fn [& args]
      (if-let [x (get @cache args)]
        x
        (let [y (apply f args)]
          (swap! cache assoc args y)
          y)))))

(def dynamic-fib (memoize-helper dynamic-fib))