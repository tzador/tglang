(defn square [x] "This function calculates the square of a number"
  (* x x)) ; This line uses the "*" operator to multiply a number by itself
(defn cube [x] "This function calculates the cube of a number"
  (* x x x)) ; This line uses the "x" argument three times, multiplying it by itself and then the original argument
(defn factorial [n] "This function calculates the factorial of a number"
  (apply * (range 1 (inc n)))) ; This line uses the "range" function to create a list of numbers from 1 to the given argument, then applies the "*" operator to multiply them all together  
(defn is-prime? [n] "This function checks if a number is prime"
  (if (<= n 1) ; This line uses the "<=" operator to check if the number is less than or equal to 1
    false ; If the condition is met, i.e. the number is less than or equal to 1, the function returns false
    (some #(= 0 (rem n %)) (range 2 n)))) ; If the number is greater than 1, this line uses the "some" function to check if any number in the range from 2 to n (excluding n) can divide evenly into n. If yes, the #(= 0 (rem n %)) returns true and the function returns true, indicating that the number is not prime. If none of the numbers in the range can divide evenly into n, the function returns false.