(defn sum-and-square [nums]       ; Defines a function named "sum-and-square" that takes in a list of numbers as input
  (let [nums-sum (apply + nums)   ; Binds a local variable "nums-sum" to the sum of all the numbers in the input list
        nums-squared (map #(* % %) nums)]  ; Binds a local variable "nums-squared" to a list of all numbers in the input list squared
    (+ nums-sum (* 2 (apply + nums-squared))))) ; Returns the sum of the numbers in the list and twice the sum of the squared numbers