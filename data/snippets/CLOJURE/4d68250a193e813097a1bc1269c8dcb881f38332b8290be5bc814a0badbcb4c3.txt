(ns my-project.core
  (:require
    [clojure.string :as str]))

(defn- get-alpha [s]
  "Returns a string containing only alphabetical characters"
  (->> s
       (str/replace #"[^a-zA-Z]" "")
       (str/lower-case)))

(defn- encrypt [s shift]
  "Returns an encrypted string using the Caesar cipher with a given shift value"
  (let [alpha "abcdefghijklmnopqrstuvwxyz"
        s-alpha (get-alpha s)
        s-shifted (str/join "" 
          (map #(get alpha (mod 
                              (+ shift (.indexOf alpha %)) 
                              (str/length alpha))) 
                 s-alpha))]
    (->> s
         (str/split #" ")
         (mapv (fn [word]
                 (if (str/includes? word s-alpha)
                   (str/replace word s-alpha s-shifted)
                   word)))
         (str/join " ")
         (str/upper-case))))

(defn- decrypt [s shift]
  "Returns a decrypted string using the Caesar cipher with a given shift value"
  (encrypt s (- shift)))

(defn- caesar-cipher [s direction shift]
  "Uses the Caesar cipher to either encrypt or decrypt a string based on the direction provided"
  (if (= direction :encrypt)
    (encrypt s shift)
    (decrypt s shift)))

(defn- create-cipher [direction shift]
  "Returns a partially applied function for encrypting or decrypting a string using the Caesar cipher with a given shift value"
  (partial caesar-cipher direction shift))