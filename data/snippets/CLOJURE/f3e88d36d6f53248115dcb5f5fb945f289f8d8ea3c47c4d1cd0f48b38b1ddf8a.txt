(defn prime-sieve [n]
  (let [primes (repeat n true)
        cross (fn [p q]
                (loop [i (* p q)]
                  (when (< i n)
                    (aset primes i false)
                    (recur (+ i q)))))]
    (doseq [i (range 2 n)
            j (range 2 n)
            :when (and (== i j)
                       (== (aget primes i) true)
                       (== (aget primes j) true))]
      (doseq [k (range i n i)
              l (range j n j)
              :when (< (* k l) n)]
        (cross k l)))
    (filter #(aget primes %) (range 2 n))))

; This function implements the Sieve of Eratosthenes algorithm to find all prime numbers up to a given number. It first creates an array of booleans, where each index represents a number up to n. The boolean at each index is initially set to true, indicating that the number is potentially prime. Then, it creates a function, cross, which iterates through the array and marks all multiples of a given number as false, indicating they are not prime. The function then iterates through the array and calls cross on all prime numbers (those with a true boolean) to mark their multiples as false as well.

; Finally, the function filters the array to only include the indexes with a true boolean, indicating they are prime numbers. This results in a list of all prime numbers up to n.

; Example usage:
(prime-sieve 20) ; returns [2, 3, 5, 7, 11, 13, 17, 19]