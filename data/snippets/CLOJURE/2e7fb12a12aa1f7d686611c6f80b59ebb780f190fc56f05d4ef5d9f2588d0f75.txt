(defn generate-complex-list [n]
  "Generates a complex list of length n with randomly generated strings, numbers, and booleans.
   Uses recursion to build a nested list structure."
  (let [random-str (rand-nth (clojure.string/upper-case (apply str (range 97 123))))]
    (cond 
      (zero? n) nil
      (= n 1) (rand-nth [random-str (rand-int 100) (rand-boolean)])
      :else (let [rand-nested-list (generate-complex-list (dec n))]
              [(gen-random-value) (gen-random-value) rand-nested-list]))))