(defn even-or-odd [num]
  "This function returns whether a number is even or odd"
  (if (even? num)
    "The number is even."
    "The number is odd."))

(defn greet [name]
  "This function greets the user by name"
  (let [greeting (str "Hello " name "!")]
    (println greeting)))

(defn add [x y]
  "This function adds two numbers together"
  (+ x y))

(defn subtract [x y]
  "This function subtracts two numbers"
  (- x y))

(defn divide [x y]
  "This function divides x by y and returns the quotient"
  (let [quot (quot x y)]
    (println "The quotient is: " quot)))

(defn factorial [n]
  "This function returns the factorial of a number"
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

(defn reverse-string [str]
  "This function reverses a given string"
  (let [rev-str (apply str (reverse str))]
    (println "The reversed string is: " rev-str)))

(defn fibonacci [n]
  "This function returns the nth number in the Fibonacci sequence"
  (if (or (= n 1) (= n 2))
    1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(defn merge [lst1 lst2]
  "This function merges two lists together"
  (cond
    (empty? lst1) lst2
    (empty? lst2) lst1
    :else (cons
            (if (< (first lst1) (first lst2))
              (first lst1)
              (first lst2))
            (merge
              (if (< (first lst1) (first lst2))
                (rest lst1)
                lst1)
              (if (< (first lst1) (first lst2))
                lst2
                (rest lst2))))))

(defn random-generator []
  "This function generates a random number between 1 and 100"
  (let [rand-int (rand-int 100)]
    (println "The random number is: " rand-int))))

(comment
  "This is a comment in Clojure, it will not be evaluated"
  )