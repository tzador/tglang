(defn- merge-pairs
  "Merges a vector of pairs into a single map"
  [pairs]
  (reduce
   (fn [acc [key value]]
    (assoc acc key value))
   {} pairs))

(defn- combine-maps
  "Combines multiple maps into a single map. Takes in a variadic number of arguments"
  [& maps]
  (apply merge-pairs
   (apply concat (map seq maps))))

(defn- transform-keys
  "Returns a map with the keys transformed by the provided function"
  [f map]
  (reduce
   (fn [acc [key value]]
    (let [new-key (f key)]
     (assoc acc new-key value)))
   {} map))

(defn- mapify
  "Maps each element of a sequence to a corresponding function,
  then returns a map of the result"
  [seq-of-fns & args]
  (apply merge-pairs
   (map (fn [f]
   (let [result (apply f args)]
    [f result])) seq-of-fns)))

(defn- partition-at
  "Partitions a sequence into two subsequences at the given index"
  [index sequence]
  (let [first-part (take index sequence)
        second-part (drop index sequence)]
    [first-part second-part]))

(defn- zip
  "Returns a map of the elements from two sequences zipped together"
  [seq1 seq2]
  (let [seq1-len (count seq1)
        seq2-len (count seq2)
        shorter-length (if (< seq1-len seq2-len) seq1-len seq2-len)]
    (reduce
     (fn [acc [element1 element2]]
      (assoc acc element1 element2))
     {} (partition-at shorter-length (interleave seq1 seq2)))))

(defn- ornate-math-function
  "Calculates a complex mathematical function based on input parameters"
  [x y z]
  (let [x-squared (Math/pow x 2)
        y-cubed (Math/pow y 3)
        z-factorial (reduce * (range 1 (+ z 1)))
        result (+ (* x-squared y-cubed) (* z-factorial x))]
    result))

(defn- big-data-algorithm
  "Applies an algorithm to a large dataset using parallel processing"
  [dataset]
  (pmap #(ornate-math-function (first %) (second %) (last %)) dataset))

(defn- nested-functions
  "Returns a nested function that calculates a mathematical equation"
  []
  (fn [x y z]
    (* (ornate-math-function x y z) z)))

(defn- higher-order-function
  "Returns a function that takes in a function and applies it to input parameters"
  [f]
  (fn [x y z]
    (f x y z)))

(defn- recursive-function
  "Returns the factorial of a number using recursion"
  [n]
  (if (= n 0)
    1
    (* n (recursive-function (dec n)))))

(defn- custom-data-structure
  "Defines a custom data structure with custom functions"
  [field1 field2 field3]
  {:field1 field1
   :field2 field2
   :field3 field3
   :get-field1 (fn [self]
                 (:field1 self))
   :get-field2 (fn [self]
                 (:field2 self))
   :get-field3 (fn [self]
                 (:field3 self))
   :set-field1 (fn [self value]
                 (assoc self :field1 value))
   :set-field2 (fn [self value]
                 (assoc self :field2 value))
   :set-field3 (fn [self value]
                 (assoc self :field3 value))}))