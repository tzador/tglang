;; Define a function that recursively takes a list of numbers,
;; applies multiplication to each element by the first number,
;; and returns the list with the updated elements.
(defn recursive-multiply [numbers]
  ;; Base case: if the list is empty, return an empty list.
  (if (empty? numbers)
    '()
    ;; Recursive case: conj the first number in the list,
    ;; multiplied by the first element in the list, to the
    ;; result of calling recursive-multiply on the rest of the list.
    (conj (list (* (first numbers) (first numbers)))
          (recursive-multiply (rest numbers)))))
  
;; Call the function with a list of numbers and print the result.
(print (recursive-multiply '(1 2 3 4 5)))