(defn memoize
  "Returns a memoized version of a referent function."
  {:added "1.0"
   :static true}
  [f]
  (let [mem (atom {})]
    (fn [& args]
      (if-let [e (find @mem args)]
        (val e)
        (let [ret (apply f args)]
          (swap! mem assoc args ret)
          ret)))))
Defn is used to define a function in Clojure. It takes in three parameters - a name, a docstring and a map of metadata. The map contains the version in which the function was added and whether it is a static function.
(def mem (atom {}))
The atom function creates a container for mutable state in Clojure.
(fn [& args] ...)
This defines an anonymous function that takes in a variable number of arguments.
(if-let [e ...]
  (val e)
  ...)
The if-let statement checks whether a value is present in the mem HashMap for the given arguments. If it is present, it returns the value, else it evaluates the else statement.
(apply f args)
The apply function calls the function f with the provided arguments passed as a sequence.
(swap! mem assoc args ret)
The swap! function atomically updates the value of the mem HashMap by associating the given arguments with the return value of the function f.
ret
The return value of the function is stored in the ret variable and then returned by the memoize function.