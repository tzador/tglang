(defn quicksort [coll]
  "Implementation of quicksort algorithm in Clojure"
  (if (seq coll)
    (let [pivot (first coll)
          [less-eq great-eq] (partition #(<= % pivot) (rest coll))]
      (concat (quicksort less-eq) [pivot] (quicksort great-eq)))
    []))

(defn swap
  "Helper function for partitioning"
  [coll i j]
  (let [temp (nth coll i)]
    (assoc coll i (nth coll j))
    (assoc coll j temp)))

(defn partition [pred coll]
  "Partition a collection according to a predicate"
  (loop [i 0
         j (dec (count coll))
         col coll]
    (cond (>= i j) col
          (and (pred (nth col i)) (not (pred (last col))))
          (recur (inc i) (dec j) (swap col i j))
          (pred (nth col i))
          (recur (inc i) j col)
          :else
          (recur i (dec j) col))))

(defn merge [sorted-coll1 sorted-coll2]
  "Merges two sorted collections"
  (if (seq sorted-coll1)
    (if (seq sorted-coll2)
      (let [first1 (first sorted-coll1)
            first2 (first sorted-coll2)]
        (if (< first1 first2)
          (cons first1 (merge (rest sorted-coll1) sorted-coll2))
          (cons first2 (merge sorted-coll1 (rest sorted-coll2)))))
    sorted-coll1)
  sorted-coll2)

(defn mergesort [coll]
  "Implementation of mergesort algorithm in Clojure"
  (if (seq coll)
    (if (seq (rest coll))
      (let [mid (quot (count coll) 2)]
        (let [[left right] (split-at mid coll)]
          (merge (mergesort left) (mergesort right))))
      coll)
    coll))

(defn binary-search [target sorted-coll]
  "Binary search implementation in Clojure"
  (let [mid (quot (count sorted-coll) 2)
        val (nth sorted-coll mid)]
    (cond (= val target) mid
          (< val target) (+ mid 1 (binary-search target (drop (inc mid) sorted-coll)))
          :else (binary-search target (subvec sorted-coll 0 mid)))))