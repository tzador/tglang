(defn factorial
  "Calculates the factorial of n, using recursion."
  [n]
  (if (<= n 1)    ; checks if n is less than or equal to 1
    1             ; base case, returns 1
    (* n (factorial (dec n))))) ; recursive case, multiplies n with the factorial of n-1

(defn fibonacci
  "Generates the nth number in the fibonacci sequence, using dynamic programming."
  [n]
  (let [fib (atom [])] ; creates a mutable atom to store calculated fibonacci numbers
    (reset! fib [0 1]) ; sets initial values of 0 and 1 in the atom
    (let [calc-fib (fn [n] ; nested function that calculates the nth fibonacci number
                      (if (< n (count @fib)) ; checks if the value has already been calculated
                        (nth @fib n) ; returns the value if it has already been calculated
                        (let [prev (last @fib) ; stores the last two values in the atom in variables
                              prev-prev (nth @fib (- (count @fib) 2))
                              fib-val (+ prev prev-prev)] ; calculates the nth fibonacci number
                          (swap! fib conj fib-val) ; adds the calculated value to the atom
                          (calc-fib n))))] ; calls the function recursively until the nth fibonacci number is reached
      (calc-fib n)))) ; invokes the nested function to find the nth fibonacci number

(defn sum-of-squares
  "Calculates the sum of squares of a range of numbers."
  [start end]
  (->> (range start (inc end)) ; creates a range of numbers from start to end
       (map #(* % %)) ; squares each number in the range
       (reduce +))) ; calculates the sum by adding all the squared numbers together