(defn bubble-sort [list]
  "This function implements the bubble sort algorithm in Clojure.
  The input is a list of integers, and the output is a sorted list.
  The function starts by initializing a count variable and setting it to 0.
  The loop starts from the first element of the list and goes until (count - 1)
  elements have been checked. During each iteration, the current element is
  compared to the next element, and if it is larger, they are swapped.
  Once the loop is completed, the count is incremented and the process is repeated.
  The loop continues until the count is equal to the length of the input list,
  which means that all elements have been checked and sorted.
  The sorted list is then returned."
  (let [count 0] ; initialize count variable
    (loop [lst list ; set input list as loop parameter
           i 0] ; initialize loop counter
      (if (= i (- (count lst) 1)) ; check if all elements have been checked
        lst ; if yes, return sorted list
        (recur (vec (map #(if (> %1 %2) ; compare current element with next element
                              (let [temp1 (nth lst %2) ; swap elements if necessary
                                    temp2 (nth lst (inc %2))]
                                (assoc lst %2 temp2) (assoc lst (inc %2) temp1))
                            lst (range i (dec (count lst)))))
               (inc i)))) ; increment count and repeat loop