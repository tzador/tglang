(defn merge-sort [lst]
  "This function implements the merge sort algorithm on a given list of integers and returns a sorted list."
  (if (<= (count lst) 1)
    lst
    (let [mid (quot (count lst) 2)
          left (merge-sort (take mid lst)) ; recursively sorts left sub-list
          right (merge-sort (drop mid lst)) ; recursively sorts right sub-list
          merge (fn merge [l r res]
                  (if (empty? l)
                    (concat res r) ; merge leftover elements from right into result
                    (if (empty? r)
                      (concat res l) ; merge leftover elements from left into result
                      (if (<= (first l) (first r))
                        (recur (rest l) r (conj res (first l))) ; add first element of left list to result
                        (recur l (rest r) (conj res (first r))))))) ; add first element of right list to result
      (merge left right ())))) ; call merge function on sorted left and right lists to return final sorted list