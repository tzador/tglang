/* This code snippet is for sorting a list of customer names in descending order by their ID number */
/* First, we declare a temp-table to hold the list of customer names and IDs */
DEFINE TEMP-TABLE tt_cust
    FIELD cust-name AS CHARACTER
    FIELD cust-id AS INTEGER
    INDEX cust-id-idx IS UNIQUE PRIMARY

/* Next, we fill the temp-table with sample customer data */
CREATE tt_cust.
ASSIGN
    tt_cust.cust-name = "John Smith"
    tt_cust.cust-id = 1234
    tt_cust.cust-name = "Jane Doe"
    tt_cust.cust-id = 5678
    tt_cust.cust-name = "Bob Johnson"
    tt_cust.cust-id = 9012
    tt_cust.cust-name = "Samantha Jones"
    tt_cust.cust-id = 3456.

/* Now we create a query to retrieve all the customer data sorted by descending ID */
/* The resulting cursor will be stored in a temp-table named tt_sorted_cust */
DEFINE QUERY q_cust FOR tt_cust SCROLLING.

OPEN QUERY q_cust FOR EACH tt_cust
    WHERE TRUE
    ORDER BY cust-id DESC.

CREATE tt_sorted_cust.
q_cust:FETCH-FIRST().
REPEAT:
    IMPORT tt_cust.
    CREATE tt_cust.
    tt_sorted_cust.cust-name = tt_cust.cust-name.
    tt_sorted_cust.cust-id = tt_cust.cust-id.
    q_cust:FETCH-NEXT().
END.

/* The resulting tt_sorted_cust temp-table will now have the customer names sorted in descending order by their ID */
/* We can then use this temp-table to display the sorted list of customer names */
/* Note: This is just an example and may not be the most efficient way to sort the data in a production environment */
DISPLAY tt_sorted_cust.

/* Lastly, we delete the temp-tables to free up memory */
DELETE OBJECT tt_cust.
DELETE OBJECT tt_sorted_cust.