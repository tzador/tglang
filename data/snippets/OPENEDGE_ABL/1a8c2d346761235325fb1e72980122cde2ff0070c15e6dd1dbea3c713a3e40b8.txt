/* This code snippet creates a class named Employee and assigns properties and methods to it */

CLASS Employee:

    /* Static variables */
    STATIC PUBLIC ip_empCount AS INTEGER NO-UNDO INITIAL 0. /* track number of employee instances */

    /* Instance variables */
    DEFINE PRIVATE VARIABLE c_empName AS CHARACTER NO-UNDO INITIAL "". /* employee name */
    DEFINE PRIVATE VARIABLE n_salary AS DECIMAL NO-UNDO INITIAL 0. /* employee salary */
    DEFINE PRIVATE VARIABLE d_hireDate AS DATE NO-UNDO INITIAL ? /* date of hire */

    /* Constructors */

    /* Default constructor */
    CONSTRUCTOR Employee ():
        THIS-OBJECT:ip_empCount = THIS-OBJECT:ip_empCount + 1. /* increment number of employee instances */
    END CONSTRUCTOR.

    /* Parameterized constructor */
    CONSTRUCTOR Employee (c_name AS CHARACTER, n_sal AS DECIMAL, d_hire AS DATE):
        THIS-OBJECT:ip_empCount = THIS-OBJECT:ip_empCount + 1. /* increment number of employee instances */
        THIS-OBJECT:c_empName = c_name. /* assign employee name */
        THIS-OBJECT:n_salary = n_sal. /* assign employee salary */
        THIS-OBJECT:d_hireDate = d_hire. /* assign date of hire */
    END CONSTRUCTOR.

    /* Getters and Setters */

    /* Getter for employee name */
    METHOD PUBLIC CHARACTER getEmpName ():
        RETURN THIS-OBJECT:c_empName.
    END METHOD.

    /* Setter for employee name */
    METHOD PUBLIC VOID setEmpName (c_name AS CHARACTER):
        THIS-OBJECT:c_empName = c_name.
    END METHOD.

    /* Getter for employee salary */
    METHOD PUBLIC DECIMAL getSalary ():
        RETURN THIS-OBJECT:n_salary.
    END METHOD.

    /* Setter for employee salary */
    METHOD PUBLIC VOID setSalary (n_sal AS DECIMAL):
        THIS-OBJECT:n_salary = n_sal.
    END METHOD.

    /* Methods */

    /* Calculate bonus based on employee's salary */
    METHOD PUBLIC DECIMAL calcBonus ():
        DEFINE VARIABLE n_bonus AS DECIMAL NO-UNDO.
        /* bonus is 10% of employee's salary */
        n_bonus = THIS-OBJECT:n_salary * 0.10.
        RETURN n_bonus.
    END METHOD.

    /* Calculate employee's years of service */
    METHOD PUBLIC INTEGER calcYearsOfService ():
        DEFINE VARIABLE n_years AS INTEGER NO-UNDO.
        /* calculate years of service by subtracting hire date from current date */
        n_years = DATEDIFF(DATE(), THIS-OBJECT:d_hireDate, "years").
        RETURN n_years.
    END METHOD.

END CLASS. /* end of Employee class */

/* Create an instance of the Employee class */
DEFINE VARIABLE c_name AS CHARACTER NO-UNDO INITIAL "John Smith".
DEFINE VARIABLE n_sal AS DECIMAL NO-UNDO INITIAL 50000.
DEFINE VARIABLE d_hire AS DATE NO-UNDO INITIAL "01/01/2010".
DEFINE VARIABLE o_emp AS Employee NO-UNDO.

/* Use the default constructor to create an employee object and set values using setters */
CREATE Employee.
o_emp:setEmpName(c_name).
o_emp:setSalary(n_sal).
o_emp:d_hireDate = d_hire.

/* Print employee's name, salary and bonus */
DISPLAY "Employee name: " + o_emp:getEmpName().
DISPLAY "Employee salary: " + STRING(o_emp:getSalary()).
DISPLAY "Employee bonus: " + STRING(o_emp:calcBonus()).

/* Calculate and print employee's years of service */
DISPLAY "Years of service: " + STRING(o_emp:calcYearsOfService()) + " years".