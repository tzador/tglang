DEFINE DATABASE testdb EXCLUSIVE.
/* Defines the database named "testdb" for exclusive use */

/* Table definitions */
CREATE TABLE testtable
  FIELD1 CHAR(20)
  FIELD2 DECIMAL(10,2)
  FIELD3 LOGICAL.

CREATE TABLE jointable
  FIELD4 INTEGER
  FIELD5 DATE
  /* Adds two fields to the "jointable" table: "FIELD4" and "FIELD5", with specified data types */

/* Index definitions */
CREATE UNIQUE INDEX idx_field1 ON testtable (FIELD1).
CREATE INDEX idx_field4 ON jointable (FIELD4).
/* Creates two indexes, one unique and one non-unique, on the specified fields in their respective tables */

/* Procedure definitions */
PROCEDURE get_data:
  DEFINE INPUT PARAMETER p_field1 AS CHARACTER INIT "DEFAULT_VALUE" NO-UNDO.
  DEFINE OUTPUT PARAMETER p_results AS CURSOR FOR SELECT FIELD1, FIELD2 FROM testtable WHERE FIELD1 = p_field1.
  /* Defines a procedure named "get_data" with an input and output parameter. The output parameter is a cursor with a select statement that filters by the input parameter */

  /* Business logic goes here */
  OPEN QUERY p_results.
  GET p_results.
  /* Opens the cursor and retrieves the first record */

  DO WHILE AVAILABLE p_results:
    DISPLAY p_results.FIELD1 p_results.FIELD2.
    GET p_results.
  END.
  /* Creates a loop to display all records in the cursor */

  CLOSE p_results.
  /* Closes the cursor after use */

END PROCEDURE.
/* End of procedure definition for "get_data" */

RUN get_data("VALUE").
/* Executes the procedure and passes in the input parameter value */

/* Trigger definition */
TRIGGER ON testtable AFTER INSERT AS
  DEFINE VARIABLE v_message AS CHARACTER NO-UNDO.
  ASSIGN v_message = "New record inserted successfully in testtable".
/* Defines a trigger that fires after an insert operation on the "testtable" table. An assignment statement is used to set a message variable */

DISPLAY v_message.
/* Displays the message when the trigger fires */