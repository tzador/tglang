/***
    This is a code snippet in OPENEDGE_ABL,
    a procedural, object-oriented language for developing business applications.

    In this snippet, we are creating an Order class
    which will have properties for customer details, order items and total amount.
    It will also have methods for adding and removing items,
    calculating total amount, and placing the order.

    First, we define the class and its properties.
***/
DEFINE CLASS Order
    PUBLIC PROPERTY CustName AS CHARACTER FORMAT "X(20)".
    PUBLIC PROPERTY CustAddress AS CHARACTER FORMAT "X(50)".
    PUBLIC PROPERTY OrderItems AS CHARACTER FORMAT "X(100)" MULTI DIMENSION.
    PUBLIC PROPERTY TotalAmount AS DECIMAL FORMAT ">>9.99".

    /***
        This method will add an item to the OrderItems property.
        It takes in the item name and price as parameters.
        The item will be added as a string in the following format:
        item name - item price
    ***/
    METHOD PUBLIC VOID addItem(INPUT itemName AS CHARACTER, INPUT itemPrice AS DECIMAL):
        THIS.OrderItems = ADD-STRING(THIS.OrderItems, itemName + " - " + STRING(itemPrice), ",").
    END METHOD.

    /***
        This method will remove an item from the OrderItems property.
        It takes in the item name as a parameter.
        Any matching items will be removed from the property.
    ***/
    METHOD PUBLIC VOID removeItem(INPUT itemName AS CHARACTER):
        THIS.OrderItems = REPLACE(THIS.OrderItems, itemName + " - ", "", 1, 1).
    END METHOD.

    /***
        This method will calculate the total amount of the order
        by summing up all the item prices in the OrderItems property.
    ***/
    METHOD PUBLIC VOID calculateTotal():
        THIS.TotalAmount = 0.
        DO i = 1 TO NUM-ENTRIES(THIS.OrderItems):
            THIS.TotalAmount = THIS.TotalAmount + DECIMAL(ENTRY(i, THIS.OrderItems, ","), ">>9.99").
        END.
    END METHOD.

    /***
        This method will place the order by printing out the customer name,
        customer address, and all the ordered items with their prices.
        It will also print out the total amount of the order.
    ***/
    METHOD PUBLIC VOID placeOrder():
        MESSAGE "Customer name: " + THIS.CustName SKIP
            "Customer address: " + THIS.CustAddress SKIP
            "Ordered items: " + THIS.OrderItems SKIP
            "Total amount: " + STRING(THIS.TotalAmount) VIEW-AS DECIMAL FORMAT ">>9.99".
    END METHOD.
END CLASS.

/***
    Finally, we create an instance of the Order class
    and use its methods to add items, remove items, calculate total amount,
    and place the order.
***/
DEFINE VARIABLE myOrder AS ORDER NO-UNDO.

/* Set customer details */
myOrder.CustName = "Jane Doe".
myOrder.CustAddress = "123 Main Street".

/* Add items to the order */
myOrder.addItem("Book", 10).
myOrder.addItem("Pencil", 1.5).
myOrder.addItem("Eraser", 0.5).

/* Remove an item */
myOrder.removeItem("Pencil").

/* Calculate total amount */
myOrder.calculateTotal().

/* Place the order */
myOrder.placeOrder().