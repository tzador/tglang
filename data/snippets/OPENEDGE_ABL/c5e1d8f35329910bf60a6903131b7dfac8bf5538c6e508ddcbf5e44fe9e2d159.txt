/* This program performs a merge sort on an unsorted array of integers.
   It takes in the array size and the array elements as parameters. */

DEFINE VARIABLE start AS INTEGER NO-UNDO INITIAL 1.    /* the starting index of the array */
DEFINE VARIABLE end AS INTEGER NO-UNDO.               /* the ending index of the array */
DEFINE VARIABLE mid AS INTEGER NO-UNDO.               /* the middle index of the array */

/* This procedure takes in the array size and array elements as parameters.
   It performs the merge sort recursively. */

PROCEDURE merge_sort(INPUT size AS INTEGER, INPUT arr AS INTEGER ARRAY):
    IF size < 2 THEN RETURN.    /* base case - array is already sorted */

    /* divide the array in half */
    SET mid = FLOOR(size/2).
    SET end = size - 1.

    /* create temporary arrays to store the left and right halves */
    DEFINE VARIABLE left AS INTEGER ARRAY (1:mid).
    DEFINE VARIABLE right AS INTEGER ARRAY (mid+1:end).

    /* populate the temporary arrays */
    DO i = 1 TO mid:
        SET left[i] = arr[i].
    DO i = mid+1 TO end:
        SET right[i-mid] = arr[i].

    /* recursively call merge_sort on the left and right halves */
    CALL merge_sort(mid, left).
    CALL merge_sort(end-mid, right).

    /* merge the two sorted halves into a new sorted array */
    CALL merge(mid, end, left, right, arr).
END PROCEDURE.

/* This procedure performs the merge step in merge sort.
   It takes in the starting and ending indices of the two halves, the two halves 
   themselves, and the original array as parameters. */

PROCEDURE merge(INPUT mid AS INTEGER, INPUT end AS INTEGER,
                INPUT left AS INTEGER ARRAY, INPUT right AS INTEGER ARRAY,
                INOUT arr AS INTEGER ARRAY):
    DEFINE VARIABLE i AS INTEGER INITIAL 1.
    DEFINE VARIABLE j AS INTEGER INITIAL 1.
    DEFINE VARIABLE k AS INTEGER INITIAL mid+1.

    /* compare elements from the two halves and place them in the original array */
    DO WHILE i <= mid AND j <= end:
        IF left[i] < right[j] THEN DO:
            SET arr[k] = left[i].
            SET i = i + 1.
        END.
        ELSE DO:
            SET arr[k] = right[j].
            SET j = j + 1.
        END.
        SET k = k + 1.
    END.

    /* copy the remaining elements from the left half into the original array */
    DO WHILE i <= mid:
        SET arr[k] = left[i].
        SET i = i + 1.
        SET k = k + 1.
    END.

    /* copy the remaining elements from the right half into the original array */
    DO WHILE j <= end:
        SET arr[k] = right[j].
        SET j = j + 1.
        SET k = k + 1.
    END.
END PROCEDURE.

/* This block takes in the array size and the array elements from the user.
   It calls the merge_sort procedure and displays the sorted array. */

DEFINE VARIABLE size AS INTEGER NO-UNDO.   /* the size of the array */
DEFINE VARIABLE arr AS INTEGER ARRAY.      /* the unsorted array */

/* get the array size and elements from the user */
PROMPT-FOR size WITH "Enter the size of the array: ".
MESSAGE "Enter the array elements, separated by commas." VIEW-AS ALERT-BOX.

/* create an array of the given size and populate it with the user's input */
DEFINE VARIABLE input AS CHARACTER INITIAL "".
DEFINE VARIABLE index AS INTEGER NO-UNDO INITIAL 1.
DO WHILE index <= size:
    PROMPT-FOR input WITH "Enter element " + STRING(index) + ": ".
    SET arr[index] = INTEGER(input).
    SET index = index + 1.
END.

MESSAGE "Unsorted Array: " + STRING(arr) VIEW-AS ALERT-BOX.

/* call the merge_sort procedure */
CALL merge_sort(size, arr).

MESSAGE "Sorted Array:   " + STRING(arr) VIEW-AS ALERT-BOX.