/* This is a comment in OPENEDGE_ABL */

DEFINE VARIABLE num AS INTEGER NO-UNDO.

/* This is a variable declaration in OPENEDGE_ABL. 
NO-UNDO means it will not be undone during a transaction rollback. 
INTEGER is the data type. */

IF num > 0 THEN DO:
    /* This is an IF statement in OPENEDGE_ABL. 
    The DO keyword indicates the start of the statement block. */
    
    DISPLAY "The number is positive." /* This is a DISPLAY statement, which prints a message to the screen. */
    
END.
ELSE IF num < 0 THEN DO:
    /* This is an ELSE IF statement in OPENEDGE_ABL. 
    It is used to check for another condition if the previous one was not true. */
    
    DISPLAY "The number is negative."
    
END.
ELSE DO:
    /* This is an ELSE statement in OPENEDGE_ABL. 
    It is executed if none of the previous conditions were true. */
    
    DISPLAY "The number is zero."
    
END.

/* This is the end of the IF statement block. */

FOR EACH customer WHERE customer.state = "CA" AND customer.age >= 18:
    /* This is a FOR EACH loop in OPENEDGE_ABL.
    It iterates through each record of the customer table and executes the statements in the loop. */
    
    DISPLAY customer.name customer.age.
    
END.

/* This is the end of the FOR EACH loop. */

RUN PROCEDURE print_invoice(INPUT customer_num AS INT64):
    /* This is a RUN PROCEDURE statement in OPENEDGE_ABL. 
    It runs the print_invoice procedure with an input parameter of customer_num. */
    
    OUTPUT invoice_num AS INTEGER.
    /* This is an OUTPUT parameter declaration in OPENEDGE_ABL.
    It is used to pass data back from a procedure. */
    
    ASSIGN invoice_num = customer_num + 100.
    /* This is an ASSIGN statement, which assigns a value to a variable. */
    
    IF invoice_num < 0 THEN DO:
        /* This is an IF statement nested in the procedure.
        It checks if the calculated invoice number is negative. */
        
        DISPLAY "Error: Invalid customer number.".
        RETURN ERROR "Invalid customer number.".
        /* This is a RETURN statement, which returns an error message and exits the procedure. */
        
    END.
END PROCEDURE.

/* This is the end of the code snippet. */