/* Define a class CreditCard with properties for cardNumber and cardholderName */
USING OpenEdge.Globalization.*.
CLASS CreditCard:
  {&OpenAccess PUBLIC}: /* Enable OpenAccess for this class */
    /* Define properties */
    DEFINE PRIVATE VARIABLE cardNumber AS CHARACTER NO-UNDO.
    DEFINE PRIVATE VARIABLE cardholderName AS CHARACTER NO-UNDO.

    /* Constructor method to set initial values */
    CONSTRUCTOR PUBLIC CreditCard(pCardNumber AS CHARACTER, pCardholderName AS CHARACTER):
        cardNumber = pCardNumber.
        cardholderName = pCardholderName.
    END CONSTRUCTOR.

    /* Getter and setter methods for properties */
    METHOD PUBLIC CHARACTER getCardNumber():
        RETURN cardNumber.
    END METHOD.

    METHOD PUBLIC CHARACTER getCardholderName():
        RETURN cardholderName.
    END METHOD.

    METHOD PUBLIC VOID setCardNumber(pCardNumber AS CHARACTER):
        cardNumber = pCardNumber.
    END METHOD.

    METHOD PUBLIC VOID setCardholderName(pCardholderName AS CHARACTER):
        cardholderName = pCardholderName.
    END METHOD.

    /* Method to validate credit card number using Luhn algorithm */
    METHOD PUBLIC LOGICAL validateCardNumber():
        DEFINE VARIABLE checksum AS INTEGER NO-UNDO.
        DEFINE VARIABLE doubledDigit AS INTEGER NO-UNDO.
        DEFINE VARIABLE summedDigits AS INTEGER NO-UNDO.
        DEFINE VARIABLE reversedCardNumber AS CHARACTER NO-UNDO.

        /* Reverse the card number */
        REVERSE(cardNumber, reversedCardNumber).

        /* Loop through each character in the reversed card number */
        DO i = 1 TO LENGTH(reversedCardNumber):
            /* Convert character to integer */
            doubledDigit = DEC(NUMBER(SUBSTRING(reversedCardNumber, i, 1))).

            /* Double every other digit, starting from the second to last digit */
            IF MOD(i, 2) = 0 THEN doubledDigit = doubledDigit * 2.

            /* If doubled digit is greater than 9, subtract 9 from it */
            IF doubledDigit > 9 THEN doubledDigit = doubledDigit - 9.

            /* Sum the digits */
            summedDigits = summedDigits + doubledDigit.
        END.

        /* Calculate checksum */
        checksum = MOD(summedDigits, 10).

        IF checksum <> 0 THEN
            /* Checksum is valid, return true */
            RETURN TRUE.
        ELSE
            /* Checksum is invalid, return false */
            RETURN FALSE.
    END METHOD.
END CLASS.