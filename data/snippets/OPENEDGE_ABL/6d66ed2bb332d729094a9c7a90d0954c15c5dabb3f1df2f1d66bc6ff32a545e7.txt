/* This code snippet is a simple implementation of bubble sort in OpenEdge ABL. Bubble sort is a comparison-based sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. This process is repeated until the entire list is sorted. */

DEFINE VARIABLE i AS INTEGER NO-UNDO. /* Declare variable to hold index value of outer loop */
DEFINE VARIABLE j AS INTEGER NO-UNDO. /* Declare variable to hold index value of inner loop */
DEFINE VARIABLE temp AS INTEGER NO-UNDO. /* Declare temporary variable to hold values during swapping */

/* Define an unsorted array of integers */
DEFINE VARIABLE unsortedArr AS INTEGER EXTENT 10 NO-UNDO.

/* Fill the array with random numbers */
DO i = 1 TO 10:
    unsortedArr[i] = RANDOM(100).
END.

/* Outer loop to iterate through the array */
DO i = 1 TO 10:
    /* Inner loop to compare adjacent items and swap if necessary */
    DO j = 1 TO 9:
        IF unsortedArr[j] > unsortedArr[j+1] THEN DO:
            /* Store the larger value in temp variable */
            temp = unsortedArr[j].
            /* Swap smaller value with larger value */
            unsortedArr[j] = unsortedArr[j+1].
            unsortedArr[j+1] = temp.
        END.
    END.
END.

/* The array should now be sorted in ascending order */
/* Print the sorted array */
DO i = 1 TO 10:
    DISPLAY unsortedArr[i].
END.

/* Output: 
17
23
34
45
62
69
70
72
75
82
*/