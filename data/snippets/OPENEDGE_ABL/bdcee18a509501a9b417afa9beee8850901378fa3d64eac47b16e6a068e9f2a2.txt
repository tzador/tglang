DEFINE VARIABLE num AS INTEGER NO-UNDO INITIAL 10. /* This declares a variable named "num" of type "INTEGER" with an initial value of 10.*/

DEFINE VARIABLE str AS CHARACTER NO-UNDO INITIAL "Sample string". /* This declares a variable named "str" of type "CHARACTER" with an initial value of "Sample string".*/

DEFINE VARIABLE dec AS DECIMAL NO-UNDO INITIAL 10.50. /* This declares a variable named "dec" of type "DECIMAL" with an initial value of 10.50.*/

DEFINE VARIABLE log AS LOGICAL NO-UNDO INITIAL TRUE. /* This declares a variable named "log" of type "LOGICAL" with an initial value of TRUE.*/

DEFINE VARIABLE dat AS DATE NO-UNDO INITIAL TODAY. /* This declares a variable named "dat" of type "DATE" with an initial value of today's date.*/

DEFINE VARIABLE dateTime AS DATETIME NO-UNDO INITIAL NOW. /* This declares a variable named "dateTime" of type "DATETIME" with an initial value of the current date and time.*/

DEFINE VARIABLE xml AS XML-NODE NO-UNDO. /* This declares a variable named "xml" of type "XML-NODE".*/

DEFINE VARIABLE h AS HANDLE NO-UNDO. /* This declares a variable named "h" of type "HANDLE".*/

DEFINE VARIABLE arr AS INTEGER EXTENT 10. /* This declares a variable named "arr" of type "INTEGER". The EXTENT keyword specifies the number of elements in the array. In this case, the array has 10 elements.*/

/* ---Progess ABL code to demonstrate variable manipulation and control structures--- */
IF num = 10 THEN DO: /* This is an IF statement that checks if the value of the variable "num" is equal to 10. If it is, the code inside the DO block will be executed.*/
    DISP "The value of num is 10". /* DISP is a built-in function that prints the value inside the parentheses.*/
END.

FOR EACH customer WHERE customer.country = "USA" NO-LOCK: /* This is a FOR EACH statement that loops through all customers in the database where their country is "USA". The NO-LOCK keyword ensures that the database records are not locked during the loop.*/
    DISPLAY customer.name customer.address. /* DISPLAY is a built-in function that prints the values of the specified fields.*/

DO WHILE log: /* This is a DO WHILE statement that executes the code inside the DO block while the variable "log" is TRUE.*/
    ADD 1 TO dec. /* ADD is a built-in function that performs addition. In this case, the value of "dec" is incremented by 1.*/
END. 

CREATE h. /* CREATE is a built-in function that creates an instance of a handle. In this case, the handle "h" is created.*/

xml = NEW xml-nod( ). /* NEW is a built-in function that creates a new instance of the specified class. In this case, a new instance of the "xml-nod" class is created and assigned to the variable "xml".*/

DO i = 1 TO 10: /* This is a DO loop that executes the code inside the DO block 10 times, with the variable "i" being incremented by 1 each time.*/
    arr[i] = i. /* The value of "i" is assigned to the index of the array "arr". This will create an array with the values 1 to 10.*/
END. 

/* ---End of code snippet--- */