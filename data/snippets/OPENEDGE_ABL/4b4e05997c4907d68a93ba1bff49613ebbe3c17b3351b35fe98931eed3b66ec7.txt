define variable myVariable as character no-undo.
/* This is a variable declaration with an annotation*/

define variable myTable as table no-undo
  field id as integer
  field name as character
  field age as integer.

/* This is a table declaration with three fields - id, name, and age.
Each field has a specific data type such as integer or character. */

define temp-table myTempTable no-undo
  field key as character
  field value as character.

/* This is a temporary table declaration with two fields - key and value.
The table will not be saved permanently and is useful for storing temporary data. */

define query myQuery for myTable.

/* This is a query declaration that will retrieve data from the myTable table.
The query will be used later on to fetch data from the table. */

define buffer myBuffer for myTable.

/* This is a buffer declaration for the myTable table.
The buffer serves as a reference to a specific record in the table and allows for easier manipulation of data. */

define trigger myTrigger for myTable before insert.

/* This is a trigger declaration that will fire before a record is inserted into the myTable table.
Triggers can be used to perform certain actions before or after certain database events occur. */

do transaction on error undo, throw:
  create myTable.
  assign
    myTable.id = 1
    myTable.name = "John"
    myTable.age = 25.
  disp myTable with 1 columns.

/* This is a transaction block that will create a new record in the myTable table.
If an error occurs, the transaction will be rolled back (undo) and an error will be thrown.
After the record is created, it will be displayed in a single column format. */

function myFunction returns character
  (input
    p_id as integer,
    p_name as character):
  
  define variable output as character no-undo.
  assign output = string(p_id) + " " + p_name.
  return output.

/* This is a function declaration that will receive an integer and character as parameters (input).
It will then concatenate the parameters and return the result as a character.
The variable output will be used to store the result before it is returned. */

find first myTable where myTable.id = 1 no-lock no-error.
if available myTable then
  delete myTable.

/* This is a find statement that will search for the first record in the myTable table where the id field is equal to 1.
The no-lock option ensures that the record is not locked and the no-error option prevents error messages from being displayed if the record is not found.
If a record is found, it will be deleted. */

define class myClass inherit progressed.

/* This is a class declaration named myClass that inherits from the progressed class.
Classes are used to encapsulate data and behavior into reusable components. */

method private myMethod:
  define input parameter p_name as character no-undo.
  display p_name.
end method.

/* This is a private method declaration named myMethod that will display the input parameter p_name.
Private methods can only be accessed within the same class. */