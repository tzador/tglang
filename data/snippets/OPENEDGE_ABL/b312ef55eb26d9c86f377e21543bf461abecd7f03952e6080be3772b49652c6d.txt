/* This is a complex code snippet written in OPENEDGE_ABL, a programming language used for developing commercial applications. It includes a lot of different features and keywords. */

/* Define a class called "Customer" */
CLASS Customer:
    DEFINE VARIABLE name AS CHARACTER NO-UNDO INITIAL "Unknown". /* Define a variable of type CHARACTER called "name" and set its initial value to "Unknown" */
    DEFINE VARIABLE age AS INTEGER NO-UNDO. /* Define a variable of type INTEGER called "age" */
    DEFINE VARIABLE phone AS CHARACTER NO-UNDO INITIAL "000-0000-0000". /* Define a variable of type CHARACTER called "phone" and set its initial value to "000-0000-0000" */
    DEFINE VARIABLE address AS CHARACTER NO-UNDO INITIAL "No Address". /* Define a variable of type CHARACTER called "address" and set its initial value to "No Address" */
    
    CONSTRUCTOR PUBLIC Customer(pName AS CHARACTER, pAge AS INTEGER): /* Define a public constructor method for the "Customer" class, which takes in two parameters of type CHARACTER and INTEGER */
        ASSIGN name = pName. /* Assign the value of the parameter pName to the "name" variable */
        ASSIGN age = pAge. /* Assign the value of the parameter pAge to the "age" variable */
        
    METHOD PUBLIC CHARACTER getInfo(): /* Define a public method for the "Customer" class called "getInfo" which returns a CHARACTER value */
        RETURN STRING(name) + " is " + STRING(age) + " years old." + " Phone: " + STRING(phone) + ". Address: " + STRING(address). /* Combine the values of the variables into a string and return it */
        
    METHOD PUBLIC CHARACTER setName(pName AS CHARACTER): /* Define a public method for the "Customer" class called "setName" which takes in a parameter of type CHARACTER and returns a CHARACTER value */
        IF pName = "" THEN /* Check if the parameter is an empty string */
            RETURN "Invalid name.". /* Return an error message if it is an empty string */
        ELSE ASSIGN name = pName. /* If not, assign the value of the parameter to the "name" variable */
        
    METHOD PUBLIC CHARACTER setAge(pAge AS INTEGER): /* Define a public method for the "Customer" class called "setAge" which takes in a parameter of type INTEGER and returns a CHARACTER value */
        IF pAge < 0 THEN /* Check if the parameter is a negative number */
            RETURN "Invalid age.". /* Return an error message if it is a negative number */
        ELSE ASSIGN age = pAge. /* If not, assign the value of the parameter to the "age" variable */
        
    METHOD PUBLIC CHARACTER setPhone(pPhone AS CHARACTER): /* Define a public method for the "Customer" class called "setPhone" which takes in a parameter of type CHARACTER and returns a CHARACTER value */
        IF pPhone = "" THEN /* Check if the parameter is an empty string */
            RETURN "Invalid phone number.". /* Return an error message if it is an empty string */
        ELSE IF NUM-ENTRIES(pPhone, "-") <> 3 THEN /* Check if the phone number has 3 parts (area code, prefix, and line number) separated by "-" */
            RETURN "Invalid phone number.". /* Return an error message if it does not have 3 parts */
        ELSE ASSIGN phone = pPhone. /* If it passes both checks, assign the value of the parameter to the "phone" variable */
        
    METHOD PUBLIC CHARACTER setAddress(pAddress AS CHARACTER): /* Define a public method for the "Customer" class called "setAddress" which takes in a parameter of type CHARACTER and returns a CHARACTER value */
        IF pAddress = "" THEN /* Check if the parameter is an empty string */
            RETURN "Invalid address.". /* Return an error message if it is an empty string */
        ELSE ASSIGN address = pAddress. /* If not, assign the value of the parameter to the "address" variable */
        
END CLASS. /* End of the "Customer" class definition */

/* Create a new instance of the "Customer" class and pass in the name and age parameters */
DEFINE VARIABLE c AS Customer NO-UNDO.
c = NEW Customer("John", 32).

/* Call the "getInfo" method to retrieve the information of the new customer */
MESSAGE c:getInfo() VIEW-AS ALERT-BOX.

/* Attempt to set an invalid name and print out the error message */
MESSAGE c:setName("") VIEW-AS ALERT-BOX.

/* Attempt to set an invalid age and print out the error message */
MESSAGE c:setAge(-10) VIEW-AS ALERT-BOX.

/* Attempt to set an invalid phone number and print out the error message */
MESSAGE c:setPhone("123-1234-1234") VIEW-AS ALERT-BOX.

/* Attempt to set a valid phone number */
c:setPhone("123-456-7890").

/* Call the "getInfo" method again to see the updated information */
MESSAGE c:getInfo() VIEW-AS ALERT-BOX.

/* Attempt to set an invalid address and print out the error message */
MESSAGE c:setAddress("") VIEW-AS ALERT-BOX.

/* Attempt to set a valid address */
c:setAddress("123 Main Street").

/* Call the "getInfo" method again to see the updated information */
MESSAGE c:getInfo() VIEW-AS ALERT-BOX.