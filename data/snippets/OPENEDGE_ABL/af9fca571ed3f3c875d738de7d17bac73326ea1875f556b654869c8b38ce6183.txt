/* This section defines a class for a basic employee record, with properties for different types of information. */
CLASS EmployeeRecord:
    /* Property for employee ID, marked as a hidden integer that cannot be modified. */
    HIDDEN PROPERTY EMP_ID AS INTEGER INITIAL AUTO-INCREMENT GET PRIVATE SET PRIVATE.
    
    /* Property for employee first name, marked as case-sensitive character with a maximum length of 30 characters. */
    PROPERTY FIRST_NAME AS CHAR FORMAT "x(30)" CASE-SENSITIVE GET PRIVATE SET PRIVATE.
    
    /* Property for employee last name, marked as case-insensitive character with a maximum length of 30 characters. */
    PROPERTY LAST_NAME AS CHAR FORMAT "x(30)" CASE-INSENSITIVE GET PRIVATE SET PRIVATE.
    
    /* Property for employee hire date, marked as a date with no time component. */
    PROPERTY HIRE_DATE AS DATE NO-UNDO GET PRIVATE SET PRIVATE.
    
    /* Property for employee salary, marked as a decimal with a precision of 9 and scale of 2. */
    PROPERTY SALARY AS DECIMAL FORMAT ">>9.99" GET PRIVATE SET PRIVATE.
    
    /* Property for employee department, marked as a character with a maximum length of 10 characters. */
    PROPERTY DEPARTMENT AS CHARACTER FORMAT "x(10)" GET PRIVATE SET PRIVATE.
END CLASS.

/* This section defines a method for calculating a bonus for an employee based on their salary. */
METHOD PUBLIC CHARACTER CalculateBonus(INPUT iSalary AS DECIMAL):
    DEFINE VARIABLE cBonus AS CHARACTER NO-UNDO.
    
    /* Logic for determining bonus based on salary. */
    IF iSalary < 10000 THEN DO:
        cBonus = "No Bonus".
    END.
    ELSE IF iSalary < 25000 THEN DO:
        cBonus = "Small Bonus".
    END.
    ELSE IF iSalary < 50000 THEN DO:
        cBonus = "Medium Bonus".
    END.
    ELSE DO:
        cBonus = "Large Bonus".
    END.
    
    /* Return bonus as a character. */
    RETURN cBonus.
    
    /* Note: this method can also be rewritten as a function. */
    /* FUNCTION PUBLIC CHARACTER CalculateBonus(INPUT iSalary AS DECIMAL): */
END METHOD.