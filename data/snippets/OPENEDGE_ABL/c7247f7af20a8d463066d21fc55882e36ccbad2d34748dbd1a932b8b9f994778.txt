/* This code snippet is for a customer order system in the OPENEDGE_ABL programming language */

/* Create a customer class with attributes such as name, address, and order history */
CLASS Customer:
  DEFINE PUBLIC MEMBER CHARACTER Name.
  DEFINE PUBLIC MEMBER CHARACTER Address.
  DEFINE PRIVATE MEMBER DECIMAL OrderHistory[].
END CLASS.

/* Create a method to add a new order to the customer's order history */
METHOD PUBLIC LOGICAL addToOrderHistory (INPUT OrderNumber AS DECIMAL):
  /* Check if the order number already exists in the order history */
  IF FIND(OrderHistory, OrderNumber) = -1 THEN
    /* If order number does not exist, add it to the order history array */
    ADD-LAST (OrderHistory, OrderNumber).
    RETURN TRUE.
  ELSE
    /* If order number already exists, return FALSE */
    RETURN FALSE.
  END IF.
END METHOD.

/* Create a function to calculate the total cost of all orders in the order history */
FUNCTION PUBLIC DECIMAL calculateTotalCost ():
  /* Initialize total cost variable */
  DEFINE VARIABLE TotalCost AS DECIMAL NO-UNDO.
  /* Loop through each order number in the order history */
  DO i = 1 TO LENGTH(OrderHistory):
    /* Retrieve the order details for the current order number */
    CustomerOrder = FIND(Orders, OrderHistory[i]).
    /* Add the order total cost to the total cost variable */
    TotalCost = TotalCost + CustomerOrder.OrderTotal.
  END.
  /* Return the total cost */
  RETURN TotalCost.
END FUNCTION.

/* Create an instance of the Customer class */
Customer1 = NEW Customer().
/* Set the attributes for the customer */
Customer1.Name = "John Doe".
Customer1.Address = "123 Main Street".

/* Add a new order to the customer's order history */
Customer1.addToOrderHistory(45678).

/* Calculate the total cost of all orders in the order history */
Total = Customer1.calculateTotalCost().

/* Print the customer's name, address, and total cost */
MESSAGE "Customer Name: " Customer1.Name SKIP
  "Address: " Customer1.Address SKIP
  "Total Cost: $" Total VIEW-AS DECIMAL.