DEFINE VARIABLE num AS INTEGER NO-UNDO ANNOTATION "This variable stores an integer value.";
DEFINE VARIABLE sum AS INTEGER NO-UNDO ANNOTATION "This variable will hold the sum of two other variables.";
DEFINE VARIABLE x AS INTEGER NO-UNDO ANNOTATION "This variable stores the first integer value.";
DEFINE VARIABLE y AS INTEGER NO-UNDO ANNOTATION "This variable stores the second integer value.";

ASSIGN x = 5. /* Assign the value 5 to the variable x */
ASSIGN y = 10. /* Assign the value 10 to the variable y */

SUM sum = (x + y). /* Calculate the sum of the two variables and store it in the variable sum */
MESSAGE "The sum of" x "and" y "is" sum. /* Display a message with the calculated sum */

/* Use a loop to calculate the factorial of x */
DO WHILE x > 0:
    IF x = 1 THEN DO:
        ASSIGN sum = 1.
    END.
    ELSE DO:
        ASSIGN sum = sum * x.
    END.
    ASSIGN x = x - 1.
END.

MESSAGE "The factorial of" x "is" sum. /* Display a message with the calculated factorial */

/* Use a case statement to perform different calculations based on a variable */
CASE sum:
    WHEN 1 THEN MESSAGE "The sum is 1.".
    WHEN 2 THEN MESSAGE "The sum is 2.".
    OTHERWISE DO:
        ASSIGN sum = (sum * 2). /* Multiply the sum by 2 */
        MESSAGE "The multiplied sum is" sum.
    END.
END CASE.

/* Use an IF statement to check if sum is a prime number */
IF sum > 2 THEN DO:
    DO WHILE y < sum:
        IF MOD(sum,y) = 0 THEN DO:
            MESSAGE "The sum is not a prime number.".
            LEAVE. /* Exit the loop */
        END.
        ASSIGN y = y + 1.
    END.
END.
ELSE MESSAGE "The sum is not a prime number.".

/* Use a FOR statement to iterate through a range of values */
FOR EACH num BETWEEN 1 AND 10:
    CASE num:
        WHEN 1 THEN MESSAGE "num is 1.".
        OTHERWISE MESSAGE "num is not 1.".
    END CASE.
END.

/* Use a function to calculate the sum of two numbers */
FUNCTION ADD_TWO_NUMBERS RETURNS INTEGER (INPUT num1 AS INTEGER, INPUT num2 AS INTEGER):
    RETURN num1 + num2.
END FUNCTION.

DEFINE VARIABLE result AS INTEGER NO-UNDO.

ASSIGN result = ADD_TWO_NUMBERS(x, y). /* Call the function and store the result in a variable */

MESSAGE "The sum of" x "and" y "is" result. /* Display a message with the calculated sum using the function */

/* Use a temp-table to store employee information */
DEFINE TEMP-TABLE tt_employee
    FIELD employee_id AS INTEGER
    FIELD first_name AS CHARACTER
    FIELD last_name AS CHARACTER.

/* Create a query to select employee information from a database table */
DEFINE QUERY q_employee FOR tt_employee.
OPEN QUERY q_employee FOR EACH Employee NO-LOCK BY employee_id.

/* Use a buffer to store the first record from the query result */
BUFFER buf_employee.
FETCH FIRST BUFFER buf_employee.

/* Display the first and last name of the employee from the buffer */
MESSAGE "The employee's name is" buf_employee.first_name buf_employee.last_name.

/* Use a procedure to calculate the area of a rectangle */
PROCEDURE CALCULATE_RECTANGLE_AREA:
    DEFINE INPUT PARAMETER length AS INTEGER.
    DEFINE INPUT PARAMETER width AS INTEGER.
    DEFINE OUTPUT PARAMETER area AS INTEGER.

    ASSIGN area = (length * width).
END PROCEDURE.

DEFINE VARIABLE rectangle_area AS INTEGER NO-UNDO.

RUN CALCULATE_RECTANGLE_AREA(length, width, rectangle_area) /* Call the procedure and store the result in a variable */

MESSAGE "The area of the rectangle is" rectangle_area. /* Display a message with the calculated area */