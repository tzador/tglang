/* This code snippet demonstrates a complex algorithm for finding prime numbers using the Sieve of Eratosthenes in OPENEDGE_ABL */
 
DEFINE VARIABLE start_num AS INTEGER NO-UNDO. /* Define a variable to store starting number to search for primes */
DEFINE VARIABLE end_num AS INTEGER NO-UNDO. /* Define a variable to store ending number to search for primes */
 
/* Prompt the user for input for the starting and ending numbers */
MESSAGE "Enter the starting number:" VIEW-AS ALERT-BOX.
UPDATE start_num.

MESSAGE "Enter the ending number:" VIEW-AS ALERT-BOX.
UPDATE end_num.
 
/* Validate the input */
IF start_num < 2 THEN MESSAGE "Starting number must be greater than or equal to 2." VIEW-AS ALERT-BOX.
IF end_num < start_num THEN MESSAGE "Ending number must be greater than starting number." VIEW-AS ALERT-BOX.
 
/* Initialize an empty array to store the numbers from the starting to ending number */
DEFINE VARIABLE prime_arr AS CHARACTER NO-UNDO.
prime_arr[1:end_num] = ?.
 
/* Starting from 2, iterate through each number and mark all multiples as non-prime */
DO num = 2 TO end_num:
    IF prime_arr[num] = ? THEN DO i = num * num TO end_num BY num: /* If the current number is not marked as non-prime */
        prime_arr[i] = "N". /* Mark the multiple as non-prime */
    END.
END.
 
/* Finally, output all the numbers that are still marked as ? (prime numbers) */
MESSAGE "Prime numbers between " + STRING(start_num) + " to " + STRING(end_num) + " are:" VIEW-AS ALERT-BOX.
DO num = 2 TO end_num:
    IF prime_arr[num] = ? THEN DO:
        MESSAGE STRING(num) VIEW-AS ALERT-BOX.
    END.
END.