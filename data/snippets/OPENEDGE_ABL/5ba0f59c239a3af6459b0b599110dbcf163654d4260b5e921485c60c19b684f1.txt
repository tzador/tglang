/* This code snippet is an example of a recursive function to find the lowest common ancestor of two nodes in a binary search tree. */

/* Declare input parameters: node1 and node2, which are the two nodes we want to compare */
DEFINE INPUT PARAMETERS node1 AS CHARACTER NO-UNDO,
                      node2 AS CHARACTER NO-UNDO.

/* Declare local variables */
DEFINE VARIABLE p AS CHARACTER NO-UNDO.
DEFINE VARIABLE q AS CHARACTER NO-UNDO.
DEFINE VARIABLE ancestor AS CHARACTER NO-UNDO.

/* Recursive function to find the lowest common ancestor */
FUNCTION findLCA RETURNS CHARACTER (
    /* Validate input parameters and exit if any are empty */
    IF node1 = "" OR node2 = "" THEN DO: 
        MESSAGE "Input nodes cannot be empty.".
        RETURN "".
    END. 
 
    /* Assign node values to local variables */
    p = node1.
    q = node2.
    
    /* Compare nodes and move to their parent nodes until they meet at the same ancestor */
    DO WHILE p NEQ q:
        /* If p is higher in the tree, move to its parent node */
        IF p > q THEN p = getParent(p).
        /* If q is higher in the tree, move to its parent node */
        ELSE q = getParent(q).
    END.
    
    /* Once they meet at the same ancestor, assign the ancestor to the output variable */
    ancestor = p.
    RETURN ancestor.
).

/* Function to get the parent node of a given node */
FUNCTION getParent RETURNS CHARACTER (
    /* Validate input parameter and exit if empty */
    IF p = "" THEN DO:
        MESSAGE "Input node cannot be empty.".
        RETURN "".
    END.
    
    /* Query the database for the parent node of the current node */
    FIND FIRST nodeTable NO-LOCK WHERE nodeTable.node = p NO-ERROR.
    
    /* If a parent node is found, return its value, otherwise return an empty string */
    IF AVAILABLE nodeTable THEN RETURN nodeTable.parent.
    ELSE RETURN "".
).

/* Call the recursive function and assign the output to a variable */
DEFINE VARIABLE lowestCommonAncestor AS CHARACTER NO-UNDO.
lowestCommonAncestor = findLCA(node1, node2).

/* Output the lowest common ancestor */
DISPLAY "The lowest common ancestor of " node1 " and " node2 " is: " lowestCommonAncestor.