/* This program uses the ON SIZE-ERROR statement to handle potential errors
    that may occur due to the specified input items being of different sizes */

/* Define a dynamic array to store the input items */
DEFINE VARIABLE input-array AS CHARACTER NO-UNDO.

/* Set up a counter for the number of input items */
DEFINE VARIABLE item-count AS INTEGER NO-UNDO INITIAL 0.

/* Define a variable to hold the total size of the input items */
DEFINE VARIABLE total-size AS INTEGER NO-UNDO INITIAL 0.

/* Define the input items with varying sizes */
DEFINE VARIABLE input-item-1 AS CHARACTER NO-UNDO.
DEFINE VARIABLE input-item-2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE input-item-3 AS CHARACTER NO-UNDO.

/* Populate the input items */
ASSIGN
    input-item-1 = "Hello"
    input-item-2 = "World"
    input-item-3 = "!"

/* Loop through each input item */
FOR EACH input-item IN input-array:

    /* Increment the item count and add the size of the input item to the total size */
    ASSIGN
        item-count = item-count + 1
        total-size = total-size + LENGTH(input-item).

    /* Use the ON SIZE-ERROR statement to handle any potential errors */
    ON SIZE-ERROR UNDO, NEXT:
        
        /* If there is an error, display an error message and continue to the next input item */
        MESSAGE "Input item" input-item "is not the same size as previous items." SKIP
        CONTINUE.

    /* If there is no error, add the input item to the dynamic input array */
    ASSIGN input-array[item-count] = input-item.

END.

/* Display the final input array with all input items of varying sizes */
MESSAGE "Final input array:" input-array SKIP "Total items: " item-count SKIP "Total size: " total-size.