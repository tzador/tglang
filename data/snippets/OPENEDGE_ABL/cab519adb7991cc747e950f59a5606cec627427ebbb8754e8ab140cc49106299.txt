/* This code snippet demonstrates a complex function in OPENEDGE_ABL */

/* Define input and output variables */
DEFINE INPUT PARAMETER lv_input AS CHARACTER NO-UNDO.
DEFINE OUTPUT PARAMETER lv_output AS CHARACTER NO-UNDO.

/* Define internal variables */
DEFINE VARIABLE lv_counter AS INTEGER NO-UNDO.
DEFINE VARIABLE lv_temp AS CHARACTER NO-UNDO.
DEFINE VARIABLE lv_result AS CHARACTER NO-UNDO INIT "".
DEFINE VARIABLE lv_remainder AS INTEGER NO-UNDO.

/* Loop through the input string backwards */
DO lv_counter = LENGTH(lv_input) - 1 TO 1 BY -1:

    /* Get the character at each position */
    lv_temp = SUBSTRING(lv_input, lv_counter, 1).

    /* Multiply the character by its position and add it to the result */
    lv_result = STRING(DECIMAL(lv_temp) * lv_counter + DECIMAL(lv_result)).

    /* Check for overflow and calculate the remainder */
    IF LENGTH(lv_result) > 9 THEN
        lv_remainder = DECIMAL(SUBSTRING(lv_result, 1, 1)) * 10 + DECIMAL(SUBSTRING(lv_result, 2, 1)).
    ELSE
        lv_remainder = DECIMAL(lv_result).

    /* Get the remainder modulo 11 */
    lv_remainder = MOD(lv_remainder, 11).

    /* Subtract the result from 11 */
    lv_remainder = 11 - lv_remainder.

    /* Check the remainder and add check digit to the output */
    IF lv_remainder = 10 THEN
        lv_output = lv_output + "X".
    ELSE
        lv_output = lv_output + STRING(lv_remainder).

END.

/* Return the final output */
RETURN lv_output.