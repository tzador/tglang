DEFINE TEMP-TABLE tt-customer NO-UNDO /*A TEMP-TABLE stored in memory, without a permanent data store*/
  FIELD customerID AS CHARACTER FORMAT "x(10)" LABEL "Customer ID" INDEX customerID-idx /*A character field with a label and an index*/
  FIELD firstName AS CHARACTER FORMAT "x(20)" LABEL "First Name" /*A character field with a label, without an index*/ 
  FIELD lastName AS CHARACTER FORMAT "x(30)" LABEL "Last Name" INDEX lastName-idx /*A character field with a label and an index*/ 
  FIELD email AS CHARACTER FORMAT "x(50)" LABEL "Email Address" /*A character field with a label, without an index*/ 
  FIELD balance AS DECIMAL FORMAT ">>>,>>9.99" LABEL "Account Balance" /*A decimal field with a label and a specific format*/. 

/*Creating a temporary table with four fields and specifying their data types, format, labels, and indexes*/
/*The NO-UNDO option ensures that the table will not be saved in the database upon termination*/ 

DEFINE VARIABLE custID AS CHARACTER NO-UNDO. /*Defining a variable with a specific data type and the NO-UNDO option*/
DEFINE VARIABLE custEmail AS CHARACTER NO-UNDO. /*Defining another variable with the same options*/

/*Using the FOR EACH statement to loop through the records in the temp-table*/
FOR EACH tt-customer: /*Specifying the temp-table to loop through*/
  DISP tt-customer.firstName tt-customer.lastName FORMAT "x(20)" WITH FRAME cust-info. /*Displaying the first and last name fields with a specific format and frame*/
  /*The FRAME statement allows for easy organization and manipulation of the displayed data*/
  ASSIGN custID = tt-customer.customerID NO-ERROR. /*Assigning the value of the customer ID field to the variable created earlier, with the NO-ERROR option to prevent any potential errors*/
  IF AVAILABLE custID THEN /*Checking if the value was successfully assigned*/
    DISP "Customer ID: " custID WITH FRAME cust-info. /*Displaying the customer ID with a label and a specific frame*/
  ASSIGN custEmail = tt-customer.email NO-ERROR. /*Assigning the value of the email field to the other variable, with the NO-ERROR option*/
  IF AVAILABLE custEmail THEN /*Checking if the value was successfully assigned*/
    DISP "Email Address: " custEmail WITH FRAME cust-info. /*Displaying the email address with a label and a specific frame*/
END.

/*Example output:
First Name      Last Name           Customer ID     Email Address
--------------------------------------------------------------------
John            Smith               CUST-123456     john.smith@email.com
Jane            Johnson             CUST-789012     jane.johnson@email.com
...
*/ 

/*Additional operations that can be performed on the temp-table*/

/*Creating a new temp-table using the LIKE keyword, which copies the fields and structure of an existing temp-table*/
DEFINE TEMP-TABLE tt-json LIKE tt-customer. 

/*Adding a new field to the temp-table using the ADD-FIELDS method*/
DEFINE TEMP-TABLE tt-extended NO-UNDO /*A new temp-table with a permanent data store */
  LIKE tt-customer ADD-FIELDS (
    FIELD address AS CHARACTER FORMAT "x(50)",
    FIELD city AS CHARACTER FORMAT "x(30)",
    FIELD state AS CHARACTER FORMAT "x(20)",
    FIELD postalCode AS CHARACTER FORMAT "x(10)"
  ). /*Adding four new fields to the temp-table with specific data types and formats*/

/*Updating the temp-table data using the FIND method*/
FIND FIRST tt-customer WHERE tt-customer.customerID = "CUST-123456" NO-ERROR. /*Searching for the desired record using the FIND method and the customer ID field*/
IF AVAILABLE tt-customer THEN /*Checking if the record was found*/
  ASSIGN tt-customer.address = "123 Main Street" tt-customer.city = "New York" tt-customer.state = "NY" tt-customer.postalCode = "10001". /*Updating the values of the new fields for the found record*/

/*Dropping the temp-table and freeing up memory using the DELETE OBJECT statement*/
DELETE OBJECT tt-customer. /*Deleting the temp-table from the memory*/