/* This is a complex snippet that uses multiple functions and loops to sort and filter data */ 

/* First, we declare an array to hold our data */
DEFINE VARIABLE data_array AS CHARACTER NO-UNDO EXTENT 10.

/* Then, we use a for loop to populate the array with data from a database table */
FOR EACH customer WHERE customer.country = "USA" AND customer.sales_rep = "Smith":
    data_array[data_array:LAST-INDEX + 1] = customer.name.
END.

/* Next, we use a sort function to sort the array in alphabetical order */
SORT data_array ASCENDING.

/* Now, we loop through the array and use a conditional statement to filter out any names that contain the letter 'o' */
DO i = 1 TO data_array:LAST-INDEX:
    IF INDEX(data_array[i], "o") = 0 THEN DO:
        /* If the name does not contain the letter 'o', we print it out */
        MESSAGE data_array[i].
    END.
END.

/* Finally, we use a function to remove any duplicate names from the array */
RUN unique_array(data_array).

/* This function removes any duplicate values from the given array */
FUNCTION unique_array:
    DEFINE INPUT PARAMETER arr AS CHARACTER NO-UNDO EXTENT.
    DEFINE VARIABLE temp_arr AS CHARACTER NO-UNDO EXTENT.
    DEFINE VARIABLE i AS INTEGER NO-UNDO.
    DEFINE VARIABLE j AS INTEGER NO-UNDO.

    /* Loop through the array */
    DO i = 1 TO arr:LAST-INDEX:
        /* Check if current value is already in the temporary array */
        IF INDEX(temp_arr, arr[i]) = 0 THEN DO:
            /* If not, add it to the temporary array */
            temp_arr[temp_arr:LAST-INDEX + 1] = arr[i].
        END.
    END.

    /* Copy the temporary array back to the original array */
    arr = temp_arr.

    /* Return the updated array */
    RETURN arr.
END FUNCTION.