CONSTRUCTOR PUBLIC widgetClass :
    DEFINE INPUT PARAMETER iWidgetType AS CHARACTER NO-UNDO.
    DEFINE INPUT PARAMETER iSize AS INTEGER NO-UNDO.

    SUPER().

    /* Do some complex initialization */
    this-iWidgetType = iWidgetType.
    this-iSize = iSize.

    /* Add widget to container */
    this-oContainer:ADD(WIDGET-FIELD(iWidgetType),
        EXPANDERWIDTH = this-iSize,
        EXPANDERHEIGHT = this-iSize,
        FRAME-BUTTON = yes).
END CONSTRUCTOR.

METHOD PUBLIC CHARACTER GetWidgetType ():
    RETURN this-iWidgetType.
END METHOD.

METHOD PUBLIC VOID SetWidgetSize(INPUT iSize AS INTEGER):
    /* Do some calculations */
    IF iSize < 0 THEN DO:
        MESSAGE "Invalid size specified!" VIEW-AS ALERT-BOX INFO BUTTONS OK.
        RETURN.
    END.

    this-iSize = iSize.
    /* Resize widget */
    this-oContainer:EXPANDERWIDTH = this-iSize.
    this-oContainer:EXPANDERHEIGHT = this-iSize.
END METHOD.

METHOD PUBLIC INT GetContainerWidth ():
    /* Returns the width of the container in pixels */
    RETURN this-oContainer:EXPANDERWIDTH.
END METHOD.

METHOD PUBLIC INT GetContainerHeight ():
    /* Returns the height of the container in pixels */
    RETURN this-oContainer:EXPANDERHEIGHT.
END METHOD.

METHOD PUBLIC VOID AddChildWidget(INPUT iWidget AS CLASS widgetClass):
    /* Adds a child widget to the container */
    this-oContainer:ADD(iWidget:GetWidgetType(),
        EXPANDERWIDTH = iWidget:GetContainerWidth(),
        EXPANDERHEIGHT = iWidget:GetContainerHeight()).
END METHOD.

METHOD PUBLIC VOID Draw():
    /* Draws the widget on the screen */
    /* Do some drawing operations */
    DRAW iWidgetType.
    /* Draw child widgets */
    FOR EACH widgetClass IN this-oContainer:GET-CHILDREN():
        widgetClass:Draw().
    END.
END METHOD.