/* This code snippet is a simple program that demonstrates
 * an employee management system using OPENEDGE_ABL. */

/* First, we define a class called Employee that represents
 * an individual employee in the company. */
DEFINE CLASS Employee
    PUBLIC id AS INTEGER.        /* unique identifier for the employee */
    PUBLIC name AS CHARACTER.    /* full name of the employee */
    PROTECTED salary AS DECIMAL. /* salary of the employee (only accessible within the class) */
    PUBLIC department AS CHARACTER. /* department the employee belongs to */

    /* Method to set the salary of the employee.
     * Takes in a parameter salary and sets it to the salary attribute.
     * Only accessible within the class. */
    METHOD SETSALARY(iSalary AS DECIMAL):
        SELF.salary = iSalary.
    END METHOD.

    /* Method to get the salary of the employee.
     * Returns the value of the salary attribute.
     * Only accessible within the class. */
    METHOD GETSALARY():
        RETURN SELF.salary.
    END METHOD.

    /* Destructor method which cleans up after the object is destroyed. */
    METHOD DESTROY():
        /* Code to free up memory or resources used by the object. */
    END METHOD.

END CLASS.

/* Now, we create an instance of the Employee class. */
DEFINE VARIABLE emp AS Employee NO-UNDO.

/* Assign values to the object's attributes. */
emp.id = 1.
emp.name = "John Smith".
emp.SETSALARY(50000).
emp.department = "Sales".

/* Print out the details of the employee. */
DISPLAY "Employee ID: " emp.id SKIP
    "Name: " emp.name SKIP
    "Salary: " emp.GETSALARY() SKIP
    "Department: " emp.department.

/* Now, we create a Manager class which is a subclass of Employee. */
DEFINE CLASS Manager EXTENDS Employee
    PUBLIC subordinates AS INTEGER. /* number of employees under this manager */

    /* Method to set the number of subordinates of the manager.
     * Takes in a parameter subordinates and sets it to the subordinates attribute.
     * Only accessible within the class. */
    METHOD SETSUBORDINATES(iSubordinates AS INTEGER):
        SELF.subordinates = iSubordinates.
    END METHOD.

    /* Method to get the number of subordinates of the manager.
     * Returns the value of the subordinates attribute.
     * Only accessible within the class. */
    METHOD GETSUBORDINATES():
        RETURN SELF.subordinates.
    END METHOD.

    /* Overriding the GETSALARY method of the parent class.
     * Returns the salary of the manager along with the number of subordinates. */
    METHOD GETSALARY():
        RETURN SELF.salary + (SELF.subordinates * 1000).
    END METHOD.
END CLASS.

/* Create an instance of the Manager class. */
DEFINE VARIABLE mgr AS Manager NO-UNDO.

/* Assign values to the object's attributes. */
mgr.id = 2.
mgr.name = "Jane Doe".
mgr.SETSALARY(75000).
mgr.department = "Marketing".
mgr.SETSUBORDINATES(5).

/* Print out the details of the manager. */
DISPLAY "Manager ID: " mgr.id SKIP
    "Name: " mgr.name SKIP
    "Salary: " mgr.GETSALARY() SKIP
    "Department: " mgr.department SKIP
    "Subordinates: " mgr.GETSUBORDINATES().