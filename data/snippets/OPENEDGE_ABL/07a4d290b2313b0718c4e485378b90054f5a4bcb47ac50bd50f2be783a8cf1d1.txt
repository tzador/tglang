/* This program demonstrates the use of inheritance in OpenEdge ABL */

/* Create a base class named Employee */
CLASS Employee:
    PRIVATE hSalary AS HANDLE.
    PRIVATE cName AS CHARACTER.
    PRIVATE iAge AS INTEGER.
   
    /* Constructor for Employee class */
    CONSTRUCTOR PUBLIC Employee (INPUT hSalary, cName, iAge):
        THIS-OBJECT:SET-SALARY(hSalary).
        THIS-OBJECT:SET-NAME(cName).
        THIS-OBJECT:SET-AGE(iAge).
    END CONSTRUCTOR.
   
    /* Setter methods for class properties */
    METHOD PUBLIC VOID SET-SALARY (INPUT hSalary):
        IF NOT VALID-OBJECT(hSalary) THEN
            DO:
                MESSAGE "Invalid salary object provided!" SKIP.
                RETURN.
            END.
        THIS-OBJECT:hSalary = hSalary.
    END METHOD.
    METHOD PUBLIC VOID SET-NAME (INPUT cName):
        THIS-OBJECT:cName = cName.
    END METHOD.
    METHOD PUBLIC VOID SET-AGE (INPUT iAge):
        THIS-OBJECT:iAge = iAge.
    END METHOD.
   
    /* Getter methods for class properties */
    METHOD PUBLIC HANDLE GET-SALARY ():
        RETURN THIS-OBJECT:hSalary.
    END METHOD.
    METHOD PUBLIC CHARACTER GET-NAME ():
        RETURN THIS-OBJECT:cName.
    END METHOD.
    METHOD PUBLIC INTEGER GET-AGE ():
        RETURN THIS-OBJECT:iAge.
    END METHOD.
END CLASS.

/* Create a subclass named Developer that inherits from Employee class */
CLASS Developer INHERITS Employee:
    PRIVATE cLanguage AS CHARACTER.
   
    /* Constructor for Developer class */
    CONSTRUCTOR PUBLIC Developer (INPUT hSalary, cName, iAge, cLanguage):
        SUPER-CONSTRUCTOR(hSalary, cName, iAge).
        THIS-OBJECT:SET-LANGUAGE(cLanguage).
    END CONSTRUCTOR.
   
    /* Setter method for class property */
    METHOD PUBLIC VOID SET-LANGUAGE (INPUT cLanguage):
        THIS-OBJECT:cLanguage = cLanguage.
    END METHOD.
   
    /* Getter method for class property */
    METHOD PUBLIC CHARACTER GET-LANGUAGE ():
        RETURN THIS-OBJECT:cLanguage.
    END METHOD.
END CLASS.

/* Main block */
BEGIN CASE FIRST-PROCEDURE:
    /* First case - instantiate an Employee object */
    WHEN "Employee":
        DEFINE VARIABLE oEmployee AS Employee NO-UNDO.
        ASSIGN
            oEmployee = NEW Employee(INITIALIZE COMPANY-INFO:Salary, "John Smith", 25).
        MESSAGE 
            "Employee name: " THIS-OBJECT:GET-NAME() SKIP
            "Employee age: " THIS-OBJECT:GET-AGE() SKIP
            "Employee salary: " THIS-OBJECT:hSalary:GET-SALARY() SKIP
        VIEW-AS ALERT-BOX INFO BUTTONS OK.
   
    /* Second case - instantiate a Developer object */
    WHEN "Developer":
        DEFINE VARIABLE oDeveloper AS Developer NO-UNDO.
        ASSIGN
            oDeveloper = NEW Developer(INITIALIZE COMPANY-INFO:Salary, "Jane Doe", 30, "C#").
        MESSAGE 
            "Developer name: " THIS-OBJECT:GET-NAME() SKIP
            "Developer age: " THIS-OBJECT:GET-AGE() SKIP
            "Developer salary: " THIS-OBJECT:hSalary:GET-SALARY() SKIP
            "Developer language: " THIS-OBJECT:GET-LANGUAGE() SKIP
        VIEW-AS ALERT-BOX INFO BUTTONS OK.
   
    /* Default case - output an error message */
    OTHERWISE
        MESSAGE "Incorrect procedure name provided!" VIEW-AS ALERT-BOX ERROR BUTTONS OK.
END CASE.

/* Output:
Employee name: John Smith
Employee age: 25
Employee salary: 50000
Developer name: Jane Doe
Developer age: 30
Developer salary: 70000
Developer language: C#
*/