# This code snippet generates a random password of specified length and complexity and outputs it in clear and encrypted versions.

# Generate random characters for password
$lowercase = 0..9 | ForEach-Object {{ Get-Random -Maximum 26 | % {{ [char]([int][char]'a'+$_) }} }} # numbers 0-9
$uppercase = 0..9 | ForEach-Object {{ Get-Random -Maximum 26 | % {{ [char]([int][char]'A'+$_) }} }} # uppercase letters
$specialChars = "!@#$%^&*()-_=+`~[{]};:'" | % {{ Get-Random -Maximum $_.Length }} | % {{ $_[$_] }} # special characters
$password = $lowercase + $uppercase + $specialChars | Get-Random -Count $length # combine all characters and select random ones for final password

# Encrypt password using AES algorithm
$AESkey = 1..32 | % {{ [char]([int][char](Get-Random -Minimum 33 -Maximum 126)) }} # generate random encryption key of specified length
$AESencrypted = [convert]::ToBase64String([convert]::FromBase64String($AESkey) | ConvertTo-SecureString -AsPlainText -Force) # convert key to secure string in base64 format
[AES]::Create().CreateEncryptor($AESkey, $AESkey).TransformFinalBlock([text.encoding]::UTF8.GetBytes($password), 0, $password.Length) | % {{ "{0:X2}" -f $_ }} # use AES algorithm to encrypt the password and output in hexadecimal format

# Output results
Write-Host "Clear password:" $password # output clear version of password
Write-Host "Encrypted password:" $AESencrypted # output encrypted version of password