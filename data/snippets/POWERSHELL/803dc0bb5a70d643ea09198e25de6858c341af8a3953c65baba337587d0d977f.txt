# This code snippet is a function that checks and filters an array based on a given condition

# The function takes in three parameters: the array to be filtered, the condition to filter by, and the operator to use for comparison
function Filter-Array {
    param(
        [array] $array,
        [scriptblock] $condition,
        [string] $operator
    )
    # Create a new empty array to store the filtered results
    $filteredArray = @()
    # Loop through each element in the input array
    foreach ($element in $array) {
        # Use the given condition to check if the element meets the criteria
        if ($condition.Invoke($element)) {
            # For each element that meets the condition, compare it to the previous element in the filtered array
            foreach ($filteredElement in $filteredArray) {
                # Use the given operator to compare the two elements
                switch ($operator) {
                    '=' {
                        # If they are equal, add the element to the filtered array and break out of the loop
                        $filteredArray += $element
                        break
                    }
                    '!=' {
                        # If they are not equal, skip to the next element in the filtered array
                        continue
                    }
                    '>' {
                        # If the previous element is greater than the current element, insert the current element at the correct position in the filtered array
                        if ($filteredElement -gt $element) {
                            $filteredArray.Insert($filteredArray.IndexOf($filteredElement), $element)
                            break
                        }
                    }
                    '<' {
                        # If the previous element is less than the current element, insert the current element at the correct position in the filtered array
                        if ($filteredElement -lt $element) {
                            $filteredArray.Insert($filteredArray.IndexOf($filteredElement), $element)
                            break
                        }
                    }
                    # Add more cases for different comparison operators if needed
                }
            }
        }
    }
    # Output the filtered array
    $filteredArray
}

# Example usage: filter an array of numbers and return only those that are greater than 5
$arrayToFilter = @(2, 7, 4, 10, 8, 3)
$result = Filter-Array $arrayToFilter {$args[0] -gt 5} '>'