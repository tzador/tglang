# This code snippet uses PowerShell to retrieve information about all running processes on a computer and output the results in a table format.

# First, we use Get-Process cmdlet to retrieve all running processes and store the results in the $Processes variable
$Processes = Get-Process

# Next, we use ForEach-Object cmdlet to iterate through each process in the $Processes variable
$Processes | ForEach-Object {

    # Inside the loop, we use the Select-Object cmdlet to select specific properties of each process, such as ProcessName, ID, and CPU usage
    $ProcessInfo = $_ | Select-Object -Property ProcessName, Id, CPU

    # The CPU value returned by Get-Process is in percentage, so we use the ToString method to convert it to a decimal with two decimal places
    $CPU = $ProcessInfo.CPU.ToString('N2')

    # We use the Add-Member cmdlet to add a new custom property named 'Memory' to the $ProcessInfo object and calculate the memory usage of each process
    $ProcessInfo | Add-Member -MemberType 'NoteProperty' -Name 'Memory' -Value ($_.WorkingSet64 / 1MB)

    # Finally, we use the Format-Table cmdlet to format the output in a table with appropriate column headings and display the results in the console
    $ProcessInfo | Format-Table -Property @{Label='Process Name'; Expression={$_.ProcessName}}, @{Label='ID'; Expression={$_.Id}}, @{Label='CPU (%)'; Expression={$CPU}}, @{Label='Memory (MB)'; Expression={$_.Memory}}
}