# This script will check the status of Windows Defender on a remote computer and activate it if it is not already enabled

# Import the PowerShell ActiveDirectory module
Import-Module activedirectory

# Define the name of the remote computer
$computerName = "COMPUTER01"

# Define the username and password of an account with administrator privileges
$username = "admin"
$password = "password123"

# Create a secure string object for the password
$securePassword = ConvertTo-SecureString $password -AsPlainText -Force

# Create a PSCredential object using the username and secure password
$credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

# Define the command to check the status of Windows Defender on the remote computer
$command = "Get-MpPreference"

# Invoke the command using the Invoke-Command cmdlet and pass in the computer name and credential
$result = Invoke-Command -ComputerName $computerName -Credential $credential -ScriptBlock { & $command }

# Check if the Windows Defender Real-Time Protection option is enabled
if ($result.RealTimeProtectionEnabled -eq $false) {

    # Define the command to enable Windows Defender Real-Time Protection
    $enableCommand = "Set-MpPreference -DisableRealtimeMonitoring \$false"

    # Invoke the command using the Invoke-Command cmdlet and pass in the computer name and credential
    Invoke-Command -ComputerName $computerName -Credential $credential -ScriptBlock { & $enableCommand }
}

# Check if the Windows Defender Cloud-Based Protection option is enabled
if ($result.CloudBasedProtection -eq $false) {

    # Define the command to enable Windows Defender Cloud-Based Protection
    $enableCommand = "Set-MpPreference -CloudBasedProtection \$true"

    # Invoke the command using the Invoke-Command cmdlet and pass in the computer name and credential
    Invoke-Command -ComputerName $computerName -Credential $credential -ScriptBlock { & $enableCommand }
}