# Assign integer value to variable
$integer = 5

# Declare array of strings
[string[]]$myArray = @("apple", "banana", "orange")

# Create hashtable with key-value pairs
$myHashtable = @{
    "color" = "blue"
    "size" = "medium"
}

# Define function with parameters
function Add-Numbers {
    param (
        [int]$num1,
        [int]$num2
    )
    $sum = $num1 + $num2
    Write-Host "The sum of $num1 and $num2 is $sum"
}

# Call function and pass arguments
Add-Numbers -num1 10 -num2 7

# Use foreach loop to iterate through array
foreach ($item in $myArray) {
    Write-Host "I have a $item"
}

# Use conditional statement to check if variable is equal to a specific value
if ($integer -eq 5) {
    Write-Host "The integer is equal to 5"
}

# Use try-catch block to handle errors
try {
    # code that may result in an error
    Get-Content -Path "nonexistentfile.txt"
}
catch {
    # code to handle error
    Write-Host "An error occurred: $_"
}

# Use switch statement to handle multiple conditions
switch ($integer) {
    1 {Write-Host "The integer is equal to 1"}
    2 {Write-Host "The integer is equal to 2"}
    default {Write-Host "The integer is not equal to 1 or 2"}
}

# Use pipeline to pass output of one command as input of another
Get-ChildItem | Where-Object {$_.Extension -eq ".txt"} | Select-Object Name

# Use regex to search for a pattern in a string
$myString = "The quick brown fox jumps over the lazy dog"
$pattern = "brown"
if ($myString -match $pattern) {
    Write-Host "Found 'brown' in the string"
}