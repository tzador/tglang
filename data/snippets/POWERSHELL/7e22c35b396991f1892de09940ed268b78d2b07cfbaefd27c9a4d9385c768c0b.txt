# This code snippet is a complex function that calculates the prime numbers within a specific range and outputs the results in an array.

function Get-Primes {
    param( [int]$start, [int]$end )

    # Create empty array to store prime numbers
    $primes = @()

    # Iterate through the given range
    for ( $i = $start; $i -le $end; $i++ ) {

        # Check if current number is divisible by 2 or 3
        if ( ($i % 2 -eq 0 -and $i -ne 2) -or ($i % 3 -eq 0 -and $i -ne 3) ) {

            # If not, check for other factors
            $isPrime = $true
            $limit = [math]::Sqrt($i)

            # Iterate through numbers up to the square root
            for ( $j = 3; $j -le $limit; $j += 2 ) {

                # If a factor is found, mark it as not prime and break the loop
                if ( $i % $j -eq 0 ) {
                    $isPrime = $false
                    break
                }
            }

            # If no factors were found, add number to the array of primes
            if ( $isPrime ) {
                $primes += $i
            }
        }
    }

    # Output the array of primes
    return $primes
}

# Call the function with a start and end value
Get-Primes -start 1 -end 100

# Output:
# 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97