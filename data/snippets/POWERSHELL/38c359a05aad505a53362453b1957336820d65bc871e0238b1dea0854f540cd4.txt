[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") # Load the Microsoft.VisualBasic assembly

if($env:ComputerName -eq "MyComputer") { # Check if the computer name is "MyComputer"
    Write-Host "Hello, MyComputer!" # If so, display a greeting
}
else {
    Write-Host "Hello, generic user!" # Otherwise, display a different greeting
}

$folderPath = [Microsoft.VisualBasic.Interaction]::InputBox("Enter the path to a folder") # Use the InputBox method from the Microsoft.VisualBasic.Interaction class to prompt the user for a folder path

try { # Use a try-catch block to handle any errors that may occur
    $files = Get-ChildItem -Path $folderPath -Recurse # Use the Get-ChildItem cmdlet to retrieve all files in the specified folder and its subfolders
    foreach($file in $files) { # Iterate through each file
        if($file.Extension -eq ".txt") { # Check if the file has a .txt extension
            $content = Get-Content -Path $file.FullName # Use the Get-Content cmdlet to retrieve the contents of the file
            $newContent = $content.Replace("Hello", "Hi") # Use the Replace method to replace all occurrences of "Hello" with "Hi"
            Set-Content -Path $file.FullName -Value $newContent # Use the Set-Content cmdlet to overwrite the file with the updated content
            Write-Host "File $($file.FullName) has been updated!" # Display a message indicating the file has been updated
        }
    }
}
catch { # Catch any errors that may occur
    Write-Host "An error occurred while trying to update the files. Error: $($_.Exception.Message)" # Display an error message
}