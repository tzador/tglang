Param($InputFile, $OutputFile)

#Function to read input file and create hashtable
function ParseFile ($InputFile) {
#Declares hashtable to store data from input file
    $data = @{}

    #Opens and reads each line of the input file
    Get-Content $InputFile | ForEach-Object {
        #Splits line by delimiter and stores data into variables
        $line = $_ -split ","
        $firstname = $line[0]
        $lastname = $line[1]
        $age = $line[2]

        #Adds the data to the hashtable
        $data.Add($firstname, (@{
            LastName = $lastname
            Age = $age
        }))
    }
    return $data
}

#Function to write output file with updated data
function WriteFile ($OutputFile, $data) {
    #Opens output file for writing
    $writer = [System.IO.File]::CreateText($OutputFile)

    #Loops through hashtable to write data to output file
    foreach ($entry in $data.Keys) {
        #Formats data into comma-separated values
        $line = "$entry,$($data[$entry].LastName),$($data[$entry].Age)"
        
        #Writes data to output file
        $writer.WriteLine($line)
    }

    #Closes the writer and saves changes to the output file
    $writer.Close()
}

#Main code logic
#Checks for valid input and output files
if (Test-Path $InputFile -PathType Leaf) {
    if (!(Test-Path $OutputFile -PathType Leaf)) {
        #Calls function to read input file and creates hashtable
        $data = ParseFile $InputFile

        #Modifies hashtable data
        #For example, changes the age of "John" from 45 to 46
        $data["John"].Age = 46

        #Calls function to write output file with updated data
        WriteFile $OutputFile $data
    } else {
        #Displays error message if output file already exists
        Write-Host "Output file already exists."
    }
} else {
    #Displays error message if input file does not exist
    Write-Host "Input file does not exist."
}