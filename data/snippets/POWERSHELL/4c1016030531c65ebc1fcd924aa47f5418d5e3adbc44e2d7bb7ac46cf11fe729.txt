# This code snippet demonstrates the complexity of using multithreading in Powershell
# It creates a main thread and three worker threads to perform different tasks
# Import the necessary modules
Import-Module "ThreadJob"

# Create a main thread and start it
$mainThread = [System.Threading.Thread]::CurrentThread

# Create three worker threads
$thread1 = [System.Threading.Thread]::new( {
    # First worker thread task
    Write-Host "First worker thread task started"
    # Lengthy task simulation
    Start-Sleep -Seconds 5
    Write-Host "First worker thread task completed"
})

$thread2 = [System.Threading.Thread]::new( {
    # Second worker thread task
    Write-Host "Second worker thread task started"
    # Lengthy task simulation
    Start-Sleep -Seconds 10
    Write-Host "Second worker thread task completed"
})

$thread3 = [System.Threading.Thread]::new( {
    # Third worker thread task
    Write-Host "Third worker thread task started"
    # Lengthy task simulation
    Start-Sleep -Seconds 15
    Write-Host "Third worker thread task completed"
})

# Start all three threads in parallel
Start-ThreadJob -ScriptBlock $thread1
Start-ThreadJob -ScriptBlock $thread2
Start-ThreadJob -ScriptBlock $thread3

# Wait for all threads to finish
$thread1.WaitForEnd()
$thread2.WaitForEnd()
$thread3.WaitForEnd()

# Print completed message
Write-Host "All tasks completed"

# Restore main thread
[System.Threading.Thread]::ResetAbort()

# Print main thread details
Write-Host "Main thread ID: $($mainThread.ManagedThreadId)"
Write-Host "Main thread priority: $($mainThread.Priority)"
Write-Host "Main thread state: $($mainThread.ThreadState)"