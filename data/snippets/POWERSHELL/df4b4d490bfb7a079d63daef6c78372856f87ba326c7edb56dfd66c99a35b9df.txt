# This code snippet explores the basic functionality of PowerShell
# It creates a new variable, formats the output, and uses conditional statements

# Define variable for name
$name = "John"

# Format output and print welcome message
"Welcome, $name!" | Out-Host

# Use conditional statement to check name
if ($name -eq "John") {
    "Hey John, how are you?" | Out-Host
} elseif ($name -eq "Jane") {
    "Hey Jane, how are you?" | Out-Host
} else {
    "Hey there, nice to meet you!" | Out-Host
}

# Create new variable for age
$age = 25

# Use conditional statement to check age
if ($age -gt 21) {
    "Wow, you're $age years old! You're legal now!" | Out-Host
} else {
    "You're still young, enjoy it!" | Out-Host
}

# Create new variable for favorite color
$favoriteColor = "blue"

# Use switch statement to check favorite color
switch ($favoriteColor) {
    "red" {
        "Red is a great color!" | Out-Host
    }
    "green" {
        "Green is also a great color!" | Out-Host
    }
    "blue" {
        "Blue is the best color!" | Out-Host
    }
    default {
        "I don't think I know that color..." | Out-Host
    }
}

# Create new array for favorite foods
$favoriteFoods = @("pizza", "tacos", "sushi")

# Use for loop to print out favorite foods
for ($i=0; $i -lt $favoriteFoods.Count; $i++) {
    "$name loves $($favoriteFoods[$i])!" | Out-Host
}

# Bonus: Ask for user input and store it in a variable
$animal = Read-Host "What is your favorite animal?"

# Use try-catch block to handle exceptions
try {
    # Convert input to uppercase
    $animal = $animal.ToUpper()
    "Your favorite animal is $animal!" | Out-Host
} catch {
    # Print error message
    "Oops, something went wrong. Please try again." | Out-Host
}