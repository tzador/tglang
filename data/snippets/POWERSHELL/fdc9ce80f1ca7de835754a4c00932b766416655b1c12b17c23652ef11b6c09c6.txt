# This is a long and complex code snippet written in PowerShell to check for active processes and their CPU usage
# It uses the 'Get-Process' cmdlet and 'ForEach-Object' loop to iterate through all processes and their properties
# Output is in the form of a table with process name, ID, and CPU usage
# Adapted from Microsoft docs: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process?view=powershell-7.1

# Get all processes and their properties
$processes = Get-Process
# Declare an empty array to store process information
[array]$processInfo = @()

# Loop through each process
$processes | ForEach-Object {
    # Save process name and ID in variables
    $name = $_.ProcessName
    $id = $_.Id
    # Get CPU usage for the process
    $cpu = $_.CPU

    # Create a custom object with process information
    $obj = New-Object PSObject -Property @{
        ProcessName = $name
        ProcessID = $id
        CPUUsage = $cpu
    }
    # Add the object to the processInfo array
    $processInfo += $obj
}

# Sort the processInfo array by CPUUsage in descending order
$processInfo = $processInfo | Sort-Object -Property CPUUsage -Descending

# Output the process information in a table format
$processInfo | Format-Table -AutoSize ProcessName, ProcessID, CPUUsage