Function Get-FolderDetails {
 <#
	.SYNOPSIS
	Get details of specified folder

	.DESCRIPTION
	This function retrieves the details of the specified folder, such as the number of files, size, and attributes.

	.PARAMETER FolderPath
	The path of the folder to retrieve details from.

	.EXAMPLE
	Get-FolderDetails -FolderPath "C:\Users\John\Documents"
	Returns the details of the "Documents" folder located in the "John" user's "Documents" folder.

	.OUTPUTS
	An object containing the following properties:
		-Name: The name of the folder.
		-Path: The full path of the folder.
		-FileSize: The total size of all files inside the folder.
		-FileCount: The number of files in the folder.
		-Attributes: The attributes of the folder.

#>

	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true)]
		[string]$FolderPath
	)

	# Initializing variables
	$totalFileSize = 0
	$totalFileCount = 0
	$folderAttributes = @{}

	# Get the name of the folder
	$folderName = (Get-Item $FolderPath).Name

	# Get the attributes of the folder
	$folderAttributes.Add("ReadOnly", (Get-Item $FolderPath).IsReadOnly)
	$folderAttributes.Add("Hidden", (Get-Item $FolderPath).Attributes.HasFlag([System.IO.FileAttributes]::Hidden))
	$folderAttributes.Add("System", (Get-Item $FolderPath).Attributes.HasFlag([System.IO.FileAttributes]::System))
	$folderAttributes.Add("Archive", (Get-Item $FolderPath).Attributes.HasFlag([System.IO.FileAttributes]::Archive))

	# Get all files in the folder and calculate total file size and count
	$files = Get-ChildItem $FolderPath -File
	foreach ($file in $files) {
		$totalFileSize += $file.Length
		$totalFileCount++
	}

	# Create an object with the folder details
	$folderDetails = [ordered]@{
		Name = $folderName
		Path = $FolderPath
		FileSize = $totalFileSize
		FileCount = $totalFileCount
		Attributes = $folderAttributes
	}

	# Output the folder details object
	Write-Output $folderDetails
}