# Function to check if a number is prime
function IsPrime($n){
    $isPrime = $true # Flag variable for prime status
    $i = 2 # Starting number for checking divisors
    while($i -le [math]::sqrt($n)){ # Only need to check up to square root
        if($n % $i -eq 0){ # If remainder is 0, number is divisible and not prime
            $isPrime = $false # Update flag variable
            break # No need to continue checking divisors
        }
        $i++ # Increment divisor
    }
    return $isPrime # Return flag variable
}

# Function to generate a list of prime numbers within a given range
function GeneratePrimes($start, $end){
    $primes = @() # Initialize empty array to store primes
    for($i = $start; $i -le $end; $i++){ # Loop through range of numbers
        if(IsPrime($i)){ # Check if number is prime
            $primes += $i # Add prime number to array
        }
    }
    return $primes # Return array of prime numbers
}

# Example usage: Generate prime numbers between 1 and 100
$primes = GeneratePrimes(1, 100) # Call function with range arguments
foreach($prime in $primes){ # Loop through array of primes
    Write-Host "Prime number: $prime" # Output prime number
}