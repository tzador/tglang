#This code snippet is a function that performs a binary search on a given array.

function BinarySearch {
    param(
        [Parameter(Mandatory=$true)]
        [array]$array,

        [Parameter(Mandatory=$true)]
        [int]$target
    )

    # Sort the array in ascending order
    $sorted = $array | Sort-Object

    # Set the lower and upper bounds of the search
    $lowerBound = 0
    $upperBound = $sorted.length - 1

    # Loop until the target is found or the bounds are crossed
    while ($lowerBound -le $upperBound) {
        # Calculate the midpoint of the current bounds
        $mid = [int][Math]::Floor(($lowerBound + $upperBound) / 2)

        # Check if the midpoint is the target
        if ($sorted[$mid] -eq $target) {
            # Return the index of the target in the original array
            return $array.IndexOf($sorted[$mid])
        }
        # Check if the target is on the left side of the array
        elseif ($target -lt $sorted[$mid]) {
            # Adjust the upper bound to search only the left side
            $upperBound = $mid - 1
        }
        # Check if the target is on the right side of the array
        else {
            # Adjust the lower bound to search only the right side
            $lowerBound = $mid + 1
        }
    }
    # If the target is not found, return -1
    return -1
}

# Example usage: 
$numbers = @(3, 10, 4, 8, 2, 6)
$target = 8
$result = BinarySearch $numbers $target
Write-Host "The index of $target in the array is $result"  # Output: The index of 8 in the array is 3