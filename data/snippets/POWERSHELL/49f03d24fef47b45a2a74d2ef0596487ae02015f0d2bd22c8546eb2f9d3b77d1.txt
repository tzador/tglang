Function Verify-OperatingSystem {
  # This function is used to verify the operating system of the machine.
  [CmdletBinding()]
  param (

    [Parameter(Mandatory=$true)]
    [String] $ComputerName

  )

  Try {
    # Using WMI to get details about the operating system
    $ComputerSystem = Get-WmiObject Win32_ComputerSystem -ComputerName $ComputerName
    $OperatingSystem = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName

    # Checking if the operating system is a server or desktop version
    If ($OperatingSystem.Caption -like "*Server*") {
      Write-Host "The operating system on $ComputerName is a server version."
    }
    Else {
      Write-Host "The operating system on $ComputerName is a desktop version."
    }

    # Checking if the operating system is 32-bit or 64-bit
    If ($OperatingSystem.OSArchitecture -eq "64-bit") {
      Write-Host "The operating system on $ComputerName is a 64-bit version."
    }
    Else {
      Write-Host "The operating system on $ComputerName is a 32-bit version."
    }

    # Checking if the operating system is activated
    If ($OperatingSystem.Status -eq "OK") {
      Write-Host "The operating system on $ComputerName is activated."
    }
    Else {
      Write-Host "The operating system on $ComputerName is not activated."
    }

    # Checking the Windows version details
    Write-Host "The operating system details for $ComputerName are as follows:"
    $ComputerName | Get-WmiObject Win32_OperatingSystem |
    Select-Object @{Name="ComputerName";Expression={$_.CSName}},
    @{Name="OperatingSystem";Expression={$_.Caption}},
    @{Name="Version";Expression={$_.Version}},
    @{Name="BuildNumber";Expression={$_.BuildNumber}},
    @{Name="ServicePack";Expression={$_.ServicePackMajorVersion}},
    @{Name="Architecture";Expression={$_.OSArchitecture}}

  }
  Catch {
    Write-Host "Unable to verify the operating system on $ComputerName."
  }

}

# Calling the function
Verify-OperatingSystem -ComputerName "RemoteComputer"