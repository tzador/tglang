# Function to check if a given number is prime
Function IsPrime([int]$num) {
    # If number is less than or equal to 1, return false
    if ($num -le 1) {
        Write-Output "$num is not a prime number"
        return $false
    }

    # Loop through numbers from 2 to the square root of the given number
    for ($i = 2; $i -le [Math]::Sqrt($num); $i++) {
        # If remainder is 0, the number is not prime
        if ($num % $i -eq 0) {
            Write-Output "$num is not a prime number"
            return $false
        }
    }

    # If loop completes, the number is prime
    Write-Output "$num is a prime number"
    return $true
}

# Function to generate the first n prime numbers
Function GeneratePrimes([int]$n) {
    # Create an array to store the prime numbers
    $primes = @()
    # Initialize counter variable
    $count = 0
    # Initialize number variable
    $num = 2

    # Loop until the number of primes is equal to the given number n
    while ($count -lt $n) {
        # Check if current number is prime
        if (IsPrime($num)) {
            # Add number to primes array
            $primes += $num
            # Increase counter by 1
            $count++
        }
        # Increment number by 1 for next iteration
        $num++
    }

    # Output the prime numbers in a comma-separated string
    Write-Output "The first $n prime numbers are: $($primes -join ', ')"
}

# Call the function with input 10
GeneratePrimes 10