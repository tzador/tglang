-- | A function to find the most common element in a list
mostCommon : List comparable -> comparable
mostCommon list =
    List.head <| List.filter (\element -> element == mostRepeating list) (List.unique list)

-- | A helper function to find the most frequently repeating element in a list
mostRepeating : List comparable -> comparable
mostRepeating list =
    let
        countDict =
            List.foldl addCount Dict.empty list
    in
        Dict.foldl maxTuple (List.head list, 0) countDict |> Tuple.first

-- | A helper function to add counts to the dictionary
addCount : comparable -> Dict.AbstractDict comparable Int -> Dict.AbstractDict comparable Int
addCount element dict =
    dict |> Dict.update element (Maybe.map increment <| Dict.get element dict |> Maybe.withDefault 1)

-- | A helper function to increment a number by 1
increment : Int -> Int
increment n =
    n + 1

-- | A helper function to compare tuples and return the one with the higher count
maxTuple : (comparable, Int) -> (comparable, Int) -> (comparable, Int)
maxTuple (a, b) (c, d) =
    if b >= d then
        (a, b)
    else
        (c, d)