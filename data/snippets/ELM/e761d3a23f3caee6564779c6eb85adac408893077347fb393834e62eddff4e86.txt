module Main exposing (main)

import Html exposing (..)
import Html.Attributes exposing (style)
import Http
import Json.Encode as Encode
import Json.Decode as Decode
import HttpBuilder exposing (HttpBuilder)
import Dict exposing (Dict)
import Json.Stream exposing (Parser)
import Json.Stream.Decode exposing (Parser)

main : Program () Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }

-- The model will be stored as a dictionary with a `count` key
-- and will have the following possible actions
type alias Model =
    { count : Int
    , hasError : Bool
    }

init : () -> (Model, Cmd Msg)
init () =
    ( { count = 0
      , hasError = False
      }
    , Cmd.none
    )

-- The view will display the current count and a button to increment it
view : Model -> Html Msg
view model =
    div
        [ style
            [ ( "display", "flex" )
            , ( "flex-direction", "column" )
            , ( "justify-content", "center" )
            , ( "align-items", "center" )
            , ( "height", "100vh" )
            ]
        ]
        [ h1
            []
            [ text "Current Count: ", text (toString model.count) ]
        , button
            [ onClick Increment ]
            [ text "Increment" ]
        ]

-- The update will handle the `Increment` and `Decrement` messages
type Msg
    = Increment
    | Decrement

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        Increment ->
            ( { model | count = model.count + 1 }, Cmd.none )
        Decrement ->
            ( { model | count = model.count - 1 }, Cmd.none )

-- The subscriptions will listen for a response from the backend server
subscriptions : Model -> Sub Msg
subscriptions model =
    HttpBuilder.request
        { method = "GET"
        , headers = Dict.fromList [ ( "Content-Type", "application/json" ) ]
        , body = HttpBuilder.emptyBody
        , url = "https://example.com/count"
        , expect = Http.expectJson receiveCountResponse countDecoder
        }

-- This function handles the response from the backend server,
-- updates the model with the new count, and handles any errors
receiveCountResponse : Result Http.Error Int -> Msg
receiveCountResponse result =
    case result of
        Ok count ->
            Increment

        Err _ ->
            Decrement

-- This decoder is used to decode the response from the backend server
countDecoder : Decode.Decoder (Parser (Maybe Int))
countDecoder =
    Decode.maybe (Decode.field "count" (Decode.int |> Parser.map Just))