module ColorGenerator exposing (..)

import Random exposing (List, Step, int, float)
import Random.List exposing (member)
import Color exposing (Color)
import Tuple exposing (Tuple3)

-- Converts a given RGB value in the range [0, 255] to the range [0, 1]
normalizeRgb : Int -> Float
normalizeRgb value =
    (toFloat value) / 255

{-|
    Generates a random color using the given step for each RGB component.
    Returns a `Result` with a `String` error message if `Random.generate` fails.

    Examples:
        generateRandomColor (5, 10) --> Ok Color.fromRgb255 103 54 78
        generateRandomColor (2, 8) --> Ok Color.fromRgb255 201 255 182
        generateRandomColor (0, 10) --> Err "Failed to generate random number"
-}
generateRandomColor : (Int, Int) -> Result String Color
generateRandomColor (minStep, maxStep) =
    let
        randomStep = Random.int minStep maxStep
        randomRgb = Random.float 255
    in
    Random.generate (Tuple3 normalizeRgb normalizeRgb normalizeRgb) (member randomStep) |> Result.map3 Color.fromRgb255