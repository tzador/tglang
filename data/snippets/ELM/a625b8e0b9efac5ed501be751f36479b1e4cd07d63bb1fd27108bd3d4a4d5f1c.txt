-- Create a custom type called "Maybe" with two possible values: "Just" and "Nothing".
type Maybe a
  = Just a
  | Nothing

-- Define a function called "safeHead" that takes in a list and returns a "Maybe" value.
safeHead : List a -> Maybe a
safeHead list =
  case list of
    (x :: _) -> Just x
    _ -> Nothing

-- Define a function called "mapMaybe" that takes in a function and a list and returns a new list with only the values that were not "Nothing" after applying the function.
mapMaybe : (a -> Maybe b) -> List a -> List b
mapMaybe func list =
  case list of
    [] -> []
    (x :: xs) ->
      case func x of
        Just val -> val :: mapMaybe func xs
        Nothing -> mapMaybe func xs

-- Create a list of integers.
listOfInts : List Int
listOfInts = [1, 2, 3, 4, 5]

-- Create a list of strings.
listOfStrings : List String
listOfStrings = ["Hello", "World", "ELM"]

-- Apply the "safeHead" function to the list of integers.
firstInt : Maybe Int
firstInt = safeHead listOfInts

-- Apply the "safeHead" function to the list of strings.
firstString : Maybe String
firstString = safeHead listOfStrings

-- Create a new list by applying the "mapMaybe" function to the "listOfInts" and passing in a function that checks if the integer is even.
evenInts : List Int
evenInts = mapMaybe (\x -> if x % 2 == 0 then Just x else Nothing) listOfInts

-- Create a new list by applying the "mapMaybe" function to the "listOfStrings" and passing in a function that checks if the string contains the letter "E".
stringsWithE : List String
stringsWithE = mapMaybe (\str -> case String.contains "E" str of
                                    True -> Just str
                                    False -> Nothing) listOfStrings