type alias Person =
    { name : String
    , age : Int
    , email : Maybe String
    }

data Person
    = Employee
        { firstName : String
        , lastName : String
        , salary : Float
        }
    | Customer
        { firstName : String
        , lastName : String
        , address : String
        }

type Role
    = Manager
    | Salesman
    | Secretary

let person : Person
person =
    Person
        { name = "John"
        , age = 32
        , email = Just "john@example.com"
        }

let employee : Person -> Float -> Person
employee person salary =
    case person of
        Employee fn ln currSalary ->
            Employee
                { firstName = fn
                , lastName = ln
                , salary = salary
                }

        Customer fn ln addr ->
            Customer
                { firstName = fn
                , lastName = ln
                , address = addr
                }

let manager : Person -> Person
manager person =
    match person with
        Employee fn ln salary ->
            case salary > 100000 of
                True ->
                    Employee
                        { firstName = fn
                        , lastName = ln
                        , salary = salary
                        }

                False ->
                    Customer
                        { firstName = fn
                        , lastName = ln
                        , address = "No manager available for this person"
                        }

        Customer fn ln addr ->
            Customer
                { firstName = fn
                , lastName = ln
                , address = addr ++ "No manager available for this person"
                }

let role : Role
role = Salesman