type alias Person = {
    name : String,
    age : Int,
    city : String
} -- The Person type is a record with three fields: name, age, and city

type User
    = LoggedIn Person -- The User type is a union type with a LoggedIn constructor that takes a Person record
    | LoggedOut -- and a LoggedOut constructor with no data

type Msg
    = Login
    | Logout

type alias Model = {
    user : User,
    loggedIn : Bool -- Model type is a record with two fields: user of type User and loggedIn of type Bool
}

init : Model
init =
    { user = LoggedOut -- The initial state of the user is logged out
    , loggedIn = False -- The initial state for loggedIn is false
    }

update : Msg -> Model -> Model
update msg model =
    case msg of
        Login ->
            case model.user of
                LoggedOut ->
                    { model | user = LoggedIn { name = "John", age = 25, city = "New York" }, loggedIn = True }
                _ ->
                    model -- If the user is already logged in, do nothing

        Logout ->
            { model | user = LoggedOut, loggedIn = False }

view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "User Info" ]
        , if model.loggedIn then
            div []
                [ text ("Name: " ++ model.user.name)
                , text ("Age: " ++ (toString model.user.age))
                , text ("City: " ++ model.user.city)
                ]
        else
            div [] [ text "Not Logged In" ]
        ]