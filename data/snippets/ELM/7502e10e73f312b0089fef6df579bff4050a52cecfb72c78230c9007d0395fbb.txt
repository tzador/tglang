-- Define a type alias for a list of integers
type alias IntList = List Int

-- Define a custom type for representing a binary tree
type BinTree a
  = Empty
  | Node a (BinTree a) (BinTree a)

-- Define a function to insert an element into a binary tree
insert : a -> BinTree a -> BinTree a
insert x Empty = Node x Empty Empty
insert x (Node val left right) =
  if x < val then
    Node val (insert x left) right
  else
    Node val left (insert x right)

-- Define a function to convert a list into a binary tree
listToBinTree : List a -> BinTree a
listToBinTree list =
  let
    -- Define a helper function for inserting each element into the tree
    insertAll : List a -> BinTree a -> BinTree a
    insertAll [] tree = tree
    insertAll (x :: xs) tree = insertAll xs (insert x tree)
  in
    insertAll list Empty

-- Create a new tree using the list [5, 2, 7, 1, 3, 9]
myTree : BinTree Int
myTree = listToBinTree [5, 2, 7, 1, 3, 9]

-- Perform a depth-first traversal of the tree and print each element
traverseTree : BinTree a -> List a
traverseTree tree =
  case tree of
    Empty -> []
    Node val left right -> traverseTree left ++ [val] ++ traverseTree right

-- Output: [1, 2, 3, 5, 7, 9]
traverseTree myTree