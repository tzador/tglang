-- This is a comment in ELM
import Html exposing (text)  -- Importing the 'text' function from the Html library

{-| This is a multi-line comment in ELM. It can be used to explain the purpose
of the code or to provide documentation for functions. -}

main : Program () ()  -- Defining a main function that takes no arguments and returns no value
main =
    text "Hello World!"  -- Calling the 'text' function with a string argument to display text on the page

-- Creating a function that takes in a list of strings and returns the sum of their lengths
sumOfLengths : List String -> Int
sumOfLengths list =
    List.sum <| List.map String.length list  -- Using the 'List.sum' and 'List.map' functions to calculate the sum of lengths

-- Defining a record type with two fields: name and age
type alias Person =
    { name : String
    , age : Int
    }

-- Creating a list of Person records
people : List Person
people =
    [ { name = "John", age = 25 }
    , { name = "Jane", age = 30 }
    , { name = "Bob", age = 40 }
    ]

-- Using pattern matching to print the names of people over 30 years old
-- and ignoring the age field
printNames : List Person -> String
printNames list =
    List.map (\{ name, _ } -> name) (List.filter (\{ age } -> age > 30) list)

-- Calling the 'printNames' function with the 'people' list and displaying the result
main2 = 
    text (printNames people)