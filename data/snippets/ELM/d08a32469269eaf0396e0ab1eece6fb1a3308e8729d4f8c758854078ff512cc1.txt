module Main exposing (main)

-- Program to calculate the Fibonacci sequence up to a given limit

-- Importing the core libraries
import Html exposing (text)
import List exposing (foldl)

-- Function to generate Fibonacci sequence up to a given limit
fibonacci : Int -> List Int
fibonacci limit =
    case limit of
        0 ->
            []

        1 ->
            [0]

        _ ->
            let
                range =
                    [1 .. limit]

                -- Function to calculate Fibonacci numbers using foldl
                loop : List Int -> Int
                loop values =
                    case values of
                        [] ->
                            0

                        [prev] ->
                            0

                        first :: second :: rest ->
                            prev + first
                            :: loop (first :: rest)
            in
            foldl loop [0 .. 1]
            |> List.map (maybe 0 identity)
            |> List.take limit

-- Function to convert list of integers to string
listToString : List Int -> String
listToString values =
    let
        toString =
            String.fromInt
    in
    List.map toString values
    |> String.join ", "

-- Main program to execute the code
main =
    text (listToString (fibonacci 50))