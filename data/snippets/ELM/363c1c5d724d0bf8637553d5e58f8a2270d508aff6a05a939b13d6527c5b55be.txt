{-| A model for a simple to-do list application. -}
module Main exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)

type alias Task =
    { description : String
    , completed : Bool
    }

type alias Model =
    { tasksList : List Task
    , newTask : String
    }

type Msg
    = ChangeNewTask String
    | AddTask
    | ToggleTask Int

init : Model
init =
    { tasksList = []
    , newTask = ""
    }

view : Model -> Html Msg
view model =
    div []
        [ input [ placeholder "Add a new task", onInput ChangeNewTask ] []
        , ul []
            (List.map (viewTask model) (List.indexedMap (\index task -> (index, task)) model.tasksList))
        ]

viewTask : Model -> (Int, Task) -> Html Msg
viewTask model (index, task) =
    li [ style [("text-decoration", if task.completed then "line-through" else "none")] ]
        [ input [ type' "checkbox", onCheck ToggleTask index, checked task.completed ] []
        , text task.description
        ]

update : Msg -> Model -> Model
update msg model =
    case msg of
        ChangeNewTask newTask ->
            { model | newTask = newTask }

        AddTask ->
            { model | tasksList = model.tasksList ++ [ { description = model.newTask, completed = False } ], newTask = "" }

        ToggleTask index ->
            { model | tasksList = List.indexedMap (\i t -> if i == index then { t | completed = not t.completed } else t) model.tasksList }

main : Program () Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        }