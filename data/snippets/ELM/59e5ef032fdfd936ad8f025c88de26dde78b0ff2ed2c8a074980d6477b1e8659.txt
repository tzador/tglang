-- A complex code snippet in ELM

getType : (a -> b -> c) -> String
getType func =
    "This function takes in two arguments of any type and returns a string"

-- This function is an example of currying, where a function takes in multiple arguments one at a time.
-- It takes in a function of type `(a -> b -> c)`, which means it takes in two arguments of types `a` and `b` and returns a value of type `c`.

-- Main program
main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = always Sub.none
        }

-- The `main` function defines the main program structure and sets the initial state, view and update functions.
-- It uses the `Html.program` function to create a program with no subscriptions.
-- The `Never` type indicates that this program does not produce any updates, and the `Model` and `Msg` types define the program's state and messages respectively.

init : Model
init =
    { name = "John Doe"
    , age = Just 25
    , interests = ["programming", "reading"]
    }

-- The `init` function sets the initial state of our program by creating a `Model` record.
-- It includes a `name` field of type `String`, an `age` field of type `Maybe Int` and an `interests` field of type `List String`.

type alias Model =
    { name : String
    , age : Maybe Int
    , interests : List String
    }

-- The `Model` type alias defines the type of our program's state.
-- It is a record with fields `name` of type `String`, `age` of type `Maybe Int` and `interests` of type `List String`.

view : Model -> Html Msg
view model =
    div []
        [ h2 [] [ text ("Welcome, " ++ model.name ++ "!") ]
        , p [] [ text ("You are " ++ toString (Maybe.withDefault "?" model.age) ++ " years old.") ]
        , ul []
            (List.map (\interest -> li [] [ text interest ]) model.interests)
        ]

-- The `view` function defines the structure of our program's view.
-- It receives the current `Model` as an argument and returns `Html Msg`, which is a type for creating HTML elements with associated messages.
-- In this example, it generates a simple greeting message with the user's name and age, and a list of their interests.

type Msg
    = NameUpdate String
    | AgeUpdate (Maybe Int)
    | InterestUpdate String

-- The `Msg` type defines the messages that our program can produce.
-- In this example, we have three possible messages: `NameUpdate` with a `String` argument, `AgeUpdate` with a `Maybe Int` argument and `InterestUpdate` with a `String` argument.

update : Msg -> Model -> Model
update msg model =
    case msg of
        NameUpdate newName ->
            { model | name = newName }

        AgeUpdate newAge ->
            { model | age = newAge }

        InterestUpdate newInterest ->
            { model | interests = newInterest :: model.interests }

-- The `update` function handles the messages produced by our program.
-- It takes in a `Msg` and the current `Model` as arguments and returns an updated `Model`.
-- In this example, it updates the `name` field when receiving a `NameUpdate` message, updates the `age` field when receiving an `AgeUpdate` message and adds a new interest to the `interests` field when receiving an `InterestUpdate` message.