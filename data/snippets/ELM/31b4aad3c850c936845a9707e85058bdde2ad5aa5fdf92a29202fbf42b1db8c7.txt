-- This function takes in two lists and returns a list which contains the elements from both lists
append : List a -> List a -> List a
append list1 list2 =
    case list1 of
        [] ->
            list2

        x :: xs ->
            x :: (append xs list2)

-- This function takes in a string and returns a reversed string
reverse : String -> String
reverse str =
    List.foldl (\char acc -> char :: acc) "" (String.toList str)
    
-- This function calculates the factorial of a given integer
factorial : Int -> Int
factorial n =
    if n == 0 then
        1
    else
        n * factorial (n - 1)
        
-- This function takes in a list and applies a function to each element, returning a new list
map : (a -> b) -> List a -> List b
map func list =
    case list of
        [] ->
            []

        x :: xs ->
            (func x) :: (map func xs)