-- Define a custom type called Animal which has two possible values
type Animal
    = Dog
    | Cat

-- Define a custom type called Person which has three fields
type alias Person =
    { name : String
    , age : Int
    , pet : Maybe Animal
    }

-- Define a function that takes in a Person and returns their age
getAge : Person -> Int
getAge person =
    person.age

-- Define a list of Person values
people : List Person
people =
    [ Person "John" 25 (Just Dog)
    , Person "Sarah" 21 (Just Cat)
    , Person "Mike" 41 Nothing
    ]

-- Define a list of only adults from the people list
adults : List Person
adults =
    List.filter (\person -> person.age >= 18) people

-- Define a custom type called Result which either contains a successful String or an error String
type Result
    = Success String
    | Error String

-- Define a function that takes in a String and returns a Result value
validateName : String -> Result
validateName name =
    if String.isEmpty name then
        Error "Name is empty"
    else
        Success name

-- Define a pipeline that takes a list of people, gets their names, validates them, and returns a list of successful names
validNames : List Person -> List String
validNames people =
    people
        |> List.map (\person -> person.name)
        |> List.map validateName
        |> List.filterMap
            (\result ->
                case result of
                    Success name ->
                        Just name
                    Error _ ->
                        Nothing
            )