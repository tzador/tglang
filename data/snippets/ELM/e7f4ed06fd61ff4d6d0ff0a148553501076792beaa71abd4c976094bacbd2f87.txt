import Html exposing (Html, div, text, button, input, li, ul, p, Program)
import Html.Events exposing (onClick)
import Browser

-- This creates a type alias for a custom message type
type alias Msg =
    { count : Int
    , inputText : String
    , fibonacciNums : List Int
    }

-- Initialize the model with default values
init : () -> (Msg, Cmd Msg)
init _ =
    ({ count = 0, inputText = "", fibonacciNums = [0, 1] }, Cmd.none)

-- Update the model based on the message received
update : Msg -> Model -> (Msg, Cmd Msg)
update msg model =
    case msg of
        Increment ->
            ( { model | count = model.count + 1 }, Cmd.none )

        Decrement ->
            ( { model | count = model.count - 1 }, Cmd.none )

        SetText text ->
            ( { model | inputText = text }, Cmd.none )

        CalculateFibonacci ->
            let
                fibs =
                    model.fibonacciNums ++ [ List.sum model.fibonacciNums ]
            in
                ( { model | fibonacciNums = fibs }, Cmd.none )

-- Create a view to display the current state of the model
view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "Counter" ]
        , button [ onClick Increment ] [ text "+" ]
        , text (String.fromInt model.count)
        , button [ onClick Decrement ] [ text "-" ]
        , h1 [] [ text "Enter text:" ]
        , input [ onInput SetText ] []
        , h1 [] [ text (String.reverse model.inputText) ]
        , h1 [] [ text "Fibonacci numbers:" ]
        , ul [] (List.map viewFibonacci model.fibonacciNums)
        ]

-- Helper function for displaying the Fibonacci numbers
viewFibonacci : Int -> Html Msg
viewFibonacci number =
    li [] [ text (String.fromInt number) ]


-- Set up the program and start the app
main : Program () Msg Model
main =
    Browser.sandbox
        { init = init
        , update = update
        , view = view
        }