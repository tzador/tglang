-- Define a custom type called `Operation` with two possible values: `Addition` and `Multiplication`
-- Each value will have an associated tuple that takes in two integers
type Operation
    = Addition (Int, Int)
    | Multiplication (Int, Int)

-- Create a function called `calculate` that takes in an `Operation` and returns an `Int`
-- The function pattern matches on the `Operation` type and returns the result of the corresponding arithmetic operation
calculate : Operation -> Int
calculate operation =
    case operation of
        Addition (x, y) ->
            x + y

        Multiplication (x, y) ->
            x * y

-- Define a list of `Operation` types with different input values
-- These values will be used as parameters for the `calculate` function
operations : List Operation
operations =
    [ Addition (1, 2)
    , Multiplication (3, 4)
    , Addition (-5, 10)
    , Multiplication (7, -2)
    , Addition (100, -50)
    ]

-- Map the `calculate` function over the `operations` list and store the results in a new list called `results`
results : List Int
results =
    List.map calculate operations

-- Print the `results` list using the `Debug` module
-- This will output the final list of calculated values in the console
import Debug
main =
    Debug.log "Results:" results