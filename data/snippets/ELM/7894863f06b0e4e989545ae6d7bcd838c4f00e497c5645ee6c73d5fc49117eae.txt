-- This is a comment line in ELM

-- Function to get the length of a list
getLength : List a -> Int
getLength list =
    case list of
        [] -> 0
        (x :: xs) -> 1 + getLength xs  -- Recursively call getLength and add 1 for each element in the list

-- Function to reverse a list
reverseList : List a -> List a
reverseList list =
    let
        helper acc lst = -- Helper function that takes in an accumulator and the original list
            case lst of
                [] -> acc -- Once the original list is empty, return the accumulator which will hold the reversed list
                (x :: xs) -> helper (x :: acc) xs  -- Add the first element of the original list to the accumulator and then recursively call helper with the rest of the original list
        in
            helper [] list -- Call helper function with an empty accumulator and the original list 

-- Example input list
inputList = [1, 2, 3, 4, 5]

-- Output the length of the input list
getLength inputList

-- Output the reversed input list
reverseList inputList