-- This function takes in a list of integers and returns a new list with the sum of each integer and its index
sumList : List Int -> List Int
sumList list =
    List.map
        (\(index, number) ->
            index + number
        )
        (List.indexedMap
            (\index number ->
                (index, number)
            )
            list
        )
-- The function 'sumList' takes in a list of integers and returns a new list with the sum of each integer and its index.
-- The first line is a type annotation, specifying the type of input and output for the function.
-- The 'List.map' function takes in a function and a list, and applies the function to each element in the list, returning a new list with the results.
-- The function being passed to 'List.map' is an anonymous function that takes in a tuple of an index and a number, and returns the sum of the two.
-- The 'List.indexedMap' function takes in a function and a list, and applies the function to each element in the list along with its index, returning a list of tuples.
-- The function being passed to 'List.indexedMap' is an anonymous function that takes in an index and a number, and returns a tuple of the two.
-- Finally, the result of 'List.indexedMap' is passed as the input to 'List.map', returning the final list with the sums of each integer and its index.
-- To use this function, we can call 'sumList' with a list of integers, such as [1, 2, 3, 4], and it will return [1, 3, 5, 7].
-- This snippet showcases the use of higher-order functions and anonymous functions in ELM, as well as the usefulness of annotations and documentation to explain the code's purpose and functionality.