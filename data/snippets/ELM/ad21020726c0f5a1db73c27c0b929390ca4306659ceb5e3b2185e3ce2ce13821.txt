--| Define a custom type called 'Shape' with two constructors
type Shape
  = Circle Radius
  | Rect Position Position


--| Define a custom type called 'Point' to hold x and y coordinates
type alias Point =
  { x : Float
  , y : Float
  }


--| Define a function to calculate the area of a shape
area : Shape -> Float
area shape =
  case shape of
    Circle radius ->
      3.14 * radius * radius

    Rect (Point x1 y1) (Point x2 y2) ->
      abs (x2 - x1) * abs (y2 - y1)


--| Define a function to check if a shape has a circle as one of its constructors
hasCircle : Shape -> Bool
hasCircle shape =
  case shape of
    Circle _ ->
      True

    _ ->
      False


--| Define a function to check if a shape is a square
isSquare : Shape -> Bool
isSquare shape =
  case shape of
    Rect (Point x1 y1) (Point x2 y2) ->
      abs (x2 - x1) == abs (y2 - y1)

    _ ->
      False


--| Define a list of shapes
shapes : List Shape
shapes =
  [ Circle 5
  , Rect (Point 0 0) (Point 10 10)
  , Circle 2.5
  ]


--| Calculate the total area of all the shapes in the list using 'foldl'
totalArea : Float
totalArea =
  List.foldl (\shape acc -> acc + area shape) 0 shapes


--| Check if any of the shapes in the list has a circle using 'foldr'
hasCircleInList : Bool
hasCircleInList =
  List.foldr (\shape acc -> hasCircle shape || acc) False shapes