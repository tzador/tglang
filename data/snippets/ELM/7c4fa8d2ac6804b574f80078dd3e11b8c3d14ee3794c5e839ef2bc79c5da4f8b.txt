type State = Loading | Success String | Error Http.Error

type Msg
    = Fetch
    | SetLoading
    | HandleResponse (Result Http.Error String)

view : State -> Html Msg
view state =
    case state of
        Loading ->
            p [] [ text "Loading..." ]

        Success message ->
            div []
                [ h1 [] [ text "Welcome!" ]
                , p [] [ text ("Success message: " ++ message) ]
                ]

        Error error ->
            div []
                [ h1 [] [ text "Error!" ]
                , p [] [ text ("Error message: " ++ error.message) ]
                ]

update : Msg -> State -> ( State, Cmd Msg )
update msg state =
    case msg of
        Fetch ->
            ( Loading, Random.int 1 3 |> Task.perform HandleResponse )

        SetLoading ->
            ( Loading, Cmd.none )

        HandleResponse result ->
            case result of
                Ok message ->
                    ( Success message, Cmd.none )

                Err error ->
                    ( Error error, Cmd.none )

main : Program.Program Never State Msg
main =
    Program.program
        { init = ( Loading, Random.int 1 3 |> Task.perform HandleResponse )
        , view = view
        , update = update
        , subscriptions = always Sub.none
        }