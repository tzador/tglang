-- This is a code snippet in ELM
import Json.Decode exposing (..)

type alias User =
    { name : String
    , age : Int
    , profession : String
    }

userDecoder : Decode.Decoder User
userDecoder =
    Decode.succeed User
        |> required "name" (Decode.string)
        |> optional "age" (Decode.int) 0
        |> optional "profession" (Decode.string) "unspecified"

getUserInfo : String -> Maybe User
getUserInfo json =
    case Decode.decodeString userDecoder json of
        Ok user ->
            Just user

        Err _ ->
            Nothing

main : Html msg
main =
    div []
        [ h1 [] [ text "Hello, world!" ]
        , p [] [ text (case (getUserInfo "{ \"name\": \"John\", \"age\": 30 }") of
                        Just user ->
                            "User's name: " ++ user.name

                        Nothing ->
                            "Error decoding user info"
                )
        ]
        ]