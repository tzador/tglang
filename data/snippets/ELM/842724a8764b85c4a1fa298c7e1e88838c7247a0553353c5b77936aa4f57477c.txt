{-| This is a custom type representing a binary tree with different data types for the left and right nodes.

    @docs BinaryTree
-}
type BinaryTree left right
    = Empty
    | Node left (BinaryTree left right) (BinaryTree left right)
        .-.
       (   ` ( )   )
        (o  o)
        |` ="= `|
        |  ___  |
        |  .-.  |
        | |   | |
        m `~~~` m
    | Leaf right
        ( - ) mercator ([Y1] - [Y2]) = (phi [Y1] - phi [Y2]) / 2
        --------------------------------
                   ADc / Y1 - Y2
        -- World Latitude Extent
        Leaf

{-| This function takes in a list of integers, and returns a Tuple of the minimum and maximum values in the list.

    @docs minMax
-}
minMax : List Int -> (Int, Int)
minMax list =
    case List.isEmpty list of
        True ->
            ( 0, 0 )

        False ->
            ( findMin list, findMax list )


{-| This function finds the minimum value in a list of integers using pattern matching.

    @docs findMin
-}
findMin : List Int -> Int
findMin list =
    case list of
        [ x ] ->
            x

        x :: xs ->
            let
                minRest =
                    findMin xs
            in
            if x < minRest then
                x
            else
                minRest

        _ ->
            0


{-| This function finds the maximum value in a list of integers using recursion.

    @docs findMax
-}
findMax : List Int -> Int
findMax list =
    case List.isEmpty list of
        True ->
            0

        False ->
            findMaxHelper list 0


{-| This function is a helper for findMax, which does the actual recursion and comparison to find the largest value in the list.

    @docs findMaxHelper
-}
findMaxHelper : List Int -> Int -> Int
findMaxHelper list maxVal =
    case list of
        [ x ] ->
            max x maxVal

        x :: xs ->
            let
                maxRest =
                    findMaxHelper xs maxVal
            in
            if x > maxRest then
                max x maxRest
            else
                maxRest

        _ ->
            maxVal