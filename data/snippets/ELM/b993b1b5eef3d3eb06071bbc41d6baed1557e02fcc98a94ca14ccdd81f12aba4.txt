-- This is an example of a complex code snippet written in the ELM programming language.

-- Define a custom type called 'Person' with string and int fields.
type alias Person =
  { name : String
  , age : Int
  }

-- Create a function 'getPersonInfo' that takes in a Person value and returns a string with their name and age.
getPersonInfo : Person -> String
getPersonInfo person =
  "Name: " ++ person.name ++ " | Age: " ++ String.fromInt person.age

-- Create a list of three Person values.
personsList : List Person
personsList =
  [ Person "John" 25
  , Person "Alice" 30
  , Person "Bob" 40
  ]

-- Filter the list to only return Persons whose age is greater than or equal to 30.
filteredPersonsList : List Person
filteredPersonsList =
  List.filter (\person -> person.age >= 30) personsList

-- Create a HTML list element with the names and ages of the filtered Persons.
htmlList : Html msg
htmlList =
  ul []
    (List.map
      (\person -> li [][text (getPersonInfo person)])
      filteredPersonsList
    )