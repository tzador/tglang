module Main exposing (..)

{-| Custom type for representing a person's information -}
type Person
    = Adult String Int String
    | Child String Int String

{-| Function to check if a person is an adult based on their age -}
isAdult : Person -> Bool
isAdult person =
    case person of
        Adult _ age _ ->
            if age >= 18 then
                True

            else
                False
        Child _ _ _ ->
            False

{-| Function to get the full name of a person -}
getFullName : Person -> String
getFullName person =
    case person of
        Adult firstName _ lastName ->
            firstName ++ " " ++ lastName
        Child firstName _ lastName ->
            firstName ++ " " ++ lastName ++ " Jr."

{-| List of people with various information -}
people : List Person
people =
    [ Adult "John" 25 "Doe"
    , Child "Jane" 10 "Doe"
    , Adult "Bob" 35 "Smith"
    , Child "Ella" 5 "Smith"
    ]

{-| Function to filter out all adult names from a list of people -}
getAdultNames : List Person -> List String
getAdultNames people =
    case people of
        [] ->
            []

        person :: rest ->
            if isAdult person then
                getFullName person :: getAdultNames rest

            else
                getAdultNames rest