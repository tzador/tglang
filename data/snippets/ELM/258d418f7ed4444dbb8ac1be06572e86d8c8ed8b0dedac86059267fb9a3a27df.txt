-- This is a function that checks if the given number is prime or not
-- It uses the Sieve of Eratosthenes algorithm to find all prime numbers up to the given number
-- and then checks if the number is present in the list of primes
isPrime : Int -> Bool
isPrime n =
  let
    -- Generate a list of all numbers from 2 to n
    numbers = List.range 2 n
    
    -- The Sieve of Eratosthenes algorithm
    primes = numbers
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 2
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 3
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 5
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 7
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 11
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 13
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 17
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 19
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 23
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 29
      |> List.foldl (\x y -> if x `mod` y == 0 then x else y) 31
  in
    -- Check if the given number is present in the list of primes
    List.member n primes