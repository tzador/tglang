-- This is a program that manages a database of employees

-- Define a custom type for an employee
type Employee = Employee
  { name : String
  , age : Int
  , position : String
  }

-- Define an initial list of employees
initialEmployees : List Employee
initialEmployees =
  [ Employee { name = "John Doe", age = 25, position = "Software Engineer" }
  , Employee { name = "Jane Smith", age = 30, position = "HR Manager" }
  , Employee { name = "Bob Johnson", age = 35, position = "Sales Representative" }
  ]

-- Define a function to add a new employee to the database
addEmployee : Employee -> List Employee -> List Employee
addEmployee newEmployee employees =
  employees ++ [newEmployee]

-- Define a function to remove an employee from the database
removeEmployee : Employee -> List Employee -> List Employee
removeEmployee employeeToRemove employees =
  List.filter ((/=) employeeToRemove) employees 

-- Define a function to update an employee's position
updateEmployeePosition : Employee -> String -> List Employee -> List Employee
updateEmployeePosition employee newPosition employees =
  let
    index = List.indexedMap (\employee index -> if employee == employeeToRemove then index else -1) employees
    updatedEmployee = { employee | position = newPosition }
  in
    List.map (\i employee -> if i == index then updatedEmployee else employee) employees

-- Define a function to get employees above a certain age
getEmployeesAboveAge : Int -> List Employee -> List Employee
getEmployeesAboveAge age employees =
  List.filter (\employee -> employee.age > age) employees

-- Define a function to get employees with a certain position
getEmployeesByPosition : String -> List Employee -> List Employee
getEmployeesByPosition position employees =
  List.filter (\employee -> employee.position == position) employees

-- Create a new list of employees with the initial set
currentEmployees : List Employee
currentEmployees = initialEmployees

-- Add a new employee to the database
updatedEmployees : List Employee
updatedEmployees = addEmployee { name = "Samantha Lee", age = 28, position = "Marketing Manager" } currentEmployees

-- Remove an employee from the database
updatedEmployees : List Employee
updatedEmployees = removeEmployee { name = "John Doe", age = 25, position = "Software Engineer" } currentEmployees

-- Update an employee's position
updatedEmployees : List Employee
updatedEmployees = updateEmployeePosition { name = "Jane Smith", age = 30, position = "HR Manager" } "Senior HR Manager" currentEmployees

-- Get employees above a certain age
filteredEmployees : List Employee
filteredEmployees = getEmployeesAboveAge 30 currentEmployees

-- Get employees with a certain position
filteredEmployees : List Employee
filteredEmployees = getEmployeesByPosition "Sales Representative" currentEmployees