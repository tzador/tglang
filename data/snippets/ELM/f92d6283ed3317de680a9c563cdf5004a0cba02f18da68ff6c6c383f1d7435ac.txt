/*
This program integrates a function using the trapezoidal rule.
It uses a recursive algorithm to split the integration interval.
*/

-- Type alias for a function
type alias Function = Float -> Float

-- Type alias for the integration interval
type alias Interval = { start : Float, end : Float }

-- Function to integrate a given function using the trapezoidal rule
integrate : Function -> Interval -> Float
integrate fn { start, end } =
  let
    -- Calculate the midpoint between start and end
    midpoint = (start + end) / 2

    -- Calculate the area under the curve using the trapezoidal rule
    area = ((fn start + fn end) / 2) * (end - start)

    -- Calculate the area on the left and right halves of the integration interval
    left = ((fn start + fn midpoint) / 2) * (midpoint - start)
    right = ((fn midpoint + fn end) / 2) * (end - midpoint)

    -- Combine the areas from the left and right halves
    total = left + right
  in
    -- If the difference between the total area and the previous approximation is small enough, return the total area
    -- Otherwise, recursively split the integration interval into two halves and sum their areas
    if abs (total - area) < 0.0001 then
      total
    else
      integrate fn { start = start, end = midpoint } + integrate fn { start = midpoint, end = end }
    )