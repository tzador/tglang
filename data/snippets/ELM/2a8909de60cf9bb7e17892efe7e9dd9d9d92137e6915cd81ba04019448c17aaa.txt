----- Annotations -----
-- Declaring a type alias for a custom list data structure
type alias MyList a = 
    MyCons a (MyList a)
    | MyEmpty 

-- Defining a custom type of binary tree
type Tree a = 
    Node a (Tree a) (Tree a)
    | Empty 

-- Function for recursively checking if an element is present in a list
-- Takes in an element and a list, returns a boolean
member : comparable -> MyList comparable -> Bool
member _ MyEmpty = False
member x (MyCons y xs) = y == x || member x xs

-- Function for recursively inserting an element into a binary tree
-- Takes in an element and a tree, returns a new tree with the element inserted in the correct place
insert : comparable -> Tree comparable -> Tree comparable
insert x Empty = Node x Empty Empty
insert x (Node y left right) = 
    if x < y then 
        Node y (insert x left) right
    else 
        Node y left (insert x right)

-- Example of using the functions on a custom list and binary tree
list : MyList Int
list = 
    MyCons 1 (MyCons 2 (MyCons 3 MyEmpty))

tree : Tree Int
tree = 
    insert 3 (insert 2 (insert 1 Empty))