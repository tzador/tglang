-- Define a type alias for a Person record
type alias Person =
    { name : String
    , age : Int
    , address : String
    }

{- Create a list of Person records
Note: The indentation is important in ELM
as it determines the scope of function definitions -}
people : List Person
people =
    [ { name = "John"
      , age = 35
      , address = "123 Main St"
      }
    , { name = "Jane"
      , age = 28
      , address = "456 Park Ave"
      }
    ]

-- Define a function to filter the list of Person records by age
filterByAge : Int -> List Person -> List Person
filterByAge age people =
    List.filter (\person -> person.age > age) people

-- Call the filterByAge function and get the resulting list of Person records
filteredPeople : List Person
filteredPeople =
    filterByAge 30 people

-- Define a function to map the list of Person records to a list of their names
mapNames : List Person -> List String
mapNames people =
    List.map (\person -> person.name) people

-- Call the mapNames function and get the resulting list of names
names : List String
names =
    mapNames filteredPeople

-- Print the names to the console
main : Program () Model
main =
    Html.program
        { init = ()
        , view = (\_ -> text (String.concat names))
        , update = (\_ _ -> ((), Cmd.none))
        , subscriptions = (\_ -> Sub.none)
        }