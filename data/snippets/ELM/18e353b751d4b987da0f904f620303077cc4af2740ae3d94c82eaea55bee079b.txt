-- This is a complex code snippet in ELM

module Main exposing (..)

import Html exposing (..)
import Html.App as Html
import Html.Attributes exposing (..)
import Html.Events exposing (..)

type Msg
    = Increment
    | Decrement
    | Reset

type alias Model =
    { count : Int
    , message : String
    }

view : Model -> Html Msg
view model =
    div []
        [ button [ onClick Decrement ] [ text "-" ]
        , div [ style [ ( "color", "red" ) ] ] [ text (String.fromInt model.count) ]
        , button [ onClick Increment ] [ text "+" ]
        , button [ onClick Reset ] [ text "reset" ]
        , p [] [ text model.message ]
        ]

update : Msg -> Model -> Model
update msg model =
    case msg of
        Increment ->
            { model | count = model.count + 1, message = "You clicked +!" }

        Decrement ->
            { model | count = model.count - 1, message = "You clicked -!" }

        Reset ->
            { count = 0, message = "Count reset to 0!" }

main : Program () Model Msg
main =
    Html.program
        { init = { count = 0, message = "Welcome!" }
        , update = update
        , view = view
        }