-- This is a module containing a complex list function

module ComplexList exposing (..)

import Html exposing (text)


-- The ListComplexer type is used to compose a list of functions

type ListComplexer a b =
  ListComplexer (a -> b) (a -> a)


-- The `genList` function takes in the `efn` function and a `ListComplexer` value and returns a list based on the given parameters

genList : (a -> b) -> ListComplexer a b -> List a -> List b
genList efn (ListComplexer mapfn filterfn) list =
  List.filter filterfn list
  |> List.map mapfn
  |> List.map efn


-- This is a function that multiplies each element in a list by itself
square : Int -> ListComplexer Int Int
square =
  ListComplexer ( * ) identity


-- Example usage:
-- Generating a list of squared numbers from a given list of integers
numbers : List Int
numbers =
  [1, 2, 3, 4, 5]

squaredNumbers : List Int
squaredNumbers =
  genList (\x -> x * x) square numbers

-- Output:
--