{-|
Custom type for representing a binary tree with nodes containing both a value and a label.
Can be used for any type of data.
-}
type Tree a
    = Empty
    | Node a String (Tree a) (Tree a)

{-|
Function that inserts a new node into a binary tree.
Takes in a value, a label and a tree to insert the node into.
Returns the updated tree with the new node.
-}
insert : a -> String -> Tree a -> Tree a
insert value label tree =
    case tree of
        Empty ->
            Node value label Empty Empty

        Node val lbl left right ->
            if value < val then
                Node val lbl (insert value label left) right
            else
                Node val lbl left (insert value label right)

{-|
Function that searches for a specific value in a binary tree and returns its label.
Takes in a value to search for and the binary tree to search in.
Returns a Maybe String type, either Just label if value is found, or Nothing if not found.
-}
findLabel : a -> Tree a -> Maybe String
findLabel value tree =
    case tree of
        Empty ->
            Nothing

        Node val lbl left right ->
            if value == val then
                Just lbl
            else if value < val then
                findLabel value left
            else
                findLabel value right