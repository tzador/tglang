-- This snippet creates a function to calculate the Fibonacci sequence up to a given number
module Fibonacci exposing (firstPositive, fibonacci)
-- declare a function that calculates the first positive Fibonacci number
firstPositive : Int -> Int
firstPositive n =
  let
    -- create an infinite list of Fibonacci numbers
    fibs = 0 :: 1 :: List.map2 (+) fibs (List.drop 1 fibs)
    -- filter the list to only contain numbers <= the input
    filteredFibs = List.takeWhile (\x -> x <= n) fibs
  in
    -- return the last element of the filtered list
    List.last filteredFibs
-- declare a function that calculates a list of Fibonacci numbers up to a given number
fibonacci : Int -> List Int
fibonacci n =
  let
    -- create an infinite list of Fibonacci numbers
    fibs = 0 :: 1 :: List.map2 (+) fibs (List.drop 1 fibs)
    -- filter the list to only contain numbers <= the input
    filteredFibs = List.takeWhile (\x -> x <= n) fibs
  in
    -- return the filtered list
    filteredFibs