-- Example of a complex ELM function
-- Calculates the nth term in the Fibonacci sequence
-- using recursion and pattern matching

fibonacci : Int -> Int
fibonacci n =
  case n of
    0 -> 0
    1 -> 1
    _ -> fibonacci (n - 1) + fibonacci (n - 2)

-- output: `fibonacci : Int -> Int`
--         `fibonacci n =`
--          `case n of`
--            `0 -> 0`
--            `1 -> 1`
--            `_ -> fibonacci (n - 1) + fibonacci (n - 2)`