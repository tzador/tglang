module Main exposing (..)

import Html exposing (..)

type alias User =
    { id : Int
    , name : String
    , age : Int
    , address : String
    }

main : Html msg
main =
    div []
        [ h1 [] [ text "User Information" ]
        , p [] [ text "User ID:" ]
        , p [] [ text "User Name:" ]
        , p [] [ text "User Age:" ]
        , p [] [ text "User Address:" ]
        , input [ placeholder "Enter user ID" ] []
        , input [ placeholder "Enter user name" ] []
        , input [ placeholder "Enter user age" ] []
        , input [ placeholder "Enter user address" ] []
        , button [ onClick Save ] [ text "Save" ]
        ]

viewUser : User -> Html msg
viewUser user =
    div []
        [ h2 [] [ text "Viewing User" ]
        , p [] [ text ("ID: " ++ (toString user.id)) ]
        , p [] [ text ("Name: " ++ user.name) ]
        , p [] [ text ("Age: " ++ (toString user.age)) ]
        , p [] [ text ("Address: " ++ user.address) ]
        ]

update : msg -> User -> User
update msg user =
    case msg of
        Save ->
            user

subscriptions : User -> Sub msg
subscriptions user = Sub.none

-- This code snippet creates a basic HTML page with user information.
-- It defines a custom type User with attributes for ID, name, age, and address.
-- The main function creates a div with header and input fields for the user's information,
-- as well as a button to save the data.
-- The viewUser function takes in a User and displays their information with text and placeholders.
-- The update function handles the action when the save button is clicked, simply returning the user.
-- Finally, the subscriptions function does not have any subscriptions, hence the use of Sub.none.
-- Overall, this code snippet demonstrates the use of custom types, HTML elements, and updating functions in ELM.