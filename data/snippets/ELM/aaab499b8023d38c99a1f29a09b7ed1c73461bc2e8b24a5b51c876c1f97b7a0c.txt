--Define a custom type in ELM
type MyCustomType
    = Option1 -- declare the first option
    | Option2 -- declare the second option
    | Option3 -- declare the third option

--Declare a function that takes in two integers and returns the difference
myFunction : Int -> Int -> Int
myFunction x y =
    x - y

--Declare a list of tuples, where the first element is a string and the second is a boolean value
myList : List (String, Bool)
myList =
    [("hello", True), ("world", False), ("ELM", True)]

--Declare a union type with three options, each containing different data types
type MyUnionType
    = StringOption String
    | IntOption Int
    | CustomOption MyCustomType

--Define a record type with three fields, each with a different data type
type alias MyRecordType =
    { name : String
    , age : Int
    , isActive : Bool
    }

--Declare a function that takes in a list and returns a new list with only the first element of each tuple
getFirstElements : List (String, Int) -> List String
getFirstElements list =
    List.map (\(x,y) -> x) list

--Define a custom type alias to represent a Person with a name, age, and a list of hobbies
type alias Person =
    { name : String
    , age : Int
    , hobbies : List String
    }

--Declare a list of Person records
people : List Person
people =
    [ { name = "John", age = 25, hobbies = ["hiking", "painting"] }
    , { name = "Emily", age = 30, hobbies = ["reading", "gardening"] }
    , { name = "Alex", age = 20, hobbies = ["coding", "surfing"] }
    ]