-- This is a long and complex code snippet written in ELM.

module Main exposing (..)

import Html exposing (..)
import Http
import Json.Decode as Json
import String
import Url

{-| Represents a user's information
-}
type alias User =
  { username : String
  , email : String
  , age : Int
  }

{-| The main function of the program
-}
main : Program () User
main =
  Html.program
    { view = view
    , update = update
    , subscriptions = \_ -> Sub.none
    }

{-| The view function
-}
view : Model -> Html Msg
view model =
  div []
    [ h1 [] [ text "User Information" ]
    , p [] [ text ("Username: " ++ model.username) ]
    , p [] [ text ("Email: " ++ model.email) ]
    , p [] [ text ("Age: " ++ (toString model.age)) ]
    ]

{-| Represent different types of user interactions
-}
type Msg
  = FetchedData (Result Http.Error User)
  | NoOp

{-| The update function
-}
update : Msg -> User -> ( User, Cmd Msg )
update msg user =
  case msg of
    FetchedData result ->
      case result of
        Ok data ->
          ( user, Cmd.none )
        Err err ->
          ( user, Cmd.none )
    NoOp ->
      ( user, Cmd.none )

{-| The command function
-}
command : User -> String -> Cmd Msg
command user searchQuery =
  let
    url =
      "https://mywebsite.com/users/search?" ++ (Url.percentEncode searchQuery)
  in
    Http.get
      { url = url
      , expect = Http.expectJson FetchedData userDecoder
      }

{-| Decoder for User type
-}
userDecoder : Json.Decoder User
userDecoder =
  Json.object3 User
    (Json.at ["username"] Json.string)
    (Json.at ["email"] Json.string)
    (Json.at ["age"] Json.int)