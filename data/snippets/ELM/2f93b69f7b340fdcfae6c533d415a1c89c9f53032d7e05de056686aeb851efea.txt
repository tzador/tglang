-- Define a custom type called 'Tree' with a constructor that takes in an 'int' and a list of 'Tree'
type Tree
    = EmptyTree
    | Node Int (List Tree)

-- Define a function called 'insert' that takes in an 'int' and a 'Tree' and returns a 'Tree'
insert : Int -> Tree -> Tree
insert value tree =
    case tree of
        EmptyTree -> -- If the tree is empty, create a node with the given value
            Node value []

        Node v children -> -- If the tree is a node, compare the given value with the root value
            if value == v then -- If they are equal, just return the tree since we don't want duplicates
                tree
            else if value < v then -- If the value is less than the root value, insert it to the left subtree
                Node v (insert value (children !! 0) :: children)
            else -- else, insert it to the right subtree
                Node v (children ++ [insert value (List.reverse children !! 0)])

-- Define a function called 'contains' that takes in an 'int' and a 'Tree' and returns a 'Bool'
contains : Int -> Tree -> Bool
contains value tree =
    case tree of
        EmptyTree -> False -- If the tree is empty, the value is not contained in the tree
        Node v children -> -- If the tree is a node, compare the given value with the root value
            if value == v then -- If they are equal, the value is contained in the tree
                True
            else if value < v then -- If the value is less than the root value, check the left subtree for containment
                contains value (children !! 0)
            else -- else, check the right subtree for containment
                contains value (List.reverse children !! 0)