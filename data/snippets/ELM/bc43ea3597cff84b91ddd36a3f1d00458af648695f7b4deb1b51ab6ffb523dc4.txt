-- Define a type alias for a list of tuples, with String and Int values
type alias StringIntList = List (String, Int)

-- Create a function that takes in a list of tuples and returns a new list with the string values converted to uppercase
buildUpperList : StringIntList -> StringIntList
buildUpperList list =
    List.map (\(str, int) -> (String.toUpper str, int)) list

-- Define a type alias for a record with a String and Int field
type alias StringIntRecord = { str : String, int : Int }

-- Create a function that uses record destructuring to get the sum of the int values in a list
totalIntValues : List StringIntRecord -> Int
totalIntValues list =
    List.foldl (\{ int } sum -> sum + int) 0 list

-- Initialize a list of tuples with string and int values
tupleList : StringIntList
tupleList =
    [ ("a", 1)
    , ("b", 2)
    , ("c", 3)
    ]

-- Initialize a list of records with string and int fields
recordList : List StringIntRecord
recordList =
    [ { str = "hello", int = 4 }
    , { str = "world", int = 5 }
    ]

-- Call the buildUpperList function and assign the result to a new list variable
upperList : StringIntList
upperList =
    buildUpperList tupleList

-- Call the totalIntValues function and assign the result to a new integer variable
total : Int
total = 
    totalIntValues recordList

-- The result of `upperList` should be:
[("A",1), ("B",2), ("C",3)] 

-- The result of `total` should be:
9