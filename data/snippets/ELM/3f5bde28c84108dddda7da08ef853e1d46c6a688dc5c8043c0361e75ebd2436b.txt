module Main exposing (..)

import Html exposing (text, div, button, input, textArea)
import Json.Decode as D


-- This function is used to add two ints together
sum : Int -> Int -> Int
sum x y =
    x + y


-- This function applies a function twice to a value
applyTwice : (a -> a) -> a -> a
applyTwice f x =
    f (f x)


-- The Person type represents a person with a name, age, and favorite color
type alias Person =
    { name : String
    , age : Int
    , favoriteColor : String
    }


-- This function creates a custom decoder for a Person record
personDecoder : D.Decoder Person
personDecoder =
    D.map3 Person
        (D.field "name" D.string)
        (D.field "age" D.int)
        (D.field "favoriteColor" D.string)


-- A list of people
people : List Person
people =
    [ Person "Alice" 28 "Blue"
    , Person "Bob" 31 "Green"
    , Person "Carol" 35 "Red"
    ]


-- This function removes a person with the given name from the list
removePerson : String -> List Person -> List Person
removePerson name people =
    List.filter (\person -> person.name /= name) people


main : Html.Html msg
main =
    div []
        [ button
            [ onClick (Msg.ShowPerson "Alice") ]
            [ text "Show Alice" ]
        , button
            [ onClick (Msg.ShowPerson "Bob") ]
            [ text "Show Bob" ]
        , button
            [ onClick (Msg.ShowPerson "Carol") ]
            [ text "Show Carol" ]
        , input [ type_ "text", onInput Msg.UpdateText ] []
        , textArea [ value model.text ] []
        ]


-- Update functions
update : Msg -> Model -> (Model, Cmd.Cmd Msg)
update msg model =
    case msg of
        Msg.ShowPerson name ->
            ({ model | personName = name }, Cmd.none)

        Msg.UpdateText text ->
            ({ model | text = text }, Cmd.none)