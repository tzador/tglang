-- This code snippet shows an example of a binary search function in ELM

binarySearch : List Int -> Int -> Maybe Int
binarySearch numbers target =
  let
    lowerBound = 0
    upperBound = List.length numbers - 1
  in
  binarySearchHelper numbers target lowerBound upperBound


binarySearchHelper : List Int -> Int -> Int -> Int -> Maybe Int
binarySearchHelper numbers target lowerBound upperBound =
  if upperBound < lowerBound then
    Nothing
  else
    let
      midPoint = (upperBound + lowerBound) // 2
      midValue = List.get midPoint numbers
    in
    if midValue == target then
      Just midPoint
    else if midValue < target then
      binarySearchHelper numbers target (midPoint + 1) upperBound
    else
      binarySearchHelper numbers target lowerBound (midPoint - 1)

-- Example usage of the binarySearch function
listOfNumbers : List Int
listOfNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

-- Search for the number 5 in the list of numbers
result : Maybe Int
result = binarySearch listOfNumbers 5

-- The result will be Just 4, indicating that the index of 5 in the list is 4