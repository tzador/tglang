-- This is a function that adds two numbers together
add : Int -> Int -> Int
add x y =
  x + y 
  
-- This is a custom type that represents a person with a name and age
type alias Person =
  { name : String
  , age : Int
  }
  
{-|
  This is a function that takes in a list of persons and returns a list of their names
  
  Example usage:
    getNames [{name = "John", age = 25}, {name = "Jane", age = 30}] --> ["John", "Jane"]
-}
getNames : List Person -> List String
getNames persons =
  List.map (\person -> person.name) persons
  
-- This is a union type that represents a result, either a success with a value or a failure with an error message
type Result a
  = Success a
  | Failure String
  
{-|
  This is a function that divides two numbers and returns a result
  If the divisor is 0, it will return a Failure with an error message
  Otherwise, it will return a Success with the quotient
-}
divide : Int -> Int -> Result Float
divide dividend divisor =
  if divisor == 0 then
    Failure "Cannot divide by 0"
  else
    Success (toFloat dividend / toFloat divisor)