{-| Example data type representing a tree with values at each node -}
type Tree a
    = Empty
    | Node (Tree a) a (Tree a)

{-| Function to return the values in the tree in bread-first order -}
breadthFirst : Tree a -> List a
breadthFirst tree =
    case tree of
        Empty ->
            []

        Node left value right ->
            value :: List.append (breadthFirst left) (breadthFirst right)

{-| Example tree with integer values -}
exampleTree : Tree Int
exampleTree =
    Node
        (Node (Node (Node Empty 1 Empty) 2 Empty) 3 Empty)
        4
        (Node (Node Empty 5 Empty) 6 (Node Empty 7 Empty))

{-| Output: [4,3,6,1,2,5,7] -}
breadthFirst exampleTree