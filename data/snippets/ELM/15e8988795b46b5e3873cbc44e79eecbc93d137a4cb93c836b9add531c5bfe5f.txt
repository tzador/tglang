-- This is a complex code snippet in ELM that generates a list of prime numbers

-- Define a function to check if a number is prime or not
isPrime : Int -> Bool
isPrime number =
    if number < 2 then
        False
    else
        let
            limit = floor (sqrt (toFloat number))
        in
            not (List.any (\x -> number % x == 0) [2 .. limit])


-- Define a function to generate a list of primes up to a given limit
-- Uses the Sieve of Eratosthenes algorithm to find primes
-- https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes
primes : Int -> List Int
primes limit =
    let
        -- Initialize a list of all numbers up to the limit
        numbers = [2 .. limit]

        -- Loop through the list of numbers, removing multiples of each prime number
        loop : List Int -> List Int
        loop xs =
            case xs of
                -- Base case: Return the list when it's empty
                [] ->
                    xs

                -- Recursive case: Remove multiples of the first element and loop through the remaining list
                x :: xs' ->
                    if isPrime x then
                        x :: loop (List.filter (\n -> n % x /= 0) xs')

                    else
                        loop xs'
    in
        loop numbers


-- Print a list of primes up to 100
main : Program Never
main =
    let
        -- Set the limit to 100
        limit = 100
    in
        -- Invoke the primes function and print the output as a string
        toString (primes limit)