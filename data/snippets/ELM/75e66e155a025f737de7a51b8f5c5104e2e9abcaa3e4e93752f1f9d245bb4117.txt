type alias User =
    { name : String
    , age : Int
    , email : String
    , isAdmin : Bool
    }

-- This is a type alias in ELM that represents a user with attributes
-- `name`, `age`, `email`, and `isAdmin`

type Permission
    = Admin
    | Moderator
    | User
    | Guest

-- Another type in ELM called `Permission` that has four possible values:
-- `Admin`, `Moderator`, `User`, and `Guest`

type alias Chatroom =
    { name : String
    , permissions : List Permission
    }

-- A type alias `Chatroom` that represents a chatroom with a `name` and a list
-- of `permissions` that determine which users have access to it.

type Msg
    = UserSelected User
    | PermissionUpdate User Permission

-- `Msg` is a custom ELM type that represents the possible messages that can
-- be sent and received in an application. In this case, it can either be
-- "UserSelected" with a `User` object as its argument, or "PermissionUpdate"
-- with a `User` and `Permission` object as its arguments.

type Model =
    { users : List User
    , selectedUser : Maybe User
    , chatrooms: List Chatroom
    }

-- The `Model` type represents the current state of the application, with a list
-- of `users`, a `selectedUser` that can be either `Just User` or `Nothing`, 
-- and a list of `chatrooms` that are available in the application.

type alias Update =
    Msg -> Model -> (Model, Cmd Msg)

-- `Update` is a type alias for a function that takes in a `Model` and a `Msg`
-- and outputs a new `Model` and a `Cmd` that will trigger another message or
-- command. This is how state changes are managed in ELM.

type alias Subscriptions =
    Model -> Sub Msg

-- `Subscriptions` is a type alias for a function that takes in a `Model` and
-- returns a `Sub Msg`, which is a subscription to external events that can
-- trigger messages in the application.

type alias View =
    Model -> Html Msg

-- `View` is a type alias for a function that takes in a `Model` and returns
-- an `Html Msg`, which is the view or UI of the application. It is responsible
-- for rendering the current state of the application.