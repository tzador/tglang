--Function to check if a list contains a given value
contains : a -> List a -> Bool
contains value list =
    case list of
        [] ->
            False
        head :: tail ->
            if value == head then
                True
            else
                contains value tail

--Custom type for a binary search tree
type BST a
    = Empty
    | Node a (BST a) (BST a)

--Function to insert a value into a binary search tree
insert : a -> BST a -> BST a
insert value tree =
    case tree of
        Empty ->
            Node value Empty Empty
        Node nodeValue left right ->
            if value < nodeValue then
                Node nodeValue (insert value left) right
            else
                Node nodeValue left (insert value right)
            
--Function to delete a value from a binary search tree
delete : a -> BST a -> BST a
delete value tree =
    case tree of
        Empty ->
            Empty
        Node nodeValue left right ->
            if value == nodeValue then
                case (left, right) of
                    (Empty, Empty) ->
                        Empty
                    (Empty, _) ->
                        right
                    (_, Empty) ->
                        left
                    (_, _) ->
                        let newRight = deleteMin right
                        in Node (getMin newRight) left newRight
            else
                if value < nodeValue then
                    Node nodeValue (delete value left) right
                else
                    Node nodeValue left (delete value right)

--Function to delete the minimum value from a binary search tree
deleteMin : BST a -> BST a
deleteMin tree =
    case tree of
        Empty ->
            Empty
        Node nodeValue Empty right ->
            right
        Node nodeValue left right ->
            Node nodeValue (deleteMin left) right

--Helper function to get the minimum value from a binary search tree
getMin : BST a -> a
getMin tree =
    case tree of
        Empty ->
            error "The tree is empty."
        Node nodeValue _ _ ->
            nodeValue