-- This is a complex code snippet in ELM

module Main exposing (main)

import Html
import Html.Events exposing (onInput)
import String

-- Type alias for our model
type alias Model =
    { input : String
    , output : String
    }

-- App initialization function
main : Program () Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }

-- App initialization function to set initial model state
init : () -> (Model, Cmd Msg)
init _ =
    ( Model "" ""
    , Cmd.none
    )

-- View function to display input and output fields
view : Model -> Html Msg
view model =
    inputView model.input
        |> Html.map InputChanged

-- View function to display input field
inputView : String -> Html Msg
inputView value =
    Html.div []
        [ Html.label [ Html.for "input" ] [ Html.text "Input field" ]
        , Html.input
            [ Html.id "input"
            , Html.value value
            , onInput InputChanged
            ]
            []
        ]

-- Subscription function
subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none

-- Update function to handle input changes and update model
update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        InputChanged newInput ->
            ( { model | input = newInput, output = String.reverse newInput }
            , Cmd.none
            )