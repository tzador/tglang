-- A simple ELM program

module Main exposing (..)

import Html exposing (Html, div, h1, h2, span, ul, li, text)


-- MODEL

type alias Model =
    { name : String
    , age : Int
    , friends : List String
    }


initialModel : Model
initialModel =
    { name = "John"
    , age = 25
    , friends = [ "Kate", "Tom", "Alice" ]
    }


-- UPDATE

type Msg
    = ChangeName String
    | ChangeAge Int
    | AddFriend String


update : Msg -> Model -> Model
update msg model =
    case msg of
        ChangeName newName ->
            { model | name = newName }

        ChangeAge newAge ->
            { model | age = newAge }

        AddFriend friend ->
            { model | friends = model.friends ++ [ friend ] }


-- VIEW

view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "Hello, " ++ model.name ++ "!" ]
        , h2 [] [ text "Age: " ++ String.fromInt model.age ]
        , span [ id "friends" ] [ text "Friends: " ]
        , ul []
            (List.map (\friend -> li [] [ text friend ]) model.friends)
        ]


-- INIT, subscriptions, and main

main : Program () Model Msg
main =
    Html.program
        { init = (initialModel, Cmd.none)
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }