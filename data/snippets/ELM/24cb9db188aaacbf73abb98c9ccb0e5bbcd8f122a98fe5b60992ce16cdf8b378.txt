-- This code snippet shows how to implement a custom decoder for an API using ELM

import Json.Decode
    exposing (..)

-- Create a custom decoder that takes in an HTTP response and returns a decoded value
customDecoder : Decoder a -> Decoder a
customDecoder decoder =
    let
        customMsg decoder value =
            case result of
                Ok a ->
                    value

                Err err ->
                    Decode.succeed (Err err)
    in
        Json.Decode.customDecoder customMsg decoder

-- Define the structure of the expected API response
type alias ApiResponse =
    { key : String
    , value : Int }

-- Define the corresponding ELM record type
type alias ApiRecord =
    { key : String
    , value : Int }

-- Create a decoder for the API response
apiDecoder : Decoder ApiResponse
apiDecoder =
    Decode.map2 ApiResponse (Decode.field "key" Decode.string) (Decode.field "value" Decode.int)

-- Use the custom decoder to decode an HTTP response into the expected record type
decodedRecord : Http.Response -> Result String ApiRecord
decodedRecord response =
    customDecoder apiDecoder |> Json.Decode.decodeString response.bodyText