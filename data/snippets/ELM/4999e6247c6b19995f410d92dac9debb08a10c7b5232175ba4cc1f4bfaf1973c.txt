--This is a function that checks if a given list of numbers contains any repeated numbers
--The function takes in a list of integers and returns a boolean value
--The function uses recursion to go through the list and check for repeats

containsRepeats : List Int -> Bool
containsRepeats list =
   case list of
      [] -> False --if list is empty, return False
      x :: xs -> let --using pattern matching to break down list into head and tail
         num = List.head xs --getting the head of the list
         tail = List.tail xs --getting the tail of the list
         in
         if List.member num tail then --checking if the head is in the tail of the list
            True --if it is, return True
         else
            containsRepeats xs --else, recursively call the function with the tail of the list

--example usage
containsRepeats [1,2,3,4] --will return False
containsRepeats [5,4,5,6] --will return True