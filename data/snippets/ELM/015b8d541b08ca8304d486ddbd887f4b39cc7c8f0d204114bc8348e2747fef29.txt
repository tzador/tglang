-- Function that appends two lists together
append : List a -> List a -> List a
append a b =
    case a of
        [] ->
            b
        x :: xs ->
            x :: append xs b


-- Generates a list of Fibonacci numbers
fibonacci : Int -> List Int
fibonacci n =
    case n of
        0 ->
            []

        1 ->
            [1]

        n ->
            let
                fib n1 n2 =
                    if n2 > n then
                        [n2]
                    else
                        n2 :: fib n1 (n1 + n2)

                fibs =
                    fib 1 1
            in
            fibs ++ fibonacci (n - 1)



-- Main function that takes in a number and returns a list of square roots
main : Int -> List Float
main n =
    if n < 0 then
        []
    else
        let
            root =
                sqrt (toFloat n)
        in
        root :: main (n - 1)