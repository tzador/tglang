------------------
-- HELPER FUNCTIONS
------------------

-- | Calculates the sum of two integers
add : Int -> Int -> Int
add a b =
  a + b

-- | Applies a function to each element in a list and returns a new list
map : (a -> b) -> List a -> List b
map func list =
  List.map func list

-- | Calculates the factorial of a number
factorial : Int -> Int
factorial n =
  if n < 0 then
    0
  else if n == 0 then
    1
  else
    n * factorial (n - 1)

------------------
-- MAIN FUNCTION
------------------

-- | Main function that prints the output of the program
main : Program () Model Msg
main =
  Browser.element
    { init = init
    , update = update
    , subscriptions = subscriptions
    , view = view
    }
    
------------------
-- MODEL
------------------

-- | Represents the state of our program
type alias Model =
  { counter : Int }

-- | Initializes the model with a starting value for the counter
init : () -> ( Model, Cmd Msg )
init _ =
  ( Model 0, Cmd.none )

------------------
-- UPDATE FUNCTION
------------------

-- | Represents all possible actions that can occur in our program
type Msg
  = Increment
  | Decrement

-- | Updates the model based on the given action
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
  case msg of
    Increment ->
      ( { model | counter = model.counter + 1 }, Cmd.none )

    Decrement ->
      ( { model | counter = model.counter - 1 }, Cmd.none )

------------------
-- VIEW FUNCTION
------------------

-- | Creates the HTML view of our program
view : Model -> Html Msg
view model =
  div []
    [ h1 [] [ text "Counter App" ]
    , div [] [ text (toString model.counter) ]
    , button [ onClick Increment ] [ text "+" ]
    , button [ onClick Decrement ] [ text "-" ]
    ]
  
------------------
-- SUBSCRIPTIONS
------------------

-- | Subscribes to DOM events triggered by the user
subscriptions : Model -> Sub Msg
subscriptions model =
  Sub.none