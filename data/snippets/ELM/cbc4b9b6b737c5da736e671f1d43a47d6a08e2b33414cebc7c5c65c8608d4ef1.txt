-- This code snippet is a function that determines the length of a list
-- and then adds the length to every element in the list.
-- It uses recursion and pattern matching to handle the base case and
-- recursive case. Additionally, it uses a helper function to keep track
-- of the current length and update it for each recursive call.

-- Function declaration with type annotation
lengthAddList : List Int -> List Int

-- Helper function declaration with type annotation
lengthAddHelper : List Int -> Int -> List Int

-- Function definition using pattern matching
lengthAddList list = 
    case list of
        [] -> [] -- base case, empty list has length of 0
        x::xs -> 
            let
                len = lengthAddHelper xs 1 -- initialize current length to 1 for first element
            in
                (x + len) :: lengthAddList xs -- add current length to element and recurse on remaining list

-- Helper function definition using recursion
lengthAddHelper list count =
    case list of
        [] -> count -- base case, return current length
        x::xs -> lengthAddHelper xs (count + 1) -- increment length and recurse on remaining list
    
-- Example usage
lengthAddList [1,2,3,4] -- output: [4,5,6,7]