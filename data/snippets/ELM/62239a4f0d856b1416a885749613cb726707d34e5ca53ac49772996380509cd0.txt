-- | This is a type alias for a tuple containing
-- | a list of strings and an integer.
-- |
-- | @type PetOwners = ([String], Int)

type alias PetOwners = ([String], Int)

-- | This function takes in a list of names and
-- | an integer representing the number of pets for each owner,
-- | and returns a list of all the possible combinations of owners and pets.
-- |
-- | @param owners - a list of strings
-- | @param numPets - an integer
-- | @return a list of tuples with owners and pets
combination : List String -> Int -> List (String, Int)
combination owners numPets =
    case numPets of
        0 ->
            []

        1 ->
            List.map (\owner -> (owner, 1)) owners

        _ ->
            List.map
                (\owner ->
                    let
                        remaining = numPets - 1
                        combos = combination owners remaining
                    in
                    (owner, 1) :: List.map (\(o, n) -> (owner, n + 1)) combos
                )
                owners

-- | An example of using the combination function
-- |
-- | @combination ["John", "Jane"] 2
-- | returns [("John", 1), ("John", 2), ("Jane", 1), ("Jane", 2)]