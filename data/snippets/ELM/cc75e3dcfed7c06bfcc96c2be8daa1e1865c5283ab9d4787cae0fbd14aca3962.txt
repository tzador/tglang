-- A custom type for representing a binary tree
type Tree a
    = Empty
    | Node a (Tree a) (Tree a)


-- A function to insert a new element into a binary tree
-- Takes in a function to compare elements and a value to insert
insert : (a -> a -> Order) -> a -> Tree a -> Tree a
insert cmp x tree =
    case tree of
        Empty ->
            Node x Empty Empty
        Node val left right ->
            case cmp x val of
                LT ->
                    Node val (insert cmp x left) right
                GT ->
                    Node val left (insert cmp x right)
                EQ ->
                    Node val left right


-- A function to check if a binary tree contains a given element
contains : (a -> a -> Order) -> a -> Tree a -> Bool
contains cmp x tree =
    case tree of
        Empty ->
            False
        Node val left right ->
            case cmp x val of
                LT ->
                    contains cmp x left
                GT ->
                    contains cmp x right
                EQ ->
                    True


-- A function to map over a binary tree
map : (a -> b) -> Tree a -> Tree b
map f tree =
    case tree of
        Empty ->
            Empty
        Node val left right ->
            Node (f val) (map f left) (map f right)