-- This function takes in a list of integers and returns the sum
sumList : List Int -> Int
sumList list =
    List.foldl (+) 0 list

-- check if a given number is prime
isPrime : Int -> Bool
isPrime n =
    if n < 2 then
        False
    else
        let
            isPrimeHelper : Int -> Int -> Bool
            isPrimeHelper divisor n =
                if divisor == n then
                    True
                else 
                    if n % divisor == 0 then
                        False
                    else
                        isPrimeHelper (divisor + 1) n
        in
        isPrimeHelper 2 n

-- create a type alias for a user that has a name (string) and age (integer)
type alias User =
    { name : String
    , age : Int
    }

-- create a function that prints out the names of users under a certain age
printUnderAgeUsers : List User -> Int -> String
printUnderAgeUsers users ageLimit =
    let
        underAgeUsers =
            List.filter (\user -> user.age < ageLimit) users
    in
    String.join ", " (List.map .name underAgeUsers)

-- create a custom type with multiple constructors
type Colour
    = Red
    | Green
    | Blue
    | RGB Int Int Int
    | HSL Float Float Float

-- record syntax to create a record type
type alias Point =
    { x : Int
    , y : Int
    , z : Int
    }

-- create a function that adds two points together 
addPoints : Point -> Point -> Point
addPoints point1 point2 =
    { x = point1.x + point2.x
    , y = point1.y + point2.y
    , z = point1.z + point2.z
    }