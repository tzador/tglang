-- Represents a binary tree
type Tree a
    = Empty
    | Node a (Tree a) (Tree a)

-- Takes a predicate function and a tree, returns a list of all values in the tree that satisfy the predicate
filterTree : (a -> Bool) -> Tree a -> List a
filterTree predicate tree =
    case tree of
        Empty ->
            []

        Node value left right ->
            let
                -- Filter both left and right subtrees
                filteredLeft =
                    filterTree predicate left
                filteredRight =
                    filterTree predicate right
            in
                -- Concatenate values that satisfy the predicate from both subtrees
                if predicate value then
                    [ value ] ++ filteredLeft ++ filteredRight
                else
                    filteredLeft ++ filteredRight