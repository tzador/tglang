-- This is a module
module Main exposing (..)

import Html exposing (..)
import String 
import 
Foreign.Console 

-- This is a function that takes in two integers and returns their sum
sumTwoIntegers : Int -> Int -> Int
sumTwoIntegers x y =
    x + y 

-- This is a type alias called 'Person' that represents a person with a name, age, and location
type alias Person =
  { name : String 
  , age : Int 
  , location : String 
  } 

-- This is a list of people
peopleList : List Person
peopleList =
    [ { name = "John"
      , age = 30
      , location = "New York"
      }
    , { name = "Emily"
      , age = 25
      , location = "London"
      }
    , { name = "David"
      , age = 40
      , location = "Paris"
      }
    ]

-- This is a function that takes in a list of people and returns the names of those who are over 30 years old
getNamesOverThirty : List Person -> List String
getNamesOverThirty people =
    List.filter (\person -> person.age > 30) people
        |> List.map .name

-- This is a view function that displays a list of people and their information
view : List Person -> Html msg
view people =
    div []
        [ h1 [] [ text "People List" ]
        , ul []
            (List.map (\person -> li [] [ text (person.name ++ " - " ++ String.fromInt person.age ++ " - " ++ person.location) ]) people)
        ]

-- This is a program that runs our app
main : Program () Model Msg
main =
    Program.withConsole
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        }

-- This is a function that initializes our application's model
init : () -> Model
init _ =
    { people = peopleList }

-- This is our application's model
type alias Model =
    { people : List Person
    }

-- This is a message type that represents the possible actions our application can take
type Msg
    = NoOp
    | AddPerson Person
    | RemovePerson String 

-- This is a function that updates our application's model based on the given message
update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        NoOp ->
            (model, Cmd.none)
        
        AddPerson person ->
            ({ model | people = person :: model.people }, Cmd.none)
        
        RemovePerson name ->
            ({ model | people = List.filter (\person -> person.name /= name) model.people }, Cmd.none)

-- This is a function that subscribes to external events
subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

-- This is a function that starts our program
main : Program Void Model Msg
main =
    Program.beginnerProgram
        { model = init ()
        , update = update
        , view = view
        , subscriptions = subscriptions
        }