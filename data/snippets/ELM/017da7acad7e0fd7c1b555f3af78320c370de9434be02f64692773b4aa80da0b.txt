-- Here we define a type alias for a function that takes in two `String` values and returns a `String` value.
type alias StringFunction = String -> String -> String

{-|
    This function takes in a `StringFunction` and two `String` values, applies the given function to the two values,
    and then returns the result of the function.
-}
applyFunction : StringFunction -> String -> String -> String
applyFunction func str1 str2 = 
    func str1 str2

{-|
    This function takes in a list of functions that follow the `StringFunction` type alias and two `String` values,
    applies each function in the list to the two values, and then returns the list of results.
-}
applyFunctions : List StringFunction -> String -> String -> List String
applyFunctions functions str1 str2 =
    let
        applyFunctionToStrings func =
            func str1 str2
    in
        List.map applyFunctionToStrings functions

-- Example usage:
result = applyFunction (\word1 word2 -> word1 ++ word2 ++ " are awesome!") "ELM" "functions"

-- Output:
-- "ELM functions are awesome!"