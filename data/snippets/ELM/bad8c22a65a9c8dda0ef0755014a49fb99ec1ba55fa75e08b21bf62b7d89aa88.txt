-- This is a commented line in ELM
module Main exposing (..)

import Html exposing (Html)


-- This function takes in two numbers and returns the larger one
max : Int -> Int -> Int
max a b =
    if a > b then
        a

    else
        b


-- This function takes in a list of numbers and returns the sum of all the numbers
sum : List Int -> Int
sum list =
    List.foldl (+) 0 list


-- This function checks if two strings are equal
isEqual : String -> String -> Bool
isEqual str1 str2 =
    if str1 == str2 then
        True

    else
        False


-- This function takes in a list of strings and maps each string to its uppercase form
toUpper : List String -> List String
toUpper list =
    List.map String.toUpper list


-- This is a custom type called 'Shape' with two constructors: 'Rectangle' and 'Circle'
type Shape
    = Rectangle Float Float
    | Circle Float


-- Calculates the area of a shape based on its constructor 
getArea : Shape -> Float
getArea shape =
    case shape of
        Rectangle width height ->
            width * height

        Circle radius ->
            3.14 * radius ^ 2


-- This function calculates the factorial of a number using recursion
factorial : Int -> Int
factorial n =
    if n == 0 then
        1

    else
        n * factorial (n - 1)


-- This function calculates the nth fibonacci number using recursion
fib : Int -> Int
fib n =
    if n == 0 || n == 1 then
        n

    else
        fib (n - 1) + fib (n - 2)


main : Html a
main =
    Html.div []
        [ Html.text ("Max of 5 and 10 is " ++ toString (max 5 10))
        , Html.text ("Sum of [1, 2, 3, 4] is " ++ toString (sum [1, 2, 3, 4]))
        , Html.text ("Is 'ELM' equal to 'elm'? " ++ toString (isEqual "ELM" "elm"))
        , Html.text ("Uppercase of ['hello', 'world'] is " ++ toString (toUpper ["hello", "world"]))
        , Html.text ("Area of Circle with radius 5 is " ++ toString (getArea (Circle 5)))
        , Html.text ("Factorial of 5 is " ++ toString (factorial 5))
        , Html.text ("Fibonacci number at index 6 is " ++ toString (fib 6))
        ]