-- This code snippet is an example of a complex recursive function that calculates the factorial of a given number

-- The function `factorial` takes in an integer as its argument and returns the factorial of that number
factorial : Int -> Int
factorial n =
    if n == 0 then
        1
    else
        n * factorial (n - 1)

-- This function uses pattern matching to handle negative input values and returns an error message
factorial : Int -> Result String Int
factorial n =
    if n < 0 then
        Err "Input must be a positive integer"
    else
        Ok (factorialHelper n)

-- The helper function `factorialHelper` takes in an integer and uses recursion to calculate the factorial
factorialHelper : Int -> Int
factorialHelper n =
    if n == 0 then
        1
    else
        n * factorialHelper (n - 1)

-- Example usage
factorial 5 -- returns 120
factorial -3 -- returns Err "Input must be a positive integer"