{-
This is a complex code snippet in ELM
It contains functions, data types, and list operations
-}

-- Defining a custom data type
type Pirate = Sailor | Captain

-- Function to check if a pirate is a captain
isCaptain : Pirate -> Bool
isCaptain pirate =
    case pirate of
        Captain ->
            True
        _ ->
            False

-- Function to calculate the age of a pirate (assuming they live for at most 100 years)
calculateAge : Pirate -> Int -> Int
calculateAge pirate years =
    case pirate of
        Sailor ->
            years - 18
        Captain ->
            years - 25

-- List of pirates
pirates : List Pirate
pirates =
    [Sailor, Captain, Sailor, Captain, Captain, Sailor]

-- Get all the captains from the list
captains : List Pirate
captains =
    List.filter isCaptain pirates

-- Print the ages of all the captains
printAges : List Pirate -> List Int
printAges list =
    List.map (\pirate -> calculateAge pirate 60) list

-- Output the ages of the captains in Markdown format