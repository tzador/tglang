-- This code snippet shows how to define a recursive function in ELM that takes in a list of integers and returns the sum of all even numbers in the list.

sumEven : List Int -> Int
sumEven list =
    case list of
        [] ->
            0

        head :: tail ->
            if head % 2 == 0 then
                head + (sumEven tail)
            else
                sumEven tail

-- This function uses pattern matching to check if the list is empty. If it is, then we return 0 as the sum of even numbers.
-- Otherwise, we use an if statement to check if the head of the list is divisible by 2. If it is, we add it to the recursive call of sumEven on the tail of the list.
-- If the head is not divisible by 2, we simply call the function recursively on the tail of the list.
-- This continues until the list is empty, and we return the final sum of all even numbers in the list.