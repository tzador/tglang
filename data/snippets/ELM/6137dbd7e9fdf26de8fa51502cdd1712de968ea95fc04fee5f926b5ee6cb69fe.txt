-- function to check if two lists have any common elements
intersect : List comparable -> List comparable -> List comparable
intersect list1 list2 =
    List.filter (\x -> List.member x list2) list1

-- defining types for a binary search tree
type BST comparable
    = Empty
    | Node comparable (BST comparable) (BST comparable)

-- function to insert new element into a binary search tree
insert : comparable -> BST comparable -> BST comparable
insert element tree =
-- pattern matching to check if tree is empty
    case tree of
        Empty ->
            Node element Empty Empty
        -- if tree is not empty, compare element with current node value and decide where to insert
        Node value left right ->
            if element < value then
                Node value (insert element left) right
            else if element > value then
                Node value left (insert element right)
            else
                tree

main =
-- creating a binary search tree and inserting elements
    let
        tree =
            insert 5 (insert 7 (insert 2 (insert 10 Empty)))
    in
    tree