-- This code snippet generates a table of Fibonacci numbers
-- up to a given limit, using the ELM programming language.

module Main exposing (main)

-- Define a function "fibonacci" which takes in a number "n"
-- and returns a list of Fibonacci numbers up to "n"
fibonacci : Int -> List Int
fibonacci n =
    case n of
        0 ->
            [0]

        1 ->
            [0, 1]

        _ ->
            fibSequence n 0 1 [0, 1] -- call the helper function "fibSequence"

-- Define a helper function "fibSequence" which takes in a number "n",
-- the current Fibonacci number "a", the previous Fibonacci number "b",
-- and the current list of Fibonacci numbers "xs", and recursively
-- calls itself to add the next Fibonacci number to the list until
-- the limit of "n" is reached
fibSequence : Int -> Int -> Int -> List Int -> List Int
fibSequence n a b xs =
    if a + b > n then
        xs
    else
        fibSequence n (a + b) a (xs ++ [(a + b)]) -- recursively call "fibSequence" with updated values

-- Define a function "fibTable" which takes in a number "n"
-- and prints a table of Fibonacci numbers up to "n"
fibTable : Int -> Html msg
fibTable n =
    let
        numbers =
            fibonacci n -- call the "fibonacci" function to get the list of Fibonacci numbers

        rows =
            List.map (\x -> tr [ td [] [ text (toString x) ] ]) numbers -- create a list of table rows, each containing a single Fibonacci number

    in
        table [] rows -- create the actual table using the list of rows

-- Define a "main" function which takes no input and returns an empty string
main : Html msg
main =
    div
        []
        [ h1 [] [ text "Fibonacci Table" ] -- create a heading for the table
        , fibTable 10 -- call the "fibTable" function with a limit of 10
        ]