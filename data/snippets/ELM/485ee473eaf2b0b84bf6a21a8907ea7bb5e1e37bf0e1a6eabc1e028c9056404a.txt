-- Create a custom type called 'Shape' with two constructors: 'Rectangle' and 'Circle'
type Shape
    = Rectangle Float Float Float Float
    | Circle Float Float Float

-- Define a function called 'newShape' that takes in two Floats and creates a 'Rectangle' with those measurements
newShape : Float -> Float -> Shape
newShape x y =
    Rectangle 0 0 x y

-- Define a function called 'area' that calculates the area of a 'Shape'
area : Shape -> Float
area shape =
    case shape of
        Rectangle x y width height ->
            width * height
        Circle x y radius ->
            pi * radius * radius

-- Create a list of Shapes
shapes : List Shape
shapes =
    [ Rectangle 10 10 20 30
    , Circle 15 25 10
    ]

-- Call our 'area' function on each Shape in the list and store the results in a new list
areas : List Float
areas =
    List.map area shapes

-- Initialize an empty list to store the annotated string representation of each shape
shapeStrings : List String
shapeStrings =
    []

-- Loop through each Shape in the list and use pattern matching to add the annotated string representation to our 'shapeStrings' list
for shape in shapes do
    case shape of
        Rectangle x y width height ->
            shapeStrings ++ [ "Rectangle with top left corner at (" ++ toString x ++ ", " ++ toString y ++ "), width: " ++ toString width ++ ", height: " ++ toString height]
        Circle x y radius ->
            shapeStrings ++ [ "Circle with center at (" ++ toString x ++ ", " ++ toString y ++ "), radius: " ++ toString radius]

-- Print out our list of annotated strings, showing the details of each Shape
Debug.log "Shapes: " (List.concat shapeStrings)

-- Output:
-- Shapes: ["Rectangle with top left corner at (10.0, 10.0), width: 20.0, height: 30.0", "Circle with center at (15.0, 25.0), radius: 10.0"]