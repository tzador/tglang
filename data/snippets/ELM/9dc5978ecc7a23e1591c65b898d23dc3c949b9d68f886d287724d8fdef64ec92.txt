-- Define a custom type called 'Tree' that can store either
-- an empty tree 'Empty' or a node with a value and children.
type Tree a
    = Empty
    | Node a (List (Tree a))

-- A function that takes in a list of integers and returns a sorted list
-- using the merge sort algorithm.
mergeSort : List Int -> List Int
mergeSort list =

    -- Helper function to merge two sorted lists into one.
    merge : List Int -> List Int -> List Int
    merge xs [] = xs
    merge [] ys = ys
    merge (x :: xs) (y :: ys) =
        if x <= y then
            x :: merge xs (y :: ys)
        else
            y :: merge (x :: xs) ys

    -- Divide the list into two halves
    (left, right) = List.splitAt (List.length list // 2) list

    -- Recursively sort the left and right halves using merge sort
    sortedLeft = mergeSort left
    sortedRight = mergeSort right

    -- Combine the sorted left and right halves using the helper function
    merge sortedLeft sortedRight