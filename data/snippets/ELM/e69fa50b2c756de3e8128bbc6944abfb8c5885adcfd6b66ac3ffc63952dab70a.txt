-- Define a custom type called `List`
type List a
  = Nil -- A list with no elements
  | Cons a (List a) -- A list with a first element and the rest of the list

-- Create a list with the values 1, 2, 3, 4
list : List Int
list = Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))

-- Define a function to calculate the length of a list
len : List a -> Int 
len xs =
  case xs of
    Nil -> 0 -- Base case, an empty list has length 0
    Cons _ rest -> 1 + len rest -- Recursive case, add 1 for each element and call `len` on the remaining list 

-- Define a function to map a function over a list
map : (a -> b) -> List a -> List b
map f xs =
  case xs of
    Nil -> Nil -- Base case, an empty list mapped to an empty list
    Cons x rest -> Cons (f x) (map f rest) -- Recursive case, apply `f` to the first element and then recursively map over the remaining list

-- Define a function to filter a list based on a predicate function
filter : (a -> Bool) -> List a -> List a
filter pred xs =
  case xs of
    Nil -> Nil -- Base case, an empty list filtered to an empty list
    Cons x rest ->
      if pred x then -- If the first element satisfies the predicate
        Cons x (filter pred rest) -- Include it in the resulting list and recursively filter the remaining list
      else
        filter pred rest -- Otherwise, recursively filter the remaining list without including the first element