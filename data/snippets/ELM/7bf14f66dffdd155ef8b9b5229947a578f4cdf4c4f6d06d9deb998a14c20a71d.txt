-- Define a custom type called `Garden` that represents a garden with various plants
type Garden
  = EmptyGarden
  | Plant String Int

-- Define a function that takes in a list of plants and returns the total number of plants in the garden
numberOfPlants : List Garden -> Int
numberOfPlants gardens =
  case gardens of
    [] -> 0
    (Plant name _) :: rest -> 1 + numberOfPlants rest
    garden :: rest -> numberOfPlants rest

-- Define a function that takes in a list of plants and returns a list of their names
listOfNames : List Garden -> List String
listOfNames gardens =
  case gardens of
    [] -> []
    (Plant name _) :: rest -> name :: listOfNames rest
    garden :: rest -> listOfNames rest

-- Define a function that takes in a list of plants and returns a list of plants that are taller than a certain height
tallerThan : Int -> List Garden -> List Garden
tallerThan height gardens =
  case gardens of
    [] -> []
    (Plant name plantHeight) :: rest ->
      if plantHeight > height then
        (Plant name plantHeight) :: tallerThan height rest
      else
        tallerThan height rest

-- Define a function that takes in a list of plants and returns a list of plants that are not empty
notEmpty : List Garden -> List Garden
notEmpty gardens =
  case gardens of
    [] -> []
    EmptyGarden :: rest -> notEmpty rest
    plant :: rest -> plant :: notEmpty rest

-- Define a function that combines two lists of plants and removes duplicates
combineLists : List Garden -> List Garden -> List Garden
combineLists list1 list2 =
  case list1 of
    [] -> list2
    (Plant name height) :: rest ->
      if List.member (Plant name height) list2 then
        combineLists rest list2
      else
        combineLists rest ((Plant name height) :: list2) \ No newline at end of file
    EmptyGarden :: rest ->
      if List.member EmptyGarden list2 then
        combineLists rest list2
      else
        combineLists rest (EmptyGarden :: list2)