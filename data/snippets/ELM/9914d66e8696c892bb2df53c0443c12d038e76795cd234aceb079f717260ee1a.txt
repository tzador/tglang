-- Define a custom type called MyType
type MyType
  = StringValue String
  | IntValue Int
  | BoolValue Bool

-- Define a function that takes in two lists and returns a list of MyType
zipLists : List String -> List Int -> List MyType
zipLists strList intList =
  List.map (\str int -> StringValue str, IntValue int) (List.zip strList intList)

-- Define a function that converts a MyType value to a string
myTypeToString : MyType -> String
myTypeToString myType =
  case myType of
    StringValue str ->
      "This is a string: " ++ str
    IntValue int ->
      "This is an integer: " ++ String.fromInt int
    BoolValue bool ->
      "This is a boolean: " ++ if bool then "True" else "False"

-- Call the zipLists function with two lists and map the myTypeToString function to each value
-- Output will be a list of strings representing each MyType value
zippedStrings : List String
zippedStrings =
  zipLists ["Hello", "World"] [1, 2, 3]
    |> List.map myTypeToString

-- Output: ["This is a string: Hello", "This is an integer: 1", "This is a string: World", "This is an integer: 2", "This is a string: Hello", "This is an integer: 3"]