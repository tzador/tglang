-- Declares a customized type with multiple constructors
type GamePiece
  = King
  | Queen
  | Bishop
  | Knight
  | Rook
  | Pawn
  | Empty

-- Defines a function that checks if a game piece is a pawn
isPawn : GamePiece -> Bool
isPawn piece =
  case piece of
    Pawn ->
      True
    _ ->
      False

-- Defines a function that checks if a game piece is a main piece (king, queen, bishop, knight, rook)
isMainPiece : GamePiece -> Bool
isMainPiece piece =
  case piece of
    King ->
      True
    Queen ->
      True
    Bishop ->
      True
    Knight ->
      True
    Rook ->
      True
    _ ->
      False

-- Defines a function that checks if a game piece can make a diagonal move, using pattern matching
canDiagonalMove : GamePiece -> Bool
canDiagonalMove piece =
  case piece of
    King ->
      True
    Bishop ->
      True
    _ ->
      False

-- Defines a function that checks if a game piece can make a horizontal or vertical move, using guards
canStraightMove : GamePiece -> Bool
canStraightMove piece
  | piece == King = True
  | piece == Queen = True
  | piece == Rook = True
  | otherwise = False

-- Defines a function that takes in a list of game pieces and returns the number of pawns in the list
countPawns : List GamePiece -> Int
countPawns pieces =
  List.foldl (\piece count -> if isPawn piece then count + 1 else count) 0 pieces

-- Defines a function that takes in two game pieces and returns True if they are of the same type, False otherwise
sameType : GamePiece -> GamePiece -> Bool
sameType piece1 piece2 =
  case (piece1, piece2) of
    (King, King) ->
      True
    (Queen, Queen) ->
      True
    (Bishop, Bishop) ->
      True
    (Knight, Knight) ->
      True
    (Rook, Rook) ->
      True
    (Pawn, Pawn) ->
      True
    _ ->
      False