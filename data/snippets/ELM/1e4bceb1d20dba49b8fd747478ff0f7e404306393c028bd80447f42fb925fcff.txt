module Main exposing (..)

{-|
A module responsible for managing a list of users.
-}

import Html exposing (Html, div, ul, li, text)
import Html.Attributes exposing (style)

{-|
A type alias for a single user, containing their name, age,
and a list of their friends.
-}
type alias User =
    { name : String
    , age : Int
    , friends : List User
    }

{-|
A type representing the action of adding a friend.
-}
type Action
    = AddFriend User

{-|
The initial model of our application, containing a list of users.
-}
initialModel : Model
initialModel =
    { users =
        [ User "John" 25 []
        , User "Mary" 30 []
        ]
    }

{-|
A function that takes in an action and updates the model accordingly.
-}
update : Action -> Model -> Model
update action model =
    case action of
        AddFriend user ->
            { model | users = addFriend user model.users }

{-|
A function that takes in a list of users and adds a new user to it.
Also updates the friend list of the added user to include all the other users.
-}
addFriend : User -> List User -> List User
addFriend user users =
    user :: List.map
        (\u -> { u | friends = user :: u.friends })
        users

{-|
A view function for displaying a user's name, age, and friend list.
-}
userView : User -> Html
userView user =
    div []
        [ div [ style "font-weight: bold" ] [ text user.name ]
        , div [] [ text (toString user.age) ]
        , ul [ style "list-style-type: none" ] (List.map userListView user.friends)
        ]

{-|
A view function for displaying a list item of a user's friend.
-}
userListView : User -> Html
userListView user =
    li [] [ text user.name ]

{-|
A view function for displaying the list of users in our model.
-}
view : Model -> Html
view model =
    div []
        [ userListViewList model.users
        , div [] [ text "Add User" ]
        ]

{-|
A view function for displaying a list of users using a fold function.
-}
userListViewList : List User -> Html
userListViewList users =
    List.foldl
        (\user htmlList ->
            li [] [ userView user ] :: htmlList
        )
        []
        users

{-|
The main function that renders our application.
-}
main : Program Never Model Action
main =
    Html.beginnerProgram
        { model = initialModel
        , view = view
        , update = update
        }