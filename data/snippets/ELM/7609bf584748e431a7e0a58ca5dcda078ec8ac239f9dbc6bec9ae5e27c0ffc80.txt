-- This code snippet generates a list of prime numbers up to a given number

module PrimeNumbers exposing (..)

-- Infinite list of all prime numbers
primes : List Int
primes =
    let
        -- helper function to check if a number is prime
        isPrime : Int -> Bool
        isPrime n =
            let
                root = truncate <| sqrt (toFloat n)
            in
                List.all (\x -> x `List.any` [0,1] || n `modBy` x /= 0) [2 .. root]

        -- helper function to generate an infinite list of consecutive numbers
        numbers : List Int
        numbers =
            List.range 2 (maxBound Int)

        -- helper function to filter prime numbers from a list of numbers
        process : List Int -> List Int
        process [] =
            []

        process (x :: xs) =
            if isPrime x then
                x :: process xs
            else
                process xs
    in
        process numbers

-- Function to generate a list of prime numbers up to a given limit
generate : Int -> List Int
generate limit =
    List.takeWhile (\n -> n < limit) primes