-- Creating a custom type for a binary tree data structure
type BinaryTree a
    = Empty
    | Node a (BinaryTree a) (BinaryTree a)

-- Function to insert a new element into the tree
insertIntoTree : Comparable a => a -> BinaryTree a -> BinaryTree a
insertIntoTree val tree =
    case tree of
        Empty -> Node val Empty Empty
        Node current left right ->
            if val < current then
                Node current (insertIntoTree val left) right
            else if val > current then
                Node current left (insertIntoTree val right)
            else
                tree

-- Function to check if an element is present in the tree
contains : Comparable a => a -> BinaryTree a -> Bool
contains val tree =
    case tree of
        Empty -> False
        Node current left right ->
            if val == current then
                True
            else if val < current then
                contains val left
            else
                contains val right

-- Function to remove an element from the tree
removeFromTree : Comparable a => a -> BinaryTree a -> BinaryTree a
removeFromTree val tree =
    case tree of
        Empty -> Empty
        Node current left right ->
            if val < current then
                Node current (removeFromTree val left) right
            else if val > current then
                Node current left (removeFromTree val right)
            else
                case (left, right) of
                    (Empty, Empty) -> Empty
                    (Empty, _) -> right
                    (_, Empty) -> left
                    (_, _) -> let
                        (minNode, newLeft) = findMin left
                        in Node minNode newLeft right

-- Helper function to find the minimum value in a tree
findMin : BinaryTree a -> (a,BinaryTree a)
findMin tree =
    case tree of
        Empty -> (nothing, Empty)
        Node current left right ->
            case left of
                Empty -> (current, right)
                _ -> findMin left