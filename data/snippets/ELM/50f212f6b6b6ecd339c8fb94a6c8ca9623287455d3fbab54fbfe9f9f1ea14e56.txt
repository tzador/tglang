-- This is a complex ELM code snippet that generates a dynamic list of counters
-- based on a given number
import Html exposing (..)
import Html.Events exposing (..)
import List exposing (..)

-- This function generates a list of counters
-- Takes in a number and returns a list of unique counters
counterList : Int -> List (Html Msg)
counterList num =
    let
        counters =
            List.range 1 num -- creates a list from 1 to the given number
        
        createCounter : Int -> Html Msg
        createCounter count =
            div [ onClick (Decrement count) ] [ text "-" -- button to decrement counter
            , div [] [ text (toString count) ] -- displays the current count
            , onClick (Increment count) [ text "+" ] -- button to increment counter
            ]
    in
        List.map createCounter counters -- maps createCounter function onto the counters list

-- This function updates the count based on the message passed in
-- Takes in the current count and message, and returns the updated count
update : Int -> Msg -> Int
update count message =
    case message of
        Increment num ->
            count + num

        Decrement num ->
            count - num

        _ ->
            count -- no change in count if message is not recognized

-- This function displays the counter list and the total count
-- Takes in the current count and returns the HTML element with the counters and total count
view : Int -> Html Msg
view count =
    div []
        [ h1 [] [ text "Counters" ]
        , div [] (counterList count) -- displays the counter list
        , p [] [ text "Total Count: " , text (toString count) ] -- displays total count
        ]

-- Main function that displays the HTML element generated by the view function
main : Program Never Int Html Msg
main =
    Html.program
        { init = (0, Cmd.none) -- initializes the program with initial count of 0
        , update = update -- updates the count based on message
        , view = view -- displays the HTML element
        , subscriptions = always Sub.none -- no subscriptions needed for this program
        }