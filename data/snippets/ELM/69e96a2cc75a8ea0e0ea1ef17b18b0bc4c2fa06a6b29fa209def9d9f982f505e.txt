-- This code snippet is written in the ELM programming language
-- It generates an interactive random number guessing game

-- Importing necessary packages
import Html
import Html.Events
import Random
import String

-- Defining the main game function
main = Html.program
    { init = init
    , view = view
    , update = update
    }

-- Initializing the game state
type alias Model = 
    { randomNumber : Int
    , guess : Maybe Int
    , guesses : Int
    }

-- Setting initial values
init : ( Model, Cmd Msg )
init =
    ( Model 0 Nothing 0, Random.generate RandomNumber (Random.int 1 10) )

-- Defining possible messages
type Msg
    = NoOp
    | RandomNumber Int
    | GuessEntered String
    | MakeGuess

-- Creating the view
view : Model -> Html.Html Msg
view model =
    Html.div []
        [ text "Guess a number between 1 and 10"
        , input [ placeholder "Enter your guess"
                , onInput GuessEntered
                ] []
        , button [ onClick MakeGuess ] [ text "Make Guess" ]
        , maybeDisplayGuess model.guess
        , displayTotalGuesses model.guesses
        ]

-- Displaying the current guess
maybeDisplayGuess : Maybe Int -> Html.Html Msg
maybeDisplayGuess maybeNumber =
    case maybeNumber of
        Just number ->
            Html.div [][
                text <| "Your guess was: " ++ (toString number)
            ]

        Nothing ->
            Html.div [][
                text "Please enter a valid number"
            ]

-- Displaying the total number of guesses
displayTotalGuesses : Int -> Html.Html Msg
displayTotalGuesses guesses =
    Html.div [][
        text <| "Total number of guesses: " ++ (toString guesses)
    ]

-- Updating the game state based on user input
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        RandomNumber number ->
            ( { model | randomNumber = number }, Cmd.none )

        GuessEntered input ->
            let
                guess =
                    String.toInt input
            in
            ( { model | guess = guess }, Cmd.none )

        MakeGuess ->
            case model.guess of
                Just number ->
                    ( { model | guess = Nothing, guesses = model.guesses + 1 }, Random.generate RandomNumber (Random.int 1 10) )

                Nothing ->
                    ( model, Cmd.none )