-- Function to compute the factorial of a given number
fact : Int -> Int
fact n =
  if n == 0 then
      1
  else
      n * fact (n-1)

-- List comprehension to generate a list of n random numbers
randomList : Int -> List Int
randomList n =
  let
    genRandom : Int -> Int -> List Int
    genRandom current max =
      if current < 0 then
        []
      else
        List.append
          [Random.step (Random.int 1 max) (Random.initialSeed current)]
          (genRandom (current - 1) max)
  in
    genRandom n 100

-- Function to return the nth element of a list 
nthElement : Int -> List a -> Maybe a
nthElement n list =
  case list of
    [] ->
      Nothing
    head :: tail ->
      if n == 0 then
        Just head
      else
        nthElement (n-1) tail

-- Creation of a custom data type for a binary tree
type BinaryTree a
  = Empty
  | Node a (BinaryTree a) (BinaryTree a)

-- Function to insert an element into a binary tree
insert : a -> BinaryTree a -> BinaryTree a
insert element tree =
  case tree of
    Empty ->
      Node element Empty Empty
    Node value left right ->
      if element < value then
        Node value (insert element left) right
      else
        Node value left (insert element right)