-- Declare the "Greeting" and "Name" types
type Greeting 
    = Hello | Goodbye | Bonjour | Hola | Salaam

type alias Name = String

-- Define a new type "GreetingTo" that takes in a Greeting and a Name
type GreetingTo =
    GreetingTo Greeting Name 

-- Create an empty list for storing multiple greetings
emptyList : List GreetingTo
emptyList = []

-- Define a function called "greet" that takes in a list of GreetingTo and returns a String
greet : List GreetingTo -> String
greet emptyList = "No greetings to show." -- Base case for empty list
greet [GreetingTo Hello name] = "Hello, " ++ name ++ "!" -- Match for Hello greeting
greet [GreetingTo Goodbye name] = "Goodbye, " ++ name ++ "!" -- Match for Goodbye greeting
greet [GreetingTo Bonjour name] = "Bonjour, " ++ name ++ "!" -- Match for Bonjour greeting
greet [GreetingTo Hola name] = "Hola, " ++ name ++ "!" -- Match for Hola greeting
greet [GreetingTo Salaam name] = "Salaam, " ++ name ++ "!" -- Match for Salaam greeting
greet (x :: xs) = greet [x] ++ "\n\n" ++ greet xs -- Recursive case for multiple greetings

-- Sample input list
greetingsList : List GreetingTo
greetingsList = [ GreetingTo Hello "John",
                  GreetingTo Goodbye "Mary",
                  GreetingTo Bonjour "Paul",
                  GreetingTo Hola "Rachel",
                  GreetingTo Salaam "Ahmad"
                ]

-- Output the result of the "greet" function with the sample input list
greet greetingsList