-- Create a function that takes in a list of integers and returns the average
average : List Int -> Float
average list =
  let
    size = List.length list
    sum = List.foldr (+) 0 list
  in
    (toFloat sum) / (toFloat size)


-- Create a model to represent a person
type alias Person =
  { name : String
  , age : Int
  , address : String
  }


-- Create a function to check if a given person is over the age of 18
isAdult : Person -> Bool
isAdult person =
  if person.age > 18 then
    True
  else
    False


-- Define a type to represent either a success or an error
type Result a
  = Success a
  | Error String


-- Create a function that takes a list of numbers and returns the result of summing them.
sumNumbers : List Int -> Result Int
sumNumbers list =
  case List.foldr Maybe.andThen (Just 0) (List.map toMaybe list) of
    Just result ->
      Success result
    Nothing ->
      Error "Invalid input"


-- Helper function to convert a number into a Maybe Int
toMaybe : a -> Maybe Int
toMaybe n =
  Just n