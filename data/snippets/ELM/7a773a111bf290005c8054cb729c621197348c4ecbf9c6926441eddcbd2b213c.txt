-- This is a comment in ELM

-- Importing modules
import Html exposing (..)
import Http

-- Defining a custom type
type User
    = RegularUser String
    | AdminUser String

-- A function that returns a greeting based on the user's role
greet : User -> String
greet user =
    case user of
        RegularUser name ->
            "Hello " ++ name ++ "!"

        AdminUser name ->
            "Hello admin " ++ name ++ "!"

-- A GET request using the Http module
getRequest : String -> Cmd Msg
getRequest url =
    Http.send GetRequest (Http.get url textDecoder)

-- The model for our web page
type alias Model =
    { loading : Bool
    , message : String
    }

-- Message type for our app
type Msg
    = GetRequest
    | GetResponse (Result Http.Error String)

-- The initial state
init : Model
init =
    { loading = False
    , message = ""
    }

-- The update function that handles all the actions
update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        GetRequest ->
            ({ model | loading = True }, getRequest "https://example.com/api/users")

        GetResponse result ->
            case result of
                Ok response ->
                    ( { model | loading = False, message = "Success!" }, Cmd.none )

                Err error ->
                    ( { model | loading = False, message = "Error: " ++ toString error }, Cmd.none )

-- The view function that renders the HTML
view : Model -> Html Msg
view model =
    div []
        [ if model.loading
              then text "Loading..."
              else text model.message
        ]

-- Initializing the app
main : Program Never Model Msg
main =
    Html.program
        { init = init
        , update = update
        , view = view
        , subscriptions = always Sub.none
        }