{-| This function takes in an integer list and returns a list with each element squared.
    It uses a recursive helper function for iteration and mapping.
-}
squareList : List Int -> List Int
squareList list = 
    let
        -- The recursive helper function that maps each element squared
        mapSquare x =
            x ^ 2

        -- The recursive function that iterates through the list and applies mapSquare function
        iterateList list =
            case list of
                [] ->
                    [] -- Base case: empty list, return empty list
                x :: xs ->
                    mapSquare x :: iterateList xs -- Recursively call with the tail of the list and combine with head squared
    in
        iterateList list