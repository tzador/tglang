-- This code creates a custom type called `Shape` with three different variants: `Circle`, `Square`, and `Rectangle`.
type Shape
    = Circle Float
    | Square Float
    | Rectangle Float Float


-- This function takes in a list of `Shapes` and calculates the total area of all shapes in the list.
calculateArea : List Shape -> Float
calculateArea shapes =
    let
        -- A helper function to calculate the area of a `Circle` shape.
        calculateCircleArea : Float -> Float
        calculateCircleArea radius =
            pi * (radius * radius)
        
        -- A helper function to calculate the area of a `Square` shape.
        calculateSquareArea : Float -> Float
        calculateSquareArea side =
            side * side
        
        -- A helper function to calculate the area of a `Rectangle` shape.
        calculateRectangleArea : Float -> Float -> Float
        calculateRectangleArea length width =
            length * width
        
        -- This function recursively calculates the area of each shape in the list and adds it to the accumulator.
        calculateTotalArea : List Shape -> Float -> Float
        calculateTotalArea shapes acc =
            case shapes of
                [] ->
                    acc
                
                (shape :: rest) ->
                    case shape of
                        Circle radius ->
                            calculateTotalArea rest (acc + calculateCircleArea radius)
                        
                        Square side ->
                            calculateTotalArea rest (acc + calculateSquareArea side)
                        
                        Rectangle length width ->
                            calculateTotalArea rest (acc + calculateRectangleArea length width)
    in
        -- Call the `calculateTotalArea` function with the list of shapes and initial accumulator value of 0.
        calculateTotalArea shapes 0