import Html exposing (..)

-- This function takes in a list of integers and returns the sum
  sumList : List Int -> Int
  sumList list =
      case list of
          [] -> 0
          x :: xs -> x + sumList xs

-- This function checks if a given number is prime
isPrime : Int -> Bool
isPrime num =
    let
        helper n i =
            if i * i > n then
                True

            else if rem n i == 0 then
                False
            else
                helper n (i + 1)
    in
        helper num 2


-- This function checks if a number is even using modulo
isEven : Int -> Bool
isEven x =
    modBy 2 x == 0

-- This function maps a function to a list
map : (a -> b) -> List a -> List b
map func list =
    case list of
        [] -> []
        first :: rest -> func first :: map func rest

-- This function reduces a list to a single value using a function
reduce : (a -> a -> a) -> List a -> a
reduce func list =
    case list of
        [] -> []
        first :: rest -> func first (reduce func rest)

-- Here we use the functions above to create a list of prime numbers using filtering and mapping
primeList : List Int
primeList =
    List.filter isPrime (List.map (\x -> 2 * x + 1) (List.range 1 100))

-- Finally, we can print out the list of prime numbers
main : Html msg
main =
    div []
        [ h1 [] [ text "List of Prime Numbers" ]
        , ul [] (List.map (\x -> li [] [ text (toString x) ]) primeList)
        ]