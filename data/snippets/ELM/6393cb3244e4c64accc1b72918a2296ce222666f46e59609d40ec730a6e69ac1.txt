type alias Model =
    { username : String
    , email : String
    , age : Int
    , authorized : Bool
    , preferences : List String
    , posts : List Post
    }

type alias Post =
    { title : String
    , author : String
    , content : String
    , published : Bool
    , comments : List Comment
    }

type alias Comment =
    { author : String
    , content : String
    , likes : Int
    }

type Msg
    = SetUsername String
    | SetEmail String
    | SetAge Int
    | SetAuthorized Bool
    | AddPreference String
    | RemovePreference String
    | AddPost Post
    | RemovePost Post
    | AddComment Post Comment
    | RemoveComment Post Comment

init : Model
init =
    { username = "JohnDoe"
    , email = "johndoe@example.com"
    , age = 25
    , authorized = True
    , preferences = [ "Sports", "Movies", "Music" ]
    , posts =
        [ { title = "My First Post"
         , author = "JohnDoe"
         , content = "This is my first post"
         , published = True
         , comments =
             [ { author = "JaneDoe"
              , content = "Great post!"
              , likes = 10
              }
             , { author = "AlexSmith"
              , content = "Keep up the good work!"
              , likes = 5
              }
             ]
         }
        ]
    }

update : Msg -> Model -> Model
update msg model =
    case msg of
        SetUsername newUsername ->
            { model | username = newUsername }

        SetEmail newEmail ->
            { model | email = newEmail }

        SetAge newAge ->
            { model | age = newAge }

        SetAuthorized newAuthorized ->
            { model | authorized = newAuthorized }

        AddPreference newPreference ->
            { model | preferences = newPreference :: model.preferences }

        RemovePreference preferenceToRemove ->
            { model | preferences = List.filter (\preference -> preference /= preferenceToRemove) model.preferences }

        AddPost newPost ->
            { model | posts = newPost :: model.posts }

        RemovePost postToRemove ->
            { model | posts = List.filter (\post -> post /= postToRemove) model.posts }

        AddComment post comment ->
            { model | posts = List.map (\p -> if p == post then { p | comments = comment :: p.comments } else p) model.posts }

        RemoveComment post comment ->
            { model | posts = List.map (\p -> if p == post then { p | comments = List.filter (\c -> c /= comment) p.comments } else p) model.posts }