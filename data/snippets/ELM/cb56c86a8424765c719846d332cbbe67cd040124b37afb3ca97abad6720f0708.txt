-- This function applies a given function to each element key in a dictionary and returns a new dictionary with the results.
mapDict : (key -> a -> b) -> Dict key a -> Dict key b
mapDict func dict =
  let
    keys = Dict.keys dict
    -- Helper function to apply the given function to each element key and return a list of results
    applyFunction key =
      let
        value = Dict.get key dict
      in
        case value of
          Just val ->
            (key, func key val) :: []
          Nothing ->
            []

    -- Recursive function to build the new dictionary by applying the helper function to each key
    buildDict keys dictList =
      case keys of
        key :: rest ->
          let
            dictList' = applyFunction key :: dictList
          in
            buildDict rest dictList'
        _ ->
          dictList
  in
    Dict.fromList (buildDict keys [])