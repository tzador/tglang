-- This code snippet uses types and pattern matching to create a tree data structure

-- Define a 'Tree' type with two possible values, 'Leaf' and 'Branch'
type Tree a
    = Leaf
    | Branch (Tree a) a (Tree a)

-- Define a function to insert elements into the tree, taking in the current tree and the element to be inserted as parameters
-- Use pattern matching to recursively traverse the tree and insert the element at the correct position
insert : Tree a -> a -> Tree a
insert Leaf element =
    Branch Leaf element Leaf

insert (Branch left value right) element =
    if element < value then
        Branch (insert left element) value right
    else
        Branch left value (insert right element)

-- Define a function to convert the tree into a list, by recursively traversing the tree in-order
toList : Tree a -> List a
toList Leaf =
    []

toList (Branch left value right) =
    (toList left) ++ [value] ++ (toList right)

-- Define a function to check if a given element is present in the tree, returning a boolean value
contains : Tree a -> a -> Bool
contains Leaf element =
    False

contains (Branch left value right) element =
    if element == value then
        True
    else if element < value then
        contains left element
    else
        contains right element

-- Example tree with values of type 'Int'
exampleTree : Tree Int
exampleTree =
    insert Leaf 5
        |> insert 3
        |> insert 8
        |> insert 2
        |> insert 4
        |> insert 7
        |> insert 9

-- Output: [2,3,4,5,7,8,9]
toList exampleTree

-- Output: True
contains exampleTree 7