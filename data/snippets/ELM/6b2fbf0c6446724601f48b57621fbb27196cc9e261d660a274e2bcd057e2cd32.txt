--Create a function that takes in a list of numbers and returns their sum

sumList : List Int -> Int
sumList numbers =
    List.foldl (+) 0 numbers
    --Foldl takes in a function and an accumulator, and applies the function to every element in the list with the accumulator as its initial value
    --In this case, we are using the addition operator to add each number in the list to the accumulator
    --The initial value of the accumulator is 0, so the first step is adding 0 to the first element in the list
    --The result of this operation becomes the new accumulator, and the function is applied to the next element in the list
    --This process continues until all elements in the list have been traversed, and the final accumulator value is returned as the sum of the list

--Example usage:
sumList [1, 2, 3, 4]  --Output: 10
sumList [5, 10, 15, 20]  --Output: 50

--Time complexity: O(n) - the function has to traverse the entire list once, so the time complexity is linear in terms of the length of the list.