-- /* Declaring a function 'repeat' that takes in two parameters, a value and a number
   output: a list of values based on the repetition count */

repeat : a -> Int -> List a
repeat value count =
  if count < 1 then
    []
  else
    value :: repeat value (count - 1)
    
-- /* Creating a function that takes in two lists and returns a list of tuples, 
   where each tuple contains values from both lists */

zip : List a -> List b -> List (a,b)
zip list1 list2 =
  case (list1, list2) of
    (x :: xs, y :: ys) ->
      (x,y) :: zip xs ys
    _ ->
      []
      
-- /* Defining a type alias 'Person' with fields for name (string) and age (int) */

type alias Person =
  { name : String
  , age : Int
  }
  
-- /* Creating a list of Person type with a defined function */

people : List Person
people =
  [ Person "John" 25
  , Person "Jane" 30
  , Person "Bob" 40
  ] 
  
-- /* Initializing a record with a case expression to determine if a person is over 
   the age of 30 or not */

john : Person
john =
  case age of
    x when x >= 30 ->
      { name = "John", age = x }
    _ ->
      { name = "John", age = 25 } 
  
-- /* Declaring a union type 'List' with two constructors: Empty and Node 
   and declaring a recursive function to calculate the sum of all values in the list */

type List a
    = Empty
    | Node a (List a)
    
sum : List Int -> Int
sum list =
    case list of
        Empty ->
            0
        Node value next ->
            value + sum next