{-| This function concatenates two lists together and removes any duplicates.
	Example usage: concatUnique [1,2,3] [3,4,5] = [1,2,3,4,5]
-}
concatUnique : List a -> List a -> List a
concatUnique list1 list2 =
    concat list1 (removeDuplicates list2)

{-| This function removes any duplicate elements from a list.
	Example usage: removeDuplicates [1,1,2,3,4,4,5] = [1,2,3,4,5]
-}
removeDuplicates : List a -> List a
removeDuplicates list =
    let
        uniqueElements =
            List.foldl (\x acc -> if List.member x acc then acc else x :: acc) [] list
    in
        List.reverse uniqueElements

{-| This function takes in a list and returns a list of tuples containing each element paired
    with its index in the original list.
	Example usage: indexList [1,2,3,4] = [(1,0), (2,1), (3,2), (4,3)]
-}
indexList : List a -> List (a, Int)
indexList list =
    List.indexedMap (\i x -> (x, i)) list

{-| This function recursively reverses a list.
	Example usage: reverseList [1,2,3,4] = [4,3,2,1]
-}
reverseList : List a -> List a
reverseList list =
    case list of
        [] ->
            []

        x :: xs ->
            reverseList xs ++ [x]

{-| This function takes in a string and returns a list of characters in reverse order.
	Example usage: reverseString "apple" = "elppa"
-}
reverseString : String -> String
reverseString str =
    List.map Char.fromCode (reverseList (String.toList str))
        |> String.fromList