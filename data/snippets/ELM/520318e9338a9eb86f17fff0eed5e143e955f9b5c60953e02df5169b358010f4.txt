module Main exposing (..)

type alias User =
    { name : String
    , age : Int
    , username : String
    }

type Msg
    = AddUser User

type alias Model =
    { users : List User
    , userToAdd : User
    }

init : Model
init =
    { users = []
    , userToAdd = User "" 0 ""
    }

view : Model -> Html Msg
view model =
    div []
        [ input [ placeholder "Name", onInput UpdateName ] []
        , input [ placeholder "Age", onInput UpdateAge ] []
        , input [ placeholder "Username", onInput UpdateUsername ] []
        , button [ onClick AddUser ] [ text "Add User" ]
        , div [] (List.map renderUser model.users)
        ]

update : Msg -> Model -> Model
update msg model =
    case msg of
        AddUser user ->
            { model | users = user :: model.users, userToAdd = init.userToAdd }
        UpdateName newName ->
            { model | userToAdd = { model.userToAdd | name = newName } }
        UpdateAge newAge ->
            { model | userToAdd = { model.userToAdd | age = newAge } }
        UpdateUsername newUsername ->
            { model | userToAdd = { model.userToAdd | username = newUsername } }

renderUser : User -> Html Msg
renderUser user =
    div []
        [ text user.name
        , text $ "is " ++ String.fromInt user.age ++ " years old"
        , text "and their username is"
        , text user.username
        ]

subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

main : Program () Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }