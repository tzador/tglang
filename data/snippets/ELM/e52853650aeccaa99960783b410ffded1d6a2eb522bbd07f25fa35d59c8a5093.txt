type alias Person =
	{ name : String
	, age : Int
	, hobbies : List String
	}

person1 : Person
person1 =
	{ name = "John"
	, age = 25
	, hobbies = ["reading", "gaming", "traveling"]
	}

person2 : Person
person2 =
	{ name = "Anna"
	, age = 30
	, hobbies = ["hiking", "painting", "cooking"]
	}

-- This function takes in two people and returns a list of their combined hobbies
combineHobbies : Person -> Person -> List String
combineHobbies person1 person2 =
	person1.hobbies ++ person2.hobbies

-- This function takes in a list of strings and capitalizes the first letter of each string
capitalizeNames : List String -> List String
capitalizeNames strings =
	List.map (\string -> String.fromList (String.toUpper (String.toList string))) strings

combinedHobbies : List String
combinedHobbies = combineHobbies person1 person2

capitalizedNames : List String
capitalizedNames = capitalizeNames combinedHobbies

-- This function checks if the length of a string is greater than 10
checkLength : String -> Bool
checkLength string =
	String.length string > 10

-- Output:
combinedHobbies -- ["reading", "gaming", "traveling", "hiking", "painting", "cooking"]
capitalizedNames -- ["Reading", "Gaming", "Traveling", "Hiking", "Painting", "Cooking"]
checkLength "ELM Code Snippet" -- True
checkLength "ELM" -- False