-- Define a function named "fibonacci" which takes in a number as an argument
-- and recursively calculates the fibonacci sequence up to that number.
fibonacci : Int -> Int
fibonacci n =
  if n == 0 then
    0
  else if n == 1 then
    1
  else
    fibonacci (n-1) + fibonacci (n-2)

-- Define a function named "factorial" which takes in a number as an argument
-- and recursively calculates the factorial of that number.
factorial : Int -> Int
factorial n =
  if n == 0 then
    1
  else
    n * factorial (n-1)

-- Define a function named "reverse" which takes in a list of integers
-- and recursively reverses the order of the elements in the list.
reverse : List Int -> List Int
reverse list =
  if List.isEmpty list then
    []
  else
    (List.reverse (List.tail list)) ++ [(List.head list)]

-- Define a type called "Tree" which represents a binary tree with integer values.
type Tree
  = Leaf
  | Node Int Tree Tree

-- Define a function named "insert" which takes in a value and a Tree
-- and recursively inserts the value into the correct position in the Tree.
insert : Int -> Tree -> Tree
insert value tree =
  case tree of
    Leaf ->
      Node value Leaf Leaf
    Node nodeValue leftChild rightChild ->
      if value <= nodeValue then
        Node nodeValue (insert value leftChild) rightChild
      else
        Node nodeValue leftChild (insert value rightChild)
        
-- Define a union type named "Result" which represents the result of an operation
-- and can either be a success with a value or a failure with an error message.
type Result
  = Success Int
  | Failure String
  
-- Define a function named "performOperation" which takes in two integers, "a" and "b",
-- and performs a mathematical operation on them based on a given string operator.
-- If the operation is successful, it returns Success with the result,
-- otherwise it returns a Failure with an error message.
performOperation : Int -> Int -> String -> Result
performOperation a b operator =
  if operator == "+" then
    Success (a + b)
  else if operator == "-" then
    Success (a - b)
  else if operator == "*" then
    Success (a * b)
  else if operator == "/" then
    if b == 0 then
      Failure "Cannot divide by zero"
    else
      Success (a // b)
  else
    Failure "Unsupported operator"