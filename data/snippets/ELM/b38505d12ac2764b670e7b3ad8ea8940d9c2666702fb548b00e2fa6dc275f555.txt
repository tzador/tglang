-- Define a custom type called "Shape"
type Shape                   -- "type" keyword starts type declaration
    = Rectangle Int Int      -- Rectangle constructor takes 2 Ints and produces Shape
    | Circle Float           -- Circle constructor takes Float and produces Shape

-- Define a function to calculate the area of a Shape
area : Shape -> Float         -- "area" function takes a Shape and returns Float
area shape =                  -- "area" function definition
    case shape of             -- "case" expression to pattern match on Shape
        Rectangle w h ->      -- Rectangle case 
            toFloat (w * h)   -- Using "toFloat" to convert Int result to Float
        Circle r ->           -- Circle case
            pi * (r * 2)      -- Multiplying by 2 to get diameter, then multiplying by pi

-- Define a list of Shapes
shapes : List Shape           -- "shapes" variable is a List of Shapes
shapes =                      -- "shapes" variable definition
    [ Rectangle 5 10         -- First element is a Rectangle with width 5 and height 10
    , Circle 4.5             -- Second element is a Circle with radius 4.5
    , Rectangle 3 3          -- Third element is another Rectangle with width 3 and height 3
    ]

-- Calculate the total area of all Shapes in the list
totalArea : Float             -- "totalArea" function returns a Float
totalArea =                   -- "totalArea" function definition
    List.foldl                  -- "List.foldl" function takes a binary function and a seed value
        (\shape acc -> acc + area shape)     -- Binary function to add the area of each shape to the accumulator
        0       -- Seed value starts at 0
        shapes  -- List of Shapes to iterate over