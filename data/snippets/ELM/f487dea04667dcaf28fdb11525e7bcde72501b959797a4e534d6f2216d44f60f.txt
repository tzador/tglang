type List a
    = Empty                       -- defines a data type called 'List' that can either be empty or contain values of type 'a'
    | Node a (List a)             -- defines a data constructor called 'Node' that takes in a value of type 'a' and a List of type 'a' and creates a Node
                                -- the first argument is the value contained in the Node, and the second argument is the rest of the values in the List
                                -- the Node is essentially a linked list, with the first argument being the head of the list
                                
cons : a -> List a -> List a      -- defines a function called 'cons' that takes in a value of type 'a' and a List of type 'a' and returns a new List with the value added to the front
cons x xs =
    Node x xs                    -- creates a new Node with the value 'x' as the head and the List 'xs' as the rest of the values
    
map : (a -> b) -> List a -> List b   -- defines a higher-order function called 'map' that takes in a function that maps values of type 'a' to type 'b' and a List of type 'a' and returns a new List of type 'b'
map f list =
    case list of                 -- using a case statement to pattern match on the List
        Empty -> Empty           -- if the List is empty, return an empty List
        Node x rest ->            -- if the List is a Node, apply the function 'f' to the value 'x' and then recursively call 'map' on the rest of the List
            Node (f x) (map f rest)  
                                  -- the result is a new List with the modified values
    
foldl : (a -> b -> a) -> a -> List b -> a   -- defines a higher-order function called 'foldl' that takes in a binary function that combines values of type 'a' and 'b', an initial value of type 'a', and a List of type 'b', and returns a single value of type 'a'
foldl f initial list =
    case list of                 -- pattern matching on the List
        Empty -> initial         -- if the List is empty, return the initial value
        Node x rest -> foldl f (f initial x) rest   
                                  -- if the List is a Node, recursively call 'foldl' with the result of applying the function 'f' to the current accumulated value 'initial' and the value in the Node
                                  -- this accumulates the values in the List and returns a single value

take : Int -> List a -> List a    -- defines a function called 'take' that takes in a number 'n' and a List of type 'a' and returns a List of the first 'n' elements
take n list =
    case (n, list) of            -- pattern matching on the tuple of the number and the List
        (0, _) -> Empty          -- if 'n' is 0, return an empty List
        (_, Empty) -> Empty      -- if the List is empty, return an empty List
        (n, Node x rest) ->      -- if 'n' is not 0 and the List is a Node, recursively call 'take' with 'n-1' and the rest of the List
            Node x (take (n-1) rest)
                                  -- the result is a List with the first 'n' elements