type alias Person = --Define a new type alias called Person
    { name : String --Field name of type String
    , age : Int --Field age of type Integer
    , hobbies : List String --Field hobbies of type list of Strings
    , address : Maybe String --Field address of type Maybe String
    }

addHobby : Person -> String -> Person --A function that takes in a Person and a String, and returns a Person
addHobby person hobby = --Function definition
    { person | hobbies = hobby :: person.hobbies } --Update the person's hobbies field by adding the new hobby to the beginning of the list

updateAddress : Person -> String -> Person --A function that takes in a Person and a String, and returns a Person
updateAddress person address = --Function definition
    { person | address = Just address } --Update the person's address field with the new address wrapped in a Maybe type (since it may be empty)

validateAge : Person -> Maybe Int --A function that takes in a Person and returns a Maybe Integer
validateAge person = --Function definition
    if person.age > 0 then --Check if age is a positive number
        Just person.age --Return the age wrapped in a Maybe type
    else
        Nothing --Otherwise, return Nothing

main : Person --Entry point of the program
main = --Function definition
    let
        john : Person --Create a new Person called John
        john = { name = "John", age = 25, hobbies = ["Sports", "Music", "Reading"], address = Nothing } --Initialize the fields of John
    in
        john --Return John as the output of the program