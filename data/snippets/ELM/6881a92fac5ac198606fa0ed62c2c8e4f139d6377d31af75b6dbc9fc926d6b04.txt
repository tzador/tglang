module Main exposing (..)

import Html exposing (div, text)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import String

-- start up flags

type alias Flags =
    { greeting : String
    , age : Int
    }


-- MODEL

type alias Model =
    { name : String
    , age : Int
    , country : String
    , isLoading : Bool
    , error : Maybe String
    }

initialModel : Model
initialModel =
    { name = "John"
    , age = 25
    , country = "USA"
    , isLoading = False
    , error = Nothing
    }


-- UPDATE

type Msg
    = SetName String
    | SetAge Int
    | SetCountry String
    | StartLoading
    | LoadingFinished (Result Http.Error String)


update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        SetName newName ->
            ({ model | name = newName }, Cmd.none)

        SetAge newAge ->
            ({ model | age = newAge }, Cmd.none)

        SetCountry newCountry ->
            ({ model | country = newCountry }, Cmd.none)

        StartLoading ->
            ({ model | isLoading = True }, Http.get "https://api.example.com/users" LoadingFinished (Decode.at ["user", "country"] Decode.string))

        LoadingFinished (Ok country) ->
            ({ model | isLoading = False, error = Nothing, country = country }, Cmd.none)

        LoadingFinished (Err err) ->
            ({ model | isLoading = False, error = Just (toString err) }, Cmd.none)


-- VIEW

view : Model -> Html Msg
view model =
    div []
        [ div [] [ text ("Hello, " ++ model.name) ]
        , div [] [ text ("You are " ++ (String.fromInt model.age) ++ " years old") ]
        , div [] [ text ("You are from " ++ model.country) ]
        , if model.isLoading then
            div [] [ text "Loading..." ]
        else
            case model.error of
                Nothing ->
                    div [] []

                Just err ->
                    div [] [ text ("Error: " ++ err) ]
        ]


-- ELM TO JAVASCRIPT

port elmToJS : (Model -> msg) -> Sub msg
port elmToJS =
    "elmToJS" (Encode.model identity)