import Html

-- Define a data type for a binary tree
type Tree a
  = Empty
  | Leaf a
  | Node (Tree a) a (Tree a)

--- Function to map a function over a tree
mapTree : (a -> b) -> Tree a -> Tree b
mapTree func tree =
  case tree of
    Empty ->
      Empty
    Leaf v ->
      Leaf (func v)
    Node left val right ->
      Node (mapTree func left) (func val) (mapTree func right)

--- Function to filter a tree based on a predicate
filterTree : (a -> Bool) -> Tree a -> Tree a
filterTree pred tree =
  case tree of
    Empty ->
      Empty
    Leaf v ->
      if pred v then
        Leaf v
      else
        Empty
    Node left val right ->
      if pred val then
        Node (filterTree pred left) val (filterTree pred right)
      else
        filterTree pred left