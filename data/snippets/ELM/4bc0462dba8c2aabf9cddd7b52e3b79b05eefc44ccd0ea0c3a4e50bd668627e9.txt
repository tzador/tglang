import Html exposing (text)

-- Creates a type alias for a list of strings
type alias StringList = List String

-- Defines a function that takes in two string arguments and concatenates them together.
joinStrings : String -> String -> String
joinStrings first second =
    first ++ " " ++ second

-- Calls the joinStrings function with two string arguments and stores the result in a variable.
combinedString : String
combinedString =
    joinStrings "Hello" "world"

-- Creates a record type with fields for name and age.
type alias Person =
    { name : String
    , age : Int
    }

-- Creates a list of Person records.
people : List Person
people =
    [ { name = "John", age = 25 }
    , { name = "Jane", age = 30 }
    , { name = "Bob", age = 40 }
    ]

-- Filters the list of people to include only those younger than 40.
youngPeople : List Person
youngPeople =
    List.filter (\person -> person.age < 40) people

-- Creates a function that takes a list of Person records and returns the total age.
totalAge : List Person -> Int
totalAge people =
    List.foldl (\person sum -> sum + person.age) 0 people

-- Prints out the total age of the young people in a HTML div element.
main : Html.Html msg
main =
    div []
        [ text <| "The total age of young people is " ++ (totalAge youngPeople |> toString) ]