type alias Person = -- Define a custom type called Person
  { name : String -- Field to store person's name of type String
  , age : Int -- Field to store person's age of type Int
  , address : Address -- Field to store person's address of type 'Address' custom type
  , friends : List Person -- Field to store a list of person's friends of type Person
  }

type Address = -- Define a custom type called Address
  { street : String -- Field to store street name of address
  , number : Int -- Field to store house number of address
  , city : String -- Field to store city of address
  }

update : Msg -> Model -> (Model, Cmd Msg) -- Function to update model and send commands
update msg model = -- Define function implementation
  case msg of
    ChangeName newName -> -- Match message type
      ({ model | name = newName }, Cmd.none) -- Update model field and return no command
    ChangeAge newAge -> -- Match message type
      ({ model | age = newAge }, Cmd.none) -- Update model field and return no command
    AddFriend friend -> -- Match message type
      ({ model | friends = friend :: model.friends }, Cmd.none) -- Update model field by adding friend to list and return no command

view : Model -> Html Msg -- Function to generate HTML view from model
view model =
  div []
    [ h1 [] [ text "Welcome to My Friends List!" ]
    , h2 [] [ text "Personal Information" ]
      div [] -- Nested div for personal information
        [ label [] [ text "Name: " ]
        , input [ type_ "text", onInput ChangeName ] [ text model.name ] -- Input field to change name
        , label [] [ text "Age: " ]
        , input [ type_ "number", onInput ChangeAge ] [ text (String.fromInt model.age) ] -- Input field to change age
        ]
    , h2 [] [ text "Friends List" ]
    , ul [] (List.map friendView model.friends) -- Generate list of friends using 'friendView' function
    ]

friendView : Person -> Html Msg -- Function to generate HTML view for a single friend
friendView friend =
  li [] -- List item for friend
    [ div [] [ text ("Name: " ++ friend.name) ] -- Div for friend's name
    , div [] [ text ("Age: " ++ (String.fromInt friend.age)) ] -- Div for friend's age
    , div [] [ text "Address: " ]
      div [] -- Nested div for address
        [ label [] [ text "Street: " ]
        , text friend.address.street -- Text to display street name
        , label [] [ text "Number: " ]
        , text (String.fromInt friend.address.number) -- Text to display house number
        , label [] [ text "City: " ]
        , text friend.address.city -- Text to display city
        ]
    ]