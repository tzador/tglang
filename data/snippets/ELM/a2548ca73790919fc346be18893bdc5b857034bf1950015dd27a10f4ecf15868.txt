-- Model
type alias Model =
    { todos : List String
    , visibility : VisibilityState
    }

type VisibilityState
    = All
    | Active
    | Completed

initialModel : Model
initialModel =
    { todos = []
    , visibility = All
    }

-- Messages
type Msg
    = NoOp
    | AddTodo String
    | DeleteTodo Int
    | ToggleTodo Int
    | ToggleAllTasks
    | SetVisibility VisibilityState
    | ClearCompleted

-- Update Function
update : Msg -> Model -> Model
update msg model =
    case msg of
        NoOp ->
            model

        -- Adding a to-do item to the list
        AddTodo task ->
            { model | todos = model.todos ++ [ task ] }

        -- Toggling a specific task's completion status
        ToggleTodo index ->
            { model | todos = List.indexedMap (\i t -> if i == index then not t else t) model.todos }

        -- Deleting a specific task from the list
        DeleteTodo index ->
            { model
                | todos = List.filter (\_ i -> i /= index) model.todos
            }

        -- Toggling all tasks' completion status
        ToggleAllTasks ->
            { model | todos = List.map (\task -> not task) model.todos }

        -- Updating the current visibility state
        SetVisibility state ->
            { model | visibility = state }

        -- Clearing all completed tasks from the list
        ClearCompleted ->
            { model | todos = List.filter (\task -> not task) model.todos }