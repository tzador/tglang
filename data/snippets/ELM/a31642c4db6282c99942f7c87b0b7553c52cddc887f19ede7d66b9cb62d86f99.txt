type alias Person = --Creates a customizable Person type
    { name : String --Stores the name of the person as a String
    , age : Int --Stores the age of the person as an Int
    , address : Address --Stores the address of the person
    , occupation : Occupation --Stores the occupation of the person
    }

type Address = --Creates a customizable Address type
    Home String --Stores the home address as a String 
  | Work Int String --Stores the work address as an Int (floor number) and a String (office number)

type Occupation = --Creates a customizable Occupation type
    FullTime String --Stores the full time occupation as a String
  | PartTime String Int --Stores the part time occupation as a String and an Int (number of hours)

createPerson : String -> Int -> Address -> Occupation -> Person --Function to create a new Person
createPerson name age address occupation =
    { name = name
    , age = age
    , address = address
    , occupation = occupation
    }

person1 : Person --Declares a new Person using the createPerson function
person1 =
    createPerson "John Doe" 28 (Home "123 Main St.") (FullTime "Software Engineer")

getWorkAddress : Person -> String --Function to get the work address from a Person type
getWorkAddress person =
    case person.address of --Pattern matching to access the address field of the Person type
        Home homeAddress ->
            "Not available" --Returns message if person has no work address
        Work floor office ->
            "Floor " ++ toString floor ++ ", office " ++ office --Returns formatted work address

--Example usage
getWorkAddress person1 --Returns "Not available"