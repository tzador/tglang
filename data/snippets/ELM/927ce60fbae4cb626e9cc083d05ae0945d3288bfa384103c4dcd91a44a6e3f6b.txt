--Define a type called 'Shape' which can have either a 'Rectangle' or 'Circle' shape
type Shape = Rectangle Float Float | Circle Float

--Define a function to calculate the area of a shape
area : Shape -> Float
area shape =
    --Use pattern matching to specify calculations for each shape
    case shape of
        --If shape is a rectangle, calculate area by multiplying the two side lengths
        Rectangle width height ->
            width * height
        
        --If shape is a circle, calculate area using the formula pi * radius^2
        Circle radius ->
            pi * (radius * radius)


--Define a custom type called 'Option' which can have either a 'Some' value or 'None'
type Option value = Some value | None

--Define a function to transform an option value using a given function
map : (value -> newValue) -> Option value -> Option newValue
map function option =
    --Use pattern matching to specify map transformation for each option type
    case option of
        --If option is 'Some' value, apply the given function to the value and return a new 'Some' option
        Some value ->
            Some (function value)
        
        --If option is 'None', return 'None'
        None ->
            None


--Define a function to filter a list of option values and return only the 'Some' values
filterSome : List (Option value) -> List value
filterSome options =
    --Use pattern matching and recursion to filter 'Some' values from the list
    case options of
        --If list is empty, return an empty list
        [] ->
            []
        
        --If first element in list is a 'Some' value, add it to a new list and recursively call function on the rest of the list
        Some value :: rest ->
            value :: filterSome rest
        
        --If first element in list is 'None', skip it and recursively call function on the rest of the list
        None :: rest ->
            filterSome rest


--Define a function to reduce a list of option values to a single value, using a given function
fold : (value -> acc -> acc) -> acc -> List (Option value) -> acc
fold function acc options =
    --Use pattern matching and recursion to reduce the list to a single value
    case options of
        --If list is empty, return the accumulator value
        [] ->
            acc
        
        --If first element in list is a 'Some' value, apply the given function to the value and accumulator, and recursively call function on the rest of the list
        Some value :: rest ->
            fold function (function value acc) rest
        
        --If first element in list is 'None', skip it and recursively call function on the rest of the list
        None :: rest ->
            fold function acc rest