-- Define a RedBlackTree type --
type RedBlackTree a
    = Empty
    | Node Color (RedBlackTree a) a (RedBlackTree a)

type Color
    = Red
    | Black


-- Define a function to insert a value into a RedBlackTree --
insert : a -> RedBlackTree a -> RedBlackTree a
insert value tree =
    let
        insertHelper : a -> RedBlackTree a -> RedBlackTree a
        insertHelper newVal Empty =
            Node Red Empty newVal Empty
        insertHelper newVal (Node color leftTree treeVal rightTree) =
            if value < treeVal then
                balance color (insertHelper newVal leftTree) treeVal rightTree
            else
                balance color leftTree treeVal (insertHelper newVal rightTree)

        balance : Color -> RedBlackTree a -> a -> RedBlackTree a -> RedBlackTree a
        balance color (Node Black (Node Red (Node Red a x b) y c) z d) =
            Node Red (Node Black a x b) y (Node Black c z d)
        balance color (Node Black (Node Red a x (Node Red b y c)) z d) =
            Node Red (Node Black a x b) y (Node Black c z d)
        balance color a x (Node Black (Node Red b y c) z (Node Red d w e)) =
            Node Red (Node Black a x b) y (Node Black c z (Node Black d w e))
        balance color a x (Node Black (Node Red b y c) z d) =
            Node Red (Node Black a x b) y (Node Black c z d)
        balance color a x b = Node color a x b

        insertFix : RedBlackTree a -> RedBlackTree a
        insertFix (Node color leftTree val rightTree) =
            case color of
                Red ->
                    (Node Black leftTree val rightTree)

                Black ->
                    (Node Black leftTree val rightTree)

    in
        insertFix <| insertHelper value tree