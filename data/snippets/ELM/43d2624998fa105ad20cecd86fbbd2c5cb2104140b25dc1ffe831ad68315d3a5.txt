module Main exposing (main)

{- This is a module declaration for the main module. -}

import Html exposing (Html, button, div, text)
{- This statement imports the Html module from the ELM standard library. -}

type alias User = { name : String, age : Int } 
{- This is the definition of a custom type record called User which has two fields, name and age. -}

type MyList a = Empty | Cons a (MyList a)
{- This is the definition of a custom recursive type called MyList which can either be an empty list or a Cons cell that holds a value and the rest of the list. -}

main : Html
main =
    div
        []
        [ button
            [ onClick Toggle ]
            [ text "Toggle button" ]
        , text "This is a text element inside a div tag." 
        ]
{- This is the main function that returns an HTML element, a div tag with a button and a text element inside. -}

type Msg = Toggle
{- This is the definition of a custom type called Msg which has a constructor called Toggle. -}

update : Msg -> User -> User
update msg model =
    case msg of
        Toggle ->
            let
                newAge =
                    model.age + 1
            in
                { model | age = newAge }
{- This is the update function that takes in a message and a User model, and returns a modified User model based on the received message. In this case, when the Toggle message is received, it increments the age of the user by 1. -}

view : User -> Html msg
view model =
    div
        []
        [ text ("User's name: " ++ model.name)
        , text ("User's age: " ++ toString model.age)
        ]
{- This is the view function that takes in a User model and returns an HTML element, a div tag with two text elements displaying the name and age of the user. -}

subscriptions : User -> Sub Msg
subscriptions model =
    Sub.none
{- This is the subscriptions function that takes in a User model and returns a subscription. In this case, it returns no subscription. -}