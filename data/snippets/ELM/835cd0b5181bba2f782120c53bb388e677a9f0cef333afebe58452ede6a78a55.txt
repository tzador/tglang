-- This is a function that takes in two integers and returns their sum
-- Function name: add
add : Int -> Int -> Int
add x y =
    x + y   
    
-- This is a list comprehension that squares all the even numbers in a given list
-- List comprehension name: squareEvens
squareEvens : List Int -> List Int
squareEvens list =
    [ x * x | x <- list, x % 2 == 0 ]
    
-- This is a function that checks if the given number is prime or not
-- Function name: isPrime
isPrime : Int -> Bool
isPrime num =
    if num < 2 then
        False
    else if num == 2 then
        True
    else
        let
            root = floor (sqrt (toFloat num))
        in
        getDivisors num [2..root]
            |> List.any ((==) 0)
            |> not
    
-- Helper function to get a list of all divisors of a number
-- Function name: getDivisors
getDivisors : Int -> List Int -> List Int
getDivisors num list =
    List.filter ((==) 0 << modBy num) list