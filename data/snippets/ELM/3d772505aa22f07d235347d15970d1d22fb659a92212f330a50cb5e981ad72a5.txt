-- Creates a type alias for 'User' with a record containing 'name',
-- 'age', and 'email' fields
type alias User =
    { name : String
    , age : Int
    , email : String
    }

-- A function that takes in a 'User' and returns a formatted string
userToString : User -> String
userToString user =
    "Name: " ++ user.name ++ " | Age: " ++ toString user.age ++ " | Email: " ++ user.email

-- A list of users
userList : List User
userList =
    [ User "John" 25 "john@example.com"
    , User "Jane" 32 "jane@example.com"
    , User "Bob" 41 "bob@example.com"
    ]

-- A function that filters users based on their age
filterUsers : Int -> List User -> List User
filterUsers age users =
    List.filter (\user -> user.age > age) users

-- A filtered list of users with age greater than 30
filteredUsers : List User
filteredUsers =
    filterUsers 30 userList

-- Main function that displays the filtered user list
main : Program () Model Msg
main =
    Html.program
        { init = filteredUsers
        , update = \_ model -> (model, Cmd.none)
        , subscriptions = \_ -> Sub.none
        , view = \_ -> Html.text (List.map userToString filteredUsers)
        }