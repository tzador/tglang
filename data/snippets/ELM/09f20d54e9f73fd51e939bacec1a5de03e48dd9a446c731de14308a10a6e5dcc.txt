module Main exposing (main)

{-|
This module acts as the entry point for our ELM program.
It defines the main function which is used to render the application.
-}

import Html exposing (..)
import Html.Attributes exposing (style, onClick)

{-|
This function generates a random color in RGB format.
-}
genRandomColor : (Int, Int, Int)
genRandomColor =
    let
        red =
            Random.int 0 255

        green =
            Random.int 0 255

        blue =
            Random.int 0 255
    in
        (red, green, blue)

{-|
This type represents the state of our application, including the current color and a list of previously generated colors.
-}
type alias State =
    { currentColor : (Int, Int, Int)
    , pastColors : List (Int, Int, Int)
    }

{-|
This function handles messages sent from the view, updating the state accordingly.
-}
update : Msg -> State -> (State, Cmd Msg)
update msg state =
    case msg of
        GenerateColor ->
            let
                newColor =
                    genRandomColor

                newState =
                    { state | currentColor = newColor, pastColors = newColor :: state.pastColors }
            in
                (newState, Cmd.none)

        ClearColors ->
            ({ state | pastColors = [] }, Cmd.none)

{-|
This type defines the possible messages that can be sent from the view.
-}
type Msg
    = GenerateColor
    | ClearColors

{-|
This function renders the current color and a list of past colors.
-}
view : State -> Html Msg
view state =
    div []
        [ div [ style [ ( "background-color", getRGBString state.currentColor ), ( "height", "200px" ), ( "width", "200px" ) ] ] []
        , button [ onClick GenerateColor ] [ text "Generate new color" ]
        , button [ onClick ClearColors ] [ text "Clear past colors" ]
        , ul [] <| List.map (viewPastColor) state.pastColors
        ]

{-|
This function returns the RGB string representation of a given color.
-}
getRGBString : (Int, Int, Int) -> String
getRGBString (r, g, b) =
    "rgb(" ++ toString r ++ ", " ++ toString g ++ ", " ++ toString b ++ ")"

{-|
This function takes in a color and renders a list item with that color as the background.
-}
viewPastColor : (Int, Int, Int) -> Html Msg
viewPastColor color =
    li [ style [ ( "background-color", getRGBString color ) ] ] []

{-|
This function sets up our initial state and starts our application.
-}
main : Program Never State Msg
main =
    Html.program
        { init = ({ currentColor = (0, 0, 0), pastColors = [] }, Cmd.none)
        , update = update
        , subscriptions = always Sub.none
        , view = view
        }