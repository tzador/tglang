-- An example program in ELM
module Main exposing (main)

-- The model or state of our program
type alias Model =
  { algo : Int
  , state : String
  , num : Float
  }

-- An Action represents a possible change to the model/state
type Action
  = SetString String
  | SetNum Float

-- The init function initializes our model with some default values
init : Model
init =
  { algo = 42
  , state = "start"
  , num = 0.0
  }

-- The update function takes in an action and updates the model/state accordingly
update : Action -> Model -> Model
update action model =
  case action of
    SetString newString ->
      { model | state = newString }

    SetNum newNum ->
      { model | num = newNum }

-- The view function is responsible for rendering the user interface
view : Model -> Html Msg
view model =
  div []
    [ h1 [] [ text "My ELM Program" ]
    , p [] [ text ("Current State: " ++ model.state) ]
    , p [] [ text ("Random Number: " ++ (toString model.num)) ]
    ]

-- The main function runs the program by starting with the init model and mapping our
-- update function with our messages.
main : Program () Model Action
main =
  Html.program
    { init = init
    , view = view
    , update = update
    , subscriptions = \_ -> Sub.none
    }