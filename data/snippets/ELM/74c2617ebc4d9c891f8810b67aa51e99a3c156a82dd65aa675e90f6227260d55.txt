module Math exposing (..)

{-| 
Function to calculate the factorial of a number.
-}
fact : Int -> Int
fact n = if n < 0 then
    0
  else if n == 0 || n == 1 then
    1
  else
    n * fact (n - 1)


{-| 
Function to calculate the n-th power of a number.
-}
power : Int -> Int -> Int
power m n = if n == 0 then
    1
  else if n == 1 then
    m
  else
    m * power m (n - 1)


{-|
Function to calculate the greatest common divisor of two numbers.
-}
gcd : Int -> Int -> Int
gcd a b = if b == 0 then
    a
  else
    gcd b (a % b)


{-|
Function to calculate the least common multiple of two numbers.
-}
lcm : Int -> Int -> Int
lcm a b = a * b // gcd a b


{-|
Function to calculate the average of a list of numbers.
-}
average : List Int -> Float
average xs = 
  let 
    len = List.length xs |> toFloat
  in
    List.sum xs / len