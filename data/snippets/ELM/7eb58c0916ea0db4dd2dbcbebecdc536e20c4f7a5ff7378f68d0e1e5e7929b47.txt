type alias Person = -- Defines a new type alias called Person. The following statements will describe this type.
  { name : String -- Defines the 'name' field of type String.
  , age : Int -- Defines the 'age' field of type Int.
  , address : Address -- Defines the 'address' field of type Address, which is another data type.
  , hobbies : List String -- Defines the 'hobbies' field of type List String, representing a list of hobbies.
  }

type alias Address =
  { street : String -- Defines the 'street' field of type String.
  , city : String -- Defines the 'city' field of type String.
  , country : String -- Defines the 'country' field of type String.
  }

person1 : Person -- Assigns the type Person to the variable 'person1'.
person1 =
  { name = "John Doe" -- Assigns the value "John Doe" to the name field.
  , age = 25 -- Assigns the value 25 to the age field.
  , address = { street = "123 Main St", city = "New York", country = "USA" } -- Assigns a new Address value to the address field.
  , hobbies = ["Reading", "Hiking", "Coding"] -- Assigns a list of hobbies to the hobbies field.
  }

person2 : Person -- Assigns the type Person to the variable 'person2'.
person2 =
  { name = "Jane Smith"
  , age = 30
  , address = { street = "456 Park Ave", city = "Los Angeles", country = "USA" }
  , hobbies = ["Running", "Traveling", "Photography"]
  }

getPersonInfo : Person -> String -- Defines a function called getPersonInfo that takes in a Person type and returns a String.
getPersonInfo person =
  "Name: " ++ person.name ++ ", Age: " ++ toString person.age ++ "\nStreet: " ++ person.address.street ++ ", City: " ++ person.address.city ++ ", Country: " ++ person.address.country -- Concatenates and formats the person's information and returns it.

getPersonInfo person1 -- Calls the getPersonInfo function with person1 as the argument, which will return a string with John Doe's information.