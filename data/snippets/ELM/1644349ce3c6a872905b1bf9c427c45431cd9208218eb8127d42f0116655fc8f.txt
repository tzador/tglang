-- Define a type alias for a list of strings
type alias StringList = List String

-- Create a list of names
names : StringList
names =
    [ "Sarah", "John", "Emily" ]

-- Define a record type for a person
type alias Person =
    { name : String
    , age : Int
    , occupation : String
    }

-- Create a list of Person records
people : List Person
people =
    [ { name = "Sarah", age = 28, occupation = "Developer" }
    , { name = "John", age = 35, occupation = "Designer" }
    , { name = "Emily", age = 23, occupation = "Writer" }
    ]

-- Define a function that takes in a list of names and returns a list of Person records
nameToPerson : StringList -> List Person
nameToPerson names =
    List.map (\name -> { name = name, age = 0, occupation = "Unknown" }) names

-- Call the function with the names list to generate a list of Person records
modifiedPeople : List Person
modifiedPeople =
    nameToPerson names

-- Define a function that takes in a Person record and returns an HTML element displaying their information
personToHtml : Person -> VirtualDom.Node msg
personToHtml person =
    let
        nameElement =
            VirtualDom.text person.name

        ageElement =
            VirtualDom.text (String.fromInt person.age)

        occupationElement =
            VirtualDom.text person.occupation
    in
    VirtualDom.div []
        [ nameElement
        , ageElement
        , occupationElement
        ]

-- Call the function with a Person record to generate an HTML element
personHtml : VirtualDom.Node msg
personHtml =
    personToHtml { name = "Sarah", age = 28, occupation = "Developer" }