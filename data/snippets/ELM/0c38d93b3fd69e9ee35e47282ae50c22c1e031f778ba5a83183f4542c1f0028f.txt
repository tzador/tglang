-- Define a binary tree type

type Tree a
    = Empty -- an empty tree
    | Node a (Tree a) (Tree a) -- a tree with a value and left and right subtrees

-- Helper function to insert a value into a tree
insert : Comparable a => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty -- insert at the root if the tree is empty
insert x (Node val left right) =
    if x < val -- insert into the left subtree if the value is less than current node
    then Node val (insert x left) right
    else Node val left (insert x right) -- otherwise insert into the right subtree

-- Convert a tree to a list in-order (left, root, right)
inOrderTraversal : Tree a -> List a
inOrderTraversal Empty = []
inOrderTraversal (Node val left right) =
    (inOrderTraversal left) ++ val :: (inOrderTraversal right)

-- Example usage:

tree : Tree Int
tree =
    insert 5 (insert 3 (insert 8 (insert 1 (insert 4 (insert 6 Empty)))))

inOrderTraversal tree -- outputs [1, 3, 4, 5, 6, 8]