-- Creating a Tree data type
type Tree a
    = Leaf a
    | Branch (Tree a) a (Tree a)

-- Function to count the number of leaves in a Tree
leafCount : Tree a -> Int
leafCount tree =
    case tree of
        Leaf _ ->
            1
        Branch left _ right ->
            leafCount left + leafCount right

-- Function to map a function to each value in a Tree
treeMap : (a -> b) -> Tree a -> Tree b
treeMap func tree =
    case tree of
        Leaf value ->
            Leaf (func value)
        Branch left value right ->
            Branch (treeMap func left) (func value) (treeMap func right)

-- Creating a Tree instance of type 'Int'
tree : Tree Int
tree =
    Branch (Branch (Leaf 1) 2 (Leaf 3)) 4 (Leaf 5)

-- Mapping a function to double each value in the Tree
doubledTree : Tree Int
doubledTree =
    treeMap (*2) tree

-- Printing the number of leaves in the original Tree
leafCount tree -- Output: 3

-- Printing the number of leaves in the doubled Tree
leafCount doubledTree -- Output: 3

-- Printing the original Tree
tree -- Output: Branch (Branch (Leaf 1) 2 (Leaf 3)) 4 (Leaf 5)

-- Printing the doubled Tree
doubledTree -- Output: Branch (Branch (Leaf 2) 4 (Leaf 6)) 8 (Leaf 10)