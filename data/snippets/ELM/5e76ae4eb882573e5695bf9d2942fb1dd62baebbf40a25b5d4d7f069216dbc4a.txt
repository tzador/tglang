-- This is a complex code snippet in ELM

-- This function takes in a list of numbers and returns a new list
-- with each number multiplied by its index
multiplyWithIndices : List Int -> List Int
multiplyWithIndices list =
    List.indexedMap (\index value -> index * value) list

-- This is a recursive function that checks if a given string is a palindrome
isPalindrome : String -> Bool
isPalindrome str =
    let
        reversed =
            String.reverse str
    in
        str == reversed

-- This is a custom type defining a binary tree with labeled nodes
type Tree a
    = Empty
    | Node a (Tree a) (Tree a)

-- This function takes in a binary tree and returns the sum of all its nodes
sumTree : Tree Int -> Int
sumTree tree =
    case tree of
        Empty ->
            0

        Node value left right ->
            value + sumTree left + sumTree right