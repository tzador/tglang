type alias User = -- A type alias named 'User' with no parameters.
    { name : String -- A field 'name' of type 'String' within the 'User' type.
    , age : Int -- Another field 'age' of type 'Int'.
    , email : String -- A third field 'email' of type 'String'.
    , posts : List Post -- A fourth field 'posts' of type 'List' of 'Post' type.
    }

type UserResult -- A type alias for 'Result' with two type parameters.
    = Error String -- First type parameter is 'String' representing the error message.
    | Success User -- Second type parameter is 'User' representing the successful result.

decodeUser : Decoder User -- A function named 'decodeUser' with a parameter of type 'Decoder' that returns a 'User'.
decodeUser =
    Decode.succeed User -- Use the 'Decode.succeed' combinator to create a decoder that always succeeds and returns 'User' type.
        |> Decode.andMap (Decode.field "name" Decode.string) -- Use 'andMap' to map the result to the 'name' field using 'Decode.field' and 'Decode.string' combinators.
        |> Decode.andMap (Decode.field "age" Decode.int) -- Use 'andMap' to map the result to the 'age' field using 'Decode.field' and 'Decode.int' combinators.
        |> Decode.andMap (Decode.field "email" Decode.string) -- Use 'andMap' to map the result to the 'email' field using 'Decode.field' and 'Decode.string' combinators.
        |> Decode.andMap (Decode.field "posts" (Decode.list decodePost)) -- Use 'andMap' to map the result to the 'posts' field using 'Decode.field' and 'Decode.list' combinators with a custom decoder 'decodePost'.

decodeUserResult : Decoder UserResult -- A function named 'decodeUserResult' with a parameter of type 'Decoder' that returns a 'UserResult'.
decodeUserResult =
    Decode.map (Result.map Error User) decodeUser -- Use 'Decode.map' to map the result of 'decodeUser' to 'Error' if unsuccessful, or 'User' if successful.