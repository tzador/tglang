-- This code snippet defines a function `findWithFallback` that takes in a list, a fallback value, and a function as parameters.
-- It checks if the list is empty, if it is, then it returns the fallback value.
-- If the list is not empty, it uses the function to check if the first element satisfies a condition.
-- If the first element satisfies a condition, it returns that element, 
-- otherwise it recursively calls the function on the tail of the list.

findWithFallback : List a -> a -> (a -> Bool) -> a
findWithFallback list fallbackValue checkCondition =
    case list of
        [] ->
            fallbackValue

        x :: xs ->
            if checkCondition x then
                x
            else
                findWithFallback xs fallbackValue checkCondition