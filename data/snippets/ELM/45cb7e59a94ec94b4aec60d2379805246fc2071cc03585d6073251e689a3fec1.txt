-- Represents a custom data type called 'Tree' with two variations, 'Empty' and 'Node'
type Tree a
    = Empty
    | Node a (Tree a) (Tree a)

-- A function that takes in a value of 'a' type and a 'Tree' structure and returns a new 'Tree' with the value added to the structure
insert : a -> Tree a -> Tree a
insert value tree =
    case tree of
        Empty ->
            Node value Empty Empty

        Node val left right ->
            if value < val then
                Node val (insert value left) right

            else if value > val then
                Node val left (insert value right)

            else
                tree

-- A function that takes in a 'List' of 'a' type values and returns a sorted 'Tree'
listToTree : List a -> Tree a
listToTree list =
    case list of
        [] ->
            Empty

        [x] ->
            Node x Empty Empty

        x :: xs ->
            insert x (listToTree xs)

-- An example usage of the 'listToTree' function
sampleList : List Int
sampleList =
    [4, 2, 8, 1, 5, 7]

-- Prints the result of converting the 'sampleList' into a 'Tree'
main : Html msg
main =
    Html.text (toString (listToTree sampleList))