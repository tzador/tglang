{-
This code snippet is a function that uses a recursive helper function to find the smallest positive integer that is not present in a given list.
It takes in a list of integers and returns the smallest positive integer that is not in the list.
-}
findSmallestNumber : List Int -> Int
findSmallestNumber list =
  -- Recursive helper function
  let
    isNumberPresent : Int -> List Int -> Bool
    isNumberPresent num numbers =
      case numbers of
        [] ->
          False

        x :: xs ->
          if x == num then
            True

          else
            isNumberPresent num xs

    {- 
    The recursive helper function checks if a number is present in the list.
    If the number is found in the list, it returns true. If the number is not found, it checks the next element in the list until the entire list is exhausted.
    If no elements are remaining, it will return false.
    -}

    {- 
    We start at 1 and check if it is present in the list.
    If it is present, we increment the number and check again until the number is not present in the list.
    Once we find the smallest positive integer that is not present in the list, we return that number.
    -}
    helper : Int -> List Int -> Int
    helper num numbers =
      if isNumberPresent num numbers then
        helper (num + 1) numbers

      else
        num
  in
    helper 1 list