type alias Person = 
    { name : String
    , age : Int
    , occupation : String
    }

type Task msg
    = Success msg
    | Failure msg

{-| A function that takes in a list of people and returns a list of their occupations -}
getOccupations : List Person -> List String
getOccupations people =
    List.map (\person -> person.occupation) people

{-| A function that tries to retrieve a person's age, but returns a Failure task if the person does not have an age -}
getAge : Person -> Task String Int
getAge person =
    case person.age of
        Just age ->
            Success age

        Nothing ->
            Failure "This person does not have an age."

{-| A function that checks if a person is old enough to vote -}
isOldEnoughToVote : Person -> Bool
isOldEnoughToVote person =
    case getAge person of
        Success age ->
            age >= 18

        Failure _ ->
            False

{-| An example list of people -}
people : List Person
people =
    [ { name = "John", age = Just 25, occupation = "Software Engineer" }
    , { name = "Jane", age = Just 30, occupation = "Graphic Designer" }
    , { name = "Bob", age = Nothing, occupation = "Chef" }
    , { name = "Sarah", age = Just 22, occupation = "Teacher" }
    ]

{-| An example of using the functions to get a list of occupations and check if each person is old enough to vote -}
main : List (String, Bool)
main =
    List.map (\person -> (person.occupation, isOldEnoughToVote person)) people