--This function takes in a list of integers and returns their square roots
calculateRoots : List Int -> List Float
calculateRoots numbers =
    List.map (\x -> sqrt <| toFloat x) numbers

--This is a custom type to represent a shape with coordinates and size
type alias Shape =
    { x: Float
    , y: Float
    , size: Float
    }

--This function creates a square with the given coordinates and size
createSquare : Float -> Float -> Float -> Shape
createSquare x y size =
    { x = x
    , y = y
    , size = size
    }

--This function checks if the shape is overlapping with another shape
isOverlapping : Shape -> Shape -> Bool
isOverlapping firstShape secondShape =
    let
        range = List.range 0 (round firstShape.size)
    in
        List.any (\i ->
            let
                differenceX = abs (firstShape.x - (secondShape.x + i))
                differenceY = abs (firstShape.y - secondShape.y)
            in
                differenceX < firstShape.size && differenceY < firstShape.size
        ) range