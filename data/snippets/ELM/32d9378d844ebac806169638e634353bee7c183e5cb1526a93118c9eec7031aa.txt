-- This snippet creates a model for a basic counter app

-- Define the model type
type alias Model =
    { count : Int
    , lastUpdate : Maybe String
    }

-- Create an initial model with a count of zero and no last update
initialModel : Model
initialModel =
    Model 0 Nothing

-- Define the possible actions that can update the model
type Action
    = Increment
    | Decrement
    | SetCount Int
    | UpdateLastUpdate String

-- Define a function to handle actions and update the model
update : Action -> Model -> Model
update action model =
    case action of
        Increment ->
            { model | count = model.count + 1, lastUpdate = Just "Incremented" }

        Decrement ->
            { model | count = model.count - 1, lastUpdate = Just "Decremented" }

        SetCount newCount ->
            { model | count = newCount, lastUpdate = Just "Count set to " ++ (toString newCount) }

        UpdateLastUpdate newMessage ->
            { model | lastUpdate = Just newMessage }

-- Define a view using the model
view : Model -> Html Msg
view model =
    Html.div []
        [ Html.h1 [] [ Html.text "Counter App"]
        , Html.h2 [] [ Html.text "Current Count:"]
        , Html.p [] [ Html.text (toString model.count)]
        , Html.h2 [] [ Html.text "Last Update:"]
        , Html.p [] [ Html.text (Maybe.withDefault "N/A" model.lastUpdate) ]
        ]

-- Define the initial state of the app
main : Html Msg
main =
    let
        model =
            initialModel
    in
        view model