-- Define a custom type for a binary tree
type Tree a
  = Leaf
  | Node (Tree a) a (Tree a)

-- Define a function to insert a value into a binary tree
insert : Ord a => a -> Tree a -> Tree a
insert value tree =
  case tree of
    Leaf ->
      Node Leaf value Leaf
    Node left nodeValue right ->
      if value < nodeValue then
        Node (insert value left) nodeValue right
      else if value > nodeValue then
        Node left nodeValue (insert value right)
      else
        tree

-- Define a function to delete a value from a binary tree
delete : Ord a => a -> Tree a -> Tree a
delete value tree =
  case tree of
    Leaf ->
      Leaf
    Node Leaf nodeValue Leaf ->
      if value == nodeValue then
        Leaf
      else
        tree
    Node left nodeValue right ->
      if value < nodeValue then
        Node (delete value left) nodeValue right
      else if value > nodeValue then
        Node left nodeValue (delete value right)
      else
        if size left > size right then
          let (max, newLeft) = findMax left
          in Node newLeft max right
        else
          let (min, newRight) = findMin right
          in Node left min newRight

-- Define a function to find the maximum value in a binary tree
findMax : Tree a -> (a, Tree a)
findMax tree =
  case tree of
    Leaf ->
      (0, tree)
    Node left maxValue right ->
      case right of
        Leaf ->
          (maxValue, deleteMax tree)
        otherwise ->
          findMax right

-- Define a function to delete the maximum value from a binary tree
deleteMax : Tree a -> Tree a
deleteMax tree =
  case tree of
    Leaf ->
      Leaf
    Node left maxValue right ->
      case right of
        Leaf ->
          left
        otherwise ->
          Node left maxValue (deleteMax right)

-- Define a function to find the minimum value in a binary tree
findMin : Tree a -> (a, Tree a)
findMin tree =
  case tree of
    Leaf ->
      (0, tree)
    Node left minValue right ->
      case left of
        Leaf ->
          (minValue, deleteMin tree)
        otherwise ->
          findMin left

-- Define a function to delete the minimum value from a binary tree
deleteMin : Tree a -> Tree a
deleteMin tree =
  case tree of
    Leaf ->
      Leaf
    Node left minValue right ->
      case left of
        Leaf ->
          right
        otherwise ->
          Node (deleteMin left) minValue right

-- Define a function to check if a binary tree is empty
isEmpty : Tree a -> Bool
isEmpty tree =
  case tree of
    Leaf ->
      True
    otherwise ->
      False