-- This is a module named `Main`
module Main exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)

{-| This is a simple function that takes two integers
and returns their sum
-}
sum : Int -> Int -> Int
sum x y =
    x + y

-- The main function where all the logic happens
main : Program () Model
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions }

{-| This is the initial state of our model,
a simple record with two integer values
-}
type alias Model =
    { x : Int
    , y : Int
    }

{-| This is the initial state of our model,
both values are set to 0
-}
init : () -> (Model, Cmd Msg)
init _ =
    (Model 0 0, Cmd.none)

{-| This is a type to represent different actions/changes
that can happen in our application
-}
type Msg
    = UpdateX Int
    | UpdateY Int

-- This function handles all the update actions
update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
    case msg of
        UpdateX newX ->
            ({ model | x = newX }, Cmd.none)

        UpdateY newY ->
            ({ model | y = newY }, Cmd.none)

{-| This is the function to render our view in HTML format
-}
view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "Welcome to ELM" ]
        , div [ onInput UpdateX, value model.x ] []
        , div [ onInput UpdateY, value model.y ] []
        , div [] [ text (String.fromInt (sum model.x model.y)) ]
        ]

subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none