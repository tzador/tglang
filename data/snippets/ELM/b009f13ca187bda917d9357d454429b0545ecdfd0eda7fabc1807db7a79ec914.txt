-- This snippet generates an infinite Fibonacci sequence using an Elm "lazy list"

-- Define the "infinitely many Fibonacci numbers" as a function
fibonacci : List Int
fibonacci =
    -- Define the first two elements of the list
    0 :: 1 ::
        -- Define the rest of the list as a lazy list
        lazyList
            -- Map over the list to generate new elements
            |> List.map (\n -> List.sum (List.take 2 (List.drop (n - 1) fibonacci)))

-- Lazy list definition
lazyList : LazyList a -> List a
lazyList thunk =
    go thunk []

-- Definition of the `go` helper function
go : LazyList a -> List a -> List a
go thunk values =
    case thunk of
        -- If the thunk is a "lazy node", add the value to the list and recurse
        Lazy.LazyNode value -> go (Lazy.force thunk) (value :: values)

        -- If the thunk is a "lazy leaf", return the values
        Lazy.LazyLeaf -> List.reverse values