-- Creating a custom type for a binary tree data structure
type Tree a
    = Leaf
    | Node (Tree a) a (Tree a)

-- Function to insert a new value into a tree
insert : a -> Tree a -> Tree a
insert value tree =
    case tree of
        Leaf ->
            -- If tree is empty, create a new node
            Node Leaf value Leaf

        Node leftTree currentValue rightTree ->
            if value < currentValue then
                -- If value is less than current node, insert into left subtree
                Node (insert value leftTree) currentValue rightTree
            else
                -- If value is greater than current node, insert into right subtree
                Node leftTree currentValue (insert value rightTree)

-- Function to check if a tree contains a certain value
contains : a -> Tree a -> Bool
contains value tree =
    case tree of
        Leaf ->
            -- If tree is empty, return false
            False

        Node leftTree currentValue rightTree ->
            if value == currentValue then
                -- If current node is the same as the value, return true
                True
            else if value < currentValue then
                -- If value is less than current node, check left subtree
                contains value leftTree
            else
                -- If value is greater than current node, check right subtree
                contains value rightTree