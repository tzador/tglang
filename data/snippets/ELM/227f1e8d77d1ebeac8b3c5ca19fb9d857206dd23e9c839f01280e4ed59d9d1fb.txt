-- Declare a type alias with a generic type
type alias Pair a b =
    { first : a
    , second : b
    }

-- Declare a custom type with two possible values
type Fruit
    = Apple
    | Banana

-- Declare a custom type with three fields
type Person
    = Adult
        { name : String
        , age : Int
        , occupation : String
        }
    | Child
        { name : String
        , age : Int
        , school : String
        }

-- Declare a custom function that takes in two parameters
add : Int -> Int -> Int
add x y =
    x + y

-- Declare a custom function that takes in a List of Int as a parameter and returns a List of Int
doubleEvens : List Int -> List Int
doubleEvens list =
    List.map (\x -> x * 2) (List.filter (\x -> x % 2 == 0) list)