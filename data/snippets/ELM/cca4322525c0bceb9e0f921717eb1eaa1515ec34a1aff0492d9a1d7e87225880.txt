-- This is a complex function called "tripleMap" that takes in three functions as parameters 
-- and applies each function to every element in a given list, returning the new list
tripleMap : (a -> b) -> (b -> c) -> (c -> d) -> List a -> List d
tripleMap func1 func2 func3 list =
    let
        -- This is a helper function that takes in a function and a list and applies the function to each element in the list
        helper : (a -> b) -> List a -> List b
        helper func list =
            case list of
                [] ->
                    []

                x :: xs ->
                    func x :: helper func xs
    in
    -- Here we use composition operator (>>) to apply the three given functions in sequence to each element in the given list
    list |> helper func1 |> helper func2 |> helper func3