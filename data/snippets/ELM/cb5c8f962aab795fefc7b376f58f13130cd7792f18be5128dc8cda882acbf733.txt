-- Define a function that takes in a list of integers and returns a new list
-- with only the even numbers from the original list, each multiplied by 2.

evenDoubledList : List Int -> List Int
evenDoubledList list =
  List.filter (\x -> x % 2 == 0) list -- filter out odd numbers
  |> List.map (\x -> x * 2) -- map each even number to its doubled value

-- Define a function that takes in two strings and returns the length of the
-- longest common substring between the two.

longestCommonSubstringLength : String -> String -> Int
longestCommonSubstringLength str1 str2 =
  let
    substrings1 = substrings str1 -- list of all substrings in str1
    substrings2 = substrings str2 -- list of all substrings in str2
    commonSubstrings = List.filter (\str -> List.member str substrings2) substrings1 -- filter common substrings
  in
    List.sortBy (\str -> String.length str) commonSubstrings -- sort substrings by length
    |> List.last -- get longest substring
    |> String.length -- get length of longest substring

-- Helper function that generates a list of all substrings in a given string.
substrings : String -> List String
substrings str =
  let
    initialSubstrings = List.map (\i -> String.dropRight i str) [1..String.length str] -- generate initial substrings
    substringTail current =
      case String.length current of
        0 -> []
        _ -> List.append [current] (substringTail (String.dropLeft 1 current)) -- recursive call to get remaining substrings
  in
    List.concatMap substringTail initialSubstrings -- flatten list of lists