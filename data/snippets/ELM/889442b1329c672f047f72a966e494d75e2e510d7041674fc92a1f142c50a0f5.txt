-- | A program to sort a list of integers using quicksort algorithm.

-- Define a type alias for list of integers
type alias IntList = List Int

-- Define a type alias for a tuple of partitioned lists
type alias PartitionedLists = (IntList, IntList)

-- Define a function that takes in a list and returns a sorted list using quicksort algorithm
quicksort : IntList -> IntList
quicksort list =
    case list of
        [] -> []

        -- If list has only one element, return the list itself
        [x] -> [x]

        -- Otherwise, partition the list into two based on the pivot element
        pivot :: rest ->
            let
                (less, greater) =
                    partition pivot rest
            in
                -- Recursively sort the partitioned lists and concatenate them
                (quicksort less) ++ [pivot] ++ (quicksort greater)

-- Define a helper function to partition a list into two lists based on a pivot element
partition : Int -> IntList -> PartitionedLists
partition pivot list =
    case list of
        [] ->
            ([], [])

        -- If current element is less than pivot, add it to first list
        x :: xs ->
            if x < pivot then
                let
                    (less, greater) =
                        partition pivot xs
                in
                    (x :: less, greater)

            -- If current element is greater than or equal to pivot, add it to second list
            else
                let
                    (less, greater) =
                        partition pivot xs
                in
                    (less, x :: greater)

-- An example list to be sorted
numbers : IntList
numbers =
    [2, 5, 8, 1, 3, 9, 4, 7, 6]

-- Sort the example list using quicksort
sortedNumbers : IntList
sortedNumbers =
    quicksort numbers

-- Print the sorted list
main : Program Never
main =
    Element.none