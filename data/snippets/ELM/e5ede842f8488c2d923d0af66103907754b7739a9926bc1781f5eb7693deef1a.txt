-- This is a comment in ELM
-- Here we define a list of integers

numbers : List Int
numbers =
    [ 1, 2, 3, 4, 5 ]

-- Concatenate two lists into one

concat : List Int -> List Int -> List Int
concat xs ys =
    xs ++ ys

-- Convert a list of strings to uppercase

uppercase : List String -> List String
uppercase strs =
    List.map String.toUpper strs

-- Filter a list based on a predicate function

filter : (a -> Bool) -> List a -> List a
filter pred list =
    List.filter pred list 

-- Define a custom type

type User
    = Regular String Int
    | Premium String Int String

-- Define a function that calculates the total age of a list of users

totalAge : List User -> Int
totalAge users =
    List.foldl
        (\user total -> case user of
            Regular _ age ->
                total + age

            Premium _ age _ ->
                total + age
        )
        0
        users

-- Generate a random list of booleans

randomBools : Int -> List Bool
randomBools num =
    Random.step (Random.list num (Random.bool))