--A complex ELM code snippet
--This code snippet creates a list of items using a random number generator
--and displays them in a styled table

import Html exposing (..)
import Random exposing (..)

--Declare a custom type for the items in the list
type alias Item =
  { name : String
  , value : Int
  }

--Create a list of items using the custom type
items : List Item
items =
  [ { name = "Apple" , value = 5 }
  , { name = "Banana" , value = 7 }
  , { name = "Orange" , value = 4 }
  , { name = "Grapes" , value = 8 }
  ]

--Create a function to generate a random number
getRandomNumber : Int -> Int -> Cmd msg
getRandomNumber min max =
    getRandom (min, max)
        |> Random.map (\n -> n)

--Create a function to get a random item from the list
getRandomItem : List Item -> Cmd msg
getRandomItem items =
    getRandomNumber 0 (List.length items - 1)
        |> Random.map (\i -> List.getAt i items)

--Create a view function to display the list of items in a table
view : List Item -> Html msg
view items =
    table []
        [ thead []
            [ tr []
                [ th [] [ text "Item" ]
                , th [] [ text "Value" ]
                ]
            ]
        , tbody []
            (List.map (\item ->
                tr []
                   [ td [] [ text item.name ]
                   , td [] [ text (toString item.value) ]
                   ]
            ) items)
        ]

--Main function to render the view with a random item from the list
main : Program Never Model Msg
main =
    getRandomItem items
        |> Task.perform ignore (\item ->
            Html.beginnerProgram
                { model = ()
                , update = \() -> ((), Cmd.none)
                , view = view [item]
                }
        )