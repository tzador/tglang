-- This code snippet uses the Maybe monad to handle potential null values
-- First, we define a function that checks if a number is even
isEven : Int -> Bool
isEven num =
    rem num 2 == 0

-- Next, we define a function that returns the square of a number
square : Int -> Int
square num =
    num * num

-- Now, we define a function that takes in a number and returns its square, but only if it is an even number
squareEven : Int -> Maybe Int
squareEven num =
    if isEven num then
        Just (square num)
    else
        Nothing
        
-- Finally, we use the Maybe monad to handle the potential null value
-- If the result of squareEven is Just, then we print the square value
-- Otherwise, we print a message stating that the number is odd
main =
    case squareEven 4 of
        Just result ->
            print result
            
        Nothing ->
            print "Number is odd"