-- | This function takes in two lists and merges them into one list.
-- | It also sorts the elements in ascending order.
mergeSort : List a -> List a -> List a
mergeSort [] list2 = list2
mergeSort list1 [] = list1
mergeSort (x::xs) (y::ys) = 
    if x < y then
        x :: mergeSort xs (y::ys)
    else
        y :: mergeSort (x::xs) ys

-- | This function takes in a string and reverses it using tail recursion.
reverseString : String -> String
reverseString string = 
    let
        helper : String -> String -> String
        helper remainingString reversedString =
            if String.length remainingString <= 0 then
                reversedString
            else
                helper (String.dropLeft remainingString 1) (String.cons (String.left remainingString) reversedString)
    in
        helper string ""

-- | This function takes in a list of integers and filters out any even numbers.
filterEven : List Int -> List Int
filterEven list =
    List.filter (\x -> x % 2 == 0) list

-- | This function takes in a list of strings and groups them by their first letter.
groupStrings : List String -> Dict Char (List String)
groupStrings list =
    List.foldl
        (\str dict ->
            Dict.update
                (String.get 0 str)
                (\strings ->
                    Maybe.map (\list' -> str :: list') strings
                        |> Maybe.withDefault
                            [str]
                )
                dict
        )
        Dict.empty
        list