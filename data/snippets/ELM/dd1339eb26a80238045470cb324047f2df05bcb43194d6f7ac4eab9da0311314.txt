-- Declaring a custom type alias
type alias User =
    { name: String
    , age: Int
    , address: Address
    }

-- Declaring a custom type for an address
type alias Address =
    { street: String
    , city: String
    , state: String
    }


-- Creating a function to validate a user's age and return a message if invalid
validateAge : Int -> String
validateAge age =
    if age < 18 then
        "User must be 18 years or older"
    else if age > 120 then
        "User must be under 120 years old"
    else
        "Age is valid"


-- Creating a function to format a user's name and return it in uppercase
formatName : String -> String
formatName name =
    String.toUpper name


-- Creating a function to concatenate a user's name and address into a single string
concatenateInfo : User -> String
concatenateInfo user =
    let
        name = formatName user.name
        address = user.address
        street = address.street
        city = address.city
    in
        name ++ " lives at " ++ street ++ " in " ++ city


-- Creating a list of users
users : List User
users =
    [ User "John Doe" 25 (Address "123 Main St" "New York" "NY")
    , User "Jane Smith" 30 (Address "456 Maple Ave" "Boston" "MA")
    , User "Bob Johnson" 45 (Address "789 Pine St" "Chicago" "IL")
    ]


-- Filtering the list of users based on age
adultUsers : List User
adultUsers =
    List.filter (\user -> validateAge user.age == "Age is valid") users


-- Combining the filtered list of users into a single string
userString : String
userString =
    List.foldl (\user -> \acc -> acc ++ concatenateInfo user) "" adultUsers


-- Outputting the final result
main : String
main =
    "The following users are adults: " ++ userString