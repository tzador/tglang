-- Example of a long and complex code snippet in ELM

import List exposing (foldl, filter)

-- Define a custom type for saving information about a company
type alias Company =
    { name : String
    , employees : List Employee
    , profits : List Profit
    }

-- Define a custom type for saving information about an employee
type alias Employee =
    { name : String
    , age : Int
    , salary : Float
    , position : String
    }

-- Define a custom type for saving information about profits
type alias Profit =
    { year : Int
    , amount : Float
    , category : String
    }

-- Define a list of companies
companies : List Company
companies =
    [ { name = "ABC Corp"
      , employees =
          [ { name = "John Smith"
            , age = 32
            , salary = 50000
            , position = "Manager"
            }
          , { name = "Sarah Williams"
            , age = 28
            , salary = 40000
            , position = "Sales Associate"
            }
          ]
      , profits =
          [ { year = 2018
            , amount = 100000
            , category = "Overall"
            }
          , { year = 2019
            , amount = 120000
            , category = "Overall"
            }
          ]
      }
    , { name = "XYZ Inc"
      , employees =
          [ { name = "Mark Johnson"
            , age = 35
            , salary = 60000
            , position = "CEO"
            }
          , { name = "Emily Brown"
            , age = 26
            , salary = 35000
            , position = "Marketing Assistant"
            }
          ]
      , profits =
          [ { year = 2018
            , amount = 150000
            , category = "Tech"
            }
          , { year = 2019
            , amount = 200000
            , category = "Tech"
            }
          ]
      }
    ]

-- Calculate the total profit for each company and return it as a list
calculateTotalProfits : List Company -> List Float
calculateTotalProfits =
    List.map (\company -> foldl (\profit acc -> acc + profit.amount) 0 company.profits)

-- Filter the list of companies based on their total profit exceeding a certain amount
filteredCompanies : List Company
filteredCompanies =
    companies
        |> calculateTotalProfits
        |> List.filter (\profit -> profit > 150000)

-- Print the names of the filtered companies
main : Html.Html msg
main =
    List.map (\company -> Html.text company.name) filteredCompanies