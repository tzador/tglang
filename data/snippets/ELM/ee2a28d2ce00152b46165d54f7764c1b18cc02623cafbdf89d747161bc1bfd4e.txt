-- This is a function that calculates the factorial of a given number
factorial : Int -> Int
factorial n =
    if n == 0 then
        1
    else 
        n * factorial (n-1)
        
-- This is a type representing a binary tree data structure
type BinaryTree a
    = Empty
    | Leaf a
    | Node (BinaryTree a) a (BinaryTree a)
    
-- This is a function that inserts a value into the binary tree
insert : a -> BinaryTree a -> BinaryTree a
insert value binaryTree =
    case binaryTree of
        Empty ->
            Leaf value
        Leaf a ->
            Node Empty value (Leaf a)
        Node leftTree currentValue rightTree ->
            if value < currentValue then
                Node (insert value leftTree) currentValue rightTree
            else
                Node leftTree currentValue (insert value rightTree)
                
-- This is a union type representing either an integer or a string
type IntOrString
    = IntVal Int
    | StringVal String
    
-- This is a function that converts an int or string value into a string
intOrStringToString : IntOrString -> String
intOrStringToString intOrString =
    case intOrString of
        IntVal int ->
            toString int
        StringVal string ->
            string