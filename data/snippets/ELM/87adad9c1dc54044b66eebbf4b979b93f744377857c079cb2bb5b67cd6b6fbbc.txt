-- This is an example of a complex ELM code snippet with multiple functions and data types

-- Define a custom data type called User with two fields
type User =
  User
    { id : Int
    , name : String
    }
    
-- Define a custom data type called Post with three fields
type Post =
  Post
    { id : Int
    , userId : Int
    , content : String
    }

-- Define a function called createUser that takes in an Int and a String and returns a User data type
createUser : Int -> String -> User
createUser id name =
  User
    { id = id
    , name = name
    }
    
-- Define a function called filterPosts that takes in a list of Posts and a user's ID and returns a list of Posts
filterPosts : List Post -> Int -> List Post
filterPosts posts userID =
  List.filter (\post -> post.userId == userID) posts
  
-- Define a list of posts
posts : List Post
posts =
  [ Post 1 1 "Hey! How's it going?"
  , Post 2 1 "Just hanging out at home"
  , Post 3 2 "Excited for the weekend!"
  , Post 4 3 "What's everyone up to?"
  ]
  
-- Create a new user
user : User
user = createUser 1 "John"
  
-- Filter the list of posts for the user with ID 1
userPosts : List Post
userPosts = filterPosts posts 1

-- Output:
-- userPosts = [ Post 1 1 "Hey! How's it going?", Post 2 1 "Just hanging out at home" ]