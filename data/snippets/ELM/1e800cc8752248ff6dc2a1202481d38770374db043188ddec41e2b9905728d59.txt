-- Define a type Pt to represent a 2D point
type alias Pt =
    { x : Float
    , y : Float
    }

-- Define a function to calculate the distance between two points
distance : Pt -> Pt -> Float
distance pt1 pt2 =
    let
        xDist = abs (pt1.x - pt2.x)
        yDist = abs (pt1.y - pt2.y)
    in
        sqrt (xDist^2 + yDist^2)

-- Define a type Shape to represent different shapes
type Shape
    = Circle Pt Float -- a circle with center point and radius
    | Rectangle Pt Float Float -- a rectangle with top-left point, width, and height

-- Define a function to calculate the area of a shape
area : Shape -> Float
area shape =
    case shape of
        Circle _ r ->
            pi * r^2

        Rectangle _ w h ->
            w * h

-- Create some test shapes
circleExample : Shape
circleExample =
    Circle { x = 0, y = 0 } 5 -- circle with center (0,0) and radius 5

rectangleExample : Shape
rectangleExample =
    Rectangle { x = 3, y = 4 } 10 6 -- rectangle with top-left point (3,4), width 10, and height 6

-- Calculate the distance and area of the test shapes
distanceBetweenShapes : Float
distanceBetweenShapes =
    distance (Circle.center circleExample) (Rectangle.topLeft rectangleExample)

areaOfShapes : Float
areaOfShapes =
    area circleExample + area rectangleExample

-- Print the results
main =
    let
        distanceMsg =
            "The distance between the two shapes is: " ++ (toString distanceBetweenShapes)

        areaMsg =
            "The area of both shapes is: " ++ (toString areaOfShapes)
    in
        text distanceMsg
        |> autoResize
        |> above (text areaMsg)
        |> autoResize