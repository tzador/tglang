-- This program calculates the Fibonacci sequence up to a given number
-- and displays the results in a list
module Main exposing (main)

-- Definition of the main function
main : Program () Model Msg
main =
    -- Initializes the application with an initial model
    Browser.sandbox { init = init, update = update, view = view }

-- Definition of the model type
type alias Model =
    { max : Int -- highest number in sequence
    , fib : List Int -- list of calculated Fibonacci numbers
    }

-- Definition of the update function
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Calculate ->
            -- Uses the max value from the model to calculate the sequence
            ( { model | fib = fibSequence model.max }, Cmd.none )

-- Definition of the view function
view : Model -> Html Msg
view model =
    div []
        [ button [ onClick Calculate ] [ text "Calculate" ]
        , h1 [] [ text "Fibonacci Sequence" ]
        , ul [] (List.map (\n -> li [] [ text <| String.fromInt n ]) model.fib)
        -- Displays the sequence as a list of numbers
        ]

-- Definition of the initial model (max value set to 10)
init : Model
init =
    { max = 10
    , fib = [0, 1] -- starting values of the sequence
    }

-- Definition of the message type used in updates
type Msg
    = Calculate

-- Helper function to generate the Fibonacci sequence up to a given number
fibSequence : Int -> List Int
fibSequence max =
    let
        -- Calculates the next number in the sequence based on the previous two
        nextFib a b =
            a + b
        -- Uses recursion to continuously add numbers to the sequence until max is reached
        createFib a b count =
            if count < max then
                createFib b (nextFib a b) (count + 1)
            else
                [a, b]
    in
    createFib 0 1 2