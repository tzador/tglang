---- LIST BASICS ----
-- Our list type can hold anything: Ints, Booleans, Functions
-- Note: The = operator reads as "is defined as". So 1 = 1 reads as "one is defined as one".
cheeses = [ "Gouda", "Edam", "Cheddar" ]
legit = [ True, False ]
toFunction = [ negate, \x -> (\y -> (x, y)), reverse ]
-- Use (++) to add items to lists. In order to add a single element, the element must be inside a list []
cheeses = "Gorgonzola" :: cheeses
numbers = [1, 2, 3] ++ [4] -- numbers = [1, 2, 3, 4]

---- TUPLE BASICS ----
-- Tuples can hold multiple values of different types
-- Note: The | operator reads as "or"
-- ( , ) is a tuple constructor. It takes two arguments and returns a tuple
-- Pairs
point = (2, 5) -- point = (2, 5)
name = ("John", "Doe") -- name = ("John", "Doe")
-- Triples
player = ("Tom", 25, True) -- player = ("Tom", 25, True)
-- Lists of tuples
contacts = [(1, "John Doe"), (2, "Jane Smith"), (3, "Adam Jones")] -- contacts = [(1, "John Doe"), (2, "Jane Smith"), (3, "Adam Jones")]