-- Function that takes in two lists and outputs a list of tuples where the first element in the tuple is from the first list and the second element is from the second list
zip : List a -> List b -> List (a, b)
zip list1 list2 =
    case (list1, list2) of
        (x :: xs, y :: ys) ->
            (x, y) :: zip xs ys
        _ ->
            []

-- Function that recursively calculates the factorial of a given integer
factorial : Int -> Int
factorial n =
    case n of
        0 ->
            1
        _ ->
            n * factorial (n - 1)

-- Main function that combines the zip and factorial functions
combinedFunction : List Int -> List Int -> List Int
combinedFunction list1 list2 =
    let
        zippedList = zip list1 list2
    in
        List.map (\(x, y) -> (factorial x) + (factorial y)) zippedList