-- create a custom type called 'NumType' which can store a single number
type NumType
    = SingleNum Float

-- define a function called 'addNums' which takes in two 'NumType' values and returns their sum as a 'SingleNum' value
addNums : NumType -> NumType -> NumType
addNums numA numB =
    case (numA, numB) of
        (SingleNum a, SingleNum b) ->
            SingleNum (a + b)

-- define a function called 'divideNums' which takes in two 'NumType' values and returns their quotient as a 'SingleNum' value
divideNums : NumType -> NumType -> NumType
divideNums numA numB =
    case (numA, numB) of
        (SingleNum a, SingleNum b) ->
            SingleNum (a / b)

-- define a function called 'squareNum' which takes in a 'NumType' value and returns its square as a 'SingleNum' value
squareNum : NumType -> NumType
squareNum num =
    case num of
        SingleNum a ->
            SingleNum (a * a)

-- define a function called 'calculate' which takes in two 'NumType' values and performs a series of operations on them, returning a final 'NumType' value
calculate : NumType -> NumType -> NumType
calculate numA numB =
    let
        sum =
            addNums numA numB
        quotient =
            divideNums numA numB
        squaredNumA =
            squareNum numA
        squaredNumB =
            squareNum numB
    in
        case (sum, quotient) of
            (SingleNum a, SingleNum b) ->
                case (a > b, a < b) of
                    (True, False) ->
                        squaredNumA
                    (False, True) ->
                        squaredNumB
                    _ ->
                        SingleNum 0  -- if a and b are equal, return 0