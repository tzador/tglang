-- This is a comment in ELM
import Html exposing (div, text) -- importing necessary Html elements
import Json.Decode as Decode exposing (list, int, string, decodeString) -- importing Json Decode library

-- Defining a custom type of User
type alias User =
  { id : Int
  , name : String
  , age : Int
  }

-- Decoding a list of users from a JSON string
decodeListOfUsers : String -> Result String (List User)
decodeListOfUsers json =
  let
    -- Creating a Decoder for each user
    userDecoder =
      Decode.map3 User 
        (Decode.field "id" Decode.int)
        (Decode.field "name" Decode.string)
        (Decode.field "age" Decode.int)
        
    -- Using the userDecoder to decode a list of users      
    result =
      Decode.decodeString (Decode.list userDecoder) json
  in
    result

-- Encoding a list of users into a JSON string
encodeListOfUsers : List User -> String
encodeListOfUsers users =
  let
    -- A function to convert a user to a JSON object
    userToJson : User -> Json.Encode.Value
    userToJson user =
      Json.Encode.object 
        [ ( "id", Json.Encode.int user.id )
        , ( "name", Json.Encode.string user.name )
        , ( "age", Json.Encode.int user.age )
        ]
        
    -- Converting each user to a JSON object and then encoding the list
    json =
      Json.Encode.list userToJson users
  in
    json

-- Example JSON string of a list of users
jsonString : String
jsonString = """
[
  { "id": 1, "name": "John", "age": 25 },
  { "id": 2, "name": "Jane", "age": 30 },
  { "id": 3, "name": "Bob", "age": 40 }
]
"""

-- Decoding the JSON string into a list of users and handling the result
result : Result String (List User)
result =
  decodeListOfUsers jsonString

case result of
  Ok users ->
    -- Printing out each user's name and age
    div []
      [ text ("Name: " ++ users.name)
      , text ("Age: " ++ (String.fromInt users.age))
      ]
      
  Err error ->
    -- Printing out error message
    div []
      [ text ("Error: " ++ error) ]