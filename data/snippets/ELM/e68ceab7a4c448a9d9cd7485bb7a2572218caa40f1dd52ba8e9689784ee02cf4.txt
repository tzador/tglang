port module Main exposing (main)

import Html exposing (Html, img, text)
import Html.Attributes exposing (src, alt, style, link)

{-|
A data type representing colors
-}
type Palette
    = Red
    | Blue
    | Yellow
    | Green
    | Orange
    | Purple

{-|
A data type representing different shapes
-}
type Shape
    = Square
    | Rectangle Float Float
    | Circle Float

{-|
A function that calculates the area of a given shape
-}
area : Shape -> Float
area shape =
    case shape of
        Square ->
            1

        Rectangle width height ->
            width * height

        Circle radius ->
            3.14 * radius^2

{-|
A function that creates an Html element for a given shape with a specific color
-}
shapeHtml : Shape -> Palette -> Html
shapeHtml shape color =
    case color of
        Red ->
            let
                shapeStyle =
                    [
                        ( "color", "red" )
                    ]
            in
            case shape of
                Square ->
                    Html.div
                        [
                            style shapeStyle
                        ]
                        [ text "🔴" ]

                Rectangle width height ->
                    Html.div
                        [
                            style shapeStyle
                        ]
                        [ text "🔴", text "🔴" ]

                Circle radius ->
                    Html.div
                        [
                            style shapeStyle
                        ]
                        [ text "🔴" ]

        Blue ->
            let
                shapeStyle =
                    [ ( "color", "blue" ) ]
            in
            case shape of
                Square ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🔵" ]

                Rectangle width height ->
                    Html.div
                        [
                            style shapeStyle
                        ]
                        [ text "🔵", text "🔵" ]

                Circle radius ->
                    Html.div
                        [
                            style shapeStyle
                        ]
                        [ text "🔵" ]

        Yellow ->
            let
                shapeStyle =
                    [ ( "color", "yellow" )]
            in
            case shape of
                Square ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟡" ]

                Rectangle width height ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟡", text "🟡" ]
                

                Circle radius ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟡" ]

        Green ->
            let
                shapeStyle =
                    [ ( "color", "green" )]
            in
            case shape of
                Square ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟢" ]

                Rectangle width height ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟢", text "🟢" ]

                Circle radius ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟢" ]

        Orange ->
            let
                shapeStyle =
                    [ ( "color", "orange" )]
            in
            case shape of
                Square ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟠" ]

                Rectangle width height ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟠", text "🟠" ]

                Circle radius ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟠" ]

        Purple ->
            let
                shapeStyle =
                    [ ( "color", "purple" )]
            in
            case shape of
                Square ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟣" ]

                Rectangle >
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟣", text "🟣" ]

                Circle radius ->
                    Html.div
                        [ style shapeStyle ]
                        [ text "🟣" ]


{-|
A function that generates an Html page displaying different shapes with different colors
-}
main : Html
main =
    Html.span []
        [
            img [ src "https://i.ibb.co/r05VxYq/elm-logo.png", alt "Elm Logo", link ],
            Html.div [ style [ ( "font-size", "25px" ) ] ] [ text "Generated Shape Art" ],
            Html.div [ style [ ( "font-size", "15px" ) ] ] [ text "Made with love using ELM" ],
            Html.div []
                [
                    text "👇🏼Click below to generate new shape art👇🏼",
                    Html.br [] [], Html.br [] [],
                    Html.button
                        [ onClick (Random.shuffled [ Orange, Red, Yellow, Blue, Green, Purple ]), style [ ( "font-size", "20px" ), ( "margin-top", "20px" ) ] ]
                        [ text "Generate" ]
                ],
            Html.div [ style [ ( "width", "100px" ), ( "height", "500px" ), ( "margin", "auto" ), ( "margin-top", "50px" ) ] ] existingUser.shapeList
        ]


{-|
A data type representing a user
-}
type ExistingUser =
    {
        name : String,
        shapeList : List (Html Shape),
        color : Palette
    }

{-|
A sample user
-}
existingUser : ExistingUser
existingUser =
    {
        name = "Jane",
        shapeList =
            List.map (shapeHtml (Rectangle 50 50)) [ Red, Yellow, Blue, Red, Yellow, Blue, Red, Yellow, Blue, Red, Yellow, Blue, Red, Yellow ],
        color = Green
    }

{-|
A function that generates a random color from the Palette data type
-}
randomColor : List Palette -> Cmd (List Palette)
randomColor list =
    Random.generate
        NewColor
        (Random.list 1 (List.map name list))
        |> (Cmd.map NewColorAdded)

{-|
A command for modifying the color value in the model
-}
type Msg
    = NewColorAdded (List String)
    | NewColor (List String)
    | FailLoading Http.Error
    | NoOp


{-|
Update function that modifies the color value in the model
-}
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NewColorAdded color ->
            (
                { model | color = String.toLower (color |> List.head |> Maybe.withDefault "No Color Found" ) },
                randomColor color
            )

        NewColor color ->
            (
                { model | color = String.toLower (color |> List.head |> Maybe.withDefault "No Color Found" ) },
                randomColor color
            )

        _ ->
            ( model, Cmd.none )