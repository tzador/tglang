module Main exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)

-- This function takes in a list of strings and converts it into a list of Html nodes
listToNodes : List String -> List (Html msg)
listToNodes strings =
    List.map (\string -> strong [] [ text string ]) strings

-- This type represents the possible states of a check box
type CheckState
    = Unchecked
    | Checked

-- This function takes in a CheckState and returns the corresponding input element
checkInput : CheckState -> Html msg
checkInput state =
    case state of
        Unchecked ->
            input [ type_ "checkbox", checked False ] []

        Checked ->
            input [ type_ "checkbox", checked True ] []

-- This function takes in a list of booleans and creates a list of check boxes
checkboxList : List Bool -> List (Html msg)
checkboxList bools =
    List.map
        (\bool -> div []
            [ checkInput (if bool then Checked else Unchecked), text (if bool then " Checked" else " Unchecked") ])
        bools

-- This view function creates the desired UI, with a title, a list of check boxes, and a button
view : Bool -> Html msg
view showButton =
    div []
        [ h1 [] [ text "ELM Checkbox Generator" ]
        , div [] (listToNodes ["Option 1", "Option 2", "Option 3"])
        , button [ onClick True ] [ text "Generate Checkboxes" ]
        , div [] (checkboxList [False, True, False, True])
        , if showButton then button [ onClick False ] [ text "Hide Button" ] else div [] []
        ]

-- This program starts the application, with an initial model and update function
main =
    Html.beginnerProgram
        { model = True
        , view = view
        , update = always
        }