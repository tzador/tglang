module Main exposing (sound)
-- This is a module that exposes a single function `sound`.

import Html exposing (..)
-- Importing the `Html` module to use its functionalities.

type alias Sound =
    { instrument : String
    , notes : List String
    , duration : Int
    }
-- Defining a custom type `Sound` with three fields: `instrument`,
-- `notes` and `duration`. The `instrument` field will be of type `String`,
-- `notes` field will be a list of `String` values and the `duration`
-- field will be of type `Int`.

sound : Sound -> Html msg
-- A function that takes in a `Sound` value and returns an `Html` value.

sound sound =
    case sound.instrument of
        "guitar" ->
            let
                noteList =
                    List.map (\note -> Html.text note) sound.notes
            in
            Html.h3 [ ] [ text "Playing the guitar!", (Html.div [ ] noteList), text "Duration: " ++ (stringFromInt sound.duration) ++ " seconds" ]

        "piano" ->
            let
                noteList =
                    List.map (\note -> Html.text note) sound.notes
            in
            Html.h3 [ ] [ text "Playing the piano!", (Html.div [ ] noteList), text "Duration: " ++ (stringFromInt sound.duration) ++ " seconds" ]
--A case expression that checks the value of `sound.instrument` and
-- generates different HTML elements and text based on its value.
-- If the instrument is "guitar", create a heading saying "Playing the guitar!"
-- and a div displaying the notes in the `sound.notes` list. The duration
-- will be displayed by adding the text "Duration: `sound.duration` seconds".
-- If the instrument is "piano", the same elements and text will be generated,
-- but the heading will say "Playing the piano!" instead.

        _ ->
            Html.h3 [ ] [ text "Invalid instrument!" ]
-- A catch-all case that handles an invalid instrument value by
-- displaying a heading saying "Invalid instrument!".

stringFromInt : Int -> String
-- A helper function that converts an `Int` value to a `String`.

stringFromInt num =
    case num of
        0 ->
            "0"

        _ ->
            "Invalid"
-- A case expression that checks the value of `num` and returns
-- either "0" or "Invalid" based on its value.