module Main exposing (main)

  import Html exposing (Html, text, button, h1, div, input, form, label, attribute)
  import Html.Events exposing (onClick)

  type alias Model =
      { counter : Int
      , message : String
      , name : String
      }

  initialModel : Model
  initialModel =
      { counter = 0
      , message = "Welcome to my ELM code!"
      , name = ""
      }

  type Msg
      = Increment
      | ChangeName String
      | Reset

  update : Msg -> Model -> Model
  update msg model =
      case msg of
          Increment ->
              { model | counter = model.counter + 1 }

          ChangeName newName ->
              { model | name = newName }

          Reset ->
              { model | counter = 0 }

  view : Model -> Html Msg
  view model =
      let
          counterLabel =
              label [] [ text ("Counter: " ++ toString model.counter)]

          nameInput =
              input [ onClick (ChangeName newName) ] []

          submitButton =
              button [ onClick Increment ] [ text "Submit"]

          messageHeader =
              h1 [] [ text model.message ]
      in
      div []
          [ counterLabel
          , form [ attribute "onsubmit" "evt.preventDefault();" ] [ nameInput, submitButton ]
          , messageHeader
          ]

  main : Program Never Model Msg
  main =
      Html.program
          { init = initialModel
          , view = view
          , update = update
          , subscriptions = always Sub.none
          }