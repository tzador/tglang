-- This is a function that returns the sum of two numbers
-- Function parameters are declared in parentheses after the function name, separated by spaces
calculateSum : Int -> Int -> Int -- Function type declaration for two integer parameters and an integer return type
calculateSum x y = -- The function body starts with an equals sign
  x + y -- The body of the function is indented with two spaces, and it consists of a single expression to be evaluated

-- This is a list of numbers
listOfNumbers : List Int -- Declaration of a list of integers
listOfNumbers = [1, 2, 3, 4, 5] -- The value of the list is enclosed in square brackets and separated by commas

-- This is a higher order function that takes a function as a parameter and returns a new function
map : (a -> b) -> List a -> List b -- Declaration of a map function with a generic type 'a' and 'b'
map func list = -- Function body
  List.map func list -- using the built-in List.map function to apply 'func' to each element in 'list'

-- This function takes two strings as parameters and concatenates them
concatStrings : String -> String -> String -- Declaration of a function with two string parameters and a string return type
concatStrings string1 string2 = -- Function body
  string1 ++ string2 -- Using the ++ operator to concatenate the two strings

main : Program Never -- Declaration of the main function with a program type that never returns
main = -- Function body
  let -- Using a let expression to declare a variable
    result = calculateSum 5 10 -- Function call to calculate the sum of two numbers and assign it to 'result'
    mappedList = map (\x -> String.fromInt x) listOfNumbers -- Using an anonymous function to convert the list of numbers to strings
  in
    concatStrings "The sum is: " (String.join ", " mappedList) -- Using the String.join function to join the list of strings with a comma and space