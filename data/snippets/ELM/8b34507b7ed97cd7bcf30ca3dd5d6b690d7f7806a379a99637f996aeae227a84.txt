-- This is an annotated and complex ELM code snippet
type alias Person =
    { name : String
    , age : Int
    , address : String
    }

type Gender
    = Male
    | Female
    | Other

type alias Employee =
    { person : Person
    , jobTitle : String
    , gender : Gender
    , salary : Float
    , hired : Bool
    }

module Main exposing (main)
    import Html
    import String

    type alias Model =
        { employees : List Employee
        , totalSalary : Float
        }

    initialModel : Model
    initialModel =
        { employees =
            [ Employee { person = Person "John" 26 "1234 Main Street"
                        , jobTitle = "Software Engineer"
                        , gender = Male
                        , salary = 100000
                        , hired = True
                        }
            , Employee { person = Person "Sarah" 33 "5678 Maple Ave"
                        , jobTitle = "Marketing Specialist"
                        , gender = Female
                        , salary = 80000
                        , hired = True
                        }
            ]
        , totalSalary = 0
        }

    viewEmployee : Employee -> Html.Html
    viewEmployee employee =
        Html.div []
            [ Html.span [] [ Html.text (String.concat [ employee.person.name, " - ", employee.jobTitle ]) ]
            , Html.span [] [ Html.text (String.fromFloat employee.salary) ]
            ]

    view : Model -> Html.Html
    view model =
        Html.div []
            [ Html.h1 [] [ Html.text "Employee List" ]
            , Html.div []
                (List.map viewEmployee model.employees)
            , Html.div [] [ Html.text ("Total Salary: " ++ (String.fromFloat model.totalSalary)) ]
            ]

    main : Program () Model
    main =
        Html.program
            { init = (\_ -> initialModel)
            , view = view
            , update = (\_ model -> model)
            , subscriptions = (\_ -> Sub.none)
            }