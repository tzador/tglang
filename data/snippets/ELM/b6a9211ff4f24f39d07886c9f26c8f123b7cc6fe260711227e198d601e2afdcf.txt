-- Define a type for a record with fields for price, quantity, and description
type alias Item =
    { price : Float -- Price of the item
    , quantity : Int -- Quantity of the item
    , description : String -- Description of the item
    }

-- Create a function that calculates the total cost of a list of items
totalCost : List Item -> Float
totalCost items =
    List.foldl (\item total -> total + (item.price * toFloat item.quantity)) 0 items
    -- Foldl function iterates through the list and calculates the total cost by multiplying the price of the item with its quantity
    -- The initial value of the total is set to 0

-- Define a function to update the quantity of an item given its description
updateQuantity : String -> Int -> List Item -> List Item
updateQuantity desc newQuantity items =
    List.map (\item -> if item.description == desc then {item | quantity = newQuantity} else item) items
    -- Map function iterates through the list and updates the quantity of the item with the given description
    -- If the description matches, the item's quantity is updated to the new value, otherwise, the item remains unchanged

-- Example usage
items = [ Item 4.99 2 "Milk", Item 9.99 1 "Bread", Item 2.49 3 "Eggs" ]
-- Define a list of items with their prices and quantity

total = totalCost items
-- Calculate the total cost of all the items in the list

updatedItems = updateQuantity "Milk" 3 items
-- Update the quantity of the item "Milk" to 3

updatedTotal = totalCost updatedItems
-- Calculate the new total cost of all the items in the updated list