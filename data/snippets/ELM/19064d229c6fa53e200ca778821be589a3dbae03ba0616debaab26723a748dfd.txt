-- This code snippet contains a function that checks whether a given number is prime
-- and is written in the ELM programming language.
-- We first create a helper function that checks if a given number is divisible by
-- any number from 2 up to the square root of that number.

-- This function takes in two parameters, the number to be checked and the current divisor.
isDivisible : Int -> Int -> Bool
isDivisible number divisor =
    if number % divisor == 0 then
        True
    else
        False

-- The `isPrime` function takes in a number and calls the `isDivisible` helper function
-- on that number starting from 2 up to the square root of the number.
isPrime : Int -> Bool
isPrime number =
    let
        -- We use the `floor` function to round down the square root of the given number.
        root = floor (sqrt (toFloat number))
    in
        -- We check if the number is divisible by any number from 2 up to the
        -- square root of that number. If it is, then the number is not prime.
        -- Otherwise, the number is prime.
        not (List.any (isDivisible number) [ 2 .. root ])

-- We can now call the `isPrime` function to check if a given number is prime.
isPrime 17 -- Output: True