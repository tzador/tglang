{-| Represents a tree data structure with elements of different types
    and allows for various operations such as insertion, deletion, 
    and searching.
-}

type Tree a
    = Empty
    | Node a (Tree a) (Tree a)

{-| Inserts an element into the tree in the correct position based on
    its value.
-}
insert : Ord a => a -> Tree a -> Tree a
insert x Empty =
    Node x Empty Empty

insert x (Node value left right) =
    if x < value then
        Node value (insert x left) right
    else
        Node value left (insert x right)

{-| Deletes an element from the tree if it exists, otherwise returns
    the original tree.
-}
delete : Ord a => a -> Tree a -> Tree a
delete _ Empty =
    Empty

delete x (Node value left right) =
    if x == value then
        case (left, right) of
            (Empty, _) ->
                right

            (_, Empty) ->
                left

            _ ->
                let (successor, newRight) =
                        findSuccessor right
                in
                Node successor left newRight
    else if x < value then
        Node value (delete x left) right
    else
        Node value left (delete x right)

{-| Finds the successor of a node by traversing its right subtree and
    returning the minimum value found.
-}
findSuccessor : Tree a -> (a, Tree a)
findSuccessor (Node value Empty right) =
    (value, right)

findSuccessor (Node value left right) =
    let (successor, newLeft) =
            findSuccessor left
    in
    (successor, Node value newLeft right)

{-| Searches for an element in the tree and returns `True` if it exists,
    `False` otherwise.
-}
contains : Ord a => a -> Tree a -> Bool
contains _ Empty =
    False

contains x (Node value left right) =
    if x == value then
        True
    else if x < value then
        contains x left
    else
        contains x right