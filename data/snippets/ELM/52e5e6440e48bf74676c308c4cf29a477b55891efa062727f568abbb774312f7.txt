module Account exposing (..)

-- Import the necessary modules
import Html exposing (text, div)
import Http
import Json.Decode as Decode

-- Define the User data type
type alias User =
    { name : String
    , age : Int
    , email : String
    }

-- Define the Msg data type
type Msg
    = GetUserResult (Result Http.Error User)

-- Define the initial model
init : () -> (User, Cmd Msg)
init _ =
    -- Make an HTTP request to get the user's data
    ( User "John" 25 "john@example.com"
    , Http.get
        { url = "https://api.example.com/user"
        , expect = Http.expectJson GetUserResult userDecoder
        }
    )

-- Define a decoder for the user data
userDecoder : Decoder User
userDecoder =
    Decode.map3 User
        (Decode.field "name" Decode.string)
        (Decode.field "age" Decode.int)
        (Decode.field "email" Decode.string)

-- Define the update function
update : Msg -> User -> (User, Cmd Msg)
update msg model =
    case msg of
        -- Handle the response when the user data is retrieved
        GetUserResult result ->
            case result of
                Ok user ->
                    ( user
                    , Cmd.none
                    )
                Err _ ->
                    ( model
                    , Cmd.none
                    )

-- Define the view function
view : User -> Html Msg
view user =
    -- Display the user's information in a div
    div [] [ text (user.name ++ " is " ++ toString user.age ++ " years old.") ]