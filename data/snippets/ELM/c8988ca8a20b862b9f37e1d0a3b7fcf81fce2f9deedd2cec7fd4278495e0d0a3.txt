-- Creates a function that takes in a list of integers and returns the sum of all odd numbers in the list
sumOdd : List Int -> Int
sumOdd list =
    let
        -- Helper function that checks if a number is odd
        isOdd : Int -> Bool
        isOdd num =
            num % 2 == 1

        -- Helper function that recursively adds odd numbers in the list
        addOdd : List Int -> Int
        addOdd nums =
            case nums of
                [] -> 0  -- Base case: empty list
                (x :: xs) -> if isOdd x then x + addOdd xs else addOdd xs
    in
        addOdd list