module Main exposing (..)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)

-- | A view function that takes in a state and returns a list of elements to render
view : Model -> Html Msg
view model =
    div []
        [ h1 [ style "color: red" ] [ text "Welcome to ELM!"]
        , text "This is a complex code snippet in ELM!"
        , button [ onClick Increment ] [ text "+" ]
        , button [ onClick Decrement ] [ text "-" ]
        , h2 [] [text "Current count: "]
        , text (toString model.count) --converts the count to a string for rendering
        ]

-- | A model type that stores the current count
type alias Model =
    { count : Int
    }

-- | A message type that defines the different actions that can be performed
type Msg
    = Increment
    | Decrement

-- | A function to update the model based on the action performed
update : Msg -> Model -> Model
update msg model =
    case msg of
        Increment ->
            { model | count = model.count + 1 }

        Decrement ->
            { model | count = model.count - 1 }

main : Program () Model Msg
main =
    Browser.sandbox
        { init = { count = 0 }
        , update = update
        , view = view
        }