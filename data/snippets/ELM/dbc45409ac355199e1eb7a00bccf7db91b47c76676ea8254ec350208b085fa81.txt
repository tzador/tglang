-- This code snippet shows how to implement the merge sort algorithm in Elm language
-- Variable assignments using the let keyword
let
  -- Define the merge function which takes two lists as input
  merge list1 list2 =
    case (list1, list2) of
      (_, []) -> list1
      ([], _) -> list2
      (head1 :: tail1, head2 :: tail2) ->
        if head1 < head2 then
          head1 :: merge tail1 list2
        else
          head2 :: merge list1 tail2
        
  -- Define the mergeSort function which takes a list as input
  mergeSort list =
    case list of
      [] -> []
      [single] -> [single]
      _ ->
        let
          -- Split the list into two halves
          (firstHalf, secondHalf) = list |> List.splitAt (List.length list // 2)
        in
          -- Recursively call mergeSort on the two halves
          merge (mergeSort firstHalf) (mergeSort secondHalf)
          
-- Sample list as input
sampleList = [5, 3, 7, 1, 9, 2, 4, 6, 8]

-- Call mergeSort function on the sample list and store the output in a new variable
sortedList = mergeSort sampleList

-- Output the sorted list
sortedList