-- This code snippet is a function that performs binary search on a given list. 
-- Input: A list of integers and a target integer to be searched for.
-- Output: The index of the target integer in the list if found, or -1 if not found.

-- The function takes in three parameters: 
-- (1) the list to be searched, 
-- (2) the start index of the list (initially 0), and 
-- (3) the end index of the list (initially the length of list - 1). 

binarySearch : List Int -> Int -> Int -> Int
binarySearch list start end =
    if start > end then
        -1
    else 
        let
            -- Calculates the middle index of the list.
            mid = (start + end) // 2

            -- Compares the middle element with the target.
            compare = compare (list !! mid) target  
        in
        if compare == EQ then
            mid
        else if compare == LT then
            -- If the middle element is less than the target, 
            -- recursively call the function with the start index as the index right after the middle index.
            binarySearch list (mid + 1) end
        else 
            -- If the middle element is greater than the target, 
            -- recursively call the function with the end index as the index right before the middle index.
            binarySearch list start (mid - 1)
            
-- Example usage:
binarySearch [1, 5, 10, 15, 20] 0 4
-- Output: 3 (since 15 is found at index 3 in the list)