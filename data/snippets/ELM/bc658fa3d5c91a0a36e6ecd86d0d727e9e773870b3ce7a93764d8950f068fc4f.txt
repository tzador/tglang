type alias Todo =
    { title : String
    , description : String
    , dueDate : Maybe Date
    , completed : Bool
    }


type alias Model =
    { todos : List Todo
    , filter : Filter
    }


type Filter
    = All
    | Active
    | Completed


type Msg
    = AddTodo Todo
    | UpdateTodo Int Todo
    | DeleteTodo Int
    | ToggleFilter Filter


initialModel : Model
initialModel =
    { todos = []
    , filter = All
    }


update : Msg -> Model -> Model
update msg model =
    case msg of
        AddTodo newTodo ->
            { model | todos = newTodo :: model.todos }

        UpdateTodo index updatedTodo ->
            let
                updatedTodos =
                    List.map (\(i, todo) -> if i == index then updatedTodo else todo) (List.indexed model.todos)
            in
            { model | todos = updatedTodos }

        DeleteTodo index ->
            let
                remainingTodos =
                    List.filter (\(i, _) -> i /= index) (List.indexed model.todos)
            in
            { model | todos = remainingTodos }

        ToggleFilter newFilter ->
            { model | filter = newFilter }