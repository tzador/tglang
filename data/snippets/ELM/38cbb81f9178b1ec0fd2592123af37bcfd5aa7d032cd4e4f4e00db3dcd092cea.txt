-- Define a type alias for a custom data type
type alias Person =
    { name : String -- Define a field with a String value
    , age : Int -- Define a field with an Int value
    , height : Float -- Define a field with a Float value
    }

-- Create a function that takes in a Person value and returns a String
ageDescription : Person -> String
ageDescription person =
    case person.age of -- Conditionally match on the age field of the Person value
        0 -> "Newborn" -- If the age is 0, return "Newborn"
        1 -> "Infant" -- If the age is 1, return "Infant"
        2 -> "Toddler" -- If the age is 2, return "Toddler"
        3 -> "Preschooler" -- If the age is 3, return "Preschooler"
        4 -> "Kindergartener" -- If the age is 4, return "Kindergartener"
        _ -> "Child" -- If the age is anything else, return "Child"
    ++ " " ++ person.name -- Append the name field of the Person value to the end of the age description

-- Define a list of Person values
people : List Person
people =
    [ Person "John" 27 5.7 -- Create a Person value with the name "John", age 27, and height 5.7
    , Person "Mary" 32 5.2 -- Create a Person value with the name "Mary", age 32, and height 5.2
    , Person "Bob" 45 6.1 -- Create a Person value with the name "Bob", age 45, and height 6.1
    ]

-- Map the ageDescription function over the list of Person values
descriptions : List String
descriptions =
    List.map ageDescription people -- Store the results in a new list called descriptions

-- Print out the age descriptions for each person
main : Program ()
main =
    descriptions -- Use the descriptions list as the main function to print out the age descriptions
        |> List.map (\desc -> "-- " ++ desc) -- Prepend each age description with "-- "
        |> String.join "\n" -- Join all the age descriptions with a new line character
        |> Html.text -- Convert the final string into an Elm text element
        |> Html.print -- Print out the age descriptions to the console