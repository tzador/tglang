module Main exposing (..)

import Dict exposing (..)
import Html exposing (..)
import List exposing (..)

{-| 
    This function takes in a list of strings and converts it into a
    sorted dictionary where the key is the length of the string and the
    value is a list of the strings with the same length.
-}
createSortedDict : List String -> Dict Int (List String)
createSortedDict strings =
    let
        dict =
            empty
    in
        List.foldl (\strs dict -> addToSortedDict strs dict) dict strings

{-|
    This function adds a list of strings into a sorted dictionary
    based on the length of the strings.
-}
addToSortedDict : List String -> Dict Int (List String) -> Dict Int (List String)
addToSortedDict strings dict =
    List.foldl (\str dict -> addToDict str dict) dict strings

{-|
    This function adds a string into a dictionary based on the length
    of the string, and sorts it based on the alphabetical order.
-}
addToDict : String -> Dict Int (List String) -> Dict Int (List String)
addToDict str dict =
    case get (String.length str) dict of
        Nothing ->
            insert (String.length str) [str] dict

        Just strs ->
            insert (String.length str) (List.sort (str :: strs)) dict

-- Example usage:
-- createSortedDict ["apple", "banana", "cat", "dog", "elephant"]
-- Output: Dict.fromList [(3,["cat","dog"]), (4,["apple"]), (5,["banana"]), (8,["elephant"])]