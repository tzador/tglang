-- | Allows users to input a list of numbers and return the sum of the list.
module SumList exposing (sumList)

{-|
 Takes in a list of integers and returns the sum of the list.
-}
sumList : List Int -> Int
sumList numbers =
    let
        -- Create an accumulator variable for the sum.
        sum = 0
        -- Define a recursive function to add each number to the sum.
        addNumbers : List Int -> Int -> Int
        addNumbers remainingList acc =
            case remainingList of
                -- Base case: if the list is empty, return the accumulator.
                [] ->
                    acc
                -- Recursive case: add the first number in the list to the accumulator and call the function again with the remaining list.
                x :: xs ->
                    addNumbers xs (acc + x)
    in
    -- Call addNumbers function with the given list and initial accumulator value.
    addNumbers numbers sum