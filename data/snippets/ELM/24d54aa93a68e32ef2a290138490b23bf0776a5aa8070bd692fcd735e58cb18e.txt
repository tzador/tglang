-- This is a code snippet in ELM language

module Main exposing (..)

import Html exposing (Html, div, text)
import Http
import Json.Decoder exposing (..)
import Json.Encode

-- Custom type for game states
type alias GameState =
    { score : Int
    , level : Int
    , isPaused : Bool
    }

-- Game initial state
initialState : GameState
initialState =
    { score = 0
    , level = 0
    , isPaused = False
    }

-- Msg type for updating game states
type Msg
    = IncrementScore Int
    | SetLevel Int
    | TogglePause Bool

-- Update function to handle incoming messages and update game states
update : Msg -> GameState -> GameState
update msg model =
    case msg of
        IncrementScore amount ->
            { model | score = model.score + amount }

        SetLevel level ->
            { model | level = level }

        TogglePause value ->
            { model | isPaused = value }

-- View function to display game states as HTML
view : GameState -> Html Msg
view model =
    div []
        [ div [] [ text (toString model.score) ]
        , div [] [ text (toString model.level) ]
        , div [] [ text (toString model.isPaused) ]
        ]

-- HTTP request to save game state
saveGame : GameState -> Cmd Msg
saveGame model =
    Http.post
        { url = "https://example.com/save"
        , body = model |> Json.Encode.object
            [ ( "score", Json.Encode.int model.score )
            , ( "level", Json.Encode.int model.level )
            , ( "isPaused", Json.Encode.bool model.isPaused )
            ]
        , expect = Http.expectString (\response -> case response of
            Ok _ -> SaveSuccess
            Err _ -> SaveFailed)
        }