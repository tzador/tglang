module Main exposing (Model, Msg(..), init, update, view)

-- Model type definition
type alias Model =
    { name : String
    , age : Int
    , address : String
    , hobbies : List String
    }

-- Msg type definition for updating the model
type Msg
    = ChangeName String
    | ChangeAge Int
    | ChangeAddress String
    | AddHobby String
    | RemoveHobby String

-- initial model with default values
init : Model
init =
    { name = ""
    , age = 0
    , address = ""
    , hobbies = []
    }

-- update function to handle different messages and update the model accordingly
update : Msg -> Model -> Model
update msg model =
    case msg of
        ChangeName newName ->
            { model | name = newName }

        ChangeAge newAge ->
            { model | age = newAge }

        ChangeAddress newAddress ->
            { model | address = newAddress }

        AddHobby newHobby ->
            { model | hobbies = newHobby :: model.hobbies }

        RemoveHobby hobbyToRemove ->
            { model | hobbies = List.filter (\hobby -> hobby /= hobbyToRemove) model.hobbies }

-- view function to display the current model data
view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "Personal Information" ]
        , p [] [ text ("Name: " ++ model.name) ]
        , p [] [ text ("Age: " ++ (toString model.age)) ]
        , p [] [ text ("Address: " ++ model.address) ]
        , ul [] (List.map (\hobby -> li [] [ text hobby ]) model.hobbies)
        ]