-- An example function that takes in two lists and concatenates them into one large list
concatLists : List a -> List a -> List a
-- The function takes in two parameters, both of type List a
concatLists list1 list2 = 
-- The equals sign denotes the beginning of the function body
  case (list1, list2) of
  -- The case expression specifies different patterns that the function can handle
    ([], _) ->
    -- An empty list is matched with underscores, which indicates we don't care what value is there
      list2
    -- If the first list is empty, we simply return the second list
    (x :: xs, _) ->
    -- A cons pattern is used to match the first element and remaining elements of the first list
      x ::(concatLists xs list2)
    -- If the first list is not empty, the first element is attached to the beginning of the concatenated list
  -- The function is recursively called until all elements of the first list are added to the concatenated list
-- Example usage: concatLists [1,2,3] [4,5,6] would return [1,2,3,4,5,6]