-- Define a custom type called 'Message'
type Message
    = NewMessage String -- Represents a new message with a specified string value
    | WasRead Bool      -- Represents whether a message has been read yet, with a boolean value

-- Define a function that takes in a list of Messages and returns the number of unread messages
unreadMessages : List Message -> Int
unreadMessages messages =
    let
        -- Use a local helper function to count the number of unread messages
        count : Int -> List Message -> Int
        count accum msgs =
            case msgs of
                [] -> accum -- Base case: return the accumulator value when the list is empty
                (NewMessage _) :: rest -> count (accum + 1) rest -- If the current message is new, add 1 to the accumulator and recurse on the rest of the list
                (WasRead read) :: rest -> if not read then count (accum + 1) rest else count accum rest --If the current message has not been read, add 1 to the accumulator, otherwise recurse on the rest of the list without changing the accumulator
    in
        count 0 messages -- Call the helper function with an initial accumulator value of 0 and the given list of messages