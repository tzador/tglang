-- This is a comment in ELM

-- This function takes in two integers as parameters and returns the result
-- of their division
divide : Int -> Int -> Float
divide a b =
    (toFloat a) / (toFloat b)

-- This function takes in a list of strings and returns a concatenated string
concatenate : List String -> String
concatenate strings =
    List.foldl (\x y -> x ++ y) "" strings

-- This function takes in a list of tuples and returns the sum of the
-- second elements in each tuple
sumSecondElements : List (Int, Int) -> Int
sumSecondElements pairs =
    List.foldl (\acc (x,y) -> acc + y) 0 pairs

-- This function creates a HTML element with the given tag name, attributes and
-- child nodes
makeElement : String -> List (String, String) -> List String -> String
makeElement tagName attributes childNodes =
    "<" ++ tagName ++ " " ++
        (List.foldl (\(attr, val) acc -> acc ++ attr ++ "=\"" ++ val ++ "\" ") "" attributes) ++
        ">" ++ (concatenate childNodes) ++ "</" ++ tagName ++ ">"