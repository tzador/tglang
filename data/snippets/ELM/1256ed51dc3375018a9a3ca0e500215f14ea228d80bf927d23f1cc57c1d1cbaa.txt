-- Define the fibonacci function
fib : Int -> Int
fib n =
  if n < 2 then
    1
  else
    fib (n - 1) + fib (n - 2)

-- Generate list of fibonacci numbers
fibList : List Int
fibList =
  List.range 0 10 |> List.map fib

-- Define a custom type for a person
type alias Person =
  { name : String
  , age : Int
  , gender : String
  }

-- Calculate the average age of a list of people
avgAge : List Person -> Int
avgAge people =
  let
    total = List.foldl (\person acc -> acc + person.age) 0 people
    len = List.length people
  in
    total // len

-- Define a button component
type alias Button =
  { label : String
  , onClick : () -> Cmd msg
  }

-- Create a simple counter app
type Msg
  = Increment
  | Decrement

type alias Model =
  { count : Int
  }

init : Model
init =
  { count = 0
  }

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    Increment ->
      ({ model | count = model.count + 1 }, Cmd.none)
    Decrement ->
      ({ model | count = model.count - 1 }, Cmd.none)

view : Model -> Html Msg
view model =
  div []
    [ button [ onClick Decrement ] [ text "-" ]
    , div [] [ text (String.fromInt model.count) ]
    , button [ onClick Increment ] [ text "+" ]
    ]