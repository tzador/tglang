-- Creates a list of shapes and calculates their total area

module Shapes exposing (..)

import Color exposing (..)

{-| A type alias for a shape, with a string name and a tuple representing its size or position. 
For circles and squares, the tuple represents the radius or side length; 
for rectangles, the tuple represents the length and width.
-}
type alias Shape =
    ( String, ( Float, Float ) )


{-| A list of shapes with different names and dimensions 
-}
shapes : List Shape
shapes =
    [ ( "circle", ( 5, 0 ) )
    , ( "square", ( 10, 0 ) )
    , ( "rectangle", ( 8, 6 ) )
    ]

{-| Calculates the area of a circle given its radius 
-}
circleArea : Float -> Float
circleArea radius =
    pi * radius^2


{-| Calculates the area of a square given its side length 
-}
squareArea : Float -> Float
squareArea side =
    side * side


{-| Calculates the area of a rectangle given its length and width
-}
rectangleArea : Float -> Float -> Float
rectangleArea length width =
    length * width


{-| Calculates the total area of a list of shapes by matching the shape name to its corresponding area function and summing the results 
-}
totalArea : List Shape -> Float
totalArea shapes =
    List.map
        (\shape ->
            case shape of
                ( "circle", ( radius, _ ) ) ->
                    circleArea radius

                ( "square", ( side, _ ) ) ->
                    squareArea side

                ( "rectangle", ( length, width ) ) ->
                    rectangleArea length width
        )
        shapes
        |> List.sum


main : String
main =
    "Total area of all shapes is " ++ (toString (totalArea shapes))