module Main exposing (main)

{- This module contains a function that calculates the prime factorization of a given number -}

main : List Int -> List Int
main numbers =
    List.map (\x -> primeFactors x) numbers

{- Function that calculates the prime factors of a given number -}

primeFactors : Int -> List Int
primeFactors number =
    case number of
        0 ->
            [0] -- 0 has no prime factors

        1 ->
            [1] -- 1 is not a prime number

        _ ->
            List.concatMap (\x -> if number % x == 0 then x :: primeFactors (number // x) else []) (2 .. number // 2)

{- A helper function that checks if a number is prime -}

isPrime : Int -> Bool
isPrime number =
    case number of
        2 ->
            True

        _ ->
            not (List.member False (List.map (\x -> number % x /= 0) [2 .. number // 2]))

`This code snippet contains a module called Main that exposes a function called main which takes in a list of integers and returns a list of prime factors for each number in the input list. The main function utilizes a helper function called primeFactors which calculates the prime factors of a given number using the concatMap function. The primeFactors function itself also uses another helper function called isPrime to check if a number is prime. This code snippet showcases basic functional programming concepts in ELM.`