-- Defines a custom type called 'ProgrammingLanguage'
type ProgrammingLanguage 
    = Functional [String] [String]
    | ObjectOriented [String] [String] 
    | Markup [String] [String]

-- Creates a list of programming languages
languages : List ProgrammingLanguage 
languages =
    [ Functional ["Haskell", "ELM"] ["Static Typing", "Functional Paradigm"]
    , ObjectOriented ["Java", "Python"] ["Dynamic Typing", "Object-Oriented Paradigm"]
    , Markup ["HTML", "CSS"] ["Web Development"]
    ]

-- Maps through the list of programming languages and returns a list of strings
-- containing the name of the language and its respective paradigm
languageParadigms : List String 
languageParadigms =
    List.map (\language -> 
        case language of 
            Functional names paradigms -> 
                names ++ ["is a functional programming language with " ++ paradigms]
            ObjectOriented names paradigms ->
                names ++ ["is an object-oriented programming language with " ++ paradigms]
            Markup names paradigms ->
                names ++ ["is a markup language used for " ++ paradigms]
        ) languages