{-# LANGUAGE FlexibleInstances, TypeSynonymInstances #-}
module Main exposing (..)

import Html exposing (text, div, button)
import String exposing (toUpper)

-- The `Person` type will represent a person and will have fields for `name` and `age`
type alias Person =
    { name : String
    , age : Int
    }

-- `personList` is a list of `Person` records.
personList : List Person
personList =
    [Person "John" 32, Person "Jane" 29, Person "Michael" 45]

-- Renders each `Person` in `personList` as a `div` element with their name and age.
personDivs : List (Html Msg)
personDivs =
    List.map personToDiv personList

-- Converts a single `Person` record to a `div` element.
personToDiv : Person -> Html Msg
personToDiv person =
    div [] [ text ("Name: " ++ toUpper person.name), text ("Age: " ++ toString person.age) ]

-- Defines our main `Html` page
main : Html msg
main =
    div [] [ button [ onClick ShowPersons ] [ text "Show Persons" ]
    , div [] personDivs -- Here we put the rendered `personDivs` list
    ]


-- Defines our `Msg` type for handling events
type Msg = ShowPersons | HidePersons

-- We handle our `ShowPersons` event by displaying our `main` page.
-- As a side-effect we handle the event by logging to the console
-- that we want to show the `personList`.
update : msg -> model -> (model, Cmd msg)
update msg model =
    case msg of
        ShowPersons ->
            let
                _ = Debug.log "Showing person list:" personList
            in
                (model, Cmd.none)

        HidePersons ->
            (model, Cmd.none)


-- Renders our main `Html` page
view : model -> Html Msg
view _ =
    main

-- The entry point for our program.
-- This is where the Elm runtime starts and takes over.
-- We specify our `update` and `view` functions here.
-- We also use `Debug.crash` as the initial model.
main : Program () Model Msg
main =
    Browser.element
        { init = init
        , update = update
        , subscriptions = subscriptions
        , view = view
        }