module Main exposing (main)

import Browser exposing (Document, document)
import Html.Attribute exposing (..)
import Html.Events exposing (onClick)
import Html exposing (Html, text)

-- Define a type alias for a string and a list of strings
type alias StringList =
    ( String, List String )


-- Define a function that takes in a string and a list of strings and
-- returns a list of HTML elements
makeList : String -> List String -> List (Html msg)
makeList title items =
    [ text title
    , Html.ul (List.map listItem items)
    ]


-- Define a function that takes in an item and returns a list item
listItem : String -> Html msg
listItem item =
    Html.li [ onClick (item ++ " was clicked!") ] [ text item ]


-- Define an initial model with an empty string and an empty list
initialModel : StringList
initialModel =
    ( "", [] )


-- Define an update function that takes in a message and updates the model
-- accordingly
type Msg
    = SetTitle String
    | AddItem String
    | RemoveItem String


update : Msg -> StringList -> StringList
update msg (title, items) =
    case msg of
        SetTitle newTitle ->
            ( newTitle, items )

        AddItem item ->
            ( title, item :: items )

        RemoveItem item ->
            ( title, List.filter (>/= item) items )


-- Define a view function that takes in the current model and returns the HTML
view : StringList -> Html Msg
view (title, items) =
    Html.div
        []
        [ Html.h1 [] [ text title ]
        , Html.form
            [ onSubmit (AddItem "" |> targetValue) ]
            [ Html.input
                [ onInput SetTitle |> value title ]
                []
            , Html.button [ type_ "submit" ] [ text "Add Item" ]
            ]
        , Html.div [] (makeList "Items:" items)
        ]


-- Define the main function that starts the application
main : Program () StringList Msg
main =
    Browser.document
        { init = initialModel, update = update, view = view }