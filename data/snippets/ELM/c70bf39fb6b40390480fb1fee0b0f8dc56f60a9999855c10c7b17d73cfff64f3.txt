--This code snippet is a function that implements a basic calculator in ELM
--It takes in two integer inputs and a string representing the operator
--It outputs the result of the calculation

calculate : Int -> Int -> String -> Int 
calculate num1 num2 operator = 
  case operator of 
    "+" -> num1 + num2 
    "-" -> num1 - num2 
    "*" -> num1 * num2 
    "/" -> num1 / num2
    _ -> error "Invalid operator entered."

main = 
  Html.beginnerProgram { model = { num1 = 0, num2 = 0, result = 0 }, view = view, update = update } 

type Msg = 
  SetNum1 Int | 
  SetNum2 Int | 
  SetResult Int

update : Msg -> Model -> (Model, Cmd Msg)
update msg model = 
  case msg of 
    SetNum1 num1 -> ({ model | num1 = num1 }, Cmd.none) 
    SetNum2 num2 -> ({ model | num2 = num2 }, Cmd.none) 
    SetResult result -> ({ model | result = result }, Cmd.none) 


view : Model -> Html Msg
view model = 
  Html.div [] 
    [ Html.input 
        [ Html.Attributes.onInput SetNum1, Html.Attributes.type_ "number" ] 
        [ Html.input 
            [ Html.Attributes.onInput SetNum2, Html.Attributes.type_ "number" ] 
            [ Html.select 
                [ Html.Events.onInput SetOperator ] 
                [ Html.option [ Html.Attributes.value "+" ] [ Html.text "+" ] 
                , Html.option [ Html.Attributes.value "-" ] [ Html.text "-" ] 
                , Html.option [ Html.Attributes.value "*" ] [ Html.text "*" ] 
                , Html.option [ Html.Attributes.value "/" ] [ Html.text "/" ] 
                ] 
            ] 
        ] 
    , Html.button [ Html.Events.onClick Calculate ] [ Html.text "Calculate" ] 
    , Html.text ("Result: " ++ (toString model.result)) 
    ] 

Calculate : Model -> Cmd Msg 
Calculate model = 
  case (model.num1, model.num2, model.operator) of 
    (Just num1, Just num2, Just operator) -> 
      model.result = calculate num1 num2 operator
    _ -> error "Inputs and operator must be valid."