-- Define a function that takes in a list of integers and returns the sum
sum : List Int -> Int
sum xs =
    case xs of
        [] -> 0 -- if list is empty, return 0
        (x :: xs) -> x + sum xs -- recursively call sum function with remaining list and add current element
        
-- Define a custom type for a binary tree with either a leaf containing an integer or a branch with two child nodes
type Tree
    = Leaf Int
    | Branch Tree Tree

-- Define a function that takes in a tree and returns the sum of all its elements
treeSum : Tree -> Int
treeSum tree =
    case tree of
        Leaf n -> n -- if tree is a leaf, return value
        Branch left right -> treeSum left + treeSum right -- recursively call treeSum function on left and right child nodes and add results