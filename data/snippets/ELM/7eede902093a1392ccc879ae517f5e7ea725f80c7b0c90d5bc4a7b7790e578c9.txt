--Defining a custom type called 'Person' with two fields, 'name' and 'age' 
type Person = 
  Person 
    { name : String
    , age : Int
    }

--Creating an empty list of type Person
personList : List Person
personList = []

--Defining a function to add a new person to the list with pattern matching
addPerson : Person -> List Person -> List Person
addPerson newPerson existingPeople =
  existingPeople ++ [newPerson]

--Function to get the average age of all the people in the list
getAverageAge : List Person -> Float
getAverageAge peopleList =
  let
    --Helper function to get the sum of all ages in the list
    sumAges : List Person -> Int -> Int
    sumAges [] total = total
    sumAges (person :: rest) total = sumAges rest (total + person.age)
    
    --Variable to store the number of people in the list
    numberOfPeople = List.length peopleList
    
    --Variable to store the sum of all ages
    totalAge = sumAges peopleList 0
  in
    --Calculating the average age by dividing the total age by the number of people
    toFloat totalAge / toFloat numberOfPeople