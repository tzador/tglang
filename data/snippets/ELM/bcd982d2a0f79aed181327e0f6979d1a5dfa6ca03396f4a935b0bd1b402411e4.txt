-- Define a type alias for a custom data type, representing a geographic location
type alias Location =
    { latitude : Float
    , longitude : Float
    , altitude : Int
    }

-- Define a list of locations
locations : List Location
locations =
    [ { latitude = 40.7128, longitude = -74.0060, altitude = 100 } -- New York City
    , { latitude = 34.0522, longitude = -118.2437, altitude = 150 } -- Los Angeles
    , { latitude = 41.8781, longitude = -87.6298, altitude = 200 } -- Chicago
    ]

-- Define a function that takes in a list of locations and returns the average altitude
averageAltitude : List Location -> Float
averageAltitude locs =
    let
        -- Auxiliary function that calculates the sum of altitudes in a list of locations
        sumAltitude : List Location -> Int -> Int
        sumAltitude locations total =
            case locations of 
                [] ->
                    total
                (loc :: rest) ->
                    sumAltitude rest (total + loc.altitude)

        -- Calculate the sum of altitudes and convert it to a Float for precision
        sum : Float
        sum =
            toFloat (sumAltitude locs 0)

        -- Calculate the total number of locations
        numLocations : Float
        numLocations =
            toFloat (List.length locs)

    in
    -- Calculate the average altitude by dividing the sum by the number of locations
    sum / numLocations