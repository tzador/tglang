--This code snippet creates a custom type called 'Employee' that has two parameters, name and age
type Employee =
  Employee
    { name : String
    , age : Int
    }

--This code snippet creates a function called 'addEmployee' that takes in an 'Employee' and a list of 'Employee' and appends the new employee to the list
addEmployee : Employee -> List Employee -> List Employee
addEmployee employee employeeList =
  employee :: employeeList

--This code snippet creates a function called 'getEmployeeNames' that maps over a list of 'Employee' and returns a list of their names as strings
getEmployeeNames : List Employee -> List String
getEmployeeNames employeeList =
  employeeList |> List.map .name

--This code snippet creates a function called 'getTotalAges' that maps over a list of 'Employee' and returns the total age of all employees
getTotalAges : List Employee -> Int
getTotalAges employeeList =
  List.map .age employeeList
    |> List.foldl (+) 0

--This code snippet shows an example usage of the above functions by creating a list of employees and using the 'addEmployee' function to add new employees to the list, then using the 'getEmployeeNames' and 'getTotalAges' functions to retrieve information from the list
employeeList : List Employee
employeeList =
  [ Employee "John Smith" 25, Employee "Emily Johnson" 35 ]

updatedList : List Employee
updatedList =
  addEmployee (Employee "Mark Davis" 28) employeeList

names : List String
names =
  getEmployeeNames updatedList

totalAges : Int
totalAges =
  getTotalAges updatedList