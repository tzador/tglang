-- | Function to calculate the nth Fibonacci number
fibonacci : Int -> Int
fibonacci n =
    case n of
        0 -> 0
        1 -> 1
        _ -> fibonacci (n - 1) + fibonacci (n - 2)

-- | Data type for a binary tree
type Tree a
    = Leaf a
    | Branch (Tree a) (Tree a)

-- | Function to check if the given tree is a binary search tree
isBST : Tree Int -> Bool
isBST tree =
    case tree of
        Leaf x ->
            True

        Branch left right ->
            let
                isValidLeftBranch =
                    case left of
                        Leaf a ->
                            True

                        Branch y z ->
                            if a < y then
                                isBST (Branch y z)
                            else
                                False

                isValidRightBranch =
                    case right of
                        Leaf b ->
                            True

                        Branch y z ->
                            if y < b then
                                isBST (Branch y z)
                            else
                                False
            in
                isValidLeftBranch && isValidRightBranch