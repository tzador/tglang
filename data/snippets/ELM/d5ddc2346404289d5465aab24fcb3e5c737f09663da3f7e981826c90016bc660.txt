--This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm

import List exposing (range)

--Function to find prime numbers
primeNumbers : Int -> List Int
primeNumbers n =
    let
        numbers = range 2 n --Create a list of numbers from 2 to n
        sieve : List Int -> List Int --Recursive helper function that marks multiples of prime numbers as non-prime
        sieve (x::xs) =
            if x * x > n
                then x::xs
                else x::(sieve <| List.filter (\y -> y `mod` x /= 0) xs)
    in
        sieve numbers

--Main function to print out the prime numbers
main : IO ()
main =
    let
        upperLimit = 100 --Define the upper limit for prime numbers
        primes = primeNumbers upperLimit --Call the primeNumbers function with the upper limit as argument
        formattedList = List.map toString primes --Convert the list of prime numbers to a list of strings for printing
        output = String.join ", " formattedList --Join the strings in the list with a ", " delimiter
    in
        Html.text <| "The prime numbers from 2 to " ++ (toString upperLimit) ++ " are: " ++ output --Print out the list of prime numbers with a message