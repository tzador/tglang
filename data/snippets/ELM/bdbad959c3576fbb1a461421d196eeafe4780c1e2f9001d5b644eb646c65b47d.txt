{-- This is a comment in ELM language --}
 
module Main exposing (..)

-- This is a module declaration in ELM language

import Html exposing (text, div, button, input, Html)
import Html.Events exposing (onInput, onClick)
import Http exposing (send, post, Request, expectJson, string, Decoder, Json.Decode)
import Json.Decode exposing (Decoder) 

-- These are import statements in ELM language

type alias Person =
    { name : String
    , age : Int
    }

-- This is a type alias in ELM language 

type Msg
    = NameChanged String
    | AgeChanged Int
    | SaveButtonClicked

-- This is a custom type in ELM language

personDecoder : Decoder Person
personDecoder =
    Json.Decode.succeed Person
        |> Json.Decode.andMap (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.andMap (Json.Decode.field "age" Json.Decode.int) 

-- This is a decoder function in ELM language

personToJson : Person -> String
personToJson person =
    Json.Encode.object
        [ ( "name", Json.Encode.string person.name )
        , ( "age", Json.Encode.int person.age )
        ]

-- This is an encoder function in ELM language

view : Person -> Html Msg
view person =
    div []
        [ div [] [ text "Name" ]
        , input [ onInput NameChanged ] []
        , div [] [ text "Age" ]
        , input [ onInput AgeChanged ] []
        , button [ onClick SaveButtonClicked ] [ text "Save" ]
        ]

-- This is a view function in ELM language 

update : Msg -> Person -> Person 
update msg person =
    case msg of
        NameChanged newName ->
            { person | name = newName }
        AgeChanged newAge ->
            { person | age = newAge }
        SaveButtonClicked ->
            person

-- This is an update function in ELM language 

main : Program () Person Msg
main =
    Html.beginnerProgram
        { model = { name = "John", age = 25 }
        , view = view
        , update = update
        }

-- This is the main function in ELM language which initializes the program