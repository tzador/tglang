module Main exposing (main)

import Html exposing (..)
import Json.Decode as Json
import Http

type alias User =
  { name : String
  , age : Int
  , email : String
  }

main : Program () Model Msg
main =
  Html.programWithFlags
    { init = init
    , update = update
    , subscriptions = subscriptions
    , view = view
    }

type alias Model =
  { users : List User
  , loading : Bool
  }

type Msg
  = FetchUsers
  | GotUsers (List User)
  | Error String

init : () -> (Model, Cmd Msg)
init _ =
  ( Model [] True
  , Http.get
      { url = "https://example.com/users"
      , expect = Http.expectJson handleUsersResponse userDecoder
      }
  )

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    FetchUsers ->
      ( { model | loading = True }
      , Http.get
          { url = "https://example.com/users"
          ### , expect = Http.expectJson handleUsersResponse userDecoder
          }
      )
    GotUsers users ->
      ( { model | users = users, loading = False }, Cmd.none )
    Error err ->
      ( { model | loading = False }, Cmd.none )

subscriptions : Model -> Sub Msg
subscriptions _ =
  Sub.none

view : Model -> Html Msg
view model =
  div []
    [ button [ onClick FetchUsers ] [ text "Fetch Users" ]
    , if model.loading
        then text "Loading..."
        else ul [] (List.map userToHtml model.users)
    ]

userToHtml : User -> Html Msg
userToHtml user =
  li [] [ text <| "Name: " ++ user.name ++ ", Age: " ++ user.age ++ ", Email: " ++ user.email ]

userDecoder : Json.Decoder (List User)
userDecoder =
  Json.list <| Json.map3 User
    (Json.field "name" Json.string)
    (Json.field "age" Json.int)
    (Json.field "email" Json.string)