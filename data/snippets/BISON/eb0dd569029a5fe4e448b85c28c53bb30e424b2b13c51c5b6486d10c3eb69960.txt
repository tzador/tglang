// BISON grammar for simple calculator
 
 %token <value> NUM // token for numbers
 %token EXIT // token for exiting the calculator
 
 %left '+' '-' // operators with left associativity
 %left '*' '/' // operators with left associativity
 
 %% // define the grammar rules
 
Calc:
  | NUM                      {$$ = $1;} // rule for calculating single number
  | Calc '+' Calc            {$$ = $1 + $3;} // addition operation
  | Calc '-' Calc            {$$ = $1 - $3;} // subtraction operation
  | Calc '*' Calc            {$$ = $1 * $3;} // multiplication operation
  | Calc '/' Calc            {$$ = $1 / $3;} // division operation
 
Input:
  | Calc ';'                 {printf("Result: %d\n", $1);} // print result
  | EXIT ';'                 {return 0;} // exit the calculator

%% // define the necessary functions
 
int yylex(void); // function for scanning input and returning token
int yyparse(void); // function for parsing input according to grammar rules
 
void yyerror(const char *s) // error handling function
{
  fprintf(stderr, "%s\n", s);
}
 
int main(void) // main function to start the calculator
{
  yyparse(); // parse input
  return 0;
}