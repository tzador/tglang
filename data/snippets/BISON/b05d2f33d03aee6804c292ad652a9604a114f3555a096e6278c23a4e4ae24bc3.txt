%{
// This is a BISON code snippet with multiple rules
// It will be used for parsing an arithmetic expression
// and evaluating its value
#include <stdio.h>

// Global variables to store the result of the evaluation
int result = 0;
int error = 0;
%}

// Define the start symbol for our grammar
%start expression

// Specify the tokens for our lexer
%token NUMBER
%token PLUS '+'
%token MINUS '-'
%token MULTIPLY '*'
%token DIVIDE '/'

%%

// Define the rules for the grammar
expression: NUMBER
          | expression PLUS expression   { result = $1 + $3; }
          | expression MINUS expression  { result = $1 - $3; }
          | expression MULTIPLY expression { result = $1 * $3; }
          | expression DIVIDE expression   { 
              // Check for division by zero
              if ($3 == 0) {
                  printf("Error: Division by zero\n");
                  error = 1;
              }
              else {
                  result = $1 / $3;
              }
          }
          ;

// Specify how to handle errors
error:              { error = 1; }
    ;

// Define a function to evaluate the expression and print the result
eval: expression       { 
        if (error == 0) {
            printf("Result: %d", result);
        }
    }
    ;

%%

// Main function to read input and call the parser
int main()
{
    // Read the input expression from the user
    char input[100];
    printf("Enter an arithmetic expression: ");
    scanf("%s", input);

    // Use the BISON parser to parse the expression and evaluate it
    yyparse();

    // If no errors occurred, print the result
    if (error == 0) {
        printf("Result: %d", result);
    }
    
    return 0;
}

// Function to handle token recognition
int yyLex()
{
    // Token recognition code goes here
    // Return the recognized token as an int
    return token;
}