%{
    // This is a BISON code snippet
    // The %{} indicates a declaration section
    // This section is used to declare C code to be included 
    // in the generated parser
    #include <stdio.h>
    int result = 0;
%}

/* The following section declares the tokens recognized 
by the parser and their corresponding types */

%token NUMBER
%token ADDITION "+"
%token SUBTRACTION "-"
%token MULTIPLICATION "*"
%token DIVISION "/"
%token EQUAL "==" 
%token SEMICOLON ";"

/* The following section defines the grammar rules 
used by the parser */
 
%%
expression:
    NUMBER {
        // The code executed when parsing a NUMBER token
        // In this case, it simply assigns the value to the result variable
        result = $1;
    }
    |
    expression ADDITION expression {
        // The code executed when parsing an addition operation
        // In this case, it adds the values of the two expressions
        result = $1 + $3;
    }
    |
    expression SUBTRACTION expression {
        // The code executed when parsing a subtraction operation
        // In this case, it subtracts the values of the two expressions
        result = $1 - $3;
    }
    |
    expression MULTIPLICATION expression {
        // The code executed when parsing a multiplication operation
        // In this case, it multiplies the values of the two expressions
        result = $1 * $3;
    }
    |
    expression DIVISION expression {
        // The code executed when parsing a division operation
        // In this case, it divides the values of the two expressions
        result = $1 / $3;
    }
    |
    expression EQUAL expression {
        // The code executed when parsing an equality operation
        // In this case, it checks if the two expressions have equal values
        if ($1 == $3) {
            // If they do, set the result variable to 1
            result = 1;
        } else {
            // If not, set the result variable to 0
            result = 0;
        }
    }
    |
    expression SEMICOLON expression {
        // The code executed when parsing a statement separated by a semicolon
        // In this case, it simply sets the result to the value of the second expression
        result = $3;
    }
    ;

// The following section contains C code to be executed 
// after the parser has successfully parsed the input

%%
int main() {
    // The main function where the parser will be used
    // Here, we will input a mathematical expression to be parsed
    // and print the result
    printf("Enter a mathematical expression: ");
    yyparse();
    printf("The result is: %d", result);
    return 0;
}