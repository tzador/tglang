%{
/*This is a bison code snippet to generate a calculator*/
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
int ans = 0;
%}

/*Defining tokens*/

%token NUMBER
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%%

/*Defining rules*/
/*First rule: assigning ans to expression*/
Calculation: ans:expr;

/*Second rule: addition and subtraction*/
expr:
    expr '+' term            /*Addition operation*/
        { ans = $1 + $3; }
    | expr '-' term          /*Subtraction operation*/
        { ans = $1 - $3; }
    | term                   /*If no operation given, just return term*/
        { ans = $1; };

/*Third rule: multiplication and division*/
term:
    term '*' factor         /*Multiplication operation*/
        { ans = $1 * $3; }
    | term '/' factor       /*Division operation*/
        {
            if($3 == 0)
                /*If dividing by zero, print error message*/
                printf("Error: Cannot divide by zero");
            else
                ans = $1 / $3;
        }
    | factor                /*If no operation given, just return factor*/
        { ans = $1; };

/*Fourth rule: power operations*/
factor:
    NUMBER                  /*For numbers*/
        { ans = $1; }
    | '(' expr ')'          /*For parenthesis*/
        { ans = $2; }
    | expr '^' expr         /*For power operation*/
        { ans = (int)pow($1, $3); }
    | '-' expr %prec UMINUS /*For negative number*/
        { ans = -$2; };

%%

int main(int argc, char **argv) {

/*Loop to take user's input*/
while (1) {
    printf("\n Enter your equation: \n");
    yyparse();

    /*Printing the value of ans (the result)*/
    printf("= %d\n", ans);
}
return 0;
}