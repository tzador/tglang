%{
  /* This section is for declaring global variables and writing includes */
  #include <stdio.h>
  #include <stdlib.h>
  int count;
%}

/* Start of grammar */
%%
  /* Section for defining the rules of the grammar */

  program: stmt_list
  ;

  stmt_list: stmt
  | stmt_list ';' stmt
  ;

/* This rule defines an if statement with optional else statement */
  stmt: IF '(' expr ')' '{' stmt_list '}' %prec lower_than_else
  | IF '(' expr ')' '{' stmt_list '}' ELSE '{' stmt_list '}' %prec higher_than_if
  ;

  /* This rule defines a for loop */
  stmt: FOR '(' expr ';' expr ';' expr ')' '{' stmt_list '}'
  ;

  /* This rule defines a while loop */
  stmt: WHILE '(' expr ')' '{' stmt_list '}'
  ;

  /* This rule defines a print statement */
  stmt: PRINT '(' expr ')' ';'
  ;

  /* This rule defines an assignment statement */
  stmt: VARIABLE '=' expr ';'
  ;

  /* This rule defines an expression */
  expr: expr '+' expr
  | expr '-' expr
  | expr '*' expr
  | expr '/' expr
  | expr '%' expr
  | '(' expr ')'
  | INTEGER
  | FLOAT
  | VARIABLE
  ;

 /* End of grammar */

%%
/* This section is for defining the necessary yylex and yyerror functions */
int yylex(void);
void yyerror(char *s);

/* Start of main function */
int main()
{
  /* Initializing variables and getting input from user */
  int input;
  printf("Enter an input: ");
  scanf("%d", &input);

  /* Parsing the input using the defined grammar and checking for errors */
  printf("\nThe input is:\n");

  /* Setting the global variable for count to 0 before start of parsing */
  count = 0;
  yyparse();

  /* Printing the final count of statements */
  printf("\nTotal number of statements in the input: %d\n", count);
  return 0;
}

/* Function for getting next token from input */
int yylex(void)
{
  /* Code for getting next token from input */
}

/* Function for handling parse errors */
void yyerror (char *s)
{
  /* Code for handling parse errors */
}