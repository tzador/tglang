/* Declare rules for a simple arithmetic grammar in BISON */
%token PLUS MINUS MULT DIV // Define tokens for +, -, *, /
%token NUMBER // Define token for numbers
%left PLUS MINUS // Set associativity for addition and subtraction
%left MULT DIV // Set associativity for multiplication and division
%start CALC // Define the starting rule
%%
CALC: EXP {printf("%d",$1);} // Starting rule that prints the result of expression
    | CALC PLUS EXP { $$ = $1 + $3; } // Rule for addition
    | CALC MINUS EXP { $$ = $1 - $3; } // Rule for subtraction
    | CALC MULT EXP { $$ = $1 * $3; } // Rule for multiplication
    | CALC DIV EXP { $$ = $1 / $3; } // Rule for division
EXP: NUMBER // Define rule for a single number
    | EXP PLUS EXP { $$ = $1 + $3; } // Rule for addition of two expressions
    | EXP MINUS EXP { $$ = $1 - $3; } // Rule for subtraction of two expressions
    | EXP MULT EXP { $$ = $1 * $3; } // Rule for multiplication of two expressions
    | EXP DIV EXP { $$ = $1 / $3; } // Rule for division of two expressions
    | '(' EXP ')' { $$ = $2; } // Rule for parentheses around an expression
%%