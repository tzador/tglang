%{
  // This section is used to declare global variables or functions
  int count = 0; // A variable to store the count
  int increment(int num); // A function to increment the count
%}

/* This section defines the tokens used in the grammar */
%token<value> INTEGER // Integer token representing numbers
%token<value> IDENTIFIER // Identifier token representing variable names
%token ADD SUB MUL DIV // Operator tokens representing addition, subtraction, multiplication, and division

/* Definition for the initial non-terminal symbol in the grammar */
%start Program

/* Rules for Program non-terminal symbol */
Program :
  | Program Statement // A recursive rule that allows for multiple statements in the Program
  ;

/* Rules for Statement non-terminal symbol */
Statement :
  | Assignment // Rule for an assignment statement
  | Expression // Rule for an expression statement
  ;

/* Rules for Assignment non-terminal symbol */
Assignment :
  IDENTIFIER '=' Expression { // Rule to assign a value to a variable
    int value = $3; // Store the value of the expression in a variable
    count = increment(value); // Use the increment function to increase the count
  }
  ;

/* Rules for Expression non-terminal symbol */
Expression :
  | INTEGER // Rule for an integer value
  | Expression ADD Expression { $$ = $1 + $3; } // Rule for addition expression
  | Expression SUB Expression { $$ = $1 - $3; } // Rule for subtraction expression
  | Expression MUL Expression { $$ = $1 * $3; } // Rule for multiplication expression
  | Expression DIV Expression { $$ = $1 / $3; } // Rule for division expression
  ;

/* Function to increment the count variable */
int increment(int num) {
  return num + 1;
}

%%

// This section defines any additional code or actions to be performed after the parser has successfully parsed the input. For example, printing out the final count value.

int main() {
  yyparse(); // Calling the parser function 
  printf("Final count: %d\n", count); // Printing out the final count value
  return 0;
}