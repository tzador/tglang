%token <int> INTEGER
%token <double> REAL
%token IDENTIFIER
%token STRING

%%

program:
  program declarations
  |
  program declaration

declarations:
  declaration
  |
  declarations declaration

declaration:
  type_declaration
  |
  variable_declaration
  |
  function_declaration
  |
  procedure_declaration

type_declaration:
  'type' IDENTIFIER '=' type ';'

type:
  'integer' |
  'real' |
  'string' |
  'boolean' |
  'array' '[' INTEGER '..' INTEGER ']' 'of' type

variable_declaration:
  type IDENTIFIER (',' IDENTIFIER)* ';'

function_declaration:
  'function' IDENTIFIER '(' parameters ')' ':' type ';' declarations 'begin' statements 'end' ';'

procedure_declaration:
  'procedure' IDENTIFIER '(' parameters ')' ';' declarations 'begin' statements 'end' ';'

parameters:
  type IDENTIFIER (',' type IDENTIFIER)* |
  empty

statements:
  statement
  |
  statements statement

statement:
  assignment_statement
  |
  function_call
  |
  procedure_call
  |
  if_statement
  |
  while_statement
  |
  for_statement
  |
  return_statement

assignment_statement:
  IDENTIFIER ':=' expression ';'

function_call:
  IDENTIFIER '(' arguments ')' ';'

procedure_call:
  IDENTIFIER '(' arguments ')' ';'

if_statement:
  'if' condition 'then' statements ('else' statements)? 'end' ';'

while_statement:
  'while' condition 'do' statements 'end' ';'

for_statement:
  'for' '(' assignment_statement ';' condition ';' assignment_statement ')' 'do' statements 'end' ';'

return_statement:
  'return' expression ';'

arguments:
  expression (',' expression)* |
  empty

expression:
  expression '+' expression |
  expression '-' expression |
  expression '*' expression |
  expression '/' expression |
  expression '>' expression |
  expression '>=' expression |
  expression '<' expression |
  expression '<=' expression |
  expression '==' expression |
  expression '!=' expression |
  '(' expression ')' |
  IDENTIFIER |
  INTEGER |
  REAL |
  STRING