%code {
    int num = 0; //initialize variable
    float sum = 0; //initialize sum
}

%% //start grammar rules section

start: 
    program { //program rule
        printf("Your total is: %f", sum); //print final sum
    }
    ;

program:
    /* empty */ 
    | program statement 
    ;

statement:
    expression '\n' { //statement rule with newline character
        sum += $1; //add expression value to sum
    }
    ;

expression:
    NUMBER { //expression rule with NUMBER token
        $$ = $1; //set expression value to NUMBER token value
    }
    | expression '+' NUMBER { //expression rule with addition
        $$ = $1 + $3; //set expression value to sum of previous expression and NUMBER
    }
    | expression '-' NUMBER { //expression rule with subtraction
        $$ = $1 - $3; //set expression value to difference of previous expression and NUMBER
    }
    ;
    
%%
//start C code section

#include <stdio.h>

void main() {
    yyparse(); //parse input using generated parser
}

int yyerror(char *msg) {
    printf("Error: %s", msg); //print any syntax errors
}

int yylex() {
    int c = getch(); //get next character from input
    if (isdigit(c)) { //check if character is a digit
        yylval = c - '0'; //set NUMBER token value to digit
        return NUMBER; //return NUMBER token
    }
    else if (c == '\n') { //check for newline character
        return c; //return newline token
    }
    else if (c == EOF) { //check for end of file
        return 0; //return end of file token
    }
    else {
        yyerror("Invalid input!"); //print error if input is not a valid token
    }
}