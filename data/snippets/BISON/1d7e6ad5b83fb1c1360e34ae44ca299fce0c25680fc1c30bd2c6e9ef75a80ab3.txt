%{
#include <stdio.h>
#include <math.h>

int sum = 0;
%}

//Define the input tokens
%token NUM
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token LPAREN
%token RPAREN
%token EXP

//Define the precedence and associativity of operators
%left PLUS MINUS
%left TIMES DIVIDE
%right EXP

//Define the grammar rules
%%

//Grammar rule for expressions with parentheses
expr:   NUM
        |expr PLUS expr
        |expr MINUS expr
        |expr TIMES expr
        |expr DIVIDE expr
        |expr EXP expr
        |LPAREN expr RPAREN
        ;

//Grammar rule for calculating the result
result: expr {printf("Result: %d", sum);};

//Define what actions to take when parsing
%{
//Function to handle reducing a number
int handle_num(int num) {
    sum += num;
    return num;
}

//Function to handle reducing an addition expression
int handle_add(int left, int right) {
    sum += (left + right);
    return sum;
}

//Function to handle reducing a subtraction expression
int handle_sub(int left, int right) {
    sum += (left - right);
    return sum;
}

//Function to handle reducing a multiplication expression
int handle_mul(int left, int right) {
    sum += (left * right);
    return sum;
}

//Function to handle reducing a division expression
int handle_div(int left, int right) {
    sum += (left / right);
    return sum;
}

//Function to handle reducing an exponent expression
int handle_exp(int left, int right) {
    sum += pow(left, right);
    return sum;
}
%}

%%

//Scanner function to return the next token
int yylex(void) {
    int ch;

    //Skip whitespace characters
    while ((ch = getchar()) == ' ');

    //Check for end-of-file
    if (ch == EOF) return 0;

    //Check for number token
    if (ch >= '0' && ch <= '9') {
        ungetc(ch, stdin);
        scanf("%d", &num);
        return NUM;
    }

    //Check for operator tokens
    if (ch == '+') return PLUS;
    if (ch == '-') return MINUS;
    if (ch == '*') return TIMES;
    if (ch == '/') return DIVIDE;
    if (ch == '^') return EXP;

    //Check for parentheses tokens
    if (ch == '(') return LPAREN;
    if (ch == ')') return RPAREN;

    //Invalid token
    return ch;
}

//Parser function to handle grammar rules
void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

//Main function to start the parsing process
int main(void) {
    //Print instructions to user
    printf("Enter an expression: \n");

    //Start parsing process
    yyparse();

    //Print final result
    printf("%d\n", sum);

    return 0;
}