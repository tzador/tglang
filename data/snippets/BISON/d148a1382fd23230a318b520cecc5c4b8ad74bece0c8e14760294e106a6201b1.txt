/* Code snippet to parse a mathematical expression in BISON */

/* Define tokens for each operator and operand */
%token NUM /* numeric value */
%token ADD SUB MUL DIV /* operators +, -, *, / */
%token POW /* operator ^, used for exponentiation */

/* Define operator precedence */
%right ADD SUB /* right associative, e.g. 2 - 3 - 4 = (2 - 3) - 4 */
%left MUL DIV /* left associative, e.g. 2 * 3 / 4 = (2 * 3) / 4 */
%left POW /* higher precedence than MUL and DIV */

%%

/* Define the starting expression */
expression: term;

/* Use a recursive rule to handle multiple terms separated by operators */
expression: expression ADD term | expression SUB term;

/* Define a term as either a number or a sub-expression in parentheses */
term: NUM | '(' expression ')';

/* Use a recursive rule to handle multiple factors separated by operators */
term: term MUL factor | term DIV factor;

/* Define a factor as either a term or an exponentiation operation */
factor: term | factor POW term;

/* Define a rule to handle negative numbers */
term: SUB term %prec ADD;

%%

/* Code to handle parsing errors and printing the result */
int main()
{
    /* Initialize the parser */
    yyparse();

    /* If there are no parsing errors, print the result */
    printf("Result: %d\n", result);

    /* Clean up the parser */
    yylex_destroy();

    return 0;
}