%token <num> INTEGER /* a token for integers */
%token STRING /* a token for strings */
%token OPERATOR /* a token for arithmetic operators */
%token SEMICOLON /* a token for semicolons */

%right '=' /* right associativity for assignment */

%%

program: /* a rule for a program */
    statement_list /* non-terminal for a list of statements */ 
    | /* or */
    ;

statement_list:
    statement_list statement /* recursive rule for statement list */
    | statement /* base case for statement list */
	;

statement:
	var_decl SEMICOLON /* a rule for variable declaration */
	| assignment SEMICOLON /* a rule for assignment */
	| print_statement SEMICOLON /* a rule for printing statements */
	| for_loop /* a rule for for loops */
	;

var_decl:
	VAR IDENTIFIER /* a rule for variables */
	| VAR IDENTIFIER '=' expression /* a rule for initialized variables */
	;

assignment:
	IDENTIFIER '=' expression /* a rule for expression assignment */
	;

print_statement:
	PRINT '(' expression ')' /* a rule for printing expressions */
	;

for_loop:
	FOR '(' assignment SEMICOLON condition SEMICOLON assignment ')' statement_list /* a rule for for loops */
	;

condition:
	expression /* a rule for conditions */
	;

expression:
	expression OPERATOR expression /* a rule for binary expressions */
	| '(' expression ')' /* a rule for grouped expressions */
	| INTEGER /* base case for expressions */
	| STRING /* base case for expressions */
	;

/* Comments are ignored in BISON code, denoted by a '%' */