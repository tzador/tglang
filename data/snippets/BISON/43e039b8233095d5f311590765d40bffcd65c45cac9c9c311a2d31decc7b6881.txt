/* Defining rules for mathematical expressions using BISON grammar */

%{
// This section contains declarations and code to be included in the generated parser
#include <stdio.h> // include standard library for input/output functions

int total = 0; // declares a global variable for storing the final result
%}

/* Defining token types */

%token <num> INTEGER // define token type for integers
%token PLUS MINUS MULT DIV // define token types for operators

/* Writing the grammar rules */

%%

start: expr { // start rule, takes in an expr as input and executes code in braces
    printf("Result: %d", $1); // prints the final result after parsing
}
;

expr: term { // expression rule, takes in a term as input and executes code in braces
    $$ = $1; // assigns value of term to current expression
}
| expr PLUS term { // expression rule for addition, takes in an expression and term as input
    $$ = $1 + $3; // performs addition and assigns result to current expression
}
| expr MINUS term { // expression rule for subtraction, takes in an expression and term as input 
    $$ = $1 - $3; // performs subtraction and assigns result to current expression
}
;

term: factor { // term rule, takes in a factor as input and executes code in braces
    $$ = $1; // assigns value of factor to current term
}
| term MULT factor { // term rule for multiplication, takes in a term and factor as input
    $$ = $1 * $3; // performs multiplication and assigns result to current term
}
| term DIV factor { // term rule for division, takes in a term and factor as input
    $$ = $1 / $3; // performs division and assigns result to current term
}
;

factor: INTEGER { // factor rule, takes in an integer as input
    $$ = $1; // assigns value of integer to current factor
}
| LPAREN expr RPAREN { // factor rule for a group of expressions within parenthesis
    $$ = $2; // assigns value of expression within parenthesis to current factor
}
;

/* Defining the lexical analyzer */

%%

int yywrap() { // wraps up the lexical analyzer
    return 1; // returns 1 to indicate end of input
}

int main() {
    printf("Enter a mathematical expression: "); // prompts user for input
    yyparse(); // starts parsing process
    return 0;
}