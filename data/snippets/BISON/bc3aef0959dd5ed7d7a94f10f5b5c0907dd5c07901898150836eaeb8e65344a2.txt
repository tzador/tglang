%{
#include <stdio.h>

/* This section includes the necessary header files for the Bison code */

int yylex();
void yyerror(const char *s);
int sym[26]; // This array stores the values of the variables

%}

/* This section specifies the tokens and their corresponding rules */

%token INTEGER
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token EXPONENT
%token LPAREN
%token RPAREN
%token ASSIGN

%left PLUS MINUS
%left MULTIPLY DIVIDE
%right EXPONENT

/* This section defines the grammar rules */

%%

/* The start symbol for the grammar is defined here */
program:
    program statement 
    | /* empty */ ;

/* These rules define the statements in the program */
statement:
    declaration 
    | assignment 
    | expression ;

/* This rule defines the declaration of variables */
declaration:
    INTEGER identifier 
    {
        sym[$2-'a'] = 0; // Initialize variable to 0

        printf("Declaration successful!\n");
    };

/* This rule defines the assignment of values to variables */
assignment:
    identifier ASSIGN expression 
    {
        sym[$1-'a'] = $3; // Assign value to variable

        printf("Assignment successful!\n");
    };

/* This rule defines arithmetic expressions */
expression:
    INTEGER 
    | identifier 
    | expression PLUS expression 
    {
        $$ = $1 + $3; // Evaluate and return result
    }
    | expression MINUS expression 
    {
        $$ = $1 - $3; // Evaluate and return result
    }
    | expression MULTIPLY expression 
    {
        $$ = $1 * $3; // Evaluate and return result
    }
    | expression DIVIDE expression 
    {
        $$ = $1 / $3; // Evaluate and return result
    }
    | expression EXPONENT expression 
    {
        $$ = pow($1, $3); // Power function from math.h
    }
    | LPAREN expression RPAREN 
    {
        $$ = $2; // Evaluate and return result
    }
    ;

/* This rule defines identifiers as variables */
identifier:
    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' |
    'n' |'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;

/* This section defines the error handling function */
void yyerror(const char *s) {
    printf("Error: Invalid input\n");
}

/* This section specifies the main function to run the program */
int main(void) {

    printf("Enter an expression to evaluate: ");
    yyparse(); // Call parser function

    return 0;
}

/* This section specifies the lexer function */
int yylex(void) {
    int c;
    while ((c = getchar()) == ' '); // Skip spaces
    if (c == EOF) // End of file
        return 0;
    else if (isdigit(c)) { // Integer token
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return INTEGER;
    }
    else // Other tokens
        return c;
}

%%

/* This section specifies the input function for the parser */
int get_input() {
    if(feof(yyin))
        return 0;
    else
        return yylex();
}

/* This section specifies the output function for the parser */
int yywrap(void) {
    return 1;
}