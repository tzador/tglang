%token NUM
%token IF ELSE WHILE
%token LBRACE RBRACE LBRACKET RBRACKET
%token BOOLEAN TRUE FALSE
%token PLUS MINUS TIMES DIVIDE
%token GT LT EQUALS NOTEQ GTE LTE ASSIGN
// Define a production rule for a statement which can be an if statement or a while loop
statement: IF '(' expression ')' LBRACE statement RBRACE
         | WHILE '(' expression ')' LBRACE statement RBRACE
         ;
// Define a production rule for an if statement that can have multiple else-if branches and a final else branch
if_statement: IF '(' expression ')' LBRACE statement RBRACE %prec GTE
             | IF '(' expression ')' LBRACE statement RBRACE ELSE if_statement
             | IF '(' expression ')' LBRACE statement RBRACE ELSE LBRACE statement RBRACE
             ;
// Define a production rule for a while loop that can also have an optional break statement inside
while_loop: WHILE '(' expression ')' LBRACE statement RBRACE
           | WHILE '(' expression ')' LBRACE statement RBRACE LBRACE BREAK ';' RBRACE
           ;
// Define a production rule for an expression that can handle basic arithmetic operations using nonterminal "term"
expression: expression PLUS term
           | expression MINUS term
           | expression GT term
           | expression GTE term
           | expression LT term
           | expression LTE term
           | expression EQUALS term
           | expression NOTEQ term
           | term
           ;
// Define a production rule for a term that can handle basic arithmetic operations using nonterminal "factor"
term: term TIMES factor
     | term DIVIDE factor
     | factor
     ;
// Define a production rule for a factor that can be a number, boolean value, or an expression surrounded by parentheses
factor: NUM
       | BOOLEAN
       | '(' expression ')'
       ;
// Define a production rule for a variable declaration and assignment statement
declaration: TYPE IDENTIFIER ASSIGN expression ';'
           ;
// Define a production rule for a block of statements that can have multiple declarations and assignment statements
block: LBRACE declarations statement RBRACE
      | LBRACE assignment statement RBRACE
      | LBRACE declaration assignment statement RBRACE
      ;
// Define a production rule for a sequence of declarations
declarations: declaration
            | declarations declaration
            ;
// Define a production rule for an assignment statement to a variable
assignment: IDENTIFIER ASSIGN expression ';'
          ;
// Define a production rule for an identifier that can be a single character or a combination of characters
identifier: LETTER
          | identifier LETTER
          | identifier DIGIT
          ;
// Define a production rule for a type which can be "int", "float" or "string"
type: INT
    | FLOAT
    | STRING
    ;
// Define a production rule for a program which starts with a block of statements
program: block
       ;
// Define a set of rules for defining a syntax error in the program
error: %empty
     | error type error
     | error identifier error
     | error BOOLEAN error
     | error NUM error
     | error ASSIGN error
     | error '+' error
     | error '-' error
     | error '*' error
     | error '/' error
     | error '>' error
     | error '>=' error
     | error '<' error
     | error '<=' error
     | error '==' error
     ;