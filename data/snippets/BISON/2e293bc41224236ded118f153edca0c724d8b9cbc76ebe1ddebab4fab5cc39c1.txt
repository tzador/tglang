/* Start of grammar rules */
%%
program: statement_list | /* empty */ ;

statement_list: statement_list statement | statement ;

statement: simple_statement
          | compound_statement
          | selection_statement
          | iteration_statement
          | jump_statement
          | error_statement
          ;

simple_statement: expression_statement
                 | declaration_statement
                 | return_statement
                 ;

compound_statement: '{' statement_list '}' ;

selection_statement: IF '(' expression ')' statement
                     | IF '(' expression ')' statement ELSE statement
                     | SWITCH '(' expression ')' '{' labeled_statements '}'
                     ;

labeled_statements: label_case labeled_statements
                   | label_case
                   ;

label_case: CASE expression ':' statement_list
           | DEFAULT ':' statement_list
           | /* empty */
           ;

iteration_statement: DO statement WHILE '(' expression ')' ';'
                     | WHILE '(' expression ')' statement
                     | FOR '(' expression_statement expression_statement ')' statement
                     | FOR '(' expression_statement expression_statement expression ')' statement
                     ;

jump_statement: BREAK ';' | CONTINUE ';' | RETURN ';' | RETURN expression ';' ;

error_statement: error ;


/* Start of supporting rules */
%%
expression_statement: expression ';' ;

declaration_statement: VARIABLE ':' type ';' ;

return_statement: RETURN expression ';' ;

expression: expression '+' expression
           | expression '-' expression
           | expression '*' expression
           | expression '/' expression
           | '(' expression ')'
           | CONSTANT
           | VARIABLE ;


type: 'int' | 'float' | 'bool' ;

%%

/* Start of lexical analyzer */
import java_cup.runtime.*;
import java.lang.Exception;

class BisonLexer extends Lexer {

    public static int ERROR = -1;
    private java_cup.runtime.SymbolFactory sf;

    public BisonLexer(java_cup.runtime.SymbolFactory sf) {
        this();
        this.sf = sf;
    }

    public BisonLexer() {
        /* empty constructor */
    }

    public Symbol next_token() throws Exception {
        /* implementation of lexical analyzer goes here */
    }
}