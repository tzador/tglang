%{
    /* This code snippet uses BISON, a parser generator language */
    
    /* Define necessary variables and functions */
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #define MAX_STRING 100
    
    /* Declare tokens */
    %token <str> STRING
    %token <num> INTEGER FLOAT
    %token VARIABLE
    
    /* Define error function */
    void yyerror (const char * msg)
    {
        fprintf (stderr, "%s\n", msg);
        exit (1);
    }
%}

/* Define grammar rules */
%start GREETING
%%
GREETING: "Hello" NAME EOL { printf ("Hello, %s!\n", $2); } |
         "Hi" NAME EOL { printf ("Hi, %s!\n", $2); } |
         "Hey" NAME EOL { printf ("Hey, %s!\n", $2); } |
         "Greetings" NAME EOL { printf ("Greetings, %s!\n", $2); };
         
/* Define subrules and actions */
NAME: STRING { $<str>$ = strdup ($1); } |
      VARIABLE { $<str>$ = malloc (MAX_STRING); strcpy ($<str>$.str, $1); };

EOL: "\n";
%%
/* Define the main function */
int main (int argc, char ** argv)
{
    /* Initialize parser */
    ++argv, --argc;
    yyin = fopen (*argv, "r");
    yyout = stdout;
    
    /* Check for incorrect usage */
    if (argc > 1)
        fprintf (stderr, "Usage: %s [file]\n", argv[0]);
    
    /* Parse input */
    yyparse ();
    
    /* Close input file */
    fclose (yyin);
    return 0;
}