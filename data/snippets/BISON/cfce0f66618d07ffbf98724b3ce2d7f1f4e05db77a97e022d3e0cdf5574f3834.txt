%start expression /* defines a starting rule for the grammar */

%% /* the following section defines the grammar rules */

/* rule for an expression consisting of a number */
expression: NUM { printf("The expression consists of a number."); };

/* rule for an expression consisting of a variable */
expression: VAR { printf("The expression consists of a variable."); };

/* rule for an expression consisting of a binary operation */
expression: expression '+' expression
    { printf("The expression is a binary operation with addition."); };

/* rule for an expression consisting of a unary operation */
expression: '-' expression %prec UNARY
    { printf("The expression is a unary operation with negation."); };

/* rule for an expression consisting of parentheses */
expression: '(' expression ')'
    { printf("The expression is enclosed in parentheses."); };

/* rule for an expression consisting of an if statement */
expression: IF expression THEN expression ELSE expression; {
    printf("The expression is an if statement with the condition being the first expression, the first expression being executed if the condition is true, and the second expression being executed if the condition is false."); };

/* rule for an expression consisting of a while loop */
expression: WHILE expression DO expression; {
    printf("The expression is a while loop with the condition being the first expression and the second expression being executed while the condition is true."); };
%% /* the end of grammar rules section */

/* the following section defines the lexical analyzer rules */
/* rules for numbers */
%token <num> NUM
num: [0-9]+ { $$ = atoi(yytext); };

/* rules for variables */
%token <var> VAR
var: [a-zA-Z]+ { strcpy($$, yytext); };

/* ignore whitespace */
%skip [ \t\n]

%% /* the end of lexical analyzer rules section */