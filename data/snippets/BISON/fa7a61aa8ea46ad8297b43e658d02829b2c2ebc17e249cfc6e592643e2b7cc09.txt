%{
// This is a Bison code snippet
// Created by [Your Name]
// on [Today's Date]
%}

%token <char*> IDENTIFIER // Define token for identifier

// Define non-terminal symbols
%start EXPRESSION
%type <char*> EXPRESSION: // Expression returns a char pointer
%type <char*> STRING: // String returns a char pointer

// Define grammar rules
%%

EXPRESSION: IDENTIFIER { // Use identifier as expression
    $$ = strdup($1); // Duplicate string from $1 (identifier) to $$ (output)
}
| IDENTIFIER '=' EXPRESSION { // Assign an expression to an identifier
    printf("%s = %s\n", $1, $3); // Print assignment statement
    $$ = strdup($3); // Duplicate string from $3 (expression) to $$ (output)
}
| '(' EXPRESSION ')' { // Use parentheses to group expressions
    $$ = $2; // Return output from inner expression
}
| EXPRESSION '+' EXPRESSION {
    char* temp = malloc(strlen($1) + strlen($3) + 2); // Allocate memory for new string
    strcpy(temp, $1); // Copy first expression into temp
    strcat(temp, " + "); // Concatenate '+' symbol
    strcat(temp, $3); // Concatenate second expression
    $$ = temp; // Set output to temp
}

STRING: "'" IDENTIFIER "'" { // Define string using single quotes
    $$ = $2; // Return identifier as string
}
| '"' IDENTIFIER '"' { // Define string using double quotes
    char* temp = malloc(strlen($2) + 2); // Allocate memory for new string
    strcpy(temp, "\""); // Add double quotes at beginning
    strcat(temp, $2); // Concatenate identifier
    strcat(temp, "\""); // Add double quotes at end
    $$ = temp; // Set output to temp
}

%%

// Define function to handle syntax errors
void yyerror (char const *s) {
    fprintf (stderr, "%s\n", s);
}

// Define main function
int main() {
    yyparse(); // Call parser function
    return 0;
}

// Flex code for tokenizing
int yywrap() {
    return 1; // End tokenizing
}

// Flex code for recognising tokens
%option noinput
%option nounput
%option noyywrap
%option never-interactive
%option reentrant bison-bridge" %{
       
char* yy_myString = NULL;
%}

%%
  
[ \n\t]+  // Ignore whitespace
[0-9]+ {
    // Return integer token
    $$ = strdup(yytext);
}
[0-9]*\.[0-9]+ {
    // Return float token
    $$ = strdup(yytext);
}
[a-zA-Z]+ [a-zA-Z0-9]+ {
     // Check if identifier is a keyword
     if(strcmp(yytext, "if") == 0 || strcmp(yytext, "then") == 0 || strcmp(yytext, "else") == 0) {
        // If keyword, return keyword token
        $$ = strdup(yytext);
     }
     else {
        // If not keyword, return identifier token
        $$ = strdup(yytext);
     }
}
"(" {
    // Return left parentheses token
    $$ = strdup(yytext);
}
")" {
    // Return right parentheses token
    $$ = strdup(yytext);
}
"+" {
    // Return plus sign token
    $$ = strdup(yytext);
}
"=" {
    // Return equals sign token
    $$ = strdup(yytext);
}
"'" {
    // Return single quote token
    yy_myString = malloc(sizeof(char) * 128); // Allocate memory for string
    int index = 0; // Index of current character in string
    char c; // Current character
    while((c = getchar()) != '\'') { // Loop until closing single quote is found
        yy_myString[index] = c; // Add character to string
        index++; // Increment index
    }
    yy_myString[index] = '\0'; // Add null character at end
    yytext = yy_myString; // Point yytext to yy_myString
    return '\'';
}
'"' {
    // Return double quote token
    yy_myString = malloc(sizeof(char) * 128); // Allocate memory for string
    int index = 0; // Index of current character in string
    char c; // Current character
    while((c = getchar()) != '"') { // Loop until closing double quote is found
        yy_myString[index] = c; // Add character to string
        index++; // Increment index
    }
    yy_myString[index] = '\0'; // Add null character at end
    yytext = yy_myString; // Point yytext to yy_myString
    return '"';
}

%%

int main() {
    yylex(); // Call lexer function
    return 0;
}