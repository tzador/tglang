%{
    /* This section is used for declaring global variables, functions and other user-defined code. */
    #include <stdio.h>

    int sum = 0; //Initializing global variable 'sum' with a value of 0 
    int total = 0; //Initializing global variable 'total' with a value of 0

    /* Function to calculate sum of two numbers */
    int add_nums(int a, int b) {
        return a + b;
    }

    /* Function to calculate factorial of a number */
    int factorial(int num) {
        if (num <= 1) {
            return 1;
        }
        return num * factorial(num - 1);
    }
%}

/* The following section declares the tokens and their respective types. */
DIGIT [0-9]
LETTER [a-zA-Z]
SPACE [ \t]

%%

/* The following section contains the grammar rules for the language. */
/* Productions are of the form: Non-terminal: definition; */
/* Multiple definitions can be separated by '|' symbol. */
/* {} is used to indicate zero or more occurrences and [] is used to indicate optional occurrences. */

Integer: {DIGIT}+ {sum += atoi(yytext);} /* Match one or more digits and add their values to 'sum' variable. */
Float: {DIGIT}+"."{DIGIT}+|("."{DIGIT}+|[DIGIT]+"."|[DIGIT]+)"."{DIGIT}+; /* Match decimal numbers with different formats. */
Variable: {LETTER}({DIGIT}|{LETTER})*; /* Match variables with a starting letter followed by 0 or more letters/digits. */

/* The following section is used to handle whitespace and comments in the input. */ 
<INITIAL> {SPACE} /* Ignore spaces and tabs. */
<INITIAL> "#".*\n /* Ignore comments starting with '#' symbol. */
"newline" \n /* Match newline character. */

%%

/* The following section contains the main function that uses the generated parser. */
int main() {
    /* The yylex() function calls the generated lexer to get the next token in the input. */
    while (yylex() != 0) {
        printf("Current sum: %d\n", sum);
    }
    printf("Final sum after parsing: %d\n", sum);

    /* Calling the add_nums() function and printing the result. */
    printf("Sum of 5 and 10: %d\n", add_nums(5, 10));

    /* Calling the factorial() function and printing the result. */
    printf("Factorial of 5: %d\n", factorial(5));

    return 0;
}