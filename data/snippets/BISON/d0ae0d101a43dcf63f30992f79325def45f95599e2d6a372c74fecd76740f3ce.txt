%{
/* start of %{
.. %} section */
const int MAX_NUM = 100; // declare and initialize global constant
char input[MAX_NUM]; // declare global array variable
double sum = 0; // declare and initialize global double variable
%}

%token <data_type> INTEGER REAL // define token types
%token END // define special token type
%union { // define union to store data types
    int int_value;
    double double_value;
}
%type <data_type> VALUE // define data type of VALUE

%%
input: // define grammar rules
    expr END { // code to be executed upon reaching end of input
        printf("The sum is %f\n", sum);
    }
    ;
expr:
    VALUE { // code to be executed when encountering a value
        printf("Value: %f\n", $1);
        if ($1.type == INTEGER) { // check data type and perform appropriate operation
            sum += (double)$1.value; // convert to double and add to sum
        } else { // if REAL type
            sum += $1.value; // directly add to sum
        }
    }
    | expr '+' VALUE { // code for addition operation
        printf("Value: %f\n", $3);
        if ($3.type == INTEGER) { // check data type and perform appropriate operation
            sum += (double)$3.value; // convert to double and add to sum
        } else { // if REAL type
            sum += $3.value; // directly add to sum
        }
    }
    | expr '-' VALUE { // code for subtraction operation
        printf("Value: %f\n", $3);
        if ($3.type == INTEGER) { // check data type and perform appropriate operation
            sum -= (double)$3.value; // convert to double and subtract from sum
        } else { // if REAL type
            sum -= $3.value; // directly subtract from sum
        }
    }
    | expr '*' VALUE { // code for multiplication operation
        printf("Value: %f\n", $3);
        if ($3.type == INTEGER) { // check data type and perform appropriate operation
            sum *= (double)$3.value; // convert to double and multiply with sum
        } else { // if REAL type
            sum *= $3.value; // directly multiply with sum
        }
    }
    | expr '/' VALUE { // code for division operation
        printf("Value: %f\n", $3);
        if ($3.type == INTEGER) { // check data type and perform appropriate operation
            sum /= (double)$3.value; // convert to double and divide sum
        } else { // if REAL type
            sum /= $3.value; // directly divide sum
        }
    }
    ;
%%
/* end of %% section */
int yywrap() { // define yywrap function
    return 1; // signal end of input
}
int main() { // define main function
    printf("Enter a series of values followed by END to calculate the sum:\n");
    yyin = stdin; // set input source
    yyparse(); // start parsing
    return 0;
}