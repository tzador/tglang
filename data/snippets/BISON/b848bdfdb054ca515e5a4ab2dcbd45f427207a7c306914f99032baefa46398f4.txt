%token <int> NUMBER  // Declares a token 'NUMBER' with an integer value
%token <string> STRING // Declares a token 'STRING' with a string value
%left '+' '-' // Sets the associativity for the tokens '+' and '-' to left
%left '*' '/' // Sets the associativity for the tokens '*' and '/' to left
%right '^' // Sets the associativity for the token '^' to right
%left UNARY // Sets the associativity for the token 'UNARY' to left
%%
expression : NUMBER // Defines a rule for an 'expression' that is a single token 'NUMBER'
| STRING // Adds another rule for an 'expression' that is a single token 'STRING'
| expression '+' expression // Adds a rule for an 'expression' that is the addition of two expressions
| expression '-' expression // Adds a rule for an 'expression' that is the subtraction of two expressions
| expression '/' expression // Adds a rule for an 'expression' that is the division of two expressions
| expression '*' expression // Adds a rule for an 'expression' that is the multiplication of two expressions
| expression '^' expression // Adds a rule for an 'expression' that is the exponential of two expressions
| '-' expression %prec UNARY // Adds a rule for an 'expression' that is a negative value of an expression
| '+' expression %prec UNARY // Adds a rule for an 'expression' that is a positive value of an expression
| '(' expression ')' // Adds a rule for an 'expression' that is an expression within parentheses
;
%%
int main(){ // Starts the main function
yyparse(); // Parses the input using the rules specified above
return 0; // Returns 0 to indicate successful execution
}