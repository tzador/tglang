/* Definition section, with rules for identifying valid program syntax */

%%

program: /* empty */
  | program statement ';'  /* zero or more statements in a program */

statement:
  declaration  /* variable declaration */
  | assignment  /* variable assignment */
  | expression  /* any valid expression */

declaration:
  type identifier                     /* variable type and name */

type:
  INT                                 /* integer data type */
  | DOUBLE                            /* decimal data type */
  | STRING                            /* string data type */

assignment:
  identifier '=' expression ';'      /* assigning value to a variable */

identifier:
  [a-zA-Z_]([a-zA-Z0-9_])*           /* variable name can contain letters, numbers, and underscores */

expression:
  term                                /* any single term is a valid expression */
  | expression '+' term               /* expression with addition */
  | expression '-' term               /* expression with subtraction */
  
term:
  factor                              /* any single factor is a valid term */
  | term '*' factor                   /* term with multiplication */
  | term '/' factor                   /* term with division */
  
factor:
  INT                                 /* integer value */
  | DOUBLE                            /* decimal value */
  | STRING                            /* string value */
  | identifier                        /* variable value */
  | '(' expression ')'                /* expression within parentheses */

/* End of Definition section */

%%

/* Code section, with actions to be taken based on valid syntax */

/* C code to be executed when a variable is declared */
void yyvardecl(char *type, char *name) {
  printf("Variable %s declared with type %s\n", name, type);
}

/* C code to be executed when a variable is assigned a value */
void yyvarassign(char *name, char *value) {
  printf("Variable %s assigned the value %s\n", name, value);
}

/* C code to be executed when an expression is evaluated */
double yyexpr(double left, char *operator, double right) {
  switch(operator[0]) {
    case '+':
      return left + right;
    case '-':
      return left - right;
    case '*':
      return left * right;
    case '/':
      return left / right;
  }
}

/* End of Code section */

/* Special section for Bison specific code, specifying start and end rules */
%%

/* Start rule, telling Bison what symbol to start with */
program

/* End rule, indicating successful completion of parsing */
END

/* End of Bison specific section */