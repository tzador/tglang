/* Defining a grammar for simple arithmetic expressions */

%token NUM /* Terminal symbol for numbers */
%token PLUS /* Terminal symbol for addition operation */
%token MINUS /* Terminal symbol for subtraction operation */
%token TIMES /* Terminal symbol for multiplication operation */
%token DIVIDE /* Terminal symbol for division operation */
%token LPAREN /* Terminal symbol for left parenthesis */
%token RPAREN /* Terminal symbol for right parenthesis */

%% /* Defining productions for rules */

expression
    : NUM /* A number by itself is a valid expression */
    | expression PLUS expression /* Adding two expressions */
    | expression MINUS expression /* Subtracting two expressions */
    | expression TIMES expression /* Multiplying two expressions */
    | expression DIVIDE expression /* Dividing two expressions */
    | LPAREN expression RPAREN /* Expressions enclosed in parentheses */
    ;

%% /* Handling precedence and associativity of operators */

/* Operators with higher precedence will be evaluated first */
%left PLUS MINUS
%left TIMES DIVIDE

%% /* Defining functions for parsing and handling errors */

void yyerror (char *s)
{
    fprintf (stderr, "%s\n", s);
}

int yyparse ()
{
    /* Calling yyparse() will parse the input and return 0 if successful */
    return yyparse();
}

%% /* Creating main function to test the grammar */

int main ()
{
    printf("Enter an arithmetic expression: ");
    
    /* Passing the input to the lexer and parser */
    yyparse();
    
    printf("Valid expression parsed successfully!");
    return 0;
}

/* End of grammar definition */