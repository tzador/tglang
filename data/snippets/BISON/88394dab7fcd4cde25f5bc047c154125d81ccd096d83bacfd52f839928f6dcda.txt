%{
    // Code section to declare variables and functions
%}

// Declaration section - defines the tokens and their patterns
%token <value> INTEGER         // Token for integers
%token <value> FLOAT           // Token for floats
%token <value> VARIABLE        // Token for variables
%token IF ELSE WHILE           // Tokens for control structures
%token EQ GT LT                // Tokens for comparison operators
%token PLUS SUB MULT DIV MOD    // Tokens for arithmetic operators

// Define the grammar rules
%% // delimeter to separate the rules

// Rule for assignment statement
assignment_stmt:
    VARIABLE EQ expression
    {
        // Function to assign the variable value to the expression
        assign($1, $3);
    }
    ;

// Rule for expression
expression:
    expression PLUS expression
    {
        // Function to add expressions and return result
        $$ = add($1, $3);
    }
    | expression SUB expression
    {
        // Function to subtract expressions and return result
        $$ = subtract($1, $3);
    }
    | expression MULT expression
    {
        // Function to multiply expressions and return result
        $$ = multiply($1, $3);
    }
    | expression DIV expression
    {
        // Function to divide expressions and return result
        $$ = divide($1, $3);
    }
    | expression MOD expression
    {
        // Function to calculate the modulus of expressions and return result
        $$ = modulus($1, $3);
    }
    | INTEGER
    {
        // Set value of expression to the integer token
        $$ = $1;
    }
    | FLOAT
    {
        // Set value of expression to the float token
        $$ = $1;
    }
    | VARIABLE
    {
        // Get the value of the variable assigned to the variable token
        $$ = get($1);
    } 
    ;

// Rule for conditional expression
condition:
    expression GT expression
    {
        // Function to check if first expression is greater than second expression
        $$ = greater_than($1, $3);
    }
    | expression LT expression
    {
        // Function to check if first expression is less than second expression
        $$ = less_than($1, $3);
    }
    | expression EQ expression
    {
        // Function to check if first expression is equal to second expression
        $$ = equal_to($1, $3);
    }
    ;

// Rule for if statement
if_stmt:
    IF condition
    {
        // If condition is true, execute code in curly braces
        if ($2 == true) {
            // Function to execute code in curly braces
            execute_code();
        }
    }
    ;

// Rule for if-else statement
if_else_stmt:
    IF condition
    {
        // If condition is true, execute code in first set of curly braces
        if ($2 == true) {
            // Function to execute code in first set of curly braces
            execute_first_code();
        }
        // If condition is false, execute code in second set of curly braces
        else {
            // Function to execute code in second set of curly braces
            execute_second_code();
        }
    }
    ;

// Rule for while statement
while_stmt:
    WHILE condition
    {
        // While condition is true, execute code in curly braces
        while ($2 == true) {
            // Function to execute code in curly braces
            execute_code();
        }
    }
    ;

// Function section - contains user-defined functions to manipulate variables and values
%{
    // Function to assign a value to a variable
    void assign (string variable, value) {
        // Code to assign value to variable
        $variable = $value;
    }

    // Function to add two values
    value add (value1, value2) {
        // Code to add values
        $result = $value1 + $value2;
        return $result;
    }

    // Function to subtract two values
    value subtract (value1, value2) {
        // Code to subtract values
        $result = $value1 - $value2;
        return $result;
    }

    // Function to multiply two values
    value multiply (value1, value2) {
        // Code to multiply values
        $result = $value1 * $value2;
        return $result;
    }

    // Function to divide two values
    value divide (value1, value2) {
        // Code to divide values
        $result = $value1 / $value2;
        return $result;
    }

    // Function to calculate modulus of two values
    value modulus (value1, value2) {
        // Code to calculate modulus of values
        $result = $value1 % $value2;
        return $result;
    }

    // Function to retrieve the value of a variable
    value get (string variable) {
        // Code to get value of variable
        return $variable;
    }

    // Function to check if first value is greater than second value
    value greater_than (value1, value2) {
        // Code to check if value1 is greater than value2
        if ($value1 > $value2) {
            return true;
        }
        else {
            return false;
        }
    }

    // Function to check if first value is less than second value
    value less_than (value1, value2) {
        // Code to check if value1 is less than value2
        if ($value1 < $value2) {
            return true;
        }
        else {
            return false;
        }
    }

    // Function to check if two values are equal
    value equal_to (value1, value2) {
        // Code to check if value1 is equal to value2
        if ($value1 == $value2) {
            return true;
        }
        else {
            return false;
        }
    }

    // Function to execute code in curly braces
    void execute_code () {
        // Code to execute code in curly braces
        for (int i = 0; i < 10; i++) {
            // Code to print "Hello" 10 times
            printf("Hello");
        }
    }

    // Function to execute code in first set of curly braces
    void execute_first_code () {
        // Code to execute code in first set of curly braces
        for (int i = 0; i < 5; i++) {
            // Code to print "Hello" 5 times
            printf("Hello");
        }
    }

    // Function to execute code in second set of curly braces
    void execute_second_code () {
        // Code to execute code in second set of curly braces
        for (int i = 0; i < 3; i++) {
            // Code to print "Hi" 3 times
            printf("Hi");
        }
    }
%}

/* Grammar section - contains the grammar rules written in BNF format */
%%
/* End of code snippet */