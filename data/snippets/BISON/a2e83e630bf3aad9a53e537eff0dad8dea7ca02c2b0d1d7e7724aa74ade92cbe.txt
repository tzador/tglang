/* This is a BISON code snippet that generates a parser for a simple calculator */

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int result; // global variable to store the final result

void calc_error(char* message) {
  printf("Calculation error: %s\n", message);
  exit(1);
}
%}

%token NUMBER // define tokens for numbers
%left '+' '-' // define left associativity for addition and subtraction
%left '*' '/' // define left associativity for multiplication and division

%% // begin of grammar rules

calc : expr { result = $1; } ; // the main calculation rule
expr : expr '+' expr { $$ = $1 + $3; } // rule for addition
     | expr '-' expr { $$ = $1 - $3; } // rule for subtraction
     | expr '*' expr { $$ = $1 * $3; } // rule for multiplication
     | expr '/' expr { // rule for division

         /* Error handling: check for division by zero */
         if ($3 == 0) {
             calc_error("division by zero");
         }
         $$ = $1 / $3; // calculate result

     }
     | '(' expr ')' { $$ = $2; } // rule for grouping
     | NUMBER { $$ = $1; } // rule for numbers

%% // end of grammar rules

int main() {

    printf("Enter a simple calculation: ");

    /* Use yyparse() to execute the parser and check for errors */
    yyparse();

    /* Print the final result */
    printf("Result: %d\n", result);

    return 0;
}