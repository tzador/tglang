%{
// This is a Bison code snippet for a simple calculator that handles
// addition, subtraction, multiplication, and division of integers.
%}
%start calculation
%token NUMBER
%%
 
// Definition of the grammar
// <calculation> ::= <expression> { <operator> <expression> }*
calculation : expression { operator expression}*;
 
// <expression> ::= NUMBER
expression : NUMBER;
 
// <operator> ::= '+' | '-' | '*' | '/'
operator : '+' | '-' | '*' | '/';
 
%%  // End of grammar
 
// Yacc declarations
int yylex();
int yyerror(char *msg) {
   fprintf(stderr, "%s\n", msg);
   return 0;
}
 
// Main function
int main() {
   yyparse();  // Call parser
   return 0;
}
 
// Yacc definitions
int yyparse() {
   yylex();
   return 0;
}
 
// Lex definitions
int yylex() {
   static char ch = ' ';
   // Skip spaces
   while (ch == ' ' || ch == '\t') ch = getchar();
   // Parse operators
   if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
     { ch = getchar(); return ch; }
   if (ch >= '0' && ch <= '9') {
      int number = ch - '0';
      ch = getchar();
      while ('0' <= ch && ch <= '9') {
         number = 10*number + (ch - '0');
         ch = getchar();
      }
      yylval = number;
      return NUMBER;
   }
   return 0;
}