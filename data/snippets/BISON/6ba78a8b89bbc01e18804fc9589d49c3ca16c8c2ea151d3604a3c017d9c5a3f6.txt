/*
 * BISON code snippet 
 * This snippet creates a grammar to parse mathematical expressions
 */

%{
    // definitions section: declare variables and tokens used in parsing
    #include <stdio.h>
    #include <string.h>

    int num; // variable to store the value of a number token in parsing
    char op; // variable to store the value of an operator token in parsing

%}

%token <num> NUMBER // declare token for numbers
%token <op> PLUS MINUS MULTIPLY DIVIDE // declare tokens for operators

// grammar rules:

expression: // rule for an expression
    | NUMBER { // if the token is a number, print its value
        printf("%d", $1);
    }
    | expression PLUS expression { // if the expression contains a plus sign, print the value as addition
        printf("(%d + %d)", $1, $3);
    }
    | expression MINUS expression { // if the expression contains a minus sign, print the value as subtraction
        printf("(%d - %d)", $1, $3);
    }
    | expression MULTIPLY expression { // if the expression contains a multiply sign, print the value as multiplication
        printf("(%d * %d)", $1, $3);
    }
    | expression DIVIDE expression { // if the expression contains a divide sign, print the value as division
        printf("(%d / %d)", $1, $3);
    }
    ;

// rules for handling parentheses and operator precedence
%left PLUS MINUS // left associative rules for addition and subtraction
%left MULTIPLY DIVIDE // left associative rules for multiplication and division
%right UNARY // right associative rule for unary operations like negative numbers

%%

// code to be executed before parsing
int main() {
    printf("Enter a mathematical expression: ");
    yyparse(); // call the parser function

    return 0;
}

// code to be executed after parsing
void yyerror(const char *error) {
    printf("Error: %s\n", error);
}