/* BISON code snippet for a basic calculator */

%{
  #include <stdio.h>
  #include <stdlib.h>
%}

/* States for calculator */
%code requires {
  int state;      /* Current state of the calculator */
  double result;  /* Result of the computation */
}

/* Tokens */
%token NUMBER      /* For numbers */
%token ADD         /* For addition operation */
%token SUB         /* For subtraction operation */
%token MUL         /* For multiplication operation */
%token DIV         /* For division operation */
%token MOD         /* For modulus operation */
%token POW         /* For power operation */
%token EQ          /* For equality operation */

%%

/* Productions */
calc: expr { printf("Result: %f\n", $1); } ;

expr: NUMBER       { $$ = $1; }
    | expr ADD expr      { $$ = $1 + $3; }
    | expr SUB expr      { $$ = $1 - $3; }
    | expr MUL expr      { $$ = $1 * $3; }
    | expr DIV expr      { $$ = $1 / $3; }
    | expr MOD expr      { $$ = $1 % $3; }
    | expr POW expr      { $$ = pow($1, $3); }
    | '(' expr ')'       { $$ = $2; }
    ;

/* Error rule */
err: NUMBER EQ       { printf("This is not a valid operation. Please check your input.\n"); state = 1; }
    | invalidOp      { printf("Invalid operation. Please try again.\n"); state = 1; }
    | invalidParen   { printf("Invalid parenthesis. Please make sure they are balanced.\n"); state = 1; }
    ;

/* Error handlers */
%%

int yyerror(char *s)
{
  printf("Error: %s\n", s);
  return 0;
}

void yyerror(const char *msg)
{
  fprintf(stderr, "%s:%d: %s\n", yyfile, yylineno, msg);
}

/* Main function to initialize parser */
int main()
{
  yyparse();
  return 0;
}