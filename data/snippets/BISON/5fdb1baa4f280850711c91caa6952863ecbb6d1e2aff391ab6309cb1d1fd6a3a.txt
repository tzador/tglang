%start program
%token <int> INTEGER                  //Declaring a token named INTEGER to store integer values
%token <float> REAL                   //Declaring a token named REAL to store floating-point values
%token <string> STRING                //Declaring a token named STRING to store string values
%token <identifier> IDENTIFIER        //Declaring a token named IDENTIFIER to store identifiers

%left '+' '-' '*' '/'                 //Declaring operator precedence for arithmetic operations

%%                                   //Beginning of grammar rules section

program: statement                    //Rule for a full program, consists of a single statement
       | program statement            //Recursive rule, allowing for multiple statements in one program

statement: declaration                //Rule for declaring variables
         | assignment                 //Rule for assigning values to variables
         | expression                 //Rule for evaluating expressions

declaration: 'var' IDENTIFIER (',' IDENTIFIER)* ':' type ';'
                                      //Rule for declaring one or more variables of a certain type
type: 'int'                           //Type for integer values
    | 'float'                         //Type for floating-point values
    | 'string'                        //Type for string values

assignment: IDENTIFIER '=' expression ';'  //Rule for assigning a value to a variable

expression: INTEGER                   //Base case for integer expression
          | REAL                      //Base case for floating-point expression
          | STRING                    //Base case for string expression
          | IDENTIFIER                //Base case for identifier (variable) expression
          | '(' expression ')'        //Rule for grouping expressions
          | expression '+' expression //Rule for addition operation
          | expression '-' expression //Rule for subtraction operation
          | expression '*' expression //Rule for multiplication operation
          | expression '/' expression //Rule for division operation
          | '-' expression            //Rule for negative values

%%                                   //End of grammar rules section