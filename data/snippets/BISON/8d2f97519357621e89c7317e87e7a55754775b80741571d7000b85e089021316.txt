%{
// This is a header section where we declare variables and functions
int x;
int y;
%}

// This is a definition section where we specify the grammar rules
// We define a rule for simple expressions
Expr: NUM       {                                       
                    // This is an action that will be executed when the rule is recognized
                    x = $1;
                 }
    | ID        { 
                    y = $1;
                 }
    ;

// We define a rule for binary expressions
BinaryExpr: Expr '+' Expr    { 
                                // We perform some computation using the variables declared in the header section
                                x = $1 + $3;
                                printf("The sum of %d and %d is %d\n", $1, $3, x);
                              }
    | Expr '-' Expr           { 
                                y = $1 - $3;
                                printf("The difference of %d and %d is %d\n", $1, $3, y);
                              }
    ;

// This is a grammar section where we specify the tokens used in the grammar
%token NUM '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9';
%token ID 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j';

// This is an instruction section where we specify any additional instructions or actions
%start Expr;
%%

// This is the body of the grammar where we specify the production rules
// We define the rule for a number
NUM: '0'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    ;

// We define the rule for an identifier
ID:  'a'
    | 'b'
    | 'c'
    | 'd'
    | 'e'
    | 'f'
    | 'g'
    | 'h'
    | 'i'
    | 'j'
    ;

// This is a main function that will execute the parser
int main() {
    // We declare a variable of type "int" and initialize it to 0
    int result = 0;
    // We prompt the user to enter an input expression
    printf("Enter an expression: ");
    // We use the Bison parser to parse the input expression
    result = yyparse();
    // We print the final result of the parsed input expression
    printf("The result of the expression is %d\n", result);
    return 0;
}
%%

// This is a function that will match the tokens
int yylex() {
    // We read the input expression character by character
    int c = getchar();
    // We check if the character is a digit
    if (isdigit(c)) {
        // If it is a digit, we return the corresponding token
        yylval = c - '0';
        return NUM;
    }
    // We check if the character is an identifier
    else if (isalpha(c)) {
        // If it is an identifier, we return the corresponding token
        yylval = c - 'a';
        return ID;
    }
    // If the character does not match any of the tokens, we return 0 (end of file)
    return 0;
}

// This is a function that will handle syntax errors
void yyerror(const char *s) {
    // We print the error message
    fprintf(stderr, "%s\n", s);
    // We exit the program with an error code
    exit(1);
}