%{
/**
 * This is a BISON code snippet.
 * 
 * BISON is a general-purpose programming language that is mainly used for parsing and
 * generating data streams. It follows a similar syntax as C and is primarily used in
 * compiler development.
 * 
 * This code snippet is a simple arithmetic expression parser, which takes in a string
 * of numbers and operators and evaluates it to a final result.
 **/
 
#include <stdio.h>
#include <math.h>

// Define the token types
%token NUMBER
%token OPERATOR

// Define the precedence and associativity of operators
%left '+' '-'
%left '*' '/' '%'

// Define the grammar rules
%%
input: /* empty */
    | input line
    ;
    
line: '\n'
    | expression '\n' { printf("Result: %d\n", $1); }
    ;
    
expression: NUMBER
    | expression OPERATOR expression { 
        switch ($2) {
            case '+': $$ = $1 + $3; break;
            case '-': $$ = $1 - $3; break;
            case '*': $$ = $1 * $3; break;
            case '/': $$ = $1 / $3; break;
            case '%': $$ = $1 % $3; break;
        }
    }
    ;

// Define the token types and rules
%%

// The main function
int main(void) {
    yyparse();
    return 0;
}

// Function for handling parsing errors
void yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

// Function for retrieving tokens from input
int yylex(void) {
    int c = getchar();
    
    // Ignore whitespace characters
    while (c == ' ' || c == '\t') {
        c = getchar();
    }
    
    // Return the appropriate token
    if (c >= '0' && c <= '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    } else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '%') {
        return OPERATOR;
    } else {
        return c;
    }
}