%{
/* This is a sample BISON program for a simple calculator */
%}
 
%define api.pure full
%define parse.error verbose
 
/* Declare all tokens used in the program */
%token <num> NUMBER
%token ADD SUB MUL DIV
%token EOL
 
%% /* Start of grammar rules */
 
/* Program starts with an optional statement followed by the expression */
program:
    statement
    | expression EOL
    ;
 
/* Statement can be either assignment or empty */
statement:
    assignment
    |
    ;
 
/* Assignment is a variable name followed by '=' and an expression */
assignment:
    var '=' expression
    ;
 
/* Expression can be a number, variable, or a mathematical operation */
expression:
    NUMBER
    | var
    | math_op
    ;
 
/* Variable is just a string of letters */
var:
    [A-Za-z]+
    ;
 
/* Mathematical operations can be addition, subtraction, multiplication, or division */
math_op:
    expression ADD expression
    | expression SUB expression
    | expression MUL expression
    | expression DIV expression
    ;
 
%% /* End of grammar rules */
 
/* This function handles lexer errors and displays a message */
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}
 
/* This function returns the value of a token */
int yywrap(void) {
    return 1;
}
 
/* Main function to start the program */
int main(void) {
    yyparse();
    return 0;
}