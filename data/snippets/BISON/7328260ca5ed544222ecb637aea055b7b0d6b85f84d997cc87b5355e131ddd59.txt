%token LETTER DIGIT   /* Terminal symbols */
%token PROGRAM OPAREN CPAREN ID DOT SEMI BECOMES BEGIN END PRINT
/* Non-terminal symbols */
%nonassoc PREC_LEVEL_1  /* Precedence levels */
%nonassoc PREC_LEVEL_2
%right NEGATE           /* Right-associative operator */
%left  PLUS MINUS       /* Left-associative operators */
/* Production rules */
%% /* The grammar rules start here */
program: PROGRAM ID DOT declarations subprogram_declarations compound_statement
;
declarations: VAR variable_declarations SEMI
| empty
;
variable_declarations: variable_declarations variable SEMI
| variable SEMI
;
variable: ID
| ID OPAREN number CPAREN
;
number: number COMMA DIGIT
| DIGIT
;
subprogram_declarations: subprogram_declarations subprogram_declaration SEMI
| subprogram_declaration SEMI
;
subprogram_declaration: PROGRAM ID OPAREN formal_parameter_list CPAREN SEMI declarations compound_statement
;
formal_parameter_list: ID
| formal_parameter_list COMMA ID
;
compound_statement: BEGIN statement_list END
;
statement_list: statement_list SEMI statement
| statement
;
statement: assignment_statement
| if_statement
| while_statement
| print_statement
;
assignment_statement: variable BECOMES expression
;
if_statement: IF expression THEN statement_list
| IF expression THEN statement_list ELSE statement_list
;
while_statement: WHILE expression DO statement_list
;
print_statement: PRINT expression
;
expression: NEGATE expression
| expression PLUS expression
| expression MINUS expression
;
empty:
;