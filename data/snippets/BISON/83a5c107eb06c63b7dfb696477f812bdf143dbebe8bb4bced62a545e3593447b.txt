%{
    // This is the prologue section for declaring global variables and other code
    #include <stdio.h>
    #include <stdlib.h>

    // Declare a token structure to hold token information
    typedef struct Token {
        int type;
        char *value;
        int lineNumber;
    } Token;

    // Declare a function to display token information
    void displayToken(Token *token) {
        printf("Token: Type: %d, Value: %s, Line Number: %d\n", token->type, token->value, token->lineNumber);
    }
%}

// Declare the tokens to be recognized by the lexer
%token <value> NUMBER STRING
%token <type> PLUS MINUS MULTIPLY DIVIDE

// Declare the precedence of operators
%left PLUS MINUS
%left MULTIPLY DIVIDE

// Define the grammar rules
Expr:  
    NUMBER            { displayToken($1); } 
|   STRING            { displayToken($1); } 
|   Expr PLUS Expr    { printf("Operation: %s + %s\n", $1->value, $3->value); } 
|   Expr MINUS Expr   { printf("Operation: %s - %s\n", $1->value, $3->value); } 
|   Expr MULTIPLY Expr{ printf("Operation: %s * %s\n", $1->value, $3->value); } 
|   Expr DIVIDE Expr  { printf("Operation: %s / %s\n", $1->value, $3->value); }

// Define the main syntax rule
%%

// Add the code for the main function
int main() {
    // Declare a variable to hold the value of the token
    Token *token;

    // Keep scanning input until end of file is reached
    while ((token = yylex()) != 0) {
        displayToken(token);
        // Pass the token to the parser
        yyerror("Parsing successful!");
    }
    
    // Return success code
    return 0;
}

// Add the error handling function
void yyerror(const char *s) {
    printf("Error: %s\n", s);
}