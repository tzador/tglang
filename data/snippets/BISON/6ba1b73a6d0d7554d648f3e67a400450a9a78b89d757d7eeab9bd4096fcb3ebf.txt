%{
/* This code snippet defines a grammar for a simple calculator
    that can perform basic arithmetic operations. */
#include <stdio.h>
int sum = 0;
%}

/* This defines the tokens to be used in our grammar. */
DIGIT          [0-9]
WS             [ \t\n\v\f]
PLUS           "+"
MINUS          "-"
TIMES          "*"
DIVIDE         "/"

%%

/* Definition for expressions that evaluate to a number. */
expr: DIGIT
    | expr PLUS DIGIT
    | expr MINUS DIGIT
    | expr TIMES DIGIT
    | expr DIVIDE DIGIT

/* Definition for expressions within parentheses. */
paren_expr: '(' expr ')'
    | '(' expr PLUS expr ')'
    | '(' expr MINUS expr ')'
    | '(' expr TIMES expr ')'
    | '(' expr DIVIDE expr ')'

/* Definition for statements that assign a value to a variable. */
statement: DIGIT '=' expr ';'
    | DIGIT '=' paren_expr ';'

/* Definition for a block of statements. */
block: statement
    | block statement

%%

int main() {
    /* This loop prompts the user for input and evaluates the
        resulting expression. */
    while(1) {
        printf("Enter an expression: ");

        /* The "yylex()" function reads a token from stdin and
            returns its integer value. */
        int yyvalue = yylex();

        if(yyvalue == 0)
            break;

        sum += yyvalue;
    }

    printf("Result: %d\n", sum);

    return 0;
}