/* Bison code to parse mathematical expressions */

%{
#include <stdio.h>

/* Declare functions used in the parser */
int yylex();
void yyerror(const char *s);

/* Global variable to store the result of the expression */
int result;
%}

/* Bison declarations section */

/* Declare tokens used in the parser */
%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE 

%%

/* Start rule for the parser */
exp: term
    | exp PLUS term 
    | exp MINUS term;

/* Rule for term */
term: factor
    | term TIMES factor
    | term DIVIDE factor;

/* Rule for factor */
factor: NUMBER 
    | MINUS NUMBER %{
        result = -yylval;
    %};

%%

/* Function to handle lexer errors */
void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

/* Main function */
int main() {
    /* Parse the input and print the result */
    yyparse();
    printf("Result: %d\n", result);
    return 0;
}