%{
/* This is a Bison code snippet that uses the lex file, it generates a parser for a simple mathematical expression */
#include <stdio.h> //included library for standard input and output functions 
#include "lex.yy.c" //included the lex file containing tokens 
%}

/* Define tokens and their corresponding values using regular expressions */
%%
"+"     { return PLUS; }
"-"     { return MINUS; }
"*"     { return TIMES; }
"/"     { return DIVIDE; }
[0-9]+  { return NUMBER; } //for recognizing numbers
\n      { return NEWLINE; } //for recognizing new lines
%%

/* Define the grammar rules for a mathematical expression */
%left PLUS MINUS // define precedence for similar operators
%left TIMES DIVIDE // define precedence for similar operators

/*
 * Contains the production rules of the grammar.
 * Yacc syntax: [non terminal] : [production rule] ;
 */
exp     : term
        | exp PLUS term
        | exp MINUS term
        ;
term    : factor
        | term TIMES factor
        | term DIVIDE factor
        ;
factor  : NUMBER
        | LPAREN exp RPAREN // parentheses for grouping expressions
        ;

/* Function to handle any errors encountered during parsing */
void yyerror(const char *s)
{
    fprintf(stderr, "%s\n", s);
}

/* Main function to initialize lexer and parser */
int main()
{
    yyparse();
    return 0;
}