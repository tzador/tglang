%token NUM           /* Define token for numbers */
%token STRING        /* Define token for strings */
%token ID            /* Define token for identifiers */

%left '+' '-'       /* Define left associativity for plus and minus operators */
%left '*' '/'       /* Define left associativity for multiplication and division operators */

%%                  /* Define the grammar rules for our program */

program: statement_list
    ;

statement_list: statement
    | statement_list statement
    ;

statement: assignment_statement
    | declaration_statement
    | print_statement
    ;

assignment_statement: ID '=' expression ';'
    ;

declaration_statement: 'var' ID ';'     /* Declare a variable using the 'var' keyword */
    | 'let' ID '=' expression ';'       /* Declare a constant using the 'let' keyword */
    ;

print_statement: 'print' '(' expression ')' ';'    /* Print the value of an expression using the 'print' keyword */

expression: NUM             /* An expression can be a number... */
    | STRING                /* ...or a string */
    | ID                    /* ...or an identifier (variable or constant) */
    | '(' expression ')'    /* ...or an expression enclosed in parentheses */
    | expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    ;

%%                  /* Define the actions to be taken when a token or grammar rule is matched */

#include <stdio.h>

void yyerror(char *s)               /* Define function to handle parser errors */
{
    fprintf(stderr, "%s\n", s);
}

int main()
{
    printf("Enter a calculation: ");
    yyparse();                      /* Parse the input */
    return 0;
}

int yywrap()                        /* Define function to signal the end of input */
{
    return 1;
}