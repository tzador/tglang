%token <num> NUMBER //Declares a token type 'NUMBER' that contains a numerical value
%token <str> STRING //Declares a token type 'STRING' that contains a string value
%token <id> IDENTIFIER //Declares a token type 'IDENTIFIER' that contains an identifier value

%start program //Declares the starting point for the grammar

%%

program: stmt_list //Defines the production rule for 'program', which consists of a list of statements
    ;

stmt_list: stmt_list stmt //Defines the production rule for 'stmt_list', which is a recursive rule to handle multiple statements
    | stmt
    ;

stmt: expr ';' //Defines the production rule for 'stmt', which consists of an expression followed by a semicolon
    | ASSIGN //Handles the assignment rule
    ;

expr: NUMBER    //Handles numerical expressions
    | STRING    //Handles string expressions
    | IDENTIFIER //Handles identifier expressions
    | expr '+' expr //Handles addition expressions
    | expr '-' expr //Handles subtraction expressions
    | expr '*' expr //Handles multiplication expressions
    | expr '/' expr //Handles division expressions
    ;

ASSIGN: IDENTIFIER '=' expr ';' //Defines the rule for assignment, which consists of an identifier, an equal sign, an expression, and a semicolon
    ;

%%

int main() {
    printf("Enter a numerical statement: ");
    yyparse(); //Starts the parsing process
    return 0;
}