%{
#include <stdio.h> // include standard input/output header file

/* global variables */
int count = 0; // initialize count to 0
int sum = 0; // initialize sum to 0

%}

/* BISON rule to match number literals */
number:
    int { // executes when number is matched
        $$ = $1; // assigns matched number to rule's output ($$)
        printf("Matched number: %d\n", $1); // prints matched number to console
    }
;

/* BISON rule to match addition expressions */
add:
    number '+' number { // executes when addition expression is matched
        $$ = $1 + $3; // calculates sum of first number and second number
        printf("Adding %d and %d\n", $1, $3); // prints addition expression to console
    }
;

/* BISON rule to match multiple addition expressions */
exp:
    exp add { // recursion to match multiple addition expressions
        $$ = $1 + $2; // calculates sum of previous expression and current expression
    }
    | add // match single addition expression
;

/* BISON rule to match statements separated by semicolons */
stmt_list:
    stmt_list ';' exp { // recursion to match multiple statements
        $$ = $3; // assigns result of last statement to rule's output
    }
    |
    exp // match single statement
;

/* main rule */
%%
    
/* code to be executed before parsing */
BEGIN{
    printf("This is a simple calculator using BISON.\nEnter addition expressions (e.g. 2+3), separating statements with semicolons.\n");
}

/* code to be executed after parsing */
END{
    printf("Parsed %d addition statement(s).\n", count); // prints number of addition statements parsed
    printf("Total sum is %d.\n", sum); // prints total sum of all addition statements
}

/* calls the main rule to begin parsing */
stmt_list

/* lex file for number matching */
%lex
%%

" " // ignore spaces

[0-9]+  { // match one or more digits
    count++; // increment count of matched numbers
    return int; // return token for matched number
}

"+" { // match addition operator
    return $; // return token for matched operator
}

";" { // match semicolon
    return $; // return token for matched semicolon
}