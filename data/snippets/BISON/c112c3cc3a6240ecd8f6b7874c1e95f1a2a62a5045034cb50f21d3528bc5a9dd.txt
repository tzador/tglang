/* bison code for a calculator that supports addition, subtraction, multiplication, and division */

%{
# include <stdio.h>  /* include standard input/output library */
int result; /* variable to store the result of calculations */
%}

/* declare tokens for mathematical operators */
%token PLUS MINUS TIMES DIVIDE

/* declare token for end of input */
%token <number> EOL

/* declare grammar rules for arithmetic operations */
/* addition rule */
calc: EOL { printf("Result: %d\n", $1); } /* print result of calculations once input ends */
| EOL calc { printf("Result: %d\n", result); } /* print result after each input */
| calc PLUS calc { result = $1 + $3; } /* addition operation */
| calc MINUS calc { result = $1 - $3; } /* subtraction operation */
| calc TIMES calc { result = $1 * $3; } /* multiplication operation */
| calc DIVIDE calc { result = $1 / $3; } /* division operation */

/* declare rules for numbers and inputs */
/* number input rule */
number: 0|1|2|3|4|5|6|7|8|9 { $$ = $1; } /* convert characters to numbers */
| number { $$ = ($1*10) + $2; } /* append digits for multi-digit numbers */

/* handle errors and display appropriate message */
%error-verbose
%lex-param { FILE *input; }
%define parse.lac como
/* error message for invalid input */
Invalid input! Please input numbers and mathematical operators only. 
/* error message for incorrect arithmetic expressions */
Arithmetic expressions must be in the format "number operator number". 
/* end of error handling */

%%
/* C code for main function */
int main(int argc, char** argv) {
	FILE *input; /* create input file to be passed as argument */
	/* check for correct arguments */
	if(argc != 2){
		printf("Incorrect arguments! Please input a file name.\n");
		return 1;
	}
	input = fopen(argv[1], "r"); /* open input file in read-only mode */
	/* check if input file exists */
	if(input == 0) {
		printf("File does not exist!\n");
		return 1;
	}
	/* call bison parser with input file */
	yyparse(input);
	fclose(input); /* close input file */
	return 0;
}

/* C code for lexer */
int yylex(){
	int character = fgetc(yylval->input); /* read character from input file */
	if (character == '='){
		return EOL;
	} else if (character == '+') {
		return PLUS;
	} else if (character == '-') {
		return MINUS;
	} else if (character == '*') {
		return TIMES;
	} else if (character == '/') {
		return DIVIDE;
	} else if (character == EOF) {
		return 0;
	} else if (isdigit(character)) {
		if (character == '0') {
			flush(0);
		} else {
			flush(0);
			memset(bfr, 0, 16);
			capacity = 16;
		}
		int i = 0;
		while(isdigit(bfr[i++]));
		/* return multi-digit numbers */
		bfr[i-1] = '\0';
		yylval->number = atoi(bfr);
		bfr = ((char*)malloc(capacity));
		return CODE_NUM;
	} else { /* handle invalid characters*/
		yyerror("invalid character");
		return 0;
	}
}

/* C code for yyerror to display error messages */
void yyerror(char *s) {
	printf("Error: %s\n", s);
	exit(0);
}

/* C code for yywrap to indicate end of input */
int yywrap() {
	return 1;
}