%{
    #include <stdio.h>
    #include <stdlib.h>
    int count = 0; // global variable to count number of tokens
    int error = 0; // global variable to track error during parsing
%}

/* Declaration Section */
%token <int> TOKEN_INTEGER // define token for integer values
%token <char> TOKEN_OPERATOR // define token for arithmetic operators
%token <string> TOKEN_STRING // define token for string values

/* Rule Section */
%%
primary_expression: TOKEN_INTEGER { count++; } // rule for primary integer expression
                  | TOKEN_OPERATOR { count++; } // rule for primary operator expression
                  | TOKEN_STRING { count++; } // rule for primary string expression
                  | '(' expression ')' { count++; } // rule for grouped expression
                  ;

expression: primary_expression // expression can be just a primary expression
          | expression TOKEN_OPERATOR primary_expression { count += 2; } // expression with two primary expressions and an operator in between
          | '-' expression %prec TOKEN_OPERATOR { count++; } // expression with unary minus operator
          ;

%%

/* Error handling section */
void yyerror (char *s) {
    printf ("\n%p %d Error: %s\n\n", s, yylineno, s);
    error = 1;
}

/* Main section */
int main (void) {
    error = yyparse(); // start process of parsing
    if (!error) {
      printf("Successful parsing!\n");
    }
    printf("Number of tokens: %d\n", count); // print number of tokens parsed
    return 0;
}