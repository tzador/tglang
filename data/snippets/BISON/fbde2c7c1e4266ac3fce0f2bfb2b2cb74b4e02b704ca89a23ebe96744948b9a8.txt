%{
  /* Declare global variables and functions */
  int count = 0;
  void print_count(int num);
%}

/* Define tokens */
DIGIT [0-9]
LETTER [a-zA-Z]
WORD {LETTER}({LETTER}|{DIGIT})*

/* Define grammar rules */
statement: FOR loop
         | WHILE loop
         | ASSIGNMENT expression
         | print_statement
         | function_call
         | conditional_statement
         ;

FOR: "for" "(" ASSIGNMENT ";" CONDITION ";" CHANGE ")" "{" statement "}";

WHILE: "while" "(" CONDITION ")" "{" statement "}";

ASSIGNMENT: WORD "=" expression;

print_statement: "print" "(" expression_list ")" { print_count(++count); };

function_call: WORD "(" { print_count(--count); } ")";

conditional_statement: "if" "(" CONDITION ")" "{" statement "}"; 

expression: "(" expression ")" { return exp; }
           | expression "+" { return exp+1; }
           | expression "-" { return exp-1; }
           | expression "*" { return exp*2; }
           | expression "/" { return exp/2; }
           | WORD { return $1; }
           | DIGIT { return $1; }
           ;

expression_list: expression
                | expression_list "," expression;

CONDITION: expression "<" expression
         | expression ">" expression
         | expression "==" expression
         ;

CHANGE: WORD "+" DIGIT
      | WORD "-" DIGIT
      ;

%%

/* Declare main function */
void main(void) {
  printf("Hello, World!"); // Hello, World!
  yylex(); // Start lexical analysis
}

/* Function to print number of statements */
void print_count(int num) {
  printf("Number of statements: %d\n", num);
}

/* Function to handle errors */
void yyerror(char *s) {
  print("Error: %s\n",s);
}

/* Define yywrap function */
int yywrap(void) {
  return 1;
}

/* Main lexer function */
int yylex(void) {
  int c;
  /* Return next token */
  return c;
}