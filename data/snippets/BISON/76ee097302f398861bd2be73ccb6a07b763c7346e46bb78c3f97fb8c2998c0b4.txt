%token<VAL> INTEGER
%token<VAL> FLOAT
%start expression
%%
// rule for assigning variable
assign_expr: IDENTIFIER '=' expression
          { $1 = $3; printf("%s", "Variable assigned."); }

// rule for arithmetic expression
expression: INTEGER
          { $$ = $1; }
          | FLOAT
          { $$ = $1; }
          | '(' expression ')'
          { $$ = $2; }
          | expression '*' expression
          { $$ = $1 * $3; }
          | expression '/' expression
          { if ($3 == 0) yyerror("Division by zero."); $$ = $1 / $3; }
          | expression '+' expression
          { $$ = $1 + $3; }
          | expression '-' expression
          { $$ = $1 - $3; }

// rule for logical expression
logical_expr: expression '<' expression
            { $$ = ($1 < $3) ? 1 : 0; }
            | expression '>' expression
            { $$ = ($1 > $3) ? 1 : 0; }
            | expression '<=' expression
            { $$ = ($1 <= $3) ? 1 : 0; }
            | expression '>=' expression
            { $$ = ($1 >= $3) ? 1 : 0; }
            | expression '==' expression
            { $$ = ($1 == $3) ? 1 : 0; }
            | expression '!=' expression
            { $$ = ($1 != $3) ? 1 : 0; }

// rule for conditional statement
if_statement: 'if' '(' logical_expr ')' '{' expression '}'
            { if ($3) $$ = $6; }
            | 'if' '(' logical_expr ')' '{' expression '}' 'else' '{' expression '}'
            { if ($3) $$ = $6; else $$ = $10; }

// rule for loop statement
while_loop: 'while' '(' logical_expr ')' '{' expression '}'
          { while ($3) { $6; printf("%s", "Looping."); } }
%%