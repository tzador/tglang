/* This is a complex code snippet in BISON */

%{
    /* This is the preamble section where we can declare any variables or functions */
    #include <stdio.h> //Include standard input-output library
    #include <stdlib.h> //Include standard library
    int add(int a, int b); //Declare the add function
    int subtract(int a, int b); //Declare the subtract function
%}

%token NUMBER //Declare the token 'NUMBER' for our grammar

%%

/* This is the rules section where we define our grammar */
expr: term { $$ = $1; } /* An expression can just be a single term */
    | expr '+' term { $$ = add($1, $3); } /* Or it can be an expression followed by an addition and a term */
    | expr '-' term { $$ = subtract($1, $3); } /* Or it can be an expression followed by a subtraction and a term */
    ;

term: NUMBER { $$ = $1; } /* A term can just be a number */
    | '(' expr ')' { $$ = $2; } /* Or it can be an expression enclosed in parentheses */
    ;

%%

/* This is the code section where we write the actual code for our declared functions */
int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}

/* The following is the main function where we can test our grammar */
int main() {
    /* Declare the variables we will use */
    int result, x, y;

    /* Get input from the user */
    printf("Enter the first number: ");
    scanf("%d", &x);
    printf("Enter the second number: ");
    scanf("%d", &y);

    /* Parse the input using our grammar and store the result in the 'result' variable */
    result = yyparse();

    /* Print the result */
    printf("The result is %d\n", result);

    return 0;
}