%{
    /* Defines the start and end tokens for our grammar */
    #define BEGIN 1
    #define END 2
%}

/* Defines the tokens to be used in our grammar rules */
%token <value> INTEGER
%token <symbol> ADD SUB MUL DIV

/* Defines the grammar rules for our language */
%start program
%%

/* Defines the program rule, which starts with BEGIN and ends with END */
program: BEGIN expr_list END;

/* Defines the expression list rule, which can have one or more expressions */
expr_list: expr | expr_list expr;

/* Defines the expression rule for mathematical expressions */
expr: expr ADD term | expr SUB term | term;

/* Defines the term rule for multiplying and dividing expressions */
term: term MUL factor | term DIV factor | factor;

/* Defines the factor rule for integer values and grouped expressions */
factor: INTEGER | ADD expr SUB | SUB expr SUB | ADD expr ADD | SUB expr ADD | ADD expr | SUB expr | "(" expr ")";

%%

/* Defines the function to print out the result of the parsed expression */
void print_result(int r)
{
    printf("Result: %d\n", r);
}

/* Defines the function to handle syntax errors during parsing */
void yyerror(char *s)
{
    printf("Syntax error: %s\n", s);
}

/* Main function to run the parser on user input */
int main()
{
    printf("Enter your expression: ");
    yyparse();
    return 0;
}

/* Generates the lexer and parser functions */
%include {
    extern int yyparse();
    extern int yylex();
}

/* Tells Bison to generate the parser code and to use our custom error and print functions */
%code {
    void yyerror(char *s);
    %{
        #include <stdio.h>
        #include <stdlib.h>
    %}
}