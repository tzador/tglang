%token <code> NUMBER
%token <code> STRING
%token <code> PLUS
%token <code> MINUS
%token <code> MULTIPLY
%token <code> DIVIDE
%start expression
%%

expression:
    //The expression rule defines the basic structure of the mathematical expression being parsed
    term
    | expression PLUS term
    | expression MINUS term
    ;

term:
    //The term rule defines the operands of the expression, either a number or a string value
    NUMBER
    | STRING
    ;

%%
//The following code block contains the implementation of the lexer using regular expressions

definitions:
    NUMBER [0-9]+(\.[0-9]+)? //defines a number as one or more digits, optionally followed by a decimal and more digits
    STRING \'[A-Za-z0-9]\' //defines a string as any combination of letters and numbers surrounded by single quotes
    PLUS "+" //defines the addition operator
    MINUS "-" //defines the subtraction operator
    MULTIPLY "*" //defines the multiplication operator
    DIVIDE "/" //defines the division operator

%%
//The following code block contains the implementation of the parser using BNF grammar rules

%{
//The following code block contains any necessary C code
# include <stdio.h>
%}

%%
//The following code block contains the rules for how the parser should handle each token
{
//The code inside the curly braces is executed when a token is matched
//Based on the token, the parser will perform a certain action, such as pushing the token onto the stack or performing a calculation
expression: //for the expression rule
    {
        switch($$)
        {
            case PLUS:
                $$ = $1 + $3; //perform addition
                break;
            case MINUS:
                $$ = $1 - $3; //perform subtraction
                break;
            case MULTIPLY:
                $$ = $1 * $3; //perform multiplication
                break;
            case DIVIDE:
                $$ = $1 / $3; //perform division
                break;
            default:
                break;
        }
    };
term: //for the term rule
    {
        switch($$)
        {
            case NUMBER:
                $$ = $1; //return the number
                break;
            case STRING:
                printf("%s\n", $1); //print the string
                $$ = 0; //return 0
                break;
            default:
                break;
        }
    };
}
//The following code block contains any necessary C code for the main function
int main()
{
    //The following code block performs the parsing
    yyparse(); //calls the parser
    return 0;
}