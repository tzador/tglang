/* Bison code snippet for parsing arithmetic expressions */

/* Define the tokens */
%token NUM        /* numerical value */
%token PLUS       /* addition operator */
%token MINUS      /* subtraction operator */
%token TIMES      /* multiplication operator */
%token DIVIDE     /* division operator */
%token LPAREN     /* left parenthesis */
%token RPAREN     /* right parenthesis */

%% /* Start of grammar rules */
expr: NUM          /* Expression can be a single number */
    | expr op expr /* Or an expression with an operator and another expression */
    ;

op: PLUS           /* Operator can be addition */
   | MINUS         /* Or subtraction */
   | TIMES         /* Or multiplication */
   | DIVIDE        /* Or division */
   ;

%% /* End of grammar rules */

/* Code for handling the tokens and building the abstract syntax tree */
void yyerror(char *s)
{
    printf("error: %s\n", s);
}

int yywrap()
{
    return 1; /* Do not wrap input */
}

/* Main function to read in and parse the input */
int main()
{
    yyparse(); /* Call the parser */
    return 0;
}