/* Grammar for a simple arithmetic expression parsing using BISON */

%token <value> NUMBER    /* defines a token for numbers */
%token <op> ADD SUB MUL DIV       /* defines tokens for arithmetic operations */

%%    // BISON syntax for the start of grammar rules section (optional)

// Grammar rules:
expr: NUMBER
    | expr ADD expr
    | expr SUB expr
    | expr MUL expr
    | expr DIV expr;

// Precedence rules for the operators:
%left ADD SUB
%left MUL DIV

%%    // BISON command to end grammar rules section

// Code to evaluate the grammar rules:
void eval_op(char op, int a, int b) {
    if (op == '*') return a * b;
    else if (op == '/') return a / b;
    else if (op == '+') return a + b;
    else if (op == '-') return a - b;
}
main:
    expr { // evaluates the expression and prints the result
        /* pass the first value as the result, and each subsequent pair as op and expr. */
        printf("Result: %d\n", eval_op($2, $1, $3));
    }
    | error "Invalid expression" { // in case of an error, prints the error message
        puts($$);
    };

%%
/* Code section that defines the necessary functions and variables */
int yylex(void);   /* function that returns the next token */
void yyerror(char *s);    /* function used to print error messages */
int yyparse(void);   /* function that starts parsing the input */

int main(void) {
  return yyparse();   /* call the parsing function */
}

/* BISON commands to handle the token values when they are encountered */
%}
int yyerror (char *msg)
{
  fprintf (stderr, "%s\n", msg);
  return 0;
}

int yylex ()
{
  int c;
  while ((c = getchar ()) == ' ');
  if (isdigit (c))
    {
      int value = c - '0';
      while (isdigit (c = getchar ()))
        value = 10 * value + (c - '0');
      ungetc (c, stdin);
      yylval.value = value;
      return NUMBER;
    }
  yyerror ("invalid");
  return 0;
}

/* BISON command to set the token values and types */
%{
#define YYSTYPE struct {int value;}    // defines the type of token values
%}

/* BISON command to specify the file to be used as input */
%option yylineno    // enables line number tracking for error reporting
%option noyywrap    // disables wrapping around at end of file (used for efficient file scanning)

/* Sample input for the grammar rules:
    1 + 2 * 3 / 4 - 5;
    should output -1 as the result */