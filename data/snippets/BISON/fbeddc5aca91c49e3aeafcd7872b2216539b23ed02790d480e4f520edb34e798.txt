%token<value>NUMBER   //define token for numbers
%token<id>VARIABLE     //define token for variables

%%
program: statement_list
   ;
statement_list: statement
               | statement_list statement
                 { /* do something */ }
   ;
statement: assignment_statement
         | expression
            { /* do something else */ }
   ;
expression: NUMBER
          | VARIABLE
            { /* do something different */ }
   ;
assignment_statement: VARIABLE '=' expression
   { /* assign value to variable */ }
   ;
%%

void evaluate(program) {
    int result;
    switch(program) {
        case expression:
            //evaluate expression
            result = program->expression->value;
            break;
        case assignment_statement:
            //update variable value
            result = assign(program->assignment_statement->identifier, program->assignment_statement->expression->value);
            break;
        case statement_list:
            //evaluate each statement in the list
            for (int i = 0; i < program->statement_list->count; i++) {
                result = evaluate(program->statement_list->statements[i]);
            }
            break;
        case program:
            //evaluate the statement list
            result = evaluate(program->program->statement_list);
            break;
        default:
            //error handling
            result = error();
    }
    return result;
}