%token DIGIT { //Defines a token called DIGIT
    return T_DIGIT; //Returns a token of type T_DIGIT
}
%token DECIMAL_POINT { //Defines a token called DECIMAL_POINT
    return T_DECIMAL_POINT; //Returns a token of type T_DECIMAL_POINT
}
%token PLUS_MINUS { //Defines a token called PLUS_MINUS
    return T_PLUS_MINUS; //Returns a token of type T_PLUS_MINUS
}
%token SCI_NOTATION { //Defines a token called SCI_NOTATION
    return T_SCI_NOTATION; //Returns a token of type T_SCI_NOTATION
}
%token WHITESPACE { //Defines a token called WHITESPACE
    return T_WHITESPACE; //Returns a token of type T_WHITESPACE
}
%token EXPONENT { //Defines a token called EXPONENT
    return T_EXPONENT; //Returns a token of type T_EXPONENT
}
%token NUMBER { //Defines a token called NUMBER
    return T_NUMBER; //Returns a token of type T_NUMBER
}

%%
number: DIGIT+ DECIMAL_POINT DIGIT* | DIGIT+ DECIMAL_POINT DIGIT* SCI_NOTATION PLUS_MINUS? NUMBER EXPONENT? //Grammar rule for recognizing numbers in BISON
    { //Start of code to be executed when rule is matched
        printf("Number found: %s\n", yytext); //Prints the matched number
    }
%%