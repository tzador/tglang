%{
/* This code snippet is a BISON grammar that recognizes a simple calculator language. */
/* BISON is a popular parser generator tool used for building compilers and interpreters for programming languages. */
%}

%start expression
%token NUMBER

%%

expression: NUMBER '+' NUMBER           { printf("Result: %d\n", $1 + $3); } /* This rule defines an expression of the form NUMBER + NUMBER and prints the result of the addition operation. */
          | NUMBER '-' NUMBER           { printf("Result: %d\n", $1 - $3); } /* This rule defines an expression of the form NUMBER - NUMBER and prints the result of the subtraction operation. */
          | NUMBER '*' NUMBER           { printf("Result: %d\n", $1 * $3); } /* This rule defines an expression of the form NUMBER * NUMBER and prints the result of the multiplication operation. */
          | NUMBER '/' NUMBER           { printf("Result: %d\n", $1 / $3); } /* This rule defines an expression of the form NUMBER / NUMBER and prints the result of the division operation. */
          ;

%%

/* This code snippet implements a basic calculator using BISON. */
/* It takes in an expression, tokenizes it, and performs the appropriate operation on the operands. */
/* To use this code snippet, replace "%option noyywrap" with "%option yywrap" and remove the "yywrap" function. */
/* Then, use "bison -d -o calculator.c calculator.y" to generate the C code for the parser. */