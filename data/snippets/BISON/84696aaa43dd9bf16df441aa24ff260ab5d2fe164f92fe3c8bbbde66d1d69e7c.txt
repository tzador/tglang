%{
  /* This section is used for including header files and global variables */
  #include <stdio.h>
  /* Declare global variables */
  int var1, var2;
  /* Declare functions */
  void foo(void);
%}

/* The list of tokens that will be used in the grammar rules */
DIGIT [0-9]
LETTER [a-zA-Z]
NEWLINE \n

/* The grammar rules for the language */
%%
program:
  | function_list
;

function_list:
  | function
  | function_list function
;

function:
  | type identifier '(' parameter_list ')' '{' statement_list '}'
  | type identifier '(' ')' '{' statement_list '}'
;

type:
  | DIGIT
  | LETTER
;

identifier:
  | LETTER
  | identifier LETTER
  | identifier DIGIT
;

parameter_list:
  | type identifier
  | parameter_list ',' type identifier
;

statement_list:
  | statement
  | statement_list statement
;

statement:
  | expression ';'
  | declaration ';'
  | if_statement
  | while_statement
  | for_statement
  | return_statement ';'
;

expression:
  | var '=' exp
  | var '+' exp
  | var '-' exp
  | var '*' exp
  | var '/' exp
  | exp '+' exp
  | exp '-' exp
  | exp '*' exp
  | exp '/' exp
  | '-' exp
  | '(' exp ')'
  | num
  | var
;

declaration:
  | type var '=' num
  | type var '=' var
;

if_statement:
  | 'if' '(' cond ')' '{' statement_list '}' 'else' '{' statement_list '}'
  | 'if' '(' cond ')' '{' statement_list '}'
;

while_statement:
  | 'while' '(' cond ')' '{' statement_list '}'
;

for_statement:
  | 'for' '(' declaration ';' cond ';' assignment ')' '{' statement_list '}'
  | 'for' '(' ';' cond ';' assignment ')' '{' statement_list '}'
  | 'for' '(' ';' ';' assignment ')' '{' statement_list '}'
  | 'for' '(' ';' ';' ')' '{' statement_list '}'
;

assignment:
  | var '=' exp
;

return_statement:
  | 'return' exp
  | 'return'
;

cond:
  | cond '&&' cond
  | cond '||' cond
  | '(' cond ')'
  | var '==' var
  | var '!=' var
  | var '>' var
  | var '<' var
  | var '>=' num
  | var '<=' num
  | '!' '(' cond ')'
  | 'true'
  | 'false'
;

var:
  | LETTER
  | var LETTER
  | var DIGIT
;

num:
  | DIGIT
  | num DIGIT
;

/* Custom C code that will be executed in special sections */
void foo(void) {
  /* Custom code can be added here */
  printf("This is a custom function in BISON.\n");
}
%%

/* The C code that will be executed before the parser is generated */
void main(void) {
  /* Add custom code here before the parser is generated */
  /* Call the start rule of the parser */
  yyparse();
}

/* The C code that will be executed when an error occurs during parsing */
void yyerror(char *msg) {
  /* Custom error handling code can be added here */
  fprintf(stderr, "%s\n", msg);
}

/* The function for getting input for the parser */
int yywrap() {
  /* Return 1 to signal end of input */
  return 1;
}

/* The function for handling internal conflicts */
void yyerror(char *msg) {
  /* Custom code for handling conflicts can be added here */
  fprintf(stderr, "There is a conflict in the grammar: %s\n", msg);
}