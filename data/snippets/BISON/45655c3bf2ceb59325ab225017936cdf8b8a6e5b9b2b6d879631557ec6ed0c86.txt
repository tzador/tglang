%{
// This section is used for global variable and macro declarations
// Here we declare a variable called count and initialize it to 0
int count = 0;
%}

// This section is used for defining the tokens and associativity
// Here we define the token for integers and its associativity
%token <int> INTEGER
%left '+' '-'
%right '*' '/'

// This section is used for defining the grammar rules
// Here we define a rule for a mathematical expression with operators +,-,*,/
expression:
    INTEGER {
        // This action code is executed when an INTEGER token is encountered
        // Increment the count variable by 1
        count++;
    }
    |
    expression '+' expression {
        // This action code is executed when a '+' operator is encountered
        // Decrement the count variable by 1
        count--;
    }
    |
    expression '-' expression {
        // This action code is executed when a '-' operator is encountered
        // Decrement the count variable by 1
        count--;
    }
    |
    expression '*' expression {
        // This action code is executed when a '*' operator is encountered
        // Increment the count variable by 2
        count += 2;
    }
    |
    expression '/' expression {
        // This action code is executed when a '/' operator is encountered
        // Increment the count variable by 2
        count += 2;
    }
    ;

// This section is used for defining the start symbol
// Here we specify that the start symbol is expression 
%start expression 

// This section specifies the locations where the actions are executed
// Here we specify that the actions are executed after the reduction of a rule
%locations

// This section is used for error handling
// Here we specify that if an error occurs during parsing, the parser should exit
%error-verbose

// This section is used for the actual code of the parser
// Here we define the function for parsing an input string
// The function takes a BISON file as an argument
void parse(string file) {
    // Open the file for reading
    FILE* stream = fopen(file, "r");
    // Parse the input file using the above defined rules
    yyparse();
}

// Here we call the parse function, passing in the filename as an argument
parse("input.txt");

// Print the value of the count variable
// We should see the number of operators in the input expression
printf("Number of operators: %d", count);

// This section is used for the lexer
// Here we define the regular expressions for the tokens
// Here we define a regular expression for integers
INTEGER [0-9]+

// This section is used for the main function
// Here we define the main function where the program execution starts
int main() {
    // Get the input expression from the user
    printf("Enter a mathematical expression: ");
    scanf("%s", input);
    // Call the parser function
    parse(input);
    // Print the result
    printf("Result: %d", result);
    return 0;
}