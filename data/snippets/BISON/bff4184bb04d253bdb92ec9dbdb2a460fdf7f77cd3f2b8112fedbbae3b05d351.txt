%token NUM 256
%token VAR 257
%token IF 258
%token ELSE 259
%token WHILE 260

%%
stmtlist: /*empty*/
         | stmtlist stmt ';'
;

stmt    : expr
        | VAR '=' expr
        | IF '(' expr ')' stmt
        | IF '(' expr ')' stmt ELSE stmt
        | WHILE '(' expr ')' stmt
;

expr    : NUM
        | VAR
        | expr '+' expr
        | expr '-' expr
        | expr '*' expr
        | expr '/' expr
        | '-' expr
        | '(' expr ')'
;

%%
int yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

int main() {
    yyparse();
    return 0;
}

int yylex() {
    int c;

    /* Addition and subtraction operators */
    if (c == '+') {
        return '+';
    } else if (c == '-') {
        return '-';
    }

    /* Multiplication and division operators */
    if (c == '*') {
        return '*';
    } else if (c == '/') {
        return '/';
    }

    /* Parentheses for grouping */
    if (c == '(') {
        return '(';
    } else if (c == ')') {
        return ')';
    }

    /* Numbers */
    if (isdigit(c)) {
        int result = 0;
        while (isdigit(c)) {
            result = result * 10 + (c - '0');
            c = getchar();
        }
        ungetc(c, stdin);
        return NUM;
    }

    /* Variables */
    if (isalpha(c)) {
        int result = 0;
        while (isalnum(c)) {
            result = result * 10 + (c - '0');
            c = getchar();
        }
        ungetc(c, stdin);
        return VAR;
    }

    /* Comparisons and keywords */
    if (c == '<') {
        c = getchar();
        if (c == '=') {
            return '<=';
        } else {
            ungetc(c, stdin);
            return '<';
        }
    } else if (c == '>') {
        c = getchar();
        if (c == '=') {
            return '>=';
        } else {
            ungetc(c, stdin);
            return '>';
        }
    } else if (c == '=') {
        c = getchar();
        if (c == '=') {
            return '==';
        } else {
            ungetc(c, stdin);
            return '=';
        }
    } else if (c == '!') {
        c = getchar();
        if (c == '=') {
            return '!=';
        } else {
            ungetc(c, stdin);
            return '!';
        }
    } else if (c == '&') {
        c = getchar();
        if (c == '&') {
            return '&&';
        } else {
            ungetc(c, stdin);
            return '&';
        }
    } else if (c == '|') {
        c = getchar();
        if (c == '|') {
            return '||';
        } else {
            ungetc(c, stdin);
            return '|';
        }
    } else if (c == 'i') {
        char keyword[3];
        keyword[0] = c;
        keyword[1] = getchar();
        keyword[2] = getchar();
        if (strcmp(keyword, "if") == 0) {
            return IF;
        } else if (strcmp(keyword, "int") == 0) {
            return INT;
        } else if (strcmp(keyword, "else") == 0) {
            return ELSE;
        }
        ungetc(keyword[2], stdin);
        ungetc(keyword[1], stdin);
    } else if (c == 'w') {
        char keyword[5];
        keyword[0] = c;
        keyword[1] = getchar();
        keyword[2] = getchar();
        keyword[3] = getchar();
        keyword[4] = getchar();
        if (strcmp(keyword, "while") == 0) {
            return WHILE;
        }
        ungetc(keyword[4], stdin);
        ungetc(keyword[3], stdin);
        ungetc(keyword[2], stdin);
        ungetc(keyword[1], stdin);
    }

    return 0;
}