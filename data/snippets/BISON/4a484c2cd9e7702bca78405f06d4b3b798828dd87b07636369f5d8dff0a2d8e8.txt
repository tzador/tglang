%{
/* This is a comment in the BISON language */

// Declare a variable of type int
int num;

// Declare a string variable
string word;

// Define a function add that takes in two integer parameters
int add(int x, int y)
{
    return x + y;
}

// Define a function subtract that takes in two integer parameters
int subtract(int x, int y)
{
    return x - y;
}

// This is a function declaration for a prototype
int multiply(int, int);

// Declare an array of integers
int numbers[10];
%}

/* The grammar rules start here */
start:
    program { /* This is the start rule */ }
    | program function { /* This rule allows for multiple function definitions */ }
    ;

program:
    /* This rule defines the entire program and is mandatory */
    /* It should be the first rule in your grammar */
    declaration_list { /* This is the code that will be executed */ }
    ;

/* Rule for declaration of variables and functions */
declaration_list:
    declaration
    | declaration_list declaration
    ;

/* Rule for variable declaration */
declaration:
    type variable_list ;
    ;

/* Rule for variable type */
type:
    int { /* This is the token for int type, you can define more types here */ }
    | string { /* This is the token for string type */ }
    | void { /* This is the token for void type */ }
    ;

/* Rule for variable list */
variable_list:
    variable { /* This is the first variable in the list */ }
    | variable_list , variable { /* This allows for multiple variables to be declared at once */ }
    ;

/* Rule for variable */
variable:
    NAME { /* This is the token for a variable name */ }
    | NAME [NUMBER] { /* This allows for an array of variable length */ }
    ;

/* Rule for function definition */
function:
    type NAME ( parameters )
    {
        /* This is the code that will be executed when the function is called */
    }
    ;

/* Rule for function parameters */
parameters:
    /* This allows for an empty parameter list */
    | type variable { /* This is the first parameter in the list */ }
    | parameters , type variable { /* This allows for multiple parameters to be passed in */ }
    ;

/* Rule for function calls */
function_call:
    NAME ( arguments ) ; /* This is the token for the end of the function call statement */
    ;

/* Rule for function arguments */
arguments:
    /* This allows for an empty argument list */
    | variable { /* This is the first argument in the list */ }
    | arguments , variable { /* This allows for multiple arguments to be passed in */ }
    ;

%%

/* The code section is where the actual code is written */
/* Anything outside of this section is just defining the grammar rules */
/* This is where you can write your own code using the grammar rules you have defined */
program:
    declaration_list {
        // Assign a value to the variable num
        num = 5;

        // Assign a string value to the variable word
        word = "Hello World!";

        // Call the add function and store the result in a variable
        int result = add(num, 10);

        // Call the subtract function and print the result to the screen
        printf("Subtracting %d from %d gives %d\n", num, 3, subtract(num, 3));

        // Fill the array with numbers using a loop
        for (int i = 0; i < 10; i++) {
            numbers[i] = i;
        }

        // Call the multiply function and print the result for each number in the array
        for (int i = 0; i < 10; i++) {
            printf("Multiplying %d by 2 gives %d\n", numbers[i], multiply(numbers[i], 2));
        }
    }
    ;