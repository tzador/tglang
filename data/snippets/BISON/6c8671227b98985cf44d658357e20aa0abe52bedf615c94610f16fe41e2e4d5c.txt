%%

/* This section defines the lexer, which is responsible for scanning the input
   and returning tokens that match the specified patterns. */

%{
/* include necessary header files and declare any global variables or functions here */
%}

/* define regular expressions to match tokens */
/* each expression is followed by a code block to execute when a match is found */
/* the code block may consist of multiple statements */

%%
{
    /* match a number token, executed code prints the value and increments a counter */
    [0-9]+              { printf("Number token: %s\n", yytext); yylval.n = atoi(yytext); yynumbers++; }
    /* match an identifier token, executed code prints the name and stores it in a buffer */
    [a-zA-Z_][a-zA-Z0-9_]*  { printf("Identifier token: %s\n", yytext); yylval.id = strdup(yytext); }
    /* match a string token surrounded by double quotes, executed code prints the value */
    \"([^\\\n]|(\\(.|\n)))*\"    { printf("String token: %s\n", yytext); yylval.str = strdup(yytext); }
    /* match a comment, executed code ignores it */
    "//".*$              {}

    /* return tokens to parser */
    "HELLO"              { return TOK_HELLO; }
    "WORLD"              { return TOK_WORLD; }

    /* handle any other characters that weren't matched */
    /* executed code logs an error and increments error counter */
    .                   { fprintf(stderr, "Invalid character: %s\n", yytext); yyerror++; }
}
%%

/* This section defines the parser, which uses the tokens generated by the lexer
   to build a syntax tree and perform actions based on the grammar rules. */

/* define non-terminal symbols and their corresponding actions */
/* each symbol is followed by a colon and a block of code to execute */

program : HELLO WORLD    { printf("Found Hello World!\n"); return 0; }
        | expression     { printf("Found an expression!"); return 1; }
        ;

expression : NUMBER '+' NUMBER    { printf("%d + %d = %d\n", $1, $3, $1+$3); }
           | STRING '*' NUMBER    { printf("\"%s\" * %d = %s\n", $1, $3, multiply_string($1, $3)); }
           ;

%%
/* this section contains any additional helper functions or code to be executed before or after parsing */

/* define a helper function to multiply a string by a given number */
char* multiply_string(char* str, int num) {
    /* allocate memory for the new string */
    char* result = (char*)malloc(strlen(str)*num+1);
    /* loop through number of times and concatenate original string to result string */
    for (int i = 0; i < num; i++) {
        strcat(result, str);
    }
    /* return the result string */
    return result;
}