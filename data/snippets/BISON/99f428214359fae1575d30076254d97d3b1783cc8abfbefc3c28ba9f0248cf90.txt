%token <value> IDENT // Declares a token named "IDENT" with a numerical value associated with it

%% // Separates the definitions section from the rules section

variable_decl: type IDENT "=" expression ";" { // Rule for declaring a variable with a specified type and identifier, followed by an equal sign, an expression and a semicolon
    $<value>$ = $<value>$; // Assign the value of the expression to the variable
}

type: "int" | "float" | "bool" | "string" | "void"; // Defines the types that can be used for variable declarations

expression: // Rule for defining expressions
    INTEGER_LITERAL  { // Matches an integer literal
        $<value>$ = $<value>$; // Assign the numerical value to the expression
    } 
    | FLOAT_LITERAL { // Matches a float literal
        $<value>$ = $<value>$; // Assign the numerical value to the expression
    }
    | IDENT { // Matches an identifier
        $<value>$ = $<value>$; // Retrieve and assign the value of the identifier to the expression
    }
    | expression "+" expression { // Matches the addition operation between two expressions
        $<value>$ = $<value>$ + $<value>$; // Assign the sum of the values of the two expressions to the expression
    }
    | expression "-" expression { // Matches the subtraction operation between two expressions
        $<value>$ = $<value>$ - $<value>$; // Assign the difference of the values of the two expressions to the expression
    }
    | expression "*" expression { // Matches the multiplication operation between two expressions
        $<value>$ = $<value>$ * $<value>$; // Assign the product of the values of the two expressions to the expression
    }
    | expression "/" expression { // Matches the division operation between two expressions
        $<value>$ = $<value>$ / $<value>$; // Assign the quotient of the values of the two expressions to the expression
    }
    | "(" expression ")" { // Matches an expression within parentheses
        $<value>$ = $<value>$; // Retrieve and assign the value of the expression within the parentheses to the expression
    }
    | "!" expression { // Matches the logical negation operation on an expression
        $<value>$ = !$<value>$; // Assign the logical negation of the value of the expression to the expression
    }
    | expression ">" expression { // Matches the greater than operation between two expressions
        $<value>$ = $<value>$ > $<value>$; // Assign the Boolean value of whether the first expression is greater than the second expression to the expression
    }
    | expression "<" expression { // Matches the less than operation between two expressions
        $<value>$ = $<value>$ < $<value>$; // Assign the Boolean value of whether the first expression is less than the second expression to the expression
    }
    | expression ">=" expression { // Matches the greater than or equal to operation between two expressions
        $<value>$ = $<value>$ >= $<value>$; // Assign the Boolean value of whether the first expression is greater than or equal to the second expression to the expression
    }
    | expression "<=" expression { // Matches the less than or equal to operation between two expressions
        $<value>$ = $<value>$ <= $<value>$; // Assign the Boolean value of whether the first expression is less than or equal to the second expression to the expression
    }
    | expression "==" expression { // Matches the equality operation between two expressions
        $<value>$ = $<value>$ == $<value>$; // Assign the Boolean value of whether the two expressions are equal to the expression
    }
    | expression "!=" expression { // Matches the inequality operation between two expressions
        $<value>$ = $<value>$ != $<value>$; // Assign the Boolean value of whether the two expressions are not equal to the expression
    }
    | expression "&&" expression { // Matches the logical AND operation between two expressions
        $<value>$ = $<value>$ && $<value>$; // Assign the logical AND of the two expressions to the expression
    }
    | expression "||" expression { // Matches the logical OR operation between two expressions
        $<value>$ = $<value>$ || $<value>$; // Assign the logical OR of the two expressions to the expression
    }
    | expression "?:" expression ":" expression { // Matches a ternary operation with a condition expression, true expression and false expression
        $<value>$ = $<value>$ ? $<value>$ : $<value>$; // Assign the value of the true or false expression depending on the value of the condition expression to the expression
    }
    | "input()" { // Matches the input function which prompts the user to input a value
        $<value>$ = input(); // Retrieve the user inputted value and assign it to the expression
    }
    | "output(" expression ")" { // Matches the output function which outputs the value of the expression to the console
        output($<value>$); // Output the value of the expression to the console
    };


%%