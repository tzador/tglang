// This code snippet is an example of a Bison grammar for a simple calculator

// Definition section
%{
#include <stdio.h> // includes standard input/output library

// declare global variables
int result; // stores result of calculation
%}

// Rules section
%%

// rule for expr
expr: expr '+' term  { result = $1 + $3; }
| expr '-' term   { result = $1 - $3; }
| term        // if no operator, return term as result
;

// rule for term
term: term '*' factor  { result = $1 * $3; }
| term '/' factor  { result = $1 / $3; }
| factor        // if no operator, return factor as result
;

// rule for factor (parenthesis)
factor: '(' expr ')'  { result = $2; } // ignore parentheses, return expr as result
| NUM       // rule for numbers, defined as a token in the lexer section
;

// Rules section
%%
// do not print the above explanation, just the code in triple backticks