%%

//define the start rule
start: statement_list;

//define the statement list rule
statement_list: statement
              | statement_list NEWLINE statement;

//define the statement rule
statement: expression_list NEWLINE
         | PRINT "[" expression_list "]" NEWLINE { printf("Printing list:"); }
         | IF expression NEWLINE statement_list NEWLINE END { printf("If-Else Statement"); }
         | WHILE expression NEWLINE statement_list NEWLINE END { printf("While Statement"); }
         | FOR ID "=" expression TO expression NEWLINE statement_list NEWLINE END { printf("For Loop"); }
         ;

//define the expression list rule
expression_list: expression
                | expression_list "," expression;

//define the expression rule
expression: ID "=" expression { printf("Assigning value to ID"); }
          | ID "+" expression { printf("Adding value to ID"); }
          | ID "*" expression { printf("Multiplying value to ID"); }
          | INT { printf("Integer value"); }
          | STRING { printf("String value"); }
          ;

//define the tokens
ID: [a-zA-Z]+;
INT: [0-9]+;
STRING: ["][ a-zA-Z0-9]*["];

//ignore spaces
%option noyywrap
%option noline
%option nounput
%option noinput
%option noyywrap

//ignore comments
%{
  //# denotes a comment in BISON
  ignore_comment();
%}
<INITIAL>"//#"[^\n]*  {ignore_comment();}

//ignore characters other than tokens
%x INITIAL
<INITIAL>.;
%%
void ignore_comment(){
  int c = input();
  while(c != '\n'){
    c = input();
  }
  BEGIN INITIAL;
}

//main function
int main(){
  printf("Enter code to be parsed:");
  yylex();
}