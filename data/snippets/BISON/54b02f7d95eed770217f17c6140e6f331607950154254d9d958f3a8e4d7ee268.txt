/* This is a basic BISON program that demonstrates the use of tokens and production rules */

%token <T_CONSTANT> INT_CONST  /* define token for integer constants */
%token <T_OPERATOR> PLUS MINUS DIVIDE MULTIPLY  /* define tokens for arithmetic operators */

%% /* grammar rules */

stmt_list:                     /* start rule that represents a list of statements */
    | stmt_list stmt           /* recursively add more statements to the list */
    ;

stmt:                          /* rule for a simple statement */
    expr ';'                   /* statement ends with a semicolon */
    ;

expr:                          /* rule for an expression */
    INT_CONST                  /* expression can be an integer constant */
    | expr '+' expr            /* expression can also be multiple sub-expressions with an operator in between */
    | expr '-' expr           
    | expr '*' expr
    | expr '/' expr
    ;

%% /* code for tokenizing input and generating output */

#include <stdio.h>    /* include standard input/output library */
#include <stdlib.h>   /* include library for memory allocation */ 

int
yylex (void);       /* declare function for tokenizing input */
void
yyerror (const char *s);  /* declare function for notifying syntax errors */

main (void)
{
    yyparse ();          /* call function to analyze input according to grammar rules */
}

int
yylex (void)
{
    int token = 0;       /* initialize token variable */
    
    /* code for handling tokens and recognizing tokens in the input */
    if (/* logic for recognizing INT_CONST token */) {
        yylval = /* assign value to yylval variable */;
        token = INT_CONST;    /* return token for INT_CONST */
    } else if (/* logic for recognizing PLUS token */) {
        token = PLUS;         /* return token for PLUS */
    } else if (/* logic for recognizing MINUS token */) {
        token = MINUS;        /* return token for MINUS */
    } else if (/* logic for recognizing MULTIPLY token */) {
        token = MULTIPLY;     /* return token for MULTIPLY */
    } else if (/* logic for recognizing DIVIDE token */) {
        token = DIVIDE;       /* return token for DIVIDE */
    } else {
        printf("Syntax error: invalid token\n");   /* error handling if input does not match any defined tokens */
        exit(1);      /* terminate program with error code 1 */
    }
    
    return token;   /* return recognized token to parser */
}

void
yyerror (const char *s)
{
    printf("Syntax error: %s\n", s);    /* print error message */
    exit(1);        /* terminate program with error code 1 */
}