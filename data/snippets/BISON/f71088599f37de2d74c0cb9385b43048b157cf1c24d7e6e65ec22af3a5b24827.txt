%token      DIGIT "digit" 
%type <int> NUMBER "number"

%%

start: expression
     | error { yyerror("Syntax error. Invalid expression."); }

expression: NUMBER '+' NUMBER { $$ = $1 + $3; }
          | NUMBER '-' NUMBER { $$ = $1 - $3; }
          | NUMBER '*' NUMBER { $$ = $1 * $3; }
          | NUMBER '/' NUMBER { 
                                if ($3 != 0) { // if denominator is not zero
                                    $$ = $1 / $3;
                                } else { // if denominator is zero
                                    yyerror("Division by zero.");
                                    yyabort();
                                }
                              }

%%

int main(int argc, char **argv) {
    yyparse(); // run parser
    return 0;
}

// function to handle syntax errors
void yyerror(const char* message) {
    printf("Error: %s\n", message);
}

// function to abort parsing
void yyabort() {
    printf("Parsing aborted."); // print error message
    exit(1); // exit program with error code 1
}