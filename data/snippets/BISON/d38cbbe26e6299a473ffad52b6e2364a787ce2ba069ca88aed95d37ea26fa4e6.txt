%start program
%token <string> IDENTIFIER DOT INTEGER
%type <string> program
%%

program:
    declaration_list {
        $$ = "This is the start of the program.\n"
                + "\n"
                + $1
    }
    /* rule to handle empty programs */
    | /* empty */ {
        $$ = "This program is empty."
    };

declaration_list:
    declaration {
        $$ = "This is a list of declarations in the program.\n"
                + "\n"
                + $1
    }
    /* rule to handle multiple declarations */
    | declaration declaration_list {
        $$ = $2 + "\n" + $1
    };

declaration:
    IDENTIFIER DOT types {
        $$ = "This is a declaration of a variable " + $1 + " with type " + $3 + "."
    }
    | function_declaration {
        $$ = "This is a declaration of a function:\n"
                + "\n"
                + $1
    };

function_declaration:
    IDENTIFIER DOT types "(" ")" "{" statement_list return_statement "}" {
        $$ = "This is a function declaration for a function called " + $1 + ".\n"
                + "It takes no arguments and returns a value of type " + $4 + ".\n"
                + "\n"
                + $8
    }
    | IDENTIFIER DOT types "(" parameter_list ")" "{" statement_list return_statement "}" {
        $$ = "This is a function declaration for a function called " + $1 + ".\n"
                + "It takes the following parameters:\n"
                + $4
                + "\n"
                + "And returns a value of type " + $6 + ".\n"
                + "\n"
                + $9
    };

parameter_list:
    types {
        $$ = "1. " + $1
    }
    /* rule to handle multiple parameters */
    | types "," parameter_list {
        $$ = $3 + "\n" + (parameter_list - 1) + ". " + $1
    };

types:
    INTEGER {
        $$ = "integer"
    }
    | STRING {
        $$ = "string"
    };

statement_list:
    /* empty */
    | statement statement_list {
        $$ = $2 + $1
    };

statement:
    /* empty */
    | print_statement {
        $$ = $1
    }
    | assignment_statement {
        $$ = $1
    };

print_statement:
    IDENTIFIER DOT "print" "(" STRING ")" {
        $$ = "Print statement: " + $1 + ".\n"
                + "Prints the string " + $4 + ".\n"
    };

assignment_statement:
    IDENTIFIER DOT "assign" "(" INTEGER ")" {
        $$ = "Assignment statement: " + $1 + ".\n"
                + "Assigns the value " + $4 + " to the variable " + $1 + ".\n"
    };

return_statement:
    IDENTIFIER DOT "return" "(" INTEGER ")" {
        $$ = "Return statement: " + $1 + " with value of " + $4
    };

%%

/* Add necessary C code */
#include <stdio.h>

int main(int argc, char *argv[]) {
    /* Set up the lexer and parser */
    yylex_init(argc, argv);
    yyparse();
    yylex_destroy();
    return 0;
}