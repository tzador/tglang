%{

/* This is a comment in BISON */

/* Declare a variable to store the result of the calculation later on */
int result;

/* Define a macro for squared numbers */
#define SQUARE(n) (n*n)

/* Declare a function to calculate the factorial of a number */
int factorial(int num) {
    int result = 1;
    for(int i = 1; i <= num; i++) {
        result *= i;
    }
    return result;
}

%}

/* Define the tokens for the lexer */
%token <num> NUMBER
%token <str> STRING
%token <id> IDENTIFIER

/* Define the grammar rules */
exp: exp '+' term { $$ = $1 + $3; }
    | exp '-' term { $$ = $1 - $3; }
    | term { $$ = $1; }

term: term '*' factor { $$ = $1 * $3; }
    | term '/' factor { $$ = $1 / $3; }
    | factor { $$ = $1; }

/* Define the rule for factor */
factor: factor '^' NUMBER { $$ = pow($1, $3); }
    | NUMBER { $$ = $1; }
    | '-' factor { $$ = -$2; }
    | '(' exp ')' { $$ = $2; }

/* Define the rule for a string */
string: '"' STRING '"' { $$ = $2; }

%% /* User code can be added here */

/* Calculate the square of a given number using the SQUARE macro */
result = SQUARE(5);

/* Calculate the factorial of a given number using the factorial function */
int num = 4;
result = factorial(num);

/* Print the result */
printf("The result is %d\n", result);

/* Print a string */
printf("Hello %s\n", string);

/* End of file */
%% /* End of user code */