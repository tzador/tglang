%{
    // This section allows for defining global variables and functions
    // to be used in the grammar rules.
    #include <stdio.h>

    // Function prototype for calculating the factorial of a number.
    int factorial(int num);
%}

// Define the rules for numbers.
%token <int> NUMBER

// Define the start symbol.
%start Input

// Define the grammar rules.
%%

// Define the input rule.
Input:
    // Rule for basic arithmetic operations.
    Op_addition    { printf("%d + %d = %d\n", $1, $3, $1 + $3); }
    | Op_subtraction   { printf("%d - %d = %d\n", $1, $3, $1 - $3); }
    | Op_multiplication  { printf("%d * %d = %d\n", $1, $3, $1 * $3); }
    | Op_division      { printf("%d / %d = %d\n", $1, $3, $1 / $3); }
    | Op_factorial     { printf("Factorial of %d is %d\n", $2, factorial($2)); };

// Rules for each operation.
Op_addition: NUMBER '+' NUMBER;
Op_subtraction: NUMBER '-' NUMBER;
Op_multiplication: NUMBER '*' NUMBER;
Op_division: NUMBER '/' NUMBER;
Op_factorial: NUMBER '!' { $$ = $1; };

// Function for calculating the factorial.
int factorial(int num) {
    // Base case for factorial.
    if (num == 1) return 1;

    // Recursive case for factorial.
    else return num * factorial(num - 1);
}

// Define the error rule.
%error-verbose
INVALID:
    // Error message for invalid input.
    { fprintf(stderr, "Invalid input\n"); }
;
%%
/* Specify what to do when an error is encountered. */
YYERROR;

// Main function to read input and run the parser.
int main() {
    // Prompt user for input.
    printf("Enter an arithmetic operation: ");

    // Read input and run the parser.
    yyparse();

    return 0;
}