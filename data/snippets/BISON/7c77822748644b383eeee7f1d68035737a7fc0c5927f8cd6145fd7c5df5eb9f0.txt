/* Grammar rules for a simple calculator */

/* Define tokens */
%token NUMBER   /* numbers */
%left '+' '-'  /* addition and subtraction operators */
%left '*' '/'  /* multiplication and division operators */

/* Define grammar rules */
Expr: NUMBER
    | Expr '+' Expr
    | Expr '-' Expr
    | Expr '*' Expr
    | Expr '/' Expr
    ;

/* Define operator precedence and associativity */
%left '<' '>' '=' /* comparison operators */
%nonassoc THEN    /* conditional operator */

/* Define rule for conditional expressions */
CondExpr: Expr '<' Expr '=' Expr '<' Expr THEN Expr '<' Expr;

%%

/* Code handling tokens */
/* Function to handle numbers */
void handle_number(double num) {
    printf("Scanned number: %f\n", num);
}

/* Function to handle operators */
void handle_operator(char op) {
    printf("Scanned operator: %c\n", op);
}

/* Main function for parsing input */
main(argc, argv) int argc; char **argv; {
    yyparse();
}

%%

/* Function called by Bison parser when a token is read */
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

/* Function called by Bison to get the next token */
int yylex(void) {
    int c;

    /* Consume white space */
    while ((c = getchar()) == ' ');

    /* Check for end of input */
    if (c == EOF)
        return 0;

    /* Check for numbers */
    if (isdigit(c)) {
        ungetc(c, stdin); /* Put the character back in the input buffer */
        scanf("%f", &yylval); /* Store the scanned number in yylval */
        return NUMBER;
    }

    /* Check for operators */
    if (c == '+' || c == '-' || c == '*' || c == '/') {
        return c; /* Return the operator character as the token */
    }

    /* If none of the above matched, return an error token */
    return ERROR;
}