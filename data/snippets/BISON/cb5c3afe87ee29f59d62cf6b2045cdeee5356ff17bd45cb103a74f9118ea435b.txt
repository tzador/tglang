/* Grammar rules for a simple arithmetic calculator */
/* Non-terminal symbols */
expression: term | expression PLUS term | expression MINUS term
term: factor | term TIMES factor | term DIVIDE factor
factor: NUMBER | LEFT_PAREN expression RIGHT_PAREN

/* Terminal symbols */
PLUS: '+'
MINUS: '-'
TIMES: '*'
DIVIDE: '/'
NUMBER: /[0-9]+/
LEFT_PAREN: '('
RIGHT_PAREN: ')'

%%

/* Rules for calculating the value of an expression */
%%

%{
    /* Variables to store the calculated value */
    double result = 0.0;
    int current_number = 0;
%}

/* Rules for each non-terminal symbol */
expression:
    /* Rule for the first option (term) */
    term
    {
        result = $1; /* Store the value of term in result variable */
    }
    /* Rule for the second option (expression PLUS term) */
    | expression PLUS term
    {
        result = $1 + $3; /* Add the values of expression and term and store in result */
    }
    /* Rule for the third option (expression MINUS term) */
    | expression MINUS term
    {
        result = $1 - $3; /* Subtract the values of expression and term and store in result */
    }
    ;

term:
    /* Rule for the first option (factor) */
    factor
    {
        result = $1; /* Store the value of factor in result variable */
    }
    /* Rule for the second option (term TIMES factor) */
    | term TIMES factor
    {
        result = $1 * $3; /* Multiply the values of term and factor and store in result */
    }
    /* Rule for the third option (term DIVIDE factor) */
    | term DIVIDE factor
    {
        result = $1 / $3; /* Divide the values of term and factor and store in result */
    }
    ;

factor:
    /* Rule for the first option (NUMBER) */
    NUMBER
    {
        result = atoi($1); /* Convert the string value of NUMBER to an integer */
    }
    /* Rule for the second option (LEFT_PAREN expression RIGHT_PAREN) */
    | LEFT_PAREN expression RIGHT_PAREN
    {
        result = $2; /* Store the value of expression in result since it was calculated in the parentheses */
    }
    ;

/* Ignore all whitespace */
/* Note: This rule must be placed after all other rules */
%%
"\t" | "\n" | "\r" | " ";

/* Code to read input from user and calculate the result */
int main()
{
    /* Get input from user */
    char input[50];
    printf("Enter an expression: ");
    scanf("%s", input);

    /* Parse the input using the defined grammar rules */
    yyscan_t scanner;
    YY_BUFFER_STATE state;

    /* Create the scanner */
    yylex_init(&scanner);

    /* Set the input to the scanner */
    state = yy_scan_string(input, scanner);

    /* Run the parser and save the result in result variable */
    yyparse(scanner);

    /* Print the result */
    printf("Result: %f\n", result);

    /* Delete the scanner and free memory */
    yy_delete_buffer(state, scanner);
    yylex_destroy(scanner);
    
    return 0;
}