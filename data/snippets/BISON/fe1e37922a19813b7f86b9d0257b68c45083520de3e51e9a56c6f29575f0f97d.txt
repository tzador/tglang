%token NUM
%token VAR
%token ADD SUB MULT DIV
%token LPAREN RPAREN

%%

// Rules for arithmetic expressions
expr: NUM
    | VAR
    | expr ADD expr
    | expr SUB expr
    | expr MULT expr
    | expr DIV expr
    | LPAREN expr RPAREN;

// Rules for assignment
assign: VAR '=' expr;

%%

// Code for evaluating arithmetic expressions
void eval_expr(int val, char op, int val2) {
    switch(op) {
        case '+':
            val += val2;
            break;

        case '-':
            val -= val2;
            break;

        case '*':
            val *= val2;
            break;

        case '/':
            val /= val2;
            break;
    }
}

// Code for parsing input and executing assignment
int main() {
    int result = 0;
    int val1, val2;
    char op;
    char var_name[20];

    printf("Enter an expression or assignment: ");
    yylex();

    // if input is an assignment
    if ($1 == VAR && $2 == '=' && $3 == EXPR) {
        strcpy(var_name, $1);
        eval_expr(result, '=', $3);
        printf("%s = %d\n", var_name, result);
    }
    // if input is an expression
    else if ($1 == LPAREN && $2 == EXPR && $3 == RPAREN) {
        yylex();
        if ($1 == ADD || $1 == SUB || $1 == MULT || $1 == DIV) {
            op = $1;
            yylex();
            if ($1 == NUM || $1 == VAR) {
                val1 = $1;
                yylex();
                // ignore endline after expression
                if ($1 == NL) {
                    yylex();
                }
                // perform operation on next expression
                yylex();
                if ($1 == NUM || $1 == VAR) {
                    val2 = $1;
                    eval_expr(val1, op, val2);
                    printf("Result: %d\n", val1);
                }
            }
        }
    }
}