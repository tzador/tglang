%%
program : class_list EOF
    {
        // This is the start rule of our program, it consists of a list of classes and ends with an EOF token
    }
    ;

class_list : class
    {
        // This is a rule for a single class
    }
    | class_list class
    {
        // This rule allows for multiple classes to be defined in the list
    }
    ;

class : class_type ID LBRACE feature_list RBRACE
    {
        // This rule defines a class and all its features using the syntax of BISON
    }
    ;

class_type : OBJECT
    {
        // This rule defines the type of the class as 'OBJECT'
    }
    | class_type LESS class_type_greater
    {
        // This rule allows for inheritance by specifying the parent class after a '<' symbol
    }
    ;

class_type_greater : OBJECT
    {
        // This rule defines the type of the parent class as 'OBJECT'
    }
    | ID
    {
        // This rule allows for inheritance from a previously declared class
    }
    ;

feature_list : /* empty */
    {
        // This rule allows for a class to have no features declared
    }
    | feature_list feature SEMI
    {
        // This rule allows for multiple features to be defined in the list
    }
    ;

feature : attribute
    {
        // This rule defines an attribute (instance variable) for the class
    }
    | method
    {
        // This rule defines a method (function) for the class
    }
    ;

attribute : ID COLON type
    {
        // This rule defines an attribute with a name and type
    }
    ;

type : INT
    {
        // This rule defines the type as an integer
    }
    | STR
    {
        // This rule defines the type as a string
    }
    | FLOAT
    {
        // This rule defines the type as a float
    }
    | BOOL
    {
        // This rule defines the type as a boolean
    }
    | ID
    {
        // This rule allows for user-defined types
    }
    ;

method : ID LPAREN formals_opt RPAREN COLON type LBRACE expr RBRACE
    {
        // This rule defines a method with a name, optional parameters, return type, and body expression
    }
    ;

formals_opt : formals
    {
        // This rule specifies that formals must be present
    }
    | /* empty */
    {
        // This rule specifies that no formals are required
    }
    ;

formals : formal
    {
        // This rule defines a single parameter for a method
    }
    | formals COMMA formal
    {
        // This rule allows for multiple parameters to be defined in the list
    }
    ;

formal : ID COLON type
    {
        // This rule defines a parameter with a name and type
    }
    ;

expr : /* empty */
    {
        // This rule defines an empty expression
    }
    | IF LPAREN expr RPAREN LBRACE expr RBRACE
    {
        // This rule defines an if statement with an optional else statement
    }
    | WHILE LPAREN expr RPAREN LBRACE expr RBRACE
    {
        // This rule defines a while loop
    }
    | ID ASSIGN expr
    {
        // This rule allows for assignment of a value to an attribute or variable
    }
    | ID LPAREN actuals_opt RPAREN
    {
        // This rule allows for a method to be called with optional arguments
    }
    | expr PLUS expr
    {
        // This rule defines an addition expression
    }
    | expr MINUS expr
    {
        // This rule defines a subtraction expression
    }
    | expr TIMES expr
    {
        // This rule defines a multiplication expression
    }
    | expr DIVIDE expr
    {
        // This rule defines a division expression
    }
    | NOT expr
    {
        // This rule defines a logical negation expression
    }
    | LPAREN expr RPAREN
    {
        // This rule allows for grouping of expressions
    }
    ;

actuals_opt : actuals
    {
        // This rule specifies that actuals must be present
    }
    | /* empty */
    {
        // This rule specifies that no actuals are required
    }
    ;

actuals : actual
    {
        // This rule defines a single argument for a method call
    }
    | actuals COMMA actual
    {
        // This rule allows for multiple arguments to be defined in the list
    }
    ;

actual : expr
    {
        // This rule defines an actual argument as a valid expression
    }
    ;
%%