/** Defines the grammar rules for a mathematical expression **/

%token INTEGER REAL     /* defines the tokens as integers or real numbers */

%%

/* The expression rule defines a mathematical expression with possible nested expressions */
expression: 
        INTEGER               /* a single integer */
        | REAL                /* a single real number */
        | expression '+' expression    /* expression with addition */
        | expression '-' expression    /* expression with subtraction */ 
        | expression '*' expression    /* expression with multiplication */
        | expression '/' expression    /* expression with division */
        | '(' expression ')'            /* nested expression within parentheses */
        ;

/* The statement rule defines a statement, which can be an assignment or a mathematical expression */
statement:
        identifier '=' expression      /* assignment statement */
        | expression                   /* mathematical expression statement */
        ;

/* The identifier rule defines a valid variable name */
identifier:
        [a-zA-Z]+      /* a string of one or more alphabetic characters only */
        ;
        
%%

/* The code below is used to handle the tokens and parse the input */
#include <stdio.h>

int main()
{
    yyparse();          /* calls the parser generated by Bison */
    return 0;
}

int yyerror(const char *msg)
{
    printf("Error: %s\n", msg);
    return 1;
}