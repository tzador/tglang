%{
/* This is a BISON code snippet for a simple calculator program that can parse and evaluate basic mathematical expressions */
#include <stdio.h> 
#include <stdlib.h> 
const int NUM_OPERATORS = 5; // Number of operators supported
%} 
/* Tokens */
%token NUM // Numeric values
%token ADD SUB MUL DIV MOD // Operators
 
%% 
start: expr { printf("Result: %d\n", $1); } // Print the result of the expression
;
/* Expression rules */
expr: expr '+' term { $$ = $1 + $3; } // Addition
| expr '-' term { $$ = $1 - $3; } // Subtraction
| term // Default to term if no operator is found
;
term: term '*' factor { $$ = $1 * $3; } // Multiplication
| term '/' factor { $$ = $1 / $3; } // Division
| term '%' factor { $$ = $1 % $3; } // Modulo
| factor // Default to factor if no operator is found
;
factor: '(' expr ')' { $$ = $2; } // Parentheses
| NUM { $$ = $1; } // Number
;
/* Error handling */
%error-verbose 
%%
/* Main function */
int main(void) {
yylex();
return EXIT_SUCCESS;
}