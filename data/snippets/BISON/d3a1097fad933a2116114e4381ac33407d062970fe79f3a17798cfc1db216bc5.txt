%{
//Contains any preprocessor directives and global declarations

//Code executed at the beginning of each parse
void yyBEGIN() {
    //Code to be executed
    printf("Beginning of parse\n");
}

//Code executed at the end of a successful parse
void yyACCEPT() {
    //Code to be executed
    printf("Parse completed successfully\n");
}

//Code executed on a syntax error
void yyERROR() {
    //Code to be executed
    printf("Syntax error\n");
}

//Code executed on a token match
void yyTOKEN() {
    //Code to be executed
    printf("Token match\n");
}
%}

//Contains the grammar rules
%token NUMBER IDENTIFIER

%%

//Start symbol and its corresponding grammar rule
program: statement_list

//Grammar rules for statements
statement_list: statement
    | statement_list statement;

statement: assignment_statement
    | print_statement;

//Grammar rules for assigning values to variables
assignment_statement: IDENTIFIER '=' expression ';';

//Grammar rules for printing statements
print_statement: "print" expression ';';

//Grammar rules for expressions
expression: NUMBER
    | IDENTIFIER
    | expression '+' expression
    | expression '-' expression;

%%

//Contains any post-parse code to be executed
void yyDONE() {
    //Code to be executed
    printf("Parse completed\n");
}

//Lex code for tokenizing input
%{
//Contains any necessary headers and global declarations
#include <stdio.h>
#include <string.h>
#include "y.tab.h"

//Function to match tokens and their corresponding lexemes
int yywrap() {
    printf("Wrapped\n");
    return 1;
}

//Function to return the matched token
int yylex() {
    int token;
    token = yylex();
    if (token)
        printf("%d: %s\n", token, yytext);
    return token;
}
%}

%%

//Contains the lex rules
[a-zA-Z]+[a-zA-Z0-9]*  { /*Code to match IDENTIFIER*/ }
[0-9]+          { /*Code to match NUMBER*/ }

//Indicates that the entry point for parsing is 'program'
%start program