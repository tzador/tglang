%{
  // This section is for declarations and includes any required libraries.
  #include <stdio.h>
  #include <stdlib.h>
  
  // This defines a variable to hold the result of the program.
  double result;
  
  // This function is used to perform the actual calculation.
  double calculate(double num1, double num2, char operator) {
    switch(operator) {
      case '+':
        return num1 + num2;
      case '-':
        return num1 - num2;
      case '*':
        return num1 * num2;
      case '/':
        return num1 / num2;
      default:
        return 0;
    }
  }
  
%}

// This section defines the grammar rules for the calculator.
// It starts with a non-terminal symbol, followed by a colon (::).
// The code in curly braces ({}) is executed when the rule is matched.
// The dollar sign ($) represents the current token being matched.

// This rule handles the start of the program.
start:
  expression { 
    // This code is executed after parsing is complete.
    // It assigns the result of the calculation to the 'result' variable.
    result = $1;
  };

// This rule defines an expression as a mathematical operation.
expression:
  number '+' number { 
    // This code is executed when the expression is a sum.
    // It calls the 'calculate' function and passes the two numbers and the operator.
    // The result is stored in the '$$' variable which is used in the 'start' rule.
    $$ = calculate($1, $3, '+');
  }
  | number '-' number { 
    // This code is executed when the expression is a difference.
    // It calls the 'calculate' function and passes the two numbers and the operator.
    // The result is stored in the '$$' variable which is used in the 'start' rule.
    $$ = calculate($1, $3, '-');
  }
  | number '*' number { 
    // This code is executed when the expression is a multiplication.
    // It calls the 'calculate' function and passes the two numbers and the operator.
    // The result is stored in the '$$' variable which is used in the 'start' rule.
    $$ = calculate($1, $3, '*');
  }
  | number '/' number { 
    // This code is executed when the expression is a division.
    // It calls the 'calculate' function and passes the two numbers and the operator.
    // The result is stored in the '$$' variable which is used in the 'start' rule.
    $$ = calculate($1, $3, '/');
  };

// This rule defines a number as a decimal or an integer.
number:
  INTEGER { 
    // This code is executed when the number is an integer.
    // The 'atof' function converts the string to a double.
    $$ = atof($1);
  } 
  | DECIMAL { 
    // This code is executed when the number is a decimal.
    // The 'atof' function converts the string to a double.
    $$ = atof($1); 
  };

// This section defines any required tokens.
// Tokens can either be defined as strings or using regex.

// This token allows for integers with any amount of digits.
INTEGER: /[0-9]+/;

// This token allows for decimals with any amount of digits before and after the decimal point.
DECIMAL: /[0-9]+\.[0-9]+/;

%%

// This section is for the main function where the program execution starts.
int main() {
  // This code prompts the user to input a mathematical expression.
  printf("Enter a mathematical expression: ");
  
  // This code scans the input from the user and passes it to the 'yyparse' function.
  // The result is stored in the 'result' variable defined in the declarations section.
  yyparse();
  
  // This code displays the result to the user.
  printf("Result: %f", result);
  
  return 0; // Return status zero for successful execution.
}

// This section defines any required functions.
// In this case, only the 'calculate' function is needed and it was defined in the declarations section.