%{ 					// start of Bison declarations section
#include <stdio.h> 	// include standard input/output library
%}

%define api.pure
%define parser_class_name CalculatorParser // define parser class name as CalculatorParser
%define lexer_class_name CalculatorLexer // define lexer class name as CalculatorLexer

%code requires {			// generates code that checks if the necessary objects are initialized
    #define YYSTYPE double // define the data type of the values returned by the lexer
}

%token <value> NUMBER 		// define token NUMBER and its attribute as <value>

%% 						// start of Bison grammar section

calc: expr { 				// define production rule for calc
    printf("Result: %f\n", $1); // prints the result of the calculation
};

expr: NUMBER 				// define production rule for expr
    | expr '+' expr { $$ = $1 + $3; } // performs addition operation and assigns result to $$ (default variable for result)
    | expr '-' expr { $$ = $1 - $3; } // performs subtraction operation and assigns result to $$
    | expr '*' expr { $$ = $1 * $3; } // performs multiplication operation and assigns result to $$
    | expr '/' expr { $$ = $1 / $3; } // performs division operation and assigns result to $$
    | '(' expr ')' { $$ = $2; } 		// handles brackets in the expression
    ;

%% 						// end of Bison grammar section

int main() { 				// main function
    yyparse(); 				// calls the generated parser function
    return 0;
}

int yyerror(char *s) { 		// function to handle error messages
    printf("%s\n", s); 		// prints the error message
    return 0;
}

int yywrap() { return 1; } 	// returns 1 to indicate end of input

%{ 							// start of Bison C code section
int yyerror(char *); 		// declare yyerror function
int yywrap(); 				// declare yywrap function

int yylex(void); 			// declare yylex function
double yylval; 				// define yylval to store value returned by lexer

int main() { // main function
    do { 					// start of input loop
        yyparse(); 			// calls the generated parser function
    } while (!feof(yyin)); 	// loop until end of input
}
%} 							// end of Bison C code section