/* The following is a bison program that generates a parser for a simple calculator language */

/* Define token types */
%token <val> INTEGER /* Token for integer values */
%token ADD /* Token for addition operator */
%token SUBTRACT /* Token for subtraction operator */
%token MULTIPLY /* Token for multiplication operator */
%token DIVIDE /* Token for division operator */
%token LPAREN /* Token for left parenthesis */
%token RPAREN /* Token for right parenthesis */

/* Define precedence rules */
%left ADD SUBTRACT /* Add and subtract have equal precedence */
%left MULTIPLY DIVIDE /* Multiply and divide have equal precedence */
%right EXPONENT /* Exponents have higher precedence */

%% /* The code section starts here */

/* Define the grammar rules */

/* Program is made up of a single expression */
program: expression;
/* Expression can be an addition or subtraction operation */
expression: expression ADD expression
        | expression SUBTRACT expression
        | INTEGER;
/* Expression can be a multiplication or division operation */
expression: expression MULTIPLY expression
        | expression DIVIDE expression;
/* Expression can also include exponents */
expression: expression EXPONENT expression;
/* Expression can be enclosed in parentheses */
expression: LPAREN expression RPAREN;

/* Define the actions to take when parsing each type of expression */
%% /* This is the end of the code section */

#include <stdio.h>

/* Function to handle addition operation */
int add(int x, int y) {
  return x + y;
}

/* Function to handle subtraction operation */
int subtract(int x, int y) {
  return x - y;
}

/* Function to handle multiplication operation */
int multiply(int x, int y) {
  return x * y;
}

/* Function to handle division operation */
int divide(int x, int y) {
  return x / y;
}

/* Function to handle exponent operation */
int exponent(int x, int y) {
  int result = 1;
  while (y != 0) {
    result *= x;
    y--;
  }
  return result;
}

/* Main function to take in user input and parse it */
int main() {
  int result;
  printf("Enter a simple arithmetic expression: ");
  /* Use the generated parser to parse the user input */
  yyparse();
  /* Print the result of the calculation */
  printf("Result: %d", result);
  return 0;
}

/* Function to handle parsing of an integer token */
void yyerror(char *s) {
  /* Convert token to integer and store it as the result for the current expression */
  result = atoi(yytext);
}