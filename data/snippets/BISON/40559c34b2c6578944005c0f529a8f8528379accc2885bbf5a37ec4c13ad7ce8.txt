%token NUMBER WORD
%left '+' '-'
%left '*' '/'
%left '^'
%%
program: /* empty */
       | program line
       ;

line: '\n'
    | expression '\n'   {printf("Result: %d\n", $1);}
    ;

expression: NUMBER
          | WORD           {printf("Variable: %s\n", $1);}
          | '-' expression %prec '+'
            {$$ = -$2;}
          | expression '+' expression 
            {$$ = $1 + $3;}
          | expression '-' expression 
            {$$ = $1 - $3;}
          | expression '*' expression 
            {$$ = $1 * $3;}
          | expression '/' expression 
            {
              if ($3 == 0) {
                yyerror("Division by zero");
                $$ = 0;
              } else {
                $$ = $1 / $3;
              }
            }
          | expression '^' expression 
            {
              int result =  1;
              for (int i = 0; i < $3; i++) {
                result *= $1;
              }
              $$ = result;
            }
          ;
%%
int main(int argc, char** argv){
  yyparse();
}

int yyerror(char *s){
  printf("Error: %s\n", s);
}

int yylex(){
  int c = getchar();
  if (c == EOF) return 0;
  if (isdigit(c)) {
    ungetc(c, stdin);
    scanf("%d", &yylval);
    return NUMBER;
  }

  if (isalpha(c)) {
    ungetc(c, stdin);
    scanf("%s", yytext);
    return WORD;
  }
  return c;
}