/* Example of a BISON code snippet */

%{
#include <stdio.h>
int total = 0; /* global variable for storing total */

%}

/* start symbol for the grammar */
%start program

/* define tokens */
%token <int> NUMBER
%token <char> OPERATOR

/* grammar rules */
%%

/* program can have one or more statements */
program:
    statement 
    | program statement
    ;
    
/* statement can be an expression or an assignment */
statement:
    expression 
    | assignment
    ;

/* expression can have one or more terms separated by an operator */
expression:
    term 
    | expression OPERATOR term 
    ;
    
/* term can be a number or a variable */
term:
    NUMBER 
    | VARIABLE 
    ;
    
/* assignment can be assigning a value to a variable */
assignment:
    VARIABLE "=" expression 
    ;

%%
/* The code above defines the grammar rules and tokens for our program */

/* function for calculating the total */
void calculateTotal(int num) {
    total += num;
}

/* function for printing the total */
void printTotal() {
    printf("The total is %d\n", total);
}

/* main function */
int main() {
    /* parse the input using Bison */
    yyparse();
    
    /* print the total */
    printTotal();
    
    return 0;
}

/* Bison's internal interface */
int yylex(void);
int yynerrs;
int yyerror(char *s);

/* Function for handling syntax errors */
int yyerror(char *s) {
    /* print error message */
    fprintf(stderr, "Syntax error: %s\n", s);
    
    /* increase error counter */
    yynerrs++;
    
    return 0;
}

/* Function for lexing input */
int yylex(void) {
    /* get next token from stdin */
    int c = getchar();
    
    /* if it's a digit, return it as a NUMBER token */
    if (isdigit(c)) {
        /* convert char to int and return token */
        yylval = c - '0';
        return NUMBER;
    }
    
    /* if it's an operator, return it as an OPERATOR token */
    if (c == '+' || c == '-' || c == '*' || c == '/') {
        yylval = c;
        return OPERATOR;
    }
    
    /* otherwise, return EOF as end of input */
    return EOF;
}