/* This code snippet is using BISON, a parser generator for creating context-free grammars */

%token NUM // defines a lexical token called NUM
%token OP // defines a lexical token called OP

%% // The rules of the grammar start here
expression : //The expression rule
expression NUM OP NUM //Defines that an expression can be two numbers separated by an operator
          | expression OP expression //Defines that an expression can also be two expressions separated by an operator
          ;

%%
// This is the end of the grammar rules

/* The first expression rule is used to allow for basic arithmetic operations, such as addition and subtraction. 
The second expression rule is used to allow for more complex expressions, such as nested expressions and multiple operators. */