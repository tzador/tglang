%token <type> NUM          // defines a token named "NUM" with type attribute
%token <string> STR        // defines a token named "STR" with string attribute 
%token <op> PLUS "-" SQR   // defines tokens for arithmetic operations
%left "+" "-"             // defines left precedence for addition and subtraction
%left SQR                  // defines left precedence for square operator
%%
expr: NUM                  // rule for an expression, simply returning a number
    | STR                  // rule for an expression, simply returning a string
    | expr PLUS expr       // rule for addition, recursively evaluates two expressions
    | expr "-" expr        // rule for subtraction, recursively evaluates two expressions
    | expr SQR             // rule for square operator, recursively evaluates one expression
    ;
    
%%
main()
{
    char *string = "10 + 5 - 3 ^ 2";  // sample input string
    yylex_init(&scanner);             // initialize lexer
    YY_BUFFER_STATE buffer = yy_scan_string(string);  // create buffer from input string
    yyparse();                        // parse input string
    yy_delete_buffer(buffer);         // delete buffer
    yylex_destroy(scanner);           // destroy lexer
}

// function to handle tokens returned by lexer
void yytoken(char *tokenname, char *value) {
    if (strcmp(tokenname, "NUM") == 0) {
        int num = atoi(value);         // convert token value to integer
        $$ = num;                      // set token value as expression value
        printf("Matched token: %d\n", num);  // print matched token
    } else if (strcmp(tokenname, "STR") == 0) {
        char *str = strdup(value);     // duplicate token value as string
        $$ = str;                      // set token value as expression value
        printf("Matched token: %s\n", str);  // print matched token
    } else if (strcmp(tokenname, "PLUS") == 0) {
        printf("Matched token: +\n");   // print matched token
        $$ = $1 + $3;                   // evaluate addition expression
    } else if (strcmp(tokenname, "-") == 0) {
        printf("Matched token: -\n");   // print matched token
        $$ = $1 - $3;                   // evaluate subtraction expression
    } else if (strcmp(tokenname, "SQR") == 0) {
        printf("Matched token: ^\n");   // print matched token
        $$ = $1 * $1;                   // evaluate square operator expression
    }
}