%{
/* This is a BISON snippet for parsing a simple mathematical expression */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int total = 0; /* Global variable to store total */

void add(int num) {
    total += num; /* Function to add number to total */
}

void subtract(int num) {
    total -= num; /* Function to subtract number from total */
}

void multiply(int num) {
    total *= num; /* Function to multiply number with total */
}

void divide(int num) {
    total /= num; /*Function to divide total by number */
}

void power(int num) {
    total = (int)pow(total, num); /* Function to raise total to the power of the given number */
}

void modulo(int num) {
    total = total % num; /* Function to calculate remainder of total divided by given number */
}
%}

/* Define the tokens */
%token NUMBER

%%

/* Define the rules for the grammar */

calc : expr {  /* Starting point for the grammar */
    printf("Total: %d\n", total); /* Print the final total */
    return 0;
}

expr : term ADD term { /* Rule for adding two terms */
    add($1); /* Call function to add first term to total */
    add($3); /* Call function to add second term to total */
}

    | term SUBTRACT term { /* Rule for subtracting two terms */
    add($1); /* Call function to add first term to total */
    subtract($3); /* Call function to subtract second term from total */
}

    | term MULTIPLY term { /* Rule for multiplying two terms */
    add($1); /* Call function to add first term to total */
    multiply($3); /* Call function to multiply total by second term */
}

    | term DIVIDE term { /* Rule for dividing two terms */
    add($1); /* Call function to add first term to total */
    divide($3); /* Call function to divide total by second term */
}

    | term POWER term { /* Rule for raising first term to the power of the second term */
    add($1); /* Call function to add first term to total */
    power($3); /* Call function to raise total to the power of second term */
}

    | term MODULO term { /* Rule for calculating remainder of dividing first term by second term */
    add($1); /* Call function to add first term to total */
    modulo($3); /* Call function to calculate remainder of total divided by second term */
}

term : NUMBER { /* Rule for defining a single term as a number */
    $$ = $1; /* Assign the value of the term to the output */
}

%%

/* Define the functions to scan and parse the input */

yyerror (char *s) { /* Function to handle syntax errors */
  fprintf (stderr, "%s\n", s); /* Print the error message to the standard error stream */
}

int main(void) {
    yyparse(); /* Call function to start the parsing process */
    return 0;
}