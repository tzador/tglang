%{
    //This is a BISON code snippet
    //It defines a grammar for a simple mathematical expression parser
    //It will parse expressions in the form of 'operand operator operand'
    //The grammar includes support for parentheses and the order of operations
    //The output of this parser will be the evaluated result of the expression
    //It uses C-style code blocks for semantic actions
    //Author: [Your Name]

    //Define variables for holding the operands and result
    int operand1, operand2, result;
%}

//Define rules for each type of expression, using regular expressions
expression: operand '+' operand { result = $1 + $3; } //Addition
| operand '-' operand { result = $1 - $3; } //Subtraction
| operand '*' operand { result = $1 * $3; } //Multiplication
| operand '/' operand { result = $1 / $3; } //Division
| operand '^' operand { result = pow($1, $3); } //Exponentiation
| '-' operand { result = - $2; } //Unary minus
| '(' expression ')' { result = $2; } //Parentheses for grouping
;

//Define rule for single operand, can be an integer or a float
operand: INT { $$ = atoi($1); } //Convert string to integer
| FLOAT { $$ = atof($1); } //Convert string to float
;

//Define tokens for integer and float values
%token INT "0"-"9"+ //Integer
%token FLOAT "0"-"9"+ '.' "0"-"9"+ //Float

//Ignore whitespace in input
%ignore [ \t\n\r]

//Start rule for the parser
%start expression