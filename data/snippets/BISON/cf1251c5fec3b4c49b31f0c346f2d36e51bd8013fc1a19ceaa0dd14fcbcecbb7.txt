%token DIGIT //defines a token called DIGIT to represent numerical values
%token LETTER //defines a token called LETTER to represent alphabetic characters
%left '+' '-' //defines left-associativity and precedence for addition and subtraction operations
%left '*' '/' //defines left-associativity and precedence for multiplication and division operations
%right '^' //defines right-associativity and highest precedence for exponentiation operation
%start line //defines the starting point of the code

%%
//defines the grammar rules for arithmetic expressions
line: expr '\n' { printf("Result: %d\n", $1); } //prints the result of the expression after a new line
     | line expr '\n' { printf("Result: %d\n", $2); } //prints the result of the next expression after a new line
expr: DIGIT '+' DIGIT { $$ = $1 + $3; } //stores the result of addition operation in $$
    | DIGIT '-' DIGIT { $$ = $1 - $3; } //stores the result of subtraction operation in $$
    | expr '*' expr { $$ = $1 * $3; } //stores the result of multiplication operation in $$
    | expr '/' expr { $$ = $1 / $3; } //stores the result of division operation in $$
    | expr '^' expr { $$ = pow($1, $3); } //stores the result of exponentiation operation in $$
    | '(' expr ')' { $$ = $2; } //handles parenthesis in expressions
    | LETTER { printf("Invalid expression."); exit(1); } //prints an error message if an invalid character is found
    ;

%%
//defines the main function which takes in input and starts the parsing process
int main() {
   yyparse(); //starts the parsing process
   return 0;
}