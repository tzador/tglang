//This is a BISON program to parse a simple arithmetic expression
//with the following grammar: expr ::= OPEN num OPERATOR num CLOSE
//where:
//OPEN => '('
//OPERATOR => '+', '-', '*', or '/'
//CLOSE => ')'

%%
expr: OPEN num OPERATOR num CLOSE  {printf("Result: %d", ($2 $3 $4));}
    ;

num: DIGIT | num DIGIT
    ;

DIGIT: /[0-9]+/
     ;

%%

//Driver code to test the above grammar
#include<stdio.h>
#include<cstdlib>

int main() {
    yyin = fopen("input.txt", "r"); //opens input.txt file for reading
    if(!yyin) {
        printf("File not found!");
        exit(1);
    }
    
    int result = yyparse(); //calls the parser
    if(result == 0) {
        printf("The expression was parsed successfully.");
    } else {
        printf("Error parsing the expression.");
    }
    
    fclose(yyin); //close the file
    
    return 0;
}