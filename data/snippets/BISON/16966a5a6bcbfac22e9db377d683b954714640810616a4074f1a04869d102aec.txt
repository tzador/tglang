// BISON grammar for parsing a simple arithmetic expression

%token DIGIT       				// define token for digits
%token PLUS MINUS MULTIPLY DIVIDE  // define tokens for operators

%%  // declaration section

expression: DIGIT 					// define expression as a digit
	| expression PLUS expression 	// define expression as addition of two expressions
	| expression MINUS expression 	// define expression as subtraction of two expressions
	| expression MULTIPLY expression	// define expression as multiplication of two expressions
	| expression DIVIDE expression 	// define expression as division of two expressions

%%  // rules section

// code to convert digits into actual numerical values
%{
	#include <stdio.h>
	#include <stdlib.h>

	int value(char c) {
		return (int)(c-'0');
	}
%}

// define rules for each production in the grammar
DIGIT: /[0-9]/ 		{ $$ = value($1); }	// convert single digit into its value
     | DIGIT DIGIT		{ $$ = 10 * $1 + $2; }	// convert multiple digits into value
     ;

PLUS: '+' ;
MINUS: '-' ;
MULTIPLY: '*' ;
DIVIDE: '/' ;

// handle syntax errors
%%
yyerror(char *s) {
	printf("ERROR: %s \n",s);
}