// This is a BISON code snippet that generates a parser for a simple arithmetic language
// The grammar for this language is defined below:

%start expr
%token NUM VARIABLE
%left '+' '-'
%left '*' '/'
%right '^'

%%
expr: // start rule
    NUM                     { printf("Final result: %d\n", $); } // print the final result
    | VARIABLE              { yylval = lookup($); }              // lookup and assign value to TOKEN
    | expr '+' expr         { $$ = $1 + $3; }                   // addition operation
    | expr '-' expr         { $$ = $1 - $3; }                   // subtraction operation
    | expr '*' expr         { $$ = $1 * $3; }                   // multiplication operation
    | expr '/' expr         { $$ = $1 / $3; }                   // division operation
    | expr '^' expr         { $$ = pow($1, $3); }               // exponentiation operation
    | '-' expr %prec '-'    { $$ = -$2; }                       // unary minus operation 
    | '(' expr ')'          { $$ = $2; }                        // parentheses to group expressions
    ;

%%

// The code above declares the start rule, tokens, and operator precedence.
// The code below contains the main function and helper functions for the parser.

#include <math.h> // library for pow() function

// helper function to look up and return the value of a variable
int lookup(char *var) {
    return var_value[var];
}

// function to handle syntax errors during parsing
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

// main function
int main() {
    printf("Enter an arithmetic expression: ");
    yyparse(); // call the parser
    return 0;
}