%{
  /* declarations and prototypes */
  #include <stdio.h>
  void yyerror(const char *);
  int yylex(void);
  int yyparse(void);
%}

%union {
  int iValue;
  float fValue;
  char* sValue;
  char cValue;
}

%token DIGIT
%token LETTER
%token STRING
%token ERROR

%type <iValue> integer
%type <fValue> float
%type <sValue> string
%type <cValue> character

%%

program: statement_list
  ;

statement_list: statement
  | statement_list statement
  ;

statement: assignment ';'
  | declaration ';'
  | print_statement ';'
  ;

assignment: variable '=' expression
  ;

declaration: type var_list
  ;

type: 'int'
  | 'float'
  | 'char'
  | 'string'
  ;

var_list: variable
  | var_list ',' variable
  ;

variable: id
  | id '[' expression ']'
  ;

id: LETTER
  | id LETTER
  | id DIGIT
  ;

print_statement: 'print' '(' print_list ')'
  ;

print_list: expression
  | print_list ',' expression
  ;

expression: operand
  | operand '+' operand
  | operand '-' operand
  | operand '*' operand
  | operand '/' operand
  ;

operand: integer
  | float
  | string
  | character
  | variable
  ;

integer: DIGIT
  | DIGIT integer
  ;

float: DIGIT '.' DIGIT
  | DIGIT '.' DIGIT float
  ;

string: '"' STRING '"'
  ;

character: '\'' CHARACTER '\''
  ;

%%

/* code for parsing and error handling */
void yyerror(const char *s) {
  printf("Syntax error: %s\n", s);
}

int main() {
  yyparse();
  return 0;
}

int yylex() {
  /* code for lexical analysis */
}

int yyparse() {
  /* code for parsing */
}