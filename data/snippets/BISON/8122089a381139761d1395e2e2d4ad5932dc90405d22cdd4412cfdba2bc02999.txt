// This is a code snippet in BISON

/* The following code defines a grammar for a simple language 
   that prints basic arithmetic operations */

%token NUMBER ADD SUB MUL DIV
 
%%

Statement: Expression "\n";

Expression:
    NUMBER
    | Expression ADD Expression   { /*semantic action to handle addition*/ }
    | Expression SUB Expression   { /*semantic action to handle subtraction*/ }
    | Expression MUL Expression   { /*semantic action to handle multiplication*/ }
    | Expression DIV Expression   { /*semantic action to handle division*/ }
    ;

%%

// Here we define the rules for the grammar
// The first rule is a statement, which consists of an expression 
// followed by a new line character

// The expression rule defines all possible combinations of basic arithmetic operations
// each expression can consist of either a number or two expressions separated by an operator
// Each expression is followed by a semantic action inside curly braces, which handles the operation

// %token is used to define the tokens used in the grammar
// In this case, we have four tokens: NUMBER and the four basic arithmetic operators

// %% is used to separate the grammar rules from the actions section

 // This is a comment in BISON, which starts with //

 /* This is a multi-line comment in BISON, 
    which starts with /* and ends with */ */