%{
#include <stdio.h>

int factorial(int n); // Function prototype for factorial()

%}

%token <value> NUMBER // Defining token for numbers

%%

input: /* empty */
      | input line 
;

line: '\n'
     | expression '\n' 
     { printf("= %d\n", $1); } // Print result of calculation

expression: NUMBER
          { $$ = $1; }  // Set result to number
          | expression op expression  
          { 
              if(strcmp($2,"+")==0) // Check for addition operator
              {
                  $$ = $1 + $3; // Perform addition
              }
              else if(strcmp($2,"-")==0) // Check for subtraction operator
              {
                  $$ = $1 - $3; // Perform subtraction
              }
              else if(strcmp($2,"*")==0) // Check for multiplication operator
              {
                  $$ = $1 * $3; // Perform multiplication
              }
              else if(strcmp($2,"/")==0) // Check for division operator
              {
                  $$ = $1 / $3; // Perform division
              }
              else // Invalid operator
              {
                  yyerror("Invalid operator"); // Print error message
              }
              
          }

op: '+' | '-' | '*' | '/' ; // Operators for expressions

%%

// Function to calculate factorial of a number
// Returns the calculated factorial value
int factorial(int n)
{
    if(n==0) // Base case
    {
        return 1;
    }
    else
    {
        return n * factorial(n-1); // Recursive call to factorial function
    }
}

int main()
{
    yyparse(); // Parsing input
    return 0; // Return 0 for successful execution
}

void yyerror(char *s) // Function to handle syntax errors
{
    fprintf(stderr, "%s\n", s); // Print error message to stderr
}