%% /* Definition Section */

statement: expr '\n'
    # This rule defines a statement as an expression followed by a newline character.
    { printf("This is a statement\n"); }

expr: NUMBER '\n'
    # This rule defines an expression as a number followed by a newline character.
    { printf("This is an expression\n"); }

%% /* Rules Section */

NUMBER : '0' | INT { return atoi(yytext); }
    # This rule defines a NUMBER as either the character '0' or an integer, and returns its value.
    # The function atoi() converts a string into an integer.

INT : DIGIT+
    # This rule defines an INT as one or more digits.

DIGIT : [0-9]
    # This rule matches any single digit from 0 to 9.

%% /* User Code Section */

int main()
{
    char input[100];
    printf("Enter a number: ");
    fgets(input, 100, stdin);
    int result = yyparse();
    // The function yyparse() will use the rules above to parse the input and return a result.
    // If successful, it will return 0.

    if (result == 0)
    {
        printf("Parsing successful!\n");
    }
    else
    {
        printf("Parsing failed.\n");
    }

    return 0;
}