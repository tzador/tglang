/* This is a BISON code snippet for parsing arithmetic expressions */
/* Define the grammar rules */
%start exp

/* Non-terminal expression */
exp: term | exp '+' term { printf("Sum of two expressions\n"); }
    | exp '-' term { printf("Difference of two expressions\n"); };

/* Non-terminal term */
term: factor | term '*' factor { printf("Multiplication of two terms\n"); }
    | term '/' factor { printf("Division of two terms\n"); };

/* Non-terminal factor */
factor: NUMBER { printf("Number found: %d\n", $1); }
      | '('exp')' { printf("Inside the parentheses\n"); };

%%

/* C code section */

/* Include necessary libraries for I/O, string manipulation, and error handling */
#include <stdio.h>

extern FILE *yyin; /* input file pointer */
extern int yylex(); /* function for scanning input */

int main()
{
    int token; /* store tokens scanned */

    printf("Enter an arithmetic expression: ");
    yyin = stdin; /* take input from standard input */

    /* Loop through the input until end of file is reached */
    while (token = yylex()) {
        /* Print the type of token and its corresponding value */
        printf("Token type: %d\n Value: %s\n", token, yytext);
    }

    return 0;
} 

/* Compile and run the program */
/* In the command line: */
/* bison -d parser.y */ /* generate parser code */
/* gcc -o parser parser.tab.c lex.yy.c -lm */ /* compile parser and lexer code */
/* ./parser */ /* run program */

/* Sample input: */
/* (2+3)*4/5 */

/* Sample output: */
/* Inside the parentheses
Multiplication of two expressions
Inside the parentheses
Sum of two expressions
Number found: 3
Difference of two expressions
Number found: 4
Division of two terms
Number found: 5 */