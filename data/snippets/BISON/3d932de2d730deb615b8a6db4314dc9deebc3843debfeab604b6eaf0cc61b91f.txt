%{
    # Bison code snippet
    # This snippet defines a grammar for arithmetic expressions

    # Declare variables and functions
    int result;

    # Function to print error message
    void yyerror(char *error_message){
        fprintf(stderr, "Error: %s\n", error_message);
    }
%}

# Declare tokens and their types
%token <value> INTEGER
%token <value> FLOAT
%token ADD SUB MUL DIV

%union <value> {
    int integerValue;
    float floatValue;
}

# Grammar rules
%start expression

expression:
    INTEGER  { result = $1; }     # if the expression is just an integer
    | FLOAT { result = $1; }      # if the expression is just a float
    | expression ADD expression { result = $1 + $3; }     # for addition
    | expression SUB expression { result = $1 - $3; }     # for subtraction
    | expression MUL expression { result = $1 * $3; }     # for multiplication
    | expression DIV expression {    # for division
        if($3 != 0){
            result = $1 / $3;
        } else {
            yyerror("Division by zero is undefined");
            result = 0;
        }
    }
    ;

# Define main function
%%
int main(){
    yyparse();      # parse the input string using bison
    printf("Result: %d\n", result);     # print the result
}

# Define the function to get input from user
int yywrap(){
    return 1;
}