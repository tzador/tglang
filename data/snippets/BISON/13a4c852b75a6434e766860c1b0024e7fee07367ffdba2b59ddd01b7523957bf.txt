%token <str> IDENTIFIER     //defines the token 'IDENTIFIER' to hold a string value
%token <int> NUMBER         //defines the token 'NUMBER' to hold an integer value

%{
#include<stdio.h>           //includes the standard input/output library
#include<stdlib.h>          //includes the standard library
#include<string.h>          //includes the string library
%}

%%

program: statement_list     //the starting rule of the grammar
;

statement_list:             //defines the statement list rule
      statement
    | statement_list statement
;

statement:                  //defines the statement rule
      declaration           //rule for declaring variables
    | assignment            //rule for assigning values to variables
    | conditional           //rule for conditional statements
    | loop                  //rule for loop statements
;

declaration: TYPE IDENTIFIER ';'       //rule for declaring a variable
            {$2 = malloc(sizeof($1));}  //assigns memory for the variable based on its type

assignment: IDENTIFIER '=' expression ';'    //rule for assigning a value to a variable
             {$1 = $3;}                       //assigns the value of expression to variable

conditional: 'if' '(' condition ')' statement_list  //rule for if statement
              {$$ = if($3) {$5;}             //checks condition and executes statement list if true
              else {0};}                    //else executes nothing

loop: 'for' '(' expression ';' expression ';' expression ')' statement    //rule for for loop
        {for(int i = $3; i < $5; i += $7){$9;}}                          //loops through statement based on expressions

condition: expression '<' expression      //rule for condition check
           {$$ = ($1 < $3);}              //checks if first expression is less than second

expression: NUMBER '+' NUMBER             //rule for addition of numbers
            {$$ = $1 + $3;}                //returns the sum of the two numbers

TYPE: 'int' | 'float' | 'string';          //rule for variable types

%%

int main()                                 //main function
{
    yyparse();                             //calls the parser to start processing input
    return 0;                              //returns 0 if the program executes successfully
}

int yyerror(const char *s)                 //function that handles syntax errors
{
    fprintf(stderr, "%s\n", s);            //prints out the error message
}

int yywrap()                               //function that ends the parsing
{
    return 1;                              //returns 1 to signify the end of parsing
}