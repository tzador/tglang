%{
    /* This is a BISON code snippet */
    #include <stdio.h>
    /* This header file provides input/output operations */
    /* This is a long and complex code snippet that showcases the power of BISON */
%}

/* Definition section */
%token <num> NUM /* Defines a token for numbers */
%token <str> STR /* Defines a token for strings */

%start PROGRAM /* Starting point for the parser */

%% /* Rule section */

PROGRAM:
    /* Rules for parsing a program */
    { printf("Parsing program...\n"); }
    START_CONDITION { /* code for handling different start conditions */ }
    opt_header /* optional header section */
    {
        /* code for handling the header */
        /* may involve variable declarations */
        /* or other types of statements */
    }
    opt_body /* optional body section */
    {
        /* code for handling the body */
        /* may involve function definitions or other types of statements */
    }
    opt_footer /* optional footer section */
    {
        /* code for handling the footer */
        /* may involve closing statements or other types of statements */
    }
    END_CONDITION /* end of program */
    { printf("Program successfully parsed!\n"); }
    ;

START_CONDITION:
    /* Rules for defining start conditions */
    start_cond /* the specific start condition to be used for parsing */
    |
    { printf("Default start condition used.\n"); }
    ;

opt_header:
    /* Rules for optional header section */
    header /* the header section to be included */
    |
    /* No header section present, using default */
    { printf("No header section present, using default.\n"); }
    ;

header:
    /* Rules for parsing a header section */
    "#include" STR
    {
        /* code for handling included files */
    }
    opt_headers
    ;

opt_headers:
    /* Rules for handling multiple headers */
    opt_headers header /* recursively adding headers to the list */
    |
    /* No more headers present */
    ;
    
opt_body:
    /* Rules for optional body section */
    body /* the body section to be included */
    |
    /* No body section present, using default */
    { printf("No body section present, using default.\n"); }
    ;

body:
    /* Rules for parsing a body section */
    {
        /* code for handling the body */
        /* may involve function definitions or other types of statements */
    }
    opt_stmts
    ;

opt_stmts:
    /* Rules for handling multiple statements */
    opt_stmts statement /* recursively adding statements to the list */
    |
    /* No more statements present */
    ;

statement:
    /* Rules for parsing a statement */
    expr /* code for handling expressions or assignments */
    |
    /* Other types of statements */
    {
        /* code for handling different statement types */
    }
    ;

opt_footer:
    /* Rules for optional footer section */
    footer /* the footer section to be included */
    |
    /* No footer section present, using default */
    { printf("No footer section present, using default.\n"); }
    ;

footer:
    /* Rules for parsing a footer section */
    {
        /* code for handling the footer */
        /* may involve closing statements or other types of statements */
    }
    opt_stmts
    ;

expr:
    /* Rules for parsing an expression */
    expr "+" term /* code for handling addition */
    |
    expr "-" term /* code for handling subtraction */
    |
    term /* code for handling a single term */
    ;

term:
    /* Rules for parsing a term */
    term "*" factor /* code for handling multiplication */
    |
    term "/" factor /* code for handling division */
    |
    factor /* code for handling a single factor */
    ;

factor:
    /* Rules for parsing a factor */
    "(" expr ")" /* code for handling parentheses */
    |
    NUM /* code for handling numbers */
    |
    ID /* code for handling identifiers */
    ;

%% /* End of rule section */ 

int main()
{
    yyparse(); /* calling the parser */
    return 0;
}

/* Function for handling errors during parsing */
void yyerror (char const *s) 
{
    fprintf (stderr, "%s\n", s);
    exit(1);
}