%{
/* This is a code fragment */
 
#include <stdio.h>
#include <stdlib.h>
%}
 
%token <num> NUM_CONST
%token <id> ID
%token IF THEN ELSE WHILE FOR DO
 
// grammar rules
 
%%
program : declaration_list
        | declaration_list statement_list
        ;
 
declaration_list : declaration
                 | declaration_list declaration
                 ;
 
declaration : type ID ';'
            | type ID '(' param_list ')' '{' statement_list '}'
            ;
 
// other grammar rules
 
statement_list : statement
               | statement_list statement
               ;
 
statement : ';'
          | expression ';'
          | '{' statement_list '}'
          | IF '(' condition ')' statement
          | IF '(' condition ')' statement ELSE statement
          | WHILE '(' condition ')' statement
          | FOR '(' expression_opt ';' condition_opt ';' expression_opt ')' statement
          | DO statement WHILE '(' condition ')' ';'
          ;
 
param_list : param
           | param_list ',' param
           ;
 
param : type ID
      ;
 
condition : expression
          | expression RELOP expression
          | expression RELOP '=' expression
          | expression RELOP '(' expression ')'
          ;
 
expression : term
           | expression '+' term
           | expression '-' term
           ;
 
term : factor
     | term '*' factor
     | term '/' factor
     | term '%' factor
     ;
 
factor : '(' expression ')'
       | ID
       | NUM_CONST
       | ID '(' expression_list ')'
       ;
 
expression_list : expression
                | expression_list ',' expression
                ;
 
condition_opt : /* empty */
              | condition
              ;
 
expression_opt : /* empty */
               | expression
               ;
 
type : INT
     | FLOAT
     | CHAR
     ;
 
%%
 
/* This is a Bison file */
 
int main(int argc, char *argv[]) {
  // parsing code
}