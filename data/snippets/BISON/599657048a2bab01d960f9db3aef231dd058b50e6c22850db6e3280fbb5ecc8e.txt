%{
// This is a BISON code snippet that defines a grammar for a simple calculator
// It will be able to handle addition, subtraction, multiplication, and division
%}

// Declare the tokens for the calculator
%token NUM "Number"
%token ADD "+"
%token SUB "-"
%token MUL "*"
%token DIV "/"

// Define the start symbol of the grammar
%start calculation;

// Define the rules of the grammar
%%
calculation: expression { printf("Result: %d\n", $1); };

// Expression can either be a number or an operation
expression: NUM { $$ = atoi($1); };
expression: expression ADD expression { $$ = $1 + $3; };
expression: expression SUB expression { $$ = $1 - $3; };
expression: expression MUL expression { $$ = $1 * $3; };
expression: expression DIV expression { $$ = $1 / $3; };
%%

// Function for error handling
void yyerror(char *s) {
  printf("Error: %s\n", s);
}

// The main function to initialize the parser and start parsing
int main() {
  printf("Enter an expression to evaluate: ");
  yyparse();
  return 0;
}

// Function to read and return the next token
int yylex(void){
  int c;
  while(isspace(c = getchar()));
  if (isdigit(c)) {
    yylval = c;
    return NUM;
  } else if (c == '+') {
    return ADD;
  } else if (c == '-') {
    return SUB;
  } else if (c == '*') {
    return MUL;
  } else if (c == '/') {
    return DIV;
  } else if (c == '\n') {
    return 0;
  } else {
    yyerror("Invalid input");
  }
}