%{
  /* This is a code snippet in BISON that generates a simple calculator */
  int result = 0; // variable to store the result of the calculation
  %}
  %token NUMBER // declare a token for numbers
  %%
  /* This is where the grammar rules start */
  expression:
    NUMBER { result = $1; } // if the input is just a number, set it as the result
    | expression '+' expression { result = $1 + $3; } // if the input is an addition expression, add the two expressions and store it as the result
    | expression '-' expression { result = $1 - $3; } // if the input is a subtraction expression, subtract the second expression from the first and store it as the result
    | expression '*' expression { result = $1 * $3; } // if the input is a multiplication expression, multiply the two expressions and store it as the result
    | expression '/' expression { result = $1 / $3; } // if the input is a division expression, divide the first expression by the second and store it as the result
    ;
  %%
  
  /* This is the code to handle the input and output */
  int main() {
    /* Get user input and call the parser to evaluate the expression */
    printf("Enter an expression: \n");
    yyparse();
    
    /* Print the result of the calculation */
    printf("Result: %d", result);
    return 0;
  }
  
  /* This is the code to handle any errors during parsing */
  void yyerror(char *s) {
    printf("Error: %s\n", s); // print the error message
    exit(1); // exit the program with an error code
  }