%{
  // This is a comment in BISON
  // This section is used for declaring variables and including header files
  #include <stdio.h>
  int num1, num2, result;
%}

%token NUM
%%

start: program ;

// This is a production rule that defines the starting point in the grammar
program:
  expr { print_result($1); } ;

// This rule defines an expression that can be either an addition or subtraction
expr:
  NUM '+' NUM { $$ = $1 + $3; } 
  | NUM '-' NUM { $$ = $1 - $3; }
  ;

// This is a function used for printing out the result
void print_result(int result)
{
  printf("The result is %d", result);
}

%%
// This section is for including any C code that is required
int main()
{
  // This is the main function where the BISON parser is called
  // It also prompts the user for two numbers
  printf("Enter two numbers: ");
  scanf("%d %d", &num1, &num2);

  // This calls the parser to parse the input based on the defined grammar
  result = yyparse();

  return 0;
}

// This section includes the generated lexer code, which is used to tokenize the input
// This is automatically generated by BISON based on the declared tokens
int yywrap()
{
  return 1;
}

int yyerror(const char *msg)
{
  printf("Error: %s\n", msg);
  return 0;
}

int yylex()
{
  int c = getchar();

  if (isdigit(c))
  {
    yylval = c - '0';
    return NUM;
  }
  else
  {
    return c;
  }
}