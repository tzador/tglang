%{
  # This code block contains global declarations and code,
  # which should be processed at the beginning of the
  # Bison grammar file.
  # It can include header files, define constants, and more.
  # These declarations and code will be copied at the beginning
  # of the generated C or C++ code.
  # Here, we include a header file and define a constant.
  # The generated code will also have access to these
  # declarations and code.

  #include <stdio.h>
  #define MAX_EXPRESSION_LEN 100
%}

%token <c_val> NUMBER
%token <c_op> OPERATOR

%%

/* This section contains the rules of the grammar.
   It specifies how the input tokens should be combined
   to form higher-level structures.
   Here, we define a rule for a simple arithmetic expression.
   It takes two numbers and an operator and produces the
   result of applying the operator on the numbers. */
expression:
    NUMBER OPERATOR NUMBER { printf("Result: %f", $1 $2 $3); }
;

/* In this section, we define the types of the values
   associated with each token.
   Here, <c_val> represents the value of a number token
   and <c_op> represents the value of an operator token.
   These types will be used in the grammar rules to access
   the actual values of the tokens. */
%type <c_val> NUMBER
%type <c_op> OPERATOR

/* This section contains the C or C++ code that
   should be generated for the Bison grammar.
   Here, we define a function for handling errors
   caused by invalid input. */
%%

void yyerror(const char *s) {
    printf("Error: %s\n", s);
}

/* The yylex() function is generated automatically
   by Flex and it returns the next token in the input.
   Here, we define our own yylex() function that calls
   the generated yylex() function and also prints out
   the token value. */
int yylex(void) {
    if (yylex() == NUMBER) {
        printf("Token: NUMBER, value: %f\n", yylval.c_val);
    } else if (yylex() == OPERATOR) {
        printf("Token: OPERATOR, value: %c\n", yylval.c_op);
    } else {
        printf("Invalid token\n");
        exit(1);
    }
}

/* The main() function is the entry point of the program.
   It calls yyparse() to start the parsing process.
   Here, we also print out the maximum expression length
   that was defined in the global declarations. */
int main(void) {
    printf("Maximum expression length: %d\n", MAX_EXPRESSION_LEN);
    yyparse();
    return 0;
}