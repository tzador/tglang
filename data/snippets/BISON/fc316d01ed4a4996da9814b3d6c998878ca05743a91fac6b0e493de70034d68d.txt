/* A complex BISON code snippet for tokenizing and parsing a mathematical expression
   with support for variables and operators */

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EXPR_LEN 256
#define NUM_OPERATORS 5

char operators[NUM_OPERATORS] = {'+', '-', '*', '/', '^'};
float variables[26] = {0}; // Array for storing variable values (a-z)

%}

%token NUMBER
%token VARIABLE

%%

expr: NUMBER { printf("Result: %f\n", $1); } // Simple case for just a number

    | VARIABLE '=' expr {$$ = $3; variables[$1-97] = $3;} // Assigning a variable value

    | VARIABLE     { $$ = variables[$1-97]; } // Using a variable in an expression

    | expr '+' expr  {$$ = $1 + $3; } // Addition operator

    | expr '-' expr  {$$ = $1 - $3; } // Subtraction operator

    | expr '*' expr  {$$ = $1 * $3; } // Multiplication operator

    | expr '/' expr  {$$ = $1 / $3; } // Division operator

    | expr '^' expr  { // Exponentiation operator
        float base = $1;
        float exponent = $3;
        for (int i = 1; i < exponent; i++) {
            base *= $1;
        }
        $$ = base;
    }

%%

int main(int argc, char* argv[]) {
    char expr_str[MAX_EXPR_LEN]; // String to store the expression to be parsed
    printf("Enter a mathematical expression: ");
    scanf("%s", expr_str);

    // Initialize lexer and parser
    yyin = fopen(expr_str, "r");
    yyparse();

    return 0;
}

int yywrap() { // Function required by BISON to signal end of input
    return 1;
}