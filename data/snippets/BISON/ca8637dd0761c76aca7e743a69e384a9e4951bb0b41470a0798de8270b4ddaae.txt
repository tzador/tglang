%{
// This section contains any necessary definitions, declarations, and global variables.
// These can be accessed in the rules section and help in generating the desired output.
#include <stdio.h>
int count = 0;
%}

%token <num> NUMBER // This defines a token, which will be used in the rules section.

%%

// This section contains the rules that define the grammar of the language.
// Each rule has a left hand side (LHS) and a right hand side (RHS).

expr: NUMBER { // This rule states that an expression can be simply a number.
    count++; // This increases the value of count everytime this rule is matched.
    printf("Expression %d: %d\n", count, $1); // Prints the expression number and the value of the number.
}
| expr '+' NUMBER { // This rule states that an expression can be an expression followed by a plus sign and another number.
    count++; // Increases the value of count.
    printf("Expression %d: %d + %d\n", count, $1, $3); // Prints the expression number and the equation.
    $$ = $1 + $3; // Stores the value of the expression in the special variable $$.
}
| expr '-' NUMBER { // This rule states that an expression can be an expression followed by a minus sign and another number.
    count++; // Increases the value of count.
    printf("Expression %d: %d - %d\n", count, $1, $3); // Prints the expression number and the equation.
    $$ = $1 - $3; // Stores the value of the expression in $$.
}
;

%%

// This section contains any necessary user-defined functions and the main function.

int main(void) {
    yyparse(); // This function initiates the parsing process.
    return 0;
}

// This section contains any necessary user-defined functions, such as yyerror and yylex.
// These can help handle any errors or customize the way the tokens are read.

void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s); // Prints the error message.
}

int yylex(void) {
    // This function reads the next token and returns the token type and value.
    // The values are stored in special variables such as yytext and yyleng.
    // This function can also handle any special cases or keywords in the language.
    // For example, it can check for reserved words and return a special token instead of the default one.
    return NUMBER;
}