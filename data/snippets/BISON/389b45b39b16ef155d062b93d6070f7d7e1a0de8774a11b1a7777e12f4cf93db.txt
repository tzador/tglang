/* BISON program for parsing arithmetic expressions */

/* Declare tokens */
%token NUM /* for numbers */
%left '+' '-'
%left '*' '/' /* operators with left associativity */

%%

/* Declare grammar rules */

expression
    : term '+' expression /* expression with addition */
    | term '-' expression /* expression with subtraction */
    | term /* single term expression */
    ;

term
    : factor '*' term /* term with multiplication */
    | factor '/' term /* term with division */
    | factor /* single factor term */
    ;

factor
    : NUM /* numerical factor */
    | '(' expression ')' /* expression enclosed in parentheses */
    ;

%%

/* Code for evaluation */

/* Initialize variables used for storing results */
float result = 0.0; /* final result of the expression */
int num1, num2; /* variables for storing numbers */

/* Function for evaluating an addition operation */
int add(int num1, int num2) {
    return num1 + num2;
}

/* Function for evaluating a subtraction operation */
int subtract(int num1, int num2) {
    return num1 - num2;
}

/* Function for evaluating a multiplication operation */
int multiply(int num1, int num2) {
    return num1 * num2;
}

/* Function for evaluating a division operation */
int divide(int num1, int num2) {
    return num1 / num2;
}

/* Main function for parsing and evaluating the expression */
int main() {

    /* Prompt user for input */
    printf("Enter an arithmetic expression: ");

    /* Get input from user and store in variable 'input' */
    char* input;
    scanf("%s", input);

    /* Parse the input using BISON */
    yyparse();

    /* Print the result of the expression */
    printf("Result: %f", result);

    return 0;
}

/* Function for handling a number token */
int handle_num(int num) {
    /* If result is empty, set it to the current number */
    if (result == 0.0) {
        result = num;
    }
    /* Otherwise, perform the operation with the current number */
    else {
        result = add(result, num);
    }
    return 0;
}

/* Function for handling an operator token */
int handle_op(char* op) {
    /* Set num1 to the current result */
    num1 = result;
    /* Set result back to 0.0 for evaluation with the next number */
    result = 0.0;
    /* Set num2 as the next number in the input */
    num2 = atoi(yytext);
    /* Perform the corresponding operation based on the operator token */
    if (strcmp(op, "+") == 0) {
        result = add(num1, num2);
    }
    else if (strcmp(op, "-") == 0) {
        result = subtract(num1, num2);
    }
    else if (strcmp(op, "*") == 0) {
        result = multiply(num1, num2);
    }
    else if (strcmp(op, "/") == 0) {
        result = divide(num1, num2);
    }
    return 0;
}