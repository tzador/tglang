//This code snippet generates a simple calculator using BISON

/*BISON syntax rules:
   1. Expressions must be separated by a semicolon
   2. Terminal symbols must be wrapped in single quotes
   3. Non-terminal symbols must be written in lowercase
   4. Action blocks must be wrapped in curly braces
*/

//Defining token types for the calculator
%token<val> NUM //represents a numerical value
%token ADD SUB MUL DIV //represents the mathematical operations

//Starting rule for the grammar
/*
    The first part declares the type of value that will be returned.
    In this case, the expression will return a float.
    The second part defines the grammar rule using BISON syntax.
*/
%{
  float result; 
%}
calc: EXPRESSION { printf("Result: %f\n", result); };

/*
    EXPRESSION rule:
    This rule defines the expression and the operation between two numbers.
    When the rule is matched, an action block is executed to calculate the result.
*/
EXPRESSION:
  EXPRESSION ADD { result = $1 + $2.val; } EXPRESSION //Addition operation
| EXPRESSION SUB { result = $1 - $2.val; } EXPRESSION //Subtraction operation
| EXPRESSION MUL { result = $1 * $2.val; } EXPRESSION //Multiplication operation
| EXPRESSION DIV { result = $1 / $2.val; } EXPRESSION //Division operation
| '(' EXPRESSION ')' { result = $2.val; } //Handles parentheses

/*
    Number rule:
    This rule matches any numerical value and returns a token of type NUM with
    the value of the matched number.
*/
NUM:
  { return NUM; } ['-']? ['0'-'9']+("."['0'-'9']+)? { $$ = atof($1); }

/*
    Error rule:
    This rule will be activated when an unknown token or syntax error is detected in the input.
*/
error:
    /* output an error message and terminate */
    printf("Invalid input. Please try again.\n");
    exit(-1);
%%
//End of grammar rules

//Starting function
int main() {
    //Initialize the parser
    yyparse();
    return 0;
}