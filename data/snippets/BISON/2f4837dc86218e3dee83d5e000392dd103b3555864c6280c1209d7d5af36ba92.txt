%token NUMERIC
%token STRING
%token TRUE
%token FALSE

/* Grammar rules for defining a function */
function:        
    'def' ID '(' param_list ')''{'
    statement_list
    '}' 
| 
    'def' ID '(' empty ')' '{'
    '}'   
;

/* Grammar rules for defining parameters */
param_list:
    param ',' param_list    
|  
    param                    
; 

/* Grammar rules for defining a parameter */
param:
    ID ':' type               
; 

/* Grammar rules for defining a statement */
statement:
    assignment 
|  
    return_statement
|  
    print_statement       
|  
    if_statement          
|  
    while_statement        
;

/* Grammar rules for defining an assignment statement */
assignment: 
    ID '=' expression
; 

/* Grammar rules for defining a return statement */
return_statement:
    'return' expression
; 

/* Grammar rules for defining a print statement */
print_statement:  
    'print' expression
; 

/* Grammar rules for defining an if statement */
if_statement:
    'if' '(' expression ')' '{'
    statement_list
    '}' 
| 
    'if' '(' expression ')' '{'
    statement_list
    '}' 'else' '{'
    statement_list
    '}'
; 

/* Grammar rules for defining a while loop statement */
while_statement:
    'while' '(' expression ')' '{'
    statement_list
    '}'
; 

/* Grammar rules for defining an expression */
expression:
    NUMERIC                   
|  
    STRING                    
| 
    TRUE                      
| 
    FALSE                     
| 
    ID                        
| 
    expression '+' expression 
| 
    expression '-' expression                       
| 
    expression '*' expression
| 
    expression '/' expression                
| 
    '(' expression ')'          
; 

/* Grammar rules for defining a type */
type:
    'int'  
|  
    'float' 
| 
    'string'  
| 
    'boolean'
;