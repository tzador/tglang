/* BISON parser for simple arithmetic expressions */
 
 %{
 #include <stdio.h> //include standard input/output header file
 
 int result; //variable for storing result of arithmetic expression
 %}
 
 %%
 
 start: expr { 
   result = $1; //assigns the result of the expression to 'result' variable
   printf("Result: %d\n", result); //prints the result to the console
 }
 ;
 
 expr: term { $$ = $1; } //expression is a term
 | expr '+' term { $$ = $1 + $3; } //addition expression
 | expr '-' term { $$ = $1 - $3; } //subtraction expression
 ;
 
 term: factor { $$ = $1; } //term is a factor
 | term '*' factor { $$ = $1 * $3; } //multiplication expression
 | term '/' factor { $$ = $1 / $3; } //division expression
 ;
 
 factor: NUMBER { $$ = $1; } //factor is a number
 | '(' expr ')' { $$ = $2; } //factor is an expression within parentheses
 ;
 
 %%
 
 /* Flex rules for scanning input */
 
 %{
 #include "lex.yy.c" //include lex.yy.c file
 #include "parser.tab.h" //include parser.tab.h file
 
 int yylex(); //function for scanning input
 %}
 
 %%
 
 [0-9]+ { //regular expression for a number
   return NUMBER; //returns token type 'NUMBER'
 }
 
 [+\-*/()] { //regular expression for operators and parentheses
   return yytext[0]; //returns the operator or paranthesis symbol as token type
 }
 
 [ \t\n] { //regular expression for whitespace characters
   ; //ignore whitespace characters
 }
 
 . { //regular expression for any other characters
   printf("Invalid input\n"); //prints error message to console
 }