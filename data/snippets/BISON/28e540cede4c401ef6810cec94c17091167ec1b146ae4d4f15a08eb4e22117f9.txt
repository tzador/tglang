%token INT REAL CHAR      // Define token types
%token PLUS MINUS TIMES DIV
%token NUMBER
%%

program : statement_list    // Define grammar rules
        | program statement_list ;


statement_list : statement
               | statement_list statement ;

statement : expression ';'
          | declaration ';'
          | if_statement
          | for_statement ;

declaration : TYPE var_list ;

TYPE : INT | REAL | CHAR ;

var_list : IDENTIFIER                  // Define identifier rule
         | var_list ',' IDENTIFIER ;   // For multiple variables

expression : NUMBER
           | IDENTIFIER
           | expression PLUS expression
           | expression MINUS expression
           | expression TIMES expression
           | expression DIV expression ;

if_statement : IF '(' expression ')' '{' statement_list '}'      // Define if statement
              | IF '(' expression ')' '{' statement_list '}' ELSE '{' statement_list '}' ;

for_statement : FOR '(' assignment ';' expression ';' increment ')' '{' statement_list '}' ;

assignment : IDENTIFIER '=' expression ;

increment : IDENTIFIER '=' expression ;

IDENTIFIER : [a-z]+ | [A-Z]+ ;
NUMBER : [0-9]+ ;

%%    // End of grammar definition

int main()    // Start of C++ code section
{
    yyparse();    // Call Bison parser
    return 0;
}

void yyerror(char *s)    // Function to handle parsing errors
{
    fprintf(stderr, "%s\n", s);
}

int yywrap()    // Function to end parsing
{
    return 1;
}