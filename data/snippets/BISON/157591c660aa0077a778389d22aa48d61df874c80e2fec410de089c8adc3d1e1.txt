%{
  /* This section is used to define any necessary functions or global variables */
  
  /* Helper function to convert string to integer */
  int string_to_int(char* str){
    int result = 0;
    for(int i=0;str[i]!='\0';i++){
      result = result*10 + (str[i]-'0');
    }
    return result;
  }
  
  /* Global variable used to store the result of the calculation */
  int result = 0;
%}

/* This section is used to define any necessary tokens or grammar rules */

/* Token for integer values */
%token <integer> INT

/* Grammar rule for addition expression */
AddExpr: AddExpr '+' MultExpr
        {
          /* Perform addition operation and assign result to global variable */
          result = $1 + $3;
        }
        | MultExpr
        {
          /* If only one term is present, assign it to global variable */
          result = $1;
        }

/* Grammar rule for multiplication expression */
MultExpr: MultExpr '*' Factor
         {
           /* Perform multiplication operation and assign result to global variable */
           result = $1 * $3;
         }
         | Factor
         {
           /* If only one factor is present, assign it to global variable */
           result = $1;
         }

/* Grammar rule for factor (either an integer or an expression in parentheses) */
Factor: INT
        {
          /* Convert integer token to integer using helper function */
          $$ = string_to_int($1);
        }
        | '(' AddExpr ')'
        {
          /* If expression in parentheses, assign its result to global variable */
          result = $2;
        }

/* This section is used to define any necessary priority and associativity */

/* '+' has higher precedence than '*' */
%left '+'
%left '*'

/* This section defines the start symbol for the grammar */
%start AddExpr

/* This section is used to handle any syntax errors */
%error-verbose

/* This section is used to generate the parser code */
%parse-param {int param}

%%

/* This section handles the actual parsing of the input code */

/* Print error message and stop if syntax error is encountered */
Error: { printf("Error: Invalid input code\n"); exit(EXIT_FAILURE); }

/* Print final result and exit the program when successful */
Done: { printf("Result = %d\n", result); exit(EXIT_SUCCESS); }