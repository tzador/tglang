/* This is a code snippet in BISON */

%token INT FLOAT VAR

%%

program:
    declaration_list MAIN '{' statement_list '}'
    ;
declaration_list:
    declaration_list declaration
    |
    /* empty */
    ;
declaration:
    type_variable ';'
    | type_function
    ;
type_variable:
    type VAR ';'
    ;
type:
    INT
    | FLOAT
    ;
type_function:
    type VAR '(' parameter_list ')' '{' statement_list '}' ';'
    ;
parameter_list:
    parameter_list ',' parameter
    | parameter
    ;
parameter:
    type_variable
    | '{' '}'
    ;
statement_list:
    statement_list statement
    |
    /* empty */
    ;
statement:
    VAR '=' expr ';'
    | type VAR '=' expr ';'
    | IF '(' expr ')' '{' statement_list '}' ELSE '{' statement_list '}'
    | FOR '(' statement_statement_list expr ';' statement_list ')' '{' statement_list '}'
    | READ '(' VAR ')' ';'
    | WRITE '(' expr ')' ';'
    ;
expr:
    expr '+' term
    | expr '-' term
    | term
    ;
term:
    term '*' term
    | term '/' term
    | factor
    ;
factor:
    VAR
    | NUM
    | '-' expr
    | '(' expr ')'
    ;
declarator:
    type '{' var_list_declaration
    | type VAR '{' var_list_declaration
    ;
var_list_declaration:
    var_list_declaration ',' declarator
    | declarator
    ;
%%

/* In this code snippet, we are using BISON to create a grammar for a simple programming language.
The program rule starts with the declaration list, followed by the MAIN function, and has a statement list inside curly brackets.
The declaration list is made up of declarations, which can either be a type variable (with a semicolon at the end) or a type function.
The type function consists of a type, a variable (function name), a list of parameters inside parentheses, and a statement list inside curly brackets.
The parameter list can have multiple parameters separated by commas, and can also be empty (represented by curly brackets).
The statement list also allows for multiple statements, and can be empty as well.
Statements include variable assignment, if-else statements, for loops, read and write functions.
Expressions can consist of terms (which can be multiplied or divided) or just a single term.
A term can be a factor (variable, number, or an expression inside parentheses) or can have a unary minus operator.
The declarator rule is used for array declarations, with the variable list declaration consisting of multiple declarators separated by commas, or just a single declarator.
This code snippet shows the structure of a BISON grammar and how it can be used to define a simple programming language. */