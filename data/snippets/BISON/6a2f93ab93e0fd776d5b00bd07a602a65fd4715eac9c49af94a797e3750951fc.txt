%{
  // This section is used for defining global variables and including external libraries
  #include <stdio.h>
  #define MAX_LENGTH 100
  int count = 0;
%}

%token <int> NUMBER // This defines the new token type "NUMBER" with an integer value

%right '=' // This specifies the precedence and associativity of the '=' operator

%left '+' '-' // These specify the precedence and associativity of the '+' and '-' operators
%left '*' '/' // These specify the precedence and associativity of the '*' and '/' operators

%%

program : statement_list
  {
    // This code is executed when a valid program is parsed
    printf("Number of statements: %d\n", count);
  };

statement_list : statement
  {
    // This code is executed when the first statement is parsed
    count++;
  }
  | statement_list statement
  {
    // This code is executed for each subsequent statement
    count++;
  };

statement : expression ';'
  {
    // This code is executed when a valid expression statement is parsed
    printf("Expression statement\n");
  }
  | var_def ';'
  {
    // This code is executed when a valid variable definition is parsed
    printf("Variable definition statement\n");
  };

var_def : TYPE ID '=' expression
  {
    // This code is executed when a valid variable definition is parsed
    printf("Variable %s defined\n", $2);
  };

expression : expression '+' expression
  {
    // This code is executed for addition operations
    $$ = $1 + $3;
  }
  | expression '-' expression
  {
    // This code is executed for subtraction operations
    $$ = $1 - $3;
  }
  | expression '*' expression
  {
    // This code is executed for multiplication operations
    $$ = $1 * $3;
  }
  | expression '/' expression
  {
    // This code is executed for division operations
    $$ = $1 / $3;
  }
  | '(' expression ')'
  {
    // This code is executed when parentheses are used to override precedence
    $$ = $2;
  }
  | NUMBER
  {
    // This code is executed when a number is parsed, $$ represents the value of the number
    $$ = $1;
  };

%%

int main()
{
  // This section is used for input and parsing
  char input[MAX_LENGTH];
  printf("Enter a program: ");
  fgets(input, MAX_LENGTH, stdin);
  yyscan_t scanner;
  yylex_init(&scanner);
  YY_BUFFER_STATE buf = yy_scan_string(input, scanner);
  yyparse(scanner);
  yylex_destroy(scanner);
  return 0;
}