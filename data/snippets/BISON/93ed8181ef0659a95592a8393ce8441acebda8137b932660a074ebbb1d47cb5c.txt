%{
# This section is used for declarations and includes
#include <stdio.h> // include standard input/output library

int x = 5; // declare and initialize variable x
float y = 2.7; // declare and initialize variable y
%}

%token NUM // define token for numbers

%% // beginning of grammar rules section

statements:
    statement
    | statements statement // allows for multiple statements

statement:
    assignment
    | print
    | loop

assignment:
    ID '=' expression // assign value to variable
    { // begin action
        x = $3; // set variable x equal to value from expression
        printf("Variable x has been assigned the value %d\n", x); // print statement to indicate value change
    } // end action      

print:
    'print' expression // print value of expression
    { // begin action
        printf("The value of the expression is %f\n", $2); // print statement with value of expression
    } // end action

loop:
    'while' '(' expression ')' '{' statements '}' // while loop
    { // begin action
        while($3) { // while the expression is true
            $6; // execute the statement(s) inside the loop
        }
    } // end action

expression: 
    NUM // expression is a number token
    { // begin action
        $$ = $1; // set value of expression equal to the token
    } // end action

    | expression '+' expression // addition operation
    { // begin action
        $$ = $1 + $3; // set value of expression equal to the sum of the two expressions
    } // end action

    | expression '-' expression // subtraction operation
    { // begin action
        $$ = $1 - $3; // set value of expression equal to the difference of the two expressions
    } // end action

    | expression '*' expression // multiplication operation
    { // begin action
        $$ = $1 * $3; // set value of expression equal to the product of the two expressions
    } // end action

    | expression '/' expression // division operation
    { // begin action
        $$ = $1 / $3; // set value of expression equal to the quotient of the two expressions
    } // end action

    | '(' expression ')' // parentheses for precedence
    { // begin action
        $$ = $2; // set value of expression equal to the value inside parentheses
    } // end action

%% // end of grammar rules section