#calculator.y

%{
#include <stdio.h>
#include <stdlib.h>

// Define a token struct for our calculator
typedef struct
{
    char* type;     // Type of token (e.g. number, operator)
    double value;   // Value of token if it's a number
    char* operator; // Operator symbol if it's an operator
} Token;

// Define a stack struct to help with parsing expressions
typedef struct
{
    Token* items[100];  // Array of items in the stack
    int top;            // Index of the top item
} Stack;

// Function to push a token onto the stack
void push(Stack* stack, Token* token)
{
    // Check if stack is full
    if (stack->top == 99)
    {
        printf("Error: Stack is full\n");
        exit(1);
    }

    // Otherwise, increment top and add the token
    stack->top++;
    stack->items[stack->top] = token;
}

// Function to pop a token off the stack
Token* pop(Stack* stack)
{
    // Check if stack is empty
    if (stack->top == -1)
    {
        printf("Error: Stack is empty\n");
        exit(1);
    }

    // Otherwise, return the top token and decrement top
    Token* token = stack->items[stack->top];
    stack->top--;
    return token;
}

%%

%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE

%left PLUS MINUS
%left TIMES DIVIDE


%%
calc:
    | value { printf("Result: %f\n", $1); }
    ;

value:
    | NUMBER             { $$ = $1; }
    | value PLUS value   { $$ = $1 + $3; }
    | value MINUS value  { $$ = $1 - $3; }
    | value TIMES value  { $$ = $1 * $3; }
    | value DIVIDE value { $$ = $1 / $3; }
    ;

%%

int main()
{
    // Initialize the stack
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = -1;

    // Get input from user
    printf("Enter expression: ");

    // Parse the expression using Bison
    yyparse();

    // Free memory allocated for the stack
    free(stack);

    return 0;
}
%}

// Function to create a token
Token* createToken(char* type, double value, char* operator)
{
    Token* token = (Token*)malloc(sizeof(Token));
    token->type = type;
    token->value = value;
    token->operator = operator;
    return token;
}