/* Grammar for a simple mathematical expression parser */

%{

/* This section contains C declarations and code
   that are needed by the parser */
   
#include <stdio.h>
#include <string.h>

void yyerror(const char *str); // Function to handle error messages

%}

/* Token definitions */
%token <num> NUMBER     /* Token for numbers */
%token ADD SUB MUL DIV  /* Tokens for operators */

%%

/* Rules for parsing mathematical expressions */

/* Start rule - recognizes a single expression */
start:
    expression { printf("Result: %d\n", $1); } // Prints the result of the expression
    ;

/* Rules for recognizing a mathematical expression */
expression:
    term                                    /* Expression is a single term */
    | expression ADD term { $$ = $1 + $3; } /* Expression is an addition operation */
    | expression SUB term { $$ = $1 - $3; } /* Expression is a subtraction operation */
    ;

/* Rules for recognizing a term in an expression */
term:
    factor                                   /* Term is a single factor */
    | term MUL factor { $$ = $1 * $3; }      /* Term is a multiplication operation */
    | term DIV factor { $$ = $1 / $3; }      /* Term is a division operation */
    ;

/* Rules for recognizing a factor in an expression */
factor:
    NUMBER { $$ = $1; }               /* Factor is a number */
    | '(' expression ')' { $$ = $2; } /* Factor is an expression within parentheses */
    ;

%%

/* This section contains C code that is executed after parsing is complete */
int main()
{
    yyparse(); // Call the parser
    return 0;
}

/* Function to handle error messages - prints the error and terminates the program */
void yyerror(const char *str)
{
    printf("Error: %s\n", str);
    exit(1);
}