%token<token_type> INTEGER REAL BOOLEAN STRING
%token IDENTIFIER ASSIGNMENT SEMICOLON COLON LPAREN RPAREN
%token ADDSUB MULDIV MOD EXP
%token IF ELSE END IFCOND
%token WHILE END WHILELOOP
%token LE LT GE GT EQ NE
%start program

%%
program: statement_list
	| /* empty */
	;

statement_list: statement
	| statement_list statement
	;

statement: assignment_statement
	| if_statement
	| while_statement
	;

assignment_statement: IDENTIFIER ASSIGNMENT expression SEMICOLON
	{ /* code to assign value to identifier */ }
	;

if_statement: IF LPAREN logical_expression RPAREN statement END IFCOND SEMICOLON
	{ /* code to handle if condition */ }
	| IF LPAREN logical_expression RPAREN statement ELSE statement END IFCOND SEMICOLON
	{ /* code to handle if-else condition */ }
	;

while_statement: WHILE LPAREN logical_expression RPAREN statement END WHILELOOP SEMICOLON
	{ /* code to handle while loop */ }
	;

logical_expression: arithmetic_expression
	| logical_expression LE arithmetic_expression
	{ /* code to handle <= operation */ }
	| logical_expression LT arithmetic_expression
	{ /* code to handle < operation */ }
	| logical_expression GE arithmetic_expression
	{ /* code to handle >= operation */ }
	| logical_expression GT arithmetic_expression
	{ /* code to handle > operation */ }
	| logical_expression EQ arithmetic_expression
	{ /* code to handle == operation */ }
	| logical_expression NE arithmetic_expression
	{ /* code to handle != operation */ }
	;

arithmetic_expression: term
	| arithmetic_expression ADDSUB term
	{ /* code to handle + or - operation */ }
	;

term: factor
	| term MULDIV factor
	{ /* code to handle * or / operation */ }
	| term MOD factor
	{ /* code to handle % operation */ }
	| term EXP factor
	{ /* code to handle ^ operation */ }
	;

factor: INTEGER
	| REAL
	| BOOLEAN
	| STRING
	| LPAREN arithmetic_expression RPAREN
	{ /* code to handle bracketed expression */ }
	| IDENTIFIER
	;