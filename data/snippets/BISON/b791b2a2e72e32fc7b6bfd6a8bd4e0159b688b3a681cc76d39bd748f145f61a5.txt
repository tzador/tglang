/* A BISON code snippet for parsing arithmetic expressions */
%{
#include <stdio.h> // include standard input/output library
#include <math.h> // include math library for pow() function
%}

%token NUMBER // define token for numbers

%%

/* define grammar rules */
input: /* empty rule */
      | input line // recursive rule for multiple lines
      ;

line: expression NEWLINE // match expression followed by a newline

expression: // empty rule
          | expression '+' term  // match addition
          | expression '-' term  // match subtraction
          | term // match single term
          ;

term: factor // match single factor
    | term '*' factor // match multiplication
    | term '/' factor // match division
    | term '^' factor // match exponentiation
    ;

factor: NUMBER // match a number
      | '(' expression ')' // match nested expression
      ;

%%

/* define a function for handling errors */
void yyerror(char *msg) {
  fprintf(stderr, "ERROR: %s\n", msg);
}

/* main function */
int main() {
  yyparse(); // call parser
  return 0;
}

/* implementation of yacc functions */
yywrap() { // function to end parsing
  return 1;
}

/* function for handling tokens */
void yyerror(const char *msg) {
  fprintf(stderr, "ERROR: %s\n", msg);
}

/* function for getting input */
int yyinput(char *buf, int max_size) {
  return fread(buf, sizeof(unsigned char), max_size, stdin);
}

/* function for converting token codes to strings */
char *yydecode(int code) {
  switch(code) {
    case NUMBER:
      return "NUMBER";
    case '+':
      return "ADD";
    case '-':
      return "SUB";
    case '*':
      return "MULTIPLY";
    case '/':
      return "DIVIDE";
    case '^':
      return "EXPONENT";
    default:
      return "UNKNOWN";
  }
}

/* function for printing output */
int yyoutput(char *msg, int code, char *text) {
  sprintf(msg, "Found %s: %s\n", yydecode(code), text);
  return 0;
}