%%

// Define the rules for parsing a mathematical expression
expr:
    <term> '+' <term>   { // If expression contains addition, perform addition
                            $$.value = $1.value + $3.value; 
                            // Save result in output value
                        }
    | <term> '-' <term>   { // If expression contains subtraction, perform subtraction
                            $$.value = $1.value - $3.value; 
                            // Save result in output value
                        }
    | <term> '*' <term>   { // If expression contains multiplication, perform multiplication
                            $$.value = $1.value * $3.value; 
                            // Save result in output value
                        }
    | <term> '/' <term>   { // If expression contains division, perform division
                            if ($3.value == 0) { // Check for division by zero
                                // Throw error if division by zero is attempted
                                yyerror("Division by zero is not allowed!");
                            } else { // Otherwise, perform division
                                $$.value = $1.value / $3.value; 
                                // Save result in output value
                            }
                        }
    | '(' <expr> ')'      { // If expression is wrapped in parentheses, evaluate it first
                            $$.value = $2.value; 
                            // Save result in output value
                        }
    | <term>              { // If expression is a single term, return its value
                            $$.value = $1.value; 
                            // Save result in output value
                        };

// Define the rules for parsing a term (number or variable)
term:
    <factor> '^' <factor> { // If term contains exponentiation, perform exponentiation
                            $$.value = pow($1.value, $3.value); 
                            // Save result in output value
                        }
    | <factor>             { // If term is a single factor, return its value
                            $$.value = $1.value; 
                            // Save result in output value
                        };

// Define the rules for parsing a factor (number or variable)
factor: 
    <number>         { // If factor is a number, return its value
                            $$.value = $1.value; 
                            // Save result in output value
                        }
    | <variable>    { // If factor is a variable, return its value
                            $$.value = $1.value; 
                            // Save result in output value
                        };

// Define the rules for parsing a number (integer or decimal)
number:
    INTEGER         { // If number is an integer, simply return it as its value
                            $$.value = atoi(yytext); 
                            // Convert text to integer and save as output value
                        }
    | FLOAT         { // If number is a float, simply return it as its value
                        $$.value = atof(yytext); 
                        // Convert text to float and save as output value
                    };
%%