%{
/* This is a code snippet in BISON, a general-purpose parser generator.
 It is used to define the grammar of a programming language or other
 format, and generate a parser that can recognize and process it.
 In this example, we will create a basic arithmetic parser. */
#include<stdio.h> /* include standard input/output library */
#include<stdlib.h> /* include standard library */
int total = 0; /* global variable for keeping track of total value */
%}
%union { /* define the union type for the input */
	int num;
	char op;
}
/* define the token types we will use */
%token <num> INTEGER /* represents a number token */
%token <op> PLUS MINUS MULTIPLY DIVIDE /* represents arithmetic operators */
%type <num> expr /* define the type for the expression rule */
%%
/* define the rules of the grammar */
input: /* top level rule */
	/* each line represents a different production rule */
	input expr '\n' {/* print the total value on a new line after each input */}
		{ printf("Total value is %d\n", total); total = 0; } /* reset total value for next input */
	| input '\n' /* allow for multiple inputs on separate lines */
	;
expr: INTEGER {/* increase total value by the integer value */
	total += $1;
}
	| expr PLUS expr {/* perform addition operation */
	total += $1 + $3;
}
	| expr MINUS expr {/* perform subtraction operation */
	total += $1 - $3;
}
	| expr MULTIPLY expr {/* perform multiplication operation */
	total += $1 * $3;
}
	| expr DIVIDE expr {/* perform division operation */
	total += $1 / $3;
}
	| '(' expr ')'/* enable parentheses for grouping expressions */
	;
%%
/* main function to get input and call the parser generated by BISON */
int main(){
	yyparse(); /* call the generated parser */
	return 0;
}