%{
    # An example lexer code snippet in BISON
    int num_tokens = 0; // count number of tokens
%}

%token <int> NUMBER // define token type for numbers

%%
statement : expr { printf("Number of tokens: %d\n", num_tokens); } ; // print number of tokens when an expression is found

expr : NUMBER { $$ = $1; num_tokens++; } // increase token count when a number is found
    | expr '+' NUMBER { $$ = $1 + $3; num_tokens++; } // increase token count when a plus sign and number are found
    | expr '-' NUMBER { $$ = $1 - $3; num_tokens++; } // increase token count when a minus sign and number are found
    | expr '*' NUMBER { $$ = $1 * $3; num_tokens++; } // increase token count when a multiplication sign and number are found
    | expr '/' NUMBER { $$ = $1 / $3; num_tokens++; } // increase token count when a division sign and number are found
    ;
%%

/* Main method to call the parser */
int main(void) {
    yyparse(); // calls the parser
    return 0; // returns 0 if successful
}