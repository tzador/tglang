%token NUM INT FLOAT // declare tokens for number, integer, and float
%token ADD SUB MUL DIV // declare tokens for arithmetic operators

%start calculation // define starting rule for grammar

%%

calculation:
    expr { printf("Result: %f\n", $1); } // print result of expression

expr:
    expr ADD term { $$ = $1 + $3; } // add two expressions
    | expr SUB term { $$ = $1 - $3; } // subtract two expressions
    | term { $$ = $1; } // if no operator present, return term as is

term:
    term MUL factor { $$ = $1 * $3; } // multiply two terms
    | term DIV factor { $$ = $1 / $3; } // divide two terms
    | factor { $$ = $1; } // if no operator present, return factor as is

factor:
    NUM { $$ = $1; } // assign value of token NUM to factor
    | INT { $$ = (float)$1; } // convert token INT to float and assign to factor
    | FLOAT { $$ = $1; } // assign value of token FLOAT to factor
    | '(' expr ')' { $$ = $2; } // handle parentheses in expression

%%

int main() {
    yyscan_t scanner;
    yylex_init(&scanner); // initialize lexer

    YY_BUFFER_STATE buffer = yy_scan_string("4 + (6 * 7)"); // input expression
    yy_switch_to_buffer(buffer);

    yyparse(); // perform parsing according to grammar rules

    yy_delete_buffer(buffer);
    yylex_destroy(scanner); // free allocated memory from lexer

    return 0;
}