%token <num> NUM    // Define token for numbers
%token <ident> ID   // Define token for identifiers

%start program    // Define the start symbol

%% // Grammar rules
program:
    expr '\n'         // Program consists of a single expression followed by newline
    | program expr '\n'   // Can have multiple expressions on separate lines

expr:
      ID '=' term         // Assign value of term to identifier
    | expr '+' term        // Add term to expression
    | expr '-' term        // Subtract term from expression

term:
      NUM               // Term is a number
    | ID                // Term is an identifier

%% // Semantic actions
int print_count = 0;     // Initialize variable to count number of print statements
void print_expr(int expr) {
    // Function to print value of expression
    print("Expression value: ", expr);
    print_count++;
}

void print_assign(int id, int term) {
    // Function to assign value of term to identifier
    print(id, " = ", term);
    print_count++;
}

%% // Code to be executed before and after parsing
main:
    // Code to be executed before parsing
    yyparse();            // Parse input according to grammar rules
    // Code to be executed after parsing
    print("Number of print statements: ", print_count);
%%

int main() {
    // Example input
    a = 5 + 2 - 3
    b = a + 1

    // Output:
    // a = 4
    // b = 5
    // Number of print statements: 2
    return 0;
}