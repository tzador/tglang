%{
    // This section contains any C code to be processed before parsing
    int count = 0; // Initialize a variable to keep track of the number of times 'bison' appears
    #define YY_DECL int yylex();
    // Declare the function that calls the flex Lexer
    #include "lexer.h"
    // Include the header file from the flex generated C code
    %}

%token INTEGER // Define a token for integers
%token IDENTIFIER // Define a token for identifiers
%token PRINT // Define a token for the 'print' keyword
%token ADD // Define a token for the '+' operator
%token SUBTRACT // Define a token for the '-' operator
%token MULTIPLY // Define a token for the '*' operator
%token DIVIDE // Define a token for the '/' operator
%token LBRACE // Define a token for the '{' symbol
%token RBRACE // Define a token for the '}' symbol

%left ADD SUBTRACT // Define the left associativity for '+' and '-'
%left MULTIPLY DIVIDE // Define the left associativity for '*' and '/'

%%
program:
    stmt_list // Start symbol
    {
        printf("Number of occurrences of 'bison': %d\n", count); // Print the number of times 'bison' appears
        return 0; // Return success code
    }
    ;

stmt_list:
    stmt_list stmt // Non-terminal for list of statements
    |
    stmt // Non-terminal for single statement
    ;

stmt:
    expression  // Expression statement
    {
        // Increase the count variable if the expression statement contains the word 'bison'
        if(strstr(yytext, "bison") != NULL) {
            count++;
        }
    }
    |
    PRINT expression // Print statement
    ;

expression:
    INTEGER // Integer value expression
    |
    IDENTIFIER // Identifier expression
    |
    expression ADD expression // Addition expression
    |
    expression SUBTRACT expression // Subtraction expression
    |
    expression MULTIPLY expression // Multiplication expression
    |
    expression DIVIDE expression // Division expression
    |
    LBRACE expression RBRACE // Expression enclosed in braces
    ;
%%
// This section contains any C code to be processed after parsing
int yylex() {
    return yylex(); // Call the flex Lexer
}