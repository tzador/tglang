%{
  # This is a BISON code snippet that generates a parser for a simple arithmetic language
  # This parser is capable of evaluating mathematical expressions, variables, and functions
  # The output of this parser will be an abstract syntax tree (AST) of the input expression
%}

%token <intval> INTEGER
%token <doubleval> REAL
%token VARIABLE
%token FUNCTION

%left '+' '-'
%left '*' '/'
%right '^'

%%

expression:
  INTEGER    { $$ = ast_create_integer($1); } 
| REAL       { $$ = ast_create_real($1); } 
| VARIABLE   { $$ = ast_create_variable($1); } 
| FUNCTION   { $$ = ast_create_function($1); } 
| expression '+' expression  { $$ = ast_create_operation(ADD, $1, $3); }
| expression '-' expression  { $$ = ast_create_operation(SUBTRACT, $1, $3); }
| expression '*' expression  { $$ = ast_create_operation(MULTIPLY, $1, $3); }
| expression '/' expression  { $$ = ast_create_operation(DIVIDE, $1, $3); }
| expression '^' expression  { $$ = ast_create_operation(POWER, $1, $3); }
;

%%

// Functions to create different types of AST nodes
int ast_create_integer(int val) {
  return val;
}

double ast_create_real(double val) {
  return val;
}

char* ast_create_variable(char* name) {
  return name;
}

Function ast_create_function(char* name) {
  return name;
}

AST ast_create_operation(Operation op, AST left, AST right) {
  return new BinaryOperation(left, op, right);
}

// Structure to represent operations in the AST
typedef enum {
  ADD,
  SUBTRACT,
  MULTIPLY,
  DIVIDE,
  POWER
} Operation;

// Structure to represent the abstract syntax tree
struct AST {
  int type;
  union {
    int intval;
    double doubleval;
    char* variable;
    Function function;
    BinaryOperation binary_op;
  }
};

// Class to represent binary operations
class BinaryOperation {
private:
  AST left;
  Operation op;
  AST right;

public:
  BinaryOperation(AST left, Operation op, AST right) {
    this.left = left;
    this.op = op;
    this.right = right;
  }

  AST evaluate() {
    if (this.op == ADD) {
      return this.left + this.right;
    } else if (this.op == SUBTRACT) {
      return this.left - this.right;
    } else if (this.op == MULTIPLY) {
      return this.left * this.right;
    } else if (this.op == DIVIDE) {
      return this.left / this.right;
    } else if (this.op == POWER) {
      return pow(this.left, this.right);
    }
  }
};

int main() {
  // Parsing input expression
  AST ast = parse_expression();

  // Evaluating the AST and getting the result
  int result = ast.evaluate();

  // Printing the result
  printf("The result of the expression is %d\n", result);

  return 0;
}