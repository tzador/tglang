/* This is a BISON code snippet that creates a parser for a simple arithmetic expression language */

%{
#include <stdio.h> // include standard input output library
#include <stdlib.h> // include standard library for memory allocation
int result = 0; // variable to store the final result
%}

%token NUMBER // define token for numbers
%right '=' // define precedence and associativity for equals sign

%% // beginning of the grammar rules

expression: // rule for an expression
    NUMBER { result = $1; } // if expression only contains a number, set result to that number
    | expression '+' expression { result = $1 + $3; } // add 2 expressions together
    | expression '-' expression { result = $1 - $3; } // subtract first expression by second expression
    | expression '*' expression { result = $1 * $3; } // multiply 2 expressions together
    | expression '/' expression { result = $1 / $3; } // divide first expression by second expression
    | expression '^' expression { result = pow($1, $3); } // raise first expression to the power of the second expression
    | '-' expression %prec '=' { result = -$2; } // handle negative numbers
    | '(' expression ')' { result = $2; } // handle parentheses
    ;

END: // define a token for the end of file
    '' { exit(0); } // when the end of file is reached, exit the program

%% // end of grammar rules section

int main(){ // start of main function
    yyparse(); // call the BISON parser
    printf("Result: %d", result); // print the final result
    return 0; // return 0 to indicate the program ran successfully
}

int yyerror(char *s){ // function to handle syntax errors
    fprintf(stderr, "Syntax error: %s\n", s); // print the error message
    return 0; // return 0 to indicate an error occurred
}