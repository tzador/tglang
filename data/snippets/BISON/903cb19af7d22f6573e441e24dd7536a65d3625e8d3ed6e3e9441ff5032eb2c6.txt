%token INT_LITERAL "integer literal" //token for integer literal 
%token IDENTIFIER "identifier" //token for identifiers 

//grammar rule for assignment statement 
assignment: IDENTIFIER '=' expression { 
    printf("%s = %d\n", $1, $3); //print the assignment statement 
}; 

//grammar rule for expression 
expression: expression '+' term { 
    $$ = $1 + $3; //update the current expression value 
} 
| term { 
    $$ = $1; //if no addition, return the value of the term 
} 

//grammar rule for term 
term: term '*' factor { 
    $$ = $1 * $3; //update the current term value 
} 
| factor { 
    $$ = $1; //if no multiplication, return the value of the factor 
} 

//grammar rule for factor 
factor: INT_LITERAL { 
    $$ = $1; //return the value of the integer literal 
} 
| '(' expression ')' { 
    $$ = $2; //return the value of the expression 
} 

%%

//sample input for assignment statement 
a = 5; 

//sample output 
a = 5 

//sample input for expression 
a = 2 + 3; 

//sample output 
a = 5