%token <val> NUMBER
%left '+' '-'
%left '*' '/'

%%

statement : expression           /* Defines a statement as an expression */
          ;

expression : NUMBER             /* Defines an expression as a single number */
           | expression '+' expression      /* Defines addition */
           | expression '-' expression      /* Defines subtraction */
           | expression '*' expression      /* Defines multiplication */
           | expression '/' expression      /* Defines division */
           ;

%%

//The following code is used for evaluating the statement in the BISON language
int result = 0;
int evaluate() {

    //Get the first token of the statement
    int token = yylex();

    //If token is a number, set result to its value
    if (token == NUMBER) {
        result = $$;
    }
    //If token is an operator, perform the operation on the two expressions
    else if (token == '+') {
        result = $1 + $3;
    }
    else if (token == '-') {
        result = $1 - $3;
    }
    else if (token == '*') {
        result = $1 * $3;
    }
    else if (token == '/') {
        result = $1 / $3;
    }

    //Continue evaluating if there are more tokens
    if (yylex() != 0) {
        return evaluate();
    }

    //Return the final result
    return result;
}