%token <tokenNumber> INTEGER // defining an integer token
    %token <tokenString> STRING // defining a string token
    %token <tokenIdent> IDENT // defining an identifier token
    %token <tokenOp> PLUS MINUS TIMES DIVIDE // defining operator tokens
    %token <tokenNewLine> NEWLINE // defining a new line token

    //// Grammar rules ////

    Program: DeclarationList // program starts with a list of declarations
             ;

    DeclarationList: DeclarationList Declaration // recursive rule for multiple declarations
                    | Declaration
                    ;

    Declaration: VarDecl // variable declaration
                | FuncDecl // function declaration
                ;

    VarDecl: TYPE IDENT // variable declaration starts with its type and identifier
            | TYPE IDENT Assignment // with optional assignment
            ;

    FuncDecl: FUNC IDENT LEFT_PAREN Params RIGHT_PAREN // function declaration starts with the keyword FUNC, followed by identifier and parameters
                LEFT_BRACE StatementList RIGHT_BRACE // and statement list within curly braces
                ;

    Params: Params COMMA ParamDeclaration // recursive rule for multiple parameters
            | ParamDeclaration
            | // empty rule for no parameters
            ;

    ParamDeclaration: TYPE IDENT // parameter declaration with type and identifier
                        ;

    Assignment: ASSIGN Expression // assignment statement starts with the ASSIGN keyword and is followed by an expression

    StatementList: StatementList Statement // recursive rule for multiple statements
                    | Statement // single statement
                    ;

    Statement: Assignment // assignment statement
                | ReturnStatement // return statement
                | IfStatement // if statement
                | WhileStatement // while statement
                | ExprStatement // expression statement
                | NewLineStatement // new line statement
                ;

    ReturnStatement: RETURN Expression // return statement starts with the RETURN keyword and is followed by an expression
                        ;

    IfStatement: IF Expression LEFT_BRACE StatementList RIGHT_BRACE // if statement starts with the IF keyword, followed by an expression and a statement list within curly braces
                    | IF Expression LEFT_BRACE StatementList RIGHT_BRACE ELSE LEFT_BRACE StatementList RIGHT_BRACE // with optional else statement
                    ;

    WhileStatement: WHILE Expression LEFT_BRACE StatementList RIGHT_BRACE // while statement starts with the WHILE keyword, followed by an expression and a statement list within curly braces
                    ;

    ExprStatement: Expression // expression statement just contains an expression
                    ;

    NewLineStatement: NEWLINE // new line statement is just a new line token

    Expression: Expression PLUS Expression // adding two expressions
                | Expression MINUS Expression // subtracting two expressions
                | Expression TIMES Expression // multiplying two expressions
                | Expression DIVIDE Expression // dividing two expressions
                | INTEGER // integer literal
                | STRING // string literal
                | IDENT // identifier
                | FuncCall // function call
                | LEFT_PAREN Expression RIGHT_PAREN // expression within parentheses
                ;

    FuncCall: IDENT LEFT_PAREN ArgList RIGHT_PAREN // function call starts with an identifier and is followed by an argument list within parentheses
                ;

    ArgList: ArgList COMMA Expression // recursive rule for multiple arguments
            | Expression // single argument
            | // empty rule for no arguments
            ;

    //// Tokens and Precendence ////

    // defining the precedence and associativity of operators
    %left PLUS MINUS
    %left TIMES DIVIDE
    %right NEG // unary negation operator has higher precedence than other operators

    %start Program // specifying the starting rule for the parser