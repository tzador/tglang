%token INTEGER "integer"
%token STRING "string"
%token IDENTIFIER "identifier"

%left '+' '-'
%left '*' '/'

%%

statement: assignment_statement
    | print_statement
    | conditional_statement
    | loop_statement
    | function_definition
    | function_call
    | break_statement
    | continue_statement
    | return_statement
;

assignment_statement: IDENTIFIER '=' expression
    {
        // code to assign expression to identifier
        $1 = $3;
    }
;

print_statement: 'print' '(' expression ')'
    {
        // code to print the value of expression
        printf("%d", $3);
    }
;

conditional_statement: 'if' '(' expression ')' '{' statement_list '}' %prec IF
    {
        // code to handle if statement
    }
    | 'if' '(' expression ')' '{' statement_list '}' 'else' '{' statement_list '}'
    {
        // code to handle if-else statement
    }
;

loop_statement: 'while' '(' expression ')' '{' statement_list '}'
    {
        // code to handle while loop
        while ($3 > 0) {
            // code to execute statement_list
        }
    }
    | 'for' '(' assignment_statement ';' expression ';' assignment_statement ')' '{' statement_list '}'
    {
        // code to handle for loop
        for (int i = 0; i < $5; i++) {
            // code to execute statement_list
        }
    }
;

function_definition: 'func' IDENTIFIER '(' parameters ')' '{' statement_list '}' %prec FUNC
    {
        // code to handle function definition
        int $2(int param) {
            // code to execute statement_list
        }
    }
;

function_call: IDENTIFIER '(' arguments ')'
    {
        // code to handle function call
        $1($3);
    }
;

break_statement: 'break'
    {
        // code to handle break statement
        break;
    }
;

continue_statement: 'continue'
    {
        // code to handle continue statement
        continue;
    }
;

return_statement: 'return' expression
    {
        // code to handle return statement
        return $2;
    }
;

expression: INTEGER
    {
        // code to handle integer value
        $$ = $1;
    }
    | STRING
    {
        // code to handle string value
        strcpy($$, $1);
    }
    | IDENTIFIER
    {
        // code to handle identifier
        $$ = $1;
    }
    | expression '+' expression
    {
        // code to add two expressions
        $$ = $1 + $3;
    }
    | expression '-' expression
    {
        // code to subtract two expressions
        $$ = $1 - $3;
    }
    | expression '*' expression
    {
        // code to multiply two expressions
        $$ = $1 * $3;
    }
    | expression '/' expression
    {
        // code to divide two expressions
        $$ = $1 / $3;
    }
    | '(' expression ')'
    {
        // code to handle parentheses
        $$ = $2;
    }
;

parameters: IDENTIFIER
    {
        // code to add parameter to list
        // code to add identifier to function parameter list
        $1
    }
    | parameters ',' IDENTIFIER
    {
        // code to add parameter to list
        // code to add identifier to function parameter list
        $1, $3
    }
;

arguments: expression
    {
        // code to add argument to list
        $1
    }
    | arguments ',' expression
    {
        // code to add argument to list
        $1, $3
    }
;

statement_list: statement
    {
        // code to execute statement
        $1
    }
    | statement_list statement
    {
        // code to execute list of statements
        $1
        $2
    }
;