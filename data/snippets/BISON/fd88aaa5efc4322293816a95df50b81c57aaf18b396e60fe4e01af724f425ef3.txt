%token INTEGER "constant"
%token PRINT "print"
%token END "end"
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%start program

%%

program: statement_list END { //this is the start rule of our BISON program
    printf("Program executed successfully!"); //prints a success message
}

statement_list: statement_list statement
| statement
;

statement: PRINT expression { //prints the value of the expression to the console
    printf("%d", $2);
}
| VARIABLE '=' expression { //assigns the value of the expression to the variable
    $1 = $3;
}
| END { //ends the program
    exit(0);
};

expression: expression '+' expression { //adds the values of the two expressions
    $$ = $1 + $3;
}
| expression '-' expression { //subtracts the right expression from the left
    $$ = $1 - $3;
}
| expression '*' expression { //multiplies the values of the two expressions
    $$ = $1 * $3;
}
| expression '/' expression { //divides the left expression by the right
    if ($3 != 0) {
        $$ = $1 / $3;
    } else {
        yyerror("Division by zero error!");
    }
}
| '-' expression %prec UMINUS { //negates the value of the expression
    $$ = -$2;
}
| '(' expression ')' { //evaluates the inner expression first
    $$ = $2;
}
| INTEGER { //returns the integer constant value
    $$ = $1;
}
| VARIABLE { //returns the value of the variable
    $$ = $1;
};

%%

int main() {
    yyparse(); //starts the parsing process
    return 0;
}