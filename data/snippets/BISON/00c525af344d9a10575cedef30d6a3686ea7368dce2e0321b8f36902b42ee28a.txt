%{
# This is a header section
# Declare variables and include any necessary header files here
int num1, num2, result;
#include<stdio.h>
%}

# This is a definition section
# Define the grammar rules for mathematical operations
%%
# This is the rule for addition
expression: num1 '+' num2 { result = num1 + num2; };
# This is the rule for subtraction
expression: num1 '-' num2 { result = num1 - num2; };
# This is the rule for multiplication
expression: num1 '*' num2 { result = num1 * num2; };
# This is the rule for division
expression: num1 '/' num2 { 
    # Check for division by zero
    if(num2 == 0) {
        printf("Error: Division by zero\n");
        exit(1);
    }
    else {
        result = num1 / num2;
    }
};
%%

# This is the main program section
# Prompt user for input and parse according to defined grammar rules
int main() {
    printf("Enter a mathematical expression:\n");
    scanf("%d %c %d", &num1, &operation, &num2);
    # Parse the input using the defined grammar
    yyparse();
    # Print the result of the expression
    printf("Result: %d", result);
    return 0;
}

# This is the lexer section
# Define token patterns to be recognized by the parser
%token num1 /[0-9]+/;
%token num2 /[0-9]+/;
%token operation /[+-/*]/;

# This is the error handling section
# Print an error message for unrecognized tokens
yyerror(char *s) {
    printf("Error: Unrecognized token %s\n", s);
    exit(1);
}

# This is the parser section
# This function is called by the main program to parse the input
yyparse() {
    return yylex();
}

# This is the main function for the lexer
# This function checks for defined token patterns and returns the corresponding token
int yylex() {
    int c;
    # Check for the end of input
    if(num1 == NULL) {
        return 0;
    }
    # Check for recognized token patterns and return the corresponding token
    if(num1 == '+' || num1 == '-' || num1 == '*' || num1 == '/') {
        return num1;
    }
    else if(num1 == num1 || num1 == num2) {
        return NUM;
    }
    else {
        # If no patterns are matched, call the error handling function
        yyerror("Token not recognized");
    }
}