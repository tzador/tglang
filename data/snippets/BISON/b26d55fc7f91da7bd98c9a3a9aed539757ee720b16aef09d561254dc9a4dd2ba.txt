%token <num> NUM     <!-- Define token "NUM" as a numerical value -->
%token <assign> ASSIGN '=' <!-- Define token "ASSIGN" as an equal sign -->
%token <op> PLUS '+'       <!-- Define token "PLUS" as a plus sign -->
%token <op> MINUS '-'      <!-- Define token "MINUS" as a minus sign -->
%token <op> MULT '*'       <!-- Define token "MULT" as a multiplication sign -->
%token <op> DIV '/'        <!-- Define token "DIV" as a division sign -->

%%                        <!-- Begin of grammar rules -->

/* Rule for assigning an expression to a variable */
assignment: IDENTIFIER ASSIGN expression {$$ = $1; $2; $3;}    

/* Rule for an expression containing numbers and operations */
expression: NUM
          | expression PLUS expression {$$ = $1 + $3;}
          | expression MINUS expression {$$ = $1 - $3;}
          | expression MULT expression {$$ = $1 * $3;}
          | expression DIV expression {$$ = $1 / $3;}

%%                        <!-- End of grammar rules -->

/* Function for handling syntax errors */
void yyerror (char *s) {
   fprintf (stderr, "%s\n", s);
} /* End of yyerror function */