%token <string> ID    /* Defining the token type for an identifier */
%token <string> NUM   /* Defining the token type for a numerical value */

%% /* Starting the %top code section */

program : statements    /* Defining the rules for the program structure */
        |               /* Since there may be multiple sets of statements, we use '|' to indicate "or" */
        ;

statements : statement ';'    /* Defining the rules for a statement sequence */
        | statement ';' statements   /* Allowing for multiple statements separated by ';' */
        ;

statement : ID ':=' expression  /* Defining the rules for an assignment statement */
        | 'print' expression      /* Defining the rules for a print statement, where we denote "print" in the grammar with quotes */
        ;

expression : additive_expr     /* Defining the rules for expressions, starting with the most basic form */
        | '-' additive_expr     /* Allowing for negation, denoted with '-' */
        | expression '+' additive_expr   /* Defining the rules for addition, where '+' denotes addition */
        | expression '-' additive_expr   /* Allowing for subtraction, denoted with '-' */
        ;

additive_expr : primary_expr    /* Defining the rules for the most basic expression, which is just a value or identifier */
        | additive_expr '*' primary_expr    /* Allowing for multiplication, denoted with '*' */
        | additive_expr '/' primary_expr    /* Allowing for division, denoted with '/' */
        ;

primary_expr : NUM      /* Defining a numerical value as the most basic expression */
        | ID            /* Allowing for an identifier as an expression */
        | '(' expression ')'    /* Allowing for expressions to be wrapped in parentheses */
        ;
        
%%
 /* Ending the %top code section */
 
 /* Starting the %incode declarations section */
 
 void main() {
    yyparse();      /* Running the parser on the input code */
 }
 
 /* Ending the %incode declarations section */