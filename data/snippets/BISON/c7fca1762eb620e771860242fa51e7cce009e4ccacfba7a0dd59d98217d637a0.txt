/* Defines a grammar for simple arithmetic expressions */
%%
exp: NUM        { printf("%d\n", $1); }      /* matches a single number */
   | exp '+' exp         /* addition operator */
                     { printf("%d\n", $1 + $3); }
   | exp '-' exp         /* subtraction operator */
                     { printf("%d\n", $1 - $3); }
   | exp '*' exp         /* multiplication operator */
                     { printf("%d\n", $1 * $3); }
   | exp '/' exp         /* division operator */
                     { printf("%d\n", $1 / $3); }
   | '(' exp ')'         /* parentheses for order of operations */
                     { printf("%d\n", $2); }
   ;
NUM: [0-9]+;             /* matches a sequence of digits */
%%
/* Helper function to print an error message */
int yyerror(char *s) {
  printf("Error: %s\n", s);
  return 0;
}
int main(int argc, char **argv) {
  /* Initialize the grammar and parse the input */
  yyin = fopen(argv[1], "r"); /* open the input file */
  yylex();                /* perform lexical analysis */
  yyparse();              /* perform parsing */
  fclose(yyin);           /* close the input file */
  return 0;
}