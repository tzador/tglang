/*
 * A simple BISON grammar for defining a basic mathematical language
 */

%{
  #include <stdio.h>
  #include <math.h>
  
  /* Declare necessary variables */
  double result;
%}

%start calculation // Indicate the starting rule

%%

/* Non-terminal rules */
calculation: NUMBER { result = $1; } // Assigns the result to the first NUMBER found
  | calculation PLUS calculation { result = $1 + $3; } // Addition rule
  | calculation MINUS calculation { result = $1 - $3; } // Subtraction rule
  | calculation TIMES calculation { result = $1 * $3; } // Multiplication rule
  | calculation DIVIDE calculation { result = $1 / $3; } // Division rule
  | OPEN_BRACKET calculation CLOSE_BRACKET { result = $2; } // Handles brackets properly

/* Terminal rules */
NUMBER: [0-9]+ | [0-9]+ "." [0-9]+ { $$ = atof($1); }; // Handles both integer and floating point numbers
PLUS: "+";
MINUS: "-";
TIMES: "*";
DIVIDE: "/";
OPEN_BRACKET: "(";
CLOSE_BRACKET: ")";
WS: [ \t\n\r]+; // Ignore whitespace

%%

/* Function to handle parsing errors */
void yyerror(char* s) {
  fprintf(stderr, "%s\n", s);
}

/* Main function to parse and execute mathematical expressions */
int main() {
  yyparse();
  
  /* Print the result of the calculation */
  printf("Result: %f\n", result);
  
  return 0;
}

/* Flex code to handle input tokens */
%{
  #include "calc.tab.h"
%}

%%

{WS}+ { /* Ignore whitespace */ }
{NUMBER} { return NUMBER; }
{PLUS} { return PLUS; }
{MINUS} { return MINUS; }
{TIMES} { return TIMES; }
{DIVIDE} { return DIVIDE; }
{OPEN_BRACKET} { return OPEN_BRACKET; }
{CLOSE_BRACKET} { return CLOSE_BRACKET; }

%%