%start Program

%%

Program : DeclarationList ';' StatementList ;

DeclarationList : DeclarationList Declaration | Declaration ;
Declaration : Type Identifier '=' Expression ;

StatementList : StatementList Statement | Statement ;
Statement : Identifier '=' Expression ';' 
          | 'if' '(' Expression ')' Statement 'else' Statement ;

Type : 'int' | 'float' | 'string' ;

Identifier : /[a-zA-Z]+/ ;

Expression : Term 
           | Expression '+' Term 
           | Expression '-' Term ;

Term : Factor 
     | Term '*' Factor 
     | Term '/' Factor ;

Factor : '(' Expression ')' | Identifier | Number ;

Number : /[0-9]+/ ;

%%

/* Code explanation:
- The code snippet is written in BISON, a popular parser generator tool.
- The %start directive specifies the starting symbol for the grammar, which in this case is "Program".
- The %% delimiters define the beginning and end of the grammar rules.
- The "Program" rule consists of a DeclarationList followed by a semicolon and a StatementList.
- The "DeclarationList" rule allows for multiple declarations, separated by semicolons.
- The "Declaration" rule defines the structure for a declaration, where a variable is assigned a value.
- The "StatementList" rule allows for multiple statements, separated by semicolons.
- The "Statement" rule specifies the structure for an assignment statement or an if-else statement.
- The "Type" rule defines the possible variable types.
- The "Identifier" rule is a regular expression that matches any alphabetical characters for variable names.
- The "Expression" rule defines the structure for arithmetic expressions, using operators such as addition and subtraction.
- The "Term" rule specifies the structure for terms, which can be factors or other terms multiplied or divided together.
- The "Factor" rule defines the structure for factors, which can be expressions, identifiers, or numbers enclosed in parentheses.
- The "Number" rule is a regular expression that matches any numerical digits for numbers.
- The code snippet can be used to create a parser for a simple programming language with basic arithmetic and variable declarations.
*/