%{
  /* Bison code to declare variables and user-defined functions */
  int result; 
  float pi; 
  int factorial(int n) { 
    if (n == 0) 
      return 1; 
    else 
      return n * factorial(n - 1); 
  }
%}

/* Bison code to define tokens and grammar rules */
%token NUMBER 
%token EOL

%%
line: expr EOL 
      { 
        printf("Result: %d \n", $1); 
      }

expr: NUMBER '+' NUMBER 
      { 
        $$.result = $1 + $3; 
      }
    | NUMBER '-' NUMBER 
      { 
        $$.result = $1 - $3; 
      }
    | NUMBER '*' NUMBER 
      { 
        $$.result = $1 * $3; 
      }
    | NUMBER '/' NUMBER 
      { 
        $$.result = $1 / $3; 
      }
    | 'factorial' '(' NUMBER ')' 
      { 
        $$.result = factorial($3); 
      }
    | '(' expr ')' 
      { 
        $$.result = $2.result; 
      };
    
%%