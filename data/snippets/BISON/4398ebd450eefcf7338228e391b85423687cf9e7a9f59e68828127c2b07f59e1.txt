%{
    /* This section is used to define any additional C code that will be included in the final compiled parser */
    #include<stdio.h>
    #include<stdlib.h>
    /* Define any global variables or data structures needed for the parser */
    int numIntegers = 0;
    int numFloats = 0;
%}

%token INT FLOAT  /* Token declarations, used to identify input types */
%right '='  /* Define precedence and associativity of operators */

%%
program:
    statement_list
    {
        /* This will be executed after parsing the entire input */
        printf("Number of integers: %d\n", numIntegers);
        printf("Number of floats: %d\n", numFloats);
    }
    ;

statement_list:
    statement
    |statement_list statement
    ;

statement:
    assignment_statement
    |print_statement
    ;

assignment_statement:
    var '=' expression
    {
        /* Update global variables based on input */
        if($1 == INT) /* $1 refers to the first token of the input */
            numIntegers++;
        else if($1 == FLOAT)
            numFloats++;
    }
    ;

print_statement:
    PRINT expression {
        /* Print the evaluated expression */
        printf("Result: %f\n", $2);
    }
    ;

expression:
    expression '+' expression
    {
        /* Add two expressions together and return the result */
        $$ = $1 + $3;
    }
    |expression '-' expression
    {
        /* Subtract second expression from first and return the result */
        $$ = $1 - $3;
    }
    |expression '*' expression
    {
        /* Multiply two expressions and return the result */
        $$ = $1 * $3;
    }
    |expression '/' expression
    {
        /* Divide first expression by second and return the result */
        $$ = $1 / $3;
    }
    |'(' expression ')'  /* Parentheses to denote order of operations */
    |var /* Variable token */
    |number /* Number value token */
    ;

var:
    INT /* Integer variable token */
    |FLOAT /* Float variable token */
    ;

number:
    /\d+(\.\d+)?/ /* Regex pattern to match integers and floats */
    ;  /* End of grammar rules */

%%
/* This section is used to handle any syntax or parse errors in the input */
void yyerror(char *s) {
    printf("Error: %s\n", s);
    exit(1); /* Terminate the program */
}

/* Main function to start the parsing process */
int main() {
    yyparse(); /* Call the parser to start parsing */
    return 0; /* Return 0 on successful parsing */
}