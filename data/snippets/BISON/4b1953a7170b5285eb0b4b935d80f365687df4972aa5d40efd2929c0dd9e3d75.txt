// start of grammar production rules
Expr: // rule for expression
      // primary expressions
      ID {printf("Identifier: %s", $1);} // print identifier
    | const {printf("Constant: %d", $1);} // print constant
    | '(' Expr ')' // expression within parentheses
    | Expr '+' Expr %prec PLUS {printf("Addition: (%d + %d)", $1, $3);} // print addition operation
    | Expr '-' Expr %prec MINUS {printf("Subtraction: (%d - %d)", $1, $3);} // print subtraction operation
    | Expr '*' Expr %prec MULTIPLY {printf("Multiplication: (%d * %d)", $1, $3);} // print multiplication operation
    | Expr '/' Expr %prec DIVIDE {printf("Division: (%d / %d)", $1, $3);} // print division operation
    | '-' Expr %prec NEGATIVE {printf("Negative: -%d", $2);} // print negative operation
    | Expr '^' Expr %prec POWER {printf("Power: (%d ^ %d)", $1, $3);} // print power operation
    | 'sin' Expr %prec SINE {printf("Sine: sin(%d)", $2);} // print sine operation
    | 'cos' Expr %prec COSINE {printf("Cosine: cos(%d)", $2);} // print cosine operation
    | 'log' Expr %prec LOG {printf("Logarithm: log(%d)", $2);} // print logarithm operation
    ;

// start of lexer definitions
%token ID // identifier token
%token const // constant token

%left '+' '-' // left associative operators: addition and subtraction
%left '*' '/' // left associative operators: multiplication and division
%left '^' // left associative operator: power

%%
// start of actual program
int main(void) {
    yyparse(); // parse the input

    return 0;
}