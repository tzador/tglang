%token <type> IDENT //defines the token IDENT as a variable of type
%token <val> NUM //defines the token NUM as a variable of value
%token <cond> LESS, GREATER, EQUAL //defines the tokens LESS, GREATER, and EQUAL as variables of condition

%% //start of rules section
expr: //rule for expressions
  NUM //expression can be just a number
| IDENT //or an identifier
| expr '+' expr //or an expression followed by a plus sign and another expression
| expr '-' expr //or an expression followed by a minus sign and another expression
| expr '*' expr //or an expression followed by a multiplication sign and another expression
| expr '/' expr //or an expression followed by a division sign and another expression
| expr '^' expr //or an expression followed by a caret symbol and another expression
| '(' expr ')' //or an expression enclosed in parentheses
| expr LESS expr //or an expression followed by the LESS variable and another expression
| expr GREATER expr //or an expression followed by the GREATER variable and another expression
| expr EQUAL expr //or an expression followed by the EQUAL variable and another expression
;

%%
//start of user-defined functions and actions
void print_result(int result) //defines a function to print the final result
{
  printf("The result is: %d", result);
}

void execute_expr() //defines a function to execute the expression based on the token
{
  if($1 == "+") //checks if the token is a plus sign
  {
    $$ = $2 + $3; //performs addition on the two expressions
  }
  else if($1 == "-") //checks if the token is a minus sign
  {
    $$ = $2 - $3; //performs subtraction on the two expressions
  }
  else if($1 == "*") //checks if the token is a multiplication sign
  {
    $$ = $2 * $3; //performs multiplication on the two expressions
  }
  else if($1 == "/") //checks if the token is a division sign
  {
    $$ = $2 / $3; //performs division on the two expressions
  }
  else if($1 == "^") //checks if the token is a caret symbol
  {
    $$ = pow($2, $3); //performs exponentiation on the two expressions
  }
  else if($1 == "LESS") //checks if the token is the LESS variable
  {
    $$ = $2 < $3; //performs a "less than" comparison on the two expressions
  }
  else if($1 == "GREATER") //checks if the token is the GREATER variable
  {
    $$ = $2 > $3; //performs a "greater than" comparison on the two expressions
  }
  else if($1 == "EQUAL") //checks if the token is the EQUAL variable
  {
    $$ = $2 == $3; //performs an "equal to" comparison on the two expressions
  }
}

int main() //main function to read and parse user input
{
  yylex(); //scans for tokens in the input
  yyparse(); //parses the input based on the defined rules
  print_result($$); //prints the final result
  return 0; //exits the program
}