%{
    /* This section is used to specify any additional code or definitions */
    #include <stdio.h>
    #include <stdlib.h>
    #define MAXSIZE 100
%}

/* This section contains the tokens and their corresponding regular expressions */
dig= ['0'-'9'];
let= ['a'-'z']['A'-'Z'];
whitespace= ' '|'\t'|'\n'|'\\r';

%%

/* This section contains the grammar rules and corresponding actions */
/* The grammar defines a simple calculator that can perform addition, subtraction,
 multiplication, and division operations on integers */
calc: expr               {printf("Result: %d\n", $1);}

/* The 'expr' rule defines the addition and subtraction operations */
expr: expr '+' term     {$$ = $1 + $3;}
    | expr '-' term     {$$ = $1 - $3;}
    | term              {$$ = $1;}
    ;

/* The 'term' rule defines the multiplication and division operations */
term: term '*' factor   {$$ = $1 * $3;}
    | term '/' factor   {
                            /* Check if divisor is 0, if true, print error message */
                            if($3 == 0){
                                fprintf(stderr, "Division by zero error!\n");
                                exit(1);
                            }
                            else{
                                $$ = $1 / $3;
                            }
                        }
    | factor            {$$ = $1;}
    ;

/* The 'factor' rule handles integer input and parentheses */
factor: '(' expr ')'    {$$ = $2;}
      | int             {$$ = $1;}
      ;

/* The 'int' rule handles integer input and converts it to an actual integer value */
int: dig+                {$$ = atoi(yytext);}
  ;
  
%%

/* This section is used to specify any additional functions or code */
int main(void)
{
    /* Declare variables for input and result */
    char input[MAXSIZE];
    int result;

    /* Get user input */
    printf("Enter calculation in BISON: ");
    scanf("%s", input);

    /* Perform lexical analysis and parsing */
    /* yyparse() is automatically generated by Bison */
    /* The result of the parse can be accessed through the global variable 'result' */
    regular_numbers_version_scan_string(input);
    yyparse();

    /* Print the result */
    printf("Result: %d\n", result);

    return 0;
}