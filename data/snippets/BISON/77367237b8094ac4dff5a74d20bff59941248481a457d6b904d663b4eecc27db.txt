%start expression //Specifies start rule for grammar

%%

expression: //Defines expression non-terminal
    number //Matches number rule
    | string //Matches string rule
    | "true" //Matches string literal "true"
    | "false" //Matches string literal "false"
    | "(" expression ")" //Matches expression surrounded by parentheses
    | expression "+" expression //Matches addition operation
    | expression "-" expression //Matches subtraction operation
    | expression "*" expression //Matches multiplication operation
    | expression "/" expression //Matches division operation
    | expression "&&" expression //Matches logical AND operation
    | expression "||" expression //Matches logical OR operation
    | "!" expression //Matches logical NOT operation

number: //Defines number rule
    /[0-9]+/ //Matches one or more digits

string: //Defines string rule
    /"[^"\n\r]*"/ //Matches a string contained within double quotes (excluding new lines)

%%

int main() {
    char *input = "5 + \"Hello\""; //Defines input string to be parsed
    yyscan_t scanner;
    yylex_init(&scanner); //Initializes scanner
    YY_BUFFER_STATE state = yy_scan_string(input, scanner); //Scans input string
    if (yyparse(scanner) == 0) { //Parses input string
        printf("Success!"); //Prints success message
    }
    else {
        printf("Error!"); //Prints error message
    }
    yylex_destroy(scanner); //Destroys scanner
    return 0;
}

void yyerror(YYLTYPE *locp, yyscan_t scanner, const char *msg) { //Defines yyerror function for error handling
    printf("Error at line %d, column %d: %s", locp->first_line, locp->first_column, msg); //Prints error message with line and column numbers
}

int yywrap(yyscan_t scanner) { //Defines yywrap function for end of input detection
    return 1; //Indicates end of input
}