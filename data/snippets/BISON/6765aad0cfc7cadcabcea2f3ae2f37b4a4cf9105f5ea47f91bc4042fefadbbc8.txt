/* BISON grammar for a simple math expression parser */

%{

#include <stdio.h>
#include <stdlib.h>

int result; /* global variable to store final result */

%}

/* Tokens */
%token <v> INT
%token <v> PLUS MINUS TIMES DIVIDE

%%

/* Rules */
start: expr { printf("Result: %d\n", $1); } ; /* prints final result */
expr: term { $$ = $1; } /* sets current term as result */
    | expr PLUS term { $$ = $1 + $3; } /* adds term to current result */
    | expr MINUS term { $$ = $1 - $3; } /* subtracts term from current result */
    | expr TIMES term { $$ = $1 * $3; } /* multiplies term with current result */
    | expr DIVIDE term { $$ = $1 / $3; } /* divides current result by term */
    | MINUS expr %prec UNARY { $$ = -$2; } /* handles unary minus */
;

/* Terminals */
term: INT { $$ = $1; } /* integer value */
    | MINUS INT %prec UNARY { $$ = -$2; } /* unary minus for integer value */

%%

int main(int argc, char *argv[]) {

    /* check for correct number of arguments */
    if (argc != 2) {
        printf("Incorrect number of arguments. Usage: %s \"expression\"\n", argv[0]);
        return -1;
    }

    /* parse the math expression */
    yyparse();

    return 0;
}