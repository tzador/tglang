// Define grammar rules
%token INT        // Token for integer values
%token FLOAT      // Token for floating-point values
%token IF         // Token for if keyword
%token ELSE       // Token for else keyword
%token WHILE      // Token for while keyword
%token IDENTIFIER // Token for identifiers (variable names)

// Rules for arithmetic expressions
expr:   expr '+' term
        | expr '-' term
        | term;

term:   term '*' factor
        | term '/' factor
        | factor;

factor: INT
        | FLOAT
        | IDENTIFIER
        | '(' expr ')' ;

// Rules for conditional statements
if_statement: IF '(' expr ')' '{' statement_list '}'
                | IF '(' expr ')' '{' statement_list '}' ELSE '{' statement_list '}';

// Rules for loop statements
while_loop: WHILE '(' expr ')' '{' statement_list '}';

// Statements can be either arithmetic expressions or conditional statements
statement: expr ';' | if_statement | while_loop;

// List of statements, separated by semi-colons
statement_list: statement | statement_list ';' statement;

// Start symbol for grammar
%start statement_list;