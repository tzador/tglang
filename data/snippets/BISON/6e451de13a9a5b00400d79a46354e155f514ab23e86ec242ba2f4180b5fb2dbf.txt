%code requires
{
   #include <iostream>  /* import standard input/output library */
   using namespace std;
}
%token<name> NAME  /* declare token 'NAME' */

%%
program : function_list  /* defines a non-terminal rule 'program' */
function_list : function function_list  /* defines a rule for the list of functions */
| function
;
function : TYPE NAME '(' parameters ')' '{' statements '}'  /* defines a rule for a function */
;
parameters :  /* defines a rule for the list of parameters */
| parameter_list
;
parameter_list : TYPE NAME ',' parameter_list  /* defines a rule for the list of parameters */
| TYPE NAME
;
statements :  /* defines a rule for the list of statements */
| statement_list
;
statement_list : statement ';' statement_list  /* defines a rule for the list of statements */
| statement ';'
;
statement : declaration  /* defines a rule for a declaration statement */
| assignment  /* defines a rule for an assignment statement */
| function_call  /* defines a rule for a function call statement */
;
declaration : TYPE NAME  /* defines a rule for a declaration */
;
assignment : NAME '=' expression  /* defines a rule for an assignment */
;
expression : '(' expression ')'  /* defines a rule for an expression */
| expression '+' expression
| expression '-' expression
| expression '*' expression
| expression '/' expression
| NAME
| NUMBER
;
function_call : NAME '(' arguments ')' /* defines a rule for a function call */
;
arguments : /* defines a rule for the list of arguments */
| argument_list
;
argument_list : expression ',' argument_list /* defines a rule for the list of arguments */
| expression
;
%%
int main() {  /* main function to execute the program */
   yyparse();  /* runs parser */
   return 0;
}

void yyerror(string msg) {  /* function to handle errors in parsing */
   cerr << msg << endl;  /* prints error message to console */
}