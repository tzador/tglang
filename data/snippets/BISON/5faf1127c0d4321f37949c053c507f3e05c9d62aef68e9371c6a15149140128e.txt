/* Define rules for arithmetic operations */
expr:
      expr '+' expr { $$ = $1 + $3; } /* Addition rule */
    | expr '-' expr { $$ = $1 - $3; } /* Subtraction rule */
    | expr '*' expr { $$ = $1 * $3; } /* Multiplication rule */
    | expr '/' expr { $$ = $1 / $3; } /* Division rule */
    | '(' expr ')' { $$ = $2; } /* Parenthesis rule */
    | NUM { $$ = atof($1); } /* Rule for numerical values */

/* Define rules for logical operations */
logical_expr:
      expr '>' expr { $$ = $1 > $3; } /* Greater than rule */
    | expr '<' expr { $$ = $1 < $3; } /* Less than rule */
    | expr '>=' expr { $$ = $1 >= $3; } /* Greater than or equal to rule */
    | expr '<=' expr { $$ = $1 <= $3; } /* Less than or equal to rule */
    | expr '==' expr { $$ = $1 == $3; } /* Equal to rule */
    | expr '!=' expr { $$ = $1 != $3; } /* Not equal to rule */
    | '(' logical_expr ')'{ $$ = $2; } /* Parenthesis rule */
    | BOOL { $$ = *$1; } /* Rule for boolean values */
    
/* Define the starting rule and error handling */
%%

/* Starting rule */
start:
    expr | logical_expr

%%

/* Error handling */
yyerror(char *msg)
{
    fprintf(stderr, "Line %d: Error - %s\n", yylineno, msg);
}

/* Include necessary libraries */
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
%}

/* Define tokens */
%token NUM
%token BOOL

/* Ignore white space */
%skip "[\t\n]+"

%%

/* Main function */
int main()
{
    /* Initialize yyin to read from standard input */
    yyin = stdin;

    /* Call yyparse to start parsing the input */
    yyparse();
}

/* Define the lexer */
%{
int yylex()
{
    int c;

    /* Skip white space */
    while ((c = getchar()) == ' ' || c == '\t' || c == '\n')
        ;

    /* Recognize numerical values */
    if (isdigit(c))
    {
        char buffer[20];
        int i = 0;
        do
        {
            buffer[i++] = c;
        }
        while (isdigit(c = getchar()));
        buffer[i] = '\0';
        yylval.NUM = atof(buffer);
        return NUM;
    }

    /* Recognize boolean values */
    if (c == 't' || c == 'f')
    {
        char buffer[10];
        int i = 1;
        buffer[0] = c;
        do
        {
            buffer[i++] = c;
        }
        while ((c = getchar()) != '\n' && c != ' ' && c != '\t' && c != ')');
        buffer[i] = '\0';
        yylval.BOOL = (strcmp(buffer, "true") == 0);
        return BOOL;
    }

    /* Return remaining characters */
    return c;
}
%}

/* Specify lexer file */
%option yywrap="1"

/* Compile bison file */
%header
%define api.pure full
%output lex.yy.c

/* Include external definitions */
%extern

/* Include yyparse function */
%parse-param {LexMem_t *}

/* Include yywrap function */
%parse-param {void *}