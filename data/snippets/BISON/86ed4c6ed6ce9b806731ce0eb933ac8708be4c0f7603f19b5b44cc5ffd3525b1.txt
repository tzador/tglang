%start Program //start rule
Program: //rule for Program
    Statements //program consists of one or more statements
    ;
    
Statements: //rule for statements
    Statement //single statement
    | Statements Statement //multiple statements
    ;
    
Statement: //rule for a statement
    VariableDeclaration //declaring a variable
    | Assignment //assigning a value to a variable
    | Loop //looping through code
    | IfStatement //conditional statement
    ;
    
VariableDeclaration: //rule for declaring a variable
    Type Identifier "=" Expression ";" //assigning a value to the variable
    ;
    
Assignment: //rule for assigning a value to a variable
    Identifier "=" Expression ";" //assigning expression to the variable
    ;
    
Loop: //rule for creating a loop
    "for" "(" Assignment ";" Condition ";" Increment ")" "{" Statements "}" //loop through statements as long as condition is true
    | "while" "(" Condition ")" "{" Statements "}" //loop through statements while condition is true
    ;
    
IfStatement: //rule for conditional statement
    "if" "(" Condition ")" "{" Statements "}" //if statement with no else clause
    | "if" "(" Condition ")" "{" Statements "}" "else" "{" Statements "}" //if statement with else clause
    ;
    
Condition: //rule for defining a condition
    Expression "==" Expression //checking for equality between two expressions
    | Expression "!=" Expression //checking for inequality between two expressions
    | Expression ">" Expression //checking if first expression is greater than second expression
    | Expression ">=" Expression //checking if first expression is greater than or equal to second expression
    | Expression "<" Expression //checking if first expression is less than second expression
    | Expression "<=" Expression //checking if first expression is less than or equal to second expression
    ;
    
Increment: //rule for incrementing a variable
    Identifier "++" //incrementing by 1
    | Identifier "--" //decrementing by 1
    | Identifier "+=" Expression //incrementing by value of expression
    | Identifier "-=" Expression //decrementing by value of expression
    ;
    
Type: //rule for defining a variable type
    "int" //integer
    | "float" //floating point number
    | "string" //string of characters
    | "bool" //boolean value
    ;
    
Identifier: //rule for defining an identifier
    [a-z]+ //lowercase letters only
    ;
    
Expression: //rule for defining an expression
    Term //a single term
    | Expression "+" Term //adding another term to the expression
    | Expression "-" Term //subtracting another term from the expression
    ;
    
Term: //rule for defining a term
    Factor //a single factor
    | Term "*" Factor //multiplying another factor to the term
    | Term "/" Factor //dividing another factor from the term
    ;
    
Factor: //rule for defining a factor
    Identifier //a variable or constant value
    | Number //a numerical constant
    | "(" Expression ")" //an expression surrounded by parentheses
    ;
    
Number: //rule for defining a number
    [0-9]+ //any sequence of digits 0-9
    ;