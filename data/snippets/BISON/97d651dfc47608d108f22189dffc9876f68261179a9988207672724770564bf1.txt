/* Define the grammar rules for a basic arithmetic expression */
%{
/* Bison declarations and includes */
#include<stdio.h>

/* Bison function declarations */
int yylex();

void yyerror(char* s);

/* Global variables */
int result;
%}

/* Define the tokens */
%token NUMBER
%token PLUS
%token MINUS
%left PLUS MINUS

%%
/* Grammar rules */
expression: NUMBER
            {result = $1;}
          | expression PLUS expression
            {result = $1 + $3;}
          | expression MINUS expression
            {result = $1 - $3;}
          ;

%%

/* Start the parser */
int main() {
  /* Main function declarations */
  yyparse();

  /* Print the result */
  printf("The result is %d", result);

  return 0;
}

/* Define the yylex function */
int yylex() {
  char c = getchar();
  if (c == '+') return PLUS;
  if (c == '-') return MINUS;
  if (c == '\n') return 0;
  
  /* Convert the character to an integer */
  int n = c - '0';
  c = getchar();
  while (c >= '0' && c <= '9') {
    n *= 10;
    n += c - '0';
    c = getchar();
  }
  ungetc(c,stdin);
  return NUMBER;  
}

/* Define the yyerror function */
void yyerror(char* s) {
  fprintf(stderr, "%s\n",s);
}

/* End of code snippet */