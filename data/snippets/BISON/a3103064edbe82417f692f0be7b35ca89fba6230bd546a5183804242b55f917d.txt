%{
#include <iostream>
using namespace std;
%}

// Declaration section
%token <integer> INT
%token <string> STR
%token <float> FLT

//%left '+' '-'
//%left '*' '/' '%'

%%

// Rules section
program: 
    statement_list
;

statement_list: 
    statement |
    statement_list
    statement
    { cout << "Statement List" << endl; }
;

statement:
    assignment_statement |
    if_statement |
    while_statement
;

assignment_statement:
    STR '=' STR
    {
        // Code for assignment statement
        cout << "Assigning a string variable." << endl;
    }
    |
    INT '=' INT
    {
        // Code for assignment statement
        cout << "Assigning an integer variable." << endl;
    }
    |
    FLT '=' FLT
    {
        // Code for assignment statement
        cout << "Assigning a float variable." << endl;
    }
;

if_statement:
    'if' '(' expression ')'
    {
        // Code for if statement
        cout << "If statement begins." << endl;
    }
    statement
    {
        // Code for if statement
        cout << "If statement ends." << endl;
    }
    |
    'if' '(' expression ')'
    {
        // Code for if statement
        cout << "If statement begins." << endl;
    }
    statement
    {
        // Code for else statement
        cout << "Else statement begins." << endl;
    }
    statement
    {
        // Code for else statement
        cout << "Else statement ends." << endl;
    }
;

while_statement:
    'while' '(' expression ')'
    {
        // Code for while statement
        cout << "While statement begins." << endl;
    }
    statement
    {
        // Code for while statement
        cout << "While statement ends." << endl;
    }
;

expression:
    STR '+' STR
    |
    STR '-' STR
    |
    STR '*' STR
    |
    STR '/' STR
    |
    STR '%' STR
    |
    INT '+' INT
    |
    INT '-' INT
    |
    INT '*' INT
    |
    INT '/' INT
    |
    INT '%' INT
    |
    FLT '+' FLT
    |
    FLT '-' FLT
    |
    FLT '*' FLT
    |
    FLT '/' FLT
    |
    FLT '%' FLT
;
%%

// Function to handle errors
void yyerror (const char *msg) {
    fprintf (stderr, "%s\n", msg);
}

int main () {
    yyparse();
    return 0;
}