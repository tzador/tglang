/* This is a grammar for a simple calculator */

%token NUM /* Define the token for numbers */
%token ADD SUB MUL DIV /* Define the tokens for arithmetic operators */

%% /* The rules for the grammar start here */

calc: /* Starting rule for the calculator */
    | expr /* If the input is an expression */
    | calc expr /* If the input is a series of expressions */
    ;

expr: NUM /* Rule for a number as an expression */
    | expr ADD expr /* Rule for addition */
    | expr SUB expr /* Rule for subtraction */
    | expr MUL expr /* Rule for multiplication */
    | expr DIV expr /* Rule for division */
    | '(' expr ')' /* Rule to handle parenthesis */
    ;

%% /* The code below will be executed along with the grammar rules */

yyerror(char *msg) /* Function to handle error messages */
{
    fprintf(stderr, "Error: %s\n", msg); /* Output the error message */
}