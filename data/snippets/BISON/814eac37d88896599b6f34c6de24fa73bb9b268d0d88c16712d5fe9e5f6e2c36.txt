%%

program : declaration-list;

declaration-list : /* empty */
                  | declaration-list declaration;

declaration : type ID ';'
            | TYPE ID '[' NUM ']' ';'
            | TYPE ID '=' NUM ';'
            | TYPE ID '=' STRING ';'
            | TYPE ID '(' parameter-list ')' '{' statements '}'
            | TYPE ID '(' ')' ';'
            | TYPE ID '*' ID ';'
            | TYPE ID '=' '&' ID ';'
            | TYPE ID '=' '*' ID ';'
            ;

parameter-list : /* empty */
               | parameter-list TYPE ID
               | parameter-list TYPE ID '[' ']';

statements : /* empty */
           | statements statement
           ;

statement : expression-stmt
          | compound-stmt
          | selection-stmt
          | iteration-stmt
          | jump-stmt
          ;

expression-stmt : expr ';';

compound-stmt : '{' local-decls statements '}';

local-decls : /* empty */
            | local-decls local-decl;

local-decl : type ID ';' /* variable declaration */
           | type ID '(' ')' '{' statements '}' /* function declaration */
           ;

selection-stmt : IF '(' expr ')' statement
               | IF '(' expr ')' statement ELSE statement
               | SWITCH '(' expr ')' statement
               ;

iteration-stmt : WHILE '(' expr ')' statement
               | DO statement WHILE '(' expr ')' ';'
               | FOR '(' expr ';' expr ';' expr ')' statement
               | FOR '(' type ID ':' expr ')' statement
               ;

jump-stmt : GOTO STRING ';'
          | CONTINUE ';'
          | BREAK ';'
          | RETURN ';'
          | RETURN expr ';'
          ;

expr : + expr
     | - expr
     | ! expr
     | ~ expr
     | ID
     | ID '(' argument-list ')'
     | ID '[' expr ']'
     | ID '.' ID
     | ID ARITHMETIC_OP expr
     | STRING /* constant string */
     | NUMBER /* constant number */
     | '(' expr ')';

argument-list : /* empty */
              | argument-list expr ','
              | argument-list expr /* without comma for last argument */

ARITHMETIC_OP : '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>>' ;

TYPE : 'int' | 'char' | 'float' | 'double';

ID : [a-zA-Z_][a-zA-Z0-9_]*; /* variable or function identifier */

STRING : "\"" ([^"\n\\] | '\\')* "\""; /* string with escaped characters */

NUMBER : [1-9][0-9]* | 0x[A-F0-9]+; /* decimal or hexadecimal numbers */

%%