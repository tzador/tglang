/* Example BISON code snippet */

%token <int> NUMBER   /* Declare token type for numerical values */
%token <char*> STRING /* Declare token type for string values */

/* Define grammar rules for basic arithmetic expressions */
expr: NUMBER          
    | STRING          
    | expr '+' expr       
    | expr '-' expr       
    | expr '*' expr       
    | expr '/' expr       
    | expr '^' expr    /* Represents exponentiation */
    | '-' expr %prec NEG /* Allows for negative numbers */
    ;

%%

/* Define grammar rules for variable assignment and print statements */
calc: /* Empty production */
    | calc expr '\n'    /* Allows for multiple calculations in one input */
    | calc error '\n'   /* Handles any input errors */
    | "let" STRING '=' expr { 
        symtab[$2] = $4; /* Add variable and value to symbol table */
        printf("%s = %d\n", $2, symtab[$2]); /* Print variable and value */
      }
    | "print" STRING '\n' {
        printf("%s = %d\n", $2, symtab[$2]); /* Print variable value */
      }
    ;

/* Include standard C library for printf() function */
%code requires {
  #include <stdio.h>
}

/* Declare a symbol table for storing variable names and values */
%code {
  int symtab[20]; /* Maximum of 20 variables allowed */
}