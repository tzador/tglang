%token NUMBER      /* define a token called NUMBER */
%token PLUS MINUS  /* define tokens called PLUS and MINUS */
%left MINUS         /* set MINUS as a left-associative token */
%left PLUS          /* set PLUS as a left-associative token */

%%                 /* start of grammar rules section */
expr: NUMBER       /* grammar rule for an expression with a single number */
    | expr PLUS expr  /* rule for an expression with addition */
    | expr MINUS expr /* rule for an expression with subtraction */

%%                 /* start of parsing rules section */
int yylex() {       /* define a function to tokenize input */
    int val = getchar();  /* get next character from input */
    if (val == EOF)    /* if end of file, return 0 */
        return 0;
    if (val == ' ')     /* if whitespace, skip and call yylex again */
        return yylex();

    if (val == '+') {   /* if plus sign, return PLUS token */
        yylval.op = PLUS;
        return PLUS;
    }

    if (val == '-') {    /* if minus sign, return MINUS token */
        yylval.op = MINUS;
        return MINUS;
    }

    if (isdigit(val)) {   /* if digit, convert to number and return NUMBER token */
        int num = val - '0';
        val = getchar();
        while (isdigit(val)) { /* continue converting digits until non-digit is reached */
            num = num * 10 + val - '0';
            val = getchar();
        }
        ungetc(val, stdin); /* put back the non-digit character to be parsed later */
        yylval.num = num;
        return NUMBER;
    }

    printf("Invalid input\n"); /* if none of the above, input is invalid */
    exit(1);
}

void yyerror(const char *s) { /* function to handle parsing errors */
    fprintf(stderr, "%s\n", s);
    exit(1);
}

int main() {                    /* main function to call parsing and printing */
    int result = yyparse();
    if (result == 0)
        printf("%d\n", yylval.num); /* print the result of the parsed expression */
    else
        printf("Error parsing input\n");
    return 0;
}