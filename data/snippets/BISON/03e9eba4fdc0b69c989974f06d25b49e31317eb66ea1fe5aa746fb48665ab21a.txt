%token <type> IDNUM                        // Defines a token called IDNUM with a type

// Grammar
%%
program: declaration_list                // Program is a declaration list
;
declaration_list: declaration_list declaration | declaration  // Can be multiple declarations or just one
;
declaration: function_declaration | variable_declaration     // Can be either a function or variable declaration
;
function_declaration: type IDNUM '(' parameter_list ')' compound_statement  // Syntax for function declaration, with type, name, parameters, and statements
;
parameter_list: parameter_list ',' IDNUM        // Can have multiple parameters separated by comma
| IDNUM
;
variable_declaration: type IDNUM ';'           // Syntax for variable declaration, with type, name, and semicolon
;
type: INT | FLOAT                               // Defines types as INT or FLOAT
;
compound_statement: '{' statement '}'           // Statement within curly braces
;
statement: '{' statement '}'                    // Allows for nested statements by using curly braces recursively
| declaration_list                              // Can have multiple declarations in a statement
| expression ';'                               // Can have an expression followed by a semicolon
;
expression: IDNUM '=' expression                // Assignment expression with an equals sign
| factor
;
factor: '(' expression ')'                      // Expression within parenthesis
| IDNUM                                          // Factor is just an IDNUM
| IDNUM '(' argument_list ')'                    // Can have an IDNUM followed by an argument list within parenthesis
;
argument_list: argument_list ',' expression     // Can have multiple arguments separated by comma
| expression
;
%%