%%

%token <value> INT
%token <value> STRING
%token <value> TRUE
%token <value> FALSE

%left '+' '-'
%left '*' '/'

%start input

%%

// Input rule
input:
    | INT               {printf("%d", $1);}
    | STRING            {printf("%s", $1);}
    | TRUE              {printf("true");}
    | FALSE             {printf("false");}
    | input '+' input  {printf("%d", $1 + $3);} // addition rule
    | input '-' input  {printf("%d", $1 - $3);} // subtraction rule
    | input '*' input  {printf("%d", $1 * $3);} // multiplication rule
    | input '/' input  {printf("%d", $1 / $3);} // division rule
    | '-' input        {printf("%d", -$2);} // unary minus rule
    ;

%%

// along with the code, we can add annotated comments to explain what each rule does
// in this case, we have defined four tokens (INT, STRING, TRUE, FALSE) and four operators 
// (+, -, *, /) with their precedence level using the %left directive

// the input rule defines the various types of input that our program can handle
// for example, it can handle integer values (INT), string values (STRING), boolean values 
// (TRUE, FALSE) and perform operations on them using the defined operators
// the first four rules are responsible for printing the input in the appropriate format
// while the next four rules handle the arithmetic operations, with the result being printed
// using the printf function from the C programming language

// the last rule handles unary minus, where the input is multiplied by -1 to make it negative 
// the input variable is accessed using the dollar sign ($) followed by the number of input 
// (e.g. $1 for the first input, $2 for the second input, and so on) 

// the start symbol is defined as "input", which means that the input rule is the starting point 
// for our code and it will be used to parse and evaluate all subsequent input