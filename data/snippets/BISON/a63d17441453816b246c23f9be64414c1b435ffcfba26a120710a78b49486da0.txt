/*
 * BISON code snippet
 * Generates a simple calculator grammar
*/

/* Define tokens */
%token <int> NUM
%token OP '+'

/* Define the starting symbol */
%start calculator

/* Define the grammar rules */
calculator: /* empty */ | calc ';'
          ;

calc: NUM | calc OP NUM
    ;

%%
/* Actual C code */

#include <stdio.h>
#include <stdlib.h>

/* Define variables to store the input and result */
int input, result = 0;

/* Function to parse the input and carry out the calculation */
void yyerror(char *s)
{
    fprintf(stderr, "%s\n", s);
}

int yylex()
{
    int c = getchar();
    if (c == EOF)
        return 0;

    /* Check for a number token */
    if (c >= '0' && c <= '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUM;
    }

    /* Otherwise assume a single character token */
    return c;
}

/* Starting symbol for the parser */
int calculator()
{
    yyparse();
    return result;
}

/* Grammar rules for the calculator */
void calc()
{
    switch (yych) {
        /* If the token is a number, add it to the result */
        case NUM:
            result += yynext;
            break;
        /* If the token is an operator, perform the operation */
        case OP:
            result = result + yyval;
            break;
        default:
            yyerror("Invalid input");
    }
}