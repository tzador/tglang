%{
    # This is a BISON code snippet that creates a simple parser for BASIC language
    # It includes declaration section, rules, and functions.

    # Declaration section
    # Define tokens to be recognized by the parser
    %token <num> NUMBER       # for numbers 
    %token <id> VARIABLE      # for variables
    %token <op> ADD SUB MUL DIV       # for mathematical operators
    %token <key> PRINT FOR TO NEXT     # for keywords
    %token <eol> EOL           # for end of line marker

    # Define auxiliary variables
    %{
        double result;         # variable to store calculation results
    %}
    
    # Rules section
    # Define grammar rules and corresponding actions
    %%
    program:
            | program line
            | line
            ;

    line:
            | NUMBER EOL
            | PRINT expression EOL
            | variable ASSIGN expression EOL { $1 = $3; } /* assignment statement */
            | FOR variable = expression TO expression STEP expression EOL
                {
                    for($2 = $4; $2 <= $6; $2 += $8)
                        printf("%f\n", $2);
                }
            ;

    variable:
            | VARIABLE
            ;

    expression:
            | term
            | expression ADD term 
                { $$ = $1 + $3; result = $$; } /* save result for later use */
            | expression SUB term 
                { $$ = $1 - $3; result = $$; }
            ;

    term:
            | factor
            | term MUL factor 
                { $$ = $1 * $3; result = $$; }
            | term DIV factor 
                { if($3 != 0) {$$ = $1 / $3; result = $$;} /* handle divide by zero error */ }
            ;

    factor:
            | NUMBER 
                { $$ = $1; }
            | ADD factor 
                { $$ = $2; }
            | SUB factor 
                { $$ = -$2; } /* handle negative numbers */
            | LPAREN expression RPAREN 
                { $$ = $2; } /* handle parentheses */
            ;

    %%

    /* Functions section */
    # Define external functions to be used in the rules section
    extern double sqrt(double);
    extern double atan(double);
    extern double pow(double, double);
    extern double log(double);
    
    # End of code snippet