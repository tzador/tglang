%token DIGIT LETTER

%%

input: statement_list;

statement_list:
    statement
    | statement statement_list
    ;

statement:
    declaration_statement
    | assignment_statement
    | expression_statement
    ;

declaration_statement:
    type_specifier var_list ';'      // declares one or more variables of the specified type
    ;

assignment_statement:
    identifier '=' expression ';'   // assigns the value of the expression to the identifier

expression_statement:
    expression ';'                  // evaluates and discards the result of the expression

type_specifier:
    integer_type
    | floating_type
    | string_type
    | char_type
    ;

var_list:
    identifier                      // single variable
    | var_list ',' identifier       // multiple variables separated by comma

expression:
    primary_expr                    // single term or value
    | expression binary_op primary_expr     // multiple terms joined by binary operator
    | '-' expression                        // unary negation
    | '(' expression ')'                   // parentheses for grouping expressions

primary_expr:
    identifier                          // variable name
    | constant                          // integer, floating-point, string, or char constant
    | '(' expression ')'                // parentheses for grouping expressions

binary_op:
    '+' | '-' | '*' | '/' | '%'        // arithmetic binary operators
    | '<' | '>' | '<=' | '>=' | '==' | '!=' // relational binary operators
    | '&&' | '||'                       // logical binary operators

constant:
    integer_constant
    | floating_constant
    | string_constant
    | char_constant
    ;

integer_constant:
    DIGIT+
    | '-' DIGIT+
    ;

floating_constant:
    DIGIT+ '.' DIGIT+                   // decimal point is required
    | '-' DIGIT+ '.' DIGIT+
    | DIGIT+ '.'                        // decimal point is optional
    | '-' DIGIT+ '.'
    ;

string_constant:
    '"' characters '"'
    ;

characters:
    characters character                // concatenates characters
    | character
    ;

character:
    LETTER
    | DIGIT
    | ' '
    | '+' | '-' | '*' | '/' | '%' | '<' | '>' | '=' | '!' | '&' | '|' | '#' | '$' | '@'
    | '\t' | '\n' | '\r'                // escape sequences for tab, newline, carriage return
    ;