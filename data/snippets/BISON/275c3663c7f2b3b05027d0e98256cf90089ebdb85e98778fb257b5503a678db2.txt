%token <char*> VARIABLE         //defines a token for storing variable name

%type <double> expr              //defines a type for the expr non-terminal
%type <double> term              //defines a type for the term non-terminal

%%

program: statement_list;

statement_list: statement
                | statement_list statement;

statement: "print" "(" expr ")" { printf("Value: %f\n", $3); }         //prints the value of the expression
            | VARIABLE "=" expr {variables[$1] = $3;}                 //assigns value of expression to variable

expr: term
    | expr "+" term {$$ = $1 + $3;}        //adds the two expressions
    | expr "-" term {$$ = $1 - $3;}        //subtracts the two expressions

term: NUMBER
    | VARIABLE {$$ = variables[$1];}       //retrieves value from variable
    | term "*" term {$$ = $1 * $3;}        //multiplies the two terms
    | term "/" term {$$ = $1 / $3;}        //divides the two terms

%%

//global variables for storing values
double variables[26];

//method to evaluate the input string
double eval(char *input) {
    struct yy_buffer_state *p = yy_scan_string(input);       //converts input string to Bison buffer state
    yy_switch_to_buffer(p);
    
    yyparse();                                              //invokes the parser
    
    yy_delete_buffer(p);                                    //deletes buffer state
    
    return result;                                          //returns the result from parsing
}