%start expression

%%

expression:
		NUMBER 		{ printf("Number: %d\n", $1); }
	| 	expression '+' expression { printf("Addition: %d + %d\n", $1, $3); }
	| 	expression '-' expression { printf("Subtraction: %d - %d\n", $1, $3); }
	| 	expression '*' expression { printf("Multiplication: %d * %d\n", $1, $3); }
	| 	expression '/' expression { printf("Division: %d / %d\n", $1, $3); }
	| 	'(' expression ')' { printf("Parentheses: (%d)\n", $2); }
	| 	expression '^' expression { printf("Exponentiation: %d ^ %d\n", $1, $3); }
	| 	expression '%' expression { printf("Modulus: %d %% %d\n", $1, $3); }
	| 	expression '<' expression { printf("Comparison: %d < %d\n", $1, $3); }
	| 	expression '>' expression { printf("Comparison: %d > %d\n", $1, $3); }
	| 	expression '=' expression { printf("Comparison: %d == %d\n", $1, $3); }
	| 	expression '!' expression { printf("Comparison: %d != %d\n", $1, $3); }
	| 	expression '&' expression { printf("Boolean AND: %d && %d\n", $1, $3); }
	| 	expression '|' expression { printf("Boolean OR: %d || %d\n", $1, $3); }
	| 	expression '?' expression ':' expression { printf("Conditional Expression: %d ? %d : %d\n", $1, $3, $5); }
	| 	'-' expression %prec NEG { printf("Negation: -%d\n", $2); }
;

NUMBER:
		/[0-9]+/ { $$ = atoi($0); }
;

%%

int main() {
	yyparse();

	return 0;
}