%{
/* This section contains C code to be included in the generated parser */
#include<stdio.h>
int count = 0;
|}
/* Definition section */
%define api.pure
%define parse.lac full

/* Rules section */
%%
start: program;

program: functions
        | variables
        ;

functions: function
         | functions function
         ;

function: type var '(' params ')' '{' statements '}' 
        | type var '(' ')' '{' statements '}';
        
statements: statement
          | statements statement
          ;

statement: type var '=' expr ';'
         | type var ';'
         | var '(' expr_list ')' ';'
         | var ';'
         | control_statement
         | iteration_statement
         | jump_statement
         ;

control_statement: 'if' '(' expr ')' '{' statements '}' 
                  | 'if' '(' expr ')' '{' statements '}' 'else' '{' statements '}' 
                  ;

iteration_statement: 'for' '(' type var '=' expr ';' var '<' expr ';' var '++' ')' '{' statements '}'
                    | 'while' '(' var '>' var ')' '{' statements '}';

jump_statement: 'return' expr ';'
              | 'break' ';'
              | 'continue' ';';

expr_list: expr
         | expr_list ',' expr
         ;

params: param
      | params ',' param
      ;

param: type var;

type: 'int'
    | 'float'
    | 'double'
    | 'char'
    ;

expr: num
    | var
    | expr '+' expr
    | expr '-' expr
    | '-' expr
    | '!' expr
    | '(' expr ')'
    ;

var: letter
   | letter letter
   | letter digits
   | digits letter
   | digits digits
   ;

letter: 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
      | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
      ;

digits: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
      ;
%%
/* This section contains C code used in the parser rules section */
void yyerror(const char *s) {
    printf("Error: %s\n", s);
}

int yywrap(){
    return 1;
}

int main(){
    yyparse();
    printf("Number of functions: %d\n", count);
    return 0;
}