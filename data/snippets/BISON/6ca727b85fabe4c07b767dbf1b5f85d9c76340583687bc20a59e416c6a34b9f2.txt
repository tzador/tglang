/*
 * The following is an example BISON program that implements a simple calculator.
 */

/*
 * Declare the tokens used in the grammar and their regex patterns.
 */
%token NUM "[-]?[0-9]+"
%token PLUS "+"
%token MINUS "-"
%token TIMES "*"
%token DIV "/"
%token LPAREN "("
%token RPAREN ")"

/*
 * Declare the start symbol for the grammar.
 */
%start calc

%%

/*
 * Define the grammar rules for the calculator.
 */
calc: expr {printf("%d\n",$1);} ;

expr: NUM           { $$ = $1; }
    | expr PLUS expr       { $$ = $1 + $3; }
    | expr MINUS expr      { $$ = $1 - $3; }
    | expr TIMES expr      { $$ = $1 * $3; }
    | expr DIV expr        { $$ = $1 / $3; }
    | LPAREN expr RPAREN   { $$ = $2; }
    ;

/*
 * Define the lexer rules for the tokens.
 */
%%

/*
 * Define the main function.
 */
int main() {
    /*
     * Call the BISON function to parse the input.
     */
    yyparse();
    return 0;
}

/*
 * Define the yylex function for the lexer.
 */
int yylex() {
    int c;
    /*
     * Read next character from input.
     */
    c = getchar();
    /*
     * If the character is a digit, return the NUM token.
     */
    if (isdigit(c)) {
        /* 
         * Get the full number by recursively calling yylex
         * until a non-digit character is encountered.
         */
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUM;
    /*
     * If the character is an operator, return the corresponding token.
     */
    } else if (c == '+') return PLUS;
    else if (c == '-') return MINUS;
    else if (c == '*') return TIMES;
    else if (c == '/') return DIV;
    /*
     * If the character is a left parenthesis, return the LPAREN token.
     */
    else if (c == '(') return LPAREN;
    /*
     * If the character is a right parenthesis, return the RPAREN token.
     */
    else if (c == ')') return RPAREN;
    /*
     * If the end of file is reached, return 0.
     */
    else if (c == EOF) return 0;
    /*
     * If the character is none of the above, return -1 for error.
     */
    else return -1;
}

/*
 * Define the yyerror function for error handling.
 */
void yyerror(char *message) {
    printf("Error: %s\n", message);
}