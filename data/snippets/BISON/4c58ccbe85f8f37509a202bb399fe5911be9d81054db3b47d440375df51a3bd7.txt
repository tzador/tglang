%%

// Define start rule
start: program;

// Define grammar rules
program: program body
    | body
    ;

body: '{' statements '}'
    ;

statements: statements statement
    | statement
    ;

statement: declaration
    | assignment
    | print_statement
    | loop
    ;

declaration: type variable_list ';' // Variable declaration
    | function_declaration // Function declaration
    ;

type: 'int' | 'float' | 'bool' | 'char' // Valid types

variable_list: variable_list ',' variable
    | variable
    ;

variable: ID // Variable identifier
    | ID '[' INT_LITERAL ']' // Array identifier with size

function_declaration: type ID '(' parameters ')' '{' statements '}'
    ;

parameters: parameter_list // List of function parameters
    | // Empty parameters list
    ;

parameter_list: parameter_list ',' parameter
    | parameter
    ;

parameter: type variable
    ;

assignment: variable '=' expression ';'
    ;

expression: expression '+' term // Arithmetic operations
    | expression '-' term
    | term
    ;

term: term '*' factor // Multiplicative operations
    | term '/' factor
    | factor
    ;

factor: '(' expression ')' // Parenthesized expression
    | INT_LITERAL // Integer literal
    | FLOAT_LITERAL // Float literal
    | BOOL_LITERAL // Boolean literal
    | CHAR_LITERAL // Character literal
    | function_call // Function call
    | variable // Variable access
    ;

print_statement: 'print' '(' expression ')' ';' // Print statement

loop: 'while' '(' condition ')' '{' statements '}' // Loop statement

condition: expression '<' expression // Comparison operators
    | expression '>' expression
    | expression '<=' expression
    | expression '>=' expression
    | expression '==' expression
    | expression '!=' expression
    | '(' condition ')' // Parenthesized condition
    | BOOL_LITERAL // Boolean literal for simple conditions
    ;

%%

// Define token types
%token <strval> ID
%token <intval> INT_LITERAL
%token <floatval> FLOAT_LITERAL
%token <boolval> BOOL_LITERAL
%token <charval> CHAR_LITERAL

// Define precedence rules for operators
%nonassoc '<' '>' '<=' '>=' '==' '!='
%left '+' '-'
%left '*' '/'

// Define error handling rule
%error-verbose
{
    fprintf(stderr, "Syntax error near line %d: Unexpected token %s\n",
        @$.lineno, yytext);
    YYERROR;
}