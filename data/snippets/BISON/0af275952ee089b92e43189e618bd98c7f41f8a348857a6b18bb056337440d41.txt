%token <sval> INTEGER // declare token for integer values
%token <sval> FLOAT // declare token for float values
%token <sval> IDENTIFIER // declare token for identifiers
%token <sval> KEYWORD // declare token for keywords

/* Definition of expressions */
%left '+' '-'
%left '*' '/'
%left '%' /* modulo operator */
%right '!' /* unary negation operator */

/* Define start symbol */
%start expression

%% /* the actual grammar rules in BNF form */

expression: // rule for arithmetic expressions 
            INTEGER { $$ = $1.sval; }
            | FLOAT { $$ = $1.sval; }
            | IDENTIFIER { $$ = $1.sval; }
            | '(' expression ')' { $$ = $2.sval; }
            | expression '+' expression
            {
                $$ = malloc(sizeof(struct sval)); // allocate memory for sval struct
                $$->type = 'float'; // set type to float (assuming both operands are float)
                $$->sval = $1.sval + $3.sval; // perform addition and store result
            }
            | expression '-' expression
            {
                $$ = malloc(sizeof(struct sval)); // allocate memory for sval struct 
                $$->type = 'float'; // set type to float (assuming both operands are float)
                $$->sval = $1.sval - $3.sval; // perform subtraction and store result
            }
            | expression '*' expression
            {
                $$ = malloc(sizeof(struct sval)); // allocate memory for sval struct 
                $$->type = 'float'; // set type to float (assuming both operands are float)
                $$->sval = $1.sval * $3.sval; // perform multiplication and store result
            }
            | expression '/' expression
            {
                $$ = malloc(sizeof(struct sval)); // allocate memory for sval struct 
                $$->type = 'float'; // set type to float (assuming both operands are float)
                $$->sval = $1.sval / $3.sval; // perform division and store result
            }
            | '-' expression %prec '!'
            {
                $$ = malloc(sizeof(struct sval)); // allocate memory for sval struct 
                $$->type = 'float'; // set type to float (assuming operand is float)
                $$->sval = -$2.sval; // perform unary negation and store result
            }

%% /* additional function definitions and code here */

int main()
{
    /* initialize lexer and parser */
    yylex_init();
    yyparse();
    yylex_destroy();

    return 0;
}