%{
  //This is the prologue section where we declare any necessary definitions or includes
  #include <stdio.h>
  #include <string.h>
%}
//This is the declaration section where we define the tokens and any other variables
%token <string> IDENTIFIER
%token <int> NUMBER
%token <string> KEYWORD
%token <string> STRING
%token SEMICOLON

//This is the precedence section where we define the operator precedence
%left '+' '-'
%left '*' '/'

//This is the grammar section where we define the language rules
%%
program: statement_list
        | /* empty */
        ;

statement_list: statement
              | statement_list '\n' statement
              ;

statement: assignment_statement
         | print_statement
         | if_statement
         | while_statement
         ;

assignment_statement: IDENTIFIER '=' expression SEMICOLON
                     | IDENTIFIER '=' STRING SEMICOLON
                     ;

print_statement: KEYWORD '(' expression ')' SEMICOLON
                | KEYWORD KEYWORD '(' STRING ')' SEMICOLON
                ;

if_statement: KEYWORD '(' boolean_expression ')' '{' statement_list '}' KEYWORD '(' statement_list ')' SEMICOLON
            ;

while_statement: KEYWORD '(' boolean_expression ')' '{' statement_list '}' SEMICOLON
                ;

boolean_expression: expression '<=' expression
                   | expression '>=' expression
                   | expression '==' expression
                   ;

expression: expression '+' expression
          | expression '-' expression
          | expression '*' expression
          | expression '/' expression
          ;

//This is the epilogue section where we define any necessary actions or error handling
%%
#include <stdlib.h>

//Function to evaluate expressions
int evaluate_expression(int a, int b, char operator) {
    switch(operator) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            return a / b;
    }
}

//Function to print the result of BOOLEAN expression
void print_boolean_result(int result) {
    if (result == 1) {
        printf("BOOLEAN: TRUE\n");
    } else {
        printf("BOOLEAN: FALSE\n");
    }
}

//Function to handle syntax errors
void yyerror(char *s) {
    fprintf(stderr, "SYNTAX ERROR: %s\n", s);
    exit(1);
}

//Main function to execute the program
int main() {
    yyparse();
    return 0;
}