/* 
   This is a grammar for a simple calculator that 
   can perform addition, subtraction, multiplication, 
   and division.
*/

%{
/* Defines the data types for the calculator */
%}
%union{
    double number;
    char operator;
}

%token <number> NUM /* token for numbers */
%token <operator> OP_ADD /* token for addition */
%token <operator> OP_SUB /* token for subtraction */
%token <operator> OP_MUL /* token for multiplication */
%token <operator> OP_DIV /* token for division */

%%
/* Rules for the calculator grammar */
expression: /* checks if the input is valid */
    | expression OP_ADD expression /* adds two expressions */
    | expression OP_SUB expression /* subtracts first expression from second */
    | expression OP_MUL expression /* multiplies two expressions */
    | expression OP_DIV expression /* divides first expression by second */
    | NUM /* returns a number */

%%

/* Helper functions for the grammar rules */
int yylex(void); /* function that provides tokens to the parser */
void yyerror(const char* s); /* error handling function for parser */

/* Function to evaluate the expression */
void evaluate(double num1, char op, double num2) {
    double result;
    switch(op) { /* switch case to perform appropriate operation */
        case '+':
            result = num1 + num2; /* add the two numbers */
            break;
        case '-':
            result = num2 - num1; /* subtract first number from second */
            break;
        case '*':
            result = num1 * num2; /* multiply the two numbers */
            break;
        case '/':
            result = num1 / num2; /* divide the first number by second */
            break;
    }
    printf("Result: %lf\n", result); /* print the result of the operation */
}

/* Main function to initialize the parser and get input from user */
int main() {
    yyparse(); /* call the parser function */
    return 0;
}

/* Function to get tokens from input and perform parsing */
int yylex(void) {
    char ch;
    int integer; /* variable to store integer value */
    /* get the next character from input */
    ch = getchar();

    if(ch == '=') /* if input is equals sign, return token for assignment */
        return OP_EQUALS;
    else if(ch == '+') /* if input is plus sign, return token for addition */
        return OP_ADD;
    else if(ch == '-') /* if input is minus sign, return token for subtraction */
        return OP_SUB;
    else if(ch == '*') /* if input is asterisk, return token for multiplication */
        return OP_MUL;
    else if(ch == '/') /* if input is slash, return token for division */
        return OP_DIV;
    /* if input is a digit, convert it to integer and return token for number */
    if(isdigit(ch) == 1) {
        ungetc(ch, stdin); /* place digit back into input stream */
        scanf("%d", &integer); /* read integer from input */
        yylval.number = (double) integer; /* store integer as a double */
        return NUM; /* return token for number */
    }
    return 0; /* return 0 if no tokens are found */
}

/* Function for error handling in parser */
void yyerror(const char* s) {
    printf("Error: %s\n", s); /* print the error message */
}