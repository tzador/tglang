/* Define the grammar rules for a simple math expression */
%{
#include <stdio.h> /* Include standard input/output library */
int result; /* Variable to store result of expression */
%}

/* Rules for non-terminal symbols */

expression: 
    exp '+' term { result = $exp + $term; } /* Addition rule */
    | exp '-' term { result = $exp - $term; } /* Subtraction rule */
    | term { result = $term; } /* Single term rule */

exp: 
    '(' expression ')' { result = $expression; } /* Expression enclosed in parentheses */
    | NUMBER { result = $NUMBER; } /* Rule for a single number */

term: 
    exp '*' exp { result = $exp * $exp; } /* Multiplication rule */
    | exp '/' exp { 
        if($exp2 == 0) /* Check for division by zero */
            yyerror("Division by zero not allowed."); /* Report error */
        else 
            result = $exp1 / $exp2; /* Perform division */
    }
    | exp '^' exp { result = (int)pow($exp1, $exp2); } /* Exponentiation rule */
    | '-' exp { result = -$exp; } /* Negation rule */

/* End of grammar rules */
%% /* Start of executable code section */

/* Function to handle syntax error */
void yyerror(char* s)
{
    printf("Syntax error: %s\n", s); /* Print out error message */
}

/* Main function */
main()
{
    yyparse(); /* Parse the input string */
    printf("Result: %d\n", result); /* Print out the calculated result */
}

/* Function to get input string for parsing */
int yywrap()
{
    return 1; /* Return true to indicate end of input string */
}

/* End of program */