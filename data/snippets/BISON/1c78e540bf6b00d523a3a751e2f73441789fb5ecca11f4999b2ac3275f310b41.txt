/* A grammar for parsing arithmetic expressions */

%start expression
%left '+' '-'
%left '*' '/'

%%  /* Rules for grammar */
expression: /* An expression can be a number or an operation */
    number
    |
    '(' expression '+' expression ')'  /* Addition */
    |
    '(' expression '-' expression ')'  /* Subtraction */
    |
    '(' expression '*' expression ')'  /* Multiplication */
    |
    '(' expression '/' expression ')'  /* Division */
    ;

number: /* A number can be an integer or a floating point number */
    INTEGER
    |
    FLOAT
    ;

%%  /* Tokens for scanner */
INTEGER: /* Regular expression for integer numbers */
    digit+
    ;

FLOAT: /* Regular expression for floating point numbers */
    digit+ '.' digit+
    ;

%%  /* Auxiliary definitions and declarations */
digit: /* Regular expression for decimal digits */
    /[0-9]/
    ;

%{
    /* C code for converting string to integer */
    int to_int(char *str){
        int result = 0;
        while(*str){
            result *= 10;
            result += *str++ - '0';
        }
        return result;
    }
%}