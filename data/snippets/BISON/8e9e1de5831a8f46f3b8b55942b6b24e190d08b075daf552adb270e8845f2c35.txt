/* This is a complex grammar rule that checks for a specific pattern */

pattern: while (expression)  
{
  /* Within this block, the parser checks for the 'expression' and continues the loop if it evaluates to true */
  
  statement1;
  statement2;
  // and so on
}

/* This rule checks for another specific pattern */

specific_pattern: symbol ':' NUM variable {  
  /* Within this block, the parser checks for a specific symbol followed by a colon, a number, and a variable */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |  /* If the previous rule does not match, then the parser checks for the following pattern */

other_specific_pattern: symbol ':' NUM {  
  /* Within this block, the parser checks for a specific symbol followed by a colon and a number */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a specific expression pattern */

expression: '(' expression ')' {  
  /* Within this block, the parser checks for an expression enclosed in parentheses */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

factor {  
  /* If the previous rule does not match, the parser checks for the following pattern */

  statement1;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a number or variable */

factor: NUM {  
  /* Within this block, the parser checks for a number */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

variable {  
  /* If the previous rule does not match, the parser checks for the following pattern */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a variable */

variable: SYMBOL {  
  /* Within this block, the parser checks for a symbol */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

'-' factor {  
  /* If the previous rule does not match, the parser checks for the following pattern */

  statement1;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a negative number */

negative_factor: '-' NUM {  
  /* Within this block, the parser checks for a negative number */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

'-' variable {  
  /* If the previous rule does not match, the parser checks for the following pattern */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a negative variable */

negative_variable: '-' symbol {  
  /* Within this block, the parser checks for a negative symbol */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a function call */

factor: FUNCTION '(' expression ')' {  
  /* Within this block, the parser checks for a function call with an expression as its argument */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

/* If the previous rule does not match, the parser checks for the following pattern */

FUNCTION '(' ')' {  
  /* Within this block, the parser checks for a function call with no arguments */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is an array index */

factor: SYMBOL '[' expression ']' {  
  /* Within this case, the parser checks for a symbol followed by an array index */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

array_index: SYMBOL '[' ']' {  
  /* If the previous rule does not match, the parser checks for the following pattern */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}

/* This rule checks for a factor that is a character literal */

factor: '\'' CHAR '\'' {  
  /* Within this case, the parser checks for a single character surrounded by single quotes */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
} |

/* If the previous rule does not match, the parser checks for the following pattern */

array_index: '\'' '\'' {  
  /* Within this block, the parser checks for an empty character literal */

  statement1;
  statement2;
  /* Continue to check for more statements that follow this specific pattern */
}