// Code snippet for a BITE (Bison Interactive Test Environment)
%%%%

// Initial rules for BITE program
%start program

// Define tokens
%token NUM // for numerical values
%token ID // for identifiers (variable names)
%token PLUS MINUS TIMES DIVIDE

// Define rules for expressions
%%

program: // program rule starts with keyword "program"
    statement // must include a statement
    | statement NEWLINE program // additional statements separated by newline

statement:
    ID "=" expression
    | expression // if only an expression, must have "print" statement later

expression:
    NUM // number is a valid expression
    | ID // identifier is also a valid expression
    | "print" expression // keyword "print" followed by expression will print the result
    | expression PLUS expression
    | expression MINUS expression
    | expression TIMES expression
    | expression DIVIDE expression

%%

// Error handling rules
// Error if an identifier is not followed by an equals sign
program_error:
    statement_without_equals_error

// Error if keyword "print" is followed by non-expression
statement_without_expression_error:
    "print" statement_without_expression_error %prec UMINUS
    | statement_without_expression_error PLUS statement_without_expression_error
    | statement_without_expression_error MINUS statement_without_expression_error
    | statement_without_expression_error TIMES statement_without_expression_error
    | statement_without_expression_error DIVIDE statement_without_expression_error

// Error if expression is not followed by an operator
expression_without_operator_error:
    expression_without_operator_error expression_without_operator_error
    | expression_without_operator_error expression_without_operator_error
    | expression_without_operator_error expression_without_operator_error
    | expression_without_operator_error expression_without_operator_error

// Comment rule
%{ // comments are enclosed in %{ %} tags 
    /*
    This is an example of a BITE program:

    program
        x = 5
        y = 8
        print x + y

    Output:
    13
    */
%}

// Function for calculating expressions
%token INTEGER_ID // identifier for storing integer values
%left '=' // set precedence for assignment operator

%type <int> expression
%%

expression:
    NUM
    | INTEGER_ID // new token for storing integers
    | expression PLUS NUM {%1 += $3;} // perform addition and assign result to first expression
    | expression MINUS NUM {%1 -= $3;} // perform subtraction and assign result to first expression
    | expression TIMES NUM {%1 *= $3;} // perform multiplication and assign result to first expression
    | expression DIVIDE NUM {%1 /= $3;} // perform division and assign result to first expression

%%