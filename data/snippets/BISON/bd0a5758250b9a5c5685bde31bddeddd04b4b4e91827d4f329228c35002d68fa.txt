/* Bison program for parsing arithmetic expressions */
 
/* Declare tokens */
%token <num> NUMBER
%token <op> PLUS MINUS MULT DIV
%token END
 
%% /* Grammar rules */
 
calc  : expr END { printf("=%d\n", $1); }
      ;
 
expr  : term   { $$ = $1; }
      | expr PLUS term  { $$ = $1 + $3; }
      | expr MINUS term { $$ = $1 - $3; }
      ;
 
term  : factor   { $$ = $1; }
      | term MULT factor { $$ = $1 * $3; }
      | term DIV factor  { $$ = $1 / $3; }
      ;
 
factor : NUMBER  { $$ = $1;}
       | MINUS factor {$$ = -$2; }
       ;
 
%% /* Arithmetic expression calculator loop */
 
#include <stdio.h>
 
int main()
{
  yyparse();
  return 0;
}
 
int yylex()
{
  int c;
  /* Skip whitespaces */
  while ((c = getchar()) == ' ')
    ;
  if (isdigit(c)) {
    ungetc(c, stdin);
    scanf("%d", &yylval.num);
    return NUMBER;
  }
  return c; /* Single char */
}
 
/* Called by yyparse on error */
void yyerror(const char *msg)
{
  printf("Error: %s\n", msg);
}