/* Define the grammar rules */
%%
line: expression '\n'; /* This rule defines a line of code that must end with a new line character */
expression: assignment | for_loop; /* This rule specifies that an expression can either be an assignment or a for loop */
assignment: NAME '=' INT ';' | NAME '=' STRING; /* This rule defines an assignment statement where the variable name can be followed by either an integer or string value */
for_loop: FOR NAME '=' INT ';' cond ';' inc '{' code '}'; /* This rule defines a for loop statement which has a variable initialization, a condition, an increment, and a code block within curly braces */
cond: NAME '<' INT; /* This rule defines the condition for the for loop to execute */
inc: NAME '=' NAME '+' INT; /* This rule defines the increment for the for loop variable */
code: expression | expression code; /* This rule defines a code block as one or more expressions */
%%

/* Define the token types and print error messages for syntax errors */
%token NAME INT STRING FOR
%option yylineno /* This option prints the line number where an error occurred */
%%
int main(){
    /* Read the input and run the parser */
    yyin = fopen(argv[1], "r");
    yyparse();

    fclose(yyin);

    return 0;
}

/* Define the lexer rules */
%%
[ \t] ; /* Ignore whitespace characters */
\n return '\n'; /* Return a new line character */
[a-zA-Z][a-zA-Z0-9]* return NAME; /* Return a token for variable names */
[0-9]+ return INT; /* Return a token for integer values */
\"(\\.|[^\\"])*\" return STRING; /* Return a token for string values */
. return yytext[0]; /* Return any unrecognized characters */