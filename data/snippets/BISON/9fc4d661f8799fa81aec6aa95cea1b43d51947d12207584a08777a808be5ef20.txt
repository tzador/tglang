%token ID INTEGER

// Defining a non-terminal symbol that represents a mathematical expression
%start expression

%%

// Expression rules
expression:  term '+' term { printf("Result: %d\n", $1 + $3); }
            | term '-' term { printf("Result: %d\n", $1 - $3); }
            | term '*' term { printf("Result: %d\n", $1 * $3); }
            | term '/' term { printf("Result: %d\n", $1 / $3); }
            | '-' term       { printf("Result: %d\n", -$2); }
            | term           { printf("Result: %d\n", $1); }

// Term rules
term: factor
    | term '^' factor { printf("Result: %d\n", (int)pow($1, $3)); }
    ;

// Factor rules
factor: primary
    | factor '!' { int result = 1;
                   for (int i = 1; i <= $1; i++)
                       result *= i;
                   printf("Result: %d\n", result); }
    ;

// Primary rules
primary: '(' expression ')'
       | ID              { printf("Result: %d\n", atoi($1)); }
       | INTEGER         { printf("Result: %d\n", $1); }
       ;

%%

// Main function to run the parser on a string input
int main()
{
    printf("Enter a mathematical expression: ");
    yyparse();

    return 0;
}