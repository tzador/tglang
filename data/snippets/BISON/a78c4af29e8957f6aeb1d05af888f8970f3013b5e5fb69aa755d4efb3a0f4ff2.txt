%union { 
    int num_value; // declare union variable for numbers
    char* str_value; // declare union variable for strings
    node* tree_value; // declare union variable for tree nodes
}

%token NUM { // declare token for numbers
    int value; // store the value of the number
}

%token STR { // declare token for strings
    char* value; // store the value of the string
}

%type <tree_value> expr { // assign type for expression
    node* new_tree = malloc(sizeof(node)); // allocate memory for new tree node
    new_tree->type = "expression"; // set node type to "expression"
    new_tree->left = $1; // set left child of node to first expression
    new_tree->right = $3; // set right child of node to second expression
    $$ = new_tree; // assign new tree node to current expression
}

%%

expr : NUM { // if expression is just a number
    $$ = $1; // assign number to expression
}
| STR { // if expression is just a string
    $$ = $1; // assign string to expression
}
| expr "+" expr { // if expression is addition operation
    node* new_tree = malloc(sizeof(node)); // allocate memory for new tree node
    new_tree->type = "addition"; // set node type to "addition"
    new_tree->left = $1; // set left child of node to first expression
    new_tree->right = $3; // set right child of node to second expression
    $$ = new_tree; // assign new tree node to current expression
}
| expr "-" expr { // if expression is subtraction operation
    node* new_tree = malloc(sizeof(node)); // allocate memory for new tree node
    new_tree->type = "subtraction"; // set node type to "subtraction"
    new_tree->left = $1; // set left child of node to first expression
    new_tree->right = $3; // set right child of node to second expression
    $$ = new_tree; // assign new tree node to current expression
}
;

%%

int main() {
    node* final_expr = parse(); // create final expression tree by calling parse function
    printf("Expression type: %s\n", final_expr->type); // print type of final expression
    printf("Left child type: %s\n", final_expr->left->type); // print type of first expression
    printf("Right child type: %s\n", final_expr->right->type); // print type of second expression
    return 0;
}

node* parse() {
    node* result; // declare result node
    if (lookahead.type == NUM) { // if lookahead token is a number
        result = malloc(sizeof(node)); // allocate memory for result node
        result->type = "number"; // set node type to "number"
        result->num_value = lookahead.value; // store number value in union variable
        match(NUM); // match current token with "NUM" token
    }
    else if (lookahead.type == STR) { // if lookahead token is a string
        result = malloc(sizeof(node)); // allocate memory for result node
        result->type = "string"; // set node type to "string"
        result->str_value = lookahead.value; // store string value in union variable
        match(STR); // match current token with "STR" token
    }
    else { // if lookahead token is not a number or string
        match("("); // match current token with "(" token
        result = expr(); // call expr function to parse the expression inside parentheses
        match(")"); // match current token with ")" token
    }
    return result; // return result node
}

void match(char* token) {
    if (lookahead.type == token) { // if lookahead token is the expected token
        lookahead = next_token(); // get the next token
    }
    else { // if lookahead token is not the expected token
        printf("Syntax Error"); // print error message
        exit(1); // exit program with error code
    }
}

node* next_token() {
    // code to read the next token from the input code
    // and store it in a token structure
    // return the token structure
}

struct node { // structure for tree nodes
    char* type; // type of node (number, string, expression, etc.)
    union { // union to store different types of values
        int num_value; // value for numbers
        char* str_value; // value for strings
        node* tree_value; // value for tree nodes
    };
    node* left; // pointer to left child node
    node* right; // pointer to right child node
    // other data members or functions can be added as needed
};