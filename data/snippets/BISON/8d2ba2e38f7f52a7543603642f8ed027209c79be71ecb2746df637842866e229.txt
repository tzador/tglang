/**
 * This is a lexer for a simple calculator.
 * It recognizes a series of addition or subtraction operations 
 * with integers and floats.
 */

%{
    #include<stdio.h>
    #include<stdlib.h>

    int result = 0; // Global variable for calculating the result
    int total_lines = 0; // Global variable to count total lines

    // Function to handle addition operation
    void add(int num) {
        result += num;
    }

    // Function to handle subtraction operation
    void subtract(int num) {
        result -= num;
    }

    // Function to handle printing the final result
    void print_result() {
        printf("Result after %d operations: %d\n", total_lines, result);
    }
%}

%token <int> INTEGER // Token for integer
%token <float> FLOAT // Token for float

%%

/*
 * Grammar for the calculator:
 * - Expressions can be a series of addition or subtraction operations.
 * - Each operation can be either an integer or float.
 * - Each expression should end with a semicolon.
 */

calc: // Rule for calculator 
    | calc exp ';' { 
        print_result(); 
        result = 0; // Reset result
        total_lines++; // Increment total_lines every time an expression is parsed
      }

exp: // Rule for expression
    | INTEGER  { add($1); } // If it is an integer, add to result
    | FLOAT  { add($1); } // If it is a float, add to result
    | exp '+' FLOAT { add($2); } // If it is an addition operation with a float
    | exp '-' FLOAT { subtract($2); } // If it is a subtraction operation with a float
    | exp '+' INTEGER { add($2); } // If it is an addition operation with an integer
    | exp '-' INTEGER { subtract($2); } // If it is a subtraction operation with an integer

%%

int main() {
    printf("Enter expressions:\n");

    yylex(); // Invoke the lexer

    return 0;
}