%{
    /* This section declares global variables and imports necessary header files. */

    int num1, num2, sum;
    #include <stdio.h>
%}

/* This section declares the tokens used in the grammar. */
%token <num> NUMBER
%token <op> PLUS MINUS TIMES DIVIDE

%left PLUS MINUS /* Specifies left associativity for PLUS and MINUS operators. */
%left TIMES DIVIDE /* Specifies left associativity for TIMES and DIVIDE operators. */

%% /* This section declares the grammar rules. */

S:          /* Specifies the start symbol for the grammar. */
            | E '\n' { printf("%d\n", $1); } /* Prints the value of the expression. */

E:          /* Grammar rule for an expression. */
            | E PLUS E { $$ = $1 + $3; } /* Assigns the sum of two expressions to current expression. */
            | E MINUS E { $$ = $1 - $3; } /* Assigns the difference of two expressions to current expression. */
            | E TIMES E { $$ = $1 * $3; } /* Assigns the product of two expressions to current expression. */
            | E DIVIDE E { $$ = $1 / $3; } /* Assigns the quotient of two expressions to current expression. */
            | NUMBER { $$ = $1; } /* Assigns the value of NUMBER token to current expression. */

%% /* This section contains the C code to be included in the parser. */

int main() {
    /* This section reads the input from the user and passes it to the parser. */

    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    sum = yyparse();

    return 0;
}

int yyerror(char *s) {
    /* This function handles any syntax errors encountered during parsing. */

    printf("Syntax error: %s\n", s);
    return 0;
}
%% /* This section includes the necessary functions for the parser. */

/* This function gets the next token from the input. */
int yylex(void);
/* This function initializes and runs the parser. */
int yyparse(void);