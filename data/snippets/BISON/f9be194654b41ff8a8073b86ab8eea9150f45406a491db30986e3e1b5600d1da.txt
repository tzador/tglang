%start program

%%

program: '<' declaration_list '>' action_list
    {
        /* code for program */
    }
    | '<' action_list '>'
    {
        /* code for program with no declarations */
    }
    ;

declaration_list: declaration
    | declaration_list declaration
    ;

declaration: ':' data_type identifier ';' 
    {
        /* code for declaring variable of specified data type */
    }
    ;

data_type: 'int'
    | 'float'
    | 'char'
    | 'bool'
    ;

identifier: LETTER
    | identifier LETTER
    | identifier DIGIT
    ;

action_list: action
    | action_list action
    ;

action: identifier '=' expression ';'
    {
        /* code for assigning a value to a variable */
    }
    | 'if' '(' condition ')' '{' action_list '}'
    {
        /* code for if statement */
    }
    | 'while' '(' condition ')' '{' action_list '}'
    {
        /* code for while loop */
    }
    ;

expression: operand
    | operand '+' operand
    | operand '-' operand
    | operand '*' operand
    | operand '/' operand
    ;

operand: identifier
    | constant
    ;

condition: operand comparison_operator operand
    ;

comparison_operator: '=='
    | '!='
    | '<'
    | '>'
    | '<='
    | '>='
    ;

constant: DIGIT
    | STRING_LITERAL
    ;

%%

/* code for defining the rules in the lexer */

int main()
{
    /* code for initializing variables and executing the program */
    yyparse();
    return 0;
}

int yyerror(char *s)
{
    /* code for handling syntax errors */
}

int yylex()
{
    /* code for scanning and tokenizing input */
}

/* code for setting up the parser */

%{
    /* code for including header files and declaring global variables */
%}

%option noyywrap

%{
    /* code for defining tokens and their corresponding values */
    /* example: #define IDENTIFIER 257 */
%}

/* code for setting up the lexer */

%%
/* code for defining the actions to be taken for each rule in the grammar */

%%
/* code for any additional user-defined functions */