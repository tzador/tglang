%token NUMBER                          // declares token 'NUMBER'
%token ADD_OP SUB_OP DIV_OP MUL_OP      // declares token types for arithmetic operators 
%token FOR WHILE IF ELSE               // declares token types for control flow statements
%token IDENTIFIER                      // declares token type for identifiers

%{
#include <stdio.h>                     // includes standard input/output library
int result = 0;                        // initializes result variable
%}

%%
program: statement_list;                                // grammar rule for program, consisting of statement_list
statement_list: statement                              // grammar rule for statement_list, consisting of a single statement
                | statement_list statement;            // statement_list consisting of multiple statements
statement: assignment_statement                        // statement rule for assignment statements
            | conditional_statement;                   // statement rule for conditional statements 
assignment_statement: IDENTIFIER '=' expr ';' {         // grammar rule for identifier assignment
                            printf("%d\n", result);   // prints the result to the console
                        }     
expr: NUMBER                                           // grammar rule for expression consisting of a number
    | ADD_OP expr { result += $2; }                    // rule for addition operation, updates result variable
    | SUB_OP expr { result -= $2; }                    // rule for subtraction operation, updates result variable
    | MUL_OP expr { result *= $2; }                    // rule for multiplication operation, updates result variable
    | DIV_OP expr { result /= $2; }                    // rule for division operation, updates result variable
    ;

conditional_statement: IF '(' conditions ')' '{' statements '}' {     // rule for if statement
                        if(result)                              // checks if the result variable is non-zero
                            statement                             // if true, executes statement inside curly braces
                        };
                        | WHILE conditions '{' statements '}' {   // rule for while loop
                            while(result)                     // loops while the result variable is non-zero
                                statement;                   // executes statement within curly braces
                        };
                        | FOR '(' expr ';' conditions ';' update_expr ')'      // rule for for loop 
                        '{' statements '}' {                           
                            for(result = 0; result < $3; result++) {            // initializes result variable, executes until condition is met, increments result by 1
                                statement 
                            }
                        };
conditions: conditions '==' expr     // grammar rule for condition check, checks if two expressions are equal
            | conditions '>' expr    // grammar rule for condition check, checks if value of left expression is greater than value of right expression
            | conditions '<' expr    // grammar rule for condition check, checks if value of left expression is less than value of right expression
            | conditions '>=' expr   // grammar rule for condition check, checks if value of left expression is greater than or equal to value of right expression
            | conditions '<=' expr   // grammar rule for condition check, checks if value of left expression is less than or equal to value of right expression
            | conditions '!=' expr   // grammar rule for condition check, checks if two expressions are not equal
            | '(' conditions ')'     // grammar rule for grouping conditions within parentheses
            | expr                    // grammar rule for single expression
            ;
update_expr: IDENTIFIER '=' expr ';' {    // grammar rule for updating an identifier's value within a for loop
                printf("%d\n", result);     // prints the result to the console after each iteration
            }
statements: statements statement    // rule for multiple statements within curly braces
            | statement              // rule for single statement within curly braces
            ;

%%
void main() {                                    // main function to execute the program
    yyparse();                                   // function that starts parsing the input following the defined grammar rules
    printf("%d\n", result);                      // prints the final result to the console
}