%{
    // This is a comment in BISON
    // This code snippet will generate a simple calculator
    #include <stdio.h>
    
    // Defining operator tokens
    #define PLUS 1
    #define MINUS 2
    #define MULTIPLY 3
    #define DIVIDE 4
    
    // Defining a variable for storing the result
    double result;
    
    // Function for handling expressions
    void expression() {
        // Checking for the first operand
        if ($1 == PLUS) {
            // Adding the second operand to the result
            result += $2;
        }
        else if ($1 == MINUS) {
            // Subtracting the second operand from the result
            result -= $2;
        }
        else if ($1 == MULTIPLY) {
            // Multiplying the result by the second operand
            result *= $2;
        }
        else if ($1 == DIVIDE) {
            // Dividing the result by the second operand
            result /= $2;
        }
    }
    
    // Defining a rule for handling a single expression
    expr:   NUMBER { result = $1; }
        |   expr PLUS expr { expression(); }
        |   expr MINUS expr { expression(); }
        |   expr MULTIPLY expr { expression(); }
        |   expr DIVIDE expr { expression(); }
        
    // Rule to start the calculator
    start:  expr { printf("The result is %f\n", result); }
    
    // Defining the token structure to handle numbers and operators
    %token NUMBER
    %token PLUS
    %token MINUS
    %token MULTIPLY
    %token DIVIDE
    
    // Ignoring new lines and spaces in the input
    %ignore " "
    %ignore "\n"
    
    // Default action for handling unrecognized input
    %expect-rrror
    
%}
    
/* Parser definitions section */
    
%%

/* Parser rule definitions */
    
%%

// C code for handling numbers
yyinput_number() {
    
    //Getting the input from the user
    scanf("%lf", &yylval);
    
    //Returning the token for NUMBER
    return NUMBER;
}
    
// C code for handling operators
yyinput_operator() {
    
    // Getting the input from the user
    char c = getchar();
    
    // Returning the token for the respective operator
    switch (c) {
        case '+': return PLUS;
        case '-': return MINUS;
        case '*': return MULTIPLY;
        case '/': return DIVIDE;
        default: {
            // Returning an error token for unrecognized input
            yyerror("Invalid operator");
            return UNKNOWN;
        }
    }
}
    
// Main function
int main() {
    
    // Starting the input process
    yyparse();
    
    // Printing the result
    printf("Result: %f\n", result);
    
    // Exiting the program
    return 0;
}
    
// Function for handling errors
yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}