%{
    /* This section is used for declaring global variables and defining functions*/
    #include <stdio.h>
    int count = 0;
    void print_hello(){
        printf("Hello, world!\n");
    }
%}

/* This section is for defining the tokens of the language */
/* Tokens can be regular expressions, literal strings, or characters */

%token <val> NUMBER /* Declares a token 'NUMBER' with a variable 'val' to store its value */
%token WORD "hello" /* Declares a token 'WORD' with the literal string value "hello" */
%token END_OF_LINE (\\r|\\n)+ /* Declares a token 'END_OF_LINE' with a regular expression to match any end-of-line characters */

/* This section is used for defining the grammar rules for the language */
/* Non-terminal symbols are enclosed in angle brackets and can have one or more productions */
/* Terminals are used by enclosing them in single or double quotes */

%%

/* This rule matches a line of text consisting of a NUMBER, WORD and END_OF_LINE tokens */
lines: NUMBER WORD END_OF_LINE { 
    count++; /* increments the global variable 'count' */
    print_hello(); /* calls the function 'print_hello' */
}

/* This rule matches an empty line with just the END_OF_LINE token */
lines: END_OF_LINE {}

%%

/* This section contains optional user-defined code that can be included in the generated parser */
/* In this case, the user-defined code will be inserted before the main function of the generated parser */

#include <stdlib.h>

/* The main function of the generated parser */
int main(){
    /* Initializes the parser and sets the input to the standard input stream */
    yyparse();
    /* Prints the final count of lines processed */
    printf("Total lines processed: %d\n", count);
    return 0;
}

/* This section is used for defining the functions for handling and printing errors during parsing */
void yyerror(const char* msg){
    fprintf(stderr, "%s\n", msg); /* Prints the error message to the standard error stream */
    exit(1); /* Exits the program with an error code */
}

/* This function is called by the generated parser to get the next token from the input stream */
int yylex(void){
    int ch = getchar(); /* Gets the next character from the input stream */
    switch(ch){
        case '\n': /* If the character is a newline, returns the token END_OF_LINE */
        case '\r':
            return END_OF_LINE;
        case EOF: /* If the character is end-of-file, returns 0 to signify the end of input */
            return 0;
        default:
            return ch; /* Otherwise, returns the character itself as a token */
    }
}