%token NUM /* numeric value */ 
%token OP /* operator */
%left '+' '-' /* left associative operators */
%left '*' '/' /* have higher precedence */

%%

addition: OP '+' OP { /* function for addition operation */ }
subtraction: OP '-' OP { /* function for subtraction operation */ }
multiplication: OP '*' OP { /* function for multiplication operation */ }
division: OP '/' OP { /* function for division operation */ }

expression: /* define expression grammar */
| expression OP expression /* recursive rule for operations */
| '(' expression ')' /* handle parentheses */

%% /* end of grammar */

/* handle tokens in lexer */
int main() {
  yylex(); /* read token from input stream */
  yyerror("Error: invalid expression"); /* if token cannot be matched to grammar, print error message */
  return 0;
}