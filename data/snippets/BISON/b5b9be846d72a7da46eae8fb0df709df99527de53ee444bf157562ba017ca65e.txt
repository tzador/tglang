%token <value> INTEGER
%token <value> FLOAT
%token <value> IDENTIFIER
%token ADD_OP MULT_OP

%%

// Production rule for starting expression
expression: factor
          | expression ADD_OP factor
          ;

// Production rule for factor
factor: primary
      | factor MULT_OP primary
      ;

// Production rule for primary
primary: INTEGER
       | FLOAT
       | IDENTIFIER
       | '(' expression ')'
       ;
       
%%

/* The following is a Bison grammar to parse basic arithmetic expressions, 
   including addition and multiplication. It also supports parentheses and 
   evaluates numbers as either integer or float values. */

/* Define the tokens and their corresponding value type */
%token <value> INTEGER
%token <value> FLOAT
%token <value> IDENTIFIER
%token ADD_OP MULT_OP

/* Specify the grammar rules using the production notation */
%%

// Production rule for starting expression
expression: factor
          | expression ADD_OP factor
          ;

// Production rule for factor
factor: primary
      | factor MULT_OP primary
      ;

// Production rule for primary
primary: INTEGER
       | FLOAT
       | IDENTIFIER
       | '(' expression ')'
       ;

%%

/* The following is a Bison code snippet to generate a parser for the 
   specified grammar. It uses the predefined tokens and production rules 
   to handle the parsing and evaluation of expressions. */