%token <num> NUM                      /* Define token for numerical values */
%token <id> ID                        /* Define token for identifiers */
%token PLUS MINUS TIMES DIVIDE        /* Define tokens for arithmetic operators */

%%                                   /* Start of grammar rules section */

add_expr: add_expr PLUS mul_expr      /* Define rule for addition expression */
        | add_expr MINUS mul_expr     /* Define rule for subtraction expression */
        | mul_expr                    /* Define rule for multiplication/division expression */
        ;

mul_expr: mul_expr TIMES term         /* Define rule for multiplication expression */
        | mul_expr DIVIDE term        /* Define rule for division expression */
        | term                        /* Define rule for term */
        ;

term: NUM                             /* Define rule for number data type */
    | ID                              /* Define rule for identifier data type */
    | LPAREN add_expr RPAREN          /* Define rule for parenthesized addition expression */
    ;

%%                                   /* End of grammar rules section */

int yylex()                           /* Define lexer function */
{
    /* Code for obtaining tokens from input stream */
}

int main()                            /* Define main function */
{
    yyparse();                         /* Call parser function */
    return 0;                          /* Return 0 upon successful completion */
}