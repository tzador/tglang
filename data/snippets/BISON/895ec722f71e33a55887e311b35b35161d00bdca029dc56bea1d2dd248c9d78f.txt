/* A simple BISON grammar for arithmetic expressions */
/* The grammar supports addition, subtraction, multiplication, and division */

/* Define the tokens */
%token <num> INTEGER
%token PLUS MINUS TIMES DIVIDE

/* Define the precedence and associativity rules */
%left PLUS MINUS
%left TIMES DIVIDE

/* Define the start and end symbols */
%start expr
%token <num> $accept

/* Define the grammar rules */
expr: INTEGER
    | expr PLUS expr
    | expr MINUS expr
    | expr TIMES expr
    | expr DIVIDE expr
    ;

/* Define the action to be taken when encountering each token */
%%

/* Define the functions for each rule */
expr:
    {
        $$ = $1; /* If the token is an integer, return the value */
    }
    | expr PLUS expr
    {
        $$ = $1 + $3; /* If the rule is addition, perform the addition and return the result */
    }
    | expr MINUS expr
    {
        $$ = $1 - $3; /* If the rule is subtraction, perform the subtraction and return the result */
    }
    | expr TIMES expr
    {
        $$ = $1 * $3; /* If the rule is multiplication, perform the multiplication and return the result */
    }
    | expr DIVIDE expr
    {
        $$ = $1 / $3; /* If the rule is division, perform the division and return the result */
    }
    ;
    
/* Define the error handling function */
yyerror(char *msg)
{
    fprintf(stderr, "Error: %s\n", msg);
    exit(EXIT_FAILURE);
}