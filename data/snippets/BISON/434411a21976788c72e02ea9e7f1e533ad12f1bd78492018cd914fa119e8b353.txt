%{
#include <stdio.h>
void yyerror(const char* msg) {
    fprintf(stderr, "%s\n", msg);
    exit(-1);
}
extern int yylex();
%}

%token <val> INT
%token <id> ID
%left '+' '-'
%left '*' '/'
%left NEG

%%

stmt_list: stmt_list stmt
  | /* empty */
;

stmt: expr ';' { printf("%d\n", $1); }
  | ID '=' expr ';' { printf("%s = %d\n", $1, $3); }
  | ERROR ';' { yyerror("Syntax error"); }
;

expr: expr '+' expr { $$ = $1 + $3; }
  | expr '-' expr { $$ = $1 - $3; }
  | expr '*' expr { $$ = $1 * $3; }									
  | expr '/' expr { $$ = $1 / $3; }
  | '-' expr %prec NEG { $$ = -$2; }
  | '(' expr ')' { $$ = $2; }
  | INT { $$ = $1; }
  | ID { $$ = $1; }
;

%%

int main() {
  return yyparse();
}

int yywrap() {
  return 1;
}