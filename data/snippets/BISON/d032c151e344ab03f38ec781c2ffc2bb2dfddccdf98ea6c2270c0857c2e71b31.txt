%%
calculator: /* define the rule calculator */ 
    | expression { /* evaluate expression */ } 
    | calculator '+' expression { /* add two expressions */ } 
    | calculator '-' expression { /* subtract second expression from first */ } 
    | calculator '*' expression { /* multiply two expressions */ } 
    | calculator '/' expression { /* divide first expression by second */ } 
    | '(' calculator ')' { /* evaluate contents of parentheses */ } ;

expression: /* define the rule expression */ 
    | INTEGER { /* assign value to token */ } 
    | FLOAT { /* assign value to token */ } 
    | '-' expression %prec NEG /* specify order of operations for negative sign */ 
    | '$' expression     { /* square second expression */ } 
    | expression '^' expression { /* raise first expression to power of second */ } 
    | '|' expression '|' { /* calculate absolute value of expression */ } 
    | expression '?' expression ':' expression { /*conditional statement */ } ;

INTEGER: /* define the rule INTEGER */ 
    | digit+ { /* extract integer value from digits */ } ;

FLOAT: /* define the rule FLOAT */ 
    | digit+ '.' digit+ { /* extract floating point value from digits */ } 
    | '.' digit+ { /* handle decimals with no integer part */ } 
    | digit+ '.' { /* handle integers with no decimal part */ } ;

digit: /* define the rule digit */ 
    | [0-9] { /* match any digit from 0 to 9 */ } ;
%%