/*
 * A simple BISON program that parses a mathematical expression and evaluates it
 */

%token NUMBER  /* defines a token for numbers */
%token PLUS /* defines a token for addition */

%% /* starting the rules section */

start: /* starting rule for the grammar */
    expression { /* this code block evaluates the expression and prints the result */
        printf("Result: %d\n", $1);
    }
    ;

expression: /* defines a production for an expression */
    expression PLUS expression { /* code block that adds two expressions */
        $$ = $1 + $3;
    }
    | NUMBER { /* production for a single number */
        $$ = $1;
    }
    ;
    
%%

/* evaluating input expression using the parser and lexer generated by BISON */
int main() {
    yyparse();  /* parsing the input using the BISON parser */
    return 0;
}


/* defining the lexer using Flex */
%{
#include "y.tab.h"
%}

%%

[-+]?[0-9]+ {
    yylval = atoi(yytext); /* converting string to integer and storing in yylval */
    return NUMBER;
}

"+" {
    return PLUS;
}