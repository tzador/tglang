{
    %token NUM TRUE FALSE
}

int_expr: NUM {
    printf("%d", $1); //prints the number token
}

bool_expr: TRUE {
    bool value = true; //assigns value true to boolean variable
    printf("The value is %s", value ? "true" : "false"); //prints the boolean value
}

%%

//this is the lex code
%{
#include <stdlib.h>
#include <stdio.h>
#include "bison.tab.h"
%}

//matches any integer literal
[0-9]+ {
    yylval = atoi(yytext); //converts the matched lexeme to an integer
    return NUM; //returns the token for integer
}

//matches the boolean keywords true and false
true                    return TRUE;
false                   return FALSE;

//matches any whitespace characters
[ \t\n]+            //do nothing

.                   printf("Invalid input"); //prints an error message for any other token or character

%%
//end of lex code