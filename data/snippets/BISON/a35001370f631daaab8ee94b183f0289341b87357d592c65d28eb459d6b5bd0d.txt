%{
// This code snippet is a BISON parser that handles arithmetic expressions
// It takes in input in the form of numbers and operators and generates a parse tree

#include <stdio.h>

// Define YY_DECL which is needed by Bison to generate the parse function
// The parse function takes in input and returns an integer value (1 for success, 0 for failure)
#define YY_DECL int yylex()

// Define the token type to be used in the parser
// In this case, we only need one token type 'NUMBER' to represent numeric values
%}

%token NUMBER

%%
// Grammar rules in BISON are defined using 'production rules' with the structure
// <non-terminal> : rule ;
expr : expr '+' term
    | expr '-' term
    | term ;
term : term '*' factor
    | term '/' factor
    | factor ;
factor : NUMBER 
       | '(' expr ')' ;

// Define the syntax error rule to handle any invalid inputs
error : '\n' { yyerror("Syntax error"); } ;

// Generate the parse function using Bison built-in function 'yyparse'
// It uses yylex() to get input from the lexer
int yyparse()
{
    yylex();
}
%%

// Define auxiliary functions used in the parser
// yylex() fetches input from the lexer and returns the token type
// yyerror() is used to report syntax errors in the input
int yylex()
{
    int c = getchar();
    if (isdigit(c))
    {
        ungetc(c, stdin);
        scanf("%d", &token_val); // token_val stores the numeric value
        return NUMBER;
    }
    else
        return c; // return the operator character as token type
}

void yyerror(char* s)
{
    fprintf(stderr, "%s\n", s);
}

// Main function to call the parse function and generate the parse tree
int main()
{
    yyparse();
}