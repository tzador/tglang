%{
/* This is a BISON code snippet for a simple calculator */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
%}

 /* Start of grammar rules */

calc:               /* rule for entire calculation */
    expr {         /* execute expr rule first */
        printf("%d\n", $1); /* print result */
    }
    | calc '+' expr { /* matches plus operation */
        $$ = $1 + $3;
    }
    | calc '-' expr { /* matches minus operation */
        $$ = $1 - $3;
    }
    | calc '*' expr { /* matches multiplication operation */
        $$ = $1 * $3;
    }
    | calc '/' expr { /* matches division operation */
        if ($3 == 0) {
            printf("Cannot divide by zero\n");
            exit(1); /* exit with error code if division by zero */
        }
        else {
            $$ = $1 / $3;
        }
    }
    | '-' expr %prec UMINUS { /* matches unary minus operation */
        $$ = - $2;
    }
    | '(' calc ')'  { /* matches parentheses for grouping */
        $$ = $2;
    }
    | NUMBER { /* rule for numbers */
        $$ = $1; /* return value of number */
    }
    ;

expr: calc; /* expr rule is just a wrapper for calc rule */

 /* End of grammar rules */

%%
/* Start of BISON code */
#include "calc.tab.h"

int main() {
    yyparse(); /* call BISON parser */
    return 0;
}

 /* End of BISON code */
 
 /* Start of C code snippet for lexer */

int yywrap() { /* required for yylex function */
    return 1;
}

int yylex() { /* yylex function will read input and return token */
    int c; /* current character */
    while ((c = getchar()) == ' ' || c == '\t') /* skip whitespace */
        ;
    if (c == '.' || (c >= '0' && c <= '9')) { /* check if number */
        ungetc(c, stdin); /* put character back into input stream */
        scanf("%d", &yylval); /* read number into yylval variable */
        return NUMBER; /* return token for numbers */
    }
    else if (c == '+') /* check for plus operation */
        return '+';
    else if (c == '-') /* check for minus operation */
        return '-';
    else if (c == '*') /* check for multiplication operation */
        return '*';
    else if (c == '/') /* check for division operation */
        return '/';
    else if (c == '(') /* check for opening parentheses */
        return '(';
    else if (c == ')') /* check for closing parentheses */
        return ')';
    else if (c == '\n') /* check for end of line */
        return 0;
    else /* return error if unknown character */
        return -1;
}

 /* End of C code snippet for lexer */