/*
 * Language: BISON (a language for describing context-free grammars)
 * Author: John Doe <johndoe@example.com>
 */

%token NUMBER STRING // define symbols for the lexer (tokenizer)
%left '+' '-' // define operator precedence and associativity
%right '=' // right-associative operator

%%

program:
    | %empty
    | program statement
    | program start "end" // program can end with keyword "end"

statement:
    | condition {
        printf("The condition was met."); # print success message
    }
    | assignment

condition:
    | "if" '(' expression ')' { // if statement with parentheses for grouping
        $$ = $3; // assign the value of the expression to the condition variable
    }

assignment:
    | identifier '=' expression {
        printf("Value %d was assigned to variable %s.", $3, $1); // print formatted message with variable name and value
    }

expression: // arithmetic expression with support for parentheses and variables
    | '(' expression ')'
    | expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    | NUMBER
    | STRING
    | identifier {

    $$ = $1; // assign the value of the variable to the expression
}

identifier: // define identifiers (variables) as strings
    | [a-zA-Z][a-zA-Z0-9]* {
        $$ = $1; // assign the value of the string to the identifier
    }

%%

int main() { // main function for testing
    yylex(); // call the lexer to tokenize input
    return 0;
}