/* This code snippet is a simple Bison grammar that parses a mathematical expression
and calculates its value */
%{
#include <stdio.h> /* import standard input/output library */
%}
/* Define the token types to be used in the grammar */
%token NUMBER
%token ADD
%token SUB
%token MUL
%token DIV
%token LPAREN
%token RPAREN
/* Define the precedence and associativity of the operators */
%left ADD SUB
%left MUL DIV
%right UMINUS /* unary minus operator */
%start expression /* specify the starting rule */
%%
expression : 
    | expression ADD term { $$ = $1 + $3; } /* addition rule */
    | expression SUB term { $$ = $1 - $3; } /* subtraction rule */
    | term { $$ = $1; } /* base case */
    ;
term : 
    | term MUL factor { $$ = $1 * $3; } /* multiplication rule */
    | term DIV factor { $$ = $1 / $3; } /* division rule */
    | factor { $$ = $1; } /* base case */
    ;
factor : 
    | NUMBER { $$ = $1; } /* number token */
    | LPAREN expression RPAREN { $$ = $2; } /* parentheses rule */
    | SUB factor %prec UMINUS { $$ = -$2; } /* unary minus rule */
    ;
%%
/* main function to read input and call the parser */
int main() {
    printf("Enter a mathematical expression: ");
    yyparse(); /* calls the parser */
    return 0;
}
/* function to handle parsing errors */
void yyerror(char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}
/* function to get the next token from the input stream */
int yylex() {
    char c = getchar(); /* read the next character */
    /* check for end of input */
    if (c == EOF) {
        return 0; /* return 0 to indicate end of input */
    }
    /* check for number token */
    if (c >= '0' && c <= '9') {
        /* loop to read remaining digits */
        while (c >= '0' && c <= '9') {
            c = getchar();
        }
        ungetc(c, stdin); /* put back the non-digit character */
        return NUMBER;
    }
    /* check for operator tokens */
    switch (c) {
        case '+': return ADD;
        case '-': return SUB;
        case '*': return MUL;
        case '/': return DIV;
        case '(': return LPAREN;
        case ')': return RPAREN;
        default: yyerror("Invalid token"); /* error if unknown token */
    }
}