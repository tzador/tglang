%{
//The '%' symbol indicates the start of the BISON declarations section
//This section is used to declare variables and functions needed in the BISON grammar rules.
#include <stdio.h> //include necessary header files
#include <string.h> //include necessary header files
%}

%token <string> NAME  //declare token 'NAME' which will have a string value
%start program //declare starting rule for the BISON parser
%type <string> assign //declare type for assign rule as string

%%
program: //start of program rule
    statements  //statements rule is called
    { printf("Program is valid!\n"); } //print statement if program rules is satisfied
    | error { yyerror("Program is not valid!"); } //if program rule is not satisfied, print error message

statements: //start of statements rule
    statement ';' //each statement is followed by a semicolon
    | statements statement ';' //recursive call to handle multiple statements
    ;

statement: //start of statement rule
    assign //call assign rule
    | print //call print rule
    ;

assign: //start of assign rule
    NAME '=' expr //token NAME is assigned a value from expression
    ;

print: //start of print rule
    'print' '(' expr ')' //print keyword followed by open and close parentheses and expression inside

expr: //start of expr rule
    NAME //name is valid expression
    | expr '+' expr //recursive call for addition operator
    | expr '-' expr //recursive call for subtraction operator
    | expr '*' expr //recursive call for multiplication operator
    | '(' expr ')' //expression enclosed in parentheses is valid
    ;

%%
int main() {
    printf("Enter a simple program:\n");
    yyparse(); //call parser function
    return 0;
}

int yyerror(char *s) {
    printf("%s\n", s); //print error message
    return 0;
}

/* Some sample valid programs
print(NAME); 
assign NAME = "John"; */

/* Some sample invalid programs
print(10);
assign NUM = 5; */