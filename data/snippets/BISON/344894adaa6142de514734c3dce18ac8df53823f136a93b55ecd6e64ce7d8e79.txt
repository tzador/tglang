// A grammar for arithmetic expressions in BISON
%{
  /* Declarations and includes */
  #include <stdio.h>
%}

/* Definition of tokens */
%token NUMBER

/* Rules for arithmetic expressions */
%%

start: expr
expr: expr '+' term
    | expr '-' term
    | term
term: term '*' factor
    | term '/' factor
    | factor
factor: NUMBER
    | '(' expr ')'

/* Handling syntax errors */
%%
main()
{
    yyparse();
}

yyerror(msg)
char *msg;
{
    fprintf(stderr, "Error: %s\n", msg);
}

/* Lexical analyzer for tokens */
%%

yywrap()
{
    return 1;
}

yylex()
{
    int c;
    while((c = getchar()) == ' ' || c == '\t');
    if(c == EOF)
      return 0;
    if(isdigit(c))
    {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    return c;
}