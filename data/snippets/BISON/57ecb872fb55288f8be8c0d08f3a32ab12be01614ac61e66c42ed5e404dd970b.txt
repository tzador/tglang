%%

/* This section defines the rules for the parser */
program: expr_list;

expr_list: expr_list expr
        | /* empty */
        ;

expr: term
    | term '+' expr
    | term '-' expr
    ;

term: factor
    | factor '*' term
    | factor '/' term
    ;

factor: NUMBER
      | '(' expr ')'
      ;

%%

/* This section defines the actions for each rule */
program:
  {
    // Action code for program rule
    // This code is executed when program rule is matched
  }
  expr_list:
    |
    expr_list expr
      {
        // Action code for expr_list rule
        // This code is executed for each `expr` in `expr_list`
        printf("%d", $1 + $2); // Prints the sum of first and second expression
      }
  expr:
    | term
      {
        // Action code for expr rule
        // This code is executed when only `term` is matched
        $$ = $1; // Sets the result of `expr` rule to `term`'s result
      }
    | term '+' expr
      {
        // Action code for expr rule
        // This code is executed when an addition operation is matched
        $$ = $1 + $3; // Sets the result of `expr` to sum of first and third term
      }
    | term '-' expr
      {
        // Action code for expr rule
        // This code is executed when a subtraction operation is matched
        $$ = $1 - $3; // Sets the result of `expr` to difference of first and third term
      }
  term:
    | factor
      {
        // Action code for term rule
        // This code is executed when only `factor` is matched
        $$ = $1; // Sets the result of `term` rule to `factor`'s result
      }
    | factor '*' term
      {
        // Action code for term rule
        // This code is executed when a multiplication operation is matched
        $$ = $1 * $3; // Sets the result of `term` to product of first and third factor
      }
    | factor '/' term
      {
        // Action code for term rule
        // This code is executed when a division operation is matched
        $$ = $1 / $3; // Sets the result of `term` to quotient of first and third factor
      }
  factor: NUMBER
        {
        // Action code for factor rule
          $$ = $1; // Sets the result of `factor` rule to the number matched
        }
      | '(' expr ')'
        {
        // Action code for factor rule
        // This code is executed when an expression in parentheses is matched
          $$ = $2; // Sets the result of `factor` rule to the result of the expression in parentheses
        };