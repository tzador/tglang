%token NAME  
%token NUMBER  
%token STRING

%token PLUS MINUS MULT DIV  
%token LPAREN RPAREN

%start expression  

%%  

expression :  
    NUMBER  
    | NAME  
    | STRING
    | expression PLUS expression  
    | expression MINUS expression  
    | expression MULT expression  
    | expression DIV expression  
    | LPAREN expression RPAREN  
;  

%%  

int main(int argc, char *argv[]) {  
    yylex(); /* Initialize the lexer */  

    /* Get the first token */  
    int token = yylex();  

    /* Call the parser and check for errors */  
    if (yyparse())  
        printf("Syntax error");  

    return 0;  
}  

int yyerror(char *s) {  
    /* Print the error message */  
    fprintf(stderr, "%s\n", s);  

    /* Exit the parser with error code */  
    return 1;  
}  

int yylex() {  
    int c;  

    /* Get the next character from input */  
    c = fgetc(stdin);  

    /* Check for end of file */  
    if (c == EOF)  
        return 0;  

    /* Check for operators */  
    if (c == '+')  
        return PLUS;  
    if (c == '-')  
        return MINUS;  
    if (c == '*')  
        return MULT;  
    if (c == '/')  
        return DIV;  

    /* Check for parenthesis */  
    if (c == '(')  
        return LPAREN;  
    if (c == ')')  
        return RPAREN;  

    /* Check for numbers */  
    if (isdigit(c)) {  
        /* Get the full number */  
        ungetc(c, stdin);  
        scanf("%d", &yyval);  

        /* Return the token for number */  
        return NUMBER;  
    }  

    /* Check for strings */  
    if (c == '"') {  
        /* Get the full string */  
        c = fgetc(stdin);  
        while (c != '"') {  
            yylval.string[i++] = c;  
            c = fgetc(stdin);  
        }  
        /* Null terminate the string */  
        yylval.string[i] = '\0';  

        /* Return the token for string */  
        return STRING;  
    }  

    /* Check for names */  
    if (isalpha(c)) {  
        /* Get the full name */  
        ungetc(c, stdin);  
        scanf("%s", yyval.name);  

        /* Return the token for name */  
        return NAME;  
    }  

    /* Other tokens are ignored */  
    return yylex();  
}