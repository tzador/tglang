/* This is a code snippet of a BISON parser that recognizes arithmetic expressions */

%token <name> VARIABLE            /* define token for variables */
%token <value> NUMBER             /* define token for numbers */
%left '+' '-'                    /* define precedence for addition and subtraction */
%left '*' '/'                    /* define precedence for multiplication and division */

%%

expression:                      /* define rule for an expression */
    | NUMBER                     /* match a number */
    | VARIABLE                   /* match a variable */
    | expression '+' expression  /* match addition */
    | expression '-' expression  /* match subtraction */
    | expression '*' expression  /* match multiplication */
    | expression '/' expression  /* match division */
    ;

%%

/* define actions to be taken for each rule */

void yyerror(const char *message) {  /* error handling function */
    printf("Error: %s\n", message);
    exit(1);
}

int main() {                         /* main function */
    yyparse();
    return 0;
}

int yywrap() {                       /* end of input function */
    return 1;
}

int yylex() {                        /* lexical analyzer function */
    char c;
    lexval = yylval;                 /* assign lexval to current token's value */
    c = getchar();                   /* get next character from input */
    if (isdigit(c)) {                /* check if it's a digit */
        yylval.value = c - '0';      /* convert character to integer */
        return NUMBER;               /* return NUMBER token */
    } else if (isalpha(c)) {         /* check if it's a letter */
        yylval.name = c;             /* assign name to letter */
        return VARIABLE;             /* return VARIABLE token */
    }
    return c;                        /* return character (operators and other symbols) */
}