%{
    # Define token types
    %token <strval> STRING
    %token <numval> NUMBER
    %token IDENTIFIER
    %token OPERATOR
    
    # Declare variables
    char* string_value;
    double number_value;
    
    # Define functions
    char* add_strings(char* str1, char* str2) {
        // Concatenates two strings and returns the result
        char* result;
        // Allocate memory for the new string
        result = (char*) malloc(strlen(str1)+strlen(str2)+1);
        // Copy first string into result
        strcpy(result, str1);
        // Concatenate second string to result
        strcat(result, str2);
        // Return the result
        return result;
    }
    
    double calculate_operation(double num1, double num2, char* operator) {
        // Performs calculation based on the operator (+, -, *, /)
        double result;
        if(strcmp(operator, "+") == 0) {
            result = num1 + num2;
        }
        else if(strcmp(operator, "-") == 0) {
            result = num1 - num2;
        }
        else if(strcmp(operator, "*") == 0) {
            result = num1 * num2;
        }
        else if(strcmp(operator, "/") == 0) {
            result = num1 / num2;
        }
        return result;
    }
    
%}
    
%token EOL
    
%%
    
# Define grammar
input: /* empty */
| input line
;
    
line: STRING { printf("String found: %s\n", $1); }
| NUMBER { printf("Number found: %f\n", $1);}
| IDENTIFIER OPERATOR NUMBER { 
    printf("Calculated result: %f\n", 
    calculate_operation($1, $3, $2));
}
| EOL
;
    
    
%%
    
# Define main function
int main(void) {
    // Define input file
    FILE* input_file;
    // Open input file
    input_file = fopen("input.txt", "r");
    // Create parser object
    yyparser parser = yyparse();
    // Set input file
    feed_buffer(input_file);
    // Call parser
    yyparse(parser);
    // Close input file
    fclose(input_file);
    return 0;
}