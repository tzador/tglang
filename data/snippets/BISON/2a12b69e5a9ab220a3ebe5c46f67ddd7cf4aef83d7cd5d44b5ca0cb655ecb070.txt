%start Expr /* Specifies the starting symbol of the grammar */
%token NUM /* Declares a token NUM to represent a number */

/* Grammar rules for mathematical expressions */
Expr: /* Defines a rule for an expression */
      Expr "+" Term { $$ = $1 + $3; } /* If an Expr is followed by "+" and Term, the value is the sum of the two */
    | Expr "-" Term { $$ = $1 - $3; } /* If an Expr is followed by "-" and Term, the value is the difference of the two */
    | Term { $$ = $1; } /* If an Expr is just a Term, the value is the Term itself */
    ;

Term: /* Defines a rule for a term */
    Term "*" Factor { $$ = $1 * $3; } /* If a Term is followed by "*" and Factor, the value is the product of the two */
    | Term "/" Factor { $$ = $1 / $3; } /* If a Term is followed by "/" and Factor, the value is the quotient of the two */
    | Factor { $$ = $1; } /* If a Term is just a Factor, the value is the Factor itself */
    ;

Factor: /* Defines a rule for a factor */
       "(" Expr ")" { $$ = $2; } /* If a Factor is surrounded by "(", ")" then the value is the value of the enclosed Expr */
     | NUM { $$ = $1; } /* If a Factor is a NUMBER, the value is the number itself */
     ;

%% /* Delimiter to mark the end of the grammar rules */

int main() {

    /* Input string for testing */
    char input[] = "2 + 3 * (4 - 1)";

    /* Variable to store the result of the expression */
    double result;

    /* Calls the parser and passes in the input string and the address of the result variable */
    yyparse(input, &result);

    /* Prints the result */
    printf("The result of the expression is: %f\n", result);

    return 0;
}