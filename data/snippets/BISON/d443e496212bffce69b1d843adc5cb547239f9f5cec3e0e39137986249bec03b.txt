program: /* program rule */
	| /* empty */
	| expr program /* matches one or more expressions */
	;

expr: /* expression rule */
	| var '=' val '\n' { /* code to store variable value */ }
	| 'print' val '\n' { /* code to print value */ }
	| 'if' '(' cond ')' '\n' program '\n' 'else' '\n' program '\n' { /* code for if/else statement */ }
	| 'while' '(' cond ')' '\n' program '\n' { /* code for while loop */ }
	| '{' program '}' { /* code for block of expressions */ }
	;

var: /* variable rule */
	| 'x' /* variable name */ { /* code to store variable name */ }
	| 'y' /* variable name */ { /* code to store variable name */ }
	;

val: /* value rule */
	| number /* numeric value */ { /* code to store numeric value */ }
	| boolean /* boolean value */ { /* code to store boolean value */ }
	| string /* string value */ { /* code to store string value */ }
	;

cond: /* condition rule */
	| expr '<' expr { /* code to evaluate less than condition */ }
	| expr '>' expr { /* code to evaluate greater than condition */ }
	| expr '==' expr { /* code to evaluate equal to condition */ }
	| expr '!=' expr { /* code to evaluate not equal to condition */ }
	;

number: /[0-9]+/ { /* code to convert string to integer */ }

boolean: 'true' { /* code to convert string to boolean */ }
	| 'false' { /* code to convert string to boolean */ }
	;

string: /"[^"]*"/ { /* code to store string value */ }