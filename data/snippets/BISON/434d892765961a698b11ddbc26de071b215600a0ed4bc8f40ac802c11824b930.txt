/*
Code for a calculator program in BISON
*/

/* Define tokens */

%token DIGIT
%token ADD_OP
%token SUB_OP
%token MUL_OP
%token DIV_OP

/* Define grammar rules */

%start input

input:
  expression
  | input '\n' expression  /* allows for multiple calculations on one line */
  | input '\n'            /* allows for blank lines between calculations */
  | input error '\n'    /* handles invalid input */
  ;

expression:
  term
  | expression ADD_OP term      /* handles addition */
  | expression SUB_OP term      /* handles subtraction */
  ;

term:
  factor
  | term MUL_OP factor      /* handles multiplication */
  | term DIV_OP factor      /* handles division */
  ;

factor:
  DIGIT         /* handles single digit numbers */
  | factor DIGIT   /* handles multi-digit numbers */
  ;

%%

/* C code section */

#include<stdio.h>

/* Declare global variables */
int result;        

int main()
{
  /* Prompt user for input */
  printf("Enter an expression to calculate: ");

  /* Call BISON parser */
  yyparse();

  /* Print result */
  printf("\nResult: %d\n", result);

  return 0;
}

int yyerror(char *s)
{
  /* Error handling function */
  printf("\nERROR: %s\n", s);
  return 0;
}

/* Function to handle token values */
int yylex()
{
  int c;
  c = getchar();

  /* Check for valid input */
  if (c == '+' || c == '-' || c == '*' || c == '/')
    return c;

  /* Convert input to integer if digit */
  if (c >= '0' && c <= '9')
  {
    ungetc(c, stdin);    /* put c back in buffer so it can be read as part of the integer */
    scanf_s("%d", &yylval);  /* scan in integer value and return DIGIT token */
    return DIGIT;
  }

  /* Handle invalid input */
  return 0;
}

%%

/* End of BISON code */