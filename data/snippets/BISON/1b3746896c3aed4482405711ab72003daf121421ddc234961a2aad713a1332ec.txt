// This code snippet generates a syntax tree for a simple math expression

%token NUM     // defines token for numbers
%token ADD     // defines token for addition operator
%token SUB     // defines token for subtraction operator
%token MUL     // defines token for multiplication operator
%token DIV     // defines token for division operator
%token NEG     // defines token for negative operator

%%

expr: NUM                      { $$ = $1; }                                               // rule for single number 
    | expr ADD expr            { $$ = new BinOpNode(ADD, $1, $3); }                         // rule for addition expression
    | expr SUB expr            { $$ = new BinOpNode(SUB, $1, $3); }                         // rule for subtraction expression
    | expr MUL expr            { $$ = new BinOpNode(MUL, $1, $3); }                         // rule for multiplication expression
    | expr DIV expr            { $$ = new BinOpNode(DIV, $1, $3); }                         // rule for division expression
    | SUB expr                 { $$ = new UnOpNode(NEG, $2); }                              // rule for negative expression
    ;

%%

// data structures for syntax tree nodes
struct ExprNode {
    virtual ~ExprNode() {}
    virtual int eval() const = 0;
};

struct NumNode : ExprNode {
    int val;
    NumNode(int val) : val(val) {}
    int eval() const override { return val; }
};

struct BinOpNode : ExprNode {
    int op;
    ExprNode *left;
    ExprNode *right;
    BinOpNode(int op, ExprNode *left, ExprNode *right) : op(op), left(left), right(right) {}
    int eval() const override {
        switch (op) {
            case ADD:
                return left->eval() + right->eval();
            case SUB:
                return left->eval() - right->eval();
            case MUL:
                return left->eval() * right->eval();
            case DIV:
                return left->eval() / right->eval();
        }
    }
};

struct UnOpNode : ExprNode {
    int op;
    ExprNode *expr;
    UnOpNode(int op, ExprNode *expr) : op(op), expr(expr) {}
    int eval() const override {
        switch (op) {
            case NEG:
                return -expr->eval();
        }
    }
};