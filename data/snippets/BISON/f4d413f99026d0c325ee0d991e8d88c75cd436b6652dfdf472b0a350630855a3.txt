%{
//initialize variables
int count = 0;
int total = 0;
%}

%token NUM
%left '+' '-'

%%

//rules
start: expr {printf("Result is %d\n", $1)}  //prints the final result
    ;

expr: expr '+' term { //adds the two expressions together
        $$ = $1 + $3;
        count++;
        total += $3;
    }
    | expr '-' term { //subtracts the term from the expression
        $$ = $1 - $3;
        count++;
        total -= $3;
    }
    | term { //simply returns the term
        $$ = $1;
        count++;
        total += $1;
    }
    | NUM  { //returns the numerical value of the token
        $$ = $1;
        count++;
        total += $1;
    } 
    ;

term: expr '*' term { //multiplies the two expressions together
        $$ = $1 * $3;
        count++;
        total += $3;
    }
    | expr '/' term { //divides the expression by the term
        $$ = $1 / $3;
        count++;
        total /= $3;
    }
    | NUM { //returns the numerical value of the token
        $$ = $1;
        count++;
        total += $1;
    }
    ;

%%

//user-defined functions

void printCount() { //prints the number of expressions evaluated
    printf("Total number of expressions evaluated: %d\n", count);
}

void printTotal() { //prints the final total of all the expressions evaluated
   printf("Total value of all expressions evaluated: %d\n", total); 
}