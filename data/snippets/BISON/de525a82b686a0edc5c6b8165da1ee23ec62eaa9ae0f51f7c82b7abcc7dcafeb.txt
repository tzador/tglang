%%

program     : statements { //Statement to indicate the start of the program

    printf("Program has started!"); //Prints a message to indicate that the program has started
    //Other code statements go here
}

statements  : statements statement //'statements' non-terminal which recursively calls itself

statement   : variable_declaration    {$$ = $1;} //Non-terminal for variable declaration, assigns $1 to the semantic value
            | assignment_statement      {$$ = $1;} //Non-terminal for assignment statement, assigns $1 to the semantic value
            | conditional_statement     {$$ = $1;} //Non-terminal for conditional statement, assigns $1 to the semantic value
            | loop_statement            {$$ = $1;} //Non-terminal for loop statement, assigns $1 to the semantic value
            | return_statement          {$$ = $1;} //Non-terminal for return statement, assigns $1 to the semantic value
            | //empty rule, do nothing
            ;

variable_declaration : TYPE ID ';' { //Non-terminal for variable type and identifier
    printf("Variable %s declared!", $2); //Prints a message to indicate variable has been declared
    //Other code statements go here
}

assignment_statement : ID '=' expression ';' { //Non-terminal for variable assignment
    printf("Variable %s assigned with value %s!", $1, $3); //Prints a message to indicate variable has been assigned a value
    //Other code statements go here
}

conditional_statement : IF '(' expression ')' '{' statements '}' { //Non-terminal for if statement
    if($3) { //If expression evaluates to true
        printf("If statement executed!"); //Prints a message to indicate if statement has been executed
        //Other code statements go here
    }
}

loop_statement : FOR '(' assignment_statement ';' expression ';' assignment_statement ')' '{' statements '}' { //Non-terminal for for loop statement
    for($3; $5; $7) { // Loops while $5 evaluates to true
        printf("For loop statement executed!"); //Prints a message to indicate for loop statement has been executed
        //Other code statements go here
    }
}

return_statement : RETURN expression ';' { //Non-terminal for return statement
    printf("Return statement with value %s!", $2); //Prints a message to indicate the return statement and its value
    return $2; //Returns the semantic value of $2
}

expression  : expression '+' factor { $$ = $1 + $3;} //Non-terminal for addition expression
            | expression '-' factor { $$ = $1 - $3;} //Non-terminal for subtraction expression
            | factor {$$ = $1;} //Factor is the simplest expression, assigns $1 to the semantic value
            ;

factor      : factor '*' term { $$ = $1 * $3;} //Non-terminal for multiplication factor
            | factor '/' term { $$ = $1 / $3;} //Non-terminal for division factor
            | term {$$ = $1;} //Term is the simplest factor, assigns $1 to the semantic value
            ;

term        : '(' expression ')' {$$ = $2;} //Non-terminal for grouping expression, assigns $2 to the semantic value
            | NUMBER {$$ = $1;} //Terminal for numerical value, assigns $1 to the semantic value
            | ID { $$ = $1;} //Terminal for variable identifier, assigns $1 to the semantic value
            ;
 
%%

int main() { //Main function to start the program
    yyparse(); //Call parser to start parsing program
    //Other code statements go here
    return 0;
}

void yyerror(const char *s) { //Error handling function
    fprintf(stderr, "%s\n", s); //Print error message to standard error
    //Other code statements go here
}