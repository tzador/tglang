%{
// start of code section

#include <stdio.h> //include standard input/output library

int stack[100]; //create a stack array with size 100
int top = -1; //initialize top of stack variable to -1

// function to push data onto stack
void push(int data) {
	top++; //increment top variable
	stack[top] = data; //add data to stack array
}

// function to pop data from the stack
int pop() {
	int data = stack[top]; //store top of stack data in a variable
	top--; //decrement top variable
	return data; //return popped data
}

//end of code section
%}

// grammar rules
%start program
%%

// define our non-terminal symbols
program:
	expressions { printf("Program executed successfully!"); }
	| error { printf("Program failed to execute."); };

expressions:
	INT { push($1); } //push integers onto stack
	| FLOAT { push($1); } //push floats onto stack
	| STRING { printf("String value: %s", $1); } //print string value
	| expressions '+' expressions { printf("%d + %d = %d", pop(), pop(), pop() + pop()); } //pop two values from stack, add them and print result
	| expressions '*' expressions { printf("%d * %d = %d", pop(), pop(), pop() * pop()); } //pop two values from stack, multiply them and print result
	| expressions '/' expressions { printf("%d / %d = %d", pop(), pop(), pop() / pop()); } //pop two values from stack, divide them and print result
	| expressions '-' expressions { printf("%d - %d = %d", pop(), pop(), pop() - pop()); } //pop two values from stack, subtract them and print result
	| '(' expressions ')' { printf("Bracket expression: %d", pop()); } //print expression inside brackets
	| '-' expressions %prec UM { printf("Unary minus: %d", pop() * -1); } //print negative value of expression
	;
	
%%

// main function
int main() {
	yyparse(); //parse input according to grammar rules
	return 0; //return 0 upon successful execution
}