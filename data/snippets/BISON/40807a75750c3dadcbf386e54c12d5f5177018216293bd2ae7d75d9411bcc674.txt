%{
// This code snippet is written in BISON (GNU parser generator).
// It is part of the larger grammar file that helps generate a parser for a specific programming language.

// The following code defines macros and variables that are used in the grammar rules to specify the language's syntax and semantics.

// Sets the character set to ASCII.
%define input.encoding "ascii"     

// Define the starting and terminating points for the language's program.
%start language_program
%initial-action { yylineno = 1; }

// Define a series of types to be used in the grammar rules.
%type <expr> expression
%type <prog> program
%type <stmt> statement
%type <ident> identifier
%type <val> value

// Enable error reporting and show line number of errors.
%define parse.error verbose
%define parse.lac full

%union {
  // Define different types of values that can be used in the grammar rules.
  char *sval;
  long lval;
  double dval;
}

// Declare any needed functions to assist in the parsing process.
extern int yylex();
void yyerror(const char *msg);

// Declare the nonterminal symbols that make up the grammar.
%token <sval> STRING
%token <lval> NUMBER
%token WHILE
%token IF
%token ELSE

%right '='
%left '+' '-'
%left '*' '/'
%left UMINUS

// Define the grammar rules for the language.
%start language_program
%token END_OF_FILE

%%

language_program: /* empty */
  | program END_OF_FILE 
  ;

program:
  | program statement
  | program '{' program '}'
  | expression
  ;
  
statement:
  | expression ';' { yyerror("Missing semicolon at line %d\n", yylineno); }
  | WHILE '(' expression ')' statement
  | IF '(' expression ')' statement ELSE statement
  ;

expression:
  | identifier '=' expression
  | expression '+' expression
  | expression '-' expression
  | expression '*' expression
  | expression '/' expression
  | '-' expression %prec UMINUS
  | '(' expression ')'
  | identifier '(' expression ')'
  | identifier '(' ')'
  | identifier
  | value
  ;

identifier:
  | STRING
  | NUMBER
  ;

value:
  | STRING
  | NUMBER
  ;
  
%%

// Function used to get the next token from the lexer.
int yylex(void);

// Function used to handle parsing errors.
void yyerror(const char *msg) {
  fprintf(stderr, "%s at line %d\n", msg, yylineno);
}

// Main function to start the parser.
int main(void) {
  // Set up the initial values and start the parsing process.
  yyin = stdin;
  yylex();
  yyparse();
  
  return 0;
}
%}



// The above code snippet is just a small part of a larger grammar file that would be used to generate a parser for a programming language. The syntax and semantics of the language would be defined in the grammar rules, which would be used by the parser to recognize and process the code written in that language. This snippet also shows how Bison can handle error reporting and how it defines different types of values to be used in the grammar rules. Additionally, it shows how Bison can handle nonterminal symbols and how it handles functions to assist in the parsing process.