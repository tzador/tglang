%{
    // This is a code snippet in BISON
    /* It contains a grammar rule for arithmetic expressions,
     * with support for addition, subtraction, multiplication,
     * division, and parentheses. */
%}

/* The following declarations define the type and value
   for the left and right operands of an arithmetic expression. */

%union {
    double value;
    char *string;
}

/* Define the tokens for each operator and number. */
%token PLUS MINUS TIMES DIVIDE OPEN_PAREN CLOSE_PAREN NUMBER

/* Define the precedence and associativity for the operators. */
%left PLUS MINUS
%left TIMES DIVIDE
%right UNARY_MINUS

/* Define the grammar rules for arithmetic expressions. */
%%
expression:
    /* A basic expression can be a number, identifier, or
       a parenthesized subexpression. */
    NUMBER
    | string
    | OPEN_PAREN expression CLOSE_PAREN
    /* An arithmetic expression can also involve multiple
       operands and operators. */
    | expression PLUS expression
    | expression MINUS expression
    | expression TIMES expression
    | expression DIVIDE expression
    /* The 'unary_minus' rule allows for a unary minus operator,
       used for negative numbers or expressions. */
    | MINUS expression %prec UNARY_MINUS
;

/* Define the function to handle errors in the input. */
void yyerror(char *str) {
    printf("\nError: %s \n",str);
}

/* Define the main function to prompt for input and
   parse the input using the defined grammar rules. */
int main() {
    yyparse();
    printf("Enter an expression: ");
    
    /* Store the input expression in a buffer and pass it to
       the parser. */
    char expression[50];
    scanf("%s",expression);
    yyparse(expression);
    return 0;
}