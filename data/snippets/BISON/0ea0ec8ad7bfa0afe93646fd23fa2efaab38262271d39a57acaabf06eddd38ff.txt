%token NUMBER          //defines a token for numbers
%token VARIABLE        //defines a token for variables
%token OPERATOR        //defines a token for operators
%token EQUATION        //defines a token for equations

//start symbol
%start S

S: EQUATION            //rule for start symbol S, generates an equation
    | NUMBER            //rule for start symbol S, generates a number
    | VARIABLE          //rule for start symbol S, generates a variable
    | S OPERATOR S;     //rule for start symbol S, generates an operation with two S symbols

EQUATION: VARIABLE '=' S;      //rule for generating an equation with a variable on the left and an S symbol on the right

%%
//input grammar goes here
%%

//action code section
int main() {
    yyparse();                  //parses the input using the generated grammar rules
}

//function to handle numbers
void handle_number() {
    printf("Number found!");
    //additional code for handling numbers
}

//function to handle variables
void handle_variable() {
    printf("Variable found!");
    //additional code for handling variables
}

//function to handle operators
void handle_operator() {
    printf("Operator found!");
    //additional code for handling operators
}

//function to handle equations
void handle_equation() {
    printf("Equation found!");
    //additional code for handling equations
}

//function to handle errors
void yyerror(char *msg) {
    printf("Error: %s", msg);
    //additional error handling code
}

//lexer function to identify tokens and return appropriate values
int yylex() {
    int ch = getchar();
    if(ch == '\n')
        return 0;
    switch(ch) {
        case '0': case'1': case'2': case'3': case'4':
        case '5': case'6': case'7': case'8': case'9':
            yyval = NUMBER;
            return NUMBER;
        case '=':
            yyval = EQUATION;
            return EQUATION;
        case '+': case '-': case '*': case '/':
            yyval = OPERATOR;
            return OPERATOR;
        default:
            if(isalpha(ch)) {     //checks for any alphabet characters
                ungetc(ch, stdin); //puts the character back into the input stream
                yyval = VARIABLE;
                return VARIABLE;
            }
            else if(isspace(ch)) { //ignores whitespace characters
                return yylex();
            }
            else {  //handles invalid tokens
                yyerror("Invalid token found!");
                return -1;
            }
    }
}