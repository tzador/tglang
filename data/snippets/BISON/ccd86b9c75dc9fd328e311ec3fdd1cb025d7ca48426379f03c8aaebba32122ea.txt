%{
// This is a code block that declares variables and functions
int num1, num2;
int multiply(int x, int y) {
  return x * y;
}
%}

// This is a declaration section where we define our tokens and rules
%token <num> NUMBER
%token <operator> PLUS MINUS MULT DIV

%left PLUS MINUS
%left MULT DIV

// This section defines our grammar rules
%%
start: expr { printf("The result is: %d\n", $1); };

expr: NUMBER                            { $$ = $1; }
    | expr PLUS expr                    { $$ = $1 + $3; }
    | expr MINUS expr                   { $$ = $1 - $3; }
    | expr MULT expr                    { $$ = $1 * $3; }
    | expr DIV expr                     { $$ = $1 / $3; };

%%

// This is the code section where we implement our grammar
#include <stdio.h>
#include "lex.yy.c"

int main() {
  printf("Enter two numbers: ");
  scanf("%d %d", &num1, &num2);

  int result = multiply(num1, num2);
  printf("The product is: %d\n", result);

  yyparse(); // this function parses the input according to our grammar rules
  yylex_destroy(); // deallocating resources used by lexer
  return 0;
}