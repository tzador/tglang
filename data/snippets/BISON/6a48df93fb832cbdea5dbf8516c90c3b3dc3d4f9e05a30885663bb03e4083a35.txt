/* Simple arithmetic grammar in BISON */

/* declare the start symbol */
%start expression

/* declare the tokens */
%token DIGIT
%token ADD
%token SUBTRACT
%token MULTIPLY
%token DIVIDE

/* declare the precedence */
%left ADD SUBTRACT
%left MULTIPLY DIVIDE

%%

/* define the grammar rules */
expression : expression ADD term
           | expression SUBTRACT term
           | term
           ;

term : term MULTIPLY factor
     | term DIVIDE factor
     | factor
     ;

factor : DIGIT
       | ADD DIGIT
       | SUBTRACT DIGIT
       ;

%%

int main(){
    /* declare the input string */
    char input[100];

    /* prompt user for input and read it into the string */
    printf("Enter the arithmetic expression: ");
    scanf("%s", &input);

    /* initialize the parser with the input string */
    YY_BUFFER_STATE buffer_state = yy_scan_string(input);

    /* parse the input string using the grammar rules */
    yyparse();

    /* destroy the buffer state after parsing */
    yy_delete_buffer(buffer_state);
}

/* define the functions for each grammar rule */
void expression(expression* exp1, expression* exp2, char* operator){
    switch(operator){
        case ADD:
            printf("%d + %d", exp1->value, exp2->value);
            value = exp1->value + exp2->value;
            break;
        case SUBTRACT:
            printf("%d - %d", exp1->value, exp2->value);
            value = exp1->value - exp2->value;
            break;
    }
}

void term(term* term1, term* term2, char* operator){
    switch(operator){
        case MULTIPLY:
            printf("%d * %d", term1->value, term2->value);
            value = term1->value * term2->value;
            break;
        case DIVIDE:
            printf("%d / %d", term1->value, term2->value);
            value = term1->value / term2->value;
            break;
    }
}

void factor(int digit1, int digit2, char* operator){
    switch(operator){
        case ADD:
            printf("%d", digit2);
            value = digit2;
            break;
        case SUBTRACT:
            printf("%d", -digit2);
            value = -digit2;
            break;
        default:
            printf("%d", digit1);
            value = digit1;
            break;
    }
}