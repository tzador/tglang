%{
  // This is a code snippet in BISON
  // The following code defines the grammar rules for a simple calculator program
  // It includes basic arithmetic operations and parentheses for order of operations
  // The output of this code is the result of the arithmetic expression
%}

%token NUMBER

%%

input: // Specifies the start rule
  | expr { printf("%d\n", $1); } // Prints the result of the expression
  ;

expr: // Defines the expression rule
  | expr '+' expr { $$ = $1 + $3; } // Addition operation
  | expr '-' expr { $$ = $1 - $3; } // Subtraction operation
  | expr '*' expr { $$ = $1 * $3; } // Multiplication operation
  | expr '/' expr { $$ = $1 / $3; } // Division operation
  | '-' expr %prec UMINUS { $$ = -$2; } // Unary minus operation
  | '(' expr ')' { $$ = $2; } // Parentheses for order of operations
  | NUMBER { $$ = atoi($1); } // Converts token to integer
  ;

%%

int main() {
  yyparse(); // Parses the input using the defined grammar rules
  return 0;
}