/* This is a complex BISON code snippet */

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* Define external variable to store final calculated value */
double finalValue;
%}

/* Define grammar rules for arithmetic expressions */
expression: /* empty */
    | expression '+' factor { finalValue = $1 + $3; }
    | expression '-' factor { finalValue = $1 - $3; }
    | expression '*' factor { finalValue = $1 * $3; }
    | expression '/' factor { finalValue = $1 / $3; }
    | factor { finalValue = $1; };

factor:
    NUM { finalValue = $1; }
    | '(' expression ')' { finalValue = $2; };

%%

/* Define lexical analyzer to read input tokens */
%{
double yylval;
#define NUM 259 /* Token type for numbers */
/* Function to convert string to double */
double stringToDouble(char *s) {
    double value = 0;
    int i = 0;
    int decimal = 0; /* Flag to check for decimal point */
    while (s[i] != '\0') {
        if (s[i] == '.') {
            decimal = 1;
        } else {
            value = value * 10 + (s[i] - '0');
            if (decimal) {
                decimal++;
            }
        }
        i++;
    }
    while (decimal) {
        value /= 10;
        decimal--;
    }
    return value;
}
%}

/* Define regular expressions for token types */
DIGIT [0-9]
SPACE [ \t]

/* Define rules to recognize tokens */
%%
 {DIGIT}+ { yylval = stringToDouble(yytext); return NUM; } /* Recognize numbers */
 {SPACE}+ /* Skip spaces and tabs */
 /* Handle unexpected characters */
. printf("Illegal character '%s'\n", yytext); exit(1);

%%

/* Driver code for the parser */
int main(void) {
    /* Initialize lexer */
    extern FILE *yyin;
    extern int yyparse();
    yyin = fopen("input.txt", "r");
    /* Parse the input and print final calculated value */
    if (yyparse() == 0) {
        printf("Final value: %lf\n", finalValue);
    } else {
        printf("An error occurred during parsing.\n");
    }
    return 0;
}