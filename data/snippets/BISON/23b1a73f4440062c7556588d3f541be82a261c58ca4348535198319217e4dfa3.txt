%{
   /* This is a header section where we can declare variables and functions */
   #include <stdio.h>

   int count = 0; // variable to keep track of the number of tokens

   /* Function to print tokens as they are recognized */
   void print_token(int type, char* token){
       /* type is the token type and token is the value of the token */
       printf("Token type: %d\n", type);
       printf("Token value: %s\n", token);
       count++; // increment token count
   }
 %}

 /* Bison declaration section */
 %token NUMBER // declare a token type for numbers
 %token PLUS // declare a token type for the plus sign
 %token MINUS // declare a token type for the minus sign

 /* Bison rules section */
 %%
 expression: NUMBER PLUS NUMBER { // Rule for adding two numbers
     print_token(PLUS, "+"); // Print the plus sign
     print_token(NUMBER, $1); // Print the first number token
     print_token(NUMBER, $3); // Print the second number token
 }
 ;

 expression: NUMBER MINUS NUMBER { // Rule for subtracting two numbers
     print_token(MINUS, "-"); // Print the minus sign
     print_token(NUMBER, $1); // Print the first number token
     print_token(NUMBER, $3); // Print the second number token
 }
 ;

 /* Bison main function */
 int main(){
     /* Prompt user to enter an expression */
     printf("Enter an expression: ");
     /* Parse the input using bison */
     yyparse();
     /* Print the number of tokens generated */
     printf("Total number of tokens: %d\n", count);
     return 0;
 }
 %%
 
 /* Flex declaration section */
 %{
   #include "parser.tab.h" // include the bison-generated header file
 %}

 /* Regex rules section */
 %%
 [0-9]+ // Regex for numbers
    yylval = atoi(yytext); // Assign the value of the number to the yylval variable, a global variable in bison
    return NUMBER; // Return the token type for numbers

 "+" // Regex for the plus sign
    return PLUS; // Return the token type for the plus sign

 "-" // Regex for the minus sign
    return MINUS; // Return the token type for the minus sign

 . // Regex for any other character, e.g. whitespace
    // Ignore it
 %%

 /* Flex main function */
 int yywrap(){
     return 1; // Indicate end of input
 }
 
 /* Execute the parser */
 int main(){
   /* Prompt user to enter an expression */
   printf("Enter an expression: ");
   /* Call lex to scan and tokenize the input */
   yylex();
   /* Call the bison-generated parser function */
   yyparse();
   return 0;
 }