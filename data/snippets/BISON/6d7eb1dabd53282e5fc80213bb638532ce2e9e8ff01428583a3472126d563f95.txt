%{
#include <stdio.h>

// This is a sample BISON code snippet that parses a basic calculator expression
// and evaluates it using a stack.

// First, we define the tokens and their regular expressions
%}

%token NUMBER

%%

// Next, we define the grammar rules for the calculator expression
calc: expr { printf("Result: %d\n", $1); };

expr: NUMBER
    | expr '+' expr { $$ = $1 + $3; }
    | expr '-' expr { $$ = $1 - $3; }
    | expr '*' expr { $$ = $1 * $3; }
    | expr '/' expr { $$ = $1 / $3; }
    | '(' expr ')' { $$ = $2; };

%%

// After defining the grammar rules, we write the code to evaluate the expression using a stack
void evaluate(char *input) {
    int len = strlen(input);
    int stack[len];
    int top = -1;

    // Loop through the input string
    for (int i = 0; i < len; i++) {
        if (isdigit(input[i])) {
            // If the current character is a digit, push it onto the stack
            top++;
            stack[top] = input[i] - '0';
        }
        else if (input[i] == '+') {
            // If the current character is '+', pop the top two values
            // from the stack and push the sum onto the stack
            int val1 = stack[top];
            top--;
            int val2 = stack[top];
            top--;
            stack[top] = val2 + val1;
            top++;
        }
        else if (input[i] == '-') {
            // If the current character is '-', pop the top two values
            // from the stack and push the difference onto the stack
            int val1 = stack[top];
            top--;
            int val2 = stack[top];
            top--;
            stack[top] = val2 - val1;
            top++;
        }
        else if (input[i] == '*') {
            // If the current character is '*', pop the top two values
            // from the stack and push the product onto the stack
            int val1 = stack[top];
            top--;
            int val2 = stack[top];
            top--;
            stack[top] = val2 * val1;
            top++;
        }
        else if (input[i] == '/') {
            // If the current character is '/', pop the top two values
            // from the stack and push the quotient onto the stack
            int val1 = stack[top];
            top--;
            int val2 = stack[top];
            top--;
            stack[top] = val2 / val1;
            top++;
        }
        else if (input[i] == '(') {
            // If the current character is '(', push it onto the stack
            top++;
            stack[top] = input[i];
        }
        else if (input[i] == ')') {
            // If the current character is ')', pop the top two values
            // from the stack, evaluate the expression and push the result onto the stack
            int val1 = stack[top];
            top--;
            int val2 = stack[top];
            top--;
            stack[top] = val2;
        }
    }

    // Print the final result from the stack
    printf("Result: %d\n", stack[top]);
}

// Finally, we write the main function to take user input, call the evaluate function
// and print the result
int main() {
    char input[100];
    printf("Enter a basic calculator expression: ");
    scanf("%s", input);
    evaluate(input);
}