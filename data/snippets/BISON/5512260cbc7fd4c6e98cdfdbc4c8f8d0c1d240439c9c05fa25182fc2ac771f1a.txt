%token LPAREN            /* left parenthesis */
%token RPAREN            /* right parenthesis */
%token PLUS              /* addition operator */
%token MINUS             /* subtraction operator */
%token TIMES             /* multiplication operator */
%token DIVIDE            /* division operator */
%token NUMBER            /* number token */
%token VARIABLE          /* variable token */

%%

expr: NUMBER
    | VARIABLE
    | LPAREN expr RPAREN
    | expr PLUS expr
    | expr MINUS expr
    | expr TIMES expr
    | expr DIVIDE expr
    ;

%%

int calculate(expr* e) {
    switch (e->kind) {
    case NUMBER:
        return e->value; 
    case VARIABLE:
        return variables[e->index];
    case PLUS:
        return calculate(e->lhs) + calculate(e->rhs);
    case MINUS:
        return calculate(e->lhs) - calculate(e->rhs);
    case TIMES:
        return calculate(e->lhs) * calculate(e->rhs);
    case DIVIDE:
        return calculate(e->lhs) / calculate(e->rhs);
    }
}