%%

/* This is a grammar rule to match a simple arithmetic expression.
   It matches any expression that consists of two operands (numbers)
   and an operator (+, -, *, or /) */

expr: NUMBER '+' NUMBER   { // this action is performed when the rule is matched
                             printf("The sum of %d and %d is %d.", $1, $3, $1+$3);
                             // $1 and $3 are the operands matched by the first and third patterns respectively
                           }
     | NUMBER '-' NUMBER   { // match a subtraction expression
                             printf("The difference between %d and %d is %d.", $1, $3, $1-$3);
                           }
     | NUMBER '*' NUMBER   { // match a multiplication expression
                             printf("The product of %d and %d is %d.", $1, $3, $1*$3);
                           }
     | NUMBER '/' NUMBER   { // match a division expression
                             printf("The quotient of %d and %d is %d.", $1, $3, $1/$3);
                           }
     ;

%%

/* When the input matches the above rule, the following code will be executed. */

int main(int argc, char *argv[]) {
    int result;
    yyparse(); // call the parser generated by flex to match the input against the grammar
    printf("Result: %d", result);
    return 0;
}