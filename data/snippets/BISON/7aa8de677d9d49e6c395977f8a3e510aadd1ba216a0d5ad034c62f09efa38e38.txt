// Declare variables for start and end indices
int start, end;

// Define the grammar rules
Expr: NumExpr | BoolExpr | VarExpr;
NumExpr: Num | '(' NumExpr ')' | NumExpr BinOp NumExpr;
BoolExpr: Bool | '(' BoolExpr ')' | BoolExpr BinOp BoolExpr;
VarExpr: ID | '(' VarExpr ')' | VarExpr BinOp VarExpr;

Num: /[0-9]+(\.[0-9]+)?/; // Regular expression for a numeric value
Bool: /true|false/; // Regular expression for a boolean value
ID: /[a-zA-Z_][a-zA-Z0-9_]*/; // Regular expression for a variable name

BinOp: '+' | '-' | '*' | '/';

%%

// Define the start and end keywords for expression parsing
%start Expr
%end "end"

// Define the operator associativity and precedence rules
%left '+' '-'
%left '*' '/'
%right '^'
%nonassoc NEG

// Define the expression parsing rules
Expr:
    %prec NEG '-' Expr %prec NEG { // Unary minus operation
        printf("Negative expression: %d", -$2);
        $$ = -$2;
    }
    | Expr '+' Expr { // Binary addition operation
        printf("Addition: %d", $1 + $3);
        $$ = $1 + $3;
    }
    | Expr '-' Expr { // Binary subtraction operation
        printf("Subtraction: %d", $1 - $3);
        $$ = $1 - $3;
    }
    | Expr '*' Expr { // Binary multiplication operation
        printf("Multiplication: %d", $1 * $3);
        $$ = $1 * $3;
    }
    | Expr '/' Expr { // Binary division operation
        printf("Division: %d", $1 / $3);
        $$ = $1 / $3;
    }
    | Expr '^' Expr { // Binary exponentiation operation
        printf("Exponent: %d", pow($1, $3));
        $$ = pow($1, $3);
    }
    | NumExpr '(' Expr ')' { // Bracketed expression
        printf("Bracket expression: %d", $2);
        $$ = $2;
    }
    | ID '(' VarExpr ')' { // Function call
        printf("Function call: %s(%d)", $1, $3);
        $$ = func($1, $3);
    }
    | BoolExpr '{' Expr '}' { // Boolean expression
        printf("Boolean expression: %s", $2 ? "true" : "false");
        $$ = $2;
    }
    | VarExpr BinOp VarExpr { // Variable operation
        printf("Variable operation: %s %s %s", $1, $2, $3);
        $$ = var_operation($1, $2, $3);
    }
    | VarExpr '=' Expr { // Variable assignment
        printf("Variable assignment: %s = %d", $1, $3);
        $$ = var_assign($1, $3);
    }
    | 'end' { // End of expression
        printf("End of expression.");
        $$ = 0;
    }
    ;

// Define functions for handling variable operations
int func(char *name, int arg) {
    if (strcmp(name, "square") == 0) {
        return pow(arg, 2);
    } else if (strcmp(name, "cube") == 0) {
        return pow(arg, 3);
    }
    return 0;
}

int var_operation(char *var1, char *op, char *var2) {
    int val1 = get_variable(var1);
    int val2 = get_variable(var2);
    if (strcmp(op, "+") == 0) {
        return val1 + val2;
    } else if (strcmp(op, "-") == 0) {
        return val1 - val2;
    } else if (strcmp(op, "*") == 0) {
        return val1 * val2;
    } else if (strcmp(op, "/") == 0) {
        return val1 / val2;
    }
    return 0;
}

int var_assign(char *var, int val) {
    set_variable(var, val);
    return val;
}

// Define functions for getting and setting variable values
int get_variable(char *var) {
    // Get variable value from a storage system
    int val = 0;
    return val;
}

void set_variable(char *var, int val) {
    // Set variable value in a storage system
}