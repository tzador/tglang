%{
// This section is used to define macros and any other declarations
// that are needed for the parser.
#include <stdio.h>

// Define a data structure for storing employee information
typedef struct {
    char* name;
    int age;
    double salary;
} Employee;
%}

%token <int> NUMBER    // Define a token for integer numbers
%token <string> NAME   // Define a token for employee names
%token <float> SALARY  // Define a token for employee salaries

%%

program:
    /* This is the starting production rule for our program
       It is used to define what the overall structure of our
       BISON program will look like. */

    employee_list
    { printf("Successfully parsed a list of employees!"); }
    ;

employee_list:
    /* This production rule defines a list of employees.
       It will be used to parse the input and store the
       information for each employee in a data structure.
       This production rule also makes use of the %type
       directive to specify the type of the value that will
       be returned by the employee rule. */

    employee_list employee
    {
        $$[$$.size] = $<Employee>$;
        $$.size += 1;
    }
    | employee
    {
        $$ = (EmployeeList)malloc(sizeof(EmployeeList));
        $$->employees = (Employee*)malloc(sizeof(Employee));
        $$->size = 1;
        $$->employees[0] = $<Employee>$;
    }
    ;

employee:
    /* This production rule defines an individual employee.
       It will be used to parse the input and create an
       employee data structure for each employee in the input.
       This rule also makes use of the %union directive to
       specify the types of the different attributes of an
       employee. */

    NAME NUMBER SALARY
    {
        $$ = (Employee*)malloc(sizeof(Employee));
        $$->name = $<string>$;
        $$->age = $<int>$;
        $$->salary = $<float>$;
    }
    ;

%%

// The following code is used for error handling and reporting
int yyerror(const char* s){
    printf("Error: %s\n",s);
    return 0;
}

int main(void){
    yyparse();
    return 0;
}

// The following code is used to access the BISON generated code
/* This is the generated yylex() function which is used to tokenzine the input.
   This function will return the token type and value to the parser. */
extern "C" int yylex();

/* This function is used by the parser
   to get the next token from the input.
   It will be generated by BISON and use
   the yylex() function to get tokens. */
int yywrap(void){
    yylval = (union YYSTYPE)NULL;
    return 1;
}