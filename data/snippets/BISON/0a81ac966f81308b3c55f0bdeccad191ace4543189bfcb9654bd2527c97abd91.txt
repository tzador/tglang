%{
//This is a BISON code snippet that uses the built-in variables and functions to generate a parse tree for a mathematical expression
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
%}

%token NUM //defines the token for numbers
%left '+' '-' //defines the associativity and precedence for addition and subtraction
%left '*' '/' //defines the associativity and precedence for multiplication and division
%left '^' //defines the associativity and precedence for exponentiation

%%

//defines the start symbol for the grammar
Calc:
    | Expr { //parentheses are used to group multiple actions together
        //this action prints the result of the expression using the built-in printf function
        printf("Result: %f\n",$1);
      }
    ;

//defines the expression rule using the built-in variables $$
Expr:
      NUM       { $$ = $1; } //sets the value of $$ to the value of the NUM token
    | Expr '+' Expr { $$ = $1 + $3; } //adds the values of $$ and $3 and stores it in $$
    | Expr '-' Expr { $$ = $1 - $3; } //subtracts the value of $3 from $$ and stores it in $$
    | Expr '*' Expr { $$ = $1 * $3; } //multiplies the values of $$ and $3 and stores it in $$
    | Expr '/' Expr { $$ = $1 / $3; } //divides the value of $$ by $3 and stores it in $$
    | Expr '^' Expr { $$ = pow($1,$3); } //raises the value of $$ to the power of $3 using the built-in pow function
    | '(' Expr ')' { $$ = $2; } //parentheses are used to group expressions and return the value inside them
    ;

//defines the start symbol for the lexer
%%
//this code is used to read input from the user using the built-in scanf function and then calls the parser to generate a parse tree
int main()
{
    double result;
    printf("Enter a mathematical expression: ");
    scanf("%lf", &result);
    Calc();
    return 0;
}