%{
    /* Code section, can include imported libraries and global variables */
%}

%token <str> STRING       /* Define token for string datatype */
%token <int> INTEGER      /* Define token for integer datatype */
%token <bool> BOOLEAN     /* Define token for boolean datatype */

%% /* Bison rules section */

program : declarations functions main;
/* A program consists of declarations, functions, and the main function */

declarations : /* Optional statements */
                | declare_list declarations;

declare_list : type_declarations ID '=' expression ';'
                | conditional_declaration;

type_declarations : STRING      /* Define datatype token to be string datatype */
                    | INTEGER   /* Define datatype token to be integer datatype */
                    | BOOLEAN   /* Define datatype token to be boolean datatype */
                    ;

main : 'function' 'main' '(' ')' '{' body '}' /* Main function definition */

functions : function functions        /* Recursive rule for multiple function definitions */
            | function
            | /* Empty production, no function definitions */

function : 'function' type ID '(' parameters ')' '{' body '}' /* Function definition */

parameters : /* Optional parameters */
            | type ID ',' parameters
            | type ID;

body : /* Statements within the function body */;

conditional_declaration : 'if' '(' expression ')' statement 'else' conditional_declaration;

statement : 'print' '(' STRING ')'  /* Prints the given string value */
            | 'return' expression  /* Returns the value of the expression */
            | declare_list          /* Variable declaration inside the function body */
            | if_statement          /* If statement */
            | /* No-op */

expression : STRING        /* String literal */
                | INTEGER   /* Integer literal */
                | boolean   /* Boolean literal */
                | ID        /* Variable identifier */;

if_statement : 'if' '(' expression ')' '{' body '}' /* Conditional statement without 'else' */
                | 'if' '(' expression ')' '{' body '}' 'else' '{' body '}'; /* Conditional statement with 'else' */

int_declare : 'integer' ID '=' expression ';' /* Declare an integer variable and assign value */

bool_declare : 'boolean' ID '=' expression ';' /* Declare a boolean variable and assign value */

str_declare : 'string' ID '=' expression ';' /* Declare a string variable and assign value */