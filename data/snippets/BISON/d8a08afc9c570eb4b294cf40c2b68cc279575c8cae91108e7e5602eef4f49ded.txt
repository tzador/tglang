%%

/* This is a grammar for mathematical expressions involving addition and multiplication. */

multiplier:
    NUMBER
    | '(' expression ')'
    | multiplier '*' multiplier
    | multiplier '/' multiplier
    ;

addition:
    multiplier
    | addition '+' multiplier
    | addition '-' multiplier
    ;

expression:
    addition
    | '(' expression ')'
    ;

%%

/* Separates actions from grammar rules. */

/* The following code prints the result of the expression. */
%{
    #include <stdio.h>

    // yyerror function to handle syntax errors
    void yyerror (char *s) {
        fprintf (stderr, "%s\n", s);
    }

    // main function to run the parser
    int main() {
        yyparse();
        return 0;
    }
%}

/* Rules for handling tokens. */

%token NUMBER
%left '+' '-'
%left '*' '/'
%left UNARY_NEG

%%

/* Code for the actual actions that make up the rules. */

/* Handles multiplication operations. */
%%
multiplier:
    NUMBER {$$ = $1;} /* If the multiplier is a number, set $$ to that number. */
    | '(' expression ')'
        %prec UNARY_NEG {$$ = -$2;} /* If the multiplier is surrounded by parentheses, set $$ to negative of the expression inside. */
    | mul1:multipier '*' mul2:multipier
        {$$ = $1 * $3;} /* If the multiplier is in the form of mul1 * mul2, set $$ to the product of mul1 and mul2. */
    | mul1:multipier '/'
        {if ($2 == 0) {yyerror("Division by zero!");} /* Check for division by zero error. */
        else {$$ = $1 / $2;}} /* Set $$ to numerator divided by denominator. */
%%

/* Code to handle addition operations. */
%%
addition:
    add1:addition '+' add2:addition
        {$$ = $1 + $3;}
    | add1:addition '-' add2:addition
        {$$ = $1 - $3;}
    | multiplier
        {$$ = $1;}
%%

/* Code for handling expressions. */
%%
expression:
    addition
        {$$ = $1;} /* If the expression is a simple addition, set $$ to the result. */
    | '(' expr:expression ')'
        {$$ = $2;} /* If the expression is surrounded by parentheses, set $$ to the result inside. */
%%

/* Tokenizer function to recognize numbers and operators. */
%%
int yywrap() {
    return 1;
}

int yylex() {
    int c = getchar();
    if (c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    return c;
}