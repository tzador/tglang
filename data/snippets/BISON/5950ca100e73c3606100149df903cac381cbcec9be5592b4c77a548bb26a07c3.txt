%{
    /* Code to be included at the beginning of the generated parser */
    #include <math.h>
    #include <stdio.h>
    #include <string.h>
%}

%start expression /* Define the starting symbol */

%%

expression:
    identifier '=' term 
        { 
            /* Code to assign the value of the term to the identifier */
            printf("%s = %d", $1, $3); 
        }
    | 'print' '(' term ')' 
        {
            /* Code to print the value of the term */
            printf("%d", $2);
        }

term:
    '(' term ')'       
        { 
            /* Code to evaluate the expression within the parentheses */
            $$ = $2; 
        }
    | '-' term          
        { 
            /* Code to negate the value of the term */
            $$ = -$2; 
        }
    | term '+' term     
        { 
            /* Code to add the two terms */
            $$ = $1 + $3; 
        }
    | term '-' term     
        { 
            /* Code to subtract the second term from the first */
            $$ = $1 - $3; 
        }
    | term '*' term     
        { 
            /* Code to multiply the two terms */
            $$ = $1 * $3; 
        }
    | term '/' term     
        { 
            /* Code to divide the first term by the second */
            $$ = $1 / $3; 
        }
    | term '%' term     
        { 
            /* Code to find the remainder when dividing the first term by the second */
            $$ = $1 % $3; 
        }
    | term '^' term     
        { 
            /* Code to find the power of the first term raised to the second */
            $$ = pow($1, $3); 
        }
    | identifier        
        { 
            /* Code to retrieve the value of the identifier */
            $$ = $1; 
        }
    | number            
        { 
            /* Code to assign the value of the number to the term */
            $$ = $1; 
        }

identifier:
    [a-zA-Z]+          /* Define an identifier as one or more alphabet characters */

number:
    [0-9]+             /* Define a number as one or more numeric characters */

%%
/* Code to be included at the end of the generated parser */
int main() {
    yyparse();  /* Run the parser on the input */
    return 0;
}