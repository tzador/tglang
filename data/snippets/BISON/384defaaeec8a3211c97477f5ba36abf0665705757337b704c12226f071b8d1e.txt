/* A calculator grammar in BISON */

%token NUMBER
%left '+' '-'
%left '*' '/'
%left '^'

%%

calclist: /* empty */ | calclist exp '\n' { printf("= %d\n", $2); } ;

exp: NUMBER
    | exp '+' exp  { $$ = $1 + $3; }
    | exp '-' exp  { $$ = $1 - $3; }
    | exp '/' exp  { $$ = $1 / $3; }
    | exp '*' exp  { $$ = $1 * $3; }
    | '-' exp      { $$ = -$2; }
    | exp '^' exp  { $$ = pow($1, $3); }
    ;


# // This is a comment in BISON
# // The code above defines the BISON grammar for a basic calculator

%%

int main()
{
    yyparse(); // Parse the input and print out the result
    return 0;
}

/* This code snippet can be used to create a basic calculator using BISON,
which is a popular parser generator for context-free grammars.
First, we define the tokens we will be using, in this case only the NUMBER token.
Next, we define the precedence and associativity of the operators, with '*' and '/' having higher precedence than '-' and '+'.
Then, we define the calclist rule which can contain multiple expressions separated by newlines.
Each expression can either be a single NUMBER token, or a combination of other expressions and operators.
The '$$' symbol represents the result of the current expression, while $1, $2, $3 represent the values of the first, second, and third elements in the expression respectively.
Finally, we have a main function which calls the yyparse() function to parse the input and print out the result. */