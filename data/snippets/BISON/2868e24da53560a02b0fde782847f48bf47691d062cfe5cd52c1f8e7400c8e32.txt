%%
/* Definition Section */
program : declaration_list
	 | declaration_list statement_list
	 ;

declaration_list : declaration
			 	| declaration_list declaration
			 	;

declaration : data_type identifier SEMICOLON
			| TYPE identifier OPEN_BRACKET constant_expression CLOSE_BRACKET SEMICOLON
			;

statement_list : statement
			   | statement_list statement
			   ;

statement : expression SEMICOLON
		  | conditional_statement
		  | loop_statement
		  | jump_statement
		  ;

expression : assignment_expression
		   | add_op expression
		   | multiply_op expression
		   | OPEN_PAREN expression CLOSE_PAREN
		   ;

assignment_expression : identifier ASSIGN_OP expression
					   | identifier ADD_ASSIGN_OP expression
					   | identifier SUB_ASSIGN_OP expression
					   | identifier MUL_ASSIGN_OP expression
					   | identifier DIV_ASSIGN_OP expression
					   ;

conditional_statement : IF OPEN_PAREN expression CLOSE_PAREN statement
					  | IF OPEN_PAREN expression CLOSE_PAREN statement ELSE statement
					  ;

loop_statement : WHILE OPEN_PAREN expression CLOSE_PAREN statement
			   | FOR OPEN_PAREN expression SEMICOLON expression SEMICOLON expression CLOSE_PAREN statement
			   ;

jump_statement : CONTINUE SEMICOLON
			   | BREAK SEMICOLON
			   | RETURN expression SEMICOLON
			   ;


%%
/* Rules Section */
/* Accepts identifiers and reserved keywords */
identifier : [a-zA-Z_][a-zA-Z0-9_]*
		   ;

/* Accepts integers, reals, and constants in scientific notation */
constant_expression : [0-9]+
					| [0-9]*\.[0-9]+
					| [0-9]+[Ee][+-]?[0-9]+
					;

%%

/* C Code Section */
#include <stdio.h>
#include <stdlib.h>

/* Function to print "Hello World" */
int main()
{
	printf("Hello World\n");
	return 0;
}

/* Output:
Hello World
*/