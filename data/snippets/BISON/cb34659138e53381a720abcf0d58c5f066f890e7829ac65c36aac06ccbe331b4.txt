%token <value> NUMBER /* defines the token 'NUMBER' that holds an integer value */

%union { /* defines a union type to allow multiple types for the token value */
  int intval;
  float floatval;
}

%{
/* optional code to be included in the generated parser */
/* this section can include definitions, global variables, and any code you want to be executed */
/* in this case, we will define a global variable to store the sum of all numbers encountered in the input */
int total_sum = 0;
%}

%%
/* rules to define the grammar of our language */
start: /* base rule that defines the starting point for our parser */
  expr { /* code to be executed when the 'expr' rule is encountered */
    printf("The total sum is %d\n", total_sum); /* print the total sum of numbers */
  }
  | start expr /* recursively call start and expr to handle multiple expressions in the input */

expr: /* rule to define an expression */
  NUMBER { /* code to be executed when a 'NUMBER' token is encountered */
    if ($1.intval % 2 == 0) { /* check if the number is even */
      total_sum += $1.intval; /* add the number to the total sum */
      printf("%d is even\n", $1.intval); /* print a message indicating the number is even */
    }
  }
  | '-' expr { /* rule to handle negative numbers */
    int neg_num = $2.intval * -1; /* calculate the negative value of the number */
    printf("%d is negative\n", neg_num); /* print a message indicating the number is negative */
  }
  | '(' expr ')' { /* rule to handle parentheses */
    /* in this example, we will ignore parentheses and just return the value of the expression inside */
    $$ = $2; /* set the value of the expression to be the value inside the parentheses */
  }
  | expr '+' expr { /* rule to handle addition */
    $$ = $1.intval + $3.intval; /* calculate the sum of the two expressions and set it as the value of the current expression */
    printf("%d + %d = %d\n", $1.intval, $3.intval, $$); /* print the addition equation and result */
  }
  | expr '-' expr { /* rule to handle subtraction */
    $$ = $1.intval - $3.intval; /* calculate the difference of the two expressions and set it as the value of the current expression */
    printf("%d - %d = %d\n", $1.intval, $3.intval, $$); /* print the subtraction equation and result */
  }
  | expr '*' expr { /* rule to handle multiplication */
    $$ = $1.intval * $3.intval; /* calculate the product of the two expressions and set it as the value of the current expression */
    printf("%d * %d = %d\n", $1.intval, $3.intval, $$); /* print the multiplication equation and result */
  }
  | expr '/' expr { /* rule to handle division */
    $$ = $1.intval / $3.intval; /* calculate the quotient of the two expressions and set it as the value of the current expression */
    printf("%d / %d = %d\n", $1.intval, $3.intval, $$); /* print the division equation and result */
  }
  | expr '%' expr { /* rule to handle modulus */
    $$ = $1.intval % $3.intval; /* calculate the remainder of the two expressions and set it as the value of the current expression */
    printf("%d %% %d = %d\n", $1.intval, $3.intval, $$); /* print the modulus equation and result */
  }
  | expr '^' expr { /* rule to handle exponentiation */
    /* for simplicity, we will only handle exponentiation between positive integers */
    int base = $1.intval; /* store the base value */
    int exp = $3.intval; /* store the exponent value */
    int result = 1; /* initialize the result to 1 */

    /* loop through the exponent value and multiply the base by itself */
    for (int i = 0; i < exp; i++) {
      result *= base;
    }

    $$ = result; /* set the result as the value of the current expression */
    printf("%d ^ %d = %d\n", $1.intval, $3.intval, $$); /* print the exponentiation equation and result */
  }
  | '-' expr %prec NEG { /* rule to handle negative exponents */
    int base = $2.intval; /* store the base value */
    int exp = -1 * $2.intval; /* calculate the absolute value of the exponent */
    float result = 1.0; /* initialize the result to 1 as we will be dealing with floats */

    /* loop through the exponent value and divide 1 by the base */
    for (int i = 0; i < exp; i++) {
      result = result / base;
    }

    $$ = result; /* set the result as the value of the current expression */
    printf("1 / %d ^ %d = %f\n", base, $2.intval, $$); /* print the negative exponent equation and result */
  }
  | expr '&' expr { /* rule to handle bitwise AND */
    $$ = $1.intval & $3.intval; /* calculate the bitwise AND of the two expressions and set it as the value of the current expression */
    printf("%d & %d = %d\n", $1.intval, $3.intval, $$); /* print the bitwise AND equation and result */
  }
  | expr '|' expr { /* rule to handle bitwise OR */
    $$ = $1.intval | $3.intval; /* calculate the bitwise OR of the two expressions and set it as the value of the current expression */
    printf("%d | %d = %d\n", $1.intval, $3.intval, $$); /* print the bitwise OR equation and result */
  }
  | expr '^' expr { /* rule to handle bitwise XOR */
    $$ = $1.intval ^ $3.intval; /* calculate the bitwise XOR of the two expressions and set it as the value of the current expression */
    printf("%d ^ %d = %d\n", $1.intval, $3.intval, $$); /* print the bitwise XOR equation and result */
  }
  | '~' expr { /* rule to handle bitwise NOT */
    $$ = ~$2.intval; /* calculate the bitwise NOT of the expression and set it as the value of the current expression */
    printf("~%d = %d\n", $2.intval, $$); /* print the bitwise NOT equation and result */
  }
  | expr '<<' expr { /* rule to handle bitwise left shift */
    $$ = $1.intval << $3.intval; /* calculate the bitwise left shift of the expression and set it as the value of the current expression */
    printf("%d << %d = %d\n", $1.intval, $3.intval, $$); /* print the bitwise left shift equation and result */
  }
  | expr '>>' expr { /* rule to handle bitwise right shift */
    $$ = $1.intval >> $3.intval; /* calculate the bitwise right shift of the expression and set it as the value of the current expression */
    printf("%d >> %d = %d\n", $1.intval, $3.intval, $$); /* print the bitwise right shift equation and result */
  }
  | '\'' expr '\'' { /* rule to handle single quoted characters */
    /* in this example, we will ignore the quotes and just return the value of the character inside */
    $$ = $2; /* set the value of the expression to be the value inside the quotes */
  }
  | '"' expr '"' { /* rule to handle double quoted strings */
    /* in this example, we will ignore the quotes and just return the value of the string inside */
    $$ = $2; /* set the value of the expression to be the value inside the quotes */
  }
  | expr '=' expr { /* rule to handle variable assignment */
    /* in this example, we will ignore assignments and just return the value of the expression on the right */
    $$ = $3; /* set the value of the expression to be the value on the right side of the assignment */
  }
  | expr '(' ')' { /* rule to handle function calls */
    /* in this example, we will ignore the function call and just return the value of the expression */
    $$ = $1; /* set the value of the expression to be the value of the function call */
  }
  | expr '[' expr ']' { /* rule to handle array indexing */
    /* in this example, we will ignore array indexing and just return the value of the expression */
    $$ = $1; /* set the value of the expression to be the value of the array indexing */
  }
  | expr '.' expr { /* rule to handle struct field access */
    /* in this example, we will ignore struct field access and just return the value of the expression */
    $$ = $1; /* set the value of the expression to be the value of the struct field access */
  }
  | '{' exprlist '}' { /* rule to handle comma separated expressions inside curly brackets */
    $$ = $2; /* set the value of the expression to be the value of the last expression inside the curly brackets */
  }
  | '{' '}' { /* empty curly brackets have a value of 0 */
    $$ = 0;
  }

exprlist: /* rule to handle a list of expressions separated by commas */
  exprlist ',' expr { /* recursively call exprlist and add the current expression to the list */
    $1.push_back($3); /* add the current expression to the list */
    $$ = $1; /* set the value of the list as the value of the last expression */
  }
  | expr { /* rule to handle a single expression */
    $$ = std::vector<int>(1, $1); /* create a list with a single value, which is the value of the expression */
  }
  | exprlist ',' '&' { /* handle the address of operator */
    /* in this example, we will ignore the address of operator and just return the value of the last expression */
    $$ = $1; /* set the value of the list as the value of the last expression */
  }
  | exprlist ',' '*' { /* handle the dereference operator */
    /* in this example, we will ignore the dereference operator and just return the value of the last expression */
    $$ = $1; /* set the value of the list as the value of the last expression */
  }

%%
/* optional user-defined functions can be placed after the rules section before the end of the file */
/* in this case, we will define a function to print a factorial of a given number using recursion */
void print_factorial(int num) {
  /* base case */
  if (num <= 1) {
    printf("1\n");
    return;
  }

  /* recursive case */
  print_factorial(num - 1); /* call the function with a smaller number */
  int factorial = 1; /* initialize the factorial to 1 */
  for (int i = 1; i <= num; i++) {
    factorial *= i; /* calculate the factorial */
  }
  printf("%d\n", factorial); /* print the factorial */
}

/* entry point for our parser */
int main() {
  /* create a new Bison buffer and initialize the parser */
  /* in this example, we will read from standard input, but the buffer can also be initialized with a file or a string */
  yyscan_t scanner;
  yylex_init(&scanner);
  yyset_in(stdin, scanner);

  /* call the parser to handle the input */
  yyparse(scanner);

  /* destroy the buffer and free any memory allocated by the parser */
  yylex_destroy(scanner);
  return 0;
}