/* Sample Bison program */
%{
/* Code section */

#include <stdio.h>
int val;

%}

/* Declarations section */

%token NUMBER
%left '+' '-'

%%

/* Grammar rules section */

list: /* empty */
    | list exp '\n'   { printf("The value of the expression is %d\n", $2); }
    ;

exp: exp '+' exp
    | exp '-' exp    { $$ = $1 - $3; }
    | NUMBER          { $$ = $1; }
    ;

%%

/* Bison main function */

int main()
{
    /* Initialization section */
    val = 10;

    /* Parser section */
    yyparse();

    /* Return statement */
    return 0;
}

/* Lexical Analyzer section */

int yylex()
{
    int c;
    c = getchar();
    if (c >= '0' && c <= '9')
    {
        yylval = c - '0';
        return NUMBER;
    }
    return c;
}

/* Error handling section */

void yyerror(char *s)
{
    fprintf(stderr, "%s\n", s);
}

/* End of program */