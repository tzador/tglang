%{
  // This section allows for defining variables and including necessary files
  int num;
  #include <stdio.h>
  %}

// This section declares the tokens used in the grammar
%token <num> INTEGER
%token <num> FLOAT

// This section defines the start symbol of the grammar
%start number

// This section defines the grammar rules
%%
number: INTEGER {$$=$1;} // Gives the value of the token to the variable '$$'

| FLOAT {$$=$1;}

| number '+' number {$$=$1+$3;} // Basic arithmetic operations
| number '-' number {$$=$1-$3;}
| number '*' number {$$=$1*$3;}
| number '/' number {$$=$1/$3;}
| number '%' number {$$=$1%$3;}

| number '^' number {% // Power function
  int result = 1;
  for(int i=0; i<$3; i++){
    result *= $1;
  }
  $$ = result;
%}

// This section handles the errors in input
%error-verbose

// This section includes necessary functions and defines the main function
%%
int main(){
  int result = yyparse(); // Calls the parser to parse the input
  printf("Result: %d", result); // Prints the result of the input
  return 0;
}

// This section includes the necessary functions to tokenize the input
int yyerror(char *msg){
  fprintf(stderr, "Error: %s", msg); // Prints error message
  return -1;
}

int yywrap(){
  return 1;
}

int yylex(){
  char token[100];
  scanf("%s", token); // Scans input as string
  int length = strlen(token);
  if(token[length-1] == 'f'){ // Checks if token is a float
    yylval.num = atof(token); // Stores float value in yylval variable
    return FLOAT; // Returns token type
  }
  else{
    yylval.num = atoi(token); // Stores integer value in yylval variable
    return INTEGER; // Returns token type
  }
}