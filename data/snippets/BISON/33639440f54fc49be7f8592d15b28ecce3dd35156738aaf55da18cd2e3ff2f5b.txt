%token NUM         // declare token NUM
%token STR         // declare token STR

%{

int count = 0;      // initialize counter

%}

%%

statement:
    expression { count = count + 1; }  // increase count by 1 for each statement
;

expression:
    NUM         { printf("%d", $1); }  // print NUM
    | STR       { printf("%s", $1); }  // print STR
    | expression '+' expression       // add two expressions
    | expression '-' expression       // subtract two expressions
    | expression '*' expression       // multiply two expressions
    | expression '/' expression       // divide two expressions
    | '(' expression ')'              // group expression with parentheses
    | '-' expression                  // negate expression
    | expression '<' expression       // check if expression is less than
    | expression '>' expression       // check if expression is greater than
    | expression '%' expression       // calculate remainder of two expressions
    | expression '&' expression       // perform bitwise AND on two expressions
    | expression '|' expression       // perform bitwise OR on two expressions
    | expression '^' expression       // perform bitwise XOR on two expressions
    | '!' expression                  // negate expression
    | expression '?'                  // check if expression is nonzero
    | expression ':'                  // check if expression is zero
    | expression '=' expression       // assign expression to expression
    | expression '+=' expression      // increment expression by expression
    | expression '-=' expression      // decrement expression by expression
    | expression '*=' expression      // multiply expression by expression
    | expression '/=' expression      // divide expression by expression
    | expression '%=' expression      // calculate remainder of expression by expression
    | expression '&=' expression      // perform bitwise AND on expression and expression
    | expression '|=' expression      // perform bitwise OR on expression and expression
    | expression '^=' expression      // perform bitwise XOR on expression and expression
    ;

%%

// Function to count the number of statements in the input
int count_statements(char* input) {
    yyscan_t scanner;       // declare scanner
    YY_BUFFER_STATE buffer; // declare buffer
    int status;             // declare status variable

    // Initialize scanner
    if (yylex_init(&scanner)) {
        // handle error
    }

    // Open input file
    FILE* input_file = fopen(input, "r");

    // Set input file as the input source for the scanner
    buffer = yy_create_buffer(input_file, 16384);

    // Set the buffer as the current input for the scanner
    yy_switch_to_buffer(buffer, scanner);

    // Token variable to store current token
    int token;

    // Loop through the input until there are no more tokens
    while(token = yylex()) {
        if(token == 0) {
            break;      // end of input
        }
        else if(token == -1) {
            // handle error
        }
        else {
            // get next token
        }
    }

    // Free scanner and buffer
    yylex_destroy(scanner);
    yy_delete_buffer(buffer, scanner);

    // Return statement count
    return count;
}

// Main function
int main() {
    char* input = "input.txt";      // set input file
    printf("Number of statements: %d", count_statements(input));  // print statement count
    return 0;
}