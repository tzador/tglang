%{
// This is a lexer code that defines tokens used in the parser

// Declare variables used in the lexer
int count = 0; // Counter for number of characters read
int num_int = 0; // Number of integers
int num_float = 0; // Number of floats
%}

// Define regular expressions for tokens
DIGIT [0-9] // Matches any single digit
INT {DIGIT}+ // Matches one or more digits
FLOAT {DIGIT}+"."{DIGIT}* // Matches a float with decimal point
WS [ \t\n]+ // Matches any whitespace (space, tab, or newline)

// Define tokens
%%
{INT}       { num_int++; return "INTEGER"; } // Matches an integer, increments counter
{FLOAT}     { num_float++; return "FLOAT"; } // Matches a float, increments counter
{WS}        { /* Do nothing for whitespace */ }
.           { count++; /* Count all other characters */ }

// This is the parser code that uses the tokens defined above
%%
// Define non-terminals
program : statements
        {
            /* Actions to perform when the production is recognized */
            printf("Number of integers: %d\n", num_int);
            printf("Number of floats: %d\n", num_float);
        };

statements : statements statement // Recursively match statements
           | statement // Base case
           ;

statement : INTEGER // Match an integer token
           {
               /* Perform actions using the matched token */
               printf("Integer value: %s\n", yytext);
           }
          | FLOAT // Match a float token
           {
               /* Perform actions using the matched token */
               printf("Float value: %s\n", yytext);
           };

// Invoke the parser by passing input through the lexer
int main()
{
    yylex(); // Perform lexical analysis on input
    yyparse(); // Start parsing using the tokens defined above
    return 0;
}