%token NUMBER     /* define token for numerical values */
%token OPERATOR   /* define token for mathematical operator */
%token VARIABLE   /* define token for variables */

%%
/* define grammar rules for mathematical expressions */
Expression: NUMBER | VARIABLE | Expression OPERATOR Expression ;
%%
/* define function to evaluate expressions*/
int eval(Expression e)
{
    switch(e.type)
    {
        case NUMBER:    /* if expression is a numerical value, return value */
            return e.value;
        case OPERATOR:  /* if expression is an operator, perform corresponding operation */
            switch(e.oper)
            {
                case '+':   /* addition */
                    return eval(e.left) + eval(e.right);
                case '-':   /* subtraction */
                    return eval(e.left) - eval(e.right);
                case '*':   /* multiplication */
                    return eval(e.left) * eval(e.right);
                case '/':   /* division */
                    return eval(e.left) / eval (e.right);
                default:
                    yyerror("Unknown operator.");
                    exit(1);
            }
        case VARIABLE:  /* if expression is a variable, retrieve and return its value */
            return get_variable_value(e.varname);
        default:
            yyerror("Unknown expression type.");
            exit(1);
    }
}

/* define function to assign values to variables */
void assign(Expression var, Expression val)
{
    /* check if variable is already defined */
    if(is_variable_defined(var.varname))
    {
        yyerror("Variable already defined.");
        exit(1);
    }
    else
    {
        /* assign value to variable and mark as defined */
        set_variable_value(var.varname, eval(val));
        set_variable_defined(var.varname);
    }
}

/* define function to handle syntax errors */
void yyerror(char *s)
{
    printf("%s", s);
}

int main(void)
{
    /* parse input and build abstract syntax tree */
    yyparse();
    
    /* evaluate and print result */
    printf("Result: %d", eval(result));
    
    /* assign value to variable x */
    Expression var;
    var.type = VARIABLE;
    var.varname = "x";
    Expression val;
    val.type = NUMBER;
    val.value = 5;
    assign(var, val);
    
    /* evaluate and print result */
    printf("Value of x: %d", eval(var));
    
    return 0;
}