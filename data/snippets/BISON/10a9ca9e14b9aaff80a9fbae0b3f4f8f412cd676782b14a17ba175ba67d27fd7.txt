%{
/* This is a complex BISON code snippet that uses multiple rules, actions and variables */
#include <stdio.h> // header file for standard input/output
int count = 0;  // variable to keep track of number of inputs
%}

%start expr
%token NUMBER
%left '+'
%left '*'
%left NEGATIVE

%%

expr: expr '+' expr { count++; } // rule to add two expressions
    | expr '*' expr { count++; } // rule to multiply two expressions
    | '-' expr %prec NEGATIVE { count++; } // rule to negate an expression 
    | NUMBER { $$ = $1; count++; } // rule to assign value to expression
    ;
    
%%

/* The following code is executed on a successful parse */
/* Prints the final result and number of inputs used */
int main() {
    yyparse();  // invoke parser
    printf("Final result: %d\n", $$); // print final result
    printf("Number of inputs: %d\n", count); // print number of inputs
    return 0;
}

/* The following code is executed on an error */
/* Prints an error message and exits */
int yyerror(const char *msg) {
    fprintf(stderr, "%s\n", msg); // print error message
    exit(1); // exit with error code
}