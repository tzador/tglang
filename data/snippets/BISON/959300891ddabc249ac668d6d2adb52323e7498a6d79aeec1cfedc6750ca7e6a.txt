%token <number> NUMBER // Declares a token for numbers
%token <string> WORD // Declares a token for strings
%token <identifier> ID // Declares a token for identifiers

%left '+' '-' // Declares left associativity for addition and subtraction
%left '*' '/' // Declares left associativity for multiplication and division
%right '^' // Declares right associativity for exponentiation

%%

Expression:             // Non-terminal rule for an expression
    NUMBER              // Expression can start with a number
    | WORD              // Expression can start with a string
    | ID                // Expression can start with an identifier
    | Expression '+' Expression // Addition operation
    | Expression '-' Expression // Subtraction operation
    | Expression '*' Expression // Multiplication operation
    | Expression '/' Expression // Division operation
    | Expression '^' Expression // Exponentiation operation, has highest precedence
    | '(' Expression ')'        // Allows for parenthesis in expression
    ;

%%

int main(int argc, char *argv[]) { // Main function
    // Evaluate expression and print result
    printf("%.2f", evaluate_expression(argv[1]));
    return 0;
}

double evaluate_expression(char *expression) {
    // Tokenize the input expression
    YY_BUFFER_STATE buffer = yy_scan_string(expression);
    yyparse();

    // Traverse through the abstract syntax tree and evaluate the expression
    double result = Evaluate(Tree);

    // Free up memory and return result
    yy_delete_buffer(buffer);
    return result;
}

doub