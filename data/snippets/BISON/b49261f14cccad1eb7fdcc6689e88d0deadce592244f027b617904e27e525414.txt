%%

program : declaration_list compound_statement

declaration_list : declaration_list declaration
    |
    /* declaration_list is a list of declarations and can be empty */

declaration : type identifier_list ';'

type : int
    | float
    | char

identifier_list : identifier_list ',' identifier
    | identifier
    /* identifier_list is a list of identifiers separated by commas and can have one identifier only */

compound_statement : '{' statement_list '}'

statement_list : statement_list statement
    |
    /* statement_list is a list of statements and can be empty */

statement : assignment_statement
    | selection_statement
    | iteration_statement
    | compound_statement

assignment_statement : identifier ASSIGN expression ';'

selection_statement : IF '(' condition ')' statement ELSE statement

iteration_statement : FOR '(' assignment_statement ';' condition ';' assignment_statement ')' statement

condition : expression RELOP expression
    | '(' condition ')'
    | NOT condition

expression : term
    | sign term
    | expression ADDOP term

term : factor
    | term MULOP factor

factor : identifier
    | constant
    | '(' expression ')'

sign : '+'
     | '-'

constant : INTEGER
         | FLOAT
         | CHARACTER
         
%%

/* The %% delimiter marks the end of the rules section and the beginning of the C code section */
/* The C code section contains code that will execute when the corresponding rule is matched */
/* The following is an example of a C code section for the assignment_statement rule */

void execute_assignment_statement(char *identifier, int value) {
    /* Look up identifier in symbol table and assign value to it */
    symbol_table[identifier] = value;
}

/* End of code snippet */