/* Define the grammar rules */
program: declarations statements
  ;

declarations: /* Optional declarations */
  | declarations declaration
  ;

declaration: type identifier ';'
  ;

type: 'int' | 'float' | 'char'
  ;

identifier: /[a-zA-Z_][a-zA-Z0-9_]*/
  ;

statements: /* Optional statements */
  | statements statement
  ;

statement: assignment
  | decision
  | loop
  | print
  ;

assignment: identifier '=' expression ';'
  ;

expression: operand '+' operand
  | operand '-' operand
  | operand '*' operand
  | operand '/' operand
  ;

operand: identifier
  | constant
  ;

constant: /[0-9]+/
  ;

decision: 'if' '(' condition ')' '{' statements '}'
  | 'if' '(' condition ')' '{' statements '}' 'else' '{' statements '}'
  ;

condition: expression '==' expression
  | expression '!=' expression
  | expression '>' expression
  | expression '<' expression
  | expression '>=' expression
  | expression '<=' expression
  ;

loop: 'for' '(' assignment ';' condition ';' assignment ')' '{' statements '}'
  ;

print: 'print' '(' expression ')' ';'
  ;

%%

/* Add actions to the grammar rules */
program: /* Execute declarations and statements */
  {
    /* Execute declarations */
    $1;

    /* Execute statements */
    $2;
  }
  ;

declarations: /* Initialize declarations list */
  {
    /* Initialize list for declarations */
    $$ = "";
  }
  | /* Add declaration to list */
    $1 $2
  ;

declaration: /* Create declaration string */
  {
    /* Create string with identifier and type */
    $$ = $1 " " $2 ";";
  }
  ;

type: /* Set type for identifier */
  {
    /* Set type for identifier */
    $1 = type;
  }
  ;

identifier: /* Retrieve identifier */
  {
    /* Retrieve identifier from token */
    $1 = strdup(yytext);
  }
  ;

statements: /* Initialize statement list */
  {
    /* Initialize list for statements */
    $$ = "";
  }
  | /* Add statement to list */
    $1 $2
  ;

statement: /* Execute statement */
  {
    /* Execute statement */
    $$ = $1;
  }
  ;

assignment: /* Create assignment string */
  {
    /* Create string with identifier, equals sign, and expression */
    $$ = $1 " = " $3 ";";
  }
  ;

expression:
  {
    /* Create expression string based on operator and operands */
    switch($2) {
      case '+':
        $$ = $1 " + " $3;
        break;
      case '-':
        $$ = $1 " - " $3;
        break;
      case '*':
        $$ = $1 " * " $3;
        break;
      case '/':
        $$ = $1 " / " $3;
        break;
    }
  }
  ;

operand:
  {
    /* Retrieve operand from token */
    $$ = strdup($1);
  }
  ;

constant:
  {
    /* Retrieve constant value from token */
    $$ = strdup(yytext);
  }
  ;

decision:
  {
    /* Create decision structure with conditional and statements */
    if($3 == 0) {
      /* If conditional is false, execute else statements if present */
      if($7 != 0) {
        yyerror("Else statement does not belong to any if statement");
      }
    } else {
      /* If conditional is true, execute if statements */
      $$ = $3 " " $5;
      if($7 != 0) {
        /* Append else statements if present */
        $$ = $$ "else " $7;
      }
    }
  }
  ;

condition:
  {
    /* Create conditional expression based on operator and expressions */
    switch($2) {
      case '==':
        $$ = $1 " == " $3;
        break;
      case '!=':
        $$ = $1 " != " $3;
        break;
      case '>':
        $$ = $1 " > " $3;
        break;
      case '<':
        $$ = $1 " < " $3;
        break;
      case '>=':
        $$ = $1 " >= " $3;
        break;
      case '<=':
        $$ = $1 " <= " $3;
        break;
    }
  }
  ;

loop:
  {
    /* Create loop structure with assignment, conditional, and statements */
    $$ = "for(" $3 "; " $5 "; " $7 ") " $10; 
  }
  ;

print:
  {
    /* Create print statement with expression */
    $$ = "print(" $2 ")"; 
  }
  ;