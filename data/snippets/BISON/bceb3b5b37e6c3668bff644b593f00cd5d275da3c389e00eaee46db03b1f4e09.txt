/* Defines grammar rules for simple math expressions */
%token NUMBER         /* Define token for numbers */
%token LPAREN         /* Define token for left parentheses */
%token RPAREN         /* Define token for right parentheses */
%left '+' '-'         /* Define left associativity for addition and subtraction */
%left '*' '/'        /* Define left associativity for multiplication and division */
%%
/* Each rule defines a different type of math expression */
expression : NUMBER
| LPAREN expression RPAREN
| expression '+' expression
| expression '-' expression
| expression '*' expression
| expression '/' expression ;
%%
/* Implementation of the grammar rules */
#include <stdio.h>
#include <stdlib.h>
/* Function for getting next token */
int yylex();
/* Error handler function */
void yyerror(char *s);
/* Function for parsing the expression */
int yyparse();
int main(){
    /* Call function for parsing the expression */
    yyparse();
    return 0;
}
/* Function for getting next token */
int yylex(){
    int c;
    while ((c=getchar()) == ' ' || c == '\t');
    if (c == EOF)
        return 0;
    /* If character is a number, return token NUMBER with value of the number */
    if (isdigit(c)){
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    /* If character is a left parentheses, return token LPAREN */
    if (c == '(')
        return LPAREN;
    /* If character is a right parentheses, return token RPAREN */
    if (c == ')')
        return RPAREN;
    /* If character is not a number or parentheses, throw an error */
    yyerror("Invalid character");
}
/* Error handler function */
void yyerror(char *s){
    fprintf(stderr, "%s\n", s);
}