%{
    // This is a comment in BISON
    
    /* This is another comment in BISON */
    // This code snippet uses the BISON language to generate a simple calculator that can perform addition, subtraction, multiplication, and division.
    
    // Declaring variables to hold the input values and result
    int first_number, second_number, result;
    
    // Function to perform addition
    int add(int num1, int num2) {
        return num1 + num2;
    }
    
    // Function to perform subtraction
    int subtract(int num1, int num2) {
        return num1 - num2;
    }
    
    // Function to perform multiplication
    int multiply(int num1, int num2) {
        return num1 * num2;
    }
    
    // Function to perform division
    int divide(int num1, int num2) {
        return num1 / num2;
    }
    
    // Main code block
    int main() {
        // Rule to read input from user
        input: "Enter two numbers: "
            {
                // Save the first input value in the first_number variable
                first_number = yylval;
                
                // Prompt for second input
                input: "Enter second number: "
                    // Save the second input value in the second_number variable
                    second_number = yylval;
            }
            
        // Rule to handle addition
        rule add:
            // Call the add function with the two input values and save the result in the result variable
            result = add(first_number, second_number);
            // Print the result to the user
            "The result of addition is: " << result << "\n";
            
        // Rule to handle subtraction
        rule subtract:
            // Call the subtract function with the two input values and save the result in the result variable
            result = subtract(first_number, second_number);
            // Print the result to the user
            "The result of subtraction is: " << result << "\n";
            
        // Rule to handle multiplication
        rule multiply:
            // Call the multiply function with the two input values and save the result in the result variable
            result = multiply(first_number, second_number);
            // Print the result to the user
            "The result of multiplication is: " << result << "\n";
            
        // Rule to handle division
        rule divide:
            // Call the divide function with the two input values and save the result in the result variable
            result = divide(first_number, second_number);
            // Print the result to the user
            "The result of division is: " << result << "\n";
        
        // Return 0 to indicate successful execution
        return 0;
    }
%}

// Rules for parsing input and performing calculations
%token NUM // for numbers
%left '+' '-' // for addition and subtraction
%left '*' '/' // for multiplication and division

// Yacc specification
%%
    
// Start symbol
calc: // empty production
    
// Rules to handle different types of operations
    | calc '+' calc { $$ = $1 + $3; } // addition
    | calc '-' calc { $$ = $1 - $3; } // subtraction
    | calc '*' calc { $$ = $1 * $3; } // multiplication
    | calc '/' calc { $$ = $1 / $3; } // division

// Rules to handle input and output
    | input { printf("Enter a number: "); $$ = yylval; }
    | result '\n' { printf("Result = %d\n", $1); $$ = $1; }
    
// Parser
%%

// Flex code
%{
    #include <stdio.h>
    #include "calc.tab.h"
    int yylex();
    extern char *yytext;
    extern int yylval;
%}

// Definitions for tokens
%token NUM

// Match for numbers
%%
[\t\n ]+ ;
[0-9]+ {
    yylval = atoi(yytext);
    return NUM;
}
. yyerror();