%{
    /* this is a Bison code snippet */
    int sum = 0;
%}

/* the first rule of the grammar */
%left '+'

/* the second rule of the grammar */
%left '*'

/* the third rule of the grammar */
%left POWER

%%

/* matching expressions */
expr:   NUMBER
        | expr '+' expr    { sum = $1 + $3; }
        | expr '*' expr    { sum = $1 * $3; }
        | expr POWER expr  { sum = pow($1, $3); };

%%

/* optional code for parser startup */
int main(void) {
    /* calling the parser */
    yyparse();

    /* printing the final result */
    printf("The result is: %d\n", sum);

    return 0;
}

/* define a yyerror function for parsing errors */
void yyerror(char *s) {
    printf("Error: %s\n", s);
}

/* lexical analyzer */
%{
    /* this is the lexer code */
%}
digit           [0-9]
%option noyywrap
%%
{digit}+    return NUMBER;
"+"         return '+';
"*"         return '*';
"power"     return POWER;
.         return 0;
%%