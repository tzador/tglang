/* BISON code for a grammar that recognizes arithmetic expressions */

%{
// Code to be executed before yylex, defined in the C section of the grammar
#include <stdio.h>
int yylex(void);
void yyerror(const char *s);
%}

// Token definitions, defined in the Bison declarations section
%token PLUS MINUS TIMES DIVIDE
%token INTEGER

// Start rule of the grammar
%start expression

// Grammar rules
expression: expression PLUS term
       | expression MINUS term
       | term
       ;

term: term TIMES factor
    | term DIVIDE factor
    | factor
    ;

factor: INTEGER
      | LPAREN expression RPAREN
      ;

// Error handling rule 
error: /* empty */ {
    yyerror("Syntax Error");
}

// Lexer rules, defined in the C section of the grammar
%{
// Code to be executed after yylex
int yywrap(void);
%}

// Regular expressions for token patterns
%{
// Regex definitions for token patterns
"+" { return PLUS; }
"-" { return MINUS; }
"*" { return TIMES; }
"/" { return DIVIDE; }
[0-9]+ { return INTEGER; }
"(" { return LPAREN; }
")" { return RPAREN; }
" " { /* Ignore whitespace */ }
. { return yytext[0]; } // Return single characters as themselves
%}

// Function to be executed when yylex encounters a token, defined in the C section of the grammar
int yylex(void) {
    int token = yylex(); // Get next token

    // Print token type and value
    printf("Token: %d, Value: %s\n", token, yytext);

    return token; // Return token to parser
}

// Function to be executed when there is a syntax error, defined in the C section of the grammar
void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s); // Print error message
    exit(1); // Exit program with error code 1
}

// Function to be executed when lexer reaches the end of file, defined in the C section of the grammar
int yywrap(void) {
    return 1; // Indicate end of file
}