%token <string> ID       /* token for identifiers */
%token <number> INT      /* token for integers */

%%
program : functions;

functions : function
          | functions function;

function : type ID '(' params ')' {
    printf("Function %s has been declared\n", $2);
    $$ = (struct func*) malloc(sizeof(struct func));
    $$->type = $1;
    $$->name = $2;
    $$->params = $4;
    $$->body = NULL;
}
          | type ID '(' ')' '{' statements '}' {
            printf("Function %s has been defined\n", $2);
            $$ = (struct func*) malloc(sizeof(struct func));
            $$->type = $1;
            $$->name = $2;
            $$->params = NULL;
            $$->body = $6;
          };

type : INT {
    $$ = (struct type*) malloc(sizeof(struct type));
    $$->type = "int";
    $$->size = sizeof(int);
}
     | ID {
        $$ = (struct type*) malloc(sizeof(struct type));
        $$->type = $1;
        $$->size = 0;
      };

params : param
       | params ',' param;

param : type ID {
    $$ = (struct param*) malloc(sizeof(struct param));
    $$->type = $1;
    $$->name = $2;
  };

statements : statement
           | statements statement;

statement : '{' statements '}'
          | type ID '=' expr ';' {
            printf("Variable %s has been declared\n", $2);
            $$ = (struct var*) malloc(sizeof(struct var));
            $$->type = $1;
            $$->name = $2;
            $$->value = $4;
          };

expr : ID
     | INT
     | expr '+' expr
     | expr '-' expr;