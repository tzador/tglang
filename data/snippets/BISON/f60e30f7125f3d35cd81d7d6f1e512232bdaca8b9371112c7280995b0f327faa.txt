{
    %{ 
        /* This is a code snippet in BISON programming language */
        #include <stdio.h>
        int var;
        /* This symbol % can be used to include C code in BISON */

        /* This rule specifies that the input must be an integer */
        %integer "input must be an integer"
    %}
    /* This rule is built-in, it counts the number of lines */
    %startline
    /* This rule is built-in, it counts the number of characters */
    %charcount

    /* Rules to parse the input */
    input: INT { 
            /* The BISON code can use C code within braces for user actions */
            var = $1; /* $1 refers to the first rule, in this case the integer input */
            printf("The input is: %d\n", var); /* Using the C library function printf to output the input */
        }

    /* Error rule for invalid input */ 
    /* yyerror is a built-in BISON function that takes in a string as an argument */
    input/error: { yyerror("Invalid input"); }

    /* Macro to define an integer */
    %token INT "integer"
%%
/* BISON grammar rules, the code must be careful with precedence and associativity */
_exp: INT '-' INT { printf("Subtraction operation: %d - %d = %d\n", $1, $3, $1-$3); } 
    | _exp '+' INT { printf("Addition operation: %d + %d = %d\n", $1, $3, $1+$3); }
    | %exp '*' %exp { printf("Multiplication operation: %d * %d = %d\n", $1, $3, $1*$3); }
/* increment/decrement operators */
_object: _exp++ { printf("Increment operation: %d++ = %d\n", $1, $1+1); } 
        | _exp-- { printf("Decrement operation: %d-- = %d\n", $1, $1-1); }
%%
/* The main function */
int main() {
    /* Parsing the input using yyparse built-in function. Returns 0 for success */
    if(yyparse() == 0) {
        printf("Parsing was successful.\n");
    }
    /* Printing the number of lines and characters in the input */
    printf("Number of lines: %d\n", startline); 
    printf("Number of characters: %d\n", charcount); 
    return 0;
}