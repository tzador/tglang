%token INTEGER
%token STRING
%%
program: block ';'
        {
            /* code to execute when a program is parsed */
        }
;
block: '{' stmt_list '}'
        {
            /* code to execute when a block is parsed */
        }
;
stmt_list: stmt_list stmt ';'
        {
            /* code to execute when a statement list is parsed */
        }
    | stmt ';'
        {
            /* code to execute when a statement is parsed */
        }
;
stmt: assign_stmt
    | if_stmt
    | while_stmt
    | for_stmt
;
assign_stmt: ID '=' expr
        {
            /* code to execute when an assignment statement is parsed */
        }
;
if_stmt: IF '(' expr ')' stmt
        {
            /* code to execute when an if statement is parsed */
        }
;
while_stmt: WHILE '(' expr ')' stmt
        {
            /* code to execute when a while statement is parsed */
        }
;
for_stmt: FOR '(' assign_stmt ';' expr ';' assign_stmt ')' stmt
        {
            /* code to execute when a for statement is parsed */
        }
;
expr: INTEGER
    | STRING
    | ID '+' ID
    | ID '-' ID
    | ID '*' ID
    | ID '/' ID
    | '-' ID %prec UNARY_MINUS
        {
            /* code to execute when an expression is parsed */
            /* %prec is used to specify the precedence of operators */
        }
;
%%
/* code to execute after parsing is complete */
int main()
{
    /* code to read input, initiate parsing and execute program */
    return 0;
}