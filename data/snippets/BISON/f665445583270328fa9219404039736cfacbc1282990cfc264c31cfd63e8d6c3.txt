%{
    /* This is a BISON code snippet that calculates the factorial of a number using recursion */

    /* Declare a variable to hold the value of the input number */
    int num;
    
    /* Declare a function to calculate factorial using recursion */
    int factorial(int n) {
        /* Base case */
        if (n == 0) {
            return 1;
        }
        /* Recursive case */
        else {
            return n * factorial(n - 1);
        }
    }
%}

/* Define the grammar rules */
%start input

input: /* Empty production */
    | input INT /* Input integer value */
    ;

%% /* BISON code starts here */

/* This is the rule for the input integer value */
int: /* Empty production */
    | INT /* Terminal for an integer */
    {
        /* Assign the input value to the num variable */
        num = $1;
    }
    ;

/* This rule calls the factorial function and prints the result */
factorial_output: factorial_exp {
    /* Print the factorial of num */
    printf("The factorial of %d is %d\n", num, $1);
    /* Clear the num variable for future use */
    num = 0;
    } 
    ;

/* This rule calculates the factorial */
factorial_exp: 'factorial' '(' INT ')' { /* Recursive rule for the factorial function */
    /* $3 represents the value of INT */
    /* Call the factorial function passing in the value of INT */
    $$ = factorial($3);
    }
    ;