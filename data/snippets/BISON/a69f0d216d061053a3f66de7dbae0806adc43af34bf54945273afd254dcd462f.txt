/* This is a complex BISON code snippet that uses various features and functions */

%token NUMBER  /* define token for numbers */
%token OP  /* define token for operators */

%% /* start of grammar rules */

calc: /* grammar rule for arithmetic expressions */
    /* recursive call to 'expr' rule to handle multiple operations */
    expr
    | calc '+' expr     /* allow addition */
    | calc '-' expr     /* allow subtraction */
    | calc '*' expr     /* allow multiplication */
    | calc '/' expr     /* allow division */

expr:
    /* using alternative rules to handle different types of expressions */
    '(' calc ')'                /* parentheses indicating order of operations */
    | NUMBER                    /* rule for a single number */
    | '-' expr %prec UNARY_MINUS /* allow negative numbers */

%% /* end of grammar rules */

/* start of auxiliary functions */

/* function to convert string to integer */
int string_to_int(char* str) {
    int num = 0;
    for (int i = 0; str[i] >= '0' && str[i] <= '9'; i++)
        num = num * 10 + (str[i] - '0');
    return num;
}

%% /* start of auxiliary rules */

/* rule for handling negative numbers */
%precedence UNARY_MINUS
%left '-'  /* left associativity for negative numbers */

/* rule to handle errors in input */
%error-verbose
%define parse.error
{
    printf("Unexpected token or missing operand at line %d, column %d.\n", @1.lineno, @1.col);
    YYERROR;
}

%% /* end of auxiliary rules */