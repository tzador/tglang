%%

%token<Integer> NUMBER           // creates a token for integer values
%token<String> STRING            // creates a token for string values
%token<Identifier> VARIABLE      // creates a token for variable identifiers

%left '+' '-'                   // defines the left-associativity for '+' and '-'
%left '*' '/'                   // defines the left-associativity for '*' and '/'
%right '^'                      // defines the right-associativity for '^'

%start expression                // designates the starting symbol for the grammar

%%

expression: NUMBER               // rule for a single number expression
    | STRING                    // rule for a single string expression
    | VARIABLE                  // rule for a single variable identifier
    | expression '+' expression // rule for addition operation
    | expression '-' expression // rule for subtraction operation
    | expression '*' expression // rule for multiplication operation
    | expression '/' expression // rule for division operation
    | expression '^' expression // rule for exponentiation operation
    | '(' expression ')'        // rule for expression inside parentheses
    ;

%%

int main() {
    printf("Enter an expression: ");
    yyparse();                       // parses the input expression based on the BISON grammar rules
    return 0;
}

int yyerror(char *s) {               // handles any errors encountered during parsing
    fprintf(stderr, "%s\n", s);
}

int yywrap() {
    return 1;                        // signals end of input to the parser
}

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);      // handles any syntax errors encountered during parsing
}