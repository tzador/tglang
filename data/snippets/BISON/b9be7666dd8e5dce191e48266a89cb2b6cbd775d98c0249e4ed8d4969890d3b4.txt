%{
//Define a variable counter with initial value of 0
int counter = 0;
%}

/* Define grammar rules */
%%

//Rule to match numbers and increment counter by 1
NUM: [0-9]+   { counter++; }

//Rule to match addition operation and return value
ADD: '+'      { return '+'; }

//Rule to match subtraction operation and return value
SUB: '-'      { return '-'; }

//Rule to match multiplication operation and return value
MUL: '*'      { return '*'; }

//Rule to match division operation and return value
DIV: '/'      { return '/'; }

//Rule to match parenthesis and return value
LBR: '('      { return '('; }
RBR: ')'      { return ')'; }

//Rule to skip whitespace
WS: [ \t\n]   ;

/* Define additional functions */

//Function to calculate the result of arithmetic expression
int calculate ()
{
    //Print message to indicate start of calculation
    printf("\nCalculating...");
    
    //Initialize stack to store values
    Stack stack;
    stack_init(&stack);
    
    //Loop through all tokens in the input string
    while (true)
    {
        //Get token from lexer
        Token token = next_token();
        
        //Check for end of input
        if (token.type == END) break;
        
        switch (token.type)
        {
            case NUM:
                //Push number onto stack
                stack_push(&stack, token.value);
                break;
            case ADD:
                //Pop last two numbers from stack and add them
                int num1 = stack_pop(&stack);
                int num2 = stack_pop(&stack);
                int result = num1 + num2;
                //Push result onto stack
                stack_push(&stack, result);
                break;
            case SUB:
                //Pop last two numbers from stack and subtract them
                num1 = stack_pop(&stack);
                num2 = stack_pop(&stack);
                result = num2 - num1;
                //Push result onto stack
                stack_push(&stack, result);
                break;
            case MUL:
                //Pop last two numbers from stack and multiply them
                num1 = stack_pop(&stack);
                num2 = stack_pop(&stack);
                result = num1 * num2;
                //Push result onto stack
                stack_push(&stack, result);
                break;
            case DIV:
                //Pop last two numbers from stack and divide them
                num1 = stack_pop(&stack);
                num2 = stack_pop(&stack);
                result = num2 / num1;
                //Push result onto stack
                stack_push(&stack, result);
                break;
            case LBR:
                //Do nothing, parenthesis will be handled in next iteration
                break;
            case RBR:
                //Pop result from stack and return it
                return stack_pop(&stack);
                break;
        }
    }
    
    //Print message to indicate end of calculation
    printf("Done.\n");
    
    //Return final result from stack
    return stack_pop(&stack);
}

//Function to print the result of calculation
void print_result ()
{
    //Call the calculate function and store result
    int result = calculate();
    //Print the final result
    printf("The result is %d\n", result);
}

/* Define main function */

int main ()
{
    //Get input expression from user
    printf("Enter an arithmetic expression: ");
    char str[100];
    scanf("%s", &str);
    
    //Initialize the lexer with input expression
    init_lexer(str);
    
    //Call the print_result function to print final result
    print_result();
    
    return 0;
}