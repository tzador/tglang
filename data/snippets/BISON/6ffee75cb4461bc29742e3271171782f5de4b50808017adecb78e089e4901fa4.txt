/* Simple bison program to parse arithmetic expressions */

/* Define the token types */
%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token LPAREN
%token RPAREN

/* Define the start symbol */
%start expression

/* Define the grammar rules */
%%

/* Use the token types to define expression rule */
expression : NUMBER
        | expression PLUS expression
        | expression MINUS expression
        | expression TIMES expression
        | expression DIVIDE expression
        | LPAREN expression RPAREN

/* Handle potential division by zero error */
        | expression DIVIDE expression { if ($3 == 0) yyerror("Division by zero error"); }

/* Specify the token types to recognize */
%%

/* Define yyerror function to handle syntax errors */
void yyerror(const char *s)
{
    fprintf(stderr, "%s\n", s);
}

/* Define main function to start parsing */
int main(int argc, char **argv)
{
    /* Prompt user to enter an expression */
    printf("Enter an arithmetic expression: ");

    /* Start parsing */
    yyparse();

    return 0;
}