%{
#include <stdio.h> // Including standard input/output library
%}

// Declaring the input tokens
%token <integer> NUMBER
%token <identifier> ID
%token BEGIN END
%token SEMICOLON PLUS MINUS MULTIPLY DIVIDE

%left PLUS MINUS
%left MULTIPLY DIVIDE

// Defining the grammar rules
%%
program: BEGIN stmt_list END;

stmt_list: stmt_list stmt | stmt;

stmt: ID ASSIGN expression SEMICOLON
    | expression SEMICOLON;

expression: expression PLUS term
    | expression MINUS term
    | term;

term: term MULTIPLY factor
    | term DIVIDE factor
    | factor;

factor: NUMBER
    | ID;

%%

int main()
{
   yyparse(); // Function to parse the input according to the specified grammar rules
   return 0;
}

int yyerror(char *msg)
{
   fprintf(stderr, "%s\n", msg); // Function to print error message
   return 0;
}

// Function to handle the input tokens and return the corresponding integer value
int yylex()
{
   int c = getchar(); // Reading input from the standard input stream
   if (isdigit(c))
   {
      ungetc(c, stdin); // Pushing back the character to the input stream
      scanf("%d", &yylval); // Storing the integer value in yylval variable
      return NUMBER;
   }
   else if (isalpha(c))
   {
      ungetc(c, stdin);
      scanf("%s", yylval); // Storing the string value in yylval variable
      return ID;
   }
   else
   {
      return c; // Returning the token as is
   }
}