%%

/* Define the file type to be parsed */
%code requires {
    #include<stdio.h>
    #include<stdlib.h>
}

/* Define the tokens to be recognized */ 
%token <numval> NUMBER
%left '+' '-'
%left '*' '/'

%%

/* Define the grammar rules */
start: expr {printf("Result: %d",$1);} ;

expr: NUMBER               { $$ = $1; }
    | expr '+' expr        { $$ = $1 + $3; }
    | expr '-' expr        { $$ = $1 - $3; }
    | expr '*' expr        { $$ = $1 * $3; }
    | expr '/' expr        { $$ = $1 / $3; } ;

%%

/* Define the lexer rules */
%{
int yylex(void);
%}

/* Function to get the next token */
%code requires {
    int yywrap(void);
}

/* Define the main function */
%{
int main(void) {
    printf("Enter an arithmetic expression: ");
    yyparse();
    return 0;
}
%include {
    #include<stdio.h>
}

/* Analyze the next token */
%%

#include "lex.yy.c"

/* Function to return the next token */
int yylex(void) {
    int c;
    c = getchar();
    if(c == '-' || (c >= '0' && c <= '9')) {
        yylval.numval = atoi(&amp; c);
        return NUMBER;
    }
    return c;
}

/* Function to analyze the end of input */
int yywrap(void) {
    return 1;
}

/* Run the parser on the input */
void yyparse(void) {
    yylex();
    yylex();
    yyerror("Extra characters after end of expression");
}

/* Display error message */
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}