%start program
%%
program: VERSION declaration_list statement_list ;

VERSION: '1.0' ; //defines the version of the program

declaration_list: declaration_list declaration | declaration ;
//declares variables and their data types

declaration: type_specifier ID ';'; //defines the data type of a variable
//type_specifier can be int, float, char, or any other data type

statement_list: statement_list statement | statement ;
//contains all statements or instructions to be executed

statement: expression ';' | if_statement | while_statement | for_statement ;
//possible statements include expressions, if statements, while loops, and for loops

expression: ID '=' expression | expression '+' expression | expression '-' expression | expression '*' expression | expression '/' expression | '(' expression ')' | NUM ;
//defines the operations and operands in an expression, can also have parenthesis and numbers (NUM)

if_statement: 'if' '(' expression ')' '{' statement '}' 'else' '{' statement '}' ;
//defines an if statement with the conditions and code to be executed in each case

while_statement: 'while' '(' expression ')' '{' statement '}' ;
//defines a while loop with the condition and code to be executed while the condition is true

for_statement: 'for' '(' declaration ';' expression ';' expression ')' '{' statement '}' ;
//defines a for loop with the initialization, condition, and increment/decrement of a variable, and the code to be executed within the loop

%%
//BISON rules to handle possible errors
void yyerror(const char *s) { //defines a function to handle errors
  fprintf(stderr, "%s\n", s);
}

int main(void) { //main function to call the parser and start program
  return yyparse(); //calls the parser generated by BISON
}

int yywrap(void) {
  return 1; //returns 1 to indicate the end of the input to the parser
}