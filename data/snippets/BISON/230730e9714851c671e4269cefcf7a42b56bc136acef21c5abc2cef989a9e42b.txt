%{
    /* Declaration section */
    #include <stdio.h> // Include standard input/output library
    #define MAX 10 // Define a maximum value of 10
    extern int yylex(); // Declare 'yylex' function
    extern int yyparse(); // Declare 'yyparse' function
    extern FILE *yyin; // Declare 'yyin' file pointer
    int num; // Declare integer 'num'
    int stack[MAX]; // Declare stack array with maximum size of 10
    int top = -1; // Declare and initialize top variable to -1
%}

/* Token definitions */
%token DIGIT

%% /* Rules section */
top : expr '\n' { printf("The top value is %d\n", $1); } // Rule for printing top value of stack
    | expr top {} // Rule for pushing values onto the stack
    ;
expr : DIGIT DIGIT { $$ = $1 * $2; } // Rule for multiplying two digits
     | DIGIT { $$ = $1; } // Rule for encountering single digit
     ;

%% /* Code section */
int main(void) {
    yyin = fopen("input.txt", "r"); // Open input file for reading
    yyparse(); // Call 'yyparse' function to parse input
    fclose(yyin); // Close input file
    return 0;
}

void push(int value) { // Function for pushing value onto stack
    if (top == MAX - 1) { printf("Stack overflow"); return; } // Check for stack overflow
    stack[++top] = value; // Increment top and push value onto stack
}

int pop() { // Function for popping value from stack
    if (top < 0) { printf("Stack underflow"); return -1; } // Check for stack underflow
    return stack[top--]; // Decrement top and return value popped from stack
}

int yylex(void) { // Function for lexical analysis
    int c = getchar(); // Get next character from input
    if (isdigit(c)) { // Check if character is a digit
        return DIGIT; // If it is, return DIGIT token
    }
    return c; // Otherwise, return character as-is
}

int yyparse(void) { // Function for parsing input
    int tok; // Declare token variable
    while (tok = yylex()) { // Loop until there are no more tokens
        if (tok == DIGIT) { // Check if token is a digit
            push(yylval); // Push the digit onto stack
        }
    }
    return 0;
}