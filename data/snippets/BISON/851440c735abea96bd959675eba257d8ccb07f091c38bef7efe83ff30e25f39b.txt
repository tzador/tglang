%{
// This is a BISON code snippet
// It is used for parser generation
#include <stdio.h>
#include <stdlib.h>

// Define data type for expression
typedef struct {
  char* type;
  double value;
} Expression;
%}

// Define tokens for expressions
%token <Expression> INTEGER

%%

// Define grammar rules
expr: INTEGER { 
  $$ = $1; 
}

// Define error handling rule
error: INVALID_CHARACTER { 
  printf("Invalid character encountered: %s\n", yytext); 
  exit(1);
}

// Enable debugging
%debug

// Enable error reporting
%error-verbose

%%
// Define main function to accept input and parse
int main(void) {
  // Call yyparse to begin parsing
  yyparse();
  return 0;
}

// Define input function to get user input
int yyinput(char *buf, int max) {
  // Use fgets to get user input
  fgets(buf, max, stdin);

  // Return 0 to indicate end of input
  return 0;
}

// Function to print parsed expression
void print_expr(Expression* expr) {
  printf("Parsed expression result: Type: %s, Value: %f\n", expr->type, expr->value);
}

// Define lexer function
int yylex(void) {
  // Define input buffer
  char buf[256];

  // Get input from user
  yyinput(buf, sizeof(buf));

  // Check for integer token
  if (isdigit(buf[0])) {
    // Create expression struct
    Expression* integer = malloc(sizeof(Expression));
    integer->type = "INTEGER";
    integer->value = atof(buf);

    // Set yylval to expression
    yylval = *integer;

    // Return token type
    return INTEGER;
  } else {
    // Return error token for invalid characters
    return INVALID_CHARACTER;
  }
}