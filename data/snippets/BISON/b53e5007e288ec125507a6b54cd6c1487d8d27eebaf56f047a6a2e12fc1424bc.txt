%{
  # This code snippet shows the use of BISON for parsing a simple arithmetic expression
  # The expression can only contain numbers, addition, and multiplication operators
  # The output of the parser is the evaluated result of the expression
%}

%token NUM      # numeric literal
%token ADD      # addition operator
%token MULT     # multiplication operator

%left ADD     # set left associativity for addition
%left MULT    # set left associativity for multiplication

%%

exp: term           # expression is a term
  | exp ADD term    # expression is an expression with addition followed by a term
  | exp MULT term   # expression is an expression with multiplication followed by a term
  ;

term: NUM           # term is a number
  | '(' exp ')'     # term is an expression enclosed in parentheses
  ;

%%

// Function to evaluate the parsed expression
int eval() {
  int result;

  switch ($1.type) {          // check the token type
    case NUM:                 // if it is a number
      result = $1.value;      // set result to the value of the number
      break;
    case ADD:                 // if it is an addition operator
      result = $1.left + $3;  // perform addition between the left and right expressions
      break;
    case MULT:                // if it is a multiplication operator
      result = $1.left * $3;  // perform multiplication between the left and right expressions
      break;
  }

  return result;              // return the evaluated result
}

// Code to run the parser
int main() {
  printf("Enter an arithmetic expression:\n");
  yyparse();                  // run the parser
  printf("The evaluated result is: %d\n", eval());  // print the evaluated result
  return 0;
}