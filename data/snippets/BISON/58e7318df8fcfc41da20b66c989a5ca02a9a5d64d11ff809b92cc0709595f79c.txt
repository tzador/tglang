%{
#include <stdio.h>  //Import standard input-output library
%}

/* Define the tokens */

/* Tokens used by the parser */
%token NUMBER  /* Token for numbers */
%token PLUS    /* Token for addition operator */
%token MINUS   /* Token for subtraction operator */
%token TIMES   /* Token for multiplication operator */
%token DIVIDE  /* Token for division operator */
%token LPAREN  /* Token for left parenthesis */
%token RPAREN  /* Token for right parenthesis */

/* Define the rules for the expressions */

%left PLUS MINUS  /* Define the precedence for addition and subtraction */

%left TIMES DIVIDE  /* Define the precedence for multiplication and division */

%%  /* Begin the grammar section */

/* Define the top level rule */
expression:  /* The expression can be a number or an operation */
            NUMBER
            | expression PLUS expression
            | expression MINUS expression
            | expression TIMES expression
            | expression DIVIDE expression
            | LPAREN expression RPAREN  /* Expressions can also be enclosed in parenthesis */
            ;

/* Define the actions for each rule */
%%  /* End of the grammar section */

/* Write the C code for the parser*/

int main(int argc, char **argv) {
  yyparse();  /* Call the parser function */
  return 1;
}

/* Define the function for parsing the input */

void yyerror(char *s) {  /* Function to handle errors */
  fprintf(stderr, "%s\n", s);
}

/* Function to get the input from user and parse it */

int yylex(void) {
  int c;  /* Variable to store the input from user */
  while ((c = getchar()) == ' ' || c == '\t') /* Ignore spaces and tabs */
    ;
  if (c == EOF)  /* If input is end of file, return 0 */
    return 0;
  if (c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')')  /* If input is any of the operators, return the corresponding token */
    return c;
  if (c >= '0' && c <= '9') {  /* If input is a number, keep reading until the whole number is parsed and then return the NUMBER token */
    ungetc(c, stdin);
    scanf("%d", &yylval);
    return NUMBER;
  }
  yyerror("Unknown input");  /* If input is not recognized, print an error */
}