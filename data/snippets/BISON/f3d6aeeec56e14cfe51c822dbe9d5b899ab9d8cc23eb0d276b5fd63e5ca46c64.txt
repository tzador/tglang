%{
// This is a BISON code snippet.
// It is used for parsing and generating programming language grammars.
// This snippet includes both terminal and non-terminal symbols.
// It also uses inline C code actions and semantic values.
// The snippet calculates the sum of two numbers using basic arithmetic rules.
%}

%token NUMBER
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE

%%
S: NUMBERPLUSNUMBER { printf("The sum of %d and %d is %d\n", $1, $3, $1 + $3); }
	| NUMBERMINUSNUMBER { printf("The difference between %d and %d is %d\n", $1, $3, $1 - $3); }
	| NUMBERMULTIPLYNUMBER { printf("The product of %d and %d is %d\n", $1, $3, $1 * $3); }
	| NUMBERDIVIDENUMBER { printf("The quotient of %d and %d is %d\n", $1, $3, $1 / $3); }
	;

NUMBERPLUSNUMBER: NUMBER PLUS NUMBER { $$ = $1 + $3; };
NUMBERMINUSNUMBER: NUMBER MINUS NUMBER { $$ = $1 - $3; };
NUMBERMULTIPLYNUMBER: NUMBER MULTIPLY NUMBER { $$ = $1 * $3; };
NUMBERDIVIDENUMBER: NUMBER DIVIDE NUMBER { $$ = $1 / $3; };

%%

int main() {
	yyparse();
	return 0;
}

int yyerror(char* msg) {
	fprintf(stderr, "Error: %s\n", msg);
}

int yylex() {
	int c;
	c = getchar();
	if (isdigit(c)) {
		ungetc(c, stdin);
		scanf("%d", &yylval);
		return NUMBER;
	}
	switch (c) {
		case '+': return PLUS;
		case '-': return MINUS;
		case '*': return MULTIPLY;
		case '/': return DIVIDE;
		default: return c;
	}
}