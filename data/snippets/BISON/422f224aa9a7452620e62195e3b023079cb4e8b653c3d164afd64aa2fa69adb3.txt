%{
#include <stdio.h>     //importing standard input/output library 
#include <stdlib.h>   //importing standard library for utility functions
%}

//defining start production rule with optional statements
%start program: program %{ code %}? definition* ;

//defining terminal symbols
%token<int> INTEGER "integer literal";
%token<float> FLOAT "float literal";
%token "space" "space between tokens";
%token "operation" "addition, subtraction, multiplication, or division";
%token "identifier" "variable or function name";
%token "string" "string literal";
%token "comment" "single or multi-line comment";

//defining non-terminal symbols
%type <int> expression;
%type <float> term;
%type <int> factor;
%type <string> identifier;
%type <string> string;

%% //start of grammar rules

//defining program rule that consists of optional code and multiple definitions
program: program %{ code %}? definition+;

//defining code rule that allows for C code statements and expressions
code: %{
    int sum = 0;       //can define and use variables
    printf("Enter two numbers: "); 
    int num1, num2; 
    scanf("%d %d", &num1, &num2);   //can input and manipulate data
%} 
  /* any valid C expression can be used within curly braces, separated by semicolons */

//defining definition rule that can be either function or variable definition
definition: function_definition | variable_definition;

//defining function definition rule with return type, name and parameters
function_definition: <int> expression %{ printf("Sum of numbers= %d\n", expression); %} -  "function name" %?

//defining variable definition rule with data type, name and optional assignment
variable_definition: 
  INTEGER "count" %? %{ count = 0; %};  //optional assignment of value

//defining expression rule that can be either float or integer type
expression: FLOAT term | INTEGER term;

//defining term rule that can be either single factor or operation between two factors
term: factor operation factor;

//defining factor rule that can be either integer or float type literal or identifier
factor: INTEGER | FLOAT | identifier | <int> "(" expression ")";

%ignore "space"; //ignore spaces between tokens
%ignore "comment"; //ignore comments