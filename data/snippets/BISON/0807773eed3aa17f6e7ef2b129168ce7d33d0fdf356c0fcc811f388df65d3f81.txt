/* BISON code for a simple calculator */

%{
    #include <stdio.h>
    #include <stdlib.h>
%}

/* Token definitions */
%token NUM
%token ADD SUB MUL DIV
%token NEWLINE

/* Precedence and associativity rules */
%left ADD SUB
%left MUL DIV

%%

/* Grammar rules for expressions */
calc:   /* empty production */
    |   calc NEWLINE expr { printf("= %d\n", $3); }
    |   calc NEWLINE { /* empty production */ }
    ;

expr:   NUM { $$ = $1; }
    |   expr ADD expr { $$ = $1 + $2; }
    |   expr SUB expr { $$ = $1 - $2; }
    |   expr MUL expr { $$ = $1 * $2; }
    |   expr DIV expr { $$ = $1 / $2; }
    ;

/* Handle syntax errors */
calc:   error NEWLINE { yyerror("Syntax error! Please check your input."); }
    |   error { yyerror("Syntax error! Please check your input."); }
    ;

%%

/* Function to print error messages */
yyerror(char *s)
{
    fprintf(stderr, "%s\n", s);
}

/* Main function */
int main(void)
{
    /* Run the parser */
    yyparse();

    return 0;
}

/* Lexical analyzer function */
int yywrap(void)
{
    return 1;
}

/* Tokenizer function */
int yylex(void)
{
    char c = getchar();

    /* Strip out whitespace characters */
    while (c == ' ' || c == '\t') {
        c = getchar();
    }

    /* Token for addition operator */
    if (c == '+') {
        return ADD;
    }

    /* Token for subtraction operator */
    if (c == '-') {
        return SUB;
    }

    /* Token for multiplication operator */
    if (c == '*') {
        return MUL;
    }

    /* Token for division operator */
    if (c == '/') {
        return DIV;
    }

    /* Token for newline character */
    if (c == '\n') {
        return NEWLINE;
    }

    /* Token for numbers */
    if (c >= '0' && c <= '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUM;
    }

    /* Token for end of file */
    if (c == EOF) {
        return 0;
    }

    printf("Invalid input!\n");
    exit(EXIT_FAILURE);
}

/* Parse function */
yyparse(void)
{
    while (yylex()) {}
}