// This is a code snippet in BISON, a parser generator language used in generating programming language syntax analyzers. 

// This code snippet defines a grammar for a simple arithmetic language that can handle basic addition, subtraction, multiplication, and division operations.

// Declaring the grammar name and defining start symbol
%{
  /* This section declares the grammar name and defines the starting symbol. */
  %start expr;
%}

// Defining rules for expressions
%%
  /* This section defines the rules for different expressions. */
  expr:
    expr '+' term
    | expr '-' term
    | expr '*' term
    | expr '/' term
    | term
    ;

// Defining rules for terms
term:
    INT
    | '(' expr ')'
    ;

// Defining the token types
%%
  /* This section defines the token types and their corresponding value. */
  INT     [0-9]+

// Ignoring whitespace
" "     { /* skip white space */ /* match hidden */ }
\t      { /* skip white, tabs, etc. */ }

// Handling syntax errors
%%
  /* This section handles syntax errors that may occur. */
  <error>
    { printf("Syntax error\n"); yyerrok; }

%%

// Writing a main function to test the grammar
int main()
{
  /* This section creates a loop to parse multiple inputs using the grammar. */
  while (1) {
    /* Printing a prompt and getting user input. */
    printf("> ");
    yyparse();

    /* If no input is entered, the program terminates. */
    if (feof(stdin)) break;
  }
  return 0; 
}

// Including the header file for the Bison library
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif
  extern int yyparse (void);
#ifdef __cplusplus
}
#endif

// Including the header files for standard library functions
#include <stdio.h>
#include <stdlib.h>

// Running the parser
int yylex(void);
void yyerror(char *s);

// Function to handle errors
void fatal_error(char *s)
{
  /* This section handles fatal errors. */
  fprintf(stderr, "%s\n", s);
  exit(1);
}

// Function to handle syntax errors
void yyerror(char *s)
{
  /* This section handles syntax errors. */
  fprintf(stderr, "%s\n", s);
}

// Function to get input from the user
int main(int argc, char *argv[])
{
  /* This section gets input from the user and uses the parser to parse it according to the defined grammar. */
  if (argc == 1) {
    fatal_error("No input files.");
  }

  // Opening the input file
  FILE *file = fopen(argv[1], "r");
  if (!file) {
    fatal_error("Cannot open input file.");
  }

  // Creating a buffer for the input
  char *buf  = (char *)malloc(4096);
  if (!buf) {
    fatal_error("Cannot allocate memory.");
  }

  // Reading the input and storing it in the buffer
  int num = fread(buf, 1, 4096, file);
  buf[num] = '\0';

  // Parsing the input using the grammar
  yy_scan_string(buf);
  yyparse();

  // Freeing the buffer and closing the input file
  fclose(file);
  free(buf);
  return 0;
}