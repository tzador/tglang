/* This is a Bison code snippet that implements a simple calculator */
%{
/* Bison declarations and definitions section */
#include <stdio.h>

/* Function for handling syntax errors */
void yyerror(const char *s);

/* Function for printing the calculated result */
void print_result(double result);

%}

 /* Bison token definitions section */
%token <value> NUMBER
%token ADD SUB MUL DIV

/* Grammar rules section */
%%

/* Rule for calculating an expression */
calc:
    expr { print_result($1); } // Call print_result function to print the calculated result
;

/* Rule for parsing an expression */
expr:
    '(' expr ')' { $$ = $2; } // Return the value of the expression enclosed in parentheses
    | expr ADD expr { $$ = $1 + $3; } // Addition operation
    | expr SUB expr { $$ = $1 - $3; } // Subtraction operation
    | expr MUL expr { $$ = $1 * $3; } // Multiplication operation
    | expr DIV expr { $$ = $1 / $3; } // Division operation
    | NUMBER { $$ = $1; } // Return the value of the NUMBER token
;

%%

/* Function for handling syntax errors */
void yyerror(const char *s) {
    printf("Syntax error: %s\n", s);
}

/* Function for printing the calculated result */
void print_result(double result) {
    printf("Result: %f\n", result);
}

/* Main function to take input and call Bison parser */
int main() {
    yyparse(); // Call Bison parser
    return 0;
}

/* Lexer function to return tokens to parser */
int yylex() {
    int ch = getchar();

    /* Ignore whitespace characters */
    while ((ch == ' ') || (ch == '\t')) {
        ch = getchar();
    }

    /* If the input is a digit, return the NUMBER token with the corresponding value */
    if (isdigit(ch)) {
        ungetc(ch, stdin); // Put the digit back into input stream
        scanf("%lf", &yylval.value); // Store the value of the NUMBER token in yylval
        return NUMBER;
    }

    /* If the input is an operator, return the corresponding token */
    switch (ch) {
        case '+':
            return ADD;
        case '-':
            return SUB;
        case '*':
            return MUL;
        case '/':
            return DIV;
        case '\n': // Return 0 at the end of input
            return 0;
        default:
            yyerror("Invalid input"); // Raise an error for invalid input
    }
}