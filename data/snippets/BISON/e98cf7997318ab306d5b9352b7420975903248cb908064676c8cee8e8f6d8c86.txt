/* This is a BISON code snippet that generates a grammar for a simple calculator */
%start calculation

/* Define tokens */
%token NUMBER
%left ADD SUB
%left MULT DIV

%%

calculation: /* empty */
    | calculation line '\n' { printf("Result: %d\n", $2); }
    ;

line:
    exp { $$ = $1; }
    | error { yyerror("Invalid expression"); }
    ;

exp:
    NUMBER { $$ = $1; }
    | exp ADD exp { $$ = $1 + $3; }
    | exp SUB exp { $$ = $1 - $3; }
    | exp MULT exp { $$ = $1 * $3; }
    | exp DIV exp { $$ = $1 / $3; }
    ;

%%

/* Start the parser */
int main() {
    yyparse();
    return 0;
}

/* Error handling function */
void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

/* Lexer function */
int yylex() {
    int c = getchar();
    if (c == EOF) return 0;
    if (c >= '0' && c <= '9') {
        int val = c - '0';
        c = getchar();
        while (c >= '0' && c <= '9') {
            val = val * 10 + (c - '0');
            c = getchar();
        }
        ungetc(c, stdin);
        yylval = val;
        return NUMBER;
    }
    if (c == '+' || c == '-') return c;
    if (c == '*' || c == '/') return c;
    return c;
}