%code requires {
    /* define custom data types and structures used in the grammar */
    typedef struct {
        char *value; /* stores the string value of the identifier */
        int line; /* stores the line number where the identifier appears */
    } identifier;
    
    typedef struct {
        int op; /* stores the type of operation performed */
        identifier left; /* stores the left identifier in the operation */
        identifier right; /* stores the right identifier in the operation */
    } operation;
    
    /* define custom error handling function */
    void yyerror(const char *msg) {
        fprintf(stderr, "%s\n", msg); /* print error message to standard error stream */
        exit(1); /* exit program with non-zero status code */
    }
}

%union {
    identifier id; /* declare identifier as a member of union */
    operation op; /* declare operation as a member of union */
}

%token <id> IDENTIFIER /* token for identifiers */
%token <op> PLUS /* token for addition operation */
%token <op> MINUS /* token for subtraction operation */
%token <op> MULTIPLY /* token for multiplication operation */
%token <op> DIVIDE /* token for division operation */

%%

expression: /* rule for an expression */
    IDENTIFIER { /* create an identifier token and assign its value and line number */
        $$ = (identifier) { .value = $1, .line = yylineno };
    }
    |
    expression PLUS expression { /* create an operation token for addition and assign its operands */
        $$ = (operation) { .op = PLUS, .left = $1, .right = $3 };
    }
    |
    expression MINUS expression { /* create an operation token for subtraction and assign its operands */
        $$ = (operation) { .op = MINUS, .left = $1, .right = $3 };
    }
    |
    expression MULTIPLY expression { /* create an operation token for multiplication and assign its operands */
        $$ = (operation) { .op = MULTIPLY, .left = $1, .right = $3 };
    }
    |
    expression DIVIDE expression { /* create an operation token for division and assign its operands */
        $$ = (operation) { .op = DIVIDE, .left = $1, .right = $3 };
    };

%%

/* main function to parse input and generate output */
int main(int argc, char **argv) {
    yyparse(); /* invoke the parser function */
    
    return 0; /* exit program with zero status code */
}