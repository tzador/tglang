%{
#include <stdio.h>
#include <math.h>
%}
/* Bison parser for simple mathematical expressions */
/* Define the tokens we will use */
%token NUMBER
%token ADD SUB MUL DIV LPAREN RPAREN
/* Define the precedence and associativity of operators */
%left ADD SUB
%left MUL DIV
%nonassoc UMINUS
/* Define the grammar rules */
%% /* Start the grammar rules section */
program : statement
;
statement : expression
{
/* Use printf to display the result of the expression */
printf("Result: %d\n", $1);
}
;
expression : NUMBER
{
/* The value of a number is just the number itself */
$$ = $1;
}
| expression ADD expression
{
/* Addition operation */
$$ = $1 + $3;
}
| expression SUB expression
{
/* Subtraction operation */
$$ = $1 - $3;
}
| expression MUL expression
{
/* Multiplication operation */
$$ = $1 * $3;
}
| expression DIV expression
{
/* Division operation */
$$ = $1 / $3;
}
| LPAREN expression RPAREN
{
/* Use parentheses to change order of operations */
$$ = $2;
}
| SUB expression %prec UMINUS
{
/* Unary minus operation */
$$ = -$2;
}
;
%% /* End the grammar rules section */