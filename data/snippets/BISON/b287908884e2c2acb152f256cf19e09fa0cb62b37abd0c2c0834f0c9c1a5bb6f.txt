/* This is a BISON code snippet that defines a simple calculator grammar */
/* It allows for basic arithmetic operations such as addition, subtraction, multiplication, and division */

%token <n> NUMBER      /* Defines a token for numeric values */
%left '+' '-'         /* Specifies the left associativity for addition and subtraction */
%left '*' '/'         /* Specifies the left associativity for multiplication and division */

%%
                        
/* Defines the main rule of the grammar for a simple expression */
expression:  NUMBER { $$ = $1; }            
            | expression '+' expression { $$ = $1 + $3; }
            | expression '-' expression { $$ = $1 - $3; }
            | expression '*' expression { $$ = $1 * $3; }
            | expression '/' expression { $$ = $1 / $3; }
;

/* Defines the rule for an expression enclosed in parentheses */
parenthesis: '(' expression ')' { $$ = $2; } 

%%

/* Defines the function that generates the AST (Abstract Syntax Tree) from the input */
struct AST *generateAST (char *input) {
    yyscan_t scanner;       /* Creates a scanner for the input */
    struct AST *ast;        /* Creates an AST structure */
    
    /* Initializes the scanner and sets its input to the passed in input */
    yylex_init(&scanner);
    yy_scan_string(input, scanner);
    
    /* Parses the input using the defined grammar rules and generates an AST */
    yyparse(&ast, scanner);
    
    /* Destroys the scanner and frees up memory */
    yylex_destroy(scanner);
    
    /* Returns the generated AST */
    return ast;
}