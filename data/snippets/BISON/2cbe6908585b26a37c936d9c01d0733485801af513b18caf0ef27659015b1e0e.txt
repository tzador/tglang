//This grammar describes a simple mathematical expression parser
%{
#include <stdio.h>
int num1, num2;
%}

%token <num1> NUMBER1
%token <num2> NUMBER2

%%
expression: NUMBER1 '+' NUMBER2 ';' {printf("%d", $1 + $2);}
	| NUMBER1 '-' NUMBER2 ';' {printf("%d", $1 - $2);}
	| NUMBER1 '*' NUMBER2 ';' {printf("%d", $1 * $2);}
	| NUMBER1 '/' NUMBER2 ';' {printf("%d", $1 / $2);}
	| NUMBER1 '^' NUMBER2 ';' {int result = 1;
				  for(int i=0; i<$2; i++)
				      result *= $1;
				  printf("%d", result);}
	| '(' expression ')' ';' {printf("%d", $2);}
	;

%%
int main(){
    printf("Enter the first number: ");
    scanf("%d", &num1);

    printf("Enter the second number: ");
    scanf("%d", &num2);

    yyin = stdin;
    yylex();
    yyparse();
    return 0;
}