/* BISON code snippet */
%code top {
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
}

/* Declaration section */
%{
    int numTokens = 0;
    int numErrors = 0;
    char errorMsg[100];
%}

/* Define the tokens */
%token <val> INT
%token <val> FLOAT
%token <val> STRING

%%

start: block
    ;

block: statement_list
    ;

statement_list: statement
    | statement_list statement
    ;

statement: variable_declaration ';'
    | assignment_statement ';'
    | expression_statement ';'
    ;

variable_declaration: type variable_list
    ;

type: INT
    | FLOAT
    | STRING
    ;

variable_list: variable
    | variable_list ',' variable
    ;

variable: IDENTIFIER
    ;

assignment_statement: IDENTIFIER '=' expression
    ;

expression_statement: expression
    ;

expression: expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    | '(' expression ')'
	| INT
	| FLOAT
	| STRING
    ;

%%

/* Function for error handling */
void yyerror (char *s) {
    numErrors++;
    strcpy(errorMsg, s);
}

/* Function to print the value of a token */
void print_token(struct YYSTYPE token) {
    if (token.type == INT){
        printf("INT: %d\n", token.val);
    } else if (token.type == FLOAT) {
        printf("FLOAT: %f\n", token.val);
    } else {
        printf("STRING: %s\n", token.val);
    }
}

/* Main function */
int main() {
    yyparse();
    printf("Number of tokens: %d\n", numTokens);
    printf("Number of errors: %d\n", numErrors);
    printf("Last error message: %s\n", errorMsg);
    return 0;
}