%{
    // This section is for declarations and global variables
    int num_iterations = 5;  // A global variable that represents the number of iterations to run
    int counter = 0;  // A global counter variable
%}

/* The next section defines the tokens used in the grammar */
%token <num> NUMBER  // Token for numbers
%token <op> PLUS     // Token for addition operator
%token <op> MINUS    // Token for subtraction operator

/* The grammar rules */
%%
program : expression               { printf("Result: %d\n", $1); }  // The entry point of the program, prints the result
        ;

expression : expression PLUS term { $$ = $1 + $3; }  // Expression rule for addition
           | expression MINUS term { $$ = $1 - $3; }  // Expression rule for subtraction
           | term                    { $$ = $1; }     // Expression rule for a single term
           ;

term : NUMBER                       { $$ = $1; }  // Term rule for numbers
     ;

%%
/* The next section is for auxiliary functions and definitions */
/* This function parses a NUMBER token and returns the corresponding int value */
int parse_num(const char* num_str) { 
    int num;
    sscanf(num_str, "%d", &num); 
    return num; 
}

/* This function is called before each iteration to reset the global counter */
void reset_counter(void) {
    counter = 0;
}

/* This function checks if the maximum number of iterations has been reached */
int check_max_iterations(void) {
    if (counter >= num_iterations) {
        printf("Max iterations reached\n");
        return 1;
    }
    return 0;
}

/* The next section is optional and defines custom error handling */
/* This function is called on a syntax error and prints an error message */
void yyerror(const char* msg) {
    printf("Syntax error: %s\n", msg);
}

/* The next section is the main function where the parsing and execution happens */
int main(void) {
    yyparse();  // Parses the input according to the defined grammar
    return 0;
}