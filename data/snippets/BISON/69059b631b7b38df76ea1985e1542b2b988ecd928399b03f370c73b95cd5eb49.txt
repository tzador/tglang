%{
    /* This is a code snippet in BISON, a programming language used for
    creating parsers. The code is written in an annotated markdown
    code snippet format. This snippet creates a simple grammar for
    mathematical expressions, including addition, subtraction,
    multiplication, division, and parentheses. */
    
    /* Define token types */
    %token NUMBER    /* for numbers */
    %token ADD       /* for + operator */
    %token SUB       /* for - operator */
    %token MUL       /* for * operator */
    %token DIV       /* for / operator */
    %token LPAREN    /* for left parentheses */
    %token RPAREN    /* for right parentheses */

    /* Declare variable to store result of expression */
    int result;

    /* Function to handle number tokens */
    void num_action(int num) {
        /* Set result to value of number token */
        result = num;
    }

    /* Function to handle addition operator */
    void add_action() {
        /* Get next symbol from input */
        int next = yylex();

        /* Add value of next symbol to current result */
        result += next;
    }

    /* Function to handle subtraction operator */
    void sub_action() {
        /* Get next symbol from input */
        int next = yylex();

        /* Subtract value of next symbol from current result */
        result -= next;
    }

    /* Function to handle multiplication operator */
    void mul_action() {
        /* Get next symbol from input */
        int next = yylex();

        /* Multiply value of next symbol with current result */
        result *= next;
    }

    /* Function to handle division operator */
    void div_action() {
        /* Get next symbol from input */
        int next = yylex();

        /* Divide current result by value of next symbol */
        result /= next;
    }

    /* Function to handle parenthesized expressions */
    void paren_action() {
        /* Get next symbol from input */
        int next = yylex();

        /* Set result to value of next symbol */
        result = next;
    }
%}

/* Define grammar rules */
%start expression
%%
expression:  /* empty */
        | expression ADD expression { add_action(); } /* rule for addition */
        | expression SUB expression { sub_action(); } /* rule for subtraction */
        | expression MUL expression { mul_action(); } /* rule for multiplication */
        | expression DIV expression { div_action(); } /* rule for division */
        | LPAREN expression RPAREN { paren_action(); } /* rule for parenthesized expressions */
        | NUMBER { num_action($1); } /* rule for numbers */
%%