%%
stmt_list:
    stmt                        /* empty statement */
    | stmt_list stmt

stmt:
    '{'                         /* open curly brace */
    | '}'                       /* close curly brace */
    | IF '(' expr ')' stmt      /* if statement */
    | FOR '(' expr ';' expr ';' expr ')' stmt /* for loop */
    | ID '=' expr               /* assignment statement */

expr:
    INTEGER                     /* integer value */
    | ID                        /* identifier */
    | expr '+' expr             /* addition expression */
    | expr '*' expr             /* multiplication expression */
    | '(' expr ')'              /* parenthesis for grouping */
%%

/* code for Bison Parser */
#include <stdio.h>
#include <stdlib.h>

/* global variables */
int result;

/* function prototypes */
int evaluate(int x, int y);
void yyerror(char *s);

/* start symbol */
%start stmt_list

/* Bison rule to handle empty statements */
%%

stmt_list:
    /* empty statement */
    ;

/* Bison rule to handle multiple statements */
stmt_list:
    stmt                        /* first statement */
    | stmt_list stmt            /* recursively process subsequent statements */

/* single statement rules */
stmt:
    '{'                         /* open curly brace */
    | '}'                       /* close curly brace */
    | IF '(' expr ')' stmt      /* if statement */
    | FOR '(' expr ';' expr ';' expr ')' stmt /* for loop */
    | ID '=' expr               /* assignment statement */

/* expression rules */
expr:
    INTEGER                     /* integer value */
    | ID                        /* identifier */
    | expr '+' expr             /* addition expression */
    | expr '*' expr             /* multiplication expression */
    | '(' expr ')'              /* parenthesis for grouping */

/* function to evaluate expressions */
int evaluate(int x, int y) {
    return x + y;
}

/* function to handle Bison errors */
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
    exit(1);
}

/* code for main function */
int main(int argc, char *argv[]) {
    yyparse();
    printf("Result: %d\n", result);
    return 0;
}