%{
/* This is a sample BISON code snippet that parses arithmetic expressions and calculates the result */

// Define the token types
%token <int> NUMBER
%token ADD SUB MUL DIV

// Define the starting symbol
%start expression

// Define the grammar for expression
// <expression> represents the starting non-terminal symbol
expression: <expression> ADD <expression>    { $$ = $1 + $3; }
          | <expression> SUB <expression>    { $$ = $1 - $3; }
          | <expression> MUL <expression>    { $$ = $1 * $3; }
          | <expression> DIV <expression>    { $$ = $1 / $3; }
          | NUMBER                           { $$ = $1; }
          ;

// Specify the associativity and precedence of operators
%left ADD SUB
%left MUL DIV

// Define the lexer rules
%{

// Regular expression for numbers
DIGIT [0-9]
NUMBER {DIGIT}+ 

// Regular expression for operators
ADD "+" 
SUB "-" 
MUL "*" 
DIV "/" 

%}

%%
/* This section contains the rules for parsing the input and generating the output */

// Function for error checking
void yyerror(char *msg) {
    printf("%s\n", msg);
}

// Function for parsing the input and generating the output
int main() {
    yyparse();
    return 0;
}