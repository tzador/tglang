%{
// The %{} section is used for declaring global variables and including header files
#include <stdio.h>
int count = 0;
%}

// The %token section is used for declaring tokens
%token NUM
%token STR

// The %left and %right sections define the associativity and precedence for operators
%left '+' '-' '*' '/'
%right '^'

// The %type section defines the type of the non-terminal symbols
%type <num> Expr
%type <str> Str

// The %left and %right sections can also be used to define the type of the tokens
%right '(' ')'

// The %start section specifies the starting rule for the grammar
%start Program

%%

// The rule for the entire program
Program: Expr | Str;

// The rule for numerical expressions
Expr:
    Expr '+' Expr { $$ = $1 + $3; count++; }
    | Expr '-' Expr { $$ = $1 - $3; count++; }
    | Expr '*' Expr { $$ = $1 * $3; count++; }
    | Expr '/' Expr { $$ = $1 / $3; count++; }
    | Expr '^' Expr { $$ = pow($1, $3); count++; }
    | '(' Expr ')' { $$ = $2; count++; }
    | NUM { $$ = $1; count++; }
    ;

// The rule for string expressions
Str: STR;

// The %% section marks the end of the grammar rules
%%

// The main function that reads input and performs parsing
int main(void) {
    yyparse(); // Performs the parsing process specified by the Bison rules
    printf("Count: %d\n", count); // Prints the number of operations performed
    return 0;
}