%{
// This section allows for including C code within the BISON code
#include <stdio.h>
#include <stdlib.h>
int count = 0; // initialize a global variable
%}

/* This section defines the grammar rules */
%%
program: statements {
    // This will print the total number of statements in the program
    printf("Total number of statements: %d\n", count);
}
;
statements: /* empty */
| statements statement
;
statement: ID '=' expr ';' { // This rule counts the number of assignment statements
    count++;
}
| IF '(' condition ')' statement // This rule counts the number of if statements
{
    count++;
}
;

/* This section defines the expressions */
expr: NUM { // This rule counts the number of numbers in the expression
    count++;
}
| ID { // This rule counts the number of variables in the expression
    count++;
}
| expr '+' expr { // This rule counts the number of addition operations in the expression
    count++;
}
| expr '-' expr { // This rule counts the number of subtraction operations in the expression
    count++;
}
| '(' expr ')' // This rule counts the number of parentheses in the expression
{
    count++;
}
;

/* This section defines the condition for if statements */
condition: expr '==' expr { // This rule counts the number of equal comparisons in the condition
    count++;
}
| expr '<' expr { // This rule counts the number of less than comparisons in the condition
    count++;
}
| expr '>' expr { // This rule counts the number of greater than comparisons in the condition
    count++;
}
;

%%

// This section include the main function of the program, which will invoke the parser
int main() {
    yyparse();
    return 0;
}

// This section includes the error handling function, which will print an error message if there is a syntax error
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

// This section defines the lex function, which will read in the input and return tokens
int yylex() {
    int c = getchar();
    switch(c) {
        case '+': return PLUS; // This token represents a plus sign
        case '-': return MINUS; // This token represents a minus sign
        case '=': return EQUAL; // This token represents an equals sign
        case '(': return LPAREN; // This token represents a left parentheses
        case ')': return RPAREN; // This token represents a right parentheses
        case '\n': return EOL; // This token represents the end of line
        default: return (isdigit(c)) ? NUM : ID; // This token represents a number or variable
    }
}