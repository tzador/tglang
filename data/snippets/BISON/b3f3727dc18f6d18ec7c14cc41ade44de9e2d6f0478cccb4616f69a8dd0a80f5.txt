%{
    // This is a section for defining C code to be included in the generated parser
    #include <stdlib.h>
    #include <stdio.h>

    // Declare a global variable to store the result of the parsing

    int parsed_result;
%}

// Definition section for the grammar rules

// Define a start rule which will be the entry point for the parser
%start start

// Define the grammar rules using BNF notation

start: expr { parsed_result = $1; }; // The start rule takes in an expression and sets the result to the parsed_result variable
expr: INTEGER { $$ = $1; } // A simple rule which assigns the result of the expression to the parsed_result variable
    | expr '+' expr { $$ = $1 + $3; } // A rule for addition
    | expr '-' expr { $$ = $1 - $3; } // A rule for subtraction
    | expr '*' expr { $$ = $1 * $3; } // A rule for multiplication
    | expr '/' expr { $$ = $1 / $3; } // A rule for division

// Definition section for the tokens
%token INTEGER

%%

// C code to be included in the parsing function
int main(int argc, char *argv[]){
  // Call yyparse() to start the parsing process
  yyparse();

  // Print out the result of the parsing
  printf("Result of parsing: %d\n", parsed_result);

  return 0;
}

// C code for the lexer function
int yylex(){
  // Read the input from standard input
  int input = getchar();

  // If the input is a digit, create a token for it and return it
  if(isdigit(input)){
    yylval = atoi(&input);
    return INTEGER;
  }
  // Otherwise, return 0 indicating the end of input
  else{
    return 0;
  }
}

// C code for the error function
void yyerror(char *msg){
  // Print out the error message
  printf("Parsing error: %s\n", msg);
}