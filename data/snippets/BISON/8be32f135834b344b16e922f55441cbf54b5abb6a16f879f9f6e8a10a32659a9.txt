/* This is a complex BISON code snippet that uses a recursive rule to parse a list of mathematical expressions. */

%token NUM         /* token for numbers */
%token ADD_OP      /* token for addition operator */
%token SUB_OP      /* token for subtraction operator */
%token MUL_OP      /* token for multiplication operator */
%token DIV_OP      /* token for division operator */

%%

expression:
    NUM             /* base case for a single number */
    | expression ADD_OP expression   /* recursive rule for addition expression */
    | expression SUB_OP expression   /* recursive rule for subtraction expression */
    | expression MUL_OP expression   /* recursive rule for multiplication expression */
    | expression DIV_OP expression   /* recursive rule for division expression */
    ;

%%

/* Sample input to be parsed */

10 + 5 * 2

/* Expected output after parsing */

expression:
    expression:
        NUM (10)
    ADD_OP (+)
    expression:
        expression:
            NUM (5)
        MUL_OP (*)
        expression:
            NUM (2)