%{
#include <stdio.h>
#include <string.h>
void printString(char* str);
%}

/*
 * Definition section
 */
%token DIGIT
%token DELIMITER
%token OPERATOR
%token STRING
%token QUOTE
%token NEWLINE
%token ERROR

/*
 * Rule section
 */
%%
/*  full statement */
fullStmt: printStmt
        | assignStmt
        | ifStmt
        | loopStmt
        | exprStmt
        | printStringStmt
        | delStmt
        ;

/*  print statement */
printStmt: "print" exprStmt NEWLINE { printf("%d\n", $2); }
         | "print" printStringStmt NEWLINE
         ;

/*  assignment statement */
assignStmt: STRING "=" exprStmt { strcpy($1, $3); }
           ;

/*  if statement */
ifStmt: "if" exprStmt "then"
      { if ($2 != 0) $$ = 1; else $$ = 0; }
      "fi" NEWLINE
      ;

/*  loop statement */
loopStmt: "loop" exprStmt "times" NEWLINE
         { for (int i = 0; i < $2; i++) { printf("%d\n", i+1); } }
         ;

/*  expression statement */
exprStmt: expr DELIMITER expr { if ($2 == "+") $$ = $1 + $3; else if ($2 == "-") $$ = $1 - $3; else if ($2 == "*") $$ = $1 * $3; else if ($2 == "/") $$ = $1 / $3; }
        | "-" expr %prec UMINUS { $$ = -$2; }
        | "(" expr ")" { $$ = $2; }
        | DIGIT { $$ = $1; }
        ;

/*  print string statement */
printStringStmt: QUOTE STRING QUOTE { printString($2); }
                ;

/*  delimiter statement */
delStmt: formatStmt DELIMITER "format" STRING DELIMITER { printf($4); }
        ;

%%
/*  Helper function to print a string */
void printString(char* str) {
    printf("%s", str);
}

/*  Set up the lexer and parser */
int main(int argc, char **argv) {
    yylex();
    yyparse();
}

/*  Functions generated by Bison */
int yylex();
int yyparse();

/*  Error function to catch any errors */
void yyerror(const char *s) {
    fprintf(stderr, "ERROR: %s\n", s);
}