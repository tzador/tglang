/* This is a sample BISON code snippet that generates a parser for a simple arithmetic language */

%{
/* This section contains header files, variables, and function definitions that will be included in the parser */
#include <stdio.h> /* To print output */
#include <stdlib.h> /* For memory allocation */
#define YYSTYPE int /* Define the type of values in the parser stack */

/* Custom function to handle division by zero errors */
void divide_by_zero() {
  printf("Divison by zero is not allowed!\n");
  exit(1); /* Exit the program with an error code */
}

%}

/* This section defines the tokens in the arithmetic language */
%token NUMBER /* For integers */
%left '+' '-' /* Define left associativity and precedence for '+' and '-' operators */
%left '*' '/' /* Define left associativity and precedence for '*' and '/' operators */

%%

/* This section defines the grammar rules for the arithmetic language */
expression: /* Start rule */
          | expression '+' expression { $$ = $1 + $3; } /* Addition rule */
          | expression '-' expression { $$ = $1 - $3; } /* Subtraction rule */
          | expression '*' expression { $$ = $1 * $3; } /* Multiplication rule */
          | expression '/' expression { /* Check for division by zero */
                                         if ($3 == 0) { divide_by_zero(); }
                                         else { $$ = $1 / $3; }
                                       } /* Division rule */
          | '(' expression ')' { $$ = $2; } /* Parentheses rule */
          | '-' expression { $$ = - $2; } /* Unary minus rule */
          | NUMBER { $$ = $1; } /* Rule for single integers */

%%

/* This section contains the function definitions for error handling and printing the output */
int yyerror(char *msg) { /* Function to handle syntax errors */
  printf("Syntax error: %s\n", msg);
  return 0;
}

int main() {
  /* Call the parser function */
  yyparse();

  /* Print the output tree structure */
  printf("Output: %d\n", $1);

  return 0;
}