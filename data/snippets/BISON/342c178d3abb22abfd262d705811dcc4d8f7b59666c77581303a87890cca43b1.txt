/* This is a complex code snippet in BISON language */
%{
    /* This is a C program that will be included at the beginning of the generated parser */
    #include <stdio.h>
    /* Define the number of variables */
    int num_vars = 10;
%}

/* Define the tokens for our language */
%token NUM_VAR_1
%token NUM_VAR_2
%token NUM_VAR_3
%token NUM_VAR_4
%token NUM_VAR_5
%token NUM_VAR_6
%token NUM_VAR_7
%token NUM_VAR_8
%token NUM_VAR_9
%token NUM_VAR_10

/* Define the starting symbol for our grammar */
%start PROGRAM

/* Rules for our grammar */
%%
/* The program should contain a list of variable declarations and a single statement */
PROGRAM: VAR_DECLARATION_LIST STATEMENT;

/* The list of variable declarations can be empty */
VAR_DECLARATION_LIST:/* empty*/
                    | VAR_DECLARATION_LIST VAR_DECLARATION;

/* A single variable declaration consists of the variable type followed by a variable name */
VAR_DECLARATION: VAR_TYPE ID;

/* Available variable types in our language */
VAR_TYPE: "int"
        | "float"
        | "char"
        | "string";

/* The statement can be a simple expression */
STATEMENT: EXPRESSION;

/* The expression can be a combination of variables, constants, and operators */
EXPRESSION: ID
          | CONSTANT
          | EXPRESSION OPERATOR EXPRESSION;

/* Define the operators in our language */
OPERATOR: "+"
        | "-"
        | "*"
        | "/";

/* ID refers to any of our defined tokens for variables */
ID: NUM_VAR_1
  | NUM_VAR_2
  | NUM_VAR_3
  | NUM_VAR_4
  | NUM_VAR_5
  | NUM_VAR_6
  | NUM_VAR_7
  | NUM_VAR_8
  | NUM_VAR_9
  | NUM_VAR_10;

/* Constant can be a numerical value or a string literal */
CONSTANT: NUM_VAL
        | STR_VAL;

/* Define the numerical value */
NUM_VAL: [0-9]+;

/* Define the string value */
STR_VAL: "\"" [A-Za-z]+"\"";

/* Ignore whitespace in our code */
%ignore " ";

/* Throw an error if any invalid token is encountered */
%error-verbose

%%

/* Implementation of the generated parser */
int main(){
    /* Initialize the parser */
    yyparse();
    /* Print the number of variables */
    printf("Number of variables in our language: %d\n", num_vars);
    return 0;
}

/* Define the callback function for handling variable declarations */
int yyvar_declaration(char *var_type, char *id){
    /* Increase the number of variables */
    num_vars++;
    /* Print the variable declaration */
    printf("Variable type: %s, Variable name: %s\n", var_type, id);
    return 0;
}

/* Define the callback function for handling expressions */
int yyexpression(char *id1, char *op, char *id2){
    /* Print the expression */
    printf("Expression: %s %s %s\n", id1, op, id2);
    return 0;
}

/* Define the function for retrieving the variable type from the token */
char* get_var_type(char *var){
    /* Check the token and return the corresponding variable type */
    if(var == "NUM_VAR_1" || var == "NUM_VAR_3" || var == "NUM_VAR_5" || var == "NUM_VAR_7" || var == "NUM_VAR_9"){
        return "int";
    }
    else if(var == "NUM_VAR_2" || var == "NUM_VAR_4" || var == "NUM_VAR_6" || var == "NUM_VAR_8" || var == "NUM_VAR_10"){
        return "float";
    }
    else{
        return "string";
    }
}

/* Define the function for retrieving the numerical value from the token */
int get_num_val(char *var){
    /* Check the token and return the corresponding numerical value */
    if(var == "NUM_VAR_1"){
        return 1;
    }
    else if(var == "NUM_VAR_2"){
        return 2;
    }
    else if(var == "NUM_VAR_3"){
        return 3;
    }
    else if(var == "NUM_VAR_4"){
        return 4;
    }
    else if(var == "NUM_VAR_5"){
        return 5;
    }
    else if(var == "NUM_VAR_6"){
        return 6;
    }
    else if(var == "NUM_VAR_7"){
        return 7;
    }
    else if(var == "NUM_VAR_8"){
        return 8;
    }
    else if(var == "NUM_VAR_9"){
        return 9;
    }
    else{
        return 10;
    }
}

/* Define the function for retrieving the string value from the token */
char* get_str_val(char *var){
    /* Check the token and return the corresponding string value */
    if(var == "NUM_VAR_1"){
        return "one";
    }
    else if(var == "NUM_VAR_2"){
        return "two";
    }
    else if(var == "NUM_VAR_3"){
        return "three";
    }
    else if(var == "NUM_VAR_4"){
        return "four";
    }
    else if(var == "NUM_VAR_5"){
        return "five";
    }
    else if(var == "NUM_VAR_6"){
        return "six";
    }
    else if(var == "NUM_VAR_7"){
        return "seven";
    }
    else if(var == "NUM_VAR_8"){
        return "eight";
    }
    else if(var == "NUM_VAR_9"){
        return "nine";
    }
    else{
        return "ten";
    }
}

/* Define the function for printing the error message */
void yyerror(char *s){
    /* Print the error message */
    printf("[ERROR] %s\n", s);
}

/* Define the function for handling variable names */
int yyvar_name(char *var){
    /* Retrieve the variable type from the token */
    char *var_type = get_var_type(var);
    /* Print the variable name and type */
    printf("Variable type: %s, Variable name: %s\n", var_type, get_str_val(var));
    return 0;
}

/* Define the function for handling numerical values */
int yynum_val(char *var){
    /* Print the numerical value */
    printf("Numerical value: %d\n", get_num_val(var));
    return 0;
}

/* Define the function for handling string values */
int yystr_val(char *var){
    /* Print the string value */
    printf("String value: %s\n", get_str_val(var));
    return 0;
}