%token DIGIT NUMBER
%left '-' '+'
%left '*' '/'
%%
program: statement_list{
    // This is a production rule for the `program` non-terminal
    // It defines the structure of a program in our language.
    printf("Parsing successful!");
}

statement_list: statement | statement_list statement{
    // This is a production rule for the `statement_list` non-terminal
    // It defines a list of statements in our program.
    printf("Parsing statement list...");
}

statement: expression | assignment{
    // This is a production rule for the `statement` non-terminal
    // It defines a statement as either an expression or an assignment.
    printf("Parsing statement...");
}

expression: NUMBER{
    // This is a production rule for the `expression` non-terminal
    // It defines an expression as a single NUMBER token.
    printf("Parsing number expression...");
}

assignment: DIGIT '=' expression{
    // This is a production rule for the `assignment` non-terminal
    // It defines an assignment statement, where a digit is assigned with an expression.
    printf("Parsing assignment statement...");
}

%%
int main(){
    // This is a driver code for our BISON parser.
    yyparse();
    return 0;
}