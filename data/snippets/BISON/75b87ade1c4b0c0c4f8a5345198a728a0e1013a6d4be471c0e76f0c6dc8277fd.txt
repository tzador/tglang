%token <TYPE> INT BOOL STR // defining token types

%% 

start: program
    | function_list
    | statement_list
    ;

program: PROGRAM ID SEMICOLON // starting rule for program
        variable_list
        main_body
        ;

variable_list: // optional rule for defining variables
    | variable_list variable_declaration
    ;

variable_declaration: TYPE ID [= expression] SEMICOLON // rule for variable declaration
    ;

main_body: LBRACE
            statement_list
         RBRACE
        ;

statement_list: /* empty */ // rule for list of statements
    | statement_list statement
    ;

statement: assignment // defining rule for assignment
    | selection // rule for if-else statement
    | iteration // rule for looping
    ;

assignment: ID EQUALS expression SEMICOLON // defining rule for assigning values
    ;

selection: IF LPAREN expression RPAREN statement // rule for if statement
                [ELSE statement]; // optional else statement
    ;

iteration: FOR LPAREN expression ";" expression ";" expression RPAREN statement // rule for for loop
            | WHILE LPAREN expression RPAREN statement // rule for while loop
            ;

expression: ID // rule for single identifier
            | LITERAL // rule for single literal value
            | expression PLUS expression // rule for addition
            | expression MINUS expression // rule for subtraction
            | expression TIMES expression // rule for multiplication
            | expression OVER expression // rule for division
            ;

function_list: /* empty */ // optional rule for defining functions
    | function_list function_declaration
    ;

function_declaration: FUNCTION ID LPAREN parameter_list RPAREN TYPE // defining rule for function declaration
                        function_body
                        ;

function_body: LBRACE
                variable_list
                statement_list
                RETURN expression SEMICOLON // rule for return statement
                RBRACE
                ;

parameter_list: /* empty */ // optional rule for defining function parameters
                | parameter_list parameter_declaration
                ;

parameter_declaration: TYPE ID SEMICOLON // defining rule for function parameters
                        ;

%% // declaring end of grammar rules