%{

/* This is a BISON code snippet that defines a grammar for arithmetic expressions*/

    #include <stdio.h>
    #include <math.h>

    int result; /* variable to store the final result */
%}

/* BISON declarations section */

%token <op_val> PLUS MINUS MULTIPLY DIVIDE POWER                   /* Declaring the tokens for arithmetic operators */
%token <num_val> NUMBER                                             /* Declaring the token for numbers */

%left PLUS MINUS                                                     /* Defining precedence for PLUS and MINUS operators */
%left MULTIPLY DIVIDE POWER                                         /* Defining precedence for MULTIPLY, DIVIDE and POWER operators */

%%

/* BISON grammar definitions */

expression  : term                                                    /* Defining a rule for an arithmetic expression */
            | expression PLUS term
            | expression MINUS term
            | expression MULTIPLY term
            | expression DIVIDE term
            | expression POWER term;

term        : NUMBER                                                  /* Defining a rule for a term, which is a number */
            | term MULTIPLY NUMBER
            | term DIVIDE NUMBER
            | term POWER NUMBER;

%%

/* BISON code section */

int main() {
    printf("Enter an arithmetic expression: ");                       /* Prompting user to input an arithmetic expression */
    yyparse();                                                        /* Calling the BISON parser function, yyparse */

    /* Printing the final result */
    printf("The final result is: %d", result);                        /* Using the global 'result' variable to print the result */

    return 0;
}

/* BISON lexer section */

int yyerror(char *error_message) {
    printf("%s\n", error_message);                                    /* Function to print an error message */
    return 0;
}

int yylex() {
    int c;
    /* Code to read the input and return the corresponding token */
    if ((c = getchar()) == '+' || (c = getchar()) == '-' || (c = getchar()) == '*' ||
        (c = getchar()) == '/' || (c = getchar()) == '^' || (c = getchar()) == '\n') {
        yylval.op_val = c;                                            /* Storing the operator in yylval structure */
        return c;
    } else if (c == EOF) {                                            /* Returning EOF token when EOF encountered */
        return EOF;
    } else if (c >= '0' && c <= '9') {                                /* Handling numbers with multiple digits */
        ungetc(c, stdin);                                             /* Pushing back the first digit into input stream */
        scanf("%d", &yylval.num_val);                                 /* Using scanf to read the number and store in yylval structure */
        return NUMBER;                                                /* Returning NUMBER token */
    } else {
        return c;                                                     /* Returning unknown character as token */
    }
}