%token NUMBER 	/* defines token for numbers */
%token ADD_OP 	/* defines token for addition operator */
%token SUB_OP 	/* defines token for subtraction operator */
%token MUL_OP 	/* defines token for multiplication operator */

%%
calc: expr			/* defines start symbol */
		{ printf("%d", $1); }		/* prints result of expression */
		| error			/* defines rule for error handling */
		;

expr: NUMBER 		/* defines rule for numbers */
		{ $$ = $1; }		/* assigns number token to result */
		| expr ADD_OP expr 	/* defines rule for addition expression */
		{ $$ = $1 + $3; }	/* assigns sum of two expressions to result */
		| expr SUB_OP expr 	/* defines rule for subtraction expression */
		{ $$ = $1 - $3; }	/* assigns difference of two expressions to result */
		| expr MUL_OP expr 	/* defines rule for multiplication expression */
		{ $$ = $1 * $3; }	/* assigns product of two expressions to result */
		| '(' expr ')' 		/* defines rule for parentheses expression */
		{ $$ = $2; }		/* assigns result of expression inside parentheses to result*/
		;

%%
int main() {
	yyparse(); 	/* calls parser to parse input */
	return 0;
}