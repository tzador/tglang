/* Description: This code snippet is a BISON grammar for a simple programming language with if-else statements and arithmetic operations. */

/* Define the tokens for the programming language */
%token <num> NUMBER /* for numbers */
%token ADD SUB MULT DIV /* for arithmetic operations */
%token ID /* for identifiers */

/* Define the starting symbol for the grammar */
%start program

%%

/* Define the rules for a program */
program:
    statement_list
    ;

/* Define the rules for a statement list */
statement_list:
    statement '\n'
    | statement_list statement '\n'
    ;

/* Define the rules for a statement */
statement:
    assignment
    | if_else_statement
    ;

/* Define the rules for an assignment statement */
assignment:
    ID '=' expression
    ;

/* Define the rules for an if-else statement */
if_else_statement:
    'if' '(' expression ')' '\n'
    statement_list
    'else' '\n'
    statement_list
    ;

/* Define the rules for an expression */
expression:
    NUMBER
    | expression ADD expression
    | expression SUB expression
    | expression MULT expression
    | expression DIV expression
    ;

/* Define the grammar for identifying numerical values */
%%

int main(void) {
    /* Define input for the BISON parser */
    yyscan_t scanner;
    yylex_init(&scanner);
    
    /* Set input string */
    yy_scan_string("x = 5 + 10\nif (x > 10) \n x * 2\nelse \n x / 2");
    
    /* Parse the input string using BISON */
    yyparse(scanner);
    
    /* Retrieve the AST generated by BISON */
    ast *tree = program(scan_record);
    
    /* Evaluate the AST to get the final value of x */
    int result = evaluate(tree);
    
    /* Print the final value */
    printf("%d\n", result);
    
    return 0;
}

/* Define the lexer function */
%{
#define YYSTYPE ast* /* Define the type of data for tokens */

/* Declare the parser function */
int yyparse(yyscan_t scanner);
void yyerror(yyscan_t scanner, ast *error);

/* Define the token structure for identifiers */
typedef struct {
    char *id_name;
} id;

%}

/* Match numbers and identifiers */
[0-9]+ {
    yylval = (ast*)malloc(sizeof(ast));
    yylval->type = ast_number;
    yylval->num = atoi(yytext);
    return(NUMBER);
}

[[:alpha:]_][[:alnum:]_]* {
    yylval = (ast*)malloc(sizeof(ast));
    yylval->type = ast_id;
    yylval->id = (id*)malloc(sizeof(id));
    yylval->id->id_name = strdup(yytext);
    return(ID);
}

/* Ignore whitespace */
[ \t] ;

/* Handle unexpected characters */
. yyerror(scanner, NULL);