# Start rule for parser
%start program

%%

program:
    declaration_list
    | declaration_list stmt_list
    ;

declaration_list:
    declaration
    | declaration_list declaration
    ;

declaration:
    type var_list ';'
    ;

type:
    INT
    | FLOAT
    ;

var_list:
    IDENTIFIER
    | var_list ',' IDENTIFIER
    ;

stmt_list:
    statement
    | stmt_list statement
    ;

statement:
    assignment_stmt
    | if_stmt
    | for_stmt
    | while_stmt
    | print_stmt
    | read_stmt
    ;

assignment_stmt:
    var '=' expr ';'
    ;

if_stmt:
    IF '(' condition ')' '{' stmt_list '}'
    | IF '(' condition ')' '{' stmt_list '}' ELSE '{' stmt_list '}'
    ;

for_stmt:
    FOR '(' assignment_stmt ';' condition ';' assignment_stmt ')' '{' stmt_list '}'
    ;

while_stmt:
    WHILE '(' condition ')' '{' stmt_list '}'
    ;

print_stmt:
    PRINT expr ';'
    ;

read_stmt:
    READ var_list ';'
    ;

condition:
    expr '<' expr
    | expr '>' expr
    | expr '<=' expr
    | expr '>=' expr
    | expr '==' expr
    | expr '!=' expr
    ;

expr:
    term
    | expr '+' term
    | expr '-' term
    ;

term:
    factor
    | term '*' factor
    | term '/' factor
    ;

factor:
    '(' expr ')'
    | var
    | num
    ;

%%
# End rule for parser
program:  # The start symbol for our grammar
%option noyywrap  # Prevents Bison from defining yywrap function

# Bison declarations for tokenizer
%token INT FLOAT IF ELSE FOR WHILE PRINT READ IDENTIFIER CONSTANT

%%

# C code and definitions for symbol table and other data structures go here

# Lexer pattern for identifier
[a-zA-Z]+        { yylval.identifier = strdup(yytext); return IDENTIFIER; }

# Lexer pattern for numbers
[0-9]+          { yylval.num = atoi(yytext); return CONSTANT; }

# Lexer for whitespace
[\n\t\r ]+        /* skip whitespace */

# Lexer for other characters not defined above
.                { return yytext[0]; }