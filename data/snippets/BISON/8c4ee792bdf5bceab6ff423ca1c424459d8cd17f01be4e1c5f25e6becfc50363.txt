%{
/*
    This is a BISON code snippet for a calculator program.
    The code is inspired by the tutorial found in the BISON manual.
*/
#include <stdio.h>
#define YYSTYPE int // creating a type definition for the calculator's variables
int result; // global variable to store the result of calculations
%}

/* Calculator grammar */
%union{ // defining the calculator's union type
    int intVal; // integers are the values used in this calculator
}
%token <intVal> NUM // NUM is a token representing integer values in the calculator

%%

input: /* empty */ { /* empty rule for the initial state */ }
    | input line {$$ = $2} /* recursive rule for input */

line: '\n' | exp '\n'{ // rule for expressions followed by line breaks
    printf("Result: %d\n", result);
}
    | error '\n' { // rule for handling errors
    yyerrok;
}

exp: NUM {
    result = $1; // assign the value of the input number to our result variable
    printf("Input: %d\n", result);
}
    | exp '+' NUM    { result += $3; } // rule for addition
    | exp '-' NUM    { result -= $3; } // rule for subtraction
    | exp '*' NUM    { result *= $3; } // rule for multiplication
    | exp '/' NUM    { result /= $3; } // rule for division
    | exp '%' NUM    { result %= $3; } // rule for modulus
    | exp '^' NUM    { result = (int)pow((double)result, (double)$3); } // rule for exponentiation
    | '(' exp ')'   { /* do nothing */ } // rule for parentheses
    | '-' exp       { result = -$2; } // rule for negative numbers

%%

int main(void){
    printf("Welcome to the calculator program!\n");
    printf("Enter your expression to calculate: \n");
    yyparse(); // start parsing user input
    printf("Thank you for using the calculator program!\n");
    return 0;
}