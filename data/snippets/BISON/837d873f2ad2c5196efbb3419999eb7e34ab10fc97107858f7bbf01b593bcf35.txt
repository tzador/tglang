/* Bison parser file */
%token <type> NUM                     //defining NUM as a token of type "type"
%token <string> ID STRING             //defining ID and STRING as tokens of type "string"

%%
program: decl_list stmt_list | decl_list | stmt_list;   //defining a rule named "program"

decl_list: decl_list decl | decl;      //defining a rule named "decl_list"

decl: type ID '=' NUM ';'              //defining a rule named "decl" with specified format
    | type ID '=' STRING ';'           //to match different types of declarations

stmt_list: stmt_list stmt | stmt;      //defining a rule named "stmt_list"

stmt: ID '=' '(' expr ')' ';' |        //defining a rule named "stmt" with specified format
      'while' '(' cond ')' '{' stmt_list '}' |
      'if' '(' cond ')' '{' stmt_list '}' 'else' '{' stmt_list '}' ;

expr: NUM                             //defining a rule named "expr" to match a single number
    | ID                              //or variable
    | expr '+' expr                   //or an expression with addition operation
    | expr '-' expr                   //or an expression with subtraction operation
    | expr '*' expr                   //or an expression with multiplication operation
    | expr '/' expr                   //or an expression with division operation
    | '(' expr ')' ;                  //or an expression enclosed in parentheses

cond: expr '<' expr                   //defining a rule named "cond" to match a condition
    | expr '>' expr                   //with comparison operators
    | '(' cond ')'                    //or a condition enclosed in parentheses
    | '!' cond                        //or a negation of a condition
    | cond '&&' cond                  //or a combination of two conditions using logical AND
    | cond '||' cond ;                //or a combination of two conditions using logical OR

type:  'int'  |  'float'  |  'char' ; //defining a rule named "type" to match the type of a variable