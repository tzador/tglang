/* This is a grammar for a simple arithmetic calculator */
%%

input: /* empty */
     | input line '\n'

line: expr        { printf("%d\n", $1); };

expr: NUM         { $$ = $1; }
    | ID '(' expr_list ')'
    | ID params    { $$ = lookup_function($1, $2); };

expr_list:  /* empty */    { $$ = EmptyList(); }
         | expr_list expr  { $$ = AppendToList($1, $2); };

params: /* empty */    { $$ = EmptyList(); }
      | expr      { $$ = AppendToList(EmptyList(), $1); }
      | expr_list { $$ = $1; };

%%

/* This section is for token definitions */
%start input             /* the starting rule for the parser */
%token NUM               /* definition for numbers */
%token ID                /* definition for identifiers */
%%
/* The function that is run when a parsing error occurs */
void yyerror(char *s) {
    fprintf(stderr, "error: %s\n", s);
}

/* The main function that runs the parser */
int main(void) {
    yyparse();  /* runs the parser */
    return 0;
}