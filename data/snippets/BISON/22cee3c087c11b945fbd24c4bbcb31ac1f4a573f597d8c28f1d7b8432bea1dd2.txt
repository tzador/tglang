%token PLUS MINUS TIMES DIVIDE NUMBER
%left PLUS MINUS
%left TIMES DIVIDE
%%
expr: expr PLUS expr
  | expr MINUS expr
  | expr TIMES expr
  | expr DIVIDE expr
  | NUMBER {printf("%d\n", $1);}
  ;
%%

// Here, we first define our tokens, which in this case are PLUS, MINUS, TIMES, DIVIDE, and NUMBER. 
// Then, we define their precedence level using the %left rule, which specifies that these tokens 
// should be evaluated from left to right. 
// Next, we use the double percent sign to start our rules section. 
// In this section, we define our different expression productions, which recursively call themselves 
// based on the input. 
// For example, the first rule states that an expr can be an expr followed by a PLUS token followed 
// by another expr. This allows us to handle more complex expressions such as "2 + 3 + 4." 
// The final rule takes in a NUMBER token and prints out its value using printf.