%token <val> INT FLOAT                      // declares INT and FLOAT tokens for use as semantic values

%%                                          // start of grammar rules

program: expr_list ';'                       // program consists of expression list followed by semicolon

expr_list: expr_list expr                    // expression list can have one or more expressions
         | %empty

expr: '(' expr ')'                           // expression can be surrounded by parentheses
    | expr '+' expr                          // expression can be the sum of two expressions
    | expr '*' expr                          // expression can be the product of two expressions
    | ID '=' expr                            // expression can assign a value to an identifier
    | INT                                    // INT token can be used as a value
    | FLOAT                                  // FLOAT token can be used as a value

ID: [a-zA-Z][a-zA-Z0-9]*                     // identifier can start with a letter and contain any combination of letters and digits

%%                                          // end of grammar rules

%start program                               // declares the starting rule

%union {                                     // declares the union type for semantic values
    int val;
    float val;
}

%type <val> INT FLOAT ID                     // specifies the semantic type of tokens

%{
/* C code can be added here for lexical analysis and value assignment */
%}

%%
                                             // actual lexical analysis and semantic actions
%%

int main() {                                 // main function for testing the parser
    return yyparse();                        // calls the parser function
}

int yyerror(char *s) {                       // function to handle parsing errors
    fprintf(stderr, "%s\n", s);              // print error message
    return 0;                                // return 0 to indicate parsing failure
}