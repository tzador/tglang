%%
/* Grammar rules for a simple calculator program */

/* Starting symbol */
program: statement_list

/* Non-terminal symbols */
statement_list: statement_list NEWLINE | statement | empty
statement: assignment | print
assignment: VARIABLE ASSIGNMENT expr
print: PRINT expr

/* Terminal symbols */
expr: NUMBER | VARIABLE
NEWLINE: [\n\r]+
ASSIGNMENT: "="
PRINT: "print"
VARIABLE: [a-zA-Z]+

/* Empty rule */
empty:

%%
/* C code to handle the grammar rules */
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

/* Variables to store values */
float result;
float variables[26]; // assuming variable names are single letters

/* Function to evaluate an expression */
float evaluate_expr(float expr){
    return expr;
}

/* Function to handle assignments */
void handle_assignment(char variable, float expr){
    variables[variable - 'a'] = evaluate_expr(expr);
}

/* Function to handle printing */
void handle_print(float expr){
    printf("%f", evaluate_expr(expr));
}

/* Main function */
int main(){
    /* Bison specific code */
    yyparse();

    return 0;
}

/* Bison specific code */
void yyerror(char *s){
    fprintf(stderr, "%s\n", s);
    exit(1);
}

/* Custom function to return token values */
float yyget_lval(){
    return result;
}

/* Custom code to handle tokens */
%token NUMBER VARIABLE
%left '+''-'
%left '*''/'
%left '^'
%%