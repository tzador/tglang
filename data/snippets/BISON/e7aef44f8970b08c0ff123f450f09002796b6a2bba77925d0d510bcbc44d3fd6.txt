%token NUM // Token for numbers
%token ADD SUB MUL DIV // Tokens for arithmetic operations
%token OPEN_PAREN CLOSE_PAREN // Tokens for parentheses
%token END // Token for end of input

%% // Begin Grammar Rules

input: // Rule for input
    | expression /* Check if input is a valid expression */
    | END { printf("Valid input\n") } /* If input is empty and only contains the END token, it is considered valid */

expression: // Rule for expressions
    | term /* Expression can be a single term */
    | expression ADD term /* Expression can also be a term followed by + and another term */
    | expression SUB term /* Expression can also be a term followed by - and another term */

term: // Rule for terms
    | factor /* Term can be a single factor */
    | term MUL factor /* Term can also be a factor followed by * and another factor */
    | term DIV factor /* Term can also be a factor followed by / and another factor */

factor: // Rule for factors
    | NUM /* Factor can be a number */
    | OPEN_PAREN expression CLOSE_PAREN /* Factor can also be an expression enclosed in parentheses */

%% // End Grammar Rules

int main() {
    yyparse(); // Parse the input using the generated parser

    return 0;
}