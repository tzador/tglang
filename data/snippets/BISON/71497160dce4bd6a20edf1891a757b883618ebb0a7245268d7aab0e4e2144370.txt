/* Definition section */
%token <num> NUMBER
%token <char> LETTER
%token <symbol> PLUS MINUS TIMES DIVIDE
%token END
%start file

%%

/* Grammar rules */

file:
    expr END
    ;

expr:
    term
    | expr PLUS term   { /* Code to handle addition */ }
    | expr MINUS term  { /* Code to handle subtraction */ }
    ;

term:
    factor
    | term TIMES factor  { /* Code to handle multiplication */ }
    | term DIVIDE factor { /* Code to handle division */ }
    ;

factor:
    constant
    | LETTER
    ;

constant:
    NUMBER
    | MINUS NUMBER  { /* Code to handle negative numbers */ }
    ;

%%

/* Function definitions for actions */

void yyerror(const char* error)
{
    printf("Error: %s", error);
    exit(1);
}

int yylex()
{
    int c = getchar();
    if (c == EOF) {
        return END;
    } else if (c == '+') {
        return PLUS;
    } else if (c == '-') {
        return MINUS;
    } else if (c == '*') {
        return TIMES;
    } else if (c == '/') {
        return DIVIDE;
    } else if (isdigit(c)) {
        ungetc(c, stdin);
        int number;
        scanf("%d", &number);
        return NUMBER;
    } else if (isalpha(c)) {
        return LETTER;
    } else {
        return c;
    }
}

int main()
{
    yyparse();
}

/* Bison parser definition section */

%include {
    int main();
}

%token END       { /* Constant for end of input */ }
%token NUMBER    { /* Token for numbers */ }
%token LETTER    { /* Token for letters */ }
%token PLUS      { /* Token for addition sign */ }
%token MINUS     { /* Token for subtraction sign */ }
%token TIMES     { /* Token for multiplication sign */ }
%token DIVIDE    { /* Token for division sign */ }

%type <num> expr      { /* Type for numerical values */ }
%type <char> term     { /* Type for single characters */ }
%type <symbol> factor { /* Type for mathematical operators */ }

/* Definition of the start symbol of the grammar */
%start file

%%

/* Grammar rules */

file:
    expr END       { /* Code to handle the end of input */ }
    ;

expr:
    term           { /* Code to handle the evaluation of terms */ }
    | expr PLUS term   { /* Code to handle addition */ }
    | expr MINUS term  { /* Code to handle subtraction */ }
    ;

term:
    factor           { /* Code to handle the evaluation of factors */ }
    | term TIMES factor  { /* Code to handle multiplication */ }
    | term DIVIDE factor { /* Code to handle division */ }
    ;

factor:
    constant         { /* Code to handle constants */ }
    | LETTER         { /* Code to handle variables */ }
    ;

constant:
    NUMBER             { /* Code to handle numerical constants */ }
    | MINUS NUMBER  { /* Code to handle negative numbers */ }
    ;

%%

/* Function definitions for actions */

void yyerror(const char* error)
{
    printf("Error: %s", error);
    exit(1);
}

int yylex()
{
    int c = getchar();
    if (c == EOF) {
        return END;
    } else if (c == '+') {
        return PLUS;
    } else if (c == '-') {
        return MINUS;
    } else if (c == '*') {
        return TIMES;
    } else if (c == '/') {
        return DIVIDE;
    } else if (isdigit(c)) {
        ungetc(c, stdin);
        int number;
        scanf("%d", &number);
        return NUMBER;
    } else if (isalpha(c)) {
        return LETTER;
    } else {
        return c;
    }
}

int main()
{
    yyparse();
}

/* Custom C code section */

%{
    /* Custom C code can be added here, such as function declarations and global variables */
%}

/* Bison parser definition section */

%include {
    int main();
}

/* Definition section */
%define parse.error verbose
%define parse.lac full
%define parse.embedded
%define parse.errors correct
%define parse.print
%define parse.file skeleton

%output "parser.c"
%defines
%param {lineno}
%locations
%pure parser
%verbose-error

/* Bison skeleton section */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

/* Location tracking struct */
typedef struct {
    int first_line;
    int first_column;
    int last_line;
    int last_column;
} yylocation;

/* Implementation of the YYLTYPE macro */
#define YYLTYPE yylocation

/* Global variable to track current location in the input stream */
YYLTYPE yyloc = {1, 1, 1, 1};

/* Function prototypes for actions */
void yyerror(const char* error);
int yylex();
int yyparse();

%parse-param {equation}

/* Function definition for parsing the input */
int yyparse() {
        /* Initialize location tracking variable */
        yyloc = (YYLTYPE){1, 1, 1, 1};
        /* Call the scanner to get the first token */
        int token = yylex();
        /* Begin parsing the input */
        if (equation(token) == NULL) {
            yyerror("Invalid input");
        } else {
            /* Display success message */
            printf("Successfully parsed input!");
        }
        return 0;
}

/* Function definition for handling equations */
void equation(token) {
    if (equalities(token) != NULL) {
        /* Handle multiple equations separated by '=' */
        while (token == '=') {
            token = yylex();
            equalities(token);
        }
        /* Continue to handle equations separated by '+' or '-' */
        while (token == '+' || token == '-') {
            token = yylex();
            equalities(token);
        }
        return 1;
    }
    return NULL;
}

/* Function definition for handling equalities */
void equalities(token) {
    if (factors(token) != NULL) {
        /* Continue to handle factors separated by '*' or '/' */
        while (token == '*' || token == '/') {
            token = yylex();
            factors(token);
        }
        return 1;
    }
    return NULL;
}

/* Function definition for handling factors */
void factors(token) {
    if (token == NUMBER) {
        /* Handle numbers */
        token = yylex();
        return 1;
    } else if (token == LETTER) {
        /* Handle variables */
        token = yylex();
        return 1;
    } else if (token == '(') {
        /* Handle equations within parentheses */
        token = yylex();
        equation(token);
        token = yylex();
        if (token == ')') {
            return 1;
        }
    } else if (token == MINUS) {
        /* Handle negative numbers */
        token = yylex();
        token = yylex();
        return 1;
    } else {
        /* Handle other types of input */
        return NULL;
    }
}