%{

/* This code section defines global variables and functions */

int count = 0; /* Global variable to count the number of expressions */
int state = 0; /* Global variable to track the parsing state */
double result = 0; /* Global variable to store the final result of the calculation */

void printResult() { /* Global function to print the final result */
    printf("The total result is: %f", result);
}

%}

/* This section defines the BISON rules */

%token NUMBER /* Define the token for numbers */
%token PLUS /* Define the token for adding operator */
%token MINUS /* Define the token for subtraction operator */
%token TIMES /* Define the token for multiplication operator */
%token DIVIDE /* Define the token for division operator */
%token LPAREN /* Define the token for left parenthesis */
%token RPAREN /* Define the token for right parenthesis */

%% /* Define the grammar rules for the syntax */

calc: /* Start rule for the calculator */
    expression { printResult(); } /* After parsing an expression, print the final result */

expression: /* Rule for calculating expressions */
    NUMBER { result = $1; } /* If the expression contains only a number, assign it to the result */
    | expression PLUS NUMBER { result += $3; } /* If the expression contains a plus operator and a number, add the number to the result */
    | expression MINUS NUMBER { result -= $3; } /* If the expression contains a minus operator and a number, subtract the number from the result */
    | expression TIMES NUMBER { result *= $3; } /* If the expression contains a multiplication operator and a number, multiply the result by the number */
    | expression DIVIDE NUMBER { result /= $3; } /* If the expression contains a division operator and a number, divide the result by the number */
    | LPAREN expression RPAREN /* If the expression contains parentheses, recursively parse the expression inside the parentheses */

%% /* End of grammar rules */

/* This section defines the BISON lexer */

%{
/* This code section defines the BISON lexer */
#include <stdio.h>
#include <stdlib.h>
%}

%% /* Begin of token definitions, with corresponding regular expressions */

[ \t]+ /* Ignore whitespaces */
[0-9]+(\.[0-9]+)?  { yylval.dval = atof(yytext); return(NUMBER); } /* For numbers, convert string to double and return the NUMBER token */
[-+*/()] /* Return the corresponding token for each operator and parenthesis */

%% /* End of lexer definitions */

/* This section defines the main function */

int main() {
    yyparse(); /* Begin parsing */
    return 0;
}

/* This section includes the BISON and flex libraries */

%%

/* This section includes the generated flex code */

int yywrap() { /* Prevent flex from calling itself */
    return 1;
}

int yyerror(char *s) { /* Handle syntax errors */
    fprintf(stderr, "%s\n", s);
    exit(1);
}

/* This section includes the BISON generated code */

/* End of file */