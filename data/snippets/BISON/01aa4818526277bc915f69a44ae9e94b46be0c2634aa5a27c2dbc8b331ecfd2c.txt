%token DIGIT
%token LETTER
%token PLUS

%%
expression: DIGIT PLUS DIGIT /* match simple addition */
{
    printf("%d + %d", $1, $3);
}
| LETTER PLUS LETTER /* match concatenation of letters */
{
    printf("%c + %c", $1, $3);
}
| expression PLUS expression /* match addition of two expressions */
{
    printf("(%s) + (%s)", $1, $3);
}
%%

/* include necessary header files */
#include <stdio.h>
#include <stdlib.h>
#include#include <string.h>

/* declare global variables */
int digit_count = 0;
char* letter_concat = NULL;

/* match digits and increment digit_count */
DIGIT     [0-9]  { digit_count++; return DIGIT; }

/* match letters and concatenate to letter_concat */
LETTER    [a-zA-Z] { letter_concat = strcat(letter_concat, LETTER); return LETTER; }

/* match plus sign */
PLUS      \+     { return PLUS; }

/* function to parse and match the input */
void parse_input(char* input) {
    /* initialize lexer and parser */
    yyscan_t scanner;
    yyparse_t parser;

    /* begin parsing the input */
    /* use yylex() to scan the tokens from input */
    yylex_init(&scanner);
    yy_scan_string(input, scanner);

    /* use yyparse() to parse the input */
    yyparse(&parser);

    /* print the final output */
    printf("Final output: %s\n", letter_concat);
    printf("Expression: %d + %d", digit_count, digit_count);

    /* free allocated memory */
    yylex_destroy(scanner);
}

/* main function to take user input and call parse_input() */
int main() {
    /* prompt user to enter an input */
    printf("Enter an expression with digits and letters separated by plus sign: ");
    
    /* allocate memory for user input */
    char* input = (char*)malloc(sizeof(char) * 50);

    /* read user input */
    scanf("%s", input);

    /* call the parse_input() function with user input */
    parse_input(input);

    /* free allocated memory */
    free(input);

    return 0;
}