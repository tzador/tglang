%token <tag> ID STRING // creates two tokens with custom tag and the BISON built-in tokens ID and STRING
%token NUM // creates a token for numbers
%token EQUALS "+" "-" "*" "/" // creates tokens for arithmetic operators
%token ENDOF // creates a token for end of file
%left "+" "-" // defines left-associativity for '+' and '-' operators
%left "*" "/" // defines left-associativity for '*' and '/' operators
%start expr // specifies the start symbol for the parser
%% // marks the start of the grammar rules
expr: NUM // basic rule for an expression, can be just a number
     | ID      { printf("Found identifier: %s\n", $1); }    // action to be performed when an identifier is found
     | expr "+" expr { $$ = $1 + $3; }    // performs addition of two expressions
     | expr "-" expr { $$ = $1 - $3; }    // performs subtraction of two expressions
     | expr "*" expr { $$ = $1 * $3; }    // performs multiplication of two expressions
     | expr "/" expr { $$ = $1 / $3; }    // performs division of two expressions
     ;
%% // marks the end of the grammar rules
// code outside of the grammar rules can be included here and will not be parsed
int main() {
    yyparse(); // calls the parser to start parsing input
    return 0;
}