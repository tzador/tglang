/* This is a BISON parser for a simple arithmetic expression grammar */

%{
    /* Declare global variables and functions */
    #include <stdio.h>
    int result = 0; // stores the result of the expression
    void add(int num); // function to add a number to the result
    void multiply(int num); // function to multiply a number with the result
%}

%token NUM       /* define tokens for numbers and operators */
%token PLUS      /* note that these tokens can be any string, not just their name */
%token MULTIPLY

%left PLUS       /* define operator precedence and associativity */
%left MULTIPLY

%% /* define the grammar rules */

expression :
    NUM 				{ result = $1; } // if it's just a number, set the result to that number
    | expression PLUS NUM 	{ add($3); } // if it's a sum, add the next number to the result
    | expression MULTIPLY NUM 	{ multiply($3); } // if it's a multiplication, multiply the result by the next number
    ;

%% /* define actions for each rule */

void add(int num) {
    result += num; // add the number to the result
}

void multiply(int num) {
    result *= num; // multiply the result by the number
}

/* This function will be called at the end of parsing to print the result */
int main() {
    yyparse(); // call the parser
    printf("The result is: %d\n", result); // print the final result
    return 0;
}

/* This is a BISON lexer for the input expression */

%{
    #include <stdio.h>
    #include "parser.tab.h" // include the generated header file
%}

%% /* define the regular expressions and return the corresponding token */

[0-9]+		{ yylval.num = atoi(yytext); return NUM; } // convert the string to int and return the token
"+"		{ return PLUS; }
"*"		{ return MULTIPLY; }
backslash.	{ /* ignore any other characters */ }

%% /* define the main function to call the lexer */

int yywrap(){
    return 1; // return 1 to indicate end of input
}

int yyerror(char *s) {
    fprintf(stderr, "%s\n", s); // print error message if there is a syntax error
}

/* This is an example input expression to be parsed */
3 + 5 * 2

/* Output:
The result is: 13
*/