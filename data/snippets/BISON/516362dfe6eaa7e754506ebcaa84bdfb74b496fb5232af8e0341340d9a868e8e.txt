%token <int> NUMBER
%token <string> VARIABLE
%token DEFINE

%%
program : statements
        | empty
        ;

statements : statement
           | statements statement
           ;

statement : assign
          | define
          | print
          ;

assign : VARIABLE '=' expr
       | VARIABLE PLUS_EQUAL expr
       | VARIABLE MINUS_EQUAL expr
       | VARIABLE TIMES_EQUAL expr
       | VARIABLE DIVIDE_EQUAL expr
       ;

define : DEFINE VARIABLE '=' expr
       ;

print : PRINT expr
      ;

expr : expr '+' expr
     | expr '-' expr
     | expr '*' expr
     | expr '/' expr
     | '(' expr ')'
     | VARIABLE
     | NUMBER
     ;

empty :
       ;

%%
 
int main(int argc, char **argv) {
  yyparse(); // calls yylex() to get tokens and parse input
  return 0;
}
 
int yyerror(const char *msg) {
  fprintf(stderr, "Error: %s\n", msg);
  return 0;
}

int yylex(void) {
  int c;
  
  while ( '\n' != (c=getchar()) ) {
    if ( '0' <= c && c <= '9' ) { // match NUMBER
      ungetc(c,stdin); //one less char to forget
      scanf("%d",&yylval);
      return NUMBER;
    } else if ( 'a' <= c && c <= 'z' ) { // match VARIABLE
      yylval = c;
      return VARIABLE;
    } else if ( '=' == c ) { // lex '='
      return c;
    } else if ( '+' == c ) { // lex '+='
      return PLUS_EQUAL;
    } else if ( '-' == c ) { // lex '-='
      return MINUS_EQUAL;
    } else if ( '*' == c ) { // lex '*='
      return TIMES_EQUAL;
    } else if ( '/' == c ) { // lex '/='
      return DIVIDE_EQUAL;
    } else if ( '(' == c ) { // lex '('
      return c;
    } else if ( ')' == c ) { // lex ')'
      return c;
    }
    else {
      printf("illegal character %d\n",c); // prints if any other illegal character is encountered
    }
  }
  return -1;
}