%{
    // Here, we define some variables and functions
    // that can be used in our grammar rules

    int count; // Keeps track of the number of elements
               // in a particular rule
    void printCount(int num) {
        // Function to print the value of count
        printf("There are %d elements in this rule", num);
    }
%}

// The following rules define a basic grammar for a programming language
// Notice the use of curly braces to group different elements within a rule
program: functionList | variableList | statementList;

functionList: FUNCTION ID '(' parameters ')' '{' functionBody '}'
    { 
        // Uses the printCount() function to print the number of elements
        // in this function declaration
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

variableList: TYPE ID (',' ID)* ';' 
    {
        // Uses the printCount() function to print the number of variables
        // declared in this rule
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

statementList: (statement)+;
statement: expression | assignment | loop | conditional;

expression: INT | FLOAT | STRING | ID;

assignment: ID '=' expression ';'
    {
        // Uses the printCount() function to print the number of elements
        // in this assignment statement
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

loop: FOR '(' expression ';' expression ';' expression ')' '{' statementList '}'
    {
        // Uses the printCount() function to print the number of elements
        // in this loop statement
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

conditional: IF '(' expression ')' '{' statementList '}' (ELSE '{' statementList '}')?
    {
        // Uses the printCount() function to print the number of elements
        // in this conditional statement
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

parameters: (TYPE ID (',' TYPE ID)*)?
    {
        // Uses the printCount() function to print the number of parameters
        // in this rule
        printCount(count);
        // Reset the value of count to 0 for the next rule
        count = 0;
    };

functionBody: (statement)+;