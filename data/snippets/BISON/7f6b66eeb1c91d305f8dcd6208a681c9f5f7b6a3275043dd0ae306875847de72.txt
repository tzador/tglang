%token <value_type> IDENTIFIER
%token <value_type> INTEGER
%token <value_type> OPERATOR
%token BEGIN
%token END
%token PROGRAM

%{
    // This is a BISON program for a basic calculator.
    int total = 0; // Initialize total to 0
%}

%%
program:
    PROGRAM BEGIN statements END
    {
        printf("The result of the calculator is: %d\n", $3);
    }
    ;
statements:
    statements statement
    |
    statement
    ;
statement:
    expression OPERATOR expression
    {
        switch($2) { // Check the operator type
            case '+':
                $<value_type> = $1 + $3; // Add two expressions
                break;
            case '-':
                $<value_type> = $1 - $3; // Subtract two expressions
                break;
            case '*':
                $<value_type> = $1 * $3; // Multiply two expressions
                break;
            case '/':
                $<value_type> = $1 / $3; // Divide two expressions
                break;
        }
    }
    ;
expression:
    IDENTIFIER
    {
        $<value_type> = $1; // Set value of expression to identifier
    }
    |
    INTEGER
    {
        $<value_type> = $1; // Set value of expression to integer
    }
    ;
%%
int main() {
    printf("Enter the program: "); // Prompt user to enter program
    yyparse(); // Parse the input program using BISON
}