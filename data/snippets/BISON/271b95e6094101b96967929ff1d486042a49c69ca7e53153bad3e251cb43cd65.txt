%{
//the following code defines a struct called 'student' with various attributes
typedef struct {
    char* first_name;
    char* last_name;
    int age;
    float gpa;
    bool is_active;
} student;
%}

//define the start and end rules for the parser
%start STUDENT
%end STRING '\n'

//define the tokens that the parser will recognize
%token <char*> FIRST_NAME
%token <char*> LAST_NAME
%token <int> AGE
%token <float> GPA
%token <bool> IS_ACTIVE

//define the rules for each non-terminal in the grammar
STUDENT: FIRST_NAME LAST_NAME AGE GPA IS_ACTIVE {
    //allocate memory for a new student struct
    $$ = malloc(sizeof(student));
    //assign the parsed values to the appropriate struct attributes
    $$->first_name = $1;
    $$->last_name = $2;
    $$->age = $3;
    $$->gpa = $4;
    $$->is_active = $5;
}

FIRST_NAME: /[A-Z][a-z]*/ {/*yylval is a global variable that holds the parsed value*/
    yylval.first_name = yytext;
    return FIRST_NAME; //returning the token type
}

LAST_NAME: /[A-Z][a-z]*/ {/*yylval is a global variable that holds the parsed value*/
    yylval.last_name = yytext;
    return LAST_NAME; //returning the token type
}

AGE: /[0-9]+/ {/*yylval is a global variable that holds the parsed value*/
    //converting the parsed string to an integer
    yylval.age = atoi(yytext);
    return AGE; //returning the token type
}

GPA: /[0-9]+\.[0-9]+/ {/*yylval is a global variable that holds the parsed value*/
    //converting the parsed string to a float
    yylval.gpa = atof(yytext);
    return GPA; //returning the token type
}

IS_ACTIVE: /[true|false]/ {/*yylval is a global variable that holds the parsed value*/
    //converting the parsed string to a boolean
    yylval.is_active = strcmp(yytext, "true") == 0 ? true : false;
    return IS_ACTIVE; //returning the token type
}

%% /*This marks the end of the grammar definition*/

//define a function to handle any parsing errors
void yyerror(const char* s) {
    fprintf(stderr, "%s\n", s);
    //exit the parser on an error
    exit(1);
}