%{
/* This is a code snippet in BISON */
#include <stdio.h> // included header file for standard input/output
int count = 0; // global variable for counting
%}

/* This grammar rule defines an expression that can be either an integer or another expression enclosed in parentheses. */
exp: INT
| '(' expr ')' { count++; printf("Count of expressions: %d\n",count); } 

/* This grammar rule defines an expression that can be an operation between two expressions. */
expr: exp '+' exp
| exp '-' exp
| exp '*' exp
| exp '/' exp
;

%%

/* This section specifies the code to be executed when the parser recognizes the grammar rules. */
/* This code snippet prints the result of the calculation and resets the count variable. */
int main()
{
    yyparse(); // calling the Bison parser
    printf("Result of calculation: %d\n", result);
    count = 0;
    return 0;
}

/* This section defines the functions used in the grammar rules. */
/* This function converts the matched integer string to an actual integer value. */
int yywrap()
{
    return 1;
}

/* This function calculates the result of the operation. */
int calculate(int num1, int num2, char operation)
{
    if (operation == '+')
        return num1 + num2;
    else if (operation == '-')
        return num1 - num2;
    else if (operation == '*')
        return num1 * num2;
    else if (operation == '/')
        return num1 / num2;
}

/* This function checks for integer overflow during calculation. */
int yyerror(char *msg)
{
    printf("%s\n", msg);
    exit(1);
}

/* This function handles the input of integers and calls the calculation function. */
int yylex()
{
    int input = getchar(); // taking input from user
    int num1, num2, result; // variables for calculation
    char operation; // variable for storing operation
    if (input == ' ') // ignoring spaces
        return 0;
    else if (input == '(') { // checking for opening parentheses
        num1 = self_eval();
        operation = getchar(); // getting operation symbol
        num2 = self_eval();
        result = calculate(num1, num2, operation); // calling calculation function
        return result;
    }
    else if (input == '\n') // handling end of input line
        yyerror("Calculation error: No input provided!");
    else if (input == EOF) { // handling end of file
        printf("Total count of expressions: %d\n", count);
        exit(0);
    }
    /* This code handles the input of an integer string and converts it to an actual integer value. */
    else if (input >= '0' && input <= '9') {
        ungetc(input, stdin); // putting the integer string back into input buffer
        scanf("%d", &num1); // converting string to integer
        return num1;
    }
    else
        yyerror("Calculation error: Invalid input provided!");
}

/* This function recursively evaluates an expression enclosed in parentheses. */
int self_eval()
{
    int num1, num2, result; // variables for evaluation
    char operation; // variable for storing operation
    num1 = yylex(); // getting first integer
    operation = getchar(); // getting operation symbol
    num2 = yylex(); // getting second integer
    result = calculate(num1, num2, operation); // calling calculation function
    return result;
}