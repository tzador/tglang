/* Define tokens for arithmetic expressions */

%token<value> INTEGER    /* represents numeric values */
%token PLUS             /* represents addition operation */
%token MINUS            /* represents subtraction operation */
%token TIMES            /* represents multiplication operation */
%token DIVIDE           /* represents division operation */

/* Define rules for arithmetic expressions */

/* Rule for an arithmetic expression enclosed in parentheses */
expression:
    '(' expression ')'      { $$ = $2; } /* sets the value of enclosed expression */

/* Rule for a single term expression */
    | term                    { $$ = $1; }

/* Rule for addition operation */
    | expression PLUS term    { $$ = $1 + $3; }

/* Rule for subtraction operation */
    | expression MINUS term   { $$ = $1 - $3; }
	
/* Rule for multiplication operation */
    | expression TIMES term   { $$ = $1 * $3; }

/* Rule for division operation */
    | expression DIVIDE term  { $$ = $1 / $3; }

/* Rule for a negative term */
term:
    MINUS term                { $$ = -$2; }

/* Rule for an integer value */
    | INTEGER                  { $$ = $1; }

%%

/* Error handling */
error:
    | error "Error in expression near line %d: unknown token %s\n" { printf($2, $<lineno>, yytext); } /* prints error message with line number and unknown token */

/* Main function */
int main(int argc, char **argv)
{
    /* Parsing input expression */
    yyparse();

    /* Print the result */
    printf("Result: %d\n", $$);

    return 0;
}