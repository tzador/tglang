/* Define tokens */
%token <number> NUM
%token <operator> PLUS MINUS TIMES DIVIDE
%token START END
%token NEWLINE SPACE

/* Define rules */
Statement: TIMES Expr
        | DIVIDE Expr
        | NUM;

Expr: PLUS Expr Expr
    | MINUS Expr Expr
    | NUM;

/* Define start and end conditions */
%start Start
%end End

/* Define grammar */
%%
Start:
    NULL
    {
        // Code to initialize start state
        // Can be used to set variables or initialize data structures
    }
    Expr {/* Code to handle matching Expr */}
    NEWLINE
    {
        // Code to set end condition if desired
        // Can also perform actions using data collected from parsed Expr
    }
    End
    /* Other rules for handling additional statements */
    ;

/* Error handling */
int yyerror(char *msg) {
    fprintf(stderr, "%s\n", msg);
}

/* Define lexical analyzer */
%{
    #include <stdio.h>
%}

/* Define regular expressions */
digit           [0-9]
number          {digit}{digit}*
op              [\+-\*/]
ws              [ \t]
nl              [\n]

/* Define lexer rules */
%%
{number}        { yylval.number = atoi(yytext);
                  return NUM; }
{op}            { yylval.operator = yytext[0];
                  return yytext[0]; }
{ws}            { return SPACE; }
{nl}            { return NEWLINE; }
.               ;
%%