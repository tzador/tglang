%{
/* This is a BISON code snippet to demonstrate a simple calculator parsing and evaluation */
#include <stdio.h>
#include <math.h>
#define YYSTYPE double
int yylex();
void yyerror(char *str);
%}

/* The grammar rules start here */

%%
input: /* empty */
    | input line '\n' { printf("Result: %g\n", $2); } /* print the result after evaluating each line */
    ;

line:
    exp { $$ = $1; }
    ;

exp:
    /* all supported operations (+, -, *, /, ^) have been implemented as separate rules for better readability */
    exp '+' term { $$ = $1 + $3; }
    | exp '-' term { $$ = $1 - $3; }
    | term { $$ = $1; }
    ;

term:
    term '*' fact { $$ = $1 * $3; }
    | term '/' fact { $$ = $1 / $3; }
    | fact { $$ = $1; }
    ;

fact:
    fact '^' primary { $$ = pow($1, $3); } /* power operation using the math library */
    | primary { $$ = $1; }
    ;

primary:
    '(' exp ')' { $$ = $2; } /* parenthesis for grouping expressions */
    | NUMBER { $$ = $1; } /* numbers as terminals */
    ;

%%
/* The lexer (scanner) below matches different tokens and returns them to the parser */

/* The following tokens are defined using regular expressions */
[ \t]               /* ignore whitespace and tabs */
\n                  /* ignore new lines */
[0-9]+(\.[0-9]+)?   /* match decimal numbers */
"+"                 { return '+'; }
"-"                 { return '-'; }
"*"                 { return '*'; }
"/"                 { return '/'; }
"^"                 { return '^'; }
"("                 { return '('; }
")"                 { return ')'; }
.                   { yyerror("Invalid input"); } /* print error message for any invalid input */

/* The main function handles the input and calls the parser and lexer */
/* In this example, the input is loaded from a file */

int main(){
    printf("Enter your expression:\n");
    yyparse();
    return 0;
}

/* The yylex function is generated by flex and returns the next token for the parser */

int yylex(){
    int c = getchar();
    if (c == EOF) return 0;
    else return c;
}

/* The yyerror function is called if there is an error in the input */

void yyerror(char *str) {
    printf("%s\n", str);
}

/* The program can be compiled and run using the following commands:
    bison -d calculator.y
    flex scanner.l
    gcc calculator.tab.c lex.yy.c -lm -o calculator
    ./calculator < input.txt
*/