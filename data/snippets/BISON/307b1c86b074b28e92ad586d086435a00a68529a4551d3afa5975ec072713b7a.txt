%lex
%{
/* This is a BISON code snippet that defines a lexical analyzer */

/* Declare variable to store token */
int token;

/* Declare function for error handling */
void yyerror(const char *s){
  fprintf(stderr, "ERROR: %s\n", s);
}

%}

/* Regular expressions used to match tokens */
IDENTIFIER [a-zA-Z_][a-zA-Z0-9_]*
INTEGER [0-9]+
FLOAT [0-9]+\.[0-9]*
STRING "\"[^\"]*\""

/* Rules for matching tokens to corresponding actions */
%%

/* Match identifiers and return token */
{IDENTIFIER} {
  /* Store matched token in variable */
  token = strdup(yytext);
  /* Return token as an identifier */
  return IDENTIFIER;
}

/* Match integers and return token */
{INTEGER} {
  token = strdup(yytext);
  return INTEGER;
}

/* Match floats and return token */
{FLOAT} {
  token = strdup(yytext);
  return FLOAT;
}

/* Match strings and return token */
{STRING} {
  token = strdup(yytext);
  return STRING;
}

/* Ignore whitespace */
[ \t\n]+

/* Handle invalid tokens */
. {
  /* Pass remaining input to error handling function */
  yyerror("Invalid token");
}

%%

/* Function to get the next token from input */
int yylex(){
  /* Invoke scanner to get next token */
  int c = input();
  /* Return token */
  return c;
}

/* Main function to run the lexical analyzer */
int main(){
  /* Initialize lexer */
  yylex();
  /* Print token */
  printf("Token: %d\n", token);
  /* Exit with success status */
  return 0;
}

%start PROGRAM

/* BISON code for parsing a simple program */
%%

/* Program is a statement followed by a semicolon */
PROGRAM: STATEMENT ';';

/* Statement can be an assignment, function call, or print statement */
STATEMENT: ASSIGNMENT
		| FUNCTION_CALL
		| PRINT_STATEMENT;

/* Assignment is an identifier followed by an equals sign and an expression */
ASSIGNMENT: IDENTIFIER '=' EXPRESSION;

/* Function call is an identifier followed by parentheses and arguments */
FUNCTION_CALL: IDENTIFIER '(' ARGLIST ')';

/* Print statement is the keyword "print" followed by an expression */
PRINT_STATEMENT: "print" EXPRESSION;

/* Expression can be a single value or an operation on values */
EXPRESSION: IDENTIFIER
		| INTEGER
		| FLOAT
		| '(' OPERATOR ')';

/* List of arguments for function call */
ARGLIST: EXPRESSION
		| ARGLIST ',' EXPRESSION;

/* Operation on values is an expression followed by an operator and another expression */
OPERATOR: EXPRESSION '+' EXPRESSION
		| EXPRESSION '-' EXPRESSION
		| EXPRESSION '*' EXPRESSION
		| EXPRESSION '/' EXPRESSION;

%%