/* A grammar for a simple calculator */

%token <val> INTEGER
%token PLUS MINUS TIMES DIVIDE
%token NEWLINE

%%

start: expr NEWLINE { printf("Result: %d\n", $1); }; /* start rule with a printf function */

expr: INTEGER { $$ = $1; } /* rule for integer values */
    | expr PLUS expr { $$ = $1 + $3; } /* rule for addition */
    | expr MINUS expr { $$ = $1 - $3; } /* rule for subtraction */
    | expr TIMES expr { $$ = $1 * $3; } /* rule for multiplication */
    | expr DIVIDE expr { $$ = $1 / $3; } /* rule for division */
    ;

%%

int main(void) {
  yyparse(); /* calls the parser to start parsing the input */
  return 0;
}

int yyerror(const char *msg) {
  fprintf(stderr, "Error: %s\n", msg); /* prints error message if parsing fails */
  return 1;
}

/* lexer definitions */
%{
  int yylval; /* stores the value of tokens */
%}

%%

[0-9]+       { yylval = atoi(yytext); return INTEGER; } /* matches and returns integer tokens */
"+"          { return PLUS; } /* matches and returns plus tokens */
"-"          { return MINUS; } /* matches and returns minus tokens */
"*"          { return TIMES; } /* matches and returns times tokens */
"/"          { return DIVIDE; } /* matches and returns divide tokens */
\n           { return NEWLINE; } /* matches and returns newline tokens */
[ \t]        { } /* skips over whitespace */