// A BISON code snippet to parse a simple arithmetic expression

%{

#include <stdio.h>
#include <stdlib.h>

int result = 0; // initialize variable to store expression result

%}

%token DIGIT           // define a token for digits
%token PLUS MINUS      // define tokens for '+' and '-'
%left PLUS MINUS       // set precedence for addition and subtraction
%token MULTIPLY DIVIDE // define tokens for '*' and '/'
%left MULTIPLY DIVIDE  // set precedence for multiplication and division

%%

program: /* empty */    // define the start symbol

| program expression { // if expression is found, calculate result
    printf("The result is: %d", $2); // print the result
    result = $2;                    // store result
}

expression: DIGIT                                // expression is a digit
| expression PLUS expression    { $$ = $1 + $3; } // addition operation
| expression MINUS expression   { $$ = $1 - $3; } // subtraction operation
| expression MULTIPLY expression { $$ = $1 * $3; } // multiplication operation
| expression DIVIDE expression  { $$ = $1 / $3; } // division operation

%%

int main() {
    printf("Enter an arithmetic expression: ");

    yyparse(); // start parsing

    return 0;
}

int yyerror(char *msg) { // error handling function
    printf("ERROR: %s\n", msg);
    exit(1);
}