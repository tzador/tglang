%{
    /* This code snippet is written in BISON (also known as YACC) */
    /* It is a general-purpose parser generator */
    /* This code snippet includes basic grammar rules and actions */
%}

%union {
    /* This section is for defining the possible types of inputs */
    /* In this case, we have defined two types, integer and string */
    int number;
    char* str;
}

/* This section defines the tokens for the lexer */
/* Tokens are the basic building blocks of a grammar */
/* Here, we have defined tokens for arithmetic operators, parentheses, and identifiers */
%token <number> INTEGER
%token <str> OPERATOR
%token LPAREN RPAREN
%token ID

/* This section defines the grammar rules */
/* The grammar rules specify the structure and syntax of the input language */
/* In this example, we have a basic arithmetic expression */
input: expression;
expression: INTEGER
    | expression OPERATOR INTEGER
    | LPAREN expression RPAREN
    | ID;

/* This section specifies the actions to be taken when a rule is reduced */
/* Here, we print the expression or identifier found in the input */
%%

/* These are the C code sections that are executed when a rule is reduced */
input:
    printf("Input expression: %d\n", $1);
    /* $1 refers to the first part of the expression, in this case an integer */
expression:
    switch($2) {
        /* $2 refers to the operator in the expression */
        case '+':
            $$ = $1 + $3;
            break;
        case '-':
            $$ = $1 - $3;
            break;
        case '*':
            $$ = $1 * $3;
            break;
        case '/':
            $$ = $1 / $3;
            break;
    }
    /* $$ refers to the result of the expression */
LPAREN expression RPAREN:
    $$ = $2;
    /* When parentheses are encountered, the result is simply the expression inside */
ID:
    printf("Identifier found: %s\n", $1);
    /* $1 refers to the identifier found in the input */
%%

/* This section includes any user-defined functions or external declarations */
/* In this example, we have declared a function to convert an integer to a string */
extern char* i_to_s(int num) {
    /* Code here... */
}

/* The following code is the main function that will run the parser */
#include <stdio.h>
int main() {
    yyparse(); /* This calls the parser generated by BISON */
    return 0;
}