/* Define the grammar rules */
%%
program:  { /* empty */}
    | program statement { /* perform necessary actions */ }
    ;

statement:  variable_declaration
    | function_declaration
    | expression_statement
    ;

variable_declaration:  data_type LIST_OF_VARIABLES ';' { /* declare variables */ }
    ;

data_type:  INT
    | DOUBLE
    | STRING
    ;

LIST_OF_VARIABLES: VARIABLE_NAME ',' LIST_OF_VARIABLES
    | VARIABLE_NAME
    ;

function_declaration:  FUNCTION_TYPE FUNCTION_NAME '(' PARAMETER_LIST ')'
        '{' body '}' { /* declare function with parameters and body */ }
    ;

FUNCTION_TYPE: VOID | DATA_TYPE
    ;

PARAMETER_LIST: PARAMETER ',' PARAMETER_LIST
    | PARAMETER
    ;

PARAMETER: DATA_TYPE VARIABLE_NAME { /* declare parameter */ }
    ;

expression_statement:  expression ';' { /* evaluate expression */ }
    ;

expression:  assignment_expression { /* evaluate assignment expression */ }
    | call_expression { /* evaluate function call expression */ }
    ;

assignment_expression: VARIABLE_NAME '=' assignment_expression { /* assign value */ }
    | logical_expression { /* evaluate logical expression */ }
    ;

logical_expression:  comparison_expression
        | logical_expression AND logical_expression { /* perform logical AND */ }
        | logical_expression OR logical_expression  { /* perform logical OR */ }
    ;

comparison_expression: additive_expression
        | comparison_expression EQUALS comparison_expression { /* compare equality */ }
        | comparison_expression NOT_EQUALS comparison_expression { /* check inequality */ }
        | comparison_expression LESS_THAN comparison_expression { /* check less than */ }
        | comparison_expression GREATER_THAN comparison_expression { /* check greater than */ }
        | comparison_expression LESS_THAN_EQUALS comparison_expression { /* check less than or equal to */ }
        | comparison_expression GREATER_THAN_EQUALS comparison_expression { /* check greater than or equal to */ }
    ;

additive_expression: multiplicative_expression
        | additive_expression ADD multiplicative_expression { /* perform addition */ }
        | additive_expression SUBTRACT multiplicative_expression { /* perform subtraction */ }
    ;

multiplicative_expression: unary_expression
        | multiplicative_expression MULTIPLY unary_expression { /* perform multiplication */ }
        | multiplicative_expression DIVIDE unary_expression { /* perform division */ }
    ;

unary_expression: primary_expression
        | SUBTRACT unary_expression { /* negate value */ }
        | NOT unary_expression { /* inverse boolean value */ }
    ;

primary_expression: VARIABLE_NAME
        | INTEGER
        | DOUBLE
        | STRING
        | '(' expression ')' { /* evaluate expression within parentheses */ }
    ;
%%
/* Define the necessary functions */
yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

main() {
    yyparse();
}

yywrap() {
    return 1;
}