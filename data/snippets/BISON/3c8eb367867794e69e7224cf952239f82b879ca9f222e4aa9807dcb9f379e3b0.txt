/**
 * The following code snippet is an example of a BISON grammar for a simple calculator
 * that supports addition, subtraction, multiplication, and division.
 */

/**
 * Define the tokens for numbers, operators, and parentheses
 */
%token <num> NUMBER  // for numbers
%token ADD SUB       // for addition and subtraction
%token MUL DIV       // for multiplication and division
%token LPAREN RPAREN // for opening and closing parentheses

/**
 * Define the precedence and associativity of the operators
 */
%left ADD SUB       // left-associative addition and subtraction
%left MUL DIV       // left-associative multiplication and division
%nonassoc UMINUS    // non-associative unary minus (for negative numbers)

/**
 * Define the start symbol and the grammar rules
 */
%start calc
%%
calc:    /* empty string */
        | calc exp { printf("%d\n", $2); }
exp:     NUMBER    { $$ = $1; }                   // rule for numbers
        | exp ADD exp  { $$ = $1 + $3; }          // rule for addition
        | exp SUB exp  { $$ = $1 - $3; }          // rule for subtraction
        | exp MUL exp  { $$ = $1 * $3; }          // rule for multiplication
        | exp DIV exp  { $$ = $1 / $3; }          // rule for division
        | LPAREN exp RPAREN { $$ = $2; }          // rule for parentheses
        | SUB exp %prec UMINUS { $$ = -$2; }      // rule for negative numbers
        ;

/**
 * Define the code for handling errors
 */
%%
yyerror(char *str) {
    fprintf(stderr, "error: %s\n", str);
}