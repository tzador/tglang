/*BISON code to parse a simple math expression*/
 
%{
/*Include necessary header files*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%}
 
/*Token definitions*/
%token NUM	/*For numeric values*/
%token ADD	/*For addition operator*/
%token SUB	/*For subtraction operator*/
%token MUL	/*For multiplication operator*/
%token DIV	/*For division operator*/
%token LPAREN	/*For left parenthesis*/
%token RPAREN	/*For right parenthesis*/
 
%%	/*Start of grammar rules*/
 
/*Rule for parsing the entire expression*/
expression : term { printf("%d\n",$1); } |
             expression ADD term { printf("%d\n", $1 + $3); } |
             expression SUB term { printf("%d\n", $1 - $3); } ;
 
/*Rule for parsing terms, which can be a number or an expression within parentheses*/
term : NUM { $$ = $1; } |
       LPAREN expression RPAREN { $$ = $2; } ;
 
%%	/*End of grammar rules*/
 
/*Include the main function*/
int main(void)
{
    printf("Enter a math expression: ");
 
    /*Call the parser function*/
    yyparse();
 
    return 0;
}
 
/*Function to handle parsing errors*/
int yyerror(char *errmsg)
{
    printf("Error: %s.\n", errmsg);
 
    /*Exit the program*/
    exit(1);
}
 
/*Implement the yylex function*/
int yylex(void)
{
    int c;
 
    /*Get the next character from input stream*/
    c = getchar();
 
    /*Check if it is a number*/
    if (c >= '0' && c <= '9')
    {
        /*If yes, store it in a variable*/
        yylval = c - '0';
        return NUM;
    }
 
    /*Check if it is an operator*/
    else if (c == '+')
        return ADD;
    else if (c == '-')
        return SUB;
    else if (c == '*')
        return MUL;
    else if (c == '/')
        return DIV;
 
    /*Check if it is a parenthesis*/
    else if (c == '(')
        return LPAREN;
    else if (c == ')')
        return RPAREN;
 
    /*Check for end of input*/
    else if (c == '\n')
        return 0;
 
    /*If an unknown character is encountered, return an error*/
    else
        yyerror("Invalid input");
}