%{
/* This section is for declaring global variables and any required C code */
#include <stdio.h>
#include <stdlib.h>

int count = 0;
char name[50];

%}

/* This section is for declaring terminals, operators and non-terminals */
%token <name> ID
%token NUMBER
%token DIGIT
%left '+' '-'
%left '*' '/'
%left '-=' '+=' '*=' '/='
%nonassoc UMINUS

%%

/* This section is for defining the grammar rules and actions */
program: decl_list Stmt_list
       {
          printf("Total number of statements: %d\n", count);
       }
       ;

/* Declaration and statement list */
decl_list: decl_list decl ';' {count++;}
         | decl ';' {count++;}
         ;

Stmt_list: Stmt_list Stmt ';' {count++;}
         | Stmt ';' {count++;}
         ;

/* Declaration rule for variable */
decl: 'VAR' ID {strcpy(name, $2);} {printf("Variable %s declared.\n", name);}
    ;

/* Statement rules for assignment and arithmetic operations */
Stmt: ID '=' exp {printf("%s = %d\n", $1, $3);}
    ;

Stmt: Stmt '+' Stmt {printf("%d + %d\n", $1, $3);}
    | Stmt '-' Stmt {printf("%d - %d\n", $1, $3);}
    | Stmt '*' Stmt {printf("%d * %d\n", $1, $3);}
    | Stmt '/' Stmt {printf("%d / %d\n", $1, $3);}
    ;

Stmt: ID '+=' exp {printf("%s += %d\n", $1, $3);}
    | ID '-=' exp {printf("%s -= %d\n", $1, $3);}
    | ID '*=' exp {printf("%s *= %d\n", $1, $3);}
    | ID '/=' exp {printf("%s /= %d\n", $1, $3);}
    ;

/* Expression rule */
exp: NUMBER {$$ = $1;}
    | exp '+' exp {$$ = $1 + $3;}
    | exp '-' exp {$$ = $1 - $3;}
    | exp '*' exp {$$ = $1 * $3;}
    | exp '/' exp {$$ = $1 / $3;}
    | '-' exp %prec UMINUS {$$ = -$2;}
    ;

%%

/* This section is for defining any required C code */
int main(){
    yyparse();
    return 0;
}

int yyerror(char *s){
    fprintf(stderr, "Error: %s\n", s);
    return 0;
}

int yywrap(){
    return 1;
}