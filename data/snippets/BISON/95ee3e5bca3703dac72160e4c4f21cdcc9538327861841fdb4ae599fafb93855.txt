%{
// define tokens
%token <int> INTEGER
%token <str> STRING
%token <float> FLOAT
%token ADD SUB MULT DIV

// import standard library for operations
#include <stdio.h>

// function to convert string to float
float str_to_float(char * str){
    float num;
    sscanf(str, "%f", &num);
    return num;
}

// function to calculate result of arithmetic operation
float calculate(int operation, float num1, float num2){
    float result;
    switch(operation){
        case ADD:
            result = num1 + num2;
            return result;
        case SUB:
            result = num1 - num2;
            return result;
        case MULT:
            result = num1 * num2;
            return result;
        case DIV:
            if(num2 == 0){ // avoid division by zero error
                printf("Error: Cannot divide by zero.");
                exit(1);
            }else{
                result = num1 / num2;
                return result;
            }
        default:
            printf("Error: Invalid operation.");
            exit(1);
    }
}

// rules for parsing
%token <int> INTEGER
%start expr
%%
// expression can be either a number or an arithmetic operation
expr: INTEGER {$$ = $1;} | FLOAT {$$ = $1;} | expr ADD expr {$$ = calculate(ADD, $1, $3);} | expr SUB expr {$$ = calculate(SUB, $1, $3);} | expr MULT expr {$$ = calculate(MULT, $1, $3);} | expr DIV expr {$$ = calculate(DIV, $1, $3);} ;

// ignore whitespace characters
%ignore " " | "\t" | "\n"

%%
// main function to get user input and parse it
int main(){
    // declare variables
    char input[100];
    float result;

    // get user input
    printf("Enter an arithmetic expression: ");
    scanf("%s", input);

    // parse input using Bison
    result = yyparse();

    // print result
    printf("The result is: %f", result);
    return 0;
}