%token <num> INT
%token <op> AND OR EQ NE LT GT GE LE
%%

prog: stmt_list
    ;

stmt_list:
    stmt                      ¡-- starts with stmt rule
    | stmt_list stmt          ¡-- continues with stmt rule
    ;

stmt:
    expr SEMI
    | IF LPAREN expr RPAREN stmt
    | IF LPAREN expr RPAREN stmt ELSE stmt
    | WHILE LPAREN expr RPAREN stmt
    | FOR LPAREN opt_expr SEMI opt_expr SEMI opt_expr RPAREN stmt
    | DECL ID ASSIGN expr SEMI
    | PRINT expr SEMI
    | block SEMI
    ;

opt_expr:
    stmt                      ¡-- starts with stmt rule
    | stmt_list stmt          ¡-- continues with stmt rule
    | /* empty */             ¡-- optional, can be empty
    ;

block:
    LBRACE stmt_list RBRACE
    ;

expr:
    INT
    | ID
    | expr op expr            ¡-- recursive rule for nested expressions
    | LPAREN expr RPAREN
    | NOT expr
    | MINUS expr
    ;

op:
    AND | OR | EQ | NE | LT | GT | GE | LE
    ;