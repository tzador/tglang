/*
 * BISON grammar for a simple arithmetic calculator
 */

// Define the start symbol
%start expression

// Define the tokens
%token NUMBER
%token PLUS "+"
%token MINUS "-"

// Define the grammar rules
expression: expression PLUS expression
          | expression MINUS expression
          | NUMBER
          ;

// Define precedence and associativity
%left PLUS MINUS

// Define the lexer
%{
#include <stdio.h>

// Define the yylex function
int yylex(void);

// Define the yyerror function
void yyerror(const char *msg)
{
    fprintf(stderr, "%s\n", msg);
}
%}

// Define the tokenizer
%{
// Define a variable to store the token value
int yyval;

// Define the yylval function
#define YYLEX yylval = atoi(yytext);

// Define the yylval function for tokens
#define YYLVAL yylval = yytext[0];
%}

// Define the lexer rules
%%

[0-9]+      { YYLEX; return NUMBER; }
"+"         { YYLVAL; return PLUS; }
"-"         { YYLVAL; return MINUS; }
[ \t\n]     ; // Ignore whitespace characters
.           { yyerror("Invalid input"); return -1; } // Return -1 for any invalid characters

%%

// Define the main function
int main()
{
    // Call the yyparse function to start parsing input
    yyparse();
    return 0;
}

// Define the yyparse function
int yyparse(void)
{
    // Define a variable to store the result of the parse
    int result;
    // Call the yylex function to get the next token
    result = yylex();
    // Check for end of input
    if(result == 0)
    {
        yyerror("Input ended unexpectedly");
        return -1;
    }
    // Parse the input according to the defined rules
    switch(result)
    {
        case NUMBER:
            // Do something with the number
            break;
        case PLUS:
            // Do something with addition
            break;
        case MINUS:
            // Do something with subtraction
            break;
    }
    // Call the yyparse function recursively to continue parsing
    return yyparse();
}