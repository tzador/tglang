%{
  // declare variables and functions
  float x = 0.0;
  float y = 0.0;
  float result = 0.0;
  float add(float x, float y){
    return x + y;
  }
  float subtract(float x, float y){
    return x - y;
  }
  %}

  // BISON grammar rules

  // define the start symbol
  %start expression

  // define the grammar rules
  expression: // define the possible expressions
    | expression '+' term  { result = add($1, $3); } // if addition expression is detected, calculate and store result
    | expression '-' term  { result = subtract($1, $3); } // if subtraction expression is detected, calculate and store result
    | term  { result = $1; } // if a single term is detected, store it as result
  
  term: // define the possible terms
    | NUMBER  { $$ = $1; } // if a number is detected, store it as the term
    | '(' expression ')'  { $$ = $2; } // if an expression inside parentheses is detected, store it as the term

  // define the tokens
  %% // start the token definitions section

  // regular expression for numbers
  NUMBER [0-9]+\.[0-9]+

  // define the possible tokens
  '+' // addition operator
  '-' // subtraction operator
  '(' // opening parentheses
  ')' // closing parentheses

  // ignore any whitespace characters
  <space> // regular expression for whitespace characters
  // empty rule so that whitespace is ignored
  | <space> // whitespace is ignored

  %% // end the token definitions section

  // function to handle any syntax errors
  void yyerror(char* message){
    fprintf(stderr, "Syntax error: %s\n", message);
  }

  // function to handle the input
  int main(){
    printf("Enter an expression to evaluate: ");
    yyparse(); // start parsing the input
    printf("Result: %f\n", result); // print the final result
    return 0;
  }