%{
  /* This section is used to declare any necessary C code or libraries */
  #include <stdio.h>
  #define MAX_LENGTH 100
%}

/* Non-terminal symbols declared using %type keyword */
%type <string> STRING
%type <num> INT FLOAT

/* Terminal symbols declared using %token keyword */
%token END_OF_STMT SEMICOLON

%% /* This section is used to define the grammar rules */

/* Non-terminal rule for a complete program */
program:
  block
;

/* Non-terminal rule for a block of statements */
block:
  /* A block can contain one or more statements */
  statement END_OF_STMT
  |
  statement END_OF_STMT block
;

/* Non-terminal rule for a statement */
statement:
  assignment
  |
  print_statement
  |
  if_statement
  |
  while_statement
;

/* Non-terminal rule for assignment statements */
assignment:
  /* Assigning value to a variable */
  VARIABLE '=' expression
  |
  /* Compound assignment operator */
  VARIABLE '+=' expression
  |
  VARIABLE '-=' expression
  |
  VARIABLE '*=' expression
  |
  VARIABLE '/=' expression
;

/* Non-terminal rule for print statements */
print_statement:
  /* Print a single expression */
  PRINT expression
  |
  /* Print multiple expressions separated by comma */
  PRINT expression ',' print_statement
;

/* Non-terminal rule for if statements */
if_statement:
  /* Simple if statement */
  IF '(' condition ')' block
  |
  /* If-Else statement */
  IF '(' condition ')' block ELSE block
;

/* Non-terminal rule for while statements */
while_statement:
  WHILE '(' condition ')' block
;

/* Non-terminal rule for conditions */
condition:
  /* Comparing two expressions using operators */
  expression '<' expression
  |
  expression '>' expression
  |
  expression '>=' expression
  |
  expression '<=' expression
  |
  expression '==' expression
  |
  expression '!=' expression
  |
  /* Logical operators */
  condition '&&' condition
  |
  condition '||' condition
  |
  '!' condition
;

/* Non-terminal rule for expressions */
expression:
  /* Arithmetic expression */
  expression '+' expression
  |
  expression '-' expression
  |
  expression '*' expression
  |
  expression '/' expression
  |
  '(' expression ')' /* To handle operator precedence */
  |
  /* Variables and constants */
  VARIABLE
  |
  INT
  |
  FLOAT
  |
  STRING
;

%% /* This section is used to add any additional C code or functions */

/* Function to parse input and print appropriate messages */
int main()
{
  /* Initialize the parser */
  yyparse();

  printf("\nProgram parsed successfully!\n");
  return 0;
}

/* Function to handle syntax errors */
void yyerror(char* msg)
{
  printf("\nSyntax error: %s\n", msg);
}