%token <integer> INTEGER
%token <string> STRING
%left '-' '+'
%left '*' '/'
%left '^'
%left '(' ')'
%%

exp: exp '-' exp         { $$ = $1 - $3; }
   | exp '+' exp         { $$ = $1 + $3; }
   | exp '*' exp         { $$ = $1 * $3; }
   | exp '/' exp         { $$ = $1 / $3; }
   | exp '^' exp         { $$ = pow($1, $3); }
   | '(' exp ')'         { $$ = $2; }
   | INTEGER             { $$ = $1; }
   | STRING              { $$ = $1; }
   ;

%%

int main() {
    string input;
    int result;

    printf("Enter an arithmetic expression: ");
    scanf("%s", &input);

    result = yyparse(input);

    printf("Result: %d\n", result);

    return 0;
}

int yyerror(string msg) {
    printf("Error: %s\n", msg);
    exit(1);
}

int yylex() {
    char* input = yytext;
    int num;
        
    if (isdigit(*input)) {
        num = atoi(yytext);
        yylval.integer = num;
        return INTEGER;
    }
    else if (isalpha(*input)) {
        yylval.string = yytext;
        return STRING;
    }
    else {
        return *input;
    }
}