%{
  /* BISON code snippet with annotations */

  /* Defines the different types of tokens */
  enum token_code {

    /* Basic arithmetic operations */
    PLUS = 1000,
    MINUS,
    MULTIPLY,
    DIVIDE,

    /* Comparison operators */
    EQUALS,
    NOT_EQUALS,
    GREATER_THAN,
    LESS_THAN,

    /* Keywords */
    IF,
    ELSE,
    WHILE,
    FOR,

    /* Data types */
    INTEGER,
    FLOAT,
    STRING,
    BOOLEAN,

    /* Identifiers */
    IDENTIFIER,

    /* Delimiters */
    LEFT_BRACKET,
    RIGHT_BRACKET,
    LEFT_PAREN,
    RIGHT_PAREN,
    SEMICOLON,
    COMMA,

    /* End of file */
    END_OF_FILE
  };

  /* Defines the token structure */
  struct token {
    int code;    /* token code */
    union {
      int int_val;       /* for INTEGER tokens */
      float float_val;   /* for FLOAT tokens */
      char *str_val;     /* for STRING tokens */
      char id_name[20];  /* for IDENTIFIER tokens */
    } value;       /* token value */
  };

  /* Global variables */
  struct token current_token; /* current token being processed */
  char *input_expression; /* input expression to be parsed */

%}

/* BISON grammar rules */
%token <current_token> PLUS MINUS MULTIPLY DIVIDE /* Basic arithmetic operations */
%token <current_token> EQUALS NOT_EQUALS GREATER_THAN LESS_THAN /* Comparison operators */
%token <current_token> IF ELSE WHILE FOR /* Keywords */
%token <current_token> INTEGER FLOAT STRING BOOLEAN /* Data types */
%token <current_token> IDENTIFIER /* Identifiers */
%token <current_token> LEFT_BRACKET RIGHT_BRACKET LEFT_PAREN RIGHT_PAREN SEMICOLON COMMA /* Delimiters */
%token <current_token> END_OF_FILE /* End of file */

%%

/* BISON grammar definitions */
assignment: IDENTIFIER EQUALS expression SEMICOLON /* Assignment statement */
    { 
      /* Perform necessary operations on current_token.value based on input_expression */
    };

expression: term /* Basic expression with only one term */
    { 
      /* Do something with the current token and term */ 
    }
  | expression PLUS term /* Addition */
    {
      /* Do something with the current token and terms to perform addition operation */
    }
  | expression MINUS term /* Subtraction */
    {
      /* Do something with the current token and terms to perform subtraction operation */
    }
  | expression MULTIPLY term /* Multiplication */
    {
      /* Do something with the current token and terms to perform multiplication operation */
    }
  | expression DIVIDE term /* Division */
    {
      /* Do something with the current token and terms to perform division operation */
    }
  | expression EQUALS term /* Comparison using equals operator */
    {
      /* Do something with the current token and terms to perform comparison operation */
    }
  | expression NOT_EQUALS term /* Comparison using not equals operator */
    {
      /* Do something with the current token and terms to perform comparison operation */
    }
  | expression GREATER_THAN term /* Comparison using greater than operator */
    {
      /* Do something with the current token and terms to perform comparison operation */
    }
  | expression LESS_THAN term /* Comparison using less than operator */
    {
      /* Do something with the current token and terms to perform comparison operation */
    }
  | LEFT_PAREN expression RIGHT_PAREN /* Bracketed expression */
    {
      /* Do something with the current token and terms to handle a bracketed expression */
    };

term: INTEGER
    {
      /* Do something with the current token to handle integer values */
    }
  | FLOAT
    {
      /* Do something with the current token to handle float values */
    }
  | STRING
    {
      /* Do something with the current token to handle string values */
    }
  | BOOLEAN
    {
      /* Do something with the current token to handle boolean values */
    };

%%

/* BISON parser section */
int yylex(void); /* Lexer function */
int yyparse(void); /* Parser function */

/* Main function */
int main(void) {
  input_expression = "x = 2 + 3;"; /* Example input expression */
  yy_scan_string(input_expression); /* Set input string for lexer */
  yyparse(); /* Parse input string using BISON parser */
  return 0;
}

/* BISON error handling function */
void yyerror(char *s) {
  fprintf(stderr, "error: %s\n", s); /* Print error message */
}