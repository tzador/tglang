%token STRING NUM VAR
%%
start: program;

program: PROGRAM ID ';' 
        decpart subprogram subprogram
        comp_statement
        'END' PROGRAM ID '.' ;

decpart: dec_list 
        | empty ;

dec_list: dec_list dec 
         | dec ;

dec: type ID_list ';' ;

type: INTEGER
     | REAL 
     | STRING 
     | BOOLEAN;

subprogram: proc_decpart 
            subprogram_head
            subprogram_declaration_comp
            statement
            'END' proc_id ( ';' | empty) ;

proc_decpart: proc_decpart lr_dec 
             | decl ;

lr_dec: type func_decl 
      | function type ID_list ';' ;

func_decl: '(' param_list ')' ;

param_list: param_list ',' param
          | param ;

param: IDs ':' type ;

subprogram_head: PROCEDURE proc_id 
                | FUNCTION func_id 
                  (id ( ',' id )*  ':' type
                   | empty );
       
statement: 
    | procedure_call_statement
    | compound_statement
    | assignment_statement
    | if_statement
    | while_statement
    | for_statement
    | print_statement ;

procedure_call_statement: proc_id | procedure_call ;

procedure_call: 
    '((expr (',' expr)*) | empty ')' ;

compound_statement: 'BEGIN' statement_list 'END' ;

statement_list: statement_list ';' statement
               | statement ;

assignment_statement: ID ':=' expression ;

if_statement: 'IF' expression 
              'THEN' statement 
              'ELSE' statement ;

while_statement: 'WHILE' expression
                  'DO' statement ;

for_statement: 'FOR' variable 
               'FROM' expression 
               'TO' expression
               'DO' statement ;

print_statement: 'PRINT' expression ;

expression: expression opt_relational additive_expression ;

opt_relational: relational_operator additive_expression
               | empty ;

additive_expression: additive_expression add_op term 
                    | term ;

add_op: '+'
       | '-' ;

term: term mul_op factor 
    | factor ;

mul_op: '*'
       | '/' ;

factor: '(' expression ')' 
       | ID
       | NUM
       | STRING
       | 'TRUE'
       | 'FALSE';

relational_operator: '<=' 
                     | '>=' 
                     | '<' 
                     | '>' 
                     | '=' 
                     | '<>';
%%