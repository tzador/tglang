%token NUM /* define a token for numbers */

%%
expr: NUM                 { /* action when expression is a number */ }
    | expr '+' expr       { /* action when expression is addition of two expressions */ }
    | expr '-' expr       { /* action when expression is subtraction of two expressions */ }
    | expr '*' expr       { /* action when expression is multiplication of two expressions */ }
    | expr '/' expr       { /* action when expression is division of two expressions */ }
    | expr '^' expr       { /* action when expression is exponentiation of two expressions */ }
    | '(' expr ')'        { /* action when expression is enclosed in parentheses */ }
    | '-' expr %prec UMINUS  /* action when expression has a unary minus operator (precedence defined as UMINUS) */
                          { /* action when expression has a unary minus operator */ }
    | expr '!'            { /* action when expression has a factorial operator */ }

%%

/* define a function for calculating factorial */
int fact(int n) {
    return n <= 1 ? 1 : n * fact(n-1);
}

/* execute the parser on the input and print the result */
#include <stdio.h>
#include "parser.tab.h"

int main(void) {
    int result = yyparse();
    printf("Result: %d\n", result);
    return 0;
}