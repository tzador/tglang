/* This is a long and complex BISON code snippet */

%token <value> INT
%token <value> FLOAT
%token <value> STRING

%start start
%define api.pure full
%locations
%code requires {
#include <stdlib.h>
}

%%

/* Grammar rules for arithmetic expressions */

start:
  expr { printf("Result: %f\n", $1); } /* Prints result of expression */
  ;

expr:
  INT { $$ = $1; } /* Integer literal */
| FLOAT { $$ = $1; } /* Float literal */
| STRING { yyerror("Invalid data type. Expected INT or FLOAT."); } /* Error if string is encountered */
| expr '+' term { $$ = $1 + $3; } /* Addition */
| expr '-' term { $$ = $1 - $3; } /* Subtraction */
| term { $$ = $1; } /* Term without operators */
;

term:
  expr '*' factor { $$ = $1 * $3; } /* Multiplication */
| expr '/' factor { $$ = $1 / $3; } /* Division */
| factor { $$ = $1; } /* Factor without operators */
;

factor:
  '(' expr ')' { $$ = $2; } /* Parentheses to control operator precedence */
| '-' factor { $$ = -$2; } /* Unary negation */
| INT %prec NEG { $$ = - $1; } /* Negative integer literal */
| FLOAT %prec NEG { $$ = - $1; } /* Negative float literal */
;