/** This is a sample BISON code snippet */
%token <token_type> NUM // Define a token for numbers 
%token <token_type> STRING // Define a token for strings
%token <token_type> IDENTIFIER // Define a token for identifiers
%token <token_type> OPERATOR // Define a token for operators

%{
// Header section containing imports and definitions
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struct for storing tokens
typedef struct {
    char* value;
    int line_number;
} Token;

// Helper function to create and return tokens
Token* create_token(char* value, int line_number) {
    Token* token = (Token*) malloc(sizeof(Token));
    token->value = strdup(value); // Deep copy of value string
    token->line_number = line_number;
    return token;
}

// Function to handle errors during parsing
void yyerror(char* message) {
    fprintf(stderr, "ERROR: %s\n", message);
    exit(1);
}

// Function to print out token value and type during parsing
void print_token(Token* token) {
    printf("Token Value: %s\tToken Type: %d\n", token->value, token->type);
}
%}

/* Define the grammar rules */

%%

expr: NUM { print_token(create_token($1, yylineno)); } // Expression for numbers
    | STRING { print_token(create_token($1, yylineno)); } // Expression for strings
    | IDENTIFIER { print_token(create_token($1, yylineno)); } // Expression for identifiers
    | expr OPERATOR expr { print_token(create_token($2, yylineno)); } // Expression for operator and two expressions
    ;

%%

/* The main function to read input and start parsing */
int main() {
    // Initialize lexer
    yylex();

    // Terminate program
    exit(0);
}