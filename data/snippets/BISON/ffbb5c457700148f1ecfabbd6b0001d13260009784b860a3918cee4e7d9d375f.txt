%{
    // This is a code block within a BISON file. These are used to define C code that will be included in the generated parser.
    #include <stdio.h>
    int count = 0;
%}

// This is a grammar rule. It tells the parser how to recognize a certain pattern in the input.
assignment : VARIABLE '=' expression { 
    // This code is executed when the pattern is recognized. Here we increment the count variable and print a message.
    count++;
    printf("Assignment found on line %d.\n", @$.lineno);
};

expression : NUMBER '+' NUMBER {
    // Another grammar rule with C code embedded. Here we print a message indicating that an addition has been found.
    printf("Addition found on line %d.\n", @$.lineno);
};

// Tokens are the basic elements that make up our grammar. Here we define a token for variables and numbers.
%token VARIABLE NUMBER

// This is the main entry point for our parser. It calls the grammar rule for assignment and then checks if there are any errors.
%%

// This is the code that is executed when the main rule is called.
input : assignment {
    // If there are no errors, we print the total number of assignments found.
    printf("Total number of assignments found: %d\n", count);
}
| <error> {
    // If there are errors, we print a generic error message.
    printf("Error: Unrecognized input on line %d.\n", @$.lineno);
}
%%

// This is the code that is executed before the parser is generated.
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

// This is the main function that calls the parser.
int main() {
    // We pass the input file as an argument to the generated parser.
    yyparse(stdin);
    return 0;
}