%{
// This section contains the declarations and definitions that will be passed to the C code
#include <stdio.h>
int a = 10;
int b = 5;
%}

/* This section contains the BISON grammar rules and C constructs */

/* Declaring the start symbol */
%start statement_list

/* Tokens recognized by the lexer */
%token SEMI
%token NUMBER
%token PLUS
%token MINUS

/* Rules for the statement list */
statement_list: statement_list statement
    | statement
;

/* Rules for statements */
statement: expression SEMI
    | PRINT NUMBER SEMI { printf("%d\n", $2); }
;

/* Rules for expressions */
expression: NUMBER PLUS NUMBER { $$ = $1 + $3; }
    | NUMBER MINUS NUMBER { $$ = $1 - $3; }
    | NUMBER { $$ = $1; }
;

/* This section contains the C code */

/* Main function */
int main(){
    printf("a = %d\nb = %d\n", a, b);
    yyin = stdin;
    yyparse();
}

/* Error handling function */
void yyerror(char *s){
    fprintf(stderr, "%s\n", s);
}

/* Lexer function that returns the next token */
int yylex(){
    int c = getchar();
    if(c == ';') return SEMI;
    if(c == '+') return PLUS;
    if(c == '-') return MINUS;
    if(isdigit(c)){
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    return c;
}

/* Parser function that accepts and parses the input */
void yyparse(){
    while(1){
        int token = yylex();
        if(token == 0) break;
        if(token == NUMBER){
            yylval = yytext[0] - '0';
        }
        else yyval = token;
    }
}