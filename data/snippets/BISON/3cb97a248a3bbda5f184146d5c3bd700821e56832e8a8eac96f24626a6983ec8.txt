// This is a code snippet in BISON
// It generates a simple grammar for arithmetic expressions

%token NUM ADD SUB MULT DIV     // Defines tokens for numbers and operators

%left ADD SUB                   // Specifies left associativity for addition and subtraction
%left MULT DIV                   // Specifies left associativity for multiplication and division

%%

expression:
    NUM                         // Base case for numbers
    | expression ADD expression { $$ = $1 + $3; }   // Performs addition
    | expression SUB expression { $$ = $1 - $3; }   // Performs subtraction
    | expression MULT expression { $$ = $1 * $3; }  // Performs multiplication
    | expression DIV expression { $$ = $1 / $3; }   // Performs division
    ;

%%

int main() {
    FILE * fp;                  // File pointer to read input
    program = "2 + 3 * 5";      // Input arithmetic expression to be parsed
    
    // Open file for reading
    fp = fopen(program, "r");

    // Parse the input
    yyparse();

    // Close file
    fclose(fp);

    return 0;
}