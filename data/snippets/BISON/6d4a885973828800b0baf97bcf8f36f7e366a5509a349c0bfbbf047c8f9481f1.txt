%%

program: statements;

statements: statement | statements NEWLINE statement;

statement: assigment | if_statement | loop_statement | function_def;

assignment: VAR EQUALS expression;

if_statement: IF expression THEN statements END_IF;

loop_statement: FOR VAR EQUALS expression TO expression DO statements END_FOR;

function_def: FUNCTION VAR LPAREN parameters RPAREN NEWLINE statements END_FUNCTION;

parameters: VAR | parameters COMMA VAR;

expression: expression PLUS term | expression MINUS term | term;

term: term TIMES factor | term DIVIDE factor | factor;

factor: NUMBER | STRING | VAR | LPAREN expression RPAREN;

%%

/* Explanation:
In BISON, we first need to define our grammar rules using the '%%' delimiter.
The first rule 'program' specifies that the program should consist of 'statements'.
The 'statements' rule can either be a single 'statement' or multiple 'statements' separated by 'NEWLINE'.
A 'statement' can be an 'assignment', 'if_statement', 'loop_statement' or 'function_def'.
The 'assignment' rule assigns a variable with the result of an 'expression'.
The 'if_statement' rule checks if the 'expression' is true and executes the following 'statements' if it is.
The 'loop_statement' rule iterates through a range of numbers and executes the 'statements' inside the loop.
The 'function_def' rule defines a function with a name, optional 'parameters' and the code within the function.
The 'parameters' rule can have multiple parameters separated by a comma.
The 'expression' rule allows for basic mathematical operations using the '+' and '-' operators.
The 'term' rule allows for multiplication and division using the '*' and '/' operators.
The 'factor' rule defines the basic building blocks of an expression, such as numbers, strings, or variables.
After defining the grammar rules, we can add any necessary actions or semantic rules for our parser.
In this code snippet, the rules are just being defined, so we don't need to add any actions.
Finally, we use the '%%' delimiter to end the grammar and specify that any code after it is regular C code.
*/