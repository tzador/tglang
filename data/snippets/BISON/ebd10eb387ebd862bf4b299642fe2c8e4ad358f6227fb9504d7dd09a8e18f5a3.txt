/* This code snippet generates a calculator grammar using BISON */

%{

// Bison declarations
#include <stdio.h>

// Function to print the result
void print_res(double result) {
    printf("The result is: %f\n", result);
}

// Error handling
int yyerror(const char *msg) {
    printf("Error: %s\n", msg);
    return 0;
}

// Include the lexer functionality
#define YY_DECL int yylex()

// Define tokens
%token <number> NUMBER
%token PLUS MINUS MULT DIV
%left PLUS MINUS
%left MULT DIV

// Define precedence
%nonassoc LOW
%nonassoc '(' ')'

// Define the starting symbol
%start calc

%}

// Grammar rules
%left PLUS MINUS
%left MULT DIV

// Start rule
calc:
    | expr { print_res($1); }
    ;

// Expression rule
expr:
    | NUMBER { $$ = $1; }
    | expr PLUS expr { $$ = $1 + $3; }
    | expr MINUS expr { $$ = $1 - $3; }
    | expr MULT expr { $$ = $1 * $3; }
    | expr DIV expr { $$ = $1 / $3; }
    | '(' expr ')' { $$ = $2; }
    ;

// Lexical rules
%%

// Function to match and return a number
<INITIAL>[-+]?[0-9]+"."[0-9]+[eE][+-][0-9]+"."[0-9]+ {
    // Store the matched number as a double
    yylval.number = atof(yytext);
    return NUMBER;
}

// Function to match and return an operator
<INITIAL>[-+*/()]   {
    // Return the matched character as a token
    return yytext[0];
}

// Function to skip whitespace
<INITIAL>[ \t\n\r]+

// Function for handling unknown characters
<INITIAL>. {
    // Print an error and exit
    yyerror("Unknown token");
}
%%

// Main function
int main() {
    // Parse input from stdin
    yyparse();
    return 0;
}

// Function for lexing input
int yylex() {
    // Get input from stdin
    int c = getchar();

    // Check for end of file
    if (c == EOF) {
        return 0;
    }

    // Return the input character
    return c;
}