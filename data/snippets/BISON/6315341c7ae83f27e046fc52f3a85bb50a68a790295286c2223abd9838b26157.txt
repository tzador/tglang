%%

// Define tokens
digits        [0-9]+
variable      [A-Za-z]+
op_add        "+"
op_sub        "-"
op_mul        "*"
op_div        "/"


// Define rules
expression:  // Rule for a mathematical expression
              variable            // Expression can start with a variable
             |digits              // or a number
             |expression op_add expression  // or an expression followed by an addition operator and another expression
             |expression op_sub expression  // or an expression followed by a subtraction operator and another expression
             |expression op_mul expression  // or an expression followed by a multiplication operator and another expression
             |expression op_div expression  // or an expression followed by a division operator and another expression
             ;

%%

// Function for handling errors in parsing
void yyerror (char *s)
{
  printf ("\nError: %s\n", s);
}

// Main function
int main(){
  // Take input from user
  printf("Enter a mathematical expression: ");
  yyparse(); // Parse the input using the defined rules
  return 0;
}

// Function for handling tokens and building the abstract syntax tree
int yylex (){
  int c;

  // Check if input is a variable
  if( isalpha(yytext[0]) ) {
    // Set the token type as variable and return
    strcpy(yylval.name, yytext);
    return variable;
  }
  // Check if input is a number
  else if( isdigit(yytext[0]) )
    // Set the token type as digits and convert the input to integer
    sscanf(yytext, "%d", &yylval.num);
    return digits;

  // If no rule is matched, return the character itself as token type
  return yychar;
}