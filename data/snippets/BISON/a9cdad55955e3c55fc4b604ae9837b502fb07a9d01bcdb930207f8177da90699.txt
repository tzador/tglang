%code requires {
    #include <stdio.h> /* include necessary libraries */
}

/* define grammar rules */
expr: VALUE '+' VALUE { /* rule for addition operator */
    printf("The sum of %d and %d is %d\n", $1, $3, ($1 + $3)); /* print sum */
}
    | VALUE '-' VALUE { /* rule for subtraction operator */
    printf("The difference between %d and %d is %d\n", $1, $3, ($1 - $3)); /* print difference */
}
    | VALUE '*' VALUE { /* rule for multiplication operator */
    printf("The product of %d and %d is %d\n", $1, $3, ($1 * $3)); /* print product */
}
    | VALUE '/' VALUE { /* rule for division operator */
    if ($3 != 0) { /* check for division by zero */
        printf("The result of %d divided by %d is %d\n", $1, $3, ($1 / $3)); /* print quotient */
    } else {
        printf("Cannot divide by zero\n"); /* print error message */
    }
}
    | '(' expr ')' { /* rule for parentheses */
    printf("The expression within parentheses is %d\n", $2); /* print value within parentheses */
};

/* define terminal and non-terminal symbols */
%token <int> VALUE; /* define integer type symbol for values */
%left '+' '-'; /* define left associativity for addition and subtraction */
%left '*' '/'; /* define left associativity for multiplication and division */
%left '(' ')'; /* define left associativity for parentheses */

%%

/* main function to read input and run parser */
int main() {
    int result; /* variable to store calculated result */
    printf("Enter an expression to evaluate: "); /* prompt user for input */
    yyparse(&result); /* call parser function and pass in address of result variable */
    return 0; /* return 0 to indicate success */
}