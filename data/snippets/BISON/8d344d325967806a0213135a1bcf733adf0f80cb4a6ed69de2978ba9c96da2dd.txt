// This is a BISON code snippet that creates a simple calculator grammar

%token NUM // A token for numbers
%token ADD "+" // Tokens for addition operator

%%
program: /* empty */ | program command
    ;
 
command: expression { printf("Result: %d\n", $1); } // Print result of expression
    ;
 
expression: NUM ADD NUM { $$ = $1 + $3; } // Addition expression
    ;
 
%%

int main() {
    while (true) {
        printf("Enter an expression to evaluate: ");
        yyparse(); // Parse input expression
 
        printf("Enter 1 to quit, or any other key to continue: ");
        int option;
        scanf("%d", &option);
        if (option == 1) {
            break;
        }
    }
 
    return 0;
}

// `yyparse()` is a BISON function that parses the input using the specified grammar.
// The grammar defines two rules: program and command.
// The program rule can be empty or contain a command. 
// The command rule contains an expression, which is printed using `printf()`. 
// The expression rule matches two numbers separated by the addition operator and calculates their sum, which is stored in `$$` to be used by the command rule.
// The main function prompts the user to enter an expression, parses the input using `yyparse()`, and prints the result. 
// It then prompts the user to quit or continue, and exits the program if the user chooses to quit.