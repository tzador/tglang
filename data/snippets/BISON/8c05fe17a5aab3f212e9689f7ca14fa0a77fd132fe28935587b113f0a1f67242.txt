/* This is a BISON code snippet that defines a grammar for basic arithmetic operations */
%{
/* Bison declarations */
%}
/* Define the tokens to be recognized by the lexer */
%token <integer> NUMBER /* integer token */
%token <string> VARIABLE /* variable token */
%token <plus> PLUS /* plus token */
%token <minus> MINUS /* minus token */
%token <multiply> MULTIPLY /* multiplication token */
%token <divide> DIVIDE/* division token */

/* Define the grammar rules */
%%
/* Start symbol */
expr: expr PLUS term
    | expr MINUS term
    | term
    ;

term: term MULTIPLY factor
    | term DIVIDE factor
    | factor
    ;

factor: NUMBER
    | VARIABLE
    | PLUS factor
    | MINUS factor
    | LPAREN expr RPAREN
    ;

/* Define the precedence and associativity of operators */
%nonassoc LPAREN /* Left parenthesis */
%left PLUS MINUS /* Addition and subtraction have equal precedence and left associativity */
%left MULTIPLY DIVIDE /* Multiplication and division have equal precedence and left associativity */

/* Define actions */
%%
/* Code to evaluate expressions */
/*
The following actions will perform the appropriate arithmetic operations on the left and right operands
and store the result in the variable "result".
*/
expr
: expr PLUS term { $$ = $1 + $3;}
| expr MINUS term { $$ = $1 - $3;}
| term { $$ = $1; }
;
term
: term MULTIPLY factor { $$ = $1 * $3; }
| term DIVIDE factor { $$ = $1 / $3; }
| factor { $$ = $1; }
;
factor
: NUMBER { $$ = $1; }
| VARIABLE { $$ = $1; }
| PLUS factor { $$ = $2; }
| MINUS factor { $$ = -$2; }
| LPAREN expr RPAREN { $$ = $2; }
;