%token<syn_type> IDENTIFIER                  // Declare a token of type "syn_type" named IDENTIFIER

%start Program                               // Declare the starting rule as "Program"

%%                                           // Begin of rules section, with header followed by line break

/* Rule definitions */

Program:                                     // Define the rule "Program"
        StmtList                              // as a sequence of statements
        {
                /* Code for Program rule */
        }
        ;
        
StmtList:                                    // Define the rule "StmtList"
        Stmt
        {
                /* Code for StmtList rule */
        }
        | StmtList Stmt
        {
                /* Code for StmtList rule when it contains multiple statements */
        }
        ;
        
Stmt:                                        // Define the rule "Stmt"
        Expr
        {
                /* Code for Stmt rule when it is an expression statement */
        }
        | VarDecl
        {
                /* Code for Stmt rule when it is a variable declaration statement */
        }
        | IfStmt
        {
                /* Code for Stmt rule when it is an if statement */
        }
        | ForStmt
        {
                /* Code for Stmt rule when it is a for loop statement */
        }
        // And so on for other types of statements
        
Expr:                                        // Define the rule "Expr"
        IDENTIFIER                            // A single identifier can be considered as an expression
        {
                $$ = create_expr($1);         // Code to create an expression node with the identifier as its value
        }
        | Expr '+' Expr                       // Addition expression rule
        {
                $$ = create_bin_op_expr('+', $1, $3);  // Code to create an expression node for addition operation
        }
        | Expr '-' Expr                       // Subtraction expression rule
        {
                $$ = create_bin_op_expr('-', $1, $3);  // Code to create an expression node for subtraction operation
        }
        // And so on for other binary operations
        
VarDecl:                                     // Define the rule "VarDecl"
        'var' IDENTIFIER ':' TYPE             // A variable declaration statement starts with keyword 'var'
        {
                $$ = create_var_decl($2, $4);  // Code to create a variable declaration node with the given identifier and type
        }
        ;
        
IfStmt:                                      // Define the rule "IfStmt"
        'if' '(' Expr ')' Stmt                // An if statement starts with keyword 'if' followed by a condition expression in parentheses and a statement
        {
                $$ = create_if_stmt($3, $5);   // Code to create an if statement node with the condition expression and statement as its children
        }
        ;
        
ForStmt:                                     // Define the rule "ForStmt"
        'for' '(' VarDecl ';' Expr ';' Expr ')' Stmt   // A for loop statement starts with keyword 'for' followed by three parts: variable declaration, condition expression, and increment expression in parentheses, and a statement
        {
                $$ = create_for_loop_stmt($3, $5, $7, $9);   // Code to create a for loop statement node with the three expressions and statement as its children
        }
        ;
        
// And so on for other types of statements and expressions

/* Functions to handle the semantic actions in each rule */

//// Define functions to handle the semantic actions of each rule, such as creating nodes and updating the AST

/* Semantic actions */

create_expr(identifier) {                     // Function to create an expression node with the given identifier as its value
        expr = new ExprNode(identifier);
        return expr;
}

create_bin_op_expr(op, expr1, expr2) {        // Function to create a binary operation expression node with the given operation and two subexpressions
        expr = new BinOpExprNode(op, expr1, expr2);
        return expr;
}

create_var_decl(identifier, type) {           // Function to create a variable declaration node with the given identifier and type
        var_decl = new VarDeclNode(identifier, type);
        return var_decl;
}

create_if_stmt(condition, stmt) {             // Function to create an if statement node with the given condition expression and statement
        if_stmt = new IfStmtNode(condition, stmt);
        return if_stmt;
}

create_for_loop_stmt(var_decl, condition, increment, stmt) {   // Function to create a for loop statement node with the given three expressions and statement
        for_loop_stmt = new ForLoopStmtNode(var_decl, condition, increment, stmt);
        return for_loop_stmt;
}