/* Definition section */
%{
    /* Import necessary libraries */
    #include <stdio.h>
    #include <stdbool.h>
    #include <stdlib.h>

    /* Declare necessary variables */
    int num1, num2, result = 0;
    bool is_negative = false;

%}

/* Rules section */
%token NUM /* Define token for numbers */

%%
/* Rule for the start symbol */
start:
    /* Prompt user to enter two numbers */
    printf("Enter two numbers separated by a space: ");

    /* Scan the input and store it into variables */
    scanf("%d %d", &num1, &num2);

    /* Check if either number is negative */
    if (num1 < 0 || num2 < 0) {
        is_negative = true;
    }

/* Rule for adding two positive numbers */
positive_addition:
    /* If both numbers are still positive, add them together */
    if (num1 >= 0 && num2 >= 0) {
        result = num1 + num2;
    }

/* Rule for adding two negative numbers */
negative_addition:
    /* If both numbers are still negative, add them together */
    if (num1 < 0 && num2 < 0) {
        /* Convert both numbers to positive and add them */
        result = abs(num1) + abs(num2);
    }

/* Rule for adding a positive and a negative number */
mixed_addition:
    /* If one number is positive and the other is negative, subtract the absolute value of the negative number from the positive one */
    if (num1 >= 0 && num2 < 0) {
        result = num1 - abs(num2);
    } else if (num1 < 0 && num2 >= 0) {
        result = num2 - abs(num1);
    }

/* Rule for printing the result */
print_result:
    /* If the result is negative, print a message and the absolute value of the result */
    if (is_negative) {
        printf("The result is negative: %d\n", abs(result));
    } else {
        /* Otherwise, print the result */
        printf("The result is: %d\n", result);
    }

/* End of rules section */
%%

/* Include the generated parser */
#include "lex.yy.c"

/* Main function */
int main() {
    /* Parse the input using the generated parser */
    yyparse();

    /* (Optional) Clean up memory */

    /* Return 0 to indicate successful execution */
    return 0;
}

/* Lexical analyzer function */
int yylex() {
    /* Variable to store the character being read */
    char c;

    /* Read the next character from stdin */
    c = getchar();

    /* If the character is a digit, return the NUM token */
    if (c >= '0' && c <= '9') {
        return NUM;
    }

    /* If the character is a space or new line, ignore it and continue reading */
    if (c == ' ' || c == '\n') {
        return yylex();
    }

    /* If the character is anything else, return 0 (default) */
    return 0;
}