/* BISON code for a calculator grammar */

%{
// define the types of data
%}

%token <int> NUMBER
%token PLUS MINUS MULT DIV

%%
/* define the rules for the calculator grammar */
expression: 
    expression PLUS term 
    | expression MINUS term 
    | term
    ;
  
term:
    term MULT factor 
    | term DIV factor 
    | factor
    ;

factor:
    NUMBER
    | '-' factor %prec UMINUS
    | '(' expression ')'
    ;

%%
/* handler functions for each rule to perform the desired calculations */
void expression(int x) { // handle addition and subtraction
    switch (x1) {
        case PLUS: 
            $$ = $1 + $3; 
            break;
        case MINUS: 
            $$ = $1 - $3; 
            break;
    }
}

void term(int x) { // handle multiplication and division
    switch (x1) {
        case MULT: 
            $$ = $1 * $3; 
            break;
        case DIV: 
            $$ = $1 / $3; 
            break;
    }
}

void factor(int x) { // handle numbers and parentheses
    if (x1 == '-') { // handle negative numbers
        $$ = -$2;
    } else {
        $$ = $1;
    }
}

/* error handling */
void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

int main(void) {
    yyparse(); // run the parser
    return 0;
}