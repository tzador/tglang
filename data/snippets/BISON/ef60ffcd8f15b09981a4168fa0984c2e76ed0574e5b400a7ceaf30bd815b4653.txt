%start calc           // indicates the start rule of the grammar

%%                     // indicates the start of the declaration section

calc:
    list '\n'          // defines the calc rule to be a list followed by a new line
        { $$ = $1; }

list:
    | list expr        // defines the list rule to be a list followed by an expression
        { printf("%.1f\n", $2); }
    |                  // defines the list rule to be empty

expr:
    NUMBER '+' NUMBER  // defines the expr rule to be a number followed by a plus sign and another number
        { $$ = $1 + $3; }
    | NUMBER '-' NUMBER  // defines the expr rule to be a number followed by a minus sign and another number
        { $$ = $1 - $3; }
    | NUMBER '*' NUMBER  // defines the expr rule to be a number followed by a multiplication sign and another number
        { $$ = $1 * $3; }
    | NUMBER '/' NUMBER  // defines the expr rule to be a number followed by a division sign and another number
        { $$ = $1 / $3; }
    | '(' expr ')'      // defines the expr rule to be an expression enclosed in parentheses
        { $$ = $2; }

%%                     // indicates the start of the rules section

int main {
    yyparse();         // starts the parsing process
    return 0;
}