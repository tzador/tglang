%{
    /* Header section where you can include libraries and define variables */
    #include <stdio.h>
    #include <stdlib.h>
    int result = 0;
%}

%%
    /* Rules section containing the grammar rules */
    /* This rule matches an integer value and stores it in the 'result' variable */
    [0-9]+          { result = atoi(yytext); }

    /* This rule matches a mathematical expression and evaluates it, storing the result in 'result' */
    expr: expr '+' expr            { result = $1 + $3; }
    | expr '-' expr                { result = $1 - $3; }
    | expr '*' expr                { result = $1 * $3; }
    | expr '/' expr                { result = $1 / $3; }
    | '(' expr ')'                 { result = $2; }
    | expr '^' expr                { result = pow($1, $3); }
    ;

%%
    /* Code section where you can include any additional code */
    /* This code prints the value of 'result' to the console */
    int main() {
        yylex();
        printf("Result: %d\n", result);
        return 0;
    }
%%
    /* Footer section where you can define any necessary functions or variables */
    /* This function calculates the factorial of a number */
    int factorial(int n) {
        int result = 1;
        for (int i = n; i > 0; i--) {
            result *= i;
        }
        return result;
    }
%%
    /* Bison requires a main function to be defined */
    /* This main function calls the 'factorial' function and prints its result */
    main:   { printf("Factorial of 5 is: %d\n", factorial(5)); }
%%
/* End of code snippet */