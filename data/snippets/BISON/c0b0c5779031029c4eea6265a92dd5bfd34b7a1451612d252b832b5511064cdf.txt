//A simple BISON parser for mathematical expressions
%{

#include <stdio.h>
#include <stdlib.h>

%}

//Define the tokens to be recognized by the parser
%token NUMBER              //An integer or decimal number 
%token ADD SUB MULT DIV     //Mathematical operations 
%token LPAREN RPAREN        //Left and Right parentheses 

//Define precedence rules for different operations
%left ADD SUB               //Precedence for addition and subtraction
%left MULT DIV              //Precedence for multiplication and division

//Define the grammar rules
%%

expr: NUMBER               { printf("Result: %d\n", $1); } //Print the final result
    | expr ADD expr        { $$ = $1 + $3; }               //Addition operation
    | expr SUB expr        { $$ = $1 - $3; }               //Subtraction operation
    | expr MULT expr       { $$ = $1 * $3; }               //Multiplication operation
    | expr DIV expr        { $$ = $1 / $3; }               //Division operation
    | LPAREN expr RPAREN   { $$ = $2; }                    //Parentheses to change precedence
    ;

%%

//Function to handle any errors during parsing
void yyerror(char* s){
    fprintf(stderr, "%s\n", s);
}

//Main function to execute the parser
int main(void){
    yyparse();  //Start parsing
    return 0;
}