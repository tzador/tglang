%{
  // This is a pre-code section where C code can be written
  #include <stdio.h>
  #include <stdlib.h>
  #define MAX_LENGTH 100
  char buffer[MAX_LENGTH];
  int index = 0;
  int sum = 0;
%}

%token NUM // Define the type of token to be matched
%token SUM // Define the type of token to be matched
%token END // Define the type of token to be matched

%%

/* grammar rules */

expression: // This is the start rule
    NUM { // This rule matches a single number
      printf("%d", $1); // Prints the matched number
    }
    | expression SUM NUM { // This rule matches an addition expression
      sum += $3; // Adds the number to the current sum
      printf("+ %d", $3); // Prints the matched number
    };

%%

/* c code to be executed after the parsing is complete */

void main(){
  // Initialize the parser
  yyparse();
  // Print the final result
  printf("Sum: %d", sum);
}

/* bison auxiliary functions */

int yyerror(char *s){
  // This function handles any syntax errors during parsing
  fprintf(stderr, "Syntax Error: %s\n", s);
  return 0;
}

int yylex(){
  // This function reads the input and returns the next token
  int c;
  // Read from the input and store it in the buffer
  c = getchar();
  buffer[index++] = c;
  // Determine the token type
  if(c == '+'){
    return SUM;
  }else if(c == '\n'){
    return END;
  }else{
    // Convert the char to int and return it as NUM
    return NUM;
  }
}