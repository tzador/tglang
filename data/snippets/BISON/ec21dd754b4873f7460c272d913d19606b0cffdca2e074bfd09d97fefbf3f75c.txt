%{
// This is a BISON code snippet that defines a basic calculator grammar
// The goal of this snippet is to evaluate arithmetic expressions and handle errors
#include <stdio.h> // include standard input/output library
%}

%token NUMBER // declare a token for numbers

%%

input:
  /* empty */ // empty input
| input line // recursively call input and process each line
;

line:
  '\n' // empty line
| exp '\n' { printf("Result: %d\n", $1); } // evaluate expression and print result
;

exp:
  factor // base case, returns factor
| exp '+' factor { $$ = $1 + $3; } // add two factors
| exp '-' factor { $$ = $1 - $3; } // subtract two factors
;

factor:
  NUMBER // base case, returns NUMBER token value
| '(' exp ')' // handle parentheses
;

%%

// custom error handling
int yyerror(char *s) {
  printf("%s\n", s);
  return 0;
}

// main method to take in input and start parsing
int main(void) {
  yyparse();
  return 0;
}

// lexer
int yylex(void) {
  int c = getchar(); // read character from input
  if (c == EOF) {
    return 0; // signal end of input
  }

  if (c >= '0' && c <= '9') {
    // read in number
    ungetc(c, stdin); // put back character in input stream
    scanf("%d", &yylval); // read number into yylval
    return NUMBER; // return NUMBER token
  }

  return c; // return character itself if not a number
}

// flex needs this function, but it will not be called
int yywrap(void) {
  return 1; // indicate that we are finished with input
}