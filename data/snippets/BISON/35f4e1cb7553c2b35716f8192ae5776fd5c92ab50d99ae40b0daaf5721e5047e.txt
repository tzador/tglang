%{
// this section is used for declaring any external variables or functions that will be used in the grammar rules
#include <stdio.h>

// declare a struct to hold data for a person
typedef struct {
    char *name;
    int age;
} Person;
%}

// define the tokens that will be used in the grammar rules
// start token for the parser
%start person_list

// empty token that represents a list of persons
%token EMPTY_TOKEN

// token for a person's name
%token <Person> NAME_TOKEN
// token for a person's age
%token <Person> AGE_TOKEN

// define the grammar rules
person_list: /* empty */ { printf("No persons were found."); }
    | person person_list 
    ;

person: NAME_TOKEN "=" AGE_TOKEN ";" { printf("%s is %d years old.", $1.name, $3.age); }
    | NAME_TOKEN ";" { printf("Missing age for %s.", $1.name); }
    ;

// specify what to do when encountering a parse error
%error-verbose

%define api.value.type {Person}

%parse-param {FILE *fp} // pass in a file pointer to read the input from

// declare any helper functions needed for the grammar rules
void print_tab() { printf(" "); }

%%
// this section contains the input from the user that is processed by the parser
// this input would typically come from a file or standard input
John = 25;
Jane = 31;
Henry;
Alice = 27;

%%

// this section is executed after the parsing is complete
// it can be used to perform any post-processing tasks or print the final output
{
    // close the input file
    fclose(fp);
}