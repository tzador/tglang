%token DIGIT INT
%token PLUS MINUS
%token MULT DIV

%%

expression: INT |
    expression PLUS expression |
    expression MINUS expression |
    expression MULT expression |
    expression DIV expression ;

%%

%{
  // This is a C code section within BISON
  #include <stdio.h>
%}

%%

// Function for evaluating and printing the result of the expression
void evaluate(int result) {
    printf("The result of the expression is %d", result);
}

// Rules for each production in the grammar
expression:
    INT {
        // When the production is just an integer, print the value
        printf("%d", $1);
    }
    |
    expression PLUS expression {
        // When the production is a sum, add the values and print the result
        evaluate($1 + $3);
    }
    |
    expression MINUS expression {
        // When the production is a subtraction, subtract the values and print the result
        evaluate($1 - $3);
    }
    |
    expression MULT expression {
        // When the production is a multiplication, multiply the values and print the result
        evaluate($1 * $3);
    }
    |
    expression DIV expression {
        // When the production is a division, divide the values and print the result
        evaluate($1 / $3);
    }
    ;


// Code for handling errors
void yyerror(const char* error) {
    printf("Error: %s\n", error);
}

// Main function for reading input, parsing the expression, and calling the evaluate function
int main() {
    yyparse();
    return 0;
}