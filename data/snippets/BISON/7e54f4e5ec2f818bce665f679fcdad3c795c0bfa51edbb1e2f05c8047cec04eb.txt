%{
// These are definitions that Bison needs to recognize
// Some common definitions include external libraries and variables
// This section is optional
%}

%token ID // declare token "ID"
%token INT // declare token "INT"

%%
// This section contains the grammar rules for the parser
// It specifies how the various tokens are combined to form higher-level language constructs
/* 
    Here is an example rule:
    expr :
        expr '+' term
        { printf("added");}
    ;
*/

// Non-Terminal symbol: expr
expr :
    expr '+' term
    { printf("added");} // action, executed when this rule is reduced
    | expr '-' term
    { printf("subtracted");}
    | term
    ;

// Non-Terminal symbol: term
term :
    term '*' factor
    { printf("multiplied");}
    | term '/' factor
    { printf("divided");}
    | factor
    ;

// Non-Terminal symbol: factor
factor :  
    '(' expr ')' // rule that allows for parentheses in expressions
    | ID 
    | INT
    ;
    
%%
// This section is for the Bison parser to generate C code
// It specifies how the various rules and actions are translated into code
// This section is optional

// The following section specifies what code to include in the generated parser
// It can include external libraries, global variables, and any additional code needed for the parser to function
%code{
    #include <stdio.h>
    int yylex(void); // define function from lex file
    int yyerror(char * s); // define error function
}
// This section specifies the main function of the parser
// It initializes the parser and starts the parsing process
%code{
    int main(){
        printf("Enter expression to parse: ");
        yyparse(); // start parsing process
        return 0;
    }
}
// This section specifies the implementation of the yyerror function
// It is called when an error occurs during parsing and prints out an error message
%code{
    int yyerror(char * s){
        printf("%s\n", s);
    }
}