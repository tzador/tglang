%{
// The following block is used to define any necessary C code before the rules
// %token is used to declare any terminal symbols that will be used
// %nterm is used to declare any non-terminal symbols that will be used
// %% is used to separate the grammar rules from the C code
%}

%token NUMBER       // Declaring NUMBER as a terminal symbol
%token ADD SUB MULT DIV   // Declaring ADD, SUB, MULT, DIV as terminal symbols
%token LPAREN RPAREN      // Declaring LPAREN, RPAREN as terminal symbols
%token ASSIGNMENT        // Declaring ASSIGNMENT as a terminal symbol
%token VARIABLE         // Declaring VARIABLE as a terminal symbol

%nterm exp       // Declaring exp as a non-terminal symbol
%type <value> exp       // Defining the return type of exp as value

%%     
// Begin defining the grammar rules
exp:   exp ADD exp    // Rules for addition
      | exp SUB exp   // Rules for subtraction
      | exp MULT exp  // Rules for multiplication
      | exp DIV exp   // Rules for division
      | LPAREN exp RPAREN	// Rules for parentheses
      | NUMBER                 // Rules for numbers
      | VARIABLE               // Rules for variables
      | VARIABLE ASSIGNMENT exp   // Rules for assignment expressions
      ;

%%

// The following block is used to define any necessary C code after the rules

%option noyywrap   // Disables default yywrap() function

int main()
{
    yyparse(); // Function that begins the parsing process
    return 0;
}

int yyerror(char *s) // Function used to handle any errors that may occur during parsing
{
    fprintf(stderr, "%s\n", s);
}

int yywrap()    // Function used to signal the end of input
{
    return 1;
}

// The following block is used to define any necessary C code after the parsing process

// Example input: x = 3 + 4 * (5 - 2)
// Output: (x = (3 + (4 * (5 - 2))))
// Note: This output may be different depending on how the grammar rules are defined.