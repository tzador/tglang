%token NUM //define a terminal symbol, NUM
%token ADDOP //define a terminal symbol, ADDOP
%left '+' '-' //define left associative operator precedence
%left '*' '/' //define left associative operator precedence

%%
Exp: Num //define a rule for expression
    | Exp ADDOP Exp //define a recursive rule
    ;

Num: NUM //define a rule for number
    ;

%%

int evaluate(Exp e) { //define a function to evaluate the expression
    int result = 0; //initialize result to 0
    switch (e->symbol) { //switch statement based on symbol
        case NUM: //if symbol is NUM
            result = atoi(e->value); //convert value to integer and store in result
            break;
        case '+': //if symbol is ADDOP
            result = evaluate(e->left) + evaluate(e->right); //evaluate left and right expressions and sum them
            break;
        case '-':
            result = evaluate(e->left) - evaluate(e->right); //evaluate left and right expressions and subtract them
            break;
        case '*':
            result = evaluate(e->left) * evaluate(e->right); //evaluate left and right expressions and multiply them
            break;
        case '/':
            result = evaluate(e->left) / evaluate(e->right); //evaluate left and right expressions and divide them
            break;
    }
    return result; //return the final result
}