/* This is a BISON program to parse and evaluate arithmetic expressions */

%{
#include <stdio.h>
#include <math.h>
%}

%token <value> NUMBER  /* define the token type for numbers */
%left '+' '-'          /* define the left and right associativity for addition and subtraction */
%left '*' '/'          /* define the left and right associativity for multiplication and division */
%nonassoc NEG           /* define the non-associative token for unary negation */

%%

program: expr {  /* the main rule for the program, evaluates the expression and prints the result */
    printf("Result: %f\n", $1);
};

expr: NUMBER {  /* rule for numbers, returns the value */
    $$ = $1;
}
| '(' expr ')' {  /* rule for parentheses, returns the result of the evaluated expression inside */
    $$ = $2;
}
| expr '+' expr {  /* rule for addition, evaluates both expressions and returns the sum */
    $$ = $1 + $3;
}
| expr '-' expr {  /* rule for subtraction, evaluates both expressions and returns the difference */
    $$ = $1 - $3;
}
| expr '*' expr {  /* rule for multiplication, evaluates both expressions and returns the product */
    $$ = $1 * $3;
}
| expr '/' expr {  /* rule for division, evaluates both expressions and returns the quotient */
    $$ = $1 / $3;
}
| '-' expr %prec NEG {  /* rule for unary negation, evaluates the expression and returns the negative value */
    $$ = -$2;
}
| expr '^' expr {  /* rule for exponentiation, evaluates both expressions and returns the power */
    $$ = pow($1, $3);
}
;

%%

int main(int argc, char *argv[])
{
    // check if user has provided an expression to evaluate, if not prompt for one
    if (argc < 2) {
        char expr[100];
        printf("Enter an arithmetic expression: ");
        fgets(expr, 100, stdin);
        yyparse(expr);
    }
    else {
        yyparse(argv[1]);
    }
    return 0;
}

int yyerror(char *s)
{
    printf("Error: %s\n", s);  /* print error message if parsing fails */
    return 0;
}

int yylex()
{
    int c = getchar();  /* read characters from input stream */
    if (c == EOF)
        return 0;  /* return 0 to indicate end of input */
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')')
        return c;  /* return the operator character as its own token */
    if (isdigit(c) || c == '.') {
        ungetc(c, stdin);  /* put the read character back for parsing as a number */
        scanf("%lf", &yylval);  /* read the number using the token type specified earlier */
        return NUMBER;  /* return the token value for numbers */
    }
    return 0;  /* return 0 for any other characters */
}

void yyerror(char *s);  /* function declaration for error handling */
void yyparse(char *s);   /* function declaration for parsing input */