%{
/* header section */
#include <stdio.h>
#include <math.h>
%}

/* tokens section */
%token <value> INTEGER
%token <operand> OPERATOR
%token <ident> VARIABLE

%% /* grammar rules section */
expression: /* empty rule */
          | expression  INTEGER  { double val = sin($2); } /* rule with semantic action */
          | expression OPERATOR expression
          | expression VARIABLE  '=' expression { $4 = $2; /* assign value to variable */ }
          ;

%% /* actions section */
/* function to print the final result */
void print_result(double result)
{
  printf("The final result is: %d\n", result);
}

/* main function to execute the parser and print result */
int main()
{
  yyparse(); /* call parser */
  if (yyget_error_count() == 0) /* check for errors during parsing */
  {
    print_result($1); /* print the final result */
  }

  return 0;
}

/* code for lexer */
int yylex()
{
  int c = getchar(); /* get next input character */

  /* check for whitespace or end of file */
  if (c == ' ' || c == '\t' || c == '\n' || c == EOF) { return c; }
  /* check for integers */
  else if (c >= '0' && c <= '9')
  {
    yylval.value = c - '0'; /* store integer value into yylval union */
    return INTEGER;
  }
  /* check for operators */
  else if (c == '+' || c == '-' || c == '*' || c == '/')
  {
    yylval.operand = c; /* store operator into yylval union */
    return OPERATOR;
  }
  /* check for variables */
  else if (c >= 'a' && c <= 'z')
  {
    yylval.ident = c; /* store variable name into yylval union */
    return VARIABLE;
  }
  /* if none of the above, return error */
  else return -1;
}