// Declare a Grammar Rule

<expression> ::= <operand> <operator> <operand>

// Define a Token

%token ID

// Define a Terminal Symbol
%type <ID> identifier

// Begin Rules Section

%%

// Define Rules
expression: /* empty */ { printf("Empty Expression"); }
    | <expression> '+' <expression> { printf("Addition Operation"); }
    | <expression> '-' <expression> { printf("Subtraction Operation"); }
    | <expression> '*' <expression> { printf("Multiplication Operation"); }
    | <expression> '/' <expression> { printf("Division Operation"); }
    | 'sin' '(' <expression> ')' { printf("Sine Function"); }
    | 'cos' '(' <expression> ')' { printf("Cosine Function"); }
    | identifier { printf("Identifier"); }

// Define Identifiers
identifier: ID   { printf("Identifier: "); }

// Begin Lex Section

%%

// Define Tokens
[a-zA-Z]+           { yylval.sval = strdup(yytext); return(ID); }
[-+*/]              { return(*yytext); }
[(][\t\n ]*[])]     { return(*yytext); }
[0-9]+              { return(*yytext); }

// Define Error Handling
\n                  { return(0); }
.                   { yyerror("Illegal character"); }