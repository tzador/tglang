%{

/*
    This is a code snippet in the BISON programming language.
    It contains various rules and actions that define a grammar for a simple mathematical expression parser.
*/

%}

/*
    Define the tokens that will be used in the grammar.
    Tokens must start with a letter or underscore, and can contain alphanumeric characters and underscores.
*/

%token <value> INT          // token for integer literals
%token <value> FLOAT        // token for floating point literals
%token <name> ADDOP         // token for addition operator
%token <name> SUBOP         // token for subtraction operator
%token <name> MULOP         // token for multiplication operator
%token <name> DIVOP         // token for division operator
%token <name> OPEN_PAREN    // token for left parenthesis
%token <name> CLOSE_PAREN   // token for right parenthesis

/*
    Define the start symbol for the grammar.
    This rule will be the entry point for the parser.
*/

%start expression

%%

/*
    Define the grammar rules.
    Each rule consists of a non-terminal symbol on the left, followed by a colon and the sequence of symbols that compose the rule.
    Non-terminal symbols are defined using angle brackets <>, while terminal symbols are written without brackets.
*/

expression:              // rule for a full expression
    expression ADDOP term // expression followed by an addition operator and a term
    | expression SUBOP term // expression followed by a subtraction operator and a term
    | term;                 // alternatively, just a single term (no operators)

term:                     // rule for a term
    term MULOP factor     // term followed by a multiplication operator and a factor
    | term DIVOP factor;   // term followed by a division operator and a factor

factor:                   // rule for a factor
    INT                   // integer literal
    | FLOAT               // floating point literal
    | OPEN_PAREN expression CLOSE_PAREN; // expression enclosed in parentheses

%%

/*
    Define the actions to be performed when the parser recognizes each rule.
    The action is written between curly braces after the colon, and can contain any valid C code.
    In this case, each rule simply adds the parsed symbols to the abstract syntax tree (AST).
*/

expression:
    { $$ = create_ast_node(ADD, $1, $3); } // creates an AST node for addition
    | { $$ = create_ast_node(SUB, $1, $3); } // creates an AST node for subtraction
    | { $$ = $1; } // if the rule is just a single term, use the AST node of the term itself

term:
    { $$ = create_ast_node(MUL, $1, $3); } // creates an AST node for multiplication
    | { $$ = create_ast_node(DIV, $1, $3); } // creates an AST node for division

factor:
    { $$ = create_ast_node(INT, $1); } // creates an AST node for integer literals
    | { $$ = create_ast_node(FLOAT, $1); } // creates an AST node for floating point literals
    | { $$ = $2; } // if the factor is an expression enclosed in parentheses, use the AST node of the expression itself