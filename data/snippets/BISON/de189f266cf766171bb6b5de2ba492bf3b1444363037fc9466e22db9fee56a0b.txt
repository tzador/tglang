%{
    /* This is a comment in BISON code */
    #include <stdio.h> /* Including standard input/output library for Bison */
    int num = 0; /* Initializing num variable to 0 */
%}

/* The BISON code starts here */
/* Defining the grammar rules for a simple math expression */
math_expression: 
    /* The math expression can start with a number or an opening parenthesis */
    NUMBER
    | '(' math_expression ')'

/* The math expression can contain addition, subtraction, multiplication or division */
math_expression:
    math_expression '+' math_expression
    | math_expression '-' math_expression
    | math_expression '*' math_expression
    | math_expression '/' math_expression

%% /* Syntax for calling Bison parser function */
int main() {
    yyparse(); /* This will call the yyparse() function to start parsing the input */
    /* Printing the result of the math expression */
    printf("The result is: %d", num);
}

/* Function for handling errors during parsing */
yyerror(char *error) {
    /* Printing the error detected by Bison */
    printf("Error: %s\n", error);
}

/* BISON function definitions */
%%

/* The following code is added for the purpose of compiling the BISON code */
/* Including the BISON generated header file */
#include "y.tab.h"
/* Defining the input function for Bison */
extern FILE *yyin;
/* Initializing yyin to point to standard input */
yyin = stdin;

/* The following code is added for the purpose of compiling the BISON code */
/* Calling yylex() to start tokenizing the input */
yylex() {
    /* Code to read the next token from the input */
    /* This function is provided by lex and returns an integer representing the current token */
    /* The token value is stored in yylval which is a global variable */
    yylval = <token_value>;
    /* Returning the token value to Bison */
    return <token>;
}

/* Starting the BISON code */
%%
/* The following is the lex file (not required for code snippet) */

/* Defining the tokens in the lex file for BISON */
DIGIT [0-9]
INTEGER {DIGIT}+
FLOAT {DIGIT}+[.]?[DIGIT}*
PLUS "+"
MINUS "-"
MULTIPLY "*"
DIVIDE "/"
LPAREN "("
RPAREN ")"
WS [\t\n\r ]

/* Recognizing tokens and returning their corresponding values */
%%
({INTEGER}|{FLOAT}) { yylval = atoi(yytext); return NUMBER; }
{PLUS} { return '+'; }
{MINUS} { return '-'; }
{MULTIPLY} { return '*'; }
{DIVIDE} { return '/'; }
{LPAREN} { return '('; }
{RPAREN} { return ')'; }
{WS} { /* ignoring whitespace */ }