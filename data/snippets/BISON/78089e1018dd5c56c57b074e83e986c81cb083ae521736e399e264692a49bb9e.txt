%{
  /* This is a complex BISON code snippet that generates
  an arithmetic expression parser */

  #include "tokenizer.h"

  // Define the data type for numbers
  %union {
    float value;
  }

  // Define the non-terminal symbols for the grammar
  %token <value> NUMBER
  %nonterminal <value> expression

  // Specify the associativity and precedence of operators
  %left '+' '-'         // addition and subtraction
  %left '*' '/'         // multiplication and division
  %nonassoc '^'         // exponentiation

  // Define the grammar rules
  %start expression
  %{
    // Code to handle syntax errors
    void yyerror (char *conflict) {
      fprintf (stderr, "Syntax error: %s\n", conflict);
      exit (EXIT_FAILURE);
    }
  %}

  // Grammar production rules
  expression:
    number                      { $$ = $1; }           // handle numbers
    | expression '+' expression { $$ = $1 + $3; }      // handle addition
    | expression '-' expression { $$ = $1 - $3; }      // handle subtraction
    | expression '*' expression { $$ = $1 * $3; }      // handle multiplication
    | expression '/' expression { $$ = $1 / $3; }      // handle division
    | expression '^' expression { $$ = pow($1, $3); }  // handle exponentiation
    | '(' expression ')'        { $$ = $2; }           // handle parentheses
    ;

  %%
  // The code below is responsible for generating the lexer
  main() {
    while (1) {
      int token = yylex();
      if (token == 0) {
        break;
      }
      printf("Token: %d, Value: %f\n", token, yylval.value);
    }

    return 0;
  }
%}