/* A simple grammar for arithmetic expressions */

%token NUMBER         /* decimal integer */
%token ID             /* identifier (variable name) */
%token SEMICOLON      /* statement terminator */
%token QMARK          /* question mark (ternary operator) */
%token ASSIGN         /* assignment operator */
%token PLUS           /* addition operator */
%token TIMES          /* multiplication operator */
%token DIV            /* division operator */
%token LPAREN         /* left parenthesis */
%token RPAREN         /* right parenthesis */

%%

input:
    /* empty */
    | input statement
    /* handle syntax errors */
    | error SEMICOLON

statement:
    expression SEMICOLON
    | ID ASSIGN expression SEMICOLON
    | ID QMARK expression COLON expression SEMICOLON

expression:
    NUMBER
    | ID
    | LPAREN expression RPAREN
    | PLUS expression
    | TIMES expression
    | DIV expression
    | expression PLUS expression
    | expression TIMES expression
    | expression DIV expression
    | MINUS expression
    => start_neg

%%

/* handle constants and function variables */

int parse_number() {
    /* retrieve the next number token and convert it to an integer */
    yylval = atoi(yytext);
    return NUMBER;
}

/* handle identifier tokens */

int parse_id() {
    /* retrieve the next identifier token */
    /* perform necessary checks and store it for later use */
    strcpy(yylval, yytext);
    return ID;
}

/* handle operators and parentheses */

int parse_operator(int op) {
    /* retrieve the next operator token and return the appropriate token type */
    switch (op) {
        case '+': return PLUS;
        case '*': return TIMES;
        case '/': return DIV;
        default: return -1;
    }
}

/* handle ternary operators */

int parse_ternary() {
    /* retrieve the next question mark token and return the appropriate token type */
    return QMARK;
}

/* handle assignment operator */

int parse_assign() {
    /* retrieve the next assignment token and return the appropriate token type */
    return ASSIGN;
}