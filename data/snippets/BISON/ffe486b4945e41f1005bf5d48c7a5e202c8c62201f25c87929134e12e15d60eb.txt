/* A simple grammar for a mathematical expression */

%%
 
/* Terminals (symbols) */
number: /[0-9]+/; /* Match one or more digits */
plus: '+'; /* Match the plus sign */
minus: '-'; /* Match the minus sign */
multiply: '*'; /* Match the multiplication symbol */
divide: '/'; /* Match the division symbol */
power: '^'; /* Match the exponent symbol */
left_parenthesis: '('; /* Match the left parenthesis */
right_parenthesis: ')'; /* Match the right parenthesis */
 
 
 /* Non-terminals (expressions) */
expression: /* A mathematical expression can consist of either a number or a combination of a binary operation and two expressions */
     number
     | expression plus expression
     | expression minus expression
     | expression multiply expression
     | expression divide expression
     | expression power expression
     | left_parenthesis expression right_parenthesis; /* Expressions can also be surrounded by parentheses */
 
 
 /* Define the start symbol and rules to handle whitespace characters */
 
%%

/* Start symbol */
 
start: expression
 
%%
 
/* Include the necessary header files and define any necessary functions or variables */
 
%{
 
#include <stdio.h> /* For input/output operations */
#include <stdlib.h> /* For memory allocation and string manipulation */
 
int evaluate(int, int, char); /* Function for evaluating a mathematical expression */
 
int main(){
 
    /* Prompt the user for a mathematical expression */
    printf("Enter a mathematical expression: ");
 
    /* Allocate memory for the expression and scan it in */
    char *expression = (char *)malloc(sizeof(char) * 100);
    scanf("%s", expression);
 
    /* Perform lexical analysis using Bison-generated parser and print the result */
    printf("Result: %d\n", yyparse());
 
    return 0;
}
 
/* Function for evaluating a mathematical expression */
int evaluate(int a, int b, char operation){
 
    switch(operation){
        case '+': /* Addition */
            return a + b;
        case '-': /* Subtraction */
            return a - b;
        case '*': /* Multiplication */
            return a * b;
        case '/': /* Division */
            return a / b;
        case '^': /* Exponent */
            int result = 1;
            for(int i = 0; i < b; i++){
                result *= a;
            }
            return result;
        default: /* If the operation is not recognized, return an error */
            printf("Error: Invalid operation\n");
            exit(1);
    }
 
}
 
/* Function for handling errors during parsing */
int yyerror(char *error){
 
    printf("Error: %s\n", error);
    exit(1);
 
}
 
/* Function for parsing a mathematical expression using the generated Bison parser */
int yyparse(){
 
    yylex(); /* Perform lexical analysis */
 
    return evaluate($1, $3, $2); /* Evaluate the expression and return the result */
 
}
 
/* Function for handling keyword tokens */
int yylex(){
 
    char *pointer = yytext; /* Pointer to the string being parsed */
 
    char *current_token = (char *)malloc(sizeof(char) * 100); /* Allocate memory for the current token */
 
    current_token = pointer; /* The current token starts at the current pointer location */
 
    char operation = '$'; /* Variable for storing the current operation being parsed */
 
    /* Loop through the string */
    while(*pointer != '\0'){
 
        /* Check if the character is a digit or a decimal point */
        if(!isdigit(*pointer) && *pointer != '.'){
 
            /* Check if the character is a valid operation */
            if(*pointer == '+' || *pointer == '-' || *pointer == '*' || *pointer == '/' || *pointer == '^'){
 
                /* If operation is not yet set, set the operation to the current character */
                if(operation == '$'){
                    operation = *pointer;
                }
            } else{ /* If the character is not a valid operation, return an error */
                yyerror("Invalid operation");
            }
 
            /* The token ends at the current pointer location */
            *pointer = '\0';
 
            /* Convert the token to an integer and return it as a token */
            return atoi(current_token);
        }
 
        pointer++; /* Move to the next character */
    }
 
    return 0; /* Return 0 if the string has been fully parsed */
 
}
 
/* Function for handling non-keyword tokens */
char *yytext;
 
int yylex(){
 
    /* Set the current token to the start of the string */
    yytext = yy_scan_string($1);
 
    /* Check if the token is a number */
    if(isdigit(yytext[0])){
        return number; /* Return the number token */
    }
 
    /* Check if the token is a plus sign */
    else if(yytext[0] == '+'){
        return plus; /* Return the plus token */
    }
 
    /* Check if the token is a minus sign */
    else if(yytext[0] == '-'){
        return minus; /* Return the minus token */
    }
 
    /* Check if the token is a multiplication symbol */
    else if(yytext[0] == '*'){
        return multiply; /* Return the multiplication token */
    }
 
    /* Check if the token is a division symbol */
    else if(yytext[0] == '/'){
        return divide; /* Return the division token */
    }
 
    /* Check if the token is an exponent symbol */
    else if(yytext[0] == '^'){
        return power; /* Return the power token */
    }
 
    /* Check if the token is a left parenthesis */
    else if(yytext[0] == '('){
        return left_parenthesis; /* Return the left parenthesis token */
    }
 
    /* Check if the token is a right parenthesis */
    else if(yytext[0] == ')'){
        return right_parenthesis; /* Return the right parenthesis token */
    }
 
    return 0; /* If the token is not recognized, return 0 */
 
}