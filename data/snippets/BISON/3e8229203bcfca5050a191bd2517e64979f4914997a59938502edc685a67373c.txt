%{
  /*
    This is a BISON code snippet with annotations.
    It contains a grammar and actions for a simple calculator.
  */
  #include <stdio.h>

  // declare variables and functions used in the code
  int result = 0;
  void add(int num) {
    result += num;
  }
%}

%token <int> NUMBER // define token for integer values

/* 
  Grammar rules for arithmetic expressions.
  The rules define the order of operations in the calculator.
*/
%%
calc:               /* empty grammar rule, production code starts here */
  expr {           // execute action after expr is parsed
    printf("Result = %d\n", $1); // print result
  }
;
expr:		
  | expr '+' term {        // action to perform when addition operator is encountered
    add($3); 	        // call add function to update result
  }
  | expr '-' term {        // action to perform when subtraction operator is encountered
    add(-$3);		    // negate term to subtract from result
  }
  | term {     // base rule: term can be a single number or an expression in parentheses
    $$ = $1;  // assign value of $1 (terminal) to $$
  }
  ;
term:
  | '(' expr ')' {  // parentheses used to specify order of operations
    $$ = $2;	    // $2 is the expr inside parentheses
  }
  | NUMBER {      // rule for integer values
    $$ = $1;	  // assign value of $1 (token) to $$
  }
  ;
%%
/*  Execution code, this will read input from user and parse it using the defined grammar */
int main() {
  printf("Enter arithmetic expression: ");
  yyparse();
  return 0;
}