%start program
%token <sval> STRING
%token <fval> FLOAT
%token <ival> INTEGER

%%

program: statement_list
    { printf("Program successfully executed!\n"); }

statement_list: statement_list statement
    |
;

statement: STRING EQU expression
    { printf("%s = ", $1); }
    expression
    { printf("%f\n", $3); }
    | declaration

declaration: type IDENTIFIER SEMICOLON
    { printf("Variable %s declared of type %s\n", $2, $1); }
    | type declaration_list SEMICOLON
    { printf("All variables declared of type %s\n", $1); }

declaration_list: IDENTIFIER
    { printf("%s, ", $1); }
    | declaration_list COMMA IDENTIFIER
    { printf("%s, ", $3); }

type: INTEGER
    |
    { printf("float "); }
;

expression: expression PLUS term
    { $$ = $1 + $3; }
    | expression MINUS term
    { $$ = $1 - $3; }
    | term
;

term: term TIMES factor
    { $$ = $1 * $3; }
    | term DIVIDE factor
    { $$ = $1 / $3; }
    | factor
;

factor: INTEGER
    { $$ = $1; }
    | FLOAT
    { $$ = $1; }
    | LPAREN expression RPAREN
    { $$ = $2; }
    | IDENTIFIER
    { $$ = $1; }
;