%{
    /* This is a BISON code snippet */
    /* Declaring variables */
    int x, y;
    float z;

%}

/* Define the grammar rules */
%%

/* Non-terminal symbol for start rule */
start: expressions { // start rule for our BISON code
            printf("Result is %f\n", $1);  // Prints the result of the expressions
       }
      ;

expressions: // Grammar rule to handle multiple expressions
              expression                   { $$ = $1; } 
              | expressions '+' expression { $$ = $1 + $3; }
              | expressions '-' expression { $$ = $1 - $3; }
              | expressions '*' expression { $$ = $1 * $3; }
              | expressions '/' expression { $$ = $1 / $3; }
              | expressions '^' expression { $$ = pow($1, $3); }
              ;

expression: // Grammar rule to handle single expressions
              NUMBER   { $$ = $1; } // Assigns the value of NUMBER to $$ 
              | '(' expression ')'  { $$ = $2; } // Use parentheses to group expressions
              ;

%%

/* This section contains the C code that will be executed */
int main() {
    y = 5; // Assigning a value to variable y
    printf("Enter a number to multiply with y: ");
    scanf("%f", &z); // Taking input from user
    x = y * z; // Calculating result
    printf("Result is %d", x); // Printing the final result
    return 0;
}

/* This section contains function definitions used in the grammar rules */
double pow(double x, double y) {
    double result = 1;
    while (y != 0) {
        result *= x;
        y--;
    }
    return result;
}