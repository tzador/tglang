// This is a BISON code snippet that uses variables, rules and actions to generate a complex output.
%{
// Defines the start and end symbols for the BISON parser.
%start expression
%}

// Set of token definitions used by BISON to parse the input.
// A token is enclosed in single quotes, followed by a unique integer value.
%token NUMBER 100
%token OPERATOR 200
%token LEFT_PAREN 300
%token RIGHT_PAREN 301

// Defines the type of values for the variables used in the BISON parser.
%type <number> expression
%type <number> term
%type <number> factor

%%

// BISON rules that define the grammar of the input expression.
expression: // Rules for an expression consists of a term followed by zero or more addition or subtraction operators and another term.
          term
          | term OPERATOR expression 
 
term: // Rules for a term consists of a factor followed by zero or more multiplication or division operators and another factor.
    factor
    | factor OPERATOR term
 
factor: // Rules for a factor consists of a number or an expression enclosed in parentheses.
      NUMBER
      | LEFT_PAREN expression RIGHT_PAREN
 
// BISON actions that define the operations for each set of rules.
// $1, $2, etc. represent the values of the variables in each rule.
expression: { $$ = $1 + $3; } // Action for adding two terms
          | { $$ = $1 - $3; } // Action for subtracting two terms
 
term: { $$ = $1 * $3; } // Action for multiplying two factors
    | { $$ = $1 / $3; } // Action for dividing two factors
 
factor: { $$ = $1; } // Action for returning the value of a number
      | { $$ = $2; } // Action for returning the value of an expression

%%

// Function to print the output of the BISON parser.
void print_output(double result){
    printf("The result of the expression is %f", result);
}

// Function to parse the input using the BISON parser and execute the defined actions.
double parse_input(void* input){
    yyscan_t scanner; // Create a scanner object for the input
    yylex_init(&scanner); // Initialize the scanner
    YY_BUFFER_STATE buffer = yy_scan_string(input); // Create a buffer for the input
    yy_switch_to_buffer(buffer); // Set the input as the input for the scanner
    yyparse(scanner); // Parse the input using the BISON parser
    yy_delete_buffer(buffer); // Delete the buffer
    yylex_destroy(scanner); // Destroy the scanner object
}

int main(){
    double result = parse_input("5 * (4 + 2)"); // Example input to be parsed
    print_output(result); // Print the result of the parsed input
    return 0;
}