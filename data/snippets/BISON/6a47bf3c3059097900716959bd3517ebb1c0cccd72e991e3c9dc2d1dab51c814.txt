%{
    # This is a comment indicating the start of the definitions section
    # We can define variables and functions here that will be used later in the grammar
    # In this example, we define a variable that keeps track of the number of expressions
    int num_expressions = 0;

    # This function will be used to increment the num_expressions variable
    void increment_expression_count() {
      num_expressions++;
    }
%}

%start Program

%%

Program:
    /* This is the top level rule that represents a program */

    /* We use the dollar sign syntax to refer to the value of a variable or function defined in the definitions section */
    /* In this case, we are using it to increment the num_expressions variable */
    { increment_expression_count(); }

    /* We can have multiple statements within curly braces, separated by a semicolon */
    { expression_1(); }; { expression_2(); }; { expression_3(); }

    /* Here we are using the curly braces to group together multiple expressions into one rule */
    {
      /* These expressions could be anything according to our grammar rules */
      expression_4();
      expression_5();
      expression_6();
    };

    /* This is the end of the Program rule, it will match if all the previous statements have matched */
    { 
      /* We can use the printf function to print statements within our BISON code */
      printf("Number of expressions in program: %d\n", num_expressions);
    };

%%

 /* This section is used to define the functions that were used within our grammar rules */
/* This function returns a random number between 1 and 10 */
int generate_random_number() {
    int num = (rand() % 10) + 1;
    return num;
}

/* This function represents a simple expression that multiplies two numbers */
void expression_1() {
    int num1 = generate_random_number();
    int num2 = generate_random_number();
    int result = num1 * num2;
    printf("%d * %d = %d\n", num1, num2, result);
}

/* This function represents a simple expression that adds two numbers */
void expression_2() {
    int num1 = generate_random_number();
    int num2 = generate_random_number();
    int result = num1 + num2;
    printf("%d + %d = %d\n", num1, num2, result);
}

/* This function represents a simple expression that subtracts two numbers */
void expression_3() {
    int num1 = generate_random_number();
    int num2 = generate_random_number();
    int result = num1 - num2;
    printf("%d - %d = %d\n", num1, num2, result);
}

/* This function represents a simple expression that divides two numbers */
void expression_3() {
    int num1 = generate_random_number();
    int num2 = generate_random_number();
    int result = num1 / num2;
    printf("%d / %d = %d\n", num1, num2, result);
}

/* This function represents a complex expression that combines multiple simple expressions */
void expression_4() {
    printf("Complex expression: ");
    expression_1();
    expression_2();
    expression_3();
}

/* This function represents a complex expression that includes parentheses */
void expression_5() {
    int num1 = generate_random_number();
    int num2 = generate_random_number();
    int num3 = generate_random_number();
    int result = (num1 + num2) * num3;
    printf("(%d + %d) * %d = %d\n", num1, num2, num3, result);
}

/* This function represents a complex expression that includes nested parentheses */
void expression_6() {
    printf("Complex expression with nested parentheses: ");
    expression_5();
    printf("+ ");
    expression_1();
}

/* This main function will generate a sample program with 6 expressions */
int main() {
    printf("Generating a sample program:\n");
    yyparse();
    return 0;
}