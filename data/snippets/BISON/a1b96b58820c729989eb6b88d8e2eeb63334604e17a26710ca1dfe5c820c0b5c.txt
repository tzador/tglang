%code top {int num_variables = 0;} // creating a global variable to keep track of number of variables

/* defining grammar rules using regular expressions */
var_decl: 'int' ID '=' INTEGER ';' {num_variables++;} // rule for declaring an integer variable with initial value
         | 'int' ID ';' {num_variables++;} // rule for declaring an integer variable without initial value
         | 'float' ID '=' FLOAT ';' {num_variables++;} // rule for declaring a float variable with initial value
         | 'float' ID ';' {num_variables++;} // rule for declaring a float variable without initial value
         | 'string' ID '=' STRING ';' {num_variables++;} // rule for declaring a string variable with initial value
         | 'string' ID ';' {num_variables++;} // rule for declaring a string variable without initial value
         | 'bool' ID '=' BOOL ';' {num_variables++;} // rule for declaring a boolean variable with initial value
         | 'bool' ID ';' {num_variables++;} // rule for declaring a boolean variable without initial value

var_list: /* empty */ // starting rule for variable list
        | var_list var_decl // rule for adding multiple variable declarations to the list

%%

int main() {
  /* BISON will automatically generate code to parse the input and call the corresponding actions based on the grammar rules defined above */
  /* actions can also manipulate the global variable num_variables to keep track of the declared variables */
  /* more code can be added to the actions section to handle the declared variables in the desired manner */
  /* output code can also be added to generate specific outputs based on the variables declared */
  return 0;
}