%{
  /* This is a C code segment, used to import necessary libraries */
  #include <stdio.h>
  #include <stdlib.h>
%}

/* Declare tokens used in lexer */
%token INT REAL STRING

/* Define grammar rules */
%%

program:
  /* Uses recursion to define multiple statments in program */
  program statement
  | statement
  ;

statement:
  /* Defines a simple assignment statement */
  identifier '=' expression ';' 
  | 'if' '(' condition ')' '{' statement '}' 
  | 'if' '(' condition ')' '{' statement '}' 'else' '{' statement '}'
  | 'for' '(' statement ';' condition ';' statement ')' '{' statement '}'
  | 'while' '(' condition ')' '{' statement '}'
  ;

identifier:
  /* Regex for valid identifier names */
  [a-zA-Z][a-zA-Z0-9]* 
  ;

expression:
  /* Handles arithmetic expressions */
  expression '+' expression
  | expression '-' expression
  | expression '*' expression
  | expression '/' expression
  | '(' expression ')'
  | identifier
  | number
  ;

condition:
  /* Defines a basic boolean expression */
  expression '<' expression
  | expression '>' expression
  | expression '<=' expression
  | expression '>=' expression
  | expression '==' expression
  | expression '!=' expression
  ;

number:
  /* Defines a number token, can be either int or real */
  INT
  | REAL
  ;

%%

int main(void) {
  /* Initialize lexer and parser */
  yylex_init();
  yyset_in(stdin);
  yyparse();

  /* Print output based on parsed input */
  if (output) {
    if (isValid) {
      printf("Valid program.");
    } else {
      printf("Invalid program.");
    }
  } else {
    printf("No output.");
  }

  return 0;
}