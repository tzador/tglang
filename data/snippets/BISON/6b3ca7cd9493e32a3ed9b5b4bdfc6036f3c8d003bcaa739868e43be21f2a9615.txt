%{
// This code section is used to declare global variables and any necessary C code
int count = 0; // declaring and initializing a variable 'count'
%}

%start prog // this keyword defines the start symbol of the grammar

%%
prog: stmt_list ';' { // defining the rule for 'prog' non-terminal
    printf("The total number of statements in the program is %d\n", count);
}
;

stmt_list: stmt       { // defining the rule for 'stmt_list' non-terminal
    count++; // incrementing the 'count' variable for each statement
}
| stmt_list stmt      { // defining the rule for 'stmt_list' non-terminal with recursion
    count++; // incrementing the 'count' variable for each statement
}
;

stmt: ID '=' NUM       { // defining the rule for 'stmt' non-terminal
    // this code section will be executed when a statement of form 'ID = NUM' is encountered
    printf("Assigning '%d' to variable '%s'\n", $3, $1);
}
| 'if' '(' EXP ')' stmt  { // defining the rule for 'stmt' non-terminal with conditional statement
    // this code section will be executed when a statement of form 'if (EXP) stmt' is encountered
    printf("The if statement is encountered with the expression '%s'\n", $3);
}
| 'for' '(' EXP ';' EXP ';' EXP ')' stmt  { // defining the rule for 'stmt' non-terminal with for loop
    // this code section will be executed when a statement of form 'for (EXP; EXP; EXP) stmt' is encountered
    printf("Executing for loop with initial expression '%s', condition expression '%s' and increment expression '%s'\n", $3, $5, $7);
}
| 'while' '(' EXP ')' stmt  { // defining the rule for 'stmt' non-terminal with while loop
    // this code section will be executed when a statement of form 'while (EXP) stmt' is encountered
    printf("Executing while loop with condition expression '%s'\n", $3);
}
;

EXP: '(' EXP ')'       { // defining the rule for 'EXP' non-terminal with parentheses
    // this code section will be executed when an expression in parentheses is encountered
    printf("Encountered nested expression\n");
}
| EXP 'AND' EXP       { // defining the rule for 'EXP' non-terminal with 'AND' operator
    // this code section will be executed when an expression with 'AND' operator is encountered
    printf("Performing logical AND operation on expressions '%s' and '%s'\n", $1, $3);
}
| EXP 'OR' EXP       { // defining the rule for 'EXP' non-terminal with 'OR' operator
    // this code section will be executed when an expression with 'OR' operator is encountered
    printf("Performing logical OR operation on expressions '%s' and '%s'\n", $1, $3);
}
;

ID: [a-zA-Z]+       { // defining the rule for 'ID' non-terminal with regex
    // this code section will be executed when an identifier is encountered
    printf("Encountered identifier '%s'\n", $1);
}

NUM: [0-9]+       { // defining the rule for 'NUM' non-terminal with regex
    // this code section will be executed when a number is encountered
    printf("Encountered number '%s'\n", $1);
}
%%