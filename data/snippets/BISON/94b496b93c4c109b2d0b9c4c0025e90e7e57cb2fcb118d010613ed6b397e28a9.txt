%{
# Defines a start rule for the parser
%start program 

# Defines the token types to be used in parsing
%token <int_val> INTEGER
%token <str_val> STRING
%token <identifier> ID
%token <file> FILE

# Defines the grammatical structure for a program
program: FILE ID '{' block '}' ;

# Defines the grammatical structure for a block of code
block: statement_list ;

# Defines the grammatical structure for a list of statements
statement_list: statement
                |  statement_list statement ;

# Defines the grammatical structure for a single statement
statement: variable_declaration
                | assignment_statement 
                | function_call ;

# Defines the grammatical structure for declaring variables
variable_declaration: ID ':' type ';' ;

# Defines the grammatical structure for an assignment statement
assignment_statement: ID '=' expression ';' ;

# Defines the grammatical structure for a function call
function_call: ID '(' args ')' ';' ;

# Defines the grammatical structure for function arguments
args: expression 
        | args ',' expression ;

# Defines the grammatical structure for an expression
expression: term
            | expression '+' term ;
            
# Defines the grammatical structure for a term
term: factor
      | term '*' factor ;
      
# Defines the grammatical structure for a factor
factor: INTEGER 
        | STRING
        | ID 
        | '(' expression ')' ;

# Defines the token types for different data types
%type <int_val> INTEGER 
%type <str_val> STRING
%type <identifier> ID ;
        
# Defines the rules for parsing an integer value
INTEGER: /[0-9]+/ ;
        
# Defines the rules for parsing a string value
STRING: /"[a-zA-Z0-9 ]*"/ ;
        
# Defines the rules for parsing an identifier
ID: /[a-zA-Z_]+[a-zA-Z0-9_]*/ ;
        
# Ignoring any whitespace characters
%ignore " " ;        
%ignore "\t" ;        
%ignore "\n" ;
        
%}


%%

# Parses the input file and returns the result
program: ;
%%

# Defines the function for parsing a program
int main(int argc, char** argv) {
    FILE *fp = fopen(argv[1], 'r');
    
    # Initializes the parser
    yyparse();
    
    # Closes the input file
    fclose(fp);
    
    return 0;
}

# Defines the function for handling syntax errors
void yyerror(char *s) {
    printf("Syntax error - %s\n",s);
}

# Defines the function for printing out a program
void print_program() {
    printf("This is a program!\n");
}