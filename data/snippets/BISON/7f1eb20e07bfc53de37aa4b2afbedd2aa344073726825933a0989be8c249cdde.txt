%token NUMBER         // Declare token for numbers
%token IDENTIFIER     // Declare token for identifiers
%token PLUS, MINUS    // Declare tokens for + and -
%token MULTIPLY       // Declare token for *

%%
// Define grammar rules
expression: NUMBER         // Expression can start with a number
          | IDENTIFIER     // or with an identifier
          | expression PLUS expression   // Expression can also have addition
          | expression MINUS expression  // or subtraction
          | expression MULTIPLY expression  // or multiplication
          | '(' expression ')'  // Expressions can also be wrapped in parentheses

// Define how numbers and identifiers are parsed
NUMBER: /[0-9]+/ ;
IDENTIFIER: /[a-zA-Z]+/ ;

// Define operator precedence
%left PLUS MINUS
%left MULTIPLY  // Addition and subtraction have higher precedence than multiplication

// Define what to do when reducing each expression
%%

// Function to handle when expression starts with a number
expression:
    { $$ = $1; }             // Set the value of $$ to be the number passed in

// Function to handle when expression starts with an identifier
expression:
    { $$ = $1; }             // Set the value of $$ to be the identifier passed in

// Function to handle addition and subtraction
expression:
    { $$ = $1 + $2; }       // Add or subtract the two expressions passed in

// Function to handle multiplication
expression:
    { $$ = $1 * $2; }       // Multiply the two expressions passed in

// Function to handle expressions wrapped in parentheses
expression:
    { $$ = $2; }            // $$ will be the value of the expression without parentheses
                           // $2 represents the expression between the parentheses