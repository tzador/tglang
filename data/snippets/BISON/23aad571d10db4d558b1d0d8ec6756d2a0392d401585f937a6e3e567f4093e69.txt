%token<val> NUM
%token<name> IDENT

// using Bison's built-in type declarations
%type <val> exp
%type <name> var_decl

%%

exp: NUM { $$ = $1; } // production rule for a numerical expression, sets $$ (output) to the value of $1 (input)
    | var_decl { $$ = $1; } // production rule for a variable declaration, sets $$ (output) to the name of the declared variable

var_decl: "var" IDENT "=" NUM ";" // declares a variable with the given name and assigns it the value of the given number

%%

int main() {
    yyscan_t scanner;
    yylex_init(&scanner); // sets up the scanner
    yyset_in(stdin, scanner); // sets the input to be read from standard input
    yyparse(scanner); // starts parsing the input using the provided scanner
    yylex_destroy(scanner); // cleans up the scanner
    return 0;
}