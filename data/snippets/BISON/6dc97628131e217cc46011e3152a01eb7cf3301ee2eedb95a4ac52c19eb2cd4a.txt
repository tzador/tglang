%{
/* C code section */
#include <stdio.h>
#include <stdlib.h>

/* global variables */
int counter = 0;
int total = 0;
extern int yylex();

/* function declarations */
void yyerror(char *);

%}

/* BISON grammar section */
%%
start:       expr          { printf("%d\n", $1); }
expr:        expr '+' term  { $$ = $1 + $3; }
            | expr '-' term  { $$ = $1 - $3; }
            | expr '*' term  { $$ = $1 * $3; }
            | term           { $$ = $1; }
term:        NUMBER         { $$ = $1; }
%%

/*** Description: This BISON code snippet is a basic calculator that can take arithmetic expressions and calculate the result. It uses the start rule to start the evaluation, the expr rule to define expressions, and the term rule to define a term as a number. The code uses C code section along with global variables, function declarations and external calls to yylex. The grammar rules are defined using the syntax 'LHS: RHS', where LHS is the left-hand side of the rule and RHS is the right-hand side. The $$ and $1, $2, $3 notation is used to represent the result of the grammar rule.***/
 
%{
#include <stdio.h>
#include <stdlib.h>

int counter = 0; /* counter variable initialized to 0 */
int total = 0; /* total variable initialized to 0 */
extern int yylex(); /* call to external function yylex */
void yyerror(char *); /* function declaration for yyerror */
%}

/* BISON grammar section */
%%
start: expr { //start rule takes an expr as input
    printf("%d\n", $1); /* print the result of expr */
}

expr: expr '+' term { //expr rule takes 3 inputs: expr '+' term
    $$ = $1 + $3; /* assign result of expr + term to $$ */
} 
| expr '-' term { //expr rule takes 3 inputs: expr '-' term
    $$ = $1 - $3; /* assign result of expr - term to $$ */
}
| expr '*' term { //expr rule takes 3 inputs: expr '*' term
    $$ = $1 * $3; /* assign result of expr * term to $$ */
}
| term { //expr rule takes 1 input: term
    $$ = $1; /* assign result of term to $$ */
}

term: NUMBER { //term rule takes 1 input: a number
    $$ = $1; /* assign the number to $$ */
}
%%