// Declare a BISON grammar for a simple calculator that performs arithmetic operations

%token NUMBER
%token ADD
%token SUBTRACT
%token MULTIPLY
%token DIVIDE

%%
// Define the start symbol as "exp"
exp: NUMBER
    | exp ADD exp
    | exp SUBTRACT exp
    | exp MULTIPLY exp
    | exp DIVIDE exp
    ;

%%

// Specify the operator associativity and precedence rules
// Higher number indicates higher precedence
%left ADD SUBTRACT
%left MULTIPLY DIVIDE

// Define the actions for each rule to perform the appropriate operation and return the result
exp: NUMBER { $$ = $1; }
    | exp ADD exp { $$ = $1 + $3; }
    | exp SUBTRACT exp { $$ = $1 - $3; }
    | exp MULTIPLY exp { $$ = $1 * $3; }
    | exp DIVIDE exp { $$ = $1 / $3; }
    ;

// Define the starting rule and the end of file character
%start exp
%end-of-file "\n"

// Define the error rule to handle invalid input
%error-verbose
%%
// Output the PARSE ERROR if an invalid input is encountered
int main(int argc, char* argv[]) {
    if (yyparse()) {
        fprintf(stderr, "PARSE ERROR\n");
        return 1;
    }
    return 0;
}