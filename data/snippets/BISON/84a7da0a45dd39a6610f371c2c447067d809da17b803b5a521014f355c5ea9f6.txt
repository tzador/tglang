/* A simple Bison program to tokenize a sentence and check if it is a palindrome */

%{
    #include <stdio.h>
    #include <string.h>
    #define MAX_LEN 100
    int isPalindrome(char* str);

    /* Define a datatype to store the token and its type */
    typedef struct {
        char* str;
        int type;
    } Token;

    /* Define constants to represent token types */
    %}

%token WORD
%token PUNCT

%%
/* Rules for tokenization and palindromicity check */
sentence: {Token t;}
WORD {t.str = yytext; t.type = WORD;} PUNCT {t.str = yytext; t.type = PUNCT;}
;
    
/* Function to check if a string is a palindrome */
isPalindrome(char* str) {
    int len = strlen(str);
    for(int i=0; i<len/2; i++) {
        if(str[i] != str[len-i-1]) {
            return 0;
        }
    }
    return 1;
}

/* Main function to tokenize and check if sentence is a palindrome */
int main() {
    char str[MAX_LEN];
    
    /* Get input from user */
    printf("Enter a sentence: ");
    scanf("%s", str);

    /* Tokenizing the sentence using Bison */
    yylex();
    
    /* Checking if the tokenized sentence is a palindrome */
    if(isPalindrome(str) == 1) {
        printf("The sentence is a palindrome");
    }
    else {
        printf("The sentence is not a palindrome");
    }
    return 0;
}
%%
/* Function to return the next token or end of file */
yylex() {
    Token token;
    char* str;
    
    /* Read input from user one character at a time */
    char ch = getchar();

    /* Loop until end of file */
    while(ch != EOF) {
        if(ch == ' ') {
            /* Ignore if space character */
            ch = getchar();
        }
        else if(isalpha(ch)) {
            /* If character is alphabetic, tokenize as a word and return token */
            str = (char*)malloc(sizeof(char) * 100);
            int index = 0;
            while(isalpha(ch)) {
                /* Keep reading characters until non-alphabetic character is encountered */
                str[index++] = ch;
                ch = getchar();
            }
            str[index] = '\0';
            token.str = str;
            token.type = WORD;
            return token;
        }
        else {
            /* If character is not alphabetic, tokenize as a punctuation and return token */
            str = (char*)malloc(sizeof(char));
            str[0] = ch;
            token.str = str;
            token.type = PUNCT;
            ch = getchar();
            return token;
        }
    }
    /* Return null token at end of file */
    token.type = 0;
    return token;
}