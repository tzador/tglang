%start grammar /* Defines the starting rule for the grammar */
%token NUM INT /* Defines the tokens as NUM and INT */
%left '+' '-' /* Defines the operator precedence, left associative */
%left '*' '/' /* Defines the operator precedence, left associative */

%% /* Begin grammar rules */

grammar:
    expr '\n' { printf("%d\n", $1); }; /* Top level rule, prints the result of expression */

expr:
    expr '+' expr { $$ = $1 + $3; } /* Adds two expressions together */
    | expr '-' expr { $$ = $1 - $3; } /* Subtracts two expressions */
    | expr '*' expr { $$ = $1 * $3; } /* Multiplies two expressions */
    | expr '/' expr { $$ = $1 / $3; } /* Divides two expressions */
    | '(' expr ')' { $$ = $2; } /* Handles parenthesis in expressions */
    | NUM { $$ = $1; } /* Number token */
    | INT { $$ = $1; } /* Integer token */

%% /* End grammar rules */