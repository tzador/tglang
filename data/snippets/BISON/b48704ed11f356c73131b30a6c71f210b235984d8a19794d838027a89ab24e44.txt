%token DIGIT       /*Define DIGIT token*/
%token LETTER      /*Define LETTER token*/

/*Define integer and string non-terminals*/
%type <integer> int 
%type <string> str 

/*Define grammar rules*/
exp: int EXP str 
    {$$ = $1 * $3;}; /*Multiplies the integer and string tokens*/

int: DIGIT        /*Integer production rule*/ 
    {$$ = $1;}    

str: LETTER      /*String production rule*/ 
    {$$ = $1;}    

/*Define rules to handle floating point numbers*/
digits: DIGIT { $$ = $1; } 
    | digits DIGIT /*Recursively handle multiple digits*/
        {$$ = 10 * $1 + $2;};

fraction: '.' digits 
        {$$ = $2 / pow(10, length_of_string($2));} /*Convert the digits to float*/

exp: digits fraction {$$ = $1 + $2;}