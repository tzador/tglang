/* Define start symbol and non-terminal symbols */
%start Statement_Expr
%token <int> INT
%token <float> FLOAT
%token <identifier> ID
%token <string> STRING
%type <float> Expr

/* Define rules for expressions */
Expr: Expr '+' Expr { $$ = $1 + $3; }
    | Expr '-' Expr { $$ = $1 - $3; }
    | Expr '*' Expr { $$ = $1 * $3; }
    | Expr '/' Expr { $$ = $1 / $3; }
    | INT           { $$ = (float)$1; }
    | FLOAT         { $$ = $1; }
    | STRING        { $$ = atof($1); } /* Convert string to float */
    | '(' Expr ')' { $$ = $2; } /* Evaluate expression in parentheses */

/* Define rules for statements */
Statement_Expr: Expr ';' { printf("The result is: %f\n", $1); }
              | ID '=' Expr ';' { /* Assign value of expression to variable */ }
              | 'if' '(' Expr ')' Statement_Expr { /* Conditional statement */ }
              | 'while' '(' Expr ')' Statement_Expr { /* Loop statement */ }
              | 'for' '(' Expr ';' Expr ';' Expr ')' Statement_Expr { /* For loop statement */ }
              | 'print' Expr ';' { printf("%f", $2); } /* Print statement */

%%

/* C code section */
#include <stdio.h>
#include <stdlib.h>

/* Define tokens and identifiers */
%token INT
%token FLOAT
%token ID
%token STRING

/* Define function to handle syntax errors */
void yyerror(const char *msg) { printf("%s", msg); }

/* Define main function */
int main(int argc, char **argv) {
    /* Parse input using Bison-generated parser */
    yyparse();

    return 0;
}