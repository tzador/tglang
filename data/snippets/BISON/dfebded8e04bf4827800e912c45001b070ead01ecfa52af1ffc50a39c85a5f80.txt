/* example bison grammar file */

/* start rule */
%start program

/* declarations section */
%{
	#include <stdio.h>
	int num_variables = 0;
%}

/* token definitions */
DIGIT			[0-9]
LETTER			[a-zA-Z]
ID				{LETTER}({LETTER}|{DIGIT})*

/* rules */
program			: declaration_list function_list {
					printf("Number of variables declared: %d\n", num_variables);
				}
				;

declaration_list: declaration_list declaration
				| declaration
				;
				
declaration		: type ID {
					num_variables++;
				}
				;
				
type			: "int"
				| "float"
				| "char"
				;
				
function_list	: function_list function
				| function
				;

function		: type ID "(" parameters ")" "{" statement_list "}"
				;
				
parameters		: parameters "," declaration
				| declaration
				;
				
statement_list	: statement_list statement
				| statement
				;
				
statement		: ID "=" expression ";"
				| "if" "(" condition ")" "{" statement_list "}" "else" "{" statement_list "}"
				| "while" "(" condition ")" "{" statement_list "}"
				| "for" "(" assignment ";" condition ";" assignment ")" "{" statement_list "}"
				;

condition		: expression "==" expression
				| expression "<" expression
				| expression ">" expression
				;

assignment		: ID "=" expression
				;

expression		: expression "+" term
				| expression "-" term
				| term
				;
				
term			: term "*" factor
				| term "/" factor
				| factor
				;
				
factor			: ID
				| NUM 
				| "(" expression ")"
				;
				
%%

/* code included at the end of parser file */
int yywrap()
{
	return 1;
}