%{
#This is a code snippet written in the BISON programming language. This language is used as a parser generator, allowing the creation of parsers for various programming languages.
#In this snippet, we define a BISON grammar that parses mathematical expressions and converts them into postfix notation.

/*start symbol*/
%start expression

/*header declarations*/
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/*stack to store operators*/
char operators[20];

/*postfix expression stack*/
double numbers[20];

/*top index of the stacks*/
int opTop = -1;
int numTop = -1;

/*function to push elements onto the operator stack*/
void pushOperator(char op){
  operators[++opTop] = op;
}

/*function to push elements onto the postfix stack*/
void pushNum(double num){
  numbers[++numTop] = num;
}

/*function to pop element from the operator stack*/
char popOperator(){
  return operators[opTop--];
}

/*function to pop element from the postfix stack*/
double popNum(){
  return numbers[numTop--];
}

/*function to perform mathematical operation*/
double doOperation(double op1, double op2, char op){
  switch(op){
    case '+':
      return op1 + op2;
    case '-':
      return op1 - op2;
    case '*':
      return op1 * op2;
    case '/':
      return op1 / op2;
    case '^':
      return pow(op1,op2);
    default:
      return 0;
  }
} %}

/*rules for the grammar*/
expression: number
| expression expression '+' {pushOperator('+');}     /*rule for addition*/
| expression expression '-' {pushOperator('-');}     /*rule for subtraction*/
| expression expression '*' {pushOperator('*');}     /*rule for multiplication*/
| expression expression '/' {pushOperator('/');}     /*rule for division*/
| expression expression '^' {pushOperator('^');}     /*rule for exponentiation*/
;

number: NUM {pushNum($1);}     /*converts number to postfix*/

%%

int main(){
  /*input mathematical expression*/
  char expr[100];
  printf("Enter a mathematical expression: ");
  scanf("%s", expr);

  /*parse the expression*/
  yyin = fopen(expr, "r");
  yyparse();

  /*evaluate the postfix expression*/
  double result;
  while(opTop >= 0){
    double op2 = popNum();     /*top operand*/
    double op1 = popNum();     /*next operand*/
    char op = popOperator();     /*operator*/
    result = doOperation(op1,op2,op);     /*perform operation*/
    pushNum(result);     /*push result onto postfix stack*/
  }

  /*print result*/
  printf("Result = %.2f\n", result);
  return 0;
}