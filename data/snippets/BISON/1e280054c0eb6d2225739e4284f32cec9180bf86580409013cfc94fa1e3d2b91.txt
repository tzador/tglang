/* Analyzing mathematical expressions */

%token <num> INTEGER	/* hand-written lexical tokens */
%token <num> DOUBLE

%token		PLUS		/* terminals */
%token		MINUS
%token		TIMES
%token		DIVIDE
%token		UMINUS
	
%left		PLUS MINUS	/* operator precedence */
%left		TIMES DIVIDE
%left		UMINUS

%nonassoc	UMINUS		/* types for unary operators */

%%
expression: INTEGER 
                { $$ = $1; }	/* rule for single numbers */
          | DOUBLE
                { $$ = $1; }	/* also handle real numbers */
          | MINUS expression %prec UMINUS 
         				/* unary minus */
                { $$ = -$2; }
          | expression PLUS expression	
                { $$ = $1 + $3; }
          | expression MINUS expression	
                { $$ = $1 - $3; }
          | expression TIMES expression	
                { $$ = $1 * $3; }
          | expression DIVIDE expression
                { $$ = $1 / $3; }
          | '(' expression ')'	
                { $$ = $2; }
	  ;
%%