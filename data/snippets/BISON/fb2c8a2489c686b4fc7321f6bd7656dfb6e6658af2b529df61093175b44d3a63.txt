/*  BISON grammar for a simple programming language  */
 
%{
/*  Header section with declarations and include files  */
#include "stdio.h"
 
/*  User-defined data types  */
%}
 
/*  Token definitions  */
%token<tokenType> INTCONST REALCONST STRCONST ID
 
/*  Operator and punctuator symbols  */
%union{
  int intVal;
  float realVal;
  char* stringVal;
  char opSymbol;
};
 
/*  Non-terminals and grammar rules  */
%start program
%type<tokenType> program
%%

program : statementList
        {
	   /*  Code to execute after parsing has completed  */
	   printf("Program successfully parsed.\n");
        };
 
/*  List of statements  */
statementList : statement '\n' statementList
              | statement
              | /* empty rule */
              ;
 
statement: declarationStatement
         | exitStatement
         | expressionStatement
         | controlStatement
         ;
 
/*  Declaration statement  */
declarationStatement : TYPE ID '=' expr ;

exitStatement : EXIT ;
 
/*  Expression statement  */
expressionStatement : expr ;
 
/*  Control statement  */
controlStatement : IF '(' expr ')' '{' statementList '}' %prec IFX
                 | IF '(' expr ')' '{' statementList '}' ELSE '{' statementList '}'
                 | WHILE '(' expr ')' '{' statementList '}'
                 | FOR '(' assignment ';' expr ';' assignment ')' '{' statementList '}'
                 ;

/*  Expression rules  */
expr : INTCONST
     | REALCONST
     | STRCONST
     | ID
     | expr opSymbol expr
     | '-' expr %prec UMINUS
     | '(' expr ')'
     | '++' ID
     | ID '++'
     | '--' ID
     | ID '--'
     | '-' ID
     ;
     
/*  Assignment statement  */
assignment : ID '=' expr ;

/*  Tokens with values  */
%%
 
/*  Code to execute before parsing begins  */
void yyerror(const char* s) {
   fprintf(stderr, "%s\n", s);
}
 
/*  Code to execute when a token is matched  */
int yywrap() {
   return 1;
}
 
/*  Main function to call the parser  */
int main(int argc, char** argv) {
   /*  Call to yyparse() to start parsing  */
   return yyparse();
}
 
/*  Definitions for user-defined data types, if any  */
typedef enum {
   INT,
   REAL,
   STRING
} tokenType;