%{
/* This is a Bison grammar file, it is used to generate parsers */
/* This is a block of C/C++ code that will be copied verbatim into the generated parser */
#include <stdlib.h>
#include <stdio.h>
/* Define global variables and functions here */
extern int yylex();
extern int yyerror();
%}

/* Declarations section */
/* Define all non-terminal symbols here */

%token <int> NUM /* Define a token for a number */

%type <int> expression /* Define a type for the expression non-terminal symbol */

/* Start symbol declaration */
%start program

/* Rules section */
/* Define the grammar rules for the language */

program: expression { /* Actions to perform when the program rule is matched */
   printf("Result: %d\n", $1); /* Print the result of the evaluated expression */
}
;

expression: NUM { /* Action to perform when a number is matched */
   $$ = $1; /* Set the result of the expression to be the matched number */
}
| expression '+' expression { /* Action to perform when an addition operation is matched */
   $$ = $1 + $3; /* Set the result of the expression to be the sum of the two expressions */
}
| expression '-' expression { /* Action to perform when a subtraction operation is matched */
   $$ = $1 - $3; /* Set the result of the expression to be the difference of the two expressions */
}
;

%%

/* The code below is executed after the rules section and is used to define additional functions */

/* Function to handle lexical errors */
int yyerror() {
   printf("Lexical error occurred\n");
   return 0;
}

/* Main function to initialize the parser */
int main() {
   /* Prompt user for input */
   printf("Enter an expression: ");
   /* Call the parser */
   yyparse();
   return 0;
}