%{
/* This is a BISON code snippet to parse a simple arithmetic expression
   This code uses basic BISON syntax to create grammar rules and actions to
   evaluate the expression and return a result */
%}

/* The following code defines the token names and their corresponding regular expressions */
%token NUMBER
%token PLUS              "+"
%token MINUS             "-"
%token TIMES             "*"
%token DIVIDE            "/"
%token LPAREN            "("
%token RPAREN            ")"

/* Defines the start symbol */
%start expression

%% /* The following code contains the rules and actions for the grammar */

/* This rule defines the overall expression and calls the 'eval' action to perform the evaluation */
expression: expression PLUS term { $$ = eval($1, "+", $3); }
          | expression MINUS term { $$ = eval($1, "-", $3); }
          | term { $$ = $1; }

/* This rule defines the term and calls the 'eval' action to perform the evaluation */
term: term TIMES factor { $$ = eval($1, "*", $3); }
    | term DIVIDE factor { $$ = eval($1, "/", $3); }
    | factor { $$ = $1; }

/* This rule defines the factor and handles the parentheses */
factor: NUMBER { $$ = $1; }
      | LPAREN expression RPAREN { $$ = $2; }

%% /* The following code defines the actions used to evaluate the expression */

/* This action evaluates the expression based on the operator and operands */
eval(a, op, b) {
    if (op == "+") {
        $$ = a + b;
    } else if (op == "-") {
        $$ = a - b;
    } else if (op == "*") {
        $$ = a * b;
    } else if (op == "/") {
        $$ = a / b;
    }
}