%{
    /* %code provided by user */
    #include <stdio.h>
    #define MAX 100
    char stack[MAX];
    int top = -1;
%}

%token NUMBER

%%

print_statement: "PRINT" NUMBER { 
    // Get number from the input and push it onto the stack
    printf("%d\n", $2);
    stack[++top] = $2;
};

addition: NUMBER "+" NUMBER {
    // Perform addition operation and push the result onto the stack
    int result = $1 + $3;
    printf("%d + %d = %d\n", $1, $3, result);
    stack[++top] = result;
};

subtraction: NUMBER "-" NUMBER {
    // Perform subtraction operation and push the result onto the stack
    int result = $1 - $3;
    printf("%d - %d = %d\n", $1, $3, result);
    stack[++top] = result;
};

multiplication: NUMBER "*" NUMBER {
    // Perform multiplication operation and push the result onto the stack
    int result = $1 * $3;
    printf("%d * %d = %d\n", $1, $3, result);
    stack[++top] = result;
};

division: NUMBER "/" NUMBER {
    // Perform division operation and push the result onto the stack
    int result = $1 / $3;
    printf("%d / %d = %d\n", $1, $3, result);
    stack[++top] = result;
};

%%

int main() {
    /* %code provided by user */
    /* Loop through input and perform operations */
    printf("Enter an operation (PRINT, +, -, *, /) and a number: ");
    yylex();
    printf("Result: %d\n", stack[top]);

    return 0;
} 

%%

// Function to handle errors during parsing
void yyerror(char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}

// Function to get next token from input
int yylex(void) {
    /* %code provided by user */
    /* Implementation of lexer goes here */
}