/* BISON code snippet to create a grammar for a simple calculator */

/* Define the tokens for each operator and number */

%token NUMBER
%token PLUS
%token MINUS
%token MULTIPLY

/* Define non-terminal symbols for expressions and statements */

%left PLUS MINUS          /* Define left-associative operators */
%left MULTIPLY           /* Define higher precedence for multiplication */

expr: NUMBER              /* Expression can be just a number */
    | expr PLUS expr      /* Or it can be an expression plus another expression */
    | expr MINUS expr     /* Or it can be an expression minus another expression */
    | expr MULTIPLY expr  /* Or it can be an expression multiplied by another expression */
    ;

stmt: expr ";"            /* A statement can just be an expression followed by semicolon */
    | "print" expr ";"    /* Or it can be the keyword "print" followed by an expression and a semicolon */
    ;

%% /* Code and actions for evaluating the expressions and statements */
 
/* Function to evaluate an expression */
int eval_expr(int expr1, char operator, int expr2){
    switch(operator){        /* Switch case based on operator */
        case '+': return expr1 + expr2;
        case '-': return expr1 - expr2;
        case '*': return expr1 * expr2;
    }
}

/* Function to print the result of a statement */
void print_stmt(int result){
    printf("The result is %d\n", result);
}