%{
    /* This code section is used for defining input and output mode */
    #define YY_NO_INPUT 1
    #define YY_NO_OUTPUT 2
%}

%union {
    /* This section defines the different types of data that can be used in the language */
    int int_val;
    float float_val;
    char *string_val;
    /* Add more data types here based on the needs of the programming language */
}

/* Define the tokens and their associated data types */

%token <int_val> INTEGER
%token <float_val> FLOAT
%token <string_val> STRING
%token PLUS MINUS TIMES DIVIDE EQUALS

/* Define the precedence and associativity of operators */
%left '+' '-'
%left '*' '/'


%%

/* Define the grammar rules for the language */

program:
    statement_list
    /* Add more rules here based on the needs of the programming language */

statement_list:
    statement
    | statement_list statement

statement:
    assignment_statement
    | declaration_statement
    | expression_statement


/* Define the different types of statements */

assignment_statement:
    VARIABLE EQUALS expression_statement
    | VARIABLE PLUS EQUALS expression_statement
    | VARIABLE MINUS EQUALS expression_statement
    | VARIABLE TIMES EQUALS expression_statement
    | VARIABLE DIVIDE EQUALS expression_statement

declaration_statement:
    TYPE variable_list


expression_statement:
    expression
    | empty

expression:
    term
    | expression PLUS term
    | expression MINUS term


term:
    factor
    | term TIMES factor
    | term DIVIDE factor

factor:
    INTEGER
    | FLOAT
    | STRING
    | VARIABLE

variable_list:
    VARIABLE
    | variable_list ',' VARIABLE

empty:
    /* Used for empty statements */

%%

/* Code section for the lexer */
/* Define regular expressions for different tokens */
INTEGER [0-9]+
FLOAT [0-9]+\.[0-9]+
STRING "[A-Za-z0-9 ]+"
VARIABLE [A-Za-z]+

%%
/* Code section for the parser */

int main(void){
    /* Initialize the lexer */
    yylex();
    return 0;
}