%start expression
%token NUMBER ADD SUBTRACT MULTIPLY DIVIDE
%%
//define a rule for an expression that can handle addition, subtraction, multiplication, and division
expression: NUMBER
| expression ADD NUMBER {$$ = $1 + $3;}
| expression SUBTRACT NUMBER {$$ = $1 - $3;}
| expression MULTIPLY NUMBER {$$ = $1 * $3;}
| expression DIVIDE NUMBER {$$ = $1 / $3;}
| expression ADD expression {$$ = $1 + $3;}
| expression SUBTRACT expression {$$ = $1 - $3;}
| expression MULTIPLY expression {$$ = $1 * $3;}
| expression DIVIDE expression {$$ = $1 / $3;}
;
%%
//customize the input and output methods
extern int yylex (void);
extern void yyerror (char *s);
extern int yyparse (void);
main ()
{
	yyparse ();
}
yyerror (char *s)
{
	fprintf (stderr, "%s\n", s);
}
//implement the input and output methods
int yylex (void)
{
	int c;
	//read a character from input
	c = getchar();
	//if the character is a digit, convert it to a number and return the token NUMBER
	if (c >= '0' && c <= '9')
	{
		yylval = c - '0';
		return (NUMBER);
	}
	//otherwise, return the actual character as the token
	return (c);
}