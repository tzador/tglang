%{
#include <stdio.h>

/* This is a simple BISON program that creates a parser
for a basic arithmetic expression */

int yylex(); /* Declaring yylex function */

int result; /* Global variable to store result of expression */

%}

%%

/* BISON rules */
expr: term '+' expr { result = $1 + $3; }
    | term '-' expr { result = $1 - $3; }
    | term '*' expr { result = $1 * $3; }
    | term '/' expr { result = $1 / $3; }
    | term           { result = $1; }
    ;

term: INTEGER { $$ = $1; } /* Term can only be an integer */

%%

/* BISON main function */
int main() {
    printf("Enter an arithmetic expression: ");
    yyparse(); /* Calling the parser */
    printf("Result: %d\n", result); /* Printing the result */
    return 0;
}

/* Flex yylex function */
int yylex() {
    int c = getchar();

    if(c == '+') /* Checking for addition operator */
        return '+';

    if(c == '-') /* Checking for subtraction operator */
        return '-';

    if(c == '*') /* Checking for multiplication operator */
        return '*';

    if(c == '/') /* Checking for division operator */
        return '/';

    if(isdigit(c)) { /* Checking for integer */
        ungetc(c, stdin); /* Put back character into input stream */
        scanf("%d", &yylval); /* Assign integer to yylval to be returned */
        return INTEGER;
    }

    return c; /* Return all other characters */
}