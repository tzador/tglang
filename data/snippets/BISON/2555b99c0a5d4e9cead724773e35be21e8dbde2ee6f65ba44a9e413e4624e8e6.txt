%token INT DOUBLE STRING # defines tokens for integers, doubles, and strings

%left '+' '-' # defines left associativity for the addition and subtraction operators

%% 

statement:
    expression { printf("Result: %d\n", $1); } # prints the result of the expression

expression:
    INT '+' INT { $$ = $1 + $3; } # performs addition operation on two integers
    | DOUBLE '-' DOUBLE { $$ = $1 - $3; } # performs subtraction operation on two doubles
    | STRING '+' STRING { printf("Concatenated String: %s\n", strcat($1, $3)); } # concatenates two strings and prints the result
    ;

%%

int main() {
    yyscan_t scanner; // declares scanner variable
    int token; // declares token variable
    yylex_init(&scanner); // initializes scanner
    while ((token = yylex(scanner)) != 0) { // loops until end of input
        yy_push_state(YYSTATE_NEW_STATE); // pushes new state onto the stack
        yypush_buffer_state(yy_create_buffer(yy_current_buffer(scanner), YY_BUF_SIZE, scanner)); // creates and pushes new buffer state onto the stack
        yy_switch_to_buffer(yy_scan_string("1 + 2", scanner)); // switches to new input buffer
        yyparse(); // parses the input
    }
    yylex_destroy(scanner); // destroys scanner
    return 0;
}