/* BISON code snippet */
%%

Program:
    Statements;

Statements:
    Statement
    | Statements Statement
    ;

Statement:
    Declaration
    | Assignment
    | Loop
    | Condition
    | FunctionCall
    ;

Declaration:
    Type Identifier SEMICOLON
    ;

Type:
    INTEGER
    | FLOAT
    | BOOLEAN
    | STRING
    ;

Assignment:
    Identifier ASSIGN Expression SEMICOLON
    ;

Loop:
    FOR LPAREN Identifier ASSIGN Expression SEMICOLON Condition SEMICOLON Assignment RPAREN Statements ENDFOR
    ;

Condition:
    IF LPAREN Expression RPAREN Statements ELSE Statements ENDIF
    ;

FunctionCall:
    Identifier LPAREN Arguments RPAREN SEMICOLON
    ;

Arguments:
    Expression
    | Arguments COMMA Expression
    ;

Expression:
    Number
    | Identifier
    | Expression PLUS Expression
    | Expression MINUS Expression
    | Expression MULTIPLY Expression
    | Expression DIVIDE Expression
    | LPAREN Expression RPAREN
    ;

Number:
    INTEGER_VALUE
    | FLOAT_VALUE
    | BOOLEAN_VALUE
    | STRING_VALUE
    ;

Identifier:
    LETTER
    | Identifier LETTER
    ;

LETTER:
    A | B | C | D | E | F | G | H | I | J | K | L | M |
    N | O | P | Q | R | S | T | U | V | W | X | Y | Z |
    a | b | c | d | e | f | g | h | i | j | k | l | m |
    n | o | p | q | r | s | t | u | v | w | x | y | z
    ;

INTEGER_VALUE:
    positive_int
    | negative_int
    ;

positive_int:
    digit
    | digit digit
    | digit positive_int
    ;

negative_int:
    MINUS digit
    | MINUS digit digit
    | MINUS digit negative_int
    ;

FLOAT_VALUE:
    positive_float
    | negative_float
    ;

positive_float:
    digit DOT positive_int
    ;

negative_float:
    MINUS positive_float
    ;

BOOLEAN_VALUE:
    TRUE
    | FALSE
    ;

STRING_VALUE:
    QUOTE string_sequence QUOTE
    ;

string_sequence:
    character
    | character non_escape_sequence
    | character string_sequence
    ;

non_escape_sequence:
    character
    | character char_escape_sequence
    ;

char_escape_sequence:
    BACKSLASH
    | ZERO
    | SINGLE_QUOTE
    | DOUBLE_QUOTE
    | NEWLINE
    | CARRIAGE_RETURN
    | TAB
    ;

character:
    ALL_CHARACTERS except_quote
    | SPACE
    ;

except_quote:
    ALL_CHARACTERS except_quote
    ;

%%

/* Example program */
DECLARE INTEGER x;
DECLARE FLOAT y;
x = 5;
y = 3.14;
FOR (i = 0; i < x; i = i + 1)
IF (y >= 3)
PRINT "Hello World!";
ELSE
PRINT "Hi!";
ENDIF

PRINT sum(1, 2);

sum(x, y) {
RETURN x + y;
}

/* END Example program */