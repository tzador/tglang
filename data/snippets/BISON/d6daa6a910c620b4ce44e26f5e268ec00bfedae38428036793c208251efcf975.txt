/* This BISON code snippet generates a parser for a Simple Math Language */

%token NUM         /* define number token */

/* define the grammar rules */
%%
program: statement_list
        | /* empty program */

statement_list: statement
            | statement_list statement
            ;

statement: expression     { printf("Result is %d\n", $1); }
        ;

expression: expression '+' term   { $$ = $1 + $3; }
          | expression '-' term   { $$ = $1 - $3; } 
          | term
          ;

term: term '*' factor   { $$ = $1 * $3; }
    | term '/' factor   { $$ = $1 / $3; }
    | factor
    ;

factor: '(' expression ')'        { $$ = $2; }
      | NUM                        { $$ = $1; }
      ;

%%

/* function to handle lexical errors */
func yyerror(msg : char*) {
  fprintf(stderr, "Error: %s \n", msg);
}

/* main method to generate the parser */
int main() {
  yyparse(); /* generate parser */
  return 0;
}