%{
/* The start delimiter for our grammar */
%start prog

/* Define tokens for operators, integers, and identifiers */
%token INT
%token OP
%token ID

/* Define the associativity of operators */
%right '='
%left '+' '-'
%nonassoc '*'

/* Define the precedence of operators */
%precedence '='
%precedence '+' '-'
%precedence '*'

/* Define our grammar rules */
%%

/* A program consists of multiple expressions separated by ';'
   and ends with a '$' */
prog: expr ';' %prec '=' prog | '$';

/* An expression can be an assignment, binary operation, or an
   integer */
expr: assign | binop | INT;

/* An assignment consists of an identifier, followed by '=', followed
   by another expression */
assign: ID '=' expr;

/* A binary operation consists of two expressions with an operator
   in between */
binop: expr OP expr;
%%