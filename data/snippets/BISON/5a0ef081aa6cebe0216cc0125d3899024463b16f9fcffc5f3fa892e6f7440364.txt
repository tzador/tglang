%{
#include<stdio.h>
#include<stdlib.h>
%}

%token ID NUM

%%

prog :     /* empty */
          | prog func_definition
          | prog global_var_declaration
          ;

global_var_declaration : type var_list SEMI;
func_definition : type ID LPAREN parameter_list RPAREN compound_stmt;

type : INT
     | CHAR
     | FLOAT
     ;

var_list : ID
         | var_list COMMA ID
         ;

parameter_list :     /* empty */
                 | parameter_list COMMA type ID
                 ;

compound_stmt : LBRACE stmt_list RBRACE;

stmt_list :     /* empty */
          | stmt_list statement
          ;

statement : expression SEMI
          | RETURN expression SEMI
          | assignment SEMI
          | if_stmt
          | while_stmt
          | for_stmt
          | func_call SEMI
          ;

assignment : ID ASSIGN expression;

if_stmt : IF LPAREN expression RPAREN compound_stmt else_statement;

else_statement :     /* empty */
                 | ELSE compound_stmt
                 | ELIF LPAREN expression RPAREN compound_stmt else_statement
                 ;

while_stmt : WHILE LPAREN expression RPAREN compound_stmt;

for_stmt : FOR LPAREN assignment SEMI expression SEMI assignment RPAREN compound_stmt;

func_call : ID LPAREN arg_list RPAREN;

arg_list :     /* empty */
         | arg_list COMMA expression
         ;

expression : ID
           | NUM
           | CHAR
           | expression PLUS expression
           | expression MINUS expression
           | expression TIMES expression
           | expression DIVIDE expression
           | expression MOD expression
           | LPAREN expression RPAREN
           ;

%%

int main()
{
    // Scanner program to parse and validate input program
    // Prints success message if parsing and validation is successful, else prints error message
    FILE *fp;
    fp = fopen("input.txt", "r");
    if (fp == NULL)
    {
        printf("Error opening file.");
        exit(1);
    }
    yyin = fp;
    yyparse();
    printf("Input program is valid and parsed successfully.");
    return 0;
}

int yywrap()
{
    return 1;
}