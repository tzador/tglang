%{
    // This is the "prologue" section of the code, where you can declare variables and include header files.
    int counter = 0;
%}

// This is the "definitions" section, where you define the tokens and grammar rules.
%token DIGIT EXCLAMATION_MARK

%%
/* This is the start of the grammar rules. Each rule is in the format of:
    <non-terminal> : <expression> { <code> }
*/
start :
    expression
    | EXCLAMATION_MARK expression { // This code will execute when the "!" token is encountered
        counter++;
    }
    ;

expression : // This rule defines a simple expression of a single DIGIT token
    DIGIT { // This code will execute when a DIGIT token is encountered
        printf("The value of the digit is %d\n", $1);
    }
    ;

// This rule defines a complex expression of multiple EXCLAMATION_MARK tokens repeating a DIGIT token
expression : DIGIT
    | expression EXCLAMATION_MARK DIGIT { // This code will execute when multiple "!" tokens and digits are encountered
        printf("The value of the digit is %d\n", $3);
        printf("The number of exclamation marks is %d\n", counter);
    }
    ;

%%
/*
    This is the "epilogue" section, where you can define any additional code or functions.
    In this example, we are defining a main function to start the program.
*/
int main() {
    yyparse(); // This function will run the generated parser on standard input
    return 0;
}