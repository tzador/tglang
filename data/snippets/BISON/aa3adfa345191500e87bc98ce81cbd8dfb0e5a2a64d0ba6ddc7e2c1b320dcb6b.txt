/* A complex calculator grammar in Bison */

%{
#include <stdio.h>
#include <math.h>
%}

/* Define the tokens for our calculator */
%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token POWER
%token L_PAREN
%token R_PAREN
%token ERROR

/* Specify the precedence and associativity of the tokens */
%left PLUS
%left MINUS
%left TIMES
%left DIVIDE
%left POWER
%right UMINUS /* for unary minus */
%nonassoc EXPONENT /* for exponentiation operator */

/* Define the grammar rules for our calculator */
%%
/* The start symbol is 'input', which represents the entire input */
input:
  /* The input can be a single expression or multiple expressions separated by a semicolon */
  expr { printf("= %f\n", $1); }
  | input ';' expr { printf("= %f\n", $3); }
  | input ';' { printf("No expression provided\n"); }
  ;
  
/* An expression can be a binary operation, a unary operation, or a number */
expr:
  expr PLUS expr { $$ = $1 + $3; }
  | expr MINUS expr { $$ = $1 - $3; }
  | expr TIMES expr { $$ = $1 * $3; }
  | expr DIVIDE expr { $$ = $1 / $3; }
  | expr POWER expr %prec EXPONENT { $$ = pow($1, $3); }
  | MINUS expr %prec UMINUS { $$ = -$2; }
  | NUMBER { $$ = $1; }
  | L_PAREN expr R_PAREN { $$ = $2; }
  | expr error { yyerror("Invalid expression"); }
  ;

/* Handle errors by returning the ERROR token */
%%
int yyerror (const char *msg)
{
  fprintf (stderr, "%s", msg);
  return ERROR;
}

/* Define the main function to get input from the user and parse it */
int main (void)
{
  yyparse ();
  return 0;
}

/* Define the yyerror function for error handling */
void yyerror(const char *errmsg)
{
  fprintf(stderr, "Error: %s\n", errmsg);
  exit(1);
}

/* Define the yylex function to handle tokenizing */
int yylex(void)
{
  int ch = getchar();
  if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^' || ch == '(' || ch == ')'){
    return ch;
  }
  if (ch == '\n' || ch == EOF) {
    return 0;
  }
  if (isspace(ch)) {
    return yylex();
  }
  if (isdigit(ch)) {
    int num = ch - '0';
    for (ch = getchar(); isdigit(ch) != 0; ch = getchar()){
      num = num * 10 + (ch - '0');
    }
    ungetc(ch, stdin);
    yylval = num;
    return NUMBER;
  }
}