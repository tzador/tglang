%{
/* This code is a BISON language code that uses 
   the "Flex" lexical analyzer to generate 
   a parser for a simple calculator program. */

#include <stdio.h>

/* Definitions for the tokens */
%}

/* Rules for lexical analysis */
number   ([0-9]+)
operator ([-+*/])

%%
/* Rules for syntax analysis */

calc: expression {$$ = $1}
    ;

expression: expression operator term 
          { 
            switch($2){
                case '+': $$ = $1 + $3;
                          break;
                case '-': $$ = $1 - $3;
                          break;
                case '*': $$ = $1 * $3;
                          break;
                case '/': $$ = $1 / $3;
                          break;
             }
          }
          | term
          {$$ = $1;}
          ;

term: number
    {$$ = $1;}
    ;

%%

/* Code for error handling */
int yyerror(char *s) {
  fprintf(stderr, "%s\n", s);
}

/* Main function to invoke the parser */
int main() {
  /* Initialize the "Flex" lexer */
  yylex();
  /* Invoke the parser */
  yyparse();
  /* Print the result */
  printf("%d\n", $$);
  return 0;
}

/* Functions to be generated by "Flex" */
int yylex() { ... }
int yyparse() { ... }
int yyerror() { ... }