%{
// This section contains C code that will be copied verbatim into the generated parser
#include <stdio.h>
#include <stdlib.h>

int count = 0; // global variable to keep track of number of lines in input

// Function to display error message and exit program
void yyerror(const char *s)
{
    fprintf(stderr, "%s\n", s);
    exit(EXIT_FAILURE);
}
%}

// The declarations section defines the tokens used in the grammar
%token NUMBER
%token ADDITIVE_OP

// The definitions section specifies the grammar rules
%%
// This rule defines a program as a list of expressions
program: expression
    | program expression
    ;

// This rule defines an expression as a number
expression: NUMBER { count++; } 
    ;

// This rule defines an expression as an addition operation
expression: expression ADDITIVE_OP expression 
    { count++; }
    ;

// This section specifies the start state for the parser
%%
// This is the main function that will be called to start parsing
int main(int argc, char *argv[])
{
    // Check for correct number of command line arguments
    if(argc != 2)
    {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Open the input file
    FILE *f = fopen(argv[1], "r");
    if(!f)
    {
        yyerror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Set input file for parser to read from
    yyin = f;

    // Call parser to start parsing
    yyparse();

    // Print number of lines in input
    printf("Number of lines: %d\n", count);

    // Close input file
    fclose(f);

    return EXIT_SUCCESS;
}