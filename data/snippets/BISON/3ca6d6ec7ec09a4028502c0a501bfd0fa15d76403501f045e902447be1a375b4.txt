%{
/* This section is used to define variables and include any necessary headers or libraries. */
#include <stdio.h>
#include <math.h>
double result; /* This variable will store the final result of the calculation. */
%}

%token <value> NUMBER /* This defines token for numbers */
%left '+' '-' /* Defines the left associativity for these operators */
%left '*' '/' /* Defines the left associativity for these operators */

%start element /* This defines the starting rule for the grammar */

%%

/* This section is used for the grammar rules */
element:  /* Start rule for the entire grammar */
        expression { result = $1; } /* The final result is assigned to the variable "result" */
    |   element '

' { printf("%lf\n", result); /* The result is printed and a new line is added for formatting */
    |   error '

' { yyerror("Invalid input"); } /* Error rule for invalid input*/
    ;

expression: NUMBER /* A single number is taken as an expression */
    |   expression '+' expression { $$ = $1 + $3; } /* Addition operation rule */
    |   expression '-' expression { $$ = $1 - $3; } /* Subtraction operation rule */
    |   expression '*' expression { $$ = $1 * $3; } /* Multiplication operation rule */
    |   expression '/' expression { $$ = $1 / $3; } /* Division operation rule */
    |   '(' expression ')' { $$ = $2; } /* Parentheses rule for nested expressions */
    |   '-' expression  { $$ = - $2; } /* Unary minus rule for negative numbers */
    |   '+' expression { $$ = $2; } /* Unary plus rule for positive numbers */
    ;

%%

/* This section is used to add any necessary helper functions or macros */
int yyerror(const char *msg) /* Error handling function */
{
    fprintf(stderr, "%s\n", msg);
    return 0;
}

int main()
{
    /* This section is used to receive input and initiate the parsing process */
    yyparse(); /* Parsing function */
    printf("Result: %lf\n", result); /* Printing the final result */
    return 0;
}