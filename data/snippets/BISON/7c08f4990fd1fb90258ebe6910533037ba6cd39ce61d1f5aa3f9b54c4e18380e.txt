%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE

/* This rule defines the basic arithmetic operations using
   left and right recursion to enforce operator precedence. 
   It also allows for nested braces and whitespace between operators. */

expression:    expression PLUS expression
    |   expression MINUS expression 
    |   expression TIMES expression 
    |   expression DIVIDE expression 
    |   NUMBER 
    |   '(' expression ')' 
    |   expression '+' expression 
    |   expression '-' expression 
    |   expression '*' expression 
    |   expression '/' expression
    ;

/* This rule defines the grammar for a simple math expression. 
   It uses <calc> as the starting point for the parse. */

calc:    expression
    |   calc '\n' expression

/* This section defines the tokens used in the grammar. 
   Note that the tokens have corresponding character literals. */

%%

[0-9]+      { return NUMBER; } 
'+'         { return PLUS; } 
'-'         { return MINUS; } 
'*'         { return TIMES; } 
'/'         { return DIVIDE; } 
['(']       { return ((int) yytext[0]); } 
[')']       { return ((int) yytext[0]); } 
\n          { /* ignore newlines */ } 
.           { /* ignore everything else */ }