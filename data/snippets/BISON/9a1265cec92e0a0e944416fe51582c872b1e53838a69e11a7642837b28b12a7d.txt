%token <token_class> IDENTIFIER   // Declares token class for IDENTIFIER
%token <string> STRING_LITERAL   // Declares token class for STRING_LITERAL
%token <number> NUMBER_LITERAL   // Declares token class for NUMBER_LITERAL

%left '+' '-'   // Declares '+' and '-' as left associative operators
%left '*' '/'   // Declares '*' and '/' as left associative operators
%right '^'      // Declares '^' as right associative operator

%%

expressionList: /* empty */   // Defines the grammar rule for an empty expression list
    | expressionList ',' expression   // Defines the grammar rule for a comma separated list of expressions
    ;

expression:   // Defines the grammar rule for a generic expression
    | IDENTIFIER   // Defines the grammar rule for an identifier expression
    | STRING_LITERAL   // Defines the grammar rule for a string literal expression
    | NUMBER_LITERAL   // Defines the grammar rule for a number literal expression
    | expression '+' expression   // Defines the grammar rule for an addition expression
    | expression '-' expression   // Defines the grammar rule for a subtraction expression
    | expression '*' expression   // Defines the grammar rule for a multiplication expression
    | expression '/' expression   // Defines the grammar rule for a division expression
    | expression '^' expression   // Defines the grammar rule for an exponentiation expression
    ;

%%