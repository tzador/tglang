%{
// This is a comment in BISON
%}

// Declares a set of tokens using regular expressions
// A token represents a lexeme in the grammar
%token ID "identifier"
%token INT "integer"
%token FLT "floating point number"

// Defines the grammar rules
// Non-terminals are represented by uppercase letters
%start program
%%
program:    // Non-terminal program
            declarations statements ;

declarations:   // Non-terminal declarations
                declarations declaration |
                /*epsilon*/ ;

declaration:    // Non-terminal declaration
                type_specifier ID ';' ;

type_specifier: // Non-terminal type_specifier
                "int" | "float" | "double" ;

statements: // Non-terminal statements
            statements statement |
            /*epsilon*/ ;

statement:   // Non-terminal statement
            ID '=' expression ';' |
            "if" '(' condition ')' statement |
            "while" '(' condition ')' statement ;

expression: // Non-terminal expression
            term | expression '+' term | expression '-' term ;

term:   // Non-terminal term
        factor | term '*' factor | term '/' factor ;

factor: // Non-terminal factor
        ID | INT | FLT | '(' expression ')' ;

condition:  // Non-terminal condition
            expression RELOP expression ;

// Defines the operators and their precedence
%left '+' '-'
%left '*' '/'
%right '='

// Defines the relational operators
%token RELOP "relational operator"
%right '<' '>' 
%right GEQ LEQ EQU NEQ
%%