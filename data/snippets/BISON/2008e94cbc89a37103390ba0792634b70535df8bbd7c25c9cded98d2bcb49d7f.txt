/* BISON parser for JSON objects */
%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct json_object {
    char *key;
    char *value;
};

struct json_array {
    int size;
    struct json_object *objects[100];
};

struct json_object *root;
struct json_array *array;
%}

%union {
    char *string_value;
    int int_value;
}

%token <string_value> STRING
%token <int_value> NUMBER
%token TRUE FALSE NULL
%token LBRACE RBRACE COMMA LBRACKET RBRACKET

%type <string_value> json
%type <int_value> json_number
%type <string_value> json_string
%type <string_value> json_boolean
%type <string_value> json_null

%start start

%%

start: json ;

json: LBRACE object_list RBRACE ;

object_list: object_list COMMA object
           | object
           ;

object: json_string ':' json_value {$$ = create_object($1, $3);}

json_value: json_string
          | json_number
          | json_boolean
          | json_null
          | json_array
          ;

json_array: LBRACKET array_list RBRACKET ;

array_list: array_list COMMA json_value
          | json_value
          ;

json_string: STRING {$$ = $1;}

json_number: NUMBER {$$ = $1;}

json_boolean: TRUE {$$ = "true";}
            | FALSE {$$ = "false";}

json_null: NULL {$$ = "null";}

%%

/* code to create object and add it to current array */
struct json_object *create_object(char *key, char *value) {
    struct json_object *obj = malloc(sizeof(struct json_object));
    obj->key = strdup(key);
    obj->value = strdup(value);
    array->objects[array->size] = obj;
    array->size++;
    return obj;
}

int main(int argc, char **argv) {
    root = malloc(sizeof(struct json_object));
    root->key = "root";
    array = malloc(sizeof(struct json_array));
    yyparse();
    return 0;
}