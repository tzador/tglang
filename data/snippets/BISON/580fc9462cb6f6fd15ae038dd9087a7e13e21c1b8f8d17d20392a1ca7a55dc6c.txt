%{
/* This code snippet defines a BISON grammar for a simple calculator */

/* %topcode is used to define code that is automatically copied to the top of the C output file generated */
%topcode {
    #include <stdio.h>
    #include <stdlib.h>
}

/* %token is used to define the tokens used in the grammar */
%token <num> NUMBER
%token ADD_OP SUB_OP MULT_OP DIV_OP
%token NEWLINE

/* Start of grammar rules */
%%
/* The following is a rule for a simple expression */
expression: NUMBER ADD_OP NUMBER              /* Integer addition */
        { printf("%d", $1 + $3); }           /* Output result of addition */
        | NUMBER SUB_OP NUMBER               /* Integer subtraction */
        { printf("%d", $1 - $3); }           /* Output result of subtraction */
        | NUMBER MULT_OP NUMBER              /* Integer multiplication */
        { printf("%d", $1 * $3); }           /* Output result of multiplication */
        | NUMBER DIV_OP NUMBER               /* Integer division */
        { printf("%d", $1 / $3); }           /* Output result of division */
        ;

/* The following rule handles a multi-line expression by recursively calling the expression rule */
multi_line_expression: expression NEWLINE multi_line_expression
        | <empty>                             /* <empty> is a predefined rule for empty expressions */
        ;

/* The following rule defines a statement */
statement: multi_line_expression NEWLINE
        ;

%%

/* The following block of code is executed when there is an error in the input */
void yyerror(char *s)
{
    fprintf(stderr, "ERROR: %s\n", s);
    exit(1);
}

/* The following code is used to initialize the lexer */
int main()
{
    /* Call yyparse() to start parsing input from stdin */
    yyparse();
    return 0;
}