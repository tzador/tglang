%{
  /* This is a BISON program that defines a grammar for a simple math
  expression calculator. The grammar recognizes expressions like "2+2"
  or "8*5" and evaluates them. */
%}

/* Define the token type for integers */
%token <int> INTEGER

%%

/* Define the grammar rules */
expression: INTEGER
  | expression '+' INTEGER
  | expression '-' INTEGER
  | expression '*' INTEGER
  | expression '/' INTEGER
  ;

/* Specify the start symbol */
start: expression;

/* Handle errors with a default rule */
%%
 
/* Begin the actual grammar definition */
/* Define the token type for integers */
%token <int> INTEGER 

/* Use %% to separate the grammar rules from the code that follows */
%% 

/* Define the grammar rules */
/* This rule specifies that an expression can be simply an integer */ 
expression: INTEGER

/* This rule allows for addition, where an expression can be the left side
of the "+" symbol, followed by an integer on the right side */
  | expression '+' INTEGER

/* This rule allows for subtraction, where an expression can be the left side
of the "-" symbol, followed by an integer on the right side */
  | expression '-' INTEGER 

/* This rule allows for multiplication, where an expression can be the left side
of the "*" symbol, followed by an integer on the right side */
  | expression '*' INTEGER

/* This rule allows for division, where an expression can be the left side
of the "/" symbol, followed by an integer on the right side */
  | expression '/' INTEGER
  ;

/* Specify the start symbol */
/* The start symbol is the syntax that is recognized at the start of a
sentence, in this case, an expression */
start: expression;

/* Handle errors with a default rule */
/* This rule catches all errors and simply returns an error message */
%%
  printf("Error: Invalid expression.\n");
  exit(1);
%%

/* Begin the code that follows the grammar rules */

/* Define a function to evaluate the expressions */
int evaluate_expression(int num1, char op, int num2) {
  /* Use a switch statement to handle different operators */
  switch (op) {
    /* Add the two numbers and return the result */
    case '+':
      return num1 + num2;
    /* Subtract the second number from the first number and return the result */
    case '-':
      return num1 - num2;
    /* Multiply the two numbers and return the result */
    case '*':
      return num1 * num2;
    /* Divide the first number by the second number and return the result */
    case '/':
      return num1 / num2;
    /* If the operator is not recognized, return an error message */
    default:
      printf("Error: Invalid operator.\n");
      exit(1);
  }
}

/* Begin the main function */
int main() {
  int result = 0; /* Initialize the variable for the result of the expression */
  int num1 = 0; /* Initialize the variable for the first number in the expression */
  char op = '\0'; /* Initialize the variable for the operator in the expression */
  int num2 = 0; /* Initialize the variable for the second number in the expression */

  /* Prompt the user to enter an expression */
  printf("Enter a simple expression: ");
  /* Scan in the expression, using the defined grammar */
  scanf("%d %c %d", &num1, &op, &num2);
  /* Use the evaluate_expression function to evaluate the expression and store the result */
  result = evaluate_expression(num1, op, num2);
  /* Print the result to the screen */
  printf("Result: %d\n", result);

  /* Exit the program with a successful status code */
  exit(0);
}