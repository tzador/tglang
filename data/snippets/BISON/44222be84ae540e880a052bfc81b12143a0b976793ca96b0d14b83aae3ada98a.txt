%{
/*
This is a sample BISON code snippet
It defines a simple grammar for a mathematical expression
The output of this snippet would be the calculation result of the expression
*/
%}

/*
Defining data types for numbers and basic operators
*/
%token <num> NUMBER
%token <op> PLUS MINUS MULT DIV

/*
Defining the start symbol for the grammar
*/
%start expr

/*
Defining grammar rules for an expression
*/
expr: NUMBER { $$ = $1; } // If the expression is just a number, return that number
    | expr PLUS expr { $$ = $1 + $3; } // If expression is an addition, return the sum of the two expressions
    | expr MINUS expr { $$ = $1 - $3; } // If expression is a subtraction, return the difference of the two expressions
    | expr MULT expr { $$ = $1 * $3; } // If expression is a multiplication, return the product of the two expressions
    | expr DIV expr { $$ = $1 / $3; } // If expression is a division, return the quotient of the two expressions
    ;

/*
Handling possible syntax errors
*/
%error-verbose
%%
/*
Main program to scan input and parse the expression using the defined grammar
*/
int main(void)
{
    return yyparse();
}

/*
Function to handle errors during parsing
*/
void yyerror(const char *s)
{
    fprintf(stderr, "Error: %s\n", s);
}

/*
Function to handle scanning of input
*/
int yylex(void)
{
    int c = getchar();
    if (c == '+' || c == '-' || c == '*' || c == '/') {
        return c; // If it's an operator, return the operator
    } else if (isdigit(c)) {
        yylval.num = c - '0'; // If it's a digit, return the digit
        return NUMBER;
    } else if (c == ' ' || c == '\t') {
        return yylex(); // If it's a space or tab, skip and continue scanning
    } else if (c == '\n') {
        return 0; // If it's a new line, end the input
    } else {
        return -1; // Otherwise, return an error
    }
}

/*
Function to convert the string representation of an operator to its corresponding token
*/
int yywrap(void)
{
    return 1;
}