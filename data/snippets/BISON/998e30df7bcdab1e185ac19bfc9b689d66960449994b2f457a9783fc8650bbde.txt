%token <Integer> NUMBER /* Declaring a token called NUMBER with an attribute of type Integer */

%token <String> ID /* Declaring a token called ID with an attribute of type String */

%start Exp /* Declaring the starting non-terminal symbol */

%% /* Begin grammar rules */

Exp: /* Rule for an expression */
    Exp '+' Exp /* Adds two expressions */
    | Exp '-' Exp /* Subtracts two expressions */
    | Exp '*' Exp /* Multiplies two expressions */
    | Exp '/' Exp /* Divides two expressions */
    | number:NUMBER /* Assigning the token NUMBER to the non-terminal symbol number */
    | id:ID /* Assigning the token ID to the non-terminal symbol id */
    ;

%% /* End grammar rules */

/* Example of a Bison program using the above grammar rules */

1 + 2 * 3 /* Input */
9 /* Output */