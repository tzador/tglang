/* A simple Bison program to recognize a list of numbers*/
/* Define the needed tokens */
%token NUM
%left '+' '-'
%left '*' '/'
%type <value> list expression
 
/* Define the grammar rules */
%%
 
list: /* empty */
    | list expression '\n'         { printf ("Value: %d\n", $2); }
    ;
 
expression: NUM              
    | '(' expression ')'         { $$ = $2; }
    | expression '+' expression  { $$ = $1 + $3; }
    | expression '-' expression  { $$ = $1 - $3; }
    | expression '*' expression  { $$ = $1 * $3; }
    | expression '/' expression  { $$ = $1 / $3; }
    ;
 
%%

/* Define the main function */
int main()
{
    /* Enter the list of numbers */
    printf("Enter list of numbers: ");
 
    /* Call the parser */
    yyparse();
 
    /* Return 0 to indicate successful execution */
    return 0;
}
 
/* Define the yyerror function to handle syntax errors */
void yyerror(const char *s)
{
    /* Print the error message and exit the program */
    fprintf(stderr, "%s\n", s);
    exit(1);
}
 
/* Define the yywrap function to indicate the end of input */
int yywrap()
{
    return 1;
}
 
/* Define the yyerror function to return the token value */
int yyerror()
{
    /* Return the value of the token */
    return $1;
}