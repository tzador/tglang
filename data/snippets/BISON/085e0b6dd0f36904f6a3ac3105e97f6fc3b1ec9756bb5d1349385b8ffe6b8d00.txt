/*** BISON program to parse a simple math expression ***/

%{
#include <stdio.h>
#include <stdlib.h>
int yylex(void);
void yyerror(char *);

int result; // global variable to store result of the expression
%}

// Define tokens
%token NUMBER
%left '+' '-'
%left '*' '/'


%%

expression: /* empty */
	| expression '+' term { result = $1 + $3; } // perform addition
	| expression '-' term { result = $1 - $3; } // perform subtraction
	| term { result = $1; } // expression only contains a single term
	;

term:
	| term '*' factor { result = $1 * $3; } // perform multiplication
	| term '/' factor { result = $1 / $3; } // perform division
	| factor { result = $1; } // term only contains a single factor
	;

factor:
	NUMBER { result = $1; } // factor is a number
	| '(' expression ')' { result = $2; } // factor is an expression within parentheses
	;

%%

// Function to handle errors
void yyerror(char *s) {
	fprintf(stderr, "error: %s\n", s);
}

int main() {
	yyparse(); // start parsing
	printf("Result = %d\n", result); // print the result
	return 0;
}