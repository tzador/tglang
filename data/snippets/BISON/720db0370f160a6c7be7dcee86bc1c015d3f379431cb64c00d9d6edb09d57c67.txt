%{
    /* This is a BISON code snippet that generates a syntax parser for a simple programming language called "MyLang" */ 
    #include <stdio.h>
    #include <string.h>

    /* Declarations */
    char input[100];
    int index = 0;

    %}

/* Definitions section */
%code top{
    /* This block is executed at the beginning of the parser */
    printf("Welcome to MyLang parser! \n");
}

/* Grammar section */
%%

/* This is the starting rule for the parser */
program : statement
    {
        /* The code within this block will be executed when the rule is matched */
        printf("Parsing program... \n");
    }
    ;

/* Rule for statement */
statement : variable_statement | expression_statement | control_statement | function_definition
    {
        /* This code block checks which type of statement is matched and prints corresponding message */
        if ($1 == variable_statement) {
            printf("Parsing variable statement... \n");
        } else if ($1 == expression_statement) {
            printf("Parsing expression statement... \n");
        } else if ($1 == control_statement) {
            printf("Parsing control statement... \n");
        } else if ($1 == function_definition) {
            printf("Parsing function definition... \n");
        }
    }
    ;

/* Rule for variable statement */
variable_statement : 'var' ID '=' expression ';'
    {
        /* This code block stores the variable name and its initial value */
        char var_name[10];
        strcpy(var_name, $2);
        printf("Variable '%s' initialized with value: %d \n", var_name, $4);
    }
    ;

/* Rule for expression statement */
expression_statement : expression ';'
    {
        /* This code block calculates the value of the expression and prints it */
        printf("The value of the expression is: %d \n", $1);
    }
    ;

/* Rule for control statement */
control_statement : 'if' '(' expression ')' '{' statement '}' 'else' '{' statement '}'
    {
        /* This code block checks the value of the expression and executes corresponding statement */
        if ($3 == 1) {
            printf("Executing 'if' statement... \n");
            $$ = $7;
        } else {
            printf("Executing 'else' statement... \n");
            $$ = $10;
        }
    }
    ;

/* Rule for function definition */
function_definition : 'function' ID '(' ')' '{' statement '}'
    {
        /* This code block defines a function with the given name and executes its statement */
        printf("Defining function '%s'... \n", $2);
        $2();
    }
    ;
%%

/* Code section */
int main() 
{
    printf("Enter your MyLang code: ");
    fgets(input, sizeof(input), stdin); /* Get input from user*/

    /* Call the parser function with the input */
    yyparse();
}

/* Error handling section */
void yyerror(char *error)
{ 
    printf("Error: %s \n", error);
}

/* Function definitions */
void hello() 
{
    printf("Hello, from MyLang! \n");
}

/* Sample input: */
/* var x = 5; */
/* if (x > 3) { */
/*    x = 10; */
/* } else { */
/*    x = 0; */
/* } */
/* function hello(); */

/* Output: */
/* Welcome to MyLang parser! */
/* Parsing variable statement... */
/* Variable 'x' initialized with value: 5 */
/* Parsing control statement... */
/* Executing 'if' statement... */
/* Parsing expression statement... */
/* The value of the expression is: 10 */
/* Defining function 'hello'... */
/* Hello, from MyLang! */
/* End of program. */