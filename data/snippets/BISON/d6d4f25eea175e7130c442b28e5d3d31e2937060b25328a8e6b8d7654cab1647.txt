%{
// start of code section
#include <stdlib.h> // include standard library
#include <stdio.h> // include standard input/output library

// define a structure for a person with name and age
typedef struct {
        char *name; // pointer to name string
        int age; // age as integer
    } PERSON;

PERSON personList[10]; // declare an array of 10 PERSON structs

int totalPersons = 0; // initialize variable for total number of persons

// declare function for adding a new person
// takes in name and age as arguments
void addPerson(char *name, int age) {
    // create new PERSON struct and assign values
    PERSON newPerson;
    newPerson.name = name;
    newPerson.age = age;

    // check if there is space in the personList array
    if (totalPersons < 10) {
        // add new person to the array
        personList[totalPersons] = newPerson;
        // increase totalPersons count
        totalPersons++;
    } else {
        // if no space is available, print error message and exit
        printf("Error: Person list is full.\n");
        exit(1);
    }
}

// declare function for removing a person
// takes in name as argument
void removePerson(char *name) {
    // iterate through the personList array
    for (int i = 0; i < totalPersons; i++) {
        // check if the name matches
        if (strcmp(personList[i].name, name) == 0) {
            // shift elements of array to overwrite the removed person
            for (int j = i; j < totalPersons - 1; j++) {
                personList[j] = personList[j+1];
            }
            // decrease totalPersons count
            totalPersons--;
            // break out of loop
            break;
        }
    }
}

// define function for printing all persons in the list
void printList() {
    // print header
    printf("Name\t\tAge\n");

    // iterate through the personList array
    for (int i = 0; i < totalPersons; i++) {
        // print name and age of current person
        printf("%s\t\t%d\n", personList[i].name, personList[i].age);
    }
}
%}

%token <personType> NAME AGE // declare tokens for name and age

%start personlist // set start symbol to personlist

%%

personlist:
    | personlist person { $<personType>$ = $1; } // add new person to personlist
    ;

person:
    NAME AGE { addPerson($1, $2); } // call addPerson function with name and age arguments
    | NAME { removePerson($1); } // call removePerson function with name argument
    ;

%%

// define main function
int main(void) {
    // prompt user to enter name and age
    printf("Enter name and age (separated by a space): ");
    // read input and store in variables
    char *name = NULL;
    int age = 0;
    scanf("%ms %d", &name, &age);

    // create new person with given name and age
    addPerson(name, age);

    // print all persons in the list
    printList();

    // free allocated memory for name variable
    free(name);

    // return 0 to indicate successful execution
    return 0;
}