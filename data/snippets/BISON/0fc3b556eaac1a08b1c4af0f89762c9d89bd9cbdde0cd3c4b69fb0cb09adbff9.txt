// This is a simple BISON program that parses arithmetic expressions
%token NUM
%left '+' '-'
%left '*' '/'
 
%%
 
// Grammar rules
expr : NUM            { $$ = $1; } // Rule for an expression with only a number
     | expr '+' expr  { $$ = $1 + $3; } // Rule for addition
     | expr '-' expr  { $$ = $1 - $3; } // Rule for subtraction
     | expr '*' expr  { $$ = $1 * $3; } // Rule for multiplication
     | expr '/' expr  { $$ = $1 / $3; } // Rule for division
 
%%
 
// Function to handle errors
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}
 
// Function to call the parser
int main() {
    yyparse(); // Call the parser
    return 0;
}
 
// Function to get the next token
int yylex() {
    int c = getchar();
    if (c == EOF)
        return 0;
    else if (isdigit(c))
        return NUM;
    else
        return c;
}
 
// Function to print the result of the parsing
void print_result(int result) {
    printf("The result is: %d\n", result);
}
 
// Function to handle token values
%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
 
int yylex();
void yyerror(char *);
void print_result(int);
%}
 
// Required BISON declarations
%define parse.error verbose // Show verbose error messages
%parse-param {int *result} // Provide a pointer to store the result
 
// Include the generated y.tab.c file
%code {
#include "y.tab.c"
}
 
// Start rule for the parser
%start expr