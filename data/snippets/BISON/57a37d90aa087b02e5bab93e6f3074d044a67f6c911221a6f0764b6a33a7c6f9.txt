%{
/* Start of definitions section */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LEN 25

extern void yyerror(char *s);
extern int yylex();

char *names[MAX_NAME_LEN];
int curr_pos = 0;

%}

/* Tokens section */

%x LIST  /* Start LIST after seeing '{' */

%token <name> NAME

%%

/* Rules section */

/* Process a list of names separated by comma */
input: %{ curr_pos = 0; %}
      list
      { 
          for(int i=0; i<curr_pos; i++){
              printf("Name %d: %s\n", i+1, names[i]);
          }
      }
    ;

list: NAME 
      {
           names[curr_pos] = (char *) malloc(MAX_NAME_LEN * sizeof(char));
           strncpy(names[curr_pos], yytext, MAX_NAME_LEN);
           curr_pos++;
      }
      | list ',' NAME
      {
           names[curr_pos] = (char *) malloc(MAX_NAME_LEN * sizeof(char));
           strncpy(names[curr_pos], yytext, MAX_NAME_LEN);
           curr_pos++;
      }
    ;

/* Ignore whitespace characters */
ws: [ \n\t]+ ;

/* Ignore comments starting with '#' */
comment: '#' .*\n ;

/* Print error message and exit */
void yyerror(char *s){
    fprintf(stderr, "Error: %s\n", s);
    printf("Invalid input - exiting lexer...\n");
    exit(1);
}

/* Recognize tokens */
%%

/* Start of main function */
int main(){
    yylex();
    return 0;
}

/* End of code snippet */