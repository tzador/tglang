/* BISON grammar for a simple calculator */

%{
    #include <stdio.h>

    int result; /* global variable to store the result of calculations */
%}

/* define the tokens in the grammar */
%token NUMBER
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE

%% /* grammar rules */

/* rule for starting symbol */
expression: /* empty */
    | expression expr_eol
    { printf("The result is: %d\n", result); result = 0; } /* print the result and reset it for further calculations */
    ;

/* rule for zero or more expressions */
expr_eol:
    | expr
    | expr_eol expr
    ;

/* rule for adding or subtracting terms */
expr:
    | term
    | expr PLUS term
    {
        result = $1 + $3; /* perform the addition and store the result in global variable */
    }
    | expr MINUS term
    {
        result = $1 - $3; /* perform the subtraction and store the result in global variable */
    }
    ;

/* rule for multiplying or dividing terms */
term:
    | factor
    | term TIMES factor
    {
        result = $1 * $3; /* perform the multiplication and store the result in global variable */
    }
    | term DIVIDE factor
    {
        result = $1 / $3; /* perform the division and store the result in global variable */
    }
    ;

/* rule for numbers */
factor:
    | NUMBER
    {
        result = atoi($1); /* convert the number string to integer and store in global variable */
    }
    ;

/* handle errors */
%%
/* include any necessary C code here */