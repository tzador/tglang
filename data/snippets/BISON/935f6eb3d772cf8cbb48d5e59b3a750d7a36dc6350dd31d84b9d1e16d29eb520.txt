/* Defines the start symbol for the grammar. */
%start Program 

/* Defines the token declarations. */
%token <var> IDENTIFIER
%token <const> INTEGER FLOAT

/* Defines the precedence and associativity for operators. */
%left '-' '+'
%right '='

%%
/* Productions for Program non-terminal. */
Program: 
    DeclarationList
    CodeBlock 
;


/* Productions for DeclarationList non-terminal. */
DeclarationList:
    DeclarationList Declaration
    | /* empty */ 
;


/* Productions for Declaration non-terminal. */
Declaration:
    Type IDENTIFIER '=' ConstantList ';' 
;


/* Productions for ConstantList non-terminal. */
ConstantList:
    ConstantList ',' Constant
    | Constant 
;


/* Productions for Constant non-terminal. */
Constant:
    INTEGER
    | FLOAT 
;


/* Productions for CodeBlock non-terminal. */
CodeBlock:
    '{' StatementList '}' 
;


/* Productions for StatementList non-terminal. */
StatementList:
    StatementList Statement
    | /* empty */ 
;


/* Productions for Statement non-terminal. */
Statement:
    Assignment ';'
    | PrintStatement ';'
;


/* Productions for Assignment non-terminal. */
Assignment:
    IDENTIFIER '=' Expression 
;


/* Productions for PrintStatement non-terminal. */
PrintStatement:
    'print' Expression 
;


/* Productions for Expression non-terminal. */
Expression:
    Expression '+' Expression 
    | IDENTIFIER 
    | INTEGER 
    | FLOAT 
;

%%