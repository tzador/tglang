%{
    /* This is a BISON code snippet that defines a parser for a simple math expression, with basic arithmetic operations and parentheses. */
   
    #include <stdio.h>
    #include <stdlib.h>
   
    /* Declares the function that converts the string input to a double floating-point number. */
    double atof( const char* );
   
    /* Defines the global variables for the operation results and error handling. */
    double result;
    int error = 0;
   
    /* Defines the macro for error handling. */
    #define YYERROR_VERBOSE
   
    /* Defines the function for handling parsing errors. */
    yyerror( const char* msg ){
        fprintf( stderr, "%s\n", msg );
        /* Sets the error flag to true. */
        error = 1;
    }
%}
   
/* Specifies the tokens to be recognized by the lexer. */
%token NUMBER
   
%%
   
/* Defines the productions for the different expressions. */
input: exp { /* Just sets the result to the expression value. */ result = $1; }
    | exp '+' exp { /* Adds the two expression values and sets the result. */ result = $1 + $2; }
    | exp '-' exp { /* Subtracts the two expression values and sets the result. */ result = $1 - $2; }
    | exp '*' exp { /* Multiplies the two expression values and sets the result. */ result = $1 * $2; }
    | exp '/' exp { /* Divides the two expression values and sets the result. */ result = $1 / $2; }
    | '-' exp %prec NEG { /* Negates the expression value and sets the result. */ result = - $2; }
    | '(' exp ')' { /* Sets the result to the expression value inside parentheses. */ result = $2; }
   
/* Defines the production for an expression containing just a number. */
exp: NUMBER { /* Converts the string input to a double floating-point number and sets the result. */ result = atof( $1 ); }
   
/* Specifies the lexer rules for recognizing numbers. */
number: /([0-9]+)|([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)/ { /* Returns the matched string as a token. */ return NUMBER; }
   
%% /* End of BISON code snippet */