%{
#include <stdio.h>

// Define a variable called 'count' and initialize it to 0
int count = 0;
%}

// Define tokens for keywords 'if' and 'else'
%token <string> IF "if"
%token <string> ELSE "else"

// Define a token for identifiers
%token <string> ID

%%

program:
    // Define a production rule for a program
    statement_list
    ;

// Define a production rule for a statement
statement:
    IF ID '{' statement_list '}' ELSE '{' statement_list '}'
    {
        // Increase the count variable by 1 for each 'if-else' statement
        count++;
    }
    | /* other statement types */
    ;

// Define a production rule for a list of statements
statement_list:
    statement
    | statement statement_list
    ;

// Define a rule for matching identifiers
ID:
    // Match any string of letters and numbers starting with a letter
    ([a-zA-Z])([a-zA-Z0-9])*
    {
        // Print the identifier
        printf("Line %d: %s\n", yylineno, yytext);
    }
    ;

// Define a rule to ignore whitespace characters
%ignore '[ \t\n]'

// Define a rule for handling error
%error-verbose;

// Define a function to handle errors
void yyerror(const char *s)
{
    fprintf(stderr, "Error at line %d: %s\n", yylineno, s);
}

int main()
{
    // Call yyparse to start parsing the program
    yyparse();

    // Print the total number of 'if-else' statements in the program
    printf("Total number of 'if-else' statements: %d\n", count);

    return 0;
}

// Define a function to get the next token
int yylex()
{
    int c;

    // Read characters until a letter is encountered
    do {
        c = getchar();
    } while (c != EOF && 'a' <= c && c <= 'z');

    // Return the token based on the character read
    if (c == EOF)
        return 0; // End of file
    else
        return c; // Current character
}