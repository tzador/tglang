/* Definition section: defines all tokens and grammar rules */
%{

/* Tokens definition: contains all the tokens used in the grammar */
%token <num> NUMBER
%token <name> IDENTIFIER
%token <sign> PLUS MINUS STAR SLASH

/* Grammar rules: specifies the language's syntax rules */
%start expression
%left PLUS MINUS         // defines the left associativity of PLUS and MINUS operators
%left STAR SLASH         // defines the left associativity of STAR and SLASH operators

/* Ignored tokens definition: specifies tokens to be ignored by the parser */
%ignore " "              // ignores spaces

/* Error handling: specifies how errors should be handled */
%error-verbose           // prints detailed error messages

/* User-defined functions */
%union{
    double num;             // define data type for NUMBER token
    char *name;             // define data type for IDENTIFIER token
    char sign;              // define data type for operators
}
%token <num> Number("1.2") // defines a token whose value is 1.2
%type <num> expression     // specifies the type of the expression

/* Grammar Productions: contains the actual grammar productions */
expression : NUMBER        // production rule for NUMBER
           | IDENTIFIER    // production rule for IDENTIFIER
           | expression PLUS expression // defines a production rule for addition
           | expression MINUS expression // defines a production rule for subtraction
           | expression STAR expression // defines a production rule for multiplication
           | expression SLASH expression // defines a production rule for division
           ;  
%}

/* Actions section: contains code to be executed when a rule is reduced */
%%

/* Numeric addition */
expression    : expression PLUS expression {
                                  $$ = $1 + $3;
                }

/* Numeric subtraction */
expression    : expression MINUS expression {
                                  $$ = $1 - $3;
                }

/* Numeric multiplication */
expression    : expression STAR expression {
                                  $$ = $1 * $3;
                }

/* Numeric division */
expression    : expression SLASH expression {
                                  $$ = $1 / $3;
                }

%%

/* Code executed before the first token is parsed */
void Initialization() {

}

/* Code executed after the last token is parsed */
void Finalization() {

}

/* Code executed for every token matched */
void MatchedToken() {

}

/* Code executed for every token not matched */
void UnMatchedToken() {

}

/* Lexical Analyzer: contains code for matching tokens in the input */
int yylex() {

}

/* Main function: calls the parser and executes actions section */
int main() {
    Initialization();

    yyparse();

    Finalization();

    return 0;
}