/* Example of a BISON grammar for a simple calculator */
/* Each statement consists of an arithmetic expression followed by a semicolon */

/* Declare non-terminal for expression and statements */
%start statements
%union {
    int ival; /* integer value */
    double dval; /* floating point value */
}

%token <ival> INT /* integer token */
%token <dval> FLOAT /* floating point token */
%token ADD SUB MULT DIV /* arithmetic operator tokens */
%token LPAREN RPAREN /* parentheses tokens */

%% /* BISON rules section */
statements:
    | statements statement
    ;

statement:
    expression SEMI /* use ';' as end of statement */
    ;

expression:
    INT          { $$ = $1; }
    | FLOAT      { $$ = $1; }
    | expression ADD expression
        { $$ = $1 + $3; }
    | expression SUB expression
        { $$ = $1 - $3; }
    | expression MULT expression
        { $$ = $1 * $3; }
    | expression DIV expression
        { $$ = $1 / $3; }
    | LPAREN expression RPAREN
        { $$ = $2; }
    ;