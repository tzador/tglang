/* This grammar represents a simple calculator that can perform addition, subtraction,
   multiplication, and division. It also includes precedence rules for the operators.
   Adapted from https://www.gnu.org/software/bison/manual/html_node/A-New-Calc.html */

%token <value> NUMBER /* tokens to represent numbers */
%left '+' '-' /* define left associativity and precedence for addition and subtraction */
%left '*' '/' /* define left associativity and precedence for multiplication and division */

%% /* the grammar rules begin here */

/* start symbol - can be any non-terminal */
input:
    /* an input can be an expression or multiple expressions separated by newline characters */
    expression '\n' { printf("Result: %d\n", $1); } /* print the result of the expression */
    | input expression '\n' { printf("Result: %d\n", $3); } /* recursively handle multiple expressions */

expression:
    /* an expression can be a single number or a binary operation with two expressions */
    NUMBER             { $$ = $1; } /* return the value of the number */
    | expression '+' expression { $$ = $1 + $3; } /* perform addition and return the result */
    | expression '-' expression { $$ = $1 - $3; } /* perform subtraction and return the result */
    | expression '*' expression { $$ = $1 * $3; } /* perform multiplication and return the result */
    | expression '/' expression { $$ = $1 / $3; } /* perform division and return the result */

%% /* the code section begins here */

int main() {
    /* set up the parser and initialize the lexer */
    extern FILE *yyin; /* file pointer for input source */
    extern int yyparse(); /* function that calls the parser */
    yyin = stdin; /* set the input source to standard input */
    printf("Enter an expression to evaluate: ");

    /* call the parser to process the input */
    yyparse();
    return 0;
}

/* additional functions and actions can be added below as needed */