%namecalc
    %defines
        DIGIT([0-9])
        LETTER([a-zA-Z])
    %rules
        program : declaration_list ';'
                | program declaration_list ';'
        declaration_list : declaration
                | declaration_list declaration
        declaration : var_declaration
                | func_declaration
        var_declaration : type_specifier var_list
        var_list : var_name
                | var_list ',' var_name
        type_specifier : INT %prec INT_PRIORITY
                |
        func_declaration : type_specifier func_name '(' params ')' '{' compound_stmt '}'
        params : param
                | params ',' param
        param : type_specifier param_name
        compound_stmt : '{' local_declarations statement_list '}'
        local_declarations : local_declarations var_declaration
                |
        statement_list : statement
                | statement_list statement
        statement : expression_stmt
                | selection_stmt
                | iteration_stmt
                | return_stmt
        expression_stmt : expression ';'
                    |
        selection_stmt : IF '(' expression ')' statement
                | IF '(' expression ')' statement ELSE statement
        iteration_stmt : WHILE '(' expression ')' statement
        return_stmt : RETURN ';'
        expression : var '=' expression
                | simple_expression
        var : var_name
                | var_name '[' expression ']'
        simple_expression : additive_expression relop additive_expression
                | additive_expression
        relop : '<'
                | LTE
                | '>'
                | GTE
                | NE
                | EQ
        additive_expression : additive_expression addop term
                | term
        addop : '+'
                | '-'
        term : term mulop factor
                | factor
        mulop : '*'
                | '/'
        factor : '(' expression ')'
                | var
                | func_call
                | call_expression
        func_call : func_name '(' args ')'
        args : arg_list
                |
        arg_list : expression
                | arg_list ',' expression
        call_expression : init_value
                        | call_expression '[' expression ']'
        init_value : INT_LIT
                | ID
        var_name : ID
                | var_name '[' expression ']'
        param_name : ID
        func_name : ID
%lex
        letter [a-zA-Z]
        digit [0-9]
        ID {letter}({letter}|{digit})*
        INT_LIT {digit}+
        WS [ \t\n]
        ALNUM {letter}|({letter}|{digit})*
        LTE "<="
        GTE ">="
        NE "!="
        EQ "=="
        ASSIGN ":="
%locations
%code
    /* Code goes here */
    int yylex();
    int yystack();