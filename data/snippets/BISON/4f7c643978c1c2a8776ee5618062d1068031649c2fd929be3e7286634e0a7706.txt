# Defines the grammar for a simple calculator program

%token NUM    # defines a token for a number
%token PLUS   # defines a token for the plus sign
%token MINUS  # defines a token for the minus sign
%token MULT   # defines a token for the multiplication sign
%token DIV    # defines a token for the division sign
%token LPAREN # defines a token for the left parenthesis
%token RPAREN # defines a token for the right parenthesis
%left PLUS MINUS  # defines operators precedence for plus and minus signs
%left MULT DIV    # defines operators precedence for multiplication and division signs

/* Specifies the start rule for the grammar.
   In this case, it is 'expr', meaning that expressions in the calculator must follow this rule. */
%start expr 

/* Specifies the rules for the 'expr' non-terminal symbol, which can be
   a number or a simple expression (i.e. an operation between two numbers) */
expr: NUM
| expr PLUS expr   # matches expressions of the form 'expr + expr'
| expr MINUS expr  # matches expressions of the form 'expr - expr'
| expr MULT expr   # matches expressions of the form 'expr * expr'
| expr DIV expr    # matches expressions of the form 'expr / expr'
| LPAREN expr RPAREN  # matches expressions enclosed in parentheses
;

/* Specifies that the 'NUM' token represents any real number
   and that it will be converted into an integer value when parsed.
   This is useful for operations within the calculator. */
NUM: /[0-9]+/;

/* Specifies the rules for handling parenthesis, ensuring that
   expressions within parenthesis will be evaluated first. */
LPAREN: "(";
RPAREN: ")";

/* Specifies that whitespace characters (i.e. spaces, tabs, newlines)
   should be ignored when parsing the input. This ensures that inputs
   with extra spaces will still be parsed correctly. */
%ignore " " | "\t" | "\n" | "\r";