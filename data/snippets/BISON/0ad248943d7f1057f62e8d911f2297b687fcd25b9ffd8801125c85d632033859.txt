%{
    #include <stdio.h>
    void yyerror(const char* s);
    int yylex(void);
%}

/* Define tokens */
%token NUM
%token ADD SUB MUL DIV MOD
%token LPAREN RPAREN

/* Define precedence and associativity */
%left ADD SUB
%left MUL DIV MOD
%right UMINUS

/* Define grammar rules */
%%
program: expr   {printf("Result: %d\n", $1);}
        |       {;}
        
expr   : expr ADD expr     {$$ = $1 + $3;}
        | expr SUB expr    {$$ = $1 - $3;}
        | expr MUL expr    {$$ = $1 * $3;}
        | expr DIV expr    {$$ = $1 / $3;}
        | expr MOD expr    {$$ = $1 % $3;}
        | LPAREN expr RPAREN   {$$ = $2;}
        | SUB expr %prec UMINUS {$$ = -$2;}
        | NUM           {$$ = $1;}
        ;

%%

/* Define yylex function */
int yylex(void){
    int c;

    /* Skip whitespace characters */
    while ((c = getchar()) == ' ' || c == '\t')
        ;

    /* Process number tokens */
    if (c >= '0' && c <= '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUM;
    }

    /* Process operator tokens */
    switch(c) {
        case '+':
            return ADD;
        case '-':
            return SUB;
        case '*':
            return MUL;
        case '/':
            return DIV;
        case '%':
            return MOD;
        case '(':
            return LPAREN;
        case ')':
            return RPAREN;
        default:
            return -1;
    }
}

/* Define yyerror function */
void yyerror(const char* s){
    fprintf(stderr, "Error: %s\n", s);
}

/* Main function */
int main(){
    printf("Enter an arithmetic expression: \n");
    yyparse();
    return 0;
}