%{
#include <stdio.h>

// this code snippet includes a header file for a standard input-output library
// this allows us to use functions such as printf() and scanf() later on in the code.
%}

%token IDENTIFIER NUMBER

%{
// the above line declares two tokens - IDENTIFIER and NUMBER
// these will be used in the grammar rules to represent variables and numerical values
%}

%%
statement: IDENTIFIER '=' expression   { printf("The value of %s is %d\n", $1, $3); };
expression: expression '+' NUMBER       { $$ = $1 + $3; };
| expression '-' NUMBER                 { $$ = $1 - $3; };
| expression '*' NUMBER                 { $$ = $1 * $3; };
| expression '/' NUMBER                 { $$ = $1 / $3; };
| NUMBER                                { $$ = $1; };
| '-' NUMBER                           { $$ = -$2; };
| '(' expression ')'                   { $$ = $2; };

// the above rules define how expressions will be parsed and evaluated
// the first rule states that a statement consists of an identifier, an equals sign, and an expression.
// when this rule is matched, the printf() function will output the value of the identifier and the evaluated expression.
// the rest of the rules define different mathematical operations, including unary minus.
 
%%

int main() {
  yyparse(); // this function starts the parsing process
  return 0;
}

// the above code is the entry point of the program
// in this case, it calls the yyparse() function to begin the parsing process
 
int yyerror(char *s) {
  printf("%s\n", s); // this function is called when an error occurs during parsing
  return 0;
}

// the above function is used to handle any error messages during the parsing process
// in this case, it simply prints the error message to the console
 
int yylex() {
  int c = getchar(); // this function reads the next character from the input
  if (c == '=') {
    return '=';
  } else if (isdigit(c)) {
    ungetc(c, stdin); // this function places the character back into the input buffer
    scanf("%d", &yylval); // this function reads an integer from the input and assigns it to yylval
    return NUMBER;
  } else if (isalpha(c)) {
    ungetc(c, stdin);
    scanf("%s", yylval); // this function reads a string from the input and assigns it to yylval
    return IDENTIFIER;
  } else {
    return c;
  }
}

// the above function is used to scan and tokenize the input
// if the character is an equals sign, it will return the token for equals
// if it is a digit, it will return the token for a number and assign the value to yylval
// if it is a letter, it will return the token for an identifier and assign the value to yylval
// otherwise, it will return the character as is.