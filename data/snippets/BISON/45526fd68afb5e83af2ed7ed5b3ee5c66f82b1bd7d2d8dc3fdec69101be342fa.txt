%{
  // This code is executed before parsing begins
  #include <stdio.h>
  #include <string.h>

  // Define a structure to store variable names and their values
  typedef struct Variable {
    char name[10];
    int value;
  } Variable;

  // Define an array to store variables
  Variable vars[50];
  int var_counter = 0; // Variable counter

  // Function to add a variable to the array
  void add_variable(char *name, int value) {
    strcpy(vars[var_counter].name, name);
    vars[var_counter].value = value;
    var_counter++;
  }

  // Function to get the value of a variable
  int get_variable(char *name) {
    for (int i = 0; i < var_counter; i++) {
      // Check if the variable exists in the array
      if (strcmp(vars[i].name, name) == 0) {
        // If it exists, return its value
        return vars[i].value;
      }
    }
    // If the variable doesn't exist, return an error value
    return -1;
  }
%}

// Define the grammar rules
%token NUM
%token VAR
%left '+' '-'
%left '*' '/'
%nonassoc NEG

%%
  // The start symbol for the grammar
  expressions: /* empty */ { printf("No expressions entered."); }
             | expressions expression { printf("Result: %d\n", $2); }
             ;

  // Definition for an expression
  expression: NUM { $$ = $1; } // If the expression is a number, return it directly
            | VAR { $$ = get_variable($1); } // If the expression is a variable, get its value
            | expression '+' expression { $$ = $1 + $3; } // Addition
            | expression '-' expression { $$ = $1 - $3; } // Subtraction
            | expression '*' expression { $$ = $1 * $3; } // Multiplication
            | expression '/' expression { $$ = $1 / $3; } // Division
            | '-' expression %prec NEG { $$ = -$2; } // Unary minus
            ;
%%