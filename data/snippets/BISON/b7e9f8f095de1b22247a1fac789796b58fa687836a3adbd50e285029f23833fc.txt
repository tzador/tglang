/* Define the start symbol */
%start start

/* Define the grammar rules */
%%
start : expr ';'  /* top-level rule */
      | start expr ';' ;

expr  : id '=' expr  /* assignment statement */
      | expr '+' expr  /* addition operation */
      | expr '-' expr  /* subtraction operation */
      | expr '*' expr  /* multiplication operation */
      | expr '/' expr  /* division operation */
      | '(' expr ')'  /* parentheses for grouping */
      | '-' expr      /* negation operation */
      | num           /* numbers */
      | id            /* identifiers */
      ;

/* Define the token types */
id   [a-zA-Z][a-zA-Z0-9]*
num  [0-9]+

/* Define the comment delimiters */
/* start of multiline comment */
%x IN_COMMENT

%%

/* Define the range of ASCII characters */
%define ASCIIRANGE 0x01-0x7F

/* Throw error if input contains invalid characters */
%error-verbose

/* Enable verbose mode for debugging */
%define parse.error verbose

/* Ignore leading and trailing whitespace */
%skip   [ \t\n]

/* Ignore comments */
%skip   "//.*"
%skip   "/*"

/* Create an error rule */
%%
.   {
     /* Print error message and exit */
     YY_FATAL_ERROR("Invalid input");
    }