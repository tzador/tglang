%{
/* This is a BISON code snippet. */

/* Define the token type. */
%token <string> VARIABLE
%token <number> INTEGER
%token <bool> BOOLEAN

/* Declare the grammar rules. */
%start program
%%

/* Program can be any variable declaration or expression. */
program: declarations  
        | expression ;

/* Declarations can have multiple variable declarations. */
declarations: declarations declaration
            | declaration ;

/* Individual variable declaration with type and name. */
declaration: type VARIABLE ';' 
           ;

/* Types can be either int, bool or string. */
type: INTEGER | BOOLEAN | STRING ;

/* Expression can be simple or compound. */
expression: VARIABLE '=' INTEGER
          | BOOLEAN
          | VARIABLE '=' stringexp
          | stringexp ;
         
/* String expression can be addition or concatenation. */
stringexp: stringexp '+' stringexp 
         | VARIABLE ;

/* Ignore whitespace. */
%ignore ' ' ;

%%

/* Main function to start parsing. */
int main() {
    return yyparse();
}

/* Function to handle parsing errors. */
yyerror(const char *str) {
    fprintf(stderr, "Error: %s\n", str);
    exit(EXIT_FAILURE);
}
%}