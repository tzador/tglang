/* This is a BISON code snippet that generates a parser for a simple arithmetic expression */
 
%{ /* section for declaring C code and global variables */
    #include <stdio.h> /* import standard input/output library */
    int result; /* declare global variable for storing result of calculation */
%}

%token NUMBER /* declare token for numeric values */

%% /* rules section */

input: expression { /* action to perform when input rule is matched */
        result = $1; /* store the result of the expression in the global variable */
        printf("Result: %d\n", result); /* print the result */
    }
    /* empty line to indicate the end of the input rule */

expression: NUMBER               { $$ = $1; } /* rule for simple expression with just one number */
        |   expression '+' NUMBER { $$ = $1 + $3; } /* rule for adding two numbers */
        |   expression '-' NUMBER { $$ = $1 - $3; } /* rule for subtracting two numbers */
        |   expression '*' NUMBER { $$ = $1 * $3; } /* rule for multiplying two numbers */
        |   expression '/' NUMBER { /* rule for dividing two numbers with error checking */
                if($3 == 0){
                    yyerror("Cannot divide by zero");
                    YYERROR;
                }else{
                    $$ = $1 / $3;
                }
            }
            /* empty line to indicate the end of the expression rule */
             
%% /* section for declaring additional C code and functions */

/* function for handling errors during parsing */
void yyerror(const char *str){
    fprintf(stderr, "Error: %s\n", str);
}

/* main function to call the parser */
int main(){
    yyparse(); /* call the parser function */
    return 0;
}

/* function to get input from the user and feed it to the parser */
int yywrap(){
    char input[100]; /* create array to store user input */
    printf("Enter an arithmetic expression: "); /* prompt user for input */
    scanf("%s", input); /* read input from user */
    yy_scan_string(input); /* feed input to the parser */
    return 1;
}

/* function to handle when a token is encountered */
int yywrap(int type){
    switch(type){
        case NUMBER: /* if token is a number */
            printf("Number: %d\n", yyget_lval()); /* print the number */
            break;
        default:
            break;
    }
    return 1;
}