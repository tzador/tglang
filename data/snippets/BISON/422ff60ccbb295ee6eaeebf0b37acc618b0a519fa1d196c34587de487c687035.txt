%{
// This section contains the grammar definitions and other declarations
%}
//This is a comment

// Rules section
%%
// This section contains the rule definitions and actions

start: // starting rule
        statement_list
        | // OR
        // handle empty rule

statement_list: statement // first statement
        | statement_list statement // rule recursion

statement: variable_declaration // variable declaration rule
        | function_declaration // function declaration rule
        | assignment // assignment rule
        | conditional_statement // conditional statement rule
        | loop // loop rule
        | print_statement // print statement rule
        | comment // comment rule
        | error // error rule

variable_declaration: // variable declaration rule
        dataType variableName "=" value ";" { // action
                // perform actions using the matched variables
                $$ = $2 + " = " + $4 + ";\n"; // generating code snippet for variable declaration
        }
        | dataType variableName ";" {
                // perform actions for declaration without assignment
                $$ = $2 + ";\n"; // generating code for variable declaration
        }

dataType: "int" // integer data type
        | "float" // floating point data type
        | "string" // string data type
        | "bool" // boolean data type
        | "char" // character data type

variableName: // variable name rule
        identifier // allows alphanumeric and underscore characters

assignment: variable "=" value ";" { // assignment action
        // perform actions for assignment
        $$ = $1 + " = " + $3 + ";\n"; // generating code for assignment
}

conditional_statement: "if" "(" condition ")" "{" statement_list "}" {
        // conditional statement action
        $$ = "if (" + $3 + ") {\n" + $5 + "}\n"; // generating code for if statement
}
        | "if" "(" condition ")" "{" statement_list "}" "else" "{" statement_list "}" {
        // conditional statement with else action
        $$ = "if (" + $3 + ") {\n" + $5 + "} else {\n" + $8 + "}\n"; // generating code for if-else statement
}

condition: expression // conditional expression rule

expression: expression "==" expression // equality expression
        | expression "!=" expression // inequality expression
        | expression "<=" expression // less than or equal to expression
        | expression ">=" expression // greater than or equal to expression
        | expression "<" expression // less than expression
        | expression ">" expression // greater than expression
        | expression "&&" expression // logical AND expression
        | expression "||" expression // logical OR expression
        | "!" expression // logical NOT expression
        | "(" expression ")" // parentheses to group expressions
        | value // value rule

value: number // numerical value rule
        | string // string value rule
        | boolean // boolean value rule
        | variable // variable value rule

number: digit // base case for number rule
        | number digit // recursive case for number with multiple digits

string: '"' characters '"' // string rule with double quotes
        | "'" characters "'" // string rule with single quotes

characters: // characters rule
        character // base case
        | characters character // recursive case

character: // character rule
        letter // allow alphanumeric characters
        | digit // allow numerical characters
        | " " // allow spaces
        | "_" // allow underscore
        | "-" // allow hyphen
        | "!" // allow exclamation mark
        | "@" // allow at symbol
        | "#" // allow pound sign
        | "$" // allow dollar sign
        | "%" // allow percent sign
        | "^" // allow caret
        | "&" // allow ampersand
        | "*" // allow asterisk
        | "(" // allow open parenthesis
        | ")" // allow close parenthesis
        | "_" // allow underscore
        | "-" // allow hyphen
        | "+" // allow plus sign
        | "=" // allow equals sign
        | "[" // allow open square bracket
        | "]" // allow close square bracket
        | "{" // allow open curly bracket
        | "}" // allow close curly bracket
        | "|" // allow pipe
        | "\" // allow backslash
        | ":" // allow colon
        | ";" // allow semicolon
        | "'" // allow single quote
        | "," // allow comma
        | "." // allow period
        | "/" // allow forward slash
        | "?" // allow question mark
        | "<" // allow less than sign
        | ">" // allow greater than sign
        | "`" // allow backtick
        | "~" // allow tilde
        | "£" // allow pound sign
        | "¥" // allow yen sign
        | "€" // allow euro sign
        | "¢" // allow cent sign
        | "§" // allow section sign
        | "|" // allow broken bar
        | "¬" // allow not sign

letter: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" // letters rule
%%
// End of rules section

// %start symbol_id (optional)
// Defines the starting rule for the parser, if not specified, the first rule defined is used by default.

// %token token_id_1 token_id_2 token_id_3 (optional)
// Keywords or punctuation marks that will not be processed by the parser, but will be recognized as separators between rules.

// %left "+" "-" (optional)
// %right "*" (optional)
// Define the associativity and precedence of operators,
// with left being lower precedence and right being higher precedence.

// Example of using the BISON code snippet:

// input.bison contains the code:

int main() {
        int x = 5;
        float y = 3.14;
        bool z = true;
        if (x > y) {
                print("x is greater than y!");
        } else {
                y = y + 1.5;
                print("y is now " + y);
        }
        return 0;
}

// Run the BISON compiler with the following command:
// bison -d input.bison

// The generated code for the parser and lexer will be saved in input.tab.c and lex.yy.c respectively.

// To run the parser, compile the C files with a C compiler and run the executable file, passing the source code file as an argument:

// gcc input.tab.c lex.yy.c -o input_parser
// ./input_parser input.bison

// The output should be:
int main() {
        int x = 5;
        float y = 3.14;
        bool z = true;
        if (x > y) {
                printf("x is greater than y!\n");
        } else {
                y = y + 1.5;
                printf("y is now %f\n", y);
        }
        return 0;
}