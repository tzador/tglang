%%

// defines the start rule
start: expression '\n';

// defines the expression rule
expression: term '+' expression
            | term '-' expression
            | term;

// defines the term rule
term: factor '*' term
    | factor '/' term
    | factor;

// defines the factor rule
factor: '(' expression ')'
        | NUMBER;

%%

// a function to evaluate the expression
int eval(int x, int y, char op) {
    if (op == '+') return x + y;
    else if (op == '-') return x - y;
    else if (op == '*') return x * y;
    else if (op == '/') return x / y;
}

// gets next token in input
int yylex() {
    int c = getchar();
    if (c == '\n') return c;
    else if (c == '+' || c == '-' || c == '*' || c == '/') return c;
    else if (isdigit(c)) {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    else if (c == EOF) return 0;
}

// error handling function
void yyerror(char *s) {
    printf("%s\n", s);
    exit(0);
}