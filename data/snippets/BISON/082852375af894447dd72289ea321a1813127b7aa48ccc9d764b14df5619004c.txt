%{
// This code section is used to declare any needed variables or functions
// This section is only executed once per file
#include <stdio.h>

// Function to get the length of a string
int str_length(char *str) {
    int i = 0;
    while (str[i] != '\0') {
        i++;
    }
    return i;
}

// Variable to store the input string
char string[100];

// Variable to store the result of the parsing
char *result = "";

// Function to concatenate two strings
char *str_concat(char *str1, char *str2) {
    int length1 = str_length(str1);
    int length2 = str_length(str2);
    int lengthResult = length1 + length2;

    // Allocate memory for the result string
    result = (char *)malloc((lengthResult + 1) * sizeof(char));

    // Copy the first string to the result
    for (int i = 0; i < length1; i++) {
        result[i] = str1[i];
    }

    // Copy the second string to the result
    for (int i = 0; i < length2; i++) {
        result[length1 + i] = str2[i];
    }

    // Append the null terminator at the end
    result[lengthResult] = '\0';
    return result;
}
%}

// This section defines the rules for the grammar
%token <string> STRING // Defines the token for strings

%%

// This rule matches a string literal
string_literal : STRING {
    // Get the length of the string
    int length = str_length($1);
    // Remove the double quotes at the start and end of the string
    char *str = &($1[1]);
    str[length - 2] = '\0';
    
    // Concatenate the string with a predetermined prefix and suffix
    // In this case, we are adding "Hello " as the prefix and "!" as the suffix
    result = str_concat("Hello ", str);
    result = str_concat(result, "!");
    
    // Output the final result
    printf("%s", result);
};

// This rule matches the start symbol
start_symbol : string_literal ;

// This section is used to handle any errors during parsing
%error-verbose {
    fprintf(stderr, "Syntax error on line %d\n", yylineno);
    yyerrok;
 }
 
// This section is used to override the default yyerror function
// We are printing a custom error message when an error occurs during parsing
void yyerror(char *msg) {
    fprintf(stderr, "%s\n", msg);
}

%%
// This section is used to specify the main function which will call the parser
int main() {
    // Get user input and pass it to the parser
    yyin = stdin;
    yyparse();
    return 0;
}