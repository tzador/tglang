%code requires {
// Define custom type for variable
typedef struct {
    int num;
    char *name;
} variable;
}

%union {
    char *string;
    int intval;
    variable var;
}

// Declare tokens
%token <string> IDENTIFIER
%token <intval> INTEGER
%token IF ELSE WHILE

%type <intval> expr
%type <var> assignment

// Define grammar rules
%%

statements: /*empty*/ |
            statements statement
;

statement: assignment |
            IF '(' expr ')' '{' statements '}' ELSE '{' statements '}' |
            WHILE '(' expr ')' '{' statements '}'
;

// Match expressions
expr: INTEGER |
        IDENTIFIER |
        expr '*' expr |
        expr '/' expr |
        '(' expr ')' |
        '-' expr |
        '+' expr
;

// Define assignment rule
assignment: IDENTIFIER '=' expr
{
    // Create new variable struct and set values
    $$ = (variable*)malloc(sizeof(variable));
    $$->num = $3;
    $$->name = $1;
}
%%

// Main function
int main() {
    // Initialize parser
    yyparse();
    return 0;
}