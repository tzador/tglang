%skeleton "lalr1.cc" //specifies skeleton file to use for generation
%define API.LANG.C //defines the language for API generation
%code requires {
    #include <iostream> //includes iostream library for input/output
    #include <string> //includes string library for string manipulation
}
%code provides {
    void yyerror(const char* msg) { //defining function for error handling
        std::cerr << "Parsing Error: " << msg << std::endl; //prints error message
    }
}

%token<lex_value> NUMBER //token for integers
%token<lex_value> STRING //token for strings
%token<lex_value> IDENTIFIER //token for identifiers

%start Program //specifies the starting rule for parsing

%%

Program: Statements "." { //rule for Program starting with Statements followed by a period
    //code for handling successful parsing
}

Statements: Statement | Statements Statement ";" { //rule for one or more Statements separated by semicolons
    //code for handling multiple statements
}

Statement: Assignment | Expression //rule for Statement being either Assignment or Expression

Assignment: IDENTIFIER "=" Expression { //rule for assigning a value to an identifier
    //code for handling assignment
}

Expression: NUMBER | STRING | IDENTIFIER | Operation //rule for Expression being a number, string, identifier, or operation

Operation: Expression "+" Expression { //rule for performing addition operation
    //code for handling addition operation
} | Expression "-" Expression { //rule for performing subtraction operation
    //code for handling subtraction operation
} | Expression "*" Expression { //rule for performing multiplication operation
    //code for handling multiplication operation
} | Expression "/" Expression { //rule for performing division operation
    //code for handling division operation
}

%%

int main(int argc, char* argv[]) { //main function to initiate parsing
    yyparse(); //calls the parsing function
    return 0; //returns 0 for successful execution
}