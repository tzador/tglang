%{
    // This is a section for declaring variables and defining rules
    int num1, num2; // Declaring two integer variables
    %}

    // Rules section
    start : expr { // "start" rule, which calls the "expr" rule
        printf("The result is: %d\n", $1);
    }

    expr : term '+' expr { // "expr" rule, which calls itself and the "term" rule
        $$ = $1 + $3;
    }
    | term '-' expr {
        $$ = $1 - $3;
    }
    | term {
        $$ = $1;
    }

    term : factor '*' term { // "term" rule, which calls itself and the "factor" rule
        $$ = $1 * $3;
    }
    | factor '/' term {
        $$ = $1 / $3;
    }
    | factor {
        $$ = $1;
    }

    factor : '(' expr ')' { // "factor" rule, which calls the "expr" rule
        $$ = $2;
    }
    | NUM {
        $$ = $1; // NUM is a token representing a number
    }

    /* This section is for declaring operator precedence and associativity 
    %left '+' '-'
    %left '*' '/'
    %right '^'
    %nonassoc '(' // Parentheses should not be associating with any operator
    %nonassoc NUM // Number tokens have the highest precedence
    %start start // Designates the starting rule for the parser
    %token NUM // Declares NUM as a token */

    %% // End of parser specifications

    // The following code will be used to test the parser

    12 + (3 * 5) // This expression should evaluate to 27
.