%{

//This code snippet contains a basic BISON grammar and parser for simple arithmetic expressions.

#include <stdio.h> 
#include <stdlib.h>

//Defining variables for grammar rules
%token NUMBER 
%left '+' '-'
%left '*' '/'
%left UMINUS

//Syntax for arithmetic expression
%{
int yylex();
void yyerror(char *);
%}

//Rule for an expression
%%
    expression:
        expression '+' expression {$$ = $1 + $3;} //Rule for addition
        | expression '-' expression {$$ = $1 - $3;} //Rule for subtraction
        | expression '*' expression {$$ = $1 * $3;} //Rule for multiplication
        | expression '/' expression {$$ = $1 / $3;} //Rule for division
        | '-' expression %prec UMINUS {$$ = -$2;} //Rule for unary minus
        | '(' expression ')' {$$ = $2;} //Rule for parenthesis
        | NUMBER {$$ = $1;} //Rule for a number
        ;

//Function for reading input and printing result
int main() {
    printf("Enter an arithmetic expression: ");
    yyparse();
    printf("Result: %d\n", $$);
    return 0;
}

//Function for handling syntax errors
void yyerror(char *s) {
    fprintf(stderr, "Syntax error: %s\n", s);
    exit(1);
}

//Function for tokenizing input
int yylex() {
    char c;

    //Ignoring spaces and tabs
    while((c = getchar()) == ' ' || c == '\t')
        ;

    //Checking for a number
    if(c >= '0' && c <= '9') {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }

    //Checking for an operator
    if(c == '+' || c == '-' || c == '*' || c == '/')
        return c;

    //Checking for parenthesis
    if(c == '(' || c == ')')
        return c;

    //End-of-line character
    if(c == '\n')
        exit(0);

    //Error if input is invalid
    printf("Invalid input. Please try again.\n");
    exit(1);
}
%%
 
//Running the parser
int yyparse() {
    return yyparse();
}