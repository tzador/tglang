%glr-parser
%defines

%union {
  double dval;
  int ival;
  char cval;
  char *sval;
}

%token <ival> INTEGER
%token <dval> FLOAT
%token <cval> CHAR
%token <sval> STRING


%%

start: program
;

program: /* empty */
| program statement
;

statement: expression ';' { printf("Value of expression: %f\n", $$);}
| INTEGER '+' INTEGER ';' { $$ = $1 + $3; printf("Sum of integers: %d\n", $$);}
| FLOAT '*' FLOAT ';' { $$ = $1 * $3; printf("Product of floats: %f\n", $$);}
| CHAR '=' CHAR ';' { $$ = $3; printf("Value of character: %c\n", $$);}
| STRING ';' { printf("String: %s\n", $1); }
;

expression: INTEGER
| FLOAT
| '(' expression ')' { $$ = $2; }
| expression '*' expression { $$ = $1 * $3; }
| expression '/' expression { $$ = $1 / $3; }
| expression '+' expression { $$ = $1 + $3; }
| expression '-' expression { $$ = $1 - $3; }
;