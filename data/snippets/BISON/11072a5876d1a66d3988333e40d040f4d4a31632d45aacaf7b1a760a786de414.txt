/* Define the grammar rules for a simple language */

/* Define terminals */
%token <token_type> IF THEN ELSE WHILE DO END ID NUM INTEGER
%token SEMICOLON LPAREN RPAREN ASSIGN

/* Define non-terminals */
%start program
%type <node_type> expr stmt block

%% /* Rules for expressions */
expr: ID             { $$ = create_node($1, ID, NULL, NULL); }
    | NUM            { $$ = create_node($1, NUM, NULL, NULL); }
    | expr '+' expr  { $$ = create_node('+', ADD_OP, $1, $3); }
    | expr '-' expr  { $$ = create_node('-', SUB_OP, $1, $3); }
    | expr '*' expr  { $$ = create_node('*', MUL_OP, $1, $3); }
    | expr '/' expr  { $$ = create_node('/', DIV_OP, $1, $3); }
    | LPAREN expr RPAREN  { $$ = $2; }

/* Rules for statements */
stmt: ';'                   { $$ = NULL; }
    | ID ASSIGN expr ';'    { $$ = create_node($1, ASSIGN_STMT, NULL, $3); }
    | ID ASSIGN stmt ';'    { $$ = create_node($1, ASSIGN_STMT, NULL, $3); }

/* Rules for blocks */
block: IF expr THEN stmt ELSE stmt END
    | WHILE expr DO stmt END
    | DO block WHILE expr ';'

%% /* Function to create a node */
node_type create_node(char *value, int type, node_type left_child, node_type right_child) {
  node_type new_node = malloc(sizeof(struct node));
  new_node->data = value;
  new_node->type = type;
  new_node->left = left_child;
  new_node->right = right_child;

  return new_node;
}