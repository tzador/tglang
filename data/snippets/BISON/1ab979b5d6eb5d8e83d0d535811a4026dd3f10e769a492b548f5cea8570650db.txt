%{
#include <stdio.h>

/* Bison declarations */
int yylex();  /* Defined in the lexer */
void yyerror(char *s);

/* Variable declarations */
int result;    /* Holds the result of the calculation */
%}

/* Bison grammar rules */
%%
calc    : expr { printf("%d\n", $1); } ;
expr    : expr '+' term { $$ = $1 + $3; }
        | expr '-' term { $$ = $1 - $3; }
        | term { $$ = $1; }
        ;
term    : term '*' factor { $$ = $1 * $3; }
        | term '/' factor { $$ = $1 / $3; }
        | factor { $$ = $1; }
        ;
factor  : '(' expr ')' { $$ = $2; }
        | NUM { $$ = $1; }
        ;

/* Bison helper functions */
void yyerror(char *s) {
  fprintf(stderr, "%s\n", s);
}

/* Main function */
int main(void) {
  yyparse();
  return result;
}

/* Lexer function */
%x NUM
%x NEWLINE
%%

/* Regular expressions and lexer rules */
[ \t]                   ; /* Ignore whitespace */
[\n]                    { yylval = 0; return NEWLINE; }
[0-9]+                  { yylval = atoi(yytext); return NUM; }
.                       { return yytext[0]; }
%%