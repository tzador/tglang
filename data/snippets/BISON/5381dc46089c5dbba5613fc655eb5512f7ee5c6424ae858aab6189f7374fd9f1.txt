/*BISON code to define a language's syntax rules and generate a parser*/

%token <int> INTEGER //define token type for integer values
%token <string> VARIABLE //define token type for string values
%token ADD SUB MUL DIV //define token types for mathematical operators
%start S //define start symbol for grammar

%%

S: /*empty*/ //define rule for an empty statement
 | VAR_ASSIGN //rule for variable assignment statement
 | PRINT //rule for print statement
 | LOOP //rule for loop statement

VAR_ASSIGN: VARIABLE '=' EXPRESSION ';' //rule for variable assignment statement
    { printf("Value of %s is now %d\n", $1, $3); }

PRINT: 'print' '(' VARIABLE ')' ';' //rule for print statement
    { printf("Value of %s is %d\n", $3); }

LOOP: 'for' '(' VAR_ASSIGN ';' CONDITION ';' EXPRESSION ')' '{' STATEMENT '}' //rule for loop statement
    { for ($3; $5; $9) { $7; } }

EXPRESSION: INTEGER //rule for expressions to be integers
    {$$ = $1;}
    | EXPRESSION ADD EXPRESSION //rule for addition expressions
    {$$ = $1 + $3;}
    | EXPRESSION SUB EXPRESSION //rule for subtraction expressions
    {$$ = $1 - $3;}
    | EXPRESSION MUL EXPRESSION //rule for multiplication expressions
    {$$ = $1 * $3;}
    | EXPRESSION DIV EXPRESSION //rule for division expressions
    {$$ = $1 / $3;}

CONDITION: VARIABLE '>' INTEGER //rule for comparison expressions
    {$$ = $1 > $3;}
    | VARIABLE '<' INTEGER //rule for comparison expressions
    {$$ = $1 < $3;}

STATEMENT: VAR_ASSIGN //rule for statement to be variable assignment
    { printf("Value of %s is now %d\n", $1, $3); }
    | IF //rule for if statement
    | LOOP //rule for nested loops

IF: 'if' '(' CONDITION ')' '{' STATEMENT '}' //rule for if statement
    {if ($3) { $5; }}

%%