%define parse.error verbose // defining the error message for debugging purposes
%token ID // defining token for identifier
%token STRING // defining token for string value
%token NUMBER // defining token for number value

%%

program: // defining the root rule
    statements  // calling the statements rule
    | /* empty */ // handling empty input

statements: // defining the statements rule
    statement // calling the statement rule
    | statements statement // handling multiple statements

statement: // defining the statement rule
    ID '=' Expr ';' // assigning value to an identifier

Expr: // defining the Expr rule
    STRING // string literal
    | NUMBER // number literal
    | ID // identifier
    | '(' Expr ')' // handling parentheses
    | Expr '+' Expr // addition operation
    | Expr '-' Expr // subtraction operation
    | Expr '*' Expr // multiplication operation
    | Expr '/' Expr // division operation
    | '-' Expr %prec UMINUS // handling unary minus operation

%%

int main(int argc, char **argv) { // defining the main function
    yyparse(); // calling the parser
    return 0;
}

void yyerror(const char *s) { // defining the error handling function
    fprintf(stderr, "%s\n", s); // printing the error message
}

int yywrap() { // defining the wrap function
    return 1; // returning 1 to indicate the end of input
}