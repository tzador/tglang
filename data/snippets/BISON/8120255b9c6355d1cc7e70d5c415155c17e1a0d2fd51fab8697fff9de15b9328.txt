%{
    # This is a BISON code snippet that utilizes actions and conditions to generate a complex parser

    /* Actions to be performed when a particular rule is matched */
    void print_statement(const char* s) {
        printf("Statement: %s\n", s);
    }

    void print_expression(const char* s) {
        printf("Expression: %s\n", s);
    }

    void print_variable(const char* s) {
        printf("Variable: %s\n", s);
    }

    void print_value(const char* s) {
        printf("Value: %s\n", s);
    }

    /* Macros for commonly used tokens */
    %{;
        #define PLUS '+'
        #define MINUS '-'
        #define MULTIPLY '*'
        #define DIVIDE '/'
        #define EQUALS '='
        #define LBRACKET '('
        #define RBRACKET ')'
        #define SEMICOLON ';'
    %}

    /* Define the start symbol for the parser */
    %start program

    /* Define the tokens to be used in the grammar */
    %token <string> VARIABLE
    %token <string> VALUE

    /* Define the grammar rules */
    program: statement program | /* empty */;

    statement: VARIABLE EQUALS expression SEMICOLON
        { print_statement($1); };

    expression: expression PLUS term
        { print_expression($1); }
    | expression MINUS term
        { print_expression($1); }
    | term;

    term: term MULTIPLY factor
        { print_expression($1); }
    | term DIVIDE factor
        { print_expression($1); }
    | factor;

    factor: LBRACKET expression RBRACKET
        { print_expression($2); }
    | VARIABLE
        { print_variable($1); }
    | VALUE
        { print_value($1); };
%}

/* Define the rules for matching tokens */
%token <string> VARIABLE
%type <string> VALUE

%%

/* Define the grammar rules for each non-terminal and associate actions to them */
program: statement {$$ = $1;} program {$$ = $2;}
     |                 {$$ = 0;};
     
statement: VARIABLE EQUALS expression SEMICOLON 
     {print_statement($1); $$ = $3;};
     
expression: expression PLUS term 
     { $$ = $1 + $3; }
     | expression MINUS term 
     { $$ = $1 - $3; }
     | term 
     { $$ = $1; };
 
term: term MULTIPLY factor 
     { $$ = $1 * $3; }
     | term DIVIDE factor 
     { $$ = $1 / $3; }
     | factor 
     { $$ = $1; };
 
factor: LBRACKET expression RBRACKET 
     { $$ = $2; }
     | VARIABLE 
     {print_variable($1); $$ = $1;}
     | VALUE 
     {print_value($1); $$ = $1;};
     
%%