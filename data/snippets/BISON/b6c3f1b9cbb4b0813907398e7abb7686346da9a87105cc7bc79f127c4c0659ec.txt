// Define the start rule for the grammar
%start expression

// Define the terminals and non-terminals
%token NUMBER
%token PLUS
%token MINUS
%token MULTIPLY
%token DIVIDE
%token LPAREN
%token RPAREN

%%

/* Define the production rules for the grammar
   Each rule has a left-hand side (non-terminal) and a right-hand side (terminals
   and/or non-terminals)
   The %reduce directive specifies the action to be taken when a production rule
   is matched
*/
expression: NUMBER
          | expression PLUS expression  %reduce { $$ = $1 + $3; }
          | expression MINUS expression %reduce { $$ = $1 - $3; }
          | expression MULTIPLY expression  %reduce { $$ = $1 * $3; }
          | expression DIVIDE expression  %reduce { $$ = $1 / $3; }
          | LPAREN expression RPAREN
          ;

%%

/* Define the program to read input and parse it according to the grammar
   The YY_DECL macro is used to define the lexer function yylex()
*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int yylex();
void yyerror();

int main()
{
   int result;
   printf("Enter an expression to evaluate: ");
   yyparse(&result);
   printf("Result: %d\n", result);
   return 0;
}

int yylex()
{
   /* Code to scan input and tokenize it according to the predefined terminals
      and non-terminals
   */
   return tokenId;  // Return the token identifier
}

void yyerror()
{
   /* Code to handle parsing errors */
}