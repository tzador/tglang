/* Declare namespace and tokens */
%namespace "Calc"
%token INTEGER

%%
/* Define grammar rules */
calc:
    exp '\n'    | /* Check if expression ends with a new line character */
    ;
exp:
    INTEGER     | /* Match an integer */
    ID          | /* Match an identifier */
    exp '+' exp | /* Addition operation */
    exp '-' exp | /* Subtraction operation */
    exp '*' exp | /* Multiplication operation */
    exp '/' exp | /* Division operation */
    '(' exp ')' | /* Grouping operation */
    '-' exp     | /* Unary negative operation */
    '+' exp     | /* Unary positive operation */
    ;
    
/* Define rules for associativity and precedence */
%left '+', '-'
%left '*', '/'
%nonassoc UMINUS

%%
/* Code to evaluate the expression */
#include <stdio.h>
#include <stdlib.h>

/* Function to compute the value of the expression */
int calculate(Expression *exp) {
    if (exp->type == NUM) {
        /* Return the value of the number */
        return exp->value;
    } else if (exp->type == ADD) {
        /* Recursive call to evaluate the addition operation */
        return calculate(exp->left) + calculate(exp->right);
    } else if (exp->type == SUB) {
        /* Recursive call to evaluate the subtraction operation */
        return calculate(exp->left) - calculate(exp->right);
    } else if (exp->type == MUL) {
        /* Recursive call to evaluate the multiplication operation */
        return calculate(exp->left) * calculate(exp->right);
    } else if (exp->type == DIV) {
        /* Recursive call to evaluate the division operation */
        return calculate(exp->left) / calculate(exp->right);
    }
}

int main() {
    int result;
    char *input = "5+6/2*(3+4)";
    yyscan_t scanner; /* Declare scanner object */
    YY_BUFFER_STATE state; /* Declare buffer state object */
    yylex_init(&scanner); /* Initialize scanner */
    state = yy_scan_string(input, scanner); /* Create buffer from input */
    yyparse(scanner); /* Parse the input using the scanner */
    yy_delete_buffer(state, scanner); /* Delete the buffer */
    yylex_destroy(scanner); /* Destroy the scanner */
    result = calculate(exp); /* Calculate the result */
    printf("Result: %d\n", result); /* Print the result */
    return 0;
}