%{

/*This is a complex code snippet in BISON, which is a general-purpose parser generator used for constructing parsers for programming languages.*/

/*The following code defines some global variables and functions that will be used in the parser rules.*/

/*Define variable for storing integer values*/
int integerVal;

/*Define function for handling arithmetic operations*/
int arithmetic(int a, int b, char operator){
    if(operator == '+'){
        return a + b;
    }
    else if(operator == '-'){
        return a - b;
    }
    else if(operator == '*'){
        return a * b;
    }
    else{
        printf("Invalid operator\n");
        exit(1);
    }
}

/*Define function for printing the final result*/
void printResult(){
    printf("The final result is: %d\n", integerVal);
}
%}

/*Define the grammar rules for the parser*/

/*Rule for a simple arithmetic expression*/
expr: integer '+' integer {integerVal = arithmetic($1, $3, $2);}

/*Rule for a more complex arithmetic expression with nested parentheses*/
expr: '(' expr ')' '+' '(' expr ')' {integerVal = arithmetic($2, $6, $4);}

/*Declare the start symbol for the parser*/
%%
/*The following is the actual input that the parser will receive*/

1 + 2 * (3 + 4)

/*Call the parser to start parsing the input*/
parse();

/*Print the final result*/
printResult();

/*End of the code snippet*/