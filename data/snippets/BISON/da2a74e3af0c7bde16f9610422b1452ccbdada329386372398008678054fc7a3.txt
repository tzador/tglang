/* This is a BISON code snippet to parse a simple arithmetic expression */
 
%{
/* define the possible token types */
%token NUM
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
 
/* define the start and end symbols for non-terminals */
%start expression
%type <value> expression
 
/* include standard library and define value type */
%{
#include <stdio.h>
#define YYSTYPE int
%}
 
/* define the grammar rules */
 
/* the expression rule has two possibilities: a binary operation or a single number */
expression: expression PLUS expression
    | expression MINUS expression
    | expression TIMES expression
    | expression DIVIDE expression
    | NUM 
    ;
 
%%

/* function to handle the calculations based on each rule */
 
int calc(int a, int b, int operator) 
{
    switch (operator) 
    {
        case PLUS:
            return a + b;
        case MINUS:
            return a - b;
        case TIMES:
            return a * b;
        case DIVIDE:
            return a / b;
    }
}
 
/* function to print the result of the calculation */
 
void print_result(int result)
{
    printf("The result is: %d", result);
}
 
/* main function to call the parser and perform the calculation */
int main() 
{
    /* define variables for input and output */
    int result, a, b;
    /* get input from user */
    printf("Enter first number: ");
    scanf("%d", &a);
    printf("Enter second number: ");
    scanf("%d", &b);
    /* use yyparse to call the parser */
    result = yyparse();
    /* perform calculation based on the resulting value */
    result = calc(a, b, value);
    /* print the result */
    print_result(result);
    return 0;
}
 
/* define the lexer rules */
 
/* handle white space characters */
WS [ \t\r\n]+
 
/* handle numbers */
DIGIT [0-9]
NUM {DIGIT}+
 
/* handle operators */
PLUS "+"
MINUS "-"
TIMES "*"
DIVIDE "/"
%%

/* generate the appropriate code for the lexer and parser */
 
yylex()
{
        int c;
        int yytext;
 
        while ((c = input()) == ' ' || c == '\t' || c == '\n');
        if (c == EOF)
                return 0;
 
        if (c == '+') return PLUS;
        if (c == '-') return MINUS;
        if (c == '*') return TIMES;
        if (c == '/') return DIVIDE;
        if (c == '0' || c >= '1' && c <= '9') {
                unput(c);
                scanf("%d", &yytext);
        }
        else
                yytext = c;
        return yytext;
}

int yyerror(char *s) 
{
    fprintf(stderr, "%s\n", s);
    return 0;
}