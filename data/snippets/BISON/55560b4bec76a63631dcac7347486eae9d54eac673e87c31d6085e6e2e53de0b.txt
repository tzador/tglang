/* Define a grammar for arithmetic expressions */
%token NUMBER          /* Define token for numeric values */
%token PLUS MINUS TIMES DIVIDE    /* Define tokens for arithmetic operators */

%%   /* Define the productions for the grammar */

/* Production for an expression */
expression:
  expression PLUS term
  | expression MINUS term
  | term
  ;

/* Production for a term */
term:
  term TIMES factor
  | term DIVIDE factor
  | factor
  ;

/* Production for a factor */
factor:
  NUMBER
  | MINUS factor
  | LPAREN expression RPAREN  /* Production for parenthesis */
  ;

%%   /* Define the actions to be taken for each production */

/* Action for expression production */
expression:
{
  printf("Result: %d", $1 + $3);   /* Print result of the expression */
};

/* Action for term production */
term:
{
  printf("Result: %d", $1 * $3);   /* Print result of the term */
};

/* Action for factor production */
factor:
  MINUS factor
  {
    $$ = -$2;   /* Negate the value of the factor */
  }
  | LPAREN expression RPAREN
  {
    $$ = $2;   /* Bracketed expression becomes the factor */
  }
  | NUMBER    /* Has no action, just returns the value of the NUMBER token */
  {
    $$ = $1;   /* Assign the value of the NUMBER token to the factor */
  }
  ;