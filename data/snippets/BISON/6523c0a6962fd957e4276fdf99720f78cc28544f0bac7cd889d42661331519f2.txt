%{
    // This section is used for declaring global variables and including any necessary libraries
    #include <stdio.h>
    int count = 0;
%}

/* This section defines the tokens used in the program.
   <NUMBER> represents any integer value
   <ID> represents any variable name
   '+' represents the addition operator
   '*' represents the multiplication operator
   '=' represents the assignment operator
*/
%token <NUMBER> NUMBER
%token <ID> ID
%left '+'  // Define left associativity for '+' and '*' operators
%left '*'  

%%

/* This section contains the grammar rules for the program.
   The first rule is the start symbol.
   The '^' symbol represents the end of a line.
*/
program: /* empty */ | program statement '^';

/* Rule for a statement that assigns a value to a variable */
statement: ID '=' expr { printf("%s = %d^", $1, $3); count++; };

/* Rule for an expression consisting of multiple terms separated by addition operators */
expr: expr '+' term { $$ = $1 + $3; };
expr: term { $$ = $1; };

/* Rule for a term consisting of multiple factors separated by multiplication operators */
term: term '*' factor { $$ = $1 * $3; };
term: factor { $$ = $1; };

/* Rule for a factor that can be either a number or a variable */
factor: NUMBER { $$ = $1; };
factor: ID { $$ = $1; };

%%

/* This section contains any necessary C code to be executed after parsing */
int main() {
    // Scan the input and parse it according to the grammar rules
    yyparse();

    // Print the number of times a statement was processed
    printf("Number of statements processed: %d\n", count);
    return 0;
}

/* This section obtains the next token from the input */
int yywrap() {
    return 1;
}

/* This section handles errors during parsing */
void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}