%token <token> NUM		//Declares token NUM
%token <token> ADD		//Declares token ADD
%token <token> SUB		//Declares token SUB
%token <token> MUL		//Declares token MUL
%token <token> DIV		//Declares token DIV
%token <token> EXP		//Declares token EXP
%token <token> LPAREN	//Declares token LPAREN
%token <token> RPAREN	//Declares token RPAREN
%token <token> WS		//Declares token WS

%left ADD SUB			//Sets precedence for addition and subtraction
%left MUL DIV			//Sets precedence for multiplication and division
%right EXP				//Sets precedence for exponentiation

%start expression		//Sets starting rule for parser

%%						//Separates rules from actions

expression:				//Rule for expression
    NUM					//Expression can be a single number
    | expression ADD expression		//Or two expressions added together
    | expression SUB expression		//Or two expressions subtracted from each other
    | expression MUL expression		//Or two expressions multiplied together
    | expression DIV expression		//Or two expressions divided from each other
    | expression EXP expression		//Or two expressions raised to the power of each other
    | LPAREN expression RPAREN 		//Or an expression enclosed in parentheses
    ;

%%						//Separates rules from actions

expression $1 "+" $3	//Action for addition expression
    { $$ = $1 + $3; }	//Sets value of $$ to the sum of $1 and $3 (the expressions)

expression $1 "-" $3	//Action for subtraction expression
    { $$ = $1 - $3; }	//Sets value of $$ to the difference of $1 and $3 (the expressions)

expression $1 "*" $3	//Action for multiplication expression
    { $$ = $1 * $3; }	//Sets value of $$ to the product of $1 and $3 (the expressions)

expression $1 "/" $3	//Action for division expression
    { $$ = $1 / $3; }	//Sets value of $$ to the quotient of $1 and $3 (the expressions)

expression $1 "^" $3	//Action for exponentiation expression
    { $$ = pow($1, $3); }	//Sets value of $$ to $1 raised to the power of $3 (the expressions)

expression "(" $2 ")"	//Action for parentheses expression
    { $$ = $2; }		//Sets value of $$ to the expression inside the parentheses

expression NUM			//Action for number expression
    { $$ = $1; }		//Sets value of $$ to the number itself

%%						//Separates rules from actions

int main(void) {		//Start of main function
    int result;			//Declares variable for result
    yyparse();			//Calls parser to parse the input
    printf("Result: %d\n", result);	//Prints the result
    return 0;			//End of main function
}