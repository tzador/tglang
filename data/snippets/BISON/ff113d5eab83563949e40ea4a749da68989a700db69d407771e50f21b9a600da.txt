/* Defines the grammar rules for a simplified math equation */
%{
#include <stdio.h>
int result;
%}

/* Define the tokens that will be used in the grammar */
%token NUMBER /* represents a number */
%token PLUS /* represents the plus sign */
%token MINUS /* represents the minus sign */
%token TIMES /* represents the multiplication sign */
%token DIVIDE /* represents the division sign */
%token LPAREN /* represents the left parenthesis */
%token RPAREN /* represents the right parenthesis */

/* Define the non-terminals */
%nonassoc /* non-associative rules for unary minus */
%left PLUS MINUS /* left associative rules for addition and subtraction */
%left TIMES DIVIDE /* left associative rules for multiplication and division */

/* Define the start symbol */
%start equation

/* Define the grammar rules */
equation: /* represents a math equation */
    expr { result = $1; } /* evaluates the expression and assigns the result to the variable 'result' */
    ;

expr: /* represents an expression within the equation */
    expr PLUS expr { $$ = $1 + $3; } /* adds the two expressions together */
    | expr MINUS expr { $$ = $1 - $3; } /* subtracts the second expression from the first */
    | expr TIMES expr { $$ = $1 * $3; } /* multiplies the two expressions together */
    | expr DIVIDE expr { $$ = $1 / $3; } /* divides the first expression by the second */
    | MINUS expr %prec MINUS { $$ = -$2; } /* represents a negative number */
    | LPAREN expr RPAREN { $$ = $2; } /* evaluates the expression contained within the parentheses */
    | NUMBER { $$ = $1 } /* represents a single number */
    ;

%%

/* Defines a function for printing the final result */
void print_result(){
    printf("The result is: %d\n", result);
}

/* Defines the main function to take in user input and parse the equation */
int main() {
    printf("Enter a simple math equation: ");
    yyparse(); /* calls the parser to read and evaluate the input */
    print_result(); /* prints the final result */
    return 0;
}

/* Defines functions for handling errors during parsing */
void yyerror(char *s){
    fprintf(stderr, "Error: %s\n", s);
    exit(-1);
}

int yywrap(){
    return 1;
}