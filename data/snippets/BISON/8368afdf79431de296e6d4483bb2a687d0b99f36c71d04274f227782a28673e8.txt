%{
/* This is a snippet of Bison code.
   It uses an augmented grammar to calculate
   the sum of two numbers, using
   stack operations and semantic values.
   The output is an expression tree,
   which is recursively evaluated
   to obtain the sum.
*/
%}

/* Define the token types */
%token NUM
%token PLUS
%token MULT

%%

/* Define the non-terminal expressions */
expression: NUM
          | expression PLUS expression
          | expression MULT expression
          ;

%%

/* Define the function for evaluating the expression tree */
int evaluate_expression(node *expr) {
    int result;

    if (expr->type == NUM) {
        /* Base case, return the value of the node */
        result = expr->value;
    } else {
        /* Recursive case, evaluate the left and right subtrees
           and perform the corresponding operation */
        int left = evaluate_expression(expr->left);
        int right = evaluate_expression(expr->right);

        if (expr->type == PLUS) {
            result = left + right;
        } else {
            result = left * right;
        }
    }

    return result;
}

/* Specify the code for building the expression tree */
node *make_num_node(int value) {
    node *new_node = (node *)malloc(sizeof(node));
    new_node->type = NUM;
    new_node->value = value;

    return new_node;
}

node *make_op_node(int type, node *left, node *right) {
    node *new_node = (node *)malloc(sizeof(node));
    new_node->type = type;
    new_node->left = left;
    new_node->right = right;

    return new_node;
}

/* Specify the main function */
int main() {
    extern FILE *yyin;
    yyin = fopen("input.txt", "r"); // Open input file
    int result;

    /* Parse the input using the defined grammar */
    yyparse();

    /* Evaluate the expression tree and print the result */
    result = evaluate_expression(root);
    printf("The sum of the two numbers is %d\n", result);

    return 0;
}