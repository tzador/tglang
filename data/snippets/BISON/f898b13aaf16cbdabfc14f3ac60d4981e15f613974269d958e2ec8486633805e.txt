/*This code uses the BISON programming language*/

%start program /*defines the starting point of the program*/

%token <value> ID /*defining a token with a semantic value of type 'value'*/

%% /*beginning of the rules section*/

program: statement_list { /*defining a rule for the program, containing a list of statements*/
    printf("Program executed successfully!"); /*printing a message to indicate successful execution*/
};
              
statement_list: statement_list statement /*defining a rule for a list of statements, recursively adding statements to the list*/
    | statement
    ;

statement: assignment_statement /*defining a rule for an assignment statement*/
    | print_statement /*defining a rule for a print statement*/
    ;

assignment_statement: ID '=' expression { /*an assignment statement with an identifier and an expression*/
    printf("Assignment successful!");
    /*additional code to assign the value of the expression to the identifier*/
};

print_statement: 'print' expression { /*a print statement with an expression to be printed*/
    printf("Printing expression...");
    /*additional code to print the value of the expression*/
};

expression: expression '+' expression /*defining a rule for an arithmetic expression*/
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    ;

ID: [a-zA-Z]+ /*defining a rule for an identifier, which can be one or more letters*/

%% /*end of the rules section*/

void yyerror(char *s) { /*defining a function to handle parsing errors*/
    printf("Parsing error: %s",s); /*prints the error message*/
    /*additional code to handle the error and continue with parsing*/
}

int main() { /*the main function of the program*/
    yyparse(); /*calls the parser to begin parsing*/
    return 0;
}