%token ID INT REAL STRING
%start program

%%

/* Rules for program */
program:
    declarations statement {$$ = $2;} /* program contains a list of declarations followed by a statement */

/* Rules for declarations */
declarations:
    declarations declaring {$$ = $1 + " " + $2;} /* declarations contain a list of declarations followed by a declaring statement */
    |
    /* empty rule */ {$$ = "";} /* if no declarations, return empty string */

/* Rules for declaring statement */
declaring:
    type IDs ';' {$$ = $1 + " " + $2 + ";\n";} /* declaring statement consists of a type followed by a list of identifiers separated by commas and ended with semicolon */

/* Rules for type */
type:
    INT {$$ = "int";} /* type can be integer */
    | REAL {$$ = "real";} /* or real/float */
    | STRING {$$ = "string";} /* or string */

/* Rules for identifiers */
IDs:
    IDs ',' ID {$$ = $1 + ", " + $3;} /* list of identifiers separated by commas */
    |
    ID {$$ = $1;} /* single identifier */

/* Rules for statement */
statement:
    assign ';' {$$ = $1 + ";\n";} /* statement consists of an assignment followed by semicolon */

/* Rules for assignment */
assign:
    ID '=' expr {$$ = $1 + " = " + $3;} /* assignment statement assigns a value to an identifier using the equals sign */

/* Rules for expressions */
expr:
    INT {$$ = $1;} /* expressions can be just an integer */
    | REAL {$$ = $1;} /* or a real/float value */
    | ID {$$ = $1;} /* or an identifier */
    | expr '+' expr {$$ = $1 + " + " + $3;} /* or an expression consisting of two expressions separated by a plus sign */
    | expr '-' expr {$$ = $1 + " - " + $3;} /* or an expression consisting of two expressions separated by a minus sign */
    | expr '*' expr {$$ = $1 + " * " + $3;} /* or an expression consisting of two expressions separated by a multiplication sign */
    | expr '/' expr {$$ = $1 + " / " + $3;} /* or an expression consisting of two expressions separated by a division sign */
    | '(' expr ')' {$$ = "( " + $2 + " )";} /* expressions can be enclosed in parentheses for grouping purposes */
    ;

%%

int main(void) {
    yyparse(); /* calls the parser to parse the input */
    return 0;
}