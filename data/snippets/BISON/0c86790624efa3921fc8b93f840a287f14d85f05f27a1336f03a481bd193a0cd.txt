%{
    /* This is a BISON code snippet */
    #include <stdio.h>
    #include <string.h>

    /* Declare global variable */
    int result = 0;

    /* Function declarations */
    int calculate(int num1, int num2);
    void print_result();

    /* Start of main code block */
    int main() {

        /* Read user input */
        char input[100];
        fgets(input, 100, stdin);

        /* Parse input using BISON rules */
        /* Each rule is defined with a colon (:) followed by the code block */
        input: {
            /* If input is a number */
            if(isdigit(*input)) {
                /* Convert string to integer */
                int number = atoi(input);
                /* Update result variable */
                result = number;
            }
            /* If input is a mathematical expression */
            else if(*input == '+' || *input == '-' || *input == '*' || *input == '/') {
                /* Read the next input string */
                next input;
                int num1 = result;
                /* Parse the next input string */
                input;

                /* Calculate result using function */
                result = calculate(num1, result);
            }
        }

        /* Print final result */
        print_result();

        /* Exit program */
        return 0;
    }
%}

/* Define grammar rules for BISON */
%token NUMBER

%%

/* Define production rule for expression */
exp: NUMBER {
    /* Convert string to integer */
    int number = atoi($1);
    /* Update result variable */
    $$ = number;
}
/* Define production rule for mathematical expression */
| exp '+' NUMBER {
    /* Convert string to integer */
    int number = atoi($3);
    /* Calculate result using function */
    $$ = calculate($1, number);
}
/* Define production rule for mathematical expression */
| exp '-' NUMBER {
    /* Convert string to integer */
    int number = atoi($3);
    /* Calculate result using function */
    $$ = calculate($1, number);
}
/* Define production rule for mathematical expression */
| exp '*' NUMBER {
    /* Convert string to integer */
    int number = atoi($3);
    /* Calculate result using function */
    $$ = calculate($1, number);
}
/* Define production rule for mathematical expression */
| exp '/' NUMBER {
    /* Convert string to integer */
    int number = atoi($3);
    /* Calculate result using function */
    $$ = calculate($1, number);
}
;

/* Define function to calculate result */
int calculate(int num1, int num2) {
    /* Perform mathematical operation */
    int result = num1 * num2;
    return result;
}

/* Define function to print result */
void print_result() {
    /* Print result to console */
    printf("Result: %d", result);
}