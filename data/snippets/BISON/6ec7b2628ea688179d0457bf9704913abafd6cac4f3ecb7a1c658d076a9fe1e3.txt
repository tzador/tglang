%{
    // This is a header section, where you can include C code and declarations
    #include <stdio.h> // include standard input/output library
    #include <stdlib.h> // include standard library
    #define MAX_SIZE 100 // define a constant variable
%}

%union {
    // This is the union declaration section, where you can declare different types of data
    int intValue;
    double doubleValue;
    char charValue;
}

// This is the token section, where you define the different tokens your parser will recognize
%token <intValue> NUMBER // recognizes an integer value
%token <doubleValue> floatNumber // recognizes a floating point number
%token <charValue> LETTER // recognizes a single character
%token <charValue> _ // recognizes an underscore

%type <doubleValue> expression // defines the datatype for expression
%type <charValue> variableName // defines the datatype for variable names

%start program // specifies the starting rule for the parser

%%

// This is the grammar section, where you define the rules for your language
program: statementList // a program is a list of statements

statementList: statementList statement // a list of statements is a statement followed by another statement
    | /* empty */ // or it can be empty

statement: expression ';' // a statement can be an expression followed by a semicolon
    | assignment ';' // or an assignment followed by a semicolon

expression: NUMBER // an expression can be just a number
    | floatNumber // or a floating point number
    | '(' expression ')' // or an expression within parenthesis
    | expression '+' expression // or an expression followed by an addition operator and another expression
    | expression '-' expression // or an expression followed by a subtraction operator and another expression
    | expression '*' expression // or an expression followed by a multiplication operator and another expression
    | expression '/' expression // or an expression followed by a division operator and another expression

assignment: variableName '=' expression // an assignment statement is a variable name followed by an equal sign and an expression

variableName: LETTER // a variable name can be just a single letter
    | variableName LETTER // or it can be a combination of letters

%%

// The rest of the code is outside the grammar rules and is executed by the parser
int main() {
    printf("Enter an expression to be evaluated: ");
    yyparse(); // calling the parser function
    return 0;
}

void yyerror(char *error) {
    // This function is called when there is an error in the input
    fprintf(stderr, "%s\n", error);
    exit(1);
}