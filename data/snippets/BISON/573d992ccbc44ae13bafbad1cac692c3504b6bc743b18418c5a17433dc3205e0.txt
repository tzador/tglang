%{
    /* This is an introductory section where any necessary declarations or code can be added. */
    #include <stdio.h> // include standard input/output header
    int num = 5; // declare and initialize a variable 
%}

%token <num> NUMBER // define a token named NUMBER that stores the value of num

%%
    /* Here is where the grammar rules of the language are specified. */
    
    /* Define a rule for a numerical expression that can handle addition, subtraction, multiplication, and division. */
    numerical_expression: /* empty production */
    | numerical_expression '+' numerical_expression { $<num>$ = $1 + $3; } /* rule for addition */
    | numerical_expression '-' numerical_expression { $<num>$ = $1 - $3; } /* rule for subtraction */
    | numerical_expression '*' numerical_expression { $<num>$ = $1 * $3; } /* rule for multiplication */
    | numerical_expression '/' numerical_expression { $<num>$ = $1 / $3; } /* rule for division */
    | NUMBER { $<num>$ = $<num>.num; } /* if input is just a number, set the token value to the value of num variable */
    /* the $<num>$ notation represents the token value for NUMBER token */

%%
    /* Additional code can be added here, such as helper functions. */
    
    /* Define a function to print out the result of the numerical expression. */
    void print_result(int result) {
        printf("The result is %d.\n", result); // print out the result in a specified format
    }
    
    /* Define a function to handle errors. */
    void yyerror(const char* s) {
        fprintf(stderr, "%s\n", s); // print out the error message
    }
    
    /* The main function where the code starts executing. */
    int main() {
        yyparse(); // call the parser function to start parsing the input 
        print_result($1); // print out the result stored in the $1 token value 
        return 0; // return success code 
    }
    
%%
    /* Additional code can be added here, such as global variables or auxiliary rules. */
    
    /* Specify the starting rule of the grammar. */
    %start numerical_expression 
    
%% 
    /* This is an end of file section where any final code or actions can be added. */
    /* end of file */