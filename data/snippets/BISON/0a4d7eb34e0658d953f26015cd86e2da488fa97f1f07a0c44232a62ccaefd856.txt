%token INT
%{
#include <stdio.h>
#include <math.h>
%}

%%
program:
    declaration_list
    ;
declaration_list:
    declaration_list declaration
    |
    ;
declaration:
    var_declaration
    | func_declaration
    ;
var_declaration:
    type_specifier IDENTIFIER ';'
    ;
type_specifier:
    INT
    ;
func_declaration:
    type_specifier IDENTIFIER '(' params ')' compound_stmt
    ;
params:
    param_list
    ;
param_list:
    param_list ',' param
    | param
    ;
param:
    type_specifier IDENTIFIER
    ;
compound_stmt:
    '{' local_declarations statement_list '}'
    ;
local_declarations:
    local_declarations var_declaration
    |
    ;
statement_list:
    statement_list statement
    |
    ;
statement:
    expression_stmt
    | compound_stmt
    | selection_stmt
    | iteration_stmt
    | return_stmt
    ;
expression_stmt:
    expression ';'
    ;
selection_stmt:
    IF '(' expression ')' statement
    | IF '(' expression ')' statement ELSE statement
    ;
iteration_stmt:
    WHILE '(' expression ')' statement
    ;
return_stmt:
    RETURN ';'
    | RETURN expression ';'
    ;
expression:
    var '=' expression
    | simple_expression
    ;
var:
    IDENTIFIER
    ;
simple_expression:
    additive_expression relational_op additive_expression
    | additive_expression
    ;
additive_expression:
    additive_expression addop term
    | term
    ;
addop:
    '+'
    | '-'
    ;
term:
    term mulop factor
    | factor
    ;
mulop:
    '*'
    | '/'
    ;
factor:
    '(' expression ')'
    | var
    | INT
    ;
relational_op:
    '<'
    | '<='
    | '>'
    | '>='
    | '=='
    | '!='
    ;
%%
 
int main()
{
    yyparse();
    return 0;	
}

int yyerror()
{
    printf("Error in parsing.");
    return 0;
}