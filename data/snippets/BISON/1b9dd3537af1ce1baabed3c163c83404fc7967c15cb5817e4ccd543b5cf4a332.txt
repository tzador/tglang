%token <token_type> NUMBER
%token <token_type> OPERATOR
%token <token_type> IDENTIFIER
%token <token_type> KEYWORD
%token <token_type> COMMENT

%{
#include <stdio.h>
int num_tokens = 0;
int num_exprs = 0;
int num_comments = 0;
%}

%%

start: /* empty */
    | start expr '\n'
    | start comment '\n'
    ;

expr: expr OPERATOR NUMBER
    | NUMBER
    | IDENTIFIER expr
    ;

comment: COMMENT
    ;

%%

int yywrap()
{
    return 1;
}

int main(int argc, char* argv[])
{
    ++argv, --argc;
    yyin = fopen(argv[0], "r");
    yylex();
    printf("Number of tokens: %d\nNumber of expressions: %d\nNumber of comments: %d\n", num_tokens, num_exprs, num_comments);
    return 0;
}

int yylex()
{
    int ntoken;
    ntoken = yylex();
    switch(ntoken)
    {
        case OPERATOR:
            num_tokens++;
            printf("Operator: %s\n", yytext);
            break;
        case NUMBER:
            num_tokens++;
            num_exprs++;
            printf("Number: %s\n", yytext);
            break;
        case IDENTIFIER:
            num_tokens++;
            num_exprs++;
            printf("Identifier: %s\n", yytext);
            break;
        case COMMENT:
            num_tokens++;
            num_comments++;
            printf("Comment: %s\n", yytext);
            break;
        default:
            printf("Invalid token\n");
    }
    return ntoken;
}