%{
#include <stdio.h>   //includes standard input/output library

// The section above specifies the necessary header files to be included in the program
// It starts with '%' sign and contains the necessary preprocessor directives
// In this case, it includes the standard library for input/output operations
// This is necessary as we will be printing the result of our code to the console
%}

// The following section defines the tokens that will be used in our lexer
// Tokens are the smallest units of a program, they are like words in a sentence
// They are used to identify different parts of a program and give them meaning
// For example, in a simple calculator program, the tokens could be '+', '-', '/', '[', etc.

%token NUMBER   //defines a token named 'NUMBER'
%token NEWLINE  //defines a token named 'NEWLINE'
%token PLUS     //defines a token named 'PLUS'
%token MINUS    //defines a token named 'MINUS'
%token DIVIDE   //defines a token named 'DIVIDE'
%token LEFT_BRACKET  //defines a token named 'LEFT_BRACKET'
%token RIGHT_BRACKET //defines a token named 'RIGHT_BRACKET'

%start program  //defines the start of our grammar, in this case, the start symbol is 'program'

%%

program:  //this is the production rule for 'program'
    | program line   //using the '|' symbol to indicate alternative productions
    ;

line:
    | expression NEWLINE  //this production rule defines an expression followed by a new line character
    ;

expression:
    | NUMBER    //this rule defines an expression as a single number token
    | expression PLUS expression  //this rule defines an expression as an addition operation between two expressions
    | expression MINUS expression //this rule defines an expression as a subtraction operation between two expressions
    | expression DIVIDE expression //this rule defines an expression as a division operation between two expressions
    ;

%%

int main() {  //starting the main function
    yyparse();  //calling the yyparse function to start parsing the input
    return 0;
}

int yyerror(char *error) {  //this function is used to print an error message if the input does not match the grammar rules
    printf("Error: %s\n", error);  //printing the error message to the console
}

int yylex() {  //this function is used to tokenize the input
    int token = yylex();  //using the yylex function to get the next token from the input
    return token;
}