(* This code snippet computes the eigenvalues of a symmetric matrix using the Jacobi algorithm *)

(* Define the matrix A as a 3x3 symmetric matrix *)
A = {{2, -1, 0}, {-1, 3, -1}, {0, -1, 4}};

(* Initialize the identity matrix of the same size as A *)
I = IdentityMatrix[3];

(* Define the variable n as the dimension of A *)
n = Dimensions[A][[1]];

(* Define the tolerance value for convergence *)
tolerance = 0.00001;

(* Define the maximum number of iterations *)
maxIterations = 100;

(* Define the function to compute the off-diagonal elements of A *)
offDiag[i_, j_] := If[i != j, A[[i, j]], 0];

(* Define the function to compute the absolute value of a number *)
abs[x_] := If[x < 0, -x, x];

(* Initialize the iteration counter *)
k = 0;

(* Initialize the maximum off-diagonal element *)
maxOffDiag = Max[Abs[A - DiagonalMatrix[Diagonal[A]]]];

(* Iterate until the maximum off-diagonal element is smaller than the tolerance or the maximum number of iterations is reached *)
While[maxOffDiag > tolerance && k < maxIterations,

 (* Find the indices of the maximum off-diagonal element *)
 {p, q} = Flatten[Position[Abs[offDiag @@@ Subsets[Range[n], {2}]], maxOffDiag]][[1]];

 (* Compute the value of theta *)
 theta = 1/2 ArcTan[2 A[[p, q]], A[[p, p]] - A[[q, q]]];

 (* Compute the rotation matrix R *)
 R = ReplacePart[I, {p, p} -> Cos[theta], {q, q} -> Cos[theta], {p, q} -> -Sin[theta], {q, p} -> Sin[theta]];

 (* Compute the updated matrix A *)
 A = R . A . Transpose[R];

 (* Update the maximum off-diagonal element *)
 maxOffDiag = Max[Abs[A - DiagonalMatrix[Diagonal[A]]]];

 (* Increment the iteration counter *)
 k++;

(* End the iteration *)
];

(* Print the final eigenvalues of A *)
Diagonal[A]