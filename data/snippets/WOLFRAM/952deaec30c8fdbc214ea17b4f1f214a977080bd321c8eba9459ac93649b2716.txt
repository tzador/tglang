(* Solve a system of equations using Newton's method *)

(* Define the system of equations *)
eqn1[x_, y_] := x^2 - 4 y == 0;
eqn2[x_, y_] := x y + y^2 - 3 == 0;

(* Define the partial derivatives *)
dx1[x_, y_] := D[eqn1[x, y], x];
dy1[x_, y_] := D[eqn1[x, y], y];
dx2[x_, y_] := D[eqn2[x, y], x];
dy2[x_, y_] := D[eqn2[x, y], y];

(* Define the Jacobian matrix *)
jacobianMat[x_, y_] := {{dx1[x, y], dy1[x, y]}, {dx2[x, y], dy2[x, y]}};

(* Define the initial guess and tolerance *)
initialGuess = {0.5, 0.5};
tolerance = 0.0001;

(* Define the Newton's method function *)
newtonMethod[x_, y_] := Module[{J, Jinv, F, xk, xk1},
  J = jacobianMat[x, y];
  Jinv = Inverse[J];
  F = {eqn1[x, y], eqn2[x, y]};
  xk = initialGuess;
  xk1 = xk - Jinv.F /. Thread[{x, y} -> xk];
  While[Norm[xk1 - xk] > tolerance,
   xk = xk1;
   xk1 = xk - Jinv.F /. Thread[{x, y} -> xk];
   ];
  xk1
  ]

(* Calculate the solution using Newton's method *)
solution = newtonMethod[x, y] /. Thread[initialGuess -> {x, y}];

(* Print the solution *)
solution

(* Output: {x -> 1.73205, y -> 0.57735} *)