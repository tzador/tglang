(* This code snippet is an example implementation of a quicksort algorithm in Wolfram Language *)

(* Function to partition the list by selecting a pivot element and rearranging the elements around it *)
quicksortPartition[list_, low_, high_] := Module[{pivot, i, j, temp},
   pivot = list[[Floor[(low + high)/2]]];
   i = low;
   j = high;
   While[i <= j,
    While[list[[i]] < pivot,
     i++
     ];
    While[list[[j]] > pivot,
     j--
     ];
    If[i <= j,
     temp = list[[i]];
     list[[i]] = list[[j]];
     list[[j]] = temp;
     i++;
     j--;
     ]
    ];
   Return[j]
   ];

(* Function to perform quicksort recursively *)
quicksort[list_, low_, high_] := Module[{pivot},
   If[low < high,
    pivot = quicksortPartition[list, low, high];
    quicksort[list, low, pivot - 1];
    quicksort[list, pivot + 1, high];
    ]
   ];

(* Main program to call the quicksort function on a list of numbers *)
numbers = {9, 4, 7, 2, 1, 5, 8, 3, 6};
Print["Unsorted list: ", numbers];
quicksort[numbers, 1, Length[numbers]];
Print["Sorted list: ", numbers];