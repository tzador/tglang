(* This code snippet solves a system of differential equations using the 4th order Runge-Kutta method *)

(* Define the system of differential equations *)
eqns = {
  x'[t] == y[t],
  y'[t] == -x[t],
  z'[t] == x[t]^2 + y[t]^2
};

(* Specify initial conditions and range *)
ics = {x[0] == 1, y[0] == 0, z[0] == 0};
tRange = {0, 10};

(* Define the 4th order Runge-Kutta method with 1000 steps *)
rk4 = With[{h = (tRange[[2]] - tRange[[1]]) / 1000},
  NestList[
    Module[{k1, k2, k3, k4},
      k1 = h * eqns /. t -> #[[1]]; (* Calculate k1 *)
      k2 = h * eqns /. t -> #[[1]] + h/2 /. Thread[{x[t], y[t], z[t]} -> #[[2]] + k1/2]; (* Calculate k2 *)
      k3 = h * eqns /. t -> #[[1]] + h/2 /. Thread[{x[t], y[t], z[t]} -> #[[2]] + k2/2]; (* Calculate k3 *)
      k4 = h * eqns /. t -> #[[1]] + h /. Thread[{x[t], y[t], z[t]} -> #[[2]] + k3]; (* Calculate k4 *)
      {#[[1]] + h, #[[2]] + (k1 + 2 k2 + 2 k3 + k4)/6} (* Calculate new {t, {x, y, z}} values *)
    ] &, {tRange[[1]], {x[tRange[[1]]], y[tRange[[1]]], z[tRange[[1]]]}} (* Initial values *)
    , 1000]
  ];

(* Plot the solutions *)
Plot[Evaluate[{x[t], y[t], z[t]} /. rk4], {t, tRange[[1]], tRange[[2]]}, PlotRange -> All]

(* Print the final values of x, y, and z *)
Print["Final values: ", {x[tRange[[2]]], y[tRange[[2]]], z[tRange[[2]]]}];