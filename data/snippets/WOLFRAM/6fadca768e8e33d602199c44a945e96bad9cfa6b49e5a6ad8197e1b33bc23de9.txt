(*This code snippet demonstrates the process of finding the shortest path between two nodes in a directed graph using Dijkstra's algorithm*)

nodes = {A, B, C, D, E}; (*define the nodes in the graph*)
edges = {A -> B, A -> C, B -> C, B -> D, C -> D, C -> E, D -> E}; (*define the edges and their respective weights*)
startingNode = A; (*specify the starting node*)
endingNode = E; (*specify the ending node*)

(*initialize dictionaries to keep track of the shortest distance and previous node for each node*)
shortestDistance = AssociationThread[nodes, ConstantArray[âˆž, Length[nodes]]];
previousNode = AssociationThread[nodes, ConstantArray[None, Length[nodes]]];

(*set the distance of the starting node to 0*)
shortestDistance[startingNode] = 0;

(*initialize an empty queue to store visited nodes*)
queue = {};

(*loop through all the nodes*)
For[i = 1, i <= Length[nodes], i++,
    (*find the unvisited node with the shortest distance*)
    current = First@SortBy[Complement[nodes, queue], shortestDistance[#] &];

    (*if the current node is the ending node, stop the loop*)
    If[current == endingNode, Break[]];

    (*add the current node to the queue and mark it as visited*)
    AppendTo[queue, current];

    (*update the shortest distance and previous node of all the neighboring nodes*)
    neighbors = Keys[Select[edges, #[[1]] == current &]];
    For[j = 1, j <= Length[neighbors], j++,
        neighbor = neighbors[[j]];
        weight = edges[current, neighbor];
        If[shortestDistance[current] + weight < shortestDistance[neighbor],
            shortestDistance[neighbor] = shortestDistance[current] + weight;
            previousNode[neighbor] = current;
        ];
    ];
];

(*initialize an empty list to store the shortest path*)
shortestPath = {};

(*start from the ending node and backtrack through the previous nodes until reaching the starting node*)
current = endingNode;
While[current != startingNode,
    PrependTo[shortestPath, current];
    current = previousNode[current];
];
PrependTo[shortestPath, startingNode];

(*print the shortest path and its distance*)
Print["The shortest path from ", startingNode, " to ", endingNode, " is ", shortestPath, " with a distance of ", shortestDistance[endingNode]];