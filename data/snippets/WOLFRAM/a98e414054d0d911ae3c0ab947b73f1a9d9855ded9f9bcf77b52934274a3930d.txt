(* This is a function called calc that takes in two integers, x and y, and returns their sum *)
calc[x_, y_] := x + y;

(* This is a recursive function called fib that takes in an integer n and returns the nth number in the Fibonacci sequence *)
fib[n_] := Module[{prevFib, currFib, count}, prevFib = 0; currFib = 1; count = 1;
    (* Base cases for n = 0 and n = 1 *)
    If[n == 0, Return[prevFib]]; 
    If[n == 1, Return[currFib]];
    (* Recursive case to calculate the nth Fibonacci number *)
    While[count < n, 
        (* Update previous and current Fibonacci numbers *)
        prevFib = currFib; currFib = prevFib + currFib;
        count++;
    ];
    (* Return the calculated Fibonacci number *)
    Return[currFib];
];

(* This is a function called checkPrime that takes in an integer n and checks if it is a prime number *)
checkPrime[n_] := Module[{count = 0},
    (* Iterate through all numbers from 1 to n and count the number of factors for n *)
    For[i = 1, i < n+1, i++, 
        If[Mod[n, i] == 0, count++];
    ];
    (* If n has only 2 factors (1 and n), then it is prime *)
    If[count == 2, Return[True], Return[False]];
];

(* Main Program: *)
(* Take user input for two integers *)
Print["Enter two numbers:"];
num1 = Input[];
num2 = Input[];
(* Call calc function to calculate sum *)
result = calc[num1, num2];
(* Print the sum *)
Print["Sum:", result];
(* Call fib function to print out the first 10 Fibonacci numbers *)
Print["First 10 Fibonacci numbers:"];
For[i = 0, i < 10, i++,
    Print[fib[i]];
];
(* Check if num1 and num2 are prime *)
Print["Is", num1, "prime?", checkPrime[num1]];
Print["Is", num2, "prime?", checkPrime[num2]];