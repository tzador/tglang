(* Define a function that performs the Heap sort algorithm *)
heapSort[input_List] :=
Module[{arr = input, n, i},

(* Define a swap function to swap two elements in the list *)
swap[i_, j_] := Block[{temp = arr[[i]]},
arr[[i]] = arr[[j]];
arr[[j]] = temp;
];

(* Define a function to heapify the subtree rooted at index i *)
heapify[n_, i_] := Module[{largest = i, l = 2*i + 1, r = 2*i + 2},

(* Check if left child exists and is larger than root *)
If[l < n && arr[[l]] > arr[[largest]], largest = l;

(* Check if right child exists and is larger than root *)
If[r < n && arr[[r]] > arr[[largest]], largest = r;

(* If largest element is not root, then swap and heapify root *)
If[largest != i, swap[i, largest];
heapify[n, largest];
];

(* Define main function *)
heapSortHelper[n_] := Block[{},
(* Build initial heap by iterating from n/2 down to 1 *)
Do[heapify[n, i], {i, n/2, 1, -1}];
 
(* One by one extract elements from heap *)
  Do[
(* Move current root to end *)
swap[1, i];
(* Call heapify on the reduced heap *)
 heapify[i - 1, 1],
 (* End loop when all elements have been extracted *)
 {i, n, 1, -1}
];
(* Return sorted list *)
arr
];

(* Example usage *)
originalList = {9, 4, 1, 6, 8, 2};
sortedList = heapSort[originalList]
(* Output: {1, 2, 4, 6, 8, 9} *)