(* This function checks if a given integer is prime or not *)
PrimeQ[n_Integer] := Module[{isPrime = True, i = 2},
    While[i <= Sqrt[n], (* Loop through all numbers less than or equal to the square root of n *)
        If[Mod[n, i] == 0,     (* If n is divisible by the current number, it is not prime *)
            isPrime = False;   (* Set isPrime to false and break out of the loop *)
            Break[];
        ];
        i++; (* Increment i for the next iteration *)
    ];
    isPrime   (* Return the value of isPrime as the output *)
]

(* Define a list of numbers to check *)
numbers = {2, 5, 10, 17, 29, 42, 53};

(* Use the PrimeQ function to check if each number is prime or not *)
Map[PrimeQ, numbers]

(* Output: {True, True, False, True, True, False, True} *)