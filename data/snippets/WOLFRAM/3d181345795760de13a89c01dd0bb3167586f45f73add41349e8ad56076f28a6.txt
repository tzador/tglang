(* Example of complex and recursive function in Wolfram Language *)
(* This function uses tail recursion to compute the nth Fibonacci number *)

fib[n_] := fibHelp[n, 0, 1]
    (* Define fib function with one parameter n *)

fibHelp[n_, a_, b_] := If[n == 0, a, fibHelp[n-1, b, a+b]]
    (* Define helper function with three parameters n, a and b *)
    (* If n equals 0, return a, else call fibHelp with n-1, b and a+b as parameters *)
    (* This is the tail recursive implementation of Fibonacci function *)

print["Enter a number: "]
    (* Prompt user to enter a number *)

num = Input[]
    (* Store user input in num variable *)

print["The ", num, "th Fibonacci number is ", fib[num]]
    (* Print the result of calling fib function with num as the parameter *)