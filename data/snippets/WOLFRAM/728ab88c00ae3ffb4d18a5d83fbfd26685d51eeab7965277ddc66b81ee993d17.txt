(* This program solves the n-queens problem using recursive backtracking *)

(* Define a function to check if placing a queen at a given position on the board is valid *)
isValid[board_List, row_Integer, col_Integer] := {
  (* Check that the given column is not already occupied *)
  occupiedCols = Cases[board, {_, col}][[All, 1]];
  If[MemberQ[occupiedCols, row],
    Return[False]
  ];

  (* Check for diagonal attacks from the left *)
  occupiedLeftDiags = Cases[board, {r_, c_} /; c - r == col - row][[All, 1]];
  If[MemberQ[occupiedLeftDiags, row],
    Return[False]
  ];

  (* Check for diagonal attacks from the right *)
  occupiedRightDiags = Cases[board, {r_, c_} /; r + c == row + col][[All, 1]];
  If[MemberQ[occupiedRightDiags, row],
    Return[False]
  ];

  (* If all checks pass, the position is valid *)
  Return[True];
}

(* Define a function to recursively place queens on the board *)
placeQueen[board_List, row_Integer, size_Integer] := {
  (* Base case: if all queens have been placed, return the board *)
  If[row > size,
    Return[board]
  ];

  (* Loop through all columns in the current row *)
  Do[
    (* Check if placing a queen at the current position is valid *)
    If[isValid[board, row, col],
      (* If valid, place the queen and move on to the next row *)
      newBoard = Insert[board, {row, col}, row];
      result = placeQueen[newBoard, row + 1, size];
      (* If a solution is found, return it *)
      If[result =!= False,
        Return[result]
      ]
    ],
    {col, size}
  ];

  (* If no solution is found, return False *)
  Return[False];
}

(* Define a function to solve the n-queens problem *)
solveNQueens[n_Integer] := {
  (* Initialize an empty board *)
  initialBoard = ConstantArray[0, {n, n}];
  (* Pass the board to the recursive function *)
  result = placeQueen[initialBoard, 1, n];
  (* If a solution is found, print it *)
  If[result =!= False,
    Print["Solution found:"];
    Grid[result],
    Print["No solution found for n = ", n]
  ]
}

(* Call the solveNQueens function with n = 8 *)
solveNQueens[8];