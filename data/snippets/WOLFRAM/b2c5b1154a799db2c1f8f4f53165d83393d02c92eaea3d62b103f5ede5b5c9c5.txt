(* Defining a function to check if a number is prime *)
PrimeQ[n_Integer] := Module[{k},
    k = Floor[Sqrt[n]];
    Do[If[Mod[n, i] == 0, Return[False]], {i, 2, k}];
    Return[True]
];

(* Generating a list of prime numbers up to 100 *)
primes = Select[Range[100], PrimeQ];

(* Mapping a function to convert each prime number to its binary representation *)
binaryPrimes = Map[IntegerDigits[#, 2] &, primes];

(* Filtering out primes with repeated digits using a second function *)
nonRepeatingPrimes = Select[binaryPrimes, NonMatchQ[#[[1]], Repeated[#[[2]], {2, Infinity}]] &];

(* Displaying the filtered list of primes *)
nonRepeatingPrimes