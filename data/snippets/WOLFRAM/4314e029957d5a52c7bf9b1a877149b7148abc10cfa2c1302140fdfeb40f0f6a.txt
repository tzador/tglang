(* define a function to convert an integer into its prime factorization *)
PrimeFactorization[n_Integer] := Module[{pf, i, k = 2},
   pf = {};
   While[n >= k^2,
    If[Mod[n, k] == 0,
     AppendTo[pf, k];
     n = n/k,
     k++];
    i++];
   If[n > 1,
    AppendTo[pf, n]];
   pf
   ];

(* define a function to perform the Sieve of Eratosthenes algorithm for finding prime numbers *)
SieveOfEratosthenes[n_Integer] := Module[{primes, nums = Range[n], p = 2},
   nums[[Range[2, n, p]]] = 0;
   While[p < Sqrt[n],
    p = Select[nums, # > p &][[1]];
    nums[[Range[p^2, n, p]]] = 0];
   primes = Select[nums, # > 0 &];
   primes
   ];

(* define a function to find the prime factorization of a number using the Sieve of Eratosthenes *)
SievePrimeFactorization[n_Integer] := Module[{pf, primeFactors = {}, primes},
   primes = SieveOfEratosthenes[n];
   While[n > 1 && primes != {},
    For[i = Length[primes], i > 0, i--,
     If[Mod[n, primes[[i]]] == 0,
      AppendTo[primeFactors, primes[[i]]];
      n = n/primes[[i]];
      primes = Drop[primes, -1]];
     If[primes[[i]] >= Sqrt[n],
      n = 1;
      primes = {}]];
    PrimeFactorization[n]];