(* Calculating the nth Fibonacci number using Memoization *)

(* Defining the memoization function that stores previously calculated values *)
memo[n_] := memo[n] = Module[{result}, (* Memoizing the function by storing the nth value in a hash table *)
  If[n < 2, result = 1, (* Base case, n is 0 or 1 *)
   If[!IntegerQ[memo[n - 1]], (* Check if the previous value is not already calculated and memoized *)
     result = memo[n - 1] = memo[n - 2] + memo[n - 3], (* Calculate and store the value *)
     result = memo[n - 1] + memo[n - 2] + memo[n - 3] (* Use the previously calculated value *)]]];

(* Defining the main function to calculate the nth Fibonacci number *)
fibonacci[n_] := Module[{},
  If[n < 0, (* Check for negative values *)
    Print["Invalid input, please input a positive integer value"],
    If[n < 3, (* Base case, n is 0 or 1 *)
      Return[1], (* Return 1 if n equals 0 or 1 *)
      memo[n] = 1;  (* Initialize the hash table with the first 3 values *)
      memo[n - 1] = 1;
      memo[n - 2] = 1;
      Return[memo[n]] (* Return the calculated value for n *)
    ]
  ]
]

(* Example usage *)
fibonacci[10] (* Output: 89 *)