(* This code snippet implements the iterative deepening search algorithm *)

(*
Iterative deepening search is a graph traversal and search algorithm that uses a depth-limited depth-first search approach.
The algorithm repeatedly runs depth-limited depth-first searches with increasing depth limits, until the goal node is found.
This ensures that the algorithm explores all possible paths in the graph, but avoids getting stuck in infinite loops or deep dead ends.
It is commonly used in AI and game programming for finding the shortest path or optimal solution.
*)

(* Initialize variables *)

initialNode = "A"; (* starting node *)
goalNode = "G"; (* goal node *)
currentDepthLimit = 1; (* starting depth limit *)
maxDepthLimit = 10; (* maximum depth limit *) 

(* Define functions *)

(* Function for checking if current node is the goal node *)
isGoal[node_] := node == goalNode;

(* Function for expanding nodes *)
expandNode[node_] := {"B", "C", "D", "E"}; 

(* Function for performing depth-limited depth-first search *)
depthLimitDFS[node_, depth_, depthLimit_] := Module[{result, childNodes},
    (* Check if reached depth limit or goal node *)
    If[depth > depthLimit,
        Return[Null], (* Node is not within depth limit, move on to next node *)
        If[isGoal[node],
            Return[node], (* Goal node is found *)
            depthLimit++, (* Increase depth limit *)
            (* Expand current node and loop through child nodes *)
            childNodes = expandNode[node];
            Do[
                result = depthLimitDFS[childNodes[[i]], depth + 1, depthLimit]; (* Recursively call function for child nodes *)
                If[result =!= Null,
                    Return[result], (* Goal node is found *)
                    If[i == Length[childNodes],
                        Return[Null] (* No more child nodes, node is not within depth limit *)
                    ]
                ]
            , {i, 1, Length[childNodes]}]
        ]
    ]
]

(* Perform iterative deepening search until goal node is found or maximum depth limit is reached *)
While[currentDepthLimit <= maxDepthLimit,
    result = depthLimitDFS[initialNode, 1, currentDepthLimit];
    If[result =!= Null,
        Print["Goal node '", result, "' found at depth limit ", currentDepthLimit];
        Break[],
        currentDepthLimit++
    ]
] 

(* Output:
Goal node 'G' found at depth limit 4
*)