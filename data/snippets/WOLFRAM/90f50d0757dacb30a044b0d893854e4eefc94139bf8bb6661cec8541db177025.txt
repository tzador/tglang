(* This code snippet calculates the shortest path between two nodes in a directed graph using Dijkstra's algorithm *) 
(* Change the 0 values in the graph to represent the weights of the edges *)
(* Note: This implementation assumes the graph has no negative edge weights *)
(* Start by defining a function to find the vertex with the minimum distance in a given set *)
MinDistance[s_, dist_] := Module[{min = ∞, minVertex},
  For[v1 = 1, v1 <= Length[s], v1++,
    If[!MemberQ[dist, v1], Continue[]]];
    If[dist[[v1]] < min, min = dist[[v1]]; minVertex = v1];
  ];
  Return[minVertex];
];

(* Then define the main function for Dijkstra's algorithm *)
Dijkstra[source_, target_, graph_] := Module[{visited, dist, prev},
  (* Initialize all distances to infinity except the source vertex *)
  dist = Table[∞, {Length[graph]}];
  dist[[source]] = 0;
  
  (* Initialize the visited and previous array *)
  visited = {};
  prev = Table[0, {Length[graph]}];
  prev[[source]] = -1;
  
  (* Loop until all vertices have been visited *)
  While[Length[visited] < Length[graph], 
  (* Find the vertex with the minimum distance from the current set *)
  u = MinDistance[graph, dist];
  AppendTo[visited, u];
  
  (* Update the distances for the adjacent vertices of u *)
  For[v = 1, v <= Length[graph], v++,
    If[graph[[u]][[v]] != 0, 
      If[dist[[v]] > dist[[u]] + graph[[u]][[v]], 
       dist[[v]] = dist[[u]] + graph[[u]][[v]]; 
       prev[[v]] = u
    ];
  ];
  ];
  ];
  (* Now backtrack from the target vertex to find the shortest path *)
  path = {target};
  While[prev[[target]] != -1, 
  target = prev[[target]];
  PrependTo[path, target];
  ];
  Return[path];
];