(* Define a function that calculates the factorial of a number *)
factorial[x_] := If[x == 0, 1, x * factorial[x - 1]]

(* Define a function that calculates the sum of the prime factors of a number *)
primeFactorsSum[x_] := Module[{factors, sum},
  factors = FactorInteger[x][[All, 1]]; (* Extract the prime factors of x *)
  sum = Total[factors]; (* Calculate the sum of prime factors *)
  Return[sum]
]

(* Define a function that calculates the number of divisors of a number *)
divisorCount[x_] := Module[{factors, count},
  factors = FactorInteger[x][[All, 2]]; (* Extract the exponents of prime factors *)
  count = Apply[Times, factors + 1]; (* Multiply the exponents and add 1 *)
  Return[count]
]

(* Define a function that checks if a number is perfect, abundant or deficient *)
perfectNumber[x_] := Module[{sum, divisors},
  sum = primeFactorsSum[x] + 1; (* Calculate the sum of prime factors and add 1 *)
  divisors = divisorCount[x]; (* Calculate the number of divisors *)
  If[sum == x, "Perfect", (* Check if sum equals x *)
  If[sum < x, "Deficient", "Abundant"]] (* Check if sum is less than or greater than x *)
]

(* Use the functions to check if the number 28 is perfect, abundant, or deficient *)
perfectNumber[28]