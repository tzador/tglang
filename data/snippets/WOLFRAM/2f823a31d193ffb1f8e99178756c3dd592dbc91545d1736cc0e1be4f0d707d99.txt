(* This is a code snippet written in the Wolfram language *)
(* This code calculates the power of a given number using recursion *)
(* `power` function takes two parameters, the base and the exponent *)
(* `base` is the base number and `exponent`is the power to raise the base to *)
(* `lhs` and `rhs`are used to keep track of the computations *)
(* The function returns the final value of the power calculation *)

power[base_, exponent_] := Module[{lhs, rhs},
    (* Base case for recursion *)
    If[exponent == 0,
        Return[1];
    ];
    (* Recursively call `power` function to calculate the power *)
    lhs = power[base, Floor[exponent/2]];
    rhs = lhs*lhs;
    (* Check if the exponent is even or odd *)
    If[EvenQ[exponent],
        Return[rhs];
    ,
        Return[rhs*base];
    ];
]

(* Example call of the `power`function *)
power[5, 3]

(* Output: 125 *)