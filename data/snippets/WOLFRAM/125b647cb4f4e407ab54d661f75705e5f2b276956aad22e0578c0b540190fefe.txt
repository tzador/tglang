(* This is a utility function for finding the roots of a function *)
functionRoot[f_, start_, end_] := Module[
  {roots = {}, p1, p2, p, x, y},
  (* Define a helper function to check if the function changes sign *)
  signChangeQ[p1_, p2_, p_, y_] := Sign[f[p1]] != Sign[f[p2]] != Sign[y];

  (* Perform bisection until the roots are found *)
  While[roots == {},
    p = (start + end)/2;
    x = f[p];
    y = f[start];
    
    (* Check for sign change at start and midpoint and split the interval *)
    If[signChangeQ[start, p, p, x], AppendTo[roots, p]; start = p;
    ElseIf[signChangeQ[p, end, p, x], AppendTo[roots, p]; end = p;

    (* If sign does not change, move the start or end point closer to the root *)
    If[!signChangeQ[start, p, x, y], 
      start = p + (end - p) / (f[end] - f[p]) * (f[p] - f[start]);
    ElseIf[!signChangeQ[p, end, x, y],
      end = p - (p - start) / (f[p] - f[start]) * (f[end] - f[p]);
  ];

  (* Return the roots found *)
  roots
]