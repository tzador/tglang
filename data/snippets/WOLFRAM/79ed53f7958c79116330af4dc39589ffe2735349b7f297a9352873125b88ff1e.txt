(*This is a function that calculates the nth term in the Fibonacci sequence*)
Fib[n_] := Module[{a = 0, b = 1, c},
    For[i = 0, i < n, i++,
        c = a + b;
        a = b;
        b = c;
    ];
    Return[a];
];

(*This is a function that calculates the factorial of a number recursively*)
Factorial[n_] := If[n == 1, 1, n * Factorial[n - 1]];

(*This is a function that calculates the Binomial coefficient of two numbers*)
Binomial[n_, k_] := Factorial[n] / (Factorial[k] * Factorial[n - k]);

(*This is a function that calculates the nth term in the Pascal's Triangle*)
Pascal[n_] := Table[Binomial[n - 1, k], {k, 0, n - 1}];

(*This is a function that calculates the value of a polynomial at a specific x value*)
Polynomial[x_, coeffs_] := Sum[coeffs[[i]] * x^(i - 1), {i, 1, Length[coeffs]}];

(*This is a function that calculates the derivative of a polynomial*)
Derivative[x_, coeffs_] := Table[i * coeffs[[i + 1]], {i, 0, Length[coeffs] - 2}];

(*This is a recursive function that calculates the maximum value in a list*)
Max[list_] := If[Length[list] == 1, list[[1]], Max[list[[1 ;; -2]]] > list[[-1]] ? Max[list[[1 ;; -2]]] : list[[-1]]];

(*This is a function that checks if a given number is prime*)
PrimeQ[n_] := If[n == 2, True, If[n <= 1 || Mod[n, 2] == 0, False, PrimeQ[n, 3]]];

(*Helper function for PrimeQ*)
PrimeQ[n_, i_] := If[i * i > n, True, If[Mod[n, i] == 0, False, PrimeQ[n, i + 2]]];

(*This is a function that calculates the sum of two matrices*)
AddMatrices[m1_, m2_] := Table[m1[[i, j]] + m2[[i, j]], {i, 1, Length[m1]}, {j, 1, Length[m1[[1]]]}];