(* Create a function that calculates the factorial of a given number. 
This function uses pattern matching to handle both positive and negative values. 
It also checks for errors and returns an appropriate message if an error occurs. 
The function is recursive and utilizes memoization for improved performance. *)

factorial[n_Integer] := (
    (* check for errors *)
    If[n < 0, Return["Error: Factorial not defined for negative numbers."]];
    (* use memoization to store previously calculated values *)
    If[!ValueQ[factorial[n]], factorial[n] = If[n == 0, 1, n * factorial[n - 1]]];
    factorial[n]
)

(* Example usage: Calling factorial[5] will calculate and return the factorial of 5. *)