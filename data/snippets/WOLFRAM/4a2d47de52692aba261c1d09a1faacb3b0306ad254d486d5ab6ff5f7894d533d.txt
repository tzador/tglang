(*This code snippet is a Wolfram Language implementation of the Newton-Raphson method for root finding*)

(*Define the Newton-Raphson function*)
NewtonRaphson[f_, x_, x0_, maxIterations_: 10, tolerance_: 10^-6] :=
  Block[{xi = x0, xiPlus, df, iterations = 0},
  
    (*Iterate until maxIterations or if tolerance is met*)
    Do[
      (*Evaluate f at current xi*)
      fxi = f /. x -> xi;
      
      (*Evaluate the derivative of f at current xi*)
      df = D[f, x] /. x -> xi;
      
      (*Calculate the next approximation*)
      xiPlus = xi - fxi/df;
      
      (*If the absolute difference between xi and xiPlus 
      is smaller than the tolerance, exit loop*)
      If[Abs[xi - xiPlus] < tolerance, Break[]];
      
      (*Update xi and increment iterations*)
      xi = xiPlus;
      iterations++;
      
      (*If maximum iterations reached, print a warning message*)
      If[iterations == maxIterations, Print["Maximum iterations reached!"]];
    ,
      (*Loop until maxIterations is met*)
      {maxIterations}
    ];
    
    (*Return the final approximation*)
    Return[xi];
  ];

(*Example usage*)
f[x_] := x^2 - 2;
approx = NewtonRaphson[f, x, 1, 10, 10^-8];

(*Print the result*)
Print["Approximation: ", approx];

(*Output: