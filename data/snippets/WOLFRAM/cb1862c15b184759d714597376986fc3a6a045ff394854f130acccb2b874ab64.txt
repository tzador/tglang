(*This code snippet finds the shortest path between two given nodes in a graph*)

(*Function to generate a random graph with given number of vertices and edges*)
randomGraph[n_, m_] := 
 Module[{vertices, edges}, vertices = Range[n];
  edges = RandomChoice[vertices, {m, 2}];
  Graph[vertices, UndirectedEdge @@@ edges]]

(*Function to find the shortest path between two given nodes using Dijkstra's algorithm*)
findShortestPath[graph_, start_, end_] := 
 Module[{distances, previous, unvisited, current, neighbors, tentativeDistance},
  distances = Table[Infinity, {Length[VertexList[graph]]}];
  distances[[start]] = 0;
  previous = ConstantArray[Null, Length[VertexList[graph]]];
  unvisited = VertexList[graph];
  While[unvisited != {},
   current = First@MinimalBy[unvisited, distances[[#]] &];
   neighbors = VertexOutComponent[graph, current, 1];
   unvisited = Complement[unvisited, neighbors];
   tentativeDistance = distances[[current]] + 1;
   If[tentativeDistance < distances[[#]], 
      distances[[#]] = tentativeDistance; previous[[#]] = current] & /@ neighbors;
   ];
  If[distances[[end]] == Infinity,
    Return["No path found"];
    ,
    path = {end};
    previousNode = previous[[end]];
    While[previousNode != start,
     PrependTo[path, previousNode];
     previousNode = previous[[previousNode]];
     ];
    PrependTo[path, start];
    Return[path];
    ];
  ]

(*Generate a random graph with 10 vertices and 15 edges*)
graph = randomGraph[10, 15];

(*Find the shortest path between vertex 1 and vertex 10*)
path = findShortestPath[graph, 1, 10];

(*Output the shortest path in a formatted manner*)
Print["Shortest path between vertex 1 and vertex 10:"];
Graphics[Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, graph], 
 PlotLabel -> Style["Shortest Path: " <> ToString[path], 14, Bold]]