(* WOLFRAM code for generating a random undirected graph *)

(* Import necessary packages *)
Needs["RandomGraph`"]

(* Define number of vertices in graph *)
n = 10;

(* Define probability of edges between vertices *)
p = 0.2;

(* Generate random undirected graph with n vertices and probability p *)
g = RandomGraph[{n, p}, DirectedEdges -> False];

(* Plot the graph *)
GraphPlot[g]

(* Visualize the adjacency matrix of the graph *)
MatrixPlot[AdjacencyMatrix[g], ColorFunction -> "ThermometerColors"]

(* Calculate the degree of each vertex in the graph *)
DegreeCentrality[g]

(* Calculate the clustering coefficient of the graph *)
LocalClusteringCoefficient[g]

(* Calculate the shortest path between two randomly chosen vertices in the graph *)
ShortestPath[g, RandomChoice[VertexList[g]], RandomChoice[VertexList[g]]]

(* Remove a random edge from the graph *)
RemoveEdge[g, RandomChoice[EdgeList[g]]]

(* Add a new vertex to the graph *)
AddVertex[g, n+1]

(* Get the subgraph of the graph induced by the first 5 vertices *)
Subgraph[g, Take[VertexList[g], 5]]

(* Calculate the diameter of the graph *)
GraphDiameter[g]

(* Check if the graph is connected *)
ConnectedGraphQ[g]

(* Save the graph as a graphml file *)
Export["random_graph.graphml", g, "GraphML"]

(* Clear all variables *)
Clear[n, p, g]