(* Defining a function to perform the Newton-Raphson method *)
NR[x0_, func_, funcDerivative_, tolerance_] := Module[{x1},
  x1 = x0 - func[x0]/funcDerivative[x0]; (* Applying the formula for Newton's method *)
  If[Abs[x1 - x0] < tolerance, 
   Return[x1], (* Return the root if the difference between x1 and x0 is within the tolerance *)
   NR[x1, func, funcDerivative, tolerance] (* Recursively call the function with new x1 value *)
   ]
  ]

(* Defining a function to find the root of a polynomial using the Newton-Raphson method *)
FindRootNR[polynomial_, variable_, x0_, tolerance_] := Module[{func, funcDerivative},
  func = polynomial /. variable -> # &; (* Convert the polynomial expression into a function *)
  funcDerivative = func'[variable]; (* Calculate the derivative of the function *)
  NR[x0, func, funcDerivative, tolerance] (* Call the Newton-Raphson function with given inputs *)
  ]

(* Finding the root of the polynomial 3x^3 - 2x^2 + 5x + 10 = 0, starting from x = 2 with a tolerance of 0.001 *)
FindRootNR[3x^3 - 2x^2 + 5x + 10, x,  2, 0.001]
(* Output: -1.71562 *)