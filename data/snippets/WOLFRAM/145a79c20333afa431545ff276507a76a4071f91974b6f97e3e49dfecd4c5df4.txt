(*Function to generate random maze using Recursive Backtracking algorithm*)
maze[x_, y_] :=
 Module[{maze, cell, walls, stack, current, directions, next},
  maze = Table[Cell[], {x}, {y}]; (*create empty cells for maze*)
  cell = RandomInteger[{1, x}, 2]; (*select a random starting cell*)
  maze[[cell[[1]], cell[[2]]]] = Cell[state -> visited]; (*mark cell as visited*)
  walls = 
   Union[Flatten[List /@ cell + # & /@ {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}, 1]]; 
  (*create walls around cell*)
  stack = {cell}; (*add starting cell to stack*)
  While[stack != {},
   current = Last@stack; (*current cell equals last element in stack*)
   directions = RandomSample[Select[walls, # > {0, 0} && # <= {x, y} && maze[[#[[1]], #[[2]]]] === Cell[] &], 1]; 
   (*select a random direction from available walls*)
   next = current + First@directions; (*next cell equals current cell plus selected direction*)
   walls = Complement[walls, directions]; (*remove selected wall from list of walls*)
   If[0 < next[[1]] <= x && 0 < next[[2]] <= y && maze[[next[[1]], next[[2]]]] === Cell[] && next != cell, 
    (*check if next cell is within maze bounds and unvisited*)
    maze[[next[[1]], next[[2]]]] = Cell[state -> visited]; (*mark cell as visited*)
    stack = Append[stack, next]; (*add next cell to stack if conditions met*)];
   If[directions == {}, stack = Most@stack]]; (*if no available direction, remove last cell from stack*)
  maze]

(*Call function to generate a 10x10 maze*)
maze[10,10]