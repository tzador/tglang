(* This code snippet creates a function that calculates the determinant of a given square matrix *)

(* Define the function determinant with one argument, the matrix *)
determinant[matrix_] := Module[{n, det},
(* Set n equal to the number of rows or columns of the matrix *)
n = Length[matrix];

(* If the matrix is a 1x1 matrix, just return the element *)
If[n == 1, Return[matrix[[1,1]]]];

(* If the matrix is a 2x2 matrix, use the simple determinant formula and return the value *)
If[n == 2, Return[matrix[[1,1]] * matrix[[2,2]] - matrix[[2,1]] * matrix[[1,2]]];

(* If the matrix is bigger than a 2x2 matrix, then use the Laplace expansion *)
(* Define a variable to keep track of the determinant *)
det = 0;
(* Loop through the first row of the matrix *)
For[i = 1, i <= n, i++,
(* Multiply the element of the row by its cofactor and add it to the determinant *)
det = det + matrix[[1,i]] * cofactor[matrix, 1,i];
];
(* Return the final determinant *)
Return[det];
]

(* Define the function cofactor with three arguments, the matrix and the row and column of the element *)
cofactor[matrix_, row_, col_] := Module[{minor, power},
(* Use the minor of the element to calculate the signed cofactor *)
minor = minor[matrix, row, col];
(* Use the power of -1 to the sum of the row and column of the element to get the sign of the cofactor *)
power = (-1)^(row + col);
(* Multiply the minor by the power and return the cofactor *)
Return[minor * power];
]

(* Define the function minor with three arguments, the matrix and the row and column of the element *)
minor[matrix_, row_, col_] := Module[{minor},
(* Create a new matrix with the elements not in the given row and column *)
minor = Drop[Drop[matrix, {row}], None, {col}];
(* Calculate the determinant of the new matrix and return it *)
Return[determinant[minor]];
]

(* Example of calculating the determinant of a 3x3 matrix *)
matrix = {{1, -2, 3}, {4, 5, 6}, {7, 8, 9}};
determinant[matrix] (* Returns -9 *)