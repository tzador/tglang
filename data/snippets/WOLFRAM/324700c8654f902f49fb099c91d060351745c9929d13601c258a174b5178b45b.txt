(* Import necessary packages *)

(* Define function to calculate the factorial of a number *)
factorial[n_] := If[ n > 0, n * factorial[n-1], 1]

(* Define function to calculate the permutations of a set *)
permutations[set_] := 
  Flatten[(* Use NestList to create all possible combinations *)
    NestList[(* Apply Permute to each element in the set *)
      Function[{perm}, Permute[set, perm]], (* Generate all possible permutations *)
      Identity, (* Start with the unpermuted set *)
      Length[set]-1 (* Apply Permute function n-1 times *)
    ], 
  (* Return list of all permutations *)
  1]

(* Define function to print all possible combinations of numbers between a range *)
printCombos[{start_,end_}] := Module[{first, last, nums}, (* Create local variables *)
  first = Min[start, end]; (* Determine smaller number to start from *)
  last = Max[start, end]; (* Determine larger number to end at *)
  nums = Range[first, last]; (* Create list of numbers from range *)
  (* Use Tuples to create all possible combinations *)
  Tuples[nums, Length[nums]]
]

(* Sample function calls to test the code *)
factorial[5]
permutations[{1,2,3}]
printCombos[{5,3}]