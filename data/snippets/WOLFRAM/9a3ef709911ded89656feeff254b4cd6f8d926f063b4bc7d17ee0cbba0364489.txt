(* This program generates a fractal pattern using the Mandelbrot Set *)

(* Define a function to calculate the number of iterations required for a given complex number c to escape the Mandelbrot Set *)

EscapeIterations[c_] := Module[{z = 0, n = 0},
  (* Use a loop to iterate the complex number formula z = z^2 + c until it either escapes or the maximum number of iterations is reached *)
  While[Abs[z] <= 2 && n < 100,
    z = z^2 + c;
    n++;
  ];
  (* If the maximum number of iterations is reached without escaping, return 0 *)
  If[n == 100,
    0,
    n
  ]
]

(* Define the dimension and resolution of the plot *)
dimension = 1000;
resolution = 1/dimension;

(* Create a matrix of zeros with the given dimension *)
matrix = Table[0, {dimension}, {dimension}];

(* Use nested loops to iterate through each pixel and calculate the corresponding complex number *)
For[i = 1, i <= dimension, i++,
  For[j = 1, j <= dimension, j++,
    (* Convert the pixel coordinates to a complex number *)
    c = -2 + resolution*(i - 1) + resolution*(j - 1)*I;
    (* Calculate the number of iterations required for the corresponding complex number to escape the Mandelbrot Set *)
    iterations = EscapeIterations[c];
    (* If iterations is greater than 0, set the pixel value to 1, indicating it is part of the Mandelbrot Set *)
    If[iterations > 0,
      matrix[[i, j]] = 1;
    ]
  ]
]

(* Plot the matrix as a black and white image using Graphics *)
Graphics[{
  (* Set the background to white *)
  White,
  Rectangle[{0, 0}, {dimension, dimension}],
  (* Use the matrix to create a black and white image where 0 represents white and 1 represents black *)
  Raster[matrix, {{0, 0}, {dimension, dimension}}],
  (* Set the plot range to show the entire Mandelbrot Set *)
  PlotRange -> {{-2, 2}, {-2, 2}}
}]

(* Output the resulting image *)