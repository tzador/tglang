(* A simple implementation of the Sieve of Eratosthenes algorithm in Wolfram Language *)

(* First, we define our limit, which is the upper bound of the prime numbers we want to find *)
limit = 1000;

(* Next, we initialize a list of prime numbers with the first two primes *)
primeList = {2, 3};

(* We also initialize a list of non-primes using the Sieve of Eratosthenes method, where we mark off multiples of each prime already found *)
nonPrimeList = Table[False, {limit}];

(* We start our sieve by setting the first multiple of 2 (4) to True, as it is not a prime number *)
nonPrimeList[[4]] = True;

(* Then, we iterate through every number from 3 to the square root of the limit *)
For[i = 3, i <= Sqrt[limit], i++,

    (* If the current number is not marked off as a non-prime *)
    If[nonPrimeList[[i]] == False,

        (* We add it to our prime list *)
        primeList = Append[primeList, i];

        (* And mark off all multiples of that number as non-primes *)
        For[j = i^2, j <= limit, j += 2*i,
            nonPrimeList[[j]] = True;
        ];
    ];
];

(* Finally, we print the list of prime numbers found *)
primeList