(* This code snippet is written in the Wolfram language *)

(* Define a function called "fibonacci" that takes in one argument, 'n', 
   and returns the 'n'th integer in the Fibonacci sequence *)

fibonacci[n_] := Module[{a = 0, b = 1, i = 2},
  (* use Module to initialize the necessary variables for the function *)
  If[n <= 0, Return["invalid input"]; (* check for invalid input *)
  (* if n is less than or equal to 0, return an error message *)
  
  (* use While loop to iterate through 'n' numbers in the sequence *)
  While[i <= n,
    (* use AppendTo function to add the sum of the previous two numbers to the list *)
    (* use Quiet function to suppress any errors since we are only interested in the final result *)
    Quiet@AppendTo[fibSeq, a + b];
    (* swap the values of 'a' and 'b' to continue the sequence *)
    {a, b} = {b, a + b};
    i++;
  ];
  
  (* return the 'n'th integer in the sequence, which is the last element in the list *)
  Last[fibSeq];
]
)