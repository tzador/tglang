(* Define a function that checks if a given number is prime *)
PrimeQ[n_] :=
Module[{i, isPrime = True},                          (* Using Module to declare local variables *)
For[i = 2, i <= Sqrt[n], i++,                         (* Using For loop to iterate through potential divisors *)
If[Mod[n, i] == 0, isPrime = False; Break[]]];        (* If the remainder of n divided by i is 0, then n is not prime *)
isPrime];                                             (* Return the final value of isPrime *)

(* Define a function that generates a list of prime numbers up to a given limit *)
PrimeList[limit_] :=
Module[{primeList = {}},                              (* Using Module to declare local variables *)
For[i = 2, i <= limit, i++,                           (* Using For loop to iterate through numbers up to limit *)
If[PrimeQ[i], AppendTo[primeList, i]]];               (* If i is prime, add it to the primeList using AppendTo *)
primeList];                                           (* Return the final value of primeList *)

PrimeList[100]                                        (* Calling the function with a limit of 100 *)