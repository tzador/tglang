(* This code snippet is an implementation of the QuickSort algorithm in the Wolfram language *)

(* Function to recursively partition the list *)
partition[list_List, pivot_] := Module[{smaller, larger},
    smaller = Cases[list, x_/;x<pivot];
    larger = Cases[list, x_/;x>pivot];
    Join[smaller, {pivot}, larger]
]

(* Main QuickSort function *)
quickSort[list_List] := Module[{pivot},
    If[Length[list]<=1,
        (* Base case: list is already sorted *)
        Return[list],
        (* Recursive case *)
        pivot = RandomChoice[list]; (* Choose pivot randomly *)
        Return[Flatten[{quickSort[partition[list, pivot][[1;;-2]]], pivot, 
			quickSort[partition[list, pivot][[-1;;1]]]}]]
    ]
]

(* Example list to be sorted *)
list = {5, 9, 1, 3, 10, 8, 2};
(* Function call to QuickSort *)
sortedList = quickSort[list];
(* Output the sorted list *)
Print[sortedList]

(* Output:
{1, 2, 3, 5, 8, 9, 10}
*)