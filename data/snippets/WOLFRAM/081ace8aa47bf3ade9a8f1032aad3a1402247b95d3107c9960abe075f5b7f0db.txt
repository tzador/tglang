(* This code snippet generates a random directed graph with weighted edges *)
(* Define the number of vertices and edges *)
n = RandomInteger[{5, 10}];
m = RandomInteger[{10, 20}];
(* Generate a random adjacency matrix with weights *)
adjMatrix = RandomInteger[{0, 1}, {n, n}]*RandomInteger[{1, 10}, {n, n}];
(* Make the adjacency matrix upper triangular *)
adjMatrix = UpperTriangularize[adjMatrix, 1];
(* Generate a random set of vertices *)
vertices = RandomSample[Range[n]];
(* Create a graph object using the adjacency matrix *)
graph = Graph[vertices, DirectedEdge @@@ Position[adjMatrix, 1], EdgeWeight -> Flatten[adjMatrix]];
(* Randomly select a starting vertex *)
start = RandomChoice[vertices];
(* Use Dijkstra's algorithm to find the shortest paths from the starting vertex *)
paths = FindPath[graph, start, #] & /@ vertices;
(* Print the results *)
MatrixForm@Table[If[paths[[i]] != {}, 
  HoldForm[{start, "->", StringReplace[ToString[#], {", DirectedEdge[" -> " -> ", "]}" -> ""}]}], 
  {i, Length[paths]}] // ColumnForm