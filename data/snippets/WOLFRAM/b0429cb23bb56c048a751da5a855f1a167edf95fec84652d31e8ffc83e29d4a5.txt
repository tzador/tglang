(* Example code snippet in Wolfram Language *)

(* This function checks if a number is prime or not *)
primeQ[n_] := PrimeQ[n]

(* This function calculates the factorial of a given number *)
factorial[n_] := Product[i, {i, 1, n}]

(* This function finds the nth Fibonacci number *)
fib[n_] := Module[{a = 1, b = 1},
  Do[{a, b} = {b, a + b}, {n - 1}];
  a]

(* This function finds the sum of the first n terms in the harmonic series *)
harmonicSum[n_] := NSum[1/i, {i, 1, n}] 

(* This function finds the derivative of a given function *)
derivative[f_, x_] := D[f, x]

(* This code snippet shows an example of using pattern matching *)
a___ + b___ + c___ //. {b -> d, c -> e}

(* This code snippet shows an example of using pure functions *)
Select[Range[10], EvenQ]

(* This code snippet shows an example of using conditional statements *)
If[x < 0, 'Negative', 'Positive'] 

(* This code snippet shows an example of using loops *)
For[i = 0, i < 10, i++, Print[i]]

(* This code snippet shows an example of defining a matrix *)
A = {{1, 2}, {3, 4}}

(* This code snippet shows an example of finding the eigenvalues of a matrix *)
Eigenvalues[A]

(* This code snippet shows an example of defining a list *)
list = {1, 2, 3, 4, 5}

(* This code snippet shows an example of using the Map function *)
Map[f, list]

(* This code snippet shows an example of using recursion *)
fib[n_] := If[n == 0, 0, If[n == 1, 1, fib[n - 1] + fib[n - 2]]]

(* This code snippet shows an example of using complex numbers *)
sqrt2 = Sqrt[2]
(x + I*y)^2 /. x -> sqrt2 /. y -> -sqrt2

(* This code snippet shows an example of using options in a function *)
Options[f] = {Method -> 'Default', Options -> 'Default', Precision -> 'MachinePrecision'};
f[x_, OptionsPattern[]] := x^2 + OptionValue[ParticlesAsPixels]*x + OptionValue[Precision]

(* This code snippet shows an example of using associations *)
association = <|'one' -> 1, 'two'-> 2, 'three' -> 3|>

(* This code snippet shows an example of using pattern matching with associations *)
Cases[association, "one" -> n_ :> n]

(* This code snippet shows an example of using string manipulation *)
string = "Hello World!"
StringReverse[string] 
StringTake[string, 5] 

(* This code snippet shows an example of using symbolic variables *)
x + y /. {x -> 3, y -> 4}

(* This code snippet shows an example of using graphics *)
Graphics[{Red, Rectangle[{0, 0}, {1, 1}], Blue, 
  Rectangle[{1, 1}, {2, 2}]}]

(* This code snippet shows an example of using parallel computing *)
ParallelTable[Prime[i], {i, 1, 10}]

(* This code snippet shows an example of using Manipulate *)
Manipulate[Plot[Sin[a*x + b], {x, 0, 2*Pi}], {a, 0, 10}, {b, 0, 10}]