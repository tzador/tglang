(* This code calculates the first 10 prime numbers using the Sieve of Eratosthenes *)

(* Initialize constant values *)
const N = 10; (* number of primes to calculate *)
const START_VALUE = 2; (* starting value for prime number generation *)

(* Initialize arrays *)
boolArray = ConstantArray[True, START_VALUE + N - 1]; (* boolean array to track prime numbers *)
primeArray = ConstantArray[0, N]; (* array to store the calculated prime numbers *)

(* Loop through the boolean array using Sieve of Eratosthenes algorithm *)
For[i = START_VALUE, i < Sqrt[START_VALUE + N - 1], i++, 
    If[boolArray[[i]] == True, 
        For[j = i^2, j <= START_VALUE + N - 1, j += i, 
            boolArray[[j]] = False; (* set all multiples of i to False *)
        ];
    ];
];

(* Store the prime numbers in the prime array *)
count = 0; (* count variable to track the number of prime numbers found *)
For[k = START_VALUE, k <= START_VALUE + N - 1, k++, 
    If[boolArray[[k]] == True, 
        primeArray[[count + 1]] = k; (* add the prime number to the prime array *)
        count++; (* increment count variable *)
    ];
];

(* Print the first N prime numbers *)
primeArray (* output: {2, 3, 5, 7, 11, 13, 17, 19, 23, 29} *)