(* Define a function called "fibonacci" with input parameter "n" *)
fibonacci[n_] :=
    (* Check if "n" is equal to 1 or 2 *)
    If[n == 1 || n == 2,
        (* If true, return 1 *)
        1,

        (* If false, recursively call "fibonacci" with "n-1" and "n-2" *)
        fibonacci[n-1] + fibonacci[n-2]
    ]

(* Generate a list of the first 10 fibonacci numbers using "Table" function *)
Table[fibonacci[n], {n, 1, 10}]

(* Define a list of numbers to be sorted *)
numbers = {9, 3, 1, 8, 5, 4, 2, 10, 6, 7}

(* Sort the list in ascending order using "Sort" function *)
Sort[numbers]

(* Use "Cases" function to extract only the even numbers from the list *)
Cases[numbers, _?EvenQ]

(* Define a 2x2 matrix using "SparseArray" function *)
matrix = SparseArray[{{1, 1} -> 1, {1, 2} -> 2, {2, 1} -> 3, {2, 2} -> 4}]

(* Calculate the determinant of the matrix using "Det" function *)
Det[matrix]

(* Use "Plot" function to graph the function "x^2" from -1 to 1 *)
Plot[x^2, {x, -1, 1}]

(* Define a list of points to be plotted *)
points = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}}

(* Use "ListPlot" function to plot the points *)
ListPlot[points]

(* Use "Graphics" function to draw a red rectangle with coordinates (1,1) and (3,4) *)
Graphics[{Red, Rectangle[{1, 1}, {3, 4}]}