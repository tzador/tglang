(* Define a function to calculate the nth term of the Fibonacci sequence *)
fib[n_] := Module[{i, a = 0, b = 1, c},
  For[i = 1, i <= n, i++,
   c = a + b;
   a = b;
   b = c;
   ];
  Return[a];
  ]
  
(* Call the function to calculate the 10th term, store it in a variable *)
result = fib[10]

(* Print the result *)
Print[result]

(* Define a list of numbers *)
numbers = {1, 2, 3, 4, 5};

(* Use a function to map the Fibonacci function on the list *)
mapped_numbers = Map[fib, numbers];

(* Print the mapped list *)
Print[mapped_numbers]

(* Sort the mapped list in reverse order *)
sorted_numbers = Reverse[Sort[mapped_numbers]];

(* Print the sorted list *)
Print[sorted_numbers];

(* Define a table with the first 5 Fibonacci terms *)
table = Table[fib[i], {i, 1, 5}];

(* Print the table *)
Print[table];

(* Plot the first 10 Fibonacci terms *)
Plot[fib[x], {x, 1, 10}]

(* Create a function that checks if a given number is prime *)
prime[n_] := Module[{i, count = 0},
  For[i = 1, i <= n, i++,
   If[Mod[n, i] == 0,
    count++;
    ];
   ];
  If[count == 2,
   Return["Prime"],
   Return["Not Prime"]
   ];
  ]

(* Call the prime function to check if 7 is prime *)
prime[7]

(* Create a function to calculate the factorial of a number *)
factorial[n_] := Module[{i, result = 1},
  For[i = 1, i <= n, i++,
   result = result * i;
   ];
  Return[result];
  ]

(* Call the factorial function to calculate the factorial of 5, store it in a variable *)
result = factorial[5];

(* Print the result *)
Print[result];

(* Define a list of numbers *)
numbers = {1, 2, 3, 4, 5};

(* Use a function to map the factorial function on the list *)
mapped_numbers = Map[factorial, numbers];

(* Print the mapped list *)
Print[mapped_numbers];

(* Sort the mapped list in reverse order *)
sorted_numbers = Reverse[Sort[mapped_numbers]];

(* Print the sorted list *)
Print[sorted_numbers];

(* Define a function that checks if a given number is a perfect square *)
perfectSquare[n_] := Module[{square_root = Sqrt[n]},
  If[IntegerQ[square_root],
   Return["Perfect Square"],
   Return["Not a Perfect Square"]
   ];
  ]

(* Call the perfectSquare function to check if 9 is a perfect square *)
perfectSquare[9];