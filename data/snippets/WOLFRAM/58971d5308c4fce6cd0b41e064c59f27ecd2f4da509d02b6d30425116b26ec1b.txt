(* Defining a function that calculates the nth Fibonacci number *)
fib[n_Integer] := Module[{a = 1, b = 1}, 
  Do[If[i > 2, {a, b} = {b, a + b}], {i, 1, n}]; a]

(* Testing the function *)
fib[10]

(* Output: 
55 *)

(* Defining a recursive function for calculating the nth factorial *)
fact[n_Integer] := If[n == 0, 1, n*fact[n - 1]]

(* Testing the function *)
fact[5]

(* Output: 
120 *)

(* Creating a nested list and using nested Map function to square each element *)
list = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
Map[Map[#^2 &, #] &, list]

(* Output: 
 {{1, 4, 9}, {16, 25, 36}, {49, 64, 81}} *)