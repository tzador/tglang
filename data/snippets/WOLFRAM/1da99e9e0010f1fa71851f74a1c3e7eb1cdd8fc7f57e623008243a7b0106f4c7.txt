ancestor[x_, y_] := Module[
    {vertexList = {}, stack = {}, visited = {}, adjacencyList, currentVertex},
  (* This function finds the lowest common ancestor of two vertices in a graph. *)
  stack = If[x === y, {x}, {x, y}];
  While[stack != {},
    (* While the stack is not empty, pop off a vertex and check if it has been visited before. *)
    currentVertex = Last[stack];
    stack = Most[stack];
    If[!MemberQ[visited, currentVertex],
      (* If the current vertex has not been visited, add it to the visited list. *)
      visited = Append[visited, currentVertex];
      (* Get the list of adjacent vertices of the current vertex. *)
      adjacencyList = VertexOutComponent[currentVertex, graph];
      (* Check if any of the adjacent vertices are the target vertex. *)
      If[MemberQ[adjacencyList, y],
        (* If the target vertex is found, return the current vertex as the lowest common ancestor. *)
        Return[currentVertex],
        (* Otherwise, push the adjacent vertices onto the stack. *)
        stack = Join[stack, adjacencyList];
      ]
    ]
  ];
  (* If no common ancestor is found, return None. *)
  Return[None];
]