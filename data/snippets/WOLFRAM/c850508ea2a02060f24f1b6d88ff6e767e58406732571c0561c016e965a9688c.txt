(*This code snippet uses Wolfram Language*)

(*Declare a function called 'fibonacci' that takes in an integer n as an argument*)
fibonacci[n_Integer] := 

(*If n is 0, return 0. If n is 1, return 1. Otherwise, use recursion to calculate the nth term of the Fibonacci sequence*)
If[n == 0, Return[0], If[n == 1, Return[1], fibonacci[n-1] + fibonacci[n-2]]]

(*Declare a variable x and assign it the value 10*)
x = 10;

(*Print the output of the fibonacci function for x*)
Print[fibonacci[x]];

(*Declare an array containing the first 10 Fibonacci numbers*)
fibonacciArray = Table[fibonacci[i], {i, 1, 10}];

(*Print the array*)
Print[fibonacciArray];

(*Define a function called 'factorial' that takes in an integer n as an argument*)
factorial[n_Integer] := 

(*If n is 0, return 1. Otherwise, use recursion to calculate the factorial of n*)
If[n == 0, Return[1], n*factorial[n-1]];

(*Declare a variable y and assign it the value 5*)
y = 5;

(*Print the output of the factorial function for y*)
Print[factorial[y]];

(*Declare an array containing the factorials of the first 5 integers*)
factorialArray = Table[factorial[i], {i, 1, 5}];

(*Print the array*)
Print[factorialArray];