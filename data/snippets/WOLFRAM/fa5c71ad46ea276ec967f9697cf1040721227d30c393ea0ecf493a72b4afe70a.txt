(*Define function to find the nth term in Fibonacci sequence*)
Fibonacci[n_] := Module[{f1=0, f2=1},
    If[n == 1, f1, If[n == 2, f2, Fibonacci[n-1] + Fibonacci[n-2]]]]

(*Define function for calculating square root using Newton's method*)
NewtonSqrt[x_, epsilon_] := Module[{a=x, b=1, temp},
    While[Abs[a - b] > epsilon,
        temp = a;
        a = (a + b)/2;
        b = x/a;
    ];
    N[a]
]

(*Define function to calculate the area of a circle*)
CircleArea[r_] := Pi*r^2

(*Use pattern matching to define a function for solving quadratic equations*)
Quadratic[a_, b_, c_] := Module[{d = b^2 - 4*a*c},
    If[d < 0, "No real solutions", {(-b + Sqrt[d])/(2*a), (-b - Sqrt[d])/(2*a)}]
]

(*Define function to calculate factorial using recursion*)
Factorial[n_] := If[n == 0 || n == 1, 1, n*Factorial[n-1]]

(*Use NestList to generate a list of exponentially decreasing values*)
NestList[#/2 &, 100, 10]

(*Use Fold to calculate the sum of a list of numbers*)
Fold[Plus, 0, {1, 2, 3, 4, 5}]

(*Define a list of 100 random integers and use DeleteDuplicates to remove duplicates*)
list = RandomInteger[{1, 100}, 100];
DeleteDuplicates[list]

(*Use Table to generate a list of prime numbers up to 100*)
Table[Prime[n], {n, 1, 100, 1}]

(*Factor a polynomial expression*)
Factor[x^3 + 2 x^2 + x]

(*Use Map to apply a function to each element in a list*)
Map[Cos, {Pi, 3*Pi/2, 2*Pi}]