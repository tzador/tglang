(* Find the shortest path between two vertices in a directed graph using
Dijkstra's algorithm *)

(* Initialization *)
(* v: vector of vertices, d: vector of distances from starting vertex,
prev: vector of previous vertices, Q: sorted queue of vertices *)
(* s: starting vertex, t: target vertex, null: -1 for indicating no previous *)
v = Range[1, 8]; d = ConstantArray[Infinity, 8];
prev = ConstantArray[null, 8]; Q = Sort[v];

(* Set distance of starting vertex to 0 *)
d[[s]] = 0;

(* Loop while queue is not empty *)
While[Q != {},
  (* Extract vertex with minimum distance from queue *)
  u = First[Q]; Q = Rest[Q];

  (* Loop through adjacent vertices of u *)
  For[i = 1, i <= Length[v], i++,
    (* Find distance from u to v[i] *)
    (* The adjacency matrix is represented by a 2D array A *)
    a = A[[u]][[v[i]]];

    (* Update distance if shorter path is found *)
    If[d[[v[i]]] > d[[u]] + a,
      d[[v[i]]] = d[[u]] + a;
      prev[[v[i]]] = u;
    ]
  ]
]

(* Retrieve shortest path by backtracking from target vertex *)
path = {t};
u = t;
While[prev[[u]] != null,
  u = prev[[u]];
  AppendTo[path, u];
]
path = Reverse[path];

(* Print shortest path *)
Print[path];