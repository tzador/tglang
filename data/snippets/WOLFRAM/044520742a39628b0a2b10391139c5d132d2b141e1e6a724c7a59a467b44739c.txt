(* This program uses the Nelder-Mead method to find the minimum of a given multidimensional function *)
(* Define the function to be minimized*)
func[x_] := (x[[1]] - 1)^2 + (x[[2]] - 2)^2 + (x[[3]] - 3)^2;
(* Initialize important variables *)
n = 3; (* number of dimensions *)
phi = 1; (* expansion coefficient *)
chi = 0.5; (* contraction coefficient *)
psi = 0.5; (* shrinkage coefficient *)
(* Initialize simplex matrix *)
simplex = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}};
(* Define function to calculate the centroid of a simplex *)
centroid[simplex_] := Mean[simplex];
(* Define function to reflect a point about the centroid *)
reflect[point_, centroid_] := centroid + phi * (centroid - point);
(* Define function to expand a point away from the centroid *)
expand[point_, centroid_] := centroid + psi * (point - centroid);
(* Define function to contract a point towards the centroid *)
contract[point_, centroid_] := centroid + chi * (point - centroid);
(* Define function to shrink a simplex towards the best point *)
shrink[simplex_, best_] := psi * (simplex - best);
(* Main loop *)
Do[
  (* Sort the current simplex *)
  simplex = Sort[simplex, func[#1] < func[#2] &];
  (* Calculate centroid *)
  centroid = centroid[simplex];
  (* Reflect worst point *)
  reflected = reflect[simplex[[-1]], centroid];
  (* Check if reflected point is better than the second worst point *)
  If[func[reflected] < func[simplex[[-2]]],
    (* Expand reflected point *)
    expanded = expand[reflected, centroid];
    (* Replace worst point with expanded point if it is better *)
    If[func[expanded] < func[reflected],
      simplex[[-1]] = expanded;
      Continue[];
    ],
    (* Check if reflected point is better than the best point *)
    If[func[reflected] < func[simplex[[1]]],
      simplex[[-1]] = reflected;
      Continue[];
    ]
  ];
  (* Contract worst point towards the centroid *)
  contracted = contract[simplex[[-1]], centroid];
  (* Check if contracted point is better than the worst point *)
  If[func[contracted] < func[simplex[[-1]]],
    simplex[[-1]] = contracted;
    Continue[];
  ];
  (* Shrink the simplex towards the best point *)
  simplex = shrink[simplex, simplex[[1]]];
, {n}];
(* Print the resulting simplex *)
Print[simplex];