(* This is a function that calculates the nth Fibonacci number using memoization *)
(* Memoization is a technique for improving the performance of recursive functions *)

(* First, we define a global variable to store the already calculated Fibonacci numbers *)
fibMemo = {};

(* Next, we create our Fibonacci function with one input variable n *)
Fibonacci[n_] :=
    (
        (* If the n-th Fibonacci number is already stored in our memo, simply return it *)
        If[KeyExistsQ[fibMemo, n], Return[fibMemo[n]], 

        (* Otherwise, calculate the n-th Fibonacci number using a recursive formula *)
        fibMemo[n] = Fibonacci[n - 1] + Fibonacci[n - 2];
        Return[fibMemo[n]];
    );

(* Finally, we call the Fibonacci function with a given input value of n *)
Fibonacci[10] (* Output: 55 *)