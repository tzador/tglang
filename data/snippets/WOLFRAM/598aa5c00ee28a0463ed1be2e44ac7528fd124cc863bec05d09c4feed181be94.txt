(* This code snippet demonstrates how to implement a Dijkstra's algorithm in Wolfram Language *)

(* Initialize graph vertices and edges *)
vertices = {"A", "B", "C", "D", "E"};
edges = {{"A", "B", 5}, {"A", "C", 9}, {"B", "C", 2}, {"C", "D", 3}, {"D", "E", 10}};

(* Define helper functions for graph manipulation *)
getNeighbors[vertex_, edges_] := Select[edges, #[[1]] == vertex || #[[2]] == vertex &][[All, {1, 2}]];
getDistance[vertex1_, vertex2_, edges_] := Select[edges, (#[[1]] == vertex1 && #[[2]] == vertex2) || (#[[1]] == vertex2 && #[[2]] == vertex1) &][[1, 3]];
updateDistance[vertex1_, vertex2_, distance_, distances_] := ReplacePart[distances, Position[distances, vertex2, 1, 1][[1]], {vertex1, distance}];

(* Initialize starting vertex and distances list *)
start = "A";
distances = Table[{vertex, Infinity}, {vertex, vertices}] /. {start, 0};

(* Create priority queue to track vertices to be visited *)
queue = CreateDataStructure["PriorityQueue"];
Enqueue[queue, distances, 0, 1];

(* Loop until all vertices are visited or no more vertices can be relaxed *)
While[!EmptyQ[queue] && Min[distances[[All, 2]]] != Infinity,
  current = First[Dequeue[queue]]; (* Pop next vertex with minimum distance from queue *)
  neighbors = getNeighbors[current[[1]], edges];
  
  (* Relax distances of unvisited neighbors *)
  DistanceToCurrent = current[[2]];
  For[i = 1, i <= Length[neighbors], i++,
    neighbor = neighbors[[i]];
    neighborDistance = getDistance[current[[1]], neighbor, edges] + DistanceToCurrent;
    distances = updateDistance[current[[1]], neighbor, neighborDistance, distances];
    currentDistance = distances[[Position[distances, neighbor, 1, 1][[1]], 2]];
    
    (* Update priority queue if distance to neighbor has decreased *)
    If[neighborDistance < currentDistance,
      Enqueue[queue, distances, neighborDistance, Position[distances, neighbor, 1, 1][[1]]]
    ]
  ]
]

(* Print shortest paths from starting vertex to all other vertices *)
Print["Shortest paths from ", start, ":"];
TableForm[distances, TableHeadings -> {None, {"Vertex", "Distance"}}]