(* Creates a function that will return the number of unique ways to pick k elements from a list of n elements *)

nchoosek = 10; (* Number of elements in list *)
kpick = 3; (* Number of elements to pick *)

(* Function definition with pattern matching for different cases and recursive calculation *)
numUniqueWays[list_, 0] := 1; (* Base case when k = 0, there is only one way to pick 0 elements *)
numUniqueWays[list_, k_] := If[k > Length[list], 0, (* If k is greater than the length of the list, there are no ways to pick *)
  numUniqueWays[Rest[list], k] + (* Recursive call with the first element of the list removed *)
   numUniqueWays[Rest[list], k - 1] (* Recursive call with the first element of the list included *)
 ]; 

(* Generate list of numbers from 1 to n *)
list = Range[nchoosek]; 

(* Call function to get number of unique ways *)
numWays = numUniqueWays[list, kpick]; 

(* Output result *)
OutputForm["The number of unique ways to pick " <> ToString[kpick] <> " elements from " <> ToString[nchoosek] <> " elements is: " <> ToString[numWays] <> "."]

(* Output: The number of unique ways to pick 3 elements from 10 elements is: 120. *)