(* Demonstration of the Gauss-Jordan elimination algorithm *)

(* Define a function for the algorithm *)
GaussJordanElimination[A_] := Module[
  {
    m = Length[A], 
    n = Length[A[[1]]], 
    pivot, 
    row
  },

  (* Loop through all rows *)
  For[i = 1, i <= m, i++,
  
    (* Find pivot element *)
    pivot = A[[i, i]];
    
    (* Check if pivot is zero, if yes, swap with a non-zero element from a lower row *)
    If[pivot == 0,
    
      (* Loop through rows below the current row *)
      For[j = i + 1, j <= m, j++,
      
        (* Check if element in the pivot column is non-zero *)
        If[A[[j, i]] != 0,
          
          (* Swap rows *)
          {A[[i]], A[[j]]} = {A[[j]], A[[i]]};
          
          (* Update pivot element *)
          pivot = A[[i, i]];
          
          (* Break from loop *)
          Break;
        ]
      ]
    ];
    
    (* Divide pivot row by pivot element *)
    A[[i]] = A[[i]] / pivot;
    
    (* Reduce other rows using the pivot row *)
    For[k = 1, k <= m, k++,
      If[k != i,
      
        (* Multiply pivot row by factor and subtract from current row *)
        A[[k]] = A[[k]] - A[[k, i]] * A[[i]];
      ]
    ]
  ];
  
  (* Return the reduced matrix *)
  A
]

(* Test the algorithm *)
A = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
GaussJordanElimination[A]

(* Output:
{{1, 0, 0}, {0, 1, 0}, {-3.33067*10^{{-16}, {-1.33227*10^{{-15}, {1, 0, 0}}}}}} *)