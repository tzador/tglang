(* Defines a function for checking if a number is prime *)
PrimeQ[n_Integer] := Module[{i = 2}, While[i * i <= n, If[Mod[n, i] == 0, Return[False]]; i++]; True]

(* Generates a list of the first 10 prime numbers *)
primeList = Select[Range[2, 50], PrimeQ][[1 ;; 10]]

(* Defines a function for generating the nth Fibonacci number recursively *)
Fibonacci[n_Integer] := If[n <= 1, 1, Fibonacci[n - 1] + Fibonacci[n - 2]]

(* Calculates the sum of the first 50 Fibonacci numbers *)
FibonacciSum = Sum[Fibonacci[n], {n, 1, 50}]

(* Uses ListPlot to visualize the generated Fibonacci sequence *)
ListPlot[Table[Fibonacci[n], {n, 1, 20}], AxesLabel -> {"nth term", "Fibonacci number"}]