(* Function to calculate the nth Fibonacci number using recursion *)
Fibonacci[n_Integer] := If[n <= 0, 0, If[n == 1, 1, Fibonacci[n - 1] + Fibonacci[n - 2]]]

(* Function to calculate the sum of even numbers in a list *)
SumOfEven[list_List] := Module[{sum = 0}, Do[If[EvenQ[list[[i]]], sum += list[[i]]], {i, Length[list]}]; sum]

(* Generate a list of 100 random integers between 1 and 100 *)
randomList = RandomInteger[{1, 100}, 100]

(* Square each element in the list *)
squaredList = Map[#^2 &, randomList]

(* Filter the list to only contain even numbers *)
evenList = Select[randomList, EvenQ]

(* Calculate the nth Fibonacci number for each element in the even list *)
fibonacciList = Map[Fibonacci, evenList]

(* Calculate the sum of all the elements in the fibonacciList *)
totalSum = Total[fibonacciList]

(* Print out the total sum in a formatted string *)
Print["The total sum of the nth Fibonacci numbers for the even elements in the random list is " <> ToString[totalSum] <> "."]