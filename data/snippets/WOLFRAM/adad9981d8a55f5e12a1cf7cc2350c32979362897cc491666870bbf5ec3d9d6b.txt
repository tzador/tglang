(* This code snippet generates a random graph using the Barabasi-Albert model *)

(* Define the number of nodes in the graph *)
n = 20;

(* Generate a list of initial nodes with one edge each *)
nodes = Table[Table[{i, i + 1}, {i, 1, n - 1}], {j, 1, 1}];

(* Initialize the degree of each node *)
degreeList = Table[1, {i, 1, n}];

(* Define the attachment parameter *)
m = 5;

(* Loop to add m nodes to the graph *)
For[i = n + 1, i <= n + m, i++, 
    (* Initialize the list of possible nodes to attach *)
    attachNodes = {};
    (* Randomly select m nodes to attach *)
    For[j = 1, j <= m, j++, 
        (* Randomly select a node from the existing graph *)
        randomNode = RandomInteger[{1, n + j - 1}];
        (* Check if the node has already been attached *)
        If[FreeQ[attachNodes, randomNode], 
            (* Add new edge between randomNode and i *)
            AppendTo[nodes[[j]], {randomNode, i}];
            (* Update the degree of randomNode and i *)
            degreeList[[randomNode]]++;
            degreeList[[i]]++;
            (* Add randomNode to the list of nodes to attach *)
            AppendTo[attachNodes, randomNode];
        ]
    ]
    (* Update the number of nodes in the graph *)
    n++;
];

(* Print the generated graph *)
GraphPlot[Flatten[nodes], VertexLabels -> "Name", DirectedEdges -> False, 
    VertexLabelStyle -> Directive[FontFamily -> "Calibri", FontSize -> 16], 
    EdgeStyle -> Directive[Opacity[0.5], Thin], VertexStyle -> Black, 
    ImageSize -> 700, VertexSize -> 0.7, ImagePadding -> 40, 
    EdgeShapeFunction -> "CurvedArc"]