(*Define a recursive function that calculates the Fibonacci sequence*)
Fibonacci[n_] := If[n <= 2, 1, Fibonacci[n - 1] + Fibonacci[n - 2]]

(*Generate a list of the first 10 Fibonacci numbers*)
fibList = Table[Fibonacci[n], {n, 1, 10}]

(*Use a pure function to print the squared values of the Fibonacci numbers*)
Print /@ (#^2 &) /@ fibList

(*Define an infinite iterator that generates the next number in the Fibonacci sequence*)
nextFib[n_] := Module[{k, new},
  k = n;
  new = n + k;
  Iterator[Unevaluated[new], nextFib[new]]
]

(*Use the iterator to generate the next 10 numbers in the Fibonacci sequence*)
fibIterator = nextFib[1];
Table[fibIterator(), {10}]

(*Create a function that evaluates a mathematical expression using the Fibonacci sequence*)
FibEval[expr_] := Module[{lst},
  lst = Cases[expr, _Fibonacci, Infinity];
  Replace[expr, Thread[lst -> (Fibonacci /@ Range[Length[lst]])], Infinity]
]

(*Evaluate an expression containing Fibonacci numbers*)
FibEval[Cos[Fibonacci[2] + Fibonacci[1]]]