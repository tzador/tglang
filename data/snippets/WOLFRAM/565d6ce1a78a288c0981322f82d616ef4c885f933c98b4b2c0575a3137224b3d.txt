(* This code snippet solves the "knapsack problem" using dynamic programming *)

(* Define the items to be included in the knapsack *)
items = {{1, 2}, {4, 6}, {3, 5}, {2, 3}};

(* Define the maximum weight capacity of the knapsack *)
maxWeight = 10;

(* Create a matrix to store the maximum value for each combination of items and maximum weight *)
maxValues = ConstantArray[0, {Length[items] + 1, maxWeight + 1}];

(* Fill in the first row and column of the matrix with 0's *)
maxValues[[1, All]] = 0;
maxValues[[All, 1]] = 0;

(* Use dynamic programming to fill in the rest of the matrix *)
For[i = 2, i <= Length[items] + 1, i++,
    For[j = 2, j <= maxWeight + 1, j++,
        (* Check if including the current item will exceed the maximum weight *)
        If[items[[i - 1, 1]] > j,
            (* If so, use the previous value for this weight and item combination *)
            maxValues[[i, j]] = maxValues[[i - 1, j]],
            (* If not, take the maximum of either including or excluding the current item *)
            maxValues[[i, j]] = Max[maxValues[[i - 1, j]], maxValues[[i - 1, j - items[[i - 1, 1]]]] + items[[i - 1, 2]]]
        ];
    ];
];

(* Retrieve the maximum value from the matrix *)
maxValue = maxValues[[Length[items] + 1, maxWeight + 1]];

(* Create a list to store the selected items *)
selectedItems = {};

(* Backtrack through the matrix to find which items were included in the optimal solution *)
i = Length[items] + 1;
j = maxWeight + 1;

While[i > 1 && j > 1,
    (* Check if the current item was included in the optimal solution *)
    If[maxValues[[i, j]] == maxValues[[i - 1, j]],
        (* If not, move on to the previous item *)
        i--;
    ,
        (* If so, add the current item to the list of selected items and subtract its weight from the remaining weight *)
        AppendTo[selectedItems, items[[i - 1]]];
        j = j - items[[i - 1, 1]];
        i--;
    ];
];

(* Print the optimal solution in a formatted string *)
Print[StringJoin[
    "The maximum value for a knapsack with a weight capacity of ", ToString[maxWeight],
    " and items ", ToString[items],
    " is ", ToString[maxValue],
    ".\nSelected items: ", ToString[selectedItems]
]];

(* Output:
The maximum value for a knapsack with a weight capacity of 10 and items {{1, 2}, {4, 6}, {3, 5}, {2, 3}} is 16.
Selected items: {{4, 6}, {2, 3}, {1, 2}}
*)