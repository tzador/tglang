(*=== Begin Game Board Setup ===*)
(*Generate a list of unique symbols for the game pieces*)
symbols = {"a", "b", "c", "d", "e", "f", "g", "h", "i"}
(*Define a function to randomly assign symbols to game pieces*)
assignSymbols[n_] := RandomSample[symbols, n]
(*Create a 3x3 game board with randomly placed pieces*)
board = Table[assignSymbols[3], {3}]
(*=== End Game Board Setup ===*)
(*=== Begin Game Logic ===*)
(*Define a function to check for a winning combination*)
checkWin[board_] := (
   (*Set a list of winning combinations*)
   wins = {{{1, 2, 3}}, {{4, 5, 6}}, {{7, 8, 9}}, {{1, 4, 7}}, {{2, 5, 8}}, {{3, 6, 9}}, {{1, 5, 9}}, {{3, 5, 7}}}; 
   (*Loop through each winning combination*)
   Do[If[SameQ[board[[Sequence @@ i]], board[[Sequence @@ #]]] && SameQ[board[[Sequence @@ i]], board[[Sequence @@ #]]], Return[True]], {i, wins}]; 
   (*If no winning combination found, return False*)
   Return[False]
 )
(*Define a function to check if there are any remaining moves on the board*)
checkMoves[board_] := MemberQ[Flatten[board], _Symbol]
(*Define a function for a player's turn*)
play[board_, player_] := (
   (*Print the current player's symbol*)
   Print["It is ", player, "'s turn."];
   (*Prompt the player for a position on the board*)
   pos = Input["Select a position (1-9) on the board."];
   (*Check if the position is already occupied*)
   If[FreeQ[Flatten[board], pos], 
     (*If position is not occupied, replace with player's symbol*)
     board = ReplacePart[board, pos -> player];
     (*Display the updated board*)
     TableForm[board, TableHeadings -> {{"1", "2", "3"}, {"1", "2", "3"}}], 
     (*If position is occupied, prompt player to choose another position*)
     MessageDialog["That position is already taken. Choose another position."]]
 )
(*Define a function to play the game until there is a winner or no moves left*)
playGame[] := (
   (*Display the initial game board*)
   TableForm[board, TableHeadings -> {{"1", "2", "3"}, {"1", "2", "3"}}];
   (*Repeat the game until there is a winner or no moves left*)
   While[!checkWin[board] && checkMoves[board], (
     (*Player 1's turn*)
     play[board, "Player 1"];
     (*If Player 1 wins, end the game*)
     If[checkWin[board], Return["Player 1 wins!"]];
     (*If no more moves left, end the game in a tie*)
     If[!checkMoves[board], Return["Tie game."]];
     (*Player 2's turn*)
     play[board, "Player 2"];
     (*If Player 2 wins, end the game*)
     If[checkWin[board], Return["Player 2 wins!"]];
     (*If no more moves left, end the game in a tie*)
     If[!checkMoves[board], Return["Tie game."]];
   )]
 )
(*To start the game, simply call the playGame[] function*)
playGame[]