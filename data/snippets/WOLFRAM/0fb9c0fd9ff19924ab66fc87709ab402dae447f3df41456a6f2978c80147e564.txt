(* Generate a list of prime numbers based on a given input limit *)
(* This function uses the Sieve of Eratosthenes algorithm *)

primeList[n_Integer] := Module[{s = Range[2, n]},
    Do[s[[i]] = 0, {i, 2, Floor[Sqrt[n]]}];
    Select[s, Positive]
]
primeList[20] (* Output: {2, 3, 5, 7, 11, 13, 17, 19} *)

(* Generate a list of Fibonacci numbers up to a given input limit *)
fibonacciList[n_Integer] := Module[{f = {1, 1}, next},
    While[f[[-1]] < n,
        next = f[[-1]] + f[[-2]];
        f = Append[f, next];
    ]
    f
]
fibonacciList[50] (* Output: {1, 1, 2, 3, 5, 8, 13, 21, 34}

(* Calculate the determinant of a square matrix using the Laplace expansion *)
(* This function recursively calculates the determinant *)
determinant[matrix_List] := Module[{det = 0, sign = 1},
    If[Length[matrix] == 1,
        Return[matrix[[1,1]]];
    ];
    Do[det += sign * matrix[[1, i]] * determinant[Drop[matrix, {1}, {i}]],
        {i, Length[matrix]}];
    det
]
matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
determinant[matrix] (* Output: 0 *)

(* Plot the Mandelbrot set using a recursive function *)
(* This function checks the number of iterations needed for a given complex number to escape the set *)

mandelbrot[cx_, cy_, maxIterations_] := Module[{x = 0, y = 0, i = 0},
    Do[
        {x, y} = {x^2 - y^2 + cx, 2 x y + cy};
        i++;
        If[x^2 + y^2 > 4,
            Return[i];
            Break[];
        ],
        {maxIterations}
    ];
    If[i == maxIterations, 0, i] (* Returns 0 if number is within the set *)
]
DensityPlot[mandelbrot[x, y, 50], {x, -2, 1}, {y, -1, 1}] (* Output: Mandelbrot set plot *)