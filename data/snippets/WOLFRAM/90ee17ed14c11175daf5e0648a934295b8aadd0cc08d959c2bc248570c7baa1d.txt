(* Define a function for Newton's Method *)
newtonsMethod[f_, x_, maxIterations_: 20] := Module[{x0, xn, h, fx, fxDeriv, i, solution, error},

    x0 = x; (* set initial guess *)

    For[i = 1, i <= maxIterations, i++,

        fx = f[x]; (* evaluate function at current guess *)
        fxDeriv = D[f, x]; (* evaluate derivative of function at current guess *)

        h = fx / fxDeriv; (* calculate change in x for next iteration *)

        xn = x0 - h; (* calculate new guess *)

        (* check for convergence and break if solution has been found *)
        If[Abs[f[xn]] < 10^(-9),
            solution = xn;
            Break[]
        ];

        (* update guess for next iteration *)
        x0 = xn;
    ];

    (* calculate error based on final solution and return result *)
    error = Abs[solution - xn];
    {solution, error}
];

(* Test function for finding roots of a polynomial *)
poly[x_] := x^5 + 3x^4 + 4x^3 - 10x^2 + 2x - 8;

(* Find roots of polynomial using Newton's Method *)
newtonsMethod[poly, 1.5]