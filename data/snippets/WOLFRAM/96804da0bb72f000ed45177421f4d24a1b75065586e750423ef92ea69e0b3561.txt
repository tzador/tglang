(* Initialize a grid of size n by m *)
grid = Table[0, {n}, {m}];

(* Assign random values to the grid *)
Do[grid[[i, j]] = RandomInteger[{1, 9}], {i, n}, {j, m}];

(* Define a function that checks if a given cell is valid *)
isValidCell[i_, j_] := i > 0 && i <= n && j > 0 && j <= m;

(* Define a function that checks if a cell is alive *)
isAlive[i_, j_] := grid[[i, j]] == 1;

(* Define a function that checks the number of alive neighbors of a cell *)
countAliveNeighbors[i_, j_] := Count[{{i-1, j-1}, {i-1, j}, {i-1, j+1}, {i, j-1}, 
{i, j+1}, {i+1, j-1}, {i+1, j}, 
{i+1, j+1}}, {x_, y_} /; isValidCell[x, y] && isAlive[x, y]];

(* Iterate through the grid and update each cell based on its neighbors *)
Do[If[isAlive[i, j], (* If the cell is alive *)
numAliveNeighbors = countAliveNeighbors[i, j]; (* Count the alive neighbors *)
If[numAliveNeighbors < 2 || numAliveNeighbors > 3, (* Apply the rules of Conway's Game of Life *)
grid[[i, j]] = 0; (* If the cell has too few or too many neighbors, it dies *)
];
, (* Else, if the cell is dead *)
numAliveNeighbors = countAliveNeighbors[i, j]; (* Count the alive neighbors *)
If[numAliveNeighbors == 3, grid[[i, j]] = 1;]] (* If the cell has exactly 3 neighbors, it becomes alive *)
, {i, n}, {j, m}];

(* Print the updated grid *)
Grid[grid, Spacings -> {0, 0}, Background -> {None, None, None}, 
BaseStyle -> Directive[EdgeForm[Black], Thick], ItemSize -> 2, 
ItemStyle -> Directive[FontSize -> 14, FontFamily -> "Helvetica", Bold], 
Alignment -> {Center, Center}, Frame -> True, 
FrameStyle -> Directive[Gray, Thick], FrameTicks -> None, 
ItemAspectRatio -> 1, ImageSize -> 300]