ClearAll["Global`*"];
f[x_] := Module[{y = 5}, x + y]
g[y_, z_] := Block[{x = 3}, y + x*z]
(*Define functions to take in input and add a local variable*)
(*Note: ClearAll clears all existing definitions in the global context*)
(*Module creates a local variable y and performs operation x+y*)
(*Block creates a local variable x and performs operation y+x*z*)
(*Use SetDelayed (:=) to ensure input is evaluated each time the function is called*)
(*Define a function to calculate the factorial of a number*)
factorial[n_Integer] := Module[{result = 1}, While[n > 0, result *= n; n--]; result]
(*Use a While loop to continually multiply the result by the current number*)
(*Use an Integer pattern to ensure input is a positive integer*)
(*Define a function to find the nth term in the Fibonacci sequence*)
fibonacci[n_Integer] := If[n == 1 || n == 2, 1, fibonacci[n-1] + fibonacci[n-2]]
(*Use recursion and conditional statements to calculate the nth term*)
(*Use an Integer pattern to ensure input is a positive integer*)
(*Define a function to convert binary to decimal*)
binaryToDecimal[binary_Integer] := Module[{decimal = 0, power = 0}, While[binary > 0, decimal += (binary%10)*2^power; binary = Quotient[binary, 10]; power++]; decimal]
(*Use a While loop to iterate through digits of binary number*)
(*Use Quotient and Remainder to find the binary digits*)
(*Update the decimal value each iteration by adding the digit times 2 raised to the corresponding power*)
(*Define a function to check if a number is prime*)
isPrime[n_Integer] := Module[{result = True}, If[n <= 1, result = False, Do[If[Mod[n, i] == 0 && i != n, result = False; Break[]], {i, 2, Floor[Sqrt[n]]}]]; result]
(*Use if statements and a Do loop to check if the number is divisible by every integer up to its square root*)
(*Use a Boolean result variable to keep track if the number is prime*)
(*Define a function to find the roots of a quadratic*)
quadratic[a_, b_, c_] := Module[{discriminant = b^2 - 4*a*c}, If[discriminant > 0, {(-b-Sqrt[discriminant])/(2*a), (-b+Sqrt[discriminant])/(2*a)}, If[discriminant == 0, {-b/(2*a)}, "Imaginary roots"]]]
(*Calculate the discriminant and use conditional statements to determine the type of solution*)
(*Note: If the disciminant is negative, the function returns the string "Imaginary Roots"*)