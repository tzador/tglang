(*Newton's method implementation in Wolfram*)
(*initialize variables*)
x0 = 0;
tol = 0.0001;
max_iter = 50;
(*define function*)
f[x_] := x^3 - 2x + 1;
(*define derivative*)
fprime[x_] := 3x^2 - 2;
(*define Newton's method function*)
newton[x_] := Module[{xold, count},
    (*initialize counts*)
    count = 0;
    (*loop until tolerance is reached or max iterations are exceeded*)
    While[Abs[x - x0] > tol && count < max_iter,
        (*store previous value of x*)
        xold = x;
        (*calculate new x using Newton's method*)
        x = xold - (f[xold]/fprime[xold]);
        (*increment count*)
        count++;
    ];
    (*print results*)
    Print["Root at x =", x];
    Print["Iterations:", count];
];
(*run Newton's method with initial guess 1*)
newton[1];