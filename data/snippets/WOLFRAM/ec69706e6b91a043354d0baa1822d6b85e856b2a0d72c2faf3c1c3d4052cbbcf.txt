(*This program uses the Knapsack algorithm to solve the 0-1 knapsack problem.
The 0-1 knapsack problem involves choosing items with given weights and values to maximize the total value, while not exceeding a maximum weight capacity.*)

(*First, we define the items to be considered, with their respective weights and values.*)
items = {"Item A", 5, 20}, {"Item B", 10, 40}, {"Item C", 15, 60};

(*Next, we define the maximum weight capacity and initialize an empty knapsack, represented as a list of items.*)
maxWeight = 25;
knapsack = {};

(*We now create a function to calculate the maximum value that can be obtained with a given weight and set of items.*)
knapsackValue[capacity_, remainingItems_] := Module[{currentItem, remainingCapacity, remainingItemsValue, value1, value2},
    (*If there are no more items or the capacity is 0, the value is 0.*)
    If[remainingItems == {} || capacity == 0, Return[0]];
    
    (*Select the first item in the remaining items list.*)
    currentItem = First[remainingItems];
    (*Calculate the remaining capacity and the total value of the remaining items.*)
    remainingCapacity = capacity - currentItem[[2]];
    remainingItemsValue = Total[Rest[currentItem]];
    
    (*If the remaining capacity is negative, we skip this item and calculate the value with the remaining items.*)
    If[remainingCapacity < 0, Return[knapsackValue[capacity, Rest[remainingItems]]]];
    
    (*Otherwise, we calculate the maximum value by either including or excluding the current item.*)
    value1 = currentItem[[3]] + knapsackValue[remainingCapacity, Rest[remainingItems]];
    value2 = knapsackValue[capacity, Rest[remainingItems]];
    Return[Max[value1, value2]];
];

(*Finally, we call the function with the maximum weight and list of items, and print the result.*)
Print[knapsackValue[maxWeight, items]];

(*Output: 80*)