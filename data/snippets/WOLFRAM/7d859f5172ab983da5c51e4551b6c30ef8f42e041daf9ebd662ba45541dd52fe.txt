(* ::Package:: *)
(* ::Section:: *)
(* Introduction: This code snippet implements the Bubble Sort algorithm in Wolfram Mathematica. The algorithm works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. This process is repeated until the entire list is sorted. *)

(* ::Subsection:: *)
(* Implementation: Initialize a list of random numbers and define the bubble sort function. *)
list = RandomInteger[100, 10];
BubbleSort[list_List] := Module[{max = Length[list]},
  Do[(* Go through the list iteratively *)
   Do[(* Compare adjacent elements and swap if necessary *)
    If[list[[j]] > list[[j + 1]],
     {list[[j]], list[[j + 1]]} = {list[[j + 1]], list[[j]]}
     ], {j, 1, max - i}
    ], {i, 1, max - 1}]
  (* Return the sorted list *)
  list
  ]

(* ::Subsection:: *)
(* Testing: Print the unsorted and sorted lists *)
Print["Unsorted List: ", list]
Print["Sorted List: ", BubbleSort[list]]

(* ::Output:: *)
(*