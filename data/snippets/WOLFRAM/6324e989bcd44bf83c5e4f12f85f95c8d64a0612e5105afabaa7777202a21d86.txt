(* This code snippet implements a binary search algorithm in Wolfram Language *)
(* Define a function that takes in a list, value to be searched, start index, and end index *)
binarySearch[list_, value_, start_, end_] := Module[{mid, found}, 
{
mid = Quotient[(start + end), 2]; (* Calculate the middle index *)
If[start > end, (* Base case: if start index becomes greater than end, it means value does not exist *)
    found = False,
    If[list[[mid]] == value, (* Check if middle element is equal to the value *)
        found = True, 
        If[value < list[[mid]], (* If value is less than middle element, search in the left half *)
            found = binarySearch[list, value, start, mid - 1],
            found = binarySearch[list, value, mid + 1, end] (* Else, search in the right half *)
        ]
    ]
]
found (* Return the boolean value indicating whether the value was found or not *)
}

(* Test the function with a sorted list *)
list = {1, 5, 9, 13, 17, 19, 21, 25};
Print[binarySearch[list, 17, 1, Length[list]]]; (* Output: True *) 
Print[binarySearch[list, 22, 1, Length[list]]]; (* Output: False *)