(* This code snippet is written in the Wolfram language *)

(* Defining a function that takes in a list of equations and returns their solutions *)

(* Set the function name and parameters *)
solutions[list_List] := Module[{variables, equations, solutions},
    variables = Union[Cases[list, _Symbol, Infinity]];  (* Find all unique variables used in the equations *)
    equations = Map[ToRules, list, {2}];                  (* Convert equations in the format {eq1, eq2, ...} to {x1->y1, x2->y2, ...} *)
    solutions = Reduce[equations, variables];             (* Use Reduce to find the solutions to the equations *)
    If[Head[solutions] === And,                          (* If there are multiple solutions, convert them to a list *)
        solutions = List @@ solutions,                    (* For example: x^2 == 4 has solutions x == 2 and x == -2, convert to {2, -2} *)
        solutions = List@solutions                         (* If there is only one solution, wrap it in a list *)
    ];
    solutions
]

(* Example usage *)
solutions[{x + y == 3, x - y == 1}]                       (* Output: {{x->1, y->2}, {x->2, y->1}} *)