(*Define the Newton's Method function*)
newtonsMethod[f_, x0_, maxIterations_: Infinity, tolerance_: 0.0001] := Module[
  {xn = x0, xnm1 = x0, n = 0, fxn, dfxn, dx, err = Infinity},
  
  (*While loop to iterate until maximum number of iterations or reached*)
  While[n < maxIterations && Abs[err] > tolerance,
   
   (*Evaluate the function value and derivative at current point*)
   fxn = f[xn];
   dfxn = Derivative[1][f][xn];
   
   (*Compute the next point using Newton's Method formula*)
   dx = -fxn/dfxn;
   
   (*Update the previous point with the current point*)
   xnm1 = xn;
   
   (*Compute the error using the previous point*)
   err = xn - xnm1;
   
   (*Update the iteration count*)
   n++;
   
   (*Update the current point*)
   xn += dx;
   ];
  
  (*If loop to check if solution converged or reached maximum iterations*)
  If[n < maxIterations,
   Print["Solution converged after ", n, " iterations."];
   ,
   Print["Maximum iterations reached."];
  ];
  
  (*Return the final solution*)
  xn
  ]
  
(*Define the function to iterate with*)
f[x_] := x^3 - 2x^2 - 11x + 12;

(*Call the Newton's Method function with initial point and optional parameters*)
sol = newtonsMethod[f, 2, 10, 0.00001];

(*Print the solution*)
Print["The solution is: ", sol];