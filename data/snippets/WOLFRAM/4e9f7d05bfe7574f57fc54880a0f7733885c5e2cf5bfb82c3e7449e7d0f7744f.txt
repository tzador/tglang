(* This is a function that calculates the nth term of the Fibonacci sequence *)
Fibonacci[n_]:= If[n<2, n, Fibonacci[n-1]+Fibonacci[n-2]]
(* This is a function that finds all prime numbers up to a given limit *)
PrimeSieve[n_]:= Module[{primes={}, composite={}},
  (* Initializing a list of all numbers from 2 to n *)
  numbers = Range[2, n];
  (* Looping through the list of numbers *)
  While[numbers != {},
    (* Taking the first number in the list as a prime number and adding it to the list of primes *)
    p = First[numbers];
    primes = Append[primes, p];
    (* Removing all multiples of this prime number from the list of numbers *)
    numbers = Complement[numbers, Table[p*i, {i, 2, Floor[n/p]}]];
  ];
  primes
]
(* This is a function that finds the GCD of two numbers using Euclid's algorithm *)
GCD[a_, b_] := Module[{r},
  (* Looping while the remainder is not zero *)
  While[b != 0,
    (* Computing the remainder of a divided by b *)
    r = Mod[a,b];
    (* Setting a to b and b to the remainder *)
    a = b;
    b = r;
  ];
  (* Returning the final value of a, which is the GCD *)
  a
]