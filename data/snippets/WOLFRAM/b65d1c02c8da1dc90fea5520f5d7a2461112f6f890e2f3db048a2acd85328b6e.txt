(* This code snippet generates a self-avoiding random walk on a lattice *)

(* First, define the lattice with n rows and m columns *)
lat = LatticeData["Square", "DimensionRank"][[1]] (* square lattice *)
n = 10 (* number of rows *)
m = 10 (* number of columns *)

(* Generate a random starting point on the lattice *)
start = RandomInteger[{1, n}, 2] (* random point with row and column coordinates *)
Print["Starting point:", start]

(* Define valid moves on the lattice *)
moves = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}} (* move 1 unit up, down, left, or right *)

(* Create a list to store the path of the walk *)
path = {start}

(* Generate a counter to keep track of the number of steps taken *)
count = 1

(* Continue walking until all possible positions on the lattice have been visited *)
While[Length[path] < n*m, 
 (* Generate a random move from the list of valid moves *)
 move = RandomChoice[moves];

 (* Check if the move takes us to a new, unvisited position on the lattice *)
 If[! MemberQ[path, start + move],
  start = start + move; (* if so, update our current position *)
  AppendTo[path, start]; (* add new position to our path list *)
  count++]; (* increment the step counter *)

(* Print out the path of the walk and the total number of steps taken *)
Print["Path of random walk:", path]
Print["Total number of steps:", count]

(* Plot the path of the walk on the lattice *)
ListPlot[path, PlotStyle -> Red, PlotMarkers -> Automatic, 
 PlotLegends -> {"Random Walk"}] *)

(* Sample output: Starting point: {6, 8}, Path of random walk: {{6, 8}, {6, 7}, {5, 7}, {5, 6}, {4, 6}, {4, 7}, {4, 6}, {5, 6}, {4, 6}, {5, 6}, {6, 6}, {6, 5}, {7, 5}, {6, 5}, {6, 6}, {7, 6}, {8, 6}, {9, 6}, {10, 6}, {9, 6}, {10, 6}, {9, 6}, {9, 7}, {9, 6}, {8, 6}, {9, 6}, {9, 5}, {8, 5}, {9, 5}, {8, 5}, {9, 5}, {10, 5}, {10, 4}, {9, 4}, {9, 5}, {9, 4}, {10, 4}, {9, 4}, {9, 3}, {8, 3}, {9, 3}, {10, 3}, {9, 3}, {9, 2}, {10, 2}, {9, 2}, {8, 2}, {8, 3}, {8, 2}, {7, 2}, {6, 2}, {5, 2}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {10, 2}, {9, 2}, {8, 2}, {7, 2}, {6, 2}, {6, 3}}, Total number of steps: 64