RandomSeed[12345] (*sets the initial seed for random number generator*)
population = Table[RandomReal[], {100}] (*creates a population of 100 random numbers*)
gaussianMutation[mutationRate_, element_] := 
  If[RandomReal[] < mutationRate, element + RandomReal[], element] (*mutation function with given mutation rate*)
fitness[element_] := Abs[element - Mean[population]] (*fitness function*)
gaussianCrossover[parent1_, parent2_] := 
  Block[{random = RandomReal[{0, 1}, Length[parent1]]}, 
    MapThread[Plus, {parent1*random + parent2*(1 - random), parent2*random + parent1*(1 - random)}]/2] 
    (*crossover function that combines two parents based on a random weight*)
eliteSelection[population_, eliteSize_] := SortBy[population, fitness][[1 ;; eliteSize]] 
  (*selects elites from the population based on their fitness*)
offspringGeneration[population_, eliteSize_, mutationRate_] := 
  Join[eliteSelection[population, eliteSize], 
    gaussianMutation[mutationRate, gaussianCrossover @@@ RandomSample[population, Length[population] - eliteSize]]] 
    (*generates a new population by combining elites and mutated crossovers of the remaining population*)
generations = 100 (*number of generations*)
eliteSize = 10 (*number of elites to be selected*)
mutationRate = 0.1 (*mutation rate*)
Do[population = offspringGeneration[population, eliteSize, mutationRate], generations] (*loop to create new generations*)
bestSolution = SortBy[population, fitness][[1]] (*select best solution based on fitness*)