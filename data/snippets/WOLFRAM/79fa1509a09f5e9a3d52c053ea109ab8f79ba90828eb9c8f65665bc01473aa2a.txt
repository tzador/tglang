(* Generate a list of random integers *)
RandomInteger[{min, max}, n] := Module[{list = {}},
For[i = 1, i <= n, i++,
list = Join[list, {RandomInteger[{min, max}]}]];
Return[list]];

(* Calculate the mean of a list of numbers *)
Mean[list_] := Module[{total = 0, count = 0},
For[i = 1, i <= Length[list], i++,
total = total + list[[i]];
count++];
Return[total/count]];

(* Plot the function f(x) = x^2 + 2x + 1 *)
Plot[x^2 + 2x + 1, {x, -5, 5}]

(* Define a matrix multiplication function *)
MatrixMultiplication[A_, B_] := Module[{result = ConstantArray[0, {Length[A], Length[B[[1]]]}]},
For[i = 1, i <= Length[A], i++,
For[j = 1, j <= Length[B[[1]]], j++,
For[k = 1, k <= Length[B], k++,
result[[i, j]] += A[[i, k]] * B[[k, j]]]]];
Return[result]];

(* Find the prime factors of a given number *)
PrimeFactorization[n_] := Module[{factors = {}},
For[i = 2, i <= n, i++,
While[Mod[n, i] == 0,
AppendTo[factors, i];
n = n / i]];
Return[factors]];

(* Create a class for a 2D point *)
Class["Point2D"] := {
x : 0,
y : 0,
new[x_, y_] := {
Object[x, y]
},
Translate[dx_, dy_] := {
x += dx,
y += dy
},
PrintPosition[] := {
Print["(", x ,"," y, ")"]
}
};

(* Use the class to create a point and translate it *)
p = Point2D.new[3, 4];
p.PrintPosition[];
p.Translate[2, 3];
p.PrintPosition[];

(* Solve a system of linear equations *)
Solve[{a + b + c == 10, 2a - 3b + c == 5, -a + 2b + 5c == 8}, {a, b, c}]

(* Generate a table of values for a function *)
Table[{x, Sin[x]}, {x, 0, 2Pi, 0.1}]

(* Create a function using pattern matching *)
Fibonacci[0] = 0;
Fibonacci[1] = 1;
Fibonacci[n_] := Fibonacci[n-1] + Fibonacci[n-2];

(* Find the maximum value in a list *)
Max[list_] := Module[{max = list[[1]]},
For[i = 2, i <= Length[list], i++,
If[list[[i]] > max,
max = list[[i]]];
Return[max]];
];