(* header *)
ClearAll["Global`*"]                             (* clears all global symbols *)

(* definitions *)
f[n_] := n^2                                     (* defines a function f(n) that squares the input n *)
g[n_] := n + 1                                    (* defines a function g(n) that adds 1 to the input n *)
h[n_] := f[n] + g[n]                              (* defines a function h(n) that uses the previously defined functions f and g *)
Print[h[5]]                                       (* prints the value of h(n) when n is 5 *)

(* loops *)
For[i = 1, i <= 10, i++,                          (* for loop that iterates i from 1 to 10 by 1 *)
    If[EvenQ[i],                                  (* checks if i is even *)
        Print[i, " is even"],                      (* if i is even, print the value of i and a message *)
        Print[i, " is odd"]                        (* if i is odd, print the value of i and a message *)
    ]
]

(* lists *)
list = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           (* creates a list of integers from 1 to 10 *)

Map[f, list]                                      (* maps the function f to each element in the list and returns a new list *)
Select[list, EvenQ]                               (* selects only the even elements from the list and returns a new list *)

(* Plotting *)
Plot[h[x], {x, 0, 5},                             (* plots the function h(x) from x = 0 to 5 *)
    AxesLabel -> {"input", "output"},              (* sets labels for the x and y axes *)
    PlotLabel -> "h(x) vs x",                      (* sets a title for the plot *)
    PlotStyle -> Directive[Red, Dashed],          (* sets the style for the plot to red and dashed *)
    GridLines -> Automatic                         (* adds grid lines to the plot *)
]

(* Matrix operations *)
matA = {{1, 2}, {3, 4}};                          (* creates a 2x2 matrix *)
matB = {{5, 6}, {7, 8}};                          (* creates another 2x2 matrix *)
Inverse[matA]                                     (* calculates the inverse of matA *)
Transpose[matB]                                   (* calculates the transpose of matB *)
Eigenvalues[matA]                                 (* calculates the eigenvalues of matA *)

(* Packages *)
Needs["PolygonPlotting`"]                         (* imports the PolygonPlotting package *)
PolygonPlotting[Polygon[{{1, 1}, {2, 3}, {3, 2}, {2, 1}, {1, 2}}]] (* plots a polygon with the given coordinates *)

(* Random Number Generation *)
RandomReal[]                                      (* generates a random real number between 0 and 1 *)
RandomInteger[{1, 10}]                            (* generates a random integer between 1 and 10 *)

(* String Manipulation *)
str = "Hello World";                              (* defines a string *)
StringReverse[str]                                (* reverses the string *)
StringLength[str]                                 (* calculates the length of the string *)
StringTake[str, {1, 5}]                           (* takes a substring using the given start and end indices *)
StringJoin["Hello", " ", "World"]                  (* joins strings together *)

(* Error Handling *)
Check[1/0, "error"]                               (* tries to evaluate 1/0, if it results in an error, "error" will be returned *)
Throw["error"]                                    (* throws an error *)
Catch[1/0]                                        (* tries to evaluate 1/0, if it results in an error, the error will be caught and returned *)