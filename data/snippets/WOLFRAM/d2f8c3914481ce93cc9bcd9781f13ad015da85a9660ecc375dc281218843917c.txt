(* This code snippet generates a fractal pattern using the Mandelbrot set *)

(* Define the maximum number of iterations *)
MaxIter = 100;

(* Define the size of the image *)
Width = 1000;
Height = 1000;

(* Define the complex plane to plot the Mandelbrot set *)
xmin = -2;
xmax = 2;
ymin = -2;
ymax = 2;

(* Define a function to check if a point is in the Mandelbrot set *)
Mandelbrot[z_, c_] := z^2 + c;

(* Define a function to calculate the escape time for a given point *)
EscapeTime[c_] := Module[{z = 0, iter = 0},
                        While[Abs[z] <= 2 && iter < MaxIter,
                            z = Mandelbrot[z, c];
                            iter++;
                        ];
                        Return[iter];
                    ];

(* Generate a list of complex numbers for each pixel in the image *)
coords = Table[{Re[x], Im[y]}, {x, xmin, xmax, (xmax - xmin)/Width}, {y, ymin, ymax, (ymax - ymin)/Height}];

(* Map the escape time function to each point in the list *)
escapeTimes = Map[EscapeTime, coords, {2}];

(* Generate a color map based on escape times *)
colors = ColorData["BrightBands", #] & /@ Flatten[escapeTimes];

(* Plot the fractal pattern using ListDensityPlot *)
ListDensityPlot[escapeTimes, ColorFunction -> colors, PlotLegends -> None, FrameLabel -> {"Real Part", "Imaginary Part"}]