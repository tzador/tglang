(* Function to generate a binary tree *)
BSTgenerate[root_] := Module[{nodes, tree},
  (* Creates a list of nodes based on root value *)
  nodes = Table[<|"value" -> root, "left" -> Null, "right" -> Null|>, 1];
  (* Initialize tree as empty Association *)
  tree = Association["root" -> Null, "nodes" -> Null];
  (* Loop to insert nodes into tree *)
  Do[
    (* Initialize current node as root *)
    current = root;
    (* Loop to insert the new node *)
    While[True,
      (* Condition to check if new node's value is less than current node's value *)
      If[newNode["value"] < current["value"],
        (* If current node has no left child, insert new node as left child *)
        If[current["left"] == Null,
          current["left"] = newNode;
          Break[];
        ];
        (* If current node has left child, change current node to left child and continue inserting *)
        current = current["left"];
      (* Condition to check if new node's value is greater than current node's value *)
      ] else if[newNode["value"] > current["value"],
        (* If current node has no right child, insert new node as right child *)
        If[current["right"] == Null,
          current["right"] = newNode;
          Break[];
        ];
        (* If current node has right child, change current node to right child and continue inserting *)
        current = current["right"];
      ];
    ]
  ,{newNode, nodes}];
  (* Update root of tree to be the first added node *)
  tree["root"] = nodes[[1]];
  (* Update list of nodes in tree to be the list of added nodes *)
  tree["nodes"] = nodes;
  
  Return[tree];
];

(* Example usage of BSTgenerate to create a binary search tree with values 5, 3, 8, 4, 2 *)
myTree = BSTgenerate[5];
myTree = BSTinsert[myTree, 3];
myTree = BSTinsert[myTree, 8];
myTree = BSTinsert[myTree, 4];
myTree = BSTinsert[myTree, 2];

(* Function to insert a new node into a binary search tree *)
BSTinsert[tree_, value_] := Module[{newNode},
  (* Creates a new node with given value *)
  newNode = <|"value" -> value, "left" -> Null, "right" -> Null|>;
  (* Initialize current node as root *)
  current = tree["root"];
  (* Loop to insert the new node *)
  While[True,
    (* Condition to check if new node's value is less than current node's value *)
    If[newNode["value"] < current["value"],
      (* If current node has no left child, insert new node as left child *)
      If[current["left"] == Null,
        current["left"] = newNode;
        Break[];
      ];
      (* If current node has left child, change current node to left child and continue inserting *)
      current = current["left"];
    (* Condition to check if new node's value is greater than current node's value *)
    ] else if[newNode["value"] > current["value"],
      (* If current node has no right child, insert new node as right child *)
      If[current["right"] == Null,
        current["right"] = newNode;
        Break[];
      ];
      (* If current node has right child, change current node to right child and continue inserting *)
      current = current["right"];
    ];
  ];
  
  Return[tree];
];

(* Example usage of BSTinsert to insert value 7 into existing binary search tree *)
myTree = BSTinsert[myTree, 7];

(* Function to check if value exists in a binary search tree *)
BSTsearch[tree_, value_] := Module[{current},
  (* Initialize current node as root *)
  current = tree["root"];
  (* Loop to search for value *)
  While[current != Null,
    (* If value is equal to current node's value, return True *)
    If[value == current["value"],
      Return[True];
    (* If value is less than current node's value, change current node to left child and continue searching *)
    ] else if[value < current["value"],
      current = current["left"];
    (* If value is greater than current node's value, change current node to right child and continue searching *)
    ] else if[value > current["value"],
      current = current["right"];
    ];
  ];
  (* If value is not found, return False *)
  Return[False];
];

(* Check if value 8 exists in our example binary search tree *)
BSTsearch[myTree, 8]