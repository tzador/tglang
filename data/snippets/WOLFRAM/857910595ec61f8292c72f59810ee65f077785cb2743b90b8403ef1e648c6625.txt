(* Define a function that checks if a number is prime *)
primeQ[n_Integer] := Module[{i},
  If[n < 2, Return[False]];
  For[i = 2, i <= Sqrt[n], i++, 
   If[Mod[n, i] == 0, Return[False]]];
  Return[True]]
  
(* Define a function that generates a list of prime numbers up to a given limit *)
genPrimes[n_Integer] := Module[{primes, i},
  primes = {};
  For[i = 1, i <= n, i++, 
   If[primeQ[i], AppendTo[primes, i]]];
  Return[primes]]
  
(* Define a function that checks if a number is perfect *)
perfectQ[n_Integer] := Module[{sum, i},
  sum = 0;
  For[i = 1, i < n, i++, 
   If[Mod[n, i] == 0, sum += i]];
  If[sum == n, Return[True], Return[False]]]
  
(* Define a function that generates a list of perfect numbers up to a given limit *)
genPerfect[n_Integer] := Module[{perfects, i},
  perfects = {};
  For[i = 1, i <= n, i++, 
   If[perfectQ[i], AppendTo[perfects, i]]];
  Return[perfects]]

(* Example: Generate a list of the first 10 perfect numbers *)
genPerfect[10]

(* Output: