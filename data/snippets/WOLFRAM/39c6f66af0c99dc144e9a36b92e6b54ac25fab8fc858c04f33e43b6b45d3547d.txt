(* This code snippet uses the Wolfram programming language to implement a genetic algorithm for solving a simple optimization problem. *)

(* Define the objective function - the function we want to minimize *)
objectiveFunction[x_] := x^2 + 4 x

(* Set up the parameters for the genetic algorithm *)
populationSize = 20;
numberOfIterations = 100;
mutationRate = 0.02;

(* Initialize the population with random solutions *)
population = Table[RandomReal[{-10, 10}], {populationSize}];

(* Define the selection function - selects two individuals based on their fitness *)
selectionFunction[population_] := SortBy[population, objectiveFunction[#] &][[1 ;; 2]]

(* Define the crossover function - produces a new individual by combining two parents *)
crossoverFunction[parent1_, parent2_] := Module[{crossoverPoint, child},
  crossoverPoint = RandomInteger[{1, Length[parent1]}];
  child = Join[Take[parent1, crossoverPoint], Take[parent2, -(Length[parent2] - crossoverPoint)]];
  Return[child];
]

(* Define the mutation function - randomly mutates an individual based on mutation rate *)
mutationFunction[individual_] := If[RandomReal[] < mutationRate, individual + RandomReal[{-1, 1}], individual];

(* Main loop of the genetic algorithm *)
Do[
  (* Perform selection and produce a new generation *)
  newPopulation = RandomSample[
    Flatten[Table[crossoverFunction @@ selectionFunction[population], {populationSize/2}]], populationSize];
  
  (* Mutate the individuals in the new population *)
  population = Map[mutationFunction, newPopulation];
  , {numberOfIterations}];

(* Find the best solution from the final population *)
bestSolution = First@SortBy[population, objectiveFunction[#] &];

(* Print the final best solution and its fitness value *)
Print["Final best solution: ", bestSolution];
Print["Fitness value: ", objectiveFunction[bestSolution]];