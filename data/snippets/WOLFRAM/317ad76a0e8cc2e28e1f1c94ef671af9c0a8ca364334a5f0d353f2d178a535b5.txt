(* This code snippet is a function that calculates the shortest path between two nodes in a graph using Dijkstra's algorithm *)

(* The input is a graph represented as an adjacency matrix, and the starting and ending nodes *)
(* The output is a list containing the shortest path from the starting node to the ending node *)

(* Define a global variable to keep track of the unvisited nodes *)
unvisited = {};

(* Function to initialize the unvisited list *)
initUnvisited[graph_] := (
    unvisited = Range[Length[graph]]
);

(* Function to get the index of the unvisited node with the minimum distance from the starting node *)
getMinIndex[dist_] := (
    min = Infinity;
    minIndex = 0;
    For[i = 1, i <= Length[unvisited], i++,
        (* Check if the current node is unvisited and has smaller distance than the current minimum *)
        If[MemberQ[unvisited, i] && dist[[i]] < min,
            min = dist[[i]];
            minIndex = i;
        ]
    );
    
    Return[minIndex];
);

(* Function to calculate the shortest path using Dijkstra's algorithm *)
shortestPath[graph_, start_, end_] := (
    (* Initialize the distance array *)
    dist = ConstantArray[Infinity, Length[graph]];
    (* Set the distance of the starting node to 0 *)
    dist[[start]] = 0;
    
    (* Initialize the previous node array *)
    prev = ConstantArray[0, Length[graph]];
    
    (* Initialize the unvisited list *)
    initUnvisited[graph];
    
    (* While the end node is still unvisited *)
    While[MemberQ[unvisited, end],
        (* Get the index of the unvisited node with the minimum distance from the starting node *)
        minIndex = getMinIndex[dist];
        (* Remove the current minimum from the unvisited list *)
        unvisited = DeleteCases[unvisited, minIndex];
        
        (* For each neighbor of the current minimum *)
        For[i = 1, i <= Length[graph], i++,
            If[graph[[minIndex, i]] > 0,
                (* Calculate the distance from the starting node to the current neighbor *)
                newDist = dist[[minIndex]] + graph[[minIndex, i]];
                
                (* If the new distance is smaller than the current recorded distance, update it *)
                If[newDist < dist[[i]],
                    (* Update the distance and the previous node *)
                    dist[[i]] = newDist;
                    prev[[i]] = minIndex;
                ]
            ]
        ]
    );
    
    (* Build the shortest path from the previous node array *)
    path = {end};
    While[path[[1]] != start,
        (* Insert the previous node at the beginning of the path *)
        PrependTo[path, prev[[path[[1]]]]];
    ];
    
    Return[path];
);

(* Example usage *)
graph = {{0, 2, 4, 0, 0}, {0, 0, 3, 10, 0}, {0, 0, 0, 0, 5}, {0, 0, 0, 0, 6}, {0, 0, 0, 0, 0}};
start = 1;
end = 5;
shortestPath[graph, start, end] (* Output: {1, 3, 5} *)