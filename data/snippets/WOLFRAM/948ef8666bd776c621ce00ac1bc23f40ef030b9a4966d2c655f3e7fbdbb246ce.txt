(* Create a 3D grid with 10 by 10 by 10 dimensions *)
grid = GridGraph[{10, 10, 10}];

(* Generate random weights for each edge in the grid *)
weights = Table[RandomReal[], {EulerCharacteristic[grid]}];

(* Define a function to apply a transformation to a specific dimension of a point *)
transform[d_, p_] := ReplacePart[p, d -> 2*p[[d]] + 1];

(* Apply the transformation to each point in the grid *)
transformedGrid = GraphAutomorphismGroup[grid, TransformationFunction[transform]];

(* Create a new graph with the transformed grid and edge weights *)
weightedGrid = Graph[transformedGrid, EdgeWeight -> weights];

(* Compute the shortest path between two vertices on the grid *)
shortestPath = FindShortestPath[weightedGrid, 1, VertexCount[weightedGrid]];

(* Highlight the shortest path on the grid *)
highlightedGrid = HighlightGraph[weightedGrid, shortestPath, GraphHighlightStyle -> "Thick"];

(* Display the grids side by side *)
Grid[{{grid, weightedGrid},{transformedGrid, highlightedGrid}}]