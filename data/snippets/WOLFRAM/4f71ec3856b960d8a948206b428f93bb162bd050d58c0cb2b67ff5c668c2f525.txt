(* This code calculates the determinant of a given matrix using LU decomposition *)

(* Function to perform LU decomposition on a matrix *)
LUdec[mat_List]:= Module[{n=Length[mat],p=IdentityMatrix[n],l=IdentityMatrix[n],u=mat, pivot,k,j},
	For[k=1,k<=n-1,k++, (* Loop through each column *)
		pivot = FirstPosition[Abs[u[[k;;,k]]],Max[Abs[u[[k;;,k]]]]][[1]] + (k-1); (* Find pivot element in column *)
		If[pivot != k,  (* Swap rows if necessary *)
			p = p[[IdentityMatrix[n]~ReplacePart~{(pivot->k),(k->pivot)}]];
			u = u[[IdentityMatrix[n]~ReplacePart~{(pivot->k),(k->pivot)}]];
		];
		l[[k+1;;,k]] = u[[k+1;;,k]]/u[[k,k]]; (* Calculate L matrix elements*)
		u = u - Outer[Times, l[[k+1;;,k]], u[[k,k;;]], 2]; (* Update U matrix by subtracting multiples of current row *)
	];
	{p,l,u} (* Return P,L,U matrices *)
];

(* Function to calculate determinant from LU decomposition results *)
determinant[mat_List]:= Module[{p,l,u,det=1}, 
	{p,l,u} = LUdec[mat]; (* Obtain P,L,U matrices *)
	det = Times @@ Diagonal[u]; (* Calculate determinant as product of diagonal elements of U *)
	det = det * (-1)^Total[Boole[p-IdentityMatrix[Length[p]]]]; (* Account for row swap effects *)
	det //Simplify (* Simplify for cleaner output *)
];

(* Example matrix *)
A = {{1,2,3},{4,5,6},{7,8,10}};

(* Calculate determinant *)
determinant[A]