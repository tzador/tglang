(* This code snippet calculates the eigenvector and eigenvalue of a square matrix using the power method *)

(* First, define the size of the square matrix *)
n = 4;

(* Create the square matrix with random entries *)
matrix = RandomReal[{-1, 1}, {n, n}];

(* Set an initial guess for the eigenvector *)
initialGuess = RandomReal[{-1, 1}, n];

(* Set the number of iterations *)
iterations = 10;

(* Define the function for the power method to find the dominant eigenvector and eigenvalue *)
powerMethod[matrix_, initialGuess_, iterations_] := Module[{eigenvector, eigenvalue, currentVector},
    (* Initialize the current eigenvector as the initial guess *)
    currentVector = initialGuess;
    
    For[i = 1, i <= iterations, i++,
        (* Calculate the new eigenvector using matrix multiplication *)
        eigenvector = matrix.currentVector;
        
        (* Normalize the eigenvector to unit length *)
        eigenvector = eigenvector / Norm[eigenvector];
        
        (* Calculate the new eigenvalue as the dot product of the matrix and eigenvector *)
        eigenvalue = currentVector . matrix . eigenvector;
        
        (* Set the current eigenvector as the new eigenvector for the next iteration *)
        currentVector = eigenvector;
    ];
    
    (* Return the dominant eigenvector and eigenvalue in a list *)
    {eigenvector, eigenvalue}
]

(* Call the power method function *)
result = powerMethod[matrix, initialGuess, iterations]

(* Output the dominant eigenvector and eigenvalue *)
Print["Dominant eigenvector: ", result[[1]]]
Print["Dominant eigenvalue: ", result[[2]]]