(* Define function for finding the greatest common divisor of two numbers *)
gcd[a_, b_] := If[b == 0, a, gcd[b, Mod[a, b]]]

(* Define function for generating the Fibonacci sequence up to a given number *)
fibSeq[n_] := Module[{fibList = {0, 1}}, Do[fibList = Append[fibList, fibList[[-1]] + fibList[[-2]]]; If[fibList[[-1]] > n, Break[]], {n}]; fibList]

(* Define a function that takes in a list and returns the sum of all its elements *)
sumList[list_] := Total[list]

(* Define a function for recursively computing the factorial of a given number *)
factorial[n_] := If[n == 0, 1, n * factorial[n-1]]

(* Define a list of prime numbers using the Sieve of Eratosthenes *)
primeList[n_] := Module[{list = Range[2, n], p = 2}, While[p^2 <= n, list = DeleteCases[list, _?Divisible[p]]; p = SelectFirst[list, # > p &]]; list]

(* Define a function for solving linear systems of equations using Gaussian elimination *)
gaussElim[mat_, vec_] := Module[{aug = Transpose[Join[Transpose[mat], {vec}]]}, Do[aug[[i]] = aug[[i]] / aug[[i, i]]; Do[aug[[j]] = aug[[j]] - aug[[j, i]] * aug[[i]], {j, Length[aug]}], {i, Length[aug] - 1, 1, -1}]; aug[[All, -1]]]

(* Define a function for solving differential equations using Euler's method *)
eulerMethod[f_, x0_, y0_, h_, n_] := Module[{sol = {{x0, y0}}, x = x0, y = y0}, Do[x = x + h; y = y + h * f[x, y]; sol = Append[sol, {x, y}], {n - 1}]; sol]