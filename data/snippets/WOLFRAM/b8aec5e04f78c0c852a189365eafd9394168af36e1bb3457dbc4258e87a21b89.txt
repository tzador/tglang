(* This code snippet demonstrates the use of nested functions and pattern matching in the Wolfram programming language *)
(* First, we define a function that takes in a list of integers and returns the sum of its elements *)
sumList = Function[{list},
    (* We use pattern matching to check if the input is a list of integers *)
    MatchQ[list, {___Integer}],
    (* If the input is not a list of integers, we throw an error *)
    _ :> (Print["Input must be a list of integers"]; Abort[])
    (* If the input is a list of integers, we use a nested function to calculate the sum and return the result *)
    Function[{total, index},
        (* We use pattern matching to determine when to stop the recursion *)
        MatchQ[index, 0] :> total,
        (* If the index is not 0, we recursively call the nested function with the sum of the element at the current index and the remaining list *)
        _ :> #0[total + list[[index]], index - 1]
    ]
    (* We initialize the nested function with the first element and the length of the list *)
    [list[[1]], Length[list]]
]

(* Example usage: *)
sumList[{1, 2, 3, 4}]
(* Output: 10 *)