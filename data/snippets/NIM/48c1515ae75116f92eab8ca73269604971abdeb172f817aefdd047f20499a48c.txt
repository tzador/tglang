# This code snippet generates a random maze using a recursive backtracking algorithm

# import necessary libraries
import random, os

# define variables for maze size and solution
let SIZE = 30             # size of the maze
let SOLUTION = []         # list to store the solution path

# create empty maze grid
let maze = [[0 for i in range(SIZE)] for j in range(SIZE)] 

# function to print the maze with the solution path
proc print_maze() =
    for row in maze:
        for cell in row:
            if cell == 1:
                echo "[ ]",      # print empty cell
            elif cell == 2:
                echo "[*]",      # print solution cell
            else:
                echo "[X]"       # print wall
        echo ""

# function to check if cell is valid
proc valid_cell(x, y) =
    if x < 0 or x >= SIZE or y < 0 or y >= SIZE:
        return false        # out of bounds
    elif maze[x][y] == 1:
        return false        # already visited
    else:
        return true         # valid cell

# function to generate maze using recursive backtracking algorithm
proc generate_maze(posx=0, posy=0) =
    maze[posx][posy] = 1        # mark current cell as visited
    SOLUTION.add((posx, posy))  # add cell to solution path
    random.shuffle(SOLUTION)    # shuffle solution path to add randomness

    # define possible moves in four directions
    let moves = [(-1,0), (0,1), (1,0), (0,-1)]

    for move in moves:
        # check if next cell is a valid move
        nextx = posx + move[0]
        nexty = posy + move[1]
        if valid_cell(nextx, nexty):
            # connect current cell to next cell by knocking down the wall between them
            maze[posx + move[0] // 2][posy + move[1] // 2] = 1
            # recursively call function with new position
            generate_maze(nextx, nexty)

# generate maze starting from top left corner
generate_maze()

# mark start and end points in maze
maze[0][0] = 0
maze[SIZE - 1][SIZE - 1] = 0

# print maze with solution path
print_maze()