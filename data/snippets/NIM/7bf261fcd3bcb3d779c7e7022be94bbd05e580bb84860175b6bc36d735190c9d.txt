# Define a tuple type for Player
Player = tuple[name: string,
                score: int]

# Create a new empty sequence for storing players
var playerSequence: seq[Player]

# Keep track of number of players
var numPlayers: int = 0

# Define a procedure to add new players to the sequence
proc addPlayer(name: string, score: int) =
  # Increase number of players
  inc(numPlayers)

  # Create a new player tuple with given name and score
  let player: Player = (name, score)

  # Add player to the sequence
  playerSequence.add(player)

# Create a procedure to display all players and their scores
proc displayPlayers() =
  # Use a for loop to iterate through the player sequence
  for player in playerSequence:
    # Print out the player's name and score
    echo(player.name & " has a score of " & $player.score)

# Create a procedure to sort the player sequence by score (highest to lowest)
proc sortPlayers() =
  # Use a bubble sort algorithm
  for i in 0 ..< playerSequence.len:
    for j in i+1 ..< playerSequence.len:
      # Check if the player's score at index j is greater than the player's score at index i
      if playerSequence[j].score > playerSequence[i].score:
        # Swap the positions of the players in the sequence
        playerSequence[i], playerSequence[j] = playerSequence[j], playerSequence[i]

# Create a procedure to select the winning player with the highest score
proc selectWinner() =
  # Sort the player sequence
  sortPlayers()

  # Print out the name and score of the winning player
  echo("The winner is " & playerSequence[0].name & " with a score of " & $playerSequence[0].score)

# Add some players to the sequence
addPlayer("John", 15)
addPlayer("Mary", 22)
addPlayer("Emily", 10)

# Display all players and their scores
displayPlayers()

# Select the winning player
selectWinner()