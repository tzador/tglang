# This code snippet generates a maze using the Recursive Backtracking algorithm
# and prints it out using ASCII characters.

const
    # define the dimensions of the maze
    WIDTH = 20
    HEIGHT = 10

var
    # create a 2D array to represent the maze
    maze: array[1..HEIGHT, 1..WIDTH] of int

# function to generate the maze using the Recursive Backtracking algorithm
proc generateMaze(x, y: int) =
    # mark the current position as visited
    maze[x, y] = 1 
    # define the possible directions to move
    const directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    # randomly shuffle the directions
    directions.shuffle()
    # loop through all directions
    for dir in directions:
        # calculate the next position
        nextX = x + dir[0]
        nextY = y + dir[1]
        # check if the next position is within the maze boundaries and unvisited
        if nextX > 0 and nextY > 0 and nextX <= WIDTH and nextY <= HEIGHT and maze[nextX, nextY] == 0:
            # mark the current position as a path
            maze[x + dir[0] / 2, y + dir[1] / 2] = 1
            # recurse on the next position
            generateMaze(nextX, nextY)

# function to print the maze using ASCII characters
proc printMaze() =
    # loop through each row and column of the maze
    for row in maze:
        for col in row:
            # print a wall if the value is 0
            if col == 0:
                echo "▓"
            # print a path if the value is 1
            else:
                echo " "
        # new line after each row
        echo ""

# call the function to generate the maze
generateMaze(1, 1)
# print the maze
printMaze()

# output example:
# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓
# ▓   ▓▓▓   ▓ ▓▓
# ▓ ▓▓    ▓ ▓   ▓
# ▓ ▓▓▓▓▓   ▓ ▓▓▓
# ▓▓▓▓       ▓ ▓
# ▓   ▓ ▓▓▓▓▓▓ ▓
# ▓ ▓ ▓   ▓▓ ▓▓▓
# ▓ ▓ ▓▓▓▓ ▓▓ ▓
# ▓ ▓   ▓    ▓
# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓