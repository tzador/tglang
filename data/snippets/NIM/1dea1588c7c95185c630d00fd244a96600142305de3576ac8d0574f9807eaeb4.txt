# This code snippet generates a recursive function for the
# Fibonacci sequence up to a given number

# Initiate a NIM function named 'fibonacci' with a parameter 'n'
func fibonacci(n: int): int =
  
  # Base case - if n is 0 or 1, return 1
  if n <= 1: 
    # Backticks indicate that this line is being executed
    `return 1`

  # Otherwise, recursively calculate the previous two numbers
  else: 
    
    # Initiate a NIM variable named 'prev1' and set it to result of calling 'fibonacci' with parameter n - 1
    var prev1 = fibonacci(n-1) 
    
    # Initiate a NIM variable named 'prev2' and set it to result of calling 'fibonacci' with parameter n - 2
    var prev2 = fibonacci(n-2) 
    
    # Backticks indicate that these lines are being executed
    `println("Calculating fibonacci of", n)`
    
    # Backticks indicate that this line is being executed, the result is the sum of the previous two numbers
    `return prev1 + prev2` 

# Call the 'fibonacci' function with an input of 5
`fibonacci(5)` 
``â€™