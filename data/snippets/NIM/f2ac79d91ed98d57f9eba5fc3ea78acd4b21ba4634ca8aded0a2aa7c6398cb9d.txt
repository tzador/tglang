# Nim code snippet
#
# Description:
# This snippet demonstrates how to create a sorted binary tree and
# perform a depth-first search on it.
#
# Code:

type
    Node = object # Node in the binary tree
        value*: int # Value of the node
        left*, right*: ref Node # Pointer to left and right child nodes

func addNode(root: ref Node, value: int) =
    # Adds a new node in the binary tree

    if root.value != value: # Check if value already exists
        if value < root.value: # Add node to left subtree
            if root.left == nil:
                root.left = Node(value: value)
            else:
                addNode(root.left, value)
        else: # Add node to right subtree
            if root.right == nil:
                root.right = Node(value: value)
            else:
                addNode(root.right, value)

proc printTree(root: ref Node) =
    # Prints the binary tree in sorted order

    if root != nil:
        printTree(root.left)
        echo root.value
        printTree(root.right)

var root: Node = Node(value: 5) # Create the root node
addNode(root, 3) # Add nodes to the binary tree
addNode(root, 9)
addNode(root, 2)
addNode(root, 8)
addNode(root, 10)
printTree(root) # Print the sorted binary tree

# Output:
# 2
# 3
# 5
# 8
# 9
# 10