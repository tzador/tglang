# A Nim code snippet for creating a binary search tree

# A struct to represent a node in the binary search tree
type
    Node = object
        key: int
        left, right: ref Node

# A function to insert a new key into the binary search tree
proc insert(root: ref Node, key: int) =
    # Check if the root is null, if yes then create a new node with the given key
    if root == nil:
        root = new Node(key: key)
    
    # If the key is lesser than the root's key, insert it into the left subtree
    elif key < root.key:
        insert(root.left, key)
    
    # If the key is greater than the root's key, insert it into the right subtree
    elif key > root.key:
        insert(root.right, key)

    # If the key is equal to the root's key, do nothing as duplicate nodes are not allowed

# A function to search for a specific key in the binary search tree
proc search(root: ref Node, key: int): bool =
    # Check if the root is null, if yes then the key does not exist in the tree
    if root == nil:
        return false
    
    # If the key is lesser than the root's key, search in the left subtree
    elif key < root.key:
        return search(root.left, key)

    # If the key is greater than the root's key, search in the right subtree
    elif key > root.key:
        return search(root.right, key)

    # If the key is equal to the root's key, return true
    else:
        return true