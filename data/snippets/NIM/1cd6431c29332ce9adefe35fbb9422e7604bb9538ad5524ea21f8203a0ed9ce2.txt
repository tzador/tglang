# This code snippet creates a binary search tree.

# Define the structure for a node in the binary search tree
type 
   Node = ref object of Root
      value*: string # value stored in the node
      left: Node # points to the left child node
      right: Node # points to the right child node

# Function to insert a new node into the binary search tree
proc insertNode*(node: Node, value: string) =
   if node == nil:
      node = Node(value: value)
      return
   if value < node.value: # check if value should be inserted on the left
      insertNode(node.left, value)
   else: # if not, insert on the right
      insertNode(node.right, value)

# Function to search for a specific value in the binary search tree
proc search*(node: Node, value: string): bool =
   if node == nil:
      return false
   if value == node.value:
      return true
   if value < node.value:
      return search(node.left, value)
   else:
      return search(node.right, value)

# Function to delete a node from the binary search tree
proc deleteNode*(node: Node, value: string) =
   if node == nil:
      return
   if value < node.value:
      deleteNode(node.left, value)
   elif value > node.value:
      deleteNode(node.right, value)
   else:
      if node.left == nil and node.right == nil: # if node has no children
         node = nil
      elif node.left == nil: # if node only has a right child
         node = node.right
      elif node.right == nil: # if node only has a left child
         node = node.left
      else: # if node has two children
         successor := findSuccessor(node.right) # find the successor node
         node.value = successor.value # replace current node's value with successor's
         deleteNode(node.right, successor.value) # delete the successor node from the tree

# Function to find the successor node in a binary search tree
proc findSuccessor*(node: Node): Node =
   if node.left == nil:
      return node
   return findSuccessor(node.left)

# Example usage:

# Create an empty root node
var root: Node

# Insert nodes into the tree
insertNode(root, "F")
insertNode(root, "B")
insertNode(root, "D")
insertNode(root, "A")
insertNode(root, "E")
insertNode(root, "C")
insertNode(root, "G")
insertNode(root, "I")
insertNode(root, "H")

# Search for a value in the tree
if search(root, "H"):
   echo "Value found"
else:
   echo "Value not found"

# Delete a node from the tree
deleteNode(root, "A")