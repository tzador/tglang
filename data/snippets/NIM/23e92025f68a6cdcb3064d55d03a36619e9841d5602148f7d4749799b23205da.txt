const
    num_players = 2  # initial number of players
    max_stones = 20  # maximum number of stones in the game
    empty_spot_value = 0  # value of an empty spot on the game board

# function to display the game board
proc display_board(board: array[1..max_stones, 1..num_players*2 + 1]): void =
    var
        stones: array[1..max_stones] of string

    # loop through stones and add them to the array
    for i in 1..max_stones:
        stones[i] = "*"

    # loop through each player's stones and mark the empty spots as '-'
    for i in 1..num_players:
        for j in 1..max_stones:
            if board[j, i] == empty_spot_value:
                stones[j] = "-"

    # display the game board with each player's stones and empty spots marked
    echo "Player 1: " & stones[1..max_stones div num_players]
    echo "Player 2: " & stones[max_stones div num_players + 1..max_stones]
    echo "---------------------------------"

# function to check if there are any stones left on the game board
# returns true if there are still stones, false if all stones have been taken
func check_stones_left(board: array[1..max_stones, 1..num_players*2 + 1]): bool =
    var
        total_stones: int = 0

    # loop through each player's stones and add them to the total count
    for i in 1..num_players:
        for j in 1..max_stones:
            total_stones += board[j, i]

    # if the total count is equal to the max number of stones, all stones have been taken
    if total_stones == max_stones:
        return false
    else:
        return true

# function to make a move on the game board
# takes in the player number, the number of stones to remove, and the game board
# returns true if the move was successful, returns false if the move was invalid
func make_move(player: int, stones_to_remove: int, board: array[1..max_stones, 1..num_players*2 + 1]): bool =
    # check if the move is valid (number of stones to remove is less than or equal to number on the spot)
    if stones_to_remove <= board[stones_to_remove, player]:
        # update the game board by removing the specified number of stones from the specified spot
        board[stones_to_remove, player] -= stones_to_remove
        return true
    else:
        return false

# main game loop
var
    game_board: array[1..max_stones, 1..num_players*2 + 1]

# initialize the game board with all stones in the first player's column
for i in 1..max_stones:
    game_board[i, 1] = i

# set current player to 1
var current_player = 1

# game loop
while check_stones_left(game_board) == true:
    # display the game board
    display_board(game_board)

    # get user input for the number of stones to remove
    stones_to_remove: int = getInput("Player " & $current_player & ", how many stones do you want to remove? ")

    # make the move
    success: bool = make_move(current_player, stones_to_remove, game_board)

    # if the move was not successful, prompt the player to make another move
    while success == false:
        echo "Invalid move. You cannot remove more stones than are on a spot."
        stones_to_remove = getInput("Player " & $current_player & ", how many stones do you want to remove? ")
        success = make_move(current_player, stones_to_remove, game_board)

    # switch to the next player
    if current_player == num_players:
        current_player = 1
    else:
        current_player += 1

# once all stones have been taken, display the winner
if current_player == 1:
    winner = num_players
else:
    winner = current_player - 1
echo "---------------------------------"
echo "Player " & $winner & " has won the game!"