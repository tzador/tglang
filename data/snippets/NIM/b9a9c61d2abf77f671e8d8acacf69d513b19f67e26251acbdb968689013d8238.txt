{-----------------------------------------------
This is a complex code snippet in the NIM programming language.
It generates a binary search tree from a set of numbers.
-----------------------------------------------}

# Define a Node type with two fields, key and value
type Node = object
  key: int
  value: int

# A helper function to create a new Node instance
proc newNode(key, value: int): Node =
  result.key = key
  result.value = value

# A recursive function to insert a new node into the binary search tree
proc insert(root: Node, newNode: Node) =
  if root is Nil: # Check if root is empty
    root = newNode # If so, insert the new node as the root
  else:
    if newNode.key < root.key:
      insert(root.left, newNode) # If key is less than root, insert in left subtree
    else:
      insert(root.right, newNode) # Otherwise, insert in right subtree

# A function to print the binary search tree in-order
proc printTree(root: Node) =
  if root isNil:
    echo "Empty Tree"
  else:
    # Recursive call on the left subtree
    printTree(root.left)
    # Print the key and value of current node
    echo root.key, ": ", root.value
    # Recursive call on the right subtree
    printTree(root.right)

# Create an empty root node
var root: Node = Nil

# Insert nodes with keys and values
insert(root, newNode(5, 10))
insert(root, newNode(7, 20))
insert(root, newNode(3, 30))
insert(root, newNode(2, 40))

# Print the binary search tree in-order
printTree(root)