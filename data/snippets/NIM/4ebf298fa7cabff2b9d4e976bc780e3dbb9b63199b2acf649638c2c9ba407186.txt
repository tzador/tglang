proc heapsort(a: var int/array) =
  var heap = newSeq[int](a.len)  # declare a new sequence for the heap
  var last = a.len-1              # declare variable to track last element in the array (zero-based indexing)

  for i in 0..last :              # loop to build the heap
    heap.add(a[i])                # add the next element to the heap
    shiftup(heap, i)              # shift the elements up to maintain heap property

  for i in 0..last :              # loop to extract elements from the heap
    a[i] = heap[0]                # assign the root (max value) to the current index in the array
    heap[0] = heap[last-i]        # swap the root with the last element in the heap
    heap.del(heap.len-1)          # delete the last (now duplicated) element from the heap
    shiftdown(heap, 0)            # shift the new root down to maintain heap property

proc shiftup(heap: var int/array, index: int) =
  if index == 0:                  # if index is at root, no need to shift up
    return
  var parent = (index-1)/2        # calculate parent index
  if heap[index] > heap[parent]:  # compare current element with parent
    heap.swap(index, parent)      # swap if current element is larger
    shiftup(heap, parent)         # recursively call shiftup on parent

proc shiftdown(heap: var int/array, index: int) =
  var left = index*2 + 1          # calculate left child index
  var right = index*2 + 2         # calculate right child index

  if left < heap.len and heap[left] > heap[right]: # check if left child exists and is larger than right child
    if heap[index] < heap[left]:  # if parent is smaller than left child, swap
      heap.swap(index, left)
      shiftdown(heap, left)       # recursively call shiftdown on left child
  elif right < heap.len and heap[right] > heap[left]: # else if right child exists and is larger than left child
    if heap[index] < heap[right]: # if parent is smaller than right child, swap
      heap.swap(index, right)
      shiftdown(heap, right)      # recursively call shiftdown on right child