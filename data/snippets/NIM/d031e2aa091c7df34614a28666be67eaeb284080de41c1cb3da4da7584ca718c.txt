# Here is a complex NIM code snippet that uses several built-in functions and loops

# Define a list of numbers
var numbers = [1, 2, 3, 4, 5]

# Use the `filter` built-in function to filter out even numbers
var even_numbers = filter(numbers, (x: int) -> bool: x mod 2 == 0)

# Use the `map` built-in function to square each number
var squared_numbers = map(numbers, (x: int) -> int: x * x)

# Use the `reduce` built-in function to sum all the numbers
var total_sum = reduce(numbers, 0, (acc: int, x: int) -> int: acc + x)

# Use a `for` loop to print out each number in the list
for number in numbers:
    echo number

# Use a `while` loop to print out the squared numbers in descending order
var i = len(squared_numbers)
while i > 0:
    echo squared_numbers[i - 1]
    i -= 1

# Use a `when` statement to print out a different message depending on the total sum
when total_sum > 10:
    echo "The total sum is greater than 10."
else:
    echo "The total sum is less than or equal to 10."

# Use a `try` statement to check for errors when dividing by zero
try:
    var result = 10 div 0
except:
    echo "Error: division by zero occurred."

# Use the `assert` built-in function to check if a condition is true
assert total_sum == sum(numbers)