type
  # This is a custom enumerated type for different colors
  Color = enum
    red, blue, yellow, green, purple, orange, brown

# This is a proc that takes in two strings and concatenates them
proc concatString(string1, string2: string): string =
  return string1 & string2

# This is a template proc that takes in a generic value and returns it
proc returnGeneric[T](value: T): T =
  return value

# This is a template proc that takes in a generic array and returns its length
proc arrayLength[T](arr: array[T]): int =
  return len(arr)

# This is a template proc that takes in two generic values and returns the larger one
# Uses the '?:' conditional statement
proc returnLarger[T](value1, value2: T): T =
  return if value1 > value2:
    value1
  else:
    value2

# This is a template proc that takes in a generic value and checks if it is of a certain type
# Uses the 'is' keyword
proc isType[T](value: T, type: type): bool =
  return value is type

# This is a template proc that takes in two generic values and swaps their values
# Uses the 'swap' keyword
proc swapValues[T](var value1, value2: T) =
  swap(value1, value2)