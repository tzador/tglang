## This is a comment in NIM
import algorithm, sequtils

## Create an integer variable
var num: int = 5

# Create a sequence of strings
var fruitList: seq[string] = @["apple", "banana", "orange"]

## Create a generic type
type
    Stack[T] = ref object
        items: seq[T]

## Create a procedure to push an item into the stack
proc push[T](stack: var Stack[T], item: T) =
    stack.items.add(item)

## Create a procedure to pop an item from the stack
proc pop[T](stack: var Stack[T]): T =
    var item = stack.items[stack.items.len - 1]
    stack.items.del(stack.items.len - 1)
    result = item

## Create a stack of integers
var intStack = Stack[int]()

## Push 3 numbers to the stack
push(intStack, 1)
push(intStack, 2)
push(intStack, 3)

## Pop an item from the stack and print it
echo pop(intStack)  # Output: 3

## Reverse the fruit list
fruitList = fruitList.reverse() # Output: @["orange", "banana", "apple"]

## Print a message using string interpolation
echo "The result is: $(num * 2)" # Output: The result is: 10

## Use a for loop to print each item in the fruit list
for fruit in fruitList:
    echo fruit # Output: orange
               #         banana
               #         apple

## Use a while loop to print the first 5 multiples of num
var count: int = 0

while count < 5:
    count += 1
    echo num * count # Output: 5
                     #         10
                     #         15
                     #         20
                     #         25