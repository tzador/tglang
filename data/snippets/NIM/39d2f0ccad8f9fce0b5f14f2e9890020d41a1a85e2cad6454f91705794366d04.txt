proc mergeSort(arr: seq[int]): seq[int] =
  # Mergesort is a divide and conquer algorithm that 
  # recursively divides the array into halves, sorts 
  # them and then merges them back together in order
  if arr.len < 2:
    return arr
  let mid = arr.len div 2
  var left: seq[int] = arr[0..mid]
  var right: seq[int] = arr[mid..arr.len]
  
  left = mergeSort(left)
  right = mergeSort(right)
  let merged = merge(left, right)
  
  return merged

proc merge(left: seq[int], right: seq[int]): seq[int] =
  # Takes two sorted arrays and merges them in order
  var result: seq[int] = @[]
  var i = 0
  var j = 0
  
  while i < left.len and j < right.len:
    if left[i] < right[j]:
      result.add(left[i])
      inc(i)
    else:
      result.add(right[j])
      inc(j)
  
  while i < left.len:
    result.add(left[i])
    inc(i)
  
  while j < right.len:
    result.add(right[j])
    inc(j)
  
  return result

var arr = [10, 5, 3, 8, 2, 6, 4, 7, 1, 9]
echo "Unsorted array: ", arr
arr = mergeSort(arr)
echo "Sorted array: ", arr