# This code snippet demonstrates a function to calculate the nth Fibonacci number using dynamic programming
var dpArray = [0, 1]  # create a dynamic programming array to store calculated Fibonacci numbers

# function to calculate Fibonacci number using dynamic programming
proc getFibonacci(n: int): int =
    if n == 0 or n == 1:
        return dpArray[n]  # base case, return 0 or 1 from dynamic programming array
    else:
        if dpArray.len() <= n:
            var newNumber = getFibonacci(n-1) + getFibonacci(n-2) # calculate Fibonacci number using recursion
            dpArray.add(newNumber)  # add new number to dynamic programming array
            return newNumber  # return calculated Fibonacci number
        else:
            return dpArray[n]  # return pre-calculated Fibonacci number from dynamic programming array

echo getFibonacci(10)  # output: 55