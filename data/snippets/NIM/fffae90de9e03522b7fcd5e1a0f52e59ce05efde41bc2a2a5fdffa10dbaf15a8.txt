type
    # a custom User defined type for a deck of cards
    # that consists of a suit and value
    card: object
        suit: string
        value: int
    
    # defining an enum type to represent different suits
    Suit = enum
        Spades, Clubs, Hearts, Diamonds # suits in a standard deck of cards
        Custom*: string # for custom suits
    
    # creating a new deck of cards
    proc newDeck(): seq[card] =
        # creating an empty sequence to store the cards
        var deck: seq[card] = @[]
        
        # looping through each suit in the Suit enum
        for s in Suit:
            # looping through values 2 to 14
            for v in 2..14:
                # creating a new card with the current suit and value
                var c: card = card(suit: s, value: v)
                # appending the card to the deck sequence
                deck.add(c)
        
        # returning the completed deck
        return deck
        
    # shuffling the deck of cards using the Fisher-Yates algorithm
    proc shuffleDeck(deck: var seq[card]) =
        # getting the length of the deck
        var n = deck.len
        
        # looping through each card in the deck
        for i in 0..n-1:
            # generating a random integer between i and n-1
            var j = i + Random(0..n-i-1)
            
            # swapping the current card with the randomly selected card
            deck[i], deck[j] = deck[j], deck[i]
        
    # dealing a card from the deck
    proc dealCard(deck: var seq[card]): card =
        # removing the first card from the deck and storing it in a variable
        var c: card = deck[0]
        deck.del(0)
        
        # returning the dealt card
        return c
    
    # printing out the remaining cards in the deck
    proc printDeck(deck: seq[card]) =
        # looping through each card in the deck
        for c in deck:
            # printing out the suit and value of the card
            echo c.suit, c.value
    
# creating a new deck of cards
var deck = newDeck()
# shuffling the deck
shuffleDeck(deck)
# dealing a card from the deck
var c1 = dealCard(deck)
echo "Dealt card:", c1.suit, c1.value # printing the value of the dealt card
# printing out the remaining cards
printDeck(deck)