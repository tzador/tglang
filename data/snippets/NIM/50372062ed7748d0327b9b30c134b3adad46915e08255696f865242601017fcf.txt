#The following code snippet shows a basic implementation of the classic NIM game using NIM programming language
#It includes random number generation, user input and AI strategy for computer's move
#Variables to keep track of game progress
var pileCount: int = 10     #number of piles in the game
var maxStones: int = 5      #maximum number of stones that can be taken from a pile
var pileSize: array[int]    #array to store the number of stones in each pile
var currentPlayer: bool = true      #boolean to indicate the current player, true for user and false for computer

#Function to generate a random number within a given range
proc random(min: int, max: int): int =
  return min + random(max - min + 1)

#Function to check if the given move is valid
proc isValidMove(pile: int, stones: int): bool =
  if (pile < 0) or (pile > pileCount):
    return false
  elif (stones < 1) or (stones > maxStones) or (stones > pileSize[pile]):
    return false
  else:
    return true

#Function to handle the user's move
proc userMove(): bool =
  #Getting input from the user
  echo "Your turn. Enter the pile number and the number of stones you want to take."
  var input: string = readLine(stdin)
  var pile: int
  var stones: int
  parse input, "%d %d", pile, stones

  #Validating the input
  if not isValidMove(pile, stones):
    echo "Invalid move. Please try again."
    return false
  else:
    #Updating pile size and current player
    pileSize[pile] -= stones
    currentPlayer = false
    return true

#Function to handle the computer's move
proc computerMove(): bool =
  #Generating a valid move
  var pile: int
  var stones: int
  while not isValidMove(pile, stones):
    pile := random(0, pileCount - 1)
    stones := random(1, maxStones)

  #Displaying the computer's move
  echo "Computer's turn. It took %d stones from pile %d.", stones, pile

  #Updating pile size and current player
  pileSize[pile] -= stones
  currentPlayer = true
  return true

#Function to check if the game is over
proc isGameOver(): bool =
  #Looping through all piles to check if they are empty
  for i in pileSize:
    if i != 0:
      return false
  return true

#Main game logic
while not isGameOver():
  #Displaying current pile sizes
  for i in 1..pileCount:
    echo "Pile %d: %d stones", i, pileSize[i]

  #Handling the current player's move
  if currentPlayer:
    if not userMove():
      continue
  else:
    if not computerMove():
      continue

#Displaying the winner
if currentPlayer:
  echo "You win!"
else:
  echo "Computer wins!"