# This is a complex code snippet written in the NIM programming language.
# It is a function that recursively calculates the power of a given number.

proc power(base: int, exponent: int): int =
  # Check if exponent is 0, which means base raised to the power of 0 is 1.
  if exponent==0:
    return 1
  # Check if base is 0, which means anything raised to the power of 0 is 0.
  if base==0:
    return 0
  # Check if exponent is 1, which means base raised to the power of 1 is just the base itself.
  if exponent==1:
    return base
  # If exponent is negative, we recursively call the function with the inverse of the base
  # and the absolute value of the exponent to multiply the result by -1.
  if exponent<0:
    return power(1/base, abs(exponent))
  # If exponent is even, we recursively call the function with the base squared and
  # half of the exponent to reduce the number of recursive calls needed.
  if exponent%2==0:
    return power(base*base, exponent/2)
  # If exponent is odd, we recursively call the function with the base squared and
  # half of the exponent minus 1, and then multiply the result by the base.
  return power(base*base, (exponent-1)/2) * base

# Create some test cases to check the function.
echo power(3, 4)  # Output: 81
echo power(2, 0)  # Output: 1
echo power(0, 5)  # Output: 0
echo power(-2, 3) # Output: -8
echo power(5, -2) # Output: 0.04