# This code snippet creates a dynamic programming solution
# for the "Minimum Coin Change" problem, which
# finds the minimum number of coins needed to make a given amount of money

# Define a function to calculate the minimum number of coins
# needed to make a given amount of money
proc minCoinChange(amount: int, coins: seq[int]): int {.nimCallConv, tags: [RootEffect],
                                                    raises: [ValueError, IndexError].} =
    # Initialize a dynamic programming table with the size of the given amount plus 1
    var dpTable = newSeq[int](amount+1, init = 0)

    # Set the first index of the table to 0, since 0 coins are needed for 0 amount
    dpTable[0] = 0

    # Iterate through all possible amounts
    for i in 1..amount:
        # Initialize a temporary variable to hold the minimum number of coins needed for the current amount
        var minCoins = amount + 1

        # Iterate through each coin denomination
        for coin in coins:
            # Check if the current coin is smaller than or equal to the current amount
            if coin <= i:
                # Calculate the minimum number of coins needed for the remaining amount
                var remainingAmount = i - coin

                # Update the minimum number of coins needed if the current coin can be used
                # and the minimum number of coins for the remaining amount is smaller than the current minimum
                if dpTable[remainingAmount] < minCoins:
                    minCoins = dpTable[remainingAmount]

        # Update the dynamic programming table with the minimum number of coins for the current amount
        dpTable[i] = minCoins + 1

    # Return the minimum number of coins for the given amount
    return dpTable[amount]

# Test the function with a given amount and a list of coin denominations
echo minCoinChange(15, @[1, 5, 10, 25])

# Output: 2 (using one 10 coin and one 5 coin to make 15)