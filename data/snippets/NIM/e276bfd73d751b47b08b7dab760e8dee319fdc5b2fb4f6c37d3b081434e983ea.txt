# This code snippet calculates the inverse of a matrix using Gaussian elimination
# and returns the inverted matrix as a two-dimensional array

proc invertMatrix(matrix: array[2,2, float]):array[2,2, float] =
  # initialize an identity matrix
  var invMatrix: array[2,2, float] = [[1.0, 0.0], [0.0, 1.0]]         

  # for each column of the matrix
  for j in 0..matrix.high:
    
    # find the pivot element
    var pivot: float = matrix[j][j]

    # divide each element in the row by the pivot
    for i in 0..matrix.high:
      matrix[j][i] = matrix[j][i] / pivot
      invMatrix[j][i] = invMatrix[j][i] / pivot

    # subtract multiples of the pivot row from each other row
    for k in 0..matrix.high:
      if k != j:
        var factor = matrix[k][j]
        for l in 0..matrix.high:
          matrix[k][l] = matrix[k][l] - factor * matrix[j][l]
          invMatrix[k][l] = invMatrix[k][l] - factor * invMatrix[j][l]

  # return the inverted matrix
  result = invMatrix