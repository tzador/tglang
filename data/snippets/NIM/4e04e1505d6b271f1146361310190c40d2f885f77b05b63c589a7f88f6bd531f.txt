# This is a NIM game program that allows a player to choose the number of heaps and stones to play with
# It also includes a computer AI that plays against the player and makes optimal moves
import math

# Define global variables
var heaps: seq[int]
var heap_count: int
var removed_stones: int

# Start the game
echo "Welcome to NIM!"
echo "How many heaps do you want to play with?"
heap_count = read()

# Initialize the heaps with random number of stones
for i in 0..heap_count-1:
    heaps.add(rand(5..15))

# Game loop
while sum(heaps) > 0:
	echo "Current heap status: ", heaps
	if turn == "player":
		# Player's turn
		echo "Your turn, choose a heap (from 1 to ", heap_count, "):"
		heap_choice = read()
		echo "How many stones do you want to remove?"
		removed_stones = read()
		while heap_choice < 1 or heap_choice > heap_count or removed_stones < 1 or removed_stones > heaps[heap_choice-1]:
			echo "Invalid input, please try again."
			heap_choice = read()
			removed_stones = read()
	else:
		# Computer's turn
		echo "Computer's turn..."
		heap_choice = optimal_heap()
		removed_stones = math.floor(sum(heaps) / (heap_count * 2))
		while removed_stones > heaps[heap_choice-1]:
			heap_choice = optimal_heap()
			removed_stones = math.floor(sum(heaps) / (heap_count * 2))

	# Update heap status
	heaps[heap_choice-1] -= removed_stones
	echo "Removed ", removed_stones, " stones from heap ", heap_choice
	echo "New heap status: ", heaps

	# Change turn
	if turn == "player":
		turn = "computer"
	else:
		turn = "player"

# End of game
if turn == "player":
    echo "Computer wins!"
else:
    echo "Player wins!"

# Function to determine optimal heap for the computer to choose
proc optimal_heap(): int =
	var optimal_heap: int = 0
	var xor: int = 0
	for i in 0..heap_count-1:
		xor xor= heaps[i]

	if xor == 0:
		# If xor is 0, computer selects a random non-empty heap
		while optimal_heap == 0:
			optimal_heap = rand(1..heap_count)
			if heaps[optimal_heap-1] == 0:
				optimal_heap = 0
	else:
		# If xor is not 0, computer removes stones from the heap with xor value
		for i in 0..heap_count-1:
			if heaps[i] xor xor < heaps[i]:
				optimal_heap = i + 1
				break
	return optimal_heap