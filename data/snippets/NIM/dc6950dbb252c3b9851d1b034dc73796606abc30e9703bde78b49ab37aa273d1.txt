const
  maxTurns: int = 10
type
  Player = object
    name:string
    score:int
    turn:int
  Game = object
    player1:Player
    player2:Player
    currentTurn:int
    remainingTurns:int
  Move = enum
    Rock
    Paper
    Scissors
    Lizard
    Spock
procedures
  startGame(player1Name:string, player2Name:string): Game =
    var game:Game
    game.player1 = Player(name:player1Name, score:0, turn:0)
    game.player2 = Player(name:player2Name, score:0, turn:0)
    game.currentTurn = 0
    game.remainingTurns = maxTurns
    return game
  currentPlayer(game:Game): Player =
    if game.currentTurn mod 2 == 0:
      return game.player1
    else:
      return game.player2
  nextTurn(game:Game)[Move, Move] =
    inc(game.currentTurn)
    dec(game.remainingTurns)
    if game.currentTurn mod 2 == 0:
      return game.player1.name, game.player2.name
    else:
      return game.player2.name, game.player1.name
  playRound(game:Game, player1Move:Move, player2Move:Move) =
    var currentPlayer:Player
    currentPlayer = currentPlayer(game)
    currentPlayer.turn += 1
    case player1Move:
      of Move.Rock:
        case player2Move:
          of Move.Rock:
            echo currentPlayer.name & " and " & nextTurn(game)[0] & " drew."
          of Move.Paper:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Rock and " & nextTurn(game)[1] & " chose Paper."
          of Move.Scissors:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Rock and " & nextTurn(game)[1] & " chose Scissors."
          of Move.Lizard:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Rock and " & nextTurn(game)[1] & " chose Lizard."
          of Move.Spock:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Rock and " & nextTurn(game)[1] & " chose Spock."
      of Move.Paper:
        case player2Move:
          of Move.Rock:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Paper and " & nextTurn(game)[1] & " chose Rock."
          of Move.Paper:
            echo currentPlayer.name & " and " & nextTurn(game)[0] & " drew."
          of Move.Scissors:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Paper and " & nextTurn(game)[1] & " chose Scissors."
          of Move.Lizard:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Paper and " & nextTurn(game)[1] & " chose Lizard."
          of Move.Spock:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Paper and " & nextTurn(game)[1] & " chose Spock."
      of Move.Scissors:
        case player2Move:
          of Move.Rock:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Scissors and " & nextTurn(game)[1] & " chose Rock."
          of Move.Paper:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Scissors and " & nextTurn(game)[1] & " chose Paper."
          of Move.Scissors:
            echo currentPlayer.name & " and " & nextTurn(game)[0] & " drew."
          of Move.Lizard:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Scissors and " & nextTurn(game)[1] & " chose Lizard."
          of Move.Spock:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Scissors and " & nextTurn(game)[1] & " chose Spock."
      of Move.Lizard:
        case player2Move:
          of Move.Rock:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Lizard and " & nextTurn(game)[1] & " chose Rock."
          of Move.Paper:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Lizard and " & nextTurn(game)[1] & " chose Paper."
          of Move.Scissors:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Lizard and " & nextTurn(game)[1] & " chose Scissors."
          of Move.Lizard:
            echo currentPlayer.name & " and " & nextTurn(game)[0] & " drew."
          of Move.Spock:
            inc(currentPlayer.score)
            echo currentPlayer.name & "chose Lizard and " & nextTurn(game)[1] & " chose Spock."
      of Move.Spock:
        case player2Move:
          of Move.Rock:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Spock and " & nextTurn(game)[1] & " chose Rock."
          of Move.Paper:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Spock and " & nextTurn(game)[1] & " chose Paper."
          of Move.Scissors:
            inc(currentPlayer.score)
            echo currentPlayer.name & " chose Spock and " & nextTurn(game)[1] & " chose Scissors."
          of Move.Lizard:
            inc(nextTurn(game)[1].score)
            echo currentPlayer.name & " chose Spock and " & nextTurn(game)[1] & " chose Lizard."
          of Move.Spock:
            echo currentPlayer.name & " and " & nextTurn(game)[0] & " drew."
when isMainModule:
  var game:Game
  game = startGame(player1Name: "John", player2Name: "Jane")
  while game.remainingTurns > 0:
    var player1Move:Move, player2Move:Move
    echo "It is " & currentPlayer(game).name & "'s turn."
    player1Move = currentPlayer(game).choose()[0]
    player2Move = currentPlayer(game).choose()[1]
    playRound(game, player1Move, player2Move)
    if currentPlayer(game).turn == maxTurns:
      game.currentTurn += 1
      game.remainingTurns = maxTurns
  if game.player1.score > game.player2.score:
    echo game.player1.name & " wins with a score of " & $game.player1.score & " over " & game.player2.name & "'s score of " & $game.player2.score & " in " & $game.currentTurn & " turns."
  elif game.player1.score < game.player2.score:
    echo game.player2.name & " wins with a score of " & $game.player2.score & " over " & game.player1.name & "'s score of " & $game.player1.score & " in " & $game.currentTurn & " turns."
  else:
    echo "It is a tie! Both players have a score of " & $game.player1.score & " in " & $game.currentTurn & " turns."