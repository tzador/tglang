type
  Board = array [0 .. 7, 0 .. 7] of char ## Defines a type for the game board, with a 2D array of characters

var
  board : Board ## Declares a board variable of type Board
  currentRow : int ## Declares a variable for the current row
  currentCol : int ## Declares a variable for the current column
  player1Turn : bool ## Declares a variable to keep track of player 1's turn

proc initializeBoard() = ## Defines a procedure to initialize the board with starting pieces
  for row in 0..7: ## Uses a for loop to iterate through each row
    for col in 0..7: ## Uses a for loop to iterate through each column
      if row == 0 or row == 1: ## Checks if the current row is in the first two rows of the board
        board[row, col] = 'X' ## Places an 'X' piece at the current position
      elif row == 6 or row == 7: ## Checks if the current row is in the last two rows of the board
        board[row, col] = 'O' ## Places an 'O' piece at the current position
      else: ## For all other rows
        board[row, col] = '-' ## Places an empty space at the current position
        
proc displayBoard() = ## Defines a procedure to display the board
  for row in 0..7: ## Uses a for loop to iterate through each row
    echo "|", ## Prints a dividing line at the beginning of each row
    for col in 0..7: ## Uses a for loop to iterate through each column
      echo board[row, col], "|" ## Prints the current piece at the position, separated by a dividing line
    echo "\n|------------------------|\n" ## Prints a dividing line at the end of each row

proc movePiece(rowFrom, colFrom, rowTo, colTo: int) = ## Defines a procedure to move a piece from one position to another
  if (not (rowFrom in 0..7) or not (rowTo in 0..7) or not (colFrom in 0..7) or not (colTo in 0..7)): ## Checks if any of the input positions are outside the board
    discard "Invalid positions provided." ## Throws an error and exits the procedure
  elif (board[rowTo, colTo] == '-'): ## Checks if the destination position is empty
    board[rowTo, colTo] = board[rowFrom, colFrom] ## Sets the destination position to be the same as the source position
    board[rowFrom, colFrom] = '-' ## Sets the source position to be an empty space
  else: ## If the destination position is not empty
    discard "Destination position is not empty." ## Throws an error and exits the procedure
    
while true: ## Creates an infinite loop for the game
  player1Turn = not player1Turn ## Toggles the boolean for the player's turn
  if player1Turn: ## Checks if it is player 1's turn
    echo "Player 1's turn. Enter the row and column of the piece you want to move, followed by the destination row and column: " ## Asks the player for input
  else: ## If it is player 2's turn
    echo "Player 2's turn. Enter the row and column of the piece you want to move, followed by the destination row and column: " ## Asks the player for input
  var input : string = readLine() ## Reads in the player's input
  var params = input.split() ## Splits the input into individual parameters
  var rowFrom : int = parseInt(params[0]) ## Converts the first parameter into an integer and assigns it to the source row variable
  var colFrom : int = parseInt(params[1]) ## Converts the second parameter into an integer and assigns it to the source column variable
  var rowTo : int = parseInt(params[2]) ## Converts the third parameter into an integer and assigns it to the destination row variable
  var colTo : int = parseInt(params[3]) ## Converts the fourth parameter into an integer and assigns it to the destination column variable
  movePiece(rowFrom, colFrom, rowTo, colTo) ## Calls the movePiece procedure to move the piece on the board
  displayBoard() ## Calls the displayBoard procedure to show the updated board
  ## Checks for winning conditions
  if 'X' notin board: ## Checks if player 1 no longer has any pieces on the board
    echo "Player 2 has won!" ## Prints the winning message for player 2
    break ## Exits the infinite loop
  elif 'O' notin board: ## Checks if player 2 no longer has any pieces on the board
    echo "Player 1 has won!" ## Prints the winning message for player 1
    break ## Exits the infinite loop
  else: ## If there are still pieces on the board for both players
    continue ## Goes back to the beginning of the infinite loop and repeats the process