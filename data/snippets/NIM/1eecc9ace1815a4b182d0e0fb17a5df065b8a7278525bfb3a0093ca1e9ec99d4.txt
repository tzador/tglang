# This is a comment in NIM language

# NIM is a statically typed programming language

# In NIM, variables must be declared before use
# Here, we declare a variable 'x' of type int
var x: int
# We can also initialize it with a value, here we assign 5
var x = 5

# NIM supports a variety of data types, including:
# int (integer), float (floating point number), bool (boolean), char (character), string, and more

# NIM also has built-in support for arrays and lists
# We can declare an array 'nums' of type int with a length of 5
var nums: array[5, int]
# We can access and modify an element in an array using square brackets and the index
nums[3] = 10

# NIM supports control structures like if/else statements
# Here we check if the value of 'x' is equal to 1
if x == 1:
    echo "x is equal to 1"
else:
    echo "x is not equal to 1"

# NIM also has loops, including for loops and while loops
# Here is an example of a for loop that iterates through a list and adds the values to 'sum'
var sum = 0
for num in nums:
    sum += num

# NIM has support for functions
# Here we define a function 'floatSum' that takes two float parameters and returns their sum
func floatSum(x: float, y: float): float =
    return x + y

# NIM also has the concept of generics, allowing for code reuse for different types
# Here we define a generic function 'printArray' that prints out the elements of any array
# The placeholder 'T' represents any type that will be specified when the function is called
proc printArray(T) (array: array[?T]):
    for element in array:
        echo element

# NIM also has exceptions and error handling
# Here we define a custom exception 'ValueTooSmallError' and raise it if the value is less than 5
exception ValueTooSmallError(value: int) =
    echo "Value is too small: ", value
raise ValueTooSmallError(x)

# Finally, we can use the standard library to perform various operations
# Here we use the 'math' module to calculate the cosine of 'x'
import math
var cosx = math.cos(x)

# The final output of this code would be the value of cosx, which in this case would be 0.28366