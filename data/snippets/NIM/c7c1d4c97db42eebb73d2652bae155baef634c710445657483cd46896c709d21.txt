type
    # A custom object that represents a person.
    Person = object
        name: string
        age: int
    
    # A generic stack implementation using a sequence.
    Stack[T] = object
        values: seq[T]
    
    # Adds a new element to the top of the stack.
    proc push[T](stack: var Stack[T], val: T) =
        stack.values.add(val)
    
    # Removes the top element from the stack and returns it.
    proc pop[T](stack: var Stack[T]): T =
        result = stack.values[stack.values.len - 1]
        stack.values.del(stack.values.len - 1)
    
    # Creates a new person object with the given name and age.
    proc createPerson(name: string, age: int): Person =
        result.name = name
        result.age = age
    
    # A function that takes in a stack of persons and returns a new stack of persons with their names capitalized.
    func capitalizeNames(stack: Stack[Person]): Stack[Person] =
        var newStack: Stack[Person]
        for person in stack.values:
            newStack.push(createPerson(person.name.upper(), person.age))
        result = newStack
    
    # An example of using the stack and the capitalizeNames function.
    var stack: Stack[Person]
    stack.push(createPerson("John", 25))
    stack.push(createPerson("Sarah", 30))
    var capitalizedStack = capitalizeNames(stack)