# This is a NIM game implementation in NIM language #

# Input variables #
var
    numPiles: int # Number of piles in the game
    numCoins: array[int] # Array to keep track of number of coins in each pile
    playerTurn: bool # Boolean to track current player turn (true for player 1, false for player 2)

# Function to check if game is over #
func isGameOver(piles: array[int]): bool =
    var sum = 0
    for pile in piles:
        sum += pile
    if sum == 0: # If sum of all piles is equal to 0, game over
        return true
    return false

# Function to display current game status #
func displayGameStatus(piles: array[int]) =
    echo "Current game status:"
    for i, pile in pairs(piles):
        echo "Pile ${i+1}: ${pile} coins"

# Function to validate player's move #
func isValidMove(pileIndex: int, numCoinsToRemove: int, piles: array[int]): bool =
    if pileIndex < 0 or pileIndex >= piles.len or numCoinsToRemove <= 0 or numCoinsToRemove > piles[pileIndex]:
        return false
    return true

# Function to update game status after each move #
func updateGameStatus(pileIndex: int, numCoinsToRemove: int, piles: array[int]):
    piles[pileIndex] -= numCoinsToRemove

# Main game loop #
while true:
    displayGameStatus(numCoins)
    if isGameOver(numCoins):
        if playerTurn: # If player 1 turn, player 2 has won
            echo "Player 2 wins!"
        else: # If player 2 turn, player 1 has won
            echo "Player 1 wins!"
        break # End game loop
    
    # Get current player turn #
    if playerTurn:
        echo "Player 1's turn:"
    else:
        echo "Player 2's turn:"
    
    # Get user input for pile index and number of coins to remove #
    var pileIndex: int
    var numCoinsToRemove: int
    while true:
        pileIndex = readLine().parseInt()
        numCoinsToRemove = readLine().parseInt()
        if isValidMove(pileIndex, numCoinsToRemove, numCoins):
            break # Break out of input loop if move is valid
        else:
            echo "Invalid move. Please enter valid pile index and number of coins to remove:"
    
    # Update game status #
    updateGameStatus(pileIndex, numCoinsToRemove, numCoins)
    
    # Toggle player turn #
    playerTurn = not playerTurn