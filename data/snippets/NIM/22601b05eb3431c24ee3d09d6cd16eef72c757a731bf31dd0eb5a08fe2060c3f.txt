#This example code snippet generates a random maze using the Depth-first Search algorithm
#NIM (Native Imperative Multiparadigm) programming language is developed by Andreas Rumpf and its syntax is similar to Python and Pascal
import random
#Creating a class named Maze with properties for width and height
type
    Maze = ref object
        width, height: int
        map: array[height, width, bool]
method putWall(this: Maze, row, col: int) =
    #Method to put a wall at given row and column of maze
    this.map[row, col] = true
method isWall(this: Maze, row, col: int): bool =
    #Method to check if given cell is a wall or not
    result = this.map[row, col]
method availableNeighbours(this: Maze, row, col: int): seq[tuple[x, y: int]] =
    #Method to find available neighbouring cells of given cell
    result = @[]
    if col > 1:
        #checking the left cell
        if not this.isWall(row, col-1):
            result.add((row, col-1))
    if col < this.width:
        #checking the right cell
        if not this.isWall(row, col+1):
            result.add((row, col+1))
    if row > 1:
        #checking the top cell
        if not this.isWall(row-1, col):
            result.add((row-1, col))
    if row < this.height:
        #checking the bottom cell
        if not this.isWall(row+1, col):
            result.add((row+1, col))
#Function to generate a random maze using Depth-first Search algorithm
proc generateMaze(width, height: int): Maze =
    result = Maze(width, height)
    #initializing the maze with walls
    for i in countup(1, width):
        for j in countup(1, height):
            result.putWall(i, j)
    #setting the starting cell
    result.putWall(1, 1)
    #stack to keep track of visited cells
    var stack: seq[tuple[row, col: int]] = @[(1, 1)]
    while stack.len > 0:
        #selecting a random cell from stack
        var (row, col) = stack.pop(random.int(stack.len))
        #finding available neighboring cells
        var neighbours = result.availableNeighbours(row, col)
        if neighbours.len > 0:
            #randomly selecting a neighboring cell and removing the wall between them
            var (nextRow, nextCol) = neighbours[random.int(neighbours.len)]
            result.putWall(nextRow, nextCol)
            #pushing the next cell into the stack
            stack.add((nextRow, nextCol))
    #returning the generated maze
    return result
#generating a random maze of size 10 x 10
var maze = generateMaze(10, 10)
#displaying the maze (set-up for output)
echo "Output:"
var output = ""
for i in countup(1, maze.height):
    for j in countup(1, maze.width):
        if maze.isWall(i, j):
            #wall symbol
            output.add("██")
        else:
            #empty cell symbol
            output.add("  ")
    output.add("\n")
#displaying the output
echo output