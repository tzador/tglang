## Annotated NIM Code Snippet

# Example of a function that calculates the factorial of a given number
#
# Parameters:
#   x - the number to calculate factorial for
#
# Returns:
#   Factorial of x
#

proc factorial(x: int): int =
  # Base case
  if x == 1:
    return 1
  else:
  # Recursive case
    return x * factorial(x-1)


# Example of a function that creates a list of Fibonacci numbers
#
# Parameters:
#   n - the number of Fibonacci numbers to generate
#
# Returns:
#   A list of n Fibonacci numbers
#

proc fibonacci(n: int): seq[int] =
  # Initialize the first two elements of the list
  var fib_sequence: seq[int] = [1, 1]

  # Loop through all numbers up to n
  for i in 3..n+1:
    # Calculate the next Fibonacci number by adding the previous two
    var next_num = fib_sequence[i-2] + fib_sequence[i-3]

    # Append the next number to the end of the list
    fib_sequence.add(next_num)

  return fib_sequence


# Example of a function that checks if a number is prime
#
# Parameters:
#   num - the number to check
#
# Returns:
#   True if num is prime, false if not
#

proc is_prime(num: int): bool =
  # Base case
  if num <= 1:
    return false
  elif num <= 3:
    return true
  elif num mod 2 == 0 or num mod 3 == 0:
    return false
  else:
  # Loop through all numbers from 5 to sqrt(num)
    for i in 5..(num.sqrt()).toInt()+1 by 6:
      # Check if num is evenly divisible by any number between 5 and sqrt(num)
      if num mod i == 0 or num mod (i+2) == 0:
        return false

  # If num is not divisible by any number between 5 and sqrt(num), it is prime
  return true