# This is a code snippet in the NIM programming language
# The following code generates a random maze using the Depth-First Search algorithm

import strutils # Importing the strutils library for string operations

# The Maze class defines the structure of the maze
# It stores the maze map and provides functions for creating and accessing the maze

type Maze = object
    map: seq[seq[int]]
    stack: seq[seq[int]]

# The create_maze function initializes the maze with the given number of rows and columns
# It returns the maze object with the map and stack initialized

proc create_maze(rows: int, cols: int): Maze =
    var maze: Maze
    maze.map = seq.newSeq[seq[int]](rows)
    maze.stack = @[]
    for i in 0..rows-1:
        var row = seq.newSeq[int](cols)
        maze.map[i] = row
        for j in 0..cols-1:
            row[j] = 1
    for i in 0..rows-1:
        maze.map[i][0] = 0
        maze.map[i][cols-1] = 0
    for j in 0..cols-1:
        maze.map[0][j] = 0
        maze.map[rows-1][j] = 0
    result = maze

# The generate_maze function uses the Depth-First Search algorithm to generate a random maze
# It takes in the maze object as input and modifies its map and stack attributes accordingly

proc generate_maze(maze: Maze) =
    var curr_row = 1 # Set current row and column to 1
    var curr_col = 1
    maze.map[curr_row][curr_col] = 0 # Set starting point of maze to open
    maze.stack.add([curr_row, curr_col]) # Add starting position to stack
    while maze.stack.len > 0: # While stack is not empty
        var pos = maze.stack.pop # Pop the last position from stack
        var row = pos[0]
        var col = pos[1]
        var neighbours = @[]
        if row > 1:
            neighbours.add([row-1, col])
        if row < maze.map.len-2:
            neighbours.add([row+1, col])
        if col > 1:
            neighbours.add([row, col-1])
        if col < maze.map[0].len-2:
            neighbours.add([row, col+1])
        while neighbours.len > 0:
            var r = random(neighbours.len) # Choose a random neighbour
            var nrow = neighbours[r][0]
            var ncol = neighbours[r][1]
            var count = 0
            if nrow-1 > 0 and maze.map[nrow-2][ncol] == 1:
                count += 1
            if nrow+1 < maze.map.len-1 and maze.map[nrow+2][ncol] == 1:
                count += 1
            if ncol-1 > 0 and maze.map[nrow][ncol-2] == 1:
                count += 1
            if ncol+1 < maze.map[0].len-1 and maze.map[nrow][ncol+2] == 1:
                count += 1
            if count == 1: # If only one of neighbour's neighbours is open, break the wall in between
                maze.map[nrow][ncol] = 0
                maze.stack.add(pos)
                maze.map[nrow][ncol] = 0
                neighbours.clear
                foreach neighbour in @[[nrow-1, ncol], [nrow+1, ncol], [nrow, ncol-1], [nrow, ncol+1]]:
                    if neighbour != pos:
                        neighbours.add(neighbour)
            else:
                neighbours.del(r)
    maze.map[1][1] = 0 # Set starting and ending positions to open
    maze.map[maze.map.len-2][maze.map[0].len-2] = 0

# The print_maze function displays the maze map in a readable format
# It takes in the maze object as input and prints the map in the form of a matrix

proc print_maze(maze: Maze) =
    for row in maze.map:
        echo(row.stringify).replace("0", " ").replace("1", "â–ˆ")

# Main program
let maze = create_maze(25, 25) # Create a 25x25 maze
generate_maze(maze) # Generate the maze using the Depth-First Search algorithm
print_maze(maze) # Print the maze map