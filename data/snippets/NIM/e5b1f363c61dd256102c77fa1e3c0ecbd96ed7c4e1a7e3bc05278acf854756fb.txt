# Define a new type, Person, with fields name, age, and sex
type Person = object
    name*: string
    age*: int
    sex*: string

# Define a new procedure, addPerson, that takes in a sequence of Person objects and adds it to a global array
proc addPerson(persons: seq[Person]) =
    globalArrayOfPersons.add(persons)

# Define a new function, getOldestPerson, that takes in a sequence of Person objects and returns the oldest person
func getOldestPerson(persons: seq[Person]): Person =
    var oldestPerson: Person = persons[0] # Initialize oldest person as first person in sequence
    for person in persons:
        if person.age > oldestPerson.age: # Check if current person's age is greater than oldest person's age
            oldestPerson = person # Update oldest person if current person is older
    return oldestPerson # Return oldest person

# Define a new concept, Nationality, with options American, Canadian, and Mexican
concept Nationality = enum
    American
    Canadian # Specify a different representation for the option
    Mexican # Each option will have a numerical value starting from 0, i.e. American = 0, Canadian = 1, Mexican = 2

# Define a new type, Citizen, which extends Person and includes the field nationality
type Citizen = object of Person
    nationality*: Nationality 

# Define a new method, printCitizensByNationality, that takes in a sequence of Citizen objects and prints them grouped by nationality
method printCitizensByNationality(citizens: seq[Citizen]) =
    var groups: array[Nationality, seq[Citizen]] # Create an array to store citizens grouped by nationality
    for citizen in citizens:
        groups[citizen.nationality].add(citizen) # Add citizen to group according to their nationality
    for nationality in groups:
        echo nationality # Print the nationality of the group
        for citizen in groups[nationality]:
            echo citizen.name # Print the names of citizens in the group