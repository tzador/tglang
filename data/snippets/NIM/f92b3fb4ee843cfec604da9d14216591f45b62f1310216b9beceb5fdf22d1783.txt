# This code snippet is a recursive function in Nim that checks if a given number is a prime number.
# It uses the classic trial division method.
proc isPrime(num: int): bool =
    if(num == 2):
        # If num is 2, it is automatically a prime number.
        result = true
    elif(num < 2 or num mod 2 == 0):
        # If num is less than 2 or even, it is not a prime number.
        result = false
    else:
        # Loop through all odd numbers from 3 to square root of num.
        for i in 3..int(sqrt(num))+1 by 2:
            if(num mod i == 0):
                # If num is divisible by any number other than 1 and itself, it is not a prime number.
                result = false
                break
        
        if(result == undefined):
            # If result is still undefined, num is a prime number.
            result = true
        return result

# Function call to check if 17 is a prime number.
let is17Prime = isPrime(17)

# Output: is17Prime -> true