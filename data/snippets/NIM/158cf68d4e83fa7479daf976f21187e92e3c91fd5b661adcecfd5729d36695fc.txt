# This code snippet generates a random maze using Prim's algorithm and visualizes it using ASCII characters

# Define the dimensions of the maze
let maze_width = 40
let maze_height = 20

# Define the 2D array to store the cells of the maze
var maze_cells: array[maze_height, maze_width, char]

# Fill the maze with walls (represented by '#')
for i in 0..maze_height:
    for j in 0..maze_width:
        maze_cells[i, j] = '#'

# Define the initial cell position for the algorithm
var current_cell: (int, int) = (1, 1)

# Define a stack to keep track of visited cells
var visited_cells: seq[(int, int)]

# Add the initial cell to the stack
visited_cells.add(current_cell)

# Define functions for finding neighboring cells
func get_left_cell(x, y: int): (int, int) =
    result = (x-2, y)

func get_right_cell(x, y: int): (int, int) =
    result = (x+2, y)

func get_up_cell(x, y: int): (int, int) =
    result = (x, y-2)

func get_down_cell(x, y: int): (int, int) =
    result = (x, y+2)

# Define a function for generating a random sequence of neighboring cells
func generate_random_cells(x, y: int): seq[(int, int)] =
    var options = [(get_left_cell(x, y)), (get_right_cell(x, y)), (get_up_cell(x, y)), (get_down_cell(x, y))]
    result = options.shuffle()

# Define a function for removing the wall between two cells in the maze
func remove_wall(x1, y1, x2, y2: int) =
    if x1 == x2:
        maze_cells[(y1 + y2) // 2, x1] = ' '  # remove horizontal wall
    else:
        maze_cells[y1, (x1 + x2) // 2] = ' '  # remove vertical wall

# Define the main algorithm function
proc generate_maze() =
    while visited_cells.len > 0:
        # Get a random neighboring cell
        let random_neighbors = generate_random_cells(current_cell[0], current_cell[1])

        for neighbor in random_neighbors:
            # Check if the neighbor is already visited
            if not visited_cells.contains(neighbor):
                # Remove the wall between the current cell and the neighbor
                remove_wall(current_cell[0], current_cell[1], neighbor[0], neighbor[1])

                # Add the neighbor to the stack and update the current cell
                visited_cells.add(neighbor)
                current_cell = neighbor
                break  # exit the loop if a valid neighbor is found

# Call the main algorithm function
generate_maze()

# Print the maze
for i in 0..maze_height:
    for j in 0..maze_width:
        echo(maze_cells[i, j])
    echo("\n")