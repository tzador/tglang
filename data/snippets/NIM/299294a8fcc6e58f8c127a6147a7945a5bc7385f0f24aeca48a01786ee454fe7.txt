# Define a NIM class to represent a game of NIM
type
  NIM = object:
    starting_stacks: seq[int]
    current_player: int
    game_over: bool

# Initialize a new game of NIM with starting stack sizes
proc init_game*(starting_stacks: seq[int]): NIM =
  result = NIM(starting_stacks: starting_stacks, current_player: 1, game_over: false)

# Procedure for displaying the current state of the game
proc display_game*(game: NIM) =
  echo "Current player: ", game.current_player
  echo "Starting stacks: ", game.starting_stacks

# Function to determine whether the game is over or not
proc is_game_over*(game: NIM): bool =
  var count = 0
  for i in game.starting_stacks:
    if i == 0:
      inc count
  if count == len(game.starting_stacks):
    return true
  else:
    return false

# Function for checking the validity of a move
proc is_valid_move*(game: var NIM, stack: int, amount: int): bool =
  if stack > 0 and stack <= len(game.starting_stacks) and amount > 0 and game.starting_stacks[stack-1] - amount >= 0:
    return true
  else:
    return false

# Procedure for executing a move
# Updates the current player and modifies the starting stacks accordingly
proc make_move*(game: var NIM, stack: int, amount: int) =
  if is_valid_move(game, stack, amount):
    game.starting_stacks[stack-1] -= amount
    game.current_player = if game.current_player == 1: 2 else: 1
    echo "Player ", game.current_player, " made a move."
    display_game(game)
  else:
    echo "Invalid move. Please try again."

# Main procedure to handle the game flow
proc main() =
  var game = init_game(@[3, 4, 5])  # Initialize game with starting stacks of 3, 4, 5
  display_game(game) # Display initial game state
  while not is_game_over(game):
    echo "Player ", game.current_player, ", it's your turn."
    var stack = readint("Enter stack number: ")
    var amount = readint("Enter amount to remove: ")
    make_move(game, stack, amount)
  echo "Game over. Player ", game.current_player, " wins!"

main() # Start the game