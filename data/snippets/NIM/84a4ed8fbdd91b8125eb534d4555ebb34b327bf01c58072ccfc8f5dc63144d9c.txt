# Here is a complex code snippet in NIM which uses recursion and dynamic programming to solve the 0-1 knapsack problem

# Initializes a global variable to store the maximum value 
var max_value: int = 0

# Defines a recursive function to calculate the maximum value that can be obtained given a weight and a set of items 
proc knapsack(weights, values: seq[int], weight_limit, index, current_value: int) =

  # Checks if we have reached the end of the items list 
  if index == len(weights): 
    # Updates the max value if the current value is higher 
    if current_value > max_value: 
      max_value = current_value 
    else: 
      discard 
  
  # Checks if adding the current item will exceed the weight limit 
  else if weights[index] > weight_limit: 
    # Recursively calls the function with the next item 
    knapsack(weights, values, weight_limit, index + 1, current_value) 
  
  # Checks if the value of the current item is higher than the current max value 
  else if current_value + values[index] > max_value: 
    # Recursively calls the function with the next item and the updated current value 
    knapsack(weights, values, weight_limit - weights[index], index + 1, current_value + values[index]) 
  
  # Recursively calls the function with the next item and the same current value 
  knapsack(weights, values, weight_limit - weights[index], index + 1, current_value) 

# Inputs the weight limit and the weight and value lists 
var weight_limit: int = 5 
var weights = @[2, 1, 3, 4] 
var values = @[3, 2, 4, 5] 

# Calls the knapsack function with the initial values 
knapsack(weights, values, weight_limit, 0, 0)

# Prints the maximum value that can be obtained 
echo max_value