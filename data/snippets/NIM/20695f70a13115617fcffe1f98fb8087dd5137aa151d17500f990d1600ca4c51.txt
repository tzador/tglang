# Nim is a statically typed programming language with powerful metaprogramming capabilities

# Import the `future` module to bring in experimental features
import future

# Define a `Person` object with two fields: `name` and `age`
type
  Person = object
    name: string
    age: int

# Instantiate a new `Person` object with the values "John" and 25
var john: Person = Person()
john.name = "John"
john.age = 25

# Create a new `Person` using a constructor
var jane = Person(name: "Jane", age: 30)

# Define a generic `Stack` data structure using a `seq` type
type
  Stack*[T] = seq[T]

# Instantiate a new `Stack` of strings and add some values to it
var stringStack: Stack[string] = Stack[string]()
stringStack.add("Hello")
stringStack.add("World")

# Create a new `Stack` of ints and add some values to it
var intStack = Stack[int]()
intStack.add(1)
intStack.add(2)

# Use a `for` loop to iterate through the string `Stack` and print each value
for val in stringStack:
  echo val

# Use a `while` loop to iterate through the int `Stack` and decrement each value
while intStack.len > 0:
  let val = intStack.pop()
  echo val - 1