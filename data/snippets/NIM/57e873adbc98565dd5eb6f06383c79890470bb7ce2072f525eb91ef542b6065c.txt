# This is a code snippet in NIM, a statically-typed programming language.
# It uses indentation instead of braces to denote blocks of code.
# This snippet implements quicksort algorithm for sorting a list of integers.
# The algorithm is recursive and uses a pivot element to partition the list.

# define a function that takes a list of integers and returns a sorted list
proc quicksort(nums: seq[int]): seq[int] =
    if len(nums) < 2: return nums # base case: list has 0 or 1 element, it is already sorted

    # select a pivot element, usually the middle element
    let pivot = nums[len(nums) div 2]
    # create empty lists to hold elements smaller, equal and greater than pivot
    var smaller = @[]
    var equal = @[]
    var greater = @[]

    # iterate through the list and partition elements into the appropriate lists
    for num in nums:
        if num < pivot: smaller.add(num)
        elif num > pivot: greater.add(num)
        else: equal.add(num)

    # return the sorted list by recursively calling this function on smaller and greater lists and combining them with the equal list
    return quicksort(smaller) & equal & quicksort(greater)

# define a list of unsorted integers and print the sorted list using the quicksort function
var nums = @[12, 56, 4, 78, 23, 89, 1, 0]
echo quicksort(nums) # output: @[0, 1, 4, 12, 23, 56, 78, 89]