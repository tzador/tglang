# This is a recursive function to find the nth Fibonacci number
proc fibonacci(n: int): int =
  if n <= 0:
    result = 0
  elif n == 1:
    result = 1
  else:
    result = fibonacci(n - 1) + fibonacci(n - 2)

# This is a memoized version of the function for better performance
proc fibonacci_mem(n: int, cache: var array[2, int]): int =
  if n <= 0:
    result = 0
  elif n == 1:
    result = 1
  elif cache[n] != 0:
    result = cache[n]
  else:
    result = fibonacci_mem(n - 1, cache) + fibonacci_mem(n - 2, cache)

  cache[n] = result
  # Returns the result and also updates the cache for future use
  result

# We call the memoized function here with an initial cache array
fibonacci_mem(8, array[2, int])

# Output: 21