# Nim code for finding all permutations of a given list of integers
proc permutations(numbers: seq[int]): seq[seq[int]] =
  var result = @[]
  
  # Generate the initial permutation
  var currentPermutation = @[]
  for i in 0..len(numbers):
    currentPermutation.add(numbers[i])
  
  # Add the initial permutation to the result list
  result.add(currentPermutation)
  
  # Loop through all numbers in the list
  for num in numbers:
    
    # Store the index of the current number
    var index = numbers.find(num)
    
    # Swap the current number with the first number in the list
    numbers[index], numbers[0] = numbers[0], numbers[index]
    
    # Loop through the rest of the numbers in the list
    for i in 1..len(numbers):
      
      # Create a new permutation by swapping the current number with the next number
      var newPermutation = currentPermutation.clone()
      newPermutation.swap(index, i)
      
      # Add the new permutation to the result list
      result.add(newPermutation)
    
    # Update the current permutation
    currentPermutation = result.pop()
  
  # Return the list of permutations
  result