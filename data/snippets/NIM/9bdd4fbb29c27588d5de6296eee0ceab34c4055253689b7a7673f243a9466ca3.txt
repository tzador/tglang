# Define a new type
type Animal = object
    name: string
    age: int
    species: string
    
# Create a new instance of Animal
let myPet = Animal(name: "Fluffy", age: 5, species: "Cat")

# Define a new type as a subclass of Animal
type Cat = object of Animal
    toy: string
    
# Create a new instance of Cat
let myCat = Cat(name: "Whiskers", age: 2, species: "Cat", toy: "feather")

# Define a new type as a union of two types
type Creature = Animal | Cat

# Create a new instance of Creature
let myCreature = Creature(name: "Max", age: 10, species: "Dog")

# Define a new type as an open array
type Numbers = array[0..*] of int

# Create a new instance of Numbers
let myNumbers = Numbers{1, 2, 3, 4, 5}

# Define a new type with generic parameters
type Stack[T] = ref object
    values: seq[T]
    proc push(value: T)
    proc pop(): T {.raises: [IndexError, ValueError], tags: [ReadIOEffect].}