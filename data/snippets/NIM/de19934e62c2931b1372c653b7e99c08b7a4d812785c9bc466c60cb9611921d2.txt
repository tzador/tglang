# This is a code snippet in NIM

# This is a function that calculates the factorial of a given number
proc factorial(num: int): int =
    result = 1
    for i in 1..num:
        result *= i
    return result

# This is a recursive function that calculates the nth Fibonacci number
proc fibonacci(n: int): int =
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# This is a template for a generic stack data structure in NIM
type
    MyStack[T] = object
        data: seq[T]

    proc push(x: T; stack: var MyStack[T]) =
        stack.data.add(x)

    proc pop(stack: var MyStack[T]): T =
        var x = stack.data[stack.data.len-1]
        stack.data.del(stack.data.len-1)
        return x

# Main function
proc main =
    var num = 5
    var fac = factorial(num) # Calculate factorial of 5
    var fib = fibonacci(num) # Calculate the 5th Fibonacci number

    # Initialize a stack of integers
    var stack: MyStack[int]
    
    # Push values onto the stack
    for i in 0..4:
        stack.push(i)
    
    var popped = stack.pop() # Pop the top element from the stack

# Calling the main function
main()