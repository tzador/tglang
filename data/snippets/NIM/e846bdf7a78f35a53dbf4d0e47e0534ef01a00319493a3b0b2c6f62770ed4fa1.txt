# This is a comment in NIM - it starts with the pound sign
import math  # importing the math module

var # a variable in NIM
x, y, z: int  # declaring multiple variables of type int
str: string = "This is a string variable"  # declaring and initializing a string variable

# creating a sequence of numbers using the range function
var num_sequence = [1 .. 10] # using range operator to create a sequence from 1 to 10

# creating a for loop to iterate through the num_sequence
for i in num_sequence:
    if i mod 2 == 0: # checking if the number is even
        echo "$i is an even number" # printing the number with a message
    elif i mod 2 == 1: # checking if the number is odd
        echo "$i is an odd number" # printing the number with a message

# defining a function to calculate the area of a circle
proc calculate_area(radius: float): float =
    result = radius * radius * math.pi # using the math module's pi constant
    return result

echo "Enter radius: "
var radius = readFloat() # reading user input for radius
var area = calculate_area(radius) # calling the function to calculate area
echo "The area of the circle with radius $radius is $area" # printing the result

# creating a recursive function to calculate the factorial of a number
proc calculate_factorial(n: int): int =
    if n == 0: # base case
        return 1
    else:
        return n * calculate_factorial(n - 1) # recursive call

var num = 5 # number to calculate factorial for
echo "The factorial of $num is ${calculate_factorial(num)}" # printing the result

# creating a type for a book with properties
type Book = object
    isbn: string
    title: string
    author: string
    price: float

# creating a list of book objects
var books: seq[Book] = @[
    Book(isbn: "978-1-60309-026-4", title: "1984", author: "George Orwell", price: 12.99),
    Book(isbn: "978-1-60309-374-6", title: "To Kill a Mockingbird", author: "Harper Lee", price: 9.99),
    Book(isbn: "978-0-385-53567-7", title: "The Catcher in the Rye", author: "J.D Salinger", price: 10.99)
]

# sorting the list of books by price using the sort function
books.sort(procedure(x, y: Book): int = x.price cmp y.price)

# printing the sorted list of books with their titles and prices
for book in books:
    echo "${book.title} - $${book.price}"