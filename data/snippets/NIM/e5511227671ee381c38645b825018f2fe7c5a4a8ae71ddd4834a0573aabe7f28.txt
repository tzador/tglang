### This is a complex Nim module ###
# This module contains various algorithms for sorting, searching and manipulating data #
# Imported modules #
import algorithm    # Built-in algorithm module for Nim #
import lists        # Built-in lists module for Nim #
import math         # Built-in math module for Nim #

## Sorting Algorithms ##
# Bubble Sort #
proc bubbleSort(a: openArray[int]) =
    var n = a.high
    var sorted = false
    while not sorted:
        sorted = true
        for i in 0 .. n - 1:
            if a[i] > a[i + 1]:
                a[i], a[i + 1] = a[i + 1], a[i]
                sorted = false

# Selection Sort #
proc selectionSort(a: openArray[int]) =
    var n = a.high
    for i in 0 .. n - 1:
        var min_idx = i
        for j in i + 1 .. n :
            if a[j] < a[min_idx]:
                min_idx = j
        if min_idx != i:
            a[i], a[min_idx] = a[min_idx], a[i]

# Merge Sort #
proc mergeSort(a: openArray[int]) =
    var n = a.high
    if n < 1: return
    var m = n / 2
    var left = a[0 .. m]
    var right = a[m + 1 .. n]
    bubbleSort(left)
    bubbleSort(right)
    var i = 0
    var j = 0
    var k = 0
    while i < left.len and j < right.len:
        if left[i] < right[j]:
            a[k] = left[i]
            i += 1
        else:
            a[k] = right[j]
            j += 1
        k += 1
    while i < left.len:
        a[k] = left[i]
        i += 1
        k += 1
    while j < right.len:
        a[k] = right[j]
        j += 1
        k += 1

## Searching Algorithms ##
# Linear Search #
proc linearSearch(a: openArray[int], target: int): int =
    for i in 0 ..< a.high:
        if a[i] == target:
            return i
    return -1

# Binary Search #
proc binarySearch(a: openArray[int], target: int): int =
    var low = 0
    var high = a.high
    while low <= high:
        var mid = (low + high) / 2
        if a[mid] == target:
            return mid
        elif a[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

## Data Manipulation ##
# Array Reversal #
proc reverseArray(a: openArray[int]) =
    var len = a.len
    for i in 0 ..< len / 2:
        a[i], a[len - 1 - i] = a[len - 1 - i], a[i]