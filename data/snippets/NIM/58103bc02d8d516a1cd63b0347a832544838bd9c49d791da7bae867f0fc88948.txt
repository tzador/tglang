## NIM Game Implementation
# This program implements the popular game of NIM.

type
    # declaring a proc that checks if the game is finished
    GameFinished = proc(turn: int, piles: seq[int]): bool {.closure.}

# declaring the main game proc
proc NimGame(piles: varargs[int], game_finished: GameFinished) =
    # initializing the current player and pile index values
    var current_player: int = 1
    var current_pile_index: int = 0

    # initializing the game status flag
    var game_over: bool = false

    # declaring the game loop
    while not game_over:
        # printing the game status
        echo "Current Player: ", current_player
        echo "Piles: ", piles

        # checking if the game is finished
        if game_finished(current_player, piles):
            # if the game is finished, announce the winner
            echo "Player ", current_player, " has won the game!"
            break

        # getting the current player's move
        var player_move: int

        # using exception handling to ensure a valid move is entered
        try:
            player_move = readInt("Player ", current_player, ", enter your move: ")
        except:
            # if an invalid move is entered, prompt the player to enter a valid move
            echo "Invalid move, please enter a valid move."
            continue

        # updating the pile with the player's move
        piles[current_pile_index] -= player_move

        # switching to the next player and pile
        current_player = (current_player mod 2) + 1
        current_pile_index = (current_pile_index + 1) mod piles.len

# declaring a proc that checks if all piles are empty
proc allPilesEmpty(_piles: seq[int]): bool =
    # initializing an empty variable to keep track of the pile sum
    var pile_sum = 0

    # iterating through the piles and adding the pile values to the pile sum
    for pile in _piles:
        pile_sum += pile

    # returning true if the pile sum is 0, meaning all piles are empty
    pile_sum == 0

# declaring a proc that checks if only one pile is left
proc onlyOnePileLeft(_piles: seq[int]): bool =
    # initializing a count variable to keep track of the number of non-empty piles
    var non_empty_pile_count = 0

    # iterating through the piles and incrementing the count if a non-empty pile is found
    for pile in _piles:
        if pile != 0:
            non_empty_pile_count += 1

    # returning true if the non-empty pile count is 1, meaning only one pile is left
    non_empty_pile_count == 1

# declaring a proc that checks if the game is finished based on specified game rules
proc CheckGameFinished(turn: int, piles: seq[int]) =
    # checking if all piles are empty or only one pile is left
    if allPilesEmpty(piles) or onlyOnePileLeft(piles):
        return true
    else:
        return false

# defining the starting piles for the game
var starting_piles: seq[int] = [3, 5, 7]

# starting the game by calling the NimGame proc
NimGame(starting_piles, CheckGameFinished)