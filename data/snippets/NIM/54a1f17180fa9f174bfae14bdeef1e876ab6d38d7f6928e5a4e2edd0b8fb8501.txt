# Define a unary operator that takes a single argument
## and returns the negation of that argument.

proc - (x: int): int =
    return -x # Negate the argument

# Define a binary operator that takes two arguments
## and returns the addition of those arguments.

proc + (x: int, y: int): int =
    return x + y # Add the two arguments together

# Define a function that takes in a list of integers
## and returns the sum of all the positive numbers in the list.

func sumOfPositiveNumbers(numbers: seq[int]): int =
    var result = 0 # Initialize result variable to 0
    for num in numbers: # Loop through each number in the list
        if num > 0: # Check if the number is positive
            result += num # Add the positive number to the result
    return result # Return the final result

# Define a type that represents a person with a name and age.

type Person = object
    name: string # String to store person's name
    age: int # Integer to store person's age

# Define a procedure that takes in a Person object
## and prints out their name and age.

proc printPerson(person: Person) =
    echo "Name: ", person.name
    echo "Age: ", person.age

# Create a new Person object and call the printPerson procedure.

var john: Person = Person(name: "John", age: 25) # Create new Person object with name and age
printPerson(john) # Call printPerson procedure with the new Person object as argument