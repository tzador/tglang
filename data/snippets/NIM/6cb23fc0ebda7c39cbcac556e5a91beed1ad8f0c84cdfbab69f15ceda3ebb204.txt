# define a function to calculate the factorial of a number
proc factorial(n: int): int =
  # create a variable to store the result
  var result = 1
  # loop from 1 to n and multiply each number to result
  for i in 1..n:
    result = result * i
  # return the final result
  result

# define a function to calculate the nth term in the Fibonacci sequence
proc fibonacci(n: int): int =
  # create a variable to store the result
  var result = 0
  # define a variable to keep track of the previous term
  var prev = 0
  # define a variable to keep track of the current term
  var curr = 1
  # loop n number of times and update the values of prev and curr
  for i in 2..n:
    result = prev + curr
    prev = curr
    curr = result
  # return the final result
  result

# define a function to check if a number is prime or not
proc is_prime(n: int): bool =
  # loop from 2 to the square root of n and check if n is divisible by any number
  for i in 2..(sqrt(n)):
    if n mod i == 0:
      # n is divisible by a number, hence it is not prime
      result = false
      break
    else:
      # n is not divisible, hence it is prime
      result = true
  # return the final result
  result

# define a function to generate a random number between two given numbers
proc generate_random_number(min: int, max: int): int =
  # calculate the range of numbers
  var range = max - min
  # generate a random number within the range
  var result = rand(range) + min
  # return the final result
  result

# define a function to sort a list of integers in ascending order
proc sort_asc(list: seq[int]): seq[int] =
  # create a copy of the original list
  var sorted = list
  # loop through the list and compare each element with the next element
  for i in 0..sorted.len-1:
    for j in 0..sorted.len-2:
      # if the current element is greater than the next element, swap them
      if sorted[j] > sorted[j+1]:
        var temp = sorted[j]
        sorted[j] = sorted[j+1]
        sorted[j+1] = temp
  # return the sorted list
  sorted

# define a function to calculate the square root of a number using Newton's method
proc newton_sqrt(x: float): float =
  # define an initial guess for the square root
  var guess = 0.5
  # loop until the difference between the guess and the actual square root is small enough
  while abs(guess * guess - x) > 0.00001:
    # improve the guess using Newton's method
    guess = (guess + x/guess) / 2.0
  # return the final guess
  guess