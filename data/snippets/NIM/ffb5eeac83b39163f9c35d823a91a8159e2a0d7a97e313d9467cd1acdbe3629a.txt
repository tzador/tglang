# This code snippet generates a binary search tree which can handle integer inputs

# Creating a class for the nodes in the binary search tree
type BSTNode = object
    leftChild*: BSTNode  # pointer to the left child of the node
    rightChild*: BSTNode  # pointer to the right child of the node
    value*: int  # value of the current node

# Function to insert a new node into the binary search tree
proc insert(node: var BSTNode, val: int) =
    if node == nil:  # if the node is empty, create a new node with the given value
        node = BSTNode(value: val)
    elif val < node.value:  # if the value is smaller than the value of the current node, insert it into the left subtree
        insert(node.leftChild, val)
    else:  # if the value is greater than or equal to the value of the current node, insert it into the right subtree
        insert(node.rightChild, val)

# Function to search for a specific value in the binary search tree
proc search(node: BSTNode, target: int): bool =
    if node == nil:  # if the node is empty, the target value is not present in the tree
        return false
    elif node.value == target:  # if the value of the current node is equal to the target value, return true
        return true
    elif target < node.value:  # if the target value is smaller than the value of the current node, search in the left subtree
        return search(node.leftChild, target)
    else:  # if the target value is greater than the value of the current node, search in the right subtree
        return search(node.rightChild, target)

# Initializing an empty root node for the binary search tree
var root: BSTNode

# Inserting values into the binary search tree
insert(root, 10)
insert(root, 5)
insert(root, 15)
insert(root, 3)
insert(root, 7)
insert(root, 12)
insert(root, 17)

# Searching for a value in the binary search tree
echo search(root, 7)