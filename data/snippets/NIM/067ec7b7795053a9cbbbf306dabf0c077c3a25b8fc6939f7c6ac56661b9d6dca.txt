type 
    # define a user-defined type named 'Person'
    Person = object 
        name*: string # name attribute with a '*' means it's a required field
        age: int
        job*: string
        
    # define a user-defined type named 'Animal'
    Animal = object
        name*: string
        species*: string
        age: int
        
    # create a new instance of type 'Person'
    var john: Person =
        name: "John" # assign name attribute as "John"
        age: 25 # assign age attribute as 25
        job: "Software Engineer" # assign job attribute as "Software Engineer"
        
    # create a new instance of type 'Animal'
    var tiger: Animal =
        name: "Tiger" # assign name attribute as "Tiger"
        species: "Bengal Tiger" # assign species attribute as "Bengal Tiger"
        age: 5 # assign age attribute as 5
        
    # create a procedure named 'sayHello' that takes in a person object parameter
    proc sayHello(p: Person) = 
        echo "Hello " & p.name & "! You are " & $p.age & " years old and work as a " & p.job
        
    # call the 'sayHello' procedure with the 'john' instance as the argument
    sayHello(john)
    
    # create a function named 'calculateAge' that takes in an animal object parameter
    func calculateAge(a: Animal): int = 
        if a.species == "Bengal Tiger": # check if the animal is a Bengal Tiger
            return a.age * 2 # double the age if it is
        else: # if not, just return the age
            return a.age
            
    # call the 'calculateAge' function with the 'tiger' instance as the argument
    calculateAge(tiger)