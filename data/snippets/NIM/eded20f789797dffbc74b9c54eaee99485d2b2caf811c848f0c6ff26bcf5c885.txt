# This is a recursive function in NIM that calculates the Nth Fibonacci number
proc fibonacci(n: int): int =
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)
    
# This is a dynamic programming solution for finding the shortest path in a weighted graph
proc dijkstra(graph: array, start: int, end: int): int =  # Proc to calculate shortest path using Dijkstra's algorithm
  var distances: array[int, int]
  for i in 0..<graph.len:
    distances[i] = inf
    
  distances[start] = 0
  var queue: HashSet[int]
  queue.add(start)
  
  while queue.len > 0:
    var min_vertex: int
    var min_distance: int = inf
    for node in queue:
      if distances[node] < min_distance:
        min_distance = distances[node]
        min_vertex = node
    queue.remove(min_vertex)
    
    for neighbor in graph[min_vertex]:
      let alt = distances[min_vertex] + neighbor.weight
      if alt < distances[neighbor.vertex]:
        distances[neighbor.vertex] = alt
        queue.add(neighbor.vertex)
  return distances[end]
  
# Example usage of the above proc
var weighted_graph = [[(1, 5), (2, 10)], # First node with its edges and weights
                      [(3, 6)], # Second node with its edges and weights
                      [(3, 2)], # Third node with its edges and weights
                      []] # Fourth node with no edges
echo "Shortest path from node 0 to node 3 is: ", dijkstra(weighted_graph, 0, 3)