# This code snippet generates all possible combinations of a given set of numbers using recursion

proc generate_combinations(set: seq[int], current: seq[int] = @[]): seq[seq[int]] =
  # base case: if set is empty, return current combination
  if len(set) == 0:
    return @[current]

  # recursive case: for each element in set, generate combinations with that element removed
  var result: seq[seq[int]] = @[]
  for i, x in set:
    var tmp: seq[int] = current
    tmp.add(x)
    var subset: seq[int] = set
    subset.del(i)
    result.add(generate_combinations(subset, tmp))

  return result

# sample input
var nums = @[1, 2, 3]

# call the function and print the result
echo generate_combinations(nums)

# output: 
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]