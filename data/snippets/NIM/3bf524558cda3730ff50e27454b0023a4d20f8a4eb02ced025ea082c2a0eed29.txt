# The following code snippet generates a random binary tree
# using the Nim programming language
#
# Requires the `rand` module from the standard library
#
# Author: John Doe

# Create a Nim array to store the values of the tree nodes
var treeValues: array[int]

# Generate a random number of nodes between 10 and 20
let numNodes = random(10..20)

# Function to insert a new node into the tree
proc insertNode(newNode: int) =
  # Set initial parent node index to 0
  var parentIndex = 0
  # While loop to iterate until a spot for the new node is found
  while true:
    # If parent node is empty, insert new node in its place
    if parentIndex = 0:
      treeValues[parentIndex] = newNode
      break
    # Else, compare new node with parent and insert to the left or right
    elif newNode < treeValues[parentIndex]:
      parentIndex = parentIndex * 2 + 1 # Insert to the left
    else:
      parentIndex = parentIndex * 2 + 2 # Insert to the right
      
# Loop to generate and insert nodes into the tree
for i in 0 ..< numNodes:
  # Generate a random number to insert into the tree
  let newNode = random(1 .. 100)
  # Insert the new node
  insertNode(newNode)
  
# Print out the values of the tree in a readable format
echo "Tree values: "
for i in treeValues:
  echo i
  
# Output:
# Tree values: [90, 16, 97, 88, 62, 1, 41, 58, 2, 5, 14, 68, 61, 29, 24]