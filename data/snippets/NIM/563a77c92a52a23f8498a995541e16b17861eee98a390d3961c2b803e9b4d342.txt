# Declare a custom type for a card
type
  Card = object
    suit: string
    value: int

# Create a new deck of 52 cards
proc createDeck(): seq[Card] =
  var suits = @["Spades", "Clubs", "Hearts", "Diamonds"]
  var values = @[2, 3, 4, 5, 6, 7, 8, 9, 10, "Jack", "Queen", "King", "Ace"]

  # Create an empty sequence of type Card
  var deck: seq[Card] = @[]

  # Loop through the suits and values to create the 52 cards
  for suit in suits:
    for value in values:
      var card: Card = Card(suit: suit, value: value)
      deck.add(card)

  # Return the completed deck
  return deck

# Shuffle the deck of cards using the Fisher-Yates algorithm
proc shuffleDeck(deck: seq[Card]) =
  var length = deck.len
  # Loop backwards through the deck
  for i in length-1..>0:
    # Generate a random index between 0 and the current index
    var j = random(i+1)

    # Swap the cards at the current and random indices
    var temp = deck[i]
    deck[i] = deck[j]
    deck[j] = temp

# Main function
proc main() =
  # Create a new deck
  var deck = createDeck()

  # Print out the unshuffled deck
  echo "Unshuffled Deck:"
  for card in deck:
    echo $card.value $card.suit

  # Shuffle the deck
  shuffleDeck(deck)

  # Print out the shuffled deck
  echo "Shuffled Deck:"
  for card in deck:
    echo $card.value $card.suit

# Call the main function to run the program
main()