# This code snippet creates a generic algorithm for performing a depth-first search on a graph data structure

# Define a graph data structure
type
  Node* = object # A node in the graph
    connections*: seq[Node] # Adjacency list of connected nodes

# Define a function for performing depth-first search
proc dfs(startNode: Node, visitedNodes: var HashSet[Node], result: var HashSet[Node]) =
  if startNode notin visitedNodes: # Check if node has not been visited before
    visitedNodes.incl(startNode) # Add node to visited set
    result.incl(startNode) # Add node to result set
    for connectedNode in startNode.connections: # Iterate through connected nodes
      dfs(connectedNode, visitedNodes, result) # Recursively call dfs on connected nodes

# Define a function for printing result set
proc printResults(result: HashSet[Node]) =
  echo "The result set contains the following nodes:" 
  for node in result:
    echo $node

# Create a sample graph with 5 nodes and their connections
var node1 = Node()
var node2 = Node()
var node3 = Node()
var node4 = Node()
var node5 = Node()

node1.connections = @[node2, node3]
node2.connections = @[node4]
node3.connections = @[node4]
node4.connections = @[node5]

# Perform depth-first search starting from node1
var visitedNodes = init HashSet[Node]()
var result = init HashSet[Node]()
dfs(node1, visitedNodes, result)

# Print the result set
printResults(result)