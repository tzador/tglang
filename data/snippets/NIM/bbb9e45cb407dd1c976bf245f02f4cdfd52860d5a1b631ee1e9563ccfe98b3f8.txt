proc mergeSort(arr: var intarray): intarray =
  if len(arr) <= 1:              # check if array has 0 or 1 element
    result = arr                 # if yes, return array as is
  else:
    mid = int(len(arr) / 2)      # calculate mid point
    l = mergeSort(arr[0 ..< mid])# call mergeSort on left half of array
    r = mergeSort(arr[mid ..< len(arr)]) # call mergeSort on right half of array
    i = j = k = 0
    result = newSeq[int](len(arr)) # create a new sequence with length of original array
    while i < len(l) and j < len(r): # while both halves have elements
      if l[i] < r[j]:          # compare and store smaller element in sorted sequence
        result[k] = l[i]
        i += 1
      else:
        result[k] = r[j]
        j += 1
      k += 1
    while i < len(l):             # copy remaining elements from left half
      result[k] = l[i]
      i += 1
      k += 1
    while j < len(r):             # copy remaining elements from right half
      result[k] = r[j]
      j += 1
      k += 1
    result # return sorted sequence

# Sample usage
var a = [5, 4, 9, 3, 1, 6, 2, 7, 8] # create an unsorted array
var sorted = mergeSort(a) # call mergeSort on array
echo sorted # print sorted array -> [1, 2, 3, 4, 5, 6, 7, 8, 9]