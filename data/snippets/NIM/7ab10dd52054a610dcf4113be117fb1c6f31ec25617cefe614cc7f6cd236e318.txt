# Custom type for a binary tree node
type
BSTNode = object
  value: int
  leftNode: ptr BSTNode
  rightNode: ptr BSTNode

# Method to insert a value into the binary tree
proc insert*(node: var BSTNode, value: int) =
  if node == nil:
    node = BSTNode(value: value)
  else:
    if value < node.value:
      insert(node.leftNode, value)
    else:
      insert(node.rightNode, value)

# Method to delete a value from the binary tree
proc delete*(node: var BSTNode, value: int) =
  if node == nil:
    discard
  else:
    if value < node.value:
      delete(node.leftNode, value)
    elif value > node.value:
      delete(node.rightNode, value)
    else:
      if node.leftNode == nil and node.rightNode == nil:
        node = nil
      elif node.leftNode == nil:
        node = node.rightNode
      elif node.rightNode == nil:
        node = node.leftNode
      else:
        var currNode = node.rightNode
        var prevNode: ptr BSTNode = nil
        while currNode.leftNode != nil:
          prevNode = currNode
          currNode = currNode.leftNode
        node.value = currNode.value
        if prevNode == nil:
          node.rightNode = currNode.rightNode
        else:
          prevNode.leftNode = currNode.rightNode

# Method to search for a value in the binary tree
proc search(node: BSTNode, value: int): bool =
  if node == nil:
    result = false
  elif node.value == value:
    result = true
  elif value < node.value:
    result = search(node.leftNode, value)
  else:
    result = search(node.rightNode, value)

# Main function to create and use the binary tree
var root: BSTNode = nil
for i in 1..10:
  insert(root, i)
delete(root, 5)
if search(root, 5):
  writeln("Value 5 is in the tree.")
else:
  writeln("Value 5 is not in the tree.")