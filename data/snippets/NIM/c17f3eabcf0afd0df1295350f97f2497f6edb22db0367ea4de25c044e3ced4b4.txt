# This is a function that checks if a given number is prime or not using the Sieve of Eratosthenes method
proc isPrime(num: int): bool =
    var primeArray = newSeq[int](cap=num+1)    # Create a sequence of integers with size equals to the given number
    primeArray[1] = 0   # Set the value at index 1 to 0 as 1 is not a prime number
    primeArray[2] = 1   # Set the value at index 2 to 1 as 2 is a prime number
    for i in 3..num:    # Loop through the remaining numbers in the sequence
        if i mod 2 == 0:    # Check if the number is even, if it is then set its value to 0
            primeArray[i] = 0
        else:   # If the number is not even, set its value to 1 as it may be a prime number
            primeArray[i] = 1
    for i in 3..int(sqrt(num)):    # Loop through numbers till the square root of the given number
        if primeArray[i] == 1:    # If the number at index i is marked as a potential prime number, then continue
            for j in i*i..num:    # Loop through multiples of the number till the given number
                if j mod i == 0:    # If the multiple is divisible by the number, then mark its value to 0
                    primeArray[j] = 0
    if primeArray[num] == 1:    # Check if the given number's index is marked as 1, if yes then it is prime
        return true
    else:
        return false