const 
  BOARD_SIZE = 3		# sets the board size to 3
  PLAYER_ONE = "X"	# sets player one marker to "X"
  PLAYER_TWO = "O"	# sets player two marker to "O"

var board = newSeq[[], BOARD_SIZE, BOARD_SIZE]	# creates a new 2D board with specified dimensions

proc displayBoard(board: seq[int]) =	# creates a procedure to display the board
  for row in board:	# loops through each row in the board
    for col in row:	# loops through each column in the current row
      if col == 1:	# if the column value is 1, print player one's marker
        echo PLAYER_ONE
      elif col == 2:	# if the column value is 2, print player two's marker
        echo PLAYER_TWO
      else:	# if the column value is 0, print an empty space
        echo " "
    echo "\n"	# prints a new line after each row

proc takeTurn(player: int, board: var seq[int]) =	# creates a procedure for a player's turn
  var row, col: int	# creates variables for the chosen row and column
  while true:	# creates a loop that will continue until a valid input is given
    row = read(stdin)	# reads user input for the row
    col = read(stdin)	# reads user input for the column
    if board[row][col] == 0:	# checks if the chosen space is empty
      board[row][col] = player	# inserts the player's marker into the chosen space
      break	# breaks out of the loop
    else:	# if the chosen space is not empty, print an error message and ask for new input
      echo "Invalid move. Space already taken. Please try again."
  
proc checkBoard(board: seq[int]): bool =	# creates a procedure to check the board for a winning combination
  for i in 0..BOARD_SIZE-1:	# loops through each row and column
    if board[i][0] == board[i][1] == board[i][2]:	# checks horizontal rows for a match
      return true
    elif board[0][i] == board[1][i] == board[2][i]:	# checks vertical columns for a match
      return true
  if board[0][0] == board[1][1] == board[2][2]:	# checks top-left to bottom-right diagonal for a match
    return true
  elif board[2][0] == board[1][1] == board[0][2]:	# checks bottom-left to top-right diagonal for a match
    return true
  return false	# returns false if no winning combination is found

echo "Welcome to NIM!"	# prints a welcome message
var currentPlayer = 1	# sets the current player to player one
var turn = 1	# sets the turn count to 1
while true:	# creates a loop that will continue until a player wins or the board is full
  echo "Player " & currentPlayer & ", it's your turn!"	# prompts the player to take their turn
  echo "Choose a row (0-2): "	# asks for the row input
  echo "Choose a column (0-2): "	# asks for the column input
  takeTurn(currentPlayer, board)	# calls the takeTurn procedure for the current player
  displayBoard(board)	# displays the updated board
  if checkBoard(board):	# checks if the board has a winning combination
    echo "Player " & currentPlayer & " wins!"	# prints a message announcing the winner
    break	# breaks out of the loop
  elif turn == BOARD_SIZE*BOARD_SIZE:	# checks if all spaces on the board are filled
    echo "It's a tie!"	# if so, print a tie message
    break 	# breaks out of the loop
  currentPlayer = (currentPlayer mod 2) + 1	# switches to the other player
  inc(turn)	# increments the turn count

echo "Thanks for playing NIM!"	# prints a closing message