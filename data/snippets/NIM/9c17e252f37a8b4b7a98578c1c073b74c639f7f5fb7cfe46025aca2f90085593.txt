# This code snippet generates a random maze using random depth-first search algorithm
# Initialize grid
var grid: seq[seq[int]] = @[]

# Function to add walls to the grid
proc addWalls*(grid: var seq[seq[int]], x, y: int, width, height: int) =
  for i in 0 ..< width:
    for j in 0 ..< height:
      grid[y + 2 * i][x + 2 * j] = 1

# Function to check if cell is valid 
proc isValid*(grid: seq[seq[int]], x, y: int, width, height: int): bool =
  if x < 0 or x >= width:
    result = false

  if y < 0 or y >= height:
    result = false

  if grid[y][x] != 0:
    result = false

  result = true

# Function for random depth-first search algorithm
proc generateMaze*(grid: var seq[seq[int]], x, y, width, height: int) =
  # Mark current cell as visited
  grid[y][x] = 1
  # Initialize list to store neighboring cells
  var neighbors: seq[(int, int)] = @[]
  # Check if left cell is valid
  if isValid(grid, x - 2, y, width, height):
    neighbors.add((x - 2, y))
  # Check if right cell is valid
  if isValid(grid, x + 2, y, width, height):
    neighbors.add((x + 2, y))
  # Check if top cell is valid
  if isValid(grid, x, y - 2, width, height):
    neighbors.add((x, y - 2))
  # Check if bottom cell is valid
  if isValid(grid, x, y + 2, width, height):
    neighbors.add((x, y + 2))
  
  # Randomly select a neighbor
  var randomNeighbor: (int, int) = neighbors[rand(0 ..< neighbors.len)]
  var neighborX = randomNeighbor[0]
  var neighborY = randomNeighbor[1]
  
  # Remove wall between current cell and neighbor
  grid[(y + neighborY) div 2][(x + neighborX) div 2] = 1
  # Recursively call function on neighbor cell
  generateMaze(grid, neighborX, neighborY, width, height)

# Set width and height of grid
var width = 10
var height = 10

# Add walls to grid
addWalls(grid, 0, 0, width, height)
# Generate maze starting from cell (1,1)
generateMaze(grid, 1, 1, width, height)

# Print maze
echo "Random Maze:"
for i in 0 ..< grid.len:
  for j in 0 ..< grid[i].len:
    echo $["[ ]" if grid[i][j] == 0 else "[â–ˆ]"]
  echo ""