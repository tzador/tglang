# This code snippet is for implementing a doubly linked list data structure in NIM

# Defining a node object
type
    Node = object
        value: int
        prev, next: Node

# Defining a linked list object
type
    LinkedList = object
        head, tail: Node

# Function to add a new node at the beginning of the linked list
proc addFirst(list: var LinkedList, value: int) =
    let newNode = Node(value: value)
    if list.head == nil:
        list.head = newNode
        list.tail = newNode
    else:
        newNode.next = list.head
        list.head.prev = newNode
        list.head = newNode

# Function to add a new node at the end of the linked list
proc addLast(list: var LinkedList, value: int) =
    let newNode = Node(value: value)
    if list.head == nil:
        list.head = newNode
        list.tail = newNode
    else:
        newNode.prev = list.tail
        list.tail.next = newNode
        list.tail = newNode

# Function to remove the first node of the linked list
proc removeFirst(list: var LinkedList) =
    if list.head == nil:
        raise newException(ValueError, "Linked list is empty")
    else:
        let firstNode = list.head
        list.head = firstNode.next
        if list.head == nil:
            list.tail = nil
        else:
            list.head.prev = nil
        destruct firstNode

# Function to remove the last node of the linked list
proc removeLast(list: var LinkedList) =
    if list.head == nil:
        raise newException(ValueError, "Linked list is empty")
    else:
        let lastNode = list.tail
        list.tail = lastNode.prev
        if list.tail == nil:
            list.head = nil
        else:
            list.tail.next = nil
        destruct lastNode

# Function to find and remove a specific value from the linked list
proc removeValue(list: var LinkedList, value: int) =
    var currentNode = list.head
    while currentNode != nil:
        if currentNode.value == value:
            if currentNode.prev == nil:
                list.head = currentNode.next
            else:
                currentNode.prev.next = currentNode.next
            if currentNode.next == nil:
                list.tail = currentNode.prev
            else:
                currentNode.next.prev = currentNode.prev
            destruct currentNode
            return
        currentNode = currentNode.next

# Function to print the values of the linked list
proc printLinkedList(list: LinkedList) =
    var currentNode = list.head
    while currentNode != nil:
        echo currentNode.value
        currentNode = currentNode.next

# Example code to use the implemented functions
var myLinkedList = LinkedList()
addFirst(myLinkedList, 5)
addFirst(myLinkedList, 10)
addLast(myLinkedList, 15)
removeFirst(myLinkedList)
removeLast(myLinkedList)
removeValue(myLinkedList, 5)
printLinkedList(myLinkedList)  # Output: 10, 15