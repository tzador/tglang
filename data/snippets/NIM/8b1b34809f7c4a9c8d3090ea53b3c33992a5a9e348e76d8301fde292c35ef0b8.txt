# This code snippet is a simple implementation of the famous 'Tic-Tac-Toe' game written in NIM programming language.

let player1 = 'X' # Assigning symbol 'X' as the first player's mark.
let player2 = 'O' # Assigning symbol 'O' as the second player's mark.

let board = [[" ", " ", " "], [" ", " ", " "], [" ", " ", " "]] # Creating a 3x3 grid board using nested lists to represent the game board.

echo "Let's start the game of Tic-Tac-Toe!" # Outputting a welcome message to the players.

proc display_board(board: seq[seq[string]]) = # Defining a procedure to display the board.
    echo " ${board[0,0]} | ${board[0,1]} | ${board[0,2]} "
    echo "---+---+---"
    echo " ${board[1,0]} | ${board[1,1]} | ${board[1,2]} "
    echo "---+---+---"
    echo " ${board[1,0]} | ${board[1,1]} | ${board[1,2]} "

display_board(board) # Calling the display_board procedure to show the initial empty board.

var current_player = player1 # Setting player1 to be the current player.

proc get_player_move(player: string) = # Defining a procedure to get the player's move.
    echo "\n ${player}, it's your turn. Enter your move (e.g. 1,1 for row 1 column 1): "
    var move = readLine(stdin) # Reading the player's input from the console and assigning it to the 'move' variable.
    return move

proc update_board(move: string, player: string, board: var seq[seq[string]]) = # Defining a procedure to update the board after each move.
    split(move, ",") # Splitting the player's input into row and column numbers.
    var row = parseInt(move[0]) - 1 # Converting the row number from string to integer and subtracting 1 to account for the index starting at 0.
    var col = parseInt(move[1]) - 1 # Converting the column number from string to integer and subtracting 1 to account for the index starting at 0.
    board[row][col] = player # Assigning the player's mark to the corresponding position on the board.

while true: # Starting the game loop that will continue until the game is over.
    var move = get_player_move(current_player) # Getting the current player's move.
    update_board(move, current_player, board) # Updating the board with the player's move.
    display_board(board) # Displaying the updated board.
    if board[0][0] == board[0][1] == board[0][2] != " ": # Checking for a horizontal win condition for the top row.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[1][0] == board[1][1] == board[1][2] != " ": # Checking for a horizontal win condition for the middle row.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[2][0] == board[2][1] == board[2][2] != " ": # Checking for a horizontal win condition for the bottom row.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[0][0] == board[1][0] == board[2][0] != " ": # Checking for a vertical win condition for the first column.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[0][1] == board[1][1] == board[2][1] != " ": # Checking for a vertical win condition for the second column.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[0][2] == board[1][2] == board[2][2] != " ": # Checking for a vertical win condition for the third column.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[0][0] == board[1][1] == board[2][2] != " ": # Checking for a diagonal win condition from top left to bottom right.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.
    elif board[0][2] == board[1][1] == board[2][0] != " ": # Checking for a diagonal win condition from top right to bottom left.
        echo "\n ${current_player} wins the game!"
        break # Ending the game loop.

    # Checking for a tie condition by counting the number of empty spaces on the board.
    var empty_spaces = 0
    for row in board:
        for col in row:
            if col == " ":
                empty_spaces += 1
    if empty_spaces == 0: # If all spaces are filled and none of the win conditions were met, the game ends in a tie.
        echo "\n It's a tie game!"
        break # Ending the game loop.

    # Switching the current player for the next turn.
    if current_player == player1:
        current_player = player2
    else:
        current_player = player1

# End of code snippet.