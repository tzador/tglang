proc mergeSort(data: seq[int]): sortedData =
    var result: seq[int] = @[]
    case data.len
    of 0, 1: result = data
    else:
        # Split the data into two halves
        var leftHalf = data[0 .. data.len div 2 - 1]
        var rightHalf = data[data.len div 2 .. data.len - 1]
        # Recursively call mergeSort on each half
        leftHalf = mergeSort(leftHalf)
        rightHalf = mergeSort(rightHalf)
        # Merge the two sorted halves
        while leftHalf.len > 0 and rightHalf.len > 0:
            # Compare the first elements of each half
            if leftHalf[0] < rightHalf[0]:
                # Append the smallest element to the result
                result.add(leftHalf[0])
                leftHalf = leftHalf[1 .. leftHalf.len - 1]
            else:
                result.add(rightHalf[0])
                rightHalf = rightHalf[1 .. rightHalf.len - 1]
        # Add any remaining elements to the result
        if leftHalf.len > 0:
            result.add(leftHalf)
        if rightHalf.len > 0:
            result.add(rightHalf)
    return result