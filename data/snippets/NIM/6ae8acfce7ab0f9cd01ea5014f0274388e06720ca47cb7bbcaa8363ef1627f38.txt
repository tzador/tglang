proc euclid(a, b: int): int =
    var rem = -1
    var gcd = -1

    if a > b:
        gcd = b
        rem = a - b
    else:
        gcd = a
        rem = b - a

    while rem != 0:
        if gcd < rem:
            var temp = gcd
            gcd = rem
            rem = temp
        rem = gcd.mod(rem)

    gcd

# This is a recursive function used to calculate the factorial of a given number.
proc factorial(n: int): int =
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# This is a template function that can be used with any data type.
template times[T](a, b: T): T =
    return a * b

# A simple for loop that prints the cube of numbers from 1 to 10.
for i in 1..10:
    echo times(i, i * i)
    
# This is a helper proc that generates a random number between a given range.
# It uses the compiler's built-in random number generator.
proc random(min, max: int): int =
    return random(min, max) 

# This is an example of using Nim's built-in types for unsigned integers and floats.
var value: uint = 5
var pi: float = 3.14159

# A function that checks if a string is a palindrome.
proc isPalindrome(str: string): bool =
    var revStr = ""
    for c in str:
        revStr = c & revStr
    return revStr == str