### This code snippet generates a maze using the recursive backtracking algorithm

# Define winchamber and starting position
var winChamber: int = 0
var posX: int = 0
var posY: int = 0

# Define maze dimensions and initialize maze board
var mazeWidth: int = 25
var mazeHeight: int = 25
var maze: array[mazeHeight, mazeWidth, int]

# Create function to generate random maze using recursive backtracking
proc generateMaze(posX: int, posY: int) =
    # Mark current cell as visited
    maze[posX, posY] = 1

    # Create array of possible directions to move in
    var directions: array[4, int] = [[1,0], [0,1], [-1,0], [0,-1]]

    # Randomly shuffle directions
    directions = shuffle(directions)

    # Loop through directions, checking if each cell is viable, and recursively call function for viable cells
    for i in 0..3:
        var newX = posX + directions[i, 0]
        var newY = posY + directions[i, 1]

        if (newX > 0 and newY > 0 and newX < mazeHeight and newY < mazeWidth and maze[newX, newY] != 1):
            # Set current cell as the winning chamber if it is on the opposite side of the maze
            if (newX == mazeHeight-1 and newY == mazeWidth-1):
                winChamber = maze[posX, posY] + 1

            # Connect current cell to the next viable cell
            maze[posX, posY] = 2
            maze[newX, newY] = 2

            # Recursively call function for next cell
            generateMaze(newX, newY)

# Call function to generate maze starting from the top left corner
generateMaze(0, 0)

# Print out maze in a readable format
for i in 0..mazeHeight-1:
    for j in 0..mazeWidth-1:
        if (maze[i, j] == 1):
            echo "███"
        elif (maze[i, j] == 2):
            echo "   "
        else:
            echo "   "
    echo ""