# Importing the math module for complex arithmetic functions
import math

# Defining a function to generate a random complex number
func generate_random_complex_num() -> complex:
    var real_part: float = rand(0.0 .. 10.0)
    var imag_part: float = rand(0.0 .. 10.0)
    return complex(real_part, imag_part)

# Creating a set of 10 random complex numbers
var complex_set: set[complex] = {generate_random_complex_num() for i in 0 ..< 10}

# Sorting the complex numbers in ascending order of their absolute values
var sorted_complex_set: set[complex] = sorted(complex_set, proc(a,b): int {.gcsafe.} =
    # Creating temporary variables to calculate the absolute values
    var abs_val_a: float = math.sqrt(a.real ** 2 + a.imag ** 2)
    var abs_val_b: float = math.sqrt(b.real ** 2 + b.imag ** 2)
    if abs_val_a < abs_val_b:
        return -1 # a is less than b
    elif abs_val_a > abs_val_b:
        return 1 # a is greater than b
    else:
        return 0 # a and b are equal

# Printing the sorted complex numbers in a formatted table
echo("| Real part | Imaginary part | Absolute value |")
echo("|-----------|----------------|----------------|")
for complex_num in sorted_complex_set:
    var abs_val: float = math.sqrt(complex_num.real ** 2 + complex_num.imag ** 2)
    var float_string: string = $abs_val # Converting the absolute value to a string for formatting
    var float_len: int = len(float_string) # Calculating the string length for proper spacing
    const padding: int = 15 # Defining a constant for padding
    echo("| %*s | %*s | %*s |" % (padding, complex_num.real, padding, complex_num.imag, padding+float_len, float_string))