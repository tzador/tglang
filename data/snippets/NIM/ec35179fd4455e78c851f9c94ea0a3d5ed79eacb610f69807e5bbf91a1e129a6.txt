proc quicksort(arr: seq[int]):  # Defines a procedure named "quicksort" that takes in a sequence of integers as an argument
    if len(arr) <= 1:  # Checks if the sequence has a length of 1 or less
        return arr  # If so, returns the sequence as it is already sorted
    var pivot = arr[0]  # Assigns the first element of the array as the pivot value
    var smaller: seq[int] = []  # Initializes an empty sequence to store values smaller than the pivot
    var larger: seq[int] = []  # Initializes an empty sequence to store values larger than the pivot
    for i in 1..<arr.len:  # Loops through the array starting from the second element (index 1)
        if arr[i] < pivot:  # Compares the current element to the pivot value
            smaller.add(arr[i])  # If smaller, adds the element to the smaller sequence
        else:
            larger.add(arr[i])  # If larger, adds the element to the larger sequence
    smaller = quicksort(smaller)  # Recursively calls quicksort on the smaller sequence to sort it
    larger = quicksort(larger)  # Recursively calls quicksort on the larger sequence to sort it
    return smaller & [pivot] & larger  # Returns the sorted smaller sequence followed by the pivot and the sorted larger sequence
  # The "&" operator combines two sequences into one
# Example usage:
var myArray = [8, 3, 1, 5, 9, 2]  # Initializes an unsorted sequence of integers
echo("Unsorted Array:", myArray)  # Prints the unsorted array
myArray = quicksort(myArray)  # Sorts the array using our quicksort procedure
echo("Sorted Array:", myArray)  # Prints the sorted array
# Output:
# Unsorted Array: [8, 3, 1, 5, 9, 2]
# Sorted Array: [1, 2, 3, 5, 8, 9]