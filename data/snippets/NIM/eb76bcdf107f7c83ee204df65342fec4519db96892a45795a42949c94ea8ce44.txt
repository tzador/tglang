#This is a code snippet in NIM programming language

proc quickSort(arr: array) =
    #Partition algorithm to divide array into smaller subarrays
    proc partition(arr: array, low: int, high: int): int =
        var pivot = arr[high] #Pivot element as the last element
        var i = low - 1 #Index of smaller element
        var j = low #Index of current element being compared
        while j < high:
            if arr[j] < pivot:
                i += 1 #Increment index of smaller element
                #Swap smaller element with current element
                (arr[j], arr[i]) = (arr[i], arr[j])
            j += 1 #Increment index of current element
        #Swap pivot with first element larger than pivot
        (arr[high], arr[i+1]) = (arr[i+1], arr[high])
        return i+1 #Return index of pivot
        
    #Main function to implement quicksort algorithm
    proc sort(arr: array, low: int, high: int) =
        if low < high:
            #Call partition function to get index of pivot
            var pivot_index = partition(arr, low, high)
            #Recursive call to sort elements before and after pivot
            sort(arr, low, pivot_index-1)
            sort(arr, pivot_index+1, high)
    
    #Call to quicksort function
    quickSort(arr)
    
#Sample array to test the quicksort algorithm
var arr = [8, 3, 1, 9, 5, 6]
#Print original array
echo "Original array: ", arr
#Call sort function to sort the array
sort(arr, 0, arr.len-1)
#Print sorted array
echo "Sorted array: ", arr