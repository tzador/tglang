# A dynamic programming solution for the "Longest Increasing Subsequence" problem
# Time Complexity: O(n^2)
# Space Complexity: O(n)

# Define an array to store the lengths of the longest increasing subsequences ending at each index
len_arr: array[1..n] of int = [1, .., 1]

# For each index i, compare it with all the previous indices j to find the longest increasing subsequence ending at i
for i in 2..n:
    for j in 1..i-1:
        # Check if the element at index i is greater than the element at index j
        if arr[i] > arr[j]:
            # Update the length of the longest increasing subsequence at index i if it is longer than the previous one
            len_arr[i] = max(len_arr[i], len_arr[j] + 1)

# Find the maximum length in the len_arr array
max_len: int = max(len_arr)

# Print the maximum length
echo max_len

# Print the longest increasing subsequence
seq: seq[int] = @[]
current_len: int = max_len
current_index: int = n

# Start from the end and backtrack through the len_arr array to find the indices of the longest increasing subsequence
while current_len > 0:
    # Add the element at index current_index to the beginning of the seq array
    seq.insert(0, arr[current_index])
    # Decrement the current_index and current_len if the length at the previous index is less than the current length
    if len_arr[current_index - 1] < current_len:
        current_index -= 1
        current_len -= 1

# Print the longest increasing subsequence
echo seq