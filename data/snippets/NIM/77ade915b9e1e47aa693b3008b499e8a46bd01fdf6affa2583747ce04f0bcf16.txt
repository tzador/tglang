type
  # An enumeration type for different types of shapes
  ShapeType = enum
    Circle
    Rectangle
    Triangle
    Square
  # A record type to store the properties of a shape
  ShapeData = object
    kind: ShapeType  # The type of shape
    # The size of the shape's sides, depending on the shape type
    case kind:
      of Circle:
        radius: float
      of Rectangle:
        width, height: int
      of Triangle:
        side1, side2, side3: float
      of Square:
        side: int
  # A procedure to calculate the area of a circle
  proc calcCircleArea(radius: float): float =
    let
      pi: float = 3.14
    result = pi * radius ** 2
  # A procedure to calculate the area of a rectangle
  proc calcRectangleArea(width, height: int): int =
    result = width * height
  # A procedure to calculate the area of a triangle
  proc calcTriangleArea(side1, side2, side3: float): float =
    # Use Heron's formula to calculate the area
    let
      s: float = (side1 + side2 + side3) / 2
    result = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
  # A procedure to calculate the area of a square
  proc calcSquareArea(side: int): int =
    result = side * side
  # A function to determine the shape with the largest area
  func largestShape(shapes: seq[ShapeData]): ShapeData =
    var
      largestShape: ShapeData
      largestArea: float = -1
    # Iterate through the list of shapes
    for shape in shapes:
      # Check the shape type and call the corresponding calculation procedure
      case shape.kind:
        of Circle:
          let
            area: float = calcCircleArea(shape.radius)
          # Update the largest area and shape if necessary
          if area > largestArea:
            largestArea = area
            largestShape = shape
        of Rectangle:
          let
            area: int = calcRectangleArea(shape.width, shape.height)
          if area > largestArea:
            largestArea = area
            largestShape = shape
        of Triangle:
          let
            area: float = calcTriangleArea(shape.side1, shape.side2, shape.side3)
          if area > largestArea:
            largestArea = area
            largestShape = shape
        of Square:
          let
            area: int = calcSquareArea(shape.side)
          if area > largestArea:
            largestArea = area
            largestShape = shape
    result = largestShape
  # Example usage:
  # Create a list of shapes
  shapes = @[
    ShapeData(kind: Circle, radius: 5.0),
    ShapeData(kind: Rectangle, width: 3, height: 4),
    ShapeData(kind: Triangle, side1: 4.0, side2: 5.0, side3: 6.0),
    ShapeData(kind: Square, side: 4)
  ]
  # Call the function to determine the shape with the largest area
  largest = largestShape(shapes)
  # Print the result
  echo("The largest shape is a ", largest.kind, " with an area of ", largestArea, ".")