# This code snippet generates a random maze using the NIM programming language.
# It uses a randomized Prim's algorithm to generate the maze.

# Define the size of the maze
const maze_width = 25
const maze_height = 25

# Create the maze grid 
var maze_grid: array[maze_height, maze_width, int]

# Initialize all cells to be blocked
for i in 0..maze_height-1:
    for j in 0..maze_width-1:
        maze_grid[i,j] = 1

# Define the starting point
let start_x = 0
let start_y = 0

# Define the ending point
let end_x = maze_height-1
let end_y = maze_width-1

# Define the list of walls
var walls: array[int]

# Add all walls to the list
for i in 0..maze_height-1:
    for j in 0..maze_width-1:
        if i % 2 == 1 and j % 2 == 1:
            walls.add(i,j)

# Set the starting point as accessible
maze_grid[start_x, start_y] = 0

# Define the current cell and its neighbors
var current_cell: tuple[int,int]
var neighbor_cells: array[tuple[int,int]] = [(-1,0), (1,0), (0,-1), (0,1)] # Up, down, left, right

# Loop until all cells are accessible
while walls.len > 0:
    # Choose a random wall from the list
    let random_wall = randint(0, walls.len-1)

    # Remove the wall from the list
    let (x,y) = walls[random_wall]
    walls.remove(random_wall)

    # Calculate the neighboring cell coordinates
    let neighbor_x = x + neighbor_cells[0]
    let neighbor_y = y + neighbor_cells[1]

    # Check if the neighboring cell is within the maze and not yet accessible
    if 0 <= neighbor_x < maze_width and 0 <= neighbor_y < maze_height and maze_grid[neighbor_x, neighbor_y] == 1:
        # Set the current cell and shared wall as accessible
        maze_grid[x, y] = 0
        maze_grid[neighbor_x, neighbor_y] = 0