# This code defines a template for a simple card game called 'War'
# It features a deck of cards, two players, and a game board

type
  # Define the Card object, which has a suit and value
  Card = object
    suit: string # Hearts, Diamonds, Clubs, or Spades
    value: int # 2,3,4,5,6,7,8,9,10,11,12,13,14 (Ace = 14, King = 13, etc)

  # Define a Deck object, which consists of a collection of cards
  Deck = object
    cards: seq[Card] # an ordered sequence of cards
    discard: seq[Card] # a sequence of discarded cards

  # Define a Player object, which has a name and a hand of cards
  Player = object
    name: string # player's name
    hand: seq[Card] # a sequence of cards currently held by the player

  # Define a Game object, which has two players, a deck of cards, and a game board
  Game = object
    player1: Player # first player
    player2: Player # second player
    deck: Deck # deck of cards
    game_board: string # printout of the current state of the game board

# Create a new deck of cards
proc newDeck(): Deck =
  result = Deck()
  for suit in @["Hearts", "Diamonds", "Clubs", "Spades"]:
    for value in 2..14:
      result.cards.add(Card(suit:suit, value:value))

# Shuffle the deck of cards
proc shuffle(deck: Deck): void =
  var temp: Card
  for i in 0..deck.cards.high:
    temp = deck.cards[i]
    deck.cards[i] = deck.cards[rand(0..deck.cards.high)]
    deck.cards[rand(0..deck.cards.high)] = temp

# Deal the deck of cards to the two players
proc deal(game: Game): void =
  var current_player = 1 # player 1 goes first
  while game.deck.cards.high >= 0:
    var card = game.deck.cards.pop()
    if current_player == 1:
      game.player1.hand.add(card)
      current_player = 2 # switch to player 2
    else:
      game.player2.hand.add(card)
      current_player = 1 # switch back to player 1

  # Print out the current game board
  game.game_board = "Player 1 \n Cards: " & game.player1.hand & "\n" & "Player 2 \n Cards: " & game.player2.hand & "\n" & "Deck Total: " & game.deck.cards.len & "\n" & "Discard Pile: " & game.deck.discard

#Take turns playing the game
proc play(): int =
  # Create new game with two players
  var game = Game(player1: Player(name: "John"), player2: Player(name: "Jane"), deck: newDeck(), game_board: "")
  # Shuffle the deck
  shuffle(game.deck)
  # Deal cards to each player
  deal(game)
  # Keep playing until one player has no more cards
  while game.player1.hand.len > 0 and game.player2.hand.len > 0:
    # Take the top card from each player's hand
    var card1 = game.player1.hand.pop()
    var card2 = game.player2.hand.pop()
    # Check which card has a higher value
    if card1.value > card2.value:
      # Add both cards to the discard pile
      game.deck.discard.add(card1)
      game.deck.discard.add(card2)
      #Print out the winner and update game board
      game.game_board = game.game_board & "\n" & card1.suit & card1.value & " beats " & card2.suit & card2.value & ", Player 1 wins"
    elif card2.value > card1.value:
      # Add both cards to the discard pile
      game.deck.discard.add(card1)
      game.deck.discard.add(card2)
      # Print out the winner and update game board
      game.game_board = game.game_board & "\n" & card2.suit & card2.value & " beats " & card1.suit & card1.value & ", Player 2 wins"
    else:
      # If the cards have the same value, it is a tie
      # Add both cards back to each player's hand
      game.player1.hand.add(card1)
      game.player2.hand.add(card2)
      # Print out that it is a tie and update game board
      game.game_board = game.game_board & "\n" & "Tie! Both players keep their cards"
  # Check which player has no more cards and declare the winner
  if game.player1.hand.len == 0:
    result = "Player 2 wins the game!"
  else:
    result = "Player 1 wins the game!"

# Start the game and print out the final result
echo play()