import algorithm

type
  Node = ref object of RootObj
    data*: string
    next*: Node

# define a generic stack structure
stack[T:typed] = ref object
  top*: Node
  push: proc(data: T)
  pop*: proc(): T

# implement push procedure for stack
proc stack[T].push(data: T) =
  var newNode = Node(data: $data)
  if top == nil:
    top = newNode
    return
  newNode.next = top
  top = newNode

# implement pop procedure for stack
proc stack[T].pop(): T =
  if top == nil:
    raise newException(ValueError, "Stack is empty")
  var poppedData: T = top.data
  top = top.next
  return poppedData

# initialize a stack of type string
var myStack: stack[string]
myStack.push("Hello")       # push "Hello" onto the stack
myStack.push("World")       # push "World" onto the stack

# print the top element of the stack
echo myStack.top.data       # output: World

# pop the top element of the stack
echo myStack.pop()          # output: World

# print the remaining elements of the stack
echo myStack.top.data       # output: Hello

# pop the last element of the stack
echo myStack.pop()          # output: Hello

# try popping from an empty stack
echo myStack.pop()          # output: Raises ValueError exception (Stack is empty)