# This is a comment in NIM
# Define a custom type called "NestedList" which can store a nested list of integers
type
  NestedList = seq[list[int]]

# Create a new instance of NestedList
var
  myList: NestedList

# Define a procedure to add an item to the NestedList
proc addItem(nList: var NestedList; item: int) =
  if len(nList) == 0:
    # If the NestedList is empty, create a new list and add the item to it
    nList.add(newSeq[item])
  else:
    # Otherwise, go through each list in the NestedList and add the item to it
    for list in nList:
      list.add(item)

# Define a procedure to recursively iterate through the NestedList and print all items
proc printNestedList(nList: NestedList, level: int = 0) =
  for list in nList:
    # Add indentation based on the current level
    for i in 0..level:
      echo "  "
    # Print the current list
    echo list
    # If the current item is another list, call the printNestedList procedure again with an incremented level
    if list.len > 0 and type(list[0]) is list[int]:
      printNestedList(list, level + 1)

# Add some items to the NestedList
addItem(myList, 1)
addItem(myList, 2)
addItem(myList, 3)
addItem(myList, 4)
addItem(myList, 5)
addItem(myList, @[6, 7, 8]) # Nested list of integers

# Print the NestedList
printNestedList(myList)