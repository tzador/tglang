#This code generates a random maze using the Prim's algorithm
#and prints it in ASCII representation

#set up maze dimensions
var width = 20
var height = 20

#declare maze array
var maze: array[0..height, 0..width] of string

#fill maze with empty spaces
for i in 0..height:
  for j in 0..width:
    maze[i,j] = " "

#generate walls as edges between cells
var walls: array[0..(height//2+1)*(width//2+1), 4] of int #start row, start col, end row, end col
var num_walls = 0

for i in 0..height:
  for j in 0..width:
    if i%2==0 and j%2==0:
      #horizontal wall
      walls[num_walls, 0] = i+1
      walls[num_walls, 1] = j
      walls[num_walls, 2] = i+1
      walls[num_walls, 3] = j+1
      num_walls += 1
      #vertical wall
      walls[num_walls, 0] = i
      walls[num_walls, 1] = j+1
      walls[num_walls, 2] = i+1
      walls[num_walls, 3] = j+1
      num_walls += 1

#generate maze using Prim's algorithm
var random = newRandom()
var start_row = random.nextInt(height//2)*2+1
var start_col = random.nextInt(width//2)*2+1
maze[start_row, start_col] = " " #remove wall
var visited = [[start_row, start_col]]

while len(visited) > 0:
  #randomly select a wall
  var random_wall = random.nextInt(num_walls)
  var wall_row = walls[random_wall, 0]
  var wall_col = walls[random_wall, 1]
  var end_row = walls[random_wall, 2]
  var end_col = walls[random_wall, 3]

  #check if both cells are visited
  var start_visited = [wall_row, wall_col] in visited
  var end_visited = [end_row, end_col] in visited

  #if both cells are visited, remove the wall
  if start_visited and end_visited:
    maze[wall_row, wall_col] = " "
    visited += [end_row, end_col]

#add entrance at top left corner and exit at bottom right corner
maze[0, 1] = " "
maze[height-1, width-2] = " "

#print maze
for i in 0..height:
  var row = ""
  for j in 0..width:
    row += maze[i,j]
  echo row