type
    Node = object # A node in a binary tree
        left, right: Node
        value: int
proc insert*(node: var Node, value: int) =
    if node == nil: # If node is uninitialized
        node = new(Node) # Allocate memory for a new node
        node.value = value # Assign the value to the node
        return
    if value < node.value: # If value is less than the current node's value
        insert(node.left, value) # Recursively insert on the left subtree
    elif value > node.value: # If value is greater than the current node's value
        insert(node.right, value) # Recursively insert on the right subtree
    # If value is equal to the current node's value, do nothing as duplicate values are not allowed

proc inOrder*(node: Node) =
    if node == nil: # If node is uninitialized, do nothing
        return
    inOrder(node.left) # Recursively traverse the left subtree
    echo node.value # Print the node's value
    inOrder(node.right) # Recursively traverse the right subtree