## Nim Game

# Import necessary modules
import random, operator, datetime

# Define a class for the game
type
  NimGame = ref object
    pile_size: int
    current_player: string
    players: seq[string]
    moves: table[string, int]

# Define a constructor
proc init(p_size: int, p1: string, p2: string): NimGame =
  result = NimGame()
  result.pile_size = p_size
  result.players = @[p1, p2]
  result.current_player = random.choose(result.players)
  result.moves = toTable(result.players)

# Define a function to check if game is over
proc isGameOver(game: NimGame): bool =
  result = game.pile_size <= 1

# Define a function to get available moves
proc getAvailableMoves(game: NimGame): int =
  for i in game.players:
    game.moves[i] = game.pile_size div 2 + game.pile_size mod 2

# Define a function to get current player's move
proc getCurrentPlayerMove(game: NimGame): int =
  move = game.moves[game.current_player]
  echo "${game.current_player}, it's your turn. You can remove $move from the pile."

# Define a function to update the game when a move is made
proc makeMove(game: NimGame, move: int): bool =
  if move > game.moves[game.current_player] 
    or move <= 0 or game.pile_size - move <= 0:
    return false
  else:
    game.pile_size -= move
    game.current_player = game.players[1 - game.players.indexOf(game.current_player)]
    game.moves = toTable(game.players)

# Define a function to play the game
proc play(game: NimGame) =
while not isGameOver(game):
  game.getCurrentPlayerMove()
  move = parseInput(stdin.readLine)
  while not game.makeMove(move):
    echo "Invalid move. Please try again."
    move = parseInput(stdin.readLine)
  game.getAvailableMoves()
echo "${game.current_player} won the game at ${now()}!"