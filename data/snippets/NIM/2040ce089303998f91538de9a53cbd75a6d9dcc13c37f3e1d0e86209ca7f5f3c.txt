# This is a NIM program for finding all possible combinations of a list of numbers

var
    num_list: array[1..5] of int
    combinations: openArray[seq[int], 5]

# Initialize the list of numbers
num_list = [1, 2, 3, 4, 5]

# Function to generate all combinations
proc generate_combinations(nums: openArray[seq[int]], index: int) =
    if index >= 5:
        # Base case, if we have reached the end of the list
        combinations.add(nums)
    else:
        # Get all possible combinations by swapping numbers at the current index with all other numbers in the list
        for i in index..len(nums)-1:
            swap(nums[i], nums[index])
            # Recursively call the function with the swapped list and the next index
            generate_combinations(nums, index+1)
            swap(nums[i], nums[index])

# Start the recursive function with the initial list and index
generate_combinations(num_list, 0)

# Print all the combinations
for c in combinations:
    echo c