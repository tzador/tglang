# This code snippet creates a game of NIM with an AI opponent
# The game starts with a random number of piles, each with a random number of stones
# The objective of the game is to be the player to remove the last stone from the last pile

# Importing the random module
import random

# Function to generate random number of piles with random number of stones
proc generateGame(gamePiles, gameStones: var int): int =
    # Randomly assigning a number of piles
    let randomPiles = random(2..10)
    gamePiles = randomPiles
    echo "Number of piles: ", gamePiles
    
    # Randomly assigning a number of stones for each pile
    for i in 0..gamePiles:
        let randomStones = random(5..20)
        gameStones[i] = randomStones
        echo "Number of stones in pile ", i, ": ", gameStones[i]

# Function to check if the game is over
proc checkGameOver(gamePiles: int): bool =
    # If there is only one pile left and it has zero stones, the game is over
    if gamePiles == 1 and gameStones[0] == 0:
        return true
    # Otherwise, the game is not over yet
    else:
        return false
        
# Function for the AI opponent to make a move
proc makeAIMove(gamePiles: int, gameStones: var int): int =
    # Initializing the variable to store the pile number
    var pileNumber: int
    # Initializing the variable to store the number of stones to be removed
    var stonesToRemove: int
    
    # AI's strategy - removing stones from the last pile
    pileNumber = gamePiles - 1
    stonesToRemove = gameStones[pileNumber]
    
    # Removing the stones and updating the number of stones in the pile
    gameStones[pileNumber] = gameStones[pileNumber] - stonesToRemove
    
    # Printing the AI's move
    echo "AI removes ", stonesToRemove, " stones from pile ", pileNumber
    
    # Returning the updated number of stones in the pile
    return gameStones[pileNumber]
    
# Function for the player to make a move
proc makePlayerMove(gamePiles: int, gameStones: var int): int =
    # Initializing the variable to store the pile number
    var pileNumber: int
    # Initializing the variable to store the number of stones to be removed
    var stonesToRemove: int
    
    # Getting input from the player for the pile number
    echo "Enter the pile number: "
    pileNumber = readint()
    
    # Validating the input for the pile number
    while pileNumber < 0 or pileNumber > gamePiles - 1:
        echo "Invalid pile number. Try again."
        pileNumber = readint()
        
    # Getting input from the player for the number of stones to be removed
    echo "Enter the number of stones to be removed: "
    stonesToRemove = readint()
    
    # Validating the input for the number of stones to be removed
    while stonesToRemove < 1 or stonesToRemove > gameStones[pileNumber]:
        echo "Invalid number of stones. Try again."
        stonesToRemove = readint()
        
    # Removing the stones and updating the number of stones in the pile
    gameStones[pileNumber] = gameStones[pileNumber] - stonesToRemove
    
    # Printing the player's move
    echo "You remove ", stonesToRemove, " stones from pile ", pileNumber
    
    # Returning the updated number of stones in the pile
    return gameStones[pileNumber]
    
# Main game loop
# Initializing the variable to store the number of piles
var gamePiles: int
# Initializing the list to store the number of stones in each pile
var gameStones: seq[int]

# Generating a random game with a random number of piles and stones
generateGame(gamePiles, gameStones)

# Loop to continue the game until it is over
while not checkGameOver(gamePiles):
    # Player's turn
    makePlayerMove(gamePiles, gameStones)
    
    # AI's turn
    makeAIMove(gamePiles, gameStones)
    
# Game over, determining the winner
if gamePiles == 1:
    echo "You win!"
else:
    echo "AI wins!"