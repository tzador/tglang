// Declare a public module
pub mod game {

    // Declare and define the `Player` type
    type Player = object {
        name*: string
        score: int
    }

    // Declare and define the `Game` type
    type Game = object {
        players*: seq[Player]
        round: int
        isGameOver: bool
    }

    // Declare and define a `startGame` procedure which takes in `playerNames` of type `seq[string]` as argument and returns a `Game` type
    proc startGame(playerNames: seq[string]): Game =
        // Initialize a new `Game` object with empty `players` sequence, `round` set to 1, and `isGameOver` set to `false`
        var newGame = Game(players: @[], round: 1, isGameOver: false)

        // Loop through each `playerName` in `playerNames` sequence
        for playerName in playerNames:

            // Create a new `Player` object with `name` set to `playerName` and `score` set to 0
            var newPlayer = Player(name: playerName, score: 0)

            // Add the `newPlayer` to `players` sequence in `newGame` object
            newGame.players.add(newPlayer)

        // Return the `newGame` object
        return newGame

    // Declare and define a `playRound` procedure which takes in a `game` of type `Game` as argument and returns a `Game` type
    proc playRound(game: Game): Game =
        // Check if `game` is not over
        if not game.isGameOver:

            // Increment `round` in `game` object by 1
            game.round += 1

            // Initialize a `playerScores` dictionary to store player scores
            var playerScores = initTable[string, int]()

            // Loop through each `player` in `players` sequence in `game` object
            for player in game.players:

                // Generate a random score between 1 and 10
                var roundScore = random(1..10)

                // Update `score` of `player` in `game` object with the generated `roundScore`
                player.score += roundScore

                // Add `player.name` and `player.score` as key-value pair in `playerScores` dictionary
                playerScores[player.name] = player.score

            // Print the current round and player scores
            echo("Round ", game.round, ": ", $playerScores)

            // Check if any player has reached a score of 100 or more
            if playerScores.values.any(x => x >= 100):

                // Set `isGameOver` in `game` object to `true`
                game.isGameOver = true

                // Declare a `winner` variable to store the player with the highest score
                var winner = ""

                // Declare a `highestScore` variable to store the current highest score
                var highestScore = 0

                // Loop through the `playerNames` in `playerScores` dictionary
                for playerName in playerScores.keys:

                    // Check if the `playerScore` in `playerScores` dictionary is greater than `highestScore`
                    if playerScores[playerName] > highestScore:

                        // Set `winner` to the current `playerName`
                        winner = playerName

                        // Update `highestScore` to the current player's score
                        highestScore = playerScores[playerName]

                // Print the winner of the game
                echo("The winner is ", winner, " with a score of ", highestScore)

        // Return the updated `game` object
        return game

    // Declare the `main` procedure
    proc main() =
        // Prompt the user to enter the number of players
        echo("Enter the number of players:")

        // Read user input and convert it to an integer
        var numPlayers = readInt()

        // Declare an empty `playerNames` sequence to store the player names
        var playerNames: seq[string] = @[]

        // Loop for `numPlayers` times
        for i in 0 ..< numPlayers:

            // Prompt the user to enter the name of the current player
            echo("Enter the name of player ", i+1, ":")

            // Read user input and add it to `playerNames` sequence
            playerNames.add(readLine())

        // Start a new game with `playerNames` sequence as argument
        var game = startGame(playerNames)

        // Keep looping until the game is over
        while not game.isGameOver:

            // Play the current round and update the `game` object
            game = playRound(game)

        // Once the game is over, print a message and exit the program
        echo("Game over!")