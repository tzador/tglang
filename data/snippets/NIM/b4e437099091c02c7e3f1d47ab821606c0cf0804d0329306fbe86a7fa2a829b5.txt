# This code snippet generates a random maze using Prim's algorithm
# and then solves it using the depth-first search algorithm

# Define a type for a maze cell, represented by a tuple of x and y coordinates
type
  Cell = tuple[x, y: int]

# Define a type for a maze, represented by a 2D array of cells
type
  Maze = array[0..m, 0..n] of Cell

# Define a type for a stack, to be used in the depth-first search algorithm
type
  Stack = seq[Cell]

# Function to generate a random maze using Prim's algorithm
proc generateMaze(m, n: int): Maze =
  # Create an empty maze
  var maze: Maze
  for i in 0..m-1:
    for j in 0..n-1:
      maze[i, j] = Cell(i, j)

  # Create a set of walls
  var walls: set of Cell = {Cell(1, 1)..Cell(m - 2, n - 2)}
  # Choose a random starting cell
  var current: Cell = maze[2, 1]
  # Mark the starting cell as visited
  maze[2, 1] = Cell(current.x, current.y)
  # Create a set for visited cells
  var visited: set of Cell = {current}

  # Loop until all cells are visited
  while visited.len < walls.len:
    # Choose a random wall
    var index = rand(0, walls.len - 1)
    var wall = walls[index]

    # Check the adjacent cells
    var cell1, cell2: Cell
    if wall.x mod 2 == 1:
      cell1 = maze[wall.x - 1, wall.y]
      cell2 = maze[wall.x + 1, wall.y]
    else:
      cell1 = maze[wall.x, wall.y - 1]
      cell2 = maze[wall.x, wall.y + 1]

    # If one of the cells is visited and the other is not visited
    if (cell1 in visited and not cell2 in visited) or (cell2 in visited and not cell1 in visited):
      # Mark the wall as a passage
      maze[wall.x, wall.y] = Cell(wall.x, wall.y)
      # Add the unvisited cell to the visited set
      if not cell1 in visited:
        visited.add(cell1)
        current = cell1
      else:
        visited.add(cell2)
        current = cell2

    # Remove the wall from the set
    walls.remove(wall)

  maze

# Function to solve the maze using depth-first search algorithm
proc solveMaze(maze: Maze): Maze =
  # Create a stack to hold the cells in the solution path
  var stack: Stack = @[]
  # Mark the starting cell as visited
  maze[2, 1] = Cell(-1, -1)

  # Loop until the end cell is reached
  while stack.len > 0 or maze[maze.high.x, maze.high.y] == Cell(-1, -1):
    # Get the current cell
    var current: Cell = stack.pop()

    # Check the adjacent cells
    var cell1, cell2, cell3, cell4: Cell
    if current.x - 1 >= 0 and maze[current.x - 1, current.y].x == current.x - 1:
      cell1 = maze[current.x - 1, current.y]
    if current.x + 1 < maze.high.x and maze[current.x + 1, current.y].x == current.x + 1:
      cell2 = maze[current.x + 1, current.y]
    if current.y - 1 >= 0 and maze[current.x, current.y - 1].y == current.y - 1:
      cell3 = maze[current.x, current.y - 1]
    if current.y + 1 < maze.high.y and maze[current.x, current.y + 1].y == current.y + 1:
      cell4 = maze[current.x, current.y + 1]

    # Push the unvisited cells to the stack
    if cell1 != nil:
      stack.add(cell1)
      maze[cell1.x, cell1.y] = Cell(current.x, current.y)
    if cell2 != nil:
      stack.add(cell2)
      maze[cell2.x, cell2.y] = Cell(current.x, current.y)
    if cell3 != nil:
      stack.add(cell3)
      maze[cell3.x, cell3.y] = Cell(current.x, current.y)
    if cell4 != nil:
      stack.add(cell4)
      maze[cell4.x, cell4.y] = Cell(current.x, current.y)

  maze

# Generate a 10x10 maze and solve it
var maze = generateMaze(10, 10)
var solution = solveMaze(maze)

# Print the maze with the solution path marked
for i in 0..maze.high.x:
  for j in 0..maze.high.y:
    if maze[i, j] == Cell(i, j):
      echo "o"
    elif maze[i, j] == Cell(-1, -1):
      echo "*"
    else:
      echo "x"
  echo ""