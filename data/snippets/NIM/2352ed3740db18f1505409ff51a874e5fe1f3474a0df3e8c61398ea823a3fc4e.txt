# This is a code snippet in NIM

# Declare a constant variable
const PI = 3.14159

# Define a data type
type
    Person = object
        name: string
        age: int
        occupation: string

# Declare a variable and assign a value
var x: int = 5

# Create a procedure with parameters and a return value
proc add(a: int, b: int): int =
    return a + b

# Create a for loop and print values
for i in 1..10:
    echo i

# Create a string variable and concatenate it with another string
var name: string = "John"
echo "Hello " & name # Output: Hello John

# Create a new object
var person: Person = Person(
        name: "Emily",
        age: 28,
        occupation: "Engineer"
    )

# Use pattern matching to handle different data types
if 5.isA int:
    echo "Integer value"
elif 3.14.isA float:
    echo "Float value"
else:
    echo "Other data type"

# Define a generic template type with constraints
type
    List[T: SomeConstraint] = object
        items: seq[T]

# Declare a generic procedure that takes in a generic type
proc printList[T](list: List[T]): void =
    for item in list.items:
        echo item

# Create an instance of the generic type and call the printList procedure
var stringList: List[string] = List(items: @["apple", "banana", "orange"])
printList(stringList) # Output: apple, banana, orange