## A Nim game implementation using an efficient data structure

### Global variables
var
  piles: seq[int] = @[3, 4, 5]
  player: int
  game_over: bool

### Main game loop
game_over = false
while not game_over:
  # Print current state of piles
  for i, pile in pairs(piles):
    echo "Pile " & $i & ": " & "*" * pile

  # Player's turn
  echo "Player " & $player & "'s turn:"
  var pile_choice: int
  var stone_choice: int
  # Validate input
  while not game_over:
    echo "Choose a pile: "
    try:
      pile_choice = parseStdin(stdin.readLine())
      if piles[pile_choice - 1] <= 0:
        echo "Pile is empty, please choose again."
        continue
      break
    except:
      echo "Invalid input, please choose again."
  while not game_over:
    echo "Choose number of stones to remove: "
    try:
      stone_choice = parseStdin(stdin.readLine())
      if stone_choice < 1 or stone_choice > piles[pile_choice - 1]:
        echo "Invalid input, please choose again."
        continue
      break
    except:
      echo "Invalid input, please choose again."

  # Remove stones from pile
  piles[pile_choice - 1] -= stone_choice
  game_over = true

  # Check for end state
  for pile in piles:
    if pile > 0:
      game_over = false
      break

  # Change current player
  if player == 1:
    player = 2
  else:
    player = 1

# Print end game message
echo "Player " & $player & " wins!"

### Internal functions
# This function checks if the given move is valid
func isValidMove(pile: int, stones: int): bool =
  if pile < 1 or pile > piles.len or stones < 1 or stones > piles[pile - 1]:
    result = false
  else:
    result = true