## This code snippet generates a random maze using the Recursive Backtracking algorithm.

# Define a function for creating a new grid with specified dimensions
proc createGrid(width, height: int): seq[seq[int]] =
  result = newSeq[seq[int]](height)
  for i in 0..<height:
    result[i] = newSeq[0..width, 0..2].fill(0)

# Define a function for checking if a cell is within the grid boundaries
proc withinBounds(x, y, width, height: int): bool =
  x >= 0 and x < width and y >= 0 and y < height

# Define a function for getting the neighbors of a cell
proc neighbors(x, y, grid: seq[seq[int]], width, height: int): seq[tuple[x, y, int]] =
  result = newSeq[tuple[x,y,int]]
  # Check if left neighbor exists
  if withinBounds(x-1, y, width, height):
    result.add((x-1, y, grid[x-1][y]))
  # Check if right neighbor exists
  if withinBounds(x+1, y, width, height):
    result.add((x+1, y, grid[x+1][y]))
  # Check if top neighbor exists
  if withinBounds(x, y-1, width, height):
    result.add((x, y-1, grid[x][y-1]))
  # Check if bottom neighbor exists
  if withinBounds(x, y+1, width, height):
    result.add((x, y+1, grid[x][y+1]))

# Define a function for recursively generating the maze
proc generateMaze(grid: var seq[seq[int]], x=0, y=0, visited=0, width=grid.len, height=grid[0].len) =
  # Mark current cell as visited
  grid[x][y] = visited
  # Get the neighbors of current cell
  var nbrs = neighbors(x, y, grid, width, height)
  # Shuffle the neighbors
  shuffle(nbrs)
  # For each neighbor
  for nbr in nbrs:
    # Mark the neighbor as visited if it hasn't been visited before
    if grid[nbr[0]][nbr[1]] == 0:
      grid[nbr[0]][nbr[1]] = visited
      # Remove the wall between the current cell and the neighbor
      grid[x][y][nbr[2]] = 1
      grid[nbr[0]][nbr[1]][(nbr[2]+1)%2] = 1
      # Recursively call the function on the neighbor
      generateMaze(grid, nbr[0], nbr[1], visited+1)

# Define the main function
proc main() =
  # Get user input for dimensions of the maze
  echo "Enter width of maze:"
  var w = readInt()
  echo "Enter height of maze:"
  var h = readInt()
  
  # Create a grid with the specified dimensions
  var grid = createGrid(w, h)
  # Generate the maze
  generateMaze(grid)
  
  # Print the maze in a formatted manner
  var output = ""
  for i in 0..<2*h+1:
    if i mod 2 == 0:
      output.add("##")
      for j in 0..<w:
        output.add("##")
    else:
      output.add("##")
      for j in 0..<w:
        if grid[j][i/2][0] == 1:
          output.add("  ")
        else:
          output.add("##")
        if grid[j][i/2][1] == 1:
          output.add("  ")
        else:
          output.add("##")
      output.add("##")
    output.add("\n")
  echo output

# Call the main function
main()

## Output: