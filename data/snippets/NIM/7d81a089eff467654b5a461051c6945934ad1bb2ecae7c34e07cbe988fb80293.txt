# This is a complex NIM implementation with comments and annotations
proc nimGame(balls: int, heaps: int) =
  # Create a matrix to hold all possible game states
  var game_states: array[heaps,balls + 1] of int
  # Populate the matrix with base cases for game states
  for i in 0..(heaps - 1):
    game_states[i][0] = 0
  for j in 0..balls:
    game_states[0][j] = 0
  # Use dynamic programming to calculate all possible game states
  for i in 1..(heaps - 1):
    for j in 1..balls:
      # If the number of balls in current heap is less than current pile,
      # just take the number of balls as the value for the state
      if j < i: 
        game_states[i][j] = j
      # Otherwise, calculate the optimal move by taking the minimum of
      # final state after 1, 2 and 3 possible moves.
      else: 
        # Convert state values to nim-sum notation
        var state1 = game_states[i - 1][j] xor game_states[i - 1][j - 1]
        var state2 = game_states[i - 1][j] xor game_states[i - 1][j - 2]
        var state3 = game_states[i - 1][j] xor game_states[i - 1][j - 3]
        # Choose maximum for optimal move
        game_states[i][j] = max(state1, max(state2, state3))
  # Return the value for the final game state
  return game_states[heaps - 1][balls]

# Initialize the game with chosen number of heaps and balls
var heaps = 4 
var balls = 10
# Call the NIM game procedure and store the result
var result = nimGame(balls, heaps)
# Print the result
echo(result)