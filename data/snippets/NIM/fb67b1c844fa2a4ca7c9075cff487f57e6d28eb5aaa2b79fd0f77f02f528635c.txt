## This is a function that checks if a given number is prime or not.
# We use the famous Sieve of Eratosthenes algorithm to determine this.

# Declare the function with the parameter 'num'
proc check_prime(num: int): bool =
  # Initialize an array of booleans of size 'num+1', with all elements set to true
  var primes : array[0..num+1] of bool
  for i in 0..num+1:
    primes[i] = true
  
  # Starting from 2, loop through all numbers up to the square root of 'num'
  for i in 2..int(sqrt(num)):
    # If the number at 'i' is 'true', it is prime and we mark all its multiples as 'false'
    if primes[i]:
      for j in i*i..num+1 step i:
        primes[j] = false
  
  # If the number at 'num' is still 'true', it is prime, otherwise it is composite
  return primes[num]

# Call the function with a given number as input and print the result
echo check_prime(17)