type
  # This is a custom type representing a person
  # with their name and age
  Person = object
    name: string # the person's name
    age: int # the person's age
  # This is a generic type that can hold any type of data
  Option[T] = enum
    # This is an option to hold a value of type T
    Some(value: T)
    # This is an option to represent no value
    None

# This procedure takes in two parameters of type Person
# and returns a tuple containing both of their names
proc get_names(person1: Person, person2: Person): tuple[name1: string, name2: string] =
  (person1.name, person2.name)

# This is a code block that creates two instances of the Person type
# and calls the get_names procedure, storing the results in an Option
let option = 
  let person1 = Person(name: "John", age: 20)
  let person2 = Person(name: "Jane", age: 25)
  get_names(person1, person2)

# This is a match statement to handle different options
# and print out the resulting values
match option:
  # If the option is Some, then print out the names
  # of the two people
  case Some(name1, name2):
    echo "The first person's name is " & name1 & " and the second person's name is " & name2
  # If the option is None, then print out a message
  # saying that there are no names available
  case None:
    echo "There are no names available."