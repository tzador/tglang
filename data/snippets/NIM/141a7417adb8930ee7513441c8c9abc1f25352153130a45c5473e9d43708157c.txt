# This is a code snippet in NIM
# It contains a complex function that sorts a list of integers using QuickSort algorithm

proc quickSort(list: var int[], low: int, high: int):void =
    # Check for base case
    if low >= high:
        return

    # Initialize variables
    var i, j, pivot, temp: int

    # Choose a pivot element
    pivot = list[high]

    # Partition the list
    i = low - 1
    for j in low..high:
        if list[j] <= pivot:
            i += 1
            temp = list[i]
            list[i] = list[j]
            list[j] = temp

    # Swap pivot element to correct position
    temp = list[i + 1]
    list[i + 1] = list[high]
    list[high] = temp

    # Recursively call quickSort on sublists
    quickSort(list, low, i)
    quickSort(list, i + 2, high)

# Define a list to be sorted
var numbers: array[5, int] = [8, 2, 10, 1, 6]

# Call the quickSort function
quickSort(numbers, 0, 4)

# Verify the sorted list
echo(numbers) # Output: [1, 2, 6, 8, 10]