# Defining a container type for a list of integers
type
  IntList = ref object
    len: int
    size: int
    elems: array[0..0] of int # dynamic array to store elements

# Procedure to append a new integer into the list
proc append(intList: IntList, item: int) =
  if intList.len < intList.size: # checking if there is enough space to add the new item
    intList.elems[intList.len] = item # adding the new item to the end of the list
    inc(intList.len) # incrementing the length of the list
  else:
    var newsize = intList.size * 2 # doubling the size of the list
    var newelems = newSeq[int](newsize) # creating a new dynamic array with the new size
    for i in 0..intList.len:
      newelems[i] = intList.elems[i] # copying the existing elements to the new array
    # adding the new item to the end of the list
    newelems[intList.len] = item
    intList.elems = newelems # updating the list's elems reference to the new array
    intList.size = newsize # updating the list's size

# Example usage of the IntList type and its procedures
var list = IntList(len: 0, size: 10, elems: newSeq[int](10)) # creating a list with initial size of 10
for i in 1..5:
  append(list, i) # adding numbers 1 to 5 to the list
echo list.elems # output: [1, 2, 3, 4, 5]