# This is a code snippet written in the NIM programming language, a statically-typed and compiled language.

# Declare a new type with a tuple of a name and age
type
    Person = tuple[name: string, age: int]

# Declare a new type with an array of integers
type
    Numbers = array[10, int]

# A procedure to print a message
procedure printMsg(msg: string) =
    echo msg

# An example of a for loop in NIM
for i in 1..5:
    printMsg("Current index is: " & $i)

# A simple function to calculate the sum of two numbers
func sum(a: int, b: int): int =
    result = a + b

# Calling the function and storing the result in a variable
var total = sum(5, 10)

# Using a conditional statement to print out different messages based on the value of the total variable
if total < 0:
    printMsg("The total is negative.")
elif total > 0:
    printMsg("The total is positive.")
else:
    printMsg("The total is zero.")

# A generic type with a constraint on the type's elements
type
    Box[T: SomeType] = object
        items: seq[T]

# Creating a new instance of the Box type with an array of strings as the elements
var stringBox = Box[string](items: @["apple", "orange", "banana"])

# A prodecdure to print out all the elements in a Box
proc printItems[T: SomeType](box: Box[T]) =
    for item in box.items:
        echo item

# Calling the procedure with the stringBox variable
printItems(stringBox)

# Output:
# Current index is: 1
# Current index is: 2
# Current index is: 3
# Current index is: 4
# Current index is: 5
# The total is positive.
# apple
# orange
# banana