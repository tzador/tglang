# Define a type to represent a floating point number
type
    Float = object
        value*: float

# Define a type to represent a matrix
type
    Matrix = object
        rows*: int
        columns*: int
        elements*: seq[seq[float]]

# Define a generic procedure to multiply two matrices of type Matrix
proc multiplyMatrix[T: Matrix](m1, m2: Matrix): Matrix =
    # Initialize an empty matrix with correct dimensions
    var result: Matrix
    result.rows = m1.rows
    result.columns = m2.columns
    result.elements = newSeqWith(result.rows)
    
    # Iterate through the rows of the first matrix
    for i in 0..m1.rows:
        # Initialize an empty sequence to store the result row
        var row: seq[float]
        
        # Iterate through the columns of the second matrix
        for j in 0..m2.columns:
            # Calculate the dot product of the current row and column
            var sum = 0.0
            for k in 0..m1.columns:
                sum = sum + (m1.elements[i][k] * m2.elements[k][j])
            
            # Add the result to the current row
            row.add(sum)
        
        # Add the calculated row to the result matrix
        result.elements.add(row)
    
    # Return the multiplied matrix
    result

# Define two matrices to be multiplied
var A: Matrix
A.rows = 2
A.columns = 3
A.elements = @[
    @[1.0, 2.0, 3.0],
    @[4.0, 5.0, 6.0]
]

var B: Matrix
B.rows = 3
B.columns = 2
B.elements = @[
    @[7.0, 8.0],
    @[9.0, 10.0],
    @[11.0, 12.0]
]

# Multiply the two matrices and store the result in a new matrix
var C = multiplyMatrix(A, B)

# Print the result matrix
echo "Result:"
echo C.elements