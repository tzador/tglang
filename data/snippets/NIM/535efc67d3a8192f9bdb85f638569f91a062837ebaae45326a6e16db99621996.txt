# This is a function that calculates the fibonacci sequence up to a given number
proc fibonacci_seq(num: int): seq[int] =
  # This sequence will store the fibonacci numbers
  var seq_fib: seq[int] = [0, 1]
  for i in countup(2, num):
    # When accessing the previous numbers in the sequence, we have to subtract 1 since Nim starts counting from 0
    let prev_num = seq_fib[i - 1]
    let curr_num = seq_fib[i - 2]
    let new_num = prev_num + curr_num
    seq_fib.add(new_num)
  result = seq_fib

# This is a recursive function that calculates the factorial of a given number
proc factorial(num: int): int =
  if num == 0:  # Base case, factorial of 0 is 1
    result = 1
  else:
    result = num * factorial(num - 1)  # Recursive call to calculate factorial

# This is a generic procedure for linear search on a sequence
proc linear_search[T](seq: seq[T], key: T): bool =
  for elem in seq:
    if elem == key:
      return true
  result = false

# This is a type for a binary tree node
type BinaryNode[T] = object
  left: BinaryNode[T]
  right: BinaryNode[T]
  data: T

# This is a generic procedure for insertion into a binary search tree
proc insert[T](node: var BinaryNode[T], data: T) =
  if node == nil:
    # If the node is nil, create a new node to insert the data into
    node = create(BinaryNode)
    node.data = data
  elif data < node.data:
    # Recursive call on the left subtree
    insert(node.left, data)
  else:
    # Recursive call on the right subtree
    insert(node.right, data)

# This is a generic procedure for depth-first search on a binary tree
proc dfs[T](node: BinaryNode[T], key: T): string =
  if node == nil:
    # Base case, key not found
    result = "Key not found"
  elif key == node.data:
    # Key found, return the data in the node
    result = $node.data  # $ is used for string interpolation
  else:
    # Recursive call on the left subtree
    result = dfs(node.left, key)
    if result == "Key not found":
      # Recursive call on the right subtree
      result = dfs(node.right, key)