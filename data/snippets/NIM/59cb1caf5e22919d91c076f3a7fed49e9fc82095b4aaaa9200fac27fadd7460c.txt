# Declare a type representing a fruit with fields for name, color and taste
type
    Fruit = object
        name: string
        color: string
        taste: string

# Create a new instance of the Fruit type and initialize its fields
var apple = Fruit(name: "apple", color: "red", taste: "sweet and tart") 

# Declare a tuple containing two different types, a Fruit instance and an integer
var fruitBasket: (Fruit, int)

# Fill the tuple with the apple instance and the integer 5
fruitBasket = (apple, 5)

# Declare a procedure that takes in a Fruit instance and prints its name, color, and taste
proc printFruit(fruit: Fruit) =
    echo "Name: ", fruit.name
    echo "Color: ", fruit.color
    echo "Taste: ", fruit.taste

# Call the printFruit procedure on the apple instance
printFruit(apple)

# Declare a generic type that can hold any type of data
type
    Item[T] = object
        data: T

# Declare a template that takes in any type of data and returns a string representation
template toString[T](data: T): string =
    result = $data

# Create a new instance of the Item generic type with a string as its data
var stringItem = Item[string](data: "Hello world")

# Call the toString template on the stringItem instance and print the result
echo toString(stringItem.data)

# Create a new instance of the Item generic type with an integer as its data
var intItem = Item[int](data: 10)

# Call the toString template on the intItem instance and print the result
echo toString(intItem.data)