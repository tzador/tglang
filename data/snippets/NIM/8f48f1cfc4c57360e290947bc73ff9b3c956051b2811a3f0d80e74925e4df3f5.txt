type
    # define a custom data type for binary trees
    BinaryTree[T] = object
        data: T # stores the data at this node
        left, right: BinaryTree{T} # stores pointers to left and right nodes
    BinaryTreePtr[T] = ptr BinaryTree{T} # stores a pointer to a binary tree

proc insert (t: var BinaryTreePtr, data: T) =
    var 
        # initialize a new node with given data
        node: BinaryTreePtr = new BinaryTree[T](data: data)
        temp: BinaryTreePtr
    if t == nil:
        # edge case - if tree is empty, insert new node as root
        t = node
    else:
        # otherwise, traverse tree to find appropriate position
        temp = t
        while true:
            if data < temp.data:
                if temp.left == nil:
                    # if left child does not exist, insert new node
                    temp.left = node
                    break
                else:
                    # otherwise, move to left child
                    temp = temp.left
            else:
                if temp.right == nil:
                    # if right child does not exist, insert new node
                    temp.right = node
                    break
                else:
                    # otherwise, move to right child
                    temp = temp.right

proc inorder(t: BinaryTreePtr) =
    if t.left != nil:
        # recursively call inorder on left subtree
        inorder(t.left)
    echo(t.data) # print data at current node
    if t.right != nil:
        # recursively call inorder on right subtree
        inorder(t.right)