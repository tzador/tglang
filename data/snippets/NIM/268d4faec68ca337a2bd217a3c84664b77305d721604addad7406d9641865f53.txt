## Sorting algorithm using merge sort

## Function declaration
proc mergeSort(arr: seq[int]): seq[int] =
  ## Base case
  if arr.len <= 1: return arr

  ## Find middle index
  var mid = arr.len div 2

  ## Divide array into two halves
  var left = arr[0 ..< mid]
  var right = arr[mid ..< arr.len]

  ## Recursively call merge sort on each half
  left = mergeSort(left)
  right = mergeSort(right)

  ## Merge the two sorted halves
  return merge(left, right)

## Function for merging two sorted sequences
proc merge(left: seq[int], right: seq[int]): seq[int] =
  var result = @[]

  ## Loop until one of the sequences is empty
  while left.len > 0 and right.len > 0:
    if left[0] < right[0]:
      result.add(left[0])
      left = left[1..left.len]
    else:
      result.add(right[0])
      right = right[1..right.len]

  ## Add the remaining elements from the non-empty sequence
  if left.len > 0: result.add(left[0])
  if right.len > 0: result.add(right[0])

  return result