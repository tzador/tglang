const
  CARD_VALUES = {1: "Ace", 2: "Two", 3: "Three", 4: "Four", 5: "Five", 6: "Six",7: "Seven", 8: "Eight", 9: "Nine", 10: "Ten", 11: "Jack", 12: "Queen", 13: "King"}
  CARD_SUITS = {1: "Spades", 2: "Hearts", 3: "Clubs", 4: "Diamonds"}
  
type
  Card = object
    value*: int
    suit*: int
    --defines a structure for a playing card with a value and a suit
    
  Deck = object
    cards*: seq[Card]
    --defines a structure for a deck of cards consisting of a sequence of Card objects
    
var
  deck: Deck --creates a new deck object
  player_hand: seq[Card] --creates a sequence to store the player's cards
  computer_hand: seq[Card] --creates a sequence to store the computer's cards
  pile: seq[Card] --creates a sequence to store the cards on the pile
  
proc generate_deck(deck: var Deck) =
  for suit in CARD_SUITS:
    for value in CARD_VALUES:
      deck.cards.add(Card(value: value, suit: suit)) --adds a new card object with a specific value and suit to the deck
  
proc shuffle_deck(deck: var Deck) =
  for i in 0..deck.cards.len-1: --loops through all the cards in the deck
    var index = random(0..i) --generates a random index within the range of 0 to current iteration
    deck.cards.swap(i, index) --swaps the current card with the card at the randomly generated index
    
proc deal_cards(deck: var Deck, player_hand: var seq[Card], computer_hand: var seq[Card]) =
  var current_player = 1 --variable to keep track of whose turn it is to receive a card
  while deck.cards.len > 0:
    var card = deck.cards.remove(0) --removes the first card from the deck and assigns it to a variable
    if current_player == 1:
      player_hand.add(card) --adds the card to the player's hand
      current_player = 2 --changes the variable to the next player
    else:
      computer_hand.add(card) --adds the card to the computer's hand
      current_player = 1 --changes the variable back to the first player
      
proc play_round(player_hand: var seq[Card], computer_hand: var seq[Card], pile: var seq[Card]) =
  var player_card = player_hand.remove(0) --removes the first card from the player's hand and assigns it to a variable
  var computer_card = computer_hand.remove(0) --removes the first card from the computer's hand and assigns it to a variable
  pile.add(player_card) --adds the player's card to the pile
  pile.add(computer_card) --adds the computer's card to the pile
  if player_card.value > computer_card.value: --compares the values of the cards
    player_hand.appendAll(pile) --moves all the cards from the pile to the bottom of the player's hand
    echo "Player wins this round!"
  elif player_card.value < computer_card.value:
    computer_hand.appendAll(pile)
    echo "Computer wins this round!"
  else:
    pile.swap(0, 1) --if the values are equal, the cards in the pile are shuffled and the round is replayed
    play_round(player_hand, computer_hand, pile)
    
proc main() =
  deck = Deck() --initializes the deck object
  generate_deck(deck)
  shuffle_deck(deck)
  deal_cards(deck, player_hand, computer_hand)
  while player_hand.len > 0 and computer_hand.len > 0: --loops until one player runs out of cards
    pile.clear() --clears the pile before each round
    play_round(player_hand, computer_hand, pile)
  if player_hand.len > 0:
    echo "Player wins the game!"
  else:
    echo "Computer wins the game!"
    
main() --starts the game