# This is a complex NIM code snippet that utilizes various features of the language

import strutils  # import the standard library module for string manipulation

# define a proc to check if a given input is a valid integer
proc isValidInteger(input: string): bool =
  var parsed: int = parseInt(input)
  if parsed > 0:  # make sure the input is a positive integer
    result = true
  else:  # otherwise, return false
    result = false

# define a proc to generate a random number between 1 and 10
proc generateRandomNumber(): int =
  result = random(max: 10)

# define a proc to check if a given input is a valid name
proc isValidName(input: string): bool =
  if input.len > 2:  # make sure the name is at least 3 characters long
    for char in input:
      if not char.isAlpha:  # make sure the name only contains alphabetical characters
        result = false
        break
    result = true
  else:
    result = false

# define a proc to create a new game with two players
proc createNewGame(player1: string, player2: string): tuple[bool, string] =
  if isValidName(player1) and isValidName(player2):  # make sure both names are valid
    var player1Score: int = 0
    var player2Score: int = 0

    # generate a random number to determine who goes first
    var currentPlayer: string = if generateRandomNumber() == 1: player1 else: player2
    result = (true, currentPlayer)  # return a tuple with the flag for game creation and the current player
  else:
    result = (false, "")

# define a proc to play a round of the game
proc playRound(player: var string, opponent: string): bool =
  if isValidInteger(input: readLine(fmt"Enter a number, {player}:")):  # prompt the current player for their move
    var playerMove: int = parseInt(input)
    if playerMove > 0:
      if player == "Player 1":
        player1Score += playerMove  # update the current player's score
        player = opponent  # switch to the opponent's turn
      else:
        player2Score += playerMove
        player = "Player 1"
      result = true
    else:
      result = false  # if the input is not a positive integer, return false
  else:
    result = false  # if the input is not a valid integer, return false

# define a proc to check if the game is over
proc checkGameOver(): bool =
  if player1Score >= 21:
    echo "Player 1 wins!"
    result = true
  elif user2Score >= 21:
    echo "Player 2 wins!"
    result = true
  else:
    result = false

var player1: string = "Player 1"
var player2: string = "Player 2"
var player: var string = ""
var gameOver: bool = false

case createNewGame(player1, player2)  # create a new game with the two players
of (true, currentPlayer):
  player = currentPlayer

  while not gameOver:  # game loop
    echo currentPlayer & "'s turn:"
    if not playRound(player, if player == "Player 1": player2 else: player1):
      echo "Invalid move!"
      break

    gameOver = checkGameOver()  # check if the game is over
    if not gameOver:  # if the game is not over, switch to the other player's turn
      player = if player == "Player 1": player2 else: player1

# the final scores
echo "Player 1: " & $player1Score
echo "Player 2: " & $player2Score