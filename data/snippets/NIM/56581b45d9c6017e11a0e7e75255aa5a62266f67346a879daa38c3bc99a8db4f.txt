# This code snippet is written in NIM and it generates a random binary tree #

type
    BinaryTree = ref object of Root
        left_child: BinaryTree
        right_child: BinaryTree
        
proc createNode(root: var BinaryTree): BinaryTree = # Function to create a new node in the binary tree #
    new(root)
    root.left_child = nil
    root.right_child = nil
    return root

proc insertNode(node: var BinaryTree, value: int) = # Function to insert a new node in the binary tree #
    if node == nil:
        node = createNode(node)
    elif value < node.value:
        insertNode(node.left_child, value)
    else:
        insertNode(node.right_child, value)

proc generateBinaryTree(size: int): BinaryTree = # Function to generate a random binary tree with the specified size #
    var tree: BinaryTree = nil
    var rng = Random(0)
    for i in 0..<size:
        insertNode(tree, rng.int(100))
    return tree

var myTree = generateBinaryTree(10) # Generating a binary tree with a size of 10 #

echo "Root value: ", myTree.value # Output the value of the root node #

echo "Left child value: ", myTree.left_child.value # Output the value of the left child of the root node #

echo "Right child value: ", myTree.right_child.value # Output the value of the right child of the root node #

echo "Left child of left child value: ", myTree.left_child.left_child.value # Output the value of the left child of the left child of the root node #

echo "Right child of right child value: ", myTree.right_child.right_child.value # Output the value of the right child of the right child of the root node #