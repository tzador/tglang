#This is a code snippet in NIM
#Imports the necessary libraries
import math, algorithms, graphics

#Defines a procedure to calculate the sum of the digits of a given number
proc digitSum(value: int): int =
    var result = 0 #Initializes a variable to store the sum of digits
    while value > 0: #Starts a while loop to iterate through the digits
        result += value % 10 #Adds the last digit to the sum
        value = int(math.floor(value/10)) #Updates the value by removing the last digit
    return result #Returns the final sum of digits

#Defines a function to check if a given number is a happy number
func isHappyNumber(number: int): bool =
    var history = @[number] #Initializes an array to keep track of previously visited numbers
    var current = number #Sets the current number to the given number
    while current != 1: #Starts a while loop until the current number reaches 1 (or a number already in the history)
        current = digitSum(current) #Calculates the sum of digits of the current number
        if current in history: #Checks if the current number is already in the history
            return false #Returns false if the number is not happy
        else:
            history.add(current) #Adds the current number to the history
    return true #Returns true if the number is happy

#Defines a function to find all the happy numbers in a given range
func findHappyNumbers(start: int, end: int): seq[int] =
    var happyNumbers: seq[int] = @[] #Initializes an empty sequence to store the happy numbers
    for number in start..end: #Starts a for loop to iterate through all the numbers in the given range
        if isHappyNumber(number): #Checks if the number is happy
            happyNumbers.add(number) #Adds the happy number to the sequence
    return happyNumbers #Returns the sequence of happy numbers

#Outputs the result
echo findHappyNumbers(1, 100) #Prints the happy numbers in the range 1 to 100