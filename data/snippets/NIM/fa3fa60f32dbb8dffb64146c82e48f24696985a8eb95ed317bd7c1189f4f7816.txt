# This code snippet demonstrates a recursive function to calculate the nth fibonacci number using memoization

# Define a dictionary to store previously calculated fibonacci numbers
var memo: hashTable[int, int]

# Declare the recursive function with an integer input and integer output
proc fib(n: int): int =
    # Check if the current fibonacci number is already stored in the dictionary
    if memo.hasKey(n):
        # If so, return the stored value
        result = memo[n]
    else:
        # If not, recursively call the function to calculate the fibonacci number
        result = fib(n - 1) + fib(n - 2)

        # Store the calculated value in the dictionary for future use
        memo[n] = result

    return result

# Print the 10th fibonacci number using the recursive function
echo fib(10)