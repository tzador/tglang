type
    # Defines a custom type named "Status" which has three options
    Status = enum Processing, Finished, Failed 

# Defines a template named "Task" which has three parameters
template Task(pid: int, name: string, status: Status) =

    var
        # Creates a new task with the given parameters
        newTask: Task = Task(
            pid, # The process ID of the task
            name, # The name of the task
            status # The status of the task, which can be one of the three options defined in the "Status" type
        )

    proc start() =
        # Prints a message indicating that the task has started processing
        echo "Task " & name & " with PID " & $pid & " has started processing."
        # Simulates a random amount of processing time
        sleep rand(100) # Waits for a random amount of time between 0 and 100 milliseconds

        if newTask.status == Status.Processing: # Checks if the task is still being processed
            # Changes the status of the task to "Finished"
            newTask.status = Status.Finished
            # Prints a message indicating that the task has finished processing
            echo "Task " & name & " with PID " & $pid & " has finished processing."
        else: # If for some reason the status is not "Processing"
            # Changes the status of the task to "Failed"
            newTask.status = Status.Failed
            # Prints an error message
            echo "Task " & name & " with PID " & $pid & " has failed processing."

    # Returns the task template
    newTask

# Creates a new task template with dummy data
var myTask: Task = Task(
    101, # Process ID
    "My Task", # Task name
    Status.Processing # Task status
)

# Calls the "start" procedure of the task template
myTask.start()