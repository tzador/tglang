# Function to calculate the factorial of a number
# Returns the factorial as an integer
proc factorial(num: int): int =
    var result = 1 # initialize result to 1
    for i in 1..num:
        result *= i # multiply result by i each iteration
    return result # return the factorial

# Example usage 
echo factorial(5) # output: 120 (5! = 5*4*3*2*1 = 120)
echo factorial(3) # output: 6 (3! = 3*2*1 = 6)
echo factorial(0) # output: 1 (0! = 1)

# Function to find the nth Fibonacci number
# Returns the nth Fibonacci number as an integer
proc fibonacci(n: int): int =
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# Example usage
echo fibonacci(6) # output: 8 (6th Fibonacci number is 8)
echo fibonacci(10) # output: 55 (10th Fibonacci number is 55)
echo fibonacci(1) # output: 1 (1st Fibonacci number is 1)

# Function to determine if a number is prime
# Returns a boolean value representing if the number is prime or not
proc isPrime(num: int): bool =
    if num < 2:
        return false
    for i in 2..(num-1):
        if num mod i == 0:
            return false
    return true

# Example usage
echo isPrime(11) # output: true (11 is a prime number)
echo isPrime(6) # output: false (6 is not a prime number)

# Function to calculate the nth power of a number
# Returns the nth power as an int
proc power(base: int, n: int): int =
    if n == 0:
        return 1
    elif n == 1:
        return base
    else:
        result = base
        for i in 2..n:
            result *= base # multiply result by base each iteration
        return result

# Example usage
echo power(2, 3) # output: 8 (2^3 = 2*2*2 = 8)
echo power(5, 2) # output: 25 (5^2 = 5*5 = 25)
echo power(0, 3) # output: 0 (0^3 = 0*0*0 = 0)