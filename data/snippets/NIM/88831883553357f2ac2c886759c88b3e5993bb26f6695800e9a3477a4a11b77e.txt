# This module implements a binary search tree data structure

# Defining a node for the tree
type
    TreeNode = object
        left: TreeNode
        right: TreeNode
        value: int

# Defining the binary search tree
type
    BST = object
        root: TreeNode

# Function to insert a value into the tree
proc insert(root: var TreeNode, value: int) =
    if root == nil:
        root = TreeNode(left: nil, right: nil, value: value)
    else:
        if value < root.value:
            insert(root.left, value)
        elif value > root.value:
            insert(root.right, value)

# Function to search for a value in the tree
proc search(root: var TreeNode, value: int): bool =
    if root == nil:
        return false
    else:
        if value == root.value:
            return true
        elif value < root.value:
            search(root.left, value)
        else:
            search(root.right, value)

# Function to remove a node from the tree
proc remove(root: var TreeNode, value: int) =
    if root == nil:
        return
    else:
        if value < root.value:
            remove(root.left, value)
        elif value > root.value:
            remove(root.right, value)
        else:
            if root.left == nil:
                root = root.right
            elif root.right == nil:
                root = root.left
            else:
                min_node = find_min(root.right)
                root.value = min_node.value
                remove(root.right, min_node.value)

# Helper function to find the minimum value in a given subtree
func find_min(node: TreeNode): TreeNode =
    if node.left == nil:
        return node
    else:
        find_min(node.left)

# Helper function to find the maximum value in a given subtree
func find_max(node: TreeNode): TreeNode =
    if node.right == nil:
        return node
    else:
        find_max(node.right)

# Function to traverse the tree in-order and print the values
proc in_order(root: TreeNode) =
    if root != nil:
        in_order(root.left)
        echo(root.value)
        in_order(root.right)

# Initializing the tree and inserting values
var tree = BST(root: nil)
tree.insert(tree.root, 5)
tree.insert(tree.root, 2)
tree.insert(tree.root, 8)
tree.insert(tree.root, 1)
tree.insert(tree.root, 6)

# Searching for a value in the tree
if tree.search(tree.root, 8):
    echo("Value 8 is present in the tree")
else:
    echo("Value 8 is not present in the tree")

# Printing the sorted values in the tree
tree.in_order(tree.root)

# Removing a node from the tree
tree.remove(tree.root, 8)

# Printing the sorted values in the tree after removal
tree.in_order(tree.root)