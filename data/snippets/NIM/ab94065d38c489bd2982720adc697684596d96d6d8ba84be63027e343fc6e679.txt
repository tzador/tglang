# This is a function that calculates the factorial of a given number
# and uses recursion to do so.

proc factorial(n: int): int =
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)

# This is a function that calculates the nth fibonacci number
# and uses dynamic programming to optimize the time complexity.

proc fibonacci(n: int): int =
    var fib: array[0..n] of int
    fib[0] = 0
    fib[1] = 1

    for i in 2..n:
        fib[i] = fib[i - 1] + fib[i - 2]

    return fib[n]

# This is a function that sorts an array of integers in ascending order
# and uses the quicksort algorithm.

proc quicksort(arr: seq[int]): seq[int] =
    if len(arr) <= 1:
        return arr
    else:
        var pivot = arr[0]
        var smaller, larger: seq[int]

        for i in 1..len(arr) - 1:
            if arr[i] <= pivot:
                smaller.add(arr[i])
            else:
                larger.add(arr[i])

        return quicksort(smaller) & [pivot] & quicksort(larger)
        
# This is an example of how the functions can be used:

echo factorial(5)
# Output: 120

echo fibonacci(10)
# Output: 55

echo quicksort(@[8, 3, 1, 6, 2])
# Output: @[1, 2, 3, 6, 8]