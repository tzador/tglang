let
  # In Nim, variables are declared using the `let` keyword.
  # Here we are declaring a variable `x` and setting its initial value to 5.
  x = 5

  # We can also declare multiple variables on the same line,
  # as long as they are separated by a comma.
  # Here we are declaring `y` and `z` with initial values of 6 and 7 respectively.
  y, z = 6, 7

  # We can perform arithmetic operations on variables as well.
  # Here we are setting the value of `sum` to the addition of `x` and `y`.
  sum = x + y

  # Nim uses indentation for scoping, similar to Python.
  # The code within the `if` statement will only be executed if the condition is met.
  if z > 5:
    # We can also use `echo` to print out the value of a variable.
    # `echo` automatically adds a new line after printing.
    echo "Z is greater than 5."

    # Here we are using the `block` keyword to group multiple statements together.
    # This is useful when we want to do more than one thing in a particular scope.
    block:
      # We can also use string interpolation to insert the value of a variable into a string.
      # The `$` sign is used to specify that we want to insert a variable.
      # Here we are printing out the value of `sum` using interpolation.
      echo "The sum of x and y is $sum."
    
    # Nim also has `elif` and `else` keywords for conditional statements.
    elif z < 10:
      echo "Z is less than 10."
    else:
      echo "Z is equal to 10."
      
  # We can also use the `for` loop to iterate over a range of numbers.
  # The `..` operator represents a range, and we are iterating from 1 to 10.
  for i in 1 .. 10:
    # We can use the `echof` keyword for formatting strings.
    # Here we are printing the current value of `i` within the loop.
    echof "The current number is %d." % (i)

  # Nim also has a `while` loop for executing code while a condition is met.
  # Here we are incrementing the value of `x` by 1 until it reaches 10.
  while x <= 10:
    x += 1

# The `when` keyword can be used for executing code when a condition is met.
when x == 10:
  # Here we are using the `discard` keyword to ignore the value of an expression.
  discard x