# This code snippet is a simple game of NIM using the Nim programming language.

import std/math

# Function to display the current state of the game
proc displayGame(states: seq[int], currentTurn: int) =
    # Prints out the current state of the game
    echo "Current game state: " & states

    # Prints out the current player's turn
    echo "Current turn: " & currentTurn.nimToString

# Function to validate the player's move
proc validateMove(states: var seq[int], index: int, move: int) =
    # Checks if the index is within the bounds of the list
    if index < 0 or index >= states.len:
        raise newException(
            ValueError, "Invalid index. Choose a number between 1 and " & states.len.nimToString)

    # Checks if the move is valid based on the current state
    if states[index] < move:
        raise newException(
            ValueError, "Invalid move. You cannot take more than " & states[index].nimToString & " stones.")

# Function to update the game state after a move has been made
proc updateGameState(states: var seq[int], index: int, move: int) =
    # Updates the state by subtracting the move from the chosen index
    states[index] -= move

    # Checks if any player has won the game
    if states.sum == 0:
        raise newException(
            ValueError, "Game over. Player " & (1 - index + 1).nimToString & " has won!")

# Main function where the game is played
proc playGame(states: var seq[int], currentTurn: int) =
    # Loop to continue the game until a player wins
    while true:
        # Displays the current state of the game
        displayGame(states, currentTurn)

        # Gets the player's move and validates it
        let index = readint("Player " & currentTurn.nimToString & ", choose a pile: ") - 1
        let move = readint("Player " & currentTurn.nimToString & ", choose a number of stones to take: ")
        validateMove(states, index, move)

        # Updates the game state after the move has been made
        updateGameState(states, index, move)

        # Switches to the other player's turn
        currentTurn = 1 - currentTurn

# Creates a new game with a list of states and starts the game with player 1's turn
let states = [3, 5, 7]
let currentTurn = 0
playGame(states, currentTurn)