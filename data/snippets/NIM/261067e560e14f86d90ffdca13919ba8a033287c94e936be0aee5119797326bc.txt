type
  # Define a custom type for a binary tree node
  BinaryTree[T] = ref object of Root[t: T]
    # Stores reference to the left child of the node
    left: BinaryTree[T] 
    # Stores reference to the right child of the node
    right: BinaryTree[T] 

# Define a method to add a new node to the binary tree
proc add[T](root: var BinaryTree[T], value: T) =
  # Check if root is null
  if root.isNil: 
    # If root is null, create a new node with given value
    root = new BinaryTree[T](t: value)
  else:
    # If root is not null, recursively insert the value in the tree
    if value < root.t:
      # If value is less than current root, insert in the left subtree
      add(root.left, value)
    else:
      # If value is greater than current root, insert in the right subtree
      add(root.right, value)
      
# Define a method to print the binary tree in preorder traversal
proc traversePreorder[T](root: BinaryTree[T]) =
  # Check if root is null
  if root.isNil:
    # If root is null, return
    return
  # Output the value of the current root
  echo(root.t)
  # Recursively traverse the left subtree
  traversePreorder(root.left)
  # Recursively traverse the right subtree
  traversePreorder(root.right)
  
# Define a method to print the binary tree in inorder traversal
proc traverseInorder[T](root: BinaryTree[T]) =
  # Check if root is null
  if root.isNil:
    # If root is null, return
    return
  # Recursively traverse the left subtree
  traverseInorder(root.left)
  # Output the value of the current root
  echo(root.t)
  # Recursively traverse the right subtree
  traverseInorder(root.right)
  
# Define a method to print the binary tree in postorder traversal
proc traversePostorder[T](root: BinaryTree[T]) =
  # Check if root is null
  if root.isNil:
    # If root is null, return
    return
  # Recursively traverse the left subtree
  traversePostorder(root.left)
  # Recursively traverse the right subtree
  traversePostorder(root.right)
  # Output the value of the current root
  echo(root.t)
  
# Create an instance of a binary tree with integer values
var tree: BinaryTree[int]

# Add some nodes to the binary tree
add(tree, 5)
add(tree, 3)
add(tree, 8)
add(tree, 2)
add(tree, 4)
add(tree, 7)

# Print the binary tree in preorder
traversePreorder(tree)

# Output:
# 5
# 3
# 2
# 4
# 8
# 7

# Print the binary tree in inorder
traverseInorder(tree)

# Output:
# 2
# 3
# 4
# 5
# 7
# 8

# Print the binary tree in postorder
traversePostorder(tree)

# Output:
# 2
# 4
# 3
# 7
# 8
# 5