type
  Tree* = object
    value*: int
    left*, right*: Tree

var
  root*: Tree

proc insert*(n: var Tree, value: int): Tree =
  if n == nil:
    n = Tree()
    n.value = value
  elif value < n.value:
    n.left = insert(n.left, value)
  else:
    n.right = insert(n.right, value)
  result = n

# This proc searches for a value in the tree
proc search*(n: Tree, value: int): bool =
  if n == nil:
    result = false
  elif n.value == value:
    result = true
  elif value < n.value:
    result = search(n.left, value)
  else:
    result = search(n.right, value)

# This proc prints the tree in order
proc printTree*(n: Tree) =
  if n != nil:
    printTree(n.left)
    echo(n.value)
    printTree(n.right)

# This proc deletes a node with the given value
proc delete*(n: var Tree, value: int) =
  if n != nil:
    if n.value == value:
      if n.left == nil and n.right == nil:
        n = nil
      elif n.left == nil:
        n = n.right
      elif n.right == nil:
        n = n.left
      else:
        var temp*: Tree
        temp = n.right
        while temp.left != nil:
          temp = temp.left
        n.value = temp.value
        delete(n.right, temp.value)
    elif value < n.value:
      delete(n.left, value)
    else:
      delete(n.right, value)

# initialize the root of the tree
root = Tree()
root.value = 5
# insert values into the tree
insert(root, 3)
insert(root, 8)
insert(root, 1)
insert(root, 7)
insert(root, 10)

# print the tree in order
printTree(root)
# output: 1
#         3
#         5
#         7
#         8
#         10

# search for a value in the tree
echo(search(root, 5))
# output: true

# delete a node with value 3 from the tree
delete(root, 3)
printTree(root)
# output: 1
#         5
#         7
#         8
#         10