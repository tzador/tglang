# This code snippet shows how to generate a random graph using the NIM programming language.

# Import the necessary libraries
import math
import random

# Define function to create a random graph with n nodes and p probability of an edge between any two nodes
proc createGraph(n: int, p: float): seq[seq[bool]] =
    var graph: seq[seq[bool]] = newSeq[seq[bool]](n, @[false])
    for i in 0..<n:
        for j in i+1..<n:
            if random(0.0..1.0) <= p:
                graph[i][j] = true
                graph[j][i] = true
    result = graph

# Define function to calculate the degree of a given node in the graph
proc calculateDegree(graph: seq[seq[bool]], node: int): int =
    result = 0
    for i in 0..<len(graph):
        if graph[node][i]:
            result += 1

# Define function to print the adjacency matrix representation of the graph
proc printMatrix(graph: seq[seq[bool]]) =
    echo "| Node |",
         "|",
         repeat("", len(graph) * 2), "|"
    for i in 0..<len(graph):
        echo "|",
             "| **",
             i, "** |",
             "|",
             repeat("- ", len(graph)), "|"
        for j in 0..<len(graph):
            if graph[i][j]:
                echo "|",
                     "| **1** |",
                     "|",
                     repeat("- ", len(graph) - 1), "|"
            else:
                echo "|",
                     "| **0** |",
                     "|",
                     repeat("- ", len(graph) - 1), "|"

# Main function to generate and print a random graph with n nodes and p probability of an edge between any two nodes
proc main() =
    var n: int = 10 # number of nodes
    var p: float = 0.5 # probability
    var graph: seq[seq[bool]] = createGraph(n, p)
    printMatrix(graph)

# Run main function
main()