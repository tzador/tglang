# This program uses quicksort algorithm to sort a list of numbers
proc partition(array: vararray[int], low, high: int): int =
    # This helper function partitions the array into smaller arrays for sorting
    var
        pivot: int = array[low]
        i: int = low + 1
        j: int = high

    while i <= j:
        while i <= j and array[i] < pivot:
            i += 1
        while array[j] > pivot:
            j -= 1
        if i < j:
            # Swap elements
            array[i], array[j] = array[j], array[i]
    # Swap pivot with jth element
    array[low], array[j] = array[j], pivot
    return j

proc quicksort(array: vararray[int], low, high: int) =
    # This function recursively calls partition to sort the list
    if low < high:
        var pivot: int = partition(array, low, high)
        quicksort(array, low, pivot - 1)
        quicksort(array, pivot + 1, high)

proc main =
    # Input list of numbers
    var
        input: vararray[int] = [12, 43, 2, 8, 67, 23, 1, 54, 98, 10]

    quicksort(input, 0, input.len - 1)
    # Output sorted list
    echo "Sorted list:"
    for i in 0..<input.len:
        echo input[i]

main()