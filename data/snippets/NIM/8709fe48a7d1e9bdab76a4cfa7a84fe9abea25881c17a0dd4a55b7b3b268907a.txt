#This is a comment
var
    #defining a variable
    x: int = 5

proc increment(num: int): int =
    #this function increments a given integer by one
    num += 1
    return num

echo "The starting value of x is " & $x #concatenating strings and variable

#using a for loop to iterate through list
for i in 1..10:
    x = increment(x)
    echo "The value of x is now " & $x

#creating a tuple
var
    #tuples can hold any type of data
    myTuple: tuple[int, string, bool] = (5, "Hello", true)

#using 'case' to check for conditions
case myTuple:
    of (1, _, _):
        echo "The first element is 1"
    of (_, "Hello", _):
        echo "The second element is 'Hello'"
    of (_, _, false):
        echo "The third element is false" #this won't print in this case

#using 'when' with patterns to check for specific conditions
case x:
    of 5:
        echo "x is currently 5"
    of 6, 7, 8:
        echo "x is either 6, 7, or 8"
    of when x mod 2 == 0: #checking if x is even
        echo "x is an even number"

#creating an object
type Person = object
    name: string
    age: int

#initializing an instance of the Person object
var
    #this person's name is "John" and age is 25
    john: Person = Person(name: "John", age: 25)

echo "The person's name is " & john.name #accessing object properties

#creating a generic type
type
    #T can represent any type of data
    Container[T] = object
        data: T
        id: int

#initializing an instance of the Container object with a string
var
    #this container's data is "Example" and id is 1
    myContainer: Container[string] = Container(data: "Example", id: 1)

#using 'when' to check for container type and accessing its data
when myContainer is Container[string]:
    echo "The data in the container is " & myContainer.data