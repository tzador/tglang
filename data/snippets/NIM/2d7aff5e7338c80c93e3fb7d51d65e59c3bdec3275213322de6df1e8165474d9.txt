# This code snippet generates a list of all possible prime numbers between two given integers, using the Sieve of Eratosthenes method.

var
    lowerNum, upperNum: int
    # restricts the range of numbers

proc isPrime(x: int): bool =
    # checks if a number is prime
    for i in 2..(x-1):
        if x mod i == 0:
            return false
    return true

proc sieve(start: int, end: int): seq[int] =
    # generates a list of prime numbers between start and end
    var
        sieve: array[1..end] of bool = [true]
        # sets all numbers as potential prime numbers
        primes: seq[int]

    for i in 2..end:
        if sieve[i]:
            # if sieve[i] is still true, it is a prime number
            if i >= start:
                # adds i to the list of primes if it is between start and end
                primes.add(i)

            # sets all multiples of i as false, as they are not prime numbers
            for j in 2..(end div i):
                sieve[i*j] = false

    return primes

# prompts user for input and calls the sieve function
echo "Enter lower limit: "
readLine(lowerNum)
echo "Enter upper limit: "
readLine(upperNum)

echo "List of prime numbers between " & $lowerNum & " and " & $upperNum & ": "
echo sieve(lowerNum, upperNum)