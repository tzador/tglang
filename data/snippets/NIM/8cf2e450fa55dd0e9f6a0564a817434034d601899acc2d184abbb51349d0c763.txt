# This is a code snippet showing how to implement a binary search algorithm in NIM
# The implementation utilizes a recursive approach

# Define a function to perform the binary search
proc binarySearch(arr: seq[int], low: int, high: int, target: int): int = 
    # Check if the high index is greater than or equal to the low index
    if high >= low: 
        # Calculate the middle index
        mid = low + (high - low) / 2 

        # Check if the middle element is equal to the target 
        if arr[mid] == target: 
            # Return the middle index 
            return mid  

        # Check if the middle element is smaller than the target 
        if arr[mid] < target: 
            # Call the function recursively with the new high index
            return binarySearch(arr, mid + 1, high, target) 

        # Else, the middle element is greater than the target
        else:
            # Call the function recursively with the new low index
            return binarySearch(arr, low, mid - 1, target) 

    # If the element is not present in the array, return -1
    return -1

# Define the input array
var arr: seq[int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Define the target element to search for
var target: int = 6 

# Call the binary search function and save the result to a variable
var result: int = binarySearch(arr, 0, len(arr)-1, target) 

# Print the index of the target element 
echo "Index of target element is: ", result