# This program utilizes recursive functions to generate a list of Fibonacci numbers

proc fibonacci(num: int): seq[int] =
    # This function takes in a number as an argument and returns a list of Fibonacci numbers up to that number

    if num <= 0:
        return @[] # returns an empty list if num is 0
    elif num == 1:
        return @[0] # returns a list with just 0 if num is 1
    else:
        var fib_list = @[0, 1] # initialize a list with first two Fibonacci numbers
        return _fibonacci(num, fib_list)

proc _fibonacci(num: int, fib_list: seq[int]): seq[int] =
    # a helper function for recursion, takes in a num and the fibonacci list as arguments

    if len(fib_list) < num:
        # append next Fibonacci number to list
        var next_fib = fib_list[len(fib_list)-1] + fib_list[len(fib_list)-2]
        fib_list.add(next_fib)
        # recursively call itself
        return _fibonacci(num, fib_list)
    else:
        # return the final fibonacci list
        return fib_list

discard fibonacci(10) # discard is used to simply call the function without storing the output