# Nim fibonacci sequence using recursion and memoization

# function to calculate fibonacci sequence using recursion and memoization
proc fibonacci(n: int, var memo: openarray[int]) : int =
    # base case
    if n <= 2:
        return n

    # check if value has already been calculated and stored in memo
    elif memo[n] != undefined:
        return memo[n]
    
    # otherwise, recursively calculate and store in memo
    else:
        memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
        return memo[n]

# initialize memo with first two values
var memo: array[100, int]
memo[1] = 1
memo[2] = 1

# call function with desired index
echo fibonacci(10, memo)