import tables
# /* Definition of player data structure */
type
    Player = object
        name: string
        age: int
        country: string
        
# /* Definition of game state data structure */
type
    GameState = enum
        P1_TURN, P2_TURN, GAME_OVER

# /* Function to calculate the nim sum of a list of piles */
proc calculateNimSum(piles: seq[int]): int =
    var nimSum: int = 0
    for pile in piles:
        nimSum = nimSum xor pile
    return nimSum

# /* Function to check if the game state is over */
proc isGameOver(piles: seq[int]): bool =
    # Check if all piles are empty
    for pile in piles:
        if pile != 0:
            return false
    return true

# /* Function to check if it is player 1's turn */
proc isPlayer1Turn(gameState: GameState): bool =
    if gameState == GameState.P1_TURN:
        return true
    return false

# /* Function to check if it is player 2's turn */
proc isPlayer2Turn(gameState: GameState): bool =
    if gameState == GameState.P2_TURN:
        return true
    return false

# /* Function for player 1 to make a move */
proc player1Move(piles: var seq[int]): int =
    var pileIndex, numToRemove: int
    # Get user input for pile index and number of items to remove
    echo "Player 1's turn. Enter the pile index: "
    readLine(pileIndex)
    if pileIndex >= len(piles):
        # Invalid pile index, try again
        return player1Move(piles)
    echo "Enter the number of items to remove: "
    readLine(numToRemove)
    if numToRemove > piles[pileIndex]:
        # Invalid number to remove, try again
        return player1Move(piles)
    # Update pile with new value
    piles[pileIndex] = piles[pileIndex] - numToRemove
    return numToRemove

# /* Function for player 2 to make a move */
proc player2Move(piles: var seq[int]): int =
    var pileIndex, numToRemove: int
    # Get user input for pile index and number of items to remove
    echo "Player 2's turn. Enter the pile index: "
    readLine(pileIndex)
    if pileIndex >= len(piles):
        # Invalid pile index, try again
        return player2Move(piles)
    echo "Enter the number of items to remove: "
    readLine(numToRemove)
    if numToRemove > piles[pileIndex]:
        # Invalid number to remove, try again
        return player2Move(piles)
    # Update pile with new value
    piles[pileIndex] = piles[pileIndex] - numToRemove
    return numToRemove

# /* Function to play the game of Nim */
proc playNim():
    # Initialize game state and piles
    var gameState: GameState = GameState.P1_TURN
    var piles: seq[int] = @[3, 4, 5]
    while not isGameOver(piles):
        # Determine current turn
        if isPlayer1Turn(gameState):
            # Player 1's turn
            player1Move(piles)
            # Change game state to player 2's turn
            gameState = GameState.P2_TURN
        else:
            # Player 2's turn
            player2Move(piles)
            # Change game state to player 1's turn
            gameState = GameState.P1_TURN
        echo "Current state of piles: ", piles
    # Calculate and print winner
    if isPlayer1Turn(gameState):
        # Player 2 made last move, player 1 wins
        echo "Player 1 wins!"
    else:
        # Player 1 made last move, player 2 wins
        echo "Player 2 wins!"
        
# /* Main function */
proc main() =
    playNim()
    
main()