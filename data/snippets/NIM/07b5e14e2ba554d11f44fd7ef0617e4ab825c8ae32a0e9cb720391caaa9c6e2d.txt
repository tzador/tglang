## This code snippet solves the Knapsack problem using Dynamic Programming

# Variable declarations
var
    knapsack_maxWeight: int
    item_count: int
    weights: array[1..100] of int
    values: array[1..100] of int
    dp_table: array[0..100, 0..100] of int

# Function to recursively calculate the maximum value that can be obtained with
#the given weight limit and items
# Parameters:
#   weight_limit: the remaining weight limit of the knapsack
#   curr_item: the current item being considered
# Returns:
#   the maximum value that can be obtained with the given weight limit and items
proc knapsack(weight_limit: int, curr_item: int): int =
    if (weight_limit <= 0 or curr_item = 0):
        return 0
    elif (weights[curr_item] <= weight_limit):
        return max(values[curr_item] + knapsack(weight_limit - weights[curr_item], curr_item - 1), knapsack(weight_limit, curr_item - 1))
    else:
        return knapsack(weight_limit, curr_item - 1)

# Main function to call the knapsack function and print the result
proc main() =
    # Read input
    knapsack_maxWeight = readLine().parseInt()
    item_count = readLine().parseInt()
    for i in 1..item_count:
        weights[i] = readLine().parseInt()
    for i in 1..item_count:
        values[i] = readLine().parseInt()

    # Compute and print result
    echo "Maximum value with weight limit ", knapsack_maxWeight, ": ", knapsack(knapsack_maxWeight, item_count)

# Call main function
main()