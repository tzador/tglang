# This program generates a list of prime numbers up to a given limit
# using the Sieve of Eratosthenes algorithm

proc sieve(n: int): int[] =
    # Create a boolean array of size n+1 and initialize all values to true
    var prime: array[0..n+1, bool]
    prime.setall(true)

    # Start from the first prime number, 2
    var p = 2

    # Loop through the numbers up to the square root of n
    while p * p <= n:
        # If prime[p] is true, then it is a prime number
        if prime[p] == true:
            # Update all multiples of p to false in the array
            for i in 0..n/p:
                prime[p*i] = false
        p += 1
    
    # Create a list to hold the prime numbers
    var primes: int[]

    # Loop through the boolean array and add all true values (prime numbers) to the list
    for i in 2..n:
        if prime[i] == true:
            primes.add(i)

    # Return the list of prime numbers
    result = primes

# Call the sieve function to generate a list of primes up to 100
var primesList = sieve(100)