# This algorithm sorts a list of integers using the quicksort method
# First, we define a procedure to partition the list into two sub-lists
proc partition(lst: var seq[int]; low: int; high: int): int =
  var pivot: int = lst[high]
  var i: int = low - 1
  for j in low ..< high:
    if lst[j] < pivot:
      i = i + 1
      lst[i], lst[j] = lst[j], lst[i]
  lst[i + 1], lst[high] = lst[high], lst[i + 1]
  return i + 1

# Next, we define the recursive quicksort function
proc quicksort(lst: var seq[int]; low: int; high: int) =
  if low < high:
    var pi = partition(lst, low, high)
    quicksort(lst, low, pi - 1)
    quicksort(lst, pi + 1, high)

# Finally, we call the quicksort function on a list of integers
var lst: seq[int] = [5, 2, 7, 1, 8, 3]
quicksort(lst, 0, lst.len - 1)

# The output of the sorted list will be:
# [1, 2, 3, 5, 7, 8]