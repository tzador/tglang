# This is a complex code snippet in NIM, showcasing various features and syntax of the language.

# Define a constant variable "MAX_SIZE" with value 100
const MAX_SIZE = 100

# Create a type "Color" with red, green, and blue integer values
type
  Color = object
    red, green, blue: int

# Create a procedure "calculate_average" that takes in a sequence of floats and returns the average
proc calculate_average(seq: seq[float]): float =
  var sum: float = 0.0
  for num in seq:
    sum += num
  result = sum / seq.len

# Define a generic type "Stack" that can hold any data type
type
  Stack[T] = object
    data: T

# Create a procedure "push" that adds an item to the top of the stack
proc push[T](stack: var Stack[T], item: T) =
  stack.data = item

# Create a procedure "pop" that removes and returns the top item from the stack
proc pop[T](stack: var Stack[T]): T =
  result = stack.data
  stack.data = nil

# Create an instance of the "Stack" type with integers
var intStack: Stack[int]

# Push integers 1, 2, and 3 onto the stack
push(intStack, 1)
push(intStack, 2)
push(intStack, 3)

# Pop the top item from the stack and print the result
echo pop(intStack)

# Define a generic function "map" that applies a function to each item in a sequence and returns a new sequence
func map[T, R](seq: seq[T], func: T -> R): seq[R] =
  var result: seq[R]
  for item in seq:
    result.add(func(item))
  result

# Define a list of strings
var strList = ["apple", "orange", "banana"]

# Use the "map" function to convert the list to uppercase letters and print the result
echo map(strList, toUpper)