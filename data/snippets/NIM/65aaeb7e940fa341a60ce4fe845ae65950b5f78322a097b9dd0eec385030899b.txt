# This is a complex code snippet in NIM.
# It generates a random array, counts the number of elements that are less than a specified value, 
# and then sorts the array in ascending order using a modified merge sort algorithm.

# Define a function to generate a random array of integers
func generateRandomArray(size, min, max: int): array[int] =
    # Initialize an empty array
    var randomArray: array[int] = []

    # Loop through the specified size
    for i in 0..size:
        # Generate a random integer within the specified range
        var randomNumber = random(min..max)
        # Add the integer to the array
        randomArray.add(randomNumber)

    # Return the generated array
    return randomArray

# Define a function to count the number of elements in the array that are less than the specified value
func countLessThan(array: array[int], value: int): int =
    # Initialize a counter
    var count: int = 0

    # Loop through the array
    for element in array:
        # Check if the element is less than the specified value
        if element < value:
            # Increment the counter
            count += 1

    # Return the count
    return count

# Define a function to merge two sorted subarrays
proc merge(array: var array[int], low, mid, high: int) =
    # Initialize two temporary arrays
    var leftArray: array[int] = array[low..mid]
    var rightArray: array[int] = array[mid + 1..high]

    # Initialize counters
    var leftCount = 0
    var rightCount = 0
    var currentCount = low

    # Loop until one of the subarrays is exhausted
    while leftCount < leftArray.len and rightCount < rightArray.len:
        # Compare elements from both subarrays and add the smaller element to the original array
        if leftArray[leftCount] < rightArray[rightCount]:
            array[currentCount] = leftArray[leftCount]
            leftCount += 1
        else:
            array[currentCount] = rightArray[rightCount]
            rightCount += 1
        currentCount += 1

    # Add remaining elements from left subarray, if any
    while leftCount < leftArray.len:
        array[currentCount] = leftArray[leftCount]
        leftCount += 1
        currentCount += 1

    # Add remaining elements from right subarray, if any
    while rightCount < rightArray.len:
        array[currentCount] = rightArray[rightCount]
        rightCount += 1
        currentCount += 1

# Define a function to recursively sort the array using the modified merge sort algorithm
proc mergeSort(array: var array[int], low, high: int) =
    # Check for base case
    if low < high:
        # Find the middle index
        var mid: int = (low + high) div 2

        # Recursively sort the left half of the array
        mergeSort(array, low, mid)

        # Recursively sort the right half of the array
        mergeSort(array, mid + 1, high)

        # Merge the sorted subarrays
        merge(array, low, mid, high)

# Generate a random array of size 10 with values ranging from 1 to 100
var array = generateRandomArray(10, 1, 100)

# Print the original array
echo "Original array:", array

# Count the number of elements that are less than 50
var count = countLessThan(array, 50)

# Print the count of elements less than 50
echo "Number of elements less than 50:", count

# Sort the array using the modified merge sort algorithm
mergeSort(array, 0, array.len - 1)

# Print the sorted array
echo "Sorted array:", array