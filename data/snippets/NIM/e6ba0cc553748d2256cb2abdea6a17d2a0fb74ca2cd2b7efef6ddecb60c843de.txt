# Define a dynamic array
var fruits: seq[string]

# Add elements to the array
fruits.add("apple")
fruits.add("orange")
fruits.add("banana")

# Iterate through the array using a for loop
for fruit in fruits:
    print fruit

# Use a while loop to remove elements from the array
while fruits.len() > 0:
    fruits.remove(0)

# Define a function that returns the sum of two numbers
func sum(a: int, b: int): int =
    result = a + b
    return result

# Use the 'sum' function to add two numbers
var x = sum(5, 10)
println(x)

# Define a type for a person
type Person = object:
    name: string
    age: int
    address: string

# Create a new instance of Person
var person: Person = Person(name: "John", age: 25, address: "123 Main St")

# Use the instance to access and modify its properties
person.age = 26
person.address = "456 Pine St"

# Use a generic type for a queue
type Queue[T] = object:
    data: seq[T]

# Create a new instance of a queue of integers
var intQueue: Queue[int] = Queue[int]()

# Add elements to the queue
intQueue.data.add(5)
intQueue.data.add(10)
intQueue.data.add(15)

# Define a function that reverses the elements in a queue
func reverseQueue(q: Queue[T]): Queue[T] =
    var reversed: Queue[T] = Queue[T]()
    while q.data.len() > 0:
        reversed.data.add(q.data.remove(q.data.len()-1))
    return reversed

# Use the 'reverseQueue' function on the integer queue
var reverse: Queue[int] = reverseQueue(intQueue)

# Print out the reversed queue
for num in reverse.data:
    print num