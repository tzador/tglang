proc mergeSort(list: array): array =
    # This is a comment line
    # Check the length of the list
    if len(list) == 1:
        return list
    # Find the middle index of the list
    middleIndex = len(list) // 2
    # Divide the list into two halves
    leftHalf = list[0..middleIndex]
    rightHalf = list[middleIndex+1..len(list)]
    # Recursively divide and merge the two halves
    leftHalf = mergeSort(leftHalf)
    rightHalf = mergeSort(rightHalf)
    # Initialize an empty list
    result: array = @[]
    # Loop until one of the halves is empty
    while len(leftHalf) > 0 and len(rightHalf) > 0:
        if leftHalf[0] < rightHalf[0]:
            # Append the first element from left half to result
            result.add(leftHalf[0])
            # Remove the added element from left half
            leftHalf = leftHalf[1..len(leftHalf)]
        else:
            # Append the first element from right half to result
            result.add(rightHalf[0])
            # Remove the added element from right half
            rightHalf = rightHalf[1..len(rightHalf)]
    # Append the remaining elements from the non-empty half to result
    if len(leftHalf) > 0:
        result.append(leftHalf)
    else:
        result.append(rightHalf)
    # Return the final result
    return result