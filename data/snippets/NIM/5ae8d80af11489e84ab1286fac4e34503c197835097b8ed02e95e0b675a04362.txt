# This is a NIM game implementation in NIM programming language

# Creating a new type to represent the game (board)
type
  GameBoard* = object
    piles: seq[int] # a sequence that will store the number of objects in each pile
    current_player*: int # the current player's turn
    is_over*: bool # a boolean to check if the game is over

# A function to initialize the game board with the desired number of piles and objects in each pile
proc init_game_board*(n: int, objects: seq[int]): GameBoard =
  result = GameBoard(piles: objects, current_player: 1, is_over: false) # initialize board with given values

# A function to check if the move is valid, taking in the pile index and number of objects to remove
proc is_valid_move*(game_board: var GameBoard, pile_index: int, num_objects: int): bool =
  if pile_index < 0 or pile_index >= game_board.piles.high: # check if pile index is out of bounds
    return false
  if num_objects < 1 or num_objects > game_board.piles[pile_index]: # check if num_objects is out of bounds
    return false
  return true # if both checks pass, move is valid

# A function to make a move, taking in the pile index and number of objects to remove
proc make_move*(game_board: var GameBoard, pile_index: int, num_objects: int) =
  if is_valid_move(game_board, pile_index, num_objects): # check if move is valid
    game_board.piles[pile_index] -= num_objects # remove objects from the chosen pile
    if check_game_over(game_board): # check if game is over after move
      game_board.is_over = true # set is_over to true if game is over
    else:
      game_board.current_player = game_board.current_player mod 2 + 1 # switch to other player's turn

# A function to check if the game is over (all piles have no objects)
func check_game_over(game_board: GameBoard): bool =
  for pile in game_board.piles:
    if pile > 0:
      return false # if any pile still has objects, game is not over
  return true # otherwise, game is over

# A function to display the current game board
proc display_game_board(game_board: GameBoard) =
  echo "Piles:" # print header
  for i, pile in game_board.piles:
    echo "Pile ", i+1, ":"
    for j in 1..pile: # print objects in pile as X symbols
      echo "X"
  echo "Current player: ", game_board.current_player # print current player's turn
  echo "Is game over? ", game_board.is_over # print boolean for game status

# Main game loop
var game_board: GameBoard = init_game_board(3, {5, 4, 3}) # initialize game board with 3 piles and 5, 4, 3 objects respectively
while not game_board.is_over: # loop until game is over
  display_game_board(game_board) # display current game board
  echo "Player ", game_board.current_player, "'s turn:" # prompt current player to make a move
  var pile_index, num_objects: int = inputInt(), inputInt() # get pile index and number of objects from user
  make_move(game_board, pile_index - 1, num_objects) # make move based on user input
echo "Game Over!" # print game over message
echo "Player ", game_board.current_player mod 2 + 1, " wins!" # print winning player's turn