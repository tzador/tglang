#Importing necessary modules for the program. `

import math, sys
import random, collections

#Defining the main procedure for the NIM game.`

proc nimGame() =
  #Initializing variables for game setup.`
  var pileCount: int = 0
  var mode: bool = false
  #Getting user input for game setup parameters.`
  echo "Enter number of piles for the game: "
  let pileCount = readInt()
  echo "Enter single or double mode: (1 for single, 2 for double) "
  let gameMode = readInt()
  if gameMode == 1:
    let mode = false
  elif gameMode == 2:
    let mode = true
  else:
    echo "Invalid input. Please try again."
    nimGame() #Recursively call the nimGame procedure if input is invalid.`
  #Generating random pile sizes for game setup.`
  var pileSizes: array[int] = newSeq[pileCount, 0]
  for i in 0..pileCount:
    pileSizes[i] = random(5)+1
  #Print initial game setup.`
  echo "Pile sizes: ", pileSizes
  #Initializing game loop.` 
  var playerTurn: bool = true #Use boolean variables to keep track of player turns.`
  var gameOver: bool = false #Use boolean variable to keep track of game ending.`
  while !gameOver:
    if mode: #If mode is double.`
      if playerTurn:
        echo "Player 1's turn: "
        playerTurn = false
      else:
        echo "Player 2's turn: "
        playerTurn = true
      #Get input for pile and number of stones to remove.`
      echo "Enter pile number (1 to ", pileCount, "): "
      let pileNumber = readInt()
      echo "Enter number of stones to remove: "
      let stonesToRemove = readInt()
      #Validate input.`
      if pileNumber < 1 or pileNumber > pileCount: #Check for valid pile number.`
        echo "Invalid pile number. Please try again."
        playerTurn = !playerTurn #Reset player turn so incorrect player is prompted again.`
      elif pileSizes[pileNumber-1] < stonesToRemove: #Check if there are enough stones in chosen pile.`
        echo "Not enough stones in chosen pile. Please try again."
        playerTurn = !playerTurn
      else:
        #Remove stones from chosen pile.`
        pileSizes[pileNumber-1] = pileSizes[pileNumber-1] - stonesToRemove
        #Check for game over condition.`
        if pileSizes == newSeq[pileCount, 0]:
          gameOver = true
    else: #If mode is single.`
      if playerTurn:
        #Player 1 always chooses pile with most number of stones.`
        var largestPileIndex: int = 0
        var largestPileSize: int = 0
        for i in 0..pileCount:
          if pileSizes[i] > largestPileSize:
            largestPileSize = pileSizes[i]
            largestPileIndex = i
        #Remove random number of stones from chosen pile.`
        var stonesToRemove: int = random(largestPileSize)+1
        pileSizes[largestPileIndex] = pileSizes[largestPileIndex] - stonesToRemove
        playerTurn = false
      else:
        echo "Computer's turn: "
        playerTurn = true
        #Get input for pile and number of stones to remove.`
        echo "Enter pile number (1 to ", pileCount, "): "
        let pileNumber = readInt()
        echo "Enter number of stones to remove: "
        let stonesToRemove = readInt()
        #Validate input.`
        if pileNumber < 1 or pileNumber > pileCount: #Check for valid pile number.`
          echo "Invalid pile number. Please try again."
          playerTurn = !playerTurn #Reset player turn so incorrect player is prompted again.`
        elif pileSizes[pileNumber-1] < stonesToRemove: #Check if there are enough stones in chosen pile.`
          echo "Not enough stones in chosen pile. Please try again."
          playerTurn = !playerTurn
        else:
          #Remove stones from chosen pile.`
          pileSizes[pileNumber-1] = pileSizes[pileNumber-1] - stonesToRemove
          #Check for game over condition.`
          if pileSizes == newSeq[pileCount, 0]:
            gameOver = true
  #Print game over message and winner.`
  echo "Game over!"
  if playerTurn:
    echo "Player 1 wins!"
  else:
    echo "Player 2 wins!"
#Call the nimGame procedure to start the game.`
nimGame()