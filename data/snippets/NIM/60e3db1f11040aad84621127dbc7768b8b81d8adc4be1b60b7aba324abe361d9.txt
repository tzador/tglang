# This code snippet generates a random binary tree
import random

# Define a class Node to create nodes for the tree
# Each node has a value, a left child, and a right child
type
  Node = object
    value: int
    left: ptr Node
    right: ptr Node

# Define a global variable to keep track of the root of the tree
var
  root: ptr Node

# Define a helper function to insert a new node into the tree
proc insertNode(value: int, node: ptr Node) =
  # Check if the current node is empty
  if node == nil:
    # Create a new node with the given value
    var newNode: Node
    newNode.value = value
    newNode.left = nil
    newNode.right = nil
    # Make the new node the root of the tree if the current node is the root
    if node == root:
      root = addr(newNode)
  else:
    # Randomly determine whether to insert the new node to the left or right of the current node
    var direction = random(2)
    # If direction is 0, insert to the left, otherwise insert to the right
    if direction == 0:
      # Recursively call the function to insert to the left child of the current node
      insertNode(value, node.left)
    else:
      # Recursively call the function to insert to the right child of the current node
      insertNode(value, node.right)

# Define a function to generate a random binary tree with given depth and number of nodes
proc generateRandomTree(depth: int, numNodes: int) =
  # Clear the previous tree
  root = nil
  # Loop through the number of nodes and insert a new node with the value of the current index
  for i in 0..numNodes:
    insertNode(i, root)
  # Repeat the process recursively to generate a tree with the desired depth
  if depth > 1:
    generateRandomTree(depth - 1, numNodes)

# Generate a random tree with depth of 5 and 10 nodes
generateRandomTree(5, 10)

# Print the tree in pre-order traversal (node, left, right) for visualization
proc printTree(node: ptr Node) =
  if node == nil:
    return
  echo node.value, " "
  printTree(node.left)
  printTree(node.right)

printTree(root)