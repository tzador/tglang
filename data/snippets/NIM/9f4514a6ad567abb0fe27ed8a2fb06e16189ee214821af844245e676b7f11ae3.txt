## This program generates a list of prime numbers using the Sieve of Eratosthenes algorithm
# It takes a user input for the upper limit of the list
# Output is a list of all prime numbers from 1 to the user input upper limit
proc findPrimes(upperLimit: int): seq[int] =
    # Create a list of numbers from 1 to the upper limit
    var numbers: seq[int] = [1 .. upperLimit]
    # Set the first element (1) as non-prime (to be ignored in the algorithm)
    numbers[1] = 0
    # Initialize an empty list to store prime numbers
    var primes: seq[int] = @[]
    # Loop through the numbers list
    for i in 2 .. upperLimit:
        # Check if the current number is set as non-prime
        if numbers[i] != 0:
            # Add it to the list of prime numbers
            primes.add(numbers[i])
            # Loop through the remaining numbers and mark multiples of the current number as non-prime
            for j in i * i .. upperLimit by i:
                numbers[j] = 0
    return primes
# Get user input for the upper limit
echo "Enter the upper limit:"
var upperLimit = readLine(parseInt)
# Call the findPrimes procedure and store the result in a variable
var primeNumbers = findPrimes(upperLimit)
# Print the list of prime numbers
echo "List of prime numbers from 1 to $upperLimit:"
for x in primeNumbers:
    echo x