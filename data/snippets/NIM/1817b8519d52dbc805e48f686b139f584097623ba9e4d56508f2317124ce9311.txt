# This program generates a Pascal's Triangle

# Function to generate the next row in the Pascal's Triangle
proc next_pascal_row(n: int): seq[int] =
  var row: seq[int]
  if n == 0:
    row = [1]
  else:
    # Get the previous row
    let prev_row = next_pascal_row(n - 1)
    for i in 0..len(prev_row):
      # Calculate the next row based on previous row values
      if i == 0 or i == len(prev_row):
        row.add(1)
      else:
        row.add(prev_row[i-1] + prev_row[i])
  return row

# Get user input for the number of rows in Pascal's Triangle
echo "Enter the number of rows in Pascal's Triangle: "
var num: int = readLine(parseInt)

# Validate user input
assert num > 0, "Number of rows should be greater than 0"

# Generate the Pascal's Triangle
var triangle: seq[seq[int]]
for i in 0 ..< num:
  triangle.add(next_pascal_row(i))

# Print the Pascal's Triangle
echo "Pascal's Triangle:"
for row in triangle:
  # Calculate the number of spaces needed for correct alignment
  var spaces: string = ()
  let n = num - len(row)
  for i in 0 ..< n:
    spaces.add("  ")
  # Print the row with correct alignment
  echo "$(spaces)$row"