###This is a function that sorts a list of numbers using the quicksort algorithm

#`A` is the list of numbers to be sorted
proc quicksort(A: seq[int])=
  if A.len<=1: #base case, no sorting needed for a list of size 1
    pass
  else:
    #first, we choose a pivot element (here we use the last element of the list)
    #and create two empty lists to hold numbers smaller and larger than the pivot
    let pivot = A[A.len-1]
    var L: seq[int] = @[]
    var R: seq[int] = @[]
    #then we go through the list and add each number to the appropriate list
    for i in 0..<A.len-1:
      if A[i]<=pivot:
        L.add(A[i])
      else:
        R.add(A[i])
    #now, we recursively call the quicksort function on the two lists
    quicksort(L)
    quicksort(R)
    #finally, we combine the sorted lists and add the pivot in between
    A = L&[pivot]&R

###Example usage for sorting a list of numbers

var nums: seq[int] = @[5, 2, 8, 3, 1, 9, 4, 7, 6]
echo "Original list: ", nums
quicksort(nums)
echo "Sorted list: ", nums
#output: [1, 2, 3, 4, 5, 6, 7, 8, 9]