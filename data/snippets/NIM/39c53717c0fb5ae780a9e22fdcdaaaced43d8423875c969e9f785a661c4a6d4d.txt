# This code snippet is written in NIM, a statically typed, imperative programming language

# Defining a new type called 'Person' with two fields, 'name' of type string and 'age' of type int
type
  Person = object
    name: string
    age: int

# Creating a new instance of Person with 'name' of "John" and 'age' of 25
var p : Person = Person(name: "John", age: 25)

# Creating a new array of type int named 'numbers'
var numbers: array[10, int]

# Iterating through the numbers array using a for loop
for i in 0 ..< len(numbers):
  # Checking if the current number is even
  if numbers[i] mod 2 == 0:
    # If it is, print out the number with a prefix "Even: "
    echo "Even: " & $numbers[i]

# Defining a new procedure called 'reverseString' that takes in a string as a parameter and returns a reversed version of it
proc reverseString(s: string): string =
  # Creating an empty string to hold the reversed version
  var revStr: string = ""

  # Iterating through the original string from the end to the beginning
  for i in (s.len-1) ..>= 0:
    # Appending each character to the reversed string
    revStr.add(s[i])

  # Returning the reversed string
  return revStr

# Calling the reverseString procedure with the string "Hello" and storing the result in a variable
var reversedStr: string = reverseString("Hello")

# Printing the reversed string
echo reversedStr