# This code snippet creates a function that calculates the factorial of a given number recursively.
# It uses a helper function to allow for tail recursion optimization.

proc factorial(n: int): int =  # Define the function 'factorial' with parameter 'n'

  if n == 0:                  # Check if 'n' is equal to 0
    return 1                  # Return 1 (base case)

  return n * factorial(n - 1) # Return 'n' multiplied by the factorial of 'n-1' (recursive call)

# Helper function to allow for tail recursion optimization.

proc factorialHelper(n: int, result: int = 1): int =  # Define helper function 'factorialHelper' with parameters 'n' and 'result'

  if n == 0:                     # Check if 'n' is equal to 0
    return result                # Return the accumulated result (base case)

  return factorialHelper(n - 1, n * result) # Call 'factorialHelper' with 'n-1' and 'n*result' as parameters

echo factorial(5) # Calling the 'factorial' function with input 5 to calculate its factorial