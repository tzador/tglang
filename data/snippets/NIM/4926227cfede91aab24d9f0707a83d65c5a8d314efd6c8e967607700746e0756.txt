# This code snippet generates a random maze using the randomized Prim's algorithm

# Define a Cell object with properties for its coordinates and walls
type
  Cell = object
    x, y: int
    walls: seq[bool]  # index 0 = top, 1 = right, 2 = bottom, 3 = left

# Function to generate an n x n grid with the specified starting and ending coordinates
proc generateMaze(n, startx = 0, starty = 0, endx = n - 1, endy = n - 1): Cell[n, n] =
  # Initialize an empty grid of cells
  var maze: Cell[n, n]

  # Set all walls to be present in each cell
  for y in 0 .. n - 1:
    for x in 0 .. n - 1:
      maze[x, y].walls = [true, true, true, true]

  # Choose a random starting cell
  var current_x, current_y: int = rand(startx .. endx), rand(starty .. endy)

  # Create a list to keep track of visited cells
  var visitedCells: seq[Cell] = @[maze[current_x, current_y]]

  # Loop until all cells have been visited
  while visitedCells.len < (n * n):
    # Shuffle the walls of the current cell randomly
    shuffle(maze[current_x, current_y].walls)

    # Loop through the shuffled walls of the current cell
    for index, wall in maze[current_x, current_y].walls:
      # Check if the current cell and the cell on the other side of the wall are in bounds and
      # not already visited
      if (index == 0 and current_y > 0) and not maze[current_x, current_y - 1] in visitedCells:
        # Remove the top wall of the current cell and bottom wall of the other cell
        maze[current_x, current_y].walls[0] = false
        maze[current_x, current_y - 1].walls[2] = false

        # Add the other cell to the visited cells list
        visitedCells.add(maze[current_x, current_y - 1])

        # Set the current cell to be the new cell
        current_y -= 1

      elif (index == 1 and current_x < n - 1) and not maze[current_x + 1, current_y] in visitedCells:
        # Remove the right wall of the current cell and left wall of the other cell
        maze[current_x, current_y].walls[1] = false
        maze[current_x + 1, current_y].walls[3] = false

        # Add the other cell to the visited cells list
        visitedCells.add(maze[current_x + 1, current_y])

        # Set the current cell to be the new cell
        current_x += 1

      elif (index == 2 and current_y < n - 1) and not maze[current_x, current_y + 1] in visitedCells:
        # Remove the bottom wall of the current cell and top wall of the other cell
        maze[current_x, current_y].walls[2] = false
        maze[current_x, current_y + 1].walls[0] = false

        # Add the other cell to the visited cells list
        visitedCells.add(maze[current_x, current_y + 1])

        # Set the current cell to be the new cell
        current_y += 1

      elif (index == 3 and current_x > 0) and not maze[current_x - 1, current_y] in visitedCells:
        # Remove the left wall of the current cell and right wall of the other cell
        maze[current_x, current_y].walls[3] = false
        maze[current_x - 1, current_y].walls[1] = false

        # Add the other cell to the visited cells list
        visitedCells.add(maze[current_x - 1, current_y])

        # Set the current cell to be the new cell
        current_x -= 1

  # Return the generated maze
  result = maze

# Function to print the maze in a human-readable format
proc printMaze(maze: Cell[n, n]) =
  echo "----Printing Maze----"

  # Loop through each cell in the maze
  for y in 0 .. maze.high:
    var top, middle, bottom: string = "|", "|", "|"

    for x in 0 .. maze.high:
      # Check if the current cell's top wall is present
      if maze[x, y].walls[0]:
        top.add("---|") # Add a top wall if present
      else:
        top.add("   |") # Add a space instead of a top wall

      # Check if the current cell's right wall is present
      if maze[x, y].walls[1]:
        middle.add("   |") # Add a right wall if present
      else:
        middle.add("    ") # Add a space instead of a right wall

      # Check if the current cell's bottom wall is present
      if maze[x, y].walls[2]:
        bottom.add("   |") # Add a bottom wall if present
      else:
        bottom.add("   ") # Add a space instead of a bottom wall

      # Add a left wall for the first cell in each row
      if x == 0:
        middle.add("|")

    # Print out the current row
    echo top
    echo middle
    echo bottom

  # Add a bottom row of walls for the last row in the maze
  for x in 0 .. maze.high:
    if x == 0:
      echo "+"
    echo "---+"

# Generate a 15 x 15 maze and print it
var maze = generateMaze(15)
printMaze(maze)