# Nim program to generate all possible combinations of a list of numbers

# Global variable to store all the combinations
var combinations: seq[seq[int]]

# Function to generate combinations recursively
proc generateCombos(input: seq[int], output: seq[int]) =
  if input.len == 0:
    # Base case: when input is empty, append output to combinations list
    combinations.add(output)

  else:
    # Recursive case: generate combos by including first element of input and excluding it
    var tempInput = input
    output.add(tempInput[0])
    # Call the function recursively for remaining elements of input
    generateCombos(tempInput[1..^0], output)
    # Remove previously included element from output
    output.del(output.len-1)
    # Call the function recursively without including the first element
    generateCombos(tempInput[1..^0], output)

# Function to print all the generated combinations
proc printCombinations() =
  echo "Generated combinations:"
  for combo in combinations:
    echo combo

# Driver code
let input: seq[int] = @[-1, 5, 3, 10]
var output: seq[int] = @[]
# Generate combinations using the input list and empty output list
generateCombos(input, output)
# Print all the generated combinations
printCombinations()