## Tic-Tac-Toe game in NIM ##

var table = newTable(3, 3, 0)           # create game board
var turn = 1                           # tracks player's turn
var gameOver = false                   # tracks if game is over

while not gameOver:                    # loop until game is over
  echo "Player " & turn & "'s turn" # display player's turn
  let (row, col) = getUserInput()    # get user input for move
  if table[row, col] == 0:           # check if move is valid
    table[row, col] = turn           # place player's move on board
    if checkWin(table, turn):        # check if player has won
      gameOver = true                # end game if player has won
    else:
      turn = turn xor 2               # switch turns for next player
  else:
    echo "Invalid move"              # display error for invalid move

if checkTie(table):                   # check if game is a tie
  echo "Game over: Tie!"              
else:                                 # otherwise, declare winner
  echo "Game over: Player " & turn & " wins!"

# Function to check for a win
proc checkWin(table: Table, player: int): bool =
  var horizontal = false                # tracks horizontal win
  var vertical = false                  # tracks vertical win
  var diagonal = false                  # tracks diagonal win
  for row in 0 ..< table.len[0]:        # loop through rows
    if table[row, 0] == player and table[row, 1] == player and table[row, 2] == player:
      horizontal = true
  for col in 0 ..< table.len[1]:        # loop through columns
    if table[0, col] == player and table[1, col] == player and table[2, col] == player:
      vertical = true
  if table[0, 0] == player and table[1, 1] == player and table[2, 2] == player:
    diagonal = true
  if table[2, 0] == player and table[1, 1] == player and table[0, 2] == player:
    diagonal = true
  return horizontal or vertical or diagonal # return true if any win is found

# Function to check for a tie
proc checkTie(table: Table): bool =
  for row in 0 ..< table.len[0]:        # loop through rows
    for col in 0 ..< table.len[1]:      # loop through columns
      if table[row, col] == 0:          # check if any open spaces left
        return false                    # game is not over yet
  return true                           # otherwise, return true for tie

# Function to get user input
proc getUserInput(): (row: int, col: int) =
  var row: int                          # tracks user's chosen row
  var col: int                          # tracks user's chosen column
  while true:                           # loop until valid input received
    echo "Choose row (1-3): "
    row = readLine(parseInt) - 1        # read in user's row choice
    if 0 <= row < 3:                    # check if row is valid
      break                             # exit loop if valid
    else:
      echo "Invalid input. Try again."
  while true:                           # same process for column
    echo "Choose column (1-3): "
    col = readLine(parseInt) - 1
    if 0 <= col < 3:
      break
    else:
      echo "Invalid input. Try again."
  return (row, col)                     # return user's chosen coordinates