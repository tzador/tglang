# This code snippet generates a hexagonal grid with alternating colors
# and uses a two-dimensional array to store the grid

# create a function to initialize the grid
proc initGrid(x, y: int): array[0..x, 0..y, bool] =
    # create an empty 2d array
    var grid: array[0..x, 0..y, bool]
    # loop through rows
    for i in 0..x:
        # loop through columns
        for j in 0..y:
            # if both row and column are even or odd, assign true
            if i mod 2 = 0 and j mod 2 = 0 or i mod 2 = 1 and j mod 2 = 1:
                grid[i, j] = true
            # otherwise assign false
            else:
                grid[i, j] = false
    # return the grid
    return grid

# function to print out the grid in hexagonal shape
proc printGrid(grid: array[0.., 0.., bool]) =
    # loop through rows
    for i in 0..grid.high[0]:
        # loop through columns
        for j in 0..grid.high[1]:
            # if current position is true, print hexagon with first color
            if grid[i, j]:
                echo " \u25C6"
            # otherwise print hexagon with second color
            else:
                echo " \u25C4"
        # add a new line after each row is completed
        echo ""

# main program
# initialize the grid with size 10x10
var grid = initGrid(10, 10)
# print out the grid
printGrid(grid)