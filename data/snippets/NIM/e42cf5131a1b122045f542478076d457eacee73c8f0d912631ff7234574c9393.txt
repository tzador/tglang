type
    Queue[T] = object
        front, rear: Node[T]
        capacity, size: int

    Node[T] = ref object
        item: T
        next: Node[T]

proc initQueue[T](capacity: int): Queue[T] =
    result.front = nil
    result.rear = nil
    result.capacity = capacity
    result.size = 0

proc isEmpty[T](queue: Queue[T]): bool =
    return queue.size == 0

proc isFull[T](queue: Queue[T]): bool =
    return queue.size == queue.capacity

proc enqueue[T](queue: var Queue[T], item: T) =
    if isFull(queue):
        discard $"Queue is full. Cannot add item: {item}"
    elif queue.front == nil:
        queue.front = new Node[T](item: item)
        queue.rear = queue.front
    else:
        queue.rear.next = new Node[T](item: item)
        queue.rear = queue.rear.next
    inc(queue.size)

proc dequeue[T](queue: var Queue[T]): T =
    if isEmpty(queue):
        discard "Queue is empty. Cannot dequeue."
    var item: T = queue.front.item
    var temp = queue.front
    queue.front = queue.front.next
    dec(queue.size)
    return item