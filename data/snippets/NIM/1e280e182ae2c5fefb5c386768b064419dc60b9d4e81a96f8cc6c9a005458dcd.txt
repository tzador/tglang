import strformat # Importing the strformat module
 
const message = "Hello World!" # Creating a constant variable with a string value
 
var name: string = getUserInput(message) # Prompting the user to enter their name
 
echo "Welcome to the world of NIM, " & name & "!" # Concatenating the user's name to the end of the welcome message
 
when isWhitespace(message): # Checking if the message contains any whitespace characters
 
  echo "The message contains whitespace." # Printing a message if whitespace characters are present
 
else:
 
  echo "No whitespace found." # Printing a message if no whitespace characters are present
 
var reversedMessage: string = reverseStr(message) # Reversing the characters in the message
 
echo reversedMessage # Printing the reversed message
 
type
  CustomeType = object # Defining a custom type called "CustomType" using the 'object' keyword
    name: string
    age: int
    address: string
  end
 
var myCustomObject = CustomeType(name: "John", age: 25, address: "1234 Main Street") # Creating an instance of our custom type
 
echo fmt"{myCustomObject.name}'s age is {myCustomObject.age} and they live at {myCustomObject.address}" # Using string formatting to display the values of our custom object
 
proc binarySearch(nums: seq[int], target: int): int = # Creating a procedure called "binarySearch" that takes in a sequence of integers and a target value as parameters and returns an integer
  var minIdx = 0 # Variable to store the minimum index
  var maxIdx = len(nums) - 1 # Variable to store the maximum index
  while minIdx <= maxIdx:
    var midIdx = (minIdx + maxIdx) / 2 # Finding the middle index
    if nums[midIdx] == target: # Checking if the middle element is equal to the target
      return midIdx # Returning the index of the target
    elif nums[midIdx] < target: # Checking if the middle element is less than the target
      minIdx = midIdx + 1 # Setting the new minimum index to the element after the middle element
    else: # If the middle element is greater than the target
      maxIdx = midIdx - 1 # Setting the new maximum index to the element before the middle element
  return -1 # If the target is not found, return -1
 
var numbers = @[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Creating a sequence of numbers
var target = 6 # Defining the target value
var result = binarySearch(numbers, target) # Calling the binarySearch procedure with the sequence of numbers and the target value
echo "The index of the target value is " & $result & "." # Printing the index of the target value