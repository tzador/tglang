/*This code snippet demonstrates a binary search tree data structure in VALA programming language*/
  
/*Class that defines the tree node with left and right child nodes*/
class Node {
	int data; //Data stored in the node
	Node left; //Left child node
	Node right; //Right child node
	
	/*Constructor to initialize the node with given data*/
	public Node(int d) {
		this.data = d;
		this.left = null;
		this.right = null;
	}
}

/*Class that defines the binary search tree data structure*/
class BST {
	Node root; //Root node of the tree
	
	/*Constructor to initialize an empty tree*/
	public BST() {
		this.root = null;
	}
	
	/*Method to insert a node in the tree*/
	public void insert(int data) {
		this.root = insertRec(this.root, data); //Call the recursive insert function
	}
	
	/*Method to recursively insert a node in the tree*/
	private Node insertRec(Node current, int data) {
		if(current == null) { //If tree/subtree is empty, create a new node at that position
			return new Node(data);
		}
		if(data < current.data) { //If data is smaller than current node, insert in the left subtree
			current.left = insertRec(current.left, data);
		}
		else if(data > current.data) { //If data is larger than current node, insert in the right subtree
			current.right = insertRec(current.right, data);
		}
		return current;
	}
	
	/*Method to search for a specific node in the tree*/
	public boolean search(int data) {
		return searchRec(this.root, data); //Call the recursive search function
	}
	
	/*Method to recursively search for a node in the tree*/
	private boolean searchRec(Node current, int data) {
		if(current == null) { //Node not found, return false
			return false;
		}
		if(data == current.data) { //Node found, return true
			return true;
		}
		if(data < current.data) { //If data is smaller than current node, search in the left subtree
			return searchRec(current.left, data);
		}
		else { //If data is larger than current node, search in the right subtree
			return searchRec(current.right, data);
		}
	}
	
	/*Method to delete a node from the tree*/
	public void delete(int data) {
		this.root = deleteRec(this.root, data); //Call the recursive delete function
	}
	
	/*Method to recursively delete a node from the tree*/
	private Node deleteRec(Node current, int data) {
		if(current == null) { //Node not found, do not delete anything
			return null;
		}
		if(data < current.data) { //If data is smaller than current node, delete from the left subtree
			current.left = deleteRec(current.left, data);
		}
		else if(data > current.data) { //If data is larger than current node, delete from the right subtree
			current.right = deleteRec(current.right, data);
		}
		else { //If data is equal to current node's data
			if(current.left == null) { //Case 1: Node has no left child
				return current.right; //Return right child as the new root of this subtree
			}
			else if(current.right == null) { //Case 2: Node has no right child
				return current.left; //Return left child as the new root of this subtree
			}
			//Case 3: Node has two children
			//Find the minimum value of the right subtree and replace current node's data with it
			current.data = findMin(current.right);
			//Delete the minimum value node from the right subtree
			current.right = deleteRec(current.right, current.data);
		}
		return current;
	}
	
	/*Method to find the minimum value in a subtree*/
	private int findMin(Node current) {
		int min = current.data;
		while(current.left != null) { //Minimum value will be the leftmost node
			min = current.left.data;
			current = current.left;
		}
		return min;
	}
}