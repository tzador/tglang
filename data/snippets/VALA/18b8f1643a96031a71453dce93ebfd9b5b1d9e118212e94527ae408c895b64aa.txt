using GLib;
using Gtk;

/** A custom class that represents a person */
class Person : Object {
    /** The person's name */
    private string name;
    /** The person's age */
    private int age;
    
    /** A constructor for the Person class */
    public Person(string name, int age) {
        this.name = name;
        this.age = age;
    }

    /** A method to print out the person's name and age */
    public void print_person_details() {
        stdout.printf("Name: %s\nAge: %i\n", name, age);
    }

    /** A property to access and modify the person's age */
    public int Age { get; set; default = age; }

    /** A signal to emit when the person's age is modified */
    [Signal]
    public delegate void AgeChanged();

    /** A property to access and modify the person's name */
    public string Name { get; set; default = name; }

    /** A signal to emit when the person's name is modified */
    [Signal]
    public delegate void NameChanged();

    /** A method to check if the person is old enough to vote */
    public bool can_vote() {
        return (age >= 18);
    }
}

/** An application class to run the program */
class Application : Gtk.Window {
    /** A method to create the UI of the application */
    public void create_ui() {
        // Create a vertical box to hold all the widgets
        var box = new Gtk.VBox();

        // Create a label widget to display instructions
        var label = new Gtk.Label("Enter Name:");

        // Create an entry widget to input the person's name
        var name_entry = new Gtk.Entry();

        // Create a button to add the person to the list
        var add_button = new Gtk.Button.with_label("Add Person");

        // Create a list store to hold the person objects
        var list_store = new Gtk.ListStore(typeof(Person));

        // Create a tree view to display the list of people
        var tree_view = new Gtk.TreeView.with_model(list_store);

        // Create 3 columns to display the person's name, age, and voting eligibility
        var name_column = new Gtk.TreeViewColumn();
        var age_column = new Gtk.TreeViewColumn();
        var can_vote_column = new Gtk.TreeViewColumn();

        // Create cell renderers for each column
        var name_cell = new Gtk.CellRendererText();
        var age_cell = new Gtk.CellRendererText();
        var can_vote_cell = new Gtk.CellRendererText();

        // Add the cell renderers to the respective columns
        name_column.pack_start(name_cell, true);
        age_column.pack_start(age_cell, true);
        can_vote_column.pack_start(can_vote_cell, true);

        // Set the attributes of each column to display the person's information
        name_column.set_attributes(name_cell, "text", 1);
        age_column.set_attributes(age_cell, "text", 2);
        can_vote_column.set_attributes(can_vote_cell, "text", 3);

        // Add the columns to the tree view
        tree_view.append_column(name_column);
        tree_view.append_column(age_column);
        tree_view.append_column(can_vote_column);

        // Connect the add button's clicked signal to a function
        add_button.clicked.connect(() => {
            // Get the person's name from the entry widget
            string name = name_entry.get_text();
            // Generate a random age between 18 and 70
            int age = Random.range(18, 70);

            // Create a new instance of the Person class with the name and age
            var person = new Person(name, age);

            // Add the person to the list store
            list_store.append(person);

            // Clear the entry widget
            name_entry.set_text("");
        });

        // Add all the widgets to the vertical box
        box.pack_start(label, false, false, 0);
        box.pack_start(name_entry, false, false, 0);
        box.pack_start(add_button, false, false, 0);
        box.pack_start(tree_view, true, true, 0);

        // Add the vertical box to the application's window
        this.add(box);

        // Display the window and all its widgets
        this.show_all();
    }

    /** A main function to run the application */
    public static int main(string[] args) {
        // Initialize the Gtk library
        Gtk.init(ref args);

        // Create a new instance of the application window
        var app = new Application();

        // Create the UI
        app.create_ui();

        // Start the Gtk main loop
        Gtk.main();

        // Terminate the application
        return 0;
    }
}

// Call the main function to run the application
Application.main(args);