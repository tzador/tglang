/* This code snippet creates a binary search tree and performs different operations on it */
// Define a node for the binary search tree
class Node {
    public int value;
    public Node left;
    public Node right;
    
    // Constructor
    public Node(int val) {
        value = val;
        left = right = null;
    }
}

// Define a class for the binary search tree
class BST {
    Node root;
    
    // Constructor
    public BST() {
        root = null;
    }
    
    // Function to insert a new node into the binary search tree
    public void insert(int val) {
        Node new_node = new Node(val);
        // If the tree is empty, make the new node the root
        if (root == null) {
            root = new_node;
        }
        else {
            Node current = root;
            Node parent;
            while (true) {
                // Set the parent node to the current node
                parent = current;
                // If the value is less than the current node
                if (val < current.value) {
                    // Move to the left child
                    current = current.left;
                    // If the left child is null, insert the new node as the left child of the parent node
                    if (current == null) {
                        parent.left = new_node;
                        return;
                    }
                } 
                // If the value is greater than the current node
                else {
                    // Move to the right child
                    current = current.right;
                    // If the right child is null, insert the new node as the right child of the parent node
                    if (current == null) {
                        parent.right = new_node;
                        return;
                    }
                }
            }
        }
    }
    
    // Function to search for a value in the binary search tree
    public bool search(int val) {
        // Start at the root node
        Node current = root;
        // Continue searching until the current node is null
        while (current != null) {
            // If the desired value is found, return true
            if (current.value == val) {
                return true;
            }
            // If the desired value is less than the current node, move to the left child
            else if (val < current.value) {
                current = current.left;
            }
            // If the desired value is greater than the current node, move to the right child
            else {
                current = current.right;
            }
        }
        // If the desired value is not found, return false
        return false;
    }
    
    // Function to delete a node from the binary search tree
    public void delete(int val) {
        // Start at the root node
        Node current = root;
        // Set the parent node as null
        Node parent = null;
        // Create a boolean variable to keep track of whether the node to be deleted is the left or right child of its parent
        bool is_left_child = false;
        // Search for the node to be deleted
        while (current != null) {
            // If the desired value is found, break out of the loop
            if (current.value == val) {
                break;
            }
            // Set the parent node to the current node
            parent = current;
            // If the desired value is less than the current node, move to the left child and set the boolean variable to true
            if (val < current.value) {
                current = current.left;
                is_left_child = true;
            }
            // If the desired value is greater than the current node, move to the right child and set the boolean variable to false
            else {
                current = current.right;
                is_left_child = false;
            }
        }
        // If the desired value is not found, return
        if (current == null) {
            return;
        }
        // If the node to be deleted has no children
        if (current.left == null && current.right == null) {
            // If the node to be deleted is the root node, set the root as null
            if (current == root) {
                root = null;
            }
            // If the node to be deleted is the left child of the parent node, set the left child as null
            else if (is_left_child) {
                parent.left = null;
            }
            // If the node to be deleted is the right child of the parent node, set the right child as null
            else {
                parent.right = null;
            }
            // Return
            return;
        }
        // If the node to be deleted has only one child
        if (current.right == null) {
            // If the node to be deleted is the root node, set the root as the left child
            if (current == root) {
                root = current.left;
            }
            // If the node to be deleted is the left child of the parent node, set the left child of the parent as the left child of the current node
            else if (is_left_child) {
                parent.left = current.left;
            }
            // If the node to be deleted is the right child of the parent node, set the right child of the parent as the left child of the current node
            else {
                parent.right = current.left;
            }
            // Return
            return;
        }
        // If the node to be deleted has only one child
        else if (current.left == null) {
            // If the node to be deleted is the root node, set the root as the right child
            if (current == root) {
                root = current.right;
            }
            // If the node to be deleted is the left child of the parent node, set the left child of the parent as the right child of the current node
            else if (is_left_child) {
                parent.left = current.right;
            }
            // If the node to be deleted is the right child of the parent node, set the right child of the parent as the right child of the current node
            else {
                parent.right = current.right;
            }
            // Return
            return;
        }
        // If the node to be deleted has two children
        else {
            // Find the successor of the node to be deleted, i.e. the smallest value in the right subtree
            Node successor = get_successor(current);
            // If the node to be deleted is the root node, set the successor as the root node
            if (current == root) {
                root = successor;
            }
            // If the node to be deleted is the left child of the parent node, set the successor as the left child of the parent node
            else if (is_left_child) {
                parent.left = successor;
            }
            // If the node to be deleted is the right child of the parent node, set the successor as the right child of the parent node
            else {
                parent.right = successor;
            }
            // Set the successor's left child as the left child of the node to be deleted
            successor.left = current.left;
        }
    }
    
    // Function to find the successor of a node
    public Node get_successor(Node node) {
        // Set the successor node as the right child of the given node
        Node successor_parent = node;
        Node successor = node.right;
        Node current = node.right;
        // Loop until the successor is the leftmost child of the subtree
        while (current != null) {
            successor_parent = successor;
            successor = current;
            current = current.left;
        }
        // If the successor is not the right child of the given node
        if (successor != node.right) {
            // Set the left child of the successor's parent as the right child of the successor
            successor_parent.left = successor.right;
            // Set the right child of the successor as the right child of the node to be deleted
            successor.right = node.right;
        }
        // Return the successor
        return successor;
    }
    
    // Function to print the binary search tree in-order
    public void print_inorder(Node node) {
        // Base case
        if (node == null) {
            return;
        }
        // Recursive call to the left child
        print_inorder(node.left);
        // Print the value of the current node
        print(node.value + " ");
        // Recursive call to the right child
        print_inorder(node.right);
    }
    
    // Function to print the binary search tree pre-order
    public void print_preorder(Node node) {
        // Base case
        if (node == null) {
            return;
        }
        // Print the value of the current node
        print(node.value + " ");
        // Recursive call to the left child
        print_preorder(node.left);
        // Recursive call to the right child
        print_preorder(node.right);
    }
    
    // Function to print the binary search tree post-order
    public void print_postorder(Node node) {
        // Base case
        if (node == null) {
            return;
        }
        // Recursive call to the left child
        print_postorder(node.left);
        // Recursive call to the right child
        print_postorder(node.right);
        // Print the value of the current node
        print(node.value + " ");
    }
}

int main() {
    // Create a new binary search tree
    BST bst = new BST();
    // Insert nodes with different values into the binary search tree
    bst.insert(5);
    bst.insert(2);
    bst.insert(3);
    bst.insert(7);
    bst.insert(1);
    // Print the binary search tree in order
    print("In-order traversal: ");
    bst.print_inorder(bst.root);
    print("\n");
    // Print the binary search tree pre-order
    print("Pre-order traversal: ");
    bst.print_preorder(bst.root);
    print("\n");
    // Print the binary search tree post-order
    print("Post-order traversal: ");
    bst.print_postorder(bst.root);
    print("\n");
    // Search for a value in the binary search tree
    int search_value = 5;
    if (bst.search(search_value)) {
        print(search_value + " is present in the binary search tree.");
    }
    else {
        print(search_value + " is not present in the binary search tree.");
    }
    // Delete a node from the binary search tree
    int delete_value = 3;
    bst.delete(delete_value);
    print("\n");
    // Print the binary search tree in order after deletion
    print("In-order traversal after deleting " + delete_value + ": ");
    bst.print_inorder(bst.root);
    print("\n");
    // Print the binary search tree pre-order after deletion
    print("Pre-order traversal after deleting " + delete_value + ": ");
    bst.print_preorder(bst.root);
    print("\n");
    // Print the binary search tree post-order after deletion
    print("Post-order traversal after deleting " + delete_value + ": ");
    bst.print_postorder(bst.root);
    print("\n");
    
    return 0;
}