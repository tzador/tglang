/*
This code snippet creates a custom linked list data structure in VALA.
It includes functions for adding, removing, and traversing through the list.
*/

// Define the Node class for each element in the list
public class Node {
    public string data; // data stored in the node
    public Node next; // pointer to next node in the list
    public Node(string data) { // constructor
        this.data = data;
        next = null;
    }
}

// Define the List class for managing the linked list
public class List {
    private Node head; // pointer to the first element in the list

    // Constructor, initializes an empty list
    public List() {
        head = null;
    }

    // Function for adding a node at the front of the list
    public void add_front(string data) {
        var node = new Node(data); // create new node with given data
        if (head != null) { // if list is not empty
            node.next = head; // make new node point to current head
        }
        head = node; // update head to point to new node
    }

    // Function for adding a node at the end of the list
    public void add_back(string data) {
        var node = new Node(data);
        if (head == null) { // if list is empty
            head = node; // new node becomes the head
        }
        else {
            var current = head;
            while (current.next != null) { // traverse to last node
                current = current.next;
            }
            current.next = node; // make last node point to new node
        }
    }

    // Function for removing a node from the list
    public void remove(string data) {
        if (head.data == data) { // if node to be removed is the head
            head = head.next; // update head to next node
        }
        else {
            var current = head;
            while (current.next != null) { // loop through list
                if (current.next.data == data) { // if next node's data is equal to data to be removed
                    current.next = current.next.next; // update pointer to skip over next node
                    break;
                }
                current = current.next;
            }
        }
    }

    // Function for getting the size of the list
    public int size() {
        var count = 0;
        var current = head;
        while (current != null) { // loop through list
            count++; // increase counter for each node
            current = current.next;
        }
        return count;
    }

    // Function for printing the list
    public void print() {
        var current = head;
        while (current != null) { // loop through list
            print(current.data); // print node's data
            current = current.next;
        }
    }
}

// Example usage
void main() {
    var list = new List();
    list.add_front("hello");
    list.add_back("world");
    list.add_back("!");
    list.print(); // output: hello world !
    list.remove("world");
    list.print(); // output: hello !
    print("List size: " + list.size()); // output: List size: 2
}