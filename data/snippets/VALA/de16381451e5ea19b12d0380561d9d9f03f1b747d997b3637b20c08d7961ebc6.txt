[indent=4]
[Compact]

/** 
 This is a complex code snippet in VALA, showcasing various data types
 and control structures. 
*/

/* Importing necessary libraries */
using GLib;
using Gtk;

/* Defining a custom class */
public class CustomClass : Object {
    /* Private variables */
    private int num1;
    private string str1;
    private float flo1;

    /* Constructor */
    public CustomClass (int n, string s, float f) {
        // Set private variables with given values
        num1 = n;
        str1 = s;
        flo1 = f;
    }

    /* Public method to display the values */
    public void display_values() {
        // Print out the values of the private variables
        print ("Number: %d\n", num1);
        print ("String: %s\n", str1);
        print ("Float: %f\n", flo1);
    }
}

/*
  Main function to demonstrate the use of the custom class
  and other data types and control structures 
*/
public static int main(string[] args) {
    // Initialize a new custom object with specific values
    var my_object = new CustomClass(10, "Hello", 5.6);

    // Print out some text
    print ("Welcome to this VALA code snippet!\n");

    // Use a for loop to iterate 10 times and display current iteration
    for (int i = 0; i < 10; i++) {
        print ("Current iteration: %d\n", i);
    }

    // Use an if/else statement to check if flo1 is greater than 10
    if (my_object.flo1 > 10) {
        print ("Flo1 is greater than 10!\n");
    } else {
        print ("Flo1 is less than or equal to 10!\n");
    }

    // Use a switch statement to check different cases
    switch (my_object.str1) {
        case "Hello":
            print ("The string is 'Hello'!\n");
            break;
        case "World":
            print ("The string is 'World'!\n");
            break;
        default:
            print ("The string is neither 'Hello' nor 'World'!\n");
    }

    // Use a while loop to display num1 until it reaches 20
    while (my_object.num1 < 20) {
        print ("Current num1 value: %d\n", my_object.num1);
        my_object.num1++;
    }

    // Call the public method of the custom class to display values
    my_object.display_values();

    return 0;
}