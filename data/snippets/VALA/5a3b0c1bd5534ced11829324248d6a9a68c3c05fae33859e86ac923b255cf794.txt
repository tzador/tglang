/*
This is a complex code snippet in VALA that checks if a given string is a palindrome.
A palindrome is a word, phrase, or sequence that reads the same backward as forward.
*/

// Define a function that takes in a string and checks if it is a palindrome
bool is_palindrome(string input) {

    // Store the length of the string
    int len = input.length;

    // Initialize two pointers, one pointing to the first character and another to the last character
    int i = 0;
    int j = len - 1;

    // Loop through the string until the two pointers meet or cross each other
    while (i < j) {

        // Compare the characters at the two pointers
        if (input[i] != input[j]) {

            // If they are not equal, the string is not a palindrome, return false
            return false;
        }

        // Update the pointers to compare the next pair of characters
        i++;
        j--;
    }

    // If the loop completes without returning false, the string is a palindrome, return true
    return true;
}

// Define a main function to test the is_palindrome() function with different input strings
int main(string[] args) {

    // Test input strings
    string str1 = "racecar";
    string str2 = "hello";
    string str3 = "aba";
    string str4 = "palindrome";

    // Call the is_palindrome() function on each input string and print the results
    print("%s is a palindrome? %s\n", str1, is_palindrome(str1) ? "true" : "false");
    print("%s is a palindrome? %s\n", str2, is_palindrome(str2) ? "true" : "false");
    print("%s is a palindrome? %s\n", str3, is_palindrome(str3) ? "true" : "false");
    print("%s is a palindrome? %s\n", str4, is_palindrome(str4) ? "true" : "false");

    // Output:
    // racecar is a palindrome? true
    // hello is a palindrome? false
    // aba is a palindrome? true
    // palindrome is a palindrome? false
}