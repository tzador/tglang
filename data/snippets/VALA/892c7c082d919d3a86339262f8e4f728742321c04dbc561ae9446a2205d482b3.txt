// This code snippet generates a binary search tree and performs an in-order traversal
// to print out its elements in sorted order

// Class representing a node in the binary search tree
class BinarySearchTree.Node<T> {

    public T data; // data value of the node
    public BinarySearchTree.Node<T> left; // left child of the node
    public BinarySearchTree.Node<T> right; // right child of the node

    public Node(T data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

// Class representing a binary search tree
class BinarySearchTree<T> {

    private Node<T> root; // root node of the tree

    // Constructor for initializing the tree with a root node
    public BinarySearchTree(T data) {
        this.root = new Node<T>(data);
    }

    // Method to insert a new node into the tree
    public void insert(T data) {
        Node<T> node = new Node<T>(data);
        Node<T> current = root;
        Node<T> parent = null;

        // Traverse the tree until current becomes null
        while (current != null) {
            parent = current;
            
            // If data is less than current, go to left subtree
            if (data < current.data) {
                current = current.left;
            
            // If data is greater than current, go to right subtree
            } else if (data > current.data) {
                current = current.right;
            
            // If data is equal to current, node already exists
            } else {
                return;
            }
        }
        // Set the parent's child to the new node
        if (data < parent.data) {
            parent.left = node;
        } else {
            parent.right = node;
        }
    }

    // Method to perform in-order traversal and print out the elements in sorted order
    public void in_order(Node<T> node) {
        
        // Base case: if node is null (leaf node)
        if (node == null) {
            return;
        }
        
        // Recursive call for left subtree
        in_order(node.left);

        // Print out the data value of the current node
        print("%d ", node.data);
        
        // Recursive call for right subtree
        in_order(node.right); 
    }
}

// Example usage
void main() {
    // Initialize a binary search tree with root value of 5
    var tree = new BinarySearchTree<int>(5);

    // Insert new values into the tree
    tree.insert(2);
    tree.insert(7);
    tree.insert(1);
    tree.insert(9);
    tree.insert(3);

    // Print out the elements in sorted order
    tree.in_order(tree.root); // Output: 1 2 3 5 7 9
}