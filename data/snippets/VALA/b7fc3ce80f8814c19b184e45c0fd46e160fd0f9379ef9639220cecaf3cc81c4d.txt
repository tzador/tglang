/* This code snippet shows a complex bubble sort algorithm implemented in VALA */

/* Function to perform bubble sort on an array of integers */
void bubble_sort (int [] array, int size) {

    /* Declare variables for loop iterations and temporary value storage */
    int i, j, temp;

    /* Outer loop to traverse through the array */
    for (i = 0; i < size - 1; i++) {

        /* Inner loop to compare adjacent elements and swap if needed */
        for (j = 0; j < size - i - 1; j++) {
            
            /* If the current element is larger than the next element, swap them */
            if (array[j] > array[j+1]) {
                /* Store the current element in a temporary variable */
                temp = array[j];
                /* Swap the current element with the next element */
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}

/* Function to print the sorted array */
void print_array (int [] array, int size) {
    /* Declare loop variable */
    int i;
    /* Loop through the array and print each element */
    for (i = 0; i < size; i++) {
        print("%d ", array[i]);
    }
    print("\n"); // Print a new line after all elements have been printed
}

/* Main function */
int main () {

    /* Declare and initialize an array of integers */
    int [] numbers = {5, 2, 7, 10, 1};

    /* Print the unsorted array */
    print_array(numbers, 5);

    /* Call bubble_sort function to sort the array */
    bubble_sort(numbers, 5);

    /* Print the sorted array */
    print_array(numbers, 5);

    return 0;
}

/* Output:
5 2 7 10 1 
1 2 5 7 10 
*/