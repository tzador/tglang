// Create a queue data structure class
public class Queue<T> {
    // Define class variables
    private int size;
    private T[] queue;

    // Constructor
    public Queue(int max_size) {
        size = 0;
        queue = new T[max_size];
    }

    // Function to add element to the end of the queue
    public void enqueue(T element) {
        // Check if the queue is full
        if (size == queue.length) {
            stdout.printf("Error: Queue is full\n");
        } else {
            // Add element to the end of the queue
            queue[size] = element;
            // Increase size by 1
            size++;
        }
    }

    // Function to remove element from the front of the queue
    public T dequeue() {
        // Check if the queue is empty
        if (size == 0) {
            stdout.printf("Error: Queue is empty\n");
            return null;
        } else {
            // Get element from the front of the queue
            T element = queue[0];
            // Shift elements to the left
            for (int i = 0; i < size - 1; i++) {
                queue[i] = queue[i+1];
            }
            // Decrease size by 1
            size--;
            return element;
        }
    }

    // Function to get the size of the queue
    public int get_size() {
        return size;
    }
}

// Creating a new instance of the queue with a maximum size of 10
var my_queue = new Queue<int>(10);

// Adding 5 elements to the queue
my_queue.enqueue(1);
my_queue.enqueue(2);
my_queue.enqueue(3);
my_queue.enqueue(4);
my_queue.enqueue(5);

// Printing the size of the queue
stdout.printf("Size of queue is %d\n", my_queue.get_size());

// Removing 3 elements from the front of the queue
my_queue.dequeue();
my_queue.dequeue();
my_queue.dequeue();

// Printing the remaining elements in the queue
for (int i = 0; i < my_queue.get_size(); i++) {
    stdout.printf("%d\n", my_queue.dequeue());
}

// Output:
/*
Size of queue is 5
4
5
*/