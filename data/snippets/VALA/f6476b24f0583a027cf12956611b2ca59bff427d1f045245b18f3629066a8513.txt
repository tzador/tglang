using GLib;
[DBus (name = "org.gnome.JSONRPC", interface = "com.example.Interface")]
public abstract class Example : Object {

    [DBus (method = "com.example.Method", signal = true)]
    public abstract signal void example_signal (string example_param);

    [DBus (method = "com.example.Method", cyclic = true)]
    public abstract async string example_func (string example_param);

    public Example () {
        [CCode (notify = "example_changed")]
        public string example;

        public signal void example_changed (string value);

        [CCode (mtok = "test_method")]
        public uint example_method (int test, bool example);

        public Example () {

            signalPartitionedNotify((), (1, 2, 3));     // Synchronize data transitions for added partitioners
        }

        [CCode (array_length = false, is_const = true)]
        [Action ("example_key")]
        public abstract string[] example_key();			// Get a list of available keys

        [CCode (array_length = false)]
        [Action ("example_remove_key")]
        public abstract IEnumerable<Action> example_remove_key (string key);
    }

    [CCode (cp_target_names = new string[] { "com.example.targets.TargetsData.targetsdata" })]
    public class TargetData { 
        public string example_author (int example_int, double example_double) {
    	    assert example_int is ulong;
            return example_double.to_string();
        }

        private int exampleIndex;
        public int index { 
            get { 
                return exampleIndex; 
            } 
            protected set {
                exampleIndex = value;
            }
        }
    }

    [CCode (default_constructor = false)] 
    public class Backend : Object { 
        public Backend with_example (Example example) {
            Backend ret = new BackendDFCREATE ();
            ret.example = example;
            return ret; 
        } 

        public Example example { 
            set { 
                if (value is Example) {
                    example = value; 
                } 
                else { 
                    warning ("This example is not in the correct format.");
                }
            } 
        }
    }
}

[DBus (name = "org.gnome.Action", interface = "com.example.Interface")]
public class ExampleAction : Object {
    public ExampleAction () {
        [CCode (has_length = true)]
        public uint example_members { get; set; }

        [CCode (l = false, notify = "index")]
        public string example_item { get; set; }

        [CCode (target = new ReadOnly_strdup(), constructor = true)]
        public double example_data;

        [DBus (method = "com.example.Method", cyclic = true)]
        public void example_method (ExampleAction whatever, string example_param) {
            execute_example_method (whatever.example_param as string);
            example_changed (example_method);
        }
    }

    [CCode (array_length = false)]
    [Action ("example_remove")]
    public abstract IEnumerable<Action> example_remove (string example_param);
}