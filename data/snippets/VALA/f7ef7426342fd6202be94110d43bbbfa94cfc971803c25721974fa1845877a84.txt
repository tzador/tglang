public int[] merge_sort(int[] array, int size) {

    // Split array into two halves
    int mid = size / 2;
    int[] left = new int[mid];
    int[] right = new int[size - mid];

    // Copy data into left and right arrays
    for (int i = 0; i < mid; i++) {
        left[i] = array[i];
    }
    for (int j = mid; j < size; j++) {
        right[j - mid] = array[j];
    }

    // Recursive call to split the arrays further
    if (mid > 1) {
        left = merge_sort(left, mid);
    }
    if ((size - mid) > 1) {
        right = merge_sort(right, size - mid);
    }

    // Merge the sorted halves
    int i = 0, j = 0, k = 0;
    while (i < mid && j < (size - mid)) {
        if (left[i] < right[j]) {
            array[k] = left[i];
            i++;
        } else {
            array[k] = right[j];
            j++;
        }
        k++;
    }

    // Copy remaining elements from left and right subarrays
    while (i < mid) {
        array[k] = left[i];
        k++;
        i++;
    }
    while (j < (size - mid)) {
        array[k] = right[j];
        k++;
        j++;
    }
    
    // Return the sorted array
    return array;
}