/* This class implements a custom data structure called 'Stack' that stores integers */

public class Stack : GLib.Object {

    private int[] stack; // private array to store the elements of the stack
    private int top; // integer variable to keep track of the top element

    /* constructor method to initialize the stack with a given size */
    public Stack(int size) {
        stack = new int[size]; // initialize the stack array with the given size
        top = -1; // set top to -1 initially (empty stack)
    }

    /* method to push an element onto the stack */
    public void push(int element) {
        if (top == stack.length -1) { // check if stack is full
            stdout.printf("Stack Overflow!"); // print error message
        } else {
            top++; // increment top
            stack[top] = element; // add element to top of stack
        }
    }

    /* method to pop an element from the stack */
    public int pop() {
        if (top == -1) { // check if stack is empty
            stdout.printf("Stack Underflow!"); // print error message
        } else {
            int temp = stack[top]; // store top element in temp variable
            top--; // decrement top
            return temp; // return the popped element
        }
    }

    /* method to check if stack is empty */
    public bool isEmpty() {
        return (top == -1); // returns true if top is -1 (empty), false otherwise
    }

    /* method to print all elements of the stack */
    public void printStack() {
        for (int i = top; i >= 0; i--) { // loop through stack starting from top
            stdout.printf("Stack element at position %d is %d\n", i, stack[i]); // print element at current position
        }
    }
}

/* main function to test the Stack class */
public static int main(string[] args) {
    Stack myStack = new Stack(5); // initialize stack with size 5

    myStack.push(3); // push elements onto stack
    myStack.push(5);
    myStack.push(7);
    myStack.push(11);
    myStack.push(13);

    myStack.printStack(); // print all elements in the stack

    int popped = myStack.pop(); // pop an element from stack and store in variable
    stdout.printf("Popped element: %d\n", popped); // print popped element

    if (myStack.isEmpty()) { // check if stack is empty
        stdout.printf("Stack is empty.\n"); // print message
    } else {
        stdout.printf("Stack is not empty.\n"); // print message
    }

    return 0; // return 0 to indicate successful completion
}