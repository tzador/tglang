/*
    This is a complex code snippet in VALA, a programming language that
    combines the power of high-level languages with the flexibility of C.
    It is heavily inspired by the syntax of C# and aims to provide modern features
    for developers to write efficient and reliable code.

    This code snippet demonstrates the use of classes, interfaces, inheritance,
    and constructor overloading in VALA.

    Note: This code will not run as is, it is purely for example purposes.
*/

// Defining an interface with a method
interface Shape {
    abstract int getArea();
}

// Defining a class that implements the Shape interface
class Rectangle : Shape {
    // Class properties
    public int width;
    public int height;

    // Class constructor
    public Rectangle(int w, int h) {
        width = w;
        height = h;
    }

    // Interface method implementation
    public int getArea() {
        return width * height;
    }

    // Class method with constructor overloading
    // This allows for different ways to initialize a Rectangle object
    public void setDimensions(int w, int h) {
        width = w;
        height = h;
    }

    // Class method with constructor overloading
    // This allows for different ways to initialize a Rectangle object
    public void setDimensions(int size) {
        width = size;
        height = size;
    }
}

// Creating an instance of Rectangle
var myRectangle = new Rectangle(5, 10);

// Calling the getArea() method on myRectangle
var area = myRectangle.getArea();

// Printing the area of myRectangle
stdout.printf("The area of myRectangle is: %d", area);

/*
    Output:
    The area of myRectangle is: 50
*/