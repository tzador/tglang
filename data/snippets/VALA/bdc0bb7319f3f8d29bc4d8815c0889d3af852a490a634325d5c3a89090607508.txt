/* A class in VALA that creates a Binary Search Tree */

public class BST<T> {
    /* Variables */
    private Node root; // The root node of the BST
    private class Node {
        public T value; // Value of the node
        public Node left; // Left child node
        public Node right; // Right child node
        /* Constructor for creating nodes */
        public Node(T data) {
            value = data;
            left = null;
            right = null;
        }
    }

    /* Constructor for creating an empty BST */
    public BST() {
        root = null;
    }

    /* Method to insert a value into the BST */
    public void insert(T value) {
        root = insert_node(root, value);
    }

    /* Function to insert a node in the BST */
    private Node insert_node(Node node, T value) {
        /* If the current node is null, create a new node with the given value */
        if (node == null) {
            node = new Node(value);
        }
        /* If the value to be inserted is less than the node's value, insert it in the left subtree */
        else if (value < node.value) {
            node.left = insert_node(node.left, value);
        }
        /* If the value to be inserted is greater than or equal to the node's value, insert it in the right subtree */
        else {
            node.right = insert_node(node.right, value);
        }
        /* Return the updated node */
        return node;
    }

    /* Method to search for a value in the BST */
    public bool search(T value) {
	    return search_node(root, value);
    }

    /* Function to search for a node in the BST */
    private bool search_node(Node node, T value) {
        /* If the current node is null, the value does not exist in the BST */
        if (node == null) {
            return false;
        }
        /* If the value to be searched for is equal to the current node's value, return true */
        if (value == node.value) {
            return true;
        }
        /* If the value to be searched for is less than the current node's value, search in the left subtree */
        else if (value < node.value) {
            return search_node(node.left, value);
        }
        /* If the value to be searched for is greater than the current node's value, search in the right subtree */
        else {
            return search_node(node.right, value);
        }
    }

    /* Method to delete a value from the BST */
    public void delete(T value) {
        root = delete_node(root, value);
    }

    /* Function to delete a node from the BST */
    private Node delete_node(Node node, T value) {
        /* If the current node is null, the value does not exist in the BST */
        if (node == null) {
            return node;
        }
        /* If the value to be deleted is less than the current node's value, go to the left subtree */
        else if (value < node.value) {
            node.left = delete_node(node.left, value);
        }
        /* If the value to be deleted is greater than the current node's value, go to the right subtree */
        else if (value > node.value) {
            node.right = delete_node(node.right, value);
        }
        /* If the value to be deleted is equal to the current node's value, delete that node */
        else {
            /* If the node has no child nodes, simply set it to null */
            if (node.left == null && node.right == null) {
                node = null;
            }
            /* If the node has only one child node, set its parent node to point to that child node */
            else if (node.left == null) {
                node = node.right;
            }
            else if (node.right == null) {
                node = node.left;
            }
            /* If the node has two child nodes, find the minimum value in the right subtree and replace the current node's value with it */
            else {
                Node min_right = find_min(node.right);
                node.value = min_right.value;
                /* Delete the minimum value node from the right subtree */
                node.right = delete_node(node.right, min_right.value);
            }
        }
        /* Return the updated node */
        return node;
    }

	/* Method to find the minimum value node in a subtree */
    private Node find_min(Node node) {
        /* If there are no more left child nodes, the current node is the minimum value node */
        if (node.left == null) {
            return node;
        }
        /* Recursively check for the minimum value node in the left subtree */
        return find_min(node.left);
    }

    /* Method to get the size of the BST */
    public int size() {
        return size_node(root);
    }

    /* Function to get the size of a subtree */
    private int size_node(Node node) {
        if (node == null) {
            /* If the node is null, the subtree has size zero */
            return 0;
        }
        /* Size is equal to size of left subtree + size of right subtree + 1 (for the current node) */
        else {
            return size_node(node.left) + size_node(node.right) + 1;
        }
    }

    /* Method to print the BST in order */
    public void print() {
        print_tree(root);
    }

    /* Function to print the BST in order */
    private void print_tree(Node node) {
        /* If the current node is null, there are no more nodes to print */
        if (node == null) {
            return;
        }
        /* Print the values of the left subtree first */
        print_tree(node.left);
        /* Print the value of the current node */
        print("%d ", node.value);
        /* Print the values of the right subtree */
        print_tree(node.right);
    }
}