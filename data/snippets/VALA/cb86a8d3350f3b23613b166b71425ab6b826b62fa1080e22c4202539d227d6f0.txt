// This program generates a sequence of numbers based on a recursive formula
/*
This code snippet implements the Collatz conjecture, also known as the 3n+1 problem, in VALA. It takes a starting number as input and generates a sequence of numbers by applying the following formula: if the number is even, divide it by 2. If the number is odd, multiply it by 3 and add 1.
*/

// Create a class called "Collatz"
class Collatz{

    // Define a function called "generate_sequence" that takes an integer as input and returns a list of integers
    public List<int> generate_sequence(int starting_number){

        // Create an empty list to store the sequence
        List<int> sequence = new List<int>();

        // Add the starting number to the sequence
        sequence.add(starting_number);

        // Define a variable "current_number" and set it equal to the starting number
        int current_number = starting_number;

        // Loop until the current number reaches 1
        while(current_number != 1){

            // If the current number is even, divide it by 2 and add it to the sequence
            if(current_number % 2 == 0){
                current_number = current_number / 2;
                sequence.add(current_number);
            }
            // If the current number is odd, multiply it by 3 and add 1 and add it to the sequence
            else{
                current_number = (current_number * 3) + 1;
                sequence.add(current_number);
            }
        }

        // return the sequence
        return sequence;
    }
}

// Create an instance of the Collatz class
var collatz = new Collatz();

// Call the generate_sequence function with starting number 20 and store the result in a variable called "result"
var result = collatz.generate_sequence(20);

// Print the sequence to the console using a for loop
for(int i = 0; i < result.size; i++){
    print("%d ", result[i]);
}

// Output: 20 10 5 16 8 4 2 1