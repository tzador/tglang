// define an abstract base class
public abstract class Shape {
    // private fields
    private string name;
    private int sides;

    // property for private fields
    public string Name {
        get { return name; }
        set { name = value; }
    }

    public int Sides {
        get { return sides; }
        set { sides = value; }
    }

    // constructor
    public Shape(string name, int sides) {
        this.name = name;
        this.sides = sides;
    }

    // abstract method to calculate area
    public abstract int calculateArea();
}

// define a concrete subclass of Shape
public class Square : Shape {
    // private fields
    private int sideLength;

    // property for private field
    public int SideLength {
        get { return sideLength; }
        set { sideLength = value; }
    }

    // constructor
    public Square(string name, int sideLength) : base(name, 4) {
        this.sideLength = sideLength;
    }

    // implementation of abstract method
    public override int calculateArea() {
        return sideLength * sideLength;
    }
}

// create an instance of Square and call methods
void main() {
    // instantiate Square object with name "Square" and side length of 5
    var square = new Square("Square", 5);

    // print name and sides of Square object
    stdout.printf("Name: %s\n", square.Name);
    stdout.printf("Sides: %i\n", square.Sides);

    // calculate and print area of Square object
    int area = square.calculateArea();
    stdout.printf("Area: %i\n", area);
}