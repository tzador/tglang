/*
A complex code snippet in VALA that performs binary search on an array of integers and returns the index of the target value.
Assuming the array is sorted in ascending order and has no duplicate values.
*/

//Define the function with parameters - array, target value and array length
int binary_search(int[] array, int target, int length) {

    //Initialize start and end of array
    int start = 0;
    int end = length - 1;

    //Loop until start is less than or equal to end
    while (start <= end) {

        //Calculate the middle index of the array
        int mid = (start + end) / 2;

        //Check if the target value is equal to the middle element
        if (array[mid] == target) {
            //Return the index of the target value
            return mid;

        } else if (array[mid] < target) {
            //If the target is greater than middle element, shift start to one element ahead of mid
            start = mid + 1;

        } else {
            //If the target is less than middle element, shift end to one element behind mid
            end = mid - 1;

        }
    }

    //If target value is not found, return -1
    return -1;
}

//Example usage of the function
int[] numbers = {2, 4, 7, 9, 12, 15, 18, 20};
int target = 4;
int length = numbers.length;

//Call the function and store the returned index in a variable
int index = binary_search(numbers, target, length);

//Print the result
stdout.printf("The target value %d is at index %d.", target, index);