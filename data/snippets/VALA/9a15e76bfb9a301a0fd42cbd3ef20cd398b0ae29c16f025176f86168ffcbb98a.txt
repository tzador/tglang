/*
  This code snippet creates a matrix class with various methods for matrix operations.
  It also includes a test program to demonstrate the usage of the matrix class.
*/

// Define the matrix class
public class Matrix
{
	// Instance variables
	private int[][] data;
	private int rows;
	private int cols;
	
	// Constructor
	public Matrix(int[,] input)
	{
		this.rows = input.GetLength(0);
		this.cols = input.GetLength(1);
		this.data = input;
	}
	
	// Method to get the number of rows
	public int get_rows()
	{
		return this.rows;
	}
	
	// Method to get the number of columns
	public int get_cols()
	{
		return this.cols;
	}
	
	// Method to get the element at a specific row and column
	public int get_element(int row, int col)
	{
		return this.data[row][col];
	}
	
	// Method to set the element at a specific row and column
	public void set_element(int row, int col, int val)
	{
		this.data[row][col] = val;
	}
	
	// Method to print the matrix
	public void print_matrix()
	{
		for (int i = 0; i < this.rows; i++)
		{
			for (int j = 0; j < this.cols; j++)
			{
				print("%d ", this.data[i][j]);
			}
			print("\n");
		}
	}
	
	// Method to check if two matrices are equal
	public bool equals(Matrix other)
	{
		if (this.rows != other.get_rows() || this.cols != other.get_cols())
		{
			return false;
		}
		
		for (int i = 0; i < this.rows; i++)
		{
			for (int j = 0; j < this.cols; j++)
			{
				if (this.data[i][j] != other.get_element(i, j))
				{
					return false;
				}
			}
		}
		
		return true;
	}
	
	// Method to perform matrix addition
	public Matrix add(Matrix other)
	{
		Matrix result = new Matrix(new int[this.rows, this.cols]);
		
		for (int i = 0; i < this.rows; i++)
		{
			for (int j = 0; j < this.cols; j++)
			{
				result.set_element(i, j, this.data[i][j] + other.get_element(i, j));
			}
		}
		
		return result;
	}
	
	// Method to perform matrix subtraction
	public Matrix subtract(Matrix other)
	{
		Matrix result = new Matrix(new int[this.rows, this.cols]);
		
		for (int i = 0; i < this.rows; i++)
		{
			for (int j = 0; j < this.cols; j++)
			{
				result.set_element(i, j, this.data[i][j] - other.get_element(i, j));
			}
		}
		
		return result;
	}
	
	// Method to perform matrix multiplication
	public Matrix multiply(Matrix other)
	{
		Matrix result = new Matrix(new int[this.rows, other.get_cols()]);
		
		for (int i = 0; i < this.rows; i++)
		{
			for (int j = 0; j < other.get_cols(); j++)
			{
				int sum = 0;
				for (int k = 0; k < this.cols; k++)
				{
					sum += this.data[i][k] * other.get_element(k, j);
				}
				result.set_element(i, j, sum);
			}
		}
		
		return result;
	}
}


// Test program
void main()
{
	// Create two matrices for testing
	Matrix mat1 = new Matrix(new int[3, 3] { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} });
	Matrix mat2 = new Matrix(new int[3, 3] { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} });
	
	// Print the matrices
	print("Matrix 1: \n");
	mat1.print_matrix();
	print("\nMatrix 2: \n");
	mat2.print_matrix();
	
	// Test get_rows and get_cols methods
	print("\nMatrix 1 rows: %d\n", mat1.get_rows());
	print("Matrix 2 columns: %d\n", mat2.get_cols());
	
	// Test get_element method
	print("Element at row 1, column 1 of matrix 1: %d\n", mat1.get_element(1, 1));
	
	// Test set_element method
	print("Setting element at row 2, column 2 of matrix 1 to 10...\n");
	mat1.set_element(2, 2, 10);
	print("Updated matrix 1: \n");
	mat1.print_matrix();
	
	// Test equals method
	print("\nAre matrix 1 and matrix 2 equal? %s\n", mat1.equals(mat2) ? "Yes" : "No");
	
	// Test addition
	print("Adding matrix 1 and matrix 2...\n");
	Matrix addition = mat1.add(mat2);
	addition.print_matrix();
	
	// Test subtraction
	print("Subtracting matrix 1 from matrix 2...\n");
	Matrix subtraction = mat2.subtract(mat1);
	subtraction.print_matrix();
	
	// Test multiplication
	print("Multiplying matrix 1 and matrix 2...\n");
	Matrix multiplication = mat1.multiply(mat2);
	multiplication.print_matrix();
}

// Output: