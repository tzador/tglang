// Define an abstract class called "Animal"
public abstract class Animal {
    
    // Private member variables
    private int age;
    private string name;
    private string breed;
    
    // Constructor method with parameters for age, name, and breed
    public Animal (int a, string n, string b) {
        age = a;
        name = n;
        breed = b;
    }
    
    // Method to get the animal's age
    public int get_age () {
        return age;
    }
    
    // Method to get the animal's name
    public string get_name () {
        return name;
    }
    
    // Method to get the animal's breed
    public string get_breed () {
        return breed;
    }
    
    // Abstract method to make the animal speak
    public abstract void speak();
}

// Define a class called "Dog" that inherits from "Animal" class
public class Dog : Animal {
    
    // Constructor method for "Dog" class
    public Dog (int a, string n, string b) : base (a, n, b) {
        
    }
    
    // Implementation of the abstract speak method for "Dog" class
    public override void speak() {
        stdout.printf("Woof woof! My name is %s.", get_name());
    }
}

// Define a class called "Cat" that inherits from "Animal" class
public class Cat : Animal {
    
    // Constructor method for "Cat" class
    public Cat (int a, string n, string b) : base (a, n, b) {
        
    }
    
    // Implementation of the abstract speak method for "Cat" class
    public override void speak() {
        stdout.printf("Meow meow! My name is %s.", get_name());
    }
}

// Main method
int main () {
    
    // Create a new "Dog" object
    Dog my_dog = new Dog(5, "Max", "Golden Retriever");
    
    // Create a new "Cat" object
    Cat my_cat = new Cat(3, "Mittens", "Siamese");
    
    // Call the speak method for both objects
    my_dog.speak(); // Output: Woof woof! My name is Max.
    my_cat.speak(); // Output: Meow meow! My name is Mittens.
    
    return 0;
}