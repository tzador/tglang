public class Tree<T>
{
	private T value;

	// Initializes a new instance of the Tree class with the specified value.
	public Tree(T val)
	{
		value = val;
	}

	// Inserts a new Tree node with the specified value as a child of this node.
	public void insert_child(Tree node, T val)
	{
		// Create new child node with specified value
		Tree<T> new_child = new Tree<T>(val);

		// Add new child to tree
		node.add_child(new_child);
	}

	// Adds the given node as a child of this tree node.
	public void add_child(Tree<T> node)
	{
		// Check if node already exists in tree
		if (children.contains(node))
			// Throw an exception if node already exists
			throw new TreeException("Node already exists in tree.");

		// Add node as child of this node
		children.add(node);
	}
	
	// Prints the value of the tree node and its children
	public void print()
	{
		// Print value of current node
		stdout.printf("Value: %s\n", value);

		// Print children of current node
		stdout.printf("Children: ");
		foreach (Tree<T> child in children)
		{
			stdout.printf("%s ", child.value);
		}
		stdout.printf("\n");
	}

	// Removes the given child node from this tree node.
	public void remove_child(Tree<T> child)
	{
		// Check if child exists in tree
		if (!children.contains(child))
			// Throw an exception if child does not exist
			throw new TreeException("Child does not exist in tree.");

		// Remove child from children list
		children.remove(child);
	}

	// Search for a specific value in this tree node and its children.
	public bool search(T val)
	{
		// Check if current node's value equals to searched value
		if (value == val)
			return true;

		// Check if any children of current node have the searched value
		foreach (Tree<T> child in children)
		{
			if (child.search(val))
				return true;
		}

		// If value was not found in current node or its children, return false
		return false;
	}

	// Returns a list of all values present in the tree.
	public ArrayList<T> get_values()
	{
		// Initialize an empty list to store values
		ArrayList<T> values = new ArrayList();

		// Add current node's value to list
		values.add(value);

		// Recursively add children's values to list
		foreach (Tree<T> child in children)
		{
			ArrayList<T> child_values = child.get_values();

			// Add all values in child's list to main list
			values.add_all(child_values);
		}

		// Return list of values
		return values;
	}
}