// This program demonstrates the use of threads in Vala

// Import the threading library
using Gee;

// Define a class for our thread
class ExampleThread : Thread {

    // Create a private property to store the thread's name
    private string name;

    // Constructor to set the name on thread creation
    public ExampleThread(string _name) {
        this.name = _name;
    }

    // Override the run method to define thread behavior
    public override void run() {

        // Print the thread's name
        stdout.printf("Running thread: %s\n", this.name);

        // Create a new lock from the GLib library
        Lock lock = new Lock();

        // Acquire the lock
        lock.lock();

        // Simulate some work
        for (int i = 0; i < 100000; i++) {
            int j = i * 2;
        }

        // Release the lock
        lock.unlock();

        // Print a message to indicate the thread has finished
        stdout.printf("Thread %s has finished\n", this.name);
    }
}

// Main function
int main(string[] args) {

    // Create an array to store our threads
    ArrayList<ExampleThread> threads = new ArrayList<ExampleThread>();

    // Create three threads with different names
    ExampleThread thread1 = new ExampleThread("Thread 1");
    ExampleThread thread2 = new ExampleThread("Thread 2");
    ExampleThread thread3 = new ExampleThread("Thread 3");

    // Add the threads to the array
    threads.add(thread1);
    threads.add(thread2);
    threads.add(thread3);

    // Start each thread
    foreach (var thread in threads) {
        thread.start();
    }

    // Wait for all threads to finish before proceeding
    foreach (var thread in threads) {
        thread.join();
    }

    // Done!
    stdout.printf("All threads have finished\n");

    return 0;
}