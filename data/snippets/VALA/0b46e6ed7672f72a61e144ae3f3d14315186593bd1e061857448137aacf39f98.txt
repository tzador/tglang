// This code snippet sorts an array 

int[] array = {4, 2, 9, 6, 1, 5, 8, 3, 7}; //! Declaring and initializing an integer array
int n = array.length; //! Getting the length of the array

//? Function to perform merge sort on the array
void merge_sort(int[] arr, int low, int high) {

    if (low < high) { //! Checking if the array has more than one element

        int mid = low + (high - low) / 2; //* Calculating the mid point of the array

        merge_sort(arr, low, mid); //! Performing merge sort on the first half of the array
        merge_sort(arr, mid + 1, high); //! Performing merge sort on the second half of the array

        merge(arr, low, mid, high); //! Merging the two sorted halves of the array
    }
}

//? Function to merge two subarrays of the array
void merge(int[] arr, int low, int mid, int high) {

    int left = mid - low + 1; //! Calculating the size of the left subarray
    int right = high - mid; //! Calculating the size of the right subarray

    int[] L = new int[left]; //! Declaring a left subarray
    int[] R = new int[right]; //! Declaring a right subarray

    for (int i = 0; i < left; i++) {
        L[i] = arr[low + i]; //! Storing elements from the left side of the array into the left subarray
    }

    for (int j = 0; j < right; j++) {
        R[j] = arr[mid + 1 + j]; //! Storing elements from the right side of the array into the right subarray
    }

    int i = 0, j = 0; //! Initializing counters for left and right subarrays

    int k = low; //!Initializing counter for main array

    //? Loop to compare and merge the subarrays 
    while (i < left && j < right) { 

        if (L[i] <= R[j]) { //! Comparing elements from both subarrays

            arr[k] = L[i]; //! Storing the smaller element into the main array
            i++; //! Incrementing counter for left subarray

        } else {

            arr[k] = R[j]; //! Storing the smaller element into the main array
            j++; //! Incrementing counter for right subarray
        }

        k++; //! Incrementing counter for main array
    }

    //!Loop to transfer remaining elements from left subarray into main array
    while (i < left) {

        arr[k] = L[i];
        i++;
        k++;
    }

    //!Loop to transfer remaining elements from right subarray into main array
    while (j < right) {

        arr[k] = R[j];
        j++;
        k++;
    }
}

merge_sort(array, 0, n - 1); //! Calling the merge_sort function

//? Printing the sorted array 
for (int num in array) {
    stdout.printf("%d ", num);
}

/*
Expected Output:
1 2 3 4 5 6 7 8 9
*/