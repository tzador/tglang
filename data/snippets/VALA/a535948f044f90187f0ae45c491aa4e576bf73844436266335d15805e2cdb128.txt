// This code snippet is a class that demonstrates inheritance in VALA.
// It creates a base class called 'Shape' and two derived classes 'Square' and 'Circle'.

// Base class 'Shape'
class Shape {
    // Private variables
    private int x, y; // Coordinates of the shape
    private int area; // Area of the shape

    // Constructor
    public Shape(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Function that calculates the area of the shape
    protected abstract void calculate_area();

    // Function that prints the coordinates and area of the shape
    public void print_shape() {
        print ("Shape with coordinates (%i,%i) and area %i \n", x, y, area);
    }
}

// Derived class 'Square'
class Square : Shape {
    // Constructor
    public Square(int x, int y) {
        // Calling the base class constructor
        base(x, y);
    }

    // Overriding the calculate_area() function from the base class
    protected override void calculate_area() {
        // Calculate the area of the square
        area = x * y;
    }
}

// Derived class 'Circle'
class Circle : Shape {
    // Private variable
    private int radius; // Radius of the circle

    // Constructor
    public Circle(int x, int y, int radius) {
        // Calling the base class constructor
        base(x, y);
        this.radius = radius;
    }

    // Overriding the calculate_area() function from the base class
    protected override void calculate_area() {
        // Calculate the area of the circle
        area = 3 * radius * radius;
    }
}

// Main function
int main() {
    // Creating objects
    var square = new Square(5, 5);
    var circle = new Circle(10, 10, 5);

    // Calling the print_shape() function for each object
    square.print_shape(); // Output: Shape with coordinates (5,5) and area 25 
    circle.print_shape(); // Output: Shape with coordinates (10,10) and area 75 

    return 0;
}