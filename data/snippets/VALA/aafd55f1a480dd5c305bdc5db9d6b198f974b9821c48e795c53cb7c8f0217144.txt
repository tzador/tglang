/* This code snippet shows how to implement a dynamic array 
in VALA using a custom class */

/* Define a custom class called DynamicArray */
class DynamicArray<T> : Object {

    /* Declare private variables */
    private T[] arr;
    private int size;
    private int capacity;

    /* Constructor method */
    public DynamicArray () {
        /* Initialize the array with an initial capacity of 10 */
        arr = new T[10];
        size = 0;
        capacity = 10;
    }

    /* Method to add an element to the end of the array */
    public void append (T element) {
        /* Check if the array is full, if yes, double its capacity */
        if (size == capacity) {
            capacity = capacity * 2;
            /* Create a new array with the updated capacity */
            T[] newArr = new T[capacity];
            /* Copy elements from the original array to the new array */
            for (int i = 0; i < size; i++) {
                newArr[i] = arr[i];
            }
            /* Update the original array with the new array */
            arr = newArr;
        }
        /* Add the new element to the end of the array */
        arr[size] = element;
        /* Increment the size of the array */
        size++;
    }

    /* Method to insert an element at a specific index in the array */
    public void insert (T element, int index) {
        /* Check if the index is within the bounds of the array */
        if (index >= 0 && index <= size) {
            /* Check if the array is full, if yes, double its capacity */
            if (size == capacity) {
                capacity = capacity * 2;
            }
            /* Create a new array with the updated capacity */
            T[] newArr = new T[capacity];
            /* Copy elements from the original array to the new array until the
            specified index */
            for (int i = 0; i < index; i++) {
                newArr[i] = arr[i];
            }
            /* Add the new element to the specified index in the new array */
            newArr[index] = element;
            /* Copy elements from the original array to the new array from the
            specified index onwards */
            for (int i = index; i < size; i++) {
                newArr[i + 1] = arr[i];
            }
            /* Update the original array with the new array */
            arr = newArr;
            /* Increment the size of the array */
            size++;
        } else {
            /* If index is out of bounds, throw an error */
            warning ("Index out of bounds");
        }
    }

    /* Method to remove an element at a specific index in the array */
    public void remove (int index) {
        /* Check if the index is within the bounds of the array */
        if (index >= 0 && index < size) {
            /* Create a new array with the updated capacity */
            T[] newArr = new T[capacity];
            /* Copy elements from the original array to the new array until the
            specified index */
            for (int i = 0; i < index; i++) {
                newArr[i] = arr[i];
            }
            /* Copy elements from the original array to the new array from the
            index after the specified index onwards */
            for (int i = index + 1; i < size; i++) {
                newArr[i - 1] = arr[i];
            }
            /* Update the original array with the new array */
            arr = newArr;
            /* Decrement the size of the array */
            size--;
        } else {
            /* If index is out of bounds, throw an error */
            warning ("Index out of bounds");
        }
    }

    /* Method to get the element at a specific index in the array */
    public T get (int index) {
        /* Check if the index is within the bounds of the array */
        if (index >= 0 && index < size) {
            /* Return the element at the specified index */
            return arr[index];
        } else {
            /* If index is out of bounds, throw an error */
            warning ("Index out of bounds");
            /* Return null */
            return null;
        }
    }

    /* Method to clear the array */
    public void clear () {
        /* Initialize a new array with the initial capacity */
        arr = new T[10];
        size = 0;
        capacity = 10;
    }

    /* Method to get the size of the array */
    public int get_size () {
        return size;
    }

    /* Method to get the capacity of the array */
    public int get_capacity () {
        return capacity;
    }

}

/* Create an instance of the DynamicArray class with Integer elements */
DynamicArray<int> myArray = new DynamicArray<int>();

/* Call the append method to add elements to the end of the array */
myArray.append(5);
myArray.append(10);
myArray.append(15);

/* Call the insert method to insert an element at a specific index in the array */
myArray.insert(20, 1);

/* Call the remove method to remove an element at a specific index in the array */
myArray.remove(2);

/* Call the get method to get an element at a specific index in the array */
int element = myArray.get(0);

/* Call the clear method to clear the array */
myArray.clear();

/* Print the size of the array */
stdout.printf("Size of array: %d\n", myArray.get_size());

/* Print the capacity of the array */
stdout.printf("Capacity of array: %d\n", myArray.get_capacity());