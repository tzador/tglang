// This code snippet demonstrates how to create and manipulate a linked list in VALA

// Define the Node class
class Node {
	int value; // holds the value of the node
	Node next; // holds reference to next node in the list
	
	// Constructor
	public Node(int val) {
		value = val;
		next = null;
	}
}

// Define the LinkedList class
class LinkedList {
	Node head; // holds reference to the head of the list
	
	// Constructor
	public LinkedList() {
		head = null;
	}
	
	// Function to add a node to the beginning of the list
	public void add_at_head(int val) {
		Node new_node = new Node(val); // create a new node with given value
		new_node.next = head; // set the next of new node to current head
		head = new_node; // make new node the new head
	}
	
	// Function to add a node to the end of the list
	public void add_at_tail(int val) {
		Node new_node = new Node(val); // create a new node with given value
		new_node.next = null; // since it is being added at end, next will be null
		
		// if list is empty, make new node the head
		if (head == null) {
			head = new_node;
			return;
		}
		
		Node tail = head; // start at the head
		while (tail.next != null) { // find the last node in the list
			tail = tail.next;
		}
		tail.next = new_node; // add new node after last node
	}
	
	// Function to add a node after a given node in the list
	public void add_after_node(Node prev_node, int val) {
		// check if given node is null
		if (prev_node == null) {
			print ("Previous node cannot be null");
			return;
		} 
		
		Node new_node = new Node(val); // create a new node with given value
		new_node.next = prev_node.next; // set the next of new node to next of prev node
		prev_node.next = new_node; // set the next of prev node to new node
	}
	
	// Function to delete a node with given value from the list
	public void delete_node(int val) {
		Node temp = head, prev = null; // start at head and keep track of previous node
		
		// if head holds the given value, delete it and make next node the head
		if (temp != null && temp.value == val) {
			head = temp.next;
			return;
		}
		
		// iterate over list until node with given value is found
		while (temp != null && temp.value != val) {
			prev = temp;
			temp = temp.next;
		}
		
		// if node is not present in list
		if (temp == null) {
			print ("Node with given value does not exist");
			return;
		}
		
		prev.next = temp.next; // unlink the node from list
	}
	
	// Function to print the linked list
	public void print_list() {
		Node current = head; // start at head
		print ("List: ");
		// iterate over list and print each node's value
		while (current != null) {
			print (current.value + " ");
			current = current.next;
		}
	}
}

// Main function: Create a linked list and perform various operations on it
void main () {
	LinkedList list = new LinkedList();
	list.add_at_head(5); // 5
	list.add_at_tail(10); // 5 10
	list.add_at_tail(15); // 5 10 15
	list.add_after_node(list.head, 8); // 5 8 10 15
	list.delete_node(10); // 5 8 15
	list.print_list(); // List: 5 8 15
}