public class LinkedList<T> : List<T> {
    public Node<T> head;
    public Node<T> tail;
    public Node<T> curr;
    public int size;

    public LinkedList () {
        head = null;
        tail = null;
        curr = null;
        size = 0;
    }

    public T getFirst () {
        curr = head;
        return curr.value;
    }

    public T getLast () {
        curr = tail;
        return curr.value;
    }

    public T get () {
        return curr.value;
    }

    public bool moveNext () {
        if (curr == null) {
            curr = head;
        } else {
            curr = curr.next;
        }
        return curr != null;
    }

    public void insertAfter (T val) {
        Node<T> temp;
        if (size > 0) {
            temp = new Node<T> (val, curr.next);
            curr.next = temp;
            if (curr == tail) {
                tail = temp;
            }
        } else {
            temp = new Node<T> (val, null);
            head = temp;
            tail = temp;
        }
        curr = temp;
        size++;
    }

    public void insertBefore (T val) {
        Node<T> temp;
        if (size > 0) {
            if (curr == head) {
                temp = new Node<T> (val, curr);
                head = temp;
            } else {
                temp = new Node<T> (val, curr.prev);
                temp.next = curr;
                temp.prev.next = temp;
            }
        } else {
            temp = new Node<T> (val, head);
            head = temp;
        }
        curr = temp;
        size++;
    }

    public void remove () {
        if (curr == head && curr == tail) {
            curr = null;
            head = null;
            tail = null;
        } else if (curr == head) {
            curr.next.prev = null;
            head = curr.next;
            curr = head;
        } else if (curr == tail) {
            curr = curr.prev;
            curr.next = null;
            tail = curr;
        } else {
            curr.prev.next = curr.next;
            curr = curr.prev;
        }
        size--;
    }

    public int find (T val) {
        curr = head;
        int index = -1;
        for (int i = 0; i < size; i++) {
            if (curr.value == val) {
                index = i;
                break;
            }
            curr = curr.next;
        }
        return index;
    }

    private class Node<T> {
        public T value;
        public Node<T> next;
        public Node<T> prev;

        public Node (T val, Node<T> nxt) {
            value = val;
            next = nxt;
            prev = null;
        }
    }
}