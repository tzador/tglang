/* This code snippet creates a custom widget called ButtonBox that
 * contains a label and button. It also includes a function to set
 * the label text and a signal handler for when the button is clicked.
 * It also implements the GtkOrientable interface to allow for horizontal
 * or vertical orientation of the widget.
 */

// Define the ButtonBox class and its properties
public class ButtonBox : Gtk.Box, Gtk.Orientable {
    // Private variables
    private Gtk.Label label;
    private Gtk.Button button;

    // Constructor
    public ButtonBox(string labelText, string buttonText) {
        // Initialize the label and button with the given text
        this.label = new Gtk.Label(labelText);
        this.button = new Gtk.Button.with_label(buttonText);

        // Pack the label and button into the Box
        this.pack_start(label, true, true, 0);
        this.pack_start(button, false, false, 0);

        // Connect the button's "clicked" signal to the on_button_clicked function
        this.button.clicked.connect(this.on_button_clicked);
    }

    // Function to set the label text, can be called externally
    public void set_label(string labelText) {
        this.label.set_text(labelText);
    }

    // Signal handler for when the button is clicked
    private void on_button_clicked() {
        // Display a message in the console
        stdout.printf("Button clicked!\n");
    }

    // Implement the orientation property from GtkOrientable
    public Gtk.Orientation orientation {
        get { return this.get_orientation(); }
        set { this.set_orientation(value); }
    }
}

// Create an instance of the ButtonBox widget with "Hello" as the label
// and "Click me" as the button text
var button_box = new ButtonBox("Hello", "Click me");

// Set the orientation of the widget to vertical
button_box.orientation = Gtk.Orientation.VERTICAL;

// Add the widget to a container and show it
var container = new Gtk.Box();
container.pack_start(button_box, true, true, 0);
container.show_all();