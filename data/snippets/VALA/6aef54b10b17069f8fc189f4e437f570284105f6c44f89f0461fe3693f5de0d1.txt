/* This is a complex code snippet in VALA, used for creating a binary search tree with different functions 
and methods for insertion, deletion, and searching*/

class BSTNode<T> {
  public T value;
  public BSTNode<T> left;
  public BSTNode<T> right;
  public BSTNode(T value) {
    this.value = value;
    left = null;
    right = null;
  }
}

class BinarySearchTree<T> {
  BSTNode root;
  public BinarySearchTree() {
    root = null;
  }
  public void insert_value(T value) {
    root = insert_node(root, value);
  }
  private BSTNode<T> insert_node(BSTNode<T> node, T value) {
    if (node == null) {
      node = new BSTNode<T>(value);
    }
    else if (value < node.value) {
      node.left = insert_node(node.left, value);
    }
    else {
      node.right = insert_node(node.right, value);
    }
    return node;
  }
  public void delete_value(T value) {
    root = delete_node(root, value);
  }
  private BSTNode<T> delete_node(BSTNode<T> node, T value) {
    if (node == null) {
      return node;
    }
    else if (value < node.value) {
      node.left = delete_node(hode.left, value);
    }
    else if (value > node.value) {
      node.right = delete_node(node.right, value);
    }
    else {
      if (node.left == null) {
        return node.right;
      }
      else if (node.right == null) {
        return node.left;
      }
      node.value = find_minimum(node.right).value;
      node.right = delete_node(node.right, node.value);
    }
    return node;
  }
  private BSTNode<T> find_minimum(BSTNode<T> node) {
    if (node.left == null) {
      return node;
    }
    return find_minimum(node.left);
  }
  public bool contains_value(T value) {
    return contains_node(root, value);
  }
  private bool contains_node(BSTNode<T> node, T value) {
    if (node == null) {
      return false;
    }
    else if (value == node.value) {
      return true;
    }
    else if (value < node.value) {
      return contains_node(node.left, value);
    }
    else {
      return contains_node(node.right, value);
    }
  }
  public void print_tree() {
    print_tree_recursive(root);
  }
  private void print_tree_recursive(BSTNode<T> node) {
    if (node != null) {
      print_tree_recursive(node.left);
      print("%d ", node.value);
      print_tree_recursive(node.right);
    }
  }
}

int main() {
  BinarySearchTree<int> bst = new BinarySearchTree<int>();
  bst.insert_value(5);
  bst.insert_value(3);
  bst.insert_value(7);
  bst.insert_value(1);

  bst.print_tree();

  if (bst.contains_value(3)) {
    print("\n3 is found in the tree.");
  }

  bst.delete_value(3);
  bst.print_tree();
  return 0;
}