/* Annotated code snippet in VALA */
int main (string[] args) {
//This is a comment
int a = 10;
int b = 20;
if(a > b){
    print ("%d is larger than %d", a, b);
}else{
    print ("%d is larger than %d", b, a);
}
for(int i = 0; i < 10; i++){
    print ("%d", i);
}

// This is a multi-line comment
/* This is
a multi-line
comment */

/* This is a function that calculates the factorial of a number */
int factorial(int number){
    if(number == 0 || number == 1){
        return 1;
    }
    return number * factorial(number - 1);
}

// This is a class named "Person" with properties, a constructor, and methods
class Person {
    public string name;
    private int age;

    // Constructor with parameters
    public Person(string name, int age){
        this.name = name;
        this.age = age;
    }

    // Method to get name
    public string get_name(){
        return this.name;
    }

    // Method to get age
    public int get_age(){
        return this.age;
    }
}

// Creating an instance of Person class and calling methods
Person person = new Person("John", 25);
print("Name: %s, Age: %d", person.get_name(), person.get_age());

// This is an interface named "Animal" with a method
interface Animal {
    public void speak();
}

// This is a class "Dog" that implements the "Animal" interface
class Dog : Animal {
    public void speak(){
        print("Woof!");
    }
}

// Creating an instance of Dog class and calling the speak method
Dog dog = new Dog();
dog.speak();

// This is a list of integers
int[] numbers = {1, 2, 3, 4, 5};

// Printing the list using a foreach loop
foreach(int num in numbers){
    print("%d", num);
}

// This is a generic class named "Stack" with a generic type parameter
class Stack<T> {
    T[] data;
    int top = 0;

    // Constructor to initialize the stack
    public Stack(){
        data = (T[]) malloc (sizeof(T) * 10);
    }

    // Method to push an item onto the stack
    public void push(T item){
        data[top] = item;
        top++;
    }

    // Method to pop an item off the stack
    public T pop(){
        top--;
        return data[top];
    }
}

// Creating an instance of Stack class with integer type and pushing/popping items
Stack<int> int_stack = new Stack<int>();
int_stack.push(1);
int_stack.push(2);
print("Popped item: %d", int_stack.pop());
print("Popped item: %d", int_stack.pop());