/* This code is a simple implementation of a binary search tree */

/* Node class to represent each node in the tree */
class Node {
  /* Data stored in each node */
  int data;

  /* Pointers to left and right child nodes */
  Node left;
  Node right;

  /* Constructor to initialize data and pointers */
  public Node(int data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

/* Binary search tree class */
class BinarySearchTree {
  /* Root node of the tree */
  Node root;

  /* Constructor to initialize root node */
  public BinarySearchTree() {
    this.root = null;
  }

  /* Method to insert a new node in the tree */
  public void insert(int data) {
    /* If tree is empty, create a new root node */
    if (this.root == null) {
      Node newNode = new Node(data);
      this.root = newNode;
      return;
    }

    /* Starting from root node, traverse the tree to find the appropriate position to insert new node */
    Node curr = root;
    while (true) {
      /* If data is less than current node, go to left child node */
      if (data < curr.data) {
        if (curr.left == null) {
          /* If left child is null, create a new node and assign it as left child */
          Node newNode = new Node(data);
          curr.left = newNode;
          break;
        } else {
          /* If left child is not null, continue traversing */
          curr = curr.left;
        }
      } else {
        /* If data is greater than or equal to current node, go to right child node */
        if (curr.right == null) {
          /* If right child is null, create a new node and assign it as right child */
          Node newNode = new Node(data);
          curr.right = newNode;
          break;
        } else {
          /* If right child is not null, continue traversing */
          curr = curr.right;
        }
      }
    }
  }

  /* Method to search for a node with given data */
  public Node search(int data) {
    Node curr = root;

    /* Traverse the tree until the data is found or the current node becomes null */
    while (curr != null) {
      /* If data is found, return the current node */
      if (curr.data == data) {
        return curr;
      } else if (data < curr.data) {
        /* If data is less than current node, go to left child node */
        curr = curr.left;
      } else {
        /* If data is greater than current node, go to right child node */
        curr = curr.right;
      }
    }

    /* If data is not found, return null */
    return null;
  }

  /* Method to delete a node with given data */
  public void delete(int data) {
    /* Pointer to hold parent node of current node */
    Node parent = null;
    /* Start from root node */
    Node curr = root;

    /* Traverse the tree until the data is found or the current node becomes null */
    while (curr != null && curr.data != data) {
      parent = curr;
      if (data < curr.data) {
        curr = curr.left;
      } else {
        curr = curr.right;
      }
    }

    /* If data is not found, return */
    if (curr == null) {
      return;
    }

    /* If current node has no children, delete the node */
    if (curr.left == null && curr.right == null) {
      /* If current node is root node, set root to null */
      if (curr == root) {
        root = null;
      } else {
        /* If current node is a left child, set its parent's left child to null */
        if (curr == parent.left) {
          parent.left = null;
        } else {
          /* If current node is a right child, set its parent's right child to null */
          parent.right = null;
        }
      }
      /* If current node has only one child, set its child as the new child of its parent */
    } else if (curr.left == null || curr.right == null) {
      Node child = curr.left != null ? curr.left : curr.right;
      /* If current node is root node, set child as the new root */
      if (curr == root) {
        root = child;
      } else {
        /* If current node is a left child, set its parent's left child to the child */
        if (curr == parent.left) {
          parent.left = child;
        } else {
          /* If current node is a right child, set its parent's right child to the child */
          parent.right = child;
        }
      }
    } else {
      /* If current node has two children, find the minimum value in the right subtree and replace it with the current node */
      Node min = curr.right;
      Node minParent = curr;

      /* Traverse the right subtree until the minimum value is found */
      while (min.left != null) {
        minParent = min;
        min = min.left;
      }

      /* Copy the minimum value to current node and delete the node containing it */
      curr.data = min.data;
      /* If minimum value is a left child, set its parent's left child to null */
      if (min == minParent.left) {
        minParent.left = null;
      } else {
        /* If minimum node is a right child, set its parent's right child to null */
        minParent.right = null;
      }
    }
  }

  /* Method to traverse the tree in pre-order */
  public void printPreOrder(Node node) {
    /* Base case */
    if (node == null) {
      return;
    }

    /* Print the current node */
    print(node);

    /* Recursively print the left subtree and then the right subtree */
    printPreOrder(node.left);
    printPreOrder(node.right);
  }

  /* Method to traverse the tree in in-order */
  public void printInOrder(Node node) {
    /* Base case */
    if (node == null) {
      return;
    }

    /* Recursively print the left subtree, then the current node, and then the right subtree */
    printInOrder(node.left);
    print(node);
    printInOrder(node.right);
  }

  /* Method to traverse the tree in post-order */
  public void printPostOrder(Node node) {
    /* Base case */
    if (node == null) {
      return;
    }

    /* Recursively print the left subtree, then the right subtree, and then the current node */
    printPostOrder(node.left);
    printPostOrder(node.right);
    print(node);
  }

  /* Helper method to print a node's data */
  private void print(Node node) {
    stdout.printf("%d ", node.data);
  }
}

/* Main method */
int main() {
  /* Create a new binary search tree object */
  BinarySearchTree tree = new BinarySearchTree();

  /* Insert nodes in the tree */
  tree.insert(50);
  tree.insert(30);
  tree.insert(20);
  tree.insert(40);
  tree.insert(70);
  tree.insert(60);
  tree.insert(80);

  /* Print the tree in pre-order */
  print("\nPre-order traversal: ");
  tree.printPreOrder(tree.root);
  stdout.printf("\n");

  /* Print the tree in in-order */
  print("In-order traversal: ");
  tree.printInOrder(tree.root);
  stdout.printf("\n");

  /* Print the tree in post-order */
  print("Post-order traversal: ");
  tree.printPostOrder(tree.root);
  stdout.printf("\n");

  /* Search for a node with data 70 */
  Node foundNode = tree.search(70);
  if (foundNode != null) {
    print("Node with data 70 found!\n");
  } else {
    print("Node with data 70 not found!\n");
  }

  /* Delete the node with data 70 */
  tree.delete(70);

  /* Print the updated tree in in-order */
  print("\nIn-order traversal after deleting node with data 70: ");
  tree.printInOrder(tree.root);
  stdout.printf("\n");

  /* Delete the node with data 50 (root node) */
  tree.delete(50);

  /* Print the updated tree in in-order */
  print("In-order traversal after deleting root node with data 50: ");
  tree.printInOrder(tree.root);
  stdout.printf("\n");

  /* Delete the node with data 20 (leaf node) */
  tree.delete(20);

  /* Print the updated tree in in-order */
  print("In-order traversal after deleting leaf node with data 20: ");
  tree.printInOrder(tree.root);
  stdout.printf("\n");

  /* Delete the node with data 30 (node with one child) */
  tree.delete(30);

  /* Print the updated tree in in-order */
  print("In-order traversal after deleting node with one child (data 30): ");
  tree.printInOrder(tree.root);
  stdout.printf("\n");

  return 0;
}