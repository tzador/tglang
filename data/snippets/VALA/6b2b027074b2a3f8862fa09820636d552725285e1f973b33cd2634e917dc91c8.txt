using Gtk;

// Define a new abstract class
public abstract class Shape : Object {
    
    // Define protected color property
    protected string color { get; set; }
    
    // Constructor with color parameter
    public Shape (string color) {
        this.color = color;
    }
    
    // Abstract method to calculate area
    public abstract int get_area ();
    
    // Abstract method to calculate perimeter
    public abstract int get_perimeter ();
}

// Define a new concrete class that extends the Shape class
public class Rectangle : Shape {
    
    // Define private length and width properties
    private int length { get; set; }
    private int width { get; set; }
    
    // Constructor with length, width, and color parameters
    public Rectangle (int length, int width, string color) : base(color) {
        this.length = length;
        this.width = width;
    }
    
    // Implement get_area method
    public override int get_area () {
        return this.length * this.width;
    }
    
    // Implement get_perimeter method
    public override int get_perimeter () {
        return 2 * (this.length + this.width);
    }
}

// Create a new instance of the Rectangle class, passing in length, width, and color values
var rectangle = new Rectangle (10, 5, "blue");

// Print out the calculated area and perimeter using the newly created instance
print ("The area of the rectangle is " + rectangle.get_area ());
print ("The perimeter of the rectangle is " + rectangle.get_perimeter ());