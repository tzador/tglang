public int[] merge_sort(int[] arr, int n)
{
    if (n < 2)
        return new int[] { arr[0] };

    int mid = n/2;
    int[] left = arr[..mid];
    int[] right = arr[mid..];
    left = merge_sort(left, mid);
    right = merge_sort(right, n-mid);

    return merge(left, right);
}

private int[] merge(int[] arr1, int[] arr2)
{
    int[] result = new int[arr1.length + arr2.length];
    uint i = 0, j = 0, k = 0;

    while (i < arr1.length && j < arr2.length)
    {
        if (arr1[i] <= arr2[j])
        {
            result[k++] = arr1[i++];
        }
        else
        {
            result[k++] = arr2[j++];
        }
    }

    while (i < arr1.length)
        result[k++] = arr1[i++];

    while (j < arr2.length)
        result[k++] = arr2[j++];

    return result;
}