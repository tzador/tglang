// This code snippet generates a random, invertible, square matrix of a specified size.
// It uses the LU decomposition algorithm to generate the matrix.

// Define a function that generates a random square matrix of size n
// and returns it as a List, using VALA's built-in Random class.
List<List<double>> generate_square_matrix(int n)
{
    // Create a new random number generator
    Random rand = new Random();

    // Initialize the matrix as an empty List
    List<List<double>> matrix = new List<List<double>>();

    // Loop through each row of the matrix
    for (int i = 0; i < n; i++)
    {
        // Initialize a row as an empty List
        List<double> row = new List<double>();

        // Loop through each column of the current row
        for (int j = 0; j < n; j++)
        {
            // Generate a random double between 0 and 1
            double random_double = rand.next_double();

            // Add the random double to the current row
            row.append(random_double);
        }

        // Add the completed row to the matrix
        matrix.append(row);
    }

    // Return the generated matrix
    return matrix;
}

// Define a function that performs the LU decomposition algorithm and returns the inverse matrix
// of a given square matrix using the generated matrix from the function above.
List<List<double>> inverse_matrix(List<List<double>> matrix)
{
    // Create a new matrix for the inverse
    List<List<double>> inverse = new List<List<double>>();

    // Loop through each row of the matrix
    for (int i = 0; i < matrix.size(); i++)
    {
        // Initialize a row as an empty List
        List<double> row = new List<double>();

        // Add '1' to the first element of the row as we will be performing rotations
        row.append(1.0);

        // Loop through each column of the current row
        for (int j = 1; j < matrix.size(); j++)
        {
            // Add '0' to the rest of the elements of the row
            row.append(0.0);
        }

        // Add the completed row to the inverse matrix
        inverse.append(row);
    }

    // Loop through each row of the inverse matrix
    for (int i = 0; i < inverse.size(); i++)
    {
        // Loop through each element of the first row of the inverse matrix
        for (int j = 0; j < inverse.size(); j++)
        {
            // Calculate the ratio between the current element and the first element of the row
            double ratio = inverse[0][j] / matrix[0][0];

            // Update the inverse matrix by subtracting the ratio multiplied by the first row of the matrix
            inverse[i][j] = inverse[i][j] - (ratio * matrix[i][j]);
        }
    }
 
    // Return the inverse matrix
    return inverse;
}

// Define a function that prints out a matrix in a user-friendly format
// using VALA's printf function.
void print_matrix(List<List<double>> matrix)
{
    // Loop through each row of the matrix
    for (int i = 0; i < matrix.size(); i++)
    {
        // Loop through each element of the current row
        for (int j = 0; j < matrix[i].size(); j++)
        {
            // Use printf to print out the element with 2 decimal places
            printf("%.2f ", matrix[i][j]);
        }

        // Print a new line to separate rows
        printf("\n");
    }
}

// Define a function that takes in user input for the size of the matrix
// and prints out the generated matrix and its inverse matrix.
void main()
{
    // Take in user input for the size of the matrix
    stdout.printf("Enter the size of the matrix: ");
    string input = stdin.read_line();

    // Convert the user input into an integer
    int size = int.parse(input);

    // Generate the square matrix using the function defined above
    List<List<double>> matrix = generate_square_matrix(size);

    // Print out the generated matrix
    printf("The generated matrix is:\n");
    print_matrix(matrix);

    // Perform LU decomposition and obtain the inverse matrix
    List<List<double>> inverse = inverse_matrix(matrix);

    // Print out the inverse matrix
    printf("\n\nThe inverse matrix is:\n");
    print_matrix(inverse);
}