/*
This program uses a class to create and manipulate a linked list data structure.
*/

public class LinkedList<T> {
    private class Node {
        public T data;
        public Node next;
    }

    private Node head;

    public LinkedList() {
        head = null;
    }

    // Function to add data to the beginning of the linked list
    public void push(T new_data) {
        Node new_node = new Node();
        new_node.data = new_data;
        new_node.next = head;

        head = new_node;
    }

    // Function to remove data from the beginning of the linked list
    public T pop() {
        if (head == null) {
            warning ("Cannot remove data from an empty list");
        }

        T data = head.data;
        head = head.next;
        return data;
    }

    // Function to insert data at a specific index in the linked list
    public void insert(T new_data, int index) {
        if (index == 0 || head == null) {
            push(new_data);
        }
        else {
            Node new_node = new Node();
            new_node.data = new_data;
            Node current = head;
            int counter = 1;

            while (counter < index) {
                if (current.next == null) {
                    warning("Index out of bounds");
                    return;
                }
                current = current.next;
                counter++;
            }

            new_node.next = current.next;
            current.next = new_node;
        }
    }

    // Function to remove data from a specific index in the linked list
    public T remove(int index) {
        if (index == 0 || head == null) {
            return pop();
        }
        else {
            Node current = head;
            int counter = 1;

            while (counter < index) {
                if (current.next == null) {
                    warning("Index out of bounds");
                    return null;
                }
                current = current.next;
                counter++;
            }

            T data = current.next.data;
            current.next = current.next.next;
            return data;
        }
    }
}

/* 
Sample usage:
LinkedList<int> list = new LinkedList<int>();
list.push(1);
list.push(2);
list.insert(5, 1);
list.remove(0);
*/