/* This code snippet demonstrates the creation of a custom linked list data structure in VALA */

using GLib;

/** This class represents a node in the linked list **/
protected class ListNode {
    public int data;
    public ListNode? next;
    public ListNode? prev;

    /** Constructor to initialize the node **/
    public ListNode (int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

/** This class represents a custom linked list data structure **/
public class LinkedList {

    /** Private fields for keeping track of the head and tail of the list **/
    private ListNode? head;
    private ListNode? tail;

    /** Constructor to initialize the linked list **/
    public LinkedList () {
        head = null;
        tail = null;
    }

    /** Method to insert a node at the beginning of the linked list **/
    public void insertFront (int data) {
        var node = new ListNode (data);
        /** if list is empty, set head and tail to the new node **/
        if (head == null) {
            head = node;
            tail = node;
        } else {
            /** if list is not empty, add new node to the beginning and update head **/
            node.next = head;
            head.prev = node;
            head = node;
        }
    }

    /** Method to insert a node at the end of the linked list **/
    public void insertBack (int data) {
        var node = new ListNode (data);
        /** if list is empty, set head and tail to the new node **/
        if (head == null) {
            head = node;
            tail = node;
        } else {
            /** if list is not empty, add new node to the end and update tail **/
            tail.next = node;
            node.prev = tail;
            tail = node;
        }
    }

    /** Method to remove a node from the beginning of the linked list **/
    public void removeFront () {
        /** if list is empty, do nothing **/
        if (head == null) {
            stdout.printf ("List is empty\n");
            return;
        }
        /** if list has only one node, set head and tail to null **/
        if (head == tail) {
            head = null;
            tail = null;
            return;
        }
        /** else, remove the first node and update head **/
        head = head.next;
        head.prev = null;
    }

    /** Method to remove a node from the end of the linked list **/
    public void removeBack () {
        /** if list is empty, do nothing **/
        if (head == null) {
            stdout.printf ("List is empty\n");
            return;
        }
        /** if list has only one node, set head and tail to null **/
        if (head == tail) {
            head = null;
            tail = null;
            return;
        }
        /** else, remove the last node and update tail **/
        tail = tail.prev;
        tail.next = null;
    }

    /** Method to print the elements of the linked list in forward order **/
    public void printForward () {
        /** if list is empty, do nothing **/
        if (head == null) {
            stdout.printf ("List is empty\n");
            return;
        }
        /** else, print all elements **/
        var iter = head;
        while (iter != null) {
            stdout.printf ("%d ", iter.data);
            iter = iter.next;
        }
        stdout.printf ("\n");
    }

    /** Method to print the elements of the linked list in reverse order **/
    public void printReverse () {
        /** if list is empty, do nothing **/
        if (tail == null) {
            stdout.printf ("List is empty\n");
            return;
        }
        /** else, print all elements **/
        var iter = tail;
        while (iter != null) {
            stdout.printf ("%d ", iter.data);
            iter = iter.prev;
        }
        stdout.printf ("\n");
    }
}

/* Example usage of the custom linked list */
public static int main () {
    var linked_list = new LinkedList ();
    linked_list.insertFront (10); // insert 10 at the beginning
    linked_list.insertBack (5);  // insert 5 at the end
    linked_list.insertFront (15); // insert 15 at the beginning
    linked_list.insertBack (20);  // insert 20 at the end
    linked_list.printForward ();  // print elements in forward direction: 15 10 5 20
    linked_list.printReverse ();  // print elements in reverse direction: 20 5 10 15
    linked_list.removeFront ();   // remove the first element
    linked_list.removeBack ();    // remove the last element
    linked_list.printForward ();  // print elements in forward direction: 10 5
    return 0;
}