//This code snippet creates a custom doubly linked list data structure

//create a node class to hold data and links to previous and next nodes
class Node {
    //define variables to hold data and links
    private int data;
    private Node? previous;
    private Node? next;

    //constructor to initialize node with data
    public Node(int data) {
        this.data = data;
        previous = null;
        next = null;
    }
}

//create the custom doubly linked list class
class DoublyLinkedList {
    //define variables to hold head and tail nodes of the list
    private Node? head;
    private Node? tail;

    //constructor to initialize an empty list
    public DoublyLinkedList() {
        head = null;
        tail = null;
    }

    //method to check if list is empty
    private bool is_empty() {
        return head == null && tail == null;
    }

    //method to add a new node at the end of the list
    public void append(int data) {
        Node new_node = new Node(data);
        if (is_empty()) {
            head = new_node;
            tail = new_node;
        } else {
            tail.next = new_node;
            new_node.previous = tail;
            tail = new_node;
        }
    }

    //method to insert a new node at a specific index in the list
    public void insert(int data, int index) {
        //check if index is valid
        if (index < 0) {
            print("Invalid index");
            return;
        }

        //check if list is empty
        if (is_empty()) {
            append(data);
            return;
        }

        //create a new node with given data
        Node new_node = new Node(data);

        //check if index is 0, insert at the beginning of the list
        if (index == 0) {
            new_node.next = head;
            head.previous = new_node;
            head = new_node;
        } else {
            //iterate through the list to find the node at given index
            Node current = head;
            for(int i=0; i<index-1; i++) {
                //check if current node is null, index is out of bounds
                if (current == null) {
                    print("Index out of bound");
                    return;
                }
                //move to next node
                current = current.next;
            }
            //check if current node is null, index is out of bounds
            if (current == null) {
                print("Index out of bound");
                return;
            }
            //insert new node in between current and next node
            new_node.next = current.next;
            new_node.previous = current;
            current.next = new_node;
            if (new_node.next != null) {
                new_node.next.previous = new_node;
            } else {
                tail = new_node;
            }
        }
    }

    //method to display the list in forward direction
    public void display() {

        if (is_empty()) {
            print("List is empty");
        } else {
            print("List elements in forward direction:");
            Node current = head;
            while(current != null) {
                print(current.data);
                current = current.next;
            }
        }

    }

    //method to display the list in reverse direction
    public void display_reverse() {

        if (is_empty()) {
            print("List is empty");
        } else {
            print("List elements in reverse direction:");
            Node current = tail;
            while(current != null) {
                print(current.data);
                current = current.previous;
            }
        }
    }

}

//create an instance of the doubly linked list class
DoublyLinkedList list = new DoublyLinkedList();

//append nodes to the list
list.append(5);
list.append(10);
list.append(15);
list.append(20);

//insert a node at specific index
list.insert(7, 2);

//display the list in forward and reverse directions
list.display();
list.display_reverse();