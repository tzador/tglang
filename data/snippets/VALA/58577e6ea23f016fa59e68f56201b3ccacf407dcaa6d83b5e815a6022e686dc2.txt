// This is a complex code snippet in VALA, showcasing the use of class and method
// declarations, inheritance, and generics.

class Animal<T> : Object {  // declares a generic Animal class that inherits from the Object class
    private T name;  // declares a private variable of type T (to be specified when the class is instantiated)
    
    public Animal(T name) {  // constructor that initializes the name variable when an Animal object is created
        this.name = name;
    }
    
    public void make_sound() {  // method that prints the animal's name and a sound based on the type of T
        if (typeof(T) == string) {  // checks if T is a string
            print("My name is " + this.name + " and I make a loud roar!");
        } else if (typeof(T) == int) {  // checks if T is an integer
            print("My name is " + this.name + " and I make " + this.name + " loud barks!");
        } else {  // handles unexpected types for T
            print("I don't know what I am, but my name is " + this.name);
        }
    }
}

int main(string[] args) {  // main method
    Animal<string> lion = new Animal<string>("Simba");  // creates a new Animal object of type string
    lion.make_sound();  // calls the make_sound method, outputs "My name is Simba and I make a loud roar!"
    
    Animal<int> dog = new Animal<int>(3);  // creates a new Animal object of type int
    dog.make_sound();  // calls the make_sound method, outputs "My name is 3 and I make 3 loud barks!"
    
    Animal<bool> elephant = new Animal<bool>(true);  // creates a new Animal object of type bool
    elephant.make_sound();  // calls the make_sound method, outputs "I don't know what I am, but my name is True"
    
    return 0;  // ends the main method
}