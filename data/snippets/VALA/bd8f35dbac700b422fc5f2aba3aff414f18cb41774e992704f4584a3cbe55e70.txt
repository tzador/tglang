/* This is a program that creates a binary tree data structure and performs a search function on it */
void main() {
    //Create a class for the binary tree node
    public class BinaryTreeNode {
        //Variables to store data and references to child nodes
        public int data;
        public BinaryTreeNode left, right;

        //Constructor to initialize data and child nodes
        public BinaryTreeNode(int value) {
            this.data = value;
            this.left = null;
            this.right = null;
        }
    }

    //Create a class for the binary tree
    public class BinaryTree {
        //Variable to store the root node
        public BinaryTreeNode root;

        //Constructor to initialize the root node
        public BinaryTree() {
            this.root = null;
        }

        //Function to insert new node into the tree
        public void insert(int value) {
            //Create a new node
            BinaryTreeNode node = new BinaryTreeNode(value);
            //If tree is empty, set new node as root
            if (this.root == null) {
                this.root = node;
            } else {
                //Start at root
                BinaryTreeNode current = this.root;
                //Loop until correct position is found
                while (true) {
                    //If value is less than current node, check left child
                    if (value < current.data) {
                        //If left child is empty, insert node here
                        if (current.left == null) {
                            current.left = node;
                            break;
                        } else {
                            //Move to left child
                            current = current.left;
                        }
                    } else {
                        //If value is greater than or equal to current node, check right child
                        //If right child is empty, insert node here
                        if (current.right == null) {
                            current.right = node;
                            break;
                        } else {
                            //Move to right child
                            current = current.right;
                        }
                    }
                }
            }
        }

        //Function to search for a value in the tree
        public bool search(int value) {
            //Start at root
            BinaryTreeNode current = this.root;
            //Loop until value is found or end of tree is reached
            while (current != null) {
                //If value is found, return true
                if (current.data == value) {
                    return true;
                }
                //If value is less than current node, move to left child
                else if (value < current.data) {
                    current = current.left;
                }
                //If value is greater than current node, move to right child
                else {
                    current = current.right;
                }
            }
            //If value is not found, return false
            return false;
        }
    }

    //Create a new binary tree
    BinaryTree tree = new BinaryTree();

    //Insert nodes into the tree
    tree.insert(10);
    tree.insert(5);
    tree.insert(15);
    tree.insert(3);
    tree.insert(7);

    //Search for a value in the tree
    if (tree.search(7)) {
        //If value is found, print success message
        print("Value found!");
    } else {
        //If value is not found, print error message
        print("Value not found!");
    }
}