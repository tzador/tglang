// This is a complex code snippet in VALA

// Creating a class named "Complex"
class Complex : Object {
    // Private variables for real and imaginary parts
    private double real;
    private double imaginary;

    // Constructor for initializing object with given real and imaginary values
    public Complex(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }

    /* Public method to add two Complex objects and return a new Complex object 
    that contains the sum of the real and imaginary parts of the two objects */
    public Complex add(Complex c) {
        // Creating a new Complex object with sum of the real and imaginary parts
        Complex result = new Complex(this.real + c.real, this.imaginary + c.imaginary);
        // Returning the result
        return result;
    }

    /* Public method to multiply two Complex objects and return a new Complex object 
    that contains the product of the real and imaginary parts of the two objects */
    public Complex multiply(Complex c) {
        // Creating a new Complex object with product of the real and imaginary parts
        Complex result = new Complex((this.real * c.real) - (this.imaginary * c.imaginary), 
            (this.real * c.imaginary) + (this.imaginary * c.real));
        // Returning the result
        return result;
    }

    /* Overriding the toString() method to print out the complex number in the form 
    'a + bi' where 'a' is the real part and 'b' the imaginary part */
    public override string toString() {
        return "%g + %g * i".printf(this.real, this.imaginary);
    }
}

// Main function
int main(string[] args) {

    // Initializing two Complex objects
    Complex c1 = new Complex(2, 3);
    Complex c2 = new Complex(-1, 4);
    
    // Adding the two objects and printing the result
    print("Sum: " + c1.add(c2).toString());

    // Multiplying the two objects and printing the result
    print("Product: " + c1.multiply(c2).toString());

    // Output:
    // Sum: 1 + 7 * i
    // Product: -14 + 5 * i

    return 0;
}