//This is a program that solves the knapsack problem using dynamic programming

//Function to find maximum of two numbers
int max (int a, int b) {
    if (a > b)
        return a;
    else
        return b;
}

//Function to solve the knapsack problem
int knapSack (int capacity, int[] weights, int[] values, int size) {

    //Create a 2D array to store the solution
    int[,] solution = new int[size+1, capacity+1];

    //Fill the first row and column with zeros
    for (int i = 0; i <= size; i++) {
        for (int j = 0; j <= capacity; j++) {
            if (i == 0 || j == 0)
                solution[i, j] = 0;
        }
    }

    //Fill the remaining cells with the optimal solution
    for (int i = 1; i <= size; i++) {
        for (int j = 1; j <= capacity; j++) {
            //If the current item's weight is less than the capacity
            if (weights[i-1] <= j) {
                //Choose the maximum value between not including the item
                //and including the item in the knapsack
                solution[i, j] = max(values[i-1] + solution[i-1, j-weights[i-1]], solution[i-1, j]);
            }
            //If the current item's weight is more than the capacity
            else {
                //Do not include the item in the knapsack
                solution[i, j] = solution[i-1, j];
            }
        }
    }

    //Return the maximum value in the last cell of the solution array
    return solution[size, capacity];
}

//Example usage
int main () {
    //Create a knapsack with capacity of 10
    int[] weights = {2, 3, 4, 5}; //Weights of the items
    int[] values = {8, 9, 10, 12}; //Values of the items
    int capacity = 10; //Capacity of the knapsack
    int size = sizeof(weights) / sizeof(weights[0]); //Size of the knapsack

    //Find the maximum value that can be carried by the knapsack
    int max_value = knapSack(capacity, weights, values, size);

    //Print the maximum value
    print("Maximum value that can be carried is " + max_value);

    return 0;
}