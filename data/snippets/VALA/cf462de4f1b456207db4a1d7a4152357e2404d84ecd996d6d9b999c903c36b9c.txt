int main (string[] args) {
    /* This is a comment in VALA */
    
    /* Variables must be declared with a specific type, unlike in other languages like Python */
    /* In this case, we are declaring an integer variable and setting its value to 5 */
    int x = 5;
    
    /* We can also declare multiple variables at once, separating them with commas */
    int y = 10, z = 15;
    
    /* VALA also supports basic arithmetic operations */
    int sum = x + y; /* sum is now equal to 15 (5 + 10) */
    int product = y * z; /* product is now equal to 150 (10 * 15) */
    
    /* We can also reassign the value of a variable */
    sum = product; /* this assigns the value of 'sum' to be equal to 'product' (150) */
    
    /* VALA also supports comparison operators */
    bool is_equal = x == y; /* is_equal is now equal to false, since x (5) is not equal to y (10) */
    bool not_equal = x != z; /* not_equal is now equal to true, since x (5) is not equal to z (15) */
    
    /* VALA also has logical operators */
    bool and = (x == 5) && (y == 10); /* and is now equal to true, since both conditions are met */
    bool or = (x == 5) || (z == 10); /* or is now equal to true, since one of the conditions is met */
    
    /* VALA also supports conditional statements */
    if (x > y) { /* if this condition is met (which in this case it isn't), the code in the curly braces will be executed */
        print ("x is greater than y");
    } else { /* if the initial condition is not met, this code will be executed instead */
        print ("x is not greater than y");
    }
    
    /* VALA also has a shorthand if-else statement */
    string message = (y < z) ? "y is less than z" : "y is not less than z"; /* message is now equal to "y is less than z" since y (10) is less than z (15) */
    
    /* VALA also has switch statements for multiple conditional branches */
    switch (x) { /* this expression will be evaluated and the corresponding block of code will be executed based on the value of x */
        case 1: /* if x is equal to 1, this block will be executed instead of the default */
            print ("x is equal to 1");
            break; /* the break keyword tells the program to exit the switch statement and continue on with the rest of the code */
        case 2: /* if x is equal to 2, this block will be executed instead of the default */
            print ("x is equal to 2");
            break;
        default: /* if neither of the above cases are met, this block will be executed instead (since we set x to equal 5, this is the case in our code snippet) */
            print ("x is not equal to 1 or 2");
            break;
    }
    
    /* VALA also supports loops */
    int i;
    for (i = 0; i < 5; i++) { /* this loop will execute the code inside the curly braces 5 times */
        print ("%i", i); /* %i is a placeholder for an integer value, and i is the value we want to print */
    }
    
    /* VALA also supports arrays */
    string[] fruits = {"apple", "banana", "orange"}; /* this declares an array of strings with three values */
    print ("My favorite fruit is %s", fruits[0]); /* %s is a placeholder for a string value, and we are printing the first value in the array, which is "apple" */
    
    return 0; /* main function should always return an integer, and in this case, 0 is the customary return value */
}