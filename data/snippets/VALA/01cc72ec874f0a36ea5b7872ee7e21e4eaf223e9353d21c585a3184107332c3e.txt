// This is a complex class that implements a doubly linked list

// Define the Node class for each element in the list
class Node {
    public Node next; // Pointer to next element in the list
    public Node prev; // Pointer to previous element in the list
    public int data; // Data value stored in the node
}

// Define the DoublyLinkedList class to manage the list
class DoublyLinkedList {
    private Node head; // Pointer to first element in the list
    private Node tail; // Pointer to last element in the list
    private int size; // Size of the list

    // Constructor to initialize an empty list
    public DoublyLinkedList () {
        head = null;
        tail = null;
        size = 0;
    }

    // Method to add a new element to the beginning of the list
    public void prepend (int value) {
        Node new_node = new Node (); // Create a new node
        new_node.data = value; // Set data value
        new_node.next = head; // Point new node to current head
        new_node.prev = null; // Point new node's previous to null
        head.prev = new_node; // Point current head's previous to new node
        head = new_node; // Set new node as the new head
        size++; // Increment size of the list
    }

    // Method to add a new element to the end of the list
    public void append (int value) {
        Node new_node = new Node (); // Create a new node
        new_node.data = value; // Set data value
        new_node.next = null; // Point new node's next to null
        new_node.prev = tail; // Point new node's previous to current tail
        tail.next = new_node; // Point current tail's next to new node
        tail = new_node; // Set new node as the new tail
        size++; // Increment size of the list
    }

    // Method to insert a new element at a specific index in the list
    public void insert_at (int value, int index) {
        if (index > size) {
            // Index out of bounds error
            return;
        } else if (index == 0) {
            // Insert at beginning of list
            prepend (value);
        } else if (index == size) {
            // Insert at end of list
            append (value);
        } else {
            // Insert at specified index
            Node new_node = new Node (); // Create a new node
            new_node.data = value; // Set data value
            Node current = head; // Pointer to traverse the list
            int count = 0;
            // Find the node at the specified index
            while (count < index) {
                current = current.next;
                count++;
            }
            new_node.next = current; // Point new node's next to current node
            new_node.prev = current.prev; // Point new node's previous to current node's previous
            current.prev.next = new_node; // Point current node's previous next to new node
            current.prev = new_node; // Point current node's previous to new node
            size++; // Increment size of the list
        }
    }

    // Method to remove an element at a specific index in the list
    public void remove_at (int index) {
        if (index >= size) {
            // Index out of bounds error
            return;
        } else if (index == 0) {
            // Remove first element in the list
            head = head.next;
            head.prev = null;
            size--; // Decrement size of the list
        } else if (index == size-1) {
            // Remove last element in the list
            tail = tail.prev;
            tail.next = null;
            size--; // Decrement size of the list
        } else {
            // Remove element at specified index
            Node current = head; // Pointer to traverse the list
            int count = 0;
            // Find the node at the specified index
            while (count < index) {
                current = current.next;
                count++;
            }
            current.prev.next = current.next; // Point previous node's next to next node
            current.next.prev = current.prev; // Point next node's previous to previous node
            size--; // Decrement size of the list
        }
    }

    // Method to get the size of the list
    public int get_size () {
        return size;
    }

    // Method to get the data value at a specific index in the list
    public int get_data (int index) {
        if (index >= size) {
            // Index out of bounds error
            return -1;
        }

        Node current = head; // Pointer to traverse the list
        int count = 0;
        // Find the node at the specified index
        while (count < index) {
            current = current.next;
            count++;
        }
        // Return the data value at the specified index
        return current.data;
    }
}