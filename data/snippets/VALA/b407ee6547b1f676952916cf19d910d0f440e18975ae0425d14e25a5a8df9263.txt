/* This code snippet creates a custom widget that displays a list of data items in a tree view and allows the user to dynamically filter the data based on specific criteria. */

using Gtk;

public class FilterTreeView : Gtk.TreeView {
    // create a new list model with string values
    private Gtk.ListStore store = new Gtk.ListStore(typeof(string));

    // create a tree view column
    private Gtk.TreeViewColumn column = new Gtk.TreeViewColumn();

    // create a cell renderer
    private Gtk.CellRendererText renderer = new Gtk.CellRendererText();

    // create a filter model
    private Gtk.TreeModelFilter filter = new Gtk.TreeModelFilter(null);

    // create a horizontal box container
    private Gtk.HBox hbox = new Gtk.HBox();

    // create a label for filter text
    private Gtk.Label filter_label = new Gtk.Label("Filter Text:");

    // create an entry field for filter text
    private Gtk.Entry filter_entry = new Gtk.Entry();

    // constructor
    public FilterTreeView() {
        // add columns to the tree view
        this.append_column(this.column);

        // add cell renderer to column
        this.column.pack_start(this.renderer, true);

        // set data function for cell renderer
        this.column.set_cell_data_func(this.renderer, this.column_data_func);

        // set filter function for filter model
        this.filter.set_visible_func(this.filter_func);

        // bind filter entry to filter function
        this.filter_entry.bind("changed", this.on_filter_changed);

        // add label and entry to horizontal box
        this.hbox.pack_start(this.filter_label, false, false, 0);
        this.hbox.pack_start(this.filter_entry, true, true, 0);

        // add horizontal box to top of widget
        this.add(this.hbox);
    }

    // custom data function for tree view column
    private void column_data_func(Gtk.TreeViewColumn column, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter) {
        // get data item from list store
        string data = (string)model.get_value(iter, 0);

        // set text for cell renderer
        ((Gtk.CellRendererText)renderer).text = data;
    }

    // custom filter function for filter model
    private bool filter_func(Gtk.TreeModel model, Gtk.TreeIter iter) {
        // get filter string from filter entry
        string filter = this.filter_entry.get_text().lower();

        // get data item from list store
        string data = (string)model.get_value(iter, 0);

        // return whether data contains filter string
        return data.lower().contains(filter);
    }

    // event handler for when filter entry changes
    private void on_filter_changed(Gtk.Entry entry) {
        // update the filter model
        this.filter.refilter();
    }
}