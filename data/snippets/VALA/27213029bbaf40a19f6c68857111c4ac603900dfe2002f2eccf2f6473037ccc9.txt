/* Vala example class */

public class Example : Object {

    // private field
    private int integer_field;

    // public property
    public string String_property { get; set; }

    // constructor
    public Example (int integer, string str) {
        integer_field = integer;
        String_property = str;
    }

    // private method
    private int multiplication (int a, int b) {
        return a * b;
    }

    // public method
    public void print_properties () {
        stdout.printf ("Integer field: %d and String property: %s\n", integer_field, String_property);
    }

    // interface implementation
    public int Multiply (int a, int b) {
        // using the private method
        int result = multiplication (a, b);
        // printing the result
        stdout.printf ("Multiplication result: %d\n", result);
        return result;
    }
    
}

public class AnotherExample : Example, MultiplicationInterface {
    // child class that inherits from Example class and implements MultiplicationInterface

    // public method that overrides parent class method
    public override void print_properties () {
        // calling parent class method
        base.print_properties ();
        // printing extra message
        stdout.printf ("This is the child class with overridden method\n");
    }
    
    // interface implementation
    public int Multiply (int a, int b) {
        // using parent class method
        int result = base.Multiply (a, b);
        // printing extra message
        stdout.printf ("Multiplication result from parent class: %d\n", result);
        return result;
    }
    
}

// main program
void main () {
    // creating objects of Example and AnotherExample class
    var example = new Example (2, "Hello");
    var another_example = new AnotherExample ();

    // calling public methods of Example class
    example.print_properties ();

    // calling public methods of AnotherExample class
    another_example.print_properties ();

    // using interface methods
    example.Multiply (5, 3);
    another_example.Multiply (4, 7);

}