/** Example of a custom linked list data structure in VALA */
class LinkedList<T> : Object {
    public class Node<T> {
        public T data;
        public Node<T>? next;

        public Node(T data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node<T>? head;

    /** Add a new node to the beginning of the linked list */
    public void add_front(T data) {
        Node<T> new_node = new Node<T>(data);

        if (this.head == null) {
            this.head = new_node;
        } else {
            new_node.next = this.head;
            this.head = new_node;
        }
    }

    /** Add a new node to the end of the linked list */
    public void add_back(T data) {
        Node<T> new_node = new Node<T>(data);

        if (this.head == null) {
            this.head = new_node;
        } else {
            Node<T>? current = this.head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = new_node;
        }
    }

    /** Remove the first occurrence of the given data from the linked list */
    public void remove(T data) {
        if (this.head == null) {
            return;
        }

        if (this.head.data == data) {
            this.head = this.head.next;
            return;
        }

        Node<T>? current = this.head;
        while (current.next != null) {
            if (current.next.data == data) {
                current.next = current.next.next;
                return;
            }
            current = current.next;
        }
    }

    /** Get the size of the linked list */
    public int size() {
        int count = 0;
        Node<T>? current = this.head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }
}