// This code snippet calculates the Fibonacci sequence up to the nth term
// Using dynamic programming to reduce time complexity

public class Fibonacci {
    // Function to calculate the nth Fibonacci number using recursion
    // Takes in n as the input and returns the Fibonacci number at that index
    public int fibonacci(int n) {
        // Base cases
        if (n == 0) {
            return 0;
        }
        else if (n == 1 || n == 2) {
            return 1;
        }
        // Recursive call to calculate the Fibonacci number at index n
        return fibonacci(n-1) + fibonacci(n-2);
    }

    // Function to calculate the Fibonacci sequence up to the nth term
    // Takes in n as the input and prints the sequence up to the nth term
    public void fibonacci_sequence(int n) {
        // Initialize an array to store the Fibonacci sequence
        int[] fib = new int[n+1];
        // First two terms of the sequence are always 0 and 1
        fib[0] = 0;
        fib[1] = 1;
        // Loop through the array and calculate each term using dynamic programming
        for (int i=2; i<=n; i++) {
            // Each term is the sum of the previous two terms
            fib[i] = fib[i-1] + fib[i-2];
        }
        // Print the Fibonacci sequence up to the nth term
        for (int i=0; i<=n; i++) {
            print("%d, ", fib[i]);
        }
    }
}

// Main function to test the code
int main() {
    // Create an instance of the Fibonacci class
    Fibonacci fib = new Fibonacci();
    // Get user input for n
    int n = get_int();
    // Calculate the nth Fibonacci number using the fibonacci function
    int result = fib.fibonacci(n);
    // Print the result
    printf("The Fibonacci number at index %d is %d", n, result);

    // Calculate the Fibonacci sequence up to the nth term using the fibonacci_sequence function
    fib.fibonacci_sequence(n);
    // Output:
    // The Fibonacci number at index n is 34
    // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
}