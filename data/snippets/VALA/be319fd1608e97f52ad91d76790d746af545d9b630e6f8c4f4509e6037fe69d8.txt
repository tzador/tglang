// Class for creating and manipulating a binary search tree
public class BST {
    // Private class for creating tree nodes
    private class Node {
        public int data;
        public Node left, right;
    }

    // Private data member representing the root of the tree
    private Node root = null;

    /**
     * Method to insert a new node in the binary search tree
     * @param data the data to be inserted
     * @returns true if the insertion is successful, false otherwise
     */
    public bool insert(int data) {
        // Create a new node and assign data to it
        Node newNode = new Node();
        newNode.data = data;
        newNode.left = null;
        newNode.right = null;

        // If the tree is empty, set this node as the root
        if (root == null) {
            root = newNode;
            return true;
        }

        // Else, find the appropriate position for the new node
        Node current = root;
        while (true) {
            // If the data is smaller than the current node, go to the left subtree
            if (data < current.data) {
                // If there is no left subtree, insert the new node as the left child of the current node
                if (current.left == null) {
                    current.left = newNode;
                    return true;
                } else { // Else, move to the next node in the left subtree
                    current = current.left;
                }
            // If the data is larger than the current node, go to the right subtree
            } else if (data > current.data) {
                // If there is no right subtree, insert the new node as the right child of the current node
                if (current.right == null) {
                    current.right = newNode;
                    return true;
                } else { // Else, move to the next node in the right subtree
                    current = current.right;
                }
            // If the data already exists in the tree, return false
            } else {
                return false;
            }
        }
    }

    /**
     * Method to search for a specific data in the binary search tree
     * @param data the data to be searched for
     * @returns true if the data is found, false otherwise
     */
    public bool search(int data) {
        // If the tree is empty, return false
        if (root == null) {
            return false;
        }

        // Else, start searching from the root
        Node current = root;
        while (current != null) {
            // If the data is found, return true
            if (current.data == data) {
                return true;
            // If the data is smaller than the current node, search in the left subtree
            } else if (data < current.data) {
                current = current.left;
            // If the data is larger than the current node, search in the right subtree
            } else {
                current = current.right;
            }
        }

        // If the data is not found, return false
        return false;
    }
}