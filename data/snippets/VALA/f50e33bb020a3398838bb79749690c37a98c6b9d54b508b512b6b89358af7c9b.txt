/* 
This code snippet creates a Matrix class and implements basic matrix operations in VALA language
*/

// Define Matrix class with private variables
class Matrix {
    private int rows;
    private int columns;
    private int[][] data;

    // Constructor to initialize the matrix with given dimensions
    public Matrix(int r, int c) {
        rows = r;
        columns = c;

        // Create 2D array with given dimensions
        data = new int[r][c];
    }

    // Method to set value at given index in the matrix
    public void set(int value, int row, int column) {
        data[row][column] = value;
    }

    // Method to get value at given index in the matrix
    public int get(int row, int column) {
        return data[row][column];
    }

    // Method to add two matrices and return the result
    public Matrix add(Matrix other) {

        // Create new matrix with same dimensions as current matrix
        Matrix result = new Matrix(rows, columns);

        // Loop through each element and add the corresponding elements from both matrices
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.data[i][j] = this.data[i][j] + other.data[i][j];
            }
        }

        // Return the resulting matrix
        return result;
    }

    // Method to multiply two matrices and return the result
    public Matrix multiply(Matrix other) {

        // Create new matrix with dimensions of first matrix's rows and second matrix's columns
        Matrix result = new Matrix(rows, other.columns);

        // Loop through each element and perform dot product of corresponding rows and columns
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.columns; j++) {
                int sum = 0;
                for (int k = 0; k < columns; k++) {
                    sum += this.data[i][k] * other.data[k][j];
                }
                result.data[i][j] = sum;
            }
        }

        // Return the resulting matrix
        return result;
    }

    // Method to print the matrix in a readable format
    public void print() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                print ("%d ", data[i][j]);
            }
            print ("\n");
        }
    }
}

// Example usage of Matrix class
void main() {
    // Create two matrices with the desired dimensions
    Matrix matrix1 = new Matrix(3, 3);
    Matrix matrix2 = new Matrix(3, 3);

    // Set values in the first matrix
    matrix1.set(2, 0, 0);
    matrix1.set(3, 0, 1);
    matrix1.set(4, 0, 2);
    matrix1.set(5, 1, 0);
    matrix1.set(6, 1, 1);
    matrix1.set(7, 1, 2);
    matrix1.set(8, 2, 0);
    matrix1.set(9, 2, 1);
    matrix1.set(10, 2, 2);

    // Set values in the second matrix
    matrix2.set(1, 0, 0);
    matrix2.set(-2, 0, 1);
    matrix2.set(3, 0, 2);
    matrix2.set(4, 1, 0);
    matrix2.set(5, 1, 1);
    matrix2.set(6, 1, 2);
    matrix2.set(7, 2, 0);
    matrix2.set(8, 2, 1);
    matrix2.set(9, 2, 2);

    // Print the first matrix
    print ("Matrix 1:\n");
    matrix1.print();

    // Print the second matrix
    print ("Matrix 2:\n");
    matrix2.print();

    // Add the two matrices and print the result
    print ("Sum of matrix 1 and matrix 2:\n");
    Matrix sum = matrix1.add(matrix2);
    sum.print();

    // Multiply the two matrices and print the result
    print ("Product of matrix 1 and matrix 2:\n");
    Matrix product = matrix1.multiply(matrix2);
    product.print();
}