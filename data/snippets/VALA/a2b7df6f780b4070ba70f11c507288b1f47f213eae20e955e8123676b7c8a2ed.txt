/** 
* This is a complex code snippet in VALA
* It demonstrates a custom data structure called "Vector" 
*/

public class Vector {
    
    // Class variables
    private int[] values; // Array to store values
    private int size; // Number of elements in vector

    // Class constructor
    public Vector() {
        values = new int[10]; // Initialize array with size of 10
        size = 0; // Initialize size to 0
    }

    // Method to add a value to the vector
    public void add(int value) {
        // Check if vector is full, if so, resize array
        if (size == values.length) {
            resize();
        }
        
        // Add value to end of vector
        values[size] = value;
        size++;
    }

    // Method to get the value at a specific index in the vector
    public int get(int index) {
        // Check if index is within vector range
        if (index < 0 || index >= size) {
            // Throw an error if index is out of range
            throw new Error("Index out of range!");
        }
        
        // Return value at specified index
        return values[index];
    }

    // Method to resize the vector array
    private void resize() {
        // Create a new array with double the size of current array
        int[] temp = new int[values.length * 2];

        // Copy values from current array to new array
        for (int i = 0; i < size; i++) {
            temp[i] = values[i];
        }

        // Replace current array with new array
        values = temp;
    }

    // Method to print the vector
    public void print() {
        // Loop through values and print each element
        for (int i = 0; i < size; i++) {
            print("%i ", values[i]);
        }

        // Add a new line at the end
        print("\n");
    }

    // Main method to test the vector
    public static int main() {
        // Create a new vector object
        Vector vec = new Vector();

        // Add some values to vector
        vec.add(5);
        vec.add(10);
        vec.add(15);
        vec.add(20);

        // Print vector
        vec.print();

        // Get the value at index 2
        int value = vec.get(2);

        // Print value
        print("Value at index 2: %i\n", value);

        // End program
        return 0;
    }
}