/*
This code snippet is a simple program that implements a hash table data structure using the VALA programming language. The program creates a hash table with 1000 elements, inserts 5 key-value pairs, and then retrieves a value by its key.
*/

// Define hash table class
class HashTable<KeyType, ValueType> {
    // Use arrays for storing key-value pairs
    private HashEntry<KeyType, ValueType>[] table;

    // Constructor
    public HashTable() {
        // Initialize table with 1000 elements
        this.table = new HashEntry[1000];
    }

    // Define hash function for finding index
    private int computeIndex(KeyType key) {
        // Calculate hash code
        int hash = key.get_hash() % 1000;

        // If hash is negative, make it positive
        if (hash < 0) {
            hash *= -1;
        }

        // Return index within table size
        return hash % table.length;
    }

    // Define insert method
    public void insert(KeyType key, ValueType value) {
        // Get index from key using hash function
        int index = computeIndex(key);

        // Check if index is already occupied
        if (this.table[index] != null) {
            // If occupied, go to next available index
            while (this.table[index] != null) {
                index++;

                // Wrap around to start of table if necessary
                if (index >= this.table.length) {
                    index = 0;
                }
            }
        }

        // Once free index is found, insert key-value pair
        this.table[index] = new HashEntry<KeyType, ValueType>(key, value);
    }

    // Define retrieve method
    public ValueType retrieve(KeyType key) {
        // Get index from key using hash function
        int index = computeIndex(key);

        // Keep track of number of loops to prevent infinite loop
        int loops = 0;

        // Check if index has the correct key-value pair
        if (this.table[index] != null
                && this.table[index].get_key() == key) {
            // Return value if found
            return this.table[index].get_value();
        }

        // If not found, check next available index until key is found
        while (this.table[index] != null
                && this.table[index].get_key() != key) {
            index++;

            // Wrap around to start of table if necessary
            if (index >= this.table.length) {
                index = 0;
            }

            // Prevent infinite loop by tracking number of iterations
            loops++;

            // If looped through entire table, key is not present
            if (loops >= this.table.length) {
                return null;
            }
        }

        // Return value if key is found
        return this.table[index].get_value();
    }
}

// Define class for key-value pair
class HashEntry<KeyType, ValueType> {
    // Store key and value
    private KeyType key;
    private ValueType value;

    // Constructor
    public HashEntry(KeyType key, ValueType value) {
        // Assign key and value
        this.key = key;
        this.value = value;
    }

    // Getters and setters for key and value
    public KeyType get_key() {
        return this.key;
    }

    public void set_key(KeyType key) {
        this.key = key;
    }

    public ValueType get_value() {
        return this.value;
    }

    public void set_value(ValueType value) {
        this.value = value;
    }
}

// Main function
int main(string[] args) {
    // Create new hash table
    HashTable<int, string> ht = new HashTable<int, string>();

    // Insert 5 key-value pairs
    ht.insert(1, "one");
    ht.insert(2, "two");
    ht.insert(3, "three");
    ht.insert(4, "four");
    ht.insert(5, "five");

    // Retrieve value for key 3
    string value = ht.retrieve(3);

    // Print retrieved value
    print(value+"\n");

    // Output: three

    // End program
    return 0;
}