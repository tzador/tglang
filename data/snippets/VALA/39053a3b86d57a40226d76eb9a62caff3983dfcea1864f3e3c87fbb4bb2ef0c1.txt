using GLib;

/** 
 * This is a class demonstrating the use of generics in VALA.
 * It contains a method that accepts a generic type T
 * and uses GLib's hashtable to store and retrieve values.
*/
public class GenericDemo<T> {

    /** 
     * This method takes in a value of type T and stores it in a hashtable.
     * It then retrieves the value and returns it.
     * @param value the value of type T to be stored
     * @return the retrieved value of type T
    */
    public T store_and_return(T value) {
        HashTable<string, T> hashtable = new HashTable<string, T>(GLib.string_hash, GLib.string_equal);

        // store the value in the hashtable
        hashtable.add("value", value);

        // retrieve the value from the hashtable
        T retrieved_value = hashtable["value"];

        return retrieved_value;
    }
}

/** 
 * This is a main method to test the GenericDemo class.
 * It creates an instance of GenericDemo with type string
 * and calls the store_and_return method with a string value.
 * It then prints the retrieved value to the console.
*/
public static int main(string[] args) {
    GenericDemo<string> demo = new GenericDemo<string>();
    string value = "This is a string value";

    // call the store_and_return method
    string retrieved_value = demo.store_and_return(value);

    // print the retrieved value to the console
    stdout.printf("Retrieved value: %s", retrieved_value);

    return 0;
}