/* This code snippet is a sorting algorithm implemented in VALA */

/* Define a function to perform the sorting algorithm */
public static void quick_sort<T> (T[] array, int lo, int hi)
{
    /* Set up the indexes for the partitioning step */
    var i = lo;
    var j = hi;

    /* Choose a pivot element */
    var pivot = array[(lo + hi) / 2];

    /* Begin partitioning step */
    while (i <= j) {

        /* Find a value on the left side that should be on the right side */
        while (array[i] < pivot) {
            i++;
        }

        /* Find a value on the right side that should be on the left side */
        while (array[j] > pivot) {
            j--;
        }

        /* Swap the values if they are in the wrong partition */
        if (i <= j) {
            var temp = array[i];
            array[i++] = array[j];
            array[j--] = temp;
        }
    }

    /* Recursively sort the two partitions */
    if (lo < j) {
        quick_sort(array, lo, j);
    }

    if (i < hi) {
        quick_sort(array, i, hi);
    }
}

/* Create an example array and call the quick_sort function */
var array = {4, 2, 6, 8, 1, 3, 5, 7};
quick_sort(array, 0, array.length - 1);