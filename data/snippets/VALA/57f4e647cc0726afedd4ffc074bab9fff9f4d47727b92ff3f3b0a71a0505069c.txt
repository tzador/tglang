// Define an interface
interface Drawable : GLib.Object {

    // Declare a method that returns a boolean
    public abstract bool draw (Cairo.Context cr);

    // Declare a property with a getter and a setter
    public abstract uint width { get; set; }

    // Declare a signal
    [Signal]
    public void shape_changed ();

    // Declare a delegate
    [CCode (has_target = false)]
    public delegate void RenderFunc (Drawable drawable, Cairo.Context cr);

    // Declare a generic class
    [CCode (generic = true)]
    public class Rectangle<T1, T2> : GLib.Object where T1 : double, T2 : bool {

        // Declare a property with a private setter
        public double height { get; private set; }

        // Declare a constructor with optional parameters
        public Rectangle (double width = 0, double height = 0) {
            this.width = width;
            this.height = height;
        }

        // Declare a method with a generic return type
        public T1 calculate_area<T3> (T3 x, T3 y) where T3 : uint {
            return x * y;
        }

        // Declare an override method with parameters
        public override bool draw (Cairo.Context cr) {
            cairo_set_source_rgb (cr, 1, 1, 1);
            cairo_rectangle (cr, 0, 0, width, height);
            cairo_fill (cr);
            return true;
        }

        // Declare a static method
        [CCode (has_target = false)]
        public static void print_info (Rectangle<double, bool> rect) {
            stdout.printf ("Width: %f \nHeight: %f", rect.width, rect.height);
        }

        // Declare a destructor
        ~Rectangle () {
            stdout.printf ("Rectangle object destroyed");
        }
    }
}

// Create an instance of the Rectangle class
var rect = Rectangle<double, bool> (10, 5);

// Call the calculate_area method and store the returned value in a variable
uint area = rect.calculate_area<uint> (10, 5);

// Print the area
stdout.printf ("Area: %u", area);