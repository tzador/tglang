/* This code snippet demonstrates a complex Vala program
   that uses multiple classes, inheritance, and interfaces */

// Define a base class for animals
class Animal {
    protected string name;
    protected int age;

    // Constructor that takes in and stores name and age
    public Animal (string name, int age) {
        this.name = name;
        this.age = age;
    }

    // Method to get the name of the animal
    public string get_name () {
        return this.name;
    }
}

// Define a class for dogs that inherits from Animal and implements the interface Mammal
class Dog: Animal, Mammal {
    private string breed;

    // Constructor that takes in and stores name, age, and breed
    public Dog (string name, int age, string breed) : base (name, age) {
        this.breed = breed;
    }

    // Method to get the breed of the dog
    public string get_breed () {
        return this.breed;
    }

    // Implementation of the talk method in the Mammal interface
    public void talk () {
        print ("Woof!");
    }

    // Implementation of the walk method in the Mammal interface
    public void walk (int steps) {
        print ("The dog walked" + steps + "steps.");
    }
}

// Define an interface for Mammals
interface Mammal {
    // Define abstract methods for talk and walk
    public abstract void talk ();
    public abstract void walk (int steps);
}

// Main method
int main () {
    // Create a dog object
    var dog = new Dog("Max", 5, "Labrador");

    // Print out details of the dog
    print ("Name: " + dog.get_name ());
    print ("Age: " + dog.age); // Protected field can be accessed by derived class
    print ("Breed: " + dog.get_breed ());

    // Make the dog talk and walk
    dog.talk ();
    dog.walk (10);

    return 0;
}