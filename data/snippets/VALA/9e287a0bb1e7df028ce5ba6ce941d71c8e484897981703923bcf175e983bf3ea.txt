/*
This is a multi-line comment in VALA programming language.
It can span multiple lines and is used to provide additional information about the code.
*/

// This is a single line comment in VALA programming language, it is used to provide a short explanation of the code.


// Creating a class named Employee
class Employee {
    // Private members of the class
    private string name;
    private int age;
    private string department;
    private string position;

    // Constructor for the class
    public Employee (string name, int age, string department, string position) {
        this.name = name;
        this.age = age;
        this.department = department;
        this.position = position;
    }

    // Function to print employee information
    public void print_info() {
        stdout.printf("Employee name: %s \n", this.name);
        stdout.printf("Employee age: %d \n", this.age);
        stdout.printf("Employee department: %s \n", this.department);
        stdout.printf("Employee position: %s \n", this.position);
    }

    // Function to check if employee is eligible for bonus
    public bool is_eligible_for_bonus() {
        if (this.department == "Sales" && this.age >= 30) {
            return true;
        } else {
            return false;
        }
    }
}

// Creating instances of the Employee class
Employee emp1 = new Employee("John Smith", 35, "Sales", "Manager");
Employee emp2 = new Employee("Jane Johnson", 25, "HR", "Executive");

// Calling the print_info function for each employee
emp1.print_info();
emp2.print_info();

// Checking if employees are eligible for bonus
if (emp1.is_eligible_for_bonus()) {
    stdout.printf("%s is eligible for bonus! \n", emp1.name);
} else {
    stdout.printf("%s is not eligible for bonus. \n", emp1.name);
}

if (emp2.is_eligible_for_bonus()) {
    stdout.printf("%s is eligible for bonus! \n", emp2.name);
} else {
    stdout.printf("%s is not eligible for bonus. \n", emp2.name);
}