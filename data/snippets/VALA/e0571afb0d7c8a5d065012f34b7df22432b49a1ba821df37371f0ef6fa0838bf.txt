// This code snippet uses an abstract class to create a custom ArrayList data structure.

// Create abstract class ArrayList with a generic type parameter
abstract class ArrayList<T> {

    // Private member variables
    private T[] data; // stores the elements in the ArrayList
    private int size; // tracks the number of elements in the ArrayList
    private int capacity; // tracks the current capacity of the ArrayList

    // Constructor that initializes the ArrayList with a specified size
    public ArrayList(int initial_size) {
        // initialize private variables
        data = new T[initial_size];
        size = 0;
        capacity = initial_size;
    }

    // Method to add an element to the ArrayList at a specified index
    public void add(int index, T element) {
        // Check if the index is valid
        if (index < 0 || index > size) {
            // Throw an IndexOutOfBoundsException if index is invalid
            throw new IndexOutOfBoundsException("Index is out of range.");
        }

        // Check if the ArrayList is at maximum capacity
        if (size == capacity) {
            // Call the expand method to double the capacity
            expand();
        }

        // Shift all elements after the specified index to the right by one position
        for (int i = size - 1; i >= index; i--) {
            data[i + 1] = data[i];
        }

        // Insert the new element at the specified index
        data[index] = element;

        // Increment the size of the ArrayList
        size++;
    }

    // Method to remove an element from the ArrayList at a specified index
    public T remove(int index) {
        // Check if the index is valid
        if (index < 0 || index >= size) {
            // Throw an IndexOutOfBoundsException if index is invalid
            throw new IndexOutOfBoundsException("Index is out of range.");
        }

        // Store the element to be removed in a temporary variable
        T removed_element = data[index];

        // Shift all elements after the specified index to the left by one position
        for (int i = index; i < size - 1; i++) {
            data[i] = data[i + 1];
        }

        // Set the last element to null
        data[size - 1] = null;

        // Decrement the size of the ArrayList
        size--;

        // Check if the ArrayList is at less than half capacity
        if (size < capacity / 2) {
            // Call the shrink method to halve the size of the ArrayList
            shrink();
        }

        // Return the removed element
        return removed_element;
    }

    // Method to expand the capacity of the ArrayList
    private void expand() {
        // Create a new array with double the capacity of the original
        T[] new_data = new T[capacity * 2];

        // Copy all elements from the original array to the new array
        for (int i = 0; i < size; i++) {
            new_data[i] = data[i];
        }

        // Set the new array as the data for the ArrayList
        data = new_data;

        // Update the capacity of the ArrayList
        capacity = capacity * 2;
    }

    // Method to shrink the size of the ArrayList
    private void shrink() {
        // Create a new array with half the capacity of the original
        T[] new_data = new T[capacity / 2];

        // Copy all elements from the original array to the new array
        for (int i = 0; i < size; i++) {
            new_data[i] = data[i];
        }

        // Set the new array as the data for the ArrayList
        data = new_data;

        // Update the capacity of the ArrayList
        capacity = capacity / 2;
    }

    // Method to get the element from the ArrayList at a specified index
    public T get(int index) {
        // Check if the index is valid
        if (index < 0 || index >= size) {
            // Throw an IndexOutOfBoundsException if index is invalid
            throw new IndexOutOfBoundsException("Index is out of range.");
        }

        // Return the element at the specified index
        return data[index];
    }

    // Method to set the element at a specified index in the ArrayList
    public void set(int index, T element) {
        // Check if the index is valid
        if (index < 0 || index >= size) {
            // Throw an IndexOutOfBoundsException if index is invalid
            throw new IndexOutOfBoundsException("Index is out of range.");
        }

        // Set the element at the specified index to the new element
        data[index] = element;
    }

    // Method to clear the ArrayList
    public void clear() {
        // Set all elements to null and size to 0
        for (int i = 0; i < size; i++) {
            data[i] = null;
        }
        size = 0;
    }

    // Method to get the size of the ArrayList
    public int size() {
        return size;
    }

    // Method to check if the ArrayList is empty
    public bool isEmpty() {
        return size == 0;
    }
}

// Create subclass StringArrayList that inherits from ArrayList
class StringArrayList : ArrayList<string> {

    // Constructor that calls the parent class constructor with initial size of 10
    public StringArrayList() : base(10) {
        // No need to implement anything since parent class constructor already initializes the variables
    }

    // Method to concatenate all strings in the ArrayList and return a single string
    public string toString() {
        // Create a variable to store the concatenated string
        string concatenated_string = "";

        // Loop through all elements in the ArrayList and concatenate them to the string
        for (int i = 0; i < size(); i++) {
            concatenated_string += get(i);
        }

        // Return the concatenated string
        return concatenated_string;
    }
}

// Create an instance of StringArrayList
var list = new StringArrayList();

// Add elements to the list
list.add(0, "Hello, ");
list.add(1, "world!");
list.add(2, "This is a long and complex ");
list.add(3, "code snippet ");
list.add(4, "in the VALA programming language!");

// Remove an element from the list
list.remove(4);

// Print the size of the list
print("Size of list is: ${list.size()}");

// Set an element at a specified index in the list
list.set(3, "snippet of code ");

// Clear the list
list.clear();

// Check if list is empty
if (list.isEmpty()) {
    // Print a message if list is empty
    print("List is empty.");
}