// This code snippet generates random square matrices of size n

/*
This function takes in an integer n as its parameter
and returns a 2D array filled with random integers between 1 and 10. 
The first for loop generates the rows of the matrix and the second for loop
generates the columns. 
The random numbers are generated using the g_random_int() function from the GLib library.
*/ 
int[][] generate_matrix(int n) {
    int[][] matrix = new int[n][n]; // initialize 2D array with size n
    for (int i = 0; i < n; i++) { // iterate through rows
        for (int j = 0; j < n; j++) { // iterate through columns
            matrix[i][j] = GLib.Math.g_random_int_range(1,10); // generates random integer between 1 and 10
        }
    }
    return matrix; // return the randomly generated matrix
}

/*
This function takes in a 2D array as its parameter
and prints out the matrix in a visually appealing format.
The first for loop generates the rows of the matrix and the second for loop
generates the columns.
The string formatting is done using the sprintf() function from the GLib library.
*/ 
void print_matrix(int[][] matrix) {
    for (int i = 0; i < matrix.length; i++) { // iterate through rows
        for (int j = 0; j < matrix[i].length; j++) { // iterate through columns
            string row = ""; // initialize string to store row
            for (int k = 0; k < matrix[i].length; k++) { // iterate through elements in row
                // format each element with 3 digits and add to string
                row += sprintf("%3d", matrix[i][k]);
            }
            // print the row with proper spacing between each element
            stdout.printf("%s\n", row);
        }
    }
}

/*
This function takes in two 2D arrays as its parameters
and performs matrix multiplication on them.
The result is stored in a new 2D array.
The first for loop generates the rows of the first matrix and the second for loop
generates the columns of the second matrix.
The inner for loop multiplies the corresponding elements in the rows and columns,
and adds the result to the corresponding element in the result matrix.
*/ 
int[][] multiply_matrices(int[][] matrix1, int[][] matrix2) {
    int[][] result = new int[matrix1.length][matrix2[0].length]; // initialize result matrix
    for (int i = 0; i < matrix1.length; i++) { // iterate through rows of first matrix
        for (int j = 0; j < matrix2[0].length; j++) { // iterate through columns of second matrix
            // initialize sum for current element in result matrix
            int sum = 0;
            for (int k = 0; k < matrix1[0].length; k++) { // iterate through elements in row of first matrix and column of second matrix
                sum += matrix1[i][k] * matrix2[k][j]; // multiply and add to sum
            }
            result[i][j] = sum; // store result in corresponding element in result matrix
        }
    }
    return result; // return the multiplied matrix
}