// This is a program that creates a custom linked list

// Define a Node class
public class Node {
  public int data;
  public Node next_node;

  // Constructor to initialize node
  public Node(int data) {
    this.data = data;
    this.next_node = null;
  }
}

// Define a Linked List class
public class LinkedList {
  public Node head;

  // Constructor to initialize linked list
  public LinkedList(int data) {
    this.head = new Node(data);
  }

  // Function to insert a node at the beginning
  public void insert_front(int data) {
    Node new_node = new Node(data);
    new_node.next_node = this.head;
    this.head = new_node;
  }

  // Function to insert a node at the end
  public void insert_end(int data) {
    Node new_node = new Node(data);
    Node current = this.head;

    // Traverse to the end of the list
    while (current.next_node != null) {
      current = current.next_node;
    }

    // Insert new node at the end
    current.next_node = new_node;
    new_node.next_node = null;
  }

  // Function to insert a node after a given position
  public void insert_after(int pos, int data) {
    Node new_node = new Node(data);
    Node current = this.head;
    int count = 0;

    // Traverse to the desired position
    while (count < pos) {
      if (current == null) {
        System.out.println("Invalid position");
        return;
      }
      current = current.next_node;
      count++;
    }

    // Insert new node after the desired position
    new_node.next_node = current.next_node;
    current.next_node = new_node;
  }

  // Function to delete a node from the list
  public void delete(int data) {
    Node current = this.head;
    Node prev = null;

    // Search for the node to be deleted
    while (current != null && current.data != data) {
      prev = current;
      current = current.next_node;
    }

    // If node is found, delete it
    if (current != null) {
      prev.next_node = current.next_node;
    }
    else {
      System.out.println("Node not found");
    }
  }

  // Function to print the linked list
  public void print_list() {
    Node current = this.head;

    // Traverse through the list and print data
    while (current != null) {
      System.out.println(current.data);
      current = current.next_node;
    }
  }
}

// Entry point function
int main() {
  // Create a new linked list with data 5
  LinkedList list = new LinkedList(5);

  // Insert nodes at the beginning, end and after a position
  list.insert_front(10);
  list.insert_end(20);
  list.insert_after(1, 15);

  // Delete a node from the list
  list.delete(20);

  // Print the list
  list.print_list();

  return 0;
}