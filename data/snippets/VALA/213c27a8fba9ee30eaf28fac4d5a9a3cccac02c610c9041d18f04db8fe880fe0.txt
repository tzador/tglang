using GLib;
using Gtk;

/***
 * This code snippet creates a custom grid widget with dynamic size and customizable background color.
***/

public class CustomGrid : Gtk.Grid {

    private int _rows; // Number of rows in the grid
    private int _columns; // Number of columns in the grid

    /***
     * Constructor for CustomGrid class, takes in number of rows and columns as parameters
     * @param _rows Integer representing the number of rows in the grid
     * @param _columns Integer representing the number of columns in the grid
    ***/

    public CustomGrid(int rows, int columns) {
        _rows = rows;
        _columns = columns;

        set_row_spacing(10); // Sets the vertical spacing between widgets to 10 pixels
        set_column_spacing(10); // Sets the horizontal spacing between widgets to 10 pixels

        // Adds the specified number of rows and columns to the grid
        for (int i = 0; i < _rows; i++) {
            for (int j = 0; j < _columns; j++) {
                this.attach(new Gtk.Label("Row " + i + ", Column " + j), i, j, 1, 1);
            }
        }

        // Connects the "size_allocate" signal to the on_grid_resize function
        this.size_allocate.connect(on_grid_resize);
    }

    /***
     * Callback function for the "size_allocate" signal
     * @param allocation the allocation for the widget
     * @returns true to indicate the signal has been handled
    ***/

    private bool on_grid_resize(Gtk.Allocation allocation) {
        // Sets the size and background color of each widget in the grid based on the new grid size
        foreach (Widget child in get_children()) {
            child.set_size_request(allocation.get_width() / _columns, allocation.get_height() / _rows);
            child.set_background_color(get_grid_color());
        }

        return true;
    }

    /***
     * Custom function to return a random color for each widget in the grid
     * @returns A Gdk.RGBA object representing the random color
    ***/

    private Gdk.RGBA get_grid_color() {
        // Initializes a new random number generator
        Random r = new Random();

        // Generates random values between 0 and 1 for red, green, blue, and alpha channels
        double red = r.double_range(0, 1);
        double green = r.double_range(0, 1);
        double blue = r.double_range(0, 1);
        double alpha = r.double_range(0, 1);

        // Creates a new Gdk.RGBA object with the random values
        Gdk.RGBA color = new Gdk.RGBA();
        color.set_red(red);
        color.set_green(green);
        color.set_blue(blue);
        color.set_alpha(alpha);

        return color;
    }

    public static int main(string[] args) {
        Gtk.init(ref args);

        // Creates a new window to hold the custom grid widget
        Gtk.Window window = new Gtk.Window();
        window.set_title("Custom Grid Widget");
        window.set_default_size(600, 400);

        // Creates a new instance of the CustomGrid class with 3 rows and 4 columns
        CustomGrid grid = new CustomGrid(3, 4);

        // Adds the custom grid widget to the window
        window.add(grid);

        // Displays the window and all its contents
        window.show_all();

        // Starts the main Gtk event loop
        Gtk.main();

        return 0;
    }
}