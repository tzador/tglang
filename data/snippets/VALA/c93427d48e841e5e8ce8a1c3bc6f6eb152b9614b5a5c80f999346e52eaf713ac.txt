/* This code demonstrates a doubly linked list data structure in VALA */

// Define node structure with value and pointers to previous and next nodes
struct Node {
    public int val { get; set; } // value of the node
    public Node prev { get; set; } // pointer to previous node
    public Node next { get; set; } // pointer to next node
}

// Define the doubly linked list class with head and tail nodes
public class DoublyLinkedList {
    // head and tail nodes of the list
    public Node head { get; set; }
    public Node tail { get; set; }

    // constructor for initializing the list with head and tail set to null
    public DoublyLinkedList() {
        head = null;
        tail = null;
    }

    // method to add a new node at the beginning of the list
    public void prepend(int new_val) {
        // create a new node with the given value
        Node new_node = new Node();
        new_node.val = new_val;
        
        // if list is empty, set head and tail to the new node
        if (head == null) {
            head = new_node;
            tail = new_node;
        } else {
            // if list is not empty, set new node's next pointer to current head
            new_node.next = head;
            // set current head's prev pointer to the new node
            head.prev = new_node;
            // set head to new node
            head = new_node;
        }
    }

    // method to add a new node at the end of the list
    public void append(int new_val) {
        // create a new node with the given value
        Node new_node = new Node();
        new_node.val = new_val;

        // if list is empty, set head and tail to the new node
        if (head == null) {
            head = new_node;
            tail = new_node;
        } else {
            // if list is not empty, set new node's prev pointer to current tail
            new_node.prev = tail;
            // set current tail's next pointer to the new node
            tail.next = new_node;
            // set tail to new node
            tail = new_node;
        }
    }

    // method to insert a new node at a given index
    public void insert(int new_val, int index) {
        // create a new node with the given value
        Node new_node = new Node();
        new_node.val = new_val;

        // if index is 0, add node at the beginning of the list
        if (index == 0) {
            prepend(new_val);
        } else {
            // set current node to head
            Node current = head;
            // variable to keep track of current index
            int current_index = 0;

            // traverse the list until the given index is reached or we reach the end
            while (current_index < index && current.next != null) {
                current = current.next;
                current_index++;
            }

            // if current index reaches given index, insert new node
            if (current_index == index) {
                // set new node's next pointer to current node
                new_node.next = current;
                // set new node's prev pointer to current node's prev pointer
                new_node.prev = current.prev;
                // set current node's prev pointer's next pointer to new node
                current.prev.next = new_node;
                // set current node's prev pointer to new node
                current.prev = new_node;
            } else {
                // if given index is out of bounds, print error message
                stdout.printf("Error: Index out of bounds.");
            }
        }
    }

    // method to remove the first node with given value
    // returns true if node is found and removed, false if node is not found
    public bool remove(int val) {
        // if list is empty, return false
        if (head == null) {
            return false;
        }

        // if head's value is the given value, remove first node
        if (head.val == val) {
            // if head is the only node in the list, set head and tail to null
            if (head == tail) {
                head = null;
                tail = null;
            } else {
                // set head to the next node and remove first node's prev pointer
                head = head.next;
                head.prev = null;
            }
            return true;
        } else {
            // set current node to head's next node
            Node current = head.next;

            // traverse the list until the given value is found or we reach the end
            while (current != null && current.val != val) {
                current = current.next;
            }

            // if current node is not null, remove the node
            if (current != null) {
                // if current node is the tail, set tail to the previous node
                if (current == tail) {
                    tail = tail.prev;
                }
                // remove current node's pointers and connect previous and next nodes
                current.prev.next = current.next;
                current.next.prev = current.prev;
                return true;
            }
            return false;
        }
    }

    // method to print the list in forward direction
    public void print_forward() {
        // set current node to head
        Node current = head;

        // traverse the list and print each node's value
        while (current != null) {
            stdout.printf("%d ", current.val);
            current = current.next;
        }
        stdout.printf("\n");
    }

    // method to print the list in reverse direction
    public void print_reverse() {
        // set current node to tail
        Node current = tail;

        // traverse the list and print each node's value
        while (current != null) {
            stdout.printf("%d ", current.val);
            current = current.prev;
        }
        stdout.printf("\n");
    }
}