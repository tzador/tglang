/* This code snippet creates a custom linked list data structure in VALA */

// Include vala's built-in data structures and functions
using GLib;

// Define custom list node structure
struct ListNode<T> {
    public T data; // The data this list node will hold
    public ListNode<T>? prev; // The previous node in the list
    public ListNode<T>? next; // The next node in the list
}

// Define custom linked list data structure
class LinkedList<T> {
    private ListNode<T>? head; // The head of the linked list
    private uint length; // The number of nodes in the linked list

    // Constructor for the LinkedList class
    public LinkedList () {
        head = null; // Set the head to null to start with an empty list
        length = 0; // Set the length to 0 to start with an empty list
    }

    // Method to add a new node to the beginning of the linked list
    public void add_front (T value) {
        // Create a new list node with the given value
        ListNode<T> new_node = new ListNode<T> {
            data = value,
            prev = null,
            next = head
        };

        // If the list is not empty, set the previous node of the current head to the new node
        if (head != null) {
            head.prev = new_node;
        }

        // Set the head to the new node
        head = new_node;

        // Increment the length of the list
        length++;
    }

    // Method to add a new node to the end of the linked list
    public void add_back (T value) {
        // Create a new list node with the given value
        ListNode<T> new_node = new ListNode<T> {
            data = value,
            prev = null,
            next = null
        };

        // If the list is empty, set the head to the new node
        if (head == null) {
            head = new_node;
        } else {
            // Otherwise, traverse the list to find the last node and add the new node after it
            ListNode<T> current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = new_node;
            new_node.prev = current;
        }

        // Increment the length of the list
        length++;
    }

    // Method to remove the node at the given index in the linked list
    public void remove_at (uint index) {
        // Check if the index is valid
        if (index >= length) {
            stderr.printf ("ERROR: Index out of range\n");
            return;
        }

        // If the index is 0, remove the first node
        if (index == 0) {
            head = head.next;
        } else {
            // Otherwise, traverse the list to find the node at the given index and remove it
            ListNode<T> current = head;
            for (uint i = 0; i < index - 1; i++) {
                current = current.next;
            }
            current.next = current.next.next;
            if (current.next != null) {
                current.next.prev = current;
            }
        }
        
        // Decrement the length of the list
        length--;
    }

    // Method to get the value of the node at the given index in the linked list
    public T get (uint index) {
        // Check if the index is valid
        if (index >= length) {
            fprintf (stderr, "ERROR: Index out of range\n");
            return default (T);
        }

        // Traverse the list to find the node at the given index and return its value
        ListNode<T> current = head;
        for (uint i = 0; i < index; i++) {
            current = current.next;
        }
        return current.data;
    }
}

// Create an instance of the LinkedList class with string data type
LinkedList<string> string_list = new LinkedList<string> ();

// Add some strings to the list
string_list.add_front ("Hello");
string_list.add_back ("world");
string_list.add_back ("from");
string_list.add_back ("VALA!");

// Print out the values in the list
for (uint i = 0; i < string_list.length; i++) {
    stdout.printf ("%s ", string_list.get (i));
}