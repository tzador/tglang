/*This program takes in an array of strings and sorts them using the quicksort algorithm*/

/* Define an abstract class that represents a basic sorting algorithm with a sort method */
class SortAlgorithm {

    /* Sort method that takes in an array of strings and an integer representing the starting index */
    abstract public void sort(string[] array, int start_index);
}

/* Define a subclass of SortAlgorithm that implements the quicksort algorithm */
class QuicksortAlgorithm : SortAlgorithm {

    /* Override the sort method with the quicksort algorithm implementation */
    public override void sort(string[] array, int start_index) {

        /* Base case: if the array has 0 or 1 elements, it is already sorted */
        if (array.length <= 1) {
            return;
        }

        /* Choose a pivot element from the array (here we are choosing the last element in the array) */
        string pivot = array[array.length - 1];
        /* Variables to keep track of left and right subarrays */
        int left = start_index;
        int right = start_index + array.length - 1;

        /* Loop through the array, swapping elements if they are smaller or greater than the pivot element */
        while (left < right) {
            while (left < right && array[left].compare(pivot) <= 0) {
                left++;
            }
            while (right > left && array[right].compare(pivot) > 0) {
                right--;
            }
            if (left < right) {
                string temp = array[left];
                array[left] = array[right];
                array[right] = temp;
            }
        }

        /* Swap pivot element with element at the left pointer (since left will be the correct index for the pivot element now) */
        string temp = array[left];
        array[left] = pivot;
        array[array.length - 1] = temp;

        /* Recursively sort the left and right subarrays */
        sort(array, start_index);
        sort(array, left + 1);
    }
}

/* Instantiate a QuicksortAlgorithm object */
QuicksortAlgorithm quicksort = new QuicksortAlgorithm();

/* Define an array of strings to be sorted */
string[] array = new string[]{"Vala", "is", "a", "programming", "language"};

/* Call the sort method on the QuicksortAlgorithm object */
quicksort.sort(array, 0);

/* Print out the sorted array */
stdout.printf("Sorted array: %s\n", array.join(" "));