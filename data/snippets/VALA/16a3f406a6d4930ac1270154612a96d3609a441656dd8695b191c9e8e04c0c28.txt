/* This code snippet demonstrates the use of an abstract class and inheritance in VALA */

// Abstract class named "Shape"
public abstract class Shape {
	// Abstract method "get_area" to be implemented by subclasses
	public abstract double get_area();
}

// Subclass "Circle" inherits from "Shape"
public class Circle : Shape {
	// Properties
	public double radius { get; set; }
	
	// Constructor
	public Circle(double radius) {
		this.radius = radius;
	}
	
	// Override of "get_area" method
	public override double get_area() {
		// Calculating the area of a circle
		double area = Math.PI * Math.Pow(radius, 2);
		return area;
	}
}

// Subclass "Square" inherits from "Shape"
public class Square : Shape {
	// Properties
	public double length { get; set; }
	public double width { get; set; }
	
	// Constructor
	public Square(double length, double width) {
		this.length = length;
		this.width = width;
	}
	
	// Override of "get_area" method
	public override double get_area() {
		// Calculating the area of a square
		double area = length * width;
		return area;
	}
}

// Main method
void main() {
	// Creating an instance of "Circle"
	Circle circle = new Circle(5);
	
	// Creating an instance of "Square"
	Square square = new Square(4, 4);
	
	// Printing the areas of the shapes
	print("Area of circle: " + circle.get_area() + "\n");
	print("Area of square: " + square.get_area() + "\n");
}