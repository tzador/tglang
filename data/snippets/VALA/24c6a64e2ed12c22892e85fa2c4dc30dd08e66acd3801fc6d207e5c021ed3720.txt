// This program uses the quicksort algorithm to sort an array of integers

// Define a function for quicksort
void quicksort(int[] arr, int low, int high) {
    // Check for empty or null array
    if (arr == null || arr.length == 0) {
        return;
    }

    // Set pivot element as middle element of array
    int pivot = arr[low + (high - low) / 2];

    // Set left and right pointers
    int i = low;
    int j = high;

    // Partition the array
    while (i <= j) {

        // Find element on left to swap
        while (arr[i] < pivot) {
            i++;
        }

        // Find element on right to swap
        while (arr[j] > pivot) {
            j--;
        }

        // Swap elements and move left and right pointers
        if (i <= j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }

    // Recursively call quicksort on left and right subarrays
    if (low < j) {
        quicksort(arr, low, j);
    }
    if (i < high) {
        quicksort(arr, i, high);
    }
}

// Create an array to be sorted
int[] arr = {5, 2, 10, 8, 3, 1};

// Call quicksort function on the array
quicksort(arr, 0, arr.length - 1);

// Print the sorted array
stdout.printf("Sorted array: [%s]\n", arr.join(", "));