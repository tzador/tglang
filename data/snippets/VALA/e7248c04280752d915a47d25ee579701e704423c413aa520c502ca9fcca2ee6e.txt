// This code snippet utilizes the Vala programming language to sort an array using the Quick Sort algorithm

// Define a function to partition the array
// Takes arguments array, start index and end index
void partition (int[] array, int start, int end)
{
    // Set pivot element (can be any element, here we choose the middle element)
    int pivot = array[(start + end) / 2];

    // Set left and right indices for comparison
    int left = start;
    int right = end;

    // Loop until the left and right indices meet
    while (left <= right)
    {
        // Move left index until element greater than pivot is found
        while (array[left] < pivot)
        {
            // Increase left index
            left++;
        }

        // Move right index until element less than pivot is found
        while (array[right] > pivot)
        {
            // Decrease right index
            right--;
        }

        // If left index is still less than equal to right index, swap elements
        if (left <= right)
        {
            // Swap elements
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;

            // Increase left and decrease right indices
            left++;
            right--;
        }
    }

    // Recursively call partition function on left and right halves of array
    if (start < right)
    {
        partition (array, start, right);
    }
    if (left < end)
    {
        partition (array, left, end);
    }
}

// Define a function to perform Quick Sort
// Takes argument array
void quick_sort (int[] array)
{
    // Call partition function on the entire array
    partition (array, 0, array.length-1);
}

// Create an array to test the Quick Sort function
int[] test_array = {10, 2, 8, 6, 7, 3, 4, 1, 5, 9};

// Call the quick_sort function on the test array
quick_sort (test_array);

// Print the sorted array
stdout.printf ("Sorted array: %s\n", test_array);