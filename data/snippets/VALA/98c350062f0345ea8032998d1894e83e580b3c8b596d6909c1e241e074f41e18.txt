/* The following code creates a custom widget using the GtkDrawingArea and implements the draw function to draw a circle on the widget */

//Create a custom widget class
public class CustomWidget : Gtk.DrawingArea {

	private int radius; //Radius of the circle
	private uint lineWidth; //Line width of the circle

	//Construct the widget
	public CustomWidget () {

		//Set the default values for the radius and line width
		this.radius = 50;
		this.lineWidth = 5;

		//Connect the draw signal to the draw function
		this.draw.connect (this.on_draw);
	}

	//Function to draw the circle on the widget
	private bool on_draw (Cairo.Context cr) {

		/* Create a new path for drawing the circle
		   Using the current width and height of the widget,
		   calculate the center of the widget and use it as the center of the circle */
		cr.new_path ();
		cr.arc (this.get_allocated_width () / 2, this.get_allocated_height () / 2, this.radius, 0, 2 * Math.PI);

		//Set the line width and color
		cr.set_line_width (this.lineWidth);
		cr.set_source_rgb (0, 0, 0); //Black color

		//Draw the circle
		cr.stroke ();

		return true;
	}
}

//Create a new window
var window = new Gtk.Window ();

//Create an instance of the custom widget
var custom_widget = new CustomWidget ();

//Add the custom widget to the window
window.add (custom_widget);

//Show the window and run the Gtk main loop
window.show_all ();
Gtk.main ();