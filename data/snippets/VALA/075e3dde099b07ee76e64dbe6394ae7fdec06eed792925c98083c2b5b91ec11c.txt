// This code snippet is a Vala program that uses complex datatypes and control flow statements

// Define a struct called 'Person' with name, age, and gender fields
struct Person {
    string name;
    int age;
    string gender;
}

// Define a class called 'Employee'
public class Employee {
    private string employee_id;

    // Create a constructor that takes in the person's name and age as parameters
    public Employee(Person person) {
        // Use a conditional statement to set the employee id based on gender
        if (person.gender == "female") {
            this.employee_id = "F" + person.age;
        } else {
            this.employee_id = "M" + person.age;
        }
    }

    // Define a function that calculates the salary based on the person's age and employee id
    public int getSalary(Person person) {
        // Use a switch statement to set the base salary based on person's age
        int base_salary;
        switch (person.age) {
            case 18:
                base_salary = 20000;
                break;
            case 25:
                base_salary = 30000;
                break;
            case 35:
                base_salary = 40000;
            default:
                base_salary = 50000;
        }

        // Use a loop to add bonuses based on the employee id
        int bonus = 1000;
        for (int i = 0; i < employee_id.length(); i++) {
            bonus += (int) employee_id[i];
        }

        // Return the total salary
        return base_salary + bonus;
    }
}

// Instantiate a new Person with name, age, and gender fields
Person p = new Person();
p.name = "Jane";
p.age = 30;
p.gender = "female";

// Instantiate a new Employee using the Person as a parameter
Employee e = new Employee(p);

// Call the getSalary function and print out the result
print("Jane's salary is: " + e.getSalary(p));