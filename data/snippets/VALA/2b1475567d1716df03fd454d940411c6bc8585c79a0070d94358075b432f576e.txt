/* This code snippet generates a sorting algorithm using quicksort */

/* Define a function to swap two elements in an array */
void swap (int[] arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

/* Define a function to partition the array */
int partition (int[] arr, int low, int high) {
    int pivot = arr[high]; // set pivot as last element
    int i = low - 1; // initialize index of smaller element

    for (int j = low; j < high; j++) {
        /* If current element is smaller than or equal to pivot */
        if (arr[j] <= pivot) {
            i++; // increment index of smaller element
            swap(arr, i, j);
        }
    }

    swap(arr, i + 1, high);
    return i + 1; // return index of the pivot
}

/* Define the quicksort function */
void quicksort (int[] arr, int low, int high) {
    if (low < high) {
        /* pi is partitioning index, arr[p] is now at right place */
        int pi = partition(arr, low, high);

        /* Recursively sort elements before partition and after partition */
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

/* Example usage */
int main () {
    int[] arr = {3, 10, 5, 9, 1, 7};
    int n = sizeof(arr) / sizeof(arr[0]); // get size of the array

    quicksort(arr, 0, n - 1);

    /* Print sorted array */
    for (int i = 0; i < n; i++) {
        print("%d ", arr[i]);
    }

    return 0;
}