// This program uses recursion to generate all possible subsets of a given set
using GLib;

void generate_subsets (ref uint[] set, uint[] subset, uint k) throws Error {
    if (k == 0) { // base case, print the subset
        foreach (uint x in subset) {
            stdout.printf ("%d ", x);
        }
        stdout.printf ("\n");
    } else {
        subset[k - 1] = set[k - 1]; // add last element to current subset
        generate_subsets (set, subset, k - 1); // recurse with k - 1
        subset[k - 1] = 0; // remove last element from current subset
        generate_subsets (set, subset, k - 1); // recurse with k - 1
    }
}

void main () {
    // Get set from user
    stdout.printf ("Enter the set elements: ");
    string input = stdin.read_line ();
    uint[] set = GLib.strtod_array (input);
    uint n = set.length;
    
    // Initialize empty subset array
    uint[] subset = new uint[n];
    for (uint i = 0; i < n; i++) {
        subset[i] = 0;
    }
    
    // Generate and print subsets using recursive function
    stdout.printf ("All possible subsets of given set:\n");
    generate_subsets (set, subset, n);
}