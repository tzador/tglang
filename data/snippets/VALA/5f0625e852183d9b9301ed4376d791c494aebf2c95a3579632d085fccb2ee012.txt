//This is a simple program in VALA
class Calculator : Object { //creating a class called Calculator that inherits from Object class
  public int add (int a, int b) { //creating a public function called add that takes in two integer parameters and returns an integer
    int result = a + b; //adding the two parameters and storing the result in a new variable called result
    return result; //returning the result
  }
  
  public int multiply (int a, int b) { //creating a public function called multiply that takes in two integer parameters and returns an integer
    int result = a * b; //multiplying the two parameters and storing the result in a new variable called result
    return result; //returning the result
  }
  
  public int power (int a, int b) { //creating a public function called power that takes in two integer parameters and returns an integer
    int result = a; //initializing result to a
    for (int i = 1; i < b; i++) { //creating a for loop that runs b-1 times
      result = result * a; //updating result to result multiplied by a
    }
    return result; //returning the final result
  }
  
  public void print_result (int result) { //creating a public function called print_result that takes in an integer parameter
    stdout.printf("The result is %d", result); //printing the result to the console using stdout.printf, with a specified format and the result variable
  }
}

int main () { //starting the main function
  Calculator calc = new Calculator (); //creating an instance of Calculator class called calc
  int add_result = calc.add (5, 6); //calling the add function on the calc instance, passing in 5 and 6 as parameters, and storing the returned result in a new variable called add_result
  int multiply_result = calc.multiply (3, 4); //calling the multiply function on the calc instance, passing in 3 and 4 as parameters, and storing the returned result in a new variable called multiply_result
  int power_result = calc.power (2, 3); //calling the power function on the calc instance, passing in 2 and 3 as parameters, and storing the returned result in a new variable called power_result
  
  calc.print_result (add_result); //calling the print_result function on the calc instance, passing in add_result as a parameter
  calc.print_result (multiply_result); //calling the print_result function on the calc instance, passing in multiply_result as a parameter
  calc.print_result (power_result); //calling the print_result function on the calc instance, passing in power_result as a parameter
  
  return 0; //ending the main function with a return statement
}