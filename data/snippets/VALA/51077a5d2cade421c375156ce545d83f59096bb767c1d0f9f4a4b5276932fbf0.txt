// This code snippet shows an example of how to implement a stack data structure in VALA

public class Stack<T> {
    private T[] items;   // private array to store items in the stack
    private int top;     // variable to keep track of the top element's index

    // constructor to initialize the stack with a given size
    public Stack(int size) {
        items = new T[size];
        top = -1; // empty stack
    }

    // method to push a new element onto the stack
    public void push(T item) {
        top++;   // increment top index
        items[top] = item;   // add item to top of stack
    }

    // method to pop an element off the stack
    public T pop() {
        T item = items[top];   // store top element in a variable
        top--;   // decrement top index
        return item;   // return top element
    }

    // method to check if the stack is empty
    public bool is_empty() {
        return (top == -1);
    }

    // method to check if the stack is full
    public bool is_full() {
        return (top == items.length - 1);
    }

    // method to peek at the value of the top element without removing it from the stack
    public T peek() {
        return items[top];
    }
}

public int main() {
    // initialize a stack with size 3
    Stack<int> stack = new Stack<int>(3);

    // push elements onto the stack
    stack.push(1);
    stack.push(2);
    stack.push(3);

    // print the top element on the stack
    print("Top element on stack: " + stack.peek());

    // pop an element off the stack
    stack.pop();

    // print whether the stack is empty or not
    print("Is the stack empty? " + stack.is_empty());

    return 0;
}