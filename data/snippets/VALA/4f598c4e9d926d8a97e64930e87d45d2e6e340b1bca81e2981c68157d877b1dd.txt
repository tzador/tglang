public static class BinarySearchTree<T> {
    public Node<T> root { get; set; }

    public BinarySearchTree() {
        root = null;
    }

    public void insert(T value) {
        var node = new Node<T>(value);
        if (root == null) {
            root = node;
        } else {
            Node<T> current = root;
            while (true) {
                if (value <= current.value) {
                    if (current.left == null) {
                        current.left = node;
                        return;
                    }
                    current = current.left;
                } else {
                    if (current.right == null) {
                        current.right = node;
                        return;
                    }
                    current = current.right;
                }
            }
        }
    }

    public bool contains(T value) {
        Node<T> current = root;
        while (current != null) {
            if (value == current.value)
                return true;
            if (value < current.value)
                current = current.left;
            else
                current = current.right;
        }
        return false;
    }
    
    public void remove(T value) {
        root = remove(value, root);
    }
    
    private Node<T> remove(T value, Node<T> current) {
        if (current == null) {
            Console.WriteLine($"Value {value} not found");
            return current;
        }
        if (value < current.value)
            current.left = remove(value, current.left);
        else if (value > current.value)
            current.right = remove(value, current.right);
        else {
            if (current.left == null)
                return current.right;
            else if (current.right == null)
                return current.left;
            current.value = findMinValue(current.right);
            current.right = remove(current.value, current.right);
        }
        return current;
    }
    
    private T findMinValue(Node<T> current) {
        T min = current.value;
        while (current.left != null) {
            min = current.left.value;
            current = current.left;
        }
        return min;
    }
    
    private class Node<T> {
        public T value { get; set; }
        public Node<T> left { get; set; }
        public Node<T> right { get; set; }
        
        public Node(T value) {
            this.value = value;
            left = null;
            right = null;
        }
    }
}