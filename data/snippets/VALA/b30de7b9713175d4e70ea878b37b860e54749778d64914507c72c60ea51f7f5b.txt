// Create an abstract class with a generic type parameter
public abstract class DataContainer<Type> {

    // Declare an abstract method
    public abstract void add_data(Type data);

    // Declare a generic property
    public abstract Type Data { get; set;}

    // Declare a generic constructor
    public DataContainer(Type data) {
        this.Data = data;
    }

    // Declare a generic method
    public abstract Type process_data(Type data);

    // Declare a virtual method
    public virtual void print_data() {
        stdout.printf("%s", Data);
    }
}

// Create a class that extends the abstract class and implements the methods
public class StringContainer : DataContainer<string> {

    // Implement the method add_data by appending the data to the string
    public override void add_data(string data) {
        Data += data;
    }

    // Implement the property Data by setting and returning the string
    public override string Data {
        get { return (string) data; }
        set { data = (string) value; }
    }

    // Implement the method process_data by converting the string to uppercase
    public override string process_data(string data) {
        return data.ToUpper();
    }

    // Override the virtual method print_data by printing the string
    public override void print_data() {
        stdout.printf("%s", data);
    }
}

// Create an instance of StringContainer and add data to it
var container = new StringContainer("Hello ");
container.add_data("world!");

// Print out the processed data
stdout.printf("%s", container.process_data(container.Data));

// Output:
// HELLO WORLD!