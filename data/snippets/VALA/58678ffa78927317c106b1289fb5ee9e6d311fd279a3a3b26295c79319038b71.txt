public class ComplexProgram : Object {  // create a class named "ComplexProgram" that extends the base class "Object"
    private int count = 0;  // create a private integer variable named "count" and initialize it to 0
    
    public ComplexProgram() {  // create a public constructor for the "ComplexProgram" class
        this.count = 10;  // set the "count" variable to 10
    }
    
    public void displayCount() {  // create a public function named "displayCount" that takes no arguments
        stdout.printf("The count is %d\n", this.count);  // print a formatted string that displays the value of the "count" variable
    }
    
    public static int sum(int num1, int num2) {  // create a public static function named "sum" that takes two integer arguments
        return num1 + num2;  // return the sum of the two arguments
    }
    
    public virtual int getMultiply(int num1, int num2) {  // create a public virtual function named "getMultiply" that takes two integer arguments and returns an integer
        return num1 * num2;  // return the product of the two arguments
    }
}

// create an instance of the "ComplexProgram" class and call the "displayCount" function
var complex = new ComplexProgram();
complex.displayCount();

// call the "sum" function and store the result in a variable
int result = ComplexProgram.sum(5, 10);
stdout.printf("The result of the sum is %d\n", result);

// create a new class named "AdvancedProgram" that extends the "ComplexProgram" class
public class AdvancedProgram : ComplexProgram {
    public override int getMultiply(int num1, int num2) {  // override the "getMultiply" function to return the sum instead of the product
        return num1 + num2; 
    }
}

// create an instance of the "AdvancedProgram" class and call the "getMultiply" function
var advanced = new AdvancedProgram();
int product = advanced.getMultiply(5, 10);
stdout.printf("The result of the multiplication is %d\n", product);