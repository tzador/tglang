using GLib; // declaration and initialization of GLib library
using Gtk; // declaration and initialization of Gtk library
 
public class Example : Object { // definition of public class Example that extends Object
 
    private unowned Gtk.Entry entry; // declaration of private Gtk.Entry variable using unowned reference
    private int count; // declaration of private integer variable
 
    public int count_property { // definition of public integer property count_property
        get { // property getter method
            return this.count; // returns value of count variable
        }
        set { // property setter method
            if (value < 0) { // checks if value argument is negative
                GLib.Error error = new GLib.Error(0, 0, "value must be positive"); // creates new GLib.Error object
                throw error; // throws exception with error object
            }
            this.count = value; // sets count variable to value argument
        }
    }
 
    public Example() { // public constructor method
        this.build_ui(); // calls build_ui() method
    }
 
    public void build_ui() { // public build_ui() method
        Gtk.Window window = new Gtk.Window("Example"); // declaration and initialization of new Gtk.Window object
        window.set_default_size(400, 300); // sets default size of window to 400x300 pixels
 
        this.entry = new Gtk.Entry(); // initialization of entry variable with new Gtk.Entry object
        this.entry.set_text("Hello World!"); // sets text of entry variable to "Hello World!"
 
        Gtk.Label label = new Gtk.Label("Enter a number:"); // declaration and initialization of new Gtk.Label object
 
        Gtk.Button button = new Gtk.Button.with_label("Submit"); // declaration and initialization of new Gtk.Button object with label "Submit"
        button.clicked.connect(() => { // connects a callback function to the "clicked" signal of the button object
            try { // begins try block
                int num = int.parse(this.entry.get_text()); // parses text from entry variable as an integer and assigns it to num variable
                this.count = num; // sets count variable to num variable
            } catch (GLib.Error error) { // catches GLib.Error exceptions
                Gtk.MessageDialog dialog = new Gtk.MessageDialog( // declaration and initialization of new Gtk.MessageDialog object
                    window, // passes window variable as parent object
                    Gtk.DialogFlags.MODAL, // sets dialog flags to modal
                    Gtk.MessageType.ERROR, // sets message type to error
                    Gtk.ButtonsType.CLOSE, // sets buttons type to close
                    error.message // sets message text to the error message from the error object
                );
                dialog.run(); // runs dialog object
                dialog.destroy(); // destroys dialog object
            }
        });
 
        Gtk.Box box = new Gtk.Box(Gtk.Orientation.VERTICAL, 10); // declaration and initialization of new Gtk.Box object
        box.pack_start(label, false, false, 0); // packs label widget into box object
        box.pack_start(this.entry, false, false, 0); // packs entry widget into box object
        box.pack_start(button, false, false, 0); // packs button widget into box object
 
        window.add(box); // adds box widget to window object
        window.show_all(); // shows all widgets in the window object
    }
}