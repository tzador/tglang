// This code snippet is an example of a doubly linked list data structure in VALA programming language

using GLib;

// Define a node class for the doubly linked list
public class Node {
	public Node prev; // pointer to previous node
	public Node next; // pointer to next node
	public int value; // value stored in the node

	// Constructor to initialize the node
	public Node(Node p, Node n, int v) {
		prev = p;
		next = n;
		value = v;
	}
}

// Define a class for the doubly linked list
public class DoublyLinkedList {
	private Node head; // pointer to the first node
	private Node tail; // pointer to the last node

	// Constructor to initialize the list
	public DoublyLinkedList() {
		head = null;
		tail = null;
	}

	// Method to add a node to the front of the list
	public void addFront(int v) {
		Node newNode = new Node(null, head, v); // create a new node
		if (head == null) {
			tail = newNode; // if list is empty, then tail points to the new node
		} else {
			head.prev = newNode; // make the new node the previous of the current head
		}
		head = newNode; // make the new node the new head
	}

	// Method to add a node to the end of the list
	public void addBack(int v) {
		Node newNode = new Node(tail, null, v); // create a new node
		if (head == null) {
			head = newNode; // if list is empty, then head points to the new node
		} else {
			tail.next = newNode; // make the new node the next of the current tail
		}
		tail = newNode; // make the new node the new tail
	}

	// Method to remove a node from the front of the list
	public void removeFront() {
		if (head == null) {
			return; // if list is empty, then do nothing
		}
		head = head.next; // make the next of current head the new head
		if (head == null) {
			tail = null; // if list is empty after removing, then tail also becomes null
		} else {
			head.prev = null; // make the previous of new head null
		}
	}

	// Method to remove a node from the end of the list
	public void removeBack() {
		if (head == null) {
			return; // if list is empty, then do nothing
		}
		tail = tail.prev; // make the previous of current tail the new tail
		if (tail == null) {
			head = null; // if list is empty after removing, then head also becomes null
		} else {
			tail.next = null; // make the next of new tail null
		}
	}

	// Method to print the list
	public void print() {
		Node current = head;
		while (current != null) {
			stdout.printf("%d ", current.value); // print the value of the node
			current = current.next; // move to the next node
		}
	}
}

void main() {
	DoublyLinkedList list = new DoublyLinkedList(); // create a new list
	list.addFront(5); // add nodes to the front
	list.addFront(3);
	list.addFront(1);
	list.addBack(7); // add nodes to the back
	list.addBack(9);
	list.print(); // print the list: 1 3 5 7 9
}