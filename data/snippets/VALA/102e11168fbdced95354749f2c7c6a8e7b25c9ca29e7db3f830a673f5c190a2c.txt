// Demonstrate polymorphism in VALA

// Parent class
abstract class Shape {
    // Define abstract function to calculate area
    public abstract void calculate_area();
}

// Child class of Shape
class Rectangle : Shape {
    // Member variables
    private int length, width;

    // Constructor
    public Rectangle(int l, int w) {
        length = l;
        width = w;
    }

    // Override calculate_area() function
    public override void calculate_area() {
        int area = length * width;
        print("Area of rectangle: " + area);
    }
}

// Child class of Shape
class Circle : Shape {
    // Member variable
    private int radius;

    // Constructor
    public Circle(int r) {
        radius = r;
    }

    // Override calculate_area() function
    public override void calculate_area() {
        double area = Math.PI * radius * radius;
        print("Area of circle: " + area);
    }
}

int main() {
    // Create instances of Rectangle and Circle
    Rectangle rectangle = new Rectangle(5, 4);
    Circle circle = new Circle(3);

    // Declare and initialize array of Shape objects
    Shape[] shapes = { rectangle, circle };

    // Loop through the array and call calculate_area() for each object
    for (int i = 0; i < shapes.length; i++) {
        shapes[i].calculate_area();
    }

    return 0;
}