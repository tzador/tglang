/* This code snippet is a simple example of a sorting algorithm implemented in VALA */

// Define a generic sorting function that takes in an array of generic type T and returns a sorted array of the same type
public T[] my_sort<T>(T[] array) {

    // Find the length of the array
    int len = array.length;

    // Loop through the array and compare each element to the next element
    for (int i = 0; i < len - 1; i++) {

        /* Create a flag variable to keep track of whether any swapping has occurred. 
        If no swapping occurs, it means the array is already sorted and the loop can be exited */
        bool swapped = false;

        // Loop through the array again, this time starting from the second element
        for (int j = 1; j < len - i; j++) {

            // Compare the current and previous elements
            if (array[j - 1] > array[j]) {

                // Swap the elements if the current element is greater than the previous element
                T temp = array[j];
                array[j] = array[j - 1];
                array[j - 1] = temp;

                // Set the flag to true to indicate that a swap has occurred
                swapped = true;
            }
        }

        /* Check if no swapping has occurred, if so, it means the array is already sorted and 
        the loop can be exited */
        if (!swapped) {
            break;
        }
    }

    // Return the sorted array
    return array;
}

// Create an array of integers to test the sorting function
int[] nums = { 5, 3, 8, 1, 2 };

// Call the sorting function and store the returned array in a variable
int[] sorted_nums = my_sort(nums);

// Print out the sorted array
stdout.printf("Sorted array: %s\n", sorted_nums);  // Output: Sorted array: [1, 2, 3, 5, 8]