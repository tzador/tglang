// This is a complex code snippet in VALA

// Define an interface for a shape
interface IShape {
	// A method to calculate the area of the shape
	public double get_area();
	// A method to calculate the perimeter of the shape
	public double get_perimeter();
}

// Create a class for a Rectangle that implements the IShape interface
class Rectangle : IShape {
	// Define private variables for the dimensions of the rectangle
	private double length;
	private double width;

	// Constructor to initialize the dimensions of the rectangle
	public Rectangle(double l, double w) {
		length = l;
		width = w;
	}

	// Implement the get_area() method from the IShape interface
	public double get_area() {
		return length * width;
	}

	// Implement the get_perimeter() method from the IShape interface
	public double get_perimeter() {
		return 2 * (length + width);
	}
}

// Create a class for a Circle that implements the IShape interface
class Circle : IShape {
	// Define a private variable for the radius of the circle
	private double radius;

	// Constructor to initialize the radius of the circle
	public Circle(double r) {
		radius = r;
	}

	// Implement the get_area() method from the IShape interface
	public double get_area() {
		return Math.PI * Math.Pow(radius, 2);
	}

	// Implement the get_perimeter() method from the IShape interface
	public double get_perimeter() {
		return 2 * Math.PI * radius;
	}
}

// Create a class for a Triangle that implements the IShape interface
class Triangle : IShape {
	// Define private variables for the base and height of the triangle
	private double base;
	private double height;

	// Constructor to initialize the base and height of the triangle
	public Triangle(double b, double h) {
		base = b;
		height = h;
	}

	// Implement the get_area() method from the IShape interface
	public double get_area() {
		return (base * height) / 2;
	}

	// Implement the get_perimeter() method from the IShape interface
	public double get_perimeter() {
		double side = Math.Sqrt(Math.Pow(base / 2, 2) + Math.Pow(height, 2));
		return base + (2 * side);
	}
}

// Create an array of IShape objects to hold different shapes
IShape[] shapes = new IShape[3];

// Add a rectangle, circle, and triangle to the array
shapes[0] = new Rectangle(5, 10);
shapes[1] = new Circle(3);
shapes[2] = new Triangle(6, 4);

// Loop through the array and print out the area and perimeter of each shape
foreach (IShape s in shapes) {
	// Get the type of shape
	string type = s.get_type();
	// Get the area of the shape
	double area = s.get_area();
	// Get the perimeter of the shape
	double perimeter = s.get_perimeter();
	// Print the information about the shape
	print("%s - Area: %f, Perimeter: %f", type, area, perimeter);
}

/* Output:
Rectangle - Area: 50.000000, Perimeter: 30.000000
Circle - Area: 28.274334, Perimeter: 18.849556
Triangle - Area: 12.000000, Perimeter: 14.944271
*/