/*
This is a long and complex code snippet in VALA.
It creates a custom LinkedList class that implements
the basic functionality of a linked list data structure.
*/

// This is the class definition for LinkedList
class LinkedList<T> : Object {
    private Node<T>? head = null;
    private Node<T>? tail = null;

    // This is the Node class used to store elements in the list
    private class Node<T> : Object {
        private Node<T>? next = null;
        private Node<T>? prev = null;
        public T value;

        public Node (T value) {
            this.value = value;
        }

        public bool has_next () {
            return next != null;
        }

        public bool has_prev () {
            return prev != null;
        }
    }

    // This method adds a new element to the end of the list
    public void add_element (T element) {
        var new_node = new Node<T> (element);
        if (head == null) {
            head = new_node;
            tail = new_node;
        } else {
            tail.next = new_node;
            new_node.prev = tail;
            tail = new_node;
        }
    }

    // This method removes an element from the list
    public void remove_element (int index) {
        if (head == null) {
            stderr.printf ("The list is empty");
            return;
        }
        if (index < 0) {
            stderr.printf ("Invalid index");
            return;
        }

        Node<T>? current = head;
        int i = 0;
        while (current != null) {
            if (i == index) {
                if (current.has_next ()) {
                    current.next.prev = current.prev;
                } else {
                    tail = current.prev;
                }

                if (current.has_prev ()) {
                    current.prev.next = current.next;
                } else {
                    head = current.next;
                }

                current.free ();
                return;
            }
            current = current.next;
            i++;
        }
        stderr.printf ("Index out of bounds");
    }

    // This method retrieves an element from the list
    public T get_element (int index) {
        if (head == null) {
            stderr.printf ("The list is empty");
            return (T)0;
        }
        if (index < 0) {
            stderr.printf ("Invalid index");
            return (T)0;
        }

        Node<T>? current = head;
        int i = 0;
        while (current != null) {
            if (i == index) {
                return current.value;
            }
            current = current.next;
            i++;
        }
        stderr.printf ("Index out of bounds");
        return (T)0;
    }
}

// This is the main function where the LinkedList class is tested
int main () {
    var list = new LinkedList<string> ();
    
    // Add elements to the list
    list.add_element ("Hello");
    list.add_element ("World");
    
    // Remove an element from the list
    list.remove_element (1);
    
    // Get element at index 0
    string result = list.get_element (0);
    
    stdout.printf (result); // Output: Hello
    
    return 0;
}