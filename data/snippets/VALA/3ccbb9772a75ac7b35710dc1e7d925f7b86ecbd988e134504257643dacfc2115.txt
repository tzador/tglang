// Defining interface with Generic type
typeclass Container<T> {
    // Abstract method to check if the container is empty
    public abstract bool is_empty();
    
    // Abstract method to add an element to the container
    public abstract void add(T element);
    
    // Abstract method to remove an element from the container
    public abstract void remove(T element);
}

// Defining a class that implements the Container interface
class MyContainer<T> : Container<T> {
    // Private field to hold the container elements
    private T[] elements;
    
    // Constructor to initialize the container with a given size
    public MyContainer(int size) {
        elements = new T[size];
    }
    
    // Implementation of is_empty() method
    public override bool is_empty() {
        return elements.length == 0;
    }
    
    // Implementation of add() method
    public override void add(T element) {
        elements[elements.length - 1] = element;
    }
    
    // Implementation of remove() method
    public override void remove(T element) {
        int index = elements.find(element);
        if (index >= 0) {
            elements.remove(index);
        }
    }
}