set plants / p1*p10 /;                                                                                                                       // Declaring a set named 'plants' with elements p1 to p10. 
 display 'Total number of plants:' plants.card;                                                                                                  // Displaying the total number of elements in the set.
 
 parameters                                                                                                                                      // Declaring multiple parameters.
      demand(p)     demand of product per plant / p1 100, p2 75, p3 125 /,                                                                         // Parameter 'demand' has elements which represent demand per plant.
      production(p) maximum production limit per plant / p1 150, p2 90, p3 100/;                                                                 // Parameter 'production' has elements representing the maximum production limit per plant.
 
 scalar total_demand /345/;                                                                                                                     // Declaring a scalar named 'total_demand' with value 345.
 
 table transport(p) 'Freight costs per plant'                                                                                                     // Declaring a table named 'transport' as a cost matrix.
                p1  p2  p3 
      p1  0.4  0.8  0.2
      p2  0.3  0.5  0.6
      p3  0.7  0.4  0.3;
 
 variable send(p)        / p1*p3 /;                                                                                                              // Variable 'send' with elements from p1 to p3.
 positive variables received(p);                                                                                                                 // Variable 'received' with positive values and elements from p1 to p3.
 
 binary variable activeplants(p);                                                                                                                // Binary variable 'activeplants' with elements from p1 to p3.
 
 free variable cost;                                                                                                                              // Free variable named 'cost'.
 
 equations                                                                                                                                        // Declaring multiple equations.
      satisfydemand                                                                                                                              
      bal(p)        balance constraint per product / send(p) - received(p) =e= demand(p) /                                                       // Equation 'bal' calculates balance for each product.
      maxprod(p)    maximum production limit per product / received(p) =l= production(p) /                                                      // Equation 'maxprod' ensures that production does not exceed limit for each product.
      mintranscost                                                                                                                                 // Equation 'mintranscost' calculates the minimum total transportation cost.
      active(p)   indicates active plant / received(p) =g= 0 
                                         activeplants(p) =l= received(p) /;                                                                      // Equation 'active' defines the active plant based on received product.
 
 /* Objective function to minimize the total cost */   
 
 $minimize obj 'objective function definition'
         cost + sum(p, transport(p,'Freight costs per plant')*send(p)); // Objective function that minimizes the total cost, taking into account the cost table and the amount of product sent.
 
 model transportProblem /all/;              // Creating a model named 'transportProblem', including all previously declared variables and equations.
 solve transportProblem using lp minimizing obj;   // Solving the model using linear programming and minimizing the objective function.
 display send.l, received.l, active(l), transport.l; // Displaying the final values of the variables and equations.
 
*The solution shows the optimal values for sending and receiving products, the active plants, and the total transportation cost.