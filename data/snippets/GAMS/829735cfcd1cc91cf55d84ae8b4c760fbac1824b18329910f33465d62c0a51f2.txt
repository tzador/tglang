SETS
       I  potential investments      / p1*p10 /
       J  potential projects         / j1*j15 / ;
 *Note: This code snippet sets up two sets - I for potential investments and J for potential projects.

PARAMETERS
       r(I) expected returns on investments
                                     / p1 0.15, p2 0.22, p3 0.10, p4 0.08, p5 0.18, 
                                       p6 0.12, p7 0.14, p8 0.11, p9 0.16, p10 0.21 /
      c(J) estimated costs for projects
                                     / j1 50000, j2 25000, j3 75000, j4 100000, j5 30000,
                                       j6 60000, j7 20000, j8 50000, j9 80000, j10 40000,
                                       j11 90000, j12 80000, j13 60000, j14 120000, j15 150000 / ;
*Note: This code snippet sets up two parameters - r for expected returns and c for estimated costs, with values assigned for each element.

TABLE P(I,J) transaction profits ;
*Note: This code snippet sets up a table for transaction profits, where each row represents an investment and each column represents a project.

P(I,J) = r(I) - c(J) ;
*Note: This code snippet calculates the transaction profit for each combination of investment and project, by subtracting the estimated cost from the expected return.

VARIABLES
        x(I,J) binary decisions on investments 
                       / x(I,J) - 0, free, binary / ;
*Note: This code snippet sets up a variable x to represent the binary decision on which investments to choose for each project, with initial value set as 0 and a binary constraint.

EQUATIONS
        investment_selection(I) ;
*Note: This code snippet sets up an equation to represent the selection process for investments.

investment_selection(I).. sum(J, x(I,J)) =l= 1 ;
*Note: This code snippet sets up the constraint that for each investment, only one project can be chosen (represented by the binary decision variable x) by using the sum function.

MODEL investment_portfolio / ALL / ;
*Note: This code snippet sets up the GAMS model named "investment_portfolio" that includes all defined sets, parameters, variables, and equations.

SOLVE investment_portfolio MAXIMIZING sum(P(I,J)*x(I,J)) ;
*Note: This code snippet solves the model "investment_portfolio" by maximizing the total transaction profit (represented by the sum of all P values multiplied by the corresponding x values).

DISPLAY x.l, r, c ;
*Note: This code snippet displays the final binary decision values for x (representing the chosen investments), along with the expected returns and estimated costs for each investment and project.