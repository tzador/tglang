set i 'set of indices' /i1*i10/; /* defining a set of 10 indices */

alias (i,j,k,l,m); /* creating aliases for i,j,k,l,m */

parameter A(i,j) 'arbitrary parameter'; /* defining a 2-dimensional parameter A with indices i,j */

A(i,j) = uniformInt(i,j,1,100); /* assigning random values to parameter A using the uniformInt function */

set P(i,j) 'set of valid pairs of indices'; /* defining a set P with indices i,j */

P(i,j) = (ord(i) < ord(j)); /* specifying the valid pairs of indices as those where i comes before j in alphabetical order */

variable x(i,j) 'decision variable'; /* defining a 2-dimensional decision variable x with indices i,j */

equation obj 'objective function'; /* defining an equation for the objective function */

obj.. sum((i,j), A(i,j)*x(i,j)) =e= sum((i,j), A(i,j)*j); /* defining the objective function as the sum of A times x, with a constraint on the sum of A times j */

equation c 'constraint'; /* defining an equation for a constraint */

c(i,j).. x(i,j) =l= 5; /* specifying a constraint on the decision variable x to be less than or equal to 5 for all indices i,j */

model test 'test model' /all/; /* defining a model named 'test' with all defined equations and variables */

solve test maximizing obj using lp; /* solving the model 'test' by maximizing the objective function using the linear programming solver */

display x.l, A; /* displaying the solution of the decision variable x and the parameter A */