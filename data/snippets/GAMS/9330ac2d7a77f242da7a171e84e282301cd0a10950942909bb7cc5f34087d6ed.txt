Set i "index for rows"/1*100/;
Set j "index for columns"/1*100/;

Parameter M(i,j);
M(i,j) = Uniform(0,1);
*This line generates a parameter M with dimensions of 100x100
Parameter s(i,j);
s(i,j) = Uniform(0,1);
*This line generates a parameter s with dimensions of 100x100
Parameter w(i,j);
w(i,j) = Uniform(0,1);
*This line generates a parameter w with dimensions of 100x100

Variable x(i,j);
Positive Variable Obj;
*This line creates a decision variable x with dimensions of 100x100 and a positive variable Obj

Equation obj_func;
obj_func.. Obj =e= sum((i,j), w(i,j)*x(i,j));
*This equation defines the objective function, which is the sum of w(i,j)*x(i,j)

Equation constraint1(i,j);
constraint1.. sum((i,j), M(i,j)*x(i,j)) =l= s(i,j);
*This equation defines the first constraint, which requires the sum of M(i,j)*x(i,j) to be less than or equal to s(i,j)

Equation constraint2(i,j);
constraint2.. sum((i,j), x(i,j)) =e= 1;
*This equation defines the second constraint, which requires the sum of x(i,j) to equal 1

Model example /all/;
*This line creates a model called "example"

example.obj = obj_func;
*This line assigns the objective function to the model

example.constraints1 = constraint1;
example.constraints2 = constraint2;
*These lines assign the constraints to the model

Solve example using lp minimizing obj;
*This line solves the model using a linear programming solver, with the objective of minimizing the objective function

Display x.l, Obj.l;
*This line displays the optimal values for the decision variables and the objective function