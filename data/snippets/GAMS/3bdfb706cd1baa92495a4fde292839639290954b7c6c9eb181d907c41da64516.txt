Set i 'set of nodes' /1*5/;
Set j 'set of arcs' /1.2,1.3,2.3,2.4,3.5,4.5,5.3/;
Alias(j,j1);
Parameter c(i,j) 'cost of assigning arc j to node i'
/1.(1.2) 5, 2.(2.3) 3, 2.(2.4) 7, 3.(3.5) 4, 4.(3.5) 6, 5.(4.5) 2/;
Table d(i,j) 'distance between node i and arc j'
         j1      1       2       3       4       5
1        1      6       7       8       9       10
2        2      4       5       6       7       8
3        3      8       9       10      11      12
4        4      2       3       4       5       6
5        5      9       10      11      12      13;
Variable x(i,j) 'binary variable representing if arc j is assigned to node i'
         z 'total cost of assigning all arcs to nodes';
Binary Variable x(i,j);
Equations obj 'objective function'
          con(i) 'constraint for each node'
          con1(j) 'constraint for each arc'
          dis(i,j) 'distance constraint';

obj..    z =e= sum((i,j), c(i,j)*x(i,j));

con(i).. sum(j, x(i,j)) =e= 1;

con1(j).. sum(i, x(i,j)) =l= 1;

dis(i,j).. d(i,j)*x(i,j) =l= 100;

Model shortest_path /all/;

option solprint = off;

solve shortest_path using mip minimizing z;

display x.l, z.l;