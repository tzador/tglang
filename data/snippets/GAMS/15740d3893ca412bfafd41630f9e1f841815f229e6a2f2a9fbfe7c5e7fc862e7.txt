* Sets:
Set i "Students"
    / Alex, Ben, Chloe, David, Emily /;
Set j "Courses"
    / Algebra, Geometry, Biology, Chemistry, Physics /;

* Parameters:
Parameter p(i,j) "Preferred classes"
    / Alex.Algebra  = 1, Alex.Geometry = 2, Alex.Biology = 3
      Ben.Algebra   = 4, Ben.Geometry  = 5, Ben.Biology   = 6
      Chloe.Algebra = 7, Chloe.Geometry= 8, Chloe.Biology = 9
      David.Algebra = 10, David.Geometry = 11, David.Biology = 12
      Emily.Algebra = 13, Emily.Geometry = 14, Emily.Biology = 15
      Alex.Chemistry  = 1, Alex.Physics = 2, Alex.Geometry = 3
      Ben.Chemistry   = 4, Ben.Physics  = 5, Ben.Geometry  = 6
      Chloe.Chemistry = 7, Chloe.Physics= 8, Chloe.Geometry= 9
      David.Chemistry = 10, David.Physics = 11, David.Geometry = 12
      Emily.Chemistry = 13, Emily.Physics = 14, Emily.Geometry = 15 /;

* Variables:
Variables x(i,j) binary "Indicates if student takes the course or not";
Variables z "Total number of students who will take their preferred classes";
Variables y(i,j) binary "Indicates if student is assigned to their preferred class";

* Constraints:
Equations class_pref(i,j) "Students can only take their preferred class";
Equations one_course(i) "Each student can only take one course";
Equations total_students "Sum of y(i,j) equal to z";

class_pref(i,j).. x(i,j) =g= p(i,j);
one_course(i).. sum(j,x(i,j)) =l= 1;
total_students.. z =e= sum((i,j), y(i,j));

* Objective function:
Equation obj "Maximize the number of students taking their preferred classes";
obj.. z =e= sum((i,j), y(i,j));

* Solve:
Model student_classes "Assigning students to their preferred classes" /all/;
Solve student_classes using mip maximizing z;

* Display results:
Display x.l, y.l, z.l;