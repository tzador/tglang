* Declare set of locations
Set i /L1*L10/;

* Declare set of time periods
Alias(t,i), tp(t), tpp(t);

* Declare set of commodities
Set j /com1, com2, com3/;

* Declare set of customers
Set c /cust1*cust10/;

* Declare set of suppliers
Set s /sup1*sup10/;

* Declare parameters
Scalar minValue "minimum acceptable value for cost function";
Parameter dist(i,t) "distance between supplier and customer";
Parameter supply(s,j) "supply capacity for each commodity from each supplier";
Parameter maxDist(i,c) "maximum distance allowed for delivery";
Parameter cost(j,c) "cost for delivering each commodity to each customer";

* Declare variables
Variable x(i,s,j,c) "delivery from supplier s to customer c for commodity j";
Variable z "total cost";

* Set objective function
z = sum((c,j), cost(j,c)*x(i,s,j,c));

* Constraint 1: Each customer must be served by only one supplier, for each commodity.
tp(i,c,j)..
sum((s,i), x(i,s,j,c)) =e= 1;

* Constraint 2: The total delivery distance must be less than or equal to the maximum allowed distance for each customer.
tpp(c)..
sum((c,j), dist(i,c)*x(i,s,j,c)) =l= maxDist(i,c);

* Constraint 3: The total supply capacity for each commodity must be less than or equal to the required demand from all customers.
tp(s,j)..
sum((c), x(i,s,j,c)) =l= supply(s,j);

* Set optimal solution
model optimal_delivery_problem /all/;

* Solve for optimal solution using linear programming
Solve optimal_delivery_problem using lp minimizing z;