set i 'set of items' /i1*i10/

parameter c(i) 'cost of each item'
c(i1) = 5;
c(i2) = 7;
c(i3) = 3;
c(i4) = 15;
c(i5) = 8;
c(i6) = 2;
c(i7) = 12;
c(i8) = 9;
c(i9) = 10;
c(i10) = 6;

set j 'set of stores' /j1*j5/

parameter b(j) 'budget for each store'
b(j1) = 1000;
b(j2) = 800;
b(j3) = 1200;
b(j4) = 1500;
b(j5) = 1000;

variable x(i,j) 'number of items to be bought at each store'
binary variable y(j) 'binary variable indicating if store j is visited'

equation budget_constraint 'total cost of items must not exceed store budget'
budget_constraint(j).. sum(i, c(i)*x(i,j)) =l= b(j);

equation visit_constraint 'each store can only be visited once'
visit_constraint(j).. sum(i, x(i,j)) =e= y(j);

equation item_constraint 'each item must be bought at one store'
item_constraint(i).. sum(j, x(i,j)) =e= 1;

equation total_cost 'total cost of items to be minimized'
total_cost.. z =e= sum((i,j), c(i)*x(i,j));

model purchase_problem /all/;

solve purchase_problem using mip minimizing z;