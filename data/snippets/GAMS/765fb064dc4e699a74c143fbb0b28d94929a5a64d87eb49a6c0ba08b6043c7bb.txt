Sets
    i       set of nodes
    l       set of links
    lr(i)   set of outgoing links from each node
    ch(l)	Child nodes for each link
    vl(i)   set of active nodes
    f       (i,l) node-link incidence matrix
    fm(i)   (i,i) node-arc incidence matrix
    fin(i)  set of input nodes
    fout(i) set of output nodes;
Parameters
    arch(i)     architecture of each node type
    cap(i)      capacity of each node type
    demand(l)   traffic demand along each link
    var(l)      binary decision variable for each link;
$Title Traffic Flow Model;
* Objective: Minimize link utilization with link capacity constraints
* Flow conservation constraints:
FlowCons(i).. sum(l$fin(i)=>f(i,l)) =e= sum(l$lr(i)=>f(i,l)) + sum(j$fm(j,i)=>f(j,i));
* Capacity constraints:
CapCons(l)..	f(l) =l= cap(ch(l))*var(l);
* Binary variable restriction:
BinCons(l)..	var(l) =l= 1;
* Binary variable definition:
VarLP(l)$(not vmin(l))..	var(l) =l= lmin(l) + lmax(l) ;
* vague bounds
lmin(l)$lmin(l) = if lmax(l) ne lmin(l) then 0 else 1;
* Solution feasibility condition:
VMarg.StReform = yes;
Model TrafficFlow/OBJ,FlowCons,CapCons,BinCons,VarLP/ with StReform :: Objective function, Flow conservation constraints, Capacity constraints, Binary variable restrictions, Variable definition
	Model NetworkForm /demand, arch, lr, cap, ch/ ;
Solve TrafficFlow using LP minimizing OBJ;
* Display solution
loop((i,l)$var.up(i,l),
    put var.l(i,l)
    );
* Loop for increasing expressions
Execute_unload 'model' model, '%model%', '%$system.smodel%', '%smodel%.mat',
        '%smodel%.sol','bin';
Display 'Finished!'