* Sets:
set Items 'list of items' /i1*i100/;

* Parameters:
parameters
   Demand(Items) 'demand for each item'
   Cost(Items) 'cost of each item'
   Capacity 'maximum capacity';
   
Demand(Items) = uniformInt(50, 100);  % Generate demand for each item between 50 and 100
Cost(Items) = normal(50, 10);  % Generate cost for each item from a normal distribution with mean 50 and standard deviation 10
Capacity = 500;  % Set the maximum capacity to 500

* Variables:
variables
   x(Items) 'purchase quantity for each item'
   profit 'total profit';

positive variables x;  % Set x to be positive variables

* Objective:
profit = sum((Items), (Cost(Items) - 20)*x(Items));  % Calculate total profit, assuming a selling price of 20 for each item

* Constraints:
equation
   Total_Capacity 'total quantity purchased cannot exceed capacity';

Total_Capacity.. sum((Items), x(Items)) =l= Capacity;  % Set constraint that total quantity purchased cannot exceed capacity

* Solve:
model purchasing /all/;

solve purchasing maximizing profit using lp;  % Solve the model, maximizing profit using a linear programming solver

* Display the results:
abort$((purchasing.solvestat <> 'optimal')) 'The problem was not solved to optimality';
display x.l, profit.l;  % Display the purchase quantities and total profit