Sets
    i 'cities' / Amsterdam, Berlin, London /
    j 'countries' / Netherlands, Germany, United Kingdom /;

Parameters 
    d(i,j) 'distance in km'
/   Amsterdam.Netherlands 300, Amsterdam.Germany 600, Amsterdam.United Kingdom 800,
    Berlin.Netherlands 600, Berlin.Germany 400, Berlin.United Kingdom 900,
    London.Netherlands 800, London.Germany 900, London.United Kingdom 200 /;

Variables 
    x(i,j) 'binary decision variable 1 if connection from i to j has been chosen, 0 otherwise';

Binary Variables x;

Equations 
    obj 'objective function'
    con(i) 'constraints for cities';

obj.. sum((i,j), x(i,j)*d(i,j)) =E= znew; 

* adding a comment to explain the object function
* calculates the minimum distance between cities based on the binary decision variables x(i,j)

con(i).. sum(j, x(i,j)) =E= 1;

* adding a comment to explain the constraint
* ensures that each city has exactly one connection chosen

Model minimum_distance /all/;

* adding a comment to explain the model
* defines the model as finding the minimum distance between cities

Solve minimum_distance using mip minimizing obj;

* adding a comment to explain the solve statement
* solves the model using mixed integer programming and minimizes the objective function

Display x.l;

* adding a comment to explain the display statement
* displays the values of the decision variables that correspond to the minimum distance solution