Sets
    i 'students' / s1*s10 /
    j 'classes' / c1*5 /
    l 'instructors' / t1*t3 / ;

Parameters
    a(i,j) 'student-j class assignment probabilities'
              / s1.c1 0.1, s1.c2 0.2, s1.c3 0.3, s1.c4 0.2, s1.c5 0.2
                s2.c1 0.2, s2.c2 0.2, s2.c3 0.1, s2.c4 0.3, s2.c5 0.2
                s3.c1 0.3, s3.c2 0.2, s3.c3 0.1, s3.c4 0.1, s3.c5 0.3
                s4.c1 0.2, s4.c2 0.3, s4.c3 0.2, s4.c4 0.1, s4.c5 0.2
                s5.c1 0.3, s5.c2 0.2, s5.c3 0.1, s5.c4 0.2, s5.c5 0.2
                s6.c1 0.3, s6.c2 0.1, s6.c3 0.2, s6.c4 0.3, s6.c5 0.1
                s7.c1 0.1, s7.c2 0.2, s7.c3 0.1, s7.c4 0.3, s7.c5 0.3
                s8.c1 0.4, s8.c2 0.2, s8.c3 0.2, s8.c4 0.1, s8.c5 0.1
                s9.c1 0.2, s9.c2 0.1, s9.c3 0.3, s9.c4 0.2, s9.c5 0.2
                s10.c1 0.3, s10.c2 0.3, s10.c3 0.1, s10.c4 0.1, s10.c5 0.2 /

    b(j) 'class capacities' / c1 20, c2 25, c3 30, c4 25, c5 20 / ;

Variables
    x(i,j) 'student-j class assignment decision variable'
      z 'maximum expected assignment probability' ;

Binary Variable x ;
x.up(i,j) = a(i,j);

Equations
    obj 'maximize expected assignment probability'
    bal(j) 'balance class capacities'
    stu(i) 'each student must be assigned to exactly one class' ;

obj.. z =e= sum((i,j), a(i,j)*x(i,j));
bal(j).. sum(i, x(i,j)) =l= b(j);
stu(i).. sum(j, x(i,j)) =e= 1 ;

Model class_assign / all / ;
Solve class_assign maximizing z using lp ;

display x.l, z.l ;

Set ju(i,j);
   ju(i,j) = yes$((i='s3' and j='c4') or (i='s7' and j='c1')) ;

x.lo(ju) = 1 ;
Model sensitivity / all / ;
Restart sensitivity using class_assign ;
display x.l, z.l ;