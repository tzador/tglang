* Sets
Set i 'Students'
    /s1*s10/
    j 'Courses'
    /c1*c5/;
    
* Parameters
Parameter enroll(i,j) 'Number of students enrolled in each course'
    /s1.c1 20, s1.c3 15, s2.c2 25, s3.c4 30, s4.c1 10, s4.c5 35, 
     s5.c2 40, s6.c3 5, s7.c5 25, s8.c4 35, s9.c1 30, s10.c2 15/
    perunit(i) 'Percentage of students to pass'
    /s1 %90, s2 %80, s3 %95, s4 %75, s5 %85, s6 %90, s7 %95, s8 %85, s9 %80, s10 %90/;
    
* Variables
Binary variables passed(i,j) '1 if student passed the course, 0 otherwise';

Positive variables x(i,j) 'Number of students assigned to each course';

* Objective Function: Maximize passed courses
Equation obj;
obj.. sum((i,j), passed(i,j)) =e= sum((i,j), enroll(i,j) * perunit(i));

* Constraints
Equation enrollment(j) 'Maximum enrollment for each course'
Equation pass(i) 'Number of students that must pass each course';
Equation enroll_lim(i,j) 'Maximum enrollment based on number of students';

enrollment(j).. sum(i, enroll(i,j)) =l= 40;

pass(i).. sum(j, passed(i,j)) =e= 1;

enroll_lim(i,j).. x(i,j) =l= enroll(i,j);

* Model declaration
Model course_assignment /all/;

* Solver options
option optcr = 0.0001;

* Solve the model
solve course_assignment using mip maximizing obj;

* Output the results
display passed, x;