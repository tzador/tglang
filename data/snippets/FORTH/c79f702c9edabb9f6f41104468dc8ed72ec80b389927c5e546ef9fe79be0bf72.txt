: ARRAY! ( n -- addr ) \ Creates an array of size n and stores the address in memory
    2 over    \ Place the number 2 in memory at the cell after n
    cells     \ Multiply n by size of cell (here 4 bytes, so n * 4)
    allot     \ Reserve that amount of memory addresses and return address of beginning
; \ End of ARRAY!

: COUNT ( addr n -- n' ) \ Counts the number of non-zero values in the array
    0 swap     \ Place the number 0 in memory at the cell after n
    + loop     \ Loop that checks if value at addr is non-zero, increments n if so
; \ End of COUNT

: AVERAGE ( addr n -- avg ) \ Calculates the average value of the array
    COUNT swap         \ Get the number of non-zero values in the array and push to stack
    0 swap             \ Place the number 0 in memory at the cell after n
    over 2drop avgover \ Drop n and multiply remaining values on stack, then divide by n
; \ End of AVERAGE

: MULTIPLE-ARRAY ( n -- array ) \ Creates a nested array of size n
    ARRAY!              \ Create the first level array
    dup                 \ Duplicate size n on stack and move to top
    BEGIN               \ Start a loop
        dup 0=          \ Check if n is equal to 0
    WHILE               \ While loop is true
        ARRAY! count    \ Create next level array and count non-zero values
        2dup            \ Duplicate address of previous level and move to top of stack
        1+              \ Increment previous level address by 1
        2*              \ Multiply by size of address (here 4 bytes)
        2dup over       \ Duplicate size n on stack and move to top of stack
        2+ swap         \ Add 2 to n and swap values on stack
    REPEAT              \ End of loop
    drop                \ Drop the final size n value
; \ End of MULTIPLE-ARRAY