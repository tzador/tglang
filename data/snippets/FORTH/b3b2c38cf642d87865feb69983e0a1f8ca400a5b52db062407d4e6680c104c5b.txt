IRA ARRAY: `N ARRAYS ELEMENTS' `# Creates a new array called 'N' with the specified number of elements\`
`: SET ( N INDEX VALUE -- ) N + , ! `# Sets the element at 'INDEX' in array 'N' to 'VALUE' using indirect addressing\`
`: GET ( N INDEX -- VALUE ) N + @ `# Retrieves the element at 'INDEX' in array 'N' using indirect addressing\`
`: RESIZE ( N NEW-SIZE -- ) `# Resizes the array 'N' to 'NEW-SIZE' by reallocating memory and moving existing elements\`
`: MAP ( N M -- ) `# Applies the function at address 'M' to each element in array 'N'\`
`: FILTER ( N M -- N' ) `# Applies the function at address 'M' to each element in array 'N' and returns a new array with elements that pass the test\`
`: REDUCE ( N M -- VALUE ) `# Applies the function at address 'M' to each element in array 'N' and returns a single value based on the accumulator function\`
`: SORT ( N M -- ) `# Sorts the elements in array 'N' based on the comparison function at address 'M'\`
`: PRINT_ALL ( N -- ) `# Prints all elements in array 'N' to the terminal\`
`: CLEAR ( N -- ) `# Frees up memory used by array 'N' and removes it from the system\`
`N 10 RESIZE `# Creates an array called 'N' with 10 elements\`
`N 5 42 SET `# Sets the element at index 5 to 42 in array 'N'\`
`N 3 17 SET `# Sets the element at index 3 to 17 in array 'N'\`
`N PRINT_ALL `# Prints all elements in array 'N' (in order: 0, 42, 0, 17, 0, 0, 0, 0, 0, 0)\`
`N 8 99 SET `# Sets the element at index 8 to 99 in array 'N'\`
`N RESIZE `# Resizes the array 'N' to 8 elements (removes last 2 elements)\`
`N PRINT_ALL `# Prints all elements in array 'N' (in order: 0, 42, 0, 17, 0, 0, 0, 99)\`
`N 6 8 GET `# Retrieves the element at index 6 from array 'N' (returns 0)\`
`N 1 63 GET `# Retrieves the element at index 1 from array 'N' (returns 42)\`
`N 0 0 8 GET `# Retrieves the element at index 0 from array 'N' (returns 0)\`
`N SORT BY_VALUE_ORIGINAL WITH_VALUES ( N1 N2 -- N' ) `# Comparison function that sorts array 'N' by value (in ascending order) and keeps original elements in a new array 'N'\`
`N MAP IS_PRIME ( N -- )` # Function that applies 'IS_PRIME' function to each element in array 'N' and replaces the element with a boolean value\`
`N (1 2 3 4 5) MAP IS_PRIME `# Updates the elements in array 'N' to (false, true, true, false, true)\`
`N 0 REDUCE SUM `# Applies the 'SUM' accumulator function to array 'N' and returns the sum of all elements (11)\`
`N (`abc` `def` `ghi`) MAP PRINT `# Prints each element in array 'N' (abc, def, ghi)\`
`N CLEAR `# Frees up memory used by array 'N' and removes it from the system\`