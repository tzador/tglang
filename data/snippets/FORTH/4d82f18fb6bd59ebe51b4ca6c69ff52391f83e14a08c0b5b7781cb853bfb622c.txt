\ This code snippet contains a recursive function that checks if a number is prime.

: PRIME?      \ Define a function called PRIME? (Note: Functions in FORTH are defined with a colon)
  DUP 1 =     \ Duplicate the top of the stack and check if it is equal to 1
  IF          \ If the top of the stack is equal to 1, return an empty stack
    DROP      \ Discard the top of the stack
    ERASE     \ Return an empty stack
  ELSE        \ If the top of the stack is not equal to 1, run the following code
    DUP 1 -   \ Duplicate the top of the stack and subtract 1
    PRIME?    \ Start a new recursive call with the decreased number
    DUP 0 =   \ Duplicate the top of the stack and check if it is equal to 0
    IF        \ If the top of the stack is equal to 0, return an empty stack
      DROP    \ Discard the top of the stack
      ERASE   \ Return an empty stack
    ELSE      \ If the top of the stack is not equal to 0, run the following code
      OVER MOD \ Duplicate the top of the stack, get the modulus of the top two numbers, and leave it on the stack
      IF      \ If the modulus is equal to 0, return an empty stack
        DROP  \ Discard the modulus
        ERASE \ Return an empty stack
      ELSE    \ If the modulus is not equal to 0, run the following code
        SPACES \ Print a blank space
        2 SPACES \ Print two blank spaces
        .       \ Print the top of the stack (the current number)
        SWAP    \ Swap the top two elements on the stack
        PRIME?  \ Start a new recursive call with the original number
      THEN      \ End the IF statement
    THEN        \ End the IF statement
  THEN          \ End the IF statement
;               \ End the function definition

\ Example input and output:
10 PRIME? \ Would return " "
11 PRIME? \ Would return " 11"
12 PRIME? \ Would return " "
13 PRIME? \ Would return " 11"