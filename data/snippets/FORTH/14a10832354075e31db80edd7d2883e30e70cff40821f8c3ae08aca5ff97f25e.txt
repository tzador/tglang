\ A complex code snippet that implements the quicksort algorithm

variable temp_array         \ variable to temporarily hold values
variable lower_index        \ variable to store lower index
variable upper_index        \ variable to store upper index
variable pivot              \ variable to store pivot value

: quicksort ( array -- sorted_array )   \ FORTH word to implement quicksort
    dup length                      \ duplicate array for later use, find its length
    2 < if                          
        exit                        \ exit if array is of length 2 or less
    then
    dup                             \ duplicate array again
    0 swap                           \ swap the top two values to get them in the right order
    0 move                           \ move pivot value to the top of the stack
    lower_index !                   \ set lower index to 0
    upper_index !                   \ set upper index to array length - 1
    begin                           \ beginning of the loop
        dup lower_index @           \ get lower index value
        dup upper_index @           \ get upper index value
        >= if                       \ compare both values, if lower index is greater than or equal to upper index
            2drop                   \ drop both values
            lower_index @ index     \ push lower index value onto the stack
            exit                    \ exit the loop
        else                        \ if lower index is less than upper index
            swap                    \ swap lower and upper index values
            dup lower_index @       \ get lower index value
            upper_index @ over +    \ add upper index value to lower index value
            2@ temp_array !         \ stores the value at upper index in temp_array
            upper_index @ 2@ lower_index @ 2! index    \ store value at lower index at upper index
            lower_index @ temp_array @ 2! index        \ store value from temp_array at lower index
            dup                     \ duplicate current array
            upper_index @ 1- move   \ move values above upper index to lower index
            upper_index @ 1- 2@ upper_index @ move     \ move value at upper index to one below upper index
            upper_index @ dup 1- upper_index !          \ decrement upper index by 1
        then
    repeat                          \ repeat the loop until exit condition is met
    dup                             \ duplicate current array
    2dup + swap                     \ add both array lengths and swap them to get final pivot index
    upper_index @ 1+                 \ add 1 to upper index to get final pivot index
    rot quicksort                   \ recursively call quicksort on first half of array
    rot upper_index quicksort        \ recursively call quicksort on second half of array
    2drop                           \ drop the two array lengths
;

\ Example input: [3 7 1 5 2 4]
\ Example output: [1 2 3 4 5 7]