\ Stack data structure using runtime arrays

0 variable top \ initialize top variable to store top of stack position
0 variable stack-size \ initialize stack-size variable to track number of elements in stack

: initialize ( size -- ) \ define initialize function to create stack with specified size
    dup stack-size ! \ store specified size in the stack-size variable
    0 ?DO \ loop through stack indexes
        i 0 stack! \ store empty values in stack array
    LOOP
    0 top ! \ set top variable to 0 to indicate stack is empty
;

: push ( element -- ) \ define push function to add element to top of stack
    dup top @ 1+ top ! \ increment top variable by 1
    dup stack-size @ = IF \ check if stack is full
        ." Stack full!" \ print error message if stack is full
        drop \ drop element from stack
    ELSE
        stack! \ store element in stack at top position
    THEN
;

: pop ( -- element ) \ define pop function to remove and return top element from stack
    dup top @ ?DUP IF \ check if stack is empty
        1- top ! \ decrement top variable by 1
        stack@ \ retrieve element at top position
    ELSE
        ." Stack empty!" \ print error message if stack is empty
    THEN
    stack-size @ 2* = IF \ check if stack is less than half full
        stack-size @ 2/ stack-size ! \ halve size of stack
        bounds ( "lower" "upper" -- "lower" ) \ get lower bound of stack array
        bounds ( "size" "lower" -- "size" ) \ get size of stack array
        2array erases \ erase upper half of stack array
    THEN
;

: clear ( -- ) \ define clear function to remove all elements from stack
    0 top ! \ set top variable to 0 to indicate stack is empty
    0 stack-size ! \ reset stack-size variable to 0
;