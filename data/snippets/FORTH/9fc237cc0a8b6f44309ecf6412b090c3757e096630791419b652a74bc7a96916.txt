: PERMS ( -- )  " Calculate all permutations of an array" 
  (0 DECLARE VARIABLES)
  ARRAYSIZE VARIABLE  // marks down the number of entries in the array
  COUNT CONSTANT ARRAYSIZE \-> 0
  ARRAY ARRAYSIZE CONSTANT \-> Array \-> Used to store original array
  STACK ARRAYSIZE CONSTANT \-> Stack \-> Used for backtracking
  0 TRUE CONSTANT  \-> Used for storing false values
  2 ARRAYSIZE CONSTANT COUNTER \-> Counter \-> Used for looping

  (1 INITIALIZE ARRAY)
  (VALUE \-> STACK, INDEX)
  : INITSTACK ( -- ) ARRAYSIZE 0 DO -1 LOOP \-> INDEX | STACK \-> 0 | ARRAY
  (VALUE \-> STACK)
  : PUSH ( OVER \-> UNDER \-> STACK)
    COUNTER CONSTANT RES \-> RES \-> STACK 1+
    RES STACK ARRAY +! 1-!   \-> STACK \-> ARRAY
  : POP ( STACK \-> UNDER ) STACK 1-! \-> UNDER
    RES STACK ARRAY +! 1-! \-> STACK
  (2 BEGIN PROCESS)
  (INDEX \->)
  : PERMSTEP ( -- )
    COUNTER CONSTANT INDEX \-> SWAP | INDEX 
    COUNTER CONSTANT CURRINDEX \-> SWAP | CURRINDEX
    STACK CURRINDEX PUSH
    INDEX 2 < IF
      INDEX CONSTANT TMPRES \-> TMPRES \-> STACK 1-
      CURRINDEX CONSTANT INDEX 
      INDEX CONSTANT CURRINDEX  \-> INDEX \-> CURRINDEX
      STACK TMPRES POP 1-! \-> STACK 
    ELSE 
      COUNTER CONSTANT CURRINDEX 2 - \-> MARKER \-> ARRAYSIZE
      BEGIN MARKER 2 < IF CURRINDEX CONSTANT INDEX MARKER 1+ CONSTANT MARKER 
      ELSE POP EXIT THEN 1+ LOOP
    THEN
  (3 EXIT CHECK)
  (STACKSIZE \-> STACK?)
  : PERMFINAL ( -- )
    STACK 0 DO 0 @ \-> INDEX
    INDEX TRUE \-> TMPRES \-> INDEX
    BEGIN INDEX STK? INDEX FALSE \-> STACK \-> 1- LOOP // odd INDEX
    BEGIN INDEX 1 2- < IF EXIT THEN 1- LOOP
  (4 MAIN)
  ARRAYSIZE INTSTACKS ! 
  BEGIN INITSTACK PERMSTEP PERMFINAL
  ARRAYSIZE 1- < ( continue until \-> ) 0 INVERT UNTIL ;