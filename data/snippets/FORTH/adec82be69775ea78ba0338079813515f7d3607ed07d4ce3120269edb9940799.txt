( Example code snippet in FORTH )

: IS-PRIME  ( n -- f )       ( Is n a prime number? )  
  2 >                       ( Make sure n > 2 )  
  2 2 ?DO                   ( Loop through possible divisors )  
    I DUP * =                ( Does n equal loop counter squared? )  
    IF DROP FALSE EXIT THEN  ( If yes, n is composite )  
    DUP I MOD 0=             ( Is loop counter a divisor? )  
  LOOP                      ( Continue looping )  
  DROP                      ( We finished without finding a divisor, n is prime )  
  TRUE                      ( Indicate n is prime )  
;  
 
: PRIME-FACTORS ( n -- seq )  ( Compute all prime factors of n )  
  2 >                         ( Make sure n > 2 )  
  2 3 ?DO                     ( Loop through possible factors )  
    DUP I MOD 0= IF           ( Is current factor a divisor? )  
      I SWAP /                ( If yes, divide n by factor )  
      I PRIME-FACTORS         ( Recursively call PRIME-FACTORS on quotient )  
      UNLOOP EXIT             ( After recursion, we are done )  
    THEN                      ( Else continue looping )  
  LOOP                        ( Continue looping )  
  .  ( implicit UNLOOP )      ( If we reach here, n is prime and we have no more factors )  
  .                          ( Print n (the final prime factor) )  
;  
 
: TABULARPRIMES ( n -- seq )  ( Print prime factors in a table )  
  2 >                         ( Make sure n > 2 )  
  0                           ( Initialize counter variable )  
  BEGIN                       ( Start loop )  
    I PRIME-FACTORS           ( Compute prime factors of I )  
    SWAP 2DUP < IF            ( If factors are unequal and prime )  
      ROT . CR                ( Print them and add new line )  
      1+                      ( Increase counter variable )  
    ELSE DROP THEN            ( Else drop duplicate factors )  
    1+                        ( Increase loop counter )  
  AGAIN                       ( Repeat until loop terminates )  
  2DROP                      ( Drop leftover counter and remainder stack items )  
;