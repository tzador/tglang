: MIN ( a1 a2 -- a3 ) \ defining a MIN function that takes two arguments and returns the minimum value
  DUP ROT \ duplicate a1 and rotate a2 to the top of the stack
  < IF \ if a1 is smaller than a2, execute the following code
    DROP \ drop a2 from the top of the stack
  ELSE \ otherwise, execute the following code
    DROP ROT \ drop a1 and rotate a2 back to the top of the stack
  THEN \ end if statement
  SWAP \ swap the top two values on the stack, now a1 is on top
  ; \ end definition of MIN function

: RANGE ( n -- array ) \ defining a RANGE function that takes one argument and returns an array containing all numbers from 1 to n
  1 SWAP \ push 1 to the stack and swap with n, now n is on top
  1 DO \ begin a loop from 1 to n, using index i
    OVER I \ duplicate n and get current index
    1 + \ increment index by 1
    DUP \ duplicate index
    ALLOT \ allocate space for a new value in the array
    SWAP \ swap index and previous value
    ! \ store previous value in the array at index i
    UNUSED \ mark the created value as unused, since it will be overwritten in the next iteration
    1 \ push 1 to the stack, this will be used to increment the index in the next iteration
  LOOP \ end loop
  >R \ push current stack pointer to the return stack, now the array is on the top of the return stack
  OVER \ duplicate n from the stack
  UNUSED \ mark n as unused, since it is no longer needed
  BEGIN \ begin a loop while the stack is not empty
    0 \ push 0 to the stack, this will serve as a base address for accessing the array
    R@ \ push the top element from the return stack, this is the base address of the array
    TUCK \ copy the top element and place it below the second element
    + \ add the top two elements, this will yield the address of the element we want to access from the array
    CELL+ \ add the size of a cell to the address, this is needed because we are using a stack arrangement in memory
    R@ \ push the top element from the return stack, this is the index of the current element we want to access
    1 \ push 1 to the stack, this will be used to fetch the next element from the array in the next iteration
    - \ subtract the top two elements, this will decrement the index by 1
    I \ fetch element from the array at the calculated address
    R> \ pop the top element from the return stack, this is the array we created in the RANGE function
    TUCK \ copy the top element and place it below the second element
    + \ add the top two elements, this will yield the address where we want to store the fetched element from the array
    CELL+ \ add the size of a cell to the address, this is needed because we are using a stack arrangement in memory
    ! \ store the fetched element at the calculated address
    R@ \ push the top element from the return stack, this is the index of the current element we want to access
    1 \ push 1 to the stack, this will be used to increment the index in the next iteration
    - \ subtract the top two elements, this will decrement the index by 1
    ?DUP \ duplicate the top element on the stack if it is not equal to 0, this will keep the loop going until we reach the end of the array
  UNTIL \ end loop
  >R \ push current stack pointer to the return stack, now the updated array is on the top of the return stack
  DROP \ drop the unused value from the top of the stack
  >R \ push current stack pointer to the return stack, now the length of the updated array is on the top of the return stack
  1 \ push 1 to the stack, this will be used to allocate a new array with the updated length
  ALLOT \ allocate space for a new array with the updated length
  R@ \ push the top element from the return stack, this is the length of the updated array
  ALLOT \ allocate space for each element in the array
  R@ \ push the top element from the return stack, this is the updated array
  R@ \ push the top element from the return stack, this is the length of the updated array
  R> \ pop the top element from the return stack, this is the updated array
  DLITERAL \ convert the top two elements on the stack to a double length number, this will serve as the base address for accessing the updated array
  >R \ push current stack pointer to the return stack, now the base address of the updated array is on the top of the return stack
  DO \ begin a loop from 1 to n, using index i
    R> \ pop the top element from the return stack, this is the updated array
    R> \ pop the top element from the return stack, this is the base address of the updated array
    DUP I \ duplicate base address and get current index
    1 + \ increment index by 1
    OVER I \ duplicate updated array and get current index
    1 + \ increment index by 1
    DUP \ duplicate current index
    @ \ fetch element from the updated array at current index
    ROT \ rotate the top three elements, bringing the base address of the updated array to the top
    UNUSED \ mark the fetched element as unused, since it will be overwritten in the next iteration
    + \ add the top two elements, this will yield the address where we want to store the fetched element from the updated array
    I \ fetch element from the updated array at the calculated address
    SWAP \ swap the top two elements, now the fetched element is on top and the address is below
    CELL \ multiply the top element by the size of a cell, this is needed because we are using a stack arrangement in memory
    + \ add the top two elements, this will yield the address where we want to store the fetched element from the updated array
    ! \ store the fetched element at the calculated address
    R> \ pop the top element from the return stack, this is the length of the updated array
    UNUSED \ mark the incremented index as unused, since it is no longer needed
    1 \ push 1 to the stack, this will be used to increment the index in the next iteration
    + \ add the top two elements, this will increment the index by 1
  LOOP \ end loop
  R> \ pop the top element from the return stack, this is the updated array
  ;