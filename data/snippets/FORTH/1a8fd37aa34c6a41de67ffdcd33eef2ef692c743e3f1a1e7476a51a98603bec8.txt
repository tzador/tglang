: FACT DUP 0 > IF DUP 1- FACT * ELSE DROP 1 THEN ;

** The ":" defines a new word or procedure based on the code following it.
** The first line declares the name of the word, in this case "FACT".
** The second line is the code that will execute when the word "FACT" is called.
** "DUP" duplicates the top value on the stack.
** "0 > IF" checks if the top value is greater than 0.
** If it is, the code following "IF" will be executed, otherwise it will skip to "ELSE".
** "1- FACT" recursively calls the word "FACT" with the top value decremented by 1.
** "*" multiplies the top two values on the stack.
** "ELSE" is executed if the top value is not greater than 0.
** "DROP 1" removes the top value from the stack.
** "THEN" marks the end of the "IF ELSE" block.
** The ";" indicates the end of the word definition.

** To use this word, we can call it with a number on the stack, like so:
** 5 FACT 
** This will return the factorial of 5, as 5*4*3*2*1 = 120.

** Here is a more complex example, using the "FOR" loop:
: SUM 0 SWAP 
** The "SWAP" keyword swaps the top two values on the stack.
** This is useful for setting the initial value of iteration variables.

** Next, we will define a "FOR" loop that will run 10 times:
** First, we declare a variable "I" to use as the counter.
** Then, we use the "FOR" keyword to start the loop.
VARIABLE I 
10 FOR 
I @ SUM I + 
** "@" fetches the value of the variable from memory.
** "I +" increments the value of "I" by 1 and adds it to the sum.
NEXT 
** "NEXT" marks the end of the loop.

** Lastly, we need to print the result of our calculation:
. CR 
** "." prints the top value on the stack.
** "CR" prints a new line.
** Therefore, after running this word, the result will be printed on the screen.

** To use this word, we can call it like so:
** SUM 
** This will print the sum of the first 10 numbers, which is 55.