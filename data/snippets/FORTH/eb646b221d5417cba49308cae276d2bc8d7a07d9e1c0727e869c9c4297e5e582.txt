\ Consider a function factorial that calculates the factorial of a given number
: factorial ( n -- n! )
    dup 1 <= ( check if n is less than or equal to 1 )
    if ( if true )
        drop 1 ( remove the top element from stack and push 1 )
    else ( if false )
        dup 1 - ( duplicate the top element and subtract 1 )
        factorial ( recursively call the factorial function )
        * ( multiply the top two elements of stack )
    then ( end if )
;

\ Example Input: 5 ( will calculate factorial of 5 )
factorial ( call the factorial function )
\ Output: 120 ( factorial of 5 )

\ This FORTH code snippet uses recursion to calculate the factorial of a given number. First, the function is defined with a name, input argument (n), and annotated output (n!). Then, using the 'dup' operator, the top element of the stack (n) is duplicated to compare it to 1. If the result is less than or equal to 1, then the stack is reduced to just the value 1. If the result is greater than 1, the top element is duplicated and 1 is subtracted from it. Then, the factorial function is recursively called on the duplicated value. Finally, the top two elements of the stack are multiplied together and the result is the factorial of the original input number. This process continues until the original input number is reduced to 1. The example input of 5 will result in an output of 120, which is the factorial of 5.