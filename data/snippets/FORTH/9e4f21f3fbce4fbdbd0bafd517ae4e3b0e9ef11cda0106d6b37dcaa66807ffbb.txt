\ CODE SECTION A ###
\ Start of program
: CUBE DUP DUP * * ;
\ Define CUBE function - calculates the cube of a number
4 CUBE. ( Output: 64 )
\ Use CUBE function to calculate the cube of the number 4
: FACT-ITER ( n -- n! )
    1 SWAP 1 DO            \ Initialize product to 1 and loop from 1 to n
    I 1+ I * SWAP         \ Multiply current number by previous product
    LOOP DROP ;           \ Loop ends with product on top of stack
\ Define FACT-ITER function - calculates the factorial of a number iteratively
10 FACT-ITER. ( Output: 3628800 )
\ Use FACT-ITER function to calculate the factorial of the number 10
: ARRAY-LEN ( a-addr -- n )
    DUP >R                   \ Save original array address
    0 SWAP                   \ Initialize counter and swap array address to top of stack
    BEGIN                   \ Begin loop
        DUP I C@           \ Get current element of array
        0= IF LEAVE THEN    \ If element is null, exit loop
        1+                  \ Increment counter
        CELLS SWAP          \ Move to next element in array
    REPEAT R> SWAP DROP ;   \ End loop, restore original array address and drop it
\ Define ARRAY-LEN function - calculates the length of an array
VAR ARR [ 2 4 6 8 ]       \ Define an array of numbers
ARR ARRAY-LEN. ( Output: 4 )
\ Use ARRAY-LEN function to calculate the length of the array ARR, output should be 4
\ END CODE SECTION A ###

\ CODE SECTION B ###
: SPLIT ( str delim -- split )
    SWAP                    \ Swap delimiter with string
    ROT COUNT              \ Get length of string and convert to count
    ALLOT               \ Allocate space for split string
    DUP ROT                 \ Duplicate string and stack the split string
    SWAP                    \ Swap split string and string
    BEGIN
        DUP WHILE
            DUP NEXT-WORD 
            DUP DUP ROT STRING+                \ Append word to split string
            >R                              \ Save split string address
            2>R SWAP NEXT-WORD-SIZE ALLOT         \ Allocate next word's length
            AWAY THEN 2DROP \ Ignore null string
        ERASER R>                \ Discard the string
        2R>                    \ Pop split string address
    THEN ;                     \ End loop
\ Define SPLIT function - splits a string into parts separated by a delimiter
 "Hello, World!" ", " SPLIT.
 \ Use SPLIT function to split the string "Hello, World!" using the delimiter ", "
\ ( Output: STRING: "Hello" STRING: "World!" )
\ END CODE SECTION B ###