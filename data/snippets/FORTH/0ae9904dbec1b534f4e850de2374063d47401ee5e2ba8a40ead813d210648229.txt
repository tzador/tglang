\ This code snippet demonstrates a recursive implementation of the quicksort algorithm, 
\ which sorts a given array in ascending order.

: quicksort ( array -- sorted-array ) 
    dup 1 > if \ check that the array has more than one element
        dup length   \ get the length of the array
        2 /mod       \ split it into a pivot element and two sub-arrays
        swap         \ put the pivot at the top of the stack
        rot          \ rotate the stack to make room for the sub-arrays
        quicksort    \ recursively call quicksort on the lower sub-array
        swap         \ swap the sorted lower sub-array with the pivot
        1-           \ decrement the length of the upper sub-array for future checks
        quicksort    \ recursively call quicksort on the upper sub-array
    else            \ if the array has one or less elements, it is already sorted
        exit        \ exit from the current recursive call
    then            \ end if statement
;                   \ end the quicksort definition

\ Example usage:
30 7 12 50 20 quicksort
\ Output: 7 12 20 30 50 (sorted array)