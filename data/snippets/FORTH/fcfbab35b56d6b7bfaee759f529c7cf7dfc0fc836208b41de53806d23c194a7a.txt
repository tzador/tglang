: SWAP_DUP ( x1 x2 -- x2 x1 x2 )
    2DUP  SWAP  ;       \ Duplicates the top two elements on the stack and then swaps the order of the top three items

: ADD3 ( x1 x2 x3 -- sum )
    + +  ;              \ Adds the top three elements on the stack

: ARRAY_SORT ( n1 n2 n3 -- sorted_array )
    3 PICK        ( n1 n2 n3 n3 )       \ Copies the third element on the stack to the top
    3 ROLL        ( n1 n3 n3 n2 )       \ Rolls the top three elements on the stack, pushing the third element to the bottom
    SWAP_DUP      ( n1 n3 n2 n3 n2 )     \ Duplicates the third element and swaps it with the second element on the stack
    < IF          ( n1 n3 n2 flag )      \ Compares the top two elements and pushes a flag if the second element is smaller than the first
        2SWAP     ( n2 n3 n1 flag )      \ Swaps the top two elements and the flag
        ADD3      ( n2 n3 n1 sum )       \ Adds the top three elements to get the sum of the first two
        SWAP      ( n2 n3 sum n1 )       \ Swaps the top two elements to get the elements in correct order for comparison
        ARRAY_SORT ( n2 n3 sum n1 )       \ Recursively calls itself to sort the remaining elements
        2DUP ADD3 ( n2 n3 sum sum )       \ Duplicates the sum and adds it to the top two elements to push the sorted elements back to the top
        3 ROLL DROP DROP DROP             \ Drops the remaining elements and the flag
    ELSE                                 \ Executes if the second element is not smaller than the first
        2 DROPN DROP DROP                 \ Drops the flag and the third element from the stack
    THEN                                \ Ends the conditional execution

: RADIX_SORT ( array_size array -- sorted_array )
    2DUP                                ( array_size array array_size array )          \ Creates a duplicate of the array and its size on the stack
    ?DO                                  ( array_size array array_size )               \ Starts a loop based on the array size
        I 1+                             ( i+1 array_size array array_size )           \ Gets the current index + 1 for the next element in the array
        DUP 2 PICK                       ( i+1 array_size n1 n2 )                     \ Copies the two elements that need to be sorted from the array
        ARRAY_SORT                      ( i+1 array_size sorted_array )               \ Calls the ARRAY_SORT function to sort the two elements at the top of the array
        2 SWAP                          ( i+1 sorted_array array_size )                \ Swaps the sorted elements with the unsorted elements in the array
        DROP 2DUP DROP                  ( i+1 sorted_array i+1 )                      \ Drops the remaining elements from the top of the stack and duplicates the index for the next loop
    LOOP                                \ Ends the loop
    DROP 2DROP                         \ Drops the remaining elements from the stack
    DROP                                \ Drops the unsorted array size from the stack