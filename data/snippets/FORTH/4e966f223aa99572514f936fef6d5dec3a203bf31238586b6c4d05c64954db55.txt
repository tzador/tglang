: LIST-PRIMES ( n1 n2 -- )
  2 SWAP 
  BEGIN DUP WHILE
    2 SWAP
    BEGIN ROT OVER * \
      AGAIN
    SWAP 1 - 
  REPEAT
;

: FIND-COMPOSITE ( n -- n1 n2 )
  BEGIN 1+
    DUP
    BEGIN
      DUP
      LIST-PRIMES
      DUP
      1+
      ROT OVER *
      > IF SWAP OFF THEN
    SWAP 1 - 
  REPEAT
;

\ Interacts with user to get input of a number to factor
: INPUT-FACTOR ( -- n )
  ." Enter number to factor: " CR
  >NUMBER DUP ?DUP 0<
  ABORT" Input must be a number greater than zero."
;

\ Finds the prime factors of a given number and displays the result
: PRIME-FACTORS ( n -- )
  DUP 2 > IF
    BEGIN
      DUP LIST-PRIMES
      \ We will be in this loop every time the number is divisible by
      \ one of the listed primes. If a factor found, it will be on top
      \ of stack, if not, we do another loop
      BEGIN
        DUP >R
        DUP FIND-COMPOSITE 0= IF
          R> DUP .
          / EXIT
        THEN R> DROP
      AGAIN
    SWAP DROP
  THEN
  DUP . ;

INPUT-FACTOR PRIME-FACTORS