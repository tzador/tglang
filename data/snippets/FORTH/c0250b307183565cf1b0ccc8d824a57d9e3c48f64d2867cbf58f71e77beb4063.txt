: PRIME ( n -- flag )
BEGIN   ( begin loop )
    DUP DUP   ( duplicate n twice )
    1 =   ( check if n equals 1 )
    IF SWAP   ( if true, swap top two elements on stack )
        1 =   ( check if n equals 1 )
        IF EXIT ELSE  ( if true, exit loop )
            DUP   ( duplicate n )
            1+   ( add 1 to top element on stack )
            DUP   ( duplicate n+1 )
            4 =   ( check if n+1 equals 4 )
            IF EXIT ELSE 2 / THEN   ( if true, exit loop, else divide by 2 )
            DUP DUP 2 + SWAP * ( check if n+1 divides evenly into original n )
            IF EXIT ELSE 2 + THEN ( if true, exit loop, else add 2 to top element on stack )
        THEN
    ELSE DUP   ( if false, duplicate n )
        1+   ( add 1 to top element on stack )
        DUP   ( duplicate n+1 )
        DUP 2* OVER < SWAP IF ROT THEN ( check if n+1 < 2*n )
    THEN
AGAIN THEN NOT ;   ( if loop exits, return false )