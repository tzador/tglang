\ A dynamic programming solution to the 0-1 knapsack problem

: knapsack ( n W wt val -- ans )
    ( Memoization table )
    create n over 1 + * 1+ cells allot 1 cells
    ( Initialize base case )
    dup 0 fill
    ( Recursive solution )
    recurse
    ( n=0 base case )
    dup 0= if
        drop 0
    ( Current weight > max weight, recurse on n-1 )
    else over swap < if
        >r ( Push n for recursive solution )
        ( Recurse on n-1 )
        dup n over 1 - swap dup recur
        r> swap dup >recur
    ( Current weight <= max weight, choose max of adding or not adding item )
    else
        over swap < if ( wt[n-1] > W )
            dup n over 1 - swap recur ( Recurse on n-1 )
         else ( wt[n-1] <= W )
            dup n over 1 - swap recur ( Recurse on n-1 )
            swap wt[n-1] + over swap ! swap val[n-1] + over swap ! ( Add item and corresponding value )
        then
    then ;

\ Example usage:
3 8 3 7 1 5 6 2 knapsack
( Should output 12, the max value that can be obtained with weight limit 8 and items of weight 3, 1, and 6 and values 7, 5, and 2 respectively )