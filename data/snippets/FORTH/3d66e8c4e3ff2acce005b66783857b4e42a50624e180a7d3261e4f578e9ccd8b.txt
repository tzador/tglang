\ SORT ALGORITHM USING MERGE SORT

: merge-sort \ define merge sort function
( seq -- seq' ) \ takes in a sequence and returns a sorted sequence
dup length 0= \ base case: if sequence length is 0, return sequence
if \ if not base case, continue with merge sort
2dup 2/ dup \ find midpoint
-rot 0 -rot \ divide sequence into two halves
merge-sort \ recursively sort first half
swap -rot 0 -rot \ divide sequence into two halves
merge-sort \ recursively sort second half
rot \ rotate the sorted second half to the top
2dup \ duplicate the two sorted halves
length 2dup \ find length of first half
0 -rot \ move length of first half to top
0 swap \ push 0 to stack
3 pick \ move length of second half to top
\stack: [length 2nd_half][0][0][length 1st_half][1st_half][2nd_half]

do \ start main loop
2 pick >r \ compare top two length values and push length of first half to return stack
-rot \ move first elements of first and second halves to top
2 pick >r \ compare top two elements and push smaller one to return stack
-rot \ move second elements of first and second halves to top
r> \ swap elements to correct order
r> \ swap elements to correct order
r> \ get length of first half back
loop \ end loop
swap over \ move sorted first half to top of stack and move second half below it
tuck \ put length of second half on top of second half
swap \ move sorted first half below length of second half
do \ start main loop
2 pick >r \ compare top two length values and push length of second half to return stack
-rot \ move first elements of first and second halves to top
2 pick >r \ compare top two elements and push smaller one to return stack
-rot \ move second elements of first and second halves to top
r> \ swap elements to correct order
r> \ swap elements to correct order
r> \ get length of second half back
loop \ end loop
swap 2 pick \ move length of second half above elements of second half
2 pick over \ move sorted first half above length of first half
swap 2 pick \ move length of first half above elements of first half
2 pick > \ compare top two length values
if \ if second half is longer than first half
2 pick -rot \ move second half to top of stack
2 pick swap \ move first half below length of second half
else \ if first half is longer than second half
tuck 2 pick \ move length of first half above elements of first half
tuck 2 pick swap \ move length of second half above elements of second half
tuck 2 pick \ move length of first half above elements of first half
then \ end if statement
; \ end merge sort function