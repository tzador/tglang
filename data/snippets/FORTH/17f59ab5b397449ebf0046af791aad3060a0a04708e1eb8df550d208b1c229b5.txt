: greater_than ( n1 n2 -- flag ) \ defining a greater than function
    dup > if \ duplicate the top two elements and check if the first element is greater than the second
    2drop true \ if so, drop both elements and push true onto the stack
    else \ otherwise
    2drop false \ drop both elements and push false onto the stack
    then \ end if statement
    ; \ end function definition
    
: calculate_factorial ( n -- n! ) \ defining a function to calculate factorial
    1 swap \ initialize product to 1 and swap input with it
    dup 1 > \ check if input is greater than 1
    if \ if so, enter loop
        dup 1- \ duplicate input and decrement it
        swap \ swap product and input
        * \ multiply product and input
        recurse \ recursively call function
    else \ if not, end loop
        drop \ drop remaining input
    then \ end if statement
    ;
    
: test_factorial \ defining a function to test the factorial function
    5 calculate_factorial \ calculating factorial of 5
    120 = if \ checking if result is correct
        ." Factorial function works!" \ if so, print success message
    else \ otherwise
        ." Factorial function does not work." \ print error message
    then
    ;
    
test_factorial \ calling the test function