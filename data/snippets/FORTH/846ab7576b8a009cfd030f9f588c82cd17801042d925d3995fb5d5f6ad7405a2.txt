\ This code snippet creates a function to calculate the prime factorization of a given number using recursive division
: PRIME-FACTORS ( n -- facs ) \ Takes a number n on the stack and returns a list of its prime factors
  2 SWAP /MOD \ Divide n by 2, leaving quotient on stack and remainder at the top of the stack
  DUP 1 = IF DROP 2 RECURSE THEN \ If remainder is 1, drop divisor and recurse with quotient
  \ Otherwise, divisor is a prime factor
  DUP 1 < IF DROP RECURSE THEN \ If divisor is less than 1, recurse with quotient
  \ Otherwise, divisor is the largest prime factor
  SWAP DUP 2 < IF DROP ELSE DUP 2 / THEN \ Check if quotient is small enough to be a prime factor
  \ If not, divide quotient by 2 and recurse
  DUP 1 + SWAP PRIME-FACTORS  APPEND \ Add divisor to list of factors and recurse on quotient
  ;