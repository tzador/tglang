\ ` "    ####  STRING MANIPULATION AND CONDITIONALS ####

: reverse ( str -- str )         \ Reverses a given string
    dup length 0 ?do
        i c@               \ get characters in reverse order
        dup i negate 1 + i c!    \ overwrite string in reverse order
    loop ;
    
: concat ( str1 str2 -- str3 )       \ Concatenates two strings together
    dup length swap length +        \ get length of combined string
    dup allocate throw             \ allocate memory for new string
    over swap move                 \ copy first string
    swap move                    \ copy second string
;

: replace ( str old new -- str(new) )        \ Replaces old substring with new substring in a given string
    over length <> if                     \ check if strings are same length
        ." ERROR: Strings must be same length!" cr
        exit
    then
    0 ?do
        i dup c@ i 3 + c@                \ check first character of old substring
        over c@ over 3 + c@                 \ check first character of new substring
        <> if                             \ if not a match, skip ahead 3 characters
            i swap 3 +                  \ move ahead to first character of old substring
            loop
        then
        dup swap i -                  \ calculate index to replace at
        dup calc length dup allocate throw     \ allocate memory for new string
        over swap move                \ copy before replacement
        over length + swap dup move        \ copy after replacement
        swap 3 + over c!              \ overwrite with new substring
    loop ;
    
: contains? ( str1 str2 -- boolean )         \ Checks if a given string contains a given substring
    dup length swap length - +i = if      \ check if length of first string is equal to length of combined strings
        drop true
    else
        dup length swap < if               \ check if first string is shorter than combined strings
            drop false
        else
            over length < if             \ check if second string is longer than first string
                drop false
            else                   \ perform substring search
                0 ?do
                    i swap 3 + c@       \ check first character of second string
                    dup i 3 + c@           \ check first character of current search position
                    = if                \ if match is found, return true
                        drop true
                        exit
                    then
                    i swap 3 + i 1 +     \ move ahead 1 character
                    swap
                loop
                drop false
            then
        then
    then ;

: decide ( str boolean -- str1 | str2 )        \ Conditionally selects between two strings based on given boolean value
    over if                \ if boolean is true, select first string
        drop swap dup
    else                \ if boolean is false, select second string
        drop drop swap
    then ;


 \ ` ########################################################