: ARRAY-SORT ( arr -- arr-sorted ) \ This word performs selection sort algorithm on an array
    0             ( begin index of unsorted array )   \ initializes begin index to 0
    BEGIN         ( begin selection sort loop )
        OVER     ( dup of array to be sorted )
        I @ >    ( index of max element in unsorted array )
        >R       ( pushes index of max element to return stack )
        0 J       ( initializes inner loop index to 0 )
        BEGIN    ( begin inner loop )
            I @ > ( compares current max with current element )
            IF     \ if max is less than current element, swap them
                I @ SWAP I ! SWAP \ swap max with current element
            THEN
            J 1+   ( increment inner loop index )
            J @ #   ( number of iterations in inner loop )
        >         ( take top element from return stack )
        IF        \ if first iteration, skip overhead of performing swap
            0 J   ( push J back to stack )
            J I ! ( assign max index to begin index )
        THEN
        J @ #     ( number of iterations in inner loop )
        1+        ( compensate for begin index )
    1-            ( decrement begin index )
    OVER          ( dup of array to be sorted )
    DUP C@        ( number of elements in array )
    I @ SUBTRACT  ( number of iterations in outer loop )
    +             ( compensate for 1- decrement )
    >R            ( pushes array pointer to return stack )
    I J ERASE     ( removes temporary variables from stack )
;bis
    R>            ( take array pointer from return stack )
;