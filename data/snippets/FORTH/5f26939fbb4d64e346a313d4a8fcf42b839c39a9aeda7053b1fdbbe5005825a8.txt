: is-prime ( n -- f )
    2 dup > ( check if n is less than 2, return false )
    if
        drop false
    else
        2 swap loop ( loop through numbers 2 to n )
            dup ( duplicate current number )
            1+ ( increment it )
            dup ( duplicate again )
            swap ( put increment in top of stack )
            > ( check if increment is larger than current number )
            if
                nip ( if so, remove increment and continue loop )
                again
            then
            dup ( duplicate current number )
            nip ( remove it, keep only the increment )
            > ( check if increment is a factor of current number )
            if
                drop false ( if it is, return false )
            else
                dup swap >r  ( save increment and current number )
                dup r> / ( divide current number by increment )
                is-prime ( recursively call is-prime on divided number )
                r> mod ( get remainder from divided number )
                0= ( check if remainder is 0, if so then it's not prime )
                if
                    false ( if remainder is 0, return false )
                else
                    r> ( if not, get current number back from return stack )
                    r> ( grab increment again from return stack )
                    1+ ( increment it again )
                    2 nip loop ( loop from incremented number to n-1 )
                    true ( if all increments are not factors, return true )
                then
            then
    then
; ( end definition )