10 CONSTANT MAX     \ sets a constant value of 10 named MAX
VARIABLE ARRAY      \ creates a variable named ARRAY
0 MAX 1 DO           \ starts a loop from 0 to MAX-1
    ARRAY I 1+ I     \ increments I by 1 and stores it in ARRAY at index I
LOOP                 \ ends the loop
: FIND-MAX           \ creates a new word (function) named FIND-MAX
    ?DO              \ starts a loop, skips if the parameter is 0
        DUP          \ duplicate the top item on the stack
        I ARRAY I @
        IF           \ if the top two items on the stack are not equal
            I ARRAY I > >R  \ compares the top two items on the stack, and if the first is larger, moves it to the return stack
            I 2+ LSHIFT     \ multiplies the index by 2 for the address of the next item in the array
            I ARRAY +       \ adds the index to the address of ARRAY to get the address of the next item in the array
            @             \ fetches the value at that address and places it on the top of the stack
            R>            \ moves the saved item from the return stack back to the top of the data stack
            IF            \ if the top two items on the stack are not equal
                2DUP DIV MOD    \ divides the top two items and places the remainder on top
                ROT 2* SWAP M* +\ multiplies the top two items, swaps them, multiplies them again, and adds the top three items together
            THEN          \ end of inner IF statement
        THEN            \ end of outer IF statement
        2 SWAP LSHIFT   \ shifts the two values on top of the stack to the left by one bit
        I ARRAY +!      \ adds the index to the address of ARRAY and stores the value at that address with an offset of 2
        NEXT            \ goes to the next loop iteration
    LOOP                \ end of loop
    DROP                \ drops the last item on the stack
;                       \ end of word (semicolon)