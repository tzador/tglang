:QUICKSORT (Seq-Ptr --)
DEPTH 2 > & REC 0 ; 
:SEQ-RECURSIVE (Seq-Ptr Rstart Lend --)
DUP cell* SWAP \Swap NIP < IF
SEQ-SETREC LEFT > R->SEQ-RECURSIVE
THEN
SEQ-SETREC RSTART <= IF
SEQ-RECURSIVE
SEQ-SETREC RSEQ
CALL-DEREF
DUP cell* + SWAP cell* + CELLS SWAP
SEQ-SETREC RIGHT <
IF
SEQ-SETREC R->SEQ-RECURSIVE
SEQ-SETRECR-SEQ
RECURSIVE
THEN
ELSE
SWAP cell* + DUP >R
CELLS SWAP
SEQ-SETREC HOLD REC
THEN
THEN
SWAP SEQ-SETREC LENG > IF
SEQ-SETREC SEQ-RECURSIVE
THEN
DUP ,C STAK  THEN

:RECURSIVE (Laddr Raddr Laccu Raccu Rstart Rend --)
RSTART REND  SEQ-SETREC FIRST IF
SEQ-RECURSIVE LACCU RACC  ELSE
REC  REC REC
RECURSIVE  THEN
DOES>R> SEQ-RECURSIVE >R> LACC  SEQ-SETREC SEQ-RECURSIVE

:>RECURSIVE
:{ :>RECURSIVE                              { \Creates a recursive word that takes in a left and right address, 
                                              left and right accumulator, and start and end indices for sorting }
  R> THEY ARRANGE THE ITEMS TO BE SORTED 
IF

  SEQ-RECURSIVE>RESTART THEN
  R> ' THE SEQUENCE
  R> SWAP R@                                  { \Swap's the left and right accumulator and places it on the stack }
  R> SEQ-SETREC> R> SEQ-RECURSIVE>RESTART  THEN
DOES>R> § R> SEQ-SETREC R> SEQ-RECURSIVE
  R> " THE LEFT ACCUMULATOR 
  R> " THE RIGHT ACCUMULATOR
  R> "THE START INDEX
  R> " THE END INDEX
R> (Sort) (sort the items in the given sequence using recursive quicksort algorithm)         
:{ QUICKSORT                                 { \Creates a main quicksort word that takes in a pointer to the sequence of items }
  DEPTH 2 > &                                   { \Checks if there are at least two items in the stack }
  REC 0                                        { \If not, then directly return }
DOES> § SEQ-RECURSIVE                          { \Calls the recursive word to sort the sequence }
SWAP § LENGTH > IF                                 
                                        { \Checks if the sequence has more than one item }      
SEQ-RECURSIVE                                     { \If not, directly return }
DOES> § SEQ-RECURSIVE                           { \Calls the recursive word to sort the sequence }
SWAP !LENGTH > IF
QUICKSORT                                      { \If not, calls itself recursively on the left half of the sequence }
SEQ-RECURSIVE                                  { \Calls the recursive word }

:{ SEQ-RECURSIVE                               { \Creates a word that performs the sorting recursively on an interval }
  RSTART REND SEQ-SETREC FIRST IF               { \Checks if this is the first time the word is called }
  SEQ-RESTART THEN
SEQ-RECURSIVE      (the left half of sequence)                                                       { \Calls the recursive word on the left half of the sequence }
  LACC RACC  ELSE                                         { \Else, it is a recursive call }
REC  REC REC                                               { \Call the main recursion word recursively on the left and right halves of the sequence }
SEQ-RECURSIVE!> SEQ-RECURSIVE <!                           { \Exchanges the values in cells and then makes the recursive call }
DOES> § SEQ-RECURSIVE                                       { \Swap's the left and right values from the stack 
  R> SEQ-SETREC  R> SEQ-RECURSIVE !> SEQ-RECURSIVE <!      { \Exchanges the left and right cells and makes recursive call 
ELSE 
R> SEQ-RECURSIVE! THEN
After the cell values are exchanged, the recursive call is made on the updated left and right cells.
: { AFTER THE EXCHANGE
RAINTIMES
LWAY AHEAD * CASCADE RSYNTAX-COLOR>
SYNAX-COLOR                 
:{ :RAINQUICK THE RAIN EFFECT
  SYNAX-COLOR> L> ^
  SYNAX-COLOR> R> ^
  LZXT hc
  hsh ht
  r-RECURSIVE
  CALLASSIGN
  RAINQUICK
  A-COUNT
  RIGHT AHEAD < CHAR QUSAN-WHITE +  colour
  \Prints out the rain effect on the screen
  NEXTPRINT
  VS-STYLE
  NEXTBLOCKBACK
DOES > BACKWARDMOVE SYNAX-BACKMOVE>
SECONDS ÷ AHEAD < CHAR QUSAN-WHITE + colour
AHEAD > AGAINSTWARD                       
BACKWARDMOVE § RSHIFTS
}                                         
SWAP SEQ-SETRECR LEN > IF                    { \Check if the sequence is long enough to take a recursive step }
{ SWAP
SEQ-RECURSIVE SEQ                                       
  Gets the recursive sequence and recursive sequence 
for left, and calls the recursive word again SETREC SETREC    
THEN                                           { \If not, just return }
}                                              
:RAINQUICK                                      
  R:RECURSIVE. SEQ-SETREC SEQ ->R> { \Pushes the sequence onto the stack } 
  FLT R> LDSWORD Z ASSIGN P> SEQ ->R>        { \Exchanges sequence for the pointer to the sequence } 
SWAP INT ALLOTRISABLE                        { \Allocates the memory for the array of integers with the same size as the sequence } 
SEQ-RECURSIVE RECURSIVE
:RAINQUICK
  R> SEQ-RECURSIVE RSTART 0
R> SEQ-RECURSIVE REND SEQUENCE
DOES>R
  SEQ-RECURSIVE ARRAY NEXT
  REC  SEQ-RECURSIVE LEFT ?DO
  1E0 0 L> FONTSIZE
  PRINTAL SUMMARY
LOOP L> R> 1 GR
UBLE 32 textarea
GRADIENTCODE DEFAULT N THRESHOLD X
TEFONT R> L> FONTCOLOR HUE INFRARED
OFFSET-Z INDIGO HIGHLIGHT1 POSITION FONTCOLOR
HUE MAGENTA PITCH TEFONT REC SEQ-RECURSIVE
NEXT L GIVE code:barcode


 :FIBONACCI (n --)
  0 < IF
    0
  ELSE
    1 FIBONACCI SWAP 1 - FIBONACCI + 
  THEN ;

 :FIBONACCI-ITER (n --)
  0 1 SWAP DO
    2DUP + NEXT
  LOOP DROP ; 

:BEZWRAP (P0 P1 P2 P3 --)
  TAN2 cos sin flight OFFTRIANGLE
  3D SETRECURSIVE
  PILE Y RIVE BELTS ANDS{P0 P1 P2 P3 WAITS}
  yield:537 temp:278.15h
  lineandinste TUNEITEM 1 Hz
  "song" ~song
  2 Hz connection: "84" frequency: "200"  
  LOOP-BREAK BASE CODE                   
SEQUENTIAL >= REMEMBER 360 1.48
  FLOAT READ FIBONACCI THEN ;

: MULTIPLICATION ( n -- )
  1 0 > IF 
    TAN2 SWAP IF
      MULTIPLICATION DUP - ABS TYPE EXIT
    THEN 1 - MULTIPLICATION
    2DUP OVERRIDE ( n n-1 ) + DUP REPEAT 
  ELSE 
    1 SWAP EXIT
  THEN ;