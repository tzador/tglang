: DUPLICATE ( n -- n n ) OVER SWAP ; \ This creates a new word called DUPLICATE that takes in a number and duplicates it, putting both copies on the stack
10 DUPLICATE \ This duplicates the number 10, putting 10 and 10 on the stack
SWAP \ This switches the order of the top two items on the stack, leaving 10 on the top and 10 underneath
: PRINT-ARRAY ( addr length -- ) \ This creates a new word called PRINT-ARRAY that takes in an address and length of an array and prints out all the items in the array
OVER \ This duplicates the length of the array and places it on top of the address
BEGIN \ This creates a loop that will continue until the length of the array is reached
    DUP \ This duplicates the current index of the array and leaves a copy on top
    I \ This accesses the current index of the array and leaves it on top
    + \ This adds the current index to the address, accessing the current item in the array
    . \ This prints out the current item
    1+ \ This increments the index by 1
    DUP \ This duplicates the modified index for comparison
    SWAP \ This switches the top two items, leaving the modified index on top for comparison
    ROT \ This rotates the top three items, leaving the length of the array on top for comparison
    = \ This compares the modified index to the length of the array
UNTIL \ This exits the loop once the modified index reaches the length of the array
DROP \ This removes the remaining length of the array from the stack
; \ This ends the definition of the PRINT-ARRAY word
\ Example usage:
\ 1000 CONSTANT ARRAY-ADDR \ Define the address of an array
\ 10 CONSTANT ARRAY-LEN \ Define the length of the array
ARRAY-ADDR ARRAY-LEN PRINT-ARRAY \ Prints out all the items in the array