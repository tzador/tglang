: factorial ( n -- n! )   \ This is a comment explaining the purpose of the function
   dup 0 = if  -1 else     \ Checks if input is 0, if true sets result to -1 and exits
      dup 1 = if            \ If input is 1, result is also 1 so return 1 and exit
         drop 1            \ Drop input from stack and return 1 for result
      else                 \ Otherwise move to else statement
         dup 1 -           \ Store a copy of input, subtract 1, and push to stack
         factorial         \ Recursively call this function with the new input
         *                 \ Multiply the result of recursion with input stored earlier
      then                 \ End if statement
   else                    \ Move to else statement if input is not 0
      dup 1 -              \ Store a copy of input, subtract 1, and push to stack
      factorial            \ Recursively call this function with the new input
      *                    \ Multiply the result of recursion with input stored earlier
   then                    \ End if statement
;                         \ End of function definition