: SUM ( n1 n2 -- n3 ) \ Define SUM function that takes two numbers from stack and returns their sum
    SWAP \ Swap the order of the numbers
    ROT \ Rotate the top three stack values, bringing the second number to the top
    + \ Add the top two numbers
    SWAP \ Swap the order again to return the sum to the top of the stack
    DUP \ Duplicate the sum
    . \ Pop the top number off the stack and print it
    CR \ Print a new line
    1 \ Push 1 onto the stack
    SWAP \ Swap the order to put 1 on top
    - \ Subtract 1 from the sum
    DUP \ Duplicate the new sum
    0 = \ Check if the duplicate is equal to 0 (end condition for recursion)
    IF \ If it is not equal to zero, continue recursion
        SWAP \ Swap the order again so the new sum is on top
        >R \ Push the current sum onto the return stack
        SUM \ Recursively call SUM function
        R> \ Pop the previous sum off the return stack
        + \ Add the two sums together
    THEN \ End if statement
; \ End function definition

5 10 SUM . \ Call SUM function with 5 and 10 as arguments and print the result