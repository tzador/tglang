\ A code snippet demonstrating binary search algorithm in FORTH

: BINARY-SEARCH ( array n -- index/fail )  \ defines the binary search function with parameters array and n
    0 SWAP 1- DO                         \ initializes loop counter, swaps parameters, and iterates from n-1 to 0
        2DUP                            \ duplicates top 2 elements of stack for comparison
        OVER >                           \ checks if top element is larger than second element (critical comparison)
        IF                            \
            2DROP EXIT                  \ if true, drops top 2 elements and exits the loop with success on the stack
        THEN                      \
        2/ NIP                      \ if false, divides stack by 2 and removes top element (critical halving)
    LOOP                              \

    TRUE 0                        \ adds TRUE and 0 to the stack (initial values for loop)
    DO                                  \ begins a new loop with top 2 values on stack
        DUP                      \ duplicates top element on stack for comparison
        2DUP                     
        OVER >                               \ checks if top element is larger than second element (final comparison)
        IF                          \ 
            2DROP 1-                  \ if true, drops top 2 elements and subtracts 1 from index to continue loop 
            TO TRUE0 +                 \ moves stack pointer from TRUE0 to current value of i
        ELSE                      \
            2DROP NIP                 \ if false, drops top 2 elements and removes top element for halving
        THEN                        \ 
    LOOP                             \

    FALSE                      \ adds FALSE to stack as default value for failure
;                                

\ To use this code:

57  93  123  150        \ create a sorted array
123                       \ binary search for 123 
SWAP BINARY-SEARCH        \ execute binary search function with array and n as parameters