: GREETING ( -- ) \ prints a greeting message
    ." Hello, welcome to my program!" ;
: COUNTDOWN ( n -- ) \ counts down from n to 0
    BEGIN
      DUP . CR \ duplicate top of stack, print and add new line
      1- \ subtract 1 from top of stack
    AGAIN
    DROP \ drop the final 0 from the stack
    ." Counted down from n to 0." ;
: SUM ( a b -- c ) \ sums two numbers and prints the result
    + \ add the two numbers on the stack
    . \ print the result
    ." is the sum of a and b." ;
: FACTORIAL ( n -- n! ) \ calculates the factorial of a given number
    DUP 1 = NOT \ duplicate top of stack, check if equal to 1 (base case for recursion)
    IF
      DUP 1- \ duplicate, subtract 1 from top of stack
      RECURSE \ recursively call the factorial definition
      * \ multiply the result of recursion with top of stack
    ELSE
      DROP \ drop the 1 from the stack
      1 \ add 1 to top of stack (base case for recursion)
    THEN ;
: QUICKSORT ( a n -- sorted a ) \ sorts an array using quicksort algorithm
    DUP IF \ if n is greater than 0 (base case for recursion)
      PICK 0 = NOT \ check if pivot is not equal to first element
      IF
        DUP 0< IF \ check if pivot is less than first element
          1+ \ increment pivot by 1
        THEN
        DUP 1 PICK 0> IF \ check if pivot is greater than last element
          BEGIN 1- \ decrement pivot by 1
          DUP IF \ if pivot is not pointing to first element
            SWAP PICK \ swap pivot with current element
            ROT 1+ \ increment pivot by 1
          THEN
        AGAIN
        DUP 0< IF \ check if pivot is pointing to first element
          SWAP 1 PICK 1 - SWAP \ swap elements and pivot
        THEN \ end right partition
        PICK 0 1+ \ increment pivot by 1
        SWAP PICK QUICKSORT \ recurse on left partition
        PICK 0 ROT SWAP 1- PICK QUICKSORT PICK \ recurse on right partition
      ELSE \ end recursion
        DROP ROT \ drop pivot from stack and rotate
      THEN
      2 PICK 2 SWAP + ROT 2 PICK + \ swap elements and increment count
      PICK QUICKSORT \ recurse on left partition
      0 2 PICK ROT QUICKSORT PICK \ recurse on right partition
      ROT \ rotate elements to top of stack
    ELSE
      ROT \ rotate elements to top of stack
    THEN ;