: even? ( n -- flag ) dup 2 mod 0 = ;

: odd? ( n -- flag ) even? 0 = ;

: factorial ( n -- f ) dup 1 = if 1 else dup 1 - factorial swap * then ;

: fibonacci ( n -- f ) dup 2 < if drop 1 else dup 1- fibonacci swap 2- fibonacci + then ;

: quicksort ( seq -- sorted-seq )
  \ The quicksort algorithm IMHO is short and elegant.
  dup 2 > if
    \ We need a pivot value. Here we just grab the first item.
    \ Another choice would be \ 2swap drop
    dup head
    \ Split into two arrays.
    \ The first contains items < pivot, the second items > pivot.
    \ (Note that the pivot item will be neither of these!)
    dup rest swap partition [
	\ Recurse, and sort those sub-arrays.
	dup quicksort
    ] dip concat
    \ Flatten the array of arrays we just created:
    concat
    \ And put the pivot item in the right place which is between the
    \ the two sub-arrays we just sorted.
    \ First we reverse the order of the two sub-arrays so that
    \ we can easily join them with the pivot item in between. On the stack
    \ we now have:
    \ <bottom> lo hi pivot <top>
    swap concat
      /''
    ?\ : sorted-seq array
      \ Here I use an empty array and then concat it with
      \ the result to create the new, one element longer,
      \ array. To reduce this by a Recurse call would
      \ require a reverse at the end which I would perceive
      \ as quite ugly.

  else drop dup [
      \ The case of an array of size 2 or less
      dup > if -rot then
  ] ;