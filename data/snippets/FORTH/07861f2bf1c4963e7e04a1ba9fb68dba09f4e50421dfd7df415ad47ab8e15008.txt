: ADDONE ( n -- n+1 ) \ This word takes in a number and adds 1 to it.
    1 SWAP + ; \ Swaps the number on top of the stack with the number below it and then adds them together.
    
: RESET ( -- ) \ This word clears the entire stack.
    0 0 DO DROP LOOP ; \ Uses a DO-LOOP construct to drop all elements in the stack.
    
: MAX ( n1 n2 -- max ) \ This word finds the maximum of two numbers.
    DUP > IF \ Duplicates the top number on the stack and checks if it is greater than the second number.
        SWAP DROP \ If yes, then the top number becomes the maximum and the second number is dropped.
    THEN \ Ends the IF statement.
    SWAP DROP ; \ If not, the second number remains the maximum and the top number is dropped.
    
: FIB ( n -- fib(n) )   \ This word calculates the n-th fibonacci number.
    DUP 0 = IF \ Duplicates the input and checks if it is equal to 0.
        DROP 0 ; \ If yes, then the fibonacci number is 0 and the stack is cleared.
    ELSE \ If not, the input is not equal to 0 and the calculation continues.
        1- DUP RECURSE SWAP 1- RECURSE + ; \ Recursive calls to find the n-1 and n-2 fibonacci numbers and add them together.
        
: SORT ( addr n -- ) \ This word sorts the elements in an array in ascending order.
    OVER 0 DO \ Uses an outer loop to iterate through the array n times.
        OVER SWAP DO \ Uses an inner loop to compare and swap adjacent elements starting from the second element.
            OVER I++ @ OVER I @ > IF \ Get the next element in the array and compare it with the current element.
                SWAP I++ @ SWAP I++ ! \ If the next element is greater, then swap them.
            THEN \ Ends the IF statement.
        LOOP \ Ends the inner loop.
    LOOP ; \ Ends the outer loop.