."Enter a number: "		( Display message to prompt for input )
GETLINE					( Get input from user )
NUMBER?					( Check if input is a number )
IF						( If input is a number, perform following calculations )
DUP 0 >=					( Duplicate input and check if it is greater than or equal to 0 )
IF 						( If input is greater than or equal to 0, perform following calculations )
1 				( Push 1 to the stack ) 	
BEGIN 			( Begin a loop )
SWAP 			( Swap the top two elements on the stack )
DUP 			( Duplicate the top element on the stack )
OVER 			( Copy the second element on the stack )
* 				( Multiply the top two elements on the stack )
+ 				( Add the top two elements on the stack )
1 - 			( Subtract 1 from the top element on the stack )
DUP 0 = 		( Duplicate input and check if it is equal to 0 )
WHILE 			( While input is greater than 0, continue loop )
DROP 			( Discard the top element on the stack )
SWAP 			( Swap the top two elements on the stack )
DUP 			( Duplicate the top element on the stack )
OVER 			( Copy the second element on the stack )
* 				( Multiply the top two elements on the stack )
+ 				( Add the top two elements on the stack )
OVER 			( Copy the second element on the stack )
- 				( Subtract the top element on the stack from the second element on the stack )
1 + 			( Add 1 to the top element on the stack )
OVER 			( Copy the second element on the stack )
0 > 			( Check if the second element on the stack is greater than 0 )
WHILE 			( While the second element on the stack is greater than 0, continue loop )
DROP 			( Discard the top element on the stack )
ELSE 			( If input is not greater than or equal to 0, display error message )
."Error: Input must be a positive integer." ( Display error message )
THEN 			( End if statement )
ELSE  		( If input is not a number, display error message )
."Error: Input must be a number." ( Display error message )
THEN 			( End if statement )