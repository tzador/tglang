\ This code snippet is a FORTH implementation of the mergesort algorithm \
: mergesort (arr start end -- )     \ Define mergesort function \
  ?dup                             \ Check if array length is more than 1 \
    if                             \ If array length is more than 1 \
      over >r                      \ Push end index to return stack \
      over                        \ Duplicate array start index \
      +                           \ Calculate the middle index of the array \
      2/                          \ by dividing it by 2 \
      dup                         \ Duplicate middle index \
      (arr (start start middle) -- )   \ Calls mergesort for first half of array \
      swap                        \ Swap top two elements of the stack \
      (arr (start middle end) -- )   \ Calls mergesort for second half of array \
      r> merge                    \ Merge the sorted halves of the array \
    else                          \ Else, the array length is 1 or less, so it is already sorted \
      drop                        \ Discard end index from stack \
    then                          \ End if statement \
;                                 \ End mergesort function definition \

: merge (arr1 start1 end1 arr2 start2 end2 -- ) \ Define merge function \
  >r                                 \ Push end2 index to return stack \
  >r                                 \ Push end1 index to return stack \
  >r                                 \ Push start2 index to return stack \
  (arr1 start1 end1 arr2 start2 end2 (end2 end1 end2 start2) -- )
  begin
    r@ <                              \ Check if end2 index is less than end1 index \
    while                             \ While second array's elements are not inserted \
      dup >r                          \ Push start2 index to return stack \
      2dup <                          \ Check if start2 index is less than end1 index \
      if                              \ If start2 index is less than end1 index \
        begin                         \ Begin inserting second array's element into first array \
          rot                         \ Move first array's element to top of stack \
          rdrop                       \ Discard start2 index from return stack \
          swap                        \ Swap top two elements of stack \
          >r                          \ Push end2 index to return stack \
          dup c@                  \ Get the second array's element \
          over c@                 \ Get the first array's element \
          <                     \ Check if first array's element is less than second array's element \
          if                    \ If first array's element is less than second array's element \
            char '- emit        \ Print '-' to mark the beginning of insertion into first array \
            rdrop               \ Discard end2 index from return stack \
            r> 1+                 \ Increment end2 index and push to return stack \
            >r                   \ Push end2+1 index to return stack \
            r> merc             \ Merge rest of second array into first array \
          else                  \ Else, the second array's element is less than the first array's element \
            char '- emit        \ Print '-' to mark the beginning of insertion into first array \
            rdrop               \ Discard end1 index from the return stack \
            r> 1+                 \ Increment end1 index and push to return stack \
            >r                   \ Push end1+1 index to return stack \
            r> merge             \ Merge rest of first array into first array \
          then                  \ End inner if statement \
        again                 \ Repeat until all elements from second array are inserted into first array \
      else                  \ Else, the second array's elements are already inserted \
        2drop             \ Discard start2 and end1 indices from return stack \
        rdrop               \ Discard end2 index from return stack \
      then                  \ End outer if statement \
    repeat                \ Repeat until all elements from second array are merged into first array \
  r> 2drop                 \ Discard start1 and end2 indices from return stack \
  rdrop                   \ Discard end1 index from return stack \
;                            \ End merge function definition \

create arr 20 allot     \ Create an array of size 20 \
0 20 20 r@rnc             \ Fill array with random numbers \
32 5 0 r> merge             \ Sort the array using mergesort \
: dump ( n addr -- )       \ Define dump function for printing array elements \
  0 swap
  begin
    dup if
      dup c@ emit     \ Print ASCII character at address \
      1+                 \ Increment address by 1 to print next element \
    else
      drop                 \ Drop address when all elements have been printed \
      false              \ Return false to stop loop \
    then
  again                  \ Repeat until all elements have been printed \
;                      \ End dump function definition \

\ Code to print array elements before and after sorting \

." Unsorted Array:" cr
arr 20 dump             \ Print unsorted array \

mergesort arr 0 19      \ Sort array using mergesort function \

." Sorted Array:" cr
arr 20 dump             \ Print sorted array