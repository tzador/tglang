0 value n `This creates a variable n and initializes it to 0`
: add-one ( x -- x+1 ) 1+ ; `This creates a function called add-one that adds 1 to the input x and returns it`
: power ( x n -- x^n ) 
    dup 0= 
    if 
        drop 1 `If n is 0, drop it and return 1`
    else 
        dup 1 = 
        if 
            swap drop `If n is 1, just return x`
        else 
            2dup > `Check if n is greater than 1`
            if 
                dup 1- `If it is, decrement n`
                swap dup power `Recursively call the power function`
                * `Multiply the result of the recursive call with x`
            else 
                swap 1- swap power `If n is less than 1, decrement n and recursively call the power function on x`
            then 
        then 
    then 
; `End of the power function`
5 3 power `Call the power function with x = 5 and n = 3`