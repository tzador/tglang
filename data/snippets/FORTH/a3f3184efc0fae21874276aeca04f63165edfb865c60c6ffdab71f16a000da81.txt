\ Example FORTH code snippet
." Welcome to FORTH!" (prints "Welcome to FORTH!" on the console)

: FACTORIAL ( n -- n! ) \ defines a word named FACTORIAL, takes an integer n and returns its factorial
  1 SWAP DUP >R ( initialize variables for loop )
  BEGIN ( start of loop )
    R@ DUP 1- R> * ( multiply top two items on relevant stacks )
    DUP >R 1- ( decrement top item on stack and store in R stack)
  2DUP 0= UNTIL ( checks if top item on stack is 0, if not, repeats loop )
  R> DROP ( drops unnecessary variable on R stack)
  SWAP ; ( final swap to return result on top of stack )

: FIB ( n -- n-th Fibonacci number ) \ defines a word named FIB, takes an integer n and returns the n-th Fibonacci number
  1 SWAP DUP >R ( initialize variables for loop )
  BEGIN ( start of loop )
    R@ OVER + SWAP ( add top two items on relevant stacks )
    2DUP 0= UNTIL ( checks if top item on stack is 0, if not, repeats loop )
    SWAP DROP ( drops unnecessary variable )
  R> DROP ( drop R stack )
  SWAP ; ( final swap to return result on top of stack )

: ZERO ( -- 0 ) \ defines a word named ZERO that returns the number 0
  0 ; ( returns 0 on top of stack )
  
: MAP ( adr len n -- ) \ defines a word named MAP, takes an address, length, and number of items and performs a given operation on each item
  1 SWAP >R ( initialize variables for loop )
  BEGIN ( start of loop )
    DUP R@ + ( calculates address for current item )
    DUP C@ ( gets value at address and leaves copy on stack )
    R@ ( retrieves operation from R stack )
    EXECUTE ( executes operation on current item )
  R> DROP ( drop R stack )
  DROP DROP ; ( drops unnecessary variables and ends word )