\ Stack-based quicksort implementation for an array of integers

: partition ( x1 x2 – pivot i) \ divides the array into two parts, elements greater than pivot on the left and elements lesser or equal on the right
    swap ( x2 x1 )
    over > ( x1' x1 x2 )
    if -rot ( x1 x2 pivot-1 )
        swap 1+ ( x1 pivot x2 )
        do ( x1 pivot..x2-1 x2 )
            i @ pivot > if ( x1' pivot x2' )
                rot ( pivot x1' x2' )
                1- swap ( pivot x1' x2' )
            else ( x1 pivot x2 )
                2drop ( pivot )
            then ( x1 x2 )
        loop ( x1..pivot )
        nip ( x1 )
    else ( x1 x2 )
        1+ ( pivot x1 )
        do ( x2 pivot..x1+1 )
            i @ pivot > if ( pivot' x2' )
                rot ( pivot' pivot x2-split )
                1- swap ( pivot' pivot x2-split )
            then ( pivot x2 )
        loop ( pivot )
        nip ( pivot )
    then ( pivot )
;

: quicksort ( n – n ) \ recursive quicksort implementation
    dup 0 = if drop then ( n' )
    dup 1 = if drop then ( ) ( empty array or single element array )
    dup { \ divide the array into two parts based on pivot and perform quicksort recursively
        partition
        over quicksort ( n1 )
        swap over quicksort ( n2 )
    } 2array ( [ n1 n2 ] )
    concat ( sorted array )
;

\ Usage:
\ Define an array and pass it to the quicksort function.
10 3 5 1 8 2 9 6 7 4 quicksort ( 10 2 3 4 5 6 7 8 9 10 )