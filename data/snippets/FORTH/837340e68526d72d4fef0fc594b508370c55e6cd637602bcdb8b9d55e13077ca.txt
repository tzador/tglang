: PAIR \ push two items on stack and put them in a pair
  2DUP \ duplicate top two items on stack
  2@ \ get the value at current address and push to stack
  SWAP \ swap top two items on stack
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    OVER DUP + \ add top two items on stack, duplicate result
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  ROT \ rotate top three items on stack
  R> \ move top item from return stack to data stack
  SWAP \ swap top two items on stack (again)
  2DUP \ duplicate top two items on stack
  SWAP \ swap top two items on stack (again)
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    OVER DUP + \ add top two items on stack, duplicate result
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  2DUP \ duplicate top two items on stack
  SWAP \ swap top two items on stack
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    SWAP 1+ \ swap top two items on stack, add 1 to top item
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  SWAP \ swap top two items on stack (again)
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    OVER DUP + \ add top two items on stack, duplicate result
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  ROT \ rotate top three items on stack
  R> \ move top item from return stack to data stack
  2DROP \ drop top two items on stack
  2DUP \ duplicate top two items on stack
  SWAP \ swap top two items on stack
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    OVER DUP + \ add top two items on stack, duplicate result
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  SWAP \ swap top two items on stack (again)
  2@ \ get the value at current address and push to stack
  BEGIN \ begin loop
    OVER DUP + \ add top two items on stack, duplicate result
    >R \ move top item to return stack
    1- \ subtract 1 from top item on stack
    DUP \ duplicate top item on stack
  UNTIL ( 0= ) \ loop until top item equals 0
  2DROP \ drop top two items on stack
  ROT \ rotate top three items on stack
  R> \ move top item from return stack to data stack
  2@

  \ this is equivalent to the following:
  : PAIR 
    2dup 2@ swap 2@
    begin 
      over dup + >r 1- dup 
    until ( 0= ) 
    2drop rot r> swap 2dup swap 2@ 
    begin 
      over dup + >r 1- dup 
    until ( 0= ) 
    2drop 2dup swap 2@ 
    begin 
      swap 1+ >r 1- dup 
    until ( 0= ) 
    2drop 2dup swap 2@ 
    begin 
      over dup + >r 1- dup 
    until ( 0= ) 
    2drop rot r> swap 2dup swap 2@ 
    begin 
      over dup + >r 1- dup 
    until ( 0= ) 
    2drop rot r> 2@
;