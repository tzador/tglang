\ This is a code snippet in FORTH

: GCD ( n1 n2 -- gcd )
  \ Recursive implementation of the Euclidean algorithm to find the greatest common divisor
  dup 0= IF
    drop
    exit
  THEN
  >r ( n1 n2 r: n1 )
  mod ( n1' n2 )
  r> ( n1 n2 n1' )
  recurse ( n1 n2 gcd )
;

: ROTATE ( n1 n2 n3 -- n2 n3 n1 )
  \ Rotates the top three items on the stack
  >r >r
  over swap
  r> r>
;

: BUBBLE_SORT ( addr1 u1 -- )
  \ Sorts an array in ascending order using the bubble sort algorithm
  over 0= IF
    drop
    exit
  THEN
  over 1- dup ( addr1 u1 u2 )
  0 DO
    i ( addr1 u1 i )
    DUP
    1+ DO
      i ( addr1 u1 i j )
      over j ( addr1 u1 i j addr2 u2 )
      swap ( addr1 u1 i addr2 u2 j )
      2>r ( addr1 u1 i )
      2dup ( addr1 u1 i u3 j u4 )
      < IF
        2>r ( addr1 u1 i )
        >r ( addr1 u1 i u3 )
        r> ( addr1 u1 i u3 )
        swap ( addr1 u1 i j u3 )
        >r ( addr1 u1 i j u3 )
        swap ( addr1 u1 j i u3 )
        r> ( addr1 u1 j i u3 )
        2r> ( addr1 u1 j )
        >r ( addr1 u1 )
        2dup ( addr1 u1 j u5 j u4 )
        swap ( addr1 u1 j u4 j u5 )
        >r ( addr1 u1 j u4 )
        swap ( addr1 u1 j j u4 )
        r> ( addr1 u1 j j u4 )
        r> ( addr1 u1 j j )
      ELSE
        2drop ( addr1 u1 i )
        2drop ( addr1 u1 )
      THEN
      drop ( addr1 u1 i )
    LOOP
    1- ( addr1 u1 i )
    DUP
    1+ DO
      i over ( addr1 u1 i u6 j )
      rot ( addr1 u1 i j u6 )
      2dup ( addr1 u1 i j u6 u7 j u8 )
      > IF
        2dup ( addr1 u1 i u8 j u7 )
        swap ( addr1 u1 i j u7 u8 )
        > IF
          rot ( addr1 u1 j i u8 )
        ELSE
          drop ( addr1 u1 j i u6 )
          dup ( addr1 u1 j i )
          >r ( addr1 u1 j addr2 u2 )
          swap ( addr1 u1 addr2 u2 j i )
          2dup ( addr1 u1 addr2 u2 j i u9 i u10 )
          - IF
            >r ( addr1 u1 addr2 u2 j i u9 i )
            r> ( addr1 u1 addr2 u2 j i u9 )
            >r ( addr1 u1 addr2 u2 j i u9 )
            swap ( addr1 u1 addr2 u2 j i u9 i )
            r> ( addr1 u1 addr2 u2 j i u9 i )
          ELSE
            swap ( addr1 u1 addr2 u2 j i u9 )
            >r ( addr1 u1 addr2 u2 j i )
            swap ( addr1 addr2 u2 j i )
            >r ( addr1 addr2 u2 j addr3 u3 )
            r> ( addr1 addr2 u2 j addr3 )
            swap ( addr1 addr2 j addr3 u2 )
            SWAP ( addr1 j addr2 u2 addr3 )
          THEN
        THEN
      THEN
      >r ( addr1 j )
      swap ( j addr1 )
      r> ( addr1 )
    LOOP
    >r ( addr1 )
    swap ( )
    r> ( addr1 )
    1- ( addr1 )
  LOOP
;

\ This snippet includes recursive algorithms, conditional statements, loops, and stack manipulation.