variable stack     \ Create a variable to act as stack for data storage
: push ( n -- )     \ Define a word called "push" that takes a number and pushes it onto the stack
    stack cell+!    \ Increment stack pointer
    stack @ 0=      \ Check if stack is empty
    if              \ If it is, set stack pointer to 0
        0 stack !   \ Clear stack pointer
    then            \ End if
    stack !         \ Store data in stack
;                   \ End word definition

: pop ( -- n )      \ Define a word called "pop" that retrieves and removes the top item from the stack
    stack @         \ Retrieve data from stack
    stack cell-!    \ Decrement stack pointer
;                   \ End word definition

: add ( n1 n2 -- sum )   \ Define a word called "add" that takes two numbers, adds them, and pushes the result onto the stack
    push              \ Push first number onto stack
    push              \ Push second number onto stack
    pop               \ Pop second number off stack into register
    pop               \ Pop first number off stack into register
    +                 \ Add numbers
    push              \ Push result onto stack
;                      \ End word definition

: multiply ( n1 n2 -- product )  \ Define a word called "multiply" that takes two numbers, multiplies them, and pushes the result onto the stack
    push                           \ Push first number onto stack
    push                           \ Push second number onto stack
    pop                            \ Pop second number off stack into register
    pop                            \ Pop first number off stack into register
    *                              \ Multiply numbers
    push                           \ Push result onto stack
;                                 \ End word definition

: main   \ Main program
    5 6 add   \ Push 5 and 6 onto stack and add them
    2 multiply \ Push 2 onto stack and multiply with previous result
    pop   \ Pop final result off stack and store in register
    .     \ Print result
;       \ End main program definition

Main program execution:
main   \ Run main program