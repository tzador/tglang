\ Stack class definition

variable stack-size \ variable to hold stack size

: create-stack ( n -- ) \ create an array of size n for stack
  create stack-size !

: push ( value -- ) \ add value to top of stack
  stack-size @ 2- cells allot \ increase stack size by 2 cells (2 bytes)
  over swap stack-size @ + ! \ duplicate value and store it at stack[size]
  stack-size @ 1+ ! \ increment stack size by 1

: pop ( -- value ) \ remove value from top of stack
  stack-size @ 1- dup cells shift ! \ decrement stack size and shift cells (bytes)
  stack-size @ 2 cells + @ \ fetch value from top of stack
  stack-size @ 1- ! \ decrement stack size by 1

: print-stack ( -- ) \ print all values in stack
  ." Stack Contents: " cr \ print header
  stack-size @ 2 cells - 0 do \ loop through stack, starting from 2nd value
    i cells + @ . cr \ fetch and print value at current index
  loop

: clear-stack ( -- ) \ clear all values in stack
  stack-size @ 0 do \ loop through stack
    i cells + 0 ! \ set value at current index to 0
  loop
  0 swap stack-size ! \ set stack size back to 0

\ Example usage:

10 create-stack \ create a stack of size 10
1 push \ add value 1 to stack
2 push \ add value 2 to stack
print-stack \ print stack contents ('2, 1')
3 push \ add value 3 to stack
1 push \ add value 1 to stack
pop \ remove top value (1) from stack
print-stack \ print stack contents ('3, 2')
clear-stack \ clear all values from stack
print-stack \ print stack contents (nothing)