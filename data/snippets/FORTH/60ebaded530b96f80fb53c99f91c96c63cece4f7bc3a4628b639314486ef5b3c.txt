: PERMUTE
( Recursive FORTH definition for finding permutations of a list )
  ( Array of indices to control permutation )
  \ set counter to length of list 
  \ initialize control array for measuring permutation order
  1 swap
  \ array of swap counters
  _rot
  ( Pick an element [j] from the control array )
  >r
  ( For each element [i] below it )
    ( while swap counter[j] less than j )
    dup r@
    ( Move that element to its correct position )
    ( Update the counter )
    >r
    dup r@ - >r
    r@ _rot + swap
    ( Update the swap counter )
    -rot 1+ swap
    ( When all elements below [j] )
    ( have been permuted, restore [j] )
    dup r@ swap
    r@ while
  rdrop
  \ restore counter
  1 swap
  ( Move element to top of stack ) >r
  \ Pick last element from stack
  ( Memory for swapping )
  r@ 2 pick -r r@ = 0= if swap -rot r@ then
  drop drop drop 1
\ Recursive call on the remaining elements
 \ Last element is fixed 1 = until ;
[ 1 0 2 ] [ 3 0 2 ] [ 2 1 3 ] [ 0 1 2 ] 1 swap 0 do
2dup 2dup PERMUTE
loop
[ 0 1 ] PERMUTE