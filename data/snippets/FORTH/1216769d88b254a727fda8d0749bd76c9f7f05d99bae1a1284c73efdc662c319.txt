: MAX
    ( a b -- max )
    >R        ( a b R:b )
    DUP R>    ( a b a b )
    < IF       ( a b )
        SWAP  ( b a )
    ELSE       ( a b )
        DROP  ( a )
    THEN       ( a )
    ;

: EQ?
    ( a b -- flag )
    SWAP       ( b a )
    2DUP =     ( b a b = b = )
    IF         ( b a )
        DROP   ( b )
        TRUE   ( b TRUE )
    ELSE       ( b a )
        2DROP  ( )
        FALSE  ( FALSE )
    THEN       ( flag )
    ;

: DIFF
    ( a b -- diff )
    >R         ( a b R:b )
    DUP R>     ( a b a b )
    -         ( a b a-b )
    ABS       ( a b abs(a-b) )
    ;

: EQUALS
    ( a b c -- flag )
    SWAP DIP  ( c a c b )
    DIFF      ( c diff )
    0 EQ?     ( flag )
    OR        ( flag )
    ;
    
: PRIMES
    ( limit -- arr )
    2 ARRAY: count   ( limit arr:2 )
    BEGIN             ( limit arr:2 )
        DUP >R        ( limit arr r: | limit arr:2 )
        SWAP DUP      ( limit arr r: | arr:2 r: )
        2DUP PRIMES   ( limit arr r: | arr:2 r: primes )
        IF            ( limit arr r: | primes r: ) 
            count       ( limit arr r: | primes r: primes )
            SWAP APPEND ( limit arr: primes )
        ELSE          ( limit arr r: | primes r: )
            DROP DROP   ( limit )
            R> EXIT     ( limit r: )
        THEN          ( limit arr: primes ) 
    REPEAT           ( limit arr: primes )
    DROP             ( arr: primes )
    ;

: STACK-SIZE
    ( -- size )
    DEPTH
    ;

: FIB
    ( n -- fib_n )
    DUP
    1 EQ?
    IF
        DROP
        0
    ELSE
        DUP 2 MINUS
        DUP
        1 MINUS
        FIB
        SWAP
        2 MINUS
        FIB
        +
    THEN
    ;

3 fib  ( -- 2 )