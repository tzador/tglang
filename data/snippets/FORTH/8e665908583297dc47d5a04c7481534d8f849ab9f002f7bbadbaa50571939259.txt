: WORDLIST CREATE HERE 0 , 0 , ; \ creates a new wordlist with 2 cells
: (DO-NEXT) \ a recursive subroutine to perform loop iterations
  0 CELLS pick \ pick n-th element from stack
  -1+ dup \ subtract 1 and duplicate
  DUP WHILE \ if result > 0, then duplicate again and perform loop
    over @ \ retrieve first element of list
    DUP IF \ if first element is non-zero
      execute \ then execute it
      1 swap +! \ increment second element
      over @ . \ retrieve second element and print to console
      1- swap \ decrement second element and swap to top of stack
      recurse \ perform next iteration
    ELSE \ if first element is zero, then skip it
      1- nip over @ . \ decrement second element and skip first element, then print second element to console
      2 rdrop \ drop second element and list pointer from stack
      recurse \ perform next iteration
    THEN \ end if statement
  repeat \ end loop
  drop ; \ drop remaining list pointer from stack

: LOOP \ a high-level loop primitive for iterating over a list
  dup \ duplicate list pointer
  over @ \ retrieve first element of list
  DUP 0>= IF \ if first element is 0 or positive, then perform iterations
    over @ \ retrieve second element of list
    0 DO \ start loop with 0 iterations
      -rot \ rotate list pointer to bottom of stack
      over @ execute \ execute first element of list
      1 swap \ increment second element of list
      dup 1- \ decrement second element and duplicate
    loop \ end loop, moving on to next iteration of n-1 elements
    drop \ drop duplicate of second element
    2 pick \ retrieve n-th element from stack using list pointer
    -1+ \ increment to next element
    recurse \ perform next iteration over remaining elements
  ELSE \ if first element is negative, then skip iterations
    drop \ drop list pointer
  then \ end if statement
;

WORDLIST \ create a new wordlist with 2 cells
HERE \ set list pointer to start of wordlist
1 , \ add the number 1 to the wordlist
2 , \ add the number 2 to the wordlist
3 , \ add the number 3 to the wordlist

1 \ start with 1 iteration
LOOP \ loop over 1 iteration, executing the first element, incrementing the second element, and performing a recursive call
(DO-NEXT) \ recursively perform the next iteration
(DO-NEXT) \ recursively perform the next iteration
(DO-NEXT) \ recursively perform the next iteration