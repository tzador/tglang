variable nums \ creates a variable named "nums" in the stack
: populate ( i1 i2 -- ) \ creates a word "populate" that takes two integers and pushes them into the "nums" variable
    nums @ swap ! \ gets the value of "nums" from the stack, swaps it with the second integer, and stores it back in "nums"
    nums @ 1- nums ! \ gets the value of "nums", subtracts 1 from it, and stores the result in "nums"
    1 over + \ pushes 1 onto the stack, duplicates the second integer, and adds them together
    nums @ swap ! \ gets the value of "nums", swaps it with the sum, and stores it back in "nums"
; \ ends the definition of "populate"
: retrieve ( i -- i x ) \ creates a word "retrieve" that takes an integer and returns the value from "nums" at that index, along with the index itself
    nums @ swap ! \ gets the value of "nums" from the stack, swaps it with the integer, and stores it back in "nums"
    nums @ \ gets the value of "nums" from the stack
    over \ duplicates the integer of the top of the stack
                            \ (this is the index we want to retrieve from)
    nums @ swap ! \ gets the value of "nums", swaps it with the index, and stores it back in "nums"
    over + 2* \ duplicates the index and multiplies it by 2
    + \ adds the index to the address of "nums"
    swap cell + @ swap \ gets the value at the address of "nums" and swaps it with the index
    nums @ swap ! \ gets the value of "nums", swaps it with the stored value, and stores the updated "nums" back in the stack
; \ ends the definition of "retrieve"
: print-nums ( -- ) \ creates a word "print-nums" that prints all the elements in "nums" from first to last
    nums @ \ gets the value of "nums" from the stack
    0 \ pushes 0 onto the stack to use as the starting index
    0 swap DO \ enters a loop from 0 to the value of "nums"
        i retrieve \ gets the value at the current index
        . \ prints the value to the console
        space \ adds a space for readability
    LOOP \ ends the loop
; \ ends the definition of "print-nums"

5 3 populate \ pushes 5 and 3 onto the stack and calls the populate word
nums @ 3 retrieve \ gets the value at index 3 in "nums", which should be equal to 8