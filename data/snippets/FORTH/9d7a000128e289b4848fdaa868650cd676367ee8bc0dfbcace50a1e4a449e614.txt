\ This snippet implements a doubly-linked list data structure

variable head    \ head of the list
variable tail    \ tail of the list
variable current \ current node being processed

: create-node ( data -- node ) \ creates a new node with given data
  allocate         \ allocate memory for the node
  dup 0 swap !     \ set the previous pointer to 0
  swap 8 + !       \ set the next pointer to 0
  swap 16 + !      \ set the data in the node
  over 16 + !      \ set the previous node pointer
  swap 0 over !    \ set the next node pointer
  swap over !      \ set the current node pointer
  ;

: push-front ( data -- )
  create-node      \ create a new node with given data
  head @           \ get address of the head node
  swap head !      \ set the address of the head node to the next node pointer
  dup tail @       \ check if the list is empty
  if
    swap 8 + !     \ if empty, set the tail node pointer to the new node
    tail !         \ and update the tail variable
  then
  ;

: push-back ( data -- )
  create-node        \ create a new node with given data
  tail @             \ get the address of the tail node
  swap 8 @           \ get the address of the current last node
  swap 8 + !         \ set the next node pointer of the current last node to the new node
  tail !             \ update the tail variable to point to the new last node
  ;

: pop-front ( -- data )
  head @             \ get the address of the head node
  dup swap 8 @       \ get the address of the next node
  head !             \ set the address of the head node to the next node
  0 swap 16 !        \ set the data in the popped node to 0
  ;

: pop-back ( -- data )
  tail @             \ get the address of the tail node
  dup swap 8 @       \ get the address of the previous node
  swap 8 + !         \ set the next node pointer of the previous node to 0
  tail !             \ update the tail variable to point to the new last node
  swap 16 @          \ get the data from the popped node
  0 swap !           \ set the data in the popped node to 0
  ;

: peek-front ( -- data )
  head @             \ get the address of the head node
  16 + @             \ get the data from the head node
  ;

: peek-back ( -- data )
  tail @             \ get the address of the tail node
  16 + @             \ get the data from the tail node
  ;

: print-list ( -- )  \ prints out the data of all nodes in the list
  current !          \ set the current node pointer to the head node
  begin
    current @        \ get the address of the current node
    16 + @           \ get the data from the current node
    dup 0 =          \ check if the current node is null (end of list)
  until
  drop               \ drop the null value
  current @          \ get the address of the tail node
  0 swap 16 !        \ set the data in the tail node to 0
  ;