: RANDOMIZE ( n -- )
 	\ initialize random number generator with given seed
	1+ srand ; \ return incremented value of seed and set new seed 

: RND ( n -- n )
	srand ( n ) \
	random number generator is now seeded with n
	rand ;  \ return random number based on seeded value

: DIVISIBLE? ( n d -- flag )
	rot mod 0= ( flag flag|divisor )
	swap /mod 0= ( flag|divisor flag|remainder )
	xor ;

: PRIME? ( n -- flag )
	2 > if \ true for all numbers < 2
		dup 2 = \ checks if equal to 2
		if drop true \ if so, then drop n and return true
		else 2 swap loop \ do the equivalent of n mod i for i = 2 to n-1
			dup 1- 2 swap /mod nip \ checks if divisible by any number
			if 0 <> \ if not divisible by any number, return false
				drop nip \ drop n and return false
			then
		then
	else
	 	if 0 > if \ true for negative numbers
			sign nip PRIME? \ handle negative numbers
		else
			[ drop false ] \ zero and one are not prime numbers
		then
	then ;

: GENERATE-PRIMES ( n -- primes )
	1 swap ( 1 n )
	begin ( n )
		2+ swap dup ( n i i n )
		2 swap / ( n i i n/2 )
		forget i ( n n/2 )
			begin ( n )
				i 2* swap ( n i i+n )
				i swap 1+ 2dup number ( add all numbers from i to i+n )
				/divisible? if ( n i )
					drop exit \ exit loop and return to next loop
				else
					dup >r ( n i n remainder )
					2  = ( n i flag )
					if ( n i )
						r> >r ( n remainder i )
						2 / ( n remainder/2 i )
						begin ( n remainder/2 )
							dup r@ < ( n remainder/2 flag )
						while ( n remainder/2 )
							r> bit +!
							1 swap 2* ( n remainder i+1 bit )
						repeat 
			then
		dup prime? ( n flag )
		if ( n )
			over rot 1+ append ( n n i )
		else ( n )
			drop ( n )
		then
	again