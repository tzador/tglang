CREATE MATHLIB				(creates a new word called MATHLIB)

' MATHLIB CONSTANT MATHLIB		(Saves the address of MATHLIB in a constant)

: ADD ( n1 n2 -- sum )			(Defines a new word called ADD that takes two numbers from the stack and returns their sum)
    DUP TO R> SWAP				(Copies the first number to the return stack and swaps the second number to the top of the data stack)
    + R> DROP					(Adds the two numbers and drops the first number from the return stack)

: MULTIPLY ( n1 n2 -- product )	(Defines a new word called MULTIPLY that takes two numbers from the stack and returns their product)
    DUP TO R> SWAP				(Copies the first number to the return stack and swaps the second number to the top of the data stack)
    * R> DROP					(Multiplies the two numbers and drops the first number from the return stack)

: DIVIDE ( n1 n2 -- quotient )	(Defines a new word called DIVIDE that takes two numbers from the stack and returns their quotient)
    DUP TO R> SWAP				(Copies the first number to the return stack and swaps the second number to the top of the data stack)
    / R> DROP					(Divides the two numbers and drops the first number from the return stack)

: EXPONENT ( n1 n2 -- result )	(Defines a new word called EXPONENT that takes two numbers from the stack and returns n1 to the power of n2)
    DUP TO R> SWAP				(Copies the first number to the return stack and swaps the second number to the top of the data stack)
    1 SWAP						(Swaps the numbers so that n1 is now on top)
    BEGIN						(Begins a loop)
        DUP 0= WHILE			(While the top number is not equal to 0)
        2 / SWAP^				(Squares the number on top)
    REPEAT						(Repeats the loop until the top number is equal to 0)
    DROP						(Drops the remaining number on the stack, leaving the result on top)

: SQUARE ( n -- result )		(Defines a new word called SQUARE that takes a number from the stack and returns its square)
    1 SWAP						(Swaps the number to the top)
    BEGIN						(Begins a loop)
        DUP 0= WHILE			(While the top number is not equal to 0)
        2 / SWAP^				(Squares the number on top)
    REPEAT						(Repeats the loop until the top number is equal to 0)
    DROP						(Drops the remaining number on the stack, leaving the result on top)

: PYTHAGOREAN ( n1 n2 -- hypotenuse )	(Defines a new word called PYTHAGOREAN that takes two numbers from the stack and returns the hypotenuse using the Pythagorean theorem)
    DUP SQUARE SWAP SQUARE		(Squares both numbers)
    + 						(Adds the squares)
    SQRT						(Finds the square root)
    DUP TO R> DROP				(Copies the result to the return stack and drops it from the data stack)

: CALCULATE-CIRCUMFERENCE ( radius -- circumference )		(Defines a new word called CALCULATE-CIRCUMFERENCE that takes a radius from the stack and returns the circumference of a circle)
    2 PI * 					(Multiplies the radius by 2 and PI)
    DUP TO R> DROP				(Copies the result to the return stack and drops it from the data stack)

MATHLIB						(Calls the MATHLIB word)
3 4 ADD .					(Outputs 7, the sum of 3 and 4)
5 6 MULTIPLY .					(Outputs 30, the product of 5 and 6)
10 2 DIVIDE .					(Outputs 5, the quotient of 10 and 2)
2 8 EXPONENT .					(Outputs 256, 2 to the power of 8)
7 SQUARE .					(Outputs 49, the square of 7)
3 4 PYTHAGOREAN .				(Outputs 6, the hypotenuse of a right triangle with sides 3 and 4)
2 CALCULATE-CIRCUMFERENCE .		(Outputs 12.566, the circumference of a circle with radius 2)