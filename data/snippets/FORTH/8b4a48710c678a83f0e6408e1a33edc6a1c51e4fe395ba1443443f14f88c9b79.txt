\ We start by creating variables for the stack pointer and the dictionary pointer
variable sp  0 constant SP
variable dp  0 constant DP

\ Next, we define custom words for pushing and popping from the stack
: push  sp @ 1+ dup sp ! swap ! ;
: pop   sp @ 1- dup ! sp ! ;

\ Then, we define a custom word for pushing literals onto the stack
: push-literal  sp @ 2+ dup sp ! @ dup 1+ swap ! ;

\ Now, we define a custom word for adding two numbers from the stack and pushing the result
: add  pop swap pop + push ;

\ Next, we define a custom word for subtracting two numbers from the stack and pushing the result
: sub  pop swap pop - push ;

\ Then, we define a custom word for multiplying two numbers from the stack and pushing the result
: mul  pop swap pop * push ;

\ Next, we define a custom word for dividing two numbers from the stack and pushing the result
: div  pop swap pop / push ;

\ Next, we define a custom word for creating variables in the dictionary
: create  dp @ +! ;

\ Then, we define a custom word for storing values into a variable in the dictionary
: store  @ swap ! ;
 
\ We can now use these custom words to create a program that calculates the factorial of a number
: factorial
  dup 1 = if
    drop 1
  else
    dup 1 - factorial * 
  then ;

\ Finally, we create a program that asks for user input and calculates the factorial of the inputted number
: factorial-of-input
  ." Enter a number: " 
  read number 
  number factorial . ;