: RANDOM_VALUE \ Generate a random value between 1 and 10
	10 RANDOM ; : FACTORIAL \ Calculate the factorial of a given number
	1 SWAP BEGIN DUP WHILE \ Loop until the value on the stack is equal to 1
		DUP 1- DUP * SWAP \ Multiply the current value by the previous value on the stack
		REPEAT \ End the loop
	DROP ; : PRIMES \ Find all prime numbers between 1 and 100
	1 100 DO \ Loop through all numbers between 1 and 100
		I DUP 2 > IF \ Check if the current number is greater than 2
			2 BEGIN \ Loop to find the smallest prime factor of the current number
				DUP I MOD 0= \ Check if the current number is divisible by the loop counter
			UNTIL \ End loop when a prime factor is found
			DROP DUP I = IF \ Check if the current number is equal to the smallest prime factor
				EMIT \ Print the prime number
			THEN
		THEN
	LOOP ; : MATRIX_MULT \ Perform matrix multiplication between two matrices
	\ Check if the two matrices are compatible for multiplication
	DUP 2DUP \ Save the dimensions of the first matrix on the stack
	0 > IF \ Check if the number of columns of the first matrix is greater than 0
		SWAP 2DUP \ Save the dimensions of the second matrix on the stack
		2SWAP 0 > IF \ Check if the number of columns of the second matrix is greater than 0
			\ Initialize the result matrix with the correct size
			SWAP 2DUP
			ARRAY ALLOCATE \ Allocate memory for the rows of the result matrix
			BEGIN 0 DO \ Loop through the rows of the result matrix
				SWAP DUP
				ARRAY 1 ALLOCATE \ Allocate memory for the columns of the current row
				DUP \ Save the current row on the stack
				2SWAP \ Swap the rows of the first matrix with the columns of the second matrix
				1 DO \ Loop through the columns of the result matrix
					0 DO \ Loop through the elements of the new row
						SWAP I ARRAY ALLOCATE \ Allocate memory for the elements of the new row
						I \ Save the current row index
						2SWAP
						1 DO \ Loop through the elements of the new column
							DUP 2SWAP
							ARRAY I 1+ ALLOT \ Add the element to the row
						LOOP
						SWAP DROP \ Drop the remaining element
					LOOP
					SWAP DROP \ Drop the remaining column
				LOOP
				2SWAP DROP \ Drop the remaining row
			LOOP
			DROP 1 = \ Check if the dimensions of the result matrix are correct
			IF \ If they are, print the result matrix
				." The result is: "
				DUP 0 DO \ Loop through the rows of the result matrix
					DUP I \ Save the current row index
					2SWAP \ Swap the rows and columns of the result matrix
					2DUP 0 DO \ Loop through the columns of the result matrix
						DUP I \ Save the current column index
						2SWAP \ Swap the element with the current row index
						2 PICK \ Pick the element and print it
						." " \ Print a space between elements
						2SWAP \ Swap the rows and columns of the result matrix
						1 PICK \ Pick the current row
						I 1+ ALLOT \ Add the element to the next row
					LOOP
					2SWAP DROP \ Drop the remaining row
					NIP \ Drop the remaining matrix dimension
					NULL \ Clear the current row
				LOOP
				DROP DROP \ Drop the remaining variable and the result matrix
			THEN
			DROP DROP \ Drop the remaining variables
		ELSE ." The matrices are not compatible!" THEN ; : TEST \ Run unit tests
	\ Test random value function
	." Testing RANDOM_VALUE:" CR
	RANDOM_VALUE .
	\ Test factorial function
	." Testing FACTORIAL:" CR
	6 FACTORIAL .
	\ Test prime number function
	." Testing PRIMES:" CR
	PRIMES CR
	\ Test matrix multiplication function
	." Testing MATRIX_MULT:" CR
	\ Generate two random matrices
	10 RANDOM 10 RANDOM \ Generate dimensions for the first matrix
	ARRAY ALLOCATE \ Allocate memory for the rows of the first matrix
	2SWAP \ Swap the rows with the columns
	10 DO \ Loop through the rows of the first matrix
		ARRAY 10 ALLOCATE \ Allocate memory for the columns of the current row
		2SWAP \ Swap the columns with the elements of the first matrix
		10 DO \ Loop through the elements of the current row
			RANDOM_VALUE \ Generate a random value for the current element
			NIP \ Drop the remaining dimension
			1+ ALLOT \ Add the element to the next column
		LOOP
		NIP \ Drop the remaining dimension
		NULL \ Clear the current row
	LOOP
	ARRAY ALLOCATE \ Allocate memory for the rows of the second matrix
	2SWAP \ Swap the rows with the columns
	10 DO \ Loop through the rows of the second matrix
		ARRAY 10 ALLOCATE \ Allocate memory for the columns of the current row
		2SWAP \ Swap the columns with the elements of the second matrix
		3 DO \ Loop through the elements of the current row
			RANDOM_VALUE \ Generate a random value for the current element
			NIP \ Drop the remaining dimension
			1+ ALLOT \ Add the element to the next column
		LOOP
		NIP \ Drop the remaining dimension
		NULL \ Clear the current row
	LOOP
	\ Multiply the two matrices
	3 SWAP MATRIX_MULT
	\ Test an incompatible case
	2 SWAP 2 SWAP MATRIX_MULT
	\ Print a message for successful testing
	." All tests passed!" ; TEST