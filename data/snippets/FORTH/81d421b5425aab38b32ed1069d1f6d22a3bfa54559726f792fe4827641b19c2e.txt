\ This code snippet generates a random list of integers and sorts them in ascending order

variable list \ create a variable to hold the random list
: fill_list 20 1 do i list i random +! loop ; \ define a word to fill the list with 20 random integers between 0 and 19

: swap ( n1 n2 -- n2 n1 ) \ define a word to swap the positions of two elements in the list
    list over @ swap rot ! swap ! ;

: >r ( n -- ) \ define a word to move the top element of the list to the return stack
    list over @ rot ! ;

: r> ( -- n ) \ define a word to move the top element of the return stack to the list
    list over r@ rot ! ;

: bubble_sort ( n -- ) \ define a word to perform bubble sort on the list
    r> 1- dup >r ( loop counter ) \ move n to the return stack and start loop from 1 less than n
    0 do \ start loop
        r> 1+ dup >r ( current index )
        0 do \ start loop
            dup 1+ over @ > if ( compare top two elements )
                swap \ if top element is greater, swap them
                swap \ restore original order on stack
                swap ( move top element to bottom )
            then 
        loop
        drop ( drop the current index )
    loop
    r> ; ( restore n to the list )

fill_list \ fill the list with random integers
list @ ( n -- list ) \ get pointer to the list
bubble_sort ( sort the list )
.