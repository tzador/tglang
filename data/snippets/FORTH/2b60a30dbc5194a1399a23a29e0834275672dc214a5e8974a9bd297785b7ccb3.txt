: CALCULATE-TOTAL ( arr -- n )
  0 SWAP
  BEGIN
    DUP WHILE
    OVER I + !I
    1- SWAP   \ decrement loop index
  REPEAT
  DROP
  BEGIN
    OVER @
    WHILE                   \ loop until array is exhausted
    OVER @ + OVER !         \ add element to total and store in total
    1 - ROT ROT             \ decrement loop index and rotate to top of stack
    REPEAT
  ROT ROT                   \ rotate stack to put total on top
  SWAP                      \ swap total with array
  DROP                      \ remove array
;

\ This code snippet calculates the total sum of an array of numbers using the FORTH programming language.

\ First, we define a word called 'CALCULATE-TOTAL' that takes in an array and outputs the sum (represented as 'n').

: CALCULATE-TOTAL ( arr -- n ) \ Declare the word and specify its stack effects.

  0 SWAP                      \ Initialize accumulator to 0 and swap it to the bottom of the stack.
  BEGIN                       \ Start a loop.
    DUP WHILE                 \ Duplicate the top element and check if it is non-zero.
    OVER I + !I               \ Add the element to the accumulator and store the result at the current loop index.
    1 - SWAP                  \ Decrement loop index and swap accumulator to bottom of stack.
  REPEAT                      \ End loop.
  DROP                        \ Drop the accumulator.

  BEGIN                       \ Start another loop.
    OVER @                    \ Get the element at the current loop index.
    WHILE                     \ Check if it is non-zero.
    OVER @ + OVER !           \ Add the element to the accumulator and store the result in the accumulator.
    1 - ROT ROT               \ Decrement loop index and rotate stack to put accumulator on top.
    REPEAT
  ROT ROT                     \ Rotate stack to put accumulator on top.
  SWAP                        \ Swap accumulator with array.
  DROP                        \ Drop the array.
;                            \ End word definition.