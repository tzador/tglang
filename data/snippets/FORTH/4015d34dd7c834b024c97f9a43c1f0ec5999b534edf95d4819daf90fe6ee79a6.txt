\ Set up variable definitions

0 value index \ initialize variable for loop indexing
0 value sum \ initialize variable for storing sum of array elements
1 value array-size \ initialize variable for storing size of array


\ Define array containing random integers

: generate-random-integers ( n -- array ) \ defines word to generate array with n random integers
  dup 0= if \ handles 0 as invalid input
    ." Error: Invalid input." cr
    abort
  then
  array-size ! \ stores array size in variable array-size
  array-size 0 ? do index i + c@ random
    dup 33 mod 2 kvmod * 1 + \ converts random number to integer in range 1-100
    dup >r \ stores n in return stack
    index 1+ @ r@ c! \ stores integer in array at current index
    index 1+ ! \ increments index for next loop iteration
    loop
  rdrop \ drops remaining n in return stack
  cr
  cr
  array-size @ array dump \ displays generated array


\ Define word to calculate sum of array elements

: calculate-sum ( array -- sum ) \ defines word to calculate sum of array elements
  0 sum ! \ initializes sum variable to 0
  dup 0= if \ handles 0 as invalid input
    ." Error: Invalid input." cr
    abort
  then
  array-size @ 0 ? do index i + c@ \ accesses array element at current index
    sum @ + dup sum ! \ adds array element to current sum and stores in sum variable
    index 1+ ! \ increments index for next loop iteration
    loop
  cr
  sum @ . \ displays calculated sum of array elements


\ Main program

." Enter the number of elements in the array: " \ prompts user to enter array size
key >r \ stores user input in return stack
decimal
r@ evaluate generate-random-integers \ generates array with n random integers and displays it
evaluate calculate-sum \ calculates and displays sum of array elements
rdrop \ drops user input from return stack