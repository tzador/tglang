\ Initializes a buffer for input
CREATE INPUT-BUFFER 50 CHARS ALLOT

\ Creates a word that reads a string into the input buffer
: READ-STRING
	\ Zero out the input buffer
	INPUT-BUFFER 50 0 FILL
	
	\ Read in the string from the keyboard
	INPUT-BUFFER 50 EXPECT 
	
	\ Move the input buffer pointer to the start
	INPUT-BUFFER 0 <> 

\ Creates a word that takes in two numbers and adds them
: ADD
	\ Retrieve the numbers from the stack
	DUP \ duplicate the top number
	1+ \ adds 1 to the duplicated number to get the second number
	+ \ adds the two numbers together
	
\ Creates a word that takes a number and finds its factorial
: FACTORIAL
	\ Set up a loop to multiply the numbers
	1 \ starting point for the multiplication
	SWAP 1 DO \ swaps the number with the loop index
	I * \ multiplies the loop index with the current result
	LOOP \ will repeat the multiplication until the loop index reaches the number
	. \ prints the result
	
\ Creates a word that checks if a number is prime
: PRIME?
	\ Begin by assuming the number is prime
	TRUE \ sets the top of the stack to true
	2 \ starting point for the divisor
	?DO \ checks if the divisor is less than the number
	DUP MOD 0 = \ checks if the number is divisible by the divisor
	IF \ if divisible, set the top of the stack to false and break the loop
	FALSE SWAP DROP EXIT \ sets the top of the stack to false and exits the loop
	THEN \ ends the IF statement
	1+ \ increments the divisor
	LOOP \ repeats the loop until the divisor equals the number
	. \ prints the result