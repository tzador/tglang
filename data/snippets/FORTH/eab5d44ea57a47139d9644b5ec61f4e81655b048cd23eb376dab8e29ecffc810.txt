\ This code snippet performs the quicksort algorithm
\ and sorts elements in the array in ascending order

: partition ( arr lo hi -- arr' pivot ) \ Split array into two subarrays based on pivot
  swap \ Move pivot to top of stack
  >r \ Save pivot on return stack
  \ Take lo, pivot, and hi from stack
  dup \ Duplicate pivot
  >= if \ If hi >= pivot
    swap 1 <> if \ If lo and hi are different
      2dup > if swap then exit \ Swap elements on top if lo > hi
      1+ \ Increment lo
    then
    swap 1- \ Decrement hi
    recurse \ Recursive call on new hi value
  else \ If hi < pivot
    swap \ Swap pivot and hi
    r> \ Retrieve pivot from return stack
    swap \ Move pivot to bottom of stack
    rev @- \ Retrieve array and decrement index
    swap \ Swap pivot and lo
    swap 2over rev ! \ Store pivot value in new position
    1 swap 1 + 2over rev @ ! \ Increment lo and store value in new position
    recurse \ Recursive call on new lo and pivot values
  then
  2drop \ Drop pivot and array from stack

: quicksort ( arr lo hi -- arr ) \ Sort array using quicksort algorithm
  >r \ Save hi on return stack
  partition \ Partition array into two subarrays
  r> \ Retrieve hi from return stack
  partition \ Partition array again using new hi value
  swap swap \ Swap elements on top if they are not in ascending order
  1- recurse \ Recursive call on new lo and hi values
  drop \ Drop hi from stack

\ Example usage:
\ 10 0 9 8 7 6 5 4 3 2 1 quicksort