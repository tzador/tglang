\ Stack class for creating and manipulating a stack data structure

\ Create a variable for the top of the stack
variable TOP

\ Function for pushing an item onto the stack
: push ( item -- )
  TOP @ 1+       \ Increment the top variable
  DUP TOP !      \ Save the item to the top index
  OVER @ OVER !  \ Copy the previous top item to the new top index
;

\ Function for popping an item off the stack
: pop ( -- item )
  TOP @ DUP !     \ Copy the top variable to the return item
  TOP @ 1- TOP !  \ Decrement the top variable
  TOP @ 0= IF     \ Check if the top is now at 0
    DROP          \ If so, drop all items from stack
    0 TOP !       \ Reset top variable
  THEN
  TOP @ @         \ Return the item at the top index
;

\ Function for checking if stack is empty
: empty? ( -- flag )
  TOP @ 0=  \ Check if the top is at 0
  IF        \ If so, stack is empty
    TRUE    \ Return true flag
  ELSE      \ Otherwise, stack is not empty
    FALSE   \ Return false flag
  THEN
;

\ Function for duplicating the top item on the stack
: dup ( item -- item item )
  TOP @ 1+ TOP !  \ Increment the top variable
  OVER @ !        \ Save the item to the new top index
;

\ Function for swapping the top two items on the stack
: swap ( item1 item2 -- item2 item1 )
  OVER @ SWAP OVER ! SWAP !  \ Swap top two items
;

\ Function for swapping the top three items on the stack
: rot ( item1 item2 item3 -- item2 item3 item1 )
  SWAP OVER SWAP OVER SWAP !  \ Rotate top three items
;

\ Example usage
1 push     \ Push 1 onto the stack
2 push     \ Push 2 onto the stack
3 push     \ Push 3 onto the stack
pop        \ Returns 3
dup        \ Duplicates the top item (2)
swap       \ Swaps top two items (2, 1)
rot        \ Rotates top three items (1, 2, 2)
pop        \ Returns 2
empty?     \ Returns false
pop        \ Returns 1
empty?     \ Returns true