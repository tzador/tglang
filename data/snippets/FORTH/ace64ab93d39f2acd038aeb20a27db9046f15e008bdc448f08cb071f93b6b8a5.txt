\ Program to sort a list of numbers using QuickSort

\ Define a macro for swapping two values on the stack
: SWAP ( a b -- b a )
    ROT ROT 2DUP ;

\ Define a macro for partitioning the list
: PARTITION ( left right pivot -- left right )
    PICK 2SWAP 2DUP <= IF   \ Swap pivot with
        SWAP 2DROP            \ the element at
        COUNT 1- SWAP         \ the right
        2SWAP                 \ boundary
        0 DO                  \ Loop over all
            OVER I < IF       \ elements between
                SWAP 2OVER    \ the left and
                ROT ROT DROP  \ right boundaries
                SWAP 1+ SWAP  \ Compare with
                OVER < IF      \ pivot
                    SWAP        \ and swap if
                THEN               \ necessary
            THEN
        LOOP
        DROP DROP         \ Drop boundaries
    ELSE
        2DROP
    THEN ;

\ Define the main function for QuickSort
: QUICKSORT ( left right n -- )
    2DUP <= IF   \ If there are two
        OVER >= IF   \ or more elements
            SWAP 2DUP PICK 2SWAP OVER PICK        \ Sort two elements
            PICK PARTITION PARTITION QUICKSORT   \ Recursively sort the
            PICK + DUP QUICKSORT                 \ remaining sublists
            1 PICK COUNT 2 PICK OVER + PARTITION \ and combine them
            PICK + PICK QUICKSORT
            SWAP
        THEN
        2DROP 2DROP
    ELSE
        2DROP
    THEN ;

\ Define the main function for QuickSort
: SORT ( a -- )
    DUP COUNT QUICKSORT ; \ Call QuickSort with
                          \ left boundary 0
                          \ right boundary n-1
                          \ and n elements in list

\ Example usage:
15 3 21 13 8 5 2 SORT  \ Outputs: 2 3 5 8 13 15 21