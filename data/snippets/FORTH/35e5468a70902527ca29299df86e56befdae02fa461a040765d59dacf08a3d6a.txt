\ This snippet converts a decimal number into binary using recursion

: decimal_to_binary ( n -- n )
  dup if (if stack is not 0)
    2 /mod (divide by 2, push quotient and remainder)
    recursive_call (call function again)
    swap (put quotient at top of stack)
    3 pick \ pick quotient
    /string (convert to string)
    swap (put converted string on top of stack)
    over \ duplicate original number
    2 mod (get remainder)
    -rot \ rotate stack to original order
    swap \ put remainder on top of stack
  else \ if stack is 0, just skip
    drop (remove 0 from stack)
  then
  2 mod (get remainder)
  0 = if \ if remainder is 0, stop recursion
    drop (remove remainder from stack)
    swap (put binary string on top of stack)
    over \ duplicate original number
    2 /mod (divide by 2, push quotient and remainder)
    recursive_call (call function again)
  else \ if remainder is not 0, continue recursion
    recursive_call (call function again)
  then
 ;

\ Example usage:
10 decimal_to_binary . (outputs 1010)
15 decimal_to_binary . (outputs 1111)