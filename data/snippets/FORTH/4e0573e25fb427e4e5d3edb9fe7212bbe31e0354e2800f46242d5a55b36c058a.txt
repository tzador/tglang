: SHUFFLE ( seq -- seq' ) dup length 0 = if exit then
        over first { ( orig seq seqâ€™ ) ( index ) }
        BEGIN
            swap over + over pick                             \ Pick the next element from the sequence and add its index
            over over < WHILE                                 \ Repeat until index is less than sequence length
            swap 2dup rot 2pick swap 1- pick over             \ Pick random index, pick element at index, swap with top
            over 1- over pick over 0 insert remove swap       \ Insert element at random index, remove original element
        REPEAT 2drop swap ;

( This code snippet shuffles the elements of a sequence in a random order. It repeatedly picks a random index and moves the element at that index to the end of the sequence, creating a shuffled sequence of the same length as the original. )

\ Example usage:
\ 5 4 3 2 1 SHUFFLE

( This would output a shuffled sequence, such as 3 2 5 1 4, as the elements were randomly moved to the end. )