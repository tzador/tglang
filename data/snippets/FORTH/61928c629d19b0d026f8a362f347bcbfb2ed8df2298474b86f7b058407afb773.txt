( Draw Fractal Tree using recursive functions )
: fractal_tree ( n -- ) 		\ define a recursive function that takes n as input
    dup 0>					\ check if n is greater than 0
    if						\ if true, execute the following:
        dup					\ duplicate n on the stack
        i					\ get the current iteration number
        1- 					\ subtract 1 from the iteration number
        dup rot 				\ duplicate n and rotate the copy under the iteration number
        recurse				\ recursively call the fractal_tree function
        i i 					\ duplicate the iteration number
        1 and 				\ check if the iteration number is odd
        if 					\ if true, execute the following:
            -1 0 do			\ start a loop from -1 to 0 (inclusive)
                i i 			\ duplicate the iteration number
                1 and 			\ check if the iteration number is odd
                if 				\ if true, execute the following:
                    2* swap		\ double the iteration number and swap it with the top of the stack
                else 			\ if false, execute the following:
                    2 swap		\ swap the top two numbers on the stack
            loop				\ end the loop
        else 					\ if false, execute the following:
            -1 0 do 			\ start a loop from -1 to 0 (inclusive)
                i 2 / swap 		\ divide the iteration number by 2 and swap it with the top of the stack
            loop				\ end the loop
        then 					\ end the if statement
        swap rotate 		\ swap the top two elements on the stack and rotate them
        i i 					\ duplicate the iteration number
        1 and 				\ check if the iteration number is odd
        if 					\ if true, execute the following:
            2mod 				\ calculate the modulo of iteration number divided by 2
            0= 					\ check if the result is equal to 0
            if 					\ if true, execute the following:
                2 pick 			\ duplicate the second item from the top of the stack
                >r 			\ move the top item to the return stack
                r> 				\ copy the top item from the return stack to the stack
                over swap 		\ duplicate the top item and swap it with the third item from the top
            then 				\ end the if statement
            i 2* if 			\ if the result of modulo is 1, execute the following:
                1 swap 			\ swap the top two items on the stack and put a 1 on top
                - 				\ subtract the top two items on the stack
            then 				\ end the if statement
        then 					\ end the if statement
        swap					\ swap the top two items on the stack
    else						\ if false, execute the following:
        drop 					\ drop the top item on the stack
    then 						\ end the if statement
    dup . 						\ print the current iteration number
    cr 							\ print a new line
    300 300 				\ set the starting coordinates for drawing
    90 rotate 				\ rotate 90 degrees counter-clockwise
    forward 					\ move forward by the iteration number
    right 					\ rotate right by the iteration number
    fractal_tree				\ recursively call the fractal_tree function
    0 0.6 * 					\ calculate 60% of the current iteration number
    if 						\ if true, execute the following:
        fractal_tree 		\ recursively call the fractal_tree function
        -1 rotate				\ rotate 90 degrees clockwise
        forward 					\ move forward by the iteration number
        left 					\ rotate left by the iteration number
        fractal_tree 		\ recursively call the fractal_tree function
    else 						\ if false, execute the following:
        drop 				\ drop the top item on the stack
        0.6 * forward 			\ move forward by 60% of the current iteration number
        drop 				\ drop the top item on the stack
    then 						\ end the if statement
; 							\ end the definition of fractal_tree function

500 fractal_tree 				\ call the fractal_tree function with n = 500