variable val1 \ defining a variable called 'val1'
20 val1 ! \ storing the value 20 into 'val1'
: print square \ defining a new word called 'print square'
  val1 @ dup * . \ accessing the value of 'val1', duplicating it, multiplying it with itself and printing the result
; \ end of word definition
: add-to-square ( n ) \ defining a new word called 'add-to-square' that takes one argument 'n'
  val1 @ dup + swap \ accessing the value of 'val1', duplicating it, adding the input argument 'n', and swapping the top two values
  print square \ calling the previously defined word 'print square'
; \ end of word definition
25 add-to-square \ calling the word 'add-to-square' with an input argument of 25