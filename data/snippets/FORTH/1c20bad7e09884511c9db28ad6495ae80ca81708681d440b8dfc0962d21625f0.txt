: double ( n -- 2n ) dup + ;
: square ( n -- n*n ) dup * ;
: power ( n1 n2 -- n1^n2 ) 1 swap 0 do over power * loop drop ;
: max ( n1 n2 -- n3 ) dup < if swap then ;
: min ( n1 n2 -- n3 ) over < if drop else swap then ;
: factorial ( n -- n! ) dup 1 = if drop 1 exit then dup 1 - factorial * ;
: perfect ( n -- f?p ) dup * 2 < if 0 exit then over dup 1 - 2 / 1 do i  2 i = if over i = or over i i / 1+ i = or or then  loop -rot drop ;