\ Implementation of quicksort algorithm in FORTH

\ Define quicksort function with array and initial left and right indices as parameters
: quicksort ( array left right -- )
  dup 2 pick > if \ Check if left index is greater than right index
    swap \ If so, swap indices
    over \ Get current array
    swap 1+ \ Left index + 1
    over \ Get current array again
    swap \ Swap left and right indices
  then
  dup 2 pick < if \ Check if left index is less than right index
    swap \ If so, swap indices
    over \ Get current array
    2 pick \ Left index
    swap 1+ \ Left index + 2
    over \ Get current array
    swap \ Swap left and right indices
  then
  2 pick = if \ Check if left and right indices are equal
    2 pick 2 pick > if \ Check if left index is greater than right index
      1- over swap - swap over 1- 3 pick over - rot swap over [char] @ c@ \ Get pivot value
    then
    2 pick 2 pick 1- < if \ Check if left index is less than right index - 1
      2 pick over - over swap swap \ Get pivot index + 1
      [char] @ c@ 3 pick 3 pick 1+ 4 pick 5 pick quicksort \ Call quicksort with pivot index, pivot value, left and right indices
      swap 1- swap dup [char] @ c@ 2 pick = if \ Check if pivot value is equal to current value
        swap [char] @ 1- swap c@ \ Move pivot value to its correct position
      then
    else \ If left and right indices are equal - end of function
      drop drop drop
    then
  else \ If left index is greater than right index
    swap drop drop drop
  then ;

\ Define a function to print an array
: .arr ( array -- )
  ." [ " \ Print opening bracket
   begin over dup if \ Loop through array until top element is reached
     ." " \ Print space
     dup [char] @ emit \ Print current element
     1+ \ Increment index
   else
     drop \ Drop top element
     break \ Break out of loop
   then
  again \ Continue loop
  ." ]" spaces cr ; \ Print closing bracket and new line

\ Define an array to be sorted
41 13 2 74 16 825 13 6 71 7 23 6 91 32 0 : array

\ Call quicksort function with starting and ending indices
array 0 array len 1- quicksort

\ Output the sorted array
.array