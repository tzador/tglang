: FIND ( key list -- item-flag )
    2DUP >R ( save list and key )
    BEGIN ( loop )
        DUP ( get current item )
        R@ CELL+ ( get address of key )
        @ ( get key at address )
        = IF ( check if equal to key )
            DROP \ drop item
            DUP 1 ( set item flag to true )
            R> DROP ( discard list and key )
            TRUE EXIT \ exit loop
        THEN \ if not equal to key
        2SKIP ( move to next item )
        R@ CELL+ \ get address of next key
        @ ( get key at address )
        = IF ( check if equal to key )
            2SWAP ( key list )
            CELL+ ( move address to next item )
            R@ CELL+ ( get address of next key )
            BRANCH ( jump to IF )
        THEN \ if not equal to key
        2DROP ( drop address and next key )
        R@ CELL+ ( get address of next key )
        0= IF ( check if at end of list )
            DROP ( drop next address )
            R> DROP ( discard list and key )
            FALSE EXIT \ exit loop
        THEN \ if not at end of list
        2SKIP ( move to next item )
        R@ CELL+ ( get address of next key )
        DUP ( duplicate for comparison )
        CELL+ ( move to data address )
        @ ( get data at address )
        CELL+ 0= IF ( check if at end of data )
            DROP ( drop next data address )
            R> DROP ( discard list and key )
            FALSE EXIT \ exit loop
        THEN \ if not at end of data
        R> CELL+ DUP ( advance data address )
        DUP ( duplicate for comparison )
        CELL+ @ ( get current character )
        [CHAR] , = IF ( check if char is comma )
            DROP ( drop char )
            R> 2CELL+ ( advance item address )
            BRANCH ( jump to BEGIN )
        THEN \ if not comma
        R> CELL+ R> DUP ( move address and duplicate )
        CELL+ @ \' ( get next char )
        [CHAR] } = IF ( check if char is closing bracket )
            DROP ( drop char )
            R> DROP ( discard list and key )
            FALSE EXIT \ exit loop
        THEN \ if not closing bracket
        R> 2CELL+ ( advance item address )
        BRANCH ( jump to BEGIN )
    AGAIN \ return to BEGIN if not exited
;