: concat ( a b -- c ) \ Define the word "concat" that takes two arguments, a and b, and returns their concatenation as c
   2dup \ Duplicate the top two stack values
   count swap count + \ Use "count" to get the length of each argument, swap their positions, then add their lengths together to get the total length of the concatenation
   allocate \ Allocate memory for the concatenation string
   rot dupicat ( dest src count -- ) \ Rotate the top three stack values and duplicate the third value, representing the count
   move ( src dest count -- ) \ Move the first string (source) to the allocated memory (destination) and use the count to determine the number of characters to move
   2drop \ Drop the original strings from the stack
   swap allocate move ( dest src count -- ) \ Swap the top two stack values to put the destination string on top, then use "allocate" and "move" to concatenate the source string onto the destination string
   drop \ Drop the count value from the stack
; \ End of word definition

"Hello" "World" concat \ Call the "concat" word with the strings "Hello" and "World" as arguments, resulting in the concatenated string "HelloWorld"