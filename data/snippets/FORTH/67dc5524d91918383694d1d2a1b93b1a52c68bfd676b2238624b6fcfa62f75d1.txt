: RECURSIVE? ( addr a len dict -- ? )
  \ Check if function is recursive
  \ Returns 1 if function is recursive, 0 otherwise
  \ addr = function address
  \ a = current area (base addr)
  \ len = length of current area
  \ dict = compiling dictionary address

  0 swap \ initialize a counter

  begin \ start loop
    ?dup 0= if \ check if addr is 0
      nip nip nip nip exit \ if so, return 0
    then

    a 1+ \ move to next byte in area
    swap dup, \ place a copy of addr on top of data stack
    dup @ 0= if \ check if byte at addr is 0
      nip nip nip nip exit \ if so, return 0
    then

    dup @ c@ 0= if \ check if byte at addr points to a 0
      nip nip nip nip exit \ if so, return 0
    then

    6 - \ decrement recursion counter value
    swap \ move a back to top of stack
  8 skip if \ if counter is not 0, skip next block
      nip nip nip nip exit \ if counter is 0, function is recursive, return 1
  again \ repeat loop

  nip nip nip nip \ remove function address from stack
  exit \ return 0 if function is not recursive