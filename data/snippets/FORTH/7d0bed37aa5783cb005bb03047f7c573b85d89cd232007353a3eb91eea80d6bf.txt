: FIB      ( n1 n2 -- n3 )
    SWAP    // swap the top two elements on the stack
    >R      // move the second element to the return stack
    DUP     // duplicate the second element on the stack
    R@      // copy the second element from the return stack
    +       // add the top two elements on the stack
    DUP     // duplicate the sum value on the stack
    R>      // move the second element from the return stack back to the top of the stack
   
    1       // push the value 1 onto the stack
    SWAP    // swap the top two elements on the stack
    1+      // increment the top element on the stack by 1
    XOR     // perform an exclusive OR operation on the top two elements on the stack
    0=      // check if the top element on the stack is equal to 0
    IF      // if it is, skip the next 3 lines and continue with the rest of the code
        DUP     // duplicate the top element on the stack
        R>      // move the second element from the return stack back to the top of the stack
        FIB     // recursively call the FIB function
        SWAP    // swap the top two elements on the stack
        ROT     // rotate the top 3 elements on the stack
        +       // add the top two elements on the stack
        SWAP    // swap the top two elements on the stack
        R>      // move the second element from the return stack back to the top of the stack
        FIB     // recursively call the FIB function
        ROT     // rotate the top 3 elements on the stack
    THEN    // end of the if statement
    DROP    // drop the top element on the stack
    DROP    // drop the second element on the stack
;       // end of the FIB function definition