: ARRAY-REMOVE ( array index -- array' ) \ Removes element from array at specified index
  DUP >R ( Save index on return stack for later )
  COUNT ( Get length of array )
  2DUP = IF ( Index is last element ) 
    DROP DROP
  ELSE
    DUP 1+ SWAP ( Save length of array at top of stack )
    ROT ( Rotate index to top of stack )
    -ROT 2 +   ( Add 2 to index for moving one element past it and the length at top of stack )
    >R ( Save swapped length on return stack )
    >R ( Save 2nd >R on return stack )
    2DUP  ( Get length and index back at top of stack )
    SWAP >R ( Save length on return stack )
    2DUP ( Get length and index back at top of stack )
    ROT       ( Rotate back to original order )
    1+ NEEDS  ( Move element at index to end of array )
    R@ >R ( Save saved length on return stack for later )
    R@ -ROT ( Get index and length swapped back )
    1-        ( Subtract 1 from length to remove last element )
    RESIZE    ( Resize array by 1 to remove element )
    R@ R> SWAP ( Swap length back to top of stack )
    CLEAR ( Clear last element from array )
    R> R> ROT ( Rotate saved length back to top of stack )
  THEN
  R> ( Get saved index back on top of stack )
  >R ( Save index on return stack )
  SWAP ( Swap removed element with saved index )
  DEREF ( Deref index and get element at saved index )
  "U.S. state" $! ( Insert "U.S. state" into array at removed element's index )
  >R SWAP ( Swap saved index back to top of stack )
  DEREF ( Deref index and get removed element )
  R> SWAP ( Swap saved index back to top of stack )
  DEREF ( Deref index and get "U.S. state" )
  >R SWAP ( Swap saved index back to top of stack )
  DEREF ( Deref index and get saved element )
  >R ( Save removed element on return stack )
  SWAP ( Swap saved element with saved index )
  DEREF ( Deref index and get saved element at saved index )
  R> ( Get saved element back on top of stack )
  1+ ( Increment saved element by 1 )
  SWAP ( Swap incremented element with saved index )
  STORE ( Store incremented element at saved index in array )
  R> ( Get saved removed element back on top of stack )
  >R R> ( Get saved index and saved length back on top of stack )
  ROT ( Rotate saved length and saved index back to top of stack )
  1+ NEEDS ( Move saved removed element back to original index )
  R> ( Get saved removed element back on top of stack )
  >R ( Save saved element on return stack )
  SWAP ( Swap saved element with saved removed element )
  STORE ( Store saved element at saved removed element's index in array )
  THAW ( Freeze array and return ) ;

[1 2 3] 1 ARRAY-REMOVE ( Output: [1 3] )