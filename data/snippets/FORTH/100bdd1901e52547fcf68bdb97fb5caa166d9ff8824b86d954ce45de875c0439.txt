: STRING-PAD ( s1 s2 u1 u2 -- s3 )
    -ROT           \ move u2 (pad character) to top of stack
    2DUP           \ duplicate s1 and s2 for padding check
    CHAR+          \ advance s1 by 1 character (skip length byte)
    SWAP           \ move u1 (string length) to top of stack
    -              \ calculate padding length
    0 MAX          \ make sure padding is never negative
    >R             \ save padding length for later
    DUP 0>         \ check if string is longer than padding
    IF
        2DUP D+     \ add padding length to string
        ALLOT       \ allocate memory for padded string
        SWAP        \ move string length back to top of stack
        DUP         \ duplicate string length
        1+ SWAP     \ calculate padded string length
        R@ ERASE    \ clear allocated memory for string
        OVER 1+     \ add 1 for length byte
        R@ BL FILL  \ fill with pad character
        BL ?DO       \ start loop
            OVER COUNT  \ get substring of original string
            I /STRING   \ insert substring into padded string
            2DUP COUNT  \ get padding length
            SWAP OVER   \ move padding length to top of stack
            I /STRING   \ insert pad character into padded string
        LOOP
    ELSE
        2DROP ROT DROP DROP
    THEN
    2DROP           \ drop unused values from stack
;