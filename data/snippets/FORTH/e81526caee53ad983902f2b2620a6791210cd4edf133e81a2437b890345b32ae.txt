\ Creation of an AVL Tree data structure

: CREATE-AVL ( creates an AVL tree with initial values on the stack -- addr size )
  0 ->a ( initialize pointers )
  FIRST !a ( set up first node in tree )
  TUCK ->s ( save stack pointer, later restore )
  OVER 1+ ->addr ( first node's addr )
  0 ->l< ( initial left tree is empty )
  0 ->g< ( initial right tree is empty )
BEGIN ( outer loop )
  DEPTH ->depth# ( current depth <= desired depth? )
WHILE ( true if still inserting )
  >R ->root ( save root addr )
  DEPTH ->depth ( current depth )
  s-> master# ( save work value )
  2 * expr> ( same as s-> r<- but check against depth )
  OVER @ 1- ROLL ->current ( current node addr)
  DUP ROLL OVER >R ->parent ( set up parent )
  R> 1 and + DUP ROLL ->gp ( set up "grandparent" ) ( =addr )
  @ LOWER 2 * ( check l<r )
  IF ( current less )
    ?DUP
    IF ( <error> ) TREE.UNBALANCED
    THEN
  ELSE
    DUP ROLL UNCHECKED.insert ( insert an unchecked node into tree )
    IF ( tree was not changed )
      DROP ^
      a ->a ( save parent addr )
      g< ->g< ( save insert point from parent )
      l< ->l< ( save insert point from grandparent )
      1 ->r ( right sub-tree is the new node )
      UNCHECKED.insert ( insert an unchecked left node )
      IF ( check for tree rotation )
        r> @ ( fetch left sub-tree depth )
        OVER @ ( compute balance factor for current node )
        I ++ < ( l>r? )
      ELSE
        0 ->r <( no rotation necessary )
      THEN
    THEN
  THEN
REPEAT
>s ( restore stack from saved val )
a ->a ( update parent addr )
g< ->g< ( update grandparent addr )
l< ->l< ( update left tree addr )
UNIFORM.insert ( calculate max depth at 2 work )
DUP >R ( save e->d )
>master# aggression .eq <<= 0 COUNTER.insert ('addr)
cmode
HERE | SIZE# dup ?
DO
@ to-> 1 ( MAXDEPTH )
++ if
first and then next-table ( create new table if necessary )
2dup ;
2dup MAXDEPTH and ;
DUP first and leave
AGAIN >
begin
first @ 2dup MAXDEPTH @ and - | >depth-- ] );
) >last
2dup d! d!
(exec)
do
HIGH first @ 'balanced 'Find 4 (recotcurion
test? ( a b c's still intact )
'nod <<a COUNTER.insert
THEN
max-depth ()
GROUP * ()
        'nod (generate a unique number/nod our depth xor'ed together
                DO
                LOOP