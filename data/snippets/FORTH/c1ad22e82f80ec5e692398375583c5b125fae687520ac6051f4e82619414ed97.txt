: ROTATE-DOWN ( array addr size1 size2 )
\ rotate an array by moving the first element to the bottom

  >R                         \ Move the original array address to the return stack
  >R                         \ and store the original address of the array
  R>                         \ Get the original address of the array
  SWAP                       \ Swap to get the size of the array on top of the stack
  1+                         \ Increment the size to account for storing the original address on the stack again
  >R                         \ Move the size to the return stack
  R>                         \ Get the original array size
  1                         \ Set our counter to 1, representing the first element of the array
  BEGIN                     \ Begin a loop
    DUP                     \ Duplicate the array address to keep the original for later
    @                       \ Get the value at the top of the stack, which is the current array element
    >R                     \ Move the value to the return stack
    R>                     \ Get the array element's value
    1+                     \ Increment the address to move to the next element
    OVER                 \ Duplicate the original array address for use later
    @                     \ Get the value at the new address
    SWAP                 \ Swap the element on top of the stack to put the array address back on top
    1-                   \ Decrement our counter variable by 1
    0=                     \ Check if our counter is 0, meaning we've reached the end of the array
  UNTIL                   \ If the counter is 0, exit the loop
  R>                     \ Get the original array size
  1-                     \ Decrement the size to account for the first element being moved to the bottom
  >R                     \ Move the new size to the return stack
  2-                     \ Get the actual size of the array by subtracting 2
  R>                     \ Get the original array address
  SWAP                     \ Swap the original array address with the new size
  1                       \ Move to the element in the last position of the array
  -                       \ Subtract the size from the current address to move to the bottom element
  R>                     \ Get the size of the array
  MOVE                    \ Move the array elements starting from the bottom to the top
  R>                     \ Get the original array address
  R>                     \ Get the original array size
  1+                     \ Increment the size to take into account the original address being stored again
  -                     \ Subtract the size from the address to move to the bottom element
  MOVE                    \ Move the bottom element to the end of the array
  R>                     \ Get the original array address
  R>                     \ Get the original array size
  PUSHBACK                 \ Move the bottom element to the front of the array, completing the rotation
  R>                     \ Get the original array address
  SWAP                     \ Swap the original address with the rotated array
  R>                     \ Get the original array address
  DESTROY                 \ Remove the original array from the return stack
;