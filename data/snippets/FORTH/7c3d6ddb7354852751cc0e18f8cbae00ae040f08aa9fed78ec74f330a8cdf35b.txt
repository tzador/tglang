: CALC-SQUARE ( n -- n^2 )		( defining a new word named CALC-SQUARE, input is n and output is n squared )

	dup * ;			( duplicate the top of stack and multiply, leaving n squared on top of stack )


: COUNT-TO-N ( n -- )		( defining another word named COUNT-TO-N, input is n and output is nothing )

	0			( initialize a counter to 0 )
	begin		( begin the loop )
	dup			( duplicate the current value of the counter )
	1 +			( add 1 to it )
	dup			( duplicate this new value )
	over =		( see if it is equal to the original input n )
	not while	( if it is not equal, continue the loop )
	dup			( duplicate the current value of the counter )
	.			( print it )
	cr			( move to the next line )
	;			( end the loop and the word definition )


: PUSH-TO-STACK ( n -- )		( defining another word named PUSH-TO-STACK, input is n and output is nothing )

	dup			( duplicate the input to have it still available after the swap )
	swap		( swap the top two items on the stack, moving the input to the bottom )
	dup			( duplicate the bottom item on the stack, which is the input )
	*			( multiply the top two items, leaving n^2 on top of stack )
	drop		( drop the extra duplicate of the input )


: MAIN 		( defining the main word to execute the program, no input or output )

	5			( push the value 5 onto the stack )
	CALC-SQUARE ( call the word CALC-SQUARE with 5 on the stack, output is 25 on top of stack )

	7			( push the value 7 onto the stack )
	PUSH-TO-STACK ( call word PUSH-TO-STACK with 7 on the stack, output is nothing )

	10			( push the value 10 onto the stack )
	COUNT-TO-N ( call the word COUNT-TO-N with 10 on the stack, output is all numbers from 1 to 10 printed )
;