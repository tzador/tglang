: num-dup ( n -- n n )  duplicate the top number -- runtime: O(1)) 
   over push onto the stack duplicate of top number 
; \ end of the word definition

: square ( n -- n*n )  square the top number -- runtime: O(n)
   dup num-dup \ duplicate the top number
   *            \ multiply the top two numbers on the stack
; \ end of the word definition

: factorial ( n -- n! )  calculate the factorial of the top number -- runtime: O(n)
   dup 1 = if        \ if the number is 1
      drop 1         \ drop it from the stack and replace with 1
   else              \ otherwise
      dup 1 -        \ subtract 1 from the number and duplicate it
      factorial      \ recursively call the factorial function
      * swap         \ multiply the top two numbers on the stack and swap the order
   then              \ end of the if statement
; \ end of the word definition

: print-factorials ( n -- )  print the factorials of n numbers -- runtime: O(n^2)
   0 do              \ start a loop from 0 to n-1
      i factorial    \ calculate the factorial for each loop iteration
      . cr           \ print the result and move to a new line
   loop              \ end of the loop
; \ end of the word definition

10 print-factorials \ example usage: print the factorials of numbers from 0 to 9