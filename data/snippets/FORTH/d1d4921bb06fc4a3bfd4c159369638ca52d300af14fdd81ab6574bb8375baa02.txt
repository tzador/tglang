: COMPLEX-ALGORITHM  \ This is the definition of our complex algorithm
  DUP ARRAY-LENGTH  \ Duplicates the top value on the stack, which is the input array length
  0 DO  \ Starts a loop, using the duplicated array length as the loop counter
    SWAP I ARRAY-FIND \ Swaps the top two values on the stack and finds the index of the loop counter in the input array
    DUP 2* SWAP 2OVER \ Duplicates the found index, multiplies by 2, and then pushes the original index and multiplied value on top of the stack
    2DUP + OVER \ Duplicates the top two values on the stack, adds them together, and then leaves an extra copy on top of the stack
    SWAP I ARRAY-INDEX \ Swaps the top two values on the stack and finds the index of the loop counter in the input array
    2SWAP 2OVER 2* + \ Swaps the top two values on the stack, duplicates both, multiplies by 2, adds them together, and leaves an extra copy on top of the stack
    OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
    2SWAP < IF \ Compares the top two values on the stack and runs the following code if the second value is less than the first
      BGSORT  \ Calls another function to properly sort the values
      ROT 3DROP \ Rotates the top three values on the stack and then drops them
    THEN \ Ends the if statement
    SWAP 1+ \ Swaps the top two values on the stack and then adds 1 to the top value on the stack
  LOOP \ Ends the loop
  2DUP + \ Duplicates the top two values on the stack and adds them together
  DUP 2* SWAP 2OVER \ Duplicates the top value on the stack, multiplies by 2, and then pushes the original value and multiplied value on top of the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  SORT \ Call standard sort function to properly order the values
  2DUP + \ Duplicates the top two values on the stack and adds them together
  DUP 2* SWAP 2OVER \ Duplicates the top value on the stack, multiplies by 2, and then pushes the original value and multiplied value on top of the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  OVER * SWAP 2 + \ Duplicates the top value on the stack, multiplies it by the top value on the stack, and then adds 2 to the top value on the stack
  3DROP ; \ Drops the top three values on the stack and ends the definition of the algorithm, with a semicolon indicating the end of the definition