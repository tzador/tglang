: FIND-PRIMES ( n -- prime-list )
  >R ( save input )
    2 SWAP 
    BEGIN
      2DUP * R@ 1- <= 
    WHILE
      R@ ROLL -ROT ROLL 1+ DUP
      2DUP MOD DUP 0= 
    IF 
      R@ ROLL R> ROLL
    ELSE
      DROP R> ROLL DUP
    THEN
   REPEAT
   R> DROP
   2DROP
  ;    
  
  \ This FORTH code snippet is a function that takes in a number (n) and outputs a list of prime numbers up to that number.
  \ It uses a traditional Sieve of Eratosthenes algorithm to find the prime numbers.
  \ The input is saved on the return stack (R) to preserve it during calculations.
  \ The first two values on the stack are swapped so that the input is now on top.
  \ The BEGIN loop is used to iterate through all numbers up to the input.
  \ The current value (i) is rolled to the bottom of the stack, and i-1 is checked to see if it is a prime number.
  \ If it is not a prime number, it is dropped from the stack and the loop continues.
  \ If it is a prime number, it is rolled to the top of the stack and duplicated.
  \ The duplicated value is used to check if it is a multiple of any previous numbers.
  \ If it is, it is dropped from the stack and the loop continues.
  \ If it is not, it is kept on the stack and the loop continues.
  \ This continues until all numbers have been checked and only prime numbers are left on the stack.
  \ The return stack is then dropped and the remaining prime numbers are dropped as well to leave only the prime list on the stack.
  \ The 2DROP at the end clears the stack of the remaining input and duplicate values.