: fibonacci ( n -- n1 n2) \ Define a new subroutine called `fibonacci` that takes in a number `n` and outputs two numbers `n1` and `n2`.
  dup 0 = \ Check if the input `n` is equal to 0, return early if it is.
  if exit then \ If `dup` returns true, exit the subroutine.
  dup 1 = \ Check if the input `n` is equal to 1.
  if 0 1 \ If `dup` returns true, output 0 and 1 as `n1` and `n2` respectively.
  else \ Otherwise, execute the following code.
    dup 1- \ Subtract 1 from `n` and duplicate the result.
    fibonacci swap 1- swap \ Execute `fibonacci` recursively with the duplicated result and push the result onto the stack.
    swap fibonacci \ Pop the top two numbers from the stack and execute `fibonacci` again with them as inputs.
    + swap \ Add the top two numbers of the stack and swap their positions.
  then \ End the `if` statement.
; \ End the `fibonacci` subroutine definition.
10 fibonacci . \ Output the first 10 numbers in the Fibonacci sequence.