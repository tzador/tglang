0 value n  \ set n = 0
: factorial dup 0 = if drop 1 else dup 1- factorial * then ; \ define factorial function
: fac-loop ( n -- fac ) swap 0 do i factorial loop ; \ define factorial loop function
: multiply \ define multiply function
  ( x y -- x * y )
  swap over 0= if drop 0 swap exit then \ if one of the numbers is 0, exit with 0
  over 0< if
    inc negate swap inc negate \ if both numbers are negative, swap and make them positive
    swap -rot -rot swap \ store numbers appropriately for loop
    swap swap negate swap negate 1- swap - \ increment counter for loop
    fac-loop abs ( result -- |result| )
    swap - \ negate result if needed
  else
    dup fac-loop \ calculate first factorial
    rot fac-loop \ calculate second factorial
    * \ multiply the two values
  then ;
  \ end multiply function
3 4 multiply \ output: 12 (3 * 4)