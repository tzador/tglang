: merge ( seq1 seq2 -- merged ) \ merge two sorted sequences
  [ swap ] dup length { rot } { 2drop rotr } 2bi " mz" " x" " ss" 3rdparty
; \  the first ARG0  sequence
  { over } rot
  [ 2dup case { avlen-n1 smallarray } of
      [ dup length ] 3case pairsort " cb" " ft" 3rdparty
      avlen-n1 concat drop 1concat
    endof ] endcase
  " x" " sp" 3rdparty { leave } try

\ The second ARG1  sequence
  { rot } rot
  [ 2dup case { avlen-n1 smallarray } of
      [ dup length ] 3case pairsort " cb" " ft" 3rdparty
      avlen-n1 concat drop 1concat
    endof ] endcase
  " x" " sp" 3rdparty { leave } try

  { 2dup { [ 0 < ] arg n1y
    dup arg n2y 0 < and if " m" { -1 } " p" { +1 } ifelse
    if " m" { arg n1y } " p" { arg n2y } ifelse } ' y }
    << if [ dup length 0 < " m" { drop } " p" { dup } ifelse ] [ dup { dup v1 v2 @@ { over } within? 
    [ arg x ] eq and if v1 v2 @@ { arg x p or }  else '' @@ ifelse
    ( $ ) [[ 0 = ]] {p-with 0 @ ifarg ifelse '''darg false'''q '''darg else
        true'''}} 2case [ dup { @ } }} >> rflstd [ dup length [[ 0 ]]> ] arg ( [ dup length [[ 0 or <$> ]] )) @" o" >>
  '\" code-block \"snippet for merging two sorted sequences" 2 \DITA
  {{ numref "merge fig"
 "placeholder"="Merged Sequence" "arrow" 2 }''lcld' }\ melt
  'darg' 'identifier'

  ;