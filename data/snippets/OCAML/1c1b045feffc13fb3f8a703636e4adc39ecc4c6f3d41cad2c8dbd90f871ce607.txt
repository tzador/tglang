(* Example of a function that calculates the nth Fibonacci number *)
let rec fibonacci n =
  if n <= 1 then n else
  fibonacci (n-1) + fibonacci (n-2)

(* Static type checking *)
let rec factorial (n : int) : int =
  if n <= 1 then 1 else
  n * factorial (n - 1)

(* Pattern matching with tuples *)
let get_name (student : string * int) : string =
  match student with
  | (name, id) -> name

(* Higher order functions *)
let apply_twice (f : 'a -> 'a) (x : 'a) : 'a =
  f (f x)

(* Currying *)
let add (x : int) (y : int) : int =
  x + y

let add_five = add 5

(* Records and record types *)
type person = {
  name : string;
  age : int;
  occupation : string;
}

let student = { name = "John"; age = 20; occupation = "Student" }

(* Pattern matching with records *)
let get_occupation (person : person) : string =
  match person with
  | { name = _; age = _; occupation = occupation } -> occupation

let age_occupation = get_occupation student

(* Exception handling *)
let divide (x : float) (y : float) : float =
  if y = 0.0 then raise (Failure "Division by zero")
  else x /. y

let result = divide 10.0 2.0

(* Modules *)
module type TYPE =
  sig
    type t
    val compare : t -> t -> int
    val string_of_t : t -> string
  end

module type EQUALITY_TYPE =
  sig
    include TYPE
    val equal : t -> t -> bool
  end

module Integer : EQUALITY_TYPE =
  struct
    type t = int
    let compare x y = Pervasives.compare x y
    let equal x y = x = y
    let string_of_t x = string_of_int x
  end

(* Functors *)
module Make_list (E : EQUALITY_TYPE) : sig
  type elt = E.t
  val create : unit -> elt list
end = struct
  type elt = E.t
  let create () = []
end

module Int_list = Make_list(Integer)

let list = Int_list.create ()

(* Printing *)
let _ =
  Printf.printf "5 + 7 = %d\n" (add 5 7);
  print_endline ("Name: " ^ get_name ("John", 1234));
  print_endline ("Factorial of 5: " ^ string_of_int (factorial 5));
  Printf.printf "10 / 2 = %f\n" (divide 10.0 2.0);
  print_endline ("Age: " ^ string_of_int student.age);
  print_endline ("Occupation: " ^ age_occupation)