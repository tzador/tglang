(** [Binary Tree] is a recursive data structure that is either empty or
 * consists of a root node with a left and right subtrees *)
type binaryTree =
| Empty
| Node of binaryTree * int * binaryTree

(** [insert x t] inserts the value [x] into the binary tree [t] at
 * the correct location *)
let rec insert (x: int) (t: binaryTree) : binaryTree =
    match t with
    | Empty -> Node (Empty, x, Empty)
    | Node(l, v, r) ->
        if x < v then Node (insert x l, v, r)
        else if x > v then Node (l, v, insert x r)
        else t

(** [merge t1 t2] merges two binary trees [t1] and [t2] together *)
let rec merge (t1: binaryTree) (t2: binaryTree) : binaryTree =
    match (t1, t2) with
    | (Empty, Empty) -> Empty
    | (Empty, _) -> t2
    | (_, Empty) -> t1
    | (Node(l1, v1, r1), Node(l2, v2, r2)) ->
        if v1 < v2 then Node (t1, v2, merge r1 t2)
        else if v1 > v2 then Node (merge l1 t2, v1, t1)
        else Node (merge l1 l2, v1, merge r1 r2)

(** [delete x t] deletes the value [x] from the binary tree [t] if it exists *)
let rec delete (x: int) (t: binaryTree) : binaryTree =
    match t with
    | Empty -> Empty
    | Node(l, v, r) ->
        if x < v then Node (delete x l, v, r)
        else if x > v then Node (l, v, delete x r)
        else merge l r

(** [find x t] checks if the value [x] exists in the binary tree [t] *)
let rec find (x: int) (t: binaryTree) : bool =
    match t with
    | Empty -> false
    | Node(l, v, r) ->
        if x < v then find x l
        else if x > v then find x r
        else true

(** [size t] computes the number of nodes in the binary tree [t] *)
let rec size (t: binaryTree) : int =
    match t with
    | Empty -> 0
    | Node(l, _, r) -> 1 + size l + size r

(** [height t] computes the height of the binary tree [t] *)
let rec height (t: binaryTree) : int =
    match t with
    | Empty -> 0
    | Node(l, _, r) -> 1 + max (height l) (height r)

(** [to_list t] converts the binary tree [t] into a list *)
let rec to_list (t: binaryTree) : int list =
    match t with
    | Empty -> []
    | Node(l, v, r) -> to_list l @ [v] @ to_list r

(** [from_list lst] converts a list [lst] into a binary tree *)
let rec from_list (lst: int list) : binaryTree =
    match lst with
    | [] -> Empty
    | hd :: tl -> insert hd (from_list tl)