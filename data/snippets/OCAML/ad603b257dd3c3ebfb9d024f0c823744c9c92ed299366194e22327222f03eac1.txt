(**********************************)
(* This is a complex OCAML snippet *)
(**********************************)

(* Define a function that takes in two arguments of type 'a and returns a list of type 'a list *)
let func a b = 
  let list_a = [a] in 
  let list_b = [b] in 
  list_a @ list_b

(* Define a recursive function that finds the factorial of a given integer *)
let rec factorial n = 
  if n = 0 then 1
  else n * factorial (n - 1)

(* Define a data type 'color' with 3 possible values *)
type color = 
  | Red 
  | Blue 
  | Green

(* Create a record type 'student' with fields for first name, last name, and a list of courses they are enrolled in *)
type student = { 
  first_name : string; 
  last_name : string; 
  courses : string list
}

(* Define a higher-order function that takes in a function as an argument and applies it to a list of integers *)
let apply f lst = 
  let rec aux acc = function 
    | [] -> acc
    | x :: xs -> aux (acc @ [f x]) xs in 
  aux [] lst

(* Create a module 'Calculator' with functions for addition, subtraction, multiplication, and division *)
module Calculator = struct 
  let add x y = x + y 
  let sub x y = x - y 
  let mul x y = x * y 
  let div x y = x / y 
end

(* Use pattern matching to create a function that checks if a number is even or odd *)
let check_even_odd n = 
  match (n mod 2) with 
  | 0 -> "even" 
  | _ -> "odd"