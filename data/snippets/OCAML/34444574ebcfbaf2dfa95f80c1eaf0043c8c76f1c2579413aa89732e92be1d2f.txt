(** Module implementing a binary search tree of integers *)

module BST = struct
    (* Definition of a binary tree *)
    type b_tree = 
        | Empty 
        | Node of int * b_tree * b_tree 

    (* [insert i b] inserts integer [i] into tree [b] *)
    let rec insert i b =
        match b with
        | Empty -> Node (i, Empty, Empty)
        | Node (n, left, right) ->
            if i < n then Node (n, (insert i left), right)
            else if i > n then Node (n, left, (insert i right))
            else b

    (* [contains i b] checks if integer [i] is in tree [b] *)
    let rec contains i b =
        match b with
        | Empty -> false
        | Node (n, left, right) ->
            if i < n then contains i left
            else if i > n then contains i right
            else true

    (* [fold f acc b] recursively applies function [f] to every value in tree [b]
       starting from accumulator [acc] *)
    let rec fold f acc b =
        match b with
        | Empty -> acc
        | Node (n, left, right) -> fold f (fold f (f acc n) left) right
end