(* This code snippet implements a function to find the maximum element in a list *)

let rec max_element lst =                       (* declares a recursive function with the name "max_element" and parameter "lst" of type 'a list *)
  match lst with                                 (* starts pattern matching on the list parameter *)
  | [] -> raise (Failure "empty list")           (* if the list is empty, raise an exception with the given message *)
  | [x] -> x                                     (* if the list only has one element, return that element *)
  | hd :: tl ->                                   (* if the list has more than one element, assign the head element to "hd" and the rest of the list to "tl" *)
    let max_rest = max_element tl in             (* recursively call the function on the tail of the list to find the maximum element in the rest of the list *)
    if hd > max_rest then
      hd                                          (* if the head element is greater than the maximum element in the rest of the list, return the head element *)
    else
      max_rest                                   (* otherwise, return the maximum element found in the rest of the list *)

let lst = [5; 9; 3; 2; 10]                        (* creates a list of integers *)
let max = max_element lst                        (* calls the function on the list and stores the result in a variable called "max" *)

print_string "The maximum element in the list is ";(* prints a message to the console *)
print_int max                                     (* prints the value of the maximum element to the console *)