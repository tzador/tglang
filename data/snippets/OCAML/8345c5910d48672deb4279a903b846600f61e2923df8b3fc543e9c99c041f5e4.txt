(* Function to check if a given number is even or odd
Parameters:
- num: the number to be checked
Returns: a string indicating if the number is even or odd *)
let check_even_or_odd (num: int) =
    if num mod 2 = 0 then
        "Even"
    else
        "Odd"

(* Recursive function to calculate the factorial of a given number
Parameters:
- num: the number whose factorial is to be calculated
Returns: the factorial of the given number as an int *)
let rec factorial (num: int) =
    if num = 0 then
        1
    else
        num * factorial (num - 1)

(* Function to reverse a list using tail recursion
Parameters:
- lst: the list to be reversed
- acc: an accumulator to store the reversed list
Returns: the reversed list *)
let reverse_list_tail_rec (lst: 'a list) =
    let rec reverse (lst: 'a list) (acc: 'a list) =
        match lst with
        | [] -> acc
        | x :: xs -> reverse xs (x :: acc)
    in reverse lst []

(* A simple binary tree data structure *)
type 'a binary_tree =
    | Empty
    | Node of 'a * 'a binary_tree * 'a binary_tree

(* Function to insert a value into a binary tree
Parameters:
- tree: the binary tree to be inserted into
- value: the value to be inserted
Returns: a new binary tree with the value inserted *)
let insert_into_tree (tree: 'a binary_tree) (value: 'a) =
    match tree with
    | Empty -> Node (value, Empty, Empty)
    | Node (v, l, r) ->
        if value < v then
            Node (v, insert_into_tree l value, r)
        else
            Node (v, l, insert_into_tree r value)

(* Function to recursively search for a value in a binary tree
Parameters:
- tree: the binary tree to be searched
- value: the value to be searched for
Returns: a boolean indicating if the value is present in the tree *)
let rec search_in_tree (tree: 'a binary_tree) (value: 'a) =
    match tree with
    | Empty -> false
    | Node (v, l, r) ->
        if value = v then
            true
        else if value < v then
            search_in_tree l value
        else
            search_in_tree r value

(* A module to represent a stack data structure *)
module Stack = struct
    (* Type representing the stack *)
    type 'a t = 'a list

    (* Function to create a new empty stack *)
    let create () = []

    (* Function to check if the stack is empty
    Parameters:
    - stack: the stack to be checked
    Returns: a boolean indicating if the stack is empty *)
    let is_empty (stack: 'a t) =
        match stack with
        | [] -> true
        | _ -> false

    (* Function to push a value onto the stack
    Parameters:
    - stack: the stack to be pushed onto
    - value: the value to be pushed
    Returns: the updated stack *)
    let push (stack: 'a t) (value: 'a) =
        value :: stack

    (* Function to pop a value from the stack
    Parameters:
    - stack: the stack to be popped from
    Returns: the popped value and the updated stack *)
    let pop (stack: 'a t) =
        match stack with
        | [] -> failwith "Stack is empty"
        | x :: xs -> (x, xs)
end