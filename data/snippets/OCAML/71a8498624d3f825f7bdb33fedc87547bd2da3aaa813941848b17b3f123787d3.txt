(* This function finds the maximum value in a list of integers using recursion *)
let rec find_max (l : int list) : int =
  match l with
  | [] -> failwith "empty list"
  | [x] -> x
  | x :: xs ->
    let max_rest = find_max xs in
    if x > max_rest then x else max_rest
(* This function merges two sorted lists into one sorted list *)
let rec merge (l1 : int list) (l2 : int list) : int list =
  match l1, l2 with
  | [], [] -> []
  | [], l | l, [] -> l
  | x :: xs, y :: ys ->
    if x < y then x :: merge xs (y :: ys)
    else y :: merge (x :: xs) ys
(* This function implements quicksort algorithm on a list of integers *)
let rec quicksort (l : int list) : int list =
  match l with
  | [] -> []
  | [x] -> [x]
  | pivot :: xs ->
    let smaller, bigger = List.partition (fun x -> x < pivot) xs in
    merge (quicksort smaller) (pivot :: quicksort bigger)
(* Example usage of quicksort function *)
let numbers = [5; 2; 8; 10; 1; 3]
let sorted_numbers = quicksort numbers (* [1; 2; 3; 5; 8; 10] *)