(* This function takes in an integer n and returns the list of Fibonacci numbers up to the nth number *)
let fib_list n =
    let rec helper acc n1 n2 count =
        if count = 0 then
            acc
        else 
            helper (acc @ [n1 + n2]) n2 (n1 + n2) (count - 1)
    in helper [0; 1] 0 1 (n - 2)


(* This function takes in a list of integers and finds the largest number in the list *)
let rec find_max lst =
    match lst with
    | [] -> failwith "Error: Empty list"
    | [x] -> x
    | x::xs -> max x (find_max xs)


(* This function takes in a list and reverses the order of the elements *)
let rec reverse lst =
    match lst with
    | [] -> []
    | [x] -> [x]
    | x::xs -> reverse xs @ [x]


(* This function creates a type for binary trees *)
type 'a btree =
    | Empty
    | Node of 'a * 'a btree * 'a btree


(* This function inserts an element into a binary search tree *)
let rec insert_tree elem tree = 
    match tree with
    | Empty -> Node(elem, Empty, Empty)
    | Node(value, left, right) ->
        if elem < value then
            Node(value, insert_tree elem left, right)
        else
            Node(value, left, insert_tree elem right)


(* This function performs a depth-first search on a binary tree *)
let rec dfs tree =
    match tree with
    | Empty -> []
    | Node(value, left, right) -> [value] @ dfs left @ dfs right


(* This function performs a breadth-first search on a binary tree *)
let bfs tree =
    let rec helper queue =
        match queue with
        | [] -> []
        | Node(value, left, right)::q -> value :: helper (q @ [left; right])
        | Empty::q -> helper q
    in helper [tree]