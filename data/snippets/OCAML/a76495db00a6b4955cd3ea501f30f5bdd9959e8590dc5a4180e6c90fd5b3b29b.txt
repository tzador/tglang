(* This is a complex function that takes in a list and returns a new list with only positive integers *)

(* function takes in list as input *)
let rec positive_list (input_list: int list) : int list =
  match input_list with (* pattern matching *)
  | [] -> [] (* base case: empty list, return empty list *)
  | hd::tl -> (* head and tail of list *)
    if hd > 0 then (* check if head is positive *)
      hd::(positive_list tl) (* add head to new list and recursively call function on tail *)
    else
      positive_list tl (* head is not positive, call function on tail only *)
      
(* example usage *)
let input = [1; -2; 3; 0; -4; 5] (* input list *)
let output = positive_list input (* calling function on input list *)
print_endline (string_of_int output) (* print output list converted to string *)
(* output: "[1;3;5]" *)