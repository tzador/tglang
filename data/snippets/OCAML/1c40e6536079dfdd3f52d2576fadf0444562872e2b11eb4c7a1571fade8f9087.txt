(* This is a function that takes in a list of integers and returns a new list with only the even numbers *)
let rec even_numbers = function
    | [] -> [] (* Base case: empty list *)
    | x :: xs -> if x mod 2 = 0 then x :: even_numbers xs (* If first element is even, add it to new list *)
                 else even_numbers xs (* Otherwise skip first element and check rest of list for even numbers *)
                 
(* Sample test cases *)
even_numbers [1;2;3;4;5;6];; (* Output: [2;4;6] *)
even_numbers [11;21;31;41;51;61];; (* Output: [] *)
even_numbers [2;4;6;8;10];; (* Output: [2;4;6;8;10] *)

(* This is a function that takes in a list of strings and returns a new list with only the words that start with a vowel *)
let rec vowel_words = function
    | [] -> [] (* Base case: empty list *)
    | x :: xs -> if String.get x 0 = 'a' ||
                     String.get x 0 = 'e' ||
                     String.get x 0 = 'i' ||
                     String.get x 0 = 'o' ||
                     String.get x 0 = 'u' then x :: vowel_words xs (* If first letter is a vowel, add it to new list *)
                 else vowel_words xs (* Otherwise skip first element and check rest of list for words starting with vowels *)
                 
(* Sample test cases *)
vowel_words ["apple"; "banana"; "orange"; "pear"; "grape"];; (* Output: ["apple"; "orange"] *)
vowel_words ["cat"; "dog"; "fish"];; (* Output: [] *)
vowel_words ["Elephant"; "Igloo"; "Ostrich"; "Unicorn"; "Antelope"];; (* Output: ["Elephant"; "Igloo"; "Ostrich"] *)