(* This code snippet uses recursion and pattern matching to implement a custom list module *)

(* Definition of list type in OCaml *)
type 'a my_list =
    | Empty
    | Cons of 'a * 'a my_list

(* Function to get the length of a list recursively *)
let rec length (lst: 'a my_list) : int =
  match lst with
  | Empty -> 0
  | Cons (_, tail) -> 1 + length tail

(* Function to reverse a list recursively *)
let rec reverse (lst: 'a my_list) : 'a my_list =
  let rec aux acc = function
    | Empty -> acc
    | Cons (hd, tl) -> aux (Cons (hd, acc)) tl
  in aux Empty lst