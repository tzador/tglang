(* This is a function that takes in two integers and returns their sum *)
let sum (x: int) (y: int) : int =
    x + y;;

(* This is a recursive function that calculates the factorial of a given integer *)
let rec factorial (n: int) : int =
    if n = 0 then
        1
    else
        n * factorial (n - 1);;

(* This function takes in a list of integers and returns a new list with each element multiplied by 2 *)
let double_list (lst: int list) : int list =
    List.map (fun x -> x * 2) lst;;

(* This is a higher-order function that takes in a function and a boolean, and applies the function twice if the boolean is true *)
let apply_twice (f: 'a -> 'a) (b: bool) : 'a -> 'a =
    if b then
        fun x -> f (f x)
    else
        fun x -> x;;

(* This is a record type that stores information about a person *)
type person = {
    name: string;
    age: int;
    occupation: string;
};;

(* This is a function that creates a person record with given values *)
let create_person (name: string) (age: int) (occupation: string) : person =
    {name = name; age = age; occupation = occupation};;

(* This is a variant type that represents different types of shapes *)
type shape =
    | Circle of float
    | Triangle of float * float
    | Rectangle of float * float;;

(* This function calculates the area of a given shape *)
let area_of_shape (s: shape) : float =
    match s with
    | Circle r -> 3.14 *. r *. r
    | Triangle b h -> 0.5 *. b *. h
    | Rectangle w h -> w *. h;;

(* This function applies a given function to each element in a list and returns a new list with the results *)
let apply_to_list (f: 'a -> 'b) (lst: 'a list) : 'b list =
    List.map f lst;;