(* OCaml code for a function that calculates the nth term in the Fibonacci sequence *)

(* Helper function to recursively calculate the Fibonacci sequence *)
let rec fib_helper n a b =
  if n = 0 then a (* base case: return the previous value *)
  else fib_helper (n-1) b (a+b) (* recursive step: calculate next value *)

(* Main function that calls the helper function with initial values *)
let fib n =
  if n < 0 then failwith "n must be a non-negative integer" (* error handling *)
  else fib_helper n 0 1 (* call helper function with initial values 0 and 1 *)

(* Example usage: calculate the 10th term in the Fibonacci sequence *)
let num = fib 10 (* num = 55 *)

(* Another example: calculate the 5th term in the Fibonacci sequence *)
let num2 = fib 5 (* num2 = 5 *)