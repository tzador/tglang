(* Function to find the nth Fibonacci number *)
let rec fib n =
  if n < 2 then n
  else fib (n-1) + fib (n-2)
(* This function uses tail recursion for optimized performance *)
  
(* Function to find the factorial of a number *)
let rec fact n =
  if n < 1 then 1
  else n * fact (n-1)
(* This function also uses tail recursion for optimized performance *)
  
(* Function to check if a number is prime *)
let rec is_prime n =
  if n < 2 then false
  else if n = 2 then true
  else if n mod 2 = 0 then false
  else let rec check_divisors d =
    if d * d > n then true
    else n mod d <> 0 && check_divisors (d+2)
  in check_divisors 3;;