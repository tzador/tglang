(* This is a recursive function that calculates and returns the factorial of a given number n. *)
let rec factorial n = 
  if n <= 1 then 1 (* If n is less than or equal to 1, return 1. *)
  else n * factorial (n-1) (* If n is greater than 1, calculate n times the factorial of n-1. *)

(* This is a function that calculates the sum of the squares of a list of numbers and returns it. *)
let sum_of_squares = 
  List.fold_left (fun acc x -> acc + x * x) 0

(* This is a function that converts a string into a list of characters using pattern matching. *)
let rec string_to_list str =
  match str with (* Check the different cases of the string. *)
  | "" -> [] (* If the string is empty, return an empty list. *)
  | _ -> str.[0] :: string_to_list (String.sub str 1 (String.length str - 1)) (* Otherwise, add the first character of the string to the list and recursively call with the remaining characters. *)

(* This is a function that creates and returns a new list by applying a given function to each element in a given list. *)
let map f lst =
  let rec aux acc l =
    match l with
    | [] -> List.rev acc (* If l is an empty list, return the reversed accumulator. *)
    | head :: tail -> aux (f head :: acc) tail (* Otherwise, add the result of the function applied to the head of l to the accumulator and call recursively with the tail. *)
  in
  aux [] lst;; (* Call the auxiliary function with an empty accumulator and the given list. *)

(* This is a function that sorts a list in ascending order using the quicksort algorithm. *)
let rec quicksort lst =
  match lst with
  | [] -> [] (* If the list is empty, return an empty list. *)
  | [x] -> [x] (* If the list contains only one element, return the list. *)
  | pivot :: tail ->
      let left, right =
        List.partition (fun x -> x < pivot) tail (* Partition the list into elements smaller than the pivot and elements greater than the pivot. *)
      in
      quicksort left @ [pivot] @ quicksort right (* Recursively call with the left and right lists and combine the results with the pivot in the middle using the list concatenation operator. *)

(* This is a function that takes in a number n and returns a list containing n random numbers between 1 and 10. *)
let rec random_list n =
  if n <= 0 then [] (* If n is less than or equal to 0, return an empty list. *)
  else Random.int 10 :: random_list (n-1) (* Otherwise, generate a random number between 1 and 10 and add it to the list, recursively calling with n-1.)