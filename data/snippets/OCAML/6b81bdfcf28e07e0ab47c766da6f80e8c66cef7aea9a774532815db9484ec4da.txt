(*Define a function that takes in two lists and returns the concatenation of the two*)
let concatenate_lists lst1 lst2 = 
  let combined_list = List.append lst1 lst2 in
  combined_list

(*Define a helper function that checks if an element is in a given list*)
let rec check_element elem lst = match lst with
  | [] -> false
  | head::tail -> if head = elem then true else check_element elem lst

(*Define a function that takes in a list and a function as parameters*)
let apply_func_to_list func lst = 
  let rec helper = function
  | [] -> []
  | head::tail -> (func head) :: (helper tail) (*apply function to head and recursively call on tail*)
  in helper lst

(*Define a function that checks if a list contains all even numbers*)
let check_if_all_even lst = 
  let even_func x = x mod 2 = 0 in (*define a function that checks if a number is even*)
  let filtered_list = List.filter even_func lst in (*use List.filter to only keep even numbers*)
  let new_list = apply_func_to_list (check_element 0) filtered_list in (*apply check_element helper function to check if 0 is in the list*)
  List.for_all (fun x -> x) new_list (*use List.for_all to check if all elements in the list are true*)

(*Define a list and call the functions on it*)
let lst = [1;2;3;4;5;6]
let result = concatenate_lists lst [7;8;9;10]
let is_all_even = check_if_all_even lst

(*Print the results*)
print_endline (string_of_list result) (*convert the concatenated list to a string and print*)
print_endline (string_of_bool is_all_even) (*convert the boolean to a string and print*)