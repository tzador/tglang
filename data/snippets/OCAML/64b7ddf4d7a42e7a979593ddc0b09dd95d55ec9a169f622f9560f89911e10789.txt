(* This is a function that calculates the sum of squares from 1 to n *)
let rec sum_of_squares (n : int) : int =
  if n < 1
  then 0
  else (n * n) + sum_of_squares (n - 1) (* recursive call to add n squared to sum *)

(* This is a function that calculates the factorial of a number n *)
let rec factorial (n : int) : int =
  if n < 1
  then 1
  else n * factorial (n - 1) (* recursive call to multiply n by factorial of n-1 *)

(* This is a function that takes in a list of integers and returns a new list with the squares of the original values *)
let square_list (lst : int list) : int list =
  List.map (fun x -> x * x) lst (* using List.map to apply function to each element in list *)

(* This is a function that takes in a list of strings and returns the concatenation of all strings in the list *)
let concatenate_list (lst : string list) : string =
  List.fold_left (fun acc str -> acc ^ str) "" lst (* using List.fold_left to accumulate strings into one variable *)

(* This is a function that takes in a string and returns the number of characters in the string *)
let number_of_characters (str : string) : int =
  String.length str (* using String.length to get length of string *)

(* This is a function that calculates the nth Fibonacci number *)
let rec fibonacci (n : int) : int =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n - 1) + fibonacci (n - 2) (* recursive call to add previous two Fibonacci numbers *)

(* This is a function that finds the maximum integer in a list of integers *)
let max_in_list (lst : int list) : int =
  List.fold_left (fun acc x -> if x > acc then x else acc) lst.(0) lst (* using List.fold_left to iterate through list and find maximum value *)

(* This is a function that checks if an input is a prime number *)
let is_prime (n : int) : bool =
  let rec check_prime (n : int) (d : int) : bool =
    if d * d > n
    then true
    else if n mod d = 0
         then false
         else check_prime n (d + 1) in
  check_prime n 2 (* using helper function to recursively check if n is divisible by any numbers less than its square root *)