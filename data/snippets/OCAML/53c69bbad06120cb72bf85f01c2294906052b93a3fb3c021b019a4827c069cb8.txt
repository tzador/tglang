(** Signature for a generic monoid module *)
module type MONOID = sig
  (** [t] is the type of values that belong to this monoid *)
  type t
  (** Identity element for the monoid *)
  val zero : t
  (** Binary operation for the monoid *)
  val combine : t -> t -> t
end

(** A functor that constructs concrete monoid modules *)
module Monoid (M : MONOID) = struct
  (** Custom type that implements the monoid functions *)
  type t = M.t
  (** Implementation of [zero] for the given monoid *)
  let zero = M.zero
  (** Implementation of [combine] for the given monoid *)
  let combine = M.combine
  (** Helper function to recursively apply [combine] to a list of values *)
  let rec combine_list = function
    | [] -> zero
    | hd :: tl -> combine hd (combine_list tl)
  (** Function to concatenate two monoid values using [combine] *)
  let concat x y = combine x y
  (** Function to concatenate a list of monoid values using [combine_list] *)
  let concat_list l = combine_list l
  (** Function to apply [combine] to an initial value and a list of values *)
  let rec fold init = function
    | [] -> init
    | hd :: tl -> fold (combine init hd) tl
end

(** A module that implements the integer monoid *)
module IntMonoid : MONOID with type t = int = struct
  (** [t] is the type of integers *)
  type t = int
  (** Identity element for integers (0) *)
  let zero = 0
  (** Binary operation for integers (addition) *)
  let combine x y = x + y
end

(** Example usage *)
let monoid_sum = Monoid(IntMonoid)
let result = monoid_sum.fold 5 [1;2;3] ;; (* result = 11 *)