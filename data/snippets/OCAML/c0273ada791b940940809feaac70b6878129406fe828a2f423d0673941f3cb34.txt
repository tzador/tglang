(** Represents a binary tree with elements of type 'a *)
type 'a btree = 
  | Leaf                     (* Empty tree *)
  | Node of 'a * 'a btree * 'a btree    (* Node with value and left and right subtrees *)
  
(** Takes in a binary tree and returns the sum of all values in the tree *)
let rec sum_tree (tree : int btree) : int = 
  match tree with 
  | Leaf -> 0       (* Base case: sum of an empty tree is 0 *)
  | Node (v, l, r) -> v + sum_tree l + sum_tree r (* Recursive call to sum Tree*)