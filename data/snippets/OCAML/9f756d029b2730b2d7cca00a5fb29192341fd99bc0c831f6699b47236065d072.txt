(** A type representing a linked list node with a value of type 'a *)
type 'a node = {
    value: 'a;
    next: 'a node option;
}

(** A function that adds a new value to the beginning of a linked list *)
let addToFront (value: 'a) (list: 'a node option) : 'a node option =
    {
        value = value;
        next = list;
    }
    
(** A function that removes the first node from a linked list *)
let removeFromFront (list: 'a node option) : 'a node option =
    match list with
    | None -> None
    | Some node -> node.next
    
(** A function that inserts a new value at a specified index in a linked list *)
let rec insertAtIndex (value: 'a) (index: int) (list: 'a node option) : 'a node option =
    if index < 0 then failwith "Index out of bounds"
    else if index = 0 then addToFront value list
    else match list with
        | None -> None
        | Some node -> Some { node with next = insertAtIndex value (index-1) node.next }
        
(** A function that removes a value at a specified index from a linked list *)
let rec removeAtIndex (index: int) (list: 'a node option) : 'a node option =
    if index < 0 then failwith "Index out of bounds"
    else if index = 0 then removeFromFront list
    else match list with
        | None -> None
        | Some node -> Some { node with next = removeAtIndex (index-1) node.next }
        
(** A function that checks if a value is present in a linked list *)
let rec contains (value: 'a) (list: 'a node option) : bool =
    match list with
    | None -> false
    | Some node -> if node.value = value then true else contains value node.next