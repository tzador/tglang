(* This code snippet generates a list of all possible combinations of 
two elements from a given list *)

(* Function to generate all combinations *)
let rec combine lst = match lst with
  | [] -> []
  | [x] -> []
  | x :: xs -> make_comb x xs @ (combine xs)

(* Helper function to make combinations with given first element *)
and make_comb x lst = match lst with
  | [] -> []
  | y :: ys -> (x,y) :: make_comb x ys 

(* Example usage *)
let lst = [1;2;3;4]
let combos = combine lst 

(* Output: [(1,2);(1,3);(1,4);(2,3);(2,4);(3,4)] *)