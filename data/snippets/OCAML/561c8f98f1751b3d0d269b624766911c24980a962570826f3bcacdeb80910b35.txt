(* Represents a node in a binary tree *)
type 'a bt_node =
  | Empty                        (* Represents an empty tree *)
  | Node of 'a * 'a bt_node * 'a bt_node (* Represents a node with a value and two subtrees *)

(* Function to insert a new node into a binary tree *)
let rec insert (x: 'a) (tree: 'a bt_node) : 'a bt_node =
  match tree with 
  | Empty -> Node (x, Empty, Empty) (* If the tree is empty, create a new node with the given value *)
  | Node (v, left, right) ->        (* If the tree is not empty, compare the value to the current node *)
    if x < v then                    (* If the value is less than the current node, insert it into the left subtree *)
      Node (v, insert x left, right)
    else if x > v then               (* If the value is greater than the current node, insert it into the right subtree *)
      Node (v, left, insert x right)
    else                             (* If the value is equal to the current node, do not insert it again *)
      tree

(* Function to search for a specific value in a binary tree *)
let rec search (x: 'a) (tree: 'a bt_node) : bool =
  match tree with
  | Empty -> false                  (* If the tree is empty, the value cannot be found *)
  | Node (v, left, right) ->        (* If the tree is not empty, compare the value to the current node *)
    if x = v then                   (* If the value is equal to the current node, return true *)
      true
    else if x < v then              (* If the value is less than the current node, search in the left subtree *)
      search x left
    else                            (* If the value is greater than the current node, search in the right subtree *)
      search x right

(* Function to delete a node from a binary tree *)
let rec delete (x: 'a) (tree: 'a bt_node) : 'a bt_node =
  match tree with
  | Empty -> Empty                  (* If the tree is empty, there is nothing to delete *)
  | Node (v, left, right) ->        (* If the tree is not empty, compare the value to the current node *)
    if x = v then                  (* If the value is equal to the current node, delete it and rearrange the tree *)
      match (left, right) with
      | (Empty, Empty) -> Empty     (* If both subtrees are empty, the node is removed *)
      | (Empty, _) -> right         (* If the left subtree is empty, the right subtree becomes the new tree *)
      | (_, Empty) -> left          (* If the right subtree is empty, the left subtree becomes the new tree *)
      | (_, _) ->                   (* If both subtrees are not empty, find the minimum value in the right subtree to replace the deleted node *)
        let new_v = min_value right in
        let new_right = delete new_v right in
        Node (new_v, left, new_right)
    else if x < v then           (* If the value is less than the current node, delete it from the left subtree *)
      Node (v, delete x left, right)
    else                         (* If the value is greater than the current node, delete it from the right subtree *)
      Node (v, left, delete x right)

(* Helper function to find the minimum value in a binary tree *)
let rec min_value (tree: 'a bt_node) : 'a =
  match tree with
  | Empty -> raise Not_found      (* If the tree is empty, there is no minimum value *)
  | Node (v, Empty, _) -> v    (* If the left subtree is empty, the current node is the minimum value *)
  | Node (_, left, _) -> min_value left (* If the left subtree is not empty, continue recursing until an empty subtree is reached *)