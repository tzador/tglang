(* Example code for creating and manipulating a binary search tree *)

(* Define type for binary tree nodes *)
type 'a btree = Leaf | Node of 'a * 'a btree * 'a btree

(* Function to insert new value into binary tree *)
let rec insert tree value =
  match tree with
  | Leaf -> Node (value, Leaf, Leaf) (* If tree is empty, create new node with value *)
  | Node (x, left, right) -> (* If node already exists, compare value with current node's value *)
      if value = x then (* If value is already in tree, return the same tree *)
        tree
      else if value < x then (* If value is less than current node's value, insert into left subtree *)
        Node (x, insert left value, right) 
      else (* If value is greater than current node's value, insert into right subtree *)
        Node (x, left, insert right value)

(* Function to check if a value is in the binary tree *)
let rec contains tree value =
  match tree with
  | Leaf -> false (* If tree is empty, value is not in tree *)
  | Node (x, left, right) -> (* If node exists, compare value with current node's value *)
      if value = x then true (* If value is equal, return true *)
      else if value < x then contains left value (* If value is less than node's value, check left subtree *)
      else contains right value (* If value is greater than node's value, check right subtree *)

(* Function to remove a node from the binary tree *)
let rec remove tree value =
  match tree with
  | Leaf -> Leaf (* If tree is empty, return empty tree *)
  | Node (x, left, right) -> (* If node exists, compare value with current node's value *)
      if value = x then (* If value is equal, remove node and merge subtrees *)
        match (left, right) with
        | (Leaf, Leaf) -> Leaf (* If both subtrees are empty, return empty tree *)
        | (Leaf, Node (y, l, r)) -> Node (y, l, r) (* If only left subtree is empty, return right subtree *)
        | (Node (y, l, r), Leaf) -> Node (y, l, r) (* If only right subtree is empty, return left subtree *)
        | (Node (y, l, r), Node (z, ll, rr)) -> (* If both subtrees exist, merge them and return *)
            Node (find_min right, l, rr) (* Find the minimum value in right subtree to replace removed node *)
      else if value < x then Node (x, remove left value, right) (* If value is less than node's value, remove from left subtree *)
      else Node (x, left, remove right value) (* If value is greater than node's value, remove from right subtree *)

(* Find minimum value in a binary tree *)
let rec find_min tree =
  match tree with
  | Leaf -> failwith "Tree is empty"
  | Node (x, Leaf, _) -> x (* If left subtree is empty, current node is minimum value *)
  | Node (_, left, _) -> find_min left (* If left subtree exists, continue to search *)

(* Example usage *)
let tree = Node (5, Node (3, Node (2, Leaf, Leaf), Node (4, Leaf, Leaf)), Node (8, Node (7, Leaf, Leaf), Node (9, Leaf, Leaf)))

let new_tree = insert tree 6 (* Insert value 6 into tree *)
let contains_five = contains tree 5 (* Check if value 5 is in tree *)
let remove_three = remove tree 3 (* Remove node with value 3 from tree *)