(* This is a recursive function that calculates the factorial of a given number *)

let rec factorial n =
  match n with
  | 0 -> 1 (* Base case: return 1 if input is 0 *)
  | _ -> n * factorial (n-1) (* If input is not 0, multiply n by factorial of n-1 *)

(* This is a function that calculates the Fibonacci sequence up to a given limit *)

let fib max =
  let rec aux prev next count =
    if count = 0 then [] (* Base case: return empty list if count is 0 *)
    else prev::(aux next (prev+next) (count-1)) (* Otherwise, add previous and next numbers to list and recursively call function with updated values *)
  in
  aux 0 1 max (* Call helper function with initial values of 0 and 1 *)

(* This is a function that merges two sorted lists into one sorted list *)

let rec merge l1 l2 =
  match (l1,l2) with
  | ([],l2) -> l2 (* If first list is empty, return second list *)
  | (l1,[]) -> l1 (* If second list is empty, return first list *)
  | (h1::t1, h2::t2) -> if h1 < h2 then h1 :: (merge t1 l2) else h2 :: (merge l1 t2) (* If both lists have elements, compare first elements and add the smaller one to the result, recursively call function with remaining elements *)

(* This is a function that implements quicksort algorithm *)

let rec quicksort l =
  match l with
  | [] -> []  (* Base case: return empty list if input is empty *)
  | h :: t ->
    let lesser, equal, greater = 
      List.fold_left (fun (l,e,g) x -> if x < h then (x::l,e,g) else if x = h then (l,x::e,g) else (l,e,x::g)) ([],[],[]) t (* Partition input list into three sublists: elements smaller than pivot, equal to pivot, and greater than pivot *)
    in
    (quicksort lesser) @ equal @ (quicksort greater) (* Recursively call function on the lesser and greater sublists, then concatenate them together along with the pivot element *)