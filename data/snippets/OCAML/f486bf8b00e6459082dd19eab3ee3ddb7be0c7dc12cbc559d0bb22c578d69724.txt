(* This is a function named "factorial" that takes in an integer "n" as a parameter and returns the factorial of n
   * with a recursive approach. *)

let rec factorial n =         (* function definition with the name "factorial" and parameter "n" *)
  if n <= 1                    (* base case, if n is 0 or 1, return 1 *)
  then 1
  else n * factorial (n-1)     (* recursive call, multiply n with the factorial of n-1 *)

(* This function uses pattern matching to calculate the factorial of an integer "n" *)

let rec match_factorial = function (* function definition with name "match_factorial" and pattern matching *)
  | 0 -> 1                      (* if n is 0, return 1 *)
  | n -> n * match_factorial (n-1) (* if n is any other value, recursively call the function with n-1 *)

(* This is a function using tail recursion to calculate the factorial of an integer "n" *)

let tail_rec_factorial n =      (* function definition named "tail_rec_factorial" with parameter "n" *)
  let rec helper acc = function (* helper function with accumulator and pattern matching *)
    | 0 -> acc                   (* if n is 0, return the accumulator *)
    | i -> helper (acc * i) (i-1) (* otherwise, multiply accumulator with i and recursively call helper with (acc * i) and (i-1) *)
  in
  helper 1 n                    (* call helper function with initial accumulator value as 1 and input n *) 

(* This is a function that calculates the sum of factorial numbers from 1 to n using a for loop *)

let sum_of_factorials n =       (* function definition named "sum_of_factorials" with parameter "n" *)
  let sum = ref 0 in            (* declare a mutable reference variable "sum" with initial value 0 *)
  for i = 1 to n do             (* for loop from 1 to n *)
    sum := !sum + factorial i;  (* add the factorial of i to the current value of sum using the ! operator *)
  done;                         (* end of for loop *)
  !sum                          (* return the final value of sum using the ! operator *)