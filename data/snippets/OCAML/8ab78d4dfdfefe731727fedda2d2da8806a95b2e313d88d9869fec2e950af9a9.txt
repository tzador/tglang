(**Implementation of a binary tree in OCAML with insert and search functions *)

(** Defining a binary tree type *)
type binary_tree =
  | Empty (* represents an empty tree *)
  | Node of int * binary_tree * binary_tree (* represents a node with a value and two child trees *)

(** Function to insert a value into the tree *)
let rec insert (value : int) (tree : binary_tree) : binary_tree =
  match tree with 
  | Empty -> Node(value, Empty, Empty) (* create a new node if tree is empty *)
  | Node(v, l, r) -> (* traverse the tree and insert value in the appropriate place *)
    if value < v then 
      Node(v, insert value l, r) 
    else 
      Node(v, l, insert value r)

(** Function to search for a value in the tree *)
let rec search (value : int) (tree : binary_tree) : bool =
  match tree with 
  | Empty -> false (* value doesn't exist in empty tree *)
  | Node(v, l, r) -> (* traverse the tree and check if value matches *)
    if value = v then 
      true
    else if value < v then 
      search value l 
    else 
      search value r;;