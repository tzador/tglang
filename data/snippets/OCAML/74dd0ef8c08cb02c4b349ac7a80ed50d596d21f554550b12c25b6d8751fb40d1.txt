(* This function takes in a list of integers and returns the sum of all odd numbers in the list *)

let rec sumOddList lst =
  match lst with
  | [] -> 0 (* if list is empty, sum is 0 *)
  | h :: t -> (* split list into head and tail *)
      if h % 2 = 1 then (* if head is odd, add it to the sum of remaining list *)
        h + sumOddList t
      else
        sumOddList t (* if head is even, disregard it and add remaining list *)
  
(* Test cases *)
sumOddList [] (* 0 *)
sumOddList [1; 2; 3; 4; 5] (* 9 *)
sumOddList [2; 4; 6; 8; 10] (* 0 *)
sumOddList [3; 5; 7; 9; 11] (* 35 *)