(* This is a function that takes in a list of integers and returns a new list with only even numbers *)
let rec filter_even lst =
  match lst with
  | [] -> []
  | x::xs ->
      if (x mod 2) = 0 then
        x :: filter_even xs
      else
        filter_even xs
 
(* This is a function that takes in a string and returns the string with all vowels removed *)
let remove_vowels str =
  let vowels = ['a';'e';'i';'o';'u'] in
  let rec helper new_str index =
    if index >= String.length str then
      new_str
    else if List.mem str.[index] vowels then
      helper new_str (index+1)
    else
      helper (new_str ^ String.make 1 str.[index]) (index+1)
  in
  helper "" 0
 
(* This is a function that takes in a string and replaces all instances of a given character with another *)
let replace str old_char new_char =
  let rec helper new_str index =
    if index >= String.length str then
      new_str
    else if str.[index] = old_char then
      helper (new_str ^ String.make 1 new_char) (index+1)
    else
      helper (new_str ^ String.make 1 str.[index]) (index+1)
  in
  helper "" 0
 
(* This is a function that takes in a list of strings and sorts them in alphabetical order *)
let rec sort_strings lst =
  match lst with
  | [] -> []
  | x::xs ->
      let rec insert elem lst =
        match lst with
        | [] -> [elem]
        | y::ys ->
            if elem < y then
              elem :: lst
            else
              y :: insert elem ys
      in
      insert x (sort_strings xs)
 
(* This is a function that takes in an integer n and returns a list of the first n Fibonacci numbers *)
let rec fibonacci n =
  match n with
  | 0 -> []
  | 1 -> [1]
  | 2 -> [1; 1]
  | _ -> 
      let rec helper lst count =
        if count = n then
          lst
        else
          let next_fib = List.hd lst + List.hd (List.tl lst) in
          helper (next_fib :: lst) (count+1)
      in
      let fibs = helper [1; 1] 2 in
      List.rev fibs