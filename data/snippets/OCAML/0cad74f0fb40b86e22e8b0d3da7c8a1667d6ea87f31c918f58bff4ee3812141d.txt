(* This is an example of a higher-order function in OCAML *)
(* This function takes in another function as an argument and returns a new function *)
let apply_func func arg =
    (* Here we use the "fun" keyword to define an anonymous function *)
    (* This function takes in a parameter x and applies the argument function to it *)
    let apply_to_x x = func x in
    (* This returns the result of applying the argument function to the argument *)
    (* Notice how we can use "apply_to_x" as the argument for the "func" function *)
    apply_to_x arg

(* Now let's define a function that multiplies a number by 2 *)
let mult_by_2 x = x * 2

(* We can use the "apply_func" function to create a new function that multiplies a number by 4 *)
let multiply_by_4 = apply_func mult_by_2 2

(* Let's test our new function by applying it to the number 3 *)
multiply_by_4 3;;
(* Output: 12 *)