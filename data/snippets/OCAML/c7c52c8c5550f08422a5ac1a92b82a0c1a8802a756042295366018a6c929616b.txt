(* Binary search tree data structure implementation in OCAML *)

(* Definition of the tree datatype *)
type 'a tree =
    | Empty
    | Node of 'a * 'a tree * 'a tree

(* Function to insert a value into the tree *)
let rec insert (x: 'a) (t: 'a tree) : 'a tree =
  match t with
  | Empty ->
      Node (x, Empty, Empty)
  | Node (y, left, right) ->
      if x < y then
        Node (y, insert x left, right)
      else if x > y then
        Node (y, left, insert x right)
      else
        t

(* Function to search for a value in the tree *)
let rec search (x: 'a) (t: 'a tree) : bool =
  match t with
  | Empty -> false
  | Node (y, left, right) ->
      if x = y then true
      else if x < y then search x left
      else search x right

(* Function to remove a value from the tree *)
let rec remove (x: 'a) (t: 'a tree) : 'a tree =
  match t with
  | Empty -> Empty
  | Node (y, left, right) ->
      if x = y then
        match (left, right) with
        | (Empty, Empty) -> Empty
        | (Node (z, Empty, Empty), Empty) -> Node (z, Empty, Empty)
        | (Empty, Node (w, Empty, Empty)) -> Node (w, Empty, Empty)
        | _ ->
            let min = find_min right in
            let new_right = remove min right in
            Node (min, left, new_right)
      else if x < y then
        Node (y, remove x left, right)
      else
        Node (y, left, remove x right)

(* Function to find the minimum value in the tree *)
let rec find_min (t: 'a tree) : 'a =
  match t with
  | Empty -> failwith "Empty tree has no minimum value"
  | Node (x, Empty, _) -> x
  | Node (_, left, _) -> find_min left

(* Function to find the maximum value in the tree *)
let rec find_max (t: 'a tree) : 'a =
  match t with
  | Empty -> failwith "Empty tree has no maximum value"
  | Node (x, _, Empty) -> x
  | Node (_, _, right) -> find_max right

(* Function to check if a tree is empty *)
let is_empty (t: 'a tree) : bool =
  match t with
  | Empty -> true
  | _ -> false

(* Function to traverse the tree in order and return a list of values *)
let rec inorder (t: 'a tree): 'a list =
  match t with
  | Empty -> []
  | Node (x, left, right) -> inorder left @ [x] @ inorder right

(* Function to traverse the tree in preorder and return a list of values *)
let rec preorder (t: 'a tree): 'a list =
  match t with
  | Empty -> []
  | Node (x, left, right) -> [x] @ preorder left @ preorder right

(* Function to traverse the tree in postorder and return a list of values *)
let rec postorder (t: 'a tree): 'a list =
  match t with
  | Empty -> []
  | Node (x, left, right) -> postorder left @ postorder right @ [x]

(* Function to create a tree from a list of values *)
let rec create_tree (l: 'a list) : 'a tree =
  match l with
  | [] -> Empty
  | head :: tail -> insert head (create_tree tail)

(* Sample tree with values *)
let tree = create_tree [5; 1; 9; 10; 3; 7; 2]

(* Output of inorder traversal *)
let inorder_tree = inorder tree  (* [1; 2; 3; 5; 7; 9; 10] *)

(* Output of preorder traversal *)
let preorder_tree = preorder tree (* [5; 1; 3; 2; 9; 7; 10] *)

(* Output of postorder traversal *)
let postorder_tree = postorder tree (* [2; 3; 1; 7; 10; 9; 5] *)