(** Recursive function for finding the factorial of a given number *)
let rec factorial n =
  if n=0 then 1 else n * factorial (n-1)

(* Function to calculate the sum of a list of numbers *)
let rec sum_list lst =
  match lst with
  | [] -> 0
  | h::t -> h + sum_list t

(* Type definition for a binary tree *)
type 'a tree =
  | Empty
  | Node of 'a * 'a tree * 'a tree

(* Function to determine if a given binary tree is a binary search tree *)
let rec is_bst t =
  match t with
  | Empty -> true
  | Node (x, Empty, Empty) -> true
  | Node (x, Empty, Node (y, _, _))
  | Node (x, Node (y, _, _), Empty) ->
    if x < y then
      is_bst (Node(y, Empty, Empty))
    else false
  | Node (x, Node (y, _, _), Node (z, _, _)) ->
    if x < y && x > z then
      is_bst (Node (y, Empty, Empty))
      && is_bst (Node (z, Empty, Empty))
    else false