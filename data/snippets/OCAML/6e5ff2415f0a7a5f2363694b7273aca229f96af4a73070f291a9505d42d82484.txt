(* 
* This is a function that finds the maximum element in a given list 
* @param lst the list to be searched 
* @return the maximum element in the list 
*)
let rec maximum lst = 
  match lst with 
  | [] -> failwith "Empty list" (* raise exception if list is empty *) 
  | [x] -> x (* return the single element in the list *) 
  | x :: xs -> max x (maximum xs) (* compare first element to maximum of remaining list and return the larger one *) 

(* 
* This is a function that finds the minimum element in a given list 
* @param lst the list to be searched 
* @return the minimum element in the list 
*)
let rec minimum lst = 
  match lst with 
  | [] -> failwith "Empty list" (* raise exception if list is empty *) 
  | [x] -> x (* return the single element in the list *) 
  | x :: xs -> min x (minimum xs) (* compare first element to minimum of remaining list and return the smaller one *) 

(* 
* This is a function that sorts a given list in ascending order using the selection sort algorithm 
* @param lst the list to be sorted 
* @return sorted list in ascending order 
*)
let rec selection_sort lst = 
  match lst with 
  | [] -> [] (* return empty list if given list is empty *) 
  | [x] -> [x] (* return list with single element as it is already sorted *) 
  | lst -> let min = minimum lst in (* find minimum element in given list *) 
           let rest = List.filter (fun y -> y != min) lst in (* remove minimum element from list *) 
           min :: (selection_sort rest) (* append minimum element to sorted list and recursively sort rest of list *) 

(* 
* This is a function that calculates the factorial of a given number 
* @param n the number to calculate the factorial of 
* @return the factorial of n 
*)
let rec factorial n = 
  match n with 
  | 0 -> 1 (* factorial of 0 is 1 *) 
  | n when n < 0 -> failwith "Negative number" (* raise exception if number is negative *) 
  | n -> n * factorial (n - 1) (* recursively calculate factorial of n by multiplying it with factorial of n-1 *) 
  
(* Example usage of the above functions *)
let example_lst = [9; 5; 2; 7; 3; 1] (* create example list *)
let max_element = maximum example_lst (* find maximum element *)
let sorted_lst = selection_sort example_lst (* sort example list in ascending order *)
let factorial_of_5 = factorial 5 (* calculate factorial of 5 *)