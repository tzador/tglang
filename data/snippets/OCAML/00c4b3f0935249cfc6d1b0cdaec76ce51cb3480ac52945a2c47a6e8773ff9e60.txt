(*---- This is a function to calculate the nth Fibonacci number using memoization ----*)
let rec fib n =
  if n < 0 then 0
  else if n = 0 || n = 1 then n
  else
    let memo = Array.make (n + 1) (0) in
    let rec aux i =
      if i = 0 || i = 1 then i
      else
        let a = memo.(i - 1) in
        let b = memo.(i - 2) in
        if a = 0 then
          let a = fib (i - 1) in
          memo.(i - 1) <- a;
          if b = 0 then
            let b = fib (i - 2) in
            memo.(i - 2) <- b;
            memo.(i) <- a + b;
            memo.(i)
          else
            memo.(i) <- a + b;
            memo.(i)
        else if b = 0 then
          let b = fib (i - 2) in
          memo.(i - 2) <- b;
          memo.(i) <- a + b;
          memo.(i)
        else
          memo.(i) <- a + b;
          memo.(i)
    in
    aux n
(*- The first if statement checks for negative numbers, the second if statement checks for n = 0 or n = 1.
- The memo array is initialized to store previously calculated values.
- The recursive aux function calculates the nth Fibonacci number by accessing already calculated values in the memo array.
- If one of the previous values has not been calculated, it recursively calls the fib function to calculate it.
- Finally, the memo array is updated and the nth Fibonacci number is returned.
*)