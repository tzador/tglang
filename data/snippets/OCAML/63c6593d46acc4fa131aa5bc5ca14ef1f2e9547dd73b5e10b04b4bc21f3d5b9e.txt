(* This is a function that takes in an integer and returns the factorial of that number *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n-1)
  
(* This function uses pattern matching to determine if a number is even or odd *)
let even_or_odd number =
  match number mod 2 with
  | 0 -> "Even"
  | _ -> "Odd"
  
(* This is a recursive function that calculates the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 | 2 -> 1
  | n -> fibonacci(n-1) + fibonacci(n-2)
  
(* This function uses higher-order functions to calculate the sum of a list of numbers *)
let sum_list lst =
  List.fold_left (+) 0 lst
  
(* This is a polymorphic function that can work on lists of any type *)
let rec length lst =
  match lst with
  | [] -> 0
  | x::xs -> 1 + length xs
  
(* This function takes in a list of integers and returns a new list with only even numbers *)
let rec filter_even lst =
  match lst with
  | [] -> []
  | x::xs ->
      if x mod 2 <> 0 then filter_even xs
      else x :: filter_even xs