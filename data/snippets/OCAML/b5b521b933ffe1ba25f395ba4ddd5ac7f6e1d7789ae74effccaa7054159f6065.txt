(* This is a function that generates the power set of a given list *)
let rec powset lst =
  (* Define a helper function that will concatenate the subsets into the power set *)
  let rec concat_set set lst =
    match lst with
    | [] -> set
    | hd::tl ->
      (* Create a new set with the current element added to each subset in the set *)
      let new_set = List.map (fun subset -> hd::subset) set in
      concat_set (set @ new_set) tl
  in
  (* Base case: An empty list has one subset, the empty set *)
  match lst with
  | [] -> [[]]
  | hd::tl -> 
    (* Recursively generate the power set of the tail *)
    let tail_powset = powset tl in
    (* Merge the powerset of the tail with the powerset of the tail plus the current element *)
    let tail_plus_hd = List.map (fun subset -> hd::subset) tail_powset in
    (* Concatenate the two power sets *)
    concat_set tail_powset tail_plus_hd