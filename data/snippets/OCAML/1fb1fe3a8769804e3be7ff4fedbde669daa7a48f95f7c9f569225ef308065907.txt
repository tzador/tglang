open List (* imports List module for built-in list functions *)

type 'a tree = (* defining a polymorphic tree type with a generic value *)
  | Leaf of 'a (* leaf node with single value of type 'a *)
  | Node of 'a tree * 'a tree (* node with two child trees *)

let rec insert x tree = (* recursive function to insert a value into a tree *)
  match tree with (* pattern matching on the tree type *)
  | Leaf v when x = v -> Leaf v (* if the value equals the leaf value, return the leaf *)
  | Leaf _ -> Node (Leaf x, Leaf x) (* if the leaf value is different, create a new leaf node with the new value as the child *)
  | Node (left, right) ->
      if x <= tree_min left then (* if the value is less than or equal to the minimum value in the left subtree *)
        Node (insert x left, right) (* insert the value into the left subtree *)
      else (* if the value is greater than the minimum value in the left subtree *)
        Node (left, insert x right) (* insert the value into the right subtree *)

let rec delete x tree = (* recursive function to delete a value from a tree *)
  match tree with (* pattern matching on the tree type *)
  | Leaf v when x = v -> Leaf v (* if the value equals the leaf value, return the leaf *)
  | Leaf _ -> tree (* if the leaf value is different, return the tree unchanged *)
  | Node (left, right) as node ->
      if x = root node then (* if the value equals the root node value *)
        match left, right with (* pattern matching on the left and right subtree *)
        | Leaf _, _ -> right (* if the left subtree is a leaf, return the right subtree *)
        | _, Leaf _ -> left (* if the right subtree is a leaf, return the left subtree *)
        | _ -> Node (delete (tree_min right) right, delete (tree_min right) right) (* otherwise, replace the root with the minimum value on the right subtree *)
      else if x < root node then (* if the value is less than the root node value *)
        Node (delete x left, right) (* delete the value from the left subtree *)
      else (* if the value is greater than the root node value *)
        Node (left, delete x right) (* delete the value from the right subtree *)

let rec search x tree = (* recursive function to search for a value in a tree *)
  match tree with (* pattern matching on the tree type *)
  | Leaf v when x = v -> true (* if the value equals the leaf value, return true *)
  | Leaf _ -> false (* if the leaf value is different, return false *)
  | Node (left, right) ->
      if x = root tree || search x left || search x right then (* if the value equals the root node or is found in either subtree *)
        true (* return true *)
      else (* otherwise *)
        false (* return false *)

(* examples of tree operations *)

let t = Node (Node (Leaf 1, Leaf 2), Node (Leaf 3, Leaf 4)) (* creates a tree with 4 leaf nodes *)
let t1 = insert 5 t (* inserts value 5 into the tree t, creating a new node with 2 child leaves *)
let t2 = delete 3 t1 (* deletes value 3 from the tree t1, replacing it with a leaf node *)
let result = search 2 t2 (* searches for value 2 in the tree t2, which should return true since it is present *)