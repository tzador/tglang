(* This is a function that takes two integers and returns their sum *)
let add x y = 
  x + y

(* This is a recursive function that calculates the factorial of a number *)
let rec factorial n = 
  if n = 0 then 1 
  else n * factorial (n-1)

(* This is a higher-order function that takes a function as an argument *)
let apply_to_square f x = 
  let square = f x * f x in
  square

(* This is a function that takes in a list and returns a new list with only even numbers *)
let rec filter_even lst = 
  match lst with 
  | [] -> []
  | h::t -> if h mod 2 = 0 then h::filter_even t else filter_even t

(* This is a function that calculates the Fibonacci sequence using tail recursion *)
let fib n = 
  let rec fib_helper n current prev = 
    if n = 0 then prev
    else fib_helper (n-1) (current + prev) current
  in fib_helper n 1 0

(* This is a polymorphic function that takes in two values and returns a tuple *)
let make_tuple x y = 
  (x, y)

(* This is a function that uses pattern matching to calculate the area of different geometric shapes *)
let area shape = 
  match shape with
  | "square", n -> n * n
  | "rectangle", w, l -> w * l
  | "circle", r -> 3.14 * r * r
  | _ -> 0 (* default case for invalid shape *)

(* This is an example of a recursive data type representing a binary tree *)
type 'a binary_tree = 
  | Leaf
  | Node of 'a * 'a binary_tree * 'a binary_tree 

(* This is a function that traverses a binary tree using pattern matching and returns a list of the values *)
let rec traverse_tree tree = 
  match tree with
  | Leaf -> []
  | Node (value, left, right) -> value :: (traverse_tree left) @ (traverse_tree right)