(* A function that calculates the sum of all odd numbers within a given list *)
let odd_sum list = (* function declaration with parameter list *)

  let rec loop sum = function (* recursive helper function with parameters sum and list *)
    | [] -> sum (* base case: empty list, return sum *)
    | x::xs when x mod 2 = 1 -> loop (sum + x) xs (* if current element is odd, add it to sum and recurse on remaining list *)
    | _::xs -> loop sum xs (* if current element is even, skip it and recurse on remaining list *)

  in loop 0 list (* initial call to helper function with sum initialized to 0 and given list as argument *)