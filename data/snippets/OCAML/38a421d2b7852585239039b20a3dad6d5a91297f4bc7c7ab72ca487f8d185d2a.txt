let rec factorial n = (* recursive function to calculate factorial *)
  match n with (* pattern matching *)
  | 0 -> 1 (* base case, factorial of 0 is 1 *)
  | _ -> n * factorial (n-1) (* recursive case, calculate factorial of n-1 *)
  ;;

let rec fibonacci n = (* recursive function to calculate fibonacci sequence at nth term *)
  match n with (* pattern matching *)
  | 0 -> 0 (* base case, fibonacci at 0th term is 0 *)
  | 1 -> 1 (* base case, fibonacci at 1st term is 1 *)
  | _ -> fibonacci(n-1) + fibonacci(n-2) (* recursive case, calculate fibonacci at n-1 and n-2 term *)
  ;;

let string_to_int s = (* function to convert string to integer *)
  let n = ref 0 in (* create a mutable integer *)
  String.iter (fun c -> n := (!n * 10) + int_of_char c - int_of_char '0') s; (* loop through each character in the string and convert to integer *)
  !n (* return the converted integer *)
  ;;

let rec merge_sort lst = (* recursive function to implement merge sort algorithm *)
  let rec merge l1 l2 = (* helper function to merge two sorted lists *)
    match l1,l2 with
    | [], l -> l (* if first list is empty, second list is the merged list *)
    | l, [] -> l (* if second list is empty, first list is the merged list *)
    | h1::t1, h2::t2 -> (* recursive case, compare first elements of both lists and append to merged list *)
      if h1 < h2 then h1 :: merge t1 l2 
      else h2 :: merge l1 t2 
  in
  let rec split lst = (* helper function to split a list into two halves *)
    let rec split' lst (l1,l2) = (* helper function to split list into two halves using two accumulators *)
      match lst, l1, l2 with
      | [], _, _ -> (l1, l2) (* if list is empty, return the two halves *)
      | [x], _, _ -> (x::l1, l2) (* if only one element is left, add it to first half *)
      | h1::h2::t, _, _ -> split' t (h1::l1, h2::l2) (* add first element to first half and second element to second half *)
    in split' lst ([],[]) (* call helper function with two empty lists as accumulators *)
  in
  match lst with
  | [] -> [] (* if list is empty, return empty list *)
  | [_] -> lst (* if only one element is in list, list is already sorted *)
  | _ -> (* recursive case, split the list into two halves, recursively sort each half, and merge the sorted halves *)
    let l1,l2 = split lst in merge (merge_sort l1) (merge_sort l2)
  ;;