let rec filter = fun predicate list -> match list with
| [] -> []
| hd::tl -> if predicate hd then hd :: filter predicate tl else filter predicate tl
;;
(* This recursive function takes in a predicate function and a list as parameters *)
(* It then uses pattern matching to check if the list is empty *)
(* If it is empty, an empty list is returned *)
(* If it is not empty, the function applies the predicate function on the head of the list *)
(* If the predicate returns true, the head is added to the output list *)
(* If the predicate returns false, the head is not added to the output list *)
(* The function then calls itself on the tail of the list *)
(* The result of the recursive call is then added to the output list *)
(* This process continues until the entire list has been filtered *)
(* The final output is a list that contains only elements that satisfy the predicate function *)