(** Function that calculates the factorial of a given integer n **)
let rec factorial n = 
  if n = 0 then 1 (* base case: if n is 0, return 1 *)
  else n * (factorial (n - 1)) (* recursive case: return n multiplied by factorial of n-1 *)

(* Function that takes in a list of integers and calculates the sum of all elements *)
let rec sum_list lst = 
  match lst with
  | [] -> 0 (* base case: if list is empty, return 0 *)
  | hd::tl -> hd + (sum_list tl) (* recursive case: add first element of list to sum of remaining list *)

(* Function that takes in a string and reverses it using tail recursion *)
let reverse str = 
  let rec helper acc = function
    | [] -> acc (* base case: if string is empty, return accumulator *)
    | hd::tl -> helper (hd::acc) tl (* recursive case: append first character to accumulator and continue with remaining string *)
  in helper [] (List.init (String.length str) (String.get str))