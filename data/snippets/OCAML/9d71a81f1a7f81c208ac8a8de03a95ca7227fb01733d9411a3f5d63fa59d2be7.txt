(* Defining a function to find the maximum element in a list *)
let rec find_max list =
  match list with
  (* If list is empty, return 0 *)
  | [] -> 0
  (* If list has only one element, return that element *)
  | [x] -> x
  (* If first element is greater than maximum in rest of list, return first element *)
  | hd::tl when hd > find_max tl -> hd
  (* If first element is not greater than maximum in rest of list, return maximum in rest of list *)
  | _::tl -> find_max tl;;

(* Function to insert an element into a sorted list *)
let rec insert_sorted list element =
  match list with
  (* If list is empty, insert element and return it as a list *)
  | [] -> [element]
  (* If element is equal to or less than first element, insert it at first position *)
  | hd::tl when element <= hd -> element::list
  (* If element is greater than first element, insert it at correct position in rest of list *)
  | hd::tl -> hd :: insert_sorted tl element;;

(* Function to sort a list using insertion sort *)
let rec insertion_sort list = 
  match list with
  (* If list is empty or has only one element, return it as it is *)
  | [] | [_] -> list
  (* If list has more than one element, insert first element in correct position in sorted rest of list *)
  | hd::tl -> insert_sorted (insertion_sort tl) hd;;

(* Example usage and output *)
let list = [9; 2; 4; 7; 1; 6; 5; 8; 3];;
print_list "Unsorted list: " list;;
print_list "Sorted list: " (insertion_sort list);;

(* Output 
Unsorted list: [9; 2; 4; 7; 1; 6; 5; 8; 3]
Sorted list: [1; 2; 3; 4; 5; 6; 7; 8; 9]
*)