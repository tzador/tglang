(** `Bucket` is a functor that generates a module to store key-value pairs in a hash table. *)
module type Bucket = sig
  (** Type of keys stored in the bucket. *)
  type key
  (** Type of values stored in the bucket. *)
  type value

  (** `t` is an abstract type of a bucket. *)
  type t

  (** `create` creates a new empty bucket with the given size. *)
  val create : int -> t
  (** `add` inserts a key-value pair into the bucket. Returns [true] if the
      element was not present in the bucket, otherwise [false]. *)
  val add : t -> key -> value -> bool
  (** `remove` removes a key-value pair from the bucket. Returns [true] if the
      element was present in the bucket, otherwise [false]. *)
  val remove : t -> key -> bool
  (** `find` finds the value associated with the given key in the bucket, if it exists. *)
  val find : t -> key -> value option
  (** `iter` applies a function to each key-value pair in the bucket. *)
  val iter : (key -> value -> unit) -> t -> unit
  (** `size` returns the number of key-value pairs in the bucket. *)
  val size : t -> int
end

(** `HashedMap` is a module that stores key-value pairs in a hash table using the `Bucket` functor. *)
module HashedMap = functor (B : Bucket) -> struct
  (** `bucket` stores the bucket used to store key-value pairs. *)
  let bucket = B.create 10

  (** `search_bucket` finds the value associated with the given key in the bucket, if it exists. *)
  let search_bucket key = B.find bucket key

  (** `insert_in_bucket` inserts the given key-value pair into the bucket. Returns [true] if the
      element was not present in the bucket, otherwise [false]. *)
  let insert_in_bucket key value = B.add bucket key value

  (** `remove_from_bucket` removes the key-value pair with the given key from the bucket. Returns [true] if the
      element was present in the bucket, otherwise [false]. *)
  let remove_from_bucket key = B.remove bucket key

  (** `size` returns the number of key-value pairs in the bucket. *)
  let size = B.size bucket
end

(* Example usage: Make a map with strings as keys and ints as values. *)
module StringIntBucket = struct
  type key = string
  type value = int
  type t = (key * value) list list

  let create n = Array.make n []

  let rec find bucket key =
    match bucket with
    | [] -> None
    | (k, v) :: tl -> if k = key then Some v else find tl key

  let add bucket key value =
    match find bucket key with
    | Some _ -> false
    | None -> bucket.(HashedString.hash key mod (Array.length bucket)) <- (key, value) :: bucket.(HashedString.hash key mod (Array.length bucket)); true

  let remove bucket key =
    let index = HashedString.hash key mod (Array.length bucket) in
    let rec remove_helper bucket =
      match bucket with
      | [] -> false
      | (k, _) :: tl -> if k = key then true else remove_helper tl in
    let new_bucket = List.filter (fun (k, _) -> k <> key) bucket.(index) in
    bucket.(index) <- new_bucket;
    remove_helper new_bucket

  let iter f bucket =
    Array.iter (fun l -> List.iter (fun (k, v) -> f k v) l) bucket

  let size bucket = Array.fold_left (fun acc l -> acc + List.length l) 0 bucket
end

module StringIntMap = HashedMap(StringIntBucket)
let map = StringIntMap.insert_in_bucket "hello" 5