(* This function calculates the factorial of a given number. *)

let rec fact n = 
    if n <= 1 
    then 1 
    else n * fact (n-1);; 

(* This function calculates the power of a given number. *)

let rec power base exp = 
    if exp = 0 
    then 1 
    else base * power base (exp-1);; 

(* This function calculates the binomial coefficient of a given value. *)

let binomial n k = 
    if k > n || n < 0 || k < 0 
    then failwith "Invalid input: n must be >= k and both must be >= 0" 
    else (fact n) / ((fact k) * (fact (n-k)));; 

(* This function calculates the sum of the first n natural numbers. *)

let sum n = 
    if n < 1 
    then failwith "Invalid input: n must be >= 1" 
    else 
      let rec helper acc i = 
        if i = 0 
        then acc 
        else helper (acc+i) (i-1) 
      in 
      helper 0 n;; 

(* This function calculates the average of a list. *)

let average list = 
    let rec helper sum count = function 
      | [] -> sum / count 
      | h :: t -> helper (sum+h) (count+1) t 
    in 
    helper 0 0 list;; 

(* This function takes in a list and returns a new list with the squares of each element. *)

let square_list list = 
    let rec helper = function 
      | [] -> [] 
      | h :: t -> (h * h) :: helper t 
    in 
    helper list;; 

(* This function takes in two lists and merges them into a new list, alternating elements. *)

let rec merge_list list1 list2 = 
    match list1, list2 with 
    | [], l2 -> l2 
    | l1, [] -> l1 
    | h1 :: t1, h2 :: t2 -> h1 :: h2 :: merge_list t1 t2;; 

(* This function takes in a list and returns a new list with only even numbers. *)

let rec filter_even list = 
    match list with 
    | [] -> [] 
    | h :: t -> if h mod 2 = 0 
                then h :: filter_even t 
                else filter_even t;; 

(* This function takes in a list and returns a new list with only elements that satisfy the given condition. *)

let rec filter func list = 
    match list with 
    | [] -> [] 
    | h :: t -> if func h 
                then h :: filter func t 
                else filter func t;;