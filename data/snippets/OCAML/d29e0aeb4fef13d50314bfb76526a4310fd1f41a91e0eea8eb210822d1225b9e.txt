(** [min_heapify heap index] fixes the heap property in the subtree with root [index].

    Requires:
      - [heap] is a mutable array representing a min-heap
      - [index] is the index of the root of the subtree

    Effects:
      - Modifies [heap] to satisfy the heap property
      - May modify any element in the subtree with root [index] *)
let rec min_heapify heap index =
  let left_child = 2 * index + 1 in
  let right_child = 2 * index + 2 in
  let smallest = ref index in
  if left_child < Array.length heap && heap.(left_child) < heap.(!smallest) then
    smallest := left_child;
  if right_child < Array.length heap && heap.(right_child) < heap.(!smallest) then
    smallest := right_child;
  if !smallest != index then begin
    let temp = heap.(index) in
    heap.(index) <- heap.(!smallest);
    heap.(!smallest) <- temp;
    min_heapify heap !smallest
  end

(** [build_min_heap heap] builds a min-heap from an unsorted array [heap].

    Requires:
      - [heap] is a mutable array

    Effects:
      - Modifies [heap] to satisfy the min-heap property *)
let build_min_heap heap =
  for i = (Array.length heap / 2) - 1 downto 0 do
    min_heapify heap i
  done