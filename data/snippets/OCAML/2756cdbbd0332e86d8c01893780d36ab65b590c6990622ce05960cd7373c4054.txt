(** This is a type representing a binary tree that holds integers *)
type binary_tree =
| Empty
| Node of int * binary_tree * binary_tree

(** Function to insert a new integer into the binary tree, maintaining sorted order *)
let rec insert (n : int) (tree : binary_tree) : binary_tree =
  match tree with
  | Empty -> Node (n, Empty, Empty)
  | Node (data, left, right) ->
    if n < data then
      Node (data, insert n left, right)
    else if n > data then
      Node (data, left, insert n right)
    else
      tree

(** Function to remove an integer from the binary tree, maintaining sorted order *)
let rec remove (n : int) (tree : binary_tree) : binary_tree =
  match tree with
  | Empty -> Empty
  | Node (data, left, right) ->
    if n < data then
      Node (data, remove n left, right)
    else if n > data then
      Node (data, left, remove n right)
    else
      match (left, right) with
      | (Empty, Empty) -> Empty
      | (Node (_, Empty, _), _) -> left
      | (_, Node (_, Empty, _)) -> right
      | (Node (_, _, _), _) ->
        let successor = find_min right in
        let new_right = remove successor right in
        Node (successor, left, new_right)
  
(** Function to find the minimum integer from a binary tree *)
let rec find_min (tree : binary_tree) : int =
  match tree with
  | Empty -> failwith "Tree is empty"
  | Node (data, Empty, _) -> data
  | Node (_, left, _) -> find_min left

(** Example: creating a binary tree with nodes [8, 4, 10, 2, 7] and removing 4 *)
let tree =
  let initial_tree = Empty in
  let tree = insert 8 initial_tree in
  let tree = insert 4 tree in
  let tree = insert 10 tree in
  let tree = insert 2 tree in
  let tree = insert 7 tree in
  remove 4 tree

(** The resulting tree should now have nodes [8, 2, 7, 10] in sorted order *)
(* tree = Node (8, Node (2, Empty, Node (7, Empty, Empty)), Node (10, Empty, Empty)) *)