(* This code snippet performs the Quicksort algorithm in OCaml *)

(* Helper function to partition the list *)
let rec partition pivot = function
    | [] -> [], []
    | x :: xs ->
        let lhs, rhs = partition pivot xs in
            if x <= pivot then (x :: lhs), rhs
            else lhs, (x :: rhs)

(* Quicksort function using partition *)
let rec quicksort = function
    | [] -> []
    | pivot :: xs ->
        let lhs, rhs = partition pivot xs in
            (quicksort lhs) @ [pivot] @ (quicksort rhs)

(* Test list *)
let lst = [9; 2; 5; 1; 7; 3]

(* Output of sorted list *)
let sorted = quicksort lst (* [1; 2; 3; 5; 7; 9] *)

(* Print the sorted list *)
print_endline ("Sorted list: " ^ (String.concat ", " (List.map string_of_int sorted)))
// Output: Sorted list: 1, 2, 3, 5, 7, 9