(* Define a function that takes in two integers and returns the sum of their squares *)
let sum_of_squares (x: int) (y: int): int =
  let square a = a * a in (* Define a helper function to calculate the square of a number *)
  square x + square y (* Calculate the sum of squares using the helper function *)

(* Define a record type to represent a person with a name and age property *)
type person = {
  name: string;
  age: int
}

(* Define a list of persons *)
let people = [
  {name = "John"; age = 30};
  {name = "Mary"; age = 25};
  {name = "Mark"; age = 40}
]

(* Define a function that takes in a list of persons and returns a list of their names *)
let get_names (lst: person list): string list =
  let rec helper acc = function (* Define a recursive helper function to traverse the list *)
    | [] -> acc (* Base case: return the accumulator when the list is empty *)
    | {name; age}::tl -> helper (acc@[name]) tl (* Add the name to the accumulator and recursively call with the tail of the list *)
  in helper [] lst (* Call the helper function with an empty accumulator and the list of persons *)

(* Call the functions and print the result *)
let names = get_names people in (* Call the get_names function with the list of persons *)
let sum = sum_of_squares 3 4 in (* Call the sum_of_squares function with input integers 3 and 4 *)
print_endline ("Names: " ^ String.concat ", " names);; (* Print the names separated by commas *)
print_endline ("Sum of squares: " ^ string_of_int sum);; (* Convert the sum to a string and print it *)