let rec merge_sort (lst : int list) : int list =
  match lst with
  | [] -> [] (* base case, empty list *)
  | [x] -> [x] (* base case, singleton list *)
  | xs ->
      let (left, right) = split xs in (* split list into two parts *)
      merge (merge_sort left) (merge_sort right) (* recursively call merge_sort on both parts and merge results *)


and merge (lst1 : int list) (lst2 : int list) : int list =
  match (lst1, lst2) with
  | ([], ys) -> ys (* if lst1 is empty, return lst2 *)
  | (xs, []) -> xs (* if lst2 is empty, return lst1 *)
  | (x :: xs, y :: ys) ->
      if x <= y then (* compare first elements of each list *)
        x :: (merge xs lst2) (* if x is smaller, include it and recursively merge remaining lists *)
      else
        y :: (merge lst1 ys) (* otherwise, include y and recursively merge remaining lists *)


let rec split (lst : int list) : int list * int list =
  match lst with
  | [] -> ([], [])
  | [x] -> ([x], [])
  | x :: y :: xs ->
      let (lst1, lst2) = split xs in (* use recursion to split list into halves *)
      (x :: lst1, y :: lst2)