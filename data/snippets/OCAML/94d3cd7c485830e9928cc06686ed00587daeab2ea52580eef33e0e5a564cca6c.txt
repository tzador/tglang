(** [search_tree t x] is a helper function that searches for element [x] in binary search tree [t]. *)
let rec search_tree t x = 
    match t with
    | Empty -> false
    | Node (left, value, right) -> 
        if x = value then true
        else if x < value then search_tree left x
        else search_tree right x
        
(** [insert t x] is a helper function that inserts element [x] into binary search tree [t]. *)
let rec insert t x = 
    match t with
    | Empty -> Node (Empty, x, Empty)
    | Node (left, value, right) -> 
        if x < value then Node (insert left x, value, right)
        else if x > value then Node (left, value, insert right x)
        else t (* element already exists in tree *)
        
(** [remove_max t] is a helper function that removes the maximum value from binary search tree [t]. *)
let rec remove_max t = 
    match t with
    | Empty -> failwith "Can't remove max from empty tree"
    | Node (left, value, Empty) -> (left, value)
    | Node (left, value, right) -> 
        let new_right, max = remove_max right in
        (Node (left, value, new_right), max)

(** [remove t x] is a helper function that removes element [x] from binary search tree [t]. *)
let rec remove t x = 
    match t with
    | Empty -> t (* element does not exist in tree *)
    | Node (left, value, right) -> 
        if x < value then Node (remove left x, value, right)
        else if x > value then Node (left, value, remove right x)
        else match left, right with
            | Empty, _ -> right
            | _, Empty -> left
            | _, _ ->
                let new_left, max = remove_max left in
                Node (new_left, max, right)