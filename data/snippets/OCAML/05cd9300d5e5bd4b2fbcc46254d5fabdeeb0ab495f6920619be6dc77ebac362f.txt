(* This is a function that takes in a list of integers and returns the sum of the list *)
let rec sum_list lst =
    match lst with
    | [] -> 0 (*base case: if the list is empty, return 0 *)
    | h :: t -> h + sum_list t (*recursive case: add the first element with the sum of the rest of the list*)
    
(* This is a function that takes in a string and returns the length of the string *)
let rec string_length str =
    match str with
    | "" -> 0 (*base case: if the string is empty, return 0 *)
    | h :: t -> 1 + string_length t (*recursive case: add 1 to the string length of the rest of the string*)
    
(* This is a function that uses pattern matching to check if a list is empty *)
let is_empty lst =
    match lst with
    | [] -> true (*if the list is empty, return true*)
    | _ -> false (*otherwise, return false*)
    
(* This is a function that uses recursion to calculate the factorial of a given number *)
let rec factorial n =
    match n with
    | 0 -> 1 (*base case: if n equals 0, return 1*)
    | _ -> n * factorial (n-1) (*recursive case: multiply n with the factorial of n-1*) 

(* This is a function that takes in a list of booleans and returns true if all the values are true *)
let rec all_true lst =
    match lst with
    | [] -> true (*base case: if the list is empty, return true*)
    | h :: t -> h && all_true t (*recursive case: check if the first element is true and recursively check the rest of the list*)