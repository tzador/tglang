(* This is a function that takes in a list of integers and returns the sum of all the even numbers in the list *)

let rec even_sum (lst: int list): int =
  match lst with
  | [] -> 0 (* Base case: If the list is empty, return 0 *)
  | x :: xs -> if x mod 2 = 0 then x + even_sum xs (* If the head of the list is even, add it to the sum of the rest of the list *)
                else even_sum xs (* If the head is odd, just recursively call the function on the rest of the list *)