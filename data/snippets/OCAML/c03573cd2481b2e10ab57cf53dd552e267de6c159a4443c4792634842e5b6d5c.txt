(* This is a function that calculates the nth term in the Fibonacci sequence
* using recursive calls
* Args:
*     n: integer representing the term to be calculated
* Returns:
*     An integer representing the nth term in the Fibonacci sequence
*)

let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* This is a helper function that calculates the factorial of a number
* using tail recursion
* Args:
*     n: integer representing the number to calculate factorial
*     acc: default accumulator value of 1
* Returns:
*     An integer representing the factorial of the input number
*)

let rec factorial n acc =
    match n with
    | 0 | 1 -> acc
    | _ -> factorial (n - 1) (acc * n)

(* This is a higher-order function that applies a given function to a list
* and returns the list with the function applied to each element
* Args:
*     f: function to be applied
*     lst: list to be transformed
* Returns:
*     A list with the function applied to each element of the input list
*)

let rec map f lst =
    match lst with
    | [] -> []
    | x :: xs -> (f x) :: (map f xs)

let fibonacci_values = [0; 1; 1; 2; 3; 5; 8]
let factorial_values = [1; 2; 6; 24; 120; 720]

(* Applying the fibonacci function to the fibonacci_values list *)
let fibonacci_results = map fibonacci fibonacci_values
(* Applying the factorial function to the factorial_values list *)
let factorial_results = map (fun x -> factorial x 1) factorial_values

(* Output:
    fibonacci_results = [0; 1; 1; 2; 3; 5; 8]
    factorial_results = [1; 2; 6; 24; 120; 720] 
*)