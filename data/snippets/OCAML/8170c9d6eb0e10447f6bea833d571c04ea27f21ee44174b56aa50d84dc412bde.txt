(* define a polymorphic type for a binary tree *)
type 'a binary_tree = 
  | Empty (* an empty binary tree *)
  | Node of 'a * 'a binary_tree * 'a binary_tree (* a node with data and two child trees *)
  
(* function to insert an element into the binary tree *)
let rec insert (value: 'a) (tree: 'a binary_tree) = 
  match tree with 
    | Empty -> Node (value, Empty, Empty) (* if tree is empty, create a new node with value *)
    | Node (data, left, right) -> 
        if value < data then Node (data, insert value left, right) (* traverse left subtree if value is less than current node's data *)
        else if value > data then Node (data, left, insert value right) (* traverse right subtree if value is greater than current node's data *)
        else tree (* if value is equal to current node's data, return the tree *)

(* function to check if an element exists in the binary tree *)
let rec exists (value: 'a) (tree: 'a binary_tree) = 
  match tree with 
    | Empty -> false (* element does not exist if tree is empty *)
    | Node (data, left, right) -> 
        if value < data then exists value left (* traverse left subtree if value is less than current node's data *)
        else if value > data then exists value right (* traverse right subtree if value is greater than current node's data *)
        else true (* element exists if value is equal to current node's data *)

(*** usage example ***)
let tree_example = Node (5, Node (2, Node (1, Empty, Empty), Node (3, Empty, Empty)), Node(8, Empty, Empty));; (* create a binary tree with some elements *)

let tree_inserted = insert 6 tree_example;; (* insert value 6 into the tree *)

exists 3 tree_inserted;; (* check if value 3 exists in the tree, returns true *)