(* This is a custom data type representing a binary tree *)
type binary_tree = 
    | Leaf of int list
    | Node of binary_tree * binary_tree

(* A recursive function to search for a given element in a binary tree *)
let rec search_binary_tree (tree: binary_tree) (element: int) : bool = 
    match tree with
    | Leaf l -> List.mem element l     (* Check if element is in the leaf node *)
    | Node (left, right) ->             (* Check both branches recursively *)
        search_binary_tree left element
        || search_binary_tree right element

(* Example usage *)
let tree = Node (Leaf [1;2;3], Node (Leaf [4;5;6], Leaf [7;8;9]))
let found = search_binary_tree tree 5  (* Returns true since 5 is in the tree *)
let not_found = search_binary_tree tree 10  (* Returns false since 10 is not in the tree *)