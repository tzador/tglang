(*The following code constructs a binary tree data structure*)
type 'a binary_tree =
  | Empty
  | Node of 'a * 'a binary_tree * 'a binary_tree

(*Function to find the maximum element in a binary tree*)
let rec find_max (tree : int binary_tree) : int =
  match tree with
  | Empty -> failwith "Binary tree is empty"
  | Node (v, Empty, Empty) -> v
  | Node (v, left, right) ->
      let max_left = find_max left in
      let max_right = find_max right in
      max v (max max_left max_right)

(*Function to insert element into a binary tree*)
let rec insert (tree : int binary_tree) (x : int) : int binary_tree =
  match tree with
  | Empty -> Node (x, Empty, Empty)
  | Node (v, left, right) when x < v -> Node (v, insert left x, right)
  | Node (v, left, right) when x > v -> Node (v, left, insert right x)
  | Node (v, left, right) -> tree

(*Function to delete element from a binary tree*)
let rec delete (tree : int binary_tree) (x : int) : int binary_tree =
  match tree with
  | Empty -> failwith "Element not found in binary tree"
  | Node (v, left, right) when x < v -> Node (v, delete left x, right)
  | Node (v, left, right) when x > v -> Node (v, left, delete right x)
  | Node (v, Empty, right) -> right
  | Node (v, left, Empty) -> left
  | Node (v, left, right) ->
      let max_left = find_max left in
      Node (max_left, delete left max_left, right)