(* This is an example of a higher order function in OCAML *)

(* Define a function that takes in a list of integers and a function *)
let rec list_map f l =
  match l with
  | [] -> []
  | x :: xs -> f x :: list_map f xs
  (* The function will apply the given function to each element of the list 
  and return a new list with the modified values *)

(* Define a function that doubles each element of the list *)
let double x = x * 2

(* Create a list of integers to test the function *)
let numbers = [1; 2; 3; 4; 5]

(* Use the list_map function to apply the double function to the numbers list *)
let doubled_numbers = list_map double numbers

(* The new list will have each element of numbers doubled *)
(* Output: [2; 4; 6; 8; 10] *)