(* This code snippet implements a function that iterates through a list and returns the product of all the elements in the list. *)

let rec list_product (lst : int list) : int =
  match lst with
  | [] -> 1 (* base case: return 1 since it is the identity for multiplication *)
  | hd :: tl -> hd * list_product tl (* recursive case: multiply the head element with the product of the remaining list *)

(* Example usage *)
let product = list_product [1; 2; 3; 4; 5]
(* Output: product = 120 *)