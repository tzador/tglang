(* function to check if a given number is prime using recursion *)
let rec is_prime n = 
  if n <= 1 then false (* 1 is not a prime number *)
  else if n <= 3 then true (* 2 and 3 are prime numbers *)
  else if n mod 2 = 0 || n mod 3 = 0 then false (* any number divisible by 2 or 3 is not prime *)
  else
    let rec check_divisors x = 
      if x * x > n then true (* if all possible divisors have been checked, return true *)
      else n mod x = 0 || n mod (x+2) = 0 || check_divisors (x+6) (* check for divisors in increments of 6 *)
    in check_divisors 5 (* start checking at 5 since we have already checked 2 and 3 *)