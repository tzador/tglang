(** * Define the data types *)
type expr =
  | Var of string
  | Int of int
  | Plus of expr * expr
  | Minus of expr * expr
  | Times of expr * expr
  | Divide of expr * expr

(** * Define the eval function *)
let rec eval = function
  | Var x -> failwith ("Variable " ^ x ^ " is unbound")
  | Int n -> n
  | Plus (e1, e2) -> eval e1 + eval e2
  | Minus (e1, e2) -> eval e1 - eval e2
  | Times (e1, e2) -> eval e1 * eval e2
  | Divide (e1, e2) ->
      let v1 = eval e1 in
      let v2 = eval e2 in
      if v2 = 0 then failwith "Division by zero"
      else v1 / v2

(** * Define the pretty printer *)
let rec pp_expr = function
  | Var x -> x
  | Int n -> string_of_int n
  | Plus (e1, e2) -> "(" ^ pp_expr e1 ^ " + " ^ pp_expr e2 ^ ")"
  | Minus (e1, e2) -> "(" ^ pp_expr e1 ^ " - " ^ pp_expr e2 ^ ")"
  | Times (e1, e2) -> "(" ^ pp_expr e1 ^ " * " ^ pp_expr e2 ^ ")"
  | Divide (e1, e2) -> "(" ^ pp_expr e1 ^ " / " ^ pp_expr e2 ^ ")"

(** * Example usage *)
let exp = Plus (Var "x", Times (Int 2, Minus (Int 3, Int 1)))
let result = eval exp
let print_result = pp_expr exp ^ " = " ^ string_of_int result