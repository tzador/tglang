(* A function that takes in a list of integers and returns a list of their squares *)
let square_list (lst: int list): int list = 
    let rec helper (l: int list) (acc: int list): int list = 
        match l with
        | [] -> acc
        | x :: xs -> helper xs (acc @ [(x * x)])
    in helper lst []

(* A function that takes in a list of strings and returns a list of their lengths *)
let string_length (lst: string list): int list = 
    let rec helper (l: string list) (acc: int list): int list = 
        match l with
        | [] -> acc
        | x :: xs -> helper xs (acc @ [String.length x])
    in helper lst []
    
(* A function that combines two lists into a new list by alternating elements *)
let rec interleave (lst1: 'a list) (lst2: 'a list): 'a list = 
    match (lst1, lst2) with 
    | ([], l2) -> l2
    | (l1, []) -> l1
    | (x :: xs, y :: ys) -> x :: y :: interleave xs ys 

(* An example using the above functions *)
let lst_int = [1; 2; 3; 4]
let lst_string = ["Hello"; "World"; "!"]

(* square_list output: [1; 4; 9; 16] *)
let squares = square_list lst_int

(* string_length output: [5; 5; 1] *)
let lengths = string_length lst_string

(* interleave output: [1; "Hello"; 2; "World"; 3; "!"; 4] *)
let combined_list = interleave lst_int lst_string