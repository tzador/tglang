(*This code snippet demonstrates how to implement the merge sort algorithm in OCaml.

let rec merge_sort lst =
   let rec merge lst1 lst2 =
     match (lst1, lst2) with
     | ([], lst2) -> lst2
     | (lst1, []) -> lst1
     | (x::xs, y::ys) ->
          if x < y then x :: (merge xs lst2)
          else y :: (merge lst1 ys)
   in
   match lst with
   | [] -> []
   | [x] -> [x]
   | _ ->
        let (left, right) = split_list lst in
        merge (merge_sort left) (merge_sort right);;
        
(*This function splits a list into two sublists.*)
let rec split_list lst =
   let rec aux lst left right =
      match lst with
      | [] -> (left, right)
      | x::xs -> aux xs (x::right) left
   in
   aux lst [] [];;

(*Example usage*)
let unsorted_lst = [6;3;8;1;5;2;4;7];; 
let sorted_lst = merge_sort unsorted_lst;;
print_endline "Unsorted list:";;
print_ints unsorted_lst;;
print_endline "Sorted list:";;
print_ints sorted_lst;;

(*Helper function to print a list of integers*)
let rec print_ints lst =
   match lst with
   | [] -> ()
   | x::xs -> 
         print_int x;
         print_string " ";
         print_ints xs;;