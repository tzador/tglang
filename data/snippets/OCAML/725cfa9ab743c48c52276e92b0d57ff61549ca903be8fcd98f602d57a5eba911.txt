(* This is an example of a higher order function that takes in a function and a list and applies the function to every element in the list *)
let map f lst =
  let rec apply_func lst acc = match lst with
    | [] -> List.rev acc
    | hd::tl -> apply_func tl ((f hd)::acc)
  in apply_func lst []

(* This is an example of a curried function that takes in two arguments and returns the sum of the two numbers *)
let add x y = x + y

(* This is an example of a higher order function that takes in two functions and returns a composed function *)
let compose f g =
  let new_function x = f (g x)
  in new_function