(** Function to calculate the factorial of a number
 *  @param n the number to calculate the factorial for
 *  @return the factorial of n
 *)
let rec factorial n =  
    if n = 0 then 1
    else n * factorial (n-1)  (* Function call to itself recursively *)
    
(** Function to calculate the nth Fibonacci number
 *  @param n the position of the number in the Fibonacci sequence
 *  @return the nth Fibonacci number
 *)
let rec fibonacci n =
    if n < 2 then n
    else fibonacci (n-1) + fibonacci (n-2)  (* Function call to itself recursively *)
    
(** Function to reverse a list
 *  @param lst the list to be reversed
 *  @return the reversed list
 *)
let rec reverse lst =
    match lst with
    | [] -> []
    | h::t -> reverse t @ [h]  (* Function call to itself recursively *)
    
(** Function to merge two sorted lists
 *  @param lst1 the first sorted list
 *  @param lst2 the second sorted list
 *  @return the merged sorted list
 *)
let rec merge lst1 lst2 =
    match lst1, lst2 with
    | [], lst2 -> lst2
    | lst1, [] -> lst1
    | h1::t1, h2::t2 ->
        if h1 < h2 then h1 :: merge t1 lst2  (* Function call to itself recursively *)
        else h2 :: merge lst1 t2  (* Function call to itself recursively *)
    
(** Function to sort a list using the merge sort algorithm
 *  @param lst the list to be sorted
 *  @return the sorted list
 *)
let rec merge_sort lst =
    match lst with
    | [] -> []
    | [x] -> [x]
    | _ ->
        let split = List.length lst / 2 in
        let left = List.sub lst 0 split in  (* Creating a sublist from index 0 to split *)
        let right = List.sub lst split (List.length lst - split) in  (* Creating a sublist from index split to end *)
        merge (merge_sort left) (merge_sort right)  (* Function call to itself recursively with sublists *)
        
(** Main function to test the previously defined functions *)
let () =
    let num = 10 in
    let fact = factorial num in
    let fib = fibonacci num in
    let list = [5; 2; 8; 3; 9; 1; 6; 4; 7] in
    let sorted_list = merge_sort list in
    print_endline ("Factorial of " ^ string_of_int num ^ " is " ^ string_of_int fact ^ ".");    
    print_endline ("Fibonacci number at position " ^ string_of_int num ^ " is " ^ string_of_int fib ^ ".");    
    print_endline ("Original list: " ^ string_of_list list);    
    print_endline ("Sorted list: " ^ string_of_list sorted_list);;

(* Function to convert a list to a string *)
let rec string_of_list lst =
    match lst with
    | [] -> ""
    | [x] -> string_of_int x
    | h::t -> string_of_int h ^ "; " ^ string_of_list t