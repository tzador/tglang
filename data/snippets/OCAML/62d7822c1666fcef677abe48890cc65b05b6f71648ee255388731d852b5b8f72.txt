(* Define a recursive function to calculate the sum of a list of integers *)
let rec sum_list l =
  match l with
  | [] -> 0 (* Empty list has a sum of 0 *)
  | x :: xs -> x + sum_list xs (* Add head of list to sum of remaining list *)

(* Define a function to create a list of numbers from 1 to n *)
let rec create_list n =
  match n with
  | 0 -> [] (* Base case, empty list *)
  | n -> n :: create_list (n - 1) (* Add n to list and decrement n *)

(* Define a function to calculate the factorial of a number *)
let rec factorial n =
  match n with
  | 0 | 1 -> 1 (* Factorial of 0 and 1 is 1 *)
  | n -> n * factorial (n - 1) (* Multiply n by factorial of n-1 *)

(* Define a function to calculate the nth Fibonacci number *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* First Fibonacci number is 0 *)
  | 1 -> 1 (* Second Fibonacci number is 1 *)
  | n -> fibonacci (n - 1) + fibonacci (n - 2) (* Add previous two numbers *)

(* Define a function to check if a number is prime *)
let is_prime n =
  let rec is_divisible d n =
    if d * d > n then false (* Number is not divisible if d squared is greater than n *)
    else if n mod d = 0 then true (* Number is divisible if remainder is 0 *)
    else is_divisible (d + 1) n (* Increment d and check again *)
  in
  if n <= 1 then false (* Numbers less than or equal to 1 are not prime *)
  else not (is_divisible 2 n) (* Check if number is divisible by any number from 2 to n-1 *)

(* Define a function to reverse a list *)
let rec reverse_list l =
  match l with
  | [] -> [] (* Empty list has no reverse *)
  | x :: xs -> reverse_list xs @ [x] (* Add head of list to end of reversed remaining list *)