(* This function takes in a list of integers and returns the sum of all the elements in the list *)
let rec sum_list l =
  match l with
  | [] -> 0 (* base case: empty list *)
  | h::t -> h + sum_list t (* recursive call: add head of list to sum of tail of list *)

(* This function takes in a list of strings and returns a new list with the first letter of each string capitalized *)
let rec capitalize_first lst =
  match lst with
  | [] -> [] (* base case: empty list *)
  | h::t -> String.capitalize_ascii h :: capitalize_first t (* recursive call: capitalize first letter of head of list and append to new list *)

(* This function uses a helper function to calculate the factorial of a given number *)
let rec factorial n =
  if n < 0 then invalid_arg "n must be a non-negative number" (* edge case: invalid input *)
  else if n = 0 then 1 (* base case: factorial of 0 is 1 *)
  else n * factorial (n - 1) (* recursive call: multiply n with factorial of n-1 *)

(* This is a main function that uses the sum_list and capitalize_first functions to manipulate a list and return a string *)
let main () =
  let lst = [1; 2; 3; 4; 5] in (* create a list of integers *)
  let sum = sum_list lst in (* sum all elements in the list *)
  let lst2 = ["hello"; "world"; "this"; "is"; "ocaml"] in (* create a list of strings *)
  let capital_lst = capitalize_first lst2 in (* capitalize first letter of each string in list *)
  let str = String.concat " " capital_lst in (* concatenate list of strings into one string *)
  str ^ " has a sum of " ^ string_of_int sum (* return concatenated string with sum *)

(* Call main function *)
let _ = main ()