(* Creates a binary search tree type *)
type bst = 
  | Leaf 
  | Node of bst * int * bst

(* Function to insert a value into the tree *)
let rec insert num tree =
  match tree with 
  | Leaf -> Node (Leaf, num, Leaf)
  | Node (left, value, right) -> 
    if num < value then 
      Node (insert num left, value, right)
    else 
      Node (left, value, insert num right)

(* Function to check if a value is in the tree *)
let rec isInTree num tree =
  match tree with
  | Leaf -> false
  | Node (left, value, right) -> 
    if num = value then
      true 
    else if num < value then
      isInTree num left
    else
      isInTree num right

(* Function to delete a value from the tree *)
let rec delete num tree =
  match tree with
  | Leaf -> Leaf
  | Node (left, value, right) ->
    if num = value then
      match (left, right) with
      | (Leaf, Leaf) -> Leaf
      | (Leaf, _) -> right
      | (_, Leaf) -> left
      | (_, _) ->
        let min = findMin right in
        Node (left, min, delete min right)
    else if num < value then
      Node (delete num left, value, right)
    else
      Node (left, value, delete num right)

(* Function to find the minimum value in a tree *)
let rec findMin tree =
  match tree with
  | Leaf -> failwith "Empty tree"
  | Node (Leaf, value, _) -> value
  | Node (left, _, _) -> findMin left

(* Example usage of the BST functions *)
let sample_tree = 
  Node (Node (Leaf, 3, Leaf), 7, Node (Leaf, 10, Leaf))
let sample_tree_inserted = insert 5 sample_tree
let is_in_tree = isInTree 5 sample_tree_inserted
let sample_tree_deleted = delete 7 sample_tree_inserted