(* Define a recursive function for calculating the factorial of a number *)
let rec factorial n =
  match n with
  | 0 -> 1
  | _ -> n * factorial (n - 1)

(* Define a function for checking if a number is prime *)
let is_prime n =
  let rec check_divisor div =
    if div = 1 then true
    else if n mod div = 0 then false
    else check_divisor (div - 1)
  in
  check_divisor (n - 1)

(* Define a function for finding the nth prime number *)
let find_nth_prime n =
  let rec find_primes current prime_count =
    if prime_count = n then current
    else if is_prime (current + 1) then find_primes (current + 1) (prime_count + 1)
    else find_primes (current + 1) prime_count
  in
  find_primes 2 0

(* Define a function for checking if a list contains a specific value *)
let rec contains list value =
  match list with
  | [] -> false
  | hd :: tl -> if hd = value then true else contains tl value

(* Define a function for removing duplicate values from a list *)
let rec remove_duplicates list =
  match list with
  | [] -> []
  | hd :: tl -> if contains tl hd then remove_duplicates tl else hd :: remove_duplicates tl

(* Define a function for calculating the sum of all elements in a list *)
let rec sum_list list =
  match list with
  | [] -> 0
  | hd :: tl -> hd + sum_list tl

(* Define a function for calculating the average value of all elements in a list *)
let calc_avg list =
  let count = List.length list in
  if count = 0 then 0.0
  else (float_of_int (sum_list list)) /. (float_of_int count)

(* Define a function for calculating the standard deviation of a list of numbers *)
let calc_stdev list =
  let avg = calc_avg list in
  let rec calculate_sum_diffs diff_sum elements =
    match elements with
    | [] -> diff_sum
    | hd :: tl -> calculate_sum_diffs (diff_sum +. ((hd -. avg) ** 2.)) tl
  in
  let sum_diffs = calculate_sum_diffs 0. list in
  sqrt (sum_diffs /. (float_of_int (List.length list)))

(* Define a record type for a 2D point with x and y coordinates *)
type point = {
  x : float;
  y : float;
}

(* Define a function for calculating the distance between two points *)
let calc_distance p1 p2 =
  let x_diff = p2.x -. p1.x in
  let y_diff = p2.y -. p1.y in
  sqrt ((x_diff ** 2.) +. (y_diff ** 2.))

(* Define a variant type for different shapes *)
type shape =
  | Circle of float
  | Rectangle of float * float

(* Define a function for calculating the area of a shape *)
let calc_area s =
  match s with
  | Circle r -> 3.14 *. (r ** 2.)
  | Rectangle (w, h) -> w *. h

(* Define a function for calculating the perimeter of a shape *)
let calc_perimeter s =
  match s with
  | Circle r -> 2. *. 3.14 *. r
  | Rectangle (w, h) -> 2. *. (w +. h)

(* Define a function for sorting a list in ascending order using quicksort algorithm *)
let rec quicksort list =
  match list with
  | [] -> []
  | [x] -> [x]
  | pivot :: tl ->
    let smaller, larger = List.partition (fun x -> x < pivot) tl in
    let sorted_smaller = quicksort smaller in
    let sorted_larger = quicksort larger in
    sorted_smaller @ [pivot] @ sorted_larger

(* Define a function for performing matrix addition *)
let rec matrix_add matrix1 matrix2 =
  match (matrix1, matrix2) with
  | ([], []) -> []
  | ([], _) -> failwith "Matrices must have the same dimensions"
  | (_, []) -> failwith "Matrices must have the same dimensions"
  | (row1 :: tl1, row2 :: tl2) ->
    let rec add_row_elements elements1 elements2 =
      match (elements1, elements2) with
      | ([], []) -> []
      | (el1 :: tl1, el2 :: tl2) -> (el1 + el2) :: add_row_elements tl1 tl2
      | (_, _) -> failwith "Matrices must have the same dimensions"
    in
    add_row_elements row1 row2 :: matrix_add tl1 tl2