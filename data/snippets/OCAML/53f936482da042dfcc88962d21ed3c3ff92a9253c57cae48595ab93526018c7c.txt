(* Define a higher-order function 'map' that takes in a function f and a list l as parameters *)
let rec map (f: 'a -> 'b) (l: 'a list) : 'b list =
  match l with
  | [] -> []
  (* Apply the function f to the head of the list and append the result to the mapped list *)
  | x :: xs -> (f x) :: (map f xs);;

(* Define a function 'multiply_by_two' that takes in an integer and returns its double *)
let multiply_by_two (x: int) : int =
  x * 2;;

(* Call the map function with multiply_by_two and a list of integers *)
map multiply_by_two [1; 2; 3; 4; 5];;