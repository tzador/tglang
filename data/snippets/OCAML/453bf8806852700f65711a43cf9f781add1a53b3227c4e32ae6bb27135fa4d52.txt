module type Stack = sig
  type 'a stack
  
  val empty : int -> 'a stack
    (** [empty n] creates a new empty stack with capacity [n] *)
  val is_empty : 'a stack -> bool
    (** [is_empty s] checks if the stack [s] is empty *)
  val push : 'a stack -> 'a -> unit
    (** [push s x] pushes [x] into the stack [s] *)
  val pop : 'a stack -> 'a
    (** [pop s] removes and returns the top element of stack [s] *)
  val peek : 'a stack -> 'a
    (** [peek s] returns the top element of stack [s] without removing it *)
end

module StackImpl : Stack = struct
  type 'a stack = ('a list) ref
  
  let empty n = ref []
  let is_empty s = (List.length !s) = 0
  let push s x = s := x :: !s 
  let pop s = 
    match !s with
    | [] -> failwith "stack is empty"
    | x :: xs -> 
        s := xs; x
  let peek s =
    match !s with
    | [] -> failwith "stack is empty"
    | x :: _ -> x
end