(*
A complex code snippet in OCAML
*)

(* Define a function that takes in two integers and returns the sum *)
let add (x : int) (y : int) : int = x + y;;

(* Define a recursive function that calculates the factorial of a given number *)
let rec factorial (n : int) : int =
  if n = 0 then 1
  else n * factorial (n-1);;

(* Define a list of elements and use pattern matching to manipulate it *)
let my_list = [1; 2; 3; 4; 5];;

match my_list with
| [] -> "Empty list"
| [x] -> string_of_int x
| [x; y] -> string_of_int (x + y)
| x :: y :: t -> "Sum: " ^ string_of_int (x + y) ^ ", Length: " ^ string_of_int (List.length t);;

(* Define a function that takes in a string and returns every other character *)
let every_other (s : string) : string =
  let rec helper (str : string) : string =
    if String.length str < 2 then ""
    else String.get str 0 :: (helper (String.sub str 2 (String.length str - 2)))
  in
  helper s;;

every_other "hello world";; (* Output: "hlowrd" *)