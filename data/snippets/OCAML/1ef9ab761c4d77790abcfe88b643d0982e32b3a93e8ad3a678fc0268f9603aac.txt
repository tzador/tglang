(* A function that takes in a list of integers and returns the sum of all the positive numbers *)
let rec sum_positive_nums integers =
  match integers with
  | [] -> 0 (* if the list is empty, sum is 0 *)
  | hd :: tl -> if hd >= 0 then hd + sum_positive_nums tl (* if the head of list is positive, add it to the sum of the rest of the list *)
                else sum_positive_nums tl (* if head is negative, don't add it to the sum and move on to the rest of the list *)

(* Example usage *)
sum_positive_nums [1; -2; 3; -4; 5];; (* Output: 9 (1 + 3 + 5)  *)
sum_positive_nums [-1; -2; -3; -4];; (* Output: 0 *)
(* Note: In OCaml, a function that doesn't specify a type is automatically assigned a general type, such as 'a list -> int for this function. *)