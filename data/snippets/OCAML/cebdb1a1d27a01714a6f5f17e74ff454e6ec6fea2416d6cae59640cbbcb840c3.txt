(* This is a recursive function that finds the factorial of a given number 
   The type of the function is int -> int, which means it takes in an integer 
   as an argument and returns an integer *)
let rec factorial n = 
  match n with
  | 0 -> 1 (* Base case: factorial of 0 is 1 *)
  | _ -> n * factorial(n - 1) (* Recursive case: n times the factorial of 
                                n-1 *)

(* This is a function that calculates the sum of squares of a given list of 
   integers. The type of the function is int list -> int, which means it takes 
   in a list of integers as an argument and returns an integer *)
let rec sum_of_squares lst =
  match lst with
  | [] -> 0 (* Base case: if the list is empty, sum of squares is 0 *)
  | h::t -> h * h + sum_of_squares t (* Recursive case: square the head of 
                                        list and add to the sum of squares 
                                        of the remaining elements *)