(* Define custom record type called `person` *)
type person = {
  first_name: string; (* string field for first name *)
  last_name: string; (* string field for last name *)
  age: int; (* integer field for age *)
  hobbies: string list; (* list of strings for hobbies *)
  education: (string * string) list; (* list of tuples for education history *)
}

(* Define function that takes in a person and returns a string with their full name *)
let full_name (p : person) : string =
  p.first_name ^ " " ^ p.last_name

(* Define function that takes in a person and returns a boolean indicating if they are over 18 years old *)
let is_over_18 (p : person) : bool =
  if p.age > 18 then
    true
  else
    false

(* Define function that takes in a person and a hobby and adds the hobby to their hobby list *)
let add_hobby (p : person) (hobby: string) : person =
  { p with hobbies = hobby :: p.hobbies }

(* Define example person with values for each field *)
let example_person = {
  first_name = "John";
  last_name = "Smith";
  age = 25;
  hobbies = ["reading"; "cooking"];
  education = [("Bachelor's", "UC Berkeley"); ("Master's", "Stanford")]
}

(* Print output of calling `full_name` with `example_person` *)
print_endline (full_name example_person);

(* Print output of calling `is_over_18` with `example_person` *)
print_endline (string_of_bool (is_over_18 example_person));

(* Print output of calling `add_hobby` with `example_person` and "painting" as arguments *)
print_endline (string_of_list (add_hobby example_person "painting").hobbies);