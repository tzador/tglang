(* This is a function that calculates the sum of a list *)
let rec sum_list (lst: int list) : int =
match lst with
| [] -> 0 (* If the list is empty, the sum is 0 *)
| x :: rest -> x + sum_list rest (* Otherwise, add the first element to the sum of the rest of the list *)

(* This is a helper function that calculates the product of two numbers *)
let product (x: int) (y: int) : int =
x * y

(* This is a function that calculates the product of a list of numbers *)
let rec product_list (lst: int list) : int =
match lst with
| [] -> 1 (* If the list is empty, the product is 1 *)
| x :: rest -> product x (product_list rest) (* Otherwise, multiply the first element by the product of the rest of the list *)

(* This is a function that takes in two functions and returns a function that applies the first function to the result of the second function *)
let compose (f: 'a -> 'b) (g: 'c -> 'a) : 'c -> 'b =
fun x -> f (g x)

(* This is an example of using the compose function to calculate the sum of the squares of a list *)
let sum_squares (lst: int list) : int =
let square = compose (fun x -> x * x) (fun y -> y) in (* Creates a function that squares its input *)
sum_list (List.map square lst) (* Maps the square function over the list and then passes it to the sum_list function *)

(* This is an example of using the compose function to calculate the factorial of a number *)
let factorial (n: int) : int =
let range = List.init n (fun x -> x + 1) in (* Creates a list of numbers from 1 to n *)
product_list (List.map (fun x -> x) range) (* Maps the identity function over the list and then passes it to the product_list function to calculate the product *)