(* Define the type of binary trees *)
type tree = Leaf | Node of int * tree * tree

(* Function to insert a value into a binary tree *)
let rec insert_tree x t =
  match t with
  | Leaf -> Node(x, Leaf, Leaf)
  | Node(y, left, right) ->
      if x < y then 
        Node(y, (insert_tree x left), right)
      else if x > y then
        Node(y, left, (insert_tree x right))
      else t

(* Function to check if a value is present in a binary tree *)
let rec mem_tree x t = 
  match t with
  | Leaf -> false
  | Node(y, left, right) ->
      if x = y then true
      else if x < y then mem_tree x left
      else mem_tree x right

(* Function to delete a value from a binary tree *)
let rec delete_tree x t =
  match t with
  | Leaf -> Leaf
  | Node(y, left, right) ->
      if x < y then Node(y, (delete_tree x left), right)
      else if x > y then Node(y, left, (delete_tree x right))
      else
        match (left, right) with
        | (Leaf, Leaf) -> Leaf
        | (Node(_, _, _), Leaf) -> left
        | (Leaf, Node(_, _, _)) -> right
        | (Node(_, _, _), Node(_, _, _)) ->
            let successor = find_min right in
            Node(successor, left, (delete_tree successor right))

(* Function to find the minimum value in a binary tree *)
let rec find_min t =
  match t with
  | Leaf -> failwith "Empty tree"
  | Node(x, Leaf, _) -> x
  | Node(_, left, _) -> find_min left

(* Function to find the maximum value in a binary tree *)
let rec find_max t =
  match t with
  | Leaf -> failwith "Empty tree"
  | Node(x, _, Leaf) -> x
  | Node(_, _, right) -> find_max right

(* Function to print a binary tree in order (left, root, right) *)
let rec print_tree t =
  match t with
  | Leaf -> print_string ""
  | Node(x, left, right) ->
      print_tree left;
      print_int x;
      print_string " ";
      print_tree right

(* Sample binary tree *)
let t = Node(5, Node(2, Leaf, Node(4, Leaf, Leaf)), Node(7, Leaf, Leaf))

(* Inserting values into the tree *)
let t = insert_tree 6 t
let t = insert_tree 1 t

(* Printing the tree *)
print_endline "Binary tree in order: ";
print_tree t;

(* Checking if a value is present in the tree *)
if mem_tree 3 t then print_endline "Value is present."
else print_endline "Value is not present.";

(* Deleting a value from the tree *)
let t = delete_tree 2 t

(* Printing the tree again *)
print_endline "Binary tree in order: ";
print_tree t;

(* Finding the minimum value in the tree *)
let min = find_min t
print_endline ("\nMinimum value in the tree: " ^ string_of_int min);

(* Finding the maximum value in the tree *)
let max = find_max t
print_endline ("Maximum value in the tree: " ^ string_of_int max)