(* This is a function that takes in a list of integers and returns the sum of the numbers in the list *)
let rec sum_list lst = match lst with
| [] -> 0 (* Returns 0 if the list is empty *)
| x::xs -> x + sum_list xs (* Adds the first element of the list to the sum of the rest of the list *)

(* This is a function that takes in a list of strings and concatenates them into one string *)
let rec concat_strings lst = match lst with
| [] -> "" (* Returns an empty string if the list is empty *)
| x::xs -> x ^ concat_strings xs (* Adds the first string in the list to the concatenated string of the rest of the list *)

(* This is a function that takes in a string and counts the number of characters in the string *)
let count_chars str =
  let rec helper n = function
    | "" -> n (* Returns the final count of characters when the string is empty *)
    | _::xs -> helper (n+1) xs (* Recursively counts the characters in the string *)
  in
  helper 0 str (* Returns the initial count of 0 when the function is first called *)

(* Example calls to the above functions with their expected outputs *)
let lst = [1;2;3;4;5]
let strings = ["Hello"; "World"; "!"]
let str = "Sample string"

print_endline (string_of_int (sum_list lst)) (* Output: 15 *)
print_endline (concat_strings strings) (* Output: "HelloWorld!" *)
print_endline (string_of_int (count_chars str)) (* Output: 14 *)