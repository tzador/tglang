(* Finds the power of a number using recursion *)
let rec power x n =
  if n = 0 then 1                (* Base case: Any number to the power of 0 is 1 *)
  else
    x * power x (n - 1)          (* Recursive case: Multiply x by the power of x^(n-1) *)
  ;;
  
(* Finding the factorial of a number *)
let rec factorial n =
  if n = 0 then 1               (* Base case: Factorial of 0 is 1 *)
  else
    n * factorial(n-1)          (* Recursive case: Multiply n by the factorial of n-1 *)
  ;;

(* Generating a random list of integers with specified length *)
let rec random_list length =
  match length with
    | 0 -> []                  (* Base case: Empty list *)
    | _ -> Random.int 100 :: random_list (length-1)   (* Recursive case: Append a random integer (between 0 to 100) to the list *)
  ;;
  
(* Reversing a list using tail recursion *)
let rev lst =
  let rec helper result = function
    | [] -> result                        (* Base case: Empty list, return result *)
    | x :: xs -> helper (x :: result) xs  (* Recursive case: Add the first element of the list to the front of the result list *)
      in helper [] lst                     (* Call helper function with an empty list as result *)
  ;;