(* This is a complex code snippet in OCAML *)
let rec factorial n = 
  if n = 0 then 1 else n * factorial (n-1)

let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | n -> fibonacci(n-1) + fibonacci(n-2)

let rec power base exp =
  if exp = 0 then 1 else base * power base (exp-1)

let rec gcd a b =
  if b = 0 then a else gcd b (a mod b)

let rec bubble_sort arr =
  let rec swap i j arr =
    let temp = arr.(i) in
    arr.(i) <- arr.(j);
    arr.(j) <- temp
  in
  let len = Array.length arr in
  for i = 0 to len - 1 do
    for j = 0 to len - i - 2 do
      if arr.(j) > arr.(j+1)
      then swap j (j+1)
    done
  done;
  arr