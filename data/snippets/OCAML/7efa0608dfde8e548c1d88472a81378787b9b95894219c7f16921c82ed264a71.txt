(** A module for handling binary search trees *)
(* Declaration of datatype for a binary tree *)
type 'a tree = Empty | Node of 'a * 'a tree * 'a tree

(* Function to check if a tree is empty *)
let is_empty t =
  match t with
  | Empty -> true
  | Node (_, _, _) -> false

(* Function to insert a new value into the tree *)
let rec insert t elem =
  match t with
  | Empty -> Node (elem, Empty, Empty)
  | Node (x, l, r) -> 
      if elem < x then Node (x, insert l elem, r)
      else if elem > x then Node (x, l, insert r elem)
      else t

(* Function to remove a value from the tree *)
let rec remove t elem =
  match t with
  | Empty -> Empty
  | Node (x, l, r) ->
      if elem < x then Node (x, remove l elem, r)
      else if elem > x then Node (x, l, remove r elem)
      else
        match (l, r) with
        | (Empty, _) -> r
        | (_, Empty) -> l
        | (_, _) -> 
            let (max_node, new_left) = find_max l
            Node (max_node, new_left, r)

(* Helper function to find the maximum value in a tree *)
and find_max t =
  match t with
  | Empty -> failwith "Empty tree"
  | Node (x, l, Empty) -> (x, l)
  | Node (_, _, r) -> find_max r

(* Function to check if a value is present in the tree *)
let rec member t elem =
  match t with
  | Empty -> false
  | Node (x, l, r) ->
      if elem < x then member l elem
      else if elem > x then member r elem
      else true

(* Function to merge two trees into one *)
let merge t1 t2 =
  if is_empty t1 then t2
  else if is_empty t2 then t1
  else
    let (max_node, new_left) = find_max t1
    Node (max_node, new_left, t2)

(* Function to convert a tree into a list in ascending order *)
let rec to_list t =
  match t with
  | Empty -> []
  | Node (x, l, r) -> List.append (to_list l) [x] @ to_list r