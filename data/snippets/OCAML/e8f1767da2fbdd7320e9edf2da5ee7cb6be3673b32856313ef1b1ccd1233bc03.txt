(** [map f l] is the list obtained by applying [f] to every element of [l]. *)
let rec map f = function
  | [] -> []
  | hd::tl -> let hd' = f hd in hd' :: (map f tl)

(** [fold_left f a l] computes (((a * a) * ... * a) * a) where
    [a] is the accumulator and [l] is the list of values to be multiplied *)
let rec fold_left f a = function
  | [] -> a
  | hd::tl -> let a' = f a hd in fold_left f a' tl

type 'a range = ('a * 'a) list

(** [range n m] is the list of integers from [n] to [m], inclusive *)
let rec range n m =
  if n > m then
    []
  else if n = m then
    [n]
  else
    n :: (range (n+1) m)

(** [avg l] is the average of the elements in [l] *)
let rec avg l =
  let sum = fold_left (+.) 0. l in
  let num = List.length l in
  sum /. (float_of_int num)

(** [filter p l] is the list of elements in [l] that satisfy the predicate [p] *)
let rec filter p = function
  | [] -> []
  | hd::tl -> if p hd then hd :: (filter p tl) else filter p tl

(** [composition f g l] is the result of applying function [f] to the result of applying function [g] to each element in list [l] *)
let composition f g l =
  map f (map g l)