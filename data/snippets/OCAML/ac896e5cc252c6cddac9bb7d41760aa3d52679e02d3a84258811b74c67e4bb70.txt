(** a function that calculates the factorial of a given number n **)
let rec factorial n = 
  if n <= 1 then 1  (* base case - if n is <= 1, return 1 *)
  else n * factorial (n-1) (* recursive case - multiply n by factorial of n-1 *)

(* example usage of the factorial function *)
let result = factorial 5;; (* result is 120 *)

(* Example custom data type for a binary tree *)
type binary_tree =
  | Leaf of int * binary_tree * binary_tree (* represents a leaf node with an integer value and two child trees *)
  | Empty (* represents an empty tree *)

(* function to calculate the sum of all values in a binary tree *)
let rec sum_tree t =
  match t with
  | Leaf (value, left, right) -> value + sum_tree left + sum_tree right (* recursively calculates sum of all values in a tree *)
  | Empty -> 0 (* base case - an empty tree has a sum of 0 *)

(* example usage of the sum_tree function *)
let tree = Leaf(1, Leaf(2, Empty, Empty), Leaf(3, Empty, Empty));; (* creates a tree with values 1, 2, and 3 *)
let result = sum_tree tree;; (* result is 6, the sum of all values in the tree *)