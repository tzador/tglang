(* This is a recursive function that calculates the nth Fibonacci number *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* This is a function that returns the sum of the squares of two numbers *)
let sum_of_squares x y =
  let square z = z * z in
  square x + square y

(* This is a higher order function that takes in a function and returns
 * the sum of the results of applying that function to a list of integers *)
let sum_list func list =
  let rec helper total lst =
    match lst with
    | [] -> total
    | x :: xs -> helper (total + func x) xs
  in
  helper 0 list

(* This is an example usage of sum_list with the fibonacci function *)
let fibonacci_sum = sum_list fibonacci [1; 2; 3; 4; 5]  (* Output: 12 *)

(* This is an example usage of sum_list with the sum_of_squares function *)
let squares_sum = sum_list sum_of_squares [3; 4; 5]  (* Output: 50 *)