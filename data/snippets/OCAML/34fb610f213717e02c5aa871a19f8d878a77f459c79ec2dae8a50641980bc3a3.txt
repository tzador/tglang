(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n =
  match n with
  | 0 -> print_endline "Factorial of 0 is 1"; 1
  | 1 -> print_endline "Factorial of 1 is 1"; 1
  | _ -> let result = n * (factorial (n - 1)) in print_endline ("Factorial of " ^ (string_of_int n) ^ " is " ^ (string_of_int result)); result

(* This is a helper function that takes in a list of integers and returns the sum of the numbers *)
let rec sum lst =
  match lst with
  | [] -> print_endline "Sum of empty list is 0"; 0
  | x :: xs -> let result = x + sum xs in print_endline ("Sum of " ^ (string_of_int x) ^ " and the rest of the list is " ^ (string_of_int result)); result

(* This is the main function that utilizes both the factorial and sum functions *)
let main () =
  let n = 5 in
  let lst = [1; 2; 3; 4; 5] in
  let fact = factorial n in
  let total = sum lst in
  print_endline ("Final answer: " ^ (string_of_int (fact + total)))

(* Calling the main function *)
let _ = main()