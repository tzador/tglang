(* sort function using quicksort algorithm *)

(* partition function to partition the list into smaller and larger elements *)
let partition pivot lst =
  let rec aux left right = function
    | [] -> (left, right)
    | hd::tl ->
        if hd < pivot
        then aux (hd::left) right tl
        else aux left (hd::right) tl in
  aux [] [] lst

(* quicksort function that recursively calls partition function *)
let rec quicksort = function
  | [] -> []
  | hd::tl ->
      let (left, right) = partition hd tl in
      (quicksort left) @ (hd :: quicksort right)

(* sample input list *)
let lst = [5;2;8;9;3;6;1]

(* calling the quicksort function *)
print_endline "Sorted list: ";
let sorted_lst = quicksort lst in
List.iter (fun x -> print_int x; print_string " ") sorted_lst