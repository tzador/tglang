(* This is a function to compute the factorial of a number *)
let rec factorial n =
  if n = 0 then 1 (* Base case: 0! = 1 *)
  else n * factorial (n-1) (* Recursive call with n-1 *)

(* This is a function to compute the sum of squared numbers from 1 to n *)
let rec sum_squares n =
  match n with
  | 0 -> 0 (* Base case: sum of squares up to 0 is 0 *)
  | _ -> n * n + sum_squares (n-1) (* Recursive call with n-1 *)

(* This is a function to compute the nth Fibonacci number *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* Base case: 0th Fibonacci number is 0 *)
  | 1 -> 1 (* Base case: 1st Fibonacci number is 1 *)
  | _ -> fibonacci (n-1) + fibonacci (n-2) (* Recursive call with n-1 and n-2 *)

(* This is a function to check if a number is prime *)
let is_prime n =
  let rec check_divisors i =
    if i = 1 then true (* Base case: 1 is always a divisor *)
    else if n mod i = 0 then false (* If n is divisible by i, return false *)
    else check_divisors (i-1) (* Check for other potential divisors *)
  in
  if n <= 1 then false (* 1 and below are not prime numbers *)
  else check_divisors (int_of_float (sqrt (float n))) (* Check divisors up to sqrt(n) *)

(* This is a function to calculate the area of a triangle given three side lengths *)
let triangle_area a b c =
  let s = (a + b + c) / 2 in (* Calculate the semi-perimeter *)
  let area = sqrt (float (s * (s-a) * (s-b) * (s-c))) in (* Use Heron's formula *)
  area (* Return the calculated area *)

(* This is a function to calculate the nth term in the Collatz conjecture sequence *)
let collatz n =
  let rec collatz_seq m =
    match m with
    | 1 -> 1 (* Base case: Sequence reaches 1 *)
    | n when n mod 2 = 0 -> n/2 (* If even, divide by 2 *)
    | _ -> 3 * n + 1 (* If odd, multiply by 3 and add 1 *)
  in
  let rec nth_term count num =
    if count = n then num (* If reached the nth term, return it *)
    else nth_term (count+1) (collatz_seq num) (* Recursive call with the next sequence number *)
  in
  nth_term 0 n (* Start the recursive calls with initial count of 0 and inputted n *)