(* This is a function that recursively multiplies all elements in a list by a given value *)
let rec multiply_list l v =
  match l with (* Pattern matching to handle different list cases *)
  | [] -> [] (* If list is empty, return empty list*)
  | [h] -> [h * v] (* If list has only one element, multiply and return the result *)
  | h :: t -> (h * v) :: multiply_list t v (* For lists with more than one element, multiply the head and recursively call multiply_list on the tail *)
  
  (* Example call and output*)
  let num_list = [1; 2; 3; 4] (* Create a list *)
  let new_list = multiply_list num_list 5 (* Call multiply_list function with list and value *)
  new_list (* Output: [5; 10; 15; 20] *)