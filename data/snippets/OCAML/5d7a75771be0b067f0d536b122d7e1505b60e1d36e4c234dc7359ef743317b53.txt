(* This is a module that represents a binary tree *)

module BinaryTree = 
    struct
        (* Defining the binary tree data type *)
        type 'a binaryTree =
                | Empty                                 (* Represents an empty tree node *)
                | Node of 'a * 'a binaryTree * 'a binaryTree  (* Represents a tree node with a left and right subtree *)
    
        (* Function to check if a tree is empty *)
        let isEmpty tree = 
            match tree with
                | Empty -> true                        (* Returns true if the tree is empty *)
                | _ -> false                           (* Otherwise returns false *)
            
        (* Function to create a leaf node with given value *)
        let createLeaf (value: 'a) = 
            Node(value, Empty, Empty);               (* Returns a tree node with the given value as a leaf *)
            
        (* Function to insert a value into a binary tree *)
        let rec insert value tree = 
            match tree with
                | Empty -> createLeaf(value)           (* If the tree is empty, create a leaf node with the given value *)
                | Node(v, left, right) ->               (* If the tree is not empty, check where to insert the value *)
                    if value < v then                   (* If the value is less than the current node's value, insert it into the left subtree *)
                        Node(v, insert value left, right)
                    else if value > v then              (* If the value is greater than the current node's value, insert it into the right subtree *)
                        Node(v, left, insert value right)
                    else
                        tree                            (* If the value is equal to the current node's value, do not insert it again *)
                        
        (* Function to search for a value in a binary tree *)
        let rec search value tree = 
            match tree with
                | Empty -> false                       (* If the tree is empty, the value is not present *)
                | Node(v, left, right) ->               (* If the tree is not empty, check if the value is equal to the current node's value *)
                    if value = v then                   (* If yes, return true *)
                        true
                    else if value < v then              (* If the value is less than the current node's value, search in the left subtree *)
                        search value left
                    else                                (* If the value is greater than the current node's value, search in the right subtree *)
                        search value right
        
        (* Function to check if a binary tree is balanced *)
        let rec isBalanced tree = 
            match tree with
                | Empty -> true                        (* An empty tree is balanced *)
                | Node(v, left, right) ->               (* If the tree is not empty, check if the difference in height of left and right subtrees is <= 1 *)
                    let heightDiff = abs (height left - height right) in       (* Calculating the difference in height *)
                    if heightDiff <= 1 then              (* If the difference is less than or equal to 1, check if both subtrees are also balanced *)
                        isBalanced left && isBalanced right
                    else
                        false                           (* If the difference is greater than 1, the tree is not balanced *)
            
        (* Function to get the height of a binary tree *)
        (* Returns -1 if the tree is empty, 0 if it contains only one node *)
        (* Otherwise recursively calculates the height of each subtree and returns the maximum height + 1 *)
        let rec height tree = 
            match tree with
                | Empty -> -1                          (* An empty tree has a height of -1 since it has no nodes *)
                | Node(v, left, right) ->               (* If the tree is not empty, recursively find the height of each subtree *)
                    1 + max (height left) (height right)  (* The height of the current tree is the maximum height of its left and right subtrees + 1 *)
    end