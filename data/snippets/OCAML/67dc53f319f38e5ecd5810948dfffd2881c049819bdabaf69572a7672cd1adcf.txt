(* This is a function that calculates the factorial of a given integer n *)
(* factorial: int -> int *)
(* Parameters: *)
(* n - the given integer *)
let factorial n =
  let rec aux acc m =
    if m = 0 then acc
    else aux (acc * m) (m - 1)
  in
  aux 1 n

(* This is a function that calculates the nth Fibonacci number *)
(* fibonacci: int -> int *)
(* Parameters: *)
(* n - the given integer *)
let fibonacci n =
  let rec fib n = 
    if n < 2 then n 
    else fib (n - 1) + fib (n - 2)
  in
  fib n

(* This is a function that checks if a given string is a palindrome *)
(* is_palindrome: string -> bool *)
(* Parameters: *)
(* str - the given string *)
let is_palindrome str =
  let rec check start_idx end_idx =
    if start_idx >= end_idx then true
    else 
      let start_char = String.get str start_idx in
      let end_char = String.get str end_idx in
      if start_char = end_char then check (start_idx + 1) (end_idx - 1)
      else false
  in
  check 0 (String.length str - 1)
 
(* This is a function that merges two sorted lists in ascending order *)
(* merge: 'a list -> 'a list -> 'a list *)
(* Parameters: *)
(* lst1 - the first sorted list *)
(* lst2 - the second sorted list *)
let rec merge lst1 lst2 =
  match lst1 with
  | [] -> lst2
  | x :: xs ->
    match lst2 with
    | [] -> lst1
    | y :: ys ->
      if x < y then x :: merge xs (y :: ys)
      else y :: merge (x :: xs) ys

(* This is a function that reverses a given list *)
(* reverse: 'a list -> 'a list *)
(* Parameters: *)
(* lst - the given list *)
let rec reverse lst =
  match lst with
  | [] -> []
  | x :: xs -> reverse xs @ [x]

(* This is a function that returns a list of the first n prime numbers *)
(* primes: int -> int list *)
(* Parameters: *)
(* n - the number of prime numbers to generate *)
let primes n =
  let rec is_prime k =
    let rec aux d =
      if d * d > k then true
      else if k mod d = 0 then false
      else aux (d + 1)
    in
    aux 2
  in
  let rec make_primes curr num count =
    if count = 0 then []
    else if is_prime curr then curr :: make_primes (curr + 1) (num + 1) (count - 1)
    else make_primes (curr + 1) num count
  in
  make_primes 2 0 n