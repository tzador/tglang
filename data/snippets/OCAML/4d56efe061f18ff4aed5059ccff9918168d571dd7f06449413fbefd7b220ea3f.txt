(* This is a function that takes in two integers and returns their sum *)
let sum x y = 
  let result = x + y in 
  (* this is a comment describing the calculation process *)
  result (* returns the result *)
  
(* This is a recursive function that calculates the factorial of a number *)
let rec factorial n = 
  match n with 
  | 0 -> 1 (* base case *)
  | _ -> n * factorial (n - 1) (* recursive call *)
  
(* This is a function that implements the quicksort algorithm on a list of integers *)
let rec quicksort lst = 
  match lst with 
  | [] -> [] (* empty list *)
  | [x] -> [x] (* single element list *)
  | pivot::rest -> 
    let smaller, larger = List.partition (fun n -> n < pivot) rest in 
    (* partitions the list into two sub-lists based on the pivot *)
    (quicksort smaller) @ [pivot] @ (quicksort larger) (* combines the sub-lists after sorting them *)
    
(* This is an example of a higher-order function that takes in a function as a parameter *)
let apply_twice x f = f (f x) (* applies the function f twice on x *)
  
(* This is a function that takes in a list of integers and a predicate function and returns a list of integers that satisfy the predicate *)
let filter lst f = 
  match lst with 
  | [] -> [] (* empty list *)
  | x::rest -> 
    if f x then 
      x::(filter rest f) (* recursively adds the element to the filtered list *)
    else 
      filter rest f (* skips the element and continues to the next one *)