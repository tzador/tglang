(* A recursive function to find the factorial of a number *)
let rec factorial n =
  if n = 0 then 1 (* base case: factorial of 0 is 1 *)
  else n * factorial (n-1) (* recursive call: multiply n with factorial of n-1 *)

(* A function to calculate the sum of a list of numbers *)
let sumList lst =
  let rec helper lst acc =
    match lst with
    | [] -> acc (* base case: return accumulator when list is empty *)
    | hd :: tl -> helper tl (hd + acc) (* recursive call: add head to accumulator and call helper function on tail *)
  in
  helper lst 0 (* start helper function with accumulator as 0 *)
  
(* A function to check if a number is prime *)
let isPrime n =
  let rec checkPrime num divisor =
    if divisor = num then true (* base case: return true if divisor equals number, meaning it is prime *)
    else if num mod divisor = 0 then false (* returns false if remainder is 0, meaning it is not prime *)
    else checkPrime num (divisor + 1) (* recursive call: increment divisor and call function on new values *)
  in
  if n < 2 then false (* 0 and 1 are not prime numbers *)
  else checkPrime n 2 (* start checkPrime function with divisor as 2 *)
  
(* A function to reverse a list *)
let reverseList lst =
  let rec helper lst acc =
    match lst with
    | [] -> acc (* base case: return accumulator when list is empty *)
    | hd :: tl -> helper tl ([hd] @ acc) (* recursive call: add head to front of accumulator list *)
  in
  helper lst [] (* start helper function with empty accumulator list *)