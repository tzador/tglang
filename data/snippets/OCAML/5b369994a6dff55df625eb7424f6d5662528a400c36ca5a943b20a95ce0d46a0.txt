(* Define an abstract type representing a binary tree node with an integer value *)
type binary_tree_node =
  | Empty
  | Node of int * binary_tree_node * binary_tree_node;;

(* Define a function to insert a new value into the binary tree, maintaining its order *)
let rec insert bst value =
  match bst with
  | Empty -> Node (value, Empty, Empty)
  | Node (v, left, right) when value = v -> bst
  | Node (v, left, right) when value < v -> Node (v, insert left value, right)
  | Node (v, left, right) -> Node (v, left, insert right value);;

(* Define a function to search for a value in the binary tree *)
let rec search bst value =
  match bst with
  | Empty -> false
  | Node (v, left, right) when value = v -> true
  | Node (v, left, right) when value < v -> search left value
  | Node (v, left, right) -> search right value;;

(* Create a binary tree with the values 5, 7, 3, 2, 6, 4 *)
let tree =
  Node (5,
   Node (3,
    Node (2, Empty, Empty),
    Node (4, Empty, Empty)),
   Node (7,
    Node (6, Empty, Empty),
    Empty));;

(* Insert a new value 1 into the binary tree *)
let updated_tree = insert tree 1;;

(* Search for the value 6 in the updated binary tree *)
let found = search updated_tree 6;;

(* Print the result of the search *)
print_endline (string_of_bool found);;