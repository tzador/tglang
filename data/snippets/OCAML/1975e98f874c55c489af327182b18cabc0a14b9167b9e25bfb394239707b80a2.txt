(** A function that takes in a list and returns the maximum integer in the list *)
let rec max_list = function 
| [] -> failwith "Empty List"
| h :: t -> let max_tail = max_list t in
				if h > max_tail then
					h 
				else 
					max_tail;;

(** A function that returns true if a list is in ascending order and false otherwise *)
let rec is_asc = function 
| [] -> true 
| [x] -> true 
| x::y::t -> if x > y then 
				false 
			else 
				is_asc (y::t);;

(** A function that merges two sorted lists into one sorted list *)
let rec merge l1 l2 = match (l1, l2) with 
| ([], _) -> l2 
| (_, []) -> l1 
| (x::xs, y::ys) -> if x <= y then 
						x :: (merge xs l2) 
					else 
						y :: (merge l1 ys);;

(** A function that implements the quicksort algorithm on a list *)
let rec quicksort = function
| [] -> [] 
| [x] -> [x] 
| pivot::rest -> let is_less = List.filter (fun x -> x<pivot) rest in 
					let is_greater = List.filter (fun x -> x>=pivot) rest in 
					(quicksort is_less) @ [pivot] @ (quicksort is_greater);;

(** A function that finds the factorial of a given number *)
let rec factorial n = 
	if n=0 then 
		1
	else 
		n * (factorial (n-1));;

(** A function that calculates the nth Fibonacci number *)
let rec fibonacci n = 
	match n with 
	| 0 -> 0 
	| 1 -> 1 
	| _ -> (fibonacci (n-1)) + (fibonacci (n-2));;