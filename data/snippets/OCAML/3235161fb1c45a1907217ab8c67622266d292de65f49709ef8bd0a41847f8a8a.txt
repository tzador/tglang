(* A recursive function that checks if a number is a prime number *)
let rec is_prime num =
  (* Helper function to check if a number is divisible by a divisor *)
  let is_divisible num divisor =
    if num mod divisor = 0 then true 
    else false in
  (* Base cases - 1 and 2 are not prime *)
  if num = 1 || num = 2 then false 
  else 
  (* Recursive call to check if number is divisible by any number between 2 and num/2 *)
  let rec check_divisible num2 =
    if num2 > (num/2) then false
    else if is_divisible num num2 then true
    else check_divisible (num2 + 1) in
  (* Call helper function to recursively check for divisors *)
  check_divisible 2

(* Test cases *)
[is_prime 1] 
(* Output: false *)
[is_prime 2]
(* Output: false *)
[is_prime 3]
(* Output: false *)
[is_prime 7]
(* Output: true *)