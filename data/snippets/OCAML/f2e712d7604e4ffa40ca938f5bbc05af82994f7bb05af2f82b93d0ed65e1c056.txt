(* This is a function that generates a random binary tree with n nodes *)

(* Define a type for binary trees *)
type tree =
  | Leaf
  | Node of int * tree * tree

(* Function to generate a random number between min and max (inclusive) *)
let gen_num min max = 
  min + Random.int (max - min + 1)

(* Function to insert a new node into a binary tree at a random position *)
let rec insert_node node tree =
  match tree with
  | Leaf -> Node(node, Leaf, Leaf)
  | Node(value, left, right) -> 
      if Random.bool() 
        then Node(value, insert_node node left, right)
        else Node(value, left, insert_node node right)

(* Function that generates a random binary tree with n nodes *)
let gen_tree n =
  let rec helper n cur_tree =
    if n = 0 then cur_tree
    else helper (n-1) (insert_node (gen_num 1 10) cur_tree)
  in helper n Leaf