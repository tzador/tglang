(* Define a type with four different variants *)
type suit = Diamonds | Clubs | Hearts | Spades

(* Define a record type with string and int fields *)
type person = {name: string; age: int}

(* Define a function that takes in a card suit and returns a corresponding color *)
let determine_color = function
  | Diamonds | Hearts -> "Red"
  | Clubs | Spades -> "Black"

(* Define a function that takes in a list and a function and applies the function to each element in the list *)
let rec map f lst =
  match lst with
  | [] -> []
  | x :: xs -> (f x) :: (map f xs)

(* Create a list of five person records *)
let persons = [{name = "John"; age = 30}; {name = "Anna"; age = 25}; {name = "Mark"; age = 45}; {name = "Jen"; age = 22}; {name = "Rachel"; age = 35}]

(* Filter the list of persons to only include those over 30 years old *)
let filtered_persons = List.filter (fun person -> person.age > 30) persons

(* Print out the colors of all the suits in a card deck *)
let deck = [Diamonds; Clubs; Hearts; Spades]
List.iter (fun suit -> print_endline (determine_color suit)) deck