(*This function implements the quicksort algorithm*)
let rec quicksort lst =
  match lst with
    | [] -> [] (*if list is empty, return empty list*)
    | [x] -> [x] (*if list has only one element, return the same list*)
    | pivot::rest -> (*otherwise, use the first element as pivot and recursively sort the rest of the list*)
      let lesser, greater = List.partition (fun y -> y < pivot) rest in (*partition the rest of the list into two sublists*)
      let lesser_sorted = quicksort lesser in (*sort the first sublist recursively*)
      let greater_sorted = quicksort greater in (*sort the second sublist recursively*)
      lesser_sorted @ [pivot] @ greater_sorted (*combine the sorted sublists with the pivot in between*)