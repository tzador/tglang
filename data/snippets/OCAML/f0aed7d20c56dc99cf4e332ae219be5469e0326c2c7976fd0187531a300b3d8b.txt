(* This is a function that takes in a list of integers and returns a new list with only odd numbers *)
let rec filter_odd (lst : int list) : int list =
  match lst with
  | [] -> []
  | x :: rest ->
      if x mod 2 = 1 then
        x :: (filter_odd rest)
      else
        filter_odd rest

(* This function uses a recursive approach to reverse a list *)
let rec reverse_list (lst : 'a list) : 'a list =
  match lst with
  | [] -> []
  | x :: rest -> (reverse_list rest) @ [x]

(* This function takes in a list of integers and returns the sum of all the elements *)
let rec sum_list (lst : int list) : int =
  match lst with
  | [] -> 0
  | x :: rest -> x + sum_list rest

(* This is an example usage of the functions defined above *)
let lst = [1; 2; 3; 4; 5]

let filtered_lst = filter_odd lst ;; (* [1; 3; 5] *)

let reversed_lst = reverse_list lst ;; (* [5; 4; 3; 2; 1] *)

let sum = sum_list lst ;; (* 15 *)

Printf.printf "Filtered list: %s\n" (String.concat ", " (List.map string_of_int filtered_lst));;
(* Output: Filtered list: 1, 3, 5 *)

Printf.printf "Reversed list: %s\n" (String.concat ", " (List.map string_of_int reversed_lst));;
(* Output: Reversed list: 5, 4, 3, 2, 1 *)

Printf.printf "Sum of list: %d\n" sum ;;
(* Output: Sum of list: 15 *)