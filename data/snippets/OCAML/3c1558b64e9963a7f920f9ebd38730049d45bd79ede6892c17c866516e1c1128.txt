(* This is a function that takes in a list of integers and returns a new list with each integer multiplied by 2 *)
let double_list lst =
    match lst with
    | [] -> []
    | h::t -> (h * 2) :: (double_list t)

(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n - 1)

(* This is a higher order function that takes in a function and a list of integers, and applies the function to each integer in the list *)
let map f lst =
    match lst with
    | [] -> []
    | h::t -> (f h) :: (map f t)

(* This is a helper function that checks if a given integer is prime *)
let is_prime n =
    let rec helper curr =
        if curr = 1 then true
        else if n mod curr = 0 then false
        else helper (curr-1)
    in helper (n/2)

(* This is a function that generates a list of prime numbers up to a given limit *)
let generate_primes limit =
    let rec helper curr lst =
        if curr > limit then lst
        else if is_prime curr then helper (curr+1) (lst @ [curr])
        else helper (curr+1) lst
    in helper 2 []
    
(* Sample usage: *)
(* Calls the double_list function on a list of integers and assigns the result to a variable *)
let example_list = double_list [1; 2; 3; 4; 5] ;;

(* Calls the factorial function on a given number and prints the result using OCaml's Printf module *)
Printf.printf "The factorial of %d is %d" 5 (factorial 5) ;;

(* Calls the map function with an anonymous function as the first argument and a list of integers as the second argument *)
let mapped_list = map (fun x -> x * x) [1; 2; 3; 4; 5] ;;

(* Calls the generate_primes function with a limit of 10 and assigns the result to a variable *)
let primes = generate_primes 10 ;;

(* Prints the list of prime numbers using OCaml's print_list function *)
# let print_list lst = List.iter (fun x -> Printf.printf "%d " x) lst ;;