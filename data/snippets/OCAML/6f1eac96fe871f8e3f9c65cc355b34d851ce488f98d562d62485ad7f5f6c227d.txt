(* This code snippet shows an implementation of the quicksort algorithm in OCAML *)

(* quicksort takes in a list and returns a sorted version of the list *)
let rec quicksort = function
  | [] -> []
  | pivot :: tail -> 
    let less, greater = List.partition (fun x -> x < pivot) tail in
    quicksort less @ [pivot] @ quicksort greater

(* The helper function partition takes in a pivot value and a list and returns the 
  list split into two sublists: one with values less than the pivot and one with 
  values greater than the pivot *)
let rec partition pivot = function
  | [] -> ([], [])
  | head :: tail ->
    let less, greater = partition pivot tail in
    if head < pivot then (head :: less, greater)
    else (less, head :: greater)
 
(* test case *)
let unsorted_list = [5; 2; 6; 1; 3; 4]
let sorted_list = quicksort unsorted_list

(* Expected output:
  sorted_list = [1; 2; 3; 4; 5; 6] *)