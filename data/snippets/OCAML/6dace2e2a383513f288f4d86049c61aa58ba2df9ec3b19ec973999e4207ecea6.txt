(* This is a commented line in OCAML *)

(* This function takes in an integer 'n' and returns its factorial *)
let rec factorial n =
  if n <= 0 then 1
  else n * factorial (n - 1)

(* This is a higher order function that takes in a function 'f' and an integer 'n' *)
let rec repeat f n =
  if n <= 0 then ()
  else f (); repeat f (n - 1)

(* This is a function that multiplies two matrices of the same size *)
let multiply_matrices matrix1 matrix2 =
  let n = Array.length matrix1 in
  let m = Array.length matrix1.(0) in
  let p = Array.length matrix2.(0) in
  if m <> Array.length matrix2 then failwith "Matrices have invalid dimensions."
  else
    let result = Array.make_matrix n p 0 in
    for row = 0 to n - 1 do
      for col = 0 to p - 1 do
        for i = 0 to m - 1 do
          result.(row).(col) <- result.(row).(col) + matrix1.(row).(i) * matrix2.(i).(col);
        done;
      done;
    done;
    result

(* This is a recursive function that calculates the nth Fibonacci number *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* An example of using the factorial and fibonacci functions *)
let () =
  print_endline "Factorial of 5 is: ";
  print_int (factorial 5);
  print_endline "\nFibonacci number at index 10 is: ";
  print_int (fibonacci 10);

(* Output:
Factorial of 5 is: 120
Fibonacci number at index 10 is: 55
*)