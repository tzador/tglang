let rec merge = function
| ([],l2) -> l2
| (l1,[]) -> l1
| (h1::t1,h2::t2) -> 
if h1 < h2 then h1::merge (t1,h2::t2)
else h2::merge (h1::t1,t2)
;; (* defines a function named "merge" which takes in two lists and recursively merges them, with the smaller values coming first *)

let fold_right f a l =
let rec loop = function
| [] -> a
| x::l -> f x (loop l)
in loop l
;; (* defines a function named "fold_right" which iterates through a list from right to left, applying a function "f" to each element and an accumulator "a"; used for performing operations that require accumulating a result *)