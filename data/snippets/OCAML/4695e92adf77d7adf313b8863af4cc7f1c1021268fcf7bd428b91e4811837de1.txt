type mylist = int list (* defines a new type called 'mylist' which is a list of integers *)
exception EmptyList (* defines a new

exception called 'EmptyList' that is raised when a list is empty *)
let rec sum_list lst = match lst with (* defines a recursive function 'sum_list' that takes in a list and returns the sum of its elements *)
| [] -> raise EmptyList (* if the list is empty, raise the 'EmptyList' exception *)
| [x] = x (* if the list has only one element, return that element *)
| x :: xs -> x + sum_list xs (* if the list has more than one element, add the first element to the sum of the rest of the elements *)
let rec factorial n = (* defines a recursive function 'factorial' that calculates the factorial of a number *)
  if n = 0 then 1 (* if the number is 0, return 1 *)
  else n * factorial (n-1) (* otherwise, multiply the number by the factorial of its predecessor *)
let rec fibonacci n = (* defines a recursive function 'fibonacci' that calculates the nth term in the fibonacci sequence *)
  if n < 2 then n (* if n<2, return n (base cases for fibonacci sequence) *)
  else fibonacci (n-1) + fibonacci (n-2) (* otherwise, return the sum of the previous two terms in the fibonacci sequence *)
let rec quicksort = function (* defines a recursive function 'quicksort' that takes in a list and returns a sorted list *)
| [] -> [] (* if the list is empty, return an empty list *)
| [x] -> [x] (* if the list has only one element, return the list *)
| x :: xs -> (* if the list has more than one element *)
  let smaller, larger = List.partition (fun y -> y < x) xs in (* use the 'List.partition' function to split the list into two lists - one with elements smaller than x and one with elements larger than x *)
  quicksort smaller @ [x] @ quicksort larger (* recursively sort both smaller and larger lists, and concatenate the results with x in between *)
let rec map f = function (* defines a recursive function 'map' that takes in a function f and a list and applies f to every element in the list *)
| [] -> [] (* if the list is empty, return an empty list *)
| x :: xs -> f x :: map f xs (* apply f to the first element and recursively apply map to the rest of the list *)
let rec fold_left f acc = function (* defines a recursive function 'fold_left' that takes in a function f, an accumulator and a list, and applies f to the accumulator and elements of the list from left to right *)
| [] -> acc (* if the list is empty, return the accumulator *)
| x :: xs -> fold_left f (f acc x) xs (* apply f to the accumulator and first element, and recursively apply fold_left to the rest of the list with the updated accumulator *)
let rec fold_right f lst acc = match lst with (* defines a recursive function 'fold_right' that takes in a function f, a list and an accumulator, and applies f to the elements of the list from right to left *)
| [] -> acc (* if the list is empty, return the accumulator *)
| x :: xs -> f x (fold_right f xs acc) (* apply f to the first element and the result of recursively applying fold_right to the rest of the list with the accumulator *)