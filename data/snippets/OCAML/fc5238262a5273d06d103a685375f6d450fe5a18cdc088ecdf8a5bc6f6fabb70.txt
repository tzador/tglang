(** This is a function that takes in a list of integers and returns their sum *)
let rec sum_list lst =
  match lst with
  | [] -> 0 (* Base case: empty list returns sum of 0 *)
  | x::xs -> x + sum_list xs (* Recursive case: adds the first element to the sum of the rest of the list *)

(** This is a function that takes in a string and a character,
  * and counts the number of occurrences of the character in the string *)
let rec count_char str c =
  match str with
  | "" -> 0 (* Base case: empty string has no occurrences *)
  | s -> if s.[0] = c then 1 + count_char (String.sub s 1 (String.length s - 1)) c
        else count_char (String.sub s 1 (String.length s - 1)) c (* Recursive case: checks first character and calls function on remaining string *)