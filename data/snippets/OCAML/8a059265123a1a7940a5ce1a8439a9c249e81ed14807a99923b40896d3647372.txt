(* This is a recursive function that computes the nth Fibonacci number *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | n when n > 1 -> fibonacci (n-1) + fibonacci (n-2)
  | _ -> failwith "Invalid input"

(* This function uses tail recursion to compute the nth Fibonacci number *)
let fibonacci_tail n =
  let rec fibonacci_helper a b count =
    match count with
    | 0 -> b
    | _ -> fibonacci_helper (a+b) a (count-1)
  in
  fibonacci_helper 1 0 n

(* This function implements quicksort algorithm on a given list *)
let rec quicksort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | pivot :: rest ->
      let rec partition left right = function
        | [] -> quicksort left @ (pivot :: quicksort right)
        | x :: xs -> if x < pivot then partition (x :: left) right xs
                           else partition left (x :: right) xs
  in partition [] [] rest