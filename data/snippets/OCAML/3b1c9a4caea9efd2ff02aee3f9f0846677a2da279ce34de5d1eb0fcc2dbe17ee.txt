(* Function to recursively compute the sum of a list of integers *)
let rec sum_list lst =
  match lst with
  | [] -> 0 (* Base case: an empty list has a sum of 0 *)
  | h::t -> h + sum_list t (* Add the head of the list to the sum of the tail *)

(* Function to calculate the factorial of a given positive integer *)
let rec factorial n =
  if n = 0 then 1 (* Base case: 0! = 1 *)
  else n * factorial (n-1) (* Recursive call to calculate (n-1)! *)

(* Function to check if a given string is a palindrome *)
let is_palindrome str =
  let rec aux i j =
    if i >= j then true (* Base case: if the indices have crossed, it is a palindrome *)
    else str.[i] = str.[j] && aux (i+1) (j-1) in (* Check if the characters at both indices are equal and advance the indices inward *)
  aux 0 (String.length str - 1) (* Call to recursive helper function *)

(* Function to find the maximum element in a list *)
let rec max_list lst =
  match lst with
  | [] -> None (* Base case: an empty list has no maximum element *)
  | [x] -> Some x (* If the list contains only one element, it is the maximum *)
  | h::t -> match max_list t with (* Recursive call to find the maximum of the tail *)
            | None -> None (* If the tail has no maximum, the maximum of the entire list is None *)
            | Some m -> if h > m then Some h else Some m (* If the head is larger than the maximum of the tail, it is the maximum, otherwise the maximum of the tail is still the maximum *)
  
(* Function to perform binary search on a sorted list *)
let rec binary_search lst target =
  let rec aux low high =
    if low > high then None (* Base case: if the indices have crossed, the target is not in the list *)
    else
      let mid = (low + high) / 2 in (* Calculate the midpoint of the list *)
      if lst.(mid) = target then Some mid (* If the midpoint is the target, return the index *)
      else if lst.(mid) < target then aux (mid+1) high (* If the target is larger than the midpoint, search the upper half of the list *)
      else aux low (mid-1) (* If the target is smaller than the midpoint, search the lower half of the list *)
  in
  aux 0 (Array.length lst - 1) (* Call to recursive helper function *)