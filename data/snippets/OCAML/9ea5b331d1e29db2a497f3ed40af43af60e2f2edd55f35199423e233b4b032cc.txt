(* An OCaml implementation of the quicksort algorithm *)

(* Function to partition a list into two sub-lists based on a pivot *)
let rec partition pivot lst left right =
    match lst with
    | [] -> (left, right)
    | hd::tl ->
        if hd < pivot then
            partition pivot tl (hd::left) right
        else
            partition pivot tl left (hd::right)

(* Function to sort a list using the quicksort algorithm *)
let rec quicksort lst =
    match lst with
    | [] -> []
    | [x] -> [x]
    | pivot::tl ->
        let (left, right) = partition pivot tl [] [] in
        (quicksort left) @ [pivot] @ (quicksort right)

(* Example usage *)
let lst = [5; 2; 8; 3; 1; 6; 4; 7]
let sorted_lst = quicksort lst

(* Output:
[1; 2; 3; 4; 5; 6; 7; 8]
*)