let rec merge_sort = function
    | [] -> []
    | [x] -> [x]
    | list ->
        let rec split left right = function
            | [] -> left, right
            | [x] -> x :: left, right
            | x :: y :: rest -> split (x :: left) (y :: right) rest
        in let left, right = split [] [] list
        in let rec merge left right =
            match left, right with
                | _, [] -> left
                | [], _ -> right
                | x :: xs, y :: ys ->
                    if x < y then x :: (merge xs right) else y :: (merge left ys)
        in let sorted_left = merge_sort left
        and sorted_right = merge_sort right
        in merge sorted_left sorted_right
(* This function performs a merge sort algorithm on a list of elements. 
 It recursively divides the list into smaller lists and then merges them back together in sorted order. 
 The result is a new list with all elements in sorted order. *)