(** A module to represent a binary search tree. **)

module BinarySearchTree : sig
  (** The type of a binary search tree. **)
  type 'a bst

  (** A function to create an empty binary search tree. **)
  val empty : 'a bst

  (** A function to insert a value into a binary search tree. **)
  val insert : 'a -> 'a bst -> 'a bst

  (** A function to determine if a binary search tree contains a certain value. **)
  val contains : 'a -> 'a bst -> bool

  (** A function to remove a value from a binary search tree. **)
  val remove : 'a -> 'a bst -> 'a bst
end = struct
  (** The type of a binary search tree. **)
  type 'a bst =
    | Empty
    | Node of 'a * 'a bst * 'a bst

  (** A function to create an empty binary search tree. **)
  let empty =
    Empty

  (** A function to insert a value into a binary search tree. **)
  let rec insert x t =
    match t with
    | Empty -> Node (x, Empty, Empty)
    | Node (y, left, right) ->
        if x < y then
          Node (y, insert x left, right)
        else if x > y then
          Node (y, left, insert x right)
        else
          t

  (** A function to determine if a binary search tree contains a certain value. **)
  let rec contains x t =
    match t with
    | Empty -> false
    | Node (y, left, right) ->
        if x < y then
          contains x left
        else if x > y then
          contains x right
        else
          true

  (** A function to remove a value from a binary search tree. **)
  let rec remove x t =
    match t with
    | Empty -> Empty
    | Node (y, left, right) ->
        if x < y then
          Node (y, remove x left, right)
        else if x > y then
          Node (y, left, remove x right)
        else
          match right with
          | Empty -> left
          | Node (_, _, _) ->
              let successor = minimum right in
              Node (successor, left, remove successor right)

  (** A helper function to find the minimum value in a binary search tree. **)
  let rec minimum t =
    match t with
    | Empty -> failwith "Empty tree"
    | Node (x, left, _) ->
        match left with
        | Empty -> x
        | Node (_, _, _) ->
            minimum left
end