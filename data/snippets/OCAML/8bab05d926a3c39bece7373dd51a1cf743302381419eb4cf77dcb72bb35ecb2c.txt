(* This is a function that takes in a list of integers and returns a list containing the squares of all the elements *)

let square_list (lst: int list) : int list =

  (* Helper function to calculate the square of a single integer *)
  let square (x: int) : int =
    x * x
  in

  (* Recursive function to square all the elements in the list *)
  let rec helper (acc: int list) (lst: int list) : int list =
    match lst with
    | [] -> acc (* Return accumulated list when all elements have been processed *)
    | h :: t -> helper (square h :: acc) t (* Square the head of the list and add it to the accumulated list, then call helper function with updated list *)
  in

  helper [] lst (* Call helper function with an empty list to begin with *)

(* Testing the function with a sample list, output should be [1; 4; 9; 16; 25] *)
square_list [1; 2; 3; 4; 5]