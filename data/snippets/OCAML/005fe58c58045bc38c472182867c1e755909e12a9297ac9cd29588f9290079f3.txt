(* This is a function that takes in two integers and returns their sum. *)

let sum (x: int) (y: int) : int =
  x + y

(* This is a higher-order function that takes in a binary operation
   and two integers, and applies the operation to the two integers. *)

let binary_op (op: int -> int -> int) (x: int) (y: int) : int =
  op x y

(* This is a function that takes in a list of integers and an initial value,
   and recursively applies a given function to each element in the list, starting
   with the initial value. *)

let rec list_fold (f: int -> int -> int) (lst: int list) (init: int) : int =
  match lst with
  | [] -> init
  | hd::tl -> f hd (list_fold f tl init)

(* This is a list of integers that will be used to test the list_fold function. *)
let test_lst = [1;2;3;4;5]

(* This is a function that takes in two integers and returns their product. *)
let mult (x: int) (y: int) : int =
  x * y

(* This is a variable that stores the result of applying the binary_op function
   to the mult function and the test_lst list. *)
let result = binary_op mult test_lst 1

(* This is a print statement that outputs the final result. *)
print_endline (string_of_int result)