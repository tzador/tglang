(* A simple example function in OCaml that calculates the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n - 1);;

(* This function uses tail recursion to avoid stack overflow for large numbers *)
let factorial_tail n =
  let rec fact_helper n acc =
    if n = 0 then acc
    else fact_helper (n-1) (n*acc)
  in
  fact_helper n 1;;

(* An example of using pattern matching to handle different cases *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n-1) + fibonacci (n-2);;

(* A function that applies a given function to all elements in a list *)
let rec map f lst =
  match lst with
  | [] -> []
  | x :: xs -> f x :: map f xs;;

(* A function that sorts a list using insertion sort algorithm *)
let rec insert x lst =
  match lst with
  | [] -> [x]
  | h :: t -> if x <= h then x :: h :: t else h :: insert x t;;

let rec sort lst =
  match lst with
  | [] -> []
  | h :: t -> insert h (sort t);;