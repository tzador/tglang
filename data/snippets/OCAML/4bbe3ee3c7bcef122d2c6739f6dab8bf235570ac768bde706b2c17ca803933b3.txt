(* This is a comment in OCAML language *)

(* This function takes in two integer parameters and returns their sum *)
let sum x y = x + y 

(* This function takes in a list of strings and concatenates them into one string *)
let concat_strings strs = 
    List.fold_left (fun acc str -> acc ^ str) "" strs

(* This is a recursive function that finds the factorial of a given number *)
let rec factorial n = 
    if n < 0 then invalid_arg "n must be non-negative" 
    else if n = 0 then 1 
    else n * factorial (n - 1)

(* This is a polymorphic data type that can hold either an integer or a string value *)
type int_or_string = 
    | Int of int 
    | Str of string

(* This is a higher-order function that takes in a function as a parameter and applies it to a given value *)
let apply_to x f = f x

(* This is a function that takes in a list and checks if each element is a positive integer, returning a boolean *)
let check_positive_integers lst = 
    List.for_all (fun x -> x > 0) lst

(* This is an example of pattern matching, converting degrees in celsius to fahrenheit *)
let convert degrees unit = 
    match unit with
        | "C" -> degrees * 1.8 + 32.0
        | "F" -> (degrees - 32.0) * (5.0/9.0)
        | _ -> 0.0 (* default case if unit is not specified *)