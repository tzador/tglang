(** This is a custom datatype for a binary tree with labeled nodes **)
type 'a binary_tree =
  | Empty (* represents an empty tree *)
  | Node of 'a * 'a binary_tree * 'a binary_tree (* represents a node with a value and two children *)
;;

(** This function inserts a value into a binary tree by traversing the tree and finding the correct position to insert **)
let rec insert (x: 'a) (tree: 'a binary_tree) : 'a binary_tree =
  match tree with
  | Empty -> Node (x, Empty, Empty) (* if tree is empty, insert the value as the root node *)
  | Node (value, left, right) ->
    if x < value then (* value is less than current node, insert on the left subtree *)
      Node (value, insert x left, right)
    else (* value is greater than or equal to current node, insert on the right subtree *)
      Node (value, left, insert x right)
;;

(** This function checks if a value is present in a binary tree by traversing the tree and searching for the value **)
let rec contains (x: 'a) (tree: 'a binary_tree) : bool =
  match tree with
  | Empty -> false (* value is not present if tree is empty *)
  | Node (value, left, right) ->
    if x = value then true (* value is found if it equals the current node *)
    else if x < value then contains x left (* search the left subtree if value is less than current node *)
    else contains x right (* search the right subtree if value is greater than current node *)
;;