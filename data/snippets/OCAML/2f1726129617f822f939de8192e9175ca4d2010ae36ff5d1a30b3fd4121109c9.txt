(* Module for creating a binary search tree in OCAML *)

(* Define the type for a binary search tree with 'a as the data type *)
type 'a tree =
| Node of 'a tree * 'a * 'a tree
| Leaf

(* Function to insert a value into the binary search tree *)
let rec insert x = function
| Leaf -> Node (Leaf, x, Leaf) (* If tree is empty, insert value as root *)
| Node (left, y, right) as tree ->
if x = y then tree (* If value is equal to current node, do not insert *)
else if x < y then Node (insert x left, y, right) (* If value is less than current node, insert into left subtree *)
else Node (left, y, insert x right) (* If value is greater than current node, insert into right subtree *)

(* Function to check if a value is present in the binary search tree *)
let rec mem x = function
| Leaf -> false (* If tree is empty, value is not present *)
| Node (left, y, right) ->
if x = y then true (* If value is equal to current node, value is present *)
else if x < y then mem x left (* If value is less than current node, check left subtree *)
else mem x right (* If value is greater than current node, check right subtree *)

(* Example usage of the binary search tree module *)

(* Create an empty tree *)
let my_tree = Leaf

(* Insert values into the tree *)
let my_tree = insert 5 my_tree
let my_tree = insert 3 my_tree
let my_tree = insert 8 my_tree

(* Check if a value is present in the tree *)
let result = mem 3 my_tree (* Output: true *)