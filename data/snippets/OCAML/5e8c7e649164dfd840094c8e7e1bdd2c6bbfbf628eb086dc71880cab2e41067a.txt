(** This is a function that takes in a list of integers and returns the sum of 
    all odd numbers in the list *)

(* Declaring the function with the name "sum_odd" and parameter "nums" *)
let rec sum_odd nums = 
    (* Using pattern matching to check for empty list and base case *)
    match nums with
    | [] -> 0
    | x::xs -> 
        (* Checking if current number is odd using modulus operator *)
        if x mod 2 = 1 then
            (* If odd, add it to the sum of recursively passing in remaining list *)
            x + sum_odd xs
        else 
            (* If even, just recursively pass in remaining list *)
            sum_odd xs;;