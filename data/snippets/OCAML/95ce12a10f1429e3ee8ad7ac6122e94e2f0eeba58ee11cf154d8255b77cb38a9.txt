(* function that recursively calculates the factorial of a given integer *)

(* type declaration for an integer *)
type int =
  | Zero                 (* represents the integer 0 *)
  | Succ of int          (* represents the successor of an integer *)

(* function that checks if an integer is equal to Zero *)
let is_zero x =
  match x with
  | Zero -> true
  | _ -> false

(* function that calculates the factorial of an integer *)
let rec factorial x =
  if is_zero x then Zero
  else if is_zero (Succ x) then Succ Zero
  else mult (Succ x) (factorial (Succ x))
 
(* helper function to multiply two integers *)
let mult x y =
  let rec mult_helper x y z =
    if is_zero y then z
    else mult_helper x (Succ y) (add x z)
  in mult_helper x y Zero

(* function that adds two integers *)
let rec add x y =
  match x with
  | Zero -> y
  | Succ x' -> Succ (add x' y)

(* output: calculate the factorial of 5 *)
factorial (Succ (Succ (Succ (Succ (Succ Zero)))))