(** Type definition for a binary tree, where the nodes can hold integers or strings.
    Provides functions for inserting and searching values in the tree.*)

type 'a binary_tree =
  | Leaf
  | Node of 'a binary_tree * 'a * 'a binary_tree

(** [insert value tree] inserts [value] into [tree] in the correct position according to its
    type comparator.*)
let rec insert value tree =
  match tree with
  | Leaf -> Node (Leaf, value, Leaf)
  | Node (left, v, right) ->
      if value < v then
        Node (insert value left, v, right)
      else
        Node (left, v, insert value right)

(** [search value tree] searches for [value] in [tree] and returns true if found, false
    otherwise.*)
let rec search value tree =
  match tree with
  | Leaf -> false
  | Node (left, v, right) ->
      if value = v then
        true
      else if value < v then
        search value left
      else
        search value right

(* Example usage *)

(* Create a binary tree of integers *)
let int_tree = Node (Leaf, 5, Node (Leaf, 3, Node (Leaf, 7, Leaf)))

(* Insert a value *)
let updated_int_tree = insert 4 int_tree

(* Search for a value *)
let result = search 3 updated_int_tree

(* Output: true *)