let rec quicksort lst =      (* Defines a recursive function called "quicksort" that takes in a list as its argument *)
  match lst with             (* Checks the pattern of the list, if it is empty or contains only one element, it returns the list as it is *)
  | [] -> []                 
  | [x] -> [x]
  | pivot :: rest ->         (* If the list has more than one element, we set the first element as the pivot *)
    let lesser, greater = List.partition (fun y -> y < pivot) rest   (* Partitions the remaining elements in the list based on whether they are lesser or greater than the pivot *)
    quicksort lesser @ [pivot] @ quicksort greater                  (* Recursively calls the quicksort function on the lesser and greater lists and combines them with the pivot in between *)
;;