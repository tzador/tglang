(* Function to recursively calculate the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1)

(* Function to find the minimum element in a list of integers *)
let rec find_min l =
  match l with
  | [] -> failwith "Empty list"
  | [x] -> x
  | hd::tl -> min hd (find_min tl)

(* Function to merge two sorted lists in ascending order *)
let rec merge_lists lst1 lst2 =
  match lst1, lst2 with
  | [], lst -> lst
  | lst, [] -> lst
  | (hd1::tl1 as l1), (hd2::tl2 as l2) ->
    if hd1 < hd2 then hd1 :: (merge_lists tl1 l2)
    else hd2 :: (merge_lists l1 tl2)
  
(* Function to perform binary search on a sorted list *)
let rec binary_search n lst =
  match lst with
  | [] -> false
  | [x] -> x = n
  | lst ->
    let middle = List.length lst / 2 in
    let left_half = List.sub lst 0 middle in
    let right_half = List.sub lst middle (List.length lst - middle) in
    if n < List.nth lst middle then binary_search n left_half
    else binary_search n right_half

(* Function to create a higher order function that takes in a function and a list and applies the function to each element in the list *)
let rec map f lst =
  match lst with
  | [] -> []
  | hd::tl -> (f hd) :: (map f tl)

(* Function to calculate the nth Fibonacci number using dynamic programming *)
let calculate_nth_fib n =
  let rec fib_table = [|0; 1|] in
  let rec fib n =
    if n = 0 then fib_table.(0)
    else if n = 1 then fib_table.(1)
    else 
      let result = fib_table.(n - 1) + fib_table.(n - 2) in
      fib_table.(n) <- result;
      result
  in
  fib n

(* Function to find the longest common subsequence between two strings *)
let rec longest_common_subsequence str1 str2 =
  let m = String.length str1 in
  let n = String.length str2 in
  Array.make_matrix (m+1) (n+1) 0
  |> Array.iteri (fun i row ->
      Array.iteri (fun j _ ->
        if i = 0 || j = 0 then ()
        else if str1.[i-1] = str2.[j-1] then row.(j) <- 1 + (Array.get row (j - 1))
        else row.(j) <- max (Array.get row (j - 1)) (Array.get row j)
      ) row
    );
  let lcs_length = Array.get (Array.get matrix m) n in
  let i = ref m in
  let j = ref n in
  let lcs = Array.make lcs_length ' ' in
  while !i > 0 && !j > 0 do
    if str1.[!i - 1] = str2.[!j - 1] then
      begin
        lcs.(lcs_length - 1) <- str1.[!i - 1];
        i := !i - 1;
        j := !j - 1;
        lcs_length := lcs_length - 1;
      end
    else if (Array.get (Array.get matrix !i) (!j - 1)) > (Array.get (Array.get matrix (!i - 1)) !j) then
      j := !j - 1
    else
      i := !i - 1
  done;
  String.of_seq (Seq.of_array lcs);;