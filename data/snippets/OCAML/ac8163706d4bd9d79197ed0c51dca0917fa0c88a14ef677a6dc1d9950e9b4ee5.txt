(* This function takes in a list of integers and returns the sum of all the positive numbers in the list *)
let rec sum_positive (lst : int list) : int =
  match lst with
  | [] -> 0
  | x :: xs -> if x > 0 then x + sum_positive xs else sum_positive xs

(* This function takes in a string and checks if it is a palindrome (read the same backward as forward) *)
let is_palindrome (str : string) : bool =
  let reverse_str = String.map (fun c -> c) (String.rev str) in
  if String.compare str reverse_str == 0 then true else false

(* This function takes in a list of strings and a string to search for, and returns a list of all strings that contain the search string *)
let rec contains_string (search : string) (lst : string list) : string list =
  match lst with
  | [] -> []
  | x :: xs ->
      if String.contains x search then x :: contains_string search xs else contains_string search xs

(* This function takes in a list of integers and a function, and returns a new list where the function has been applied to each element *)
let rec map (f : int -> int) (lst : int list) : int list =
  match lst with
  | [] -> []
  | x :: xs -> f x :: map f xs

(* This function takes in a list of strings and returns the first letter of each string in a new list *)
let rec first_letters (lst : string list) : char list =
  match lst with
  | [] -> []
  | x :: xs -> String.get x 0 :: first_letters xs

(* This function takes in a list of integers and returns a new list with only the unique elements *)
let rec remove_duplicates (lst : int list) : int list =
  let rec contains (x : int) (lst : int list) : bool =
    match lst with
    | [] -> false
    | y :: ys -> if x = y then true else contains x ys in
  match lst with
  | [] -> []
  | x :: xs -> if contains x xs then remove_duplicates xs else x :: remove_duplicates xs