(* Function to reverse a list *)
let rec reverse (list: 'a list): 'a list =
  match list with
  | [] -> []
  | hd :: tl -> reverse tl @ [hd]

(* Function to check if a binary tree is balanced *)
type 'a btree = 
  | Empty
  | Node of 'a * 'a btree * 'a btree

let rec height (tree: 'a btree): int =
  match tree with
  | Empty -> 0
  | Node (_, left, right) -> 1 + max (height left) (height right)

let is_balanced (tree: 'a btree): bool =
  match tree with
  | Empty -> true
  | Node (_, left, right) ->
    let left_height = height left and right_height = height right in
    abs (left_height - right_height) <= 1 && is_balanced left && is_balanced right

(* Example usage *)
let tree1 = Node (1, Node (2, Node (4, Empty, Empty), Empty), Node (3, Empty, Empty))
let tree2 = Node (1, Node (2, Node (4, Empty, Empty), Node (5, Empty, Empty)), Node (3, Empty, Empty))
print_bool (is_balanced tree1) (* true *)
print_bool (is_balanced tree2) (* false *)