(** Implements the QuickSort algorithm using functional programming in OCaml *)

(** Partition function that separates a list into two sublists based on a pivot element *)
let rec partition list pivot = 
  match list with
  | [] -> ([],[])
  | hd :: tl -> 
      let (smaller, larger) = partition tl pivot in
      if hd < pivot then (hd :: smaller, larger) else (smaller, hd :: larger)

(** QuickSort function that uses the partition function to recursively sort a list *)
let rec quicksort list = 
  match list with 
  | [] -> []
  | [x] -> [x]
  | pivot :: tl -> 
      let (smaller, larger) = partition tl pivot in
      let sorted_smaller = quicksort smaller in
      let sorted_larger = quicksort larger in
      sorted_smaller @ [pivot] @ sorted_larger

(** Example list to be sorted *)
let list_to_sort = [4;1;8;2;5;3;7;9;6]

(** Printing the sorted list using QuickSort *)
print_endline "Unsorted List: ";
List.iter (fun x -> print_int x; print_string " ") list_to_sort;
print_endline "\nSorted List: ";
List.iter (fun x -> print_int x; print_string " ") (quicksort list_to_sort);

(** Output:
Unsorted List: 4 1 8 2 5 3 7 9 6
Sorted List: 1 2 3 4 5 6 7 8 9
*)