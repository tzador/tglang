(* This is a function that takes in a list of integers and returns a new list with the inputted integers multiplied by 2 *)
let multiply_by_two (input_list:int list) : int list = 
    let rec helper acc = function
        | [] -> List.rev acc
        | x::xs -> helper ((x*2)::acc) xs
    in helper [] input_list

(* This is a function that calculates the factorial of a given integer using recursion *)
let rec factorial (n:int) : int = 
    if n <= 1 then 1
    else n * factorial (n-1)

(* This is a function that returns the nth Fibonacci number using dynamic programming *)
let fibonacci (n:int) : int = 
    let rec helper a b = function
        | 0 -> a
        | 1 -> b
        | n -> helper b (a+b) (n-1)
    in helper 0 1 n

(* This is a higher order function that takes in a function and returns a new function that applies the inputted function to each element in a list *)
let map (f:'a -> 'b) (lst:'a list) : 'b list =
    let rec helper acc = function
        | [] -> List.rev acc
        | x::xs -> helper ((f x)::acc) xs
    in helper [] lst

(* This is a function that calculates the sum of all odd numbers from 1 to n using tail recursion *)
let sum_odds (n:int) : int =
    let rec helper acc = function
        | 0 -> acc
        | n when n mod 2 = 0 -> helper acc (n-1)
        | n -> helper (acc+n) (n-2)
    in helper 0 n