(* This is a function that takes in a list of integers and returns the sum of all the even numbers in the list *)
let rec sum_even list = match list with (* `rec` keyword signifies that this function is recursive *)
  | [] -> 0 (* If the list is empty, return 0 as the sum of even numbers *)
  | x::xs -> if x mod 2 = 0 then x + sum_even xs else sum_even xs (* If the first element of the list is even, add it to the sum and recursively call the function on the rest of the list. If the first element is odd, just recursively call the function on the rest of the list without adding it to the sum *)
  in
  sum_even [1;2;3;4;5] (* Call the function `sum_even` with the list [1;2;3;4;5], which should return 6 since 2 and 4 are even numbers *)