(* This is a function in OCaml that reverses a list recursively *)

let rec reverse_list lst = (* Defines a recursive function named reverse_list *)
  match lst with         (* Begins a pattern matching statement *)
  | [] -> []             (* Matches an empty list (base case) and return an empty list *)
  | hd::tl ->            (* Matches a list with a head (hd) and tail (tl) *)
    (reverse_list tl)@[hd] (* Calls the function on the tail and appends the head to the end *)
                          (* This effectively reverses the list *)
                          
(* Example usage of the function *)
let lst = [1;2;3;4;5]    (* Defines a list of integers *)
let rev_lst = reverse_list lst (* Calls the function on the list and assigns the reversed list to a variable *)
(* Prints the list before and after reversing *)
print_endline ("Original list: " ^ (String.concat ", " (List.map string_of_int lst)));
print_endline ("Reversed list: " ^ (String.concat ", " (List.map string_of_int rev_lst)));

(* Output:
Original list: 1, 2, 3, 4, 5
Reversed list: 5, 4, 3, 2, 1 *)