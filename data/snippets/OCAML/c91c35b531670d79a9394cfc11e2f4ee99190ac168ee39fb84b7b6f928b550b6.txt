(* This is a recursive function that calculates the Fibonacci sequence up to n terms *)
let rec fibonacci (n : int) : int list =
  if n <= 1 then [0; 1] (* base case *)
  else 
    let prev = fibonacci (n - 1) in (* recursive call *)
    let last_two = List.hd prev, List.hd (List.tl prev) in (* get the last two numbers in the previous list *)
    last_two :: (List.hd prev + List.hd (List.tl prev)) :: prev (* concatenate the last two numbers with the previous list *)

(* Example: Fibonacci sequence up to 10 terms *)
fibonacci 10 (* output: [0; 1; 1; 2; 3; 5; 8; 13; 21; 34; 55] *)