(* This code snippet is a factorial function written in OCAML, using recursion *)
(* Function name: factorial 
 * Parameter: an integer
 * Return value: the factorial of the given integer
 *)
let rec factorial n =                                      (* defining the factorial function using recursion *)
  if n = 0 then 1 else n * factorial(n - 1)                (* base case: if n = 0, then factorial is 1 *)
  else n * factorial(n - 1)                                (* recursive case: n * factorial(n - 1) *)
;;
factorial 10;;                                             (* function call to test the factorial function *)
(* Output: 
  ----------------------------------------------------------------------------
  val factorial : int -> int = <fun>
  - : int = 3628800
  ----------------------------------------------------------------------------
  The function factorial now has a type signature of int -> int, indicating that it takes an integer parameter and returns an integer value.
  The output of factorial 10 is 3628800, which is the factorial of 10.
  This code snippet demonstrates the use of recursion in OCAML, which is a common technique in functional programming languages.
  Recursion allows for elegant and concise solutions for problems that involve repetitive computations, such as factorial.
 *)