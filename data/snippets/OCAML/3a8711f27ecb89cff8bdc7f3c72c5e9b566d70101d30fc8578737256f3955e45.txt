(* This is a function that takes in a list of integers and returns a tuple containing the total sum and maximum value in the list. *)

let rec sum_and_max lst =
    (* Initialize variables to keep track of sum and maximum value *)
    let sum = ref 0 in
    let max_val = ref min_int in
    (* Recursive helper function to iterate through the list *)
    let rec helper lst =
        match lst with
        | [] -> ()       (* Base case: empty list, do nothing *)
        | hd::tl ->      (* Recursive case: update sum and max_val *)
            sum := !sum + hd;
            if hd > !max_val then max_val := hd;
            helper tl    (* Call helper function on remaining list *)
    in 
    (* Call helper function on original list *)
    helper lst;
    (* Return tuple with sum and max_val *)
    (!sum, !max_val)

(* Call function with sample list and print output *)
let result = sum_and_max [4; 8; -2; 10; 5] in
Printf.printf "Sum: %d, Max: %d" (fst result) (snd result);;