(* This is a function that takes two integer parameters and returns the sum of their squares. *)
let sumOfSquares (x: int) (y: int): int =
    let squareX = x * x in
    let squareY = y * y in
    let sum = squareX + squareY in
        sum

(* This is a recursive function that calculates the factorial of a given number. *)
let rec factorial (n: int): int =
    if n = 0 then 1
    else n * factorial (n - 1)

(* This is a record type that represents a person with a name and age. *)
type person = {
    name: string;
    age: int;
}

(* This is a function that takes in a list of people and returns the average age. *)
let averageAge (people: person list): float =
    let rec sumAges (people: person list) (acc: int): int =
        match people with
        | [] -> acc
        | {name; age} :: rest -> sumAges rest (acc + age)
    let total = sumAges people 0 in
        float_of_int total /. float_of_int (List.length people)

(* This is an example usage of the above functions. *)
let averageJohnMary = averageAge [{name = "John"; age = 32}; {name = "Mary"; age = 28}]