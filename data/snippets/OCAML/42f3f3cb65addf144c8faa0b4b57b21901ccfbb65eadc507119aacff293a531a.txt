(** A function that takes in a list and returns the sum of all elements *)
let rec sum lst =
  match lst with
  | [] -> 0
  | hd::tl -> hd + sum tl

(* A recursive function that calculates the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1)

(* A function that checks if a number is prime *)
let is_prime num =
  let rec check_divisor divisor =
    if divisor = 1 then true
    else if num mod divisor = 0 then false
    else check_divisor (divisor-1)
  in
  check_divisor (num-1)

(* A function that maps a function onto a list and returns the resulting list *)
let map f lst =
  let rec helper acc lst =
    match lst with
    | [] -> List.rev acc
    | hd::tl -> helper (f hd :: acc) tl
  in
  helper [] lst

(* A function that merges two sorted lists into a single sorted list *)
let rec merge lst1 lst2 =
  match lst1, lst2 with
  | [], l | l, [] -> l
  | hd1::tl1, hd2::tl2 ->
    if hd1 < hd2 then hd1 :: merge tl1 lst2 else hd2 :: merge lst1 tl2

(* A function that implements binary search on a sorted list *)
let rec binary_search lst target =
  match lst with
  | [] -> false
  | hd::tl ->
    let mid = List.length lst / 2 in
    if hd = target then true
    else if hd < target then binary_search (List.take mid tl) target
    else binary_search (List.drop mid tl) target