(* function to sort a list using merge sort algorithm *)
let rec merge_sort lst =
  match lst with
  (* base case: empty list or list with one element is already sorted *)
  | [] -> []
  | [x] -> [x]
  (* recursive case: split the list in half and merge the sorted halves *)
  | lst -> let half = List.length lst / 2 in
           let left = List.sub lst 0 half in
           let right = List.sub lst half (List.length lst - half) in
           merge (merge_sort left) (merge_sort right)

(* function to merge two sorted lists *)
and merge left right =
  (* we use match to handle different cases *)
  match (left, right) with
  (* if either list is empty, return the other list *)
  | ([], []) -> []
  | ([], right) -> right
  | (left, []) -> left
  (* otherwise, compare the first elements of both lists and add the smaller one to the merged list *)
  | (x::xs, y::ys) -> if x <= y then x :: merge xs right else y :: merge left ys

(* example usage *)
merge_sort [5;2;9;1;7;4;3]  (* output: [1;2;3;4;5;7;9] *)