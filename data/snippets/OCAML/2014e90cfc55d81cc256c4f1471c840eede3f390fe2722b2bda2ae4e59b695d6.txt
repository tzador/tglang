(* This is a function that takes in a string and returns a list of tuples containing the count of each letter in the string along with the corresponding letter. *)

let countLetters str = 
  (* Convert string to list of characters *)
  let chars = List.of_seq (String.to_seq str) in 
  
  (* Function that iterates through list to count each letter *)
  let rec countLettersHelper chars freqList = 
    match chars with 
    | [] -> freqList 
    | hd :: tl -> 
      (* Check if current letter is already in frequency list *)
      let count = try List.assoc hd freqList with Not_found -> 0 in 
        
        (* Update frequency list with new count for current letter *)
        let updatedFreqList = (hd, count + 1) :: List.remove_assoc hd freqList in 
        
        (* Recursive call with remaining list of characters and updated frequency list *)
        countLettersHelper tl updatedFreqList in 
  
  (* Convert frequency list to sorted list of tuples in descending order *)
  let sortedFreqList = List.sort (fun (_, count1) (_, count2) -> -compare count1 count2) (countLettersHelper chars []) in 

  (* Map and print each tuple in sorted list as formatted string *)
  List.map (fun (letter, count) -> Printf.sprintf "%d occurrences of %c" count letter) sortedFreqList