type 'a binary_tree = Empty | Node of 'a * 'a binary_tree * 'a binary_tree

let rec traverse_inorder tree =
  match tree with
  | Empty -> []
  | Node (v, left, right) -> (traverse_inorder left) @ [v] @ (traverse_inorder right)
  
let rec traverse_preorder tree =
  match tree with
  | Empty -> []
  | Node (v, left, right) -> [v] @ (traverse_preorder left) @ (traverse_preorder right)

let rec traverse_postorder tree =
  match tree with
  | Empty -> []
  | Node (v, left, right) -> (traverse_postorder left) @ (traverse_postorder right) @ [v]
  
let rec sum tree =
  match tree with
  | Empty -> 0
  | Node (v, left, right) -> v + (sum left) + (sum right)
  
let rec map f tree =
  match tree with
  | Empty -> Empty
  | Node (v, left, right) -> Node (f v, map f left, map f right)
  
let rec fold f acc tree =
  match tree with
  | Empty -> acc
  | Node (v, left, right) -> f v (fold f acc left) (fold f acc right)

let rec print_inorder tree =
  match tree with
  | Empty -> ()
  | Node (v, left, right) ->
    print_inorder left;
    print_string (string_of_int v) ^ " ";
    print_inorder right;
    
let tree = Node(1, Node(2, Node(3, Empty, Empty), Node(4, Empty, Empty)), Node(5, Empty, Node(6, Empty, Empty)))

print_string "Inorder traversal: ";
print_inorder tree;
print_endline "";

let treeSum = sum tree;
print_string "Sum of values in tree: ";
print_int treeSum;
print_endline "";

let doubledTree = map (fun x -> x * 2) tree;

print_string "Doubled tree: ";
print_inorder doubledTree;
print_endline "";

let totalSum = fold (fun x y z -> x + y + z) 0 tree;

print_string "Sum of all values in tree using fold function: ";
print_int totalSum;
print_endline "";