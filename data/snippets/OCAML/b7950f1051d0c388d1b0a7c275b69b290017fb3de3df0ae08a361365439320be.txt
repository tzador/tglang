(* This is a function that takes in two integers and returns their sum *)
let add x y = 
  let sum = x + y in   (* store the sum in a variable *)
  print_endline("The sum of " ^ string_of_int(x) ^ " and " ^ string_of_int(y) ^ " is " ^ string_of_int(sum)); (* print the sum with string concatenation *)
  sum                  (* return the sum *)

(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n = 
  if n <= 1 then        (* base case: return 1 if n is less than or equal to 1 *)
    1
  else                  (* otherwise, multiply n by the factorial of n-1 *)
    n * factorial(n-1)

(* This is a function that checks if a number is prime *)
let is_prime n = 
  let rec check_prime m =    (* helper function to check if m is divisible by any number from 2 to m-1 *)
    if m < 2 then            (* if m is less than 2, it can't be prime *)
      false
    else if n mod m = 0 then (* if m divides n, n is not prime *)
      false
    else                     (* otherwise, check the next number *)
      check_prime(m - 1)
  if n < 2 then              (* a number less than 2 is not prime *)
    false
  else
    check_prime(n-1)         (* call the helper function from 2 to n-1 *)

(* This is a recursive function that generates the nth Fibonacci number *)
let rec fibonacci n = 
  if n <= 1 then                (* base case: return n if n is less than or equal to 1 *)
    n
  else                          (* otherwise, recursively call fibonacci for n-1 and n-2 and add them together *)
    fibonacci(n-1) + fibonacci(n-2)

(* This is a function that takes in a list of integers and returns the sum of all even numbers in the list *)
let sum_even lst = 
  let rec helper sum = function   (* helper function that takes a sum as an argument *)
    | [] -> sum                   (* if the list is empty, return the sum *)
    | x::xs ->                    (* otherwise, add x to the sum if it's even and recursively call helper for the rest of the list *)
      if x mod 2 = 0 then 
        helper (sum + x) xs 
      else 
        helper sum xs
  helper 0 lst                     (* start the sum at 0 and call the helper function with the list *)