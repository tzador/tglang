(* This is a module that implements a stack data structure using OCAML *)
module Stack =
  struct
    (* The type 'a is a polymorphic type that can hold values of any type *)
    type 'a stack =
      | Empty
      | Stack of 'a * 'a stack
	
    (* This function creates an empty stack *)
    let empty_stack = Empty
	
    (* This function checks if a given stack is empty or not *)
    let is_empty = function
      | Empty -> true
      | Stack _ -> false
	
    (* This function adds a new element to the top of the stack *)
    let push elem stack = Stack (elem, stack)
	
    (* This function returns the top element of the stack without removing it *)
    let peek = function
      | Empty -> failwith "Stack is empty"
      | Stack (elem, _) -> elem
	
    (* This function removes the top element from the stack and returns it along with the remaining stack *)
    let pop = function
      | Empty -> failwith "Stack is empty"
      | Stack (elem, stack) -> (elem, stack)
	
    (* This function recursively iterates through the stack and prints out each element in order *)
    let rec print_stack = function
      | Empty -> ()
      | Stack (elem, stack) ->
          print_endline ("Element: " ^ string_of_int elem);
          print_stack stack
  end

(* Example usage of the stack module *)
let int_stack = Stack.push 1 (Stack.push 2 (Stack.push 3 Stack.empty_stack))

(* Output: 'int_stack' is a stack equal to [3, 2, 1] *)

(* The elements in the stack can be accessed using peek and pop *)
let top_element = Stack.peek int_stack	(* Output: top_element = 3 *)

(* The top element can also be removed from the stack *)
let (removed_element, new_stack) = Stack.pop int_stack
(* Output: removed_element = 3, new_stack = [2, 1] *)

(* The stack can also be printed using the print_stack function *)
Stack.print_stack new_stack
(* Output: 'Element: 2' 
          'Element: 1' *)