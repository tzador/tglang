(* This is a comment in OCaml *)

(* This function takes in two integers and returns their sum *)
let sum x y = x + y

(* This is a function definition with pattern matching *)
let rec factorial = function
    | 0 -> 1
    | n -> n * factorial (n - 1)

(* This is a function that takes in a list of integers and returns a list of their squares *)
let rec square_list ls =
    match ls with
    | [] -> []
    | x::xs -> (x * x) :: square_list xs
    
(* This is a function that takes in an integer and a list of integers and checks if the integer is in the list *)
let rec is_in_list x ls =
    match ls with
    | [] -> false
    | y::ys when y = x -> true
    | _::ys -> is_in_list x ys

(* This function takes in a list of strings and concatenates them into one string *)
let rec concat_strings = function
    | [] -> ""
    | s::ls -> s ^ concat_strings ls
    
(* This is a recursive function that checks if a string is a palindrome *)
let rec is_palindrome s =
    match s with
    | "" -> true
    | _ -> let n = String.length s - 1 in
        s.[0] = s.[n] && is_palindrome (String.sub s 1 (n - 1))