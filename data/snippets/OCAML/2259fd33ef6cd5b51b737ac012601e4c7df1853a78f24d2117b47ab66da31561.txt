(* A binary search tree implementation in OCAML *)

type 'a bst =
  | Leaf
  | Node of 'a * 'a bst * 'a bst

(* Function to insert a value into the binary search tree *)
let rec insert (value: 'a) (tree: 'a bst) : 'a bst =
  match tree with
    | Leaf -> Node (value, Leaf, Leaf)
    | Node (v, left, right) ->
        if value < v then
          Node (v, insert value left, right)
        else
          Node (v, left, insert value right)

(* Function to check if a value is in the binary search tree *)
let rec contains (value: 'a) (tree: 'a bst) : bool =
  match tree with
    | Leaf -> false
    | Node (v, left, right) ->
        if value = v then
          true
        else if value < v then
          contains value left
        else
          contains value right

(* Function to remove a value from the binary search tree *)
let rec remove (value: 'a) (tree: 'a bst) : 'a bst =
  match tree with
    | Leaf -> Leaf
    | Node (v, left, right) ->
        if value < v then
          Node (v, remove value left, right)
        else if value > v then
          Node (v, left, remove value right)
        else
          match (left, right) with
            | (Leaf, Leaf) -> Leaf
            | (Node (lv, lleft, lright), Leaf) -> Node (lv, remove_max lleft, Leaf)
            | (Leaf, Node (rv, rleft, rright)) -> Node (rv, Leaf, remove_min rright)
            | (Node (lv, lleft, lright), Node (rv, rleft, rright)) ->
                let max = remove_max lleft in
                Node (max, left, right)

(* Helper function to remove the maximum value from a binary search tree *)
and remove_max (tree: 'a bst) : 'a bst =
  match tree with
    | Leaf -> raise Not_found
    | Node (v, left, Leaf) -> left
    | Node (v, left, right) -> Node (v, left, remove_max right)

(* Helper function to remove the minimum value from a binary search tree *)
and remove_min (tree: 'a bst) : 'a bst =
  match tree with
    | Leaf -> raise Not_found
    | Node (v, Leaf, right) -> right
    | Node (v, left, right) -> Node (v, remove_min left, right)

(* Function to create a binary search tree from a list *)
let rec from_list (values: 'a list) : 'a bst =
  match values with
    | [] -> Leaf
    | hd :: tl -> insert hd (from_list tl)

(* Example usage *)
let tree = from_list [5; 2; 8; 1; 4; 6; 9]
let found = contains 4 tree
let removed_tree = remove 6 tree