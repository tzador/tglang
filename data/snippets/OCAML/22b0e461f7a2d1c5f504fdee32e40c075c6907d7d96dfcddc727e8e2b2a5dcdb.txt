(* This is a function that calculates the factorial of a given number *)
let rec factorial n = 
    if n < 0 then
        failwith "n cannot be negative"
    else if n = 0 then
        1
    else
        n * factorial (n - 1)

(* This is a function that calculates the nth number in the Fibonacci sequence *)
let rec fib n =
    if n <= 0 then
        failwith "n must be greater than 0"
    else if n = 1 then
        0
    else if n = 2 then
        1
    else
        fib (n - 1) + fib (n - 2)

(* This is a function that takes in two lists and returns the cartesian product of the two lists *)
let rec cartesian_product list1 list2 =
    match list1 with
    | [] -> []
    | h1 :: t1 -> 
        List.map (fun x -> (h1, x)) list2 @ cartesian_product t1 list2

(* This is a function that takes in a list of integers and returns the sum of all positive integers in the list *)
let rec sum_positive list =
    match list with
    | [] -> 0
    | h :: t -> if h > 0 then h + sum_positive t else sum_positive t

(* This is a function that takes in a list of strings and returns a list of strings with all letters converted to uppercase *)
let rec uppercase_list list =
    match list with
    | [] -> []
    | h :: t -> String.uppercase_ascii h :: uppercase_list t