(* This is a simple function to calculate the area of a circle given its radius *)
let calculate_area radius =
  let pi = 3.14 in (* define the constant value of pi *)
  pi *. (radius ** 2.0) (* multiply pi by the square of the radius to get the area *)

(* This is a recursive function to calculate the factorial of a number *)
let rec factorial num =
  if num <= 1 then 1 (* base case *)
  else num * factorial(num-1) (* recursive call to calculate the factorial of the number - 1 *)

(* This is a function that returns the nth number in the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* base case for the first number in the sequence *)
  | 1 -> 1 (* base case for the second number in the sequence *)
  | _ -> fibonacci(n-1) + fibonacci(n-2) (* recursive call to calculate the nth number in the sequence *)

(* This is a higher order function that takes in a function and an integer and applies the function to the integer *)
let apply_function func n = func(n) 

(* This is a function to check if a number is prime *)
let is_prime num =
  let rec check_divisors n =
    if n = 1 then true (* base case for when the number is only divisible by 1 *)
    else if num mod n = 0 then false (* if the number is divisible by any other number, it is not prime *)
    else check_divisors(n-1) (* recursive call to check all possible divisors *)
  in
  check_divisors(num-1) (* start the recursive call at num-1 to skip checking if it is divisible by itself *)
  
(* This is a function that takes in a list of numbers and returns the sum of all even numbers *)
let sum_even_numbers numbers =
  let rec helper acc list = (* helper function with an accumulator *)
    match list with
    | [] -> acc (* base case for an empty list, return accumulator value *)
    | h::t -> if h mod 2 = 0 then helper(acc+h) t else helper(acc) t (* if number is even, add it to accumulator, if not, continue without adding *)
  in
  helper 0 numbers (* start the helper function with an initial accumulator value of 0 and the list of numbers *)