(* This is a function that takes in two lists and merges them together into one sorted list *)
let rec merge_lists list1 list2 =
  match (list1, list2) with
  | [], [] -> []
  | [], list2 -> list2
  | list1, [] -> list1
  | head1::tail1, head2::tail2 -> 
      if (head1 < head2) then 
        head1 :: merge_lists tail1 list2 
      else
        head2 :: merge_lists list1 tail2

(* This is the main function that takes in a list of unsorted numbers and sorts them using merge sort *)
let rec merge_sort list =
  match list with
  | [] | [_] -> list
  | _ ->
      let first_half, second_half = split_list list in
      let sorted_first_half = merge_sort first_half in
      let sorted_second_half = merge_sort second_half in
      merge_lists sorted_first_half sorted_second_half

(* This function helps split a list into two halves *)
let rec split_list list =
  let rec split_acc acc1 acc2 = function
    | [] -> List.rev acc1, List.rev acc2
    | [x] -> List.rev (x :: acc1), List.rev acc2
    | x1::x2::xs -> split_acc (x1::acc1) (x2::acc2) xs
  in
  split_acc [] [] list

(* An example list of unsorted numbers *)
let unsorted_numbers = [5; 8; 1; 3; 2; 9; 7; 6; 4]

(* Call the merge_sort function on the unsorted list and print the sorted list *)
print_endline "Sorted List: ";;
let sorted_numbers = merge_sort unsorted_numbers in
print_endline (List.fold_left (fun acc x -> acc ^ ", " ^ string_of_int(x)) "" sorted_numbers)