(* This is a comment in OCAML *)
(* This code snippet creates a recursive function to calculate the sum of a list of integers *)

(* Function to calculate the sum of a list of integers *)
let rec sum_list l = 
    match l with         (* pattern matching to handle different cases *)
    | [] -> 0            (* empty list case *)
    | hd::tl -> hd + sum_list tl    (* add the head of list to the sum of the rest of the list *) 

(* Example calls *)
sum_list [1; 2; 3];;    (* returns 6 *)
sum_list [5; 10; 2];;    (* returns 17 *)
sum_list [0; -1; 4];;    (* returns 3 *)

(* This code snippet also uses currying to create a function that takes in a list of integers and an accumulator *)
(* The accumulator is used to keep track of the running sum *)
(* The second parameter is set to 0 as the initial value for the accumulator *)

(* Function to calculate the sum of a list of integers using currying *)
let rec sum_list_with_acc l acc = 
    match l with
    | [] -> acc          (* return the accumulator when the list is empty *)
    | hd::tl -> sum_list_with_acc tl (hd + acc)    (* add the head of list to the accumulator and recursively call the function with the remaining list *)

(* Example calls *)
sum_list_with_acc [1; 2; 3] 0;;    (* returns 6 *)
sum_list_with_acc [5; 10; 2] 0;;    (* returns 17 *)
sum_list_with_acc [0; -1; 4] 0;;    (* returns 3 *)

(* This code snippet also uses tail recursion to optimize the recursive function by removing extra stack frames *)
(* The accumulator is used to store the running sum *)
(* The third parameter is set to 0 as the initial value for the accumulator *)

(* Function to calculate the sum of a list of integers using tail recursion *)
let sum_list_tail_recursive l = 
    let rec aux acc = function    (* define an auxiliary function with accumulator defined inside *)
        | [] -> acc               (* return the accumulator when the list is empty *)
        | hd::tl -> aux (hd + acc) tl    (* add the head of list to the accumulator and recursively call the auxiliary function with the remaining list *)
    in aux 0 l;;    (* call the auxiliary function with initial value of 0 for the accumulator *)

(* Example calls *)
sum_list_tail_recursive [1; 2; 3];;    (* returns 6 *)
sum_list_tail_recursive [5; 10; 2];;    (* returns 17 *)
sum_list_tail_recursive [0; -1; 4];;    (* returns 3 *)