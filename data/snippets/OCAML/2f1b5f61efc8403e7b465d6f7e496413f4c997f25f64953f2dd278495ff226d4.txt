type t =
  | Element of int     (* integer element *)
  | Sequence of t list (* sequence of elements *)

(* function to add an integer to a sequence *)
(* input: integer x, sequence ys *)
(* output: sequence containing x followed by ys *)
let add x ys = Sequence (Element x :: ys)

(* function to remove the first occurrence of an integer from a sequence *)
(* input: integer x, sequence ys *)
(* output: sequence without the first occurrence of x from ys *)
let rec remove x = function
  | Element y :: ys when x = y -> ys
  | Sequence ys :: zs -> Sequence (remove x ys :: zs)
  | ys -> ys

(* function to merge two sequences *)
(* input: two sequences xs and ys *)
(* output: sequence containing elements from xs and then elements from ys *)
let rec merge xs ys =
  match xs, ys with
  | [], ys -> ys
  | xs, [] -> xs
  | Element x :: xs, _ ->
      add x (merge xs ys)
  | Sequence xs :: ys, _ ->
      Sequence (merge xs (remove temp ys))