(* Function that takes in a list and returns the sum of all odd numbers in the list *)
let rec sum_odd (lst: int list): int = 
  match lst with 
  | [] -> 0 (* base case: empty list returns 0 *)
  | h::t -> if h mod 2 = 1 then h + sum_odd t else sum_odd t (* recursive case: if current element is odd, add it to the sum of the rest of the list *)
  
sum_odd [1;2;3;4;5] (* output: 9 *)