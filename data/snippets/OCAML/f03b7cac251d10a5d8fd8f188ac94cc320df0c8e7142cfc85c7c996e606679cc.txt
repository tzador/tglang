type 'a seq = Nil | Cons of 'a * (unit -> 'a seq)

let rec take n s =
  match n, s with
  | 0, _ -> Nil
  | _, Nil -> Nil
  | n, Cons (a, f) -> Cons (a, fun () -> take (n - 1) (f ()))

let rec map f s =
  match s with
  | Nil -> Nil
  | Cons (a, g) -> Cons (f a, fun () -> map f (g ()))

let rec filter p s =
  match s with
  | Nil -> Nil
  | Cons (a, f) ->
      if p a then Cons (a, fun () -> filter p (f ()))
      else filter p (f ())

let rec zip s1 s2 =
  match s1, s2 with
  | Nil, | Nil -> Nil
  | Cons (a1, f1), Cons (a2, f2) -> Cons ((a1, a2), (fun () -> zip (f1 ()) (f2 ())))

let rec take_while p s =
  match s with
  | Nil -> Nil
  | Cons (a, f) ->
      if p a then Cons (a, fun () -> take_while p (f ()))
      else Nil