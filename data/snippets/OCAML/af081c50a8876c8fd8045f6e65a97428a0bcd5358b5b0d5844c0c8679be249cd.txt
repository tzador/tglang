(* This is a function that takes in two integers and returns the maximum of the two *)

let max a b =      (* Define the function with two integer parameters *)
  if a > b then    (* If statement to compare the two parameters *)
    a              (* Return a if a is greater than b *)
  else             (* Else statement for when a is not greater than b *)
    b              (* Return b otherwise *)

(* This is a recursive function that calculates the factorial of a given number *)

let rec factorial n =              (* Define the recursive function with one parameter *)
  if n = 1 then                     (* If statement for when parameter is 1 *)
    1                               (* Return 1 if n is 1 *)
  else                              (* Else statement for when n is not 1 *)
    n * factorial (n - 1)           (* Multiply n by the factorial of n-1 *)

(* This is a function that takes in a list of integers and returns the sum of all numbers in the list *)

let rec sum_list lst =             (* Define the recursive function with one parameter *)
  match lst with                   (* Use pattern matching to check for different cases *)
  | [] -> 0                        (* Case for empty list, return 0 *)
  | h::t -> h + sum_list t         (* Case for non-empty list, add head to the sum of tail *)

(* This is a function that takes in a string and checks if it is a palindrome*)

let is_palindrome str =
  let reversed = String.rev str in  (* Create a variable 'reversed' to hold the reversed string *)
  if str = reversed then           (* If statement to compare original string with reversed string *)
    true                            (* Return true if they are equal *)
  else                              (* Else statement when they are not equal *)
    false                           (* Return false otherwise *)

(* This is a function that finds the nth element in a given list *)

let rec find_nth lst n =           (* Define recursive function with two parameters: lst and n *)
  match lst with                   (* Pattern matching for different cases of the list *)
  | [] -> invalid_arg "nth"        (* Case for empty list, raise exception with message *)
  | h::t ->                        (* Case for non-empty list, use head and tail separately *)
    if n = 0 then                  (* If statement to check if we are at nth element *)
      h                            (* Return the head if so *)
    else                           (* Else statement when n is not 0 *)
      find_nth t (n-1)             (* Use recursion to move down the list and decrement n *)

(* This is a function that takes in a list and returns a new list with the positions of all even numbers in the original list *)

let position_of_even_numbers lst =
  let rec loop acc lst =           (* Define recursive function with two parameters: acc and lst*)
    match lst with                 (* Pattern matching for different cases of the list *)
    | [] -> acc                    (* Case for empty list, return accumulator *)
    | h::t ->                      (* Case for non-empty list, use head and tail separately *)
      if h mod 2 = 0 then          (* If statement to check if h is even *)
        loop (List.append acc [h]) t  (* Use List.append to add h to accumulator and move to tail *)
      else
        loop acc t                 (* Else statement, move to tail without adding h to accumulator *)
  in
  loop [] lst                      (* Call recursive function with empty accumulator and original list *)