(****************************************************) (* This is a multi-line comment in OCaml, surrounded by parentheses and asterisks. *)

(* Define a module named "Math" *)
module Math = struct
    (* Define a type called "operation" with 2 constructors, "Add" and "Multiply" *)
    type operation = Add | Multiply
    
    (* Define a function "operate" that takes 3 arguments: x, y, and op, with type int, int, and operation respectively *)
    let operate x y op =
        match op with
        | Add -> x + y (* Return x + y if the operation is "Add" *)
        | Multiply -> x * y (* Return x * y if the operation is "Multiply" *)
    
    (* Define a function "power" that takes 2 arguments: base and exponent, with type int *)
    let rec power base exponent =
        match exponent with
        | 0 -> 1 (* Return 1 if the exponent is 0 *)
        | _ -> base * power base (exponent - 1) (* Recursive call, multiplying base by itself (exponent-1) times *)
end

(* Use the "Math" module to add 5 and 3 *)
let sum = Math.operate 5 3 Math.Add

(* Print the result *)
print_int sum

(* Call the "power" function with a base of 2 and an exponent of 4 *)
let result = Math.power 2 4

(* Print the result *)
print_int result

(* Output:
8 
16
*)