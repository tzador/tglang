(*This is a function that takes in a list and a function and applies the function to each element in the list*)
let rec map f list =
  match list with
  | [] -> []
  | x :: xs -> (f x) :: (map f xs)

(*This is a function that takes in a list and returns a new list with only even numbers*)
let rec filter_even list =
  match list with
  | [] -> []
  | x :: xs ->
    if x mod 2 = 0 then x :: (filter_even xs)
    else filter_even xs

(*This is a function that takes in a list of strings and concatenates them into a single string*)
let rec concat_strings list =
  match list with
  | [] -> ""
  | x :: xs -> x ^ concat_strings xs

(*This is a function that takes in a list of integers and returns the sum of all elements*)
let rec sum list =
  match list with
  | [] -> 0
  | x :: xs -> x + sum xs