(* Function to calculate the nth fibonacci number using dynamic programming *)
let rec fib_dyn n =
  let cache = Array.make (n+1) 0 in
  let rec fib_aux n =
    if n <= 1 then n else (
      if cache.(n) = 0 then cache.(n) <- fib_aux (n-1) + fib_aux (n-2);
      cache.(n) ) in
  fib_aux n

(* Recursive function to calculate the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n-1)

(* Mutable Vector type with operations for adding, removing, and updating elements *)
type 'a vector = {
  mutable size : int;
  mutable arr : 'a array;
  mutable add : 'a -> unit;
  mutable remove : int -> unit;
  mutable update : int -> 'a -> unit;
}

(* Constructor function for creating a new vector *)
let new_vector () =
  { size = 0;
    arr = [||];
    add = (fun x -> ());
    remove = (fun _ -> ());
    update = (fun _ _ -> ()); }

(* RE definition for recognizing valid email addresses *)
let re_email =
  Re.Perl.re "^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,3}$"

(* Function to parse a JSON string and return a dictionary with the key-value pairs *)
let parse_json json_str =
  let json = Yojson.Basic.from_string json_str in
  let rec parse_dict dict =
    match dict with
    | `Assoc l -> List.fold_left (fun map (k, v) -> StringMap.add k (parse_value v) map) StringMap.empty l
    | _ -> raise (Invalid_argument "Not a valid JSON dictionary") in
  let parse_value value =
    match value with
    | `Bool b -> Bool b
    | `Float f -> Float f
    | `Int i -> Int i
    | `String s -> String s
    | `Assoc _ | `List _ as j -> Dictionary (parse_dict j)
    | _ -> raise (Invalid_argument "Not a valid JSON value") in
  parse_dict json