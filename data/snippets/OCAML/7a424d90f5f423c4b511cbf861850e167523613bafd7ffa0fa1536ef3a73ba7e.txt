(* This is a function that takes in a list of integers and returns a new list with
the absolute values of the original list *)

let abs_list list = 
    let rec helper lst acc = 
        match lst with
        | [] -> acc
        | x :: xs -> helper xs (abs x :: acc)
    in List.rev (helper list [])
;;
(* abs_list: int list -> int list
   Takes in a list of integers and returns a new list with the absolute values of the
   original list. *)
   
(* helper: int list -> int list -> int list
   Recursive helper function that takes in a list and an accumulator and returns
   a new list with the absolute values of the original list. *)

(* match: 'a list -> 'a list -> 'a list
   Takes in two lists and pattern matches them to determine whether the list is empty 
   or contains elements. *)

(* abs: int -> int
   Takes in an integer and returns its absolute value. *)

(* List.rev: 'a list -> 'a list
   Takes in a list and reverses its elements. *)

(* [1, -2, 3, -4, 5] 
   Output: [1, 2, 3, 4, 5]
   Example input list and output list for the function abs_list. *)