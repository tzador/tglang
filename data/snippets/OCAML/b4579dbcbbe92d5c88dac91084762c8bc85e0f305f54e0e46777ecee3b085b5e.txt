(* This is a recursive function that calculates the n-th term in the Fibonacci sequence. *)
let rec fib n =
  if n < 2 then n (* base case *)
  else (* recursive case *)
    fib (n-1) + fib (n-2)

(* This is a higher-order function that takes in a function f and an integer n, and applies f n times on the value x. *)
let rec apply_n_times f n x =
  if n <= 0 then x (* base case *)
  else apply_n_times f (n-1) (f x) (* recursive case *)

(* Calculating the sum of first 10 even Fibonacci numbers using the higher-order function. *)
let sum_of_even_fib =
  let rec aux n = (* this helper function generates even Fibonacci numbers *)
    let f = fib n in
    if f mod 2 = 0 then f else aux (n+1)
  in apply_n_times aux 10 0 (* applying the helper function 10 times on 0 and summing up *)

(* Output: 4613732 *)