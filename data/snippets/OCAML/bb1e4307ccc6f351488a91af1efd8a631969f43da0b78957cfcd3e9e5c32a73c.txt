(* This is a sample code snippet in OCaml *)

(* Function to find the nth Fibonacci number *)
let rec fibonacci(n) = 
    if n = 0 || n = 1 then 
        1 
    else 
        fibonacci(n-1) + fibonacci(n-2);;

(* Recursive function to calculate factorial *)
let rec factorial(n) = 
    if n = 0 then 
        1 
    else 
        n * factorial(n-1);;

(* Pattern matching for checking if a list is empty or not *)
let check_empty_list(list) = 
    match list with 
        [] -> "Empty list" 
        | _ -> "Non-empty list";;

(* Function to calculate the sum of a list *)
let rec sum_list(list) = 
    match list with 
        [] -> 0 
        | hd :: tl -> hd + sum_list(tl);;

(* Function to map a function over a list *)
let rec map_list(fn, list) = 
    match list with 
        [] -> [] 
        | hd :: tl -> fn(hd) :: map_list(fn, tl);;

(* Function to filter a list *)
let rec filter_list(fn, list) = 
    match list with 
        [] -> [] 
        | hd :: tl -> if fn(hd) then hd :: filter_list(fn, tl) else filter_list(fn, tl);;

(* Function to fold a list from left to right *)
let rec fold_left_list(fn, init, list) = 
    match list with 
        [] -> init 
        | hd :: tl -> fold_left_list(fn, fn(init, hd), tl);;

(* Function to fold a list from right to left *)
let rec fold_right_list(fn, init, list) = 
    match list with 
        [] -> init 
        | hd :: tl -> fn(hd, fold_right_list(fn, init, tl));;

(* Main function *)
let main() = 
    let nth_fibonacci = fibonacci(10);; (* Calculate 10th Fibonacci number *)
    let fact = factorial(5);; (* Calculate factorial of 5 *)
    let empty_list = check_empty_list([]);; (* Check if list is empty *)
    let non_empty_list = check_empty_list([1;2;3]);; (* Check if list is empty *)
    let sum = sum_list([1;2;3;4;5]);; (* Calculate sum of list *)
    let doubled_list = map_list((fun x -> 2 * x), [1;2;3;4]);; (* Double each element in list *)
    let even_list = filter_list((fun x -> x mod 2 = 0), [1;2;3;4;5]);; (* Filter even numbers in list *)
    let fold_left = fold_left_list((fun acc x -> acc + x), 0, [1;2;3;4;5]);; (* Fold list from left to right *)
    let fold_right = fold_right_list((fun x acc -> acc + x), 0, [1;2;3;4;5]);; (* Fold list from right to left *) 

(* Call main function *)
let _ = main();;