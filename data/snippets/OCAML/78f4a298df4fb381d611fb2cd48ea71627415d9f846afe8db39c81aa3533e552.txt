(* Helper function to merge two sorted lists *)

let rec mergeSortedList list1 list2 result =
  match (list1, list2) with
  | ([], []) -> result
  | (list1, []) -> result @ list1
  | ([], list2) -> result @ list2
  | (head1 :: tail1, head2 :: tail2) ->
    if head1 < head2 then
      mergeSortedList tail1 list2 (result @ [head1])
    else
      mergeSortedList list1 tail2 (result @ [head2])

(* Main merge sort function *)
(* This function takes in a list and recursively divides it into smaller sublists, then merges them *)

let rec mergeSort list =
  match list with
  | [] -> []
  | [x] -> [x]
  | list ->
    let halfLength = (List.length list) / 2 in
    let list1 = List.sub list 0 halfLength in
    let list2 = List.sub list halfLength (List.length list - halfLength) in
    let list1 = mergeSort list1 in
    let list2 = mergeSort list2 in
    mergeSortedList list1 list2 []

(* Example usage *)
let list = [5; 2; 7; 1; 9; 4; 3];;
mergeSort list;;