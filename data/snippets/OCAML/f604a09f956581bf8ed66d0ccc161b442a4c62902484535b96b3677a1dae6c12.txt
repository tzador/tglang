type expr =
| Int of int
| Bool of bool
| String of string
| Plus of expr * expr
| Minus of expr * expr
| Times of expr * expr
| Divide of expr * expr
| If of expr * expr * expr
| Let of string * expr * expr

let rec evaluate = function
| Int i -> i
| Bool b -> if b then 1 else 0
| String s -> String.length s
| Plus (e1, e2) -> (evaluate e1) + (evaluate e2)
| Minus (e1, e2) -> (evaluate e1) - (evaluate e2)
| Times (e1, e2) -> (evaluate e1) * (evaluate e2)
| Divide (e1, e2) -> (evaluate e1) / (evaluate e2)
| If (cond, then_expr, else_expr) -> if (evaluate cond) = 1 then (evaluate then_expr) else (evaluate else_expr)
| Let (var, value, rest) -> let var_value = evaluate value in evaluate (subst rest var var_value) 

and subst expr var value = 
match expr with
| Int i -> Int i
| Bool b -> Bool b
| String s -> String s
| Plus (e1, e2) -> Plus (subst e1 var value, subst e2 var value) 
| Minus (e1, e2) -> Minus (subst e1 var value, subst e2 var value)
| Times (e1, e2) -> Times (subst e1 var value, subst e2 var value)
| Divide (e1, e2) -> Divide (subst e1 var value, subst e2 var value)
| If (cond, then_expr, else_expr) -> If (subst cond var value, subst then_expr var value, subst else_expr var value)
| Let (var', value', rest') -> if var = var' then Let (var', subst value' var value, rest') else Let (var', subst value' var value, subst rest' var value)

let expression = Plus (Int 5, Times (Int 2, Int 3))
let evaluated = evaluate expression
(* evaluated = 11 *)

let conditional = If (Bool true, Plus (Int 1, Int 2), Minus (Int 5, Int 2))
let evaluated_conditional = evaluate conditional
(* evaluated_conditional = 3 *)

let variable = Let ("x", Int 5, Plus (Int 2, String "hello"))
let evaluated_variable = evaluate variable
(* evaluated_variable = 7 *)