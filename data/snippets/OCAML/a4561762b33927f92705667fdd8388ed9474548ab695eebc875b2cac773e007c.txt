(* Find inverse of a matrix using Gaussian elimination *) 
let matrix_inverse (matrix: float array array) = 
  let n = Array.length matrix in
  let identity = Array.make_matrix n n 0. in
  for i = 0 to n - 1 do 
    identity.(i).(i) <- 1.; 
  done;
  let augmented_matrix = Array.init n (fun j -> Array.init (2 * n) (
      fun i -> if i < n then matrix.(j).(i) else identity.(j).(i - n)
    )) in
  for i = 0 to n - 1 do
    let pivot = ref augmented_matrix.(i).(i) in
    for j = i + 1 to n - 1 do
      let ratio = augmented_matrix.(j).(i) /. !pivot in
      for k = 0 to 2 * n - 1 do
        augmented_matrix.(j).(k) <- augmented_matrix.(j).(k) -. ratio *. augmented_matrix.(i).(k)
      done
    done
  done;
  for i = n - 1 downto 0 do
    let pivot = augmented_matrix.(i).(i) in
    for j = i - 1 downto 0 do
      let ratio = augmented_matrix.(j).(i) /. pivot in
      augmented_matrix.(j).(n + i) <- augmented_matrix.(j).(n + i) -. ratio *. augmented_matrix.(i).(n + i);
      augmented_matrix.(j).(i) <- augmented_matrix.(j).(i) -. ratio *. pivot
    done;
    augmented_matrix.(i).(i) <- 1.; 
    for j = 0 to n - 1 do
      augmented_matrix.(i).(j) <- augmented_matrix.(i).(n + j)
    done
  done;
  Array.init n (fun i -> Array.init n (fun j -> augmented_matrix.(i).(j + n)))