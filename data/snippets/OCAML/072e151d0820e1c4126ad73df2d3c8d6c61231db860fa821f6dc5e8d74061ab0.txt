(* This code snippet uses OCaml's functional programming capabilities to implement a binary search tree *)

(* 
  In order to create a tree, we will define a type 'tree' with two possible values - Empty and Node. 
  Empty represents an empty tree while Node stores the data, left and right subtrees.
*)
type 'a tree = 
  | Empty
  | Node of 'a * 'a tree * 'a tree

(* 
  The insert function takes in a tree and a value to be inserted and returns a new tree with the value inserted at the correct position.
*)
let rec insert tree value = 
  match tree with
  | Empty -> Node(value, Empty, Empty)  (* If the tree is empty, create a new node with the value *)
  | Node(data, left, right) -> 
      if value < data then              (* If the value is less than the current node's data, insert it in the left subtree *)
        Node(data, (insert left value), right)
      else if value > data then         (* If the value is greater than the current node's data, insert it in the right subtree *)
        Node(data, left, (insert right value))
      else 
        tree                            (* If the value already exists in the tree, return the original tree *)

(* 
  The search function takes in a tree and a value to be searched and returns true if the value exists in the tree, else returns false.
*)
let rec search tree value = 
  match tree with
  | Empty -> false                     (* If the tree is empty, the value doesn't exist *)
  | Node(data, left, right) -> 
      if value = data then              (* If the value is equal to the current node's data, return true *)
        true
      else if value < data then         (* If the value is less than the current node's data, search the left subtree *)
        search left value
      else                              (* If the value is greater than the current node's data, search the right subtree *)
        search right value

(* 
  The delete function takes in a tree and a value to be deleted and returns a new tree with the value deleted.
*)
let rec delete tree value =
  match tree with
  | Empty -> Empty                     (* If the tree is empty, nothing to delete *)
  | Node(data, left, right) ->
      if value < data then              (* If the value is less than the current node's data, delete it in the left subtree *)
        Node(data, (delete left value), right)
      else if value > data then         (* If the value is greater than the current node's data, delete it in the right subtree *)
        Node(data, left, (delete right value))
      else 
        (* If the value is equal to the current node's data, we have three cases: *)
        match (left, right) with
        | (Empty, Empty) -> Empty            (* Case 1: If both subtrees are empty, just delete the current node *)
        | (Empty, _) -> right                (* Case 2: If the left subtree is empty, return the right subtree *)
        | (_, Empty) -> left                 (* Case 3: If the right subtree is empty, return the left subtree *)
        | (_, _) -> 
            (* Case 4: If both subtrees exist, we have to find the inorder successor of the current node *)
            let rec find_successor = function
              | Node(x, Empty, _) -> x        (* The inorder successor will either be the minimum value in the right subtree *)
              | Node(_, left, _) -> find_successor left
              | _ -> failwith "Invalid tree" 
            in let successor = find_successor right   (* Find the inorder successor in the right subtree *)
            in Node(successor, left, (delete right successor))  (* Replace the current node with the successor and delete the successor from the right subtree *)
            
(* An example of creating a tree with some values and deleting a value *)
let tree = Node(12, Empty, Empty)
let tree = insert tree 6
let tree = insert tree 20
let tree = insert tree 3
let tree = insert tree 9
let tree = insert tree 15
let tree = insert tree 30
let tree = insert tree 8
let tree = delete tree 6

(* Printing the tree in an inorder traversal format *)
let rec inorder_print tree =
  match tree with
  | Empty -> ()
  | Node(data, left, right) -> 
      inorder_print left;            (* First print the left subtree *)
      print_int data;                (* Then print the current node's data *)
      print_string " ";              (* Add a space for formatting *)
      inorder_print right            (* Finally print the right subtree *)

(* Output: 3 8 9 12 15 20 30 *) 
inorder_print tree