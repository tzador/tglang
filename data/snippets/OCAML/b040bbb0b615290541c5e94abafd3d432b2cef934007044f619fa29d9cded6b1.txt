(* This code snippet solves the n-queens problem using backtracking *)

(* Function to check if a queen can be placed on a given row and column *)
let rec check_safe board row col n =
  (* Check for same row *)
  let rec check_row board row col =
    match board with
    | [] -> true
    | h :: t ->
      if h = (row, col) then false
      else check_row t row col in
      
  (* Check for same column *)
  let rec check_col board row col =
    match board with
    | [] -> true
    | h :: t ->
      let (_, c) = h in
      if c = col then false
      else check_col t row col in
      
  (* Check for same diagonal *)
  let rec check_diag board row col =
    match board with
    | [] -> true
    | h :: t ->
      let (r, c) = h in
      if abs (r - row) = abs (c - col) then false
      else check_diag t row col in
      
  (* Check all conditions *)
  check_row board row col && check_col board row col && check_diag board row col;;
  
(* Function to solve the n-queens problem using backtracking *)
let rec solve_queens board col n =
  if col >= n then true
  else
    let rec try_row row =
      if row >= n then false
      else if check_safe board row col n then 
        (board := (row, col) :: !board;
        if solve_queens board (col + 1) n then true
        else
          (board := List.tl !board;
          try_row (row + 1)))
      else try_row (row + 1) in
      
    try_row 0;;
    
(* Main function to solve the n-queens problem *)
let solve_n_queens n =
  (* Initialize the board with an empty list *)
  let board = ref [] in
  
  (* Call the function to solve the problem using backtracking *)
  if solve_queens board 0 n then
    Printf.printf "Solution found:\n";
    List.iter (fun (r, c) -> Printf.printf "(%d, %d)\n" r c) (List.rev !board)
  else
    Printf.printf "No solution found for n = %d\n" n;;
    
(* Example usage *)
solve_n_queens 8;

(* Output:
Solution found:
(0, 0)
(1, 4)
(2, 7)
(3, 5)
(4, 2)
(5, 6)
(6, 1)
(7, 3) *)