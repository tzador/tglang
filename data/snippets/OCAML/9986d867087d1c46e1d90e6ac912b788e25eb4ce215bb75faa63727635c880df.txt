(* Define a function to calculate the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1 
  else n * factorial (n - 1)

(* Define a function to calculate the sum of the first n natural numbers *) 
let rec sum_of_n n = 
  if n = 0 then 0
  else n + sum_of_n (n - 1)

(* Define a recursive function to calculate the nth Fibonacci number *) 
let rec fib n = 
  if n = 0 then 0
  else if n = 1 then 1
  else fib (n-1) + fib (n-2)

(* Define a function to convert a list of integers to a list of strings *) 
let rec int_list_to_string_list lst =
  match lst with 
  | [] -> []
  | hd::tl -> (string_of_int hd) :: int_list_to_string_list tl

(* Define a function to find the maximum value in a list of integers *) 
let rec max_value lst = 
  match lst with 
  | [] -> 0
  | [x] -> x
  | hd::tl -> max hd (max_value tl) 

(* Define a function to check if a given number is prime *) 
let is_prime n = 
  let rec check i = 
    if i * i > n then true 
    else if n mod i = 0 then false
    else check (i + 1)
  in
  check 2 

(* Define a function to calculate the area of a circle given its radius *) 
let circle_area r = 
  let pi = 4.0 *. atan 1.0 in 
  pi *. (r *. r)

(* Define a function to calculate the area of a rectangle given its length and width *) 
let rectangle_area l w = 
  l *. w

(* Define a function to calculate the volume of a sphere given its radius *) 
let sphere_volume r = 
  let pi = 4.0 *. atan 1.0 in 
  (4.0 /. 3.0) *. pi *. (r *. r *. r)

(* Define a function to find the nth element in a list *) 
let rec find_nth lst n = 
  match lst with 
  | [] -> failwith "List is empty or index out of bounds"
  | hd::tl -> if n = 0 then hd else find_nth tl (n - 1)

(* Define a function to filter a list based on a given predicate *) 
let rec filter pred lst = 
  match lst with 
  | [] -> []
  | hd::tl -> if pred hd then hd :: filter pred tl else filter pred tl

(* Define a function to map a list to another list based on a given function *) 
let rec map func lst = 
  match lst with 
  | [] -> []
  | hd::tl -> (func hd) :: map func tl