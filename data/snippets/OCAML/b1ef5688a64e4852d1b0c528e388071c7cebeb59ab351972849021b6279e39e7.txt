(* Function to calculate the nth Fibonacci number *)
let rec fib n =
  if (n < 2) then n
  else (fib (n-1) + fib (n-2))

(* Function to calculate the factorial of a number *)
let rec fact n =
  if (n = 0) then 1
  else n * fact (n-1)

(* A function that takes in a list and returns a list of its unique elements *)
let rec unique_list l =
  match l with
  | [] -> []
  | h :: t -> if List.mem h t then unique_list t else h :: unique_list t

(* A "reverse" function that reverses the order of elements in a list *)
let rev l =
  let rec aux acc = function
    | [] -> acc
    | h :: t -> aux (h :: acc) t
  in aux [] l

(* A function that merges two sorted lists into one sorted list *)
let rec merge l1 l2 =
  match (l1, l2) with
  | ([], l) -> l
  | (l, []) -> l
  | (h1 :: t1, h2 :: t2) when h1 < h2 -> h1 :: merge t1 l2
  | (h1 :: t1, h2 :: t2) -> h2 :: merge l1 t2

(* An example of using the functions *)
let result = merge (unique_list [5; 2; 1; 5; 9]) (rev [8; 4; 2; 6; 4])