(* This is a comment in OCAML *)

(* Defining a function called "add" that takes in two parameters, x and y, and returns their sum *)
let add x y = x + y;;

(* Giving a type annotation to the function to specify that both parameters and the return value are of type int *)
val add : int -> int -> int = <fun>

(* Declaring a variable x with a value of 5 *)
let x = 5;;

(* Defining a list of integers *)
let num_list = [1; 2; 3; 4; 5];;

(* Writing a recursive function "factorial" that calculates the factorial of a given number n *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1);;

(* Pattern matching to check if a number is divisible by 2 *)
match num with
| x when x mod 2 = 0 -> "even"
| _ -> "odd"

(* Creating a record type called "person" with the fields name (string) and age (int) *)
type person = {
  name : string;
  age : int
} ;;

(* Creating an instance of the person type *)
let john = {name = "John"; age = 25};;

(* Using the pipe operator to apply a function to a list of strings *)
let reverse_strings str_list = List.map String.reverse str_list ;;

(* Creating a higher-order function that takes in a function and applies it twice to a given input *)
let twice f x = f (f x);;