(* This is a comment in OCaml *)
let rec fibonacci n = 
    match n with
    | 0 -> 0 
    | 1 -> 1 
    | n -> fibonacci (n-1) + fibonacci (n-2);; 
(* The above function calculates the nth number in the fibonacci sequence *)

(* Here, we define a function to check if a given number is prime *)
let is_prime num =
    let rec check i =
        if i*i > num then true
        else if num mod i = 0 then false
        else check (i+1)
    in
    check 2
;;
(* Now, we create a list of prime numbers using the above function *)
let prime_list n =
    let rec helper i acc =
        if i = n then acc
        else if is_prime i then helper (i+1) (i::acc)
        else helper (i+1) acc
    in
    helper 2 []
;;
(* Finally, we print the 20th prime number using the prime_list function *)
List.nth (prime_list 20) 19;;