let rec merge_sort merge = 
    let rec split_merge_list split merge_list =
        let rec split_list_part split = function
            | [] -> ([], [])
            | head :: tail as list ->
                if split = 0 then ([], list)
                else let result1, result2 = split_list_part (split - 1) tail in
                    (head :: result1, result2)
        in
        let len = List.length merge_list in
        let left, right = split_list_part (len / 2) merge_list in
        (left, right)
    in
    let rec merge_lists merge_lists1 merge_lists2 =
        match merge_lists1, merge_lists2 with
        | [], ys -> ys
        | xs, [] -> xs
        | x :: xs, y :: ys ->
            if x < y then x :: merge_lists xs (y :: ys)
            else y :: merge_lists (x :: xs) ys
    in
    let rec sort_lists sort left right =
        match left, right with
        | [], [] -> []
        | [], ys -> ys
        | xs, [] -> xs
        | x :: xs, y :: ys ->
            if x < y then x :: sort xs right
            else y :: sort left ys
    in
    let left, right = split_merge_list merge in
    merge_lists (sort_lists merge_sort left) (sort_lists merge_sort right)