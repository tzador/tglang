(* This is a function that recursively calculates the Fibonacci sequence up to a given number *)
let rec fibonacci n =
  (* Checks if n is less than or equal to 1, if so, return n *)
  if n <= 1 then
    n
  (* If n is greater than 1, recursively calculate the sum of the previous two numbers in the sequence *)
  else
    fibonacci (n-1) + fibonacci (n-2)

(* This is a function that takes in a list and returns the sum of all the even numbers in the list *)
let rec find_sum_even l =
  (* Base case: if list is empty, return 0 *)
  match l with
  | [] -> 0
  (* Recursive case: if head of list is even, add it to the sum of the even numbers in the remaining list *)
  | head::tail when head mod 2 = 0 ->
    head + find_sum_even tail
  (* Recursive case: if head of list is odd, skip it and look at the remaining list *)
  | head::tail ->
    find_sum_even tail