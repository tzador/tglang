(* A recursive function to compute the factorial of a number *)
let rec factorial n =
  if n < 0 then raise (Invalid_argument "factorial: n must be non-negative")
  else if n = 0 then 1
  else n * factorial (n-1) (* recursive call *)

(* A function to compute the sum of squares using tail recursion *)
let sum_of_squares n =
  let rec helper acc i =
    if i = 0 then acc
    else helper (acc + i*i) (i-1) in
  helper 0 n

(* A function to check if a number is prime *)
let is_prime n =
  let rec helper i =
    if i * i > n then true
    else if n mod i = 0 then false
    else helper (i+1) in
  if n <= 1 then false else helper 2

(* A function to filter a list based on a given predicate *)
let rec filter lst p =
  match lst with
  | [] -> []
  | x :: xs -> if p x then x :: (filter xs p) else filter xs p

(* A function to perform the map and fold operation on a list *)
let map_fold f acc lst =
  let rec helper acc lst =
    match lst with
    | [] -> acc
    | x :: xs -> helper (f x :: acc) xs in
  List.fold_left (+) 0 (helper [] lst)