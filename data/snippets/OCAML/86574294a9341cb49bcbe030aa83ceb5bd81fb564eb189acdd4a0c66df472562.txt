type binary_tree =
  | Leaf of int
  | Node of binary_tree * binary_tree * int

let rec insert (tree: binary_tree) (value: int): binary_tree = 
  match tree with 
  | Leaf(v) -> 
      if v > value then 
        Node(Leaf(value), Leaf(v), v)
      else
        Node(Leaf(v), Leaf(value), v) 
  | Node(left, right, v) -> 
      if v > value then 
        Node(insert left value, right, v)
      else
        Node(left, insert right value, v)

(* Creates a new binary tree *)
let my_tree = Node (Node (Leaf 1, Leaf 3, 2), Node (Leaf 5, Leaf 7, 6), 4)

(* Inserts the value 8 into the tree *)
let new_tree = insert my_tree 8