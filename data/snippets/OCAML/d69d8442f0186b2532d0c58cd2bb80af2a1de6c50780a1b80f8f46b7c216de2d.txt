(* This is a function that takes in a list of integers and returns the maximum value *)

let rec maximum (l : int list) : int =
  match l with
  | [] -> raise (Failure "Cannot find max of empty list")
  | [x] -> x
  | x :: xs ->
      let current_max = maximum xs in
      if x > current_max then x else current_max
      
(* This is a function that reverses a list *)

let rec reverse (l : 'a list) : 'a list =
  match l with
  | [] -> []
  | [x] -> [x]
  | x :: xs ->
      let reversed_rest = reverse xs in
      reversed_rest @ [x]
      
(* This is a function that takes in two lists and merges them in sorted order *)

let rec merge (l1 : int list) (l2 : int list) : int list =
  match (l1, l2) with
  | ([], []) -> []
  | ([], xs) -> xs
  | (xs, []) -> xs
  | (x :: xs, y :: ys) ->
      if x < y then x :: merge xs (y :: ys)   (* merge remaining elements after comparing first elements of each list *)
      else y :: merge (x :: xs) ys