(* This is a recursive function that calculates the nth Fibonacci number in constant time *)
let rec fib n =
  match n with
  | 0 -> 0 (* Base case: fib(0) = 0 *)
  | 1 -> 1 (* Base case: fib(1) = 1 *)
  | _ -> let rec fibHelper a b m =
           if m = 0 then a (* Once m reaches 0, a will be the nth Fibonacci number *)
           else fibHelper b (a+b) (m-1) (* Keep recursing until m reaches 0, updating a and b along the way *)
         in fibHelper 0 1 (n-1) (* Call the helper function with initial values 0 and 1 and n-1 as the stopping point *)