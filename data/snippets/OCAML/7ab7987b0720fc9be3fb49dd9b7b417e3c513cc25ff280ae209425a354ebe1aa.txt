(* This is a function that calculates the nth element of the Fibonacci sequence *)
let rec fib n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> (fib (n - 1)) + (fib (n - 2))

(* This is a function that calculates the factorial of a given number *)
let rec factorial n =
    match n with
    | 0 -> 1
    | _ -> n * (factorial (n - 1))

(* This is a higher-order function that applies a given function to every element in a list *)
let rec map f lst =
    match lst with
    | [] -> []
    | h :: t -> (f h) :: (map f t)

(* Example usage of map function to calculate the sum of squares of a list of numbers *)
map (fun x -> x * x) [1; 2; 3; 4; 5]

(* Output: [1; 4; 9; 16; 25] *)