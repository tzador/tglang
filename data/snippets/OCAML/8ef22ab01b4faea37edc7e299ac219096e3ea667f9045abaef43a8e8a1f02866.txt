type binary_tree =
| Leaf
| Node of int * binary_tree * binary_tree

(* This is a function that takes in a binary tree and returns the sum of all the values in the tree *)
let rec sum_tree = function
| Leaf -> 0 (* Base case: if the tree is empty, return 0 *)
| Node (value, left, right) -> value + sum_tree left + sum_tree right (* Recursive case: add the current value to the sums of the left and right subtrees *)

(* This is an example of a binary tree with values 1, 5, and 6 *)
let example_tree = 
Node (1, Node (5, Leaf, Leaf), Node (6, Leaf, Leaf))

(* Call the sum_tree function on the example tree *)
let sum = sum_tree example_tree

(* Print the result of the sum *)
print_endline (string_of_int sum) (* Output: 12 *)