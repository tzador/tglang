(* This is a function that takes in a list and filters out all the even numbers *)
let rec filter_even (nums: int list) : int list =
    match nums with
    | [] -> []
    | hd :: tl ->
        if hd mod 2 = 0 then hd :: (filter_even tl)
        else filter_even tl

(* This is a function that applies a function to every element in a list and returns a new list with the results *)
let rec map (f: 'a -> 'b) (lst: 'a list) : 'b list =
    match lst with
    | [] -> []
    | hd :: tl -> (f hd) :: (map f tl)

(* This is a function that zips two lists together, combining their elements into pairs *)
let rec zip (lst1: 'a list) (lst2: 'b list) : ('a * 'b) list =
    match lst1, lst2 with
    | [], _ | _, [] -> []
    | hd1 :: tl1, hd2 :: tl2 -> (hd1, hd2) :: (zip tl1 tl2)

(* This is a function that takes in a string and checks if it is a palindrome, ignoring case and punctuation *)
let rec is_palindrome (str: string) : bool =
    let clean_str = String.lowercase_ascii str |> String.map (fun c -> if (Char.is_alpha c) || (Char.is_digit c) then c else ' ') in
    let reversed_str = String.rev clean_str in
    if clean_str = reversed_str then true
    else false