(*************************************)
(*                                     *)
(*           Static Analysis          *)
(*                                     *)
(*************************************)(* Define the type alias 'var' as an integer *)
type var = int

(* Define the type alias 'exp' as a sum type of literal integers and variables *)
type exp = Literal of int | Variable of var

(* Define the type for binary operations, which takes in two expressions and outputs an expression *)
type binop = exp * exp -> exp

(* Define the functions for each binary operation *)
let add (e1, e2) = match (e1, e2) with
  | Literal n1, Literal n2 -> Literal (n1 + n2)
  | Literal n1, Variable v2 | Variable v2, Literal n1 ->
      Variable (n1 + v2)
  | Variable v1, Variable v2 -> Literal v1 + v2
  (* Other binary operations such as subtraction, multiplication, and division can be implemented similarly *)

(* Define the type for unary operations, which takes in an expression and outputs an expression *)
type unop = exp -> exp

(* Define the function for negation *)
let negate e = match e with
  | Literal n -> Literal (-n)
  | Variable v -> Variable (-v)

(* Define a dummy list of expressions for testing purposes *)
let expressions = [Literal 5; Variable 10; add (Literal 3, Variable 7); negate (Literal 12)]

(* Define a recursive function to evaluate an expression, using pattern matching *)
let rec eval_exp e = match e with
  | Literal n -> n
  | Variable v -> v
  | add (e1, e2) -> eval_exp e1 + eval_exp e2
  | negate e -> - (eval_exp e)

(* Print the results of evaluating each expression in the list *)
List.iter (fun e -> Format.printf "The result of evaluating expression %a is %d.\n" expression e (eval_exp e)) expressions