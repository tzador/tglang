let rec power x n =        (* defines a recursive function for calculating x^n *)
  if n = 0 then             (* base case: n = 0, return 1 *)
    1
  else if n > 0 then        (* if n > 0, multiply x by the result of power x (n-1) *)
    x * power x (n-1)
  else                      (* if n < 0, multiply x by the result of power x (n+1) and divide by x *)
    x * power x (n+1) / x
 
let rec factorial n =       (* recursive function for calculating n factorial *)
  if n = 0 then             (* base case: n = 0, return 1 *)
    1
  else                      (* multiply n by the result of factorial (n-1) *)
    n * factorial (n-1)
 
let fibonacci n =           (* function for calculating the nth fibonacci number *)
  let rec fibonacci_helper a b counter =   (* helper function to keep track of previous two numbers *)
    if counter = n then          (* once counter reaches n, return current value *)
      b
    else                        (* else, calculate next fibonacci number and update a and b *)
      fibonacci_helper b (a+b) (counter+1)
  in
  fibonacci_helper 0 1 0       (* call helper function starting with initial values *)
 
(* output: *)
(* 
  The power function can be called by using 'power x n' where x is the base and n is the exponent.
  The factorial function can be called by using 'factorial n' where n is the number to calculate the factorial of.
  The fibonacci function can be called by using 'fibonacci n' where n is the index of the desired fibonacci number.
*)