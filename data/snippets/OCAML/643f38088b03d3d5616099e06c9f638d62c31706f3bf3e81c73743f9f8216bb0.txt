(* This is a function to calculate the nth term in the Fibonacci sequence *)
let rec fib n = 
    if n < 2 then n (* base case, the first two terms in the sequence are 0 and 1 *)
    else fib (n-1) + fib (n-2) (* recursive case, calculate the sum of the previous two terms *)

(* This is a helper function to calculate the factorial of a given n *)
let rec fact n = 
    if n = 0 then 1 (* base case, factorial of 0 is 1 *)
    else n * fact (n-1) (* recursive case, multiply n with the factorial of n-1 *)

(* This is a function to calculate the sum of the first n terms in the Fibonacci sequence *)
let sumFib n =
    let rec helper i sum = 
        if i > n then sum (* base case, reached the nth term, return the sum *)
        else helper (i+1) (sum + fib i) in (* recursive case, add the current term to the sum and move on to the next term *)
    helper 0 0 (* call helper function with initial values for i and sum *)

(* This is a function to calculate the nth term in the tribute sequence, which is a modified fibonacci sequence *)
let rec trib n = 
    if n < 3 then n (* base case, the first three terms in the sequence are 0, 1, 2 *)
    else trib (n-1) + trib (n-2) + trib (n-3) (* recursive case, calculate the sum of the previous three terms *)

(* This is a function to calculate the average of the first n terms in the tribute sequence *)
let avgTrib n = 
    let rec helper i sum = 
        if i > n then sum / n (* base case, reached the nth term, return the average *)
        else helper (i+1) (sum + trib i) in (* recursive case, add the current term to the sum and move on to the next term *)
    helper 0 0 (* call helper function with initial values for i and sum *)

(* This is a function to calculate the binomial coefficient of n and k using the factorial function *)
let binCoeff n k =
    fact n / (fact k * fact (n-k)) (* n choose k = n! / (k! * (n-k)!) *)

(* This is a function to calculate the binomial coefficient of n and k using a recursive formula *)
let rec binCoeff n k =
    if k = 0 || k = n then 1
    else binCoeff (n-1) (k-1) + binCoeff (n-1) k
    (* n choose k = (n-1) choose (k-1) + (n-1) choose k, using the symmetric property of Pascal's triangle *)