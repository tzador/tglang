(* Define a custom exception type *)
exception Error of string

(* Define a recursive function to calculate the factorial of a given integer *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n - 1)

(* Define a function that checks if a number is prime *)
let is_prime n =
  let rec check_divisor num divisor =
    if divisor = 1 then true
    else if num mod divisor = 0 then false
    else check_divisor num (divisor - 1)
  in
  if n < 2 then raise (Error "Number must be greater than or equal to 2")
  else check_divisor n (n - 1)

(* Define a function that generates a list of prime numbers up to a given limit *)
let generate_primes limit =
  let rec generate_primes_helper num acc =
    if num > limit then acc
    else if is_prime num then generate_primes_helper (num + 1) (num :: acc)
    else generate_primes_helper (num + 1) acc
  in
  generate_primes_helper 2 []

(* Print out a list of prime numbers up to 100 *)
let primes = generate_primes 100
in
print_string "Prime numbers up to 100: ";
List.iter (fun x -> print_int x; print_string " ") primes;
print_newline();