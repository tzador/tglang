(* This is a complex function that takes in a list and a value and returns a new list with the value added to the end of the original list *)
let rec append lst value = match lst with
| [] -> [value] (* If the list is empty, simply return a new list with the value as its only element *)
| h::t -> h::(append t value) (* If the list is not empty, recursively call the append function with the tail of the list and the value, and add the head of the list to the resulting new list *)

(* Example usage *)
let original_list = [1;2;3]
let new_list = append original_list 4
(* The new_list will now be [1;2;3;4] *)