(** Create a module for a min heap data structure **)

module MinHeap : sig
    type 'a heap

    exception EmptyHeap

    val empty : unit -> 'a heap
    val isEmpty : 'a heap -> bool
    val insert : 'a heap -> 'a -> 'a heap
    val extractMin : 'a heap -> 'a * 'a heap
    val merge : 'a heap -> 'a heap -> 'a heap
    val fromList : 'a list -> 'a heap

end = struct 
    type 'a heap = Empty | Node of 'a * 'a heap * 'a heap

    exception EmptyHeap

    let empty = fun () -> Empty

    let isEmpty = function
        | Empty -> true
        | _ -> false

    let rec insert heap x = match heap with
        | Empty -> Node (x, Empty, Empty)
        | Node (y, left, right) -> 
            if x < y 
            then Node (x, Node (y, left, right), Empty)
            else Node (y, left, insert right x)

    let rec extractMin heap = match heap with
        | Empty -> raise EmptyHeap
        | Node (x, left, Empty) -> (x, left)
        | Node (x, Empty, right) -> (x, right)
        | Node (x, Node (y, leftL, rightL), Node (z, leftR, rightR)) ->
            if y <= z 
            then (y, Node (x, leftL, merge rightL (Node (z, leftR, rightR))))
            else (z, Node (x, merge (Node (y, leftL, rightL)) leftR, rightR))

    let rec merge h1 h2 = match h1, h2 with
        | Empty, _ -> h2
        | _, Empty -> h1
        | (Node (x, left, right) as h1'), (Node (y, l, r) as h2') -> 
            if x < y 
            then Node (x, merge h2' right, left)
            else Node (y, merge h1' r, l)

    let fromList list = List.fold_left insert Empty list

end