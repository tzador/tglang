(* Defines a module for creating and manipulating matrices *)
module Matrix = struct
  
  (* Exception raised when trying to perform operations on incompatible matrices *)
  exception Incompatible_matrices of string
  
  (* Type representing a matrix *)
  type matrix = float array array
  
  (* Function to check if two matrices are compatible for addition or subtraction *)
  let compatible_for_add_sub matrix1 matrix2 =
    Array.length matrix1 = Array.length matrix2 &&
    Array.for_all (fun x -> Array.length x = Array.length matrix1.(0)) matrix2
  
  (* Function to check if two matrices are compatible for multiplication *)
  let compatible_for_mult matrix1 matrix2 =
    Array.length matrix1.(0) = Array.length matrix2
  
  (* Function to transpose a matrix *)
  let transpose matrix =
    Array.init (Array.length matrix.(0)) (fun col ->
      Array.init (Array.length matrix) (fun row ->
        matrix.(row).(col)
      )
    )
  
  (* Function to add two matrices *)
  let add matrix1 matrix2 =
    if compatible_for_add_sub matrix1 matrix2 then
      Array.mapi (fun row arr ->
        Array.mapi (fun col elt ->
          elt +. matrix2.(row).(col)
        ) arr
      ) matrix1
    else
      raise (Incompatible_matrices "Matrices are not compatible for addition")
  
  (* Function to subtract two matrices *)
  let subtract matrix1 matrix2 =
    if compatible_for_add_sub matrix1 matrix2 then
      Array.mapi (fun row arr ->
        Array.mapi (fun col elt ->
          elt -. matrix2.(row).(col)
        ) arr
      ) matrix1
    else
      raise (Incompatible_matrices "Matrices are not compatible for subtraction")
  
  (* Function to multiply two matrices *)
  let multiply matrix1 matrix2 =
    if compatible_for_mult matrix1 matrix2 then
      let transposed = transpose matrix2 in
      Array.init (Array.length matrix1) (fun row ->
        Array.init (Array.length transposed) (fun col ->
          Array.fold_left (fun sum elt ->
            sum +. matrix1.(row).(elt) *. transposed.(col).(elt)
          ) 0. transposed.(0)
        )
      )
    else
      raise (Incompatible_matrices "Matrices are not compatible for multiplication")
  
  (* Function to raise a matrix to a given power *)
  let rec power matrix n =
    match n with
    | 0 -> Array.init (Array.length matrix) (fun _ -> Array.make (Array.length matrix.(0)) 1.)
    | 1 -> matrix
    | _ -> multiply matrix (power matrix (n-1))
  
end