(* This snippet creates a function that takes in a list of integers,
   multiplies each value by 2, and returns the sum of the list. *)
let rec multiply_sum (lst : int list) : int =
  match lst with
  | [] -> 0 (* Base case - return 0 when list is empty *)
  | x :: xs -> (x * 2) + multiply_sum xs (* Multiply first value by 2 and add to the sum of the rest of the list *)
;;

(* Test cases *)
multiply_sum [1; 2; 3; 4];; (* Output: 20 *)
multiply_sum [];; (* Output: 0 *)
multiply_sum [-1; 5; 10];; (* Output: 28 *)