(* This is a function that takes in a list of integers and returns the sum *)
let sum = List.fold_left (+) 0

(* This is a function that takes in a list of strings and checks if all strings
in the list are the same length *)
let rec check_strings lst = match lst with
  | [] -> true
  | [x] -> true
  | h1 :: h2 :: t -> if (String.length h1) = (String.length h2) then check_strings (h2 :: t) else false

(* This is a function that takes in a list of strings and returns a list of pairs
of strings and their lengths *)
let string_lengths lst = List.map (fun x -> (x, String.length x)) lst

(* This is a function that takes in an integer and a list of integers and returns
a list of the input integer multiplied by each element in the list *)
let rec multiply_by_int n lst = match lst with
  | [] -> []
  | h :: t -> (n * h) :: (multiply_by_int n t)

(* This is a function that takes in a list of pairs and returns a list of only
the first elements in each pair *)
let rec get_firsts lst = match lst with
  | [] -> []
  | h :: t -> (fst h) :: (get_firsts t)

(* This is a function that takes in a list of tuples and returns a list of only
the second elements in each tuple *)
let rec get_seconds lst = match lst with
  | [] -> []
  | h :: t -> (snd h) :: (get_seconds t)

(* This is a function that takes in two lists and returns a list of all possible
combinations of elements from each list *)
let rec combine_lists lst1 lst2 = match lst1 with
  | [] -> []
  | h :: t -> (List.map (fun x -> (h, x)) lst2) @ (combine_lists t lst2)