(* This is an example of a function in OCAML that takes in two integers and returns their sum. *)

let add (x: int) (y: int): int = 
    x + y;;

(* This is an example of a recursive function in OCAML that calculates the factorial of a given number. *)

let rec factorial (n: int): int = 
    if n <= 1 then 
        1 
    else 
        n * factorial (n - 1);;

(* This is an example of a higher order function in OCAML that takes in a function and a number, and applies the function to the number. *)

let apply_function (func: (int -> int)) (x: int): int = 
    func x;;

(* This is an example of a custom type declaration in OCAML, specifying a person data type with a name and age field. *)

type person = {
    name: string;
    age: int
};;

(* This is an example of a recursive data type in OCAML, representing a binary tree with a value and left and right branches. *)

type tree = 
    | Leaf
    | Node of int * tree * tree;;