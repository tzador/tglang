(* This is a function that takes two integers and returns their sum. *)
let sum x y =
    x + y;; (* This is the function body, which has an implicit return statement. *)
    
(* This is a function that takes a list of integers and returns the sum of all elements in the list. *)
let rec sum_list lst = match lst with
    | [] -> 0 (* Base case: an empty list has a sum of 0 *)
    | hd :: tl -> hd + sum_list tl;; (* Recursive case: adds the head of the list to the sum of the rest of the list *)

(* This is a function that takes a list of strings and returns a list of the lengths of each string. *)
let rec get_lengths lst = match lst with
    | [] -> [] (* Base case: an empty list results in an empty list of lengths *)
    | hd :: tl -> String.length hd :: get_lengths tl;; (* Recursive case: adds the length of the head string to the list of lengths of the rest of the strings *)

(* This is a function that takes in a string and returns true if it is a palindrome (reads the same backward and forward) and false if it is not. *)
let rec is_palindrome str = 
    let length = String.length str in (* Gets the length of the string *)
    let mid = length / 2 in (* Calculates the index of the middle character *)
    let rec compare_chars l r = (* Helper function to compare left and right characters *)
        if l = r then true (* If left and right characters are equal, continue comparing *)
        else false in (* Return false if they are not equal *)
    if length = 0 || length = 1 then true (* Base cases: an empty string or a single character string is a palindrome *)
    else compare_chars str.[mid] str.[length - 1 - mid] && is_palindrome (String.sub str 0 mid);; (* Recursive case: compares the middle characters and calls the function again on the substring with the middle character removed *)

(* This is an example usage of the functions above. *)
let lst = [1; 2; 3; 4; 5];; (* Creates a list of integers *)
sum_list lst;; (* Outputs 15, the sum of all elements in lst *)
let words = ["Hello"; "world"; "this"; "is"; "a"; "test"];; (* Creates a list of strings *)
get_lengths words;; (* Outputs [5; 5; 4; 2; 1; 4], the lengths of each string in words *)
is_palindrome "racecar";; (* Outputs true *)
is_palindrome "programming";; (* Outputs false *)