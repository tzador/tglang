(* This function creates a binary search tree from a list of integers *)
let rec create_tree lst =
  match lst with
  | [] -> Leaf (* empty list results in an empty leaf node *)
  | hd::tl -> (* creates nodes recursively *)

      (* helper function to create left and right subtrees *)
      let rec create_subtrees lst left right =
        match lst with
        | [] -> (left, right) (* when list is empty, return the completed subtrees *)
        | hd::tl -> (* recursively add values to the subtrees *)
            if hd < root then create_subtrees tl (add left hd) right
            else create_subtrees tl left (add right hd)
      
      (* main body of the function *)
      let left_subtree, right_subtree = create_subtrees tl (Leaf hd) (Leaf hd) in
      Node(hd, left_subtree, right_subtree) (* creates a node with given value and subtrees *)