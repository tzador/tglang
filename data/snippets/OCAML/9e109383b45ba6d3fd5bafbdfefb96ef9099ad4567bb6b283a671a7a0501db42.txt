(* This function uses the provided accumulator to compute the factorial of the given integer *)
let rec factorial acc n =
  if n < 0 then failwith "Factorial cannot be computed for negative numbers."
  else if n = 0 then acc
  else factorial (n * acc) (n - 1)

(* Example usage *)
let result = factorial 1 5 (* calculates factorial of 5, which is 120 *)

(* This function uses pattern matching to calculate the sum of a list of integers *)
let rec sum_list = function
  | [] -> 0
  | h :: t -> h + sum_list t

(* Example usage *)
let result = sum_list [1;2;3;4;5] (* calculates sum of [1;2;3;4;5], which is 15 *)