(* This is a function that calculates the factorial of a given number *)
let rec factorial n =
    if n = 0 then 1 (* if n equals 0, return 1 *)
    else n * factorial (n - 1) (* otherwise, multiply n with the result of factorial(n-1) *)

(* This is a function that calculates the n-th Fibonacci number *)
let rec fibonacci n =
    match n with (* pattern matching *)
    | 0 -> 0 (* if n is 0, return 0 *)
    | 1 -> 1 (* if n is 1, return 1 *)
    | _ -> fibonacci(n-1) + fibonacci(n-2) (* otherwise, return the sum of previous two Fibonacci numbers *)

(* This is a function that returns a list of Fibonacci numbers up to n *)
let fibonacci_list n =
    let rec aux i acc = (* auxiliary function that takes in an index (i) and an accumulator (acc) *)
        if i = n then acc (* if i equals n, return the accumulator *)
        else aux (i+1) (acc @ [fibonacci i]) (* otherwise, append the Fibonacci number at index i to the accumulator and call the function again with incremented index and updated accumulator *)
    in aux 0 [] (* call the auxiliary function with starting index of 0 and empty accumulator *)

(* This is a recursive function that checks if a given list is sorted in ascending order *)
let rec is_sorted lst =
    match lst with (* pattern matching *)
    | [] | [_] -> true (* if list is empty or has only 1 element, it is sorted *)
    | x :: y :: rest -> if x <= y then is_sorted (y :: rest) (* if first element is smaller than or equal to second element, call function again with the remainder of the list *)
                        else false (* otherwise, return false as list is not sorted *)

(* This is a function that implements quicksort algorithm to sort a given list *)
let rec quicksort lst =
    match lst with (* pattern matching *)
    | [] | [_] -> lst (* if list is empty or has only 1 element, it is already sorted *)
    | pivot :: rest -> (* let pivot be the first element of the list *)
        let rec partition left right = (* auxiliary function that partitions the list into left and right sublists *)
            match right with
            | [] -> [] (* if right list is empty, return empty list *)
            | x :: r -> if x < pivot then x :: partition left r (* if element is smaller than pivot, add it to left partition *)
                        else partition (x :: left) r (* otherwise, add it to right partition and recursively call function again *)
        in (quicksort (partition [] rest)) (* recursively call function on left partition, pivot, and right partition *)
            @ [pivot] (* and concatenate the three parts together *)
            @ (quicksort (partition [] rest))

(* This is an example usage of the functions defined above *)
let my_list = [3; 7; 2; 10; 1; 5] (* create an example list *)
let sorted_list = quicksort my_list (* use quicksort function to sort the list *)
let factorial_5 = factorial 5 (* calculate factorial of 5 *)
let first_10_fibonacci = fibonacci_list 10 (* get the first 10 Fibonacci numbers *)
let is_sorted_list = is_sorted sorted_list (* check if the sorted list is actually sorted *)

(* Output:
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n - 1)
let rec fibonacci n =
    match n with
    | 0 -> 0
    | 1 -> 1
    | _ -> fibonacci(n-1) + fibonacci(n-2)
let fibonacci_list n =
    let rec aux i acc =
        if i = n then acc
        else aux (i+1) (acc @ [fibonacci i])
    in aux 0 []
let rec is_sorted lst =
    match lst with
    | [] | [_] -> true
    | x :: y :: rest -> if x <= y then is_sorted (y :: rest)
                        else false
let rec quicksort lst =
    match lst with
    | [] | [_] -> lst
    | pivot :: rest ->
        let rec partition left right =
            match right with
            | [] -> []
            | x :: r -> if x < pivot then x :: partition left r
                        else partition (x :: left) r
        in (quicksort (partition [] rest))
            @ [pivot]
            @ (quicksort (partition [] rest))
            
let my_list = [3; 7; 2; 10; 1; 5]
let sorted_list = quicksort my_list
let factorial_5 = factorial 5
let first_10_fibonacci = fibonacci_list 10
let is_sorted_list = is_sorted sorted_list
              *)