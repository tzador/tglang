(* Create a function that takes in two integers and returns their sum *)
let add x y =
  x + y
  
(* Create a recursive function that calculates the factorial of a number *)
let rec factorial n =
  match n with
  | 0 -> 1
  | n -> n * factorial (n-1)
  
(* Create a list of strings *)
let fruits = ["apple"; "banana"; "orange"; "grape"; "pineapple"]

(* Create a function that checks if a given number is prime *)
let is_prime n =
  let rec check_divisor count =
    if count = n then true
    else if n mod count = 0 then false
    else check_divisor (count+1) in
  check_divisor 2

(* Create a function that returns the nth element in a list *)
let rec get_nth_element lst n =
  match lst with
  | [] -> failwith "Empty list"
  | hd :: tl -> if n = 0 then hd else get_nth_element tl (n-1)
  
(* Use pattern matching to find the maximum value in a list *)
let rec max_value lst =
  match lst with
  | [] -> failwith "Empty list"
  | [x] -> x
  | hd :: tl -> max hd (max_value tl)
  
(* Create a module that defines a type for a car *)
module Car = struct
  type car = {make: string; model: string; year: int}
end

(* Create an object of type Car *)
let my_car = {Car.make = "Honda"; Car.model = "Civic"; Car.year = 2020}

(* Add functionality to the Car module by defining a method to get the age of a car *)
module Car = struct
  type car = {make: string; model: string; year: int}
  
  (* Method to get the age of a car *)
  let get_age c = 2021 - c.year
end