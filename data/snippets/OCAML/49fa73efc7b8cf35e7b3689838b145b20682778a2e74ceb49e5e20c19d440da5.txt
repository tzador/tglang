(* This is a function that takes in two integers and returns the result of their division *)
let division x y = match y with
  | 0 -> failwith "Cannot divide by zero"
  | _ -> x / y;;

(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n = match n with
  | 0 -> 1
  | _ -> n * factorial (n - 1);;

(* This is a function that checks if a string is a palindrome *)
let is_palindrome s =
  let rec reverse str n rev_str =
    if n = 0 then
      rev_str ^ (String.get str n)
    else
      reverse str (n - 1) (rev_str ^ (String.get str n))
  in
  if s = reverse s ((String.length s) - 1) "" then
    true
  else
    false;;

(* This is a higher-order function that accepts a function and applies it to a list of integers *)
let apply_to_list func lst =
  let rec loop lst acc = match lst with
    | [] -> acc
    | h::t -> loop t (func h :: acc)
  in
  List.rev (loop lst []);;

(* This is a module that contains functions for manipulating and initializing matrices *)
module Matrix = struct
  type matrix = float array array

  (* This function creates a zero matrix of a given size *)
  let zero_matrix m n =
    Array.make_matrix m n 0.0;;

  (* This function sums two matrices of the same size *)
  let sum_matrix m1 m2 =
    Array.mapi (fun i row -> Array.mapi (fun j col -> row.(j) +. m2.(i).(j)) m1) m1;;

  (* This function multiplies two matrices of compatible sizes *)
  let multiply_matrix m1 m2 =
    let rows1 = Array.length m1
    and cols1 = Array.length m1.(0)
    and rows2 = Array.length m2
    and cols2 = Array.length m2.(0)
    in
    if cols1 <> rows2 then
      failwith "Matrices are not compatible"
    else
      let prod = zero_matrix rows1 cols2 in
      for i = 0 to rows1 - 1 do
        for j = 0 to cols2 - 1 do
          let sum = ref 0.0 in
          for k = 0 to cols2 - 1 do
            sum := !sum +. m1.(i).(k) *. m2.(k).(j);
          done;
          prod.(i).(j) <- !sum;
        done;
      done;
      prod;;
end;;