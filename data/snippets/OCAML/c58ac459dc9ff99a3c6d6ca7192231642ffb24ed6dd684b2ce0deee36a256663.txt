let rec merge_sort lst =                     (* Define a function merge_sort that takes a list as input *)
  let rec merge left right acc =              (* Define a helper function merge that takes two lists as input *)
    match left, right with                    (* Pattern match on the two lists *)
    | [], l                               -> (* If the left list is empty, append the remaining elements in right to acc *)
        acc @ l
    | l, []                               -> (* If the right list is empty, append the remaining elements in left to acc *)
        acc @ l
    | hl::tl, hr::tr when hl < hr         -> (* If the first element in left is smaller, append it to acc and recursively call merge *)
        merge tl right (acc @ [hl])
    | hl::tl, hr::tr                      -> (* Otherwise, append the first element in right and recursively call merge *)
        merge left tr (acc @ [hr])
  in

  match lst with                             (* Pattern match on the input list *)
  | [] -> []                                  (* If the list is empty, return an empty list *)
  | [x] -> [x]                                (* If the list has one element, return the list as is *)
  | _ ->                                      (* For any other case, split the list in two, sort the two halves recursively, and merge the sorted halves*)
     let mid = (List.length lst) / 2 in
     let left = merge_sort (List.sub lst 0 mid) in
     let right = merge_sort (List.sub lst mid (List.length lst - mid)) in
     merge left right []                       (* Call merge with an empty accumulator *)
  ;;