(* This code is an example of a function that sorts a list using the quicksort algorithm. *)

let rec quicksort list =
  match list with
  | [] -> []
  | [x] -> [x]
  | pivot :: rest -> (
      let lesser, greater = List.partition ((<) pivot) rest in
      quicksort lesser @ [pivot] @ quicksort greater
    )

(* This function uses pattern matching to handle 3 different cases: an empty list, a list with one element, and a list with a pivot and the rest of the elements. *)

(* The partition function uses the (<) operator to separate the list into 2 lists - one with elements that are less than the pivot, and one with elements that are greater. *)

(* The @ operator is used to concatenate the sorted lists back together, resulting in a sorted list in ascending order. *)

(* Example usage: *)
quicksort [5;1;7;8;2;4;6];;

(* Output:
- : int list = [1; 2; 4; 5; 6; 7; 8]
*)