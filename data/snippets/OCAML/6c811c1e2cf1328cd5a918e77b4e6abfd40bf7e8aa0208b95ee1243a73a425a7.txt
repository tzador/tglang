(* A function that takes in a list of integers and returns the sum of the squares of all odd numbers in the list *)
let rec sum_odd_squares lst =
  match lst with
  | [] -> 0 (* base case: if list is empty, return 0 *)
  | hd::tl -> (* pattern match the head and tail of the list *)
    let square = hd * hd in (* square the head of the list *)
    if hd mod 2 = 1 then square + sum_odd_squares tl (* if head is odd, add its square to the sum of squares of the rest of the list *)
    else sum_odd_squares tl (* if head is even, skip it and move on to the next element *)
;;
(* Example usage *)
print_int (sum_odd_squares [1;2;3;4;5;6]) (* prints 35, which is 1^2 + 3^2 + 5^2 *)