(* FIBONACCI STRUCTURE *)
type fib =
  | Bottom
  | Z of int
  | S of fib

(* HELPER FUNCTION FOR ADDITION *)
let rec add x y =
  match x, y with
  | Z m, Z n -> Z (m + n)
  | Z m, S n | S n, Z m -> S (add (Z m) n)
  | S m, S n -> S (add m (S n))

(* FUNCTION TO CALCULATE THE NTH FIBONACCI NUMBER *)
let rec fib_nth n =
  if n < 1 then Bottom
  else if n = 1 then Z 0
  else if n = 2 then Z 1
  else add (fib_nth (n-1)) (fib_nth (n-2))

(* MAIN FUNCTION TO PRINT THE FIRST 10 FIBONACCI NUMBERS *)
let rec main () =
  for i=1 to 10 do
    let f = fib_nth i in
    match f with
    | Bottom -> failwith "invalid input"
    | Z n -> print_endline (string_of_int n)
    | S _ -> failwith "invalid input"

let () =
  main ()