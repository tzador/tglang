(***
OCAML code for implementing a binary search tree
***)

(***
 Node structure for binary search tree
***)
type 'a bst_node = {
  value: 'a;
  left: 'a bst_node option;
  right: 'a bst_node option;
}

(***
 Function to insert new value into binary search tree
 Takes in a value and the tree, and returns the updated tree
***)
let rec insert (value: 'a) (tree: 'a bst_node option): 'a bst_node option =
  match tree with
  | None ->
    Some { value = value; left = None; right = None }
  | Some node ->
    if value < node.value then
      Some { node with left = insert value node.left }
    else
      Some { node with right = insert value node.right }

(***
 Function to check if a value exists in the binary search tree
 Takes in a value and the tree, and returns true if the value exists, false if not
***)
let rec contains (value: 'a) (tree: 'a bst_node option): bool =
  match tree with
  | None -> false
  | Some node ->
    if value = node.value then
      true
    else if value < node.value then
      contains value node.left
    else
      contains value node.right