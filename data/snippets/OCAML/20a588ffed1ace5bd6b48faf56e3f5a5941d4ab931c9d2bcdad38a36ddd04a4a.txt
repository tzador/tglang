type 'a bst =
| Leaf
| Node of 'a * ('a bst) * ('a bst)

let rec insert x = function
| Leaf -> Node (x, Leaf, Leaf)
| Node (y, left, right) as bst ->
if x < y then Node (y, insert x left, right)
else if x > y then Node (y, left, insert x right)
else bst

let rec remove x = function
| Leaf -> Leaf
| Node (y, left, right) ->
if x < y then Node (y, remove x left, right)
else if x > y then Node (y, left, remove x right)
else if left = Leaf then right
else if right = Leaf then left
else
let ((x, subt) as smallest) = find_min right in
Node (x, left, substree)

let rec find_min = function
| Leaf -> invalid_arg "Empty tree"
| Node (x, left, _) -> if left = Leaf then x else find_min left

let rec member x = function
| Leaf -> false
| Node (y, left, right) ->
if x = y then true
else if x < y then member x left
else member x right

(** use list to represent bst in this example. 
the [] means the empty tree *)
let bst = [1; 3; 5; 8; 10]
let bst = List.fold_left (fun bst x -> insert x bst) [] bst
let _ = assert (member 8 bst)
let _ = assert (not (member 2 bst))