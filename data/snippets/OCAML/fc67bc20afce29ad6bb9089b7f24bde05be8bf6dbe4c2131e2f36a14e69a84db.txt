(* This is a simple function that takes in a list of numbers and returns the sum of its elements *)
let rec sum_list (list_of_nums : int list) : int =
  match list_of_nums with
  | [] -> 0 (* base case: empty list has a sum of 0 *)
  | hd :: tl -> hd + sum_list tl (* recursive case: adds the head of the list to the sum of the tail *)

(* This is an anonymous function that takes in two integers and returns the larger one *)
let get_larger = fun (x : int) (y : int) : int -> if x > y then x else y

(* This is a higher-order function that takes in a function and a value, and applies the function to the value twice *)
let double_apply (f : 'a -> 'a) : 'a -> 'a =
  fun (x : 'a) -> f (f x)

(* This is a record type that represents a person *)
type person = {
  name : string;
  age : int;
  occupation : string option;
}

(* This is a function that takes in a person record and returns a string based on their occupation (if they have one) *)
let greet = fun (p : person) : string -> match p.occupation with
  | None -> "Hello " ^ p.name ^ ", it's nice to meet you!"
  | Some o -> "Hello " ^ p.name ^ ", I see you are a " ^ o ^ ". That's cool!"