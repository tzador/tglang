(* This snippet implements a binary search tree data structure *)

type 'a bst =
  | Empty   (* represents an empty tree *)
  | Node of 'a * 'a bst * 'a bst   (* represents a non-empty tree with a root value and left/right subtrees *)

(* Function to insert a new value into the binary search tree *)
let rec insert (value: 'a) (tree: 'a bst): 'a bst =
  match tree with
  | Empty -> Node (value, Empty, Empty)   (* if tree is empty, create a new node with the given value *)
  | Node (v, l, r) ->
      if value = v then tree   (* if value already exists in tree, no need to insert, return original tree *)
      else if value < v then Node (v, insert value l, r)   (* if value is less than root, insert in left subtree *)
      else Node (v, l, insert value r)   (* if value is greater than root, insert in right subtree *)

(* Function to check if a given value is present in the binary search tree *)
let rec contains (value: 'a) (tree: 'a bst): bool =
  match tree with
  | Empty -> false   (* if tree is empty, given value cannot be present, return false *)
  | Node (v, l, r) ->
      if value = v then true   (* if value is equal to root, return true *)
      else if value < v then contains value l   (* if value is less than root, check in left subtree *)
      else contains value r   (* if value is greater than root, check in right subtree *)

(* Function to delete a value from the binary search tree *)
let rec delete (value: 'a) (tree: 'a bst): 'a bst =
  match tree with
  | Empty -> Empty   (* if tree is empty, deletion is not possible, return empty tree *)
  | Node (v, l, r) ->
      if value = v then
        match (l, r) with
        | (Empty, Empty) -> Empty   (* if value to be deleted has no subtrees, then simply delete it *)
        | (Empty, _) -> r   (* if value to be deleted has only right subtree, replace with right subtree *)
        | (_, Empty) -> l   (* if value to be deleted has only left subtree, replace with left subtree *)
        | (_, _) ->
            (* if value to be deleted has both left and right subtrees, find predecessor and replace with it *)
            let predecessor = find_max l in
            Node (predecessor, delete predecessor l, r)
      else if value < v then Node (v, delete value l, r)   (* if value is less than root, delete in left subtree *)
      else Node (v, l, delete value r)   (* if value is greater than root, delete in right subtree *)

(* Function to find the maximum value in a binary search tree *)
let rec find_max (tree: 'a bst): 'a =
  match tree with
  | Empty -> failwith "Tree is empty"   (* if tree is empty, there is no maximum value *)
  | Node (v, l, r) ->
      match r with
      | Empty -> v   (* if right subtree is empty, root is the maximum value *)
      | Node(_, _, _) -> find_max r   (* if right subtree is not empty, maximum value will be in the right subtree *)