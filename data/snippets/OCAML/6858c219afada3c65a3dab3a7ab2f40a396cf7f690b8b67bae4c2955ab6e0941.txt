(** This function performs a binary search on a sorted list and returns the index of the element if found. Otherwise, it returns -1.

    @param lst The sorted list to search in
    @param elem The element to search for
    @param low The lower bound index of the range to search in (inclusive)
    @param high The upper bound index of the range to search in (inclusive)
    @return The index of the element if found, -1 otherwise
**)
let binary_search lst elem low high =
    if low > high then                       (* Check if the range is valid *)
        -1
    else
        let mid = (low + high) / 2 in        (* Calculate the midpoint *)
        let mid_elem = List.nth lst mid in   (* Get the middle element *)
        
        if mid_elem = elem then               (* Check if the middle element is the one we are looking for *)
            mid
        else if mid_elem < elem then           (* Recursively search in the upper half of the range *)
            binary_search lst elem (mid + 1) high
        else                                   (* Recursively search in the lower half of the range *)
            binary_search lst elem low (mid - 1)
  
let lst = [1; 3; 5; 7; 9; 11; 13]               (* Example sorted list *)
let elem = 7                                   (* Element to search for *)
let index = binary_search lst elem 0 (List.length lst - 1)  (* Call binary search function *)
    
print_string (string_of_int index)              (* Print the index of the element or -1 *)