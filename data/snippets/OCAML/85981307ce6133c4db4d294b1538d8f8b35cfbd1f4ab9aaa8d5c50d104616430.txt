(** A function that reverses a list recursively *)
let rec reverse_list lst =
  match lst with
  | [] -> [] (* base case: empty list *)
  | h::t -> reverse_list t @ [h] (* recursive call: append reversed tail to head *)

(** A helper function for binary search *)
let rec binary_search_helper lst target low high =
  if low > high then -1 (* base case: element not found *)
  else
    let mid = (low + high)/2 in (* get middle index *)
    if lst.(mid) < target then (* search upper half *)
      binary_search_helper lst target (mid + 1) high
    else if lst.(mid) > target then (* search lower half *)
      binary_search_helper lst target low (mid - 1)
    else mid (* target found at middle index *)

(** A function that performs binary search on a sorted list *)
let binary_search lst target =
  let n = Array.length lst in (* get length of list *)
  let low = 0 in (* lowest index *)
  let high = n - 1 in (* highest index *)
  binary_search_helper lst target low high (* call helper function *)