(* This code creates a higher-order function that takes in a list of integers and a function as arguments. It then applies the function on each element of the list and returns the result list. *) 

let rec map (lst : int list) (f : int -> int) : int list =
    match lst with
    | [] -> []
    | hd :: tl -> (f hd) :: (map tl f)

(* This function takes in a number and multiplies it by 2. *)
let multiply_by_two (num : int) : int = num * 2

(* This creates a list of integers *)
let lst = [1; 2; 3; 4; 5]

(* Applying the map function on the list with the multiply_by_two function *)
map lst multiply_by_two

(* Output: [2; 4; 6; 8; 10] *)