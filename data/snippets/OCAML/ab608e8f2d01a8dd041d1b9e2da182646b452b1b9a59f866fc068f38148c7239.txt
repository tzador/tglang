(* This program implements a binary search tree data structure *)
(* This is the type definition for a binary search tree *)
type 'a bst =
  | Empty
  | Node of 'a bst * 'a * 'a bst

(* This function inserts a new element into the binary search tree and returns the updated tree *)
let rec insert (x: 'a) (tree: 'a bst) : 'a bst =
  match tree with
  | Empty -> Node (Empty, x, Empty) (* if tree is empty, create a new node with x as the root value *)
  | Node (left, y, right) -> (* if tree is not empty, recursively traverse the tree to find correct position for x *)
    if x < y then
      Node (insert x left, y, right) (* if x is less than current node value, insert x into left subtree *)
    else if x > y then
      Node (left, y, insert x right) (* if x is greater than current node value, insert x into right subtree *)
    else
      tree (* if x is equal to current node value, do nothing and return current tree *)

(* This function checks if a given element is present in the binary search tree *)
let rec contains (x: 'a) (tree: 'a bst) : bool =
  match tree with
  | Empty -> false (* if tree is empty, return false *)
  | Node (left, y, right) -> (* if tree is not empty, recursively traverse the tree to find x *)
    if x < y then
      contains x left (* if x is less than current node value, search in left subtree *)
    else if x > y then
      contains x right (* if x can be greater than current node value, search in right subtree *)
    else
      true (* if x is found, return true *)

(* This function deletes an element from the binary search tree and returns the updated tree *)
let rec delete (x: 'a) (tree: 'a bst) : 'a bst =
  match tree with
  | Empty -> Empty (* if tree is empty, return empty *)
  | Node (left, y, right) ->
    if x < y then
      Node (delete x left, y, right) (* if x is less than current node value, delete x from left subtree *)
    else if x > y then
      Node (left, y, delete x right) (* if x is greater than current node value, delete x from right subtree *)
    else
      match (left, right) with
      | (Empty, _) -> right (* if left subtree is empty, replace current node with right subtree *)
      | (_, Empty) -> left (* if right subtree is empty, replace current node with left subtree *)
      | (_, _) ->
        (* if both left and right subtrees are non-empty, find and replace current node with rightmost node of left subtree *)
        let rec find_max (t: 'a bst) : 'a =
          match t with
          | Node (a, b, Empty) -> b
          | Node (_, _, r) -> find_max r
          | Empty -> failwith "Empty tree should not be encountered while finding max"
        in
        let max_val = find_max left in
        Node (delete max_val left, max_val, right)

(* This function performs an inorder traversal of the binary search tree and returns a list of elements in sorted order *)
let rec inorder (tree: 'a bst) : 'a list =
  match tree with
  | Empty -> [] (* if tree is empty, return empty list *)
  | Node (left, x, right) -> inorder left @ [x] @ inorder right (* if tree is not empty, recursively traverse left subtree, add root value, and then recursively traverse right subtree *)

(* This function checks if two binary search trees are identical *)
let rec equal (tree1: 'a bst) (tree2: 'a bst) : bool =
  match (tree1, tree2) with
  | (Empty, Empty) -> true (* if both trees are empty, they are equal *)
  | (Node (l1, x1, r1), Node (l2, x2, r2)) -> (* if both trees are non-empty, compare values and recursively check left and right subtrees *)
    if x1 = x2 then
      equal l1 l2 && equal r1 r2
    else false
  | (_, _) -> false (* if one tree is empty and the other is non-empty, they are not equal *)

(* This function finds the height of a binary search tree *)
let rec height (tree: 'a bst) : int =
  match tree with
  | Empty -> 0 (* if tree is empty, height is 0 *)
  | Node (left, _, right) -> 1 + max (height left) (height right) (* height is 1 + maximum height of left and right subtrees *)