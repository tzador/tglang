(* This is a function that takes in a list and a function as parameters
and applies the function to every element in the list, returning a new list with the updated values. *)

let map (f: 'a -> 'b) (l: 'a list): 'b list =
  let rec helper func lst acc =
    match lst with
    | [] -> List.rev acc (* Reverse list since we're building it up backwards *)
    | hd::tl -> helper func tl (func hd :: acc) (* Apply function to head and add it to accumulator list *)
  in
  helper f l []; (* Initial call with function and empty accumulator list *)
;; (* End of function declaration *)

(* Example usage *)
let numbers = [1; 2; 3; 4; 5];;
let squared_numbers = map (fun x -> x * x) numbers;; (* Use anonymous function to square all numbers *)
print_endline (string_of_int squared_numbers);; (* Print the resulting list: "[1; 4; 9; 16; 25]" *)