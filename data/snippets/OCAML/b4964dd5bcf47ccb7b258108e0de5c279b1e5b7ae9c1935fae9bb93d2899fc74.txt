(** A group data type. *)
type Group =
  (* A subgroup containing an integer. *)
  | Subgroup of int
  (* A larger group containing a list of subgroups. *)
  | Group of Group list
  (* A submodel containing a string and a subgroup. *)
  | Submodel of string * Group

(* Function to check if a given group is equal to another group. *)
let rec is_equal g1 g2 =
  match (g1, g2) with
  (* If both groups are subgroups, check if their integers are equal. *)
  | (Subgroup i1, Subgroup i2) -> i1 = i2
  (* If both groups are models, check if their strings and subgroups are equal. *)
  | (Submodel (s1, g1), Submodel (s2, g2)) -> s1 = s2 && is_equal g1 g2
  (* If both groups are lists, check if they have the same length and if their elements are equal. *)
  | (Group l1, Group l2) -> (List.length l1) = (List.length l2) && List.for_all2 is_equal l1 l2
  (* If any of the groups is of a different type, they are not equal. *)
  | (_, _) -> false

(* Function to concatenate two groups into a single larger group. *)
let rec concatenate g1 g2 =
  match (g1, g2) with
  (* If both groups are subgroups, create a list containing them. *)
  | (Subgroup i1, Subgroup i2) -> Group [Subgroup i1; Subgroup i2]
  (* If both groups are models, create a submodel containing their concatenated strings and subgroups. *)
  | (Submodel (s1, g1), Submodel (s2, g2)) -> Submodel (s1 ^ s2, concatenate g1 g2)
  (* If both groups are lists, concatenate them and wrap them in a larger group. *)
  | (Group l1, Group l2) -> Group (l1 @ l2)
  (* If one of the groups is a subgroup, wrap it with the other group in a larger group. *)
  | (Subgroup i1, l2) -> Group [Subgroup i1; l2]
  | (l1, Subgroup i2) -> Group [l1; Subgroup i2]

(* Example usage of the above functions. *)
let group1 = Submodel ("A", Group [Subgroup 1; Subgroup 2])
let group2 = Submodel ("B", Group [Subgroup 3])
let group3 = Group [group1; group2]

let group4 = Submodel ("C", Group [Subgroup 1; Subgroup 2; Subgroup 3])
let group5 = concatenate group1 group2
let group6 = concatenate group3 group4

if is_equal group5 group6 then
  print_endline "The groups are equal"
else
  print_endline "The groups are not equal"