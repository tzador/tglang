(* This code snippet implements a recursive function that computes the nth Fibonacci number *)

(* Helper function that takes in two previous Fibonacci numbers and returns the next one *)
let rec fib_helper prev1 prev2 count =
  if count = 0 then prev1 (* Base case, return the first Fibonacci number if count is 0 *)
  else fib_helper (prev1 + prev2) prev1 (count - 1) (* Recursive call with updated previous numbers and decreased count *)

(* Main function that calls helper function with initial values *)
let fib n =
  fib_helper 1 0 n (* Initial values for the Fibonacci sequence *)

(* Output: The output of calling the function with n = 6 is 8 *)