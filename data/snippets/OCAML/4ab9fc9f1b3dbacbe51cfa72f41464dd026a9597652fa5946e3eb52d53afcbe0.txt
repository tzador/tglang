(** Recursive function to calculate the factorial of a number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n - 1)

(** Function to sum a list of integers using tail recursion *)
let sum_list lst =
  let rec sum_acc acc = function
    | [] -> acc
    | x::xs -> sum_acc (x + acc) xs
  in sum_acc 0 lst

(** Implementation of quicksort algorithm *)
let rec quicksort = function
  | [] -> []
  | pivot :: xs ->
      let smaller, larger = List.partition ((>) pivot) xs in
      quicksort smaller @ [pivot] @ quicksort larger

(** Example usage of functions *)
let () =
  Printf.printf "Factorial of 5 is %d\n" (factorial 5);
  let numbers = [5;2;7;3;9;1] in
  Printf.printf "Sum of list %s is %d\n"
    (String.concat ", " (List.map string_of_int numbers))
    (sum_list numbers);
  let sorted = quicksort numbers in
  Printf.printf "Sorted list: %s\n" (String.concat ", " (List.map string_of_int sorted))