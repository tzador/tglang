(* A function that calculates the factorial of a given number *)
let rec factorial num = 
    if num <= 1 then 1  (* Base case: factorial of 1 is 1 *)
    else num * factorial (num - 1)  (* Recursive case: multiplies number by factorial of (num - 1) *)

(* A function that calculates the sum of a list of integers *)
let rec sum_list list = 
    match list with
    | [] -> 0  (* Base case: empty list has a sum of 0 *)
    | head :: tail -> head + sum_list tail  (* Recursive case: adds first element to sum of remaining list *)
    
(* A function that checks if a given number is prime *)
let is_prime num = 
    let rec check_divisor divisor = 
        if divisor = 1 then true  (* Base case: 1 is always a divisor *)
        else
            if num mod divisor = 0 then false  (* If number is divisible by divisor, it is not prime *)
            else check_divisor (divisor - 1)  (* Check next divisor *)

    if num <= 1 then false  (* Numbers less than or equal to 1 are not prime *)
    else check_divisor (num - 1)  (* Start checking divisors from num - 1 *)

(* A function that returns the nth element in the Fibonacci sequence *)
let rec fibonacci num = 
    match num with
    | 0 -> 0  (* Base case: first Fibonacci number is 0 *)
    | 1 -> 1  (* Base case: second Fibonacci number is 1 *)
    | _ -> fibonacci (num - 1) + fibonacci (num - 2)  (* Recursive case: adds together previous two numbers in sequence *)