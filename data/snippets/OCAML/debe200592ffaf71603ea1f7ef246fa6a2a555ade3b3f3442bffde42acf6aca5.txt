(* Function to calculate the nth Fibonacci number using recursion*)
let rec fibonacci n =
  match n with
  | 0 | 1 -> n (* Base cases, return n if n is 0 or 1*)
  | n -> fibonacci (n-1) + fibonacci (n-2) (* Recursive call to add previous 2 Fibonacci numbers*)

(* Function to calculate the factorial of a number using tail recursion*)
let factorial n =
  let rec factorial_helper n accumulator = (* Inner function with accumulator parameter *)
    match n with
    | 0 -> accumulator (* Base case, return accumulator if n is 0 *)
    | n -> factorial_helper (n-1) (n*accumulator) (* Recursive call with updated accumulator *)
  in factorial_helper n 1 (* Initial call with initial accumulator value of 1 *)

(* Function to check if a number is prime *)
let is_prime n =
  let rec is_divisible d =
    match d with
    | 1 -> false (* Base case, 1 is always a factor of any number *)
    | d -> if n mod d = 0 then true else is_divisible (d-1) (* Recursive call to check for factors *)
  in not (is_divisible (n-1)) (* Return the opposite of is_divisible since prime numbers have no factors other than 1 and itself *)