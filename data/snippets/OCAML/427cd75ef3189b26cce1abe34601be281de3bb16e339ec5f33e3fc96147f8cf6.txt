(** the following code creates a function that takes in a list and returns the sum of all positive numbers in the list *)
let sum_positive (lst: int list) : int = 
  (** helper function to handle individual elements in the list  *)
  let rec sum_helper (lst: int list) (acc: int) : int = 
    match lst with 
    | [] -> acc
    | hd::tl -> 
      (** checks if the element is positive and adds it to the accumulator if so, then recursively calls the helper function on the rest of the list  *)
      if hd > 0 then sum_helper tl (acc + hd)
      else sum_helper tl acc
  (** call the helper function with an initial accumulator value of 0 *)
  sum_helper lst 0
(** example usage with a list containing 1, -2, 3, 4 *)
let result = sum_positive [1; -2; 3; 4] 
(** expected output: 8 - since 1, 3, and 4 are positive and their sum is 8 *)