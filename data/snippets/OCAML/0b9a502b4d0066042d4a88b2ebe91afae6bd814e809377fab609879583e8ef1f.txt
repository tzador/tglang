(* OCaml code to calculate the factorial of a number using tail recursion *)
let rec factorial_tail n acc =
  if n = 1 then acc
  else factorial_tail (n - 1) (acc * n)

(* OCaml code to calculate the power of a number using tail recursion *)
let rec power_tail x n acc =
  if n = 0 then acc
  else power_tail x (n - 1) (acc * x)

(* OCaml code to calculate the fibonacci sequence up to a given number using tail recursion *)
let rec fibonacci_tail n acc =
  match n with
  | 0 -> 0
  | 1 -> acc
  | _ -> fibonacci_tail (n - 1) (acc + fibonacci_tail (n - 2) acc)

(* OCaml code to calculate the factorial of a number using tail recursion *)
let rec factorial n =
  factorial_tail n 1

(* OCaml code to calculate the power of a number using tail recursion *)
let rec power x n =
  power_tail x n 1

(* OCaml code to calculate the fibonacci sequence up to a given number using tail recursion *)
let rec fibonacci n =
  fibonacci_tail n 1
  ;;