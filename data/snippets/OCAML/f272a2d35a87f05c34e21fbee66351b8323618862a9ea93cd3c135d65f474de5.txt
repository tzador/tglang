(* This is an annotated code snippet in OCAML *)

(* Creating a function to calculate the factorial of a number using recursion *)
let rec factorial n = 
    if n > 0 then
        n * factorial (n-1)
    else
        1
in

(* Using pattern matching to handle invalid input *)
match n with
| 0 -> Printf.printf "Invalid input"
| _ -> Printf.printf "The factorial of %d is %d" n (factorial n)
;;

(* Creating a list of numbers *)
let numbers = [1; 2; 3; 4; 5]

(* Using list comprehension to calculate the factorial of each number in the list *)
let factorials = List.map (fun n -> factorial n) numbers;;

(* Printing out the list of factorials *)
Printf.printf "[%s]" (List.fold_left (fun acc x -> acc ^ ", " ^ string_of_int x) (string_of_int (List.hd factorials)) (List.tl factorials));;