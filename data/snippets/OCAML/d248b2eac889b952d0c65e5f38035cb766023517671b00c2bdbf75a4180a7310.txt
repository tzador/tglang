(* This function implements the QuickSort algorithm for sorting an array of integers *)
let rec quicksort arr = 
  match arr with
  | [] -> [] (* Base case: if array is empty, return empty array *)
  | pivot::tail -> (* Recursive case: take the first element as the pivot *)
      let lesser, greater = List.partition (fun x -> x < pivot) tail in (* Partition the remaining array into elements less than and greater than the pivot *)
      quicksort lesser @ [pivot] @ quicksort greater (* Sort the two partitions and concatenate them with the pivot *)

(* Example usage *)
let sorted = quicksort [5;2;8;1;9] in
print_endline (List.fold_left (fun acc x -> acc ^ " " ^ string_of_int x) "" sorted) (* Output: 1 2 5 8 9 *)