(* Function to recursively search for an item in a list *)
let rec search lst item =
  match lst with
  | [] -> false           (* Base case: empty list, item not found *)
  | hd::tl ->             (* Head-tail notation to access list elements *)
      if hd = item then
        true              (* Base case: item found in list *)
      else
        search tl item    (* Recursive case: search in remaining list *)

(* Function to merge two sorted lists *)
let rec merge lst1 lst2 =
  match lst1, lst2 with
  | [], lst2 -> lst2          (* Base case: if first list is empty, return second list *)
  | lst1, [] -> lst1          (* Base case: if second list is empty, return first list *)
  | hd1::tl1, hd2::tl2 ->
      if hd1 <= hd2 then       (* Compare heads of both lists *)
        hd1 :: merge tl1 lst2  (* Append head of first list and recursively call merge on tail of first list and second list *)
      else
        hd2 :: merge lst1 tl2  (* Append head of second list and recursively call merge on first list and tail of second list *)