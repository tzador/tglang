(* Define a recursive function to calculate the factorial of a given number *)
let rec factorial n =
  (* Base case - the factorial of 0 is 1 *)
  if n = 0 then 1
  (* Recursive case - the factorial of n is n times the factorial of n-1 *)
  else n * factorial (n-1)

(* Define a function to calculate the sum of the first n natural numbers *)
let sum_n n =
  (* Use tail recursion to keep track of the running sum *)
  let rec helper acc n =
    (* Base case - when n is 0, return the accumulated sum *)
    if n = 0 then acc
    (* Recursive case - add n to the accumulated sum and decrement n *)
    else helper (acc + n) (n-1)
  (* Initialize the helper function with an initial sum of 0 and n as the input *)
  in helper 0 n
  
(* Define a function to check if a given number n is prime *)
let is_prime n =
  (* Define a helper function to check if a given number is divisible by any number between 2 and its square root *)
  let rec helper i =
    if i * i > n then true (* If i exceeds the square root of n, then n is prime *)
    else if n mod i = 0 then false (* If n is divisible by i, then n is not prime *)
    else helper (i+1) (* Otherwise, increment i and check again *)
  (* Initialize the helper function with an initial i value of 2 *)
  in helper 2
  
(* Define a function to filter out prime numbers from a given list of integers *)
let filter_primes lst =
  (* Use pattern matching to check for empty or single element list *)
  match lst with
  | [] -> [] (* Return empty list *)
  | x::[] -> if is_prime x then [x] else [] (* If list has only 1 element, check if it's prime and return list if it is *)
  | x::xs -> if is_prime x then x::filter_primes xs (* If first element is prime, add it to the filtered list and recursively filter the rest of the list *)
             else filter_primes xs (* If first element is not prime, skip it and recursively filter the rest of the list *)
             
(* Define a function to take the first n elements of a given list *)
let take_n lst n =
  (* Define a helper function to keep track of the index and take n elements *)
  let rec helper i lst acc =
    (* Base case - when i reaches n, return the accumulated list *)
    if i = n then acc
    (* Recursive case - add the first element of the remaining list to the accumulated list and increment i *)
    else helper (i+1) (List.tl lst) (List.hd lst :: acc)
  (* Initialize the helper function with an initial index of 0, the full list, and an empty list as the accumulator *)
  in List.rev (helper 0 lst [])
  
(* Define a function to construct a binary search tree from a given list of integers *)
let rec construct_tree lst =
  match lst with
  | [] -> Empty (* If list is empty, return an empty tree *)
  | x::[] -> Node(x, Empty, Empty) (* If list has only 1 element, return a leaf node with that element *)
  | x::xs ->
    (* Filter out elements lesser than x and assign them to a left sub-tree *)
    let left_tree = construct_tree (List.filter (fun n -> n < x) xs)
    (* Filter out elements greater than x and assign them to a right sub-tree *)
    and right_tree = construct_tree (List.filter (fun n -> n > x) xs)
    (* Return a node with x as the root and its left and right sub-trees *)
    in Node(x, left_tree, right_tree)
  
(* Define a function to insert a new element into a binary search tree *)
let rec insert_tree tree x =
  match tree with
  | Empty -> Node(x, Empty, Empty) (* If tree is empty, return a leaf node with x *)
  | Node(value, left, right) ->
    if x < value then Node(value, insert_tree left x, right) (* If x is lesser than the current node's value, insert into left sub-tree *)
    else Node(value, left, insert_tree right x) (* If x is greater than the current node's value, insert into right sub-tree *)
             
(* Define a function to check if a given binary search tree is balanced *)
let rec is_balanced tree =
  match tree with
  | Empty -> true (* An empty tree is automatically balanced *)
  | Node(value, left, right) ->
    (* Get the height of the left subtree *)
    let left_height = tree_height left
    (* Get the height of the right subtree *)
    and right_height = tree_height right
    (* Check if the height difference between the left and right subtrees is less than or equal to 1 *)
    in if abs (left_height - right_height) <= 1 then true
       else false (* If the difference is greater than 1, the tree is unbalanced *)
  
(* Define a function to get the height of a given binary search tree *)
let rec tree_height tree =
  match tree with
  | Empty ->  -1 (* An empty tree has a height of -1 *)
  | Node(_, left, right) ->
    (* Recursively get the height of the left subtree and right subtree *)
    let left_height = tree_height left
    and right_height = tree_height right
    (* Return the maximum height plus 1 for the current node *)
    in 1 + max left_height right_height