let rec binary_search arr low high target =
    if high < low then -1
    else
        let mid = (low + high) / 2 in
        match arr.(mid) = target with
        true -> mid
        | false ->
            match arr.(mid) < target with
            true -> binary_search arr (mid + 1) high target
            | false -> binary_search arr low (mid - 1) target

(* Function to insert an element into a sorted array *)
let rec insert_into_sorted arr num =
    match arr with
    | [] -> [num]
    | head::tail ->
        match head < num with
        true -> head :: insert_into_sorted tail num
        | false -> num :: arr

(* Example usage *)
let sorted_arr = [1; 3; 5; 7; 9]
let target = 5

(* Use binary_search to find the index of the target element in sorted_arr *)
let index = binary_search sorted_arr 0 (List.length sorted_arr - 1) target

(* If target is not found, insert it into the sorted array *)
if index = -1 then
    let new_arr = insert_into_sorted sorted_arr target in
    (* Print the sorted array with the newly inserted element *)
    print_endline (List.to_string string_of_int new_arr)
else
    print_endline ("Target found at index " ^ string_of_int index)