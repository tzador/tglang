(* This is a function that takes in two integers and returns the sum of their squares. *)
let square_sum a b = 
  let square x = x * x in
  (square a) + (square b)
  
(* This is a recursive function that calculates the factorial of a given number. *)
let rec factorial n =
  if n < 0 then
    failwith "Factorial not defined for negative numbers"
  else if n = 0 then
    1
  else
    n * factorial (n - 1)

(* This is a function that checks if a given string is a palindrome. *)
let is_palindrome str =
  let rec reverse acc = function
    | [] -> acc
    | h :: t -> reverse (h :: acc) t
  (reverse [] 
    (String.split_on_char ' ' str))
  = 
  (String.split_on_char ' ' str) |> List.rev

(* This is a higher order function that takes in a function and applies it to a list. *)
let apply_to_list f lst =
  List.map f lst

(* Example usage of all the functions above *)
let sum_of_squares = square_sum 5 6  (* Output: 61 *)
let fact_of_five = factorial 5        (* Output: 120 *)
let palindrome = is_palindrome "race car"  (* Output: true *)
let double_list = apply_to_list (( * ) 2) [1;2;3]  (* Output: [2;4;6] *)