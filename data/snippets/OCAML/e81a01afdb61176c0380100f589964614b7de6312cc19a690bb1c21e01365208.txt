(* This code snippet is written in OCAML, a functional programming language *) 

(* Definition of a recursive function to calculate the factorial of a given number *)
let rec factorial n = 
    if n < 0 then 
        failwith "Factorial not defined for negative numbers"
    else if n = 0 then 
        1
    else 
        n * factorial (n-1)

(* Function that checks if a given number is prime *)
let is_prime n =
    let rec check_divisors current =
        if current * current > n then 
            true
        else if n mod current = 0 then 
            false
        else 
            check_divisors (current+1)
    in
    if n <= 1 then 
        false
    else 
        check_divisors 2

(* Sorting function using merge sort algorithm *)
let rec merge_sort lst =
    let rec split lst left right =
        match lst with
        | [] -> left, right
        | [x] -> x::left, right
        | x :: y :: rest -> split rest (x::left) (y::right)
    in
    let rec merge l1 l2 =
        match l1, l2 with
        | [], l -> l
        | l, [] -> l
        | x1 :: rest1, x2 :: rest2 ->
            if x1 < x2 then
                x1 :: (merge rest1 l2)
            else
                x2 :: (merge l1 rest2)
    in
    match lst with
    | [] -> []
    | [x] -> [x]
    | lst -> let (l1, l2) = split lst [] [] in merge (merge_sort l1) (merge_sort l2)

(* Example usage *)
let num = 5                                 (* Define a variable 'num' with value of 5 *)
let fac = factorial num                     (* Calculate factorial of 'num' using 'factorial' function *)
if is_prime fac then                         (* Check if the factorial is a prime number *)
    print_endline "Factorial is prime!"      (* If it is, print a message *)
else
    let sorted_list = merge_sort [7;3;9;5]   (* Sort a list of numbers using merge sort *)
    print_endline "Sorted list: "            (* Print a message *)
    List.iter (fun x -> print_int x; print_string " ") sorted_list  (* Print the sorted list, separated by spaces *)