(* A recursive function that calculates the factorial value of a given number *)
let rec factorial n =
    if n = 0 then 1 else n * factorial (n-1);
    
(* A function that takes in a list of integers and returns their summation *)
let rec sum_list lst =
    match lst with
    | [] -> 0
    | x::xs -> x + sum_list xs;
    
(* A function that takes in a string and returns the length of the longest word in the string *)
let longest_word s =
    let words = String.split_on_char ' ' s in
    let rec loop acc = function
        | [] -> acc
        | x::xs -> if String.length x > acc then loop (String.length x) xs else loop acc xs in
    loop 0 words; 
    
(* A function that returns true if a given string is a palindrome, otherwise returns false *)
let is_palindrome s =
    let length = String.length s in
    let rec loop i =
        if i >= length / 2 then true
        else s.[i] = s.[length - i - 1] && loop (i+1) in
    loop 0;
    
(* A function that merges two sorted lists in ascending order *)
let rec merge l1 l2 =
    match l1, l2 with
    | [], l -> l
    | l, [] -> l
    | x::xs, y::ys -> if x < y then x :: merge xs (y::ys) else y :: merge (x::xs) ys;
    
(* A function that reverses a given list *)
let rec reverse lst =
    match lst with
    | [] -> []
    | x::xs -> reverse xs @ [x];
    
(* A function that returns the nth fibonacci number *)
let rec fibonacci n =
    match n with
    | 0 | 1 -> n
    | _ -> fibonacci (n - 1) + fibonacci (n - 2);