(* This is a function that checks if the given string is a valid palindrome *)
let rec is_palindrome str =
  match str with
  | "" -> true (* An empty string is always a palindrome *)
  | s when s.[0] = s.[String.length s - 1] -> is_palindrome (String.sub s 1 (String.length s - 2))
  (* If the first and last characters are equal, call the function again with the string without those characters *)
  | _ -> false (* If the first and last characters are not equal, then it is not a palindrome *)

(* This is a function that takes a list of strings and returns a list of their lengths *)
let string_lengths list =
  List.map (fun str -> String.length str) list (* Uses the List.map function to apply the given function to each element in the list *)

(* This is a function that calculates the nth number in the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* The 0th number in the sequence is always 0 *)
  | 1 -> 1 (* The 1st number in the sequence is always 1 *)
  | _ -> fibonacci (n - 1) + fibonacci (n - 2) (* The nth number is calculated by adding the previous two numbers in the sequence *)

(* This is a function that takes in a list of numbers and returns the sum of all the elements *)
let rec sum_list list =
  match list with
  | [] -> 0 (* An empty list has a sum of 0 *)
  | [x] -> x (* A list with only one element has a sum equal to that element *)
  | x::xs -> x + sum_list xs (* Uses pattern matching and recursion to calculate the sum of the elements in the list *)

(* This is a function that deletes duplicates from a given list *)
let rec remove_duplicates list =
  match list with
  | [] -> [] (* An empty list has no duplicates *)
  | [x] -> [x] (* A list with only one element has no duplicates *)
  | x::xs when List.mem x xs -> remove_duplicates xs (* If an element is already in the rest of the list, remove it *)
  | x::xs -> x::(remove_duplicates xs) (* If an element is not in the rest of the list, keep it and remove duplicates from the rest of the list *)

(* This is a function that merges two sorted lists into one sorted list *)
let rec merge_lists list1 list2 =
  match list1, list2 with
  | [], _ -> list2 (* If list1 is empty, the merged list is just list2 *)
  | _, [] -> list1 (* If list2 is empty, the merged list is just list1 *)
  | x::xs, y::ys when x < y -> x::(merge_lists xs list2) (* If the first element in list1 is smaller, add it to the merged list and continue with the rest of list1 and list2 *)
  | x::xs, y::ys -> y::(merge_lists list1 ys) (* If the first element in list2 is smaller, add it to the merged list and continue with the rest of list1 and list2 *)

(* This is a function that converts a binary number to its decimal equivalent *)
let binary_to_decimal num =
  let rec loop n acc = (* A helper function that keeps track of the power of 2 and the decimal equivalent *)
    match n with
    | 0 -> acc (* When the binary number is 0, the decimal number is equal to the accumulated value *)
    | _ -> loop (n / 10) (acc + ((n mod 10) * (int_of_float 2.**float_of_int (!power)))) (* Recursively divides n by 10 and multiplies the remainder with 2 to the power of the current digit position *)
  in
  let power = ref 0 in (* Initializes the power to 0 *)
  loop num 0 (* Calls the helper function with the given binary number and an initial accumulated value of 0 *)

(* This is a function that calculates the factorial of a given number *)
let rec factorial num =
  match num with
  | 0 -> 1 (* 0! is defined as 1 *)
  | 1 -> 1 (* 1! is defined as 1 *)
  | _ -> num * factorial (num - 1) (* The factorial of a number is calculated by multiplying it with the factorial of the previous number *)