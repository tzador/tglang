(*Function that recursively calculates the nth Fibonacci number*)
let rec fib n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | x -> fib (x-1) + fib (x-2)

(*Function that uses dynamic programming to store previous calculations
  and improves the efficiency of the calculation*)
let fib_dp n =
  let rec helper n (a, b) =
    if n = 0 then a
    else helper (n-1) (b, a+b)
  in
  match n with
  | 0 -> 0
  | 1 -> 1
  | x -> helper (x-1) (0, 1)

(*Function that calculates the nth Tribonacci number using the same
  dynamic programming technique as the Fibonacci function*)
let tribonacci n =
  let rec helper n (a, b, c) =
    if n = 0 then a
    else helper (n-1) (b, c, a+b+c)
  in
  match n with
  | 0 -> 0
  | 1 -> 1
  | 2 -> 1
  | x -> helper (x-2) (0, 0, 1)

(*Function that uses memoization to store previous calculations
  and improve the efficiency of the calculation*)
let memoize f =
  let mem = Hashtbl.create 100 in
  fun x ->
  try
    Hashtbl.find mem x
  with Not_found ->
    let res = f x in
    Hashtbl.add mem x res;
    res

(*Function that calculates the nth Lucas number using memoization*)
let lucas n =
  let rec aux n =
    match n with
    | 0 -> 2
    | 1 -> 1
    | x -> (aux (x-1)) + (aux (x-2))
  in memoize aux n