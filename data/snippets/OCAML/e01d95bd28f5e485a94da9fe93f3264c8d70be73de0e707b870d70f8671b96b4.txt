type tree = | Empty | Node of int * tree * tree

(* This is a function that inserts an integer into a binary search tree *)
let rec insert (x: int) (t: tree) : tree =
    match t with
    | Empty -> Node (x, Empty, Empty)
    | Node (value, left, right) ->
        if x < value then
            Node (value, insert x left, right)
        else if x > value then
            Node (value, left, insert x right)
        else
            t

(* This is a function that checks if a given tree contains a specific element *)
let rec contains (x: int) (t: tree) : bool =
    match t with
    | Empty -> false
    | Node (value, left, right) ->
        if x == value then
            true
        else if x < value then
            contains x left
        else
            contains x right

(* This is a function that removes an element from a binary search tree *)
let rec remove (x: int) (t: tree) : tree =
    match t with
    | Empty -> Empty
    | Node (value, left, right) ->
        if x == value then
            match (left, right) with
            | (Empty, Empty) -> Empty
            | (_, Empty) -> left
            | (Empty, _) -> right
            | (_, _) ->
                let successor = find_min right in
                Node (successor, left, remove successor right)
        else if x < value then
            Node (value, remove x left, right)
        else
            Node (value, left, remove x right)

(* This is a helper function that finds the minimum value in a given tree *)
let rec find_min (t: tree) : int =
    match t with
    | Empty -> raise Not_found
    | Node (value, Empty, _) -> value
    | Node (_, left, _) -> find_min left

(* This is a function that retrieves all elements in a given tree in sorted order *)
let rec get_sorted (t: tree) : int list =
    match t with
    | Empty -> []
    | Node (value, left, right) ->
        (get_sorted left) @ [value] @ (get_sorted right)