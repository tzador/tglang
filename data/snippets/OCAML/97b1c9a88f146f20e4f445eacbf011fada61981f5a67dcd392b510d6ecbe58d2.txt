(* Defines a module named Person *)
module Person = struct
  (* Defines a record for the Person type *)
  type person = {
    name : string;
    age : int;
    email : string option;
  }

  (* Creates a function to create a person with given attributes *)
  let create_person name age email =
    {name = name; age = age; email = email}

  (* Creates an empty list to store person objects *)
  let person_list = ref []

  (* Adds a new person object to the person_list *)
  let add_person person =
    person_list := person :: !person_list

  (* Returns a list of all the person objects in person_list *)
  let get_all_persons () =
    !person_list

  (* Finds a person with a given name in the person_list *)
  let find_person name =
    List.find (fun person -> person.name = name) !person_list

  (* Creates a string representation of a person *)
  let string_of_person person =
    "Name: " ^ person.name ^ " Age: " ^ string_of_int person.age ^
    " Email: " ^
    (match person.email with
    | Some email -> email
    | None -> "Not provided")

  (* Defines a function to update the age of a person *)
  let update_age person new_age =
    person.age <- new_age

  (* Defines a function to update the email of a person *)
  let update_email person new_email =
    person.email <- new_email

  (* Defines a function to delete a person from the person_list *)
  let delete_person person =
    person_list := List.filter (fun p -> p <> person) !person_list
end

(* Adds a new person to the person_list *)
let person1 = Person.create_person "John" 25 (Some "john@example.com")
Person.add_person person1
let person2 = Person.create_person "Sarah" 30 None
Person.add_person person2

(* Retrieves all the person objects in the person_list *)
let all_persons = Person.get_all_persons ()

(* Finds a person with name "John" in the person_list *)
let john = Person.find_person "John"

(* Updates the age of Sarah in the person_list *)
Person.update_age person2 32

(* Deletes John from the person_list *)
Person.delete_person john