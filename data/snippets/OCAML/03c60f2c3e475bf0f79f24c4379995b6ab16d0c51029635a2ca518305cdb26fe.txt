(* This is a function that recursively finds the factorial of a number *)
let rec factorial n =
  if n = 0 then
    1
  else
    n * factorial (n - 1)
  
(* This is a function that calculates the sum of a list of integers *)
let rec sum ls =
  match ls with
  | [] -> 0
  | hd :: tl -> hd + sum tl
  
(* This is a function that returns true if a given string is a palindrome *)
let is_palindrome str =
  let rec reverse acc str =
    match str with
    | "" -> acc
    | s -> reverse (s.[0] :: acc) (String.sub s 1 (String.length s - 1))
  in
  str = reverse [] str
  
(* This is a function that checks if a given number is a prime number*)
let is_prime n =
  let rec check_divisor d =
    if d * d > n then
      true
    else if n mod d = 0 then
      false
    else
      check_divisor (d + 2)
  in
  match n with
  | 1 | 4 -> false
  | 2 | 3 -> true
  | n -> check_divisor 5