(* Define a recursive function that performs binary exponentiation 
   using tail recursion optimization. Takes base, exponent and 
   accumulator as parameters. *)
let rec bin_exp_tail base exp acc = 
  if exp = 0 then acc (* base case: return accumulator when exponent is 0 *)
  else if exp = 1 then base * acc (* base case: return accumulator multiplied by base when exponent is 1 *)
  else (* recursive case *)
    if exp mod 2 = 0 then bin_exp_tail (base * base) (exp / 2) acc (* if exponent is even, multiply base with itself and divide exponent by 2 *)
    else bin_exp_tail base (exp - 1) (base * acc) (* if exponent is odd, subtract 1 from exponent and multiply accumulator by base *)
    
(* Call the function with base = 5, exponent = 3 and accumulator = 1 *)
let result = bin_exp_tail 5 3 1

(* Print the result *)
print_int result