(* This is a function that takes in a list of tuples,
flattens it, and returns a new list of integers *)
let flatten_tuples lst =
  (* Helper function that flattens a single tuple *)
  let rec flatten_tuple tup acc =
    match tup with
    | (x,y) -> x::y::acc
    | _ -> acc
  in
  (* Main function that recursively flattens the list *)
  let rec flatten_list lst acc =
    match lst with
    | [] -> acc
    | x::xs -> flatten_list xs (flatten_tuple x acc)
  in
  (* Call flatten_list on the original list with an empty accumulator *)
  flatten_list lst [];;

(* Example usage of the function *)
let lst = [((1,2), (3,4)); ((5,6), (7,8)); ((9,10), (11,12))];;

let flattened_lst = flatten_tuples lst;;

(* Output: [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12] *)