(*
This code snippet demonstrates a recursive function that counts the number of nodes in a binary tree.

Parameters:
- bst - a binary search tree
*)

type 'a bst =
  | Empty
  | Node of 'a * 'a bst * 'a bst

let rec count_nodes bst =
  match bst with
  | Empty -> 0
  | Node (x, left, right) -> 1 + (count_nodes left) + (count_nodes right)

(*
Example usage:

let tree = Node (1, Node (2, Empty, Empty), Node (3, Node (4, Empty, Empty), Empty))

let result = count_nodes tree

(* Output: 4 *)