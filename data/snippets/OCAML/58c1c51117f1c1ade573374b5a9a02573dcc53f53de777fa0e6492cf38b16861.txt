(* This is a function that computes the factorial of a number using tail recursion *)

(* Define the factorial function *)
let rec factorial n =
  (* Define the helper function with an accumulator *)
  let rec helper acc n =
    if n = 0 then
      acc (* If the number is 0, return the accumulator *)
    else
      helper (acc * n) (n - 1) (* Otherwise, recursively call helper with updated accumulator and n-1 *)
  in
  helper 1 n (* Call helper function with initial accumulator of 1 and the given number *)

(* Call the factorial function *)
let result = factorial 5 (* Computes the factorial of 5 *)
(* result = 120 *)  (* Print the result *)

(* Output:
(* This is a function that computes the factorial of a number using tail recursion *)
(* Define the factorial function *)
let rec factorial n =
  (* Define the helper function with an accumulator *)
  let rec helper acc n =
    if n = 0 then
      acc (* If the number is 0, return the accumulator *)
    else
      helper (acc * n) (n - 1) (* Otherwise, recursively call helper with updated accumulator and n-1 *)
  in
  helper 1 n (* Call helper function with initial accumulator of 1 and the given number *)
(* Call the factorial function *)
let result = factorial 5 (* Computes the factorial of 5 *)
(* result = 120 *)  (* Print the result *) *)