let rec factorial n =
  if n = 0 then
    1
  else
    n * factorial (n - 1)

let rec fib n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | n -> fib (n - 1) + fib (n - 2)

let rec power x n =
  if n = 0 then
    1.0
  else if n = 1 then
    x
  else if n < 0 then
    1.0 /. power x (-n)
  else
    let half_pow = power x (n / 2) in
    half_pow *. half_pow *. power x (n mod 2)

let rec gcd a b =
  if b = 0 then
    a
  else
    gcd b (a mod b)

let rec sum_list lst =
  match lst with
  | [] -> 0
  | hd :: tl -> hd + sum_list tl