(* This is a recursive function that calculates the factorial of a number using pattern matching and tail recursion *)
let rec factorial n = match n with
| 0 -> 1 (* base case: factorial of 0 is 1 *)
| x -> x * factorial (x - 1) (* recursive case: factorial of x is x multiplied by the factorial of x-1 *)
;; (* end of function declaration *)

(* This function takes in a list of integers and returns a new list with the factorial of each element *)
let rec factorial_list lst = match lst with
| [] -> [] (* base case: empty list *)
| hd::tl -> (factorial hd)::(factorial_list tl) (* recursive case: create a new list with the factorial of the head of the list and recursively call the function on the tail *)
;; (* end of function declaration *)

(* example call: factorial_list [1;2;3] *)
(* output: [1; 2; 6] *)