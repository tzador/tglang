(** A recursive function to find the minimum value in a list of integers. *)

let rec min lst =
  match lst with
  | [] -> failwith "Empty list"
  | [x] -> x
  | x :: y :: rest ->
      if x < y then min (x :: rest)
      else min (y :: rest)

(** A helper function to swap the minimum value with the first element of the list. *)

let rec swap_min lst min_val =
  match lst with
  | [] -> []
  | x :: rest ->
      if x = min_val then min_val :: rest
      else min_val :: swap_min rest min_val

(** A function to sort a list of integers using selection sort. *)

let rec selection_sort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | _ ->
      let min_val = min lst in
      let swapped = swap_min lst min_val in
      min_val :: selection_sort (List.tl swapped)

(* Example usage *)

let sorted_list = selection_sort [5; 2; 8; 1; 9; 3] ;;
(* output: [1; 2; 3; 5; 8; 9]  *)