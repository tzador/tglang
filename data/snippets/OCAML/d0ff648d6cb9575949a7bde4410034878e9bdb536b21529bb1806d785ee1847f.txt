(* This code snippet demonstrates the use of algebraic data types in OCAML *)

(* Define an algebraic data type called 'list' that can hold either a 'Nil' value or a 'Cons' value which is a tuple of an integer and another list *)
type list = Nil | Cons of int * list

(* Define a function that takes in a list of integers and returns their sum using pattern matching on the 'list' type *)
let rec sum_list (l: list) : int =
  (* Match the list with either a 'Nil' value or a 'Cons' value *)
  match l with 
  | Nil -> 0 (* If the list is empty, the sum is 0 *)
  | Cons(x, rest) -> x + sum_list rest (* If the list is not empty, recursively add the current integer to the sum of the rest of the list *)

(* Create a list using the 'Cons' constructor *)
let myList = Cons(1, Cons(2, Cons(3, Nil))) (* This list contains the integers 1, 2, and 3 *)

(* Use the 'sum_list' function to calculate the sum of the elements in 'myList' *)
let total = sum_list myList (* The sum should be 6 *)

(* Print out the sum *)
print_endline(string_of_int total) (* Outputs "6" *)