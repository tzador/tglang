(* Definition of a tree data structure in OCAML *)

(* Define a type for the tree *)
type 'a tree =
  | Empty (* Represents an empty tree *)
  | Node of 'a * 'a tree * 'a tree (* Represents a node with a value and two sub-trees *)

(* Function to insert a new value into the tree *)
let rec insert_tree value tree =
  match tree with
  | Empty -> Node(value, Empty, Empty) (* If tree is empty, create a new node with the value *)
  | Node(v, left, right) ->
      if value < v then
        Node(v, insert_tree value left, right) (* If the value is smaller, insert it into the left sub-tree *)
      else if value > v then
        Node(v, left, insert_tree value right) (* If the value is larger, insert it into the right sub-tree *)
      else
        tree (* If the value already exists, return the original tree *)

(* Function to check if a value exists in the tree *)
let rec contains_tree value tree =
  match tree with
  | Empty -> false (* If tree is empty, value does not exist *)
  | Node(v, left, right) ->
      if value < v then
        contains_tree value left (* If the value is smaller, check the left sub-tree *)
      else if value > v then
        contains_tree value right (* If the value is larger, check the right sub-tree *)
      else
        true (* If the value is found, return true *)

(* Function to remove a value from the tree *)
let rec remove_tree value tree =
  match tree with
  | Empty -> Empty (* If tree is empty, value does not exist *)
  | Node(v, left, right) ->
      if value < v then
        Node(v, remove_tree value left, right) (* If the value is smaller, remove it from the left sub-tree *)
      else if value > v then
        Node(v, left, remove_tree value right) (* If the value is larger, remove it from the right sub-tree *)
      else
        (* If the value is found, delete the node by replacing it with its left or right sub-tree *)
        match left, right with
        | Empty, Empty -> Empty (* If both sub-trees are empty, delete the node *)
        | Empty, _ -> right (* If the left sub-tree is empty, replace the node with the right sub-tree *)
        | _, Empty -> left (* If the right sub-tree is empty, replace the node with the left sub-tree *)
        | _, _ -> (* If both sub-trees exist, find the minimum value in the right sub-tree and replace the node with it *)
            let rec find_min tree =
              match tree with
              | Empty -> failwith "Empty tree should not be passed to find_min"
              | Node(value, Empty, _) -> value (* If the left sub-tree is empty, return current value as minimum *)
              | Node(_, left, _) -> find_min left (* Otherwise, continue searching the left sub-tree *)

            let min = find_min right in
            let new_right = remove_tree min right in (* Remove the minimum value from right sub-tree *)
            Node(min, left, new_right) (* Replace the node with its minimum value and updated right sub-tree *)