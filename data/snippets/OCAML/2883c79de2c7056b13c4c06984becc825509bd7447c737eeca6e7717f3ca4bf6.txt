(* OCaml code snippet to generate a list of prime numbers using the sieve of Eratosthenes algorithm *)
 
(* Define a function to generate a range of numbers from 2 to n *)
let rec range n =
    if n < 2 then []
    else range (n-1) @ [n]

(* Define a function to remove multiples of a given number from a list *)
let remove_multiples num list =
    List.filter (fun x -> x mod num <> 0) list

(* Define a function to iterate through the list and remove multiples of each element *)
let rec sieve list =
    match list with
    | [] -> []
    | x::xs -> x :: sieve (remove_multiples x xs)

(* Define a function to generate a list of prime numbers up to a given limit *)
let primes limit =
    let range_list = range limit in
    let primes_list = sieve range_list in
    primes_list

(* Print the list of prime numbers up to 100 *)
primes 100

(* Output:  *)
[2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43; 47; 53; 59; 61; 67; 71; 73; 79; 83; 89; 97]