(* Function to calculate the factorial of a given number *)
let rec factorial n = 
  if n <= 1 then 1 (* Base case *)
  else n * factorial (n-1) (* Recursive call *)

(* Function to calculate the sum of squares of numbers from 1 to n *)
let rec sum_of_squares n = 
  if n <= 1 then 1 (* Base case *)
  else (n*n) + sum_of_squares (n-1) (* Recursive call *)

(* Function to check if a number is prime *)
let is_prime n = 
  let rec check_prime i = 
    if i * i > n then true (* Base case - number is prime *)
    else if n mod i = 0 then false (* Base case - number is not prime *)
    else check_prime (i+1) (* Recursive call - check next possible factor *)
  in
    check_prime 2

(* Function to generate a list of prime numbers less than or equal to n *)
let rec list_of_primes n = 
  if n =
  let rec add_primes i lst = 
    if i > 2 && is_prime i then add_primes (i-1) (lst @ [i])
    else if i = 2 then lst (* Base case - end of list *)
    else add_primes (i-1) lst (* Recursive call - continue adding to list *)
  in
    add_primes n []

(* Execution of functions *)
let num = 5
let fact = factorial num
let sum_sq = sum_of_squares num
let prime_list = list_of_primes num

(* Output of results *)
print_endline ("The factorial of " ^ string_of_int num ^ " is " ^ string_of_int fact)
print_endline ("The sum of squares from 1 to " ^ string_of_int num ^ " is " ^ string_of_int sum_sq)
print_endline ("The prime numbers less than or equal to " ^ string_of_int num ^ " are " ^ string_of_list prime_list)