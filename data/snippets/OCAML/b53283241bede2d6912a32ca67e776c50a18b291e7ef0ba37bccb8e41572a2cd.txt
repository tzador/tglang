(* This is a function that takes in two lists of integers and returns a list that contains the sum of elements at each index in the two lists *)

let rec add_lists_int list1 list2 = 
  match (list1, list2) with 
    | ([], []) -> () (* base case, empty lists *)
    | (h1::t1, []) -> failwith "Lists need to be of same length" (* error case, lists of different lengths *)
    | ([], h2::t2) -> failwith "Lists need to be of same length"
    | (h1::t1, h2::t2) -> h1 + h2 :: add_lists_int t1 t2;; (* recursive case, add elements at each index and continue with the rest of the lists *)

(* Example usage of the function *)

let list1 = [1; 2; 3]
let list2 = [4; 5; 6]

let sum_list = add_lists_int list1 list2 (* sum_list will contain [5; 7; 9] *)