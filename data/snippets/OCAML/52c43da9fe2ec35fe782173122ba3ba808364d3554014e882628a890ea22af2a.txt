(*
    This is a function that takes in two integers
    and returns their sum.
*)
let add (x : int) (y : int) : int =
    x + y

(*
    This is a recursive function that takes in an integer n
    and calculates the factorial of n.
*)
let rec factorial (n : int) : int =
    if n = 0 then 1
    else n * factorial (n - 1)

(*
    This is a function that checks if a given string
    is a palindrom or not.
*)
let is_palindrome (str : string) : bool =
    (* Helper function that reverses a string *)
    let reverse (s : string) : string =
        let rec helper (acc : string) (i : int) : string =
            if i < 0 then acc
            else helper (acc ^ String.get str i) (i - 1)
        in
        helper "" ((String.length s) - 1)
    in
    (* Compare the given string with its reverse *)
    if str = reverse str then true
    else false

(*
    This is a function that takes in a list of integers
    and returns a new list with only even numbers.
*)
let filter_even (lst : int list) : int list =
    (* Helper function that checks if a number is even *)
    let is_even (x : int) : bool =
        if x mod 2 = 0 then true
        else false
    in
    (* Recursive function that filters out odd numbers *)
    let rec helper (acc : int list) (rest : int list) : int list =
        match rest with
        | [] -> acc
        | h::t ->
            if is_even h then helper (acc @ [h]) t
            else helper acc t
    in
    helper [] lst