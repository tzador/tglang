(* This is a function that calculates the sum of two numbers, using pattern matching *)
let rec sum a b =
  match a with
  | 0 -> b (* If the first number is 0, return the second number *)
  | n -> 1 + sum (n-1) b ;; (* If the first number is not 0, recursively call the function with a decreased first number and add 1 to the result *)

(* This is a function that calculates the factorial of a given number *)
let rec factorial n =
  match n with
  | 0 -> 1 (* If the number is 0, return 1 *)
  | 1 -> 1 (* If the number is 1, return 1 *)
  | n -> n * factorial (n-1) ;; (* If the number is not 0 or 1, recursively call the function with a decreased number and multiply it with the result *)

(* This is a function that calculates the nth number in the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* If the number is 0, return 0 *)
  | 1 -> 1 (* If the number is 1, return 1 *)
  | n -> fibonacci (n-1) + fibonacci (n-2) ;; (* If the number is not 0 or 1, recursively call the function with the two previous numbers in the sequence and add them *)

(* This is a function that returns the length of a list *)
let rec length lst =
  match lst with
  | [] -> 0 (* If the list is empty, return 0 *)
  | h::t -> 1 + length t ;; (* If the list is not empty, recursively call the function with the tail of the list and add 1 to the result *)

(* This is a function that reverses a list *)
let rec reverse lst =
  match lst with
  | [] -> [] (* If the list is empty, return an empty list *)
  | h::t -> reverse t @ [h] ;; (* If the list is not empty, recursively call the function with the tail of the list and concatenate it with the first element in a new list *)

(* This is a function that filters a list based on a given condition *)
let rec filter lst cond =
  match lst with
  | [] -> [] (* If the list is empty, return an empty list *)
  | h::t -> if cond h then h::filter t cond else filter t cond ;; (* If the list is not empty, recursively call the function with the tail of the list and check if the condition is true for the first element, if it is, add it to a new list, otherwise, add nothing *)

(* This is a function that maps a function onto a list *)
let rec map lst func =
  match lst with
  | [] -> [] (* If the list is empty, return an empty list *)
  | h::t -> func h :: map t func ;; (* If the list is not empty, recursively call the function with the tail of the list and apply the function to the first element, then add the result to a new list *)

(* This is a function that folds a function onto a list *)
let rec fold lst func init =
  match lst with
  | [] -> init (* If the list is empty, return the initial value *)
  | h::t -> func h (fold t func init) ;; (* If the list is not empty, recursively call the function with the tail of the list and apply the function to the first element and the result of the recursive call, then return the final result *)

(* This is a function that calculates the power of a given number *)
let rec power n x =
  match n with
  | 0 -> 1 (* If the exponent is 0, return 1 *)
  | 1 -> x (* If the exponent is 1, return the base *)
  | n -> x * power (n-1) x ;; (* If the exponent is not 0 or 1, recursively call the function with a decreased exponent and multiply it with the base *)