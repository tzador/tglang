(* This code snippet is an implementation of the quicksort algorithm in OCaml *)
(* This function takes in a list and returns a sorted version of it using quicksort *)
let rec quicksort lst =
   match lst with
    | [] -> [] (* If the list is empty, return an empty list *)
    | [x] -> [x] (* If the list only has one element, return that element *)
    | pivot :: xs ->
       let smaller = List.filter (fun y -> y < pivot) xs in
        let bigger = List.filter (fun y -> y >= pivot) xs in
         quicksort smaller @ [pivot] @ quicksort bigger (* Recursive calls to sort the smaller and bigger elements *)