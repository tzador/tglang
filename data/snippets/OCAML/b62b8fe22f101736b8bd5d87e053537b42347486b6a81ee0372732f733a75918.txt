(* This is a recursive function in OCAML that calculates the factorial of a number *)
let rec factorial n = 
  if n = 0 then 1 
  else n * factorial (n-1)

(* This is a function that takes in a list of strings and returns the length of the longest string *)
let longest_string_length str_list = 
  let rec longest_length str_list acc = 
    match str_list with
    | [] -> acc
    | hd :: tl -> 
      let len = String.length hd in
      if len > acc then longest_length tl len else longest_length tl acc in
  
  longest_length str_list 0

(* This is a function that implements binary search on a sorted array *)
let rec binary_search arr target = 
  let rec binary_search_helper low high = 
    if low > high then -1
    else 
      let mid = (low + high) / 2 in
      if arr.(mid) = target then mid
      else if arr.(mid) > target then binary_search_helper low (mid-1)
      else binary_search_helper (mid+1) high in
  
  binary_search_helper 0 (Array.length arr - 1)

(* This is a function that recursively calculates the nth Fibonacci number *)
let rec fibonacci n = 
  if n < 2 then n
  else fibonacci (n-1) + fibonacci (n-2)

(* This is a function that takes in a list of numbers and returns a new list with only the even numbers *)
let rec even_numbers nums =
  match nums with
  | [] -> []
  | hd :: tl -> if hd mod 2 = 0 then hd :: even_numbers tl else even_numbers tl