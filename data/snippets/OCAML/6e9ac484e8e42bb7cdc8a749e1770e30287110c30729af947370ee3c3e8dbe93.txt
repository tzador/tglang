(* This is a function to calculate the factorial of a given number using recursion *)
let rec factorial n = 
    if n = 0 then 1
    else n * factorial (n-1)

(* This is a function to calculate the power of a number using recursion *)
let rec pow base exp = 
    if exp = 0 then 1
    else base * pow base (exp-1)

(* This is a function to calculate the factorial of a given number using tail recursion *)
let fact n = 
    let rec aux acc n = 
        if n = 0 then acc
        else aux (acc * n) (n-1)
    aux 1 n

(* This is a function to calculate the power of a number using tail recursion *)
let pow base exp = 
    let rec aux acc exp = 
        if exp = 0 then acc
        else aux (acc * base) (exp-1)
    aux 1 exp

(* This is a function to find the nth fibonacci number using recursion *)
let rec fibonacci n = 
    if n <= 1 then n
    else fibonacci (n-1) + fibonacci (n-2)

(* This is a function to find the nth fibonacci number using tail recursion *)
let fibonacci n = 
    let rec aux a b n = 
        if n = 0 then a
        else aux b (a+b) (n-1)
    aux 0 1 n

(* This is a function to find the largest element in a list using recursion *)
let rec find_max lst = 
    match lst with
    | [] -> failwith "Empty list"
    | [x] -> x
    | x :: xs -> max x (find_max xs)

(* This is a function to find the largest element in a list using tail recursion *)
let find_max lst = 
    let rec aux curr_max lst = 
        match lst with
        | [] -> curr_max
        | x :: xs -> aux (max curr_max x) xs
    aux (List.hd lst) (List.tl lst)

(* This is a function to check if a list is sorted in ascending order *)
let rec is_sorted lst = 
    match lst with
    | [] | [_] -> true
    | x :: y :: xs -> x <= y && is_sorted (y :: xs)

(* This is a function to insert an element at the correct position in a sorted list *)
let rec insert_sorted x lst = 
    match lst with
    | [] -> [x]
    | y :: ys when x < y -> x :: y :: ys
    | y :: ys -> y :: insert_sorted x ys

(* This is a function to sort a list in ascending order using recursion *)
let rec insertion_sort lst = 
    match lst with
    | [] -> []
    | x :: xs -> insert_sorted x (insertion_sort xs)

(* This is a function to merge two sorted lists into one sorted list *)
let rec merge lst1 lst2 = 
    match lst1, lst2 with
    | l1, [] -> l1
    | [], l2 -> l2
    | x :: xs, y :: ys -> if x <= y then x :: merge xs (y :: ys)
                    else y :: merge (x :: xs) ys

(* This is a function to split a list into halves *)
let rec split lst = 
    match lst with
    | [] -> [], []
    | [x] -> [x], []
    | x :: y :: zs -> let (lst1, lst2) = split zs in (x :: lst1, y :: lst2)

(* This is a function to sort a list in ascending order using merge sort *)
let rec merge_sort lst = 
    match lst with
    | [] | [_] -> lst
    | _ -> let (lst1, lst2) = split lst in merge (merge_sort lst1) (merge_sort lst2)

(* This is a function to apply a function to each element in a list *)
let rec map f lst = 
    match lst with
    | [] -> []
    | x :: xs -> (f x) :: (map f xs)

(* This is a function to filter a list and return all elements that satisfy a given condition *)
let rec filter f lst = 
    match lst with
    | [] -> []
    | x :: xs -> if f x then x :: filter f xs
                    else filter f xs