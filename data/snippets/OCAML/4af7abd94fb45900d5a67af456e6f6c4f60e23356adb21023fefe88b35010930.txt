(** A module for creating and manipulating Trees *)
module Tree =
  struct
    (** A Tree data type containing an element and its children. *)
    type 'a tree = Tree of 'a * 'a tree list

    (** Creates an empty Tree with no children. *)
    let empty = Tree (None, [])

    (** Inserts an element into the given Tree as a child of the specified parent. *)
    let insert t p x =
      match t with
      | Tree (e, c) when e = p -> Tree (e, x :: c)
      | Tree (e, c) -> Tree (e, List.map (fun t -> insert t p x) c)

    (** Returns the number of elements in the given Tree. *)
    let rec count t =
      match t with
      | Tree (None, _) -> 0
      | Tree (Some _, c) -> 1 + List.fold_left (fun acc t -> acc + count t) 0 c

    (** Applies a function to each element in a Tree and returns a new Tree with the modified elements. *)
    let rec map f t =
      match t with
      | Tree (None, []) -> empty
      | Tree (e, c) -> Tree (f e, List.map (map f) c)

    (** Returns a list of all elements in the given Tree in prefix order. *)
    let rec flatten t =
      match t with
      | Tree (Some e, []) -> [e]
      | Tree (None, _) -> []
      | Tree (Some e, c) -> e :: List.concat (List.map flatten c)

    (** Combines two Trees by creating a new Tree with the elements of both Trees as children of a new element. *)
    let combine t1 t2 =
      match (t1, t2) with
      | (Tree (None, []), _) -> t2
      | (_, Tree (None, [])) -> t1
      | (Tree (Some e1, c1), Tree (Some e2, c2)) -> Tree (None, [Tree (e1, c1); Tree (e2, c2)])

    (** Applies a binary operation to each element in two Trees and returns a new Tree with the modified elements. *)
    let rec fold f t1 t2 =
      match (t1, t2) with
      | (Tree (None, []), _) -> empty
      | (_, Tree (None, [])) -> empty
      | (Tree (Some e1, c1), Tree (Some e2, c2)) -> Tree (f e1 e2, List.map2 (fold f) c1 c2)
  end