(* This is a function that implements the Cyclic Redundancy Check (CRC) algorithm *)
let crc data =
  (* Generating the CRC polynomial using bitwise operations *)
  let polynomial = 0x04C11DB7 in
  (* Initializing the CRC to be all 1's *)
  let crc = ref 0xffffffff in
  (* Looping through each byte in the data *)
  for i = 0 to (String.length data) - 1 do
    (* Converting each byte to an int *)
    let byte = int_of_char data.[i] in
    (* XOR-ing the byte with the current value of the CRC *)
    crc := !crc lxor (byte lsl 24);
    (* Looping through each bit in the byte *)
    for j = 0 to 7 do
      (* Checking the most significant bit (bit 31) of the CRC *)
      let msb = (!crc land 0x80000000) <> 0 in
      (* Shifting the CRC to the left by 1 bit *)
      crc := !crc lsl 1;
      (* Checking if the current bit in the byte is 1 *)
      let bit = (byte land (1 lsl (7 - j))) <> 0 in
      (* If the MSB and current bit are both 1, XOR the polynomial with the CRC *)
      if msb && bit then crc := !crc lxor polynomial
    done;
  done;
  (* Reversing the CRC bits to match the endianness of the data *)
  let crc = !crc land 0xffffffff in
  let crc = (crc lsr 24)
            lor (crc lsr 8 land 0xff00)
            lor (crc lsl 8 land 0xff0000)
            lor (crc lsl 24) in
  (* Returning the final CRC as a hex string *)
  Printf.sprintf "%08x" crc