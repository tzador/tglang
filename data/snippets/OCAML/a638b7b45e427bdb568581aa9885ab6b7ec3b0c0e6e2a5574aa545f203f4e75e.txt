(* This is a recursive function that takes in an integer n and returns the Fibonacci number at position n in the series. *)

let fibonacci n =
  (* Base case: if n is 0 or 1, return n *)
  if n = 0 || n = 1 then 
    n
  else 
    (* Recursive call: calculate the sum of the previous two Fibonacci numbers at positions n-1 and n-2 *)
    fibonacci (n-1) + fibonacci (n-2)
  
(* This is a function that takes in a list of integers and returns a list of the corresponding Fibonacci numbers at each position in the list. *)

let rec fibonacci_list l = 
  match l with 
  | [] -> [] (* Base case: if the list is empty, return an empty list *)
  | x::xs -> fibonacci x :: fibonacci_list xs (* Recursive call: calculate the Fibonacci number for the first element in the list, and then recursively call for the rest of the list *)

(* Example: Calling fibonacci_list with a list of numbers 0 to 9 *)
fibonacci_list [0;1;2;3;4;5;6;7;8;9]

(* Output: [0;1;1;2;3;5;8;13;21;34] *)