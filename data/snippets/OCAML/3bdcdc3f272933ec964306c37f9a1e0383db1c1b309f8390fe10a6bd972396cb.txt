(* ### Graph data structure ### *)
type 'a graph = { /* define graph type with 'a as generic type */

  /* ### Node type definition ### */
  node : 'a; /* node holds a generic data type of type 'a */
  edges : ('a graph * int) list; /* list of tuples consisting of a graph and integer weight */

  /* Function to add an edge to the graph */
  let add_edge (graph : 'a graph) (new_graph : 'a graph) (weight : int) : 'a graph = {
    node = graph.node;
    edges = (new_graph, weight) :: graph.edges;
  }

  /* Function to remove an edge from the graph */
  let remove_edge (graph : 'a graph) (remove_graph : 'a graph) : 'a graph = {
    node = graph.node;
    edges = List.filter (fun (g, _) -> g != remove_graph) graph.edges; /* removes all tuples where the graph matches remove_graph */
  }

  /* Function to check if two graphs are connected */
  let rec is_connected (graph : 'a graph) (target : 'a graph) : bool = 
    //base case: check if target is the same graph as the current one
    if graph == target then true
    //recursively check if target is connected to any of the current graph's edges
    else List.exists (fun (g, _) -> is_connected g target) graph.edges

  /* Returns a list of the nodes in the graph */
  let rec get_nodes (graph : 'a graph) : 'a list = 
    //base case: if there are no more edges, return a list with only the current node
    if List.length graph.edges = 0 then [graph.node]
    //recursively add nodes from each edge to the list
    else graph.node :: (List.flatten (List.map (fun (g, _) -> get_nodes g) graph.edges))
}