(** 
    This code snippet demonstrates how to implement a merge sort algorithm in OCAML.
    It takes in a list of integers and sorts them in ascending order.
    This implementation uses a divide and conquer approach.
*)

(* Define a function to merge two sorted lists *)
let rec merge xs ys =
    match xs, ys with
    | [], [] -> []
    | [], ys -> ys
    | xs, [] -> xs
    | x::xs', y::ys' ->
        if x < y then x :: merge xs' ys
        else y :: merge xs ys'


(* Define a function to split a list into two halves *)
let rec split xs =
    let rec split_helper xs acc =
        match xs with
        | [] -> [], acc
        | [x] -> [x], acc
        | x::y::ys -> split_helper ys (x::acc)
    in
    split_helper xs []


(* Define a function to sort a list using merge sort *)
let rec merge_sort xs =
    match xs with
    | [] -> []
    | [x] -> [x]
    | xs ->
        let left, right = split xs in
        merge (merge_sort left) (merge_sort right)


(* Example usage *)
let input_list = [3; 1; 7; 2; 5; 4; 9; 6; 8]
let sorted_list = merge_sort input_list

(* Output: sorted_list = [1; 2; 3; 4; 5; 6; 7; 8; 9] *)