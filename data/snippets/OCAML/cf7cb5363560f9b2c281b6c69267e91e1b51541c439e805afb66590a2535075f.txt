(* This is a function that takes in a list of integers and returns the sum of all the elements in the list *)
let rec sum_list lst = 
  match lst with
  | [] -> 0 (* If the list is empty, the sum is 0 *)
  | x::xs -> x + sum_list xs (* Otherwise, add the first element to the sum of the rest of the list *)

(* This is a function that takes in a list of strings and returns the length of the longest string in the list *)
let rec longest_string_length lst = 
  match lst with
  | [] -> 0 (* If the list is empty, then the longest string length is 0 *)
  | x::xs -> max (String.length x) (longest_string_length xs) (* Take the maximum between the length of the first string and the length of the longest string in the rest of the list *)

(* This is a recursive function that generates the nth Fibonacci number *)
let rec fibonacci n = 
  match n with
  | 0 -> 0 (* The 0th Fibonacci number is 0 *)
  | 1 -> 1 (* The 1st Fibonacci number is 1 *)
  | _ -> fibonacci(n-1) + fibonacci(n-2) (* The nth Fibonacci number is the sum of the (n-1)th and (n-2)th Fibonacci numbers *)

(* This is a higher-order function that takes in a list of integers and a function, and applies the function to every element in the list *)
let rec map_list f lst = 
  match lst with
  | [] -> [] (* If the list is empty, return an empty list *)
  | x::xs -> (f x) :: (map_list f xs) (* Apply f to the first element and recursive call the function on the rest of the list *)

(* This is a function that checks if a list is sorted in ascending order *)
let rec is_ascending lst = 
  match lst with
  | [] | [_] -> true (* If the list is empty or has only one element, it is sorted *)
  | x::y::xs -> (x <= y) && (is_ascending (y::xs)) (* Check if the first two elements are in ascending order and recursive call the function on the rest of the list *)

(* This is a function that takes in two lists and returns the Cartesian product of the two lists *)
let rec cartesian_product lst1 lst2 =
  match lst1 with
  | [] -> [] (* If the first list is empty, return an empty list *)
  | x::xs ->
    (* A helper function that combines the first element of the first list with each element of the second list *)
    let rec combine x lst =
      match lst with
      | [] -> [] (* If the second list is empty, return an empty list *)
      | y::ys -> (x,y) :: (combine x ys) (* Combine the first element with the first element of the second list and recursive call the function on the rest of the second list *)
    in
    (combine x lst2) @ (cartesian_product xs lst2) (* Combine the results of combining the first element with each element of the second list and recursive call the function on the rest of the first list *)