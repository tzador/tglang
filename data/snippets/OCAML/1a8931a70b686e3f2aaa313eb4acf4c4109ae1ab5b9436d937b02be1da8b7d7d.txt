(** This is a function that calculates the factorial of a given number. It uses recursion to perform the calculation.

@param n the number for which to calculate the factorial
@return the factorial of n *)
let rec factorial n =
    if n = 0 then 1 else n * factorial (n-1)

(** This is a function that calculates the nth term in the Fibonacci sequence. It uses recursion to perform the calculation.

@param n the number representing the term to calculate
@return the nth term in the Fibonacci sequence *)
let rec fibonacci n =
    if n = 0 then 0
    else if n = 1 then 1
    else fibonacci (n-1) + fibonacci (n-2)

(** This is a function that implements the quicksort algorithm to sort a list of integers.

@param list the list of integers to be sorted
@return the sorted list of integers *)
let rec quicksort list =
    match list with
    | [] -> []
    | x :: xs ->
        let smaller = List.filter (fun n -> n < x) xs in
        let larger = List.filter (fun n -> n > x) xs in
        quicksort smaller @ [x] @ quicksort larger

(** This is a function that finds the maximum value in a list of floats.

@param lst the list of floats to find the maximum value from
@return the maximum value in the list *)
let rec max_list lst =
    match lst with
    | [] -> raise (Failure "empty list")
    | [x] -> x
    | x :: rest ->
        let max_rest = max_list rest in
        if x > max_rest then x else max_rest

(** This is a function that recursively calculates the sum of a list of integers.

@param lst the list of integers to find the sum of
@return the sum of the list elements *)
let rec sum_list lst =
    match lst with
    | [] -> 0
    | [x] -> x
    | x :: rest -> x + sum_list rest

(** This is a function that calculates the nth power of a given number. It uses a tail-recursive helper function.

@param x the number to calculate the power of
@param n the exponent
@return x^n *)
let power x n =
    let rec helper x n acc =
        if n = 0 then acc
        else helper x (n-1) (x * acc)
    in
    helper x n 1