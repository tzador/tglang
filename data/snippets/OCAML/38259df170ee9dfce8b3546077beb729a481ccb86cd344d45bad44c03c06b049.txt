(* This is a function that calculates the factorial of a number using recursion. *)

(* [factorial] is a recursive function that takes in a number [n] and returns its factorial. *)
let rec factorial (n: int) : int =
  if n = 0 then 1 (* base case *)
  else n * factorial (n - 1) (* recursive case *)

(* Example usage of the [factorial] function *)
factorial 5 (* returns 120 because 5! = 5 * 4 * 3 * 2 * 1 = 120 *)

(* This is a function that calculates the Nth fibonacci number using memoization. *)

(* This is a helper function for [fibonacci] that stores the previously calculated fibonacci numbers. *)
let fib_store = Array.make 100 (-1) (* array of size 100 filled with -1s *)

(* [fibonacci] is a recursive function that takes in a number [n] and returns the Nth fibonacci number using memoization. *)
let rec fibonacci (n: int) : int =
  if fib_store.(n) != -1 then fib_store.(n) (* if the fibonacci number is already calculated, just return it *)
  else if n = 0 || n = 1 then n (* base cases *)
  else (
    (* calculate the fibonacci number recursively *)
    let fib_n = fibonacci (n - 1) + fibonacci (n - 2) in
    fib_store.(n) <- fib_n; (* store the calculated fibonacci number *)
    fib_n (* return the calculated fibonacci number *)
  )

(* Example usage of the [fibonacci] function *)
fibonacci 8 (* returns 21 because the 8th fibonacci number is 21 *)