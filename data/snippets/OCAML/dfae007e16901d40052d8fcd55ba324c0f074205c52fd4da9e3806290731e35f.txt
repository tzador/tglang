(* Define a recursive function to calculate the power of a number *)
let rec pow x y =
  if y = 0 then 1 (* If the power is 0, return 1 *)
  else x * pow x (y - 1) (* Otherwise, multiply number by itself and recursively call function with decreased power *)

let result = pow 2 5 (* Calculate 2 to the power of 5 *)
(* Result will be 32 *)

(* Define a function to print the elements of a list in reverse order *)
let rec print_reverse_list lst =
  match lst with 
  | [] -> () (* If list is empty, end function *)
  | hd::tl -> print_int hd; print_string " "; print_reverse_list tl (* Otherwise, recursively call function on tail of list and print the head *)
  
let myList = [1; 2; 3; 4; 5] (* Define a list of numbers *)
print_reverse_list myList (* Print the list in reverse order *)
(* Output will be: 5 4 3 2 1 *)