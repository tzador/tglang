(** Example of a recursive function in OCaml. *)

let rec factorial n = (* Recursive function for calculating factorial. *)
  if n < 0 then
    0 (* factorial of a negative number is undefined *)
  else if n = 0 then
    1 (* factorial of 0 is 1 *)
  else
    n * factorial (n - 1) (* Recursive call to calculate factorial of n - 1. *)

let rec fibonacci n = (* Recursive function for calculating Fibonacci sequence. *)
  match n with
  | 0 -> 0 (* First Fibonacci number is 0 *)
  | 1 -> 1 (* Second Fibonacci number is 1 *)
  | _ -> fibonacci (n - 1) + fibonacci (n - 2) (* Recursive calls to calculate nth Fibonacci number. *)

let rec power a b = (* Recursive function for calculating a raised to the power of b. *)
  match b with
  | 0 -> 1 (* Any number raised to the power of 0 is 1 *)
  | _ -> a * power a (b - 1) (* Recursive call to calculate a to the power of b - 1. *)

let rec merge_sort lst = (* Recursive function for implementing merge sort. *)
  match lst with
  | [] -> [] (* Empty list is already sorted *)
  | [x] -> [x] (* List with one element is already sorted *)
  | _ -> 
    let (left, right) = split_list lst in (* Split the list into two halves *)
    merge (merge_sort left) (merge_sort right) (* Merge the sorted halves using the merge function. *)

let rec split_list lst = (* Recursive function for splitting a list into two halves. *)
  match lst with
  | [] -> ([], []) (* If list is empty, return two empty lists *)
  | [x] -> ([x], []) (* If list has one element, return the element and an empty list *)
  | x :: y :: rest -> 
    let (left, right) = split_list rest in (* Recursively split the rest of the list *)
    (x :: left, y :: right) (* Append the first and second element of the original list to the respective halves. *)

let rec merge lst1 lst2 = (* Recursive function for merging two sorted lists. *)
  match lst1, lst2 with
  | [], [] -> [] (* If both lists are empty, return an empty list *)
  | [], _ -> lst2 (* If one list is empty, return the non-empty list *)
  | _, [] -> lst1 (* If one list is empty, return the non-empty list *)
  | x :: rest1, y :: rest2 -> 
    if x < y then
      x :: (merge rest1 lst2) (* Recursively merge the rest of lst1 with lst2 *)
    else 
      y :: (merge lst1 rest2) (* Recursively merge the rest of lst2 with lst1 *)