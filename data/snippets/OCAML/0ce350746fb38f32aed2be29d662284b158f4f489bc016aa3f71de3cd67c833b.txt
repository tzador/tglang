(* This is a function that calculates the Fibonacci sequence up to a given number *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* Base case for when n equals 0 *)
  | 1 -> 1 (* Base case for when n equals 1 *)
  | _ -> fibonacci (n - 1) + fibonacci (n - 2) (* Recursively calculates the sequence *)

(* This is a function that checks if a number is prime *)
let is_prime n =
  let rec is_divisible_by d =
    match d with
    | d when n = d -> true (* Base case for when d equals n, meaning n is prime *)
    | d when n mod d = 0 -> false (* Base case for when d evenly divides n, meaning n is not prime *)
    | d -> is_divisible_by (d + 1) (* Recursively checks if d+1 is divisible by n *)
  in
  is_divisible_by 2 (* Starts the recursive function at 2, since every number is divisible by 1 *)

(* This is a function that finds the prime factors of a given number *)
let prime_factors n =
  let rec find_factors num factor_list =
    match num with
    | num when is_prime num -> num::factor_list (* Base case for when num is prime, adds num to the list of factors *)
    | _ ->
      let rec find_next_factor i =
        if is_prime i && num mod i = 0 then i (* Checks if i is prime and evenly divides num *)
        else find_next_factor (i + 1) (* If i is not prime or does not evenly divide num, increment i and check again *)
      in
      let next_factor = find_next_factor 2 in (* Finds the smallest prime factor of num *)
      find_factors (num / next_factor) (next_factor::factor_list) (* Recursively calculates the remaining factors *)
  in
  List.rev (find_factors n []) (* Reverses the order of the list of factors so they are in ascending order *)

(* This is a function that prints the prime factors of a given number *)
let print_factors n =
  match n with
  | 0 -> print_endline "Cannot find prime factors of 0" (* Edge case for 0 *)
  | 1 -> print_endline "1 has no prime factors" (* Base case for 1 *)
  | _ ->
    let factors = prime_factors n in (* Calculates the prime factors *)
    List.iter (fun x -> print_int x; print_endline "") factors (* Prints each factor on a new line *)

(* The main function that executes the program *)
let () =
  print_endline "Enter a number:"; (* Asks user to input a number *)
  let input = read_int () in (* Reads user input as an integer *)
  print_factors input (* Prints the prime factors of the input number *)