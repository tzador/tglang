(* This is a function that takes in two integers and returns the greatest common divisor *)
let rec gcd x y =
  if x = 0 then y 
  else if y = 0 then x 
  else if x = y then x 
  else if x > y then gcd (x-y) y 
  else gcd x (y-x)

(* Function to calculate the factorial of a number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1)

(* Custom data type representing a binary tree *)
type 'a btree =
  | Leaf 
  | Node of 'a * 'a btree * 'a btree

(* Function to insert a value into a binary search tree *)
let rec insert_btree x = function
  | Leaf -> Node (x, Leaf, Leaf)
  | Node (y, left, right) ->
    if x < y then Node (y, insert_btree x left, right)
    else if x > y then Node (y, left, insert_btree x right)
    else Node (x, left, right)

(* Imperative function to reverse a list *)
let rev_list lst =
  let rec helper lst acc =
    match lst with
    | [] -> acc
    | h :: t -> helper t (h :: acc) in
  helper lst []

(* Function to sort a list using insertion sort *)
let rec insert x lst =
  match lst with
  | [] -> [x]
  | h :: t -> if x < h then x :: h :: t else h :: insert x t

let rec insertion_sort lst =
  match lst with
  | [] -> []
  | h :: t -> insert h (insertion_sort t)