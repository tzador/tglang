## module
module type Collection = sig
  type 'a t (** Type of a collection element *)
  val create : unit -> 'a t (** [create ()] is a new collection *)
  val add : 'a -> 'a t -> unit (** [add x c] modifies [c] by adding [x] *)
  val iter : ('a -> unit) -> 'a t -> unit (** [iter f c] applies [f] to all elements in [c] *)
end

## implementation
module CollectionImpl : Collection = struct
  type 'a t = 'a list ref
  let create () = ref []
  let add x c = c := x :: !c
  let iter f c = List.iter f !c
end

## example
(* Create a new collection *)
let c = CollectionImpl.create () in
(* Add elements to the collection *)
CollectionImpl.add 1 c;
CollectionImpl.add 2 c;
CollectionImpl.add 3 c;
(* Print all elements in the collection *)
CollectionImpl.iter print_endline c;

(* Output:
1
2
3
*)