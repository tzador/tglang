(* This code snippet creates a function that iteratively calculates the factorial of a given number. *)

(* Function that takes in a number and returns the factorial *)
let rec factorial n =
  if n <= 1 then 1 else n * factorial (n-1)

(* Function to print the factorial of a number *)
let print_factorial n =
  let result = factorial n in
  print_string ("The factorial of " ^ string_of_int n ^ " is " ^ string_of_int result)

(* Recursive function to calculate the sum of squares of given numbers *)
let rec sum_of_squares nums =
  match nums with
  | [] -> 0
  | h::t -> h * h + sum_of_squares t

(* Anonymous function to check if palindrome *)
let is_palindrome = fun s ->
  let length = String.length s in
  let rec check_palindrome i =
    if i >= length - i then true else s.[i] = s.[length - i - 1] && check_palindrome (i + 1)
  in
  check_palindrome 0

(* Higher-order function to find the maximum of two numbers *)
let max n1 n2 =
  if n1 > n2 then n1 else n2

(* Function to create a list with n numbers *)
let rec create_list n =
  if n = 0 then []
  else n :: create_list (n-1)

(* Function to filter a list based on a condition *)
let rec filter_list l p =
  match l with
  | [] -> []
  | h::t -> if p h then h :: filter_list t p else filter_list t p

(* Function to map a list with a given operation *)
let rec map_list l f =
  match l with
  | [] -> []
  | h::t -> f h :: map_list t f

(* Example usage of the functions *)
let n = 5 in
print_factorial n;                 (* Output: The factorial of 5 is 120 *)
let nums = [1;2;3;4;5] in
let square_sum = sum_of_squares nums in
print_string ("The sum of squares of [1;2;3;4;5] is " ^ string_of_int square_sum);    (* Output: The sum of squares of [1;2;3;4;5] is 55 *)
let pal_str = "racecar" in
if is_palindrome pal_str then print_string (pal_str ^ " is a palindrome") else print_string (pal_str ^ " is not a palindrome");    (* Output: racecar is a palindrome *)
print_string "\n";
let max_num = max 10 20 in
print_string ("The maximum of 10 and 20 is " ^ string_of_int max_num);    (* Output: The maximum of 10 and 20 is 20 *)
print_string "\n";
let num_list = create_list 10 in
let even_nums = filter_list num_list (fun x -> x mod 2 = 0) in
print_string ("The even numbers in the list [1;2;3;4;5;6;7;8;9;10] are " ^ string_of_list even_nums);    (* Output: The even numbers in the list [1;2;3;4;5;6;7;8;9;10] are [2;4;6;8;10] *)
let square_nums = map_list num_list (fun x -> x * x) in
print_string ("The squares of the given list [1;2;3;4;5;6;7;8;9;10] are " ^ string_of_list square_nums);    (* Output: The squares of the given list [1;2;3;4;5;6;7;8;9;10] are [1;4;9;16;25;36;49;64;81;100] *)