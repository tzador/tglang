(** This is a function that sorts a list of integers in descending order using the merge sort algorithm. *)
let rec merge_sort lst = 
  match lst with
  | [] -> [] (* If list is empty, return empty list *)
  | [x] -> [x] (* If list contains only one element, return list *)
  | _ -> (* for lists with more than one element *)
    let left = List.take (lst.length / 2) lst in (* take lower half of list *)
    let right = List.drop (lst.length / 2) lst in (* take upper half of list *)
    merge (merge_sort left) (merge_sort right) (* recursively apply merge_sort to both halves and merge them *)

(** This function merges two sorted lists together in descending order. *)
let rec merge left right = 
  match (left, right) with
  | ([], _) -> right (* If left list is empty, return right list *)
  | (_, []) -> left (* If right list is empty, return left list *)
  | (h1::t1, h2::t2) ->
    if h1 >= h2 then h1::(merge t1 right) (* If head of left list is larger, add it to result list and recursively merge rest of left list with full right list *)
    else h2::(merge left t2) (* If head of right list is larger, add it to result list and recursively merge full left list with rest of right list *)

(* Example Usage: *)
let lst = [10; 5; 2; 8; 3; 14] (* initialize list to be sorted *)

merge_sort lst (* Call merge_sort function on list *)

(* Output: [14; 10; 8; 5; 3; 2] *)