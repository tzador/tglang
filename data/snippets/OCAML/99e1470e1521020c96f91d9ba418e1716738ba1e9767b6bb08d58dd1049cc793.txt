(* This code snippet implements a simple function to reverse a list *)

(* Define the function "reverse" which takes in a list "lst" as its input*)
let reverse lst =

  (* Define helper function "loop" which takes in two parameters, the input list and an empty list to store the reversed list *)
  let rec loop lst acc = 
    
    (* If the input list is empty, return the reversed list *)
    if lst = [] then acc
    
    (* If the input list is not empty, add the first element to the reversed list and recursively call loop with the remaining elements *)
    else loop (List.tl lst) (List.hd lst :: acc)
  
  (* Call the helper function with the input list and an empty list as parameters *)
  loop lst []
  
(* Example usage *)
let myList = [1; 2; 3; 4; 5]
let reversedList = reverse myList

(* Print the original list and the reversed list *)
print_endline "Original list: " ^ (String.concat ", " (List.map string_of_int myList))
print_endline "Reversed list: " ^ (String.concat ", " (List.map string_of_int reversedList))

(* Output:
Original list: 1, 2, 3, 4, 5
Reversed list: 5, 4, 3, 2, 1 *)