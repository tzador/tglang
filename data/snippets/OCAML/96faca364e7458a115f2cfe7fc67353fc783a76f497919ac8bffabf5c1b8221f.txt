(** type definition of a binary tree data structure *)
type 'a binary_tree = 
  | Empty (* represents an empty tree *)
  | Node of ('a binary_tree * 'a * 'a binary_tree ) (* represents a tree with a root node and two subtrees *)

(** function to insert a new element into a binary tree in sorted order *)
let rec insert_binary_tree (x:'a) (t:'a binary_tree) =
  match t with
  | Empty -> Node(Empty, x, Empty) (* if tree is empty, create a new tree with the new element as the root *)
  | Node(left, y, right) ->
      if x < y then (* if the new element is less than the root, insert it into the left subtree *)
        Node(insert_binary_tree x left, y, right)
      else if x > y then (* if the new element is greater than the root, insert it into the right subtree *)
        Node(left, y, insert_binary_tree x right)
      else t (* if the new element is equal to the root, return the original tree *)

(** function to check if a binary tree is a binary search tree *)
let rec is_binary_search_tree (t:'a binary_tree) : bool = 
  match t with 
  | Empty -> true (* empty tree is a binary search tree *)
  | Node(Empty, _, Empty) -> true (* tree with only one node is a binary search tree *)
  | Node(Empty, _, right) -> (is_binary_search_tree right) && (max_value right > x) (* if only right subtree, check if it is a binary search tree and if all values in the subtree are greater than the root value *)
  | Node(left, _, Empty) -> (is_binary_search_tree left) && (min_value left < x) (* if only left subtree, check if it is a binary search tree and if all values in the subtree are less than the root value *)
  | Node(left, x, right) -> (is_binary_search_tree left) && (is_binary_search_tree right) && (min_value left < x) && (max_value right > x) (* if both subtrees exist, check if both are binary search trees and if all values in both subtrees are within the correct range *)

(** helper function to get the maximum value in a binary tree *)
let rec max_value (t:'a binary_tree) : 'a =
  match t with
  | Empty -> failwith "Empty tree has no maximum value"
  | Node(_, x, Empty) -> x
  | Node(_, _, right) -> max_value right (* recursively check the right subtree for a bigger value *)

(** helper function to get the minimum value in a binary tree *)
let rec min_value (t:'a binary_tree) : 'a =
  match t with 
  | Empty -> failwith "Empty tree has no minimum value"
  | Node(Empty, x, _) -> x
  | Node(left, _, _) -> min_value left (* recursively check the left subtree for a smaller value *)