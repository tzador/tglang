(** Code for sorting a list of integers using Merge Sort algorithm **)

(* Function to merge two sorted lists *)
let rec merge lst1 lst2 =
  match lst1, lst2 with
  | [], lst -> lst
  | lst, [] -> lst
  | h1::t1, h2::t2 ->
    if h1 < h2
    then h1 :: merge t1 lst2
    else h2 :: merge lst1 t2

(* Function to split a list into two sublists *)
let rec split lst =
  match lst with
  | [] -> [], []
  | [x] -> [x], []
  | x::y::t -> let l1, l2 = split t in
      x::l1, y::l2

(* Merge Sort function using recursion *)
let rec merge_sort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | lst -> let l1, l2 = split lst in
    merge (merge_sort l1) (merge_sort l2)

(* Example usage *)
let sorted_list = merge_sort [5; 2; 9; 3; 1; 7; 4; 6; 8]
(* Output should be [1; 2; 3; 4; 5; 6; 7; 8; 9] *)