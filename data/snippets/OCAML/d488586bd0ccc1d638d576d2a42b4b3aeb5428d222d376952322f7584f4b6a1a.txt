(* This is a function that takes in a list of integers and a target value and returns a new list containing all possible combinations of numbers from the input list that add up to the target value. *)

let rec combination_sum (nums : int list) (target : int) : int list list = 

  (* Helper function that takes in a prefix list, current sum, index of the starting position, and the target value and recursively calculates all possible combinations. *)
  
  let rec combinations (prefix : int list) (sum : int) (pos : int) (target : int) : int list list =
    match sum with
    | _ when sum = target -> [prefix] (* If the current sum is equal to the target value, return the prefix list as a single combination *)
    | _ when sum > target -> [] (* If the current sum exceeds the target value, there are no more valid combinations, so return an empty list *)
    | _ -> (* Otherwise, for each number starting from the given position, recursively call combinations with the updated prefix and sum *)
            List.fold_left (fun acc x -> acc @ (combinations (prefix @ [x]) (sum + x) pos target)) [] (List.nth nums pos)
  
  in combinations [] 0 0 target (* Call the helper function with an empty prefix, starting at index 0, and a sum of 0 *)
  
(* Example:
combination_sum [2;3;6;7] 7;;
- : int list list =
    [[2; 2; 2; 2; 2; 2; 2]; [2; 3; 2; 2; 3; 2; 3]; [2; 2; 3; 3; 3; 3; 2]; [2; 3; 3; 3; 3; 2; 3]; [3; 2; 3; 2; 3; 3; 3]; [2; 2; 2; 2; 2; 2; 3]; [3; 3; 2; 3; 2; 2; 3]; [3; 3; 2; 2; 3; 2; 3]; [3; 2; 3; 2; 3; 2; 3]; [6; 3; 2; 3; 3; 3; 2]] *)