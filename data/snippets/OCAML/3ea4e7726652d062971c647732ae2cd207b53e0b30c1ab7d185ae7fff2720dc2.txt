(* This is a function that takes in a list and a value, and checks if the value is in the list *)
let rec check_value list value = 
  match list with 
  | [] -> false (* If the list is empty, return false *)
  | x::xs -> if x = value then true else check_value xs value (* If first element is the value, return true, else check the rest of the list *)

(* This is a function that takes in a list and a function, and applies the function to each element in the list *)
let rec map_func list func = 
  match list with
  | [] -> []
  | x::xs -> (func x)::(map_func xs func) (* Apply the function to the first element, and then recursively apply to the rest of the list *)
  
(* This is a function that performs binary search on a sorted list to find the index of a given value *)
let rec binary_search list value low high = 
  if low > high then -1 (* If low is greater than high, the value is not in the list, return -1 *)
  else
    let mid = low + (high - low)/2 in (* Calculate the mid index *)
    match list with
    | [] -> -1
    | x::xs -> if x = value then mid (* If the first element is the value, return mid *)
               else if x > value then binary_search xs value low (mid-1) (* If the first element is greater than value, search in the first half of list *)
               else binary_search xs value (mid+1) high (* If the first element is less than value, search in the second half of list *)

(* This is a function that sorts a list using insertion sort algorithm *)
let rec insertion_sort list = 
  let rec insert element = function
    | [] -> [element] (* If the list is empty, insert the element *)
    | x::xs as lst -> if element <= x then element :: lst (* If the element is smaller than or equal to the first element, insert it at the beginning *)
                      else x :: insert element xs (* Otherwise, insert the element in the right place in the rest of the list *)
  in match list with
  | [] -> [] (* If the list is empty, return empty list *)
  | x::xs -> insert x (insertion_sort xs) (* Insert the first element in the sorted list recursively *)
  
(* This is a recursive function that calculates the fibonacci sequence *)
let rec fibonacci n = 
  match n with 
  | 0 -> 0 (* First fibonacci number is 0 *)
  | 1 -> 1 (* Second fibonacci number is 1 *)
  | _ -> fibonacci (n-1) + fibonacci (n-2) (* For all other numbers, sum the previous two fibonacci numbers *)

(* This is a datatype representing a binary tree with leaves and nodes *)
type btree = 
  | Leaf (* Representing a leaf node *)
  | Node of int * btree * btree (* Representing a node with an integer value and two subtrees *)

(* This is a function that inserts a value into a binary search tree *)
let rec insert_bst value = function
  | Leaf -> Node(value, Leaf, Leaf) (* If the tree is empty, create a node with the value *)
  | Node(v, left, right) -> if value < v then Node(v, insert_bst value left, right) (* If the value is less than the node value, insert in the left subtree *)
                            else Node(v, left, insert_bst value right) (* If the value is greater than the node value, insert in the right subtree *)
                          
(* This is a function that checks if a given binary tree is a binary search tree *)
let rec is_bst tree = 
  match tree with
  | Leaf -> true (* An empty tree is a valid binary search tree *)
  | Node(v, left, right) -> 
    let rec check_left = function (* Function to check if all values in left subtree are less than current node value *)
      | Leaf -> true
      | Node(x, l, r) -> if x < v then check_left l && check_left r (* If current node value is less than the parent, recursively check left subtree *)
                         else false
    in let rec check_right = function (* Function to check if all values in right subtree are greater than current node value *)
      | Leaf -> true
      | Node(x, l, r) -> if x > v then check_right l && check_right r (* If current node value is greater than the parent, recursively check right subtree *)
                         else false
    in check_left left && check_right right (* Check both subtrees and return true only if both are valid binary search trees *)
                          
(* An example list *)
let list = [8; 4; 1; 9; 3; 5; 7]
(* An example function to multiply elements by 2 *)
let multiply_by_two x = x * 2

(* An example binary tree *)
let bst = Node(8, Node(4, Node(1, Leaf, Leaf), Node(3, Leaf, Leaf)), Node(9, Leaf, Node(7, Leaf, Leaf)))