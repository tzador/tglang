(* A function that calculates the factorial of a given number using recursion *)
let rec factorial n =
  match n with
  | 0 -> 1 (* Base case: factorial of 0 is 1 *)
  | _ -> n * factorial (n-1) (* Recursive step: n * (n-1)! *)

(* A function that calculates the nth Fibonacci number using dynamic programming *)
let fibonacci n =
  let rec fibHelper a b count =
    match count with
    | 1 -> b (* Base case: return the second value in the sequence *)
    | _ -> fibHelper b (a+b) (count-1) (* Update a and b according to the sequence *)
  in
  if n < 1 then failwith "Input must be a positive integer." (* Handle invalid input *)
  else fibHelper 0 1 n (* Call helper function with initial values *)

(* A function that finds the maximum element in a list using pattern matching and recursion *)
let rec maxList lst =
  match lst with
  | [] -> failwith "Empty list."
  | [x] -> x (* Base case: return the first element as the max in a singleton list *)
  | hd::tl -> if hd > maxList tl then hd else maxList tl (* Recursively find max element in the tail of the list *)

(* A function that merges two sorted lists into one sorted list using tail recursion *)
let mergeLists lst1 lst2 =
  let rec merge acc lst1 lst2 =
    match lst1, lst2 with
    | [], l2 -> List.rev_append acc l2 (* If lst1 is empty, append lst2 to accumulator *)
    | l1, [] -> List.rev_append acc l1 (* If lst2 is empty, append lst1 to accumulator *)
    | hd1::tl1, hd2::tl2 -> (* If both lists have elements, compare and add the smaller one to the accumulator *)
      if hd1 < hd2 then merge (hd1::acc) tl1 lst2
      else merge (hd2::acc) lst1 tl2
  in merge [] lst1 lst2 (* Call helper function with empty accumulator *)