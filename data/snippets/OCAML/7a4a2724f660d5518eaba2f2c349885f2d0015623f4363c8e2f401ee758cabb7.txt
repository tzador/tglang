(** [merge_sort lst] is a sorted list of the elements in
    [lst] using the merge sort algorithm.

    Time complexity:
    - Best case: O(nlogn)
    - Worst case: O(nlogn)

    Space complexity:
    - Best case: O(n)
    - Worst case: O(n)

    @param lst the unsorted list
    @return sorted version of [lst]
*)
let rec merge_sort lst =
  let len = List.length lst in
    if len < 2 then
      lst
    else
      let mid = len / 2 in
      let rec split lstl lstr i =
        if i = mid then
          (lstl, lstr)
        else
          split (List.hd lstl :: lstl) (List.hd lstr :: lstr) (i + 1) in
      let lstl, lstr = split [] [] 0 in
      let rec merge lstl lstr sorted =
        match lstl, lstr with
        | [], _ -> List.rev_append sorted lstr
        | _, [] -> List.rev_append sorted lstl
        | hd1 :: tl1, hd2 :: tl2 ->
            if hd1 <= hd2 then
              merge tl1 lstr (hd1 :: sorted)
            else
              merge lstl tl2 (hd2 :: sorted) in
      merge (merge_sort lstl) (merge_sort lstr) []
;
aml
` ` `