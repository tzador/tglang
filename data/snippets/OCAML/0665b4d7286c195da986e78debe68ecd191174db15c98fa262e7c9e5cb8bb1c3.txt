(* This is a function that checks if a given list is in sorted order *)
(* and returns a boolean value *)

let rec is_sorted lst =
  match lst with
  | [] -> true (* an empty list is always sorted *)
  | [x] -> true (* a list with one element is always sorted *)
  | x::y::ys -> (* recursively check if the first two elements are in sorted order *)
    if x > y then
      false (* if they are not, the whole list is not sorted *)
    else
      is_sorted (y::ys) (* if they are, check the rest of the list *)

(* This is a function that merges two sorted lists into one sorted list *)
(* Uses an accumulator for improved efficiency *)

let rec merge acc lst1 lst2 =
  match lst1, lst2 with
  | [], _ -> (* if the first list is empty, we are done merging *)
    List.rev_append acc lst2 (* add the remaining elements of the second list to the accumulator and reverse the list *)
  | _, [] -> (* if the second list is empty, we are done merging *)
    List.rev_append acc lst1 (* add the remaining elements of the first list to the accumulator and reverse the list *)
  | x::xs, y::ys ->
    if x < y then
      merge (x::acc) xs (y::ys) (* add the smaller element to the accumulator and continue merging with the smaller element removed from its list *)
    else
      merge (y::acc) (x::xs) ys (* add the smaller element to the accumulator and continue merging with the smaller element removed from its list *)

(* This is a function that uses a merge sort algorithm to sort a list *)
(* Uses recursion and the previously defined functions *)

let rec merge_sort lst =
  match lst with
  | [] -> [] (* an empty list is already sorted *)
  | [x] -> [x] (* a single element list is already sorted *)
  | xs ->
    let mid = List.length xs / 2 in (* split the list into two roughly equal sublists *)
    let left = List.sub xs 0 mid in
    let right = List.sub xs mid (List.length xs - mid) in
    merge [] (merge_sort left) (merge_sort right) (* recursively sort the two sublists and merge them *)