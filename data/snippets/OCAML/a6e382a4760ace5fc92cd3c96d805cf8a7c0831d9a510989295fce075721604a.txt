(* This is a CamelCase identifier *)
let camelCase = (2 * 3) + 4 in
(* This is a list of integers *)
let myList = [1; 2; 3; 4; 5] in

(* A function to calculate the factorial of a given number *)
let rec factorial n = match n with
  | 0 -> 1
  | n -> n * factorial (n-1) in

(* This is a higher-order function that maps the factorial function onto each element in the list *)
let factList = List.map factorial myList in

(* A function to check if a number is prime *)
let isPrime n =
  let rec check k = (* This helper function checks for divisibility by all numbers up to (n-1) *)
      if k >= n then true
      else if n mod k = 0 then false
      else check (k+1) in
  check 2 in
  
  (* This is a list of prime numbers generated by filtering the original list using the isPrime function *)
  let primeList = List.filter isPrime myList in
  
  (* A function to calculate the sum of all elements in a list *)
  let sumList list = List.fold_left (+) 0 list in
  
  (* This prints the sum of the prime numbers *)
  print_endline(string_of_int (sumList primeList));