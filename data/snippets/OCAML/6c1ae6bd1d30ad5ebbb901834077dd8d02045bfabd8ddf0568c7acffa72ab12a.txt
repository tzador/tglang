(* Define helper function to perform operations on list *)
let rec perform_operations operations lst =
  match operations with
  | [] -> lst (* If no more operations, return list *)
  | hd::tl ->
    match hd with
    | "map" ->
      (* Apply map function to list using provided operation *)
      let mapped_lst = List.map (fun x -> x * 2) lst in
      (* Continue recursively with remaining operations and new list *)
      perform_operations tl mapped_lst
    | "filter" ->
      (* Apply filter function to list using provided operation *)
      let filtered_lst = List.filter (fun x -> x mod 2 = 0) lst in
      (* Continue recursively with remaining operations and new list *)
      perform_operations tl filtered_lst
    | _ -> failwith "Invalid operation"

(* Define list of operations to be performed *)
let operations = ["map"; "filter"]

(* Define initial list to be operated on *)
let lst = [1;2;3;4;5]

(* Call helper function with operations and list *)
let result = perform_operations operations lst

(* Output result *)
print_endline "Result: ";
print_endline (List.fold_left (fun acc x -> string_of_int x ^ " " ^ acc) "" result)