(* A function to return the GCD of two numbers, using Euclid's algorithm *)
let rec gcd a b =
    if b = 0 then a
    else gcd b (a mod b) (* The recursive call to gcd *);;

(* A function to calculate the factorial of a number *)
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n-1) (* The recursive call to factorial *);;

(* A function to check if a number is prime *)
let is_prime n =
    let rec is_divisor d =
        if d = 1 then true
        else if n mod d = 0 then false
        else is_divisor (d - 1)
    in
    is_divisor (n - 1);;

(* A function to generate a list of Fibonacci numbers *)
let fibo_list n =
    let rec fibo i a b =
        if i = n then []
        else a :: fibo (i + 1) b (a + b) (* The recursive call to fibo *)
    in
    if n < 1 then []
    else if n = 1 then [1]
    else
        let init_seq = [1; 1] in
        init_seq @ fibo 2 (List.hd init_seq) (List.nth init_seq 1);;