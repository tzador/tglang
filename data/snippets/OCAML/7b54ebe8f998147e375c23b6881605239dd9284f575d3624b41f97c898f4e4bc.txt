(* A function to find the factorial of a number using tail recursion *)

(* This function takes in an integer n and returns its factorial *)
let factorial n =
  let rec helper i acc =             (* helper function with accumulator parameter *)
    if i = 0 then                     (* base case: if i is 0, return accumulator *)
      acc
    else
      helper (i-1) (acc*i)            (* recursive call with updated accumulator *)
  in
  helper n 1                          (* initial call with n and starting accumulator 1 *)

(* Testing the factorial function *)
let _ = Printf.printf "Factorial of 5 is %d\n" (factorial 5)        (* expected output: 120 *)
let _ = Printf.printf "Factorial of 10 is %d\n" (factorial 10)      (* expected output: 3628800 *)

(* A function to find the n-th term in a Fibonacci series using dynamic programming *)

(* This function takes in an integer n and returns the n-th term in the Fibonacci series *)
let fibonacci n =
  let memo = Array.make (n+1) 0 in    (* array to store already calculated terms *)
  let rec helper i =                  (* helper function to perform calculation *)
    if i = 0 then                      (* base case: if i is 0, return 0 *)
      0
    else if i = 1 then                 (* base case: if i is 1, return 1 *)
      1
    else if memo.(i) = 0 then          (* if term not previously calculated, calculate and store in array *)
      memo.(i) <- helper (i-1) + helper (i-2);
    memo.(i)                           (* return the calculated term *)
  in
  helper n                            (* initial call with n *)

(* Testing the fibonacci function *)
let _ = Printf.printf "The 7th term in the Fibonacci series is %d\n" (fibonacci 7)       (* expected output: 13 *)
let _ = Printf.printf "The 15th term in the Fibonacci series is %d\n" (fibonacci 15)     (* expected output: 610 *)