(*This is a function that implements a recursive quicksort algorithm*)
(*It takes in a list of integers and returns a sorted list*)

let rec quicksort lst =
  match lst with
  | [] -> []
  | x :: xs ->
    let smaller, larger = List.partition ((>) x) xs in
    quicksort smaller @ [x] @ quicksort larger

(*This is a helper function used to generate a list of random integers for testing*)
let rec generate_random_list lst n =
  if n = 0 then lst
  else generate_random_list (Random.int 100 :: lst) (n-1)

(*This is a function that runs the quicksort algorithm multiple times on different random lists and returns the average runtime*)
let quicksort_evaluation num_lists list_size =
  let rec helper total i =
    if i >= num_lists then total /. float_of_int num_lists
    else
      let lst = generate_random_list [] list_size in
      let t1 = Sys.time() in
      let _ = quicksort lst in
      let t2 = Sys.time() in
      helper (total +. (t2 -. t1)) (i+1)
  in helper 0.0 0