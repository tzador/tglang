(* This is a function that takes in two integers and returns their product *)
let multiply x y =
    x * y

(* This is a recursive function that prints out the elements of a list *)
let rec print_list = function
  [] -> ()
  | x :: xs -> 
    print_int x;
    print_list xs

(* This is a higher order function that applies a function to each element in a list *)
let map f lst =
  let rec helper acc = function
    | [] -> acc
    | h :: t -> helper (f h :: acc) t
  in
  List.rev (helper [] lst)

(* This is a function that applies a given function to a list of integers and returns the sum of the results *)
let sum_map f lst =
  let rec helper acc = function
    | [] -> acc
    | h :: t -> helper (acc + f h) t
  in
  helper 0 lst

(* This is a module that contains a type for a binary tree and functions to insert a value and check if a value is in the tree *)
module BinaryTree = struct
  type 'a tree =
    | Empty
    | Node of 'a tree * 'a * 'a tree

  let rec insert value = function
    | Empty -> Node (Empty, value, Empty)
    | Node (left, v, right) when value < v -> Node (insert value left, v, right)
    | Node (left, v, right) when value > v -> Node (left, v, insert value right)
    | tree -> tree
  let rec contains value = function
    | Empty -> false
    | Node (left, v, right) when value = v -> true
    | Node (left, v, right) when value < v -> contains value left
    | Node (left, v, right) -> contains value right
end

(* This is a function that applies the given function on the elements of two lists and returns a new list with the results *)
let zip_map f xs ys =
  let rec helper acc xs ys =
    match (xs, ys) with
    | [], [] -> acc
    | x :: xs', y :: ys' -> helper (f x y :: acc) xs' ys'
    | _ -> failwith "Lists must have same length"
  in
  List.rev (helper [] xs ys)

(* This is a function that implements the quicksort algorithm on a list of integers *)
let rec quicksort = function
  | [] -> []
  | pivot :: rest ->
    let is_less x = x < pivot in
    let is_greater x = x > pivot in
    let left, right = List.partition is_less rest in
    quicksort left @ [pivot] @ quicksort right

(* This is a function that calculates the Fibonacci sequence up to a given number using memoization *)
let fibonacci =
  let memo = Hashtbl.create 100 in
    fun n ->
      match Hashtbl.find_opt memo n with
      | Some result -> result
      | None ->
        if n <= 1 then 1
        else 
          let result = fibonacci (n-1) + fibonacci (n-2) in
          Hashtbl.add memo n result;
          result