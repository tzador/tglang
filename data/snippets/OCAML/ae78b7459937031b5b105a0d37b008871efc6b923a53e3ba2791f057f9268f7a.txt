(* This is a function that takes in a list of integers
   and returns a new list with only even numbers *)
let rec filterEven (lst: int list) : int list =
  match lst with
  | [] -> [] (* base case *)
  | hd::tl -> (* recursive case *)
      if (hd mod 2 = 0) then (* if number is even, add it to new list *)
        hd :: filterEven tl
      else (* if number is odd, skip it and continue with rest of list *)
        filterEven tl;; (* using tail recursion to iterate through list *)

(* This is a function that takes in a list of strings
   and concatenates them into one string *)
let concatStrings (lst: string list) : string =
  let rec helper (str: string) (lst: string list) : string =
    match lst with
    | [] -> str (* base case: when list is empty, return accumulated string *)
    | hd::tl -> helper (str ^ hd) tl (* recursive case: append first string to accumulated string and call helper function on rest of list *)
  in helper "" lst;; (* calling helper function with empty string as accumulator and given list as input *)

(* This is a function that takes in two integers
   and returns their sum as a string *)
let sumToString (x: int) (y: int) : string =
  string_of_int (x + y);; (* using built-in function string_of_int to convert sum to string *)