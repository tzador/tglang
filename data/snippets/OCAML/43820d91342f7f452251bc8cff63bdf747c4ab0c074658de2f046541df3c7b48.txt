(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1 else n * factorial (n - 1)

(* This is a function that finds the nth term in the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n - 1) + fibonacci (n - 2)

(* This is a function that checks if a given number is prime *)
let is_prime n =
  let rec check_prime m =
    match m with
    | 1 -> true
    | m when n mod m = 0 -> false
    | _ -> check_prime (m - 1)
  in
  check_prime (n - 1)

(* This is a higher-order function that applies a given function to a list of integers and returns the list with the function applied *)
let rec map fn lst =
  match lst with
  | [] -> []
  | x :: xs -> fn x :: map fn xs

(* Example usage of the functions above *)
let num = 5
let fact = factorial num
let fib = fibonacci num
let is_fact_prime = is_prime fact
let is_fib_prime = is_prime fib
let multiplied_list = map (fun x -> x * 2) [1; 2; 3; 4; 5]

(* Output: *)
(* val factorial : int -> int = <fun> *)
(* val fibonacci : int -> int = <fun> *)
(* val is_prime : int -> bool = <fun> *)
(* val map : ('a -> 'b) -> 'a list -> 'b list = <fun> *)
(* val num : int = 5 *)
(* val fact : int = 120 *)
(* val fib : int = 5 *)
(* val is_fact_prime : bool = true *)
(* val is_fib_prime : bool = true *)
(* val multiplied_list : int list = [2; 4; 6; 8; 10] *)