(* Function to calculate the n-th term of the Fibonacci sequence using recursion *)
let rec fibonacci n =
  if n < 2 then n (* Base case: first two terms of sequence are 0 and 1 *)
  else fibonacci (n-1) + fibonacci (n-2) (* Recursive case: calculate n-1 and n-2 terms and add them *)

(* Function to generate a list of the first n Fibonacci numbers *)
let rec fibonacci_list n =
  match n with
  | 0 -> [] (* Base case: empty list for n = 0 *)
  | 1 -> [0] (* Base case: list with only first term for n = 1 *)
  | _ -> fibonacci_list (n-1) @ [fibonacci n] (* Recursive case: append fibonacci n to list of n-1 terms *)

(* Function to print the nth prime number using the Sieve of Eratosthenes algorithm *)
let print_nth_prime n =
  let rec sieve nums primes =
    match nums with
    | [] -> List.nth primes (n-1) (* Base case: return the nth element of the primes list *)
    | hd::tl -> let updated_primes = List.filter (fun x -> x mod hd <> 0) primes in
                sieve tl updated_primes (* Recursive case: remove all multiples of hd from primes list and continue with remaining numbers *)

  let rec init_list n =
    match n with
    | 0 -> [] (* Base case: empty list *)
    | 1 -> [2] (* Base case: list with only first prime number *)
    | _ -> let prev_list = init_list (n-1) in hd(prev_list)*2::prev_list (* Recursive case: append the next prime number to the list *)
  
  sieve (init_list n) (init_list n) (* Call sieve function with list of numbers from 1 to n as initial list of primes and return the nth prime *)