let rec fibonacci n =           
match n with                
| 0 -> 0                
| 1 -> 1                  
| x -> fibonacci (x - 1) + fibonacci (x - 2) ;; // Recursive function to calculate the nth Fibonacci number

let rec combo max lst =             
match lst with                 
| [] -> [[]]       // Return empty list             
| hd :: tl -> // Extract first element and recursively call combo with remaining list                
List.map (fun rest -> hd :: rest) (combo max tl)                   
@ (* Append each element of hd to the resulting list from recursive call *)                 
List.map (fun rest -> 1 :: rest) (combo (max - hd) tl) @                 
List.map (fun rest -> 2 :: rest) (combo (max - 2 * hd) tl) @                 
List.map (fun rest -> 3 :: rest) (combo (max - 3 * hd) tl) ;; // Return list of all possible combinations of elements in given list that sum up to given max value

let rec subset max lst =              
match lst with                
| [] -> [[]] // Return empty list                 
| hd :: tl -> // Extract first element and recursively call subset with remaining list                
List.filter (fun lst -> List.fold_left (+) 0 lst <= max) (subset max tl) @                 
List.map (fun rest -> hd :: rest) (subset (max - hd) tl) ;; // Return list of all possible subsets of elements in given list that sum up to less than or equal to given max value