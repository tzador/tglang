(** A type representing a basic mathematical operation *)
type operation =
  | Add of int * int (* Represents the addition of two integers *)
  | Sub of int * int (* Represents the subtraction of two integers *)
  | Mul of int * int (* Represents the multiplication of two integers *)
  | Div of int * int (* Represents the division of two integers *)

(** A function that performs the operation represented by the given [operation] on two integers *)
let compute = function
  | Add (x, y) -> x + y
  | Sub (x, y) -> x - y
  | Mul (x, y) -> x * y
  | Div (x, y) -> x / y

(** A recursive function that computes the factorial of a given integer using pattern matching *)
let rec factorial = function
  | 0 -> 1
  | n -> n * factorial (n - 1)

(** A function that calculates the sum of all the elements in a given list of integers using fold_left *)
let sum_of_list list =
  List.fold_left (fun acc x -> acc + x) 0 list

(* A higher-order function that maps a given function onto a list of integers and returns the result *)
let map function list =
  List.map function list

(* An example of using the above functions to calculate the factorial of 5 and the sum of a list of numbers *)
let factorial_of_5 = factorial 5 // Output: 120

let numbers = [1; 2; 3; 4; 5]
let sum_of_numbers = sum_of_list numbers // Output: 15
let doubled_numbers = map (fun x -> x * 2) numbers // Output: [2; 4; 6; 8; 10]