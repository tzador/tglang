(* Define a type for a binary tree *)
type 'a binary_tree =
  | Empty
  | Node of 'a * 'a binary_tree * 'a binary_tree

(* Define a function to insert a value into a binary tree *)
let rec insert value tree =
  match tree with
  | Empty -> Node (value, Empty, Empty) (* If tree is empty, create a new node *)
  | Node (v, left, right) when v > value -> Node (v, insert value left, right) (* If value is less than current node's value, recursively insert into the left subtree *)
  | Node (v, left, right) when v < value -> Node (v, left, insert value right) (* If value is greater than current node's value, recursively insert into the right subtree *)
  | _ -> tree (* If the value already exists in the tree, do not insert *)

(* Define a function to convert a binary tree to a list using inorder traversal *)
let rec inorder tree =
  match tree with
  | Empty -> [] (* If tree is empty, return an empty list *)
  | Node (value, left, right) -> (inorder left) @ [value] @ (inorder right) (* Recursively traverse the left subtree, add current node's value, then recursively traverse the right subtree *)

(* Create a binary tree with some values *)
let tree = Node (10, Node (5, Node (2, Empty, Empty), Node (8, Empty, Empty)), Node (15, Empty, Node (20, Empty, Empty)))

(* Insert a new value into the tree *)
let updated_tree = insert 12 tree (* This will insert the value 12 into the tree *)

(* Print the updated tree as a list using inorder traversal *)
let updated_list = inorder updated_tree
(* Output: [2; 5; 8; 10; 12; 15; 20]  *)