(* Function to check if a list contains a specific element*)
let rec contains lst ele = 
  match lst with 
  | [] -> false (* If list is empty, return false *)
  | x::xs -> (* Else compare the first element of list to the given element *)
    if x = ele then true (* If they are equal, return true *)
    else contains xs ele (* Else, recursively call function on the rest of the list *)

(* Function to remove duplicates from a list *)
let rec remove_duplicates lst = 
  match lst with 
  | [] -> [] (* If list is empty, return empty list *)
  | x::xs -> (* Else check if the given element is already in the list *)
    if contains xs x then remove_duplicates xs (* If so, remove duplicate recursively *)
    else x :: remove_duplicates xs (* Else, add the element to a new list and recursively call function on the rest of the list *)

(* Example of using the remove_duplicates function *)
let lst = [1;2;3;2;4;1;5;6] 
let result = remove_duplicates lst
print(result) (* Output: [1;2;3;4;5;6] *)