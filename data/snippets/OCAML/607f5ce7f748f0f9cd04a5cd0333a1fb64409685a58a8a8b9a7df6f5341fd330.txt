(* This function takes in a list of integers and returns a new list in reverse order *)
let rec reverse_list lst = 
  match lst with 
  | [] -> [] (* Base case, empty list *)
  | curr::rest -> (reverse_list rest)@[curr] (* Recursive call to reverse_list with rest of list and add current element to end *)

(* This function takes in two lists and concatenates them together *)
let rec cat_lists lst1 lst2 = 
  match lst1 with 
  | [] -> lst2 (* Base case, return second list if first list is empty *)
  | curr::rest -> curr::(cat_lists rest lst2) (* Recursive call to cat_lists with rest of first list and second list as arguments, concatenating current element to beginning *)

(* This function takes in an integer and returns the fibonacci number at that index in the sequence *)
let rec fib n = 
  match n with 
  | 1 -> 1 (* Base case, return 1 if n is 1 *)
  | 2 -> 1 (* Base case, return 1 if n is 2 *)
  | _ -> (fib (n-1)) + (fib (n-2)) (* Recursive call to fib with n-1 and n-2 as arguments, adding the results together *)

(* This function takes in a string and reverses it *)
let rec reverse_str str = 
  match str with 
  | "" -> "" (* Base case, empty string *)
  | _ -> (reverse_str (String.sub str 1 (String.length str - 1))) ^ (String.sub str 0 1) (* Recursive call to reverse_str, getting the substring starting from index 1 and ending at the length of the string - 1, and concatenating it with the first character in the string *)

(* This function takes in a list and returns a new list with only odd numbers *)
let rec filter_odds lst = 
  match lst with 
  | [] -> [] (* Base case, empty list *)
  | curr::rest -> if curr mod 2 <> 0 then curr::(filter_odds rest) else (filter_odds rest) (* Recursive call to filter_odds with rest of list and add current element to list only if it is odd *)

(* This function takes in two integers and returns their gcd using Euclid's algorithm*)
let rec gcd a b = 
  match b with 
  | 0 -> a (* Base case, b is 0, so gcd is a *)
  | _ -> gcd b (a mod b) (* Recursive call to gcd with b and the remainder of a / b as arguments *)