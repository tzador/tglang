(* Define the basic types of a binary tree *)
type 'a tree = 
  | Leaf of 'a
  | Node of 'a tree * 'a * 'a tree

(* Function to add an element to a binary search tree *)
let rec add bst el =
  match bst with
  | Leaf x -> Node (Leaf x, el, Leaf x) (* Add as root node if tree is empty *)
  | Node (left, root, right) when el < root -> Node (add left el, root, right) (* Add to left subtree if element is less than root *)
  | Node (left, root, right) when el > root -> Node (left, root, add right el) (* Add to right subtree if element is greater than root *)
  | _ -> bst (* If element already exists, do not add and return original tree *)

(* A utility function to convert a tree to a list inorder traversal *)
let rec tree_to_list = function
  | Leaf x -> [x] (* Base case: Return the leaf *)
  | Node (left, root, right) -> tree_to_list left @ [root] @ tree_to_list right (* Recursive case: Traverse left subtree, add root, then traverse right subtree *)

(* Function to check if a binary search tree is a binary search tree *)
let rec is_bst = function
  | Leaf x -> true (* Base case: Leaf only contains one element, so it is a valid BST *)
  | Node (left, root, right) -> 
    (* Check that root is greater than all elements in left subtree and less than all elements in right subtree *)
    is_bst left && is_bst right && List.for_all (fun x -> x < root) (tree_to_list left) && List.for_all(fun x -> x > root) (tree_to_list right)

(* A complex binary search tree to test the functions *)
let bst = 
  (* 15 is the root, with 8 and 20 as children *)
  Node (Node (Leaf 4, 8, Leaf 10), 15, Node (Leaf 17, 20, Leaf 30))

(* Print the result of adding a new element to the BST *)
let _ = add bst 25

(* Print the result of checking if the tree is a BST *)
let _ = is_bst bst

(* Output:
 * - : bool = true
 * - : bool = false
 * Since 25 is greater than the root (15) but less than the right child ( 30), it breaks the property of a BST and thus is no longer a valid BST. Therefore, the result is false.