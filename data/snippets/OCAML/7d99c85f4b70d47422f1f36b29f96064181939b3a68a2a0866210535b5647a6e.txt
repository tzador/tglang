(* Define a binary tree data structure *)
type 'a binary_tree =
  | Empty
  | Node of 'a * 'a binary_tree * 'a binary_tree

(* Function to insert a new element into the tree *)
let rec insert value tree =
  match tree with
  | Empty -> Node(value, Empty, Empty)
  | Node(x, left, right) ->
    if value < x then
      Node(x, insert value left, right)
    else
      Node(x, left, insert value right)

(* Function to check if an element is present in the tree *)
let rec contains value tree =
  match tree with
  | Empty -> false
  | Node(x, left, right) ->
    if value = x then
      true
    else if value < x then
      contains value left
    else
      contains value right

(* Generate a random binary tree of size n *)
let rec generate_tree n =
  if n = 0 then
    Empty
  else
    let value = Random.int 100 in
    let left_tree = generate_tree (n / 2) in
    let right_tree = generate_tree (n - n / 2 - 1) in
    insert value (Node(value, left_tree, right_tree))