(* A function that takes in two integers and returns the larger value *)

let max_value (x: int) (y: int): int =
  if x > y then
    x
  else if y > x then
    y
  else
    x (* if x and y are equal, return the first value *)

(* Testing the max_value function *)
let result = max_value 5 9 (* result will equal 9 *)
let result2 = max_value (-2) (-18) (* result2 will equal -2 *)
let result3 = max_value 6 6 (* result3 will equal 6 *)

(* An example of using pattern matching in a function *)

type shape =
  | Circle of float (* takes in radius as float *)
  | Rectangle of float * float (* takes in length and width as floats *)
  | Square of float (* takes in side length as float *)

let area (s: shape): float =
  match s with
  | Circle r -> 3.14 *. (r ** 2.0) (* calculates area of circle *)
  | Rectangle (l, w) -> l *. w (* calculates area of rectangle *)
  | Square s -> s *. s (* calculates area of square *)

(* Testing the area function *)
let circle_area = area (Circle 2.5) (* circle_area will equal 19.625 *)
let rect_area = area (Rectangle (4.0, 6.5)) (* rect_area will equal 26.0 *)
let square_area = area (Square 5.0) (* square_area will equal 25.0 *)

(* A recursive function that calculates the factorial of a given number *)

let rec factorial (n: int): int =
  if n <= 1 then
    1 (* base case: 0! and 1! both equal 1 *)
  else
    n * factorial (n - 1) (* recursive call with smaller number *)

(* Testing the factorial function *)
let fact_5 = factorial 5 (* fact_5 will equal 120 *)
let fact_0 = factorial 0 (* fact_0 will equal 1 *)