(* function that checks if a list is sorted in ascending order *)
let rec is_sorted asc lst =
  match lst with
  | [] -> true
  | [_] -> true
  | hd :: nxt :: _ when hd > nxt ->
    false
  | hd :: nxt :: rest -> is_sorted asc (nxt :: rest)
	
(* function that merges two sorted lists *)
let rec merge asc l1 l2 =
  match (l1, l2) with
  | [], lst | lst, [] -> lst
  | hd1 :: rest1, hd2 :: rest2 ->
    if asc && hd1 > hd2 then
      hd2 :: merge asc l1 rest2
    else if not asc && hd1 < hd2 then
      hd2 :: merge asc l1 rest2
    else
      hd1 :: merge asc rest1 l2
	
(* function that mergesort a list *)
let rec mergesort asc lst =
  match lst with
  | [] -> []
  | [_] -> lst
  | _ ->
    let (l1, l2) = split lst in
    merge asc (mergesort asc l1) (mergesort asc l2)
	
(* function that finds the median of a list using mergesort *)
let find_median lst =
  let sorted_lst = mergesort true lst in
  let n = List.length lst in
  if n mod 2 = 0 then
    let mid1 = (n / 2) - 1 in
    let mid2 = n / 2 in
    (List.nth sorted_lst mid1 + List.nth sorted_lst mid2) / 2
  else
    List.nth sorted_lst (n / 2)
	
(* example list to test code *)
let example_lst = [6; 2; 7; 3; 5; 1; 9; 4]

(* output: 4 *)
print_endline (string_of_int (find_median example_lst))