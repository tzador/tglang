(* This is a function that calculates the factorial of a given number *)
let rec factorial n = match n with
  | 0 -> 1 (* Base case: if n is 0, return 1 *)
  | _ -> n * factorial (n-1) (* Recursive case: n multiplied by factorial of n-1 *)

(* This is a function that calculates the nth Fibonacci number *)
let rec fibonacci n = match n with
  | 0 -> 0 (* Base case: if n is 0, return 0 *)
  | 1 -> 1 (* Base case: if n is 1, return 1 *)
  | _ -> fibonacci (n-1) + fibonacci (n-2) (* Recursive case: sum of fibonacci (n-1) and fibonacci (n-2) *)

(* This is a function that checks if a given number is prime *)
let is_prime n =
  let rec check_prime m = (* Helper function that checks if a given number is prime *)
    match m with
    | 1 -> true (* Base case: 1 is not a prime number, return false *)
    | x when x = n -> true (* Base case: if m is equal to the original number, return true *)
    | x when n mod x = 0 -> false (* Base case: if m divides n, return false *)
    | x -> check_prime (x+1) (* Recursive case: increment m by 1 and continue checking *)
  in
  check_prime 2 (* Starting point: check from 2 onwards, as 1 is not a prime *)

(* This is a function that checks if a given string is a palindrome *)
let is_palindrome s =
  let reverse_string s = (* Helper function that reverses a given string *)
    let rec rev s1 s2 = (* Helper function that reverses the string recursively *)
      match s1 with
      | "" -> s2 (* Base case: if s1 is empty, return reversed string s2 *)
      | _ -> rev (String.sub s1 1 (String.length s1-1)) ((String.sub s1 0 1)^s2) (* Recursive case: append first character of s1 to s2 *)
    in
    rev s "" (* Starting point: start with empty string as reversed string *)
  in
  if String.lowercase_ascii s = String.lowercase_ascii (reverse_string s) then true (* Compare original string to reversed string to check if they are the same *)
  else false