(*Create a function to insert an element into a list at a given index*);;

(*Function takes a list, an element, and an index as parameters*);;
let insert_at lst elem index =
    (*Checks if the index is within the range of the list length*)
    if index > List.length lst then failwith "Index out of bounds"
    else
        let rec insert acc remaining i =
            match remaining with
            (*If index is reached, element is inserted and rest of list is added*)
            | [] when i = index -> List.rev_append acc (List.cons elem [])
            | [] -> failwith "Index out of bounds"
            (*If index is reached, element is inserted and rest of list is added*)
            | hd :: tl when i = index -> List.rev_append acc (List.cons elem (remaining))
            (*If not at index, element is added to accumulator and function is recursively called*)
            | hd :: tl -> insert (List.cons hd acc) tl (i+1)
        in
    insert [] lst 0;;


(*Example usage*)
insert_at [1;2;3;4] 10 2;; (*Output: [1;2;10;3;4]*)

insert_at ["a";"b";"c";"d"] "e" 3;; (*Output: ["a";"b";"c";"e";"d"]*)