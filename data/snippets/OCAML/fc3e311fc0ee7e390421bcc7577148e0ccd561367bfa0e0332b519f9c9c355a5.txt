(* Function that generates a list of the first n terms in the Fibonacci sequence *)
let fib n =
  let rec helper n a b =
    if n == 0 then
      []
    else
      a :: helper (n-1) b (a+b)
  in 
  helper n 0 1;;

(* function to calculate the factorial of a number *)
let rec factorial n =
  if n == 0 then
    1
  else
    n * factorial (n-1);;

(* function that generates a list of prime numbers up to a given number *)
let primes n =
  let rec is_prime x =
    match x with
    | 1 -> false
    | 2 -> true
    | _ -> 
        let rec helper i =
          if i * i > x then
            true
          else if x mod i == 0 then
            false
          else
            helper (i+1)
        in
        helper 2
  in
  let rec helper n p =
    if n < 2 then
      p
    else if is_prime n then
      helper (n-1) (n::p)
    else
      helper (n-1) p
  in
  helper n [];;

(* function that applies a given function to each element in a list and returns a new list *)
let rec map f l =
  match l with
  | [] -> []
  | h::t -> (f h) :: map f t;;

(* Example usage: *)
(* Generate a list of the first 10 Fibonacci numbers *)
map fib (primes 10);;
(* Output: [2; 3; 5; 8; 13; 21; 34; 55; 89; 144] *)