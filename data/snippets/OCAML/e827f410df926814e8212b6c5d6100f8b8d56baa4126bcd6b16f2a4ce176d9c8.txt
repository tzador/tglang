(* Declare a new algebraic data type representing any data type *)
type any_data_type =
  | Integer of int
  | Float of float
  | String of string
  | Boolean of bool
  | List of any_data_type list
  | Tuple of any_data_type * any_data_type
  | Record of (string * any_data_type) list
  | Option of any_data_type option

(* Recursive function to calculate the factorial of a number *)
let rec factorial n =
  (* Pattern matching to determine base case *)
  match n with
  | 0 -> 1
  | _ -> n * factorial (n -1)
;; 

(* Function to reverse a list using pattern matching *)
let rec reverse_list list =
  match list with
  | [] -> []
  | head :: tail -> reverse_list tail @ [head]
;; 

(* Higher-order function to apply a function to every element in a list *)
let map_list func list =
  let rec map_helper acc = function
    | [] -> acc
    | head :: tail -> map_helper (acc @ [func head]) tail
  in map_helper [] list
;; 

(* Example usage of map_list function *)
let square_list = map_list (fun x -> x * x) [1; 2; 3; 4; 5]

(* Function to check if a list contains an even number *)
let rec contains_even list =
  match list with
  | [] -> false
  | head :: tail ->
    match head mod 2 with
    | 0 -> true
    | _ -> contains_even tail
;; 

(* Example usage of contains_even function *)
let has_even = contains_even [1; 3; 5; 7; 8; 9]

(* Function to combine two lists into a single list of tuples *)
let combine_lists list1 list2 =
  let rec combine_helper acc list1 list2 =
    match (list1, list2) with
    | ([], _) | (_, []) -> acc
    | (head1 :: tail1, head2 :: tail2) ->
      combine_helper ((head1, head2) :: acc) tail1 tail2
  in reverse_list (combine_helper [] list1 list2)
;; 

(* Example usage of combine_lists function *)
let combined_lists = combine_lists [1; 2; 3] [4; 5; 6]

(* Function to recursively calculate the Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 | 1 -> n
  | _ -> fibonacci (n - 1) + fibonacci (n - 2)
;; 

(* Example usage of fibonacci function *)
let fib = fibonacci 10