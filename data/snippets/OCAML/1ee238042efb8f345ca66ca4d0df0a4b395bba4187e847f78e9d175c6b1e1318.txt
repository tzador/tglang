(* This is a function that takes in a list as input and returns the maximum element in that list *)
let rec maximum (lst : int list) : int =
  match lst with
  | [] -> failwith "List cannot be empty"
  | [x] -> x
  | x::xs -> max x (maximum xs)

(* This is a record type representing a student's information *)
type student = {
  name: string;
  id: int;
  grades: int list;
  major: string;
}

(* This is a function that calculates the average grade of a student *)
let rec calculate_average (stu: student) : float =
  let sum = List.fold_left (fun acc x -> acc + x) 0 stu.grades in
  let count = List.length stu.grades in
  float_of_int sum /. float_of_int count

(* This is a higher-order function that takes in a predicate function and a list and returns a new list with elements satisfying the predicate *)
let filter (f: 'a -> bool) (lst: 'a list) : 'a list =
  List.fold_right (fun x acc -> if f x then x::acc else acc) lst []