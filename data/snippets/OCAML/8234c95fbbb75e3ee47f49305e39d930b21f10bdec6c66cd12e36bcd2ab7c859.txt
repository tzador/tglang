(* This is a function that takes in a list of integers and returns a new list with only odd numbers *)
let rec filter_odd_numbers lst =
  match lst with
  | [] -> [] (* if list is empty, return empty list *)
  | head::tail -> (* otherwise, take the head of the list *)
      if head mod 2 = 1 then head::(filter_odd_numbers tail) (* check if head is odd, if so add it to new list *)
      else filter_odd_numbers tail (* if head is even, continue to next element in list *)
in
let numbers = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] (* create a list of numbers *)
in
print_endline "Original list:"; (* print original list *)
List.iter (fun x -> print_int x; print_string " ") numbers; (* print each element in list *)
let odd_numbers = filter_odd_numbers numbers (* filter list for odd numbers *)
in
print_endline "\nOdd numbers:"; (* print label for new list *)
List.iter (fun x -> print_int x; print_string " ") odd_numbers; (* print each element in new list *)