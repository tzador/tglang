(* define a binary search tree data type *)
type bst =
| Empty
| Node of int * bst * bst

(* define a function to insert a value into the tree *)
let rec insert (value: int) (tree: bst) : bst =
  match tree with
  | Empty -> Node (value, Empty, Empty)
  | Node (v, left, right) when value < v -> Node (v, insert value left, right)
  | Node (v, left, right) when value > v -> Node (v, left, insert value right)
  | _ -> tree
  (* if the value already exists in the tree, return the original tree *)

(* define a function to check if a value exists in the tree *)
let rec contains (value: int) (tree: bst) : bool =
  match tree with
  | Empty -> false
  | Node (v, left, right) when value < v -> contains value left
  | Node (v, left, right) when value > v -> contains value right
  | _ -> true
  (* if the value is equal to the current node, it exists in the tree *)

(* define a function to delete a node from the tree *)
let rec delete (value: int) (tree: bst) : bst =
  match tree with
  | Empty -> Empty
  | Node (v, left, right) when value < v -> Node (v, delete value left, right)
  | Node (v, left, right) when value > v -> Node (v, left, delete value right)
  | Node (v, Empty, right) -> right
  (* if the node to be deleted has no left subtree, return the right subtree *)
  | Node (v, left, Empty) -> left
  (* if the node to be deleted has no right subtree, return the left subtree *)
  | Node (v, left, right) ->
    let min = find_min right in
    Node (min, left, delete min right)
    (* if the node has both left and right subtrees, replace it with the minimum value in the right subtree
    and delete the duplicate node *)

(* define a function to find the minimum value in a tree *)
let rec find_min (tree: bst) : int =
  match tree with
  | Empty -> failwith "Empty tree"
  | Node (v, Empty, _) -> v
  | Node (v, left, _) -> find_min left

(* define a function to convert a tree to a list *)
let rec to_list (tree: bst) : int list =
  match tree with
  | Empty -> []
  | Node (v, left, right) -> to_list left @ [v] @ to_list right

(* create a sample tree with values 8, 3, 10, 1, 6, 14, 4 and 7 *)
let sampleTree =
  let emptyTree = Empty in
  insert 8 (insert 3 (insert 10 (insert 1 (insert 6 (insert 14 (insert 4 (insert 7 emptyTree)))))))

(* delete the value 6 from the sample tree and convert it back to a list *)
to_list (delete 6 sampleTree)