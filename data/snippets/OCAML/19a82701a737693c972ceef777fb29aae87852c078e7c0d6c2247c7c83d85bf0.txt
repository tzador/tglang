(** [traverse lst] is a function that takes in a list of integers, lst, and
    returns a list of strings representing the paths to each integer in lst. *)
let rec traverse lst =
  match lst with
  | [] -> []
  | h :: t ->
      (** [path acc elem] is a helper function that takes in an accumulator
          string list, acc, and an integer, elem, and returns a string list
          representing the paths to elem. *)
      let rec path acc elem =
        if elem = 0 then [""]
        else
          (** [subpaths acc acc_paths] is a helper function that takes in an
              accumulator string list, acc, and a list of string lists,
              acc_paths, and returns a string list representing the paths to
              elem using elements from acc_paths. *)
          let rec subpaths acc acc_paths =
            match acc with
            | [] -> acc_paths
            | h' :: t' ->
                if h' = "" then subpaths t' [""]
                else
                  let subpath = h' ^ "." ^ elem in
                  let new_paths =
                    List.map (fun path -> subpath :: path) acc_paths in
                  subpaths t' (new_paths @ acc_paths)
          in
          let subpath = string_of_int elem in
          let new_paths =
            List.map (fun path -> subpath :: path) (subpaths acc [""; ""]) in
          new_paths @ path (subpath :: acc) (elem - 1)
      in
      path [] h @ traverse t
;;