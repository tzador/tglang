(* This is a function to calculate the factorial of a number *)
let rec factorial n =
  if n <= 1 then 1 else n * factorial (n - 1);; 

(* This is a function to calculate the sum of a list *)
let rec sum_list l =
  match l with
  | [] -> 0
  | x::xs -> x + sum_list xs;;

(* This is a function to calculate the exponential of a number *)
let rec exp base power =
  if power = 0 then 1.0
  else if power mod 2 = 0 then exp (base * base) (power / 2)
  else base * exp base (power - 1);;

(* This is a function to find the maximum value in a list *)
let rec max_val l =
  match l with
  | [] -> failwith "Empty list"
  | [x] -> x
  | x::xs -> max x (max_val xs);;

(* This is a function to reverse a list *)
let rec reverse l =
  match l with
  | [] -> []
  | x::xs -> reverse xs @ [x];;

(* This is a function to check if a given number is a prime number *)
let is_prime n =
  let rec is_divisible_by num divisor =
    if divisor * divisor > num then false
    else if num mod divisor = 0 then true
    else is_divisible_by num (divisor + 1)
  in (n > 1) && not (is_divisible_by n 2);;

(* This is a function to map a function over a list *)
let rec map f l =
  match l with
  | [] -> []
  | x::xs -> (f x) :: (map f xs);;

(* This is a function to check the equality of two lists *)
let rec equal_lists l1 l2 =
  match l1, l2 with
  | [], [] -> true
  | [], _ | _, [] -> false
  | x::xs, y::ys -> (x = y) && (equal_lists xs ys);;

(* This is a recursive union function for two lists *)
let rec union l1 l2 =
  match l1 with
  | [] -> l2
  | x::xs -> if List.mem x l2 then union xs l2
             else x :: union xs l2;;

(* This is a function to print a list *)
let rec print_list l =
  match l with
  | [] -> ()
  | x::xs -> print_int x; print_string " "; print_list xs;;