(* This is a function that takes in a list of integers and returns the sum *)
let list_sum (lst : int list) : int = 
  let rec sum_helper (lst : int list) (acc : int) : int = 
    match lst with 
    | [] -> acc 
    | h::t -> sum_helper t (acc + h)
  in sum_helper lst 0
  
(* This is a function that takes in a string and an integer and repeats the string n times *)
let repeat_string (str : string) (n : int) : string = 
  let rec helper (str : string) (n : int) (acc : string) : string = 
    if n = 0 then acc 
    else helper str (n - 1) (acc ^ str)
  in helper str n ""
  
(* This is a function that takes in two strings and returns their longest common suffix *)
let longest_common_suffix (str1 : string) (str2 : string) : string = 
  let rec helper (str1 : string) (str2 : string) (acc : string) : string = 
    let length1 = String.length str1 in 
    let length2 = String.length str2 in 
    if length1 = 0 || length2 = 0 then acc
    else if str1.[length1 - 1] = str2.[length2 - 1] then helper (String.sub str1 0 (length1 - 1)) (String.sub str2 0 (length2 - 1)) (String.make 1 str1.[length1 - 1] ^ acc)
    else acc
  in helper str1 str2 ""
  
(* This is a recursive function that takes a list of integers and filters out odd numbers *)
let rec filter_odd (lst : int list) : int list = 
  match lst with 
  | [] -> [] 
  | h::t -> if h mod 2 = 0 then h::filter_odd t else filter_odd t