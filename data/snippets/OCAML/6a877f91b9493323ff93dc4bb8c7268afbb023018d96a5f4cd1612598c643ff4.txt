(** Function to merge two lists using a user-defined comparison function *)
let merge_lists cmp_func list1 list2 =
  match list1, list2 with
  | [], l -> l
  | l, [] -> l
  | h1::t1, h2::t2 ->
      if cmp_func h1 h2 < 0 then
        h1 :: (merge_lists cmp_func t1 list2)
      else
        h2 :: (merge_lists cmp_func list1 t2)

(** Identity function for sorting using quicksort *)
let identity x = x

(** Quicksort function using a comparison function *)
let rec quicksort cmp list =
  match list with
  | [] -> []
  | h::t ->
    let before, after = List.partition (fun x -> cmp x h < 0) t in
      (quicksort cmp before) @ [h] @ (quicksort cmp after)

let lst = [5; 3; 8; 1; 2; 9; 7; 4; 6; 0]

let sorted_lst = quicksort identity lst

(* Output: [0; 1; 2; 3; 4; 5; 6; 7; 8; 9] *)