(**
The following code defines a function, called `merge_sort`, that takes in a list of integers and returns a sorted list using the merge sort algorithm.  
*)

(* Merge function merges two sorted lists into one sorted list *)
let rec merge l1 l2 = match (l1, l2) with
  | ([], l2) -> l2
  | (l1, []) -> l1
  | (h1::t1, h2::t2) -> if h1 < h2 then h1 :: (merge t1 l2) else h2 :: (merge l1 t2)

(* Merge Sort function recursively splits the list into smaller sublists, sorts them, and then merges them back together *)
let rec merge_sort lst = match lst with
  | [] -> []
  | [x] -> [x]
  | _ ->
    let (left,right) = split lst in
    merge (merge_sort left) (merge_sort right)

(* Helper function to split a list into two sublists *)
and split lst = match lst with
  | [] -> ([], [])
  | [x] -> ([x], [])
  | hd::tl -> let (l,r) = split tl in
              (hd::r, l)

(* Example usage *)
let nums = [8; 12; 4; 20; 6; 11; 9]
let sorted_nums = merge_sort nums
(* Output: [4; 6; 8; 9; 11; 12; 20] *)