(* Define a list of functions to manipulate and operate on a given list of integers *)

  (* Function to calculate the sum of all elements in a list *)
  let rec sum_list l =
    match l with
    | [] -> 0 (* If list is empty, return 0 *)
    | x :: xs -> x + sum_list xs  (* Otherwise, recursively add first element to the sum of the remaining elements *)

  (* Function to calculate the product of all elements in a list *)
  let rec product_list l =
    match l with
    | [] -> 1 (* If list is empty, return 1 *)
    | x :: xs -> x * product_list xs (* Otherwise, recursively multiply first element with the product of the remaining elements *)

  (* Function to reverse a list *)
  let rec rev_list l =
    match l with
    | [] -> [] (* If list is empty, return empty list *)
    | x :: xs -> rev_list xs @ [x] (* Otherwise, recursively add current element to the end of the reversed remaining list *)

  (* Function to check if a given integer is present in a list *)
  let rec check_for_element e l =
    match l with
    | [] -> false (* If list is empty, return false *)
    | x :: xs -> if x = e then true else check_for_element e xs (* Otherwise, recursively check if the first element matches the given integer, if not, check the remaining elements *)

  (* Function to remove duplicates from a list *)
  let rec remove_duplicates l =
    match l with
    | [] -> [] (* If list is empty, return empty list *)
    | x :: xs -> x :: remove_duplicates (List.filter (fun y -> y <> x) xs) (* Otherwise, keep first element and remove any duplicates from the remaining list using List.filter *)

  (* Function to sort a list in ascending order *)
  let rec sort_list l =
    match l with
    | [] -> [] (* If list is empty, return empty list *)
    | x :: xs -> insert x (sort_list xs) (* Otherwise, recursively insert first element into the sorted remaining list using insert function *)

  (* Function to insert an element into a sorted list *)
  let rec insert e l =
    match l with
    | [] -> [e] (* If list is empty, return a list with only the element *)
    | x :: xs -> if x < e then x :: insert e xs else e :: l (* Otherwise, recursively add the element in its correct position in the sorted list *)

  (* Define a list of integers to test the above functions on *)
  let test_list = [2; 5; 10; 3; 7; 10; 2; 9]

  (* Print the sum of the list *)
  Printf.printf "Sum: %d\n" (sum_list test_list);

  (* Print the product of the list *)
  Printf.printf "Product: %d\n" (product_list test_list);

  (* Print the reversed list *)
  Printf.printf "Reversed list: %s\n" (String.concat " " (List.map string_of_int (rev_list test_list)));

  (* Print if the number 3 is present in the list *)
  Printf.printf "Number 3 is present: %B\n" (check_for_element 3 test_list);

  (* Print the list with duplicates removed *)
  Printf.printf "List with duplicates removed: %s\n" (String.concat " " (List.map string_of_int (remove_duplicates test_list)));

  (* Print the list sorted in ascending order *)
  Printf.printf "Sorted list: %s\n" (String.concat " " (List.map string_of_int (sort_list test_list)));