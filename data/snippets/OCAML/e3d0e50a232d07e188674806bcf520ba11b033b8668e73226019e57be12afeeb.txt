(* This is a function that takes in a list of integers and returns the sum of all the even numbers in the list *)
let sum_even_numbers list =
  let rec sum_helper accum list =     (* recursive helper function to keep track of accumulator *)
    match list with
    | [] -> accum                      (* base case: if list is empty, return accumulator *)
    | hd :: tl ->
        if hd mod 2 = 0 then            (* check if current element is even *)
          sum_helper (accum + hd) tl    (* if it is even, add it to accumulator and recursively call function with rest of list *)
        else
          sum_helper accum tl           (* if not even, simply continue with recursion without adding to accumulator *)
  in sum_helper 0 list                   (* call helper function with initial accumulator value of 0 *)

(* Example input and output *)
let example_list = [1; 2; 3; 4; 5; 6]
in sum_even_numbers example_list;;
- : int = 12                            (* expected output: sum of even numbers in the list is 12 *)