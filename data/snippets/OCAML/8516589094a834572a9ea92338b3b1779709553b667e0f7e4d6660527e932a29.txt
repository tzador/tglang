(* This is a function that takes in two lists and merges them into one sorted list *)
let rec merge_sorted_lists lst1 lst2 =
  match lst1, lst2 with
  | [], lst2 -> lst2 (* If lst1 is empty, return lst2 as is *)
  | lst1, [] -> lst1 (* If lst2 is empty, return lst1 as is *)
  | hd1::tl1, hd2::tl2 ->
      if hd1 < hd2 then (* If the first element of lst1 is smaller, add it to the merged list *)
        hd1 :: merge_sorted_lists tl1 lst2 
      else (* Otherwise, add the first element of lst2 to the merged list *)
        hd2 :: merge_sorted_lists lst1 tl2

(* This is a recursive helper function that divides a list into two smaller lists *)
let rec divide_list lst =
  match lst with
  | [] -> ([], []) (* If the list is empty, return two empty lists *)
  | [x] -> ([x], []) (* If the list has only one element, return it as the first list and an empty second list *)
  | hd1::hd2::tl ->
      let lst1, lst2 = divide_list tl in (* Recursive call to divide the rest of the list *)
      (hd1::lst1, hd2::lst2) (* Add the first element to the first list and the second element to the second list *)

(* This is the function that implements Merge Sort algorithm *)
let rec merge_sort lst =
  match lst with
  | [] -> [] (* If the list is empty, return an empty list *)
  | [x] -> [x] (* If the list has only one element, return it as is *)
  | _ ->
      let lst1, lst2 = divide_list lst in (* Divide the list into two smaller lists *)
      merge_sorted_lists (merge_sort lst1) (merge_sort lst2) (* Merge the sorted versions of the two smaller lists *)