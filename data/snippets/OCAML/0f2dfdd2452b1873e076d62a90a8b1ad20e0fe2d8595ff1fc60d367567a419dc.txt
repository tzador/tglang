(*Function to calculate the factorial of a number*)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1)

(*Function to check if a number is a prime number*)
let is_prime n =
  (*Helper function to check if a number is divisible by any number less than it*)
  let rec check_divisor d = 
    if d = 1 then true
    else if n mod d = 0 then false
    else check_divisor (d-1)
  in 
  check_divisor (n-1)
  (*If number is divisible by any number less than it, it is not prime*)
  (*Otherwise, it is prime*)

(*Function to find the nth prime number*)
let find_prime n = 
  let rec find_prime_helper count num = 
    if count = n then num
    (*If count reaches the desired nth prime, return the number*)
    else if is_prime num then find_prime_helper (count+1) (num+1)
    (*If current number is prime, increment count and continue search*)
    else find_prime_helper count (num+1)
    (*If current number is not prime, continue search with next number*)

  in find_prime_helper 0 2
  (*Start search with count at 0 and number at 2 since 2 is the first prime number*)