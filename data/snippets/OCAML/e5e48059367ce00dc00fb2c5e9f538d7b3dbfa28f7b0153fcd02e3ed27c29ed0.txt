(* Define a custom type called 'complex' with two float fields for the real and imaginary parts *)
type complex = {
 real : float;
 imag : float;
}
(* Function to add two complex numbers, returning a new complex number *)
let add (c1 : complex) (c2 : complex) : complex =
  {real = (c1.real + c2.real); imag = (c1.imag + c2.imag)}
(* Function to multiply two complex numbers, returning a new complex number *)
let multiply (c1 : complex) (c2 : complex) : complex =
  {real = (c1.real * c2.real) - (c1.imag * c2.imag); imag = (c1.real * c2.imag) + (c1.imag * c2.real)}
(* Function to calculate the modulus of a complex number *)
let modulus (c : complex) : float =
  sqrt((c.real *. c.real) +. (c.imag *. c.imag))

(* Example usage *)
let c1 = {real = 2.0; imag = 3.0} (* Create a complex number c1 with real part 2.0 and imaginary part 3.0 *)
let c2 = {real = 4.5; imag = -1.2} (* Create a complex number c2 with real part 4.5 and imaginary part -1.2 *)

(* Calculate the sum of c1 and c2 *)
let sum = add c1 c2 (* sum = {real = 6.5; imag = 1.8} *)

(* Calculate the product of c1 and c2 *)
let product = multiply c1 c2 (* product = {real = 9.9; imag = 10.2} *)

(* Calculate the modulus of c1 *)
let mod = modulus c1 (* mod = 3.60555 *)