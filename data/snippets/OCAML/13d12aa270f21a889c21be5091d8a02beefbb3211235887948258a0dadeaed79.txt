(* function to recursively calculate the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n-1)

(* function to check if a given number is prime *)
let is_prime n =
  let rec check_divisor d =
    if d * d > n then true
    else if n mod d = 0 then false
    else check_divisor (d+1)
  in check_divisor 2

(* function to calculate the sum of all prime numbers below a given number *)
let sum_primes_below n =
  let rec sum_primes a curr sum =
    if curr >= n then sum
    else if is_prime curr then sum_primes (a+1) (curr+1) (sum+curr)
    else sum_primes (a+1) (curr+1) sum
  in sum_primes 2 2 0

(* example usage of the above functions *)
let num = 10 in
let factorial_of_num = factorial num in
let sum_of_primes_below_num = sum_primes_below num in
print_string (string_of_int factorial_of_num);
print_newline();
print_string (string_of_int sum_of_primes_below_num);