(*This is a function that takes in two lists of integers and returns a new list that contains 
the sum of corresponding elements in both lists*)

let rec sum_lists (list1 : int list) (list2 : int list) : int list =

    (*Define a helper function to recursively iterate through both lists*)
    let rec helper list1 list2 result =

        match (list1, list2) with
        | ([], []) -> result       (*Base case: both lists are empty*)
        | (x::xs, []) -> result    (*Base case: list2 is empty*)
        | ([], y::ys) -> result    (*Base case: list1 is empty*)
        | (x::xs, y::ys) -> helper xs ys ((x + y)::result)   (*Recursive case: add corresponding elements and prepend to result list*)
    
    in helper list1 list2 []   (*Call helper function with empty result list*)

(*Example usage*)
sum_lists [1;2;3] [4;5;6]  (*Output: [5;7;9]*)