(** Module representing a Binary Search Tree *)

module BST = struct

(** Defining the type of a binary tree *)
  type 'a tree =
    | Leaf
    | Node of 'a * 'a tree * 'a tree

(** Function to check if a given element is present in the binary tree *)
  let rec contains tree element =
    match tree with
      | Leaf -> false
      | Node (value, left, right) ->
        if value = element then
          true
        else if value > element then
          contains left element
        else
          contains right element

(** Function to insert a given element into the binary tree *)
  let rec insert tree element =
    match tree with
      | Leaf -> Node (element, Leaf, Leaf)
      | Node (value, left, right) ->
        if value = element then
          tree
        else if value > element then
          Node (value, insert left element, right)
        else
          Node (value, left, insert right element)
end

(** Example usage of the BST module *)
let tree = BST.(insert (insert (insert (insert Leaf 10) 5) 12) 8)
BST.contains tree 12     (* should return true *)
BST.contains tree 11     (* should return false *)