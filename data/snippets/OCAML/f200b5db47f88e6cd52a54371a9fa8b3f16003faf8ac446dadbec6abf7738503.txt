let rec factorial n =      (* defining a recursive function to calculate factorial *)
  if n <= 1 then 1         (* base case: n is 1 or less, return 1 *)
  else n * factorial (n-1) (* recursive case: multiply n by factorial of n-1 *)

let rec fib n =            (* defining a recursive function to calculate Fibonacci numbers *)
  if n <= 1 then n         (* base case: n is 1 or less, return n *)
  else fib (n-1) + fib (n-2) (* recursive case: add previous two Fibonacci numbers *)

let rec gcd a b =          (* defining a recursive function to calculate gcd *)
  if b = 0 then a          (* base case: b is 0, return a *)
  else gcd b (a mod b)     (* recursive case: call gcd on b and a mod b *)

let rec power x n =        (* defining a recursive function to calculate x to the power of n *)
  if n = 0 then 1          (* base case: n is 0, return 1 *)
  else x * power x (n-1)   (* recursive case: multiply x by power of x to n-1 *)

let rec map f lst =        (* defining a recursive function to map a function onto a list *)
  match lst with           (* match statement to check for different cases of the list *)
  | [] -> []               (* if list is empty, return empty list *)
  | x::xs -> f x :: map f xs (* otherwise, apply function f to first element and recursively call map on rest of list *)

let rec fold_left f acc lst = (* defining a recursive function to apply a function to accumulator and each element of list, starting from left *)
  match lst with              (* match statement to check for different cases of the list *)
  | [] -> acc                 (* if list is empty, return accumulator *)
  | x::xs -> fold_left f (f acc x) xs (* otherwise, recursively call fold_left with updated accumulator and rest of list *)

let rec fold_right f lst acc = (* defining a recursive function to apply a function to accumulator and each element of list, starting from right *)
  match lst with               (* match statement to check for different cases of the list *)
  | [] -> acc                  (* if list is empty, return accumulator *)
  | x::xs -> f x (fold_right f xs acc) (* otherwise, recursively call fold_right with rest of list and updated accumulator *)

let rec mergesort lst =       (* defining a recursive function to sort a list using merge sort *)
  let rec merge lst1 lst2 =   (* helper function to merge two sorted lists *)
    match lst1,lst2 with      (* match statement to check for different cases of the lists *)
    | [], lst2 -> lst2        (* if first list is empty, return second list *)
    | lst1, [] -> lst1        (* if second list is empty, return first list *)
    | x::xs, y::ys ->         (* if both lists have elements, compare first elements of each list *)
      if x < y                (* if first element of first list is smaller, add it to merged list and recursively call merge on rest of first list and full second list *)
      then x :: merge xs lst2
      else y :: merge lst1 ys (* otherwise, add first element of second list to merged list and recursively call merge on full first list and rest of second list *)
  in
  match lst with              (* match statement to check for different cases of the list *)
  | [] -> []                  (* if list is empty, return empty list *)
  | [x] -> [x]                (* if list has one element, return list *)
  | lst ->                    (* otherwise, divide list into half and merge sorted halves using merge function *)
    let half = (List.length lst) / 2 in
    let left = List.sub lst 0 half in
    let right = List.sub lst half (List.length lst - half) in
    merge (mergesort left) (mergesort right)