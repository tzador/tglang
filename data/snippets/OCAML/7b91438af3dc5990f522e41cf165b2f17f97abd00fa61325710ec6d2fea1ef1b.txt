(* This function merges two lists and removes duplicates *)
let rec merge lst1 lst2 =
  match (lst1, lst2) with
    ([], _) -> lst2
  | (_, []) -> lst1
  | (h1 :: t1, h2 :: t2) ->
    if h1 = h2 then
      merge t1 lst2
    else if h1 > h2 then
      h2 :: merge lst1 t2
    else
      h1 :: merge t1 lst2

(* This function sorts a list using the merge sort algorithm *)
let rec merge_sort lst =
  match lst with
    [] -> []
  | [x] -> [x]
  | _ ->
    let (list1, list2) = split_list lst
    in merge (merge_sort list1) (merge_sort list2)

(* This helper function splits a list into two smaller lists *)
and split_list lst =
  let rec aux lst1 lst2 = function
    | [] -> (lst1, lst2)
    | [x] -> (x :: lst1, lst2)
    | x :: y :: rest -> aux (x :: lst1) (y :: lst2) rest
  in aux [] [] lst
  
(* Example calls *)
merge [1; 2; 3; 4] [3; 4; 5; 6] (* outputs: [1; 2; 3; 4; 5; 6] *)
merge_sort [4; 2; 6; 1; 7; 3; 5] (* outputs: [1; 2; 3; 4; 5; 6; 7] *)