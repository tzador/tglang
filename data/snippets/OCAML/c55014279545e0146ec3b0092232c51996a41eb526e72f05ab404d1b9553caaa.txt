let rec fib n =   (* define a recursive function with parameter n *)
  match n with    (* pattern matching for n *)
  | 0 -> 0        (* base case: return 0 *)
  | 1 -> 1        (* base case: return 1 *)
  | n -> fib(n-1) + fib(n-2) (* recursive call to the function with updated parameters *)

(* function to print the Fibonacci series up to n *)
let print_fib n =
  if n < 1 then print_endline "Error: please enter a number greater than 0" (* error check *)
  else
    for i = 0 to n do             (* loop from 0 to n *)
      print_int (fib i);          (* call the fib function and print the result *)
      if i < n then print_string ", " (* add a comma if not the last number in the sequence *)
    done;                                  (* end of loop *)
    print_endline ""                       (* print a new line at the end *)

let n = read_int()    (* get user input for n *)
(* call the print_fib function with n as the parameter *)
print_endline "The Fibonacci series up to n:";  (* print a heading for the output *)
print_fib n;          (* call the function to print the series *)
print_endline "";     (* print a new line after the output *)
print_endline "Thank you for using the Fibonacci series generator!" (* print a closing message *)