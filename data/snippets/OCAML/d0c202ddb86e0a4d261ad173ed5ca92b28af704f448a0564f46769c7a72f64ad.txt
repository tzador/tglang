(** Defines a function called "factorial" which takes in a non-negative integer "n" and returns the factorial of n *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n - 1)

(** Defines a helper function called "fibonacci" which takes in two non-negative integers "a" and "b" and an integer "count" and returns a list of Fibonacci numbers up to count *)
let rec fibonacci a b count =
  if count = 0 then []
	else a::fibonacci b (a+b) (count-1)

(** Defines a function called "print_list" which takes in a list of integers "lst" and prints each element on a separate line *)
let rec print_list lst =
  match lst with
  | [] -> ()
  | hd::tl -> print_int hd; print_newline (); print_list tl

(** Calls the factorial function and prints the result *)
let _ = print_list (fibonacci 0 1 10)