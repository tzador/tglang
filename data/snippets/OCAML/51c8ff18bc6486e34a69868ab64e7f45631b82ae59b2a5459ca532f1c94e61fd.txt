(*Function to calculate the sum of two numbers*)
let sum x y = 
    x + y
    
(*Function to calculate the factorial of a number*)
let rec factorial n = 
    if n = 0 then 1 
    else n * factorial (n-1)

(*Function to sort a list of integers in ascending order*)
let rec sort (lst : int list) : int list = 
    match lst with 
    | [] -> [] 
    | hd::tl -> insert hd (sort tl) 
and 
insert elt lst = 
    match lst with 
    | [] -> [elt] 
    | hd::tl -> if elt < hd then elt::lst 
        else hd::(insert elt tl)
        
(*Function to find the common elements between two lists*)
let rec find_common lst1 lst2 = 
    match lst1 with 
    | [] -> [] 
    | hd::tl -> if List.mem hd lst2 then hd::(find_common tl lst2) 
        else find_common tl lst2
        
(*Function to convert an integer to a binary string*)
let bin_string num = 
    let rec helper num acc = 
        if num = 0 then acc 
        else helper (num/2) ((string_of_int (num mod 2)) ^ acc) 
    in
    helper num ""