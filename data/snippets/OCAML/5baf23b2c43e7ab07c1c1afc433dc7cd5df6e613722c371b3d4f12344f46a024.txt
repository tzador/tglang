(* This is a recursive function that calculates the factorial of a given integer n 
   and returns the result. *)

let rec factorial n : int = 
  if n = 0 then 1 else n * factorial (n - 1);; 

(* This is a function that takes in a list of integers and returns the sum of all 
   the even numbers in the list. *)

let rec sum_even_nums nums : int =
  match nums with 
  | [] -> 0 (* Base case: empty list returns 0 as sum *)
  | x::xs -> (* Recursive case: if first element is even, add it to sum *)
    if x mod 2 = 0 then x + sum_even_nums xs 
    else sum_even_nums xs ;; (* Call function again with rest of list *)

(* This is a function that takes in a list of strings and returns a new list with 
   all elements in uppercase. *)

let rec uppercase_strings strs : string list =
  match strs with 
  | [] -> [] (* Base case: empty list returns empty list *)
  | x::xs -> String.uppercase_ascii x :: uppercase_strings xs ;; (* Recursive case: add uppercase string to new list and call function again *)

(* This is a function that takes in a list of integers and returns a new list with 
   only positive numbers. *)

let rec positive_nums nums : int list =
  match nums with 
  | [] -> [] (* Base case: empty list returns empty list *)
  | x::xs -> 
    if x > 0 then x :: positive_nums xs (* Recursive case: add positive number to new list and call function again *)
    else positive_nums xs ;; (* Recursive case: call function again with rest of list *)

(* This is a function that takes in a list of integers and returns a new list with 
   all elements squared. *)

let rec square_nums nums : int list =
  match nums with 
  | [] -> [] (* Base case: empty list returns empty list *)
  | x::xs -> x*x :: square_nums xs ;; (* Recursive case: add squared number to new list and call function again *)

(* This is a function that takes in two lists of integers and returns a new list 
   with the elements of both lists added together. *)

let rec add_lists nums1 nums2 : int list =
  match nums1, nums2 with 
  | [], [] -> [] (* Base case: both lists empty, return empty list *)
  | x::xs, y::ys -> x + y :: add_lists xs ys  (* Recursive case: add first element of each list and call function again with rest of lists *)
  | [], _ -> nums2  (* Recursive case: first list empty, return second list *)
  | _, [] -> nums1  (* Recursive case: second list empty, return first list *)
  
(* This is a function that takes in a 2D matrix as a list of lists and returns 
   its transpose, flipping the rows and columns. *)

let rec transpose_matrix mat : int list list =
  match mat with 
  | [] :: _ -> [] (* Empty matrix, return empty matrix *)
  | mat -> List.map List.hd mat :: transpose_matrix (List.map List.tl mat) ;; (* Get first elements of each list and create new list, call function again with remaining elements of rows as new matrix *)