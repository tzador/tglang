(* This is a function that calculates the Fibonacci sequence.*)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | x -> fibonacci (x-1) + fibonacci (x-2)

(* This is a function that calculates the factorial of a number. *)
let rec factorial n =
  match n with
  | 0 -> 1
  | x -> x * factorial (x-1)

(* This is a function that calculates the binomial coefficient of two numbers.*)
let rec binomial_coefficient n k =
  if k > n then 0
  else if k = 0 || k = n then 1
  else binomial_coefficient (n-1) k + binomial_coefficient (n-1) (k-1)

(* This is a recursive function that checks if a string is a palindrome. *)
let rec is_palindrome s =
  if String.length s <= 1 then true
  else if s.[0] = s.[(String.length s) - 1] then is_palindrome (String.sub s 1 ((String.length s) - 2))
  else false

(* This is a function that sorts a list using the quicksort algorithm. *)
let rec quicksort = function
  | [] -> []
  | [x] -> [x]
  | pivot :: rest ->
      let is_less x = x < pivot in
      let is_more x = x > pivot in
      let less, more = List.partition is_less rest in
      quicksort less @ (pivot :: quicksort more)