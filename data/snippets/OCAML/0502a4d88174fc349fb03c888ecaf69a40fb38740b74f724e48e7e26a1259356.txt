(*This program demonstrates the use of higher order functions in OCAML*)

(*Defining a function that takes in a list and a function as parameters*)
let rec map list f =
  match list with
  | [] -> [] (*If the list is empty, return an empty list*)
  | head::tail -> (f head)::(map tail f) (*Else, apply the function f to the head and recursively call map on the rest of the list*)

(*Defining a function that takes in two integers and returns their product*)
let product x y = x * y

(*Defining a list of numbers*)
let nums = [1; 2; 3; 4; 5]

(*Using the map function with the product function to calculate the product of each number in the list*)
let result = map nums product

(*Printing the result*)
print_endline ("The product of the numbers is " ^ string_of_int (List.hd result));;