(** [majority lst] takes in a list [lst] and returns the majority element if it exists.
    The majority element is an element that occurs more than half of the list length times.
    If there is no majority element, it returns None.
    Requires: [lst] is a non-empty list *)
let rec majority lst =
  match lst with
  | [] -> None
  | head :: tail ->
    let count = count_instances head tail in
    if count > List.length lst / 2 then Some head
    else majority tail

(** [count_instances elem lst] counts the number of times [elem] appears in [lst] *)
let rec count_instances elem lst =
  match lst with
  | [] -> 0
  | head :: tail ->
    if head = elem then 1 + count_instances elem tail
    else count_instances elem tail