let rec merge_sort = function
| [] -> []
| [x] -> [x]
| xs ->
  let rec split_at = function
  | (lst, idx) when idx > (List.length lst) / 2 -> lst, [], []
  | (lst, idx) ->
    let x, ys, zs = split_at (List.tl lst, idx + 1) in
    x, List.hd lst :: ys, zs in
  let rec merge = function
  | xs, [] -> xs
  | [], ys -> ys
  | x :: xs, y :: ys when x < y -> x :: merge (xs, y :: ys)
  | x :: xs, y :: ys -> y :: merge (x :: xs, ys) in
  let xs, ys = split_at (xs, 0) in
  merge (merge_sort xs, merge_sort ys)