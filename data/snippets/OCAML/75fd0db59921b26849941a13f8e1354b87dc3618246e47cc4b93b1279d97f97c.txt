(* This is a functional implementation of a binary search tree *)

(* Define a tree datatype with two constructors: Leaf and Branch with left subtree, value, and right subtree *)
type 'a tree =
  | Leaf
  | Branch of 'a tree * 'a * 'a tree

(* Define a function to insert a new element in the binary search tree, maintaining the correct ordering *)
let rec insert (x:'a) (t:'a tree) : 'a tree =
  match t with
  | Leaf -> Branch(Leaf, x, Leaf) (* If the tree is empty, create a new branch with the new element as the root *)
  | Branch(l, y, r) -> (* Otherwise, compare the new element to the current node and insert it in the correct subtree *)
    if x < y then Branch(insert x l, y, r) else Branch(l, y, insert x r)

(* Define a function to check if a given element exists in the binary search tree *)
let rec exists (x:'a) (t:'a tree) : bool =
  match t with
  | Leaf -> false (* If the tree is empty, element does not exist *)
  | Branch(l, y, r) -> (* Otherwise, compare the element to the current node and recursively search in the correct subtree *)
    if x = y then true
    else if x < y then exists x l
    else exists x r

(* Define a helper function to find the maximum element in a subtree *)
let rec max (t:'a tree) : 'a =
  match t with
  | Leaf -> failwith "Empty tree"
  | Branch(_, x, Leaf) -> x (* If there is no right subtree, current node is the maximum *)
  | Branch(_, _, r) -> max r (* Otherwise, recursively find the maximum in the right subtree *)

(* Define a function to delete an element from the binary search tree *)
let rec delete (x:'a) (t:'a tree) : 'a tree =
  match t with
  | Leaf -> Leaf (* If the tree is empty, element does not exist *)
  | Branch(l, y, r) ->
    if x = y then (* If the current node is the element to be deleted *)
      match l, r with
      | Leaf, Leaf -> Leaf (* If the current node is a leaf, just return an empty tree *)
      | Leaf, _ -> r (* If the current node only has a right subtree, replace it with that subtree *)
      | _, Leaf -> l (* If the current node only has a left subtree, replace it with that subtree *)
      | _, _ -> (* If the current node has two subtrees, find the maximum in the left subtree and replace the current node with it *)
        let m = max l in
        let l' = delete m l in
        Branch(l', m, r)
    else if x < y then Branch(delete x l, y, r) (* Otherwise, recursively search for the element in the correct subtree *)
    else Branch(l, y, delete x r)

(* Define a function to print the binary search tree in in-order traversal *)
let rec print (t:'a tree) : unit =
  match t with
  | Leaf -> () (* If the tree is empty, do nothing *)
  | Branch(l, y, r) -> (* Otherwise, recursively print the left subtree, then the current node, then the right subtree *)
    print l;
    print_int y;
    print r

(* Example usage *)
let t = Leaf;;
let t = insert 5 t;;
let t = insert 2 t;;
let t = insert 8 t;;
exists 5 t;; (* Output: true *)
delete 5 t;; (* Output: Branch(Leaf, 2, Branch(Leaf, 8, Leaf)) *)
exists 5 t;; (* Output: false *)
print t;; (* Output: 2 5 8 *)