(* An example of recursive data structure *)

(* Define a binary tree with some value at each node *)
type 'a bintree =
  | Leaf (* represents an empty tree *)
  | Node of 'a * 'a bintree * 'a bintree (* represents a node with left and right subtrees *)

(* Define a function to insert a value into the tree *)
let rec insert (value: 'a) (tree: 'a bintree): 'a bintree =
  match tree with
  | Leaf -> Node(value, Leaf, Leaf) (* insert value as root of empty tree *)
  | Node (v, left, right) ->
    if value < v then (* insert value into left subtree *)
      Node(v, insert value left, right)
    else if value > v then (* insert value into right subtree *)
      Node(v, left, insert value right)
    else (* value already exists, no need to insert *)
      Node(v, left, right)
      
(* Define a function to check if a value is present in the tree *)
let rec contains (value: 'a) (tree: 'a bintree): bool =
  match tree with
  | Leaf -> false (* empty tree, value cannot be present *)
  | Node (v, left, right) ->
    if value < v then (* value must be in left subtree *)
      contains value left
    else if value > v then (* value must be in right subtree *)
      contains value right
    else (* value is equal to current node, it is present *)
      true

(* Define a function to remove a value from the tree *)
let rec remove (value: 'a) (tree: 'a bintree): 'a bintree =
  match tree with
  | Leaf -> Leaf (* value not found *)
  | Node (v, left, right) ->
    if value < v (* value must be in left subtree *)
      then Node(v, remove value left, right)
    else if value > v (* value must be in right subtree *)
      then Node(v, left, remove value right)
    else (* value is equal to current node *)
      match (left, right) with
      | (Leaf, _) -> right (* replace current node with right subtree *)
      | (_, Leaf) -> left (* replace current node with left subtree *)
      | (_, _) ->
        (* recursively find the minimum value in right subtree and replace current node with it *)
        let min_right = find_min right in
        Node(min_right, left, remove min_right right)
        
(* Define a function to find the minimum value in a tree *)
let rec find_min (tree: 'a bintree): 'a =
  match tree with
  | Leaf -> raise (Invalid_argument "Tree is empty")
  | Node (v, Leaf, _) -> v (* current node is the minimum value *)
  | Node (_, left, _) -> find_min left (* minimum value must be in left subtree *)
    
(* Create a sample binary tree *)
let bintree = Node(5, Node(3, Leaf, Node(4, Leaf, Leaf)), Node(7, Leaf, Leaf))

(* Insert a new value into the tree *)
let new_bintree = insert 6 bintree

(* Check if a value is present in the tree *)
let contains_seven = contains 7 bintree (* true *)

(* Remove a value from the tree *)
let removed_bintree = remove 3 new_bintree

(* Find the minimum value in the tree *)
let min_value = find_min removed_bintree (* 4 *)