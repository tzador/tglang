(* This is a function that takes in a list of integers and returns a sorted list in ascending order *)
let rec insertion_sort lst =
  match lst with
  | [] -> []
  | h :: t -> insert h (insertion_sort t) (* recursively calls insert function on the remainder of the list *)
and insert elem lst = (* inserts elem into its correct position in lst*)
  match lst with
  | [] -> [elem]
  | h :: t -> if elem <= h then elem :: lst (* if elem is smaller or equal to h, it goes first *)
              else h :: insert elem t (* otherwise, recursively call insert on the remainder of the list to find its correct position *)

(* Example usage of insertion_sort function *)
let sorted_list = insertion_sort [5;2;8;3;1] (* returns [1;2;3;5;8] *)