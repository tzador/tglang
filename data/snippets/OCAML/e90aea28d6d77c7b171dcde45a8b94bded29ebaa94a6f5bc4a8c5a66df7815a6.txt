(* This is a function to calculate the factorial of a given number. 
It takes in an int n as parameter and returns the factorial of n. *)

let rec factorial n = match n with
  | 0 -> 1 (* Factorial of 0 is 1 *)
  | _ -> n * factorial (n-1) (* For any other number, multiply it by factorial of n-1 *)

(* This is a function to calculate the Fibonacci sequence up to a given number.
It takes in an int n as parameter and returns a list of the Fibonacci sequence up to n. *)

let rec fibonacci n = match n with
  | 0 -> [0] (* First element of Fibonacci sequence is 0 *)
  | 1 -> [0;1] (* Second element of Fibonacci sequence is 1 *)
  | _ -> let prev = List.nth (fibonacci (n-1)) (n-2) in (* Find the previous two elements in the list *)
    let curr = List.nth (fibonacci (n-1)) (n-1) in
    fibonacci (n-1) @ [(prev + curr)] (* Add the sum of previous two elements to the list *)

(* This is a recursive function to flatten a list of lists into a single list. 
It takes in a list of lists l and returns a flattened list. *)

let rec flatten l = match l with
  | [] -> [] (* Empty list returns empty list *)
  | [x] -> x (* Single element list returns itself *)
  | x::xs -> x @ (flatten xs) (* For a list with more than one element, concatenate the head element with the flattened tail element *)

(* This is a function to reverse a list.
It takes in a list l and returns the reversed list. *)

let rev l = 
  let rec aux acc = function 
    | [] -> acc (* Empty list returns accumulator *)
    | x::xs -> aux (x::acc) xs (* Add the head element to the accumulator, and recursively call on the remaining list *)
  in aux [] l (* Call the aux function with empty accumulator *)

(* This is a function to calculate the total number of elements in a list.
It takes in a list l and returns the number of elements in l. *)

let rec length l = match l with
  | [] -> 0 (* Empty list has a length of 0 *)
  | x::xs -> 1 + length xs (* For a list with more than one element, add 1 to the length of the tail element *)