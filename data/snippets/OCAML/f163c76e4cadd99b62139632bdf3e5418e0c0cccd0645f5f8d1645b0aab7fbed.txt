(* This function takes in a list of integers and returns a new list with only the even numbers *)
let rec get_even_numbers lst =
    match lst with
    | [] -> [] (* base case: if list is empty, return empty list *)
    | hd::tl -> if hd mod 2 = 0 then hd :: (get_even_numbers tl) (* if head is even, add it to new list *)
                else get_even_numbers tl (* if head is odd, ignore it and continue to next element *)

(* This function takes in a string and returns the number of vowels in the string *)
let count_vowels str =
    let vowels = ['a'; 'e'; 'i'; 'o'; 'u'; 'A'; 'E'; 'I'; 'O'; 'U'] in (* create a list of vowels *)
    let rec helper str count =
        match str with
        | "" -> count (* base case: if string is empty, return the current count of vowels *)
        | hd::tl -> if List.mem hd vowels then helper tl (count + 1) (* if character is a vowel, increment count *)
                    else helper tl count (* if character is not a vowel, continue to next character *)
    in helper str 0 (* call helper function with initial count of 0 *)

(* This function takes in a list of strings and returns a new list with only strings of length less than or equal to 5 *)
let filter_short_strings lst =
    let rec helper lst new_lst =
        match lst with
        | [] -> new_lst (* base case: if list is empty, return new list *)
        | hd::tl -> if String.length hd <= 5 then helper tl (hd :: new_lst) (* if string length is less than or equal to 5, add to new list *)
                    else helper tl new_lst (* if string length is greater than 5, ignore it *)
    in List.rev (helper lst []) (* call helper function and reverse the list to maintain original order *)

(* This function takes in a list of integers and returns their sum *)
let sum_list lst =
    let rec helper lst sum =
        match lst with
        | [] -> sum (* base case: if list is empty, return current sum *)
        | hd::tl -> helper tl (sum + hd) (* recursively add each element to sum *)
    in helper lst 0 (* call helper function with initial sum of 0 *)