(* This snippet creates a function that performs selection sort on a given list*)
let selection_sort list =
  let rec loop = function 
    | [] -> []
    | [x] -> [x]
    | x :: xs ->
       let min = List.fold_left (min) x xs in
       let rest = List.filter ((<>) min) xs in
         min :: loop rest
  in loop list
  
let input_list = [5;2;8;1;9;3] (* example input list *)
let sorted_list = selection_sort input_list (* call function and store sorted list *)

(* sorting algorithm:
1. Define a recursive function that takes in a list as input
2. For an empty list, return an empty list
3. For a single element list, return the list as is
4. For a list of more than one element, use List.fold_left to find the minimum value in the list
5. Use List.filter to remove the minimum value from the list and store the remaining values as a new list
6. Recursively call the function on the new list and add the minimum value to the front of the sorted list
7. Return the sorted list
*)

(* output:
let sorted_list = selection_sort input_list *Returns the sorted list, [1;2;3;5;8;9] *)