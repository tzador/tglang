(* This is a function that takes in a list of integers and returns the sum of all odd numbers in the list *)
let rec odd_sum (lst : int list) : int =
    match lst with
    | [] -> 0 (* Base case: an empty list has a sum of 0 *)
    | hd::tl -> (* Recursive case: split the list into head and tail *)
        if hd mod 2 = 1 then hd + odd_sum tl (* If the head is odd, add it to the sum of the remaining list *)
        else odd_sum tl (* If the head is even, ignore it and continue recursively on the remaining list *)

(* Example usage: *)
let input_list = [1; 2; 3; 4; 5] (* Define an input list containing odd and even numbers *)
let result = odd_sum input_list (* Call the odd_sum function on the input list *)
(* The result should be 9, as 1 + 3 + 5 = 9 *)
(* <output> let result = odd_sum input_list (* the code output will be 9, as 1 + 3 + 5 = 9 *) </output> *)