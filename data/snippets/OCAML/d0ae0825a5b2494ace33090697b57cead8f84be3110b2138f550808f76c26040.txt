(* This is a commented line in OCAML *)
(* Declare a recursive function that computes the factorial of a given number *)
let rec factorial num = 
    match num with
    | 0 -> 1 (* base case, return 1 when input is 0 *)
    | n -> n * factorial (n-1) (* recursively call function with num-1 until base case is reached *)
    
(* This is a commented line in OCAML *)
(* Declare a function that takes in two parameters and returns the sum of their squares *)
let sum_of_squares x y = 
    let square z = z * z in (* define a function within the function to calculate square of a number *)
    (square x) + (square y) (* return sum of squares *)
    
(* This is a commented line in OCAML *)
(* Define a variable of type integer and initialize it with value 5 *)
let myVar : int = 5 

(* This is a commented line in OCAML *)
(* Define a list of strings *)
let myStringList : string list = ["Hello"; "World"; "!"] 

(* This is a commented line in OCAML *)
(* Declare a function that takes in a list of integers and returns a new list with each element multiplied by 2 *)
let doubleList list = 
    let rec doubleHelper list acc = (* declare a helper function with an accumulator to keep track of new list *)
        match list with
        | [] -> acc (* when input list is empty, return accumulator as new list *)
        | h::t -> doubleHelper t ((h*2)::acc) (* recursively call helper function with tail of list and updated accumulator *)
    in doubleHelper list [] (* call helper function with original list and empty accumulator *)
    
(* This is a commented line in OCAML *)
(* Print the value of the factorial of 5 *)
print_string "The factorial of 5 is: " ^ string_of_int (factorial 5)

(* This is a commented line in OCAML *)
(* Print the sum of squares of 3 and 4 *)
print_string "The sum of squares of 3 and 4 is: " ^ string_of_int (sum_of_squares 3 4)

(* This is a commented line in OCAML *)
(* Print the doubled list of [1;2;3;4] *)
print_string "The doubled list of [1;2;3;4] is: " ^ string_of_list (doubleList [1;2;3;4])