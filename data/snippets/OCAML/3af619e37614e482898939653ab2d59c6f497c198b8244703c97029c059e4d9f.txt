type expr = 
    | Int of int 
    | Float of float 
    | Str of string 
    | Bool of bool 
    | Add of expr * expr 
    | Sub of expr * expr 
    | Mul of expr * expr 
    | Div of expr * expr 
    | Mod of expr * expr 
    | Pow of expr * expr 
    | Eq of expr * expr 
    | Neq of expr * expr 
    | Lt of expr * expr 
    | Lte of expr * expr 
    | Gt of expr * expr 
    | Gte of expr * expr 
    | And of expr * expr 
    | Or of expr * expr 
    | Not of expr 
    | If of expr * expr * expr 
    | Fun of string * expr 
    | App of expr * expr 

let rec eval = function 
    | Int n -> n 
    | Float f -> f 
    | Str s -> s 
    | Bool b -> b 
    | Add (a, b) -> (eval a) + (eval b) 
    | Sub (a, b) -> (eval a) - (eval b) 
    | Mul (a, b) -> (eval a) * (eval b) 
    | Div (a, b) -> (eval a) / (eval b) 
    | Mod (a, b) -> (eval a) mod (eval b) 
    | Pow (a, b) -> (eval a) ** (eval b) 
    | Eq (a, b) -> (eval a) = (eval b) 
    | Neq (a, b) -> (eval a) <> (eval b) 
    | Lt (a, b) -> (eval a) < (eval b) 
    | Lte (a, b) -> (eval a) <= (eval b) 
    | Gt (a, b) -> (eval a) > (eval b) 
    | Gte (a, b) -> (eval a) >= (eval b) 
    | And (a, b) -> (eval a) && (eval b) 
    | Or (a, b) -> (eval a) || (eval b) 
    | Not a -> not (eval a) 
    | If (a, b, c) -> if (eval a) then (eval b) else (eval c) 
    | Fun (x, e) -> (fun y -> eval (subst e [(x, y)])) 
    | App (f, e) -> (eval f) (eval e)

let rec subst expr subs = 
    match expr with 
    | Int n -> Int n 
    | Float f -> Float f 
    | Str s -> Str s 
    | Bool b -> Bool b 
    | Add (a, b) -> Add (subst a subs, subst b subs) 
    | Sub (a, b) -> Sub (subst a subs, subst b subs) 
    | Mul (a, b) -> Mul (subst a subs, subst b subs) 
    | Div (a, b) -> Div (subst a subs, subst b subs) 
    | Mod (a, b) -> Mod (subst a subs, subst b subs) 
    | Pow (a, b) -> Pow (subst a subs, subst b subs) 
    | Eq (a, b) -> Eq (subst a subs, subst b subs) 
    | Neq (a, b) -> Neq (subst a subs, subst b subs) 
    | Lt (a, b) -> Lt (subst a subs, subst b subs) 
    | Lte (a, b) -> Lte (subst a subs, subst b subs) 
    | Gt (a, b) -> Gt (subst a subs, subst b subs) 
    | Gte (a, b) -> Gte (subst a subs, subst b subs) 
    | And (a, b) -> And (subst a subs, subst b subs) 
    | Or (a, b) -> Or (subst a subs, subst b subs) 
    | Not a -> Not (subst a subs) 
    | If (a, b, c) -> If (subst a subs, subst b subs, subst c subs) 
    | Fun (x, e) -> if List.mem_assoc x subs 
                    then Fun (x, subst e subs) 
                    else Fun (x, e) 
    | App (f, e) -> App (subst f subs, subst e subs)