(* Declare a custom type called 'student' with two parameters: name and grade *)
type student = {
    name : string;
    grade : int;
}

(* Create a function 'average_grade' that takes in a list of student records and returns the average grade as a float *)
let average_grade students =
    (* Define a helper function 'sum_grades' that accumulates the grades of each student in the list *)
    let rec sum_grades stud_list total =
        match stud_list with
        | [] -> total (* Returns the accumulated total *)
        | { grade = g } :: tl -> sum_grades tl (total + g) (* Adds the grade of current student to total and recurses on rest of list *)

    (* Call the helper function and divide the sum of grades by the number of students in the list to get the average *)
    let num_students = List.length students in
    let total_grades = sum_grades students 0 in
    (float_of_int total_grades) /. (float_of_int num_students)
    
(* Create a list of student records and pass it into the 'average_grade' function to get the average grade *)
let students = [ {name = "John"; grade = 90}; {name = "Jane"; grade = 80}; {name = "Joe"; grade = 85} ] in
average_grade students (* Returns: 85.0, the average grade of the three students *)