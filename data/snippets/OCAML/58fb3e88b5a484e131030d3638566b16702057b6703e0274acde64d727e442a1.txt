(* This is a function that takes in a list and a number,
and checks if the number is present in the list or not.
If present, it returns true, else false. *)
let rec check_number list number =
  match list with
  | [] -> false (* Base case: if the list is empty, return false *)
  | x::xs -> 
    if x = number then 
      true  (* If the first element in the list is equal to the number, return true *)
    else 
      check_number xs number;; (* Recursively check the rest of the list *)

(* This is a function that takes in a list and returns a new list with only the even numbers *)
let rec filter_even list = 
  match list with
  | [] -> []
  | x::xs -> 
    if x mod 2 = 0 then 
      x :: filter_even xs  (* If the first element is even, add it to the new list *)
    else 
      filter_even xs;; (* If it's odd, skip it and move on to the rest of the list *)