(* This is a comment in OCaml *)

(* Defining a new datatype called 'binary_tree' *)
type binary_tree =
  | Empty (* Represents an empty tree *)
  | Node of int * binary_tree * binary_tree (* Represents a node with an integer value and two subtrees *)

(* A function to add a value to a binary tree *)
let rec add_to_tree value tree = match tree with
  | Empty -> Node (value, Empty, Empty) (* If the tree is empty, create a node with the value *)
  | Node (v, left, right) ->
      if value = v then tree (* If the value is already in the tree, do nothing *)
      else if value < v then Node (v, add_to_tree value left, right) (* If the value is less than the current node's value, add it to the left subtree *)
      else Node (v, left, add_to_tree value right) (* If the value is greater than the current node's value, add it to the right subtree *)
  
(* A function to find the maximum value in a binary tree *)
let rec max_value tree = match tree with
  | Empty -> None (* If the tree is empty, return None *)
  | Node (v, Empty, _) -> Some v (* If there are no subtrees to the right, the maximum value is the current node's value *)
  | Node (v, _, right) -> max_value right (* Otherwise, recursively find the maximum value in the right subtree *)

(* A function to delete a value from a binary tree *)
let rec delete_from_tree value tree = match tree with
  | Empty -> tree (* If the tree is empty, do nothing *)
  | Node (v, left, right) ->
      if value = v then
        match (left, right) with
        | (Empty, Empty) -> Empty (* If the current node is a leaf, delete it and return Empty *)
        | (Node (lv, _, _), Empty) -> Node (lv, left, Empty) (* If the current node only has a left subtree, promote that subtree *)
        | (Empty, Node (rv, _, _)) -> Node (rv, Empty, right) (* If the current node only has a right subtree, promote that subtree *)
        | (Node (lv, _, _), Node (rv, _, _)) -> 
            Node (lv, left, delete_from_tree (max_value left) right) (* If the current node has both left and right subtrees, replace it with the maximum value from the left subtree and recursively delete it from the left subtree *)
      else if value < v then Node (v, delete_from_tree value left, right) (* If the value is less than the current node's value, delete it from the left subtree *)
      else Node (v, left, delete_from_tree value right) (* If the value is greater than the current node's value, delete it from the right subtree *)

(* Example code *)
let tree = Node (5, Node (3, Empty, Empty), Node (8, Node (7, Empty, Node (9, Empty, Empty)), Empty)) (* A binary tree with values 5, 3, 8, 7, and 9 *)
let new_tree = add_to_tree 4 tree (* Add the value 4 to the tree *)
let max = max_value new_tree (* Find the maximum value in the tree *)
let final_tree = delete_from_tree 5 new_tree (* Delete the value 5 from the tree *)