(* This is a function that calculates the Levenshtein distance between two strings
 * using dynamic programming. *)
let levenshtein_distance str1 str2 =
  let len1 = String.length str1 in
  let len2 = String.length str2 in

  (* Create a matrix to store the results of subproblems *)
  let matrix = Array.make_matrix (len1 + 1) (len2 + 1) 0 in

  (* Fill the first row and column with ascending numbers *)
  for i = 0 to len1 do
    matrix.(i).(0) <- i;
  done;
  for j = 0 to len2 do
    matrix.(0).(j) <- j;
  done;

  (* Loop through each character in the strings
   * and compare them. If they are the same,
   * the cost is 0. If they are different,
   * the cost is 1. The minimum cost of the
   * three adjacent cells in the matrix
   * represents the cost of replacing, deleting,
   * or inserting a character respectively. *)
  for i = 1 to len1 do
    for j = 1 to len2 do
      let cost = if str1.[i-1] = str2.[j-1] then 0 else 1 in
      let replace = matrix.(i-1).(j-1) + cost in
      let delete = matrix.(i-1).(j) + 1 in
      let insert = matrix.(i).(j-1) + 1 in
      matrix.(i).(j) <- min replace (min delete insert)
    done;
  done;

  (* The final value in the bottom right corner
   * of the matrix represents the Levenshtein distance *)
  matrix.(len1).(len2)