(* Function to calculate the nth Fibonacci number *)
let rec fibonacci n = 
  if n <= 1 then n else (fibonacci (n-1)) + (fibonacci (n-2));;

(* Function to find the maximum element in a list *)
let rec max_list = function
  | [] -> failwith "Empty list has no maximum element"
  | [x] -> x
  | x :: xs -> max x (max_list xs);;
  
(* Function to count the number of occurrences of an element in a list *)
let rec count_occurrences elem = function
  | [] -> 0
  | hd :: tl -> if hd = elem then 1 + count_occurrences elem tl else count_occurrences elem tl;;

(* Example usage of the functions above *)

(* Calculate the 10th Fibonacci number *)
let fib_10 = fibonacci 10 in
(* Find the maximum element in a list *)
let max = max_list [1;2;3;4;5;6;7;8;9;10] in
(* Count the number of occurrences of 5 in a list *)
let occ = count_occurrences 5 [1;2;3;4;5;6;5;5;8;5] in
(* Print the results *)
print_endline ("fib_10 = " ^ string_of_int(fib_10));
print_endline ("max = " ^ string_of_int(max));
print_endline ("occ = " ^ string_of_int(occ));