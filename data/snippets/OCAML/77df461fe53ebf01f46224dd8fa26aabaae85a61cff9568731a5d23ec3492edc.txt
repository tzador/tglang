(* This is a recursive function that checks if a list is sorted in ascending order. It takes in a list "lst" and returns a boolean value. *)

let rec is_sorted lst = 
  match lst with 
  | [] -> true (* If the list is empty, it is already sorted *)
  | [_] -> true (* If the list only has one element, it is also sorted *)
  | x::y::tl -> x <= y && is_sorted(tl) (* Checks if the first two elements are in ascending order and then recursively calls the function on the rest of the list. *)

(* This is a recursive function that merges two sorted lists into one sorted list. It takes in two sorted lists "lst1" and "lst2" and returns a sorted list. *)

let rec merge lst1 lst2 = 
  match lst1, lst2 with 
  | [], lst -> lst (* If lst1 is empty, return lst2 *)
  | lst, [] -> lst (* If lst2 is empty, return lst1 *)
  | x::tl1, y::tl2 -> if x <= y then x::(merge tl1 lst2) else y::(merge lst1 tl2) (* Compares the first elements of lst1 and lst2 and adds the smaller element to the new list. Recursively calls the function with the remaining elements of the list as inputs. *)

(* This is a recursive function that implements merge sort on a list. It takes in a list "lst" and returns a sorted list. *)

let rec merge_sort lst = 
  match lst with 
  | [] -> [] (* If the list is empty, it is already sorted *)
  | [_] -> lst (* If the list only has one element, it is already sorted *)
  | lst -> 
    let mid = (List.length lst) / 2 in (* Calculates the mid index of the list *)
    let lst1 = List.sub lst 0 mid in (* Splits the list into two lists at the mid index *)
    let lst2 = List.sub lst mid (List.length lst - mid) in 
    merge (merge_sort lst1) (merge_sort lst2) (* Recursively calls merge_sort on the two sublists and then merges them into one sorted list. *)