(* This snippet shows a function that recursively calculates the nth Fibonacci number using memoization *)

(* This creates a memo table to store calculated values *)
let memo = Hashtbl.create 100
(* Sets the base cases for the Fibonacci sequence *)
let () = Hashtbl.replace memo 0 1
let () = Hashtbl.replace memo 1 1

(* Defines the recursive function to calculate Fibonacci numbers *)
let rec fibonacci n =
  (* Checks if the value has already been calculated and stored in the memo table *)
  if Hashtbl.mem memo n then
    (* Retrieves the value from the memo table and returns it *)
    Hashtbl.find memo n
  else
    (* Calculates the value recursively and stores it in the memo table *)
    let result = fibonacci (n-1) + fibonacci (n-2) in
    Hashtbl.replace memo n result;
    result

(* Calls the fibonacci function with input of 10 and prints the result *)
let result = fibonacci 10
let () = Printf.printf "The 10th Fibonacci number is %d" result