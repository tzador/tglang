(** This function checks if a number is prime by recursively dividing it by numbers 
    up to its square root. If any of the divisions give a remainder of 0, 
    then the number is not prime. Otherwise, it is prime. 
    @param n the number to be checked
    @return true if the number is prime, false otherwise *)
let is_prime n =
  let rec check_prime d =
    if d > int_of_float (sqrt (float_of_int n)) then
      true
    else if n mod d = 0 then
      false
    else
      check_prime (d + 1)
  in
  check_prime 2

(** This function finds all prime numbers between 2 and n by using the is_prime function. 
    @param n the upper limit of numbers to check
    @return a list of prime numbers *)
let find_primes n =
  let rec helper m =
    if m < 2 then
      []
    else if is_prime m then
      helper (m - 1) @ [m] (* add m to the list of primes *)
    else
      helper (m - 1)
  in
  helper n

(* Example usage *)
let primes = find_primes 20
(* Output: [2; 3; 5; 7; 11; 13; 17; 19] *)