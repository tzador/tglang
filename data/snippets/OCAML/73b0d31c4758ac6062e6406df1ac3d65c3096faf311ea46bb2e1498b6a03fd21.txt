(* This function takes in a list of integers and returns a new list with only the prime numbers *)

let rec is_prime n =
  if n <= 1 then false (* returns false if n is 1 or less *)
  else if n = 2 then true (* 2 is a prime number *)
  else
    let rec check_divisors d =
      if d * d > n then true (* returns true if no divisors found *)
      else if n mod d = 0 then false (* returns false if n is divisible by d *)
      else check_divisors (d + 1) (* recursively checks next divisor *)
    in check_divisors 2 (* starts checking divisors from 2 *)

let filter_primes lst =
  List.filter is_prime lst (* filters list using is_prime function *)

let numbers = [2; 7; 8; 13; 17; 21;]

let prime_numbers = filter_primes numbers (* calls filter_primes on numbers list *)

(* Output:
let rec is_prime n =
  if n <= 1 then false 
  else if n = 2 then true 
  else
    let rec check_divisors d =
      if d * d > n then true 
      else if n mod d = 0 then false 
      else check_divisors (d + 1) 
    in check_divisors 2

let filter_primes lst =
  List.filter is_prime lst 

let numbers = [2; 7; 8; 13; 17; 21;]

let prime_numbers = filter_primes numbers 
*)