(* This is a function that takes in two integers and returns the power of the first integer raised to the second integer *)
let rec power x n = 
  if n=0 then 1 else x * power x (n-1)

(* This is a higher-order function that applies a function to a list and returns the list of results *)
let map f lst = 
  match lst with 
  | [] -> []
  | h::t -> f h :: map f t

(* This is a function that takes in a list of integers and performs a bubble sort algorithm, returning the sorted list *)
let bubble_sort lst =
  let rec loop lst acc =
    match lst with
    | [] -> acc
    | x :: y :: t ->
      if x>y then loop (x::t) (y::acc)
      else loop (y::t) (x::acc)
  in
  let rec bubble_sort_help lst =
    match lst with
    | [] -> []
    | _ :: [] -> lst
    | _ :: _ -> bubble_sort_help (loop lst [])
  in
  List.rev (bubble_sort_help lst)

(* This is a recursive function that calculates the nth Fibonacci number *)
let rec fibonacci n =
  if n<=1 then n
  else fibonacci (n-1) + fibonacci (n-2)

(* This is a function that takes in two strings and concatenates them together *)
let concatenate str1 str2 =
  str1 ^ str2

(* This is a function that checks if a string is a palindrome *)
let is_palindrome str =
  let reverse str =
    let len = String.length str in
    let rec helper i =
      if i = len then "" else
      str.[(len - i - 1)]^helper (i+1)
    in
    helper 0
  in
  if str = reverse str then true else false