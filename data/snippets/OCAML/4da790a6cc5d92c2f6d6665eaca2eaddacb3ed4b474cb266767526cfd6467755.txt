(* This is a function that takes in a list of integers and 
 * returns the sum of all odd numbers in the list. It uses 
 * pattern matching and recursion to iterate through the list. *)

let rec sum_odd_numbers lst =
  match lst with
  | [] -> 0 (* base case: empty list, sum is 0 *)
  | h::t -> (* h is the head of the list, t is the tail *)
      if h mod 2 == 1 then h + sum_odd_numbers t (* if h is odd, add it to the sum of the remaining list *)
      else sum_odd_numbers t (* if h is even, skip it and continue with the rest of the list *)

(* Example call: sum_odd_numbers [1;2;3;4;5] returns 9 *)