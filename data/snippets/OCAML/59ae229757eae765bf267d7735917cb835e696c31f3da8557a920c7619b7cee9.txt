(* Example OCaml code snippet *)
type 'a binary_tree =
  | Leaf of 'a
  | Node of 'a binary_tree * 'a binary_tree

(* Function to count the number of nodes in a binary tree *)
let rec count_nodes = function
  | Leaf _ -> 1
  | Node (left, right) -> 1 + count_nodes left + count_nodes right

(* Function to check if a binary tree is balanced *)
let rec is_balanced = function
  | Leaf _ -> true
  | Node (left, right) ->
      abs (count_nodes left - count_nodes right) <= 1
      && is_balanced left
      && is_balanced right

(* Function to insert a value into a binary search tree *)
let rec insert value = function
  | Leaf v -> Node (Leaf v, Leaf value)
  | Node (left, right) as t ->
      if value < t then Node (insert value left, right)
      else if value > t then Node (left, insert value right)
      else t

(* Function to create a binary search tree from a list of values *)
let rec create_tree = function
  | [] -> Leaf
  | hd::rest -> insert hd (create_tree rest)

(* Sample usage of the above functions *)
let tree = create_tree [5; 3; 7; 1; 9; 2; 6]

(* Output:
val tree : int binary_tree =
  Node
   (Node (Node (Leaf 1, Leaf 2), Leaf 3), Node (Leaf 5, Node (Leaf 6, Node (Leaf 7, Leaf 9))))
(* This is a balanced binary search tree with 7 nodes in total. *)