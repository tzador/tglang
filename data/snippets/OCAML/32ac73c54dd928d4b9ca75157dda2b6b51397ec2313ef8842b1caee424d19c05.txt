(* Recursive function to calculate the factorial of a number *)
let rec factorial n =
  if n < 0 then
    failwith "invalid input"
  else if n = 0 then
    1
  else
    n * factorial (n-1)
    
(* Function to find the nth Fibonacci number using recursion *)
let rec fibonacci n =
  if n <= 0 then
    failwith "invalid input"
  else if n = 1 || n = 2 then
    1
  else
    fibonacci (n-1) + fibonacci (n-2)
    
(* Function to check if a number is prime *)
let is_prime n =
  let rec check_prime n i =
    if i*i > n then
      true
    else if n mod i = 0 then
      false
    else
      check_prime n (i+1)
  in
  if n < 2 then
    false
  else
    check_prime n 2
    
(* Function to find the sum of all prime numbers from 2 to n *)
let sum_primes n =
  let rec loop i sum =
    if i > n then
      sum
    else if is_prime i then
      loop (i+1) (sum + i)
    else
      loop (i+1) sum
  in
  loop 2 0
  
(* Example usage and output *)
let num = 5 in
Printf.printf "The factorial of %d is: %d\n" num (factorial num);
Printf.printf "The %dth Fibonacci number is: %d\n" num (fibonacci num);
Printf.printf "The sum of all prime numbers from 2 to %d is: %d\n" num (sum_primes num);

(* Output:
The factorial of 5 is: 120
The 5th Fibonacci number is: 5
The sum of all prime numbers from 2 to 5 is: 10 
*)