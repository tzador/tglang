(** Binary search tree implementation in OCaml *)

(* Defining the tree datatype *)
type 'a tree =
  | Empty
  | Node of 'a * 'a tree * 'a tree

(* Inserting an element into the tree *)
let rec insert (x: 'a) (t: 'a tree): 'a tree =
  match t with
  | Empty -> Node (x, Empty, Empty)
  | Node (v, left, right) when x < v -> Node (v, insert x left, right)
  | Node (v, left, right) when x > v -> Node (v, left, insert x right)
  | _ -> t

(* Finding the minimum element in the tree *)
let rec min (t: 'a tree): 'a =
  match t with
  | Empty -> failwith "Empty tree has no minimum"
  | Node (v, Empty, _) -> v
  | Node (v, left, _) -> min left

(* Deleting an element from the tree *)
let rec delete (x: 'a) (t: 'a tree): 'a tree =
  match t with
  | Empty -> Empty
  | Node (v, left, right) when x < v -> Node (v, delete x left, right)
  | Node (v, left, right) when x > v -> Node (v, left, delete x right)
  | Node (v, Empty, Empty) -> Empty
  | Node (v, Empty, right) -> right
  | Node (v, left, Empty) -> left
  | Node (v, left, right) ->
      let min_right = min right in
      Node (min_right, left, delete min_right right)

(* Checking if an element is present in the tree *)
let rec contains (x: 'a) (t: 'a tree): bool =
  match t with
  | Empty -> false
  | Node (v, left, right) when x < v -> contains x left
  | Node (v, left, right) when x > v -> contains x right
  | Node (v, _, _) -> true

(* Example usage of the tree *)
let tree = Node (5, Empty, Empty)
let tree = insert 3 tree
let tree = insert 7 tree
let tree = insert 4 tree
let tree = insert 6 tree
let tree = delete 3 tree
let _ = contains 7 tree