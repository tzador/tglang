(* This is a function that sorts a list of integers using the quicksort algorithm *)
let rec quicksort lst =
    (* If the list is empty or has one element, return it as it is already sorted *)
    match lst with
    | [] -> []
    | [x] -> [x]
    | pivot :: rest ->
        (* Create two sublists, one for values less than or equal to the pivot and one for values greater than the pivot *)
        let lesser, greater = List.partition (fun element -> element <= pivot) rest in
        (* Sort the sublists recursively and concatenate them with the pivot in the middle *)
        (quicksort lesser) @ [pivot] @ (quicksort greater)