(* This is a function that recursively calculates the Fibonacci sequence up to the nth term *)
let rec fib n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fib (n - 1) + fib (n - 2)

(* This is a function that calculates the factorial of a number using pattern matching *)
let rec factorial n =
  match n with
  | 0 | 1 -> 1
  | _ -> n * factorial (n - 1)

(* This is a function that takes in a list and returns the sum of all its elements using tail recursion *)
let rec sum_list lst =
  let rec sum acc = function
  | [] -> acc
  | x::xs -> sum (acc + x) xs
  in sum 0 lst

(* This is a function that takes in two lists and returns a list of tuples containing the corresponding elements *)
let rec zip lst1 lst2 =
  match lst1, lst2 with
  | [], _ | _, [] -> []
  | x::xs, y::ys -> (x,y)::zip xs ys

(* This is a function that implements quicksort on a list of integers *)
let rec quicksort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | pivot::rest -> let smaller, larger = List.partition (fun x -> x < pivot) rest in
    quicksort smaller @ (pivot :: quicksort larger)

(* This is a recursive function that generates a list of prime numbers up to n *)
let rec primes n =
  let rec is_prime k n =
    match n with
    | 1 -> true
    | _ ->
      if k = 1 then true
      else if n mod k = 0 then false
      else is_prime (k - 1) n
  in
  match n with
  | 1 -> []
  | _ -> primes (n - 1) @ if is_prime (n - 1) n then [n] else []