(** This function recursively calculates the factorial of a given number 
 * @param n the number whose factorial is to be calculated 
 * @return the factorial of the given number
 *)
let rec factorial n =
  if n = 1 then 1 else n * factorial (n - 1)
  
(* Define a type for a binary tree with integer values *)
type binary_tree = 
  | Leaf 
  | Node of int * binary_tree * binary_tree
  
(* Function to insert a value into a binary tree *)
let rec insert_bst value tree = 
  match tree with
  | Leaf -> Node(value, Leaf, Leaf)
  | Node(data, left, right) when value < data -> Node(data, insert_bst value left, right)
  | Node(data, left, right) when value > data -> Node(data, left, insert_bst value right)
  | Node(data, _, _) -> failwith "Value already exists in the tree"
  
(* Function to search for a value in a binary tree *)
let rec search_bst value tree =
  match tree with
  | Leaf -> false
  | Node(data, left, right) when value < data -> search_bst value left
  | Node(data, left, right) when value > data -> search_bst value right
  | Node(data, _, _) -> true
  
(* Function to delete a node from a binary tree *)
let rec delete_bst value tree =
  match tree with
  | Leaf -> failwith "Value does not exist in the tree"
  | Node(data, left, right) when value < data -> Node(data, delete_bst value left, right)
  | Node(data, left, right) when value > data -> Node(data, left, delete_bst value right)
  | Node(data, Leaf, Leaf) -> Leaf
  | Node(data, Node(_, _, _), Leaf) -> left
  | Node(data, Leaf, Node(_, _, _)) -> right
  | Node(data, Node(n1, _, _), Node(n2, _, _)) as root ->
      let rec helper node =
        match node with
        | Node(n3, _, Leaf) -> n3
        | Node(n3, _, _) -> helper n3
        | Leaf -> failwith "Logic error in helper function"
      in
      let min_val = helper right in
      let new_right = delete_bst min_val right in
      Node(min_val, left, new_right)