(* This is a function that takes in two lists and returns the total sum of their elements *)
let rec sum_of_lists list1 list2 =
  (* Recursive helper function that takes in two lists and an accumulator *)
  let rec helper lst1 lst2 accumulator =
    match lst1, lst2 with
    | [], _ -> accumulator (* Base case: If list1 is empty, return accumulator *)
    | _, [] -> accumulator (* Base case: If list2 is empty, return accumulator *)
    | hd1::tl1, hd2::tl2 -> helper tl1 tl2 (hd1 + hd2 + accumulator) (* Recursive call with updated accumulator *)
  in
  helper list1 list2 0 (* Initial call with accumulator set to 0 *)
(* Example call with output *)
let result = sum_of_lists [1;3;5] [2;4;6] in
print_int result (* Output: 21 - sum of the two lists *)