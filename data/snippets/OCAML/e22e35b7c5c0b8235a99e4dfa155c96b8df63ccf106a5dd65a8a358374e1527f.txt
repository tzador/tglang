(* This is a recursive function that calculates the factorial of a given integer n *)

let rec factorial n =
  if n = 0 then 1 (* base case, factorial of 0 is 1 *)
  else n * factorial (n-1) (* recursive call with n-1 *)

(* This is a function that calculates the sum of a list of integers *)

let rec sum_list l =
  match l with
  | [] -> 0 (* base case, sum of empty list is 0 *)
  | x :: xs -> x + sum_list xs (* recursive call with the rest of the list *)

(* This is a function that calculates the nth Fibonacci number *)

let rec fibonacci n =
  match n with
  | 0 -> 0 (* base case, Fibonacci number at index 0 is 0 *)
  | 1 -> 1 (* base case, Fibonacci number at index 1 is 1 *)
  | _ -> fibonacci (n-1) + fibonacci (n-2) (* recursive call with n-1 and n-2 *)

(* This is an example of pattern matching in OCAML *)

let rec reverse l =
  match l with
  | [] -> [] (* base case, reverse of empty list is empty list *)
  | x :: xs -> (reverse xs) @ [x] (* recursive call to reverse rest of list and append element *)