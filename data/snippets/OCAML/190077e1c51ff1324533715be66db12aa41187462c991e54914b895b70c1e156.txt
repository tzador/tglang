(** This is a recursive function to calculate the factorial of a given number. *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n - 1)

(** This is a function to calculate the square of a given number. *)
let square n = n * n

(** This is a function to calculate the sum of the first n natural numbers. *)
let rec sum n =
  if n <= 1 then 1
  else n + sum (n - 1)

(** This is a function to check if a given number is prime. *)
let is_prime n =
  let rec check_divisors d =
    if d > n / 2 then true
    else if n mod d = 0 then false
    else check_divisors (d + 1)
  in
  if n <= 1 then false
  else check_divisors 2

(** This is a function to generate the Fibonacci sequence up to a given number. *)
let fib n =
  let rec generate_fib a b =
    if a > n then []
    else a :: generate_fib b (a + b)
  in
  generate_fib 0 1