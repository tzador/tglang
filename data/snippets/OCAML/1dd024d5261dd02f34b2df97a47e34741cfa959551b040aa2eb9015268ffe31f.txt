(* This function implements the quicksort algorithm to sort a list of integers in ascending order *)
let rec quicksort lst =
  (* Base case for recursion *)
  if List.length lst < 2 then lst
  (* Otherwise, perform partition and recursive calls *)
  else
    let pivot = List.hd lst in (* Choose the first element as pivot *)
    let smaller, larger = List.partition (fun x -> x < pivot) (List.tl lst) in (* Partition the list into two sublists *)
    (* Sort the two sublists and concatenate them with pivot *)
    (quicksort smaller) @ [pivot] @ (quicksort larger)

(* Example usage *)
let sorted_list = quicksort [3; 1; 6; 2; 8; 4] in
  print_endline (List.fold_left (fun acc x -> acc ^ " " ^ string_of_int x) "" sorted_list)
(* Output: "1 2 3 4 6 8" *)