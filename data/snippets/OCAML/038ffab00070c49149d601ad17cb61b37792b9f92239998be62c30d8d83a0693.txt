(** This function calculates the n-th Fibonacci number
@param n The index of the number to be calculated
@return The n-th Fibonacci number *)
let rec fib n = 
  if n = 1 || n = 2 then 1
  else fib (n-1) + fib (n-2)

(** This function calculates the factorial of a given number
@param n The number to calculate the factorial of
@return The factorial of n *)
let rec factorial n =
  if n = 0 || n = 1 then 1
  else n * factorial (n-1)

(** This function calculates the sum of all squares from 1 to n
@param n The upper limit for the range of numbers
@return The sum of squares *)
let sum_squares n =
  let rec helper i acc =
    if i > n then acc
    else helper (i+1) (acc + i*i)
  in helper 1 0

(** This function checks if a given number is prime
@param n The number to check
@return True if n is prime, false otherwise *)
let is_prime n =
  let rec helper i =
    if i = n then true
    else if n mod i = 0 then false
    else helper (i+1)
  in helper 2

(** This function checks if a list contains a given element
@param lst The list to check
@param elem The element to search for
@return True if the element is in the list, false otherwise *)
let rec contains lst elem =
  match lst with
  | [] -> false
  | head::tail -> if head = elem then true else contains tail elem