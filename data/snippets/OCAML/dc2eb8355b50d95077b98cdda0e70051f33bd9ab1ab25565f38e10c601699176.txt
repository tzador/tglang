(** Helper function for calculating the factorial of a given number using tail recursion *)
let rec tail_factorial n acc =
  if n <= 0 then acc
  else tail_factorial (n-1) (n*acc)

(* Calculates the factorial of a given number *)
let factorial n =
  tail_factorial n 1

(* Calculates the sum of all the elements in a list using recursion *)
let rec sum_list lst =
  match lst with
  | [] -> 0
  | hd :: tail -> hd + sum_list tail

(* Calculates the product of all the elements in a list using tail recursion *)
let rec tail_product lst acc =
  match lst with
  | [] -> acc
  | hd :: tail -> tail_product tail (hd*acc)

(* Calculates the product of all the elements in a list *)
let product lst =
  tail_product lst 1

(* Defines a binary tree data structure *)
type 'a btree =
  | Empty
  | Node of 'a * 'a btree * 'a btree

(* Function to insert an element into a binary tree *)
let rec insert_btree el tree =
  match tree with
  | Empty -> Node (el, Empty, Empty)
  | Node (value, left, right) ->
    if el < value then Node (value, insert_btree el left, right)
    else Node (value, left, insert_btree el right)