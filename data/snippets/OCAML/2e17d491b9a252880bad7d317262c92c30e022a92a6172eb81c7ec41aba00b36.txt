let rec fib n = 
  match n with 
  | 0 -> 0 
  | 1 -> 1 
  | n -> (fib (n-1)) + (fib (n-2)) 

let rec factorial n = 
  match n with 
  | 0 -> 1 
  | 1 -> 1 
  | n -> n * (factorial (n-1)) 

let rec partition lst = 
  match lst with 
  | [] -> ([], []) 
  | [x] -> ([x], []) 
  | x::y::t -> 
      let (even, odd) = partition t in 
      (x::even, y::odd) 

let rec map f lst = 
  match lst with 
  | [] -> [] 
  | h::t -> (f h)::(map f t)

let rec drop n lst = 
  match lst with 
  | [] -> [] 
  | h::t -> if n = 0 then lst else drop (n-1) t 

let rec take n lst = 
  match lst with 
  | [] -> [] 
  | h::t -> if n = 0 then [] else h::(take (n-1) t) 

let rec append lst1 lst2 = 
  match lst1 with 
  | [] -> lst2 
  | h::t -> h::(append t lst2) 

let rec flatten lst = 
  match lst with 
  | [] -> [] 
  | h::t -> append h (flatten t)

let rec merge lst1 lst2 = 
  match (lst1, lst2) with 
  | ([], lst2) -> lst2 
  | (lst1, []) -> lst1 
  | (h1::t1, h2::t2) -> if h1 < h2 then h1::(merge t1 lst2) else h2::(merge lst1 t2) 

let rec quicksort lst = 
  match lst with 
  | [] -> [] 
  | [x] -> [x] 
  | h::t -> 
      let (smaller, larger) = partition (drop 1 t) in 
      (quicksort smaller)@(h::(quicksort larger)) 

let rec bubble_sort lst = 
  match lst with 
  | [] -> [] 
  | [x] -> [x] 
  | lst -> 
      let rec bubble lst = 
        match lst with 
        | [x] -> [x] 
        | h1::h2::t -> if h1 > h2 then h2::(bubble (h1::t)) else h1::(bubble (h2::t)) 
      in bubble_sort (bubble lst)

let rec insertion_sort lst = 
  match lst with 
  | [] -> [] 
  | [x] -> [x] 
  | h::t -> 
      let rec insert x lst = 
        match lst with 
        | [] -> [x] 
        | h::t -> if x < h then x::lst else h::(insert x t) 
      in insert h (insertion_sort t)

let rec selection_sort lst = 
  match lst with 
  | [] -> [] 
  | [x] -> [x] 
  | lst -> 
      let rec find_min lst = 
        match lst with 
        | [] -> failwith "Empty list" 
        | [x] -> x 
        | h::t -> min h (find_min t) 
      in let rec remove_item item lst = 
        match lst with 
        | [] -> [] 
        | h::t -> if h = item then t else h::(remove_item item t) 
      in let min = find_min lst in 
      min::(selection_sort (remove_item min lst))