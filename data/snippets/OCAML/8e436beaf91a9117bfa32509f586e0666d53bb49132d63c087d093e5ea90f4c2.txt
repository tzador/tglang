(* This is a recursive function to find the nth Fibonacci number *)

(* Function takes in an integer and returns an integer *)
let rec fibonacci n =
  if n <= 1 then
    (* Base cases: if n is 0 or 1, return n *)
    n
  else
    (* Recursive case: calculate the Fibonacci number using tail recursion *)
    (* Syntax for recursive functions in OCAML is 'let rec function_name params = body' *)
    (* In this case, the body is a match expression and utilizes pattern matching *)
    let a = fibonacci (n - 1) in
    let b = fibonacci (n - 2) in
    (* The match expression handles both base and recursive cases *)
    (* The base cases are pattern matched using the 'with' keyword *)
    match (a, b) with
    | (0, 0) -> 0 (* If both a and b are 0, return 0 *)
    | (0, _) -> b (* If a is 0, return b *)
    | (_, 0) -> a (* If b is 0, return a *)
    | (_, _) -> a + b (* Otherwise, return the sum of a and b *)
  
(* Call the function with an input of 10 *)
let result = fibonacci 10
(* Output: 55 *)