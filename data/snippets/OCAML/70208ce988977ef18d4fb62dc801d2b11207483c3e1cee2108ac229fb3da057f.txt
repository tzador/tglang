(* This is a function that takes in two integers and returns their sum in string form *)
let sumToString x y =
  let z = x + y in
  string_of_int z;;

(* This is a recursive function that calculates the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n-1);;

(* This is a function that checks if a given number is prime *)
let isPrime n =
  let rec check i =
    if i*i > n then true
    else if n mod i = 0 then false
    else check (i+1)
  in
  check 2;;

(* This is a function that generates the Fibonacci sequence up to a given number *)
let rec fibonacci n =
  if n = 0 then 0
  else if n = 1 then 1
  else fibonacci (n-1) + fibonacci (n-2);;

(* This is a function that takes in a list of numbers and returns the sum of the even numbers *)
let sumEvenNumbers lst =
  List.fold_left (fun acc x -> if x mod 2 = 0 then acc + x else acc) 0 lst;;

(* This is an annotated if statement *)
if 1 = 1 then
  (* If 1 is equal to 1, then print "True" *)
  print_endline "True"
else
  (* Otherwise, print "False" *)
  print_endline "False";;

(* This is a complex type definition for a binary tree *)
type 'a binary_tree =
  | Leaf
  | Node of 'a * 'a binary_tree * 'a binary_tree;;
  (* A binary tree can either be a leaf or a node with a value and two branches *)

(* This is an example of pattern matching on a binary tree *)
let rec numNodes tree =
  match tree with
  | Leaf -> 0
  | Node (v, left, right) -> 1 + numNodes left + numNodes right;;

(* This is a higher order function that returns the composition of two functions *)
let compose f g =
  fun x -> f (g x);;

(* This is a function that applies a list of functions to a given input *)
let rec applyFunctions lst input =
  match lst with
  | [] -> input
  | h::t -> applyFunctions t (h input);;

(* This is an example of a tail recursion optimized function that calculates the nth Fibonacci number *)
let fibonacci_optimized n =
  let rec loop i prev curr =
    if i = n then curr
    else loop (i+1) curr (prev+curr)
  in
  loop 0 0 1;;