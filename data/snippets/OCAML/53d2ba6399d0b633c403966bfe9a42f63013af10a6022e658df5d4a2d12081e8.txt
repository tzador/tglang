(* This is a recursive function that takes in a list and returns the sum of all numbers in the list *)
let rec sum_list list = 
  match list with 
  | [] -> 0 (* If the list is empty, return 0 *)
  | x :: xs -> x + sum_list xs (* Add the first element of the list to the sum of the remaining elements *)

(* This function takes in a list of integers and returns a new list with only even numbers *)
let rec filter_even = function
  | [] -> []
  | x :: xs -> if x mod 2 = 0 then x :: filter_even xs else filter_even xs 
  (* If the first element is even, add it to the new list, else discard and continue filtering *)

(* From a given starting value, this function generates a list of n numbers in the fibonacci sequence *)
let rec fibonacci n = 
  match n with
  | 0 -> [] (* If n is 0, return an empty list *)
  | 1 -> [1] (* If n is 1, return a list with the first fibonacci number *)
  | n -> let rec helper x y i = match i with 
    | 0 -> [] (* If i is 0, stop and return the list *)
    | i -> x + y :: helper y (x+y) (i-1) (* Generate the next fibonacci number and add it to the list *)
  in 1::1::helper 1 1 (n-2) (* Call the helper function with the starting values and iterate n-2 times to get n numbers *)

(* This function calculates the factorial of a given number *)
let rec factorial n = 
  match n with 
  | 0 -> 1 (* If n is 0, return 1 since 0! = 1 *)
  | n -> n * factorial (n-1) (* Recursive call to multiply n with the factorial of n-1 *)

(* Main function to call other functions and print the results *)
let () = 
  let list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] in (* Create a list of numbers *)
  let even_list = filter_even list in (* Use the filter_even function to get a list with only even numbers *)
  print_string "List: "; print_int_list list; (* Print the original list *)
  print_string "\nSum of list: "; print_int (sum_list list); (* Print the sum of the list *)
  print_string "\nEven numbers: "; print_int_list even_list; (* Print the list with even numbers *)
  print_string "\nFibonacci numbers: "; print_int_list (fibonacci 10); (* Print the first 10 fibonacci numbers *)
  print_string "\nFactorial of 5: "; print_int (factorial 5) (* Print the factorial of 5 *)