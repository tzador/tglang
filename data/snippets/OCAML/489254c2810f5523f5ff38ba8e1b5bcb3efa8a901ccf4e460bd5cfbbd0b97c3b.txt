(* This is a function that takes in two integers and returns their sum *)
let add (x : int) (y : int) : int =
  x + y;

(* This is a recursive function that calculates the factorial of a number *)
let rec factorial (n : int) : int =
  if n < 0 then invalid_arg "Factorial cannot be calculated for negative numbers"
  else if n = 0 then 1
  else n * factorial (n - 1);

(* This is a function that takes in a list of strings and concatenates them into one string *)
let rec concat (lst : string list) : string =
  match lst with
  | [] -> ""
  | h::t -> h ^ concat t;

(* This is a higher-order function that takes in a function and a list and applies the function to each element in the list *)
let rec map (f : 'a -> 'b) (lst : 'a list) : 'b list =
  match lst with
  | [] -> []
  | h::t -> (f h) :: (map f t);

(* This is a function that takes in a list and returns a tuple with the minimum and maximum values *)
let min_max (lst : int list) : (int * int) =
  let rec aux (lst : int list) (min : int) (max : int) : (int * int) =
    match lst with
    | [] -> (min, max)
    | h::t -> if h < min then aux t h max
              else if h > max then aux t min h
              else aux t min max
  in aux lst (List.hd lst) (List.hd lst);

(* This is a function that takes in a string and reverses it *)
let reverse (s : string) : string =
  let rec aux (s : string) (rev : string) : string =
    if String.length s = 0 then rev
    else aux (String.sub s 1 (String.length s - 1)) rev ^ (String.sub s 0 1)
  in aux s "";