(* OCaml code snippet that takes in a list of integers and returns the sum of all even numbers in the list *)

(* Define a function named "sum_even" with a parameter "nums", which is a list of integers *)
let rec sum_even nums = 
    (* Check if the list is empty, if yes then return 0 *)
    match nums with 
    | [] -> 0 
    (* If the list is not empty, pattern match on the head and tail of the list *)
    | hd :: tl ->
        (* Check if the head of the list is even, if yes then add it to the sum of even numbers in the tail of the list 
           If the head is not even, skip it and only add the sum of even numbers in the tail of the list *)
        if hd mod 2 = 0 then 
            hd + sum_even tl 
        else 
            sum_even tl 

(* Example usage: sum_even [1;2;3;4;5] returns 6 since 2 and 4 are even numbers in the list *)