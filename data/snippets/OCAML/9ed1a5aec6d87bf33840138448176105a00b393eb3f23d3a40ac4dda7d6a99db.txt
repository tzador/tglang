let rec factorial n =      (* defining a recursive function to compute factorial of a number *)
  if n = 0 then 1          (* base case: if n is 0, factorial is 1 *)
  else n * factorial (n-1) (* recursive call with n-1 as the input *)
  
let result = factorial 5   (* calling the function with input 5 *)
(* result = 120, since 5! = 5*4*3*2*1 = 120 *)

(* defining a custom data type 'person' which stores name and age*)
type person = {
  name : string;
  age : int
}

(* creating a list of person data *)
let person_list = [
  {name = "John"; age = 22};
  {name = "Jane"; age = 26};
  {name = "Bob"; age = 30}
]

(* function to filter the person_list based on age *)
let filter_by_age lst age = 
  List.filter (fun x -> x.age >= age) lst  (* using higher-order function 'filter' to filter the list based on age *)

let filtered_list = filter_by_age person_list 25
(* filtered_list = [{name = "Jane"; age = 26}; {name = "Bob"; age = 30}] since both Jane and Bob are above 25 years old *)