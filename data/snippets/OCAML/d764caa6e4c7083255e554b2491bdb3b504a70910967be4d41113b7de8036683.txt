(* This is a function that calculates the factorial of a given number using recursion *)
let rec factorial num =
  match num with
  | 0 -> 1
  | n when n > 0 -> n * factorial (n-1)
  | _ -> failwith "Cannot compute factorial of negative number"
(* This function calculates the sum of the even numbers in a given list *)
let rec sum_of_even num_list =
  match num_list with
  | [] -> 0
  | hd::tl -> if hd mod 2 = 0 then hd + sum_of_even tl else sum_of_even tl
(* This is a higher order function that applies a given function to each element of a list *)
let rec map f lst =
  match lst with
  | [] -> []
  | hd::tl -> (f hd) :: map f tl

(* Example function to be mapped *)
let multiply_by_two num = num * 2

let result_list = map multiply_by_two [1;2;3;4;5]

(* Output: [2;4;6;8;10] *)