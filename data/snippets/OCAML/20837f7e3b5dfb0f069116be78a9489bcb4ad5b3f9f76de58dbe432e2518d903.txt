(** Type definition for a Binary Tree data structure *)
type 'a btree = 
    | Empty               (* Represents an empty binary tree *)
    | Node of 'a * 'a btree * 'a btree (* Represents a node with a value and two child trees *)
;;

(** Function to insert a value into a binary tree, maintaining the properties of a binary search tree *)
let rec insert (val : 'a) (bt : 'a btree) : 'a btree =
  match bt with
  | Empty -> Node (val, Empty, Empty) (* If the tree is empty, create a new node with the given value *)
  | Node (v, left, right) -> (* If the tree is not empty, compare the value with the current node's value *)
      if val < v then         (* If the value is less than the current node's value, insert it into the left subtree *)
        Node (v, insert val left, right)
      else if val > v then    (* If the value is greater than the current node's value, insert it into the right subtree *)
        Node (v, left, insert val right)
      else                    (* If the value is equal to the current node's value, do nothing as duplicates are not allowed in a binary search tree *)
        bt
;;

(** Function to check if a value is present in a binary tree *)
let rec contains (val : 'a) (bt : 'a btree) : bool =
  match bt with
  | Empty -> false        (* If the tree is empty, the value is not present *)
  | Node (v, left, right) -> (* If the tree is not empty, compare the value with the current node's value *)
      if val < v then             (* If the value is less than the current node's value, check the left subtree *)
        contains val left
      else if val > v then        (* If the value is greater than the current node's value, check the right subtree *)
        contains val right
      else                        (* If the value is equal to the current node's value, the value is present *)
        true
;;

(** Function to delete a value from a binary tree *)
let rec delete (val : 'a) (bt : 'a btree) : 'a btree =
  match bt with
  | Empty -> Empty          (* If the tree is empty, return an empty tree *)
  | Node (v, left, right) when v = val ->      (* If the current node's value is equal to the value to be deleted *)
      if left = Empty then       (* If the left child is empty, replace the node with its right child *)
        right
      else if right = Empty then (* If the right child is empty, replace the node with its left child *)
        left
      else (* If both children are present, find the minimum value in the right subtree and replace the node's value with it,
             then delete the minimum value from the right subtree *)
        let min_val = min_value right in
        Node (min_val, left, delete min_val right)
  | Node (v, left, right) when v > val -> (* If the node's value is greater than the value to be deleted, delete from the left subtree *)
      Node (v, delete val left, right)
  | Node (v, left, right) -> (* If the node's value is less than the value to be deleted, delete from the right subtree *)
      Node (v, left, delete val right)
;;

(** Helper function to find the minimum value in a binary tree *)
let rec min_value (bt : 'a btree) : 'a =
  match bt with
  | Empty -> raise (Failure "Cannot find minimum value in an empty tree") (* If the tree is empty, cannot find the minimum value *)
  | Node (v, Empty, _) -> v                                            (* If the left child is empty, the current node's value is the minimum value *)
  | Node (v, left, _) -> min_value left                                  (* Otherwise, recursively find the minimum value in the left subtree *)
;;