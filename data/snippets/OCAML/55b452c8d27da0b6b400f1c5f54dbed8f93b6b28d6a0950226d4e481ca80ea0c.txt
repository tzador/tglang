(** This is a function that recursively calculates the factorial of a number n *)
let rec factorial n = 
  match n with
  | 0 -> 1
  | _ -> n * factorial (n-1)
  
(** This is a function that takes in a list of integers and returns a new list with only the even numbers *)
let rec filter_even lst =
  match lst with
  | [] -> []
  | h::t -> if h mod 2 = 0 then h::(filter_even t) else filter_even t
  
(** This is a function that takes in a string and returns the string reversed *)
let rec reverse str =
  match str with
  | "" -> ""
  | _ -> (reverse (String.sub str 1 ((String.length str)-1))) ^ (String.sub str 0 1)
  
(** This is a function that takes in a list of integers and returns their sum *)
let rec sum lst = 
  match lst with
  | [] -> 0
  | h::t -> h + (sum t)
  
(** This is a function that checks if a string is a palindrome *)
let palindrome str =
  if str = (reverse str) then true else false
  
(** This is a function that takes in two numbers and calculates their product using the previously defined factorial function *)
let prod a b = (factorial a) * (factorial b)
  
(** This is a nested function that calculates the fibonacci sequence *)
let fib n =
  let rec helper x y n =
    match n with
    | 0 -> x
    | 1 -> y
    | _ -> helper y (x+y) (n-1)
  in helper 0 1 n
  
(** This is a function that takes in a binary tree and returns its inorder traversal *)
type 'a bt =
  | Empty
  | Node of 'a * 'a bt * 'a bt
  
let rec inorder tree = 
  match tree with
  | Empty -> []
  | Node (x, left, right) -> (inorder left) @ [x] @ (inorder right)