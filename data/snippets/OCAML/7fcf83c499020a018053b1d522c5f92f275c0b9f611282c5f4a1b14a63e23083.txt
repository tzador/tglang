(*
This is a function that takes in a list and an accumulator, and returns the accumulator's final value after iterating through each element in the list.
Parameters:
- lst: list containing elements of any type
- acc: accumulator of any type
Returns:
- acc: final value of the accumulator
*)
let rec my_function lst acc =
  match lst with
  | [] -> acc (* base case, end recursion and return accumulator *)
  | hd::tl -> my_function tl (acc + hd) (* add current element to accumulator and call function again on remaining list *)