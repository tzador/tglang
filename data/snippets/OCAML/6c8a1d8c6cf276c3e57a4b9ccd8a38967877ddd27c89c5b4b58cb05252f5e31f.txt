(** An example of a recursive function in OCAML *)

(** [append lst1 lst2] is the concatenation of [lst1] and [lst2]. *)
let rec append lst1 lst2 =
  match lst1 with
  | [] -> lst2
  | hd :: tl -> hd :: append tl lst2

(** An example of tail recursion in OCAML *)

(** [factorial n] is the factorial of [n]. *)
let factorial n =
  let rec loop acc n =
    match n with
    | 0 -> acc
    | _ -> loop (acc * n) (n - 1)
  in
  loop 1 n

(** A higher-order function in OCAML *)

(** [map f lst] applies [f] to each element in [lst] and returns a list
    with the resulting values *)
let rec map f lst =
  match lst with
  | [] -> []
  | hd :: tl -> f hd :: map f tl