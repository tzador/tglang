(* This is a function that implements the Euclidean algorithm to find the greatest common divisor of two numbers *)

let rec gcd a b =
  if b = 0 then a
  else gcd b (a mod b)

(* This is a function that calculates the sum of all the even Fibonacci numbers up to a given limit *)

let rec sum_even_fib limit prev curr =
  if curr > limit then 0
  else if curr mod 2 = 0 then curr + (sum_even_fib limit curr (prev + curr))
  else sum_even_fib limit curr (prev + curr)

(* This is a function that implements the merge sort algorithm *)

let rec merge_sort lst =
  let rec merge l1 l2 =
    match (l1, l2) with
    | [], _ -> l2
    | _, [] -> l1
    | hd1 :: tl1, hd2 :: tl2 ->
        if hd1 <= hd2 then hd1 :: (merge tl1 l2)
        else hd2 :: (merge l1 tl2)
  in
  match lst with
  | [] -> []
  | [hd] -> [hd]
  | lst ->
      let len = List.length lst in
      let mid = len / 2 in
      let lst1 = List.sub lst 0 mid in
      let lst2 = List.sub lst mid (len - mid) in
      let sorted1 = merge_sort lst1 in
      let sorted2 = merge_sort lst2 in
      merge sorted1 sorted2