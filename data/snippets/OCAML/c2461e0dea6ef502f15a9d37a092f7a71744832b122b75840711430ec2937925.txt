(* This is a function that takes in a list of integers and returns the sum of the list *)
let rec sum_list lst =
  match lst with
  | [] -> 0 (* If the list is empty, return 0 *)
  | x::xs -> x + sum_list xs (* Add the first element of the list to the sum of the rest of the list *)

(* This is a function that takes in a list of integers and returns the product of the list *)
let rec product_list lst =
  match lst with
  | [] -> 1 (* If the list is empty, return 1 *)
  | x::xs -> x * product_list xs (* Multiply the first element of the list with the product of the rest of the list *)

(* This is a function that takes in a list of strings and returns the concatenation of the strings *)
let rec concat_list lst =
  match lst with
  | [] -> "" (* If the list is empty, return an empty string *)
  | x::xs -> x ^ concat_list xs (* Concatenate the first element of the list with the concatenation of the rest of the list *)

(* This is a function that takes in a list of booleans and returns true if all elements are true, otherwise returns false *)
let rec all_true lst =
  match lst with
  | [] -> true (* If the list is empty, return true *)
  | x::xs -> x && all_true xs (* Check if the first element is true and recursively check the rest of the list *)

(* This is a function that takes in a list of booleans and returns true if any element is true, otherwise returns false *)
let rec any_true lst =
  match lst with
  | [] -> false (* If the list is empty, return false *)
  | x::xs -> x || any_true xs (* Check if the first element is true and recursively check the rest of the list *)