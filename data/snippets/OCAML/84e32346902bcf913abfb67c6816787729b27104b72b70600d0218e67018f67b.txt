(* This is a function that takes in a list of integers and returns the sum of all the even numbers in the list *)
let sum_even_numbers (lst: int list) : int =
  let rec helper lst acc =
  match lst with
  | [] -> acc (* Base case: if the list is empty, return the accumulator *)
  | x :: xs -> if x mod 2 = 0 then helper xs (acc + x) (* If the first element is even, add it to the accumulator *)
                else helper xs acc (* If the first element is odd, do not add it to the accumulator *)
  in helper lst 0 (* Call the helper function with an initial accumulator value of 0 to start calculating the sum *)
let lst = [1; 2; 3; 4; 5; 6] (* Example list *)
let result = sum_even_numbers lst (* Call the function with the example list *)
(* Output should be: 12, since the even numbers in the list are 2, 4, and 6, which sum up to 12 *)