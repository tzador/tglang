(**Function to compute the nth Fibonacci number using dynamic programming.*)

(*Create a memoization table with initial values.*)
let memo = Array.make 100 (-1)

(*Function to compute the nth Fibonacci number.*)
let rec fibonacci n =
    (*Base case for first two numbers: 0 and 1.*)
    if n <= 1 then
        n
    (*Check if value is already stored in memo table.*)
    else if memo.(n) <> -1 then
        memo.(n)
    (*If not, compute recursively and store result in memo table.*)
    else
        let result = fibonacci (n-1) + fibonacci (n-2) in
        memo.(n) <- result;
        result

(*Function to print the computed Fibonacci numbers.*)
let print_fibonacci n =
    (*Iterate through all numbers and print.*)
    for i = 0 to n do
        let fib = fibonacci i in
        Printf.printf "Fibonacci number of %d is %d\n" i fib
    done

(*Call function to print the first 10 Fibonacci numbers.*)
print_fibonacci 10