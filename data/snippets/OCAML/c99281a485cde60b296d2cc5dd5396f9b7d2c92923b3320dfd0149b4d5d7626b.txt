(* Define a binary tree data structure *)
type 'a tree =
  | Leaf of 'a
  | Node of 'a tree * 'a tree

(* Define a function to insert an element into a binary tree *)
let rec insert (x: 'a) (tree: 'a tree) = match tree with
  | Leaf y -> Node (Leaf x, Leaf y)
  | Node (l, r) -> Node (insert x l, r)

(* Define a function to find the maximum element in a binary tree *)
let rec max_element (tree: 'a tree) = match tree with
  | Leaf x -> x
  | Node (l, r) -> max (max_element l) (max_element r)

(* Define a function to delete an element from a binary tree *)
let rec delete (x: 'a) (tree: 'a tree) = match tree with
  | Leaf y -> if x = y then Leaf y else tree
  | Node (l, r) -> if x < max_element l then Node (delete x l, r) else Node (l, delete x r)

(* Define a function to check if a binary tree is empty *)
let is_empty (tree: 'a tree) = match tree with
  | Leaf _ -> false
  | Node _ -> true

(* Define a function to convert a binary tree into a list using inorder traversal *)
let rec inorder (tree: 'a tree) = match tree with
  | Leaf x -> [x]
  | Node (l, r) -> inorder l @ inorder r

(* Example usage of the binary tree functions *)
let btree = Node (Node (Leaf 2, Leaf 3), Leaf 1)
let btree' = insert 4 btree (* Output: Node (Node (Leaf 2, Leaf 3), Node (Leaf 1, Leaf 4)) *)
let max = max_element btree (* Output: 3 *)
let btree'' = delete 3 btree (* Output: Node (Node (Leaf 2, Leaf 3), Leaf 1) *)
let empty = is_empty (Leaf 5) (* Output: false *)
let list = inorder btree (* Output: [2; 3; 1] *)