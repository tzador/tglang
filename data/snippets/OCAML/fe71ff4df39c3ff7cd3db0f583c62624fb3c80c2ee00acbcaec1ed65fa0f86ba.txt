(* This is a function that takes in a list of integers and returns a new list
 * with the square of each element in the original list. *)
let square_list lst =
  let rec helper acc = function
    | [] -> List.rev acc
    | x::xs -> helper ((x * x)::acc) xs in
  helper [] lst

(* This is a function that calculates the factorial of a given number. *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n - 1)

(* This is a function that checks if a given number is prime. *)
let is_prime n =
  let rec check_divisor d =
    if d * d > n then true
    else if n mod d = 0 then false
    else check_divisor (d + 1)
  in check_divisor 2

(* This is a function that calculates the sum of a list of integers. *)
let sum_list lst =
  let rec sum acc = function
    | [] -> acc
    | x::xs -> sum (acc + x) xs in
  sum 0 lst

(* This is a function that takes in a list of strings and returns the longest string in the list. *)
let rec longest_string lst =
  match lst with
  | [] -> ""
  | [x] -> x
  | x::xs ->
     let longest = longest_string xs in
     if String.length x > String.length longest then x else longest

(* This is a function that checks if a given string is a palindrome. *)
let is_palindrome str =
  let len = String.length str in
  let rec compare_characters start end_ =
    if start >= end_ then true
    else if str.[start] = str.[end_] then compare_characters (start + 1) (end_ - 1)
    else false
  in compare_characters 0 (len - 1)

(* This is a function that takes in a string and reverses it. *)
let reverse_string str =
  let len = String.length str in
  let rec reverse_chars start end_ =
    if start >= end_ then str
    else let tmp = str.[start] in
         str.[start] <- str.[end_];
         str.[end_] <- tmp;
         reverse_chars (start + 1) (end_ - 1)
  in reverse_chars 0 (len - 1)