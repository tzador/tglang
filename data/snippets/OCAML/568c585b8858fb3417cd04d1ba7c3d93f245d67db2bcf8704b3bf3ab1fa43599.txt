(* This is a complex function in OCAML that takes in two lists of integers and returns a new list with the integers from both lists that are divisible by 3. *)
let rec div_by_three (list1: int list) (list2: int list) : int list =
    match (list1, list2) with
    | ([], _) | (_, []) -> [] (* base case: if either list is empty, return empty list *)
    | (h1::t1, h2::t2) -> (* if both lists are non-empty, check if head of list 1 or 2 is divisible by 3 and recursively call function on tails *)
        if (h1 mod 3 = 0 && h2 mod 3 = 0) then (* checks if both heads are divisible by 3 *)
            h1 :: h2 :: div_by_three t1 t2
        else if (h1 mod 3 = 0) then (* checks if only head of list 1 is divisible by 3 *)
            h1 :: div_by_three t1 (h2::t2)
        else if (h2 mod 3 = 0) then (* checks if only head of list 2 is divisible by 3 *)
            h2 :: div_by_three (h1::t1) t2
        else (* if neither heads are divisible by 3, recursively call function on tails *)
            div_by_three t1 t2