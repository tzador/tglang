(* This is a comment in OCAML *)
(* This code snippet takes in a list of integers and calculates the sum of all even numbers using a recursive function. *)

(* This is the recursive function that takes in a list of integers and a current sum value *)
(* It uses pattern matching to check if the list is empty or not and adds the even number to the sum if it is even*)
(* The function also calls itself recursively with the updated list and sum value *)
let rec even_sum lst sum = 
  match lst with
  | [] -> sum
  | x::xs -> if x mod 2 = 0 then even_sum xs (sum + x) else even_sum xs sum

(* This is an example list of integers that will be used to call the recursive function *)
let lst = [1;2;3;4;5;6;7;8;9;10]

(* Calling the recursive function with the example list and an initial sum value of 0 *)
let result = even_sum lst 0

(* Printing the result *)
print_string "The sum of even numbers in the list is: ";
print_int result