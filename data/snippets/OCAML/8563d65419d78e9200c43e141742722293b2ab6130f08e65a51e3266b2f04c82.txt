(** A module for creating and manipulating mathematical matrices *)

module Matrix = struct

  (** [t] represents a mathematical matrix, with [m] rows and [n] columns. 
      Internally represented as a list of lists *) 
  type t = { m : int; n : int; mat : float list list }

  (** The empty matrix with [m] rows and [n] columns *)
  let empty m n = 
    if m <= 0 || n <= 0
    then failwith "Matrix dimensions must be positive"
    else { m = m; n = n; mat = List.init m (fun _ -> List.init n (fun _ -> 0.0)) }

  (** [identity n] creates an [n] x [n] identity matrix *)
  let identity n = 
    if n <= 0
    then failwith "Matrix dimensions must be positive"
    else { m = n; n = n; mat = List.init n (fun i -> List.init n (fun j -> if i = j then 1.0 else 0.0)) }

  (** [from_list mat] creates a matrix from a list of lists of floats *)
  let from_list mat = 
    if List.length mat = 0
    then failwith "Cannot create matrix with no rows"
    else 
      let m = List.length mat in
      let n = List.length (List.hd mat) in
      List.iter (fun row -> if List.length row <> n then failwith "All rows must have the same number of columns") mat;
      { m = m; n = n; mat = mat }

  (** [transpose mat] returns the transpose of matrix [mat] *)
  let transpose mat = 
    let n = List.length mat in
    let m = List.length (List.hd mat) in
    { m = m; n = n; mat = List.init m (fun i -> List.init n (fun j -> List.nth (List.nth mat j) i)) }

  (** [mult_scalar mat k] multiplies the matrix [mat] by the scalar [k] *)
  let mult_scalar mat k = { mat with mat = List.map (fun row -> List.map (( *.) k) row) mat.mat }

  (** [mult_vec mat vec] multiplies the matrix [mat] by the vector [vec] *)
  let mult_vec mat vec = 
    let n = List.length (List.hd mat.mat) in
    let m = List.length mat.mat in
    let vec' = List.map float_of_int vec in
    if List.length vec' <> m
    then failwith "Vector must have same length as matrix's number of rows"
    else
      { m = m; n = 1; mat = [vec'] }
      |> transpose
      |> mult_scalar mat
      |> transpose
      |> fun mat' -> { mat' with n = n }
      
end