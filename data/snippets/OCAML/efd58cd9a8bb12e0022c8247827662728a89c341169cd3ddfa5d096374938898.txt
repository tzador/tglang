(* This is a function that recursively computes the factorial of a given number *)
let rec factorial n =
    if n == 0 then 1
    else n * factorial (n-1)

(* This is a function that takes in a list and returns a new list with only the even elements *)
let rec filter_even lst =
    match lst with
    | [] -> []
    | x::xs -> if x % 2 == 0 then x :: filter_even xs
               else filter_even xs
             
(* This is a function that calculates the nth Fibonacci number using dynamic programming *)
let fibonacci n =
    let memo = Array.create (n+1) 0 in
    let rec fib n =
        if n == 0 then 0
        else if n == 1 then 1
        else if memo.(n) != 0 then memo.(n)
        else begin
            memo.(n) <- fib (n - 1) + fib (n - 2);
            memo.(n)
        end in
    fib n