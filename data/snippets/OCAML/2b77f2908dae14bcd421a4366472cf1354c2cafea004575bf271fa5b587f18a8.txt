(* This is a function that recursively calculates the factorial of a given integer value *)
let rec factorial n =
  if n <= 1 then 1 (* base case *)
  else n * factorial (n-1) (* recursive case *)

(* This is a function that generates a list of n Fibonacci numbers *)
let rec fibonacci_list n =
  match n with
  | 1 -> [0] (* first Fibonacci number is 0 *)
  | 2 -> [0; 1] (* second Fibonacci number is 1 *)
  | _ -> let prev_fibs = fibonacci_list (n-1) in
  let last_elem = List.hd (List.rev prev_fibs) in
  let second_last_elem = List.hd (List.rev (List.tl prev_fibs)) in
  prev_fibs @ [(last_elem + second_last_elem)] (* concatenate previous list with new element *)

(* This is a function that removes vowels from a given string *)
let remove_vowels str =
  let vowels = ['a'; 'e'; 'i'; 'o'; 'u'] in
  let rec remove_helper i =
    if i = String.length str then ""
    else if List.mem str.[i] vowels then remove_helper (i+1)
    else String.make 1 str.[i] ^ remove_helper (i+1)
  in remove_helper 0

(* This is a function that counts the number of vowels in a given string *)
let count_vowels str =
  let vowels = ['a'; 'e'; 'i'; 'o'; 'u'] in
  let rec count_helper i count =
    if i = String.length str then count
    else if List.mem str.[i] vowels then count_helper (i+1) (count + 1)
    else count_helper (i+1) count
  in count_helper 0 0

(* This is a function that returns a list of all possible subsets of a given list *)
let rec subsets = function
  | [] -> [[]] (* base case, empty list has one subset: the empty list *)
  | hd::tl ->
      let rest = subsets tl in
      rest @ (List.map (fun sub -> hd :: sub) rest) (* concatenate subsets without hd and with hd *)

(* This is a function that converts a given list of integers into a string representing a binary number *)
let rec convert_to_binary lst =
  match lst with
  | [] -> "0"
  | hd::tl ->
      let binary = match hd with
      | 0 -> "0"
      | 1 -> "1"
      | _ -> "0" in
      binary ^ (convert_to_binary tl) (* concatenate binary string with converted remaining list *)