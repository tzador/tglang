(* This function calculates the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1     (* Check if number is equal to 0 *)
  else n * factorial (n - 1)    (* Multiply n with the factorial of n - 1 *)

(* This function checks if a given list is sorted in ascending order *)
let rec is_sorted lst =
  match lst with
  | [] -> true      (* An empty list is always sorted *)
  | [x] -> true     (* A list with one element is always sorted *)
  | x :: y :: xs ->  (* Check if first element is smaller than the rest of the list *)
      if x <= y then (is_sorted (y :: xs)) (* Recursively check remaining list *)
      else false     (* If not sorted, return false *)

(* This function finds the maximum element in a given list *)
let rec find_max lst =
  match lst with
  | [] -> None      (* If list is empty, return None *)
  | [x] -> Some x   (* If list has only one element, that element is the maximum *)
  | x :: xs ->      (* Check if first element is greater than the maximum of the rest of the list *)
      match find_max xs with
      | None -> Some x       (* If maximum of remaining list is None, current element is maximum *)
      | Some y -> Some (max x y)  (* If maximum of remaining list is Some y, compare x and y and return maximum *)