(** Options is a module that provides functions for manipulating option types in OCaml*)
module Options = struct
  (** [to_result o default] converts the option type [o] to a result type,
      using [default] as the value for [None]. *)
  let to_result o default =
    match o with
    | Some x -> Ok x
    | None -> Error default

  (** [map f o] applies [f] to the value in [o], returning None if [o = None]. *)
  let map f o =
    match o with
    | Some x -> Some (f x)
    | None -> None

  (** [get o] returns the value in [o] using the provided [exn] if [o = None]. *)
  let get o exn =
    match o with
    | Some x -> x
    | None -> raise exn

  (** [iter f o] applies [f] to the value in [o] if [o <> None]. *)
  let iter f o =
    match o with
    | Some x -> f x
    | None -> ()
end