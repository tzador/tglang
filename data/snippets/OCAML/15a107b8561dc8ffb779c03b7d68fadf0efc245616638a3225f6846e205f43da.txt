(* This is a function that takes in a list of integers, multiplies each integer by 2, and returns the resulting list *)
let double_list (lst : int list) : int list =
  (* Helper function that multiplies an integer by 2 *)
  let multiply_by_two (n : int) : int = n * 2 in

  (* Recursive helper function that applies multiply_by_two to each element in the list *)
  let rec helper (result : int list) (remaining : int list) : int list =
    match remaining with
    | [] -> result (* Base case: the entire list has been processed, return the result *)
    | h::t -> helper (result @ [(multiply_by_two h)]) t (* Multiply the head of the list by 2 and add it to the result, continue with the tail *)

  in helper [] lst (* Call the helper function with an empty result list and the original list *)

(* Example usage *)
let input_list = [1; 2; 3; 4; 5]
let output_list = double_list input_list (* Expected output: [2; 4; 6; 8; 10] *)

(* Note: The annotations after the colons are optional, but help with type checking and clarity *)