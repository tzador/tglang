(* This function recursively calculates the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1                (* Base case: if n is 0 or 1, return 1 *)
  else n * factorial (n - 1)      (* Recursive case: n * (n-1) * (n-2) * ... * 2 * 1 *)

(* This function calculates the sum of squares of numbers in a given list *)
let rec sum_of_squares lst =
  match lst with
  | [] -> 0                                       (* Base case: if list is empty, return 0 *)
  | hd :: tl -> (hd * hd) + sum_of_squares tl      (* Recursive case: square head element and add to sum of remaining list *)

(* This function implements Euclid's algorithm to find the gcd of two numbers *)
let rec gcd x y =
  if x = y then x                                     (* Base case: if numbers are equal, gcd is the number itself *)
  else if x = 0 then y                                (* If x is 0, gcd is y *)
  else if y = 0 then x                                (* If y is 0, gcd is x *)
  else if x > y then gcd (x-y) y                       (* If x > y, recursively call gcd with x-y and y *)
  else gcd x (y-x)                                     (* Otherwise, recursively call gcd with x and y-x *)

(* This function checks if a given number is a prime number *)
let rec is_prime n =
  if n <= 1 then false                     (* Prime numbers are greater than 1 *)
  else if n = 2 then true                  (* 2 is the only even prime number *)
  else
    let rec check_divisors x =
      if x * x > n then true                (* If no divisors found, number is prime *)
      else if n mod x = 0 then false        (* If n is divisible by x, it's not prime *)
      else check_divisors (x + 1)           (* Otherwise, check next possible divisor *)
    in check_divisors 2                     (* Start checking from 2 (first possible divisor) *)
  ;;