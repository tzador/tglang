(* This is a function that calculates the factorial of a number *)
let rec factorial n = 
  if n = 0 then 1
  else n * factorial(n-1)
  
(* This is a function that calculates the sum of the first n natural numbers *)
let rec sum n = 
  if n = 0 then 0
  else n + sum(n-1)
  
(* This is a recursive function that calculates the nth power of a number *)
let rec pow x n = 
  if n = 0 then 1
  else x * pow x (n-1)
  
(* This is a function that calculates the average of a list of numbers *)
let rec avg lst = 
  match lst with
  | [] -> 0.0 (* the empty list has an average of 0 *)
  | h::t -> 
      let sum = List.fold_left (+.) 0.0 lst in (* calculates the sum of the list *)
      sum /. float(List.length lst) (* divides the sum by the length of the list *)
      
(* This is a function that sorts a list of integers in ascending order *)
let rec sort lst = 
  match lst with
  | [] -> []
  | h::t -> 
      let smaller = List.filter (fun x -> x < h) lst in (* filters out all elements smaller than the first element *)
      let bigger = List.filter (fun x -> x > h) lst in (* filters out all elements bigger than the first element *)
      sort smaller @ [h] @ sort bigger (* recursively sorts the smaller and bigger lists and concatenates them with the first element in the middle*)
      
(* This is a function that calculates the Fibonacci sequence up to the nth number *)
let rec fib n = 
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fib (n-1) + fib (n-2) (* recursively calculates the previous two numbers and adds them to get the nth number *)