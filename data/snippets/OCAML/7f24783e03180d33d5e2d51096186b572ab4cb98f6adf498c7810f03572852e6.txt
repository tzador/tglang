(* This is a recursive function in OCaml
 * that calculates the Nth Fibonacci number
 * This comment is written in an annotated markdown code snippet.
 *)
let rec fibonacci n = 
  (* Base case for n = 0 or n = 1 *)
  if n < 2 then n
  else 
    (* Recursive call for n - 1 and n -2 *)
    fibonacci (n - 1) + fibonacci (n - 2)
    
(* This function takes in a number and calculates 
 * the factorial of that number
 *)
let factorial n =
  (* Helper function that uses tail recursion *)
  let rec helper acc n =
    if n <= 1 then acc
    else helper (acc * n) (n - 1)
  in
  helper 1 n
  
(* This function takes in a list and returns the length
 * of the list using recursive calls
 *)
let rec length l = 
  match l with
  | [] -> 0
  | hd :: tl -> 1 + length tl
  
(* This function takes in two lists and returns
 * the merged list in sorted order using tail recursion
 *)
let rec merge l1 l2 = 
  match l1, l2 with
  | [], [] -> []
  | [], l2 -> l2
  | l1, [] -> l1
  | hd1 :: tl1, hd2 :: tl2 -> 
    if hd1 < hd2 then hd1 :: merge tl1 l2
    else hd2 :: merge l1 tl2
    
(* This function implements the quicksort algorithm
 * to sort a list in ascending order
 *)
let rec quicksort l = 
  match l with
  | [] -> []
  | [x] -> [x]
  | pivot :: tl -> 
    let smaller, bigger = 
      List.partition (fun x -> x < pivot) tl
    in 
    quicksort smaller @ [pivot] @ quicksort bigger