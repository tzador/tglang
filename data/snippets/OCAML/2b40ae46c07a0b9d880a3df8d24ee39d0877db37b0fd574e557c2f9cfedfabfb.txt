(*Defining a function that doubles each element in a list*)
let rec doubleList lst = 
  match lst with
  | [] -> [] (*if list is empty, return empty list*)
  | h::t -> 2*h::doubleList t (*double the head element and add it to the doubled tail list*)

(*Defining a function that calculates the sum of squares of a list of integers*)
let rec sumSquares lst =
  match lst with
  | [] -> 0 (*if list is empty, return sum as 0*)
  | h::t -> h*h + sumSquares t (*square the head element and add it to the sum of squares of the tail list*)

(*Defining a function that takes a list of integers and returns a list of their squares*)
let rec squaresList lst =
  match lst with
  | [] -> [] (*if list is empty, return empty list*)
  | h::t -> h*h::squaresList t (*square the head element and add it to the squared tail list*)

(*Defining a function that calculates the factorial of a given number*)
let rec fact n =
  if n = 0 then 1 (*if n is 0, factorial is 1*)
  else n * fact (n-1) (*factorial of n is n times factorial of n-1*)

(*Defining a function that checks if a given number is prime*)
let rec isPrime n =
  let rec checkDiv n d =
    if d = n then true (*if d reaches n, n is prime*)
    else if n mod d = 0 then false (*if d divides n, n is not prime*)
         else checkDiv n (d+1) (*else check next divisor*)
  in
  if n = 1 then false (*1 is not prime*)
  else checkDiv n 2 (*check divisors from 2 up*)

(*Defining a function that removes duplicates from a list*)
let rec removeDuplicates lst =
  match lst with
  | [] -> [] (*if list is empty, return empty list*)
  | h::t -> h::(removeDuplicates (List.filter (fun x -> x <> h) t)) (*add the head element to the filtered tail list, removing any duplicates of it*)

(*Defining a function that sorts a list in ascending order*)
let rec sortAscending lst =
  match lst with
  | [] -> [] (*if list is empty, return empty list*)
  | h::t -> (sortAscending (List.filter (fun x -> x < h) t))@(h::sortAscending (List.filter (fun x -> x > h) t)) (*sort the tail list into two parts, all smaller than h and all greater than h, then merge them*)