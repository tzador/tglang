(** Module for calculating the nth Fibonacci number *)

module Fibonacci = struct                (* Defines a module named Fibonacci *)
  let rec fib n =                        (* Defines a recursive function fib *)
    match n with                         (* Begins pattern matching *)
    | 0 -> 0                             (* When n is 0, return 0 *)
    | 1 -> 1                             (* When n is 1, return 1 *)
    | _ -> fib (n - 1) + fib (n - 2)     (* For all other n, call fib with n-1 and n-2 *)

  let fibs n =                           (* Defines a function fibs *)
    let result = ref [] in               (* Creates a reference to an empty list *)
    for i = 0 to n do                    (* Loops from 0 to n *)
      result := fib i :: !result;        (* Appends the nth Fibonacci number to the list *)
    done;                                (* End of loop *)
    List.rev !result                     (* Reverses the list and returns it *)
end                                      (* End of module definition *)

let nth_fib = Fibonacci.fib 10           (* Calls the fib function in the Fibonacci module with n=10 *)
let all_fibs = Fibonacci.fibs 10         (* Calls the fibs function in the Fibonacci module with n=10 *)

print_int nth_fib;                       (* Prints the value of the nth Fibonacci number *)
print_string "\n";                       (* Prints a new line *)
print_int (List.nth all_fibs 5);         (* Prints the 6th Fibonacci number *)