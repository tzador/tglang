(* This code snippet uses recursion to implement quicksort
* on a provided list of integers. *)

(* Function for partitioning list into two sublists *)
let partition pivot lst =
  (* Helper function to filter elements into two sublists *)
  let rec filter acc lst1 lst2 = function
    | [] -> (List.rev acc, lst1, lst2)
    | x :: xs ->
      if x < pivot then filter (x :: acc) (x :: lst1) lst2 xs
      else filter (x :: acc) lst1 (x :: lst2) xs
    in
  (* Wrapper function to start filtering from empty lists *)
  filter [] [] [] lst

(* Function to implement quicksort on a list *)
let rec quicksort = function
  | [] -> []
  | x :: xs ->
    let smaller, larger, pivot_list = partition x xs in
    (* Recursively sort the sublists and append them together *)
    (quicksort smaller) @ (x :: (quicksort larger))

(* Example usage *)
let lst = [17; 14; 2; 8; 3; 19; 1]
let sorted_lst = quicksort lst (* Output: [1; 2; 3; 8; 14; 17; 19] *)