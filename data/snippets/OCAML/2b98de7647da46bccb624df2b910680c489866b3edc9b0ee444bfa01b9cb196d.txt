let rec factorial n =    (* defines a recursive function called "factorial" that takes in a variable n *)
  match n with           (* starts a pattern matching expression *)
  | 0 -> 1               (* if n is equal to 0, returns 1 *)
  | x -> x * factorial (n - 1)  (* if n is not equal to 0, multiplies n with the next iteration of factorial with n-1 *)
;;                      (* ends the function definition *)
  
factorial 5;;           (* calls the factorial function with n = 5, should return 120 (5 * 4 * 3 * 2 * 1 = 120) *)

(* Expected Output: 120 *)