(* This function takes in a list and returns a new list with the first element removed *)
let remove_first lst =
  match lst with
  | [] -> []
  | hd::tl -> tl;;
  
(* This function takes in a string and integer, and returns a new string with the character at the given index removed *)
let remove_char_at str i =
  let rec helper str i acc =
    if i = 0 then acc ^ String.sub str 1 (String.length str - 1)
    else helper (String.sub str 1 (String.length str - 1)) (i-1) (acc ^ String.sub str 0 1)
  in
  helper str i "";;

(* This function takes in two integers and returns their sum *)
let add x y = x + y;;

(* This function calculates the factorial of a given integer *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1);;

(* This function takes in a list of strings and concatenates them together, separated by commas *)
let rec concat_strings lst =
  match lst with
  | [] -> "" (* Empty list returns empty string *)
  | [x] -> x (* Single element list returns just the element *)
  | hd::tl -> hd ^ ", " ^ (concat_strings tl);;

(* This function checks if a given number is prime or not *)
let is_prime n =
  let rec is_divisor p n =
    if p >= n then true (* Every number is divided by itself, so return true *)
    else if (n mod p) = 0 then false (* If there is no remainder, it is divisible, so return false *)
    else is_divisor (p+1) n (* Check next possible divisor *)
  in
  if n <= 1 then false (* 1 and negative numbers are not considered prime *)
  else is_divisor 2 n;; (* Start at 2, as 1 is a definite divisor *)