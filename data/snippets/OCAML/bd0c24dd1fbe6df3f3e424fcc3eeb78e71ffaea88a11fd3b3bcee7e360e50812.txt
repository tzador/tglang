(* This function takes in a list of integers and reverses the order of elements in the list *)
let reverse_list lst =
  let rec helper acc = function
    | [] -> acc
    | hd::tl -> helper (hd::acc) tl in
  helper [] lst;;
  
(* This function takes in a list of strings and sorts them in alphabetical order *)
let sort_list lst = 
  let rec insert x = function
    | [] -> [x]
    | hd::tl -> if x < hd then x::hd::tl else hd::insert x tl in
  let rec sort = function
    | [] -> []
    | hd::tl -> insert hd (sort tl) in
  sort lst;;
  
(* This function calculates the factorial of a given number *)
let rec factorial n =
  if n < 0 then failwith "Negative input"
  else if n = 0 || n = 1 then 1
  else n * factorial (n-1);;
  
(* This function checks if a given number is prime *)
let is_prime n =
  let rec helper d =
    n mod d = 0 || helper (d+1) in
  helper 2;;

(* This function creates a custom data type for a binary tree *)
type 'a binary_tree =
  | Empty
  | Node of 'a * 'a binary_tree * 'a binary_tree;;