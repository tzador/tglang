(* Function to calculate the factorial of a given number n *)
let rec factorial n =
  if n = 0 then (* Base case - factorial of 0 is 1 *)
    1
  else
    n * factorial (n - 1) (* Recursive call - multiply n with factorial of n-1 *)

(* Function to calculate the nth element in a Fibonacci sequence *)
let rec fibonacci n =
  match n with
  | 0 -> 0 (* Base case - first element in sequence is 0 *)
  | 1 -> 1 (* Base case - second element in sequence is 1 *)
  | n -> fibonacci(n-1) + fibonacci(n-2) (* Recursive call to calculate current element by adding previous two elements *)

(* Function to calculate the nth term in a geometric sequence *)
let rec geometric n r =
  match n with
  | 0 -> 1 (* Base case - first term in sequence is always 1 *)
  | n -> geometric(n-1) * r (* Recursive call to calculate current term by multiplying previous term with common ratio *)

(* Function to flatten a list of lists into a single list *)
let rec flatten lst =
  match lst with
  | [] -> [] (* Base case - empty list returns empty list *)
  | hd::tl -> hd @ flatten tl (* Recursive call to append head of current list to flattened tail of remaining lists *)

(* Function to check if a given number is prime *)
let is_prime n =
  let rec check_prime d =
    match d with
    | d when d * d > n -> true (* Base case - if d is greater than square root of n, then n must be prime *)
    | d when n mod d = 0 -> false (* Base case - if n is divisible by d, then n is not prime *)
    | d -> check_prime (d+1) (* Recursive call - check if n is divisible by d+1 *)

  check_prime 2 (* Start the recursive check from 2, since all numbers are divisible by 1 *)