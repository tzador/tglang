(* This is an example of a recursive function in OCAML *)
let rec fibonacci n = 
  match n with
  | 0 -> 0
  | 1 -> 1
  | n -> fibonacci (n - 1) + fibonacci (n - 2)

(* This is an example of a higher-order function using parameters and pattern matching *)
let rec map f lst = 
  match lst with
  | [] -> []
  | hd::tl -> (f hd) :: (map f tl)

(* This function calculates the factorial of a number *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n-1)

(* This function calculates the nth power of a number *)
let rec power n x =
  if n = 0 then 1 else x * power (n-1) x