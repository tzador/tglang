(* This function takes in a list of integers and returns the sum of all the numbers in the list *)
let rec sum_list list =
  match list with
  | [] -> 0 (* If the list is empty, return 0 *)
  | hd :: tl -> hd + sum_list tl (* Otherwise, add the first element to the sum of the rest of the list *)

(* This function takes in a string and an integer n, and returns a list of all substrings of length n in the string *)
let rec sub_strings str n =
  if n > String.length str then [] (* If n is larger than the string, return an empty list *)
  else if n = String.length str then [str] (* If n is equal to the string length, return the string *)
  else String.sub str 0 n :: sub_strings (String.sub str 1 (String.length str - 1)) n;; (* Otherwise, recursively create a list of substrings *)

(* This function takes in two lists of integers and merges them into a sorted list *)
let rec merge_lists list1 list2 =
  match (list1, list2) with
  | ([], list) | (list, []) -> list (* If either list is empty, return the other list *)
  | (hd1 :: tl1, hd2 :: tl2) -> (* Otherwise, compare the first elements and add them to the merged list *)
      if hd1 < hd2 then hd1 :: merge_lists tl1 list2
      else hd2 :: merge_lists list1 tl2

(* This function takes in a list of integers and sorts them in ascending order using the merge sort algorithm *)
let rec merge_sort list =
  match list with
  | [] -> [] (* If the list is empty or only has one element, return the list *)
  | [x] -> [x]
  | _ ->
      let length = List.length list in
      let left = List.take (length / 2) list in (* Divide the list into two equal parts *)
      let right = List.drop (length / 2) list in
      merge_lists (merge_sort left) (merge_sort right) (* Recursively merge and sort the divided lists *)