(* This function calculates the power of a number recursively *)
let rec power base exponent =
  if exponent = 0 then 1
  else if exponent < 0 then
     failwith "exponent cannot be negative"
  else
     base * power base (exponent - 1)

(* This function finds the factorial of a number recursively *)
let rec factorial num =
  if num = 0 then 1
  else if num < 0 then
     failwith "factorial only applicable to positive numbers"
  else
     num * factorial (num - 1)


(* This function implements Euclid's algorithm to find the greatest common divisor *)
let rec gcd a b =
  if b = 0 then a
  else gcd b (a mod b)

(* This function calculates the square root of a number using Newton's method *)
let rec square_root num =
  let guess = ref 1.0 in
  let epsilon = 0.00001 in
  while abs_float (!guess *. !guess -. num) > epsilon do
    guess := ((!guess +. num /. !guess) /. 2.0)
  done;
  !guess

(* This function merges two sorted lists into one sorted list *)
let rec merge lst1 lst2 =
  match (lst1, lst2) with
  | ([], lst) -> lst
  | (lst, []) -> lst
  | (hd1::tl1, hd2::tl2) ->
    if hd1 < hd2 then hd1::(merge tl1 lst2)
    else hd2::(merge lst1 tl2)

(* This function implements quicksort algorithm *)
let rec quicksort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | pivot::rest ->
    let less, greater = List.partition (fun x -> x < pivot) rest in
    (quicksort less) @ (pivot :: (quicksort greater))