(* This function takes in two lists and concatenates them. *)
let rec concat lst1 lst2 =
  match lst1 with
  | [] -> lst2 (* if first list is empty, return second list *)
  | head::tail -> head::(concat tail lst2) ;; (* otherwise, take head from first list and recurse on tail and second list *)

(* This function takes in a string and reverses it. *)
let rec reverse str =
  let len = String.length str in (* get length of string *)
  let rec build_reverse str i =
    if i = len then (* if at end of string, return empty string *)
      ""
    else
      (* otherwise, concatenate current character to reverse of remaining string *)
      str.[i] ^ (build_reverse str (i+1))
  in
  build_reverse str 0 ;; (* call helper function with initial index of 0 *)

(* This function takes in a list and removes duplicates. *)
let rec remove_duplicates lst =
  match lst with
  | [] -> [] (* if list is empty, return empty list *)
  | head::tail ->
    if List.mem head tail then
      remove_duplicates tail (* if current element is in rest of list, recurse on tail *)
    else
      head :: (remove_duplicates tail) ;; (* otherwise, add current element to new list and recurse on tail *)