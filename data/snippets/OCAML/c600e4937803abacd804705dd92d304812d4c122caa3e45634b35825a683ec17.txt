(* This is a comment in OCAML *)

(* Define a function that calculates the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1
  else n * factorial (n-1)

(* Define a function that checks if a given number is prime *)
let rec is_prime n =
  if n â‰¤ 1 then false
  else if n = 2 then true
  else
    let limit = int_of_float (sqrt (float_of_int n)) in
    let rec check_prime i =
      if i > limit then true
      else if n mod i = 0 then false
      else check_prime (i+1)
    in check_prime 2

(* Define a list of numbers *)
let numbers = [1; 3; 5; 7; 11; 13; 17; 19; 23; 29]

(* Use the List.map function to apply the factorial function to each number in the list *)
let factorials = List.map factorial numbers

(* Use the List.filter function to only keep prime numbers in the list *)
let primes = List.filter is_prime numbers

(* Print the results *)
print_string "Factorials: ";
List.iter (fun x -> print_int x; print_string " ") factorials;
print_newline();

print_string "Prime numbers: ";
List.iter (fun x -> print_int x; print_string " ") primes;
print_newline();