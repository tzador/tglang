(* This is a comment in OCAML *)

(* Define a function that takes in two integer inputs and returns their sum *)
let sum x y =
  x + y

(* Define a recursive function to calculate the factorial of a number *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n-1)

(* Define a list of strings *)
let names = ["Alice"; "Bob"; "Catherine"; "David"; "Emily"]

(* Define a higher-order function that iterates through the list and prints each name with an index *)
let print_names =
  List.iteri (fun i name -> print_endline ("Name #" ^ string_of_int i ^ " is " ^ name)) names

(* Define a record type for storing information about a person *)
type person = {
  name: string;
  age: int;
  occupation: string;
  has_car: bool;
}

(* Create instances of the person type *)
let alice = {
  name = "Alice";
  age = 30;
  occupation = "Software Engineer";
  has_car = true;
}

let bob = {
  name = "Bob";
  age = 35;
  occupation = "Data Scientist";
  has_car = false;
}

(* Define a function that checks if a person's occupation is in a given list of occupations *)
 let is_in_occupation occupations person =
  List.mem person.occupation occupations

(* Define a module for basic mathematical operations *)
module Math = struct
  (* Define a function to calculate the square of a number *)
  let square x =
    x * x

  (* Define a function to calculate the cube of a number *)
  let cube x =
    x * x * x

  (* Define a function to calculate the area of a circle given its radius *)
  let circle_area r =
    Float.pi *. r *. r
end

(* Use the Math module to calculate the area of a circle with radius 5 *)
let area = Math.circle_area 5.0