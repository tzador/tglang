let rec fib n = (* define a recursive function called fib with one parameter n *)
  match n with (* use pattern matching to check the value of n *)
  | 0 -> 0 (* if n is 0, return 0 *)
  | 1 -> 1 (* if n is 1, return 1 *)
  | _ -> fib (n-1) + fib (n-2) (* for any other n, call fib on n-1 and n-2 and add them *)

let rec fact n = (* define a recursive function called fact with one parameter n *)
  match n with (* use pattern matching to check the value of n *)
  | 0 -> 1 (* if n is 0, return 1 *)
  | _ -> n * fact (n-1) (* for any other n, call fact on n-1 and multiply it with n *)

let x = 5 (* define a variable x with value 5 *)

let y = ref 10 (* define a mutable variable y with value 10 *)
y := !y + 5;; (* update the value of y by adding 5 to its current value *)

module type MyType = sig (* define a module type called MyType *)
  val x : int (* declare a value x with type int *)
  val add : int -> int -> int (* declare a function add that takes two int parameters and returns an int *)
end

module MyModule : MyType = struct (* define a module called MyModule that implements MyType *)
  let x = 10 (* define the value x with value 10 *)
  let add a b = a + b (* define the function add to simply add two numbers *)
end

let result = MyModule.add 5 10;; (* call the add function from the MyModule module with parameters 5 and 10 and store the result in a variable called result *)