(* This is a function that returns the product of two numbers. *)
let mult x y = 
  (* Recursive helper function to multiply x by y. *)
  let rec mult_helper num count = 
    if count = 0 then num
    else mult_helper (num + x) (count - 1) 
  in mult_helper x y;;

(* This is a higher-order function that returns a new function which increments its input by a given increment value. *)
let increment_by inc = 
  fun (x: int) -> x + inc;;

(* This is a function that calculates the area of a circle given its radius. *)
let circle_area r = 
  let pi = 3.14159 in 
  pi *. r *. r;;

(* This is a function that takes in a list of integers and returns a new list with only the even numbers. *)
let even_list lst = 
  List.filter (fun n -> n mod 2 = 0) lst;;

(* This is a data type that represents a binary tree with integer values at each node. *)
type BinaryTree = 
  | Leaf
  | Node of int * BinaryTree * BinaryTree;;

(* This is a function that sums all the values in a binary tree. *)
let rec sum_tree tree = 
  match tree with
  | Leaf -> 0
  | Node (n, left, right) -> n + sum_tree left + sum_tree right;;

(* This is a function that merges two sorted lists into one sorted list. *)
let rec merge_lists lst1 lst2 = 
  match lst1, lst2 with
  | [], _ -> lst2
  | _, [] -> lst1
  | h1 :: t1, h2 :: t2 -> 
      if h1 <= h2 then h1 :: merge_lists t1 lst2
      else h2 :: merge_lists lst1 t2;;