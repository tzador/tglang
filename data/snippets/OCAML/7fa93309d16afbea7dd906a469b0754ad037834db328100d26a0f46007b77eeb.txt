(* Declaration of a binary tree data structure *)
type 'a binary_tree =
| Empty
| Node of 'a * 'a binary_tree * 'a binary_tree
(* Function to insert a value into a binary tree *)
let rec insert_tree value tree =
match tree with
| Empty -> Node(value, Empty, Empty)
| Node(v, left, right) ->
if value < v then Node(v, insert_tree value left, right)
else if value > v then Node(v, left, insert_tree value right)
else tree
(* Example usage *)
let example_tree = Node(10, Node(6, Node(4, Empty, Empty), Node(8, Empty, Empty)),
Node(15, Node(12, Empty, Empty), Node(18, Empty, Empty)))
let new_tree = insert_tree 7 example_tree
(* Output:
val example_tree : int binary_tree =
Node (10,
Node (6, Node (4, Empty, Empty), Node (8, Empty, Empty)),
Node (15, Node (12, Empty, Empty), Node (18, Empty, Empty)))
val new_tree : int binary_tree =
Node (10,
Node (6, Node (4, Empty, Empty), Node (8, Empty, Empty)),
Node (15, Node (12, Node (7, Empty, Empty), Empty), Node (18, Empty, Empty)))
*)