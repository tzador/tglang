(* This is a comment in OCAML *)
let rec fibonacci n =                        (* defining a recursive function *)
  match n with                               (* pattern matching *)
  | 0 -> 0                                   (* base case n = 0 *)
  | 1 -> 1                                   (* base case n = 1 *)
  | n -> fibonacci (n - 1) + fibonacci (n - 2)(* recursive case *)
;;

let rec power x y =                           (* defining a recursive function *)
  match y with                                (* pattern matching *)
  | 0 -> 1                                    (* base case y = 0 *)
  | n -> x * power x (y - 1)                  (* recursive case *)
;;

let rec euclid a b =                          (* defining a recursive function *)
  if b = 0 then a                             (* base case b = 0 *)
  else euclid b (a mod b)                     (* recursive case *)

let rec merge_sort lst =                      (* defining a recursive function *)
  let rec split lst =                         (* defining a recursive helper function *)
    match lst with                            (* pattern matching *)
    | [] -> [], []                            (* base case lst = empty *)
    | [x] -> [x], []                          (* base case lst has only 1 element *)
    | x :: y :: tl ->                         (* recursive case *)
        let left, right = split tl in         (* splitting the list into two parts *)
        x :: left, y :: right                 (* returning the split parts *)
  in
  match lst with                              (* pattern matching *)
  | [] -> []                                  (* base case lst = empty *)
  | [x] -> [x]                                (* base case lst has only 1 element *)
  | lst ->                                   (* recursive case *)
      let left, right = split lst in          (* splitting the list into two parts *)
      let left_sorted = merge_sort left in    (* recursively sorting left part *)
      let right_sorted = merge_sort right in  (* recursively sorting right part *)
      merge left_sorted right_sorted           (* merging the sorted parts *)
;;

let rec factorial n =                         (* defining a recursive function *)
  if n = 0 then 1 else                         (* base case n = 0 *)
  n * factorial (n - 1)                       (* recursive case *)
;;

let rec quicksort lst =                       (* defining a recursive function *)
  match lst with                              (* pattern matching *)
  | [] -> []                                  (* base case lst = empty *)
  | [x] -> [x]                                (* base case lst has only 1 element *)
  | x :: tl ->                                (* recursive case *)
      let smaller = List.filter (fun y -> y <= x) tl in (* creating a smaller list of elements <= x *)
      let larger = List.filter (fun y -> y > x) tl in   (* creating a larger list of elements > x *)
      quicksort smaller @ [x] @ quicksort larger (* recursively sorting and merging the parts *)
;;                               

let rec binomial_coefficient n k =            (* defining a recursive function *)
  if k = 0 || n = k then                      (* base cases *)
    1                                         
  else
    binomial_coefficient (n-1) (k-1) + binomial_coefficient (n-1) k (* recursive case *)
;;