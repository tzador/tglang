(** Factorial function using tail recursion *)
let rec factorial n acc =
  if n = 0 then acc
  else factorial (n-1) (n*acc)

(** Calculates the sum of integers up to n using pattern matching *)
let rec sum n =
  match n with
  | 0 -> 0
  | _ -> n + sum (n-1)

(** A higher-order function that takes in a function f and applies it to a list *)
let rec map f a_list =
  match a_list with
  | [] -> []
  | h::t -> (f h)::(map f t)

(** A function that zips two lists, applying a function to their corresponding elements *)
let rec zip_with f a b =
  match (a, b) with
  | ([], []) -> []
  | (ah::at, bh::bt) -> (f ah bh)::(zip_with f at bt)
  | _ -> raise (Invalid_argument "Lists must be of same length!")

(** An example of using the zip_with function *)
let sum_of_squares list1 list2 =
  let square x = x * x in
  let square_sum = zip_with (fun x y -> x + y) (map square list1) (map square list2) in
  sum square_sum