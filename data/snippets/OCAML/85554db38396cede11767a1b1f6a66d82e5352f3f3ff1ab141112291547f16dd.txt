(* This is a function to calculate the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n - 1)
;;

(* This is a function to calculate the power of a given number *)
let rec power x y =
  if y = 0 then 1
  else x * power x (y - 1)
;;

(* This is a function to calculate the maximum number in a list *)
let rec max_list = function
  | [] -> failwith "empty list"
  | [x] -> x
  | x::xs -> max x (max_list xs)
;;

(* This is a function to calculate the nth Fibonacci number *)
let rec fib n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fib(n-1) + fib(n-2)
;;

(* This is a function to calculate the greatest common divisor of two numbers *)
let rec gcd a b =
  if b = 0 then a else gcd b (a mod b)
;;

(* This is a function to reverse a list using tail recursion *)
let rec rev list =
  let rec aux acc = function
    | [] -> acc
    | h :: t -> aux (h :: acc) t
  in
  aux [] list
;;

(* This is a function to evaluate a simple algebraic expression *)
let rec eval expr =
  match expr with
  | Var x -> x
  | Const n -> n
  | BinOp (op, e1, e2) ->
      let v1 = eval e1 and v2 = eval e2 in
      apply_op op v1 v2