(* This is a function that takes in a list and returns a sorted version of the list using merge sort algorithm *)
(* merge is a helper function that merges two sorted lists into one sorted list*)
let rec merge_list list1 list2 = 
  match list1, list2 with
  | [], l2 -> l2 (* if list1 is empty, return list2 *)
  | l1, [] -> l1 (* if list2 is empty, return list1 *)
  | h1::t1, h2::t2 ->
    if h1 <= h2 then h1::(merge_list t1 list2) (* compare the first elements of each list, add the smaller one to the merged list and recursively call merge_list on the remaining elements *)
    else h2::(merge_list list1 t2)

(* merge_sort is a recursive function that divides a list into two sublists, sorts them using merge_list function and then merges them back into one sorted list *)
let rec merge_sort list = 
  match list with
  | [] -> [] (* if list is empty, return empty list *)
  | [x] -> [x] (* if list has one element, return that element *)
  | _ ->
    let divider = (List.length list) / 2 in (* find the middle index of the list *)
    let left = List.sub list 0 divider in (* divide the list into left sublist *)
    let right = List.sub list divider (List.length list-divider) in (* divide the list into right sublist *)
    merge_list (merge_sort left) (merge_sort right) (* recursively call merge_sort on left and right sublist, and merge their sorted results using merge_list *)

(* Running the code *)
let unsorted_list = [3;17;5;2;8;1;10] (* create an unsorted list *)
let sorted_list = merge_sort unsorted_list (* use merge_sort function to get a sorted list *)
in sorted_list;; (* print the sorted list *)