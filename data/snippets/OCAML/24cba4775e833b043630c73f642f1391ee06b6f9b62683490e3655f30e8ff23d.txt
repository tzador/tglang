(* This is a function to calculate the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1 (*base case*)
  else n * factorial (n-1) (*recursive call*)

(* This is a function to calculate the nth term in the Fibonacci sequence *)
let rec fibonacci n =
  if n = 0 then 0 (*base cases*)
  else if n = 1 then 1
  else fibonacci (n-1) + fibonacci (n-2) (*recursive call*)

(* This is a function to check if a given number is prime *)
let is_prime n =
  let rec check_prime d =
    if d = n then true (*reached end, number is prime*)
    else if n mod d = 0 then false (*number is divisible, not prime*)
    else check_prime (d+1) (*increment divisor*)
  in
  if n < 2 then false (*numbers less than 2 are not prime*)
  else check_prime 2 (*start checking at divisor of 2*)

(* This is a function to convert a string to uppercase *)
let uppercase s =
  let rec convert i =
    if i >= String.length s then s (*reached end of string*)
    else
      let current_char = String.get s i in (*get current character*)
      if current_char >= 'a' && current_char <= 'z' then (*check if lowercase*)
        let converted_char = Char.uppercase_ascii current_char in (*convert to uppercase*)
        String.set s i converted_char; (*update string with new character*)
        convert (i+1) (*recurse through rest of string*)
      else convert (i+1) (*character is already uppercase, move to next*)
  in
  convert 0 (*start at index 0*)

(* This is a function to calculate the sum of a list of numbers *)
let rec sum_list list =
  match list with
  | [] -> 0 (*empty list*)
  | x::xs -> x + sum_list xs (*add current element to sum of rest of list*)

(* This is a function to remove duplicates from a list *)
let rec remove_duplicates list =
  match list with
  | [] -> [] (*empty list*)
  | x::xs -> x :: (remove_duplicates (List.filter (fun y -> y <> x) xs)) (*add current element to filtered list of rest of list*)