(* This is a function that reverses a list using recursive calls *)
let rec reverse_list lst =
  match lst with
  (* Base case: return empty list if list is empty *)
  | [] -> []
  (* Recursive case: concatenate the first element 
  with the result of reversing the rest of the list *)
  | hd :: tl -> (reverse_list tl) @ [hd]

(* This is a function that calculates the factorial of a number *)
let rec factorial n =
  match n with
  (* Base case: return 1 if n is 0 or 1 *)
  | 0 | 1 -> 1
  (* Recursive case: multiply n with the factorial of n-1 *)
  | _ -> n * factorial (n-1)

(* This is an example of using the functions *)
let list = [1; 2; 3; 4; 5]
let reversed = reverse_list list
let result = factorial 5

(* Print the results *)
print_string "Reversed list: ";
List.iter (fun x -> print_int x; print_string " ") reversed;
print_newline ();
print_string "Factorial of 5: ";
print_int result;