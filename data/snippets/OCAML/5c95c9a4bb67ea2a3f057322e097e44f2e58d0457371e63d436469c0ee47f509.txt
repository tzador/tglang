(* A function that takes in a list of integers and returns a new list *)
let rec filter_list lst =
  match lst with
  |[] -> []
  |h::t -> if (h mod 2) == 0 then h::(filter_list t) else filter_list t
  
(* A function that calculates the factorial of a given number *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n-1)
  
(* A function that checks if a given string is a palindrome *)
let is_palindrome str =
  let rev_str = String.rev str in
  if str = rev_str then true else false
  
(* A function that merges two lists and removes duplicates *)
let rec merge_lists lst1 lst2 =
  match (lst1, lst2) with
  |([], []) -> []
  |([], h::t) -> h::t
  |(h::t, []) -> h::t
  |(h::t, h'::t') -> if h = h' then merge_lists t lst2 else h::(merge_lists t lst2)
  
(* A function that maps a given list to another list using a specified function *)
let rec map_list lst f =
  match lst with
  |[] -> []
  |h::t -> (f h)::(map_list t f)