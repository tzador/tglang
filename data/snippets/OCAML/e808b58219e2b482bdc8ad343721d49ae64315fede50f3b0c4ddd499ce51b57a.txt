(** A module representing a binary tree *)
module BinaryTree = struct

  (** Defines the type of data stored in each node of the tree *)
  type 'a tree = 
    | EmptyTree
    | Node of 'a * 'a tree * 'a tree

  (** Returns the number of nodes in a tree *)
  let rec size tree = 
    match tree with
    | EmptyTree -> 0
    | Node (_, left, right) -> 1 + size left + size right

  (** Returns a list containing the values of the tree in in-order traversal *)
  let rec in_order tree = 
    match tree with
    | EmptyTree -> []
    | Node (value, left, right) -> (in_order left) @ [value] @ (in_order right)

  (** Returns a boolean value indicating if a given value is present in the tree *)
  let rec contains tree value = 
    match tree with
    | EmptyTree -> false
    | Node (v, left, right) -> if v = value then true else contains left value || contains right value

  (** Inserts a value into the tree, maintaining the binary search tree property *)
  let rec insert tree value = 
    match tree with
    | EmptyTree -> Node (value, EmptyTree, EmptyTree)
    | Node (v, left, right) -> 
      if value < v then 
        Node (v, insert left value, right)
      else if value > v then
        Node (v, left, insert right value)
      else
        tree

  (** Removes a value from the tree, maintaining the binary search tree property *)
  let rec remove tree value =
    match tree with
    | EmptyTree -> EmptyTree
    | Node (v, left, right) ->
      if v = value then
        match (left, right) with
        | (EmptyTree, EmptyTree) -> EmptyTree
        | (Node (lv, _, _), EmptyTree) -> left
        | (EmptyTree, Node (rv, _, _)) -> right
        | (Node (lv, _, _), Node (rv, _, _)) -> 
          let min = find_min right in
          Node (min, left, remove right min)
      else if value < v then
        Node (v, remove left value, right)
      else
        Node (v, left, remove right value)

  (** Finds the minimum value in a non-empty tree *)
  and find_min tree = 
    match tree with
    | EmptyTree -> failwith "Unexpected empty tree in find_min"
    | Node (value, EmptyTree, _) -> value
    | Node (_, left, _) -> find_min left

end

(** Example usage *)
let tree = BinaryTree.insert (BinaryTree.insert (BinaryTree.EmptyTree) 5) 1
let size = BinaryTree.size tree (* returns 2 *)
let contains = BinaryTree.contains tree 5 (* returns true *)
let tree_in_order = BinaryTree.in_order tree (* returns [1;5] *)