(* Example of a higher-order function in OCAML *)

(* Defining a function that takes in an integer and a function as parameters *)
let apply_function (n: int) (f: int -> int) : int =
  f n;;


(* Defining a function that returns a function *)
let counter (increment: int) : (int -> int) =
  let count = ref 0 in
  (fun (n: int) -> count := !count + increment; n + !count);;


(* Using the apply_function function with an anonymous function *)
let result = apply_function 5 (fun x -> x * 2);;

(* Output: 10 *)

(* Using the counter function to create a function that increments by 2 *)
let increment_by_2 = counter 2;;

(* Using the increment_by_2 function to increment a value by 2 *)
let new_value = increment_by_2 5;;

(* Output: 7 *)

(* Using the increment_by_2 function to increment a value by 2 again *)
let newer_value = increment_by_2 new_value;;

(* Output: 9 *)