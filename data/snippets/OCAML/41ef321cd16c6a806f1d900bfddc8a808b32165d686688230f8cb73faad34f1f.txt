(* This is a recursive function that calculates the nth power of a number *)
let rec power n x =
    match n with
    | 0 -> 1 (* base case, any number to the 0 power is 1 *)
    | 1 -> x (* base case, any number to the 1 power is itself *)
    | n -> match n mod 2 with
           | 0 -> let temp = power (n/2) x in temp*temp (* if n is even, recursively calculate half of n and multiply its result by itself *)
           | 1 -> let temp = power (n/2) x in temp*temp*x (* if n is odd, recursively calculate half of n and multiply its result by itself, then multiply by x *)