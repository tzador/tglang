(*This is a function to calculate the nth Fibonacci number*)
let rec fibonacci n =
(*Base case: if n is 0 or 1, return n*)
  if n = 0 || n = 1 then n
  else
  (*Otherwise, calculate the sum of the previous two Fibonacci numbers*)
    let n1 = fibonacci(n-1) in
    let n2 = fibonacci(n-2) in
    n1 + n2

(*Function to calculate the factorial of a number*)
let rec factorial n =
(*Base case: if n is 0, return 1*)
  if n = 0 then 1
  else
  (*Otherwise, multiply n by the factorial of n-1*)
    n * factorial(n-1)

(*A recursive function to find the maximum element in a list*)
let rec max_list = function
(*Base case: if the list is empty, return None*)
  | [] -> None
  | [x] -> Some x
  | x::xs ->
  (*Otherwise, compare the first element to the maximum of the rest of the list*)
    match max_list xs with
    | None -> None
    | Some m -> if x > m then Some x else Some m;;