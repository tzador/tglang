(* Example of a function that computes the nth Fibonacci number *)
let rec fibonacci(n) =
    if n < 2 then
        n
    else
        fibonacci(n-1) + fibonacci(n-2)

(* Example of a function that inserts an element into a sorted list *)
let rec insert elem lst =
    match lst with
    | [] -> [elem]
    | hd::tl ->
        if elem <= hd then
            elem::lst
        else
            hd::(insert elem tl)

(* Example of a function that merges two sorted lists *)
let rec merge lst1 lst2 =
    match lst1, lst2 with
    | [], _ -> lst2
    | _, [] -> lst1
    | hd1::tl1, hd2::tl2 ->
        if hd1 <= hd2 then
            hd1::(merge tl1 lst2)
        else
            hd2::(merge lst1 tl2)

(* Example of a function that sorts a list using the merge sort algorithm *)
let rec merge_sort lst =
    match lst with
    | [] -> []
    | [x] -> [x]
    | lst ->
        let left = List.length lst / 2 in
        let right = List.length lst - left in
        let rec merge lst1 lst2 =
            match lst1, lst2 with
            | [], _ -> lst2
            | _, [] -> lst1
            | hd1::tl1, hd2::tl2 ->
                if hd1 <= hd2 then
                    hd1::(merge tl1 lst2)
                else
                    hd2::(merge lst1 tl2) in
        let left_sorted = merge_sort (List.sub lst 0 left) in
        let right_sorted = merge_sort (List.sub lst left right) in
        merge left_sorted right_sorted