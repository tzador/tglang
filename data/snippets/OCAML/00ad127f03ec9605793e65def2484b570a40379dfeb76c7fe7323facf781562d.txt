(* Define the sum function *)
let rec sum = fun lst ->
  match lst with
  | [] -> 0 (* Base case *)
  | hd::tl -> hd + sum tl (* Recursive case *)

(* Define the map function *)
let rec map = fun f lst ->
  match lst with
  | [] -> [] (* Base case *)
  | hd::tl -> (f hd)::(map f tl) (* Recursive case *)

(* Define the fold_left function *)
let rec fold_left = fun f acc lst ->
  match lst with
  | [] -> acc (* Base case *)
  | hd::tl -> fold_left f (f acc hd) tl (* Recursive case *)

(* Define a list of numbers *)
let nums = [1;2;3;4;5]

(* Calculate the sum using fold_left *)
fold_left (+) 0 nums