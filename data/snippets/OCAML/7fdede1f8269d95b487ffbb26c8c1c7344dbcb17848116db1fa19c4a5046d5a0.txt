(**
 * [my_lambda] is a higher order function that takes in an integer [n]
 * and returns a lambda function that multiplies a number by [n].
 * @param n The multiplier.
 * @return A lambda function that multiplies a number by [n].
 *)

let my_lambda n = fun x -> n * x;; (* Snippet creates a lambda function *)

(* Example usage *)
let multiply_by_3 = my_lambda 3;; (* Creates a function that multiplies number by 3*)
multiply_by_3 5;; (* result = 15 *)
multiply_by_3 10;; (* result = 30 *)

(* Another example with a different multiplier *)
let multiply_by_2 = my_lambda 2;; (* Creates a function that multiplies number by 2*)
multiply_by_2 7;; (* result = 14 *)
multiply_by_2 9;; (* result = 18 *)

(* Explanation of what is happening in the code snippet:
This code snippet showcases the use of higher order functions and lambda functions in OCAML. The [my_lambda] function takes in an integer [n] and returns a lambda function that multiplies a number by [n]. This is achieved by using the keyword "fun" to create a lambda function and then using the [n] variable as a multiplier. This snippet also demonstrates how the returned lambda function can be stored in a variable and then used multiple times with different numbers. This is a powerful feature of functional programming languages like OCAML, where functions can be treated as first-class citizens and passed around as arguments or returned as outputs. By using higher order functions and lambda functions, we can write concise and flexible code that can easily adapt to different situations and inputs. This code snippet serves as a simple but effective example of the power and versatility of functional programming in OCAML. *)