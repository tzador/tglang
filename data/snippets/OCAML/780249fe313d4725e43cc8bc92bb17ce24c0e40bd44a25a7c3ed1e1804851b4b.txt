type expression = 
| Int of int
| Add of expression * expression 
| Subtract of expression * expression 
| Multiply of expression * expression

(* This is a simple datatype in OCAML that represents mathematical expressions.
   It can be either an integer, or a combination of expressions using the Add, Subtract,
   or Multiply constructors. *)

let rec eval expr = 
   match expr with
   | Int n -> n
   | Add (e1, e2) -> (eval e1) + (eval e2)
   | Subtract (e1, e2) -> (eval e1) - (eval e2)
   | Multiply (e1, e2) -> (eval e1) * (eval e2)

(* This function takes in an expression and recursively evaluates it to its final result,
   taking into account the different cases for each constructor. *)

let expr1 = Add (Int 5, Int 10)
let result = eval expr1
(* Result is 15 *) 

(* This snippet demonstrates how to use the datatype and the evaluation function to
   calculate the result of a simple expression (5 + 10) and store it in a variable named
   "result". The result is then printed, which in this case would be 15.  *)