(* This is a recursive function that calculates the factorial of a number *)
(* Input: x (an integer value) *)
(* Output: the factorial of x *)
let rec factorial x =
  match x with (* matching the input value *)
  | 0 -> 1 (* if x is equal to 0, return 1 *)
  | n -> n * factorial (n - 1) (* if not, multiply n with the factorial of n - 1 *)

(* This is a function that calculates the summation of a list of numbers *)
(* Input: num_list (a list of numbers) *)
(* Output: the summation of the numbers in the list *)
let rec sum_list num_list =
  match num_list with (* matching the list *)
  | [] -> 0 (* if the list is empty, return 0 *)
  | hd::tl -> hd + sum_list tl (* otherwise, add the head of the list with the summation of the rest of the list *)

(* This is a function that calculates the fibonacci sequence up to a given limit *)
(* Input: limit (an integer value) *)
(* Output: a list of fibonacci numbers up to the limit *)
let rec fibonacci limit =
  match limit with (* matching the limit *)
  | 0 -> [] (* if limit is 0, return an empty list *)
  | 1 -> [1] (* if limit is 1, return a list with only 1 *)
  | _ -> (* if not, calculate the fibonacci sequence *)
    let rec fibonacci_helper n a b result =
      match n with
      | 0 -> result
      | _ -> fibonacci_helper (n - 1) (a + b) a (result @ [a + b]) in
    1 :: fibonacci_helper (limit - 2) 1 1 [] (* return a list with 1 as the first element and the fibonacci sequence calculated by the helper function *)

 (*----- OUTPUT -----*)
 (* `factorial 5;;` *)
 (* `val factorial: int -> int = <fun>` *)
 (* `factorial 5;;` *)
 (* `- : int = 120` *)
 (* `sum_list [1;2;3;4;5];;` *)
 (* `val sum_list: int list -> int = <fun>` *)
 (* `sum_list [1;2;3;4;5];;` *)
 (* `- : int = 15` *)
 (* `fibonacci 10;;` *)
 (* `val fibonacci: int -> int list = <fun>` *)
 (* `fibonacci 10;;` *)
 (* `- : int list = [1; 1; 2; 3; 5; 8; 13; 21; 34; 55]` *)