(* This is a function that takes in two integers and returns the sum of their squares. 
The function is generalizable, it can accept any data type that supports addition. *)

let sumSquares (x : int) (y : int) : int = 
  let square (a : int) : int = a * a in 
  sum (square x) (square y)

(* Here, we define the generic 'sum' function that can be used with any data type 
that supports addition. *)

let rec sum (x : 'a) (y : 'a) : 'a = 
  match x with
  | 0 -> y
  | x -> sum (x-1) (y+1)

(* Calling the function with integers '2' and '3' as arguments. *)

sumSquares 2 3

(* Output: 13 *)