(* An example module with a 'compare' function and a 'sort' function. *)

module Example : sig

  (* A type representing a person with a name and age. *)

  type person = {
    name : string;
    age : int;
  }

  (* A compare function for comparing two persons by age in ascending order. *)

  val compare : person -> person -> int

  (* A function for sorting a list of persons using the compare function. *)

  val sort : person list -> person list

end = struct

  (* Implementation of the compare function. *)

  let compare (person1 : person) (person2 : person) : int =
    if person1.age < person2.age then
      -1
    else if person1.age == person2.age then
      0
    else
      1

  (* Implementation of the sort function. *)

  let sort (persons : person list) : person list =
    List.sort compare persons

end

(* An example list of persons. *)

let persons = [
  { name = "John"; age = 25 };
  { name = "Jane"; age = 30 };
  { name = "Bob"; age = 20 }
]

(* Sorting the list using the sort function from the Example module. *)

let sorted_persons = Example.sort persons