(* This is a function that calculates the factorial of a given number *)
let rec factorial n =
  match n with
  | 0 -> 1
  | _ -> n * factorial (n - 1)
  
(* This is a function that calculates the Fibonacci sequence up to a given number *)
let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci(n-1) + fibonacci(n-2)

(* This is a function that checks if a number is prime *)
let is_prime n =
  let rec is_divisible_by m x =
    if m = 1 then false 
    else if x = m then true 
    else if x mod m = 0 then false 
    else is_divisible_by (m-1) x in
  if n = 1 then false 
  else is_divisible_by (n-1) n

(* This is a function that finds all prime numbers up to a given number *)
let rec sieve n =
  if n = 2 then [2] 
  else 
    let prev_list = sieve (n-1) in
    if is_prime n then n :: prev_list 
    else prev_list

(* This is a function that calculates the nth prime number *)
let nth_prime n =
  let rec find_nth_prime m count =
    if count = n then m 
    else if is_prime m then find_nth_prime (m+1) (count+1) 
    else find_nth_prime (m+1) count in
  find_nth_prime 2 1

(* This is a function that calculates the sum of squares of a list of numbers *)
let rec sum_of_squares list =
  match list with
  | [] -> 0
  | h::t -> h*h + sum_of_squares t
  
(* This is a function that calculates the sum of cubes of a list of numbers *)
let rec sum_of_cubes list =
  match list with
  | [] -> 0
  | h::t -> h*h*h + sum_of_cubes t
  
(* This is a function that calculates the sum of the first n cubes *)
let sum_of_n_cubes n =
  let rec sum m =
    let rec sum_helper x =
      if x > 0 then x*x*x + sum_helper (x-1) 
      else 0 in
    if m > 0 then sum_helper m + sum (m-1) 
    else 0 in
  sum n
  
(* This is a function that sorts a list of numbers using the quicksort algorithm *)
let rec quicksort list =
  match list with
  | [] -> []
  | h::t ->
      let lesser, greater = List.partition ((>) h) t in
      quicksort lesser @ (h :: quicksort greater)