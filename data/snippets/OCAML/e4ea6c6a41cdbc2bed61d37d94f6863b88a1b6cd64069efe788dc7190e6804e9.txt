(* Function to calculate the sum of two given integers *)
let sum x y = x + y;;

(* Function to calculate the factorial of a given integer *)
let rec factorial n = if n = 0 then 1 else n * factorial (n-1);;

(* Function that takes in a list of integers and returns their average *)
let average lst = 
  let sum = List.fold_left (+) 0 lst in
  let count = List.length lst in
  sum / count;;

(* Type definition for a custom binary tree data structure *)
type 'a binTree = 
  | Leaf 
  | Node of 'a * 'a binTree * 'a binTree;;

(* Function to insert an element into a binary tree in the correct position *)
let rec insert x tree = 
  match tree with
  | Leaf -> Node (x, Leaf, Leaf)
  | Node (data, left, right) ->
    if x < data then
      Node (data, insert x left, right)
    else
      Node (data, left, insert x right);;

(* Function to remove an element from a binary tree *)
let rec remove x tree =
  match tree with
  | Leaf -> Leaf
  | Node (data, left, right) ->
    if x = data then
      match (left, right) with
      | (Leaf, Leaf) -> Leaf
      | (Leaf, t) -> t
      | (t, Leaf) -> t
      | (t1, t2) -> 
        let rec findMin = function
          | Leaf -> raise Not_found
          | Node (x, Leaf, _) -> x
          | Node (x, left, _) -> findMin left in
        let min = findMin t2 in
        Node(min, t1, remove min t2)
    else if x < data then
      Node (data, remove x left, right)
    else
      Node (data, left, remove x right);;

(* Function to perform a depth-first search on a binary tree *)
let rec dfs tree = 
  match tree with
  | Leaf -> []
  | Node (data, left, right) -> 
    data :: ((dfs left) @ (dfs right));;

(* Function to perform a breadth-first search on a binary tree *)
let bfs tree =
  let rec enqueue queue = function
    | Leaf -> queue
    | Node (data, left, right) -> data :: (enqueue (enqueue queue right) left) in
  let rec dequeue result = function
    | [] -> List.rev result
    | hd :: tl -> dequeue (hd :: result) tl in
  dequeue [] (enqueue [] tree);;