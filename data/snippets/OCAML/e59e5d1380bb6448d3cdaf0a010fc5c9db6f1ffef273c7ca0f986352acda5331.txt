(* This is OCaml code to find the nth Fibonacci number using dynamic programming *)

(* Recursive function that calculates the nth Fibonacci number *)
let rec fibonacci n =
    if n <= 1 then n
    else fibonacci (n-1) + fibonacci (n-2)

(* Dynamic programming function that uses memoization *)
let rec fib_dp n =
    let memo = Array.make (n+1) 0 in
    let rec aux n =
        if n <= 1 then n
        else if memo.(n) <> 0 then memo.(n)
        else
            let result = aux (n-1) + aux (n-2) in
            memo.(n) <- result;
            result
    in
    aux n

(* Time complexity: O(n) due to memoization *)

(* Example: finding the 10th Fibonacci number *)
let result = fib_dp 10

(* Output: 55 *)