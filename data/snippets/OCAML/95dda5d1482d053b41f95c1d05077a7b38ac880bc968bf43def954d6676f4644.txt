(* This code snippet implements a binary search tree data structure in OCAML *)

(* Defining the binary tree type *)
type 'a binary_tree =
  | Leaf
  | Node of 'a * 'a binary_tree * 'a binary_tree

(* Inserting a new element into the tree *)
let rec insert value tree =
  match tree with
  | Leaf -> Node (value, Leaf, Leaf)
  | Node (v, left, right) when value < v -> Node(v, insert value left, right)
  | Node (v, left, right) when value > v -> Node(v, left, insert value right)
  | _ -> tree

(* Finding an element in the tree *)
let rec find value tree =
  match tree with
  | Leaf -> false
  | Node (v, left, right) when value < v -> find value left
  | Node (v, left, right) when value > v -> find value right
  | Node (v, _, _) -> v = value

(* Removing an element from the tree *)
let rec remove value tree =
  match tree with
  | Leaf -> Leaf
  | Node (v, left, right) when value < v -> Node(v, remove value left, right)
  | Node (v, left, right) when value > v -> Node(v, left, remove value right)
  | Node (v, Leaf, right) -> right
  | Node (v, left, Leaf) -> left
  | Node (v, left, right) ->
    let min = find_min right in
    Node(min, left, remove min right)
and find_min = function
  | Leaf -> failwith "Empty tree"
  | Node (v, Leaf, _) -> v
  | Node (v, left, _) -> find_min left

(* Printing the tree in an inorder traversal *)
let rec print_tree tree =
  match tree with
  | Leaf -> ()
  | Node (v, left, right) ->
    print_tree left;
    Printf.printf "%d " v;
    print_tree right

(* Example usage *)
let tree = insert 5 (Node (3, Node (1, Leaf, Leaf), Node (4, Leaf, Leaf)))
let () = print_endline "Initial tree:";
let () = print_tree tree;
let () = print_endline "\nInserting 6:";
let tree = insert 6 tree;
let () = print_tree tree;
let () = print_endline "\nFinding 5:";
let found = find 5 tree;
let () =
  if found then
     print_endline "Element found!"
  else
     print_endline "Element not found!";
let () = print_endline "\nRemoving 4:";
let tree = remove 4 tree;
let () = print_tree tree;

(* Output:
Initial tree:
1 3 4 5
Inserting 6:
1 3 4 5 6
Finding 5:
Element found!
Removing 4:
1 3 5 6 *)