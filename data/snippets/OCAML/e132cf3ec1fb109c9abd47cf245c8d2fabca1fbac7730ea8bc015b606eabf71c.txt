(* This is a function that calculates the nth fibonacci number using recursion *)

(* n: the index of the fibonacci number to be calculated *)
(* current: the current fibonacci number being calculated *)
(* previous: the previous fibonacci number *)
let rec fibonacci n current previous = 
  if n = 0 then previous
  else fibonacci (n-1) (current + previous) current

(* This is a function that calculates the factorial of a given number using tail recursion *)

(* n: the number to calculate the factorial of *)
(* acc: the accumulator variable to store the product of the previous number *)
let rec factorial n acc = 
  if n = 1 then acc 
  else factorial (n-1) (n*acc) 

(* This is a function that checks if a given number is prime *)

(* n: the number to check *)
(* i: the current number being checked for divisibility *)
let is_prime n =
  let rec check_divisor n i =
    if i*i > n then true
    else if n mod i = 0 then false
    else check_divisor n (i+1)
  in
  if n < 2 then false
  else check_divisor n 2

(* This is a function that checks if a given string is a valid palindrome *)

(* s: the string to check *)
(* start: the starting index of the string *)
(* end: the ending index of the string *)
let rec is_palindrome s start end = 
    if start >= end then true
    else if String.get s start <> String.get s end then false
    else is_palindrome s (start + 1) (end - 1)

(* This is a function that implements quicksort on a given list *)

(* lst: the list to be sorted *)
let rec quicksort lst =
  let rec partition left right pivot =
    match right with
    | [] -> (List.rev left) @ [pivot]
    | h::t -> if h <= pivot then partition (h::left) t pivot
              else partition left t pivot
  in
  match lst with
  | [] -> []
  | pivot::tail -> let (less, greater) = partition [] tail pivot in
                   (quicksort less) @ [pivot] @ (quicksort greater)

(* This function creates a binary search tree and inserts data into it *)

(* n: the number of nodes in the tree *)
let rec create_bst n =
  let rec insert node value =
    if value < node.data then
      match node.left with
      | None -> node.left <- Some (create_node value)
      | Some left -> insert left value
    else
      match node.right with
      | None -> node.right <- Some (create_node value)
      | Some right -> insert right value
  and create_node value = 
    { data = value; left = None; right = None }
  in
  match n with
  | 0 -> None
  | _ -> 
    let tree = create_node (Random.int 100) in 
      for i = 1 to (n-1) do
        insert tree (Random.int 100)
      done;
      Some tree