(* This code snippet is written in OCAML. *)

(* Define a function, called "merge", that takes in two sorted lists, 
lst1 and lst2, and returns a single sorted list containing elements from 
both lists. *)

let rec merge lst1 lst2 =

  (* Define a helper function, called "merge_helper", that takes in three arguments, 
  lst, acc, and compare, and merges the elements of the two lists in a sorted manner. *)

  let rec merge_helper lst acc compare =
    match lst with
    | [] -> acc
    | [x] -> x::acc
    | x::xs ->
        let rec split lst acc i =
          match lst, i with
          | [],_ -> acc, []
          | y::ys, 0 -> (List.rev (y::acc)), ys
          | y::ys, _ -> split ys (y::acc) (i-1) in
        let rec inv_split acc lst =
          match acc with
          | [] -> lst
          | y::ys -> inv_split (y::lst) ys in
        let y, ys = split acc [] (compare x (List.hd acc)) in
          merge_helper xs (inv_split (x::y) ys) compare in

  (* Use the "merge_helper" function to merge the two given lists in a sorted manner. *)

  merge_helper lst1 lst2 compare

(* Define a function, called "compare", that takes in two elements and compares them. *)

let compare a b =
  if a <= b then 0 else 1

(* Define a function, called "sort", that takes in a list and sorts it using the "merge" function. *)

let rec sort lst =
  match lst with
  | [] -> []
  | [x] -> [x]
  | xs ->
      let rec split lst left len =
        match lst, len with
        | [],_ -> left, []
        | y::ys, 0 -> List.rev left, lst
        | y::ys, _ -> split ys (y::left) (len - 1) in
      let left, right = split lst [] (List.length lst / 2) in
        merge (sort left) (sort right)

(* Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] *)