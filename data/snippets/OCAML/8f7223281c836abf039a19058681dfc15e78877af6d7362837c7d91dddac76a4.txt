let rec quicksort lst =                     // creates a function `quicksort` that takes in a list
  match lst with                            // `match` statement to pattern match
  | [] -> []                                // if list is empty, return empty list
  | [x] -> [x]                              // if list has only one element, return list
  | pivot::rest ->                          // pattern match for first element and remaining list
    let lesser = List.filter ((>) pivot) rest    // filters sublist by elements greater than pivot
    and greater = List.filter (fun e -> e <= pivot) rest  // filters sublist by elements lesser than or equal to pivot
    in quicksort lesser @ [pivot] @ quicksort greater  // recursively calls quicksort on lesser sublist and concatenate with pivot and greater sublist