(* This code snippet uses functional programming techniques to generate a list of Fibonacci numbers *)
let rec fib n = (* Define a recursive function to calculate Fibonacci numbers *)
  if n <= 1 then (* Base case: first two Fibonacci numbers are 0 and 1 *)
    n (* Return n, which is either 0 or 1 *)
  else (* Otherwise, calculate the sum of the previous two Fibonacci numbers *)
    fib (n - 1) + fib (n - 2)

let rec fibonacci_list n = (* Define a recursive function to generate a list of Fibonacci numbers *)
  match n with (* Match n with different conditions to determine the output *)
  | 0 -> [] (* If n is 0, return an empty list *)
  | 1 -> [0] (* If n is 1, return a list with just 0 *)
  | n -> fibonacci_list (n - 1) @ [fib n] (* Otherwise, recursively generate the previous Fibonacci numbers and add the current one to the end, using the @ operator to concatenate lists *)

let n = 10 (* Set a variable n to the desired number of Fibonacci numbers to generate *)
let fibonacci_numbers = fibonacci_list n (* Call the fibonacci_list function with n as the input *)
in fibonacci_numbers (* Print the list of Fibonacci numbers *)