(* A function that calculates the factorial of a given integer n using a recursive approach *)
let rec factorial n =
  if n = 0 then 1 (* base case: factorial of 0 is 1 *)
  else n * factorial (n - 1) (* recursive case: factorial of n is n multiplied by factorial of n-1 *)

(* A function that calculates the nth Fibonacci number using a tail recursive approach *)
let fibonacci n =
  let rec fib_helper n acc1 acc2 =
    if n = 0 then acc1 (* base case: n = 0, return the first fibonacci number *)
    else if n = 1 then acc2 (* base case: n = 1, return the second fibonacci number *)
    else fib_helper (n-1) acc2 (acc1+acc2) (* keep recursively calculating fib(n-1) and fib(n-2) while updating acc1 and acc2 *)
  in
  fib_helper n 0 1 (* call the helper function with initial values for acc1 and acc2 *)

(* A function that converts Celsius to Fahrenheit using pattern matching for different input types *)
let rec convert_temp temp =
  match temp with
  | 0 -> 32 (* if temp is an integer 0, return 32 as the equivalent Fahrenheit value *)
  | 0.0 -> 32.0 (* if temp is a float 0.0, return 32.0 as the equivalent Fahrenheit value *)
  | _ -> temp *. (9.0/5.0) +. 32.0 (* for any other input, use the formula to convert from Celsius to Fahrenheit *)