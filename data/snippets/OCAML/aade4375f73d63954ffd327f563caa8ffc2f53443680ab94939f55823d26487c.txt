(** A functor that creates a module for storing and manipulating binary trees *)
module BST (Comparable: sig 
    type t
    val compare : t -> t -> int
end) = struct
    (** The type of a binary tree *)
    type tree = 
        | Empty
        | Node of tree * Comparable.t * tree
    (** A function to determine if a tree is empty *)
    let is_empty tree = 
        match tree with
        | Empty -> true
        | _ -> false
    (** A function to insert a value into a binary tree *)
    let rec insert tree value = 
        match tree with
        | Empty -> Node (Empty, value, Empty)
        | Node (left, root, right) -> 
            if Comparable.compare value root < 0 then
                Node (insert left value, root, right)
            else 
                Node (left, root, insert right value)
    (** A function to create a new binary tree from a list of values *)
    let rec of_list lst = 
        match lst with
        | [] -> Empty
        | hd::tl -> insert (of_list tl) hd
    (** A function to determine if a value is in a binary tree *)
    let rec contains tree value = 
        match tree with
        | Empty -> false
        | Node (left, root, right) ->
            if Comparable.compare value root = 0 then
                true
            else if Comparable.compare value root < 0 then
                contains left value
            else 
                contains right value
    (** A function to remove a value from a binary tree *)
    let rec remove tree value =
        match tree with
        | Empty -> Empty
        | Node (left, root, right) ->
            if Comparable.compare value root = 0 then
                match (left, right) with
                | (Empty, Empty) -> Empty
                | (Empty, _) -> right
                | (_, Empty) -> left
                | (_, _) ->
                    let (new_root, new_right) = min right in
                    Node (left, new_root, remove right new_root)
            else if Comparable.compare value root < 0 then
                Node (remove left value, root, right)
            else 
                Node (left, root, remove right value)
    (** A function to find the minimum value in a binary tree *)
    let rec min tree =
        match tree with
        | Empty -> failwith "Invalid operation on an empty tree"
        | Node (Empty, root, _) -> root
        | Node (left, _, _) -> min left
    (** A function to find the maximum value in a binary tree *)
    let rec max tree =
        match tree with
        | Empty -> failwith "Invalid operation on an empty tree"
        | Node (_, root, Empty) -> root
        | Node (_, _, right) -> max right
    (** A function to traverse a binary tree in preorder and apply a function to each value *)
    let rec preorder map tree = 
        match tree with
        | Empty -> ()
        | Node (left, root, right) -> 
            let () = map root in
            preorder map left;
            preorder map right
    (** A function to traverse a binary tree in inorder and apply a function to each value *)
    let rec inorder map tree = 
        match tree with
        | Empty -> ()
        | Node (left, root, right) ->
            inorder map left;
            let () = map root in
            inorder map right
    (** A function to traverse a binary tree in postorder and apply a function to each value *)
    let rec postorder map tree = 
        match tree with
        | Empty -> ()
        | Node (left, root, right) ->
            postorder map left;
            postorder map right;
            let () = map root in
            ()
end