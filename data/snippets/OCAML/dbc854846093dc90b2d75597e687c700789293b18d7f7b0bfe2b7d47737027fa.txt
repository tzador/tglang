(* This is a function that calculates the nth Fibonacci number *)
let rec fibonacci n = 
  if n <= 1 then n
  else fibonacci (n-1) + fibonacci (n-2);;
  
(* This is a function that calculates the factorial of a number *)
let rec factorial n =
  if n <= 1 then 1
  else n * factorial (n-1);;
  
(* This is a function that calculates the sum of two numbers *)
let rec sum n1 n2 =
  if n2 <= 0 then n1
  else sum (n1+1) (n2-1);;

(* This is a function that calculates the greatest common divisor of two numbers *)
let rec gcd n1 n2 = 
  if n2 = 0 then n1
  else gcd n2 (n1 mod n2);;

(* This is a function that checks if a number is a prime number *)
let is_prime n = 
  let rec is_divisible_by k = 
    if k > n/2 then true
    else if n mod k = 0 then false
    else is_divisible_by (k+1)
  in is_divisible_by 2;;

(* This is a function that converts integer to binary *)
let rec int_to_binary n = 
  match n with
  | 0 -> "0"
  | 1 -> "1"
  | _ -> let d = n mod 2
         and r = n/2
         in (int_to_binary r) ^ (string_of_int d);;

(* This is a function that checks if two strings are anagrams *)
let is_anagram str1 str2 =
  let clean_string str = 
    let replace_char c =
      if c < 'A' || (c > 'Z' && c < 'a') || c > 'z' then ' '
      else c
    in
    let str' = String.map replace_char str
    in String.lowercase_ascii str'
  in
  
  let rec count_chars str =
    let len = String.length str
    in if len = 0 then []
       else
         let ch = String.get str 0
         and str' = String.sub str 1 (len-1)
         in
         let count_rest = count_chars str'
         and rec_match c l = 
           match l with
           | (c2,n)::l' when c2 = c -> (c2, n+1) :: l'
           | (c2,n)::l' -> (c2,n) :: rec_match c l'
           | [] -> [(c,1)]
         in
         rec_match ch count_rest
  in
  let count1 = count_chars (clean_string str1)
  in let count2 = count_chars (clean_string str2)
     in count1 = count2;;