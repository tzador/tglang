(* This code snippet is a function that takes in a list of integers and performs
  * various manipulations on it, returning a new list with the final result.
  * This snippet showcases the use of pattern matching, recursion, and list
  * operations in OCAML.
  *)

(* The function takes in a list of integers and returns a new list with each
 * element being the square of the original element, using pattern matching to
 * handle the different cases. *)
let rec square_list l =
  match l with
  | [] -> [] (* Base case for an empty list *)
  | x::xs -> (x * x) :: square_list xs (* Recursive case for non-empty list *)

(* The function takes in two lists of integers and returns a new list with each
 * element being the sum of the corresponding elements in the two input lists,
 * using pattern matching and list operations to handle different cases and
 * recursively iterate through the lists. *)
let rec add_lists l1 l2 =
  match l1, l2 with
  | [], [] -> [] (* Base case for two empty lists *)
  | x::xs, y::ys -> (x + y) :: add_lists xs ys (* Recursive case for non-empty lists *)
  | [], y::ys -> y :: add_lists [] ys (* Handles case where second list is longer *)
  | x::xs, [] -> x :: add_lists xs [] (* Handles case where first list is longer *)

(* The function takes in a list of integers and returns a new list with each
 * element being the maximum of its previous element and the sum of itself and
 * its next element, using pattern matching, recursion and functional operators
 * to handle different cases and recursively iterate through the list. *)
let rec max_list l =
  match l with
  | [] -> [] (* Base case for an empty list *)
  | [x] -> [x] (* Base case for a list with one element *)
  | x::xs -> List.fold_left max [] (square_list (x :: add_lists xs (max_list xs)))

(* This final line calls the max_list function with a list of integers
 * and prints the result to the console, using the built-in function
 * Printf.sprintf to format the output. *)
Printf.sprintf "The max list of [1; 2; 3; 4] is %d" (List.hd (max_list [1; 2; 3; 4]))