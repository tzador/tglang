(* This is a partial implementation of a binary search tree data structure *)
type 'a bst = 
  | Empty
  | Node of 'a * 'a bst * 'a bst

(* This function inserts a new element into the binary search tree *)
let rec insert (x : 'a) (bst : 'a bst) : 'a bst =
  match bst with
  | Empty -> Node(x, Empty, Empty)
  | Node(y, l, r) ->
    if x = y then 
      bst
    else if x < y then 
      Node(y, insert x l, r)
    else 
      Node(y, l, insert x r)

(* This function returns the minimum value in the binary search tree *)
let rec min (bst : 'a bst) : 'a option =
  match bst with
  | Empty -> None
  | Node(x, Empty, _) -> Some x
  | Node(_, l, _) -> min l

(* This function returns the maximum value in the binary search tree *)
let rec max (bst : 'a bst) : 'a option =
  match bst with
  | Empty -> None
  | Node(x, _, Empty) -> Some x
  | Node(_, _, r) -> max r

(* This function checks if a given element is present in the binary search tree *)
let rec contains (x : 'a) (bst : 'a bst) : bool =
  match bst with
  | Empty -> false
  | Node(y, l, r) ->
    if x = y then 
      true
    else if x < y then 
      contains x l
    else 
      contains x r