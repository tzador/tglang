(* This is a function that takes in a list of integers and returns the sum of all the even numbers in the list. *)

let rec sum_even l
= match l with
| [] -> 0 (* Base case: If list is empty, return 0 as the sum. *)
| hd :: tl -> (* Recursive case: Split the list into head (hd) and tail (tl) *)
  if (hd mod 2) = 0 then hd + (sum_even tl) (* If head is even, add it to the sum of even numbers in the tail. *)
  else sum_even tl (* If head is odd, continue to the next element in the list. *)

(* Example usage: sum_even [1;2;3;4;5] returns 6, as 2 + 4 = 6 *)