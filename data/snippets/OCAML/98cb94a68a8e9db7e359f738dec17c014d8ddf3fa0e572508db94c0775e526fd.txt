(* This is a function that takes in two lists of integers and returns a new list that contains the sum of the elements at each corresponding index in the two lists, using recursion. *)

let rec list_sum lst1 lst2 =
  match (lst1, lst2) with
  | ([], []) -> [] (* base case: if both lists are empty, return an empty list *)
  | (h1 :: t1, []) -> lst1 (* if one list is empty, return the other list *)
  | ([], h2 :: t2) -> lst2
  | (h1 :: t1, h2 :: t2) -> (h1 + h2) :: list_sum t1 t2 (* add the current elements at each index and recursively call list_sum on the remaining elements *)

(* Example usage: *)
list_sum [1;2;3] [4;5;6];; (* Output: [5; 7; 9] *)