let rec fold_left f acc lst =
  match lst with
  | [] -> acc
  | hd :: tl -> fold_left f (f acc hd) tl
(* fold_left is a higher order function that takes in a function f,
an initial accumulator value acc, and a list lst and recursively
applies the function f to each element of the list starting from
the left and updating the accumulator each time until the list is empty.
This function is tail recursive, meaning it has constant space complexity,
and is commonly used in functional programming. *)