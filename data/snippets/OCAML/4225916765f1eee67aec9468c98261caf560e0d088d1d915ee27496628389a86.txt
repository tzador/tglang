(* This code snippet creates a self-balancing binary search tree which maintains balance using AVL rotation technique. *)

(* Define a type for binary search trees *)
type 'a tree = 
| Empty 
| Node of 'a tree * 'a * 'a tree

(* Function to calculate the height of a tree *)
let rec height t = match t with
  | Empty -> 0
  | Node (left, _, right) -> 1 + max (height left) (height right)

(* Function to balance the tree using AVL rotation technique *)
let rec balance t = match t with
  | Node (left, x, right) ->
    let balance_factor = height left - height right in
    if balance_factor > 1 then (* Left subtree is taller *)
      match left with
      | Node (left_left, y, left_right) ->
        (* Case 1: Left subtree of left subtree is taller *)
        if height left_left >= height left_right then
          Node (left_left, y, Node (left_right, x, right))
        (* Case 2: Right subtree of left subtree is taller *)
        else
          match left_right with
          | Node (left, z, right) ->
            Node (Node(left_left, y, left), z, Node(right, x, right))
      | _ -> t
    else if balance_factor < -1 then (* Right subtree is taller *)
      match right with
      | Node (right_left, z, right_right) ->
        (* Case 3: Right subtree of right subtree is taller *)
        if height right_right >= height right_left then
          Node (Node (left, x, right_left), z, right_right)
        (* Case 4: Left subtree of right subtree is taller *)
        else
          match right_left with
          | Node (left, y, right) ->
            Node (Node (left, x, left), y, Node (right, z, right_right))
      | _ -> t
    else (* Tree is already balanced *)
      t
  | _ -> t

(* Function to insert a value into the tree *)
let rec insert x t = 
  match t with
  | Empty -> Node (Empty, x, Empty)
  | Node (left, y, right) -> 
    if x < y then Node (insert x left, y, right)
    else if x > y then Node (left, y, insert x right)
    else t

(* Initialize an empty tree *)
let tree = Empty

(* Insert values into the tree *)
let tree = insert 5 tree
let tree = insert 10 tree
let tree = insert 3 tree
let tree = insert 2 tree
let tree = insert 8 tree
let tree = insert 7 tree

(* Balance the tree *)
let balanced_tree = balance tree

(* Print the balanced tree *)
Printf.printf "Balanced Tree: %s \n" (String.concat ", " (List.map string_of_int (ODISTree.Inorder.to_list balanced_tree)))