(* This is a function that calculates the square of a number *)
let square x =
    x * x ;; (* multiply the number by itself *)

(* This is a function that calculates the factorial of a number *)
let rec factorial n =
    if n = 0 then 1
    else n * factorial (n - 1) ;; (* multiply the current number with the factorial of the previous number *)

(* This is a function that checks if a number is prime *)
let is_prime n =
    if n <= 1 then false
    else
        let rec check_prime num divisor =
            if divisor = 1 then true (* if all previous numbers are checked and no divisor is found, return true *)
            else if num mod divisor = 0 then false (* if the number is divisible by a previous number, return false *)
            else check_prime num (divisor - 1) in (* otherwise move on to the next previous number *)
        check_prime n (n - 1) ;; (* start checking from the previous number to n-1 *)

(* This is a recursive function that calculates the Fibonacci sequence *)
let rec fibonacci n =
    if n = 0 then 0
    else if n = 1 then 1
    else fibonacci (n - 1) + fibonacci (n - 2) (* recursively calculate the sum of the two previous numbers *)

(* This is a function that merges two sorted lists into one sorted list *)
let rec merge_lists list1 list2 =
    match list1, list2 with (* pattern match on both lists *)
    | [], list -> list (* if list1 is empty, return list2 *)
    | list, [] -> list (* if list2 is empty, return list1 *)
    | head1 :: tail1, head2 :: tail2 -> (* if both lists have elements *)
        if head1 < head2 then head1 :: merge_lists tail1 list2 (* compare the first elements of both lists, add the smaller one to the new list, and recursively call on the rest *)
        else head2 :: merge_lists list1 tail2 *)

(* This is a function that takes in a list and a function, and applies the function to every element in the list *)
let rec map func list =
    match list with
    | [] -> []
    | head :: tail -> func head :: map func tail ;; (* apply the function to the head of the list, and recursively call on the rest *)

(* This is a function that takes in a list and a predicate function, and returns a new list with elements that satisfy the predicate *)
let rec filter pred list =
    match list with
    | [] -> []
    | head :: tail ->
        if pred head then head :: filter pred tail (* if the element satisfies the predicate, add it to the new list and recursively call on the rest *)
        else filter pred tail ;; (* otherwise, just call recursively on the rest *)

(* This is a function that takes in two lists and an accumulator, and recursively merges the lists into one sorted list *)
let rec merge_sort list1 list2 acc =
    match list1, list2 with
    | [], list -> list @ acc (* if list1 is empty, concatenate list2 and the accumulator *)
    | list, [] -> list @ acc (* if list2 is empty, concatenate list1 and the accumulator *)
    | head1 :: tail1, head2 :: tail2 -> (* if both lists have elements *)
        if head1 < head2 then merge_sort tail1 list2 (head1 :: acc) (* compare the first elements of both lists, add the smaller one to the accumulator, and recursively call on the rest *)
        else merge_sort list1 tail2 (head2 :: acc) ;; (* otherwise, add the other element to the accumulator and recursively call *)

(* This is a function that takes in a list and sorts it using the merge sort algorithm *)
let rec sort list =
    match list with
    | [] -> [] (* if the list is empty, return empty list *)
    | [x] -> [x] (* if the list has one element, return the element *)
    | _ -> (* if the list has more than one element *)
        let rec split_and_sort first_half second_half = (* recursive function to split the list in half and recursively sort each half *)
            match first_half, second_half with
            | [], [] -> [] (* if both halves are empty, return empty list *)
            | [], [x] -> [x] (* if the second half has one element, return it *)
            | _ -> (* if the second half has more than one element *)
                let sorted_first_half = sort first_half in (* recursively sort the first half *)
                let sorted_second_half = sort second_half in (* recursively sort the second half *)
                merge_sort sorted_first_half sorted_second_half [] in (* recursively merge the sorted halves *)
        let (list1, list2) = split list in (* split the list in half *)
        merge_lists (split_and_sort list1 list2) ;; (* merge the sorted halves *)