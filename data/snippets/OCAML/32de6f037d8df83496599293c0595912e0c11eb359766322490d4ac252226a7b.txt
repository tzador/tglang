(* This is a complex function that takes in two lists and returns a new list with elements from both lists, but with no duplicates *)

let rec merge (lst1 : 'a list) (lst2 : 'a list) : 'a list =
  match (lst1, lst2) with
  | ([], []) -> []
  | (x, []) -> x
  | ([], x) -> x
  | (hd1 :: tl1, hd2 :: tl2) ->
      if hd1 = hd2 then merge tl1 tl2
      else hd1 :: merge tl1 (hd2 :: tl2) 

(* This function first checks if both lists are empty, if so it returns an empty list *)
(* Then it checks if one of the lists is empty, in which case it returns the other list as is *)
(* If both lists have elements, it checks the head of each list and compares them *)
(* If the heads are equal, it calls the merge function again with the tails of each list *)
(* If the heads are not equal, it adds the head of the first list to the new list and calls the merge function with the tail of the first list and the entire second list *)

(* Example usage: merge [1;2;3] [2;3;4] *)
(* Expected output: [1;2;3;4] *)