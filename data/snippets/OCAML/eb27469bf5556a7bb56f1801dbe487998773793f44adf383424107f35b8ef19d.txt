(* This is a function that recursively calculates the n-th Fibonacci number *)

let rec fibonacci n =
  match n with
  | 0 -> 0
  | 1 -> 1
  | _ -> fibonacci (n-1) + fibonacci (n-2)

(* This is a function that takes two integers and returns their greatest common divisor using Euclid's algorithm *)

let rec gcd m n =
  if n = 0 then m
  else gcd n (m mod n)

(* This is a function that takes in a list and prints out the squares of each element in the list *)

let rec print_square_list lst =
  match lst with
  | [] -> ()
  | x::xs -> print_endline (string_of_int (x*x)); print_square_list xs

(* This is a recursive function that calculates the factorial of a number *)

let rec factorial n =
  match n with
  | 0 -> 1
  | _ -> n * factorial (n-1)

(* This is a higher-order function that takes in a list of integers and a function, and applies the function to each element in the list *)

let apply_to_list f lst =
  let rec aux lst =
    match lst with
    | [] -> []
    | x::xs -> f x :: aux xs in
  aux lst

(* This is a function that takes in a list of strings and checks if all strings are uppercase *)

let rec all_uppercase lst =
  match lst with
  | [] -> true
  | x::xs -> if String.uppercase_ascii x = x then all_uppercase xs else false