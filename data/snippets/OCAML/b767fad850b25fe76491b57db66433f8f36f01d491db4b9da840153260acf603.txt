(* This is a function that takes in two integers and returns the sum of both *)
let add x y = x + y

(* This is a helper function that takes in a pair and returns the first element *)
let get_first (x, y) = x

(* This is a recursive function that calculates the factorial of a given integer, using pattern matching *)
let rec factorial = function 
  | 0 -> 1
  | n -> n * factorial (n-1)

(* This is a function that takes in a list and returns the sum of all the elements 
   while keeping track of the running total using a helper function *)
let sum_list lst = 
  let rec helper acc = function
    | [] -> acc
    | x :: rest -> helper (acc + x) rest
  in helper 0 lst

(* This is a higher order function that takes in a function and a list, 
   and applies the function to each element in the list, returning a new list *)
let map f lst = 
  let rec helper acc = function
    | [] -> acc
    | x :: rest -> helper (acc @ [f x]) rest
  in helper [] lst

(* Output results *)

(* Prints the sum of 3 and 5 *)
let result = add 3 5 in
print_endline "The sum is: " result

(* Prints the first element of the pair (4, 8) *)
let pair = (4, 8) in
let first = get_first pair in
print_endline "The first element is: " first

(* Calculates and prints the factorial of 6 *)
let input = 6 in
let result = factorial input in
print_endline "The factorial of " input " is: " result

(* Calculates and prints the sum of the list [1; 2; 3; 4; 5] *)
let list = [1; 2; 3; 4; 5] in
let result = sum_list list in
print_endline "The sum of the list is: " result

(* Prints a new list where each element is multiplied by 2 *)
let input = [1; 2; 3; 4; 5] in
let result = map (fun x -> x * 2) input in
print_endline "The new list is: " result