(* Create a type to represent a binary tree that can hold integers *)
type bin_tree =
  | Leaf of int
  | Node of int * bin_tree * bin_tree

(* Function to check if a binary tree is a binary search tree,
   where all nodes in the left subtree are less than the root
   and all nodes in the right subtree are greater than the root *)
let rec is_bst tree =
  match tree with
  | Leaf n -> true
  | Node (n, left, right) ->
    let left_bst = is_bst left in
    let right_bst = is_bst right in
    if left_bst && right_bst then
      match left, right with
      | Leaf l, Leaf r -> l < n && r > n
      | Node (l, _, _), Leaf r -> l < n && r > n
      | Leaf l, Node (r, _, _) -> l < n && r > n
      | Node (l, _, _), Node (r, _, _) -> l < n && r > n
    else
      false