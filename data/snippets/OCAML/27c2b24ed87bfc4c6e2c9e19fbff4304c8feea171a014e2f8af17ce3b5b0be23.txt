(* This is a comment in OCaml *)

(* This function takes in two integers and returns their product *)
let multiply x y = x * y

(* This function takes in a list of integers and returns the sum of all elements *)
let rec sum_list = function
| [] -> 0 (* If list is empty, return 0 *)
| h::t -> h + sum_list t (* Add head element to sum of remaining list *)

(* This function takes in a list of strings and concatenates them *)
let rec concat_list = function
| [] -> "" (* If list is empty, return empty string *)
| h::t -> h ^ concat_list t (* Concatenate head element to remaining list *)

(* This function takes in an integer and returns its factorial *)
let rec factorial n = 
  if n = 0 then 1 (* Base case: 0 factorial is 1 *)
  else n * factorial (n-1) (* Call function again with n-1 *)

(* This function takes in a string and reverses it *)
let reverse_string str = 
  let rec reverse_helper i acc = 
    if i < 0 then acc (* Base case: when i reaches -1, return accumulated string *)
    else reverse_helper (i-1) (acc ^ String.make 1 (String.get str i)) in
  reverse_helper (String.length str - 1) "" (* Call helper function with initial values *)

(* This function takes in a list of integers and returns a new list with even numbers only *)
let rec find_evens = function
| [] -> [] (* If list is empty, return empty list *)
| h::t -> 
  if h mod 2 = 0 then h :: find_evens t (* If head element is even, add to list *)
  else find_evens t (* If head element is odd, skip and move to next element *)