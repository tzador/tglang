let rec list_fold l acc f = 
  match l with 
  | [] -> acc 
  | x :: xs -> list_fold xs (f acc x) f

(* A recursive function that takes in a list 'l', an accumulator 'acc', and a function 'f', 
   then performs a fold operation on the list with the given function and accumulator. *)

let rec power x n = 
  if n = 0 then 1 
  else x * power x (n-1)

(* A recursive function that calculates the power of a number 'x' raised to 'n' by repeatedly
   multiplying 'x' by itself 'n' number of times. *)

let rec fib n = 
  match n with 
  | 0 -> 0 
  | 1 -> 1 
  | n -> fib (n - 1) + fib (n - 2)

(* A recursive function that calculates the nth Fibonacci number by adding the previous two 
   Fibonacci numbers until reaching the desired number. *)

let rec quicksort l = 
  match l with 
  | [] -> [] 
  | x :: xs -> 
    let smaller = List.filter (fun y -> y < x) xs 
    and larger = List.filter (fun y -> y >= x) xs in 
      (quicksort smaller) @ [x] @ (quicksort larger)

(* A recursive function that performs the quicksort algorithm on a list 'l' by recursively sorting 
   the smaller and larger elements using the filter function. *)