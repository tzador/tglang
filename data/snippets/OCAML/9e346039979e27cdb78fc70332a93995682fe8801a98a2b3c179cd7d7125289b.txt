(* This is a function that takes in a list and returns the reverse of that list *)
let rec reverse list =
  match list with
  | [] -> []
  | x :: xs -> reverse xs @ [x]

(* This is a function that takes in two lists and concatenates them *)
let rec concat list1 list2 =
  match list1 with
  | [] -> list2
  | x :: xs -> x :: concat xs list2

(* This is a function that takes in a list and filters out all even numbers *)
let rec filter list =
  match list with
  | [] -> []
  | x :: xs ->
    if x mod 2 = 0 then
      filter xs
    else
      x :: filter xs

(* This is a function that takes in two integers and calculates their sum *)
let rec sum x y =
  if y = 0 then
    x
  else
    sum (x + 1) (y - 1)