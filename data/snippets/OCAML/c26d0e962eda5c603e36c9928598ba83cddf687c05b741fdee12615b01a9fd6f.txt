(* This is an example of a recursive function in OCAML that calculates the factorial of a given number *)
let rec factorial num =
  if num <= 1 then 1
  else num * factorial (num-1)

(* This is an example of a higher-order function in OCAML that applies a function to each element in a list *)
let rec map f lst =
  match lst with
  | [] -> []
  | h::t -> (f h) :: map f t

(* This is an example of a function that creates a new type and implements an operation on it *)
type student = {
  name: string;
  age: int;
  major: string;
}

let get_major student = student.major

(* This is an example of a function that uses pattern matching to handle different cases *)
let rec find_max lst =
  match lst with
  | [] -> failwith "empty list"
  | [x] -> x
  | h::t -> max h (find_max t)

(* This is an example of a module that includes a type and a function *)
module Example = struct
  type point = {
    x: float;
    y: float;
  }

  let distance p1 p2 =
    let dx = p2.x -. p1.x in
    let dy = p2.y -. p1.y in
    sqrt (dx *. dx +. dy *. dy)
end

(* This is an example of a function that handles exceptions *)
let safe_div x y =
  try x / y
  with Division_by_zero -> 0

(* This is an example of a function that uses a match expression to handle different inputs *)
let evaluate input =
  match input with
  | 1 -> "One"
  | 2 -> "Two"
  | 3 -> "Three"
  | _ -> "Not a valid input"
  
(* This is an example of a function that uses partial application to create a new function *)
let multiply_by_num num = List.map (fun x -> num * x)