(* Implementation of a binary search tree in OCAML *)

(* Define a binary tree type with nodes containing both a value and two subtrees *)
type 'a binary_tree =
  | Empty
  | Node of 'a binary_tree * 'a * 'a binary_tree

(* Define a function for inserting a new value into the tree *)
let rec insert (tree: 'a binary_tree) (value: 'a) = match tree with
  | Empty -> Node (Empty, value, Empty) (* If the tree is empty, create a new node with the given value as its root *)
  | Node (left, root_value, right) -> (* Otherwise, traverse down the tree to find the correct place to insert the new value *)
      if value < root_value then
        Node (insert left value, root_value, right) (* If the new value is less than the root, recursively insert it into the left subtree *)
      else if value > root_value then
        Node (left, root_value, insert right value) (* If the new value is greater than the root, recursively insert it into the right subtree *)
      else
        tree (* If the new value is equal to the root, simply return the original tree without making any changes *)

(* Define a function for searching for a value in the tree *)
let rec search (tree: 'a binary_tree) (value: 'a) = match tree with
  | Empty -> false (* If the tree is empty, the value cannot be found *)
  | Node (left, root_value, right) ->
      if value = root_value then
        true (* If the value is equal to the root, it has been found *)
      else if value < root_value then
        search left value (* If the value is less than the root, recursively search the left subtree *)
      else
        search right value (* If the value is greater than the root, recursively search the right subtree *)

(* Create a new tree with some example values *)
let my_tree =
  let empty_tree = Empty in
  let tree_with_one_value = insert empty_tree 5 in
  let tree_with_multiple_values = insert tree_with_one_value 3 in
  insert tree_with_multiple_values 7

(* Search for a value that is in the tree *)
search my_tree 7 (* Returns: true *)

(* Search for a value that is not in the tree *)
search my_tree 10 (* Returns: false *)