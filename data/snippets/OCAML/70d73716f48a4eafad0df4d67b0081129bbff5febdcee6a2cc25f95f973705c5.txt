(* This is a function that calculates the square of a given number *)
let square x = 
  x * x;;

(* A recursive function that finds the factorial of a given number *)
let rec factorial n =
  if n = 0 then 1 else n * factorial (n - 1);;

(* A function that checks if a given number is a prime number *)
let is_prime x =
  let rec check_divisor n =
    if n = 1 then true else x mod n <> 0 && check_divisor (n - 1) in
  check_divisor (x - 1);;

(* An example of pattern matching in OCAML *)
let rec count_elements lst =
  match lst with
  | [] -> 0
  | [x] -> 1
  | x::xs -> 1 + count_elements xs;;

(* A higher-order function that takes a function and a list as inputs and applies the function to each element in the list *)
let rec map f lst =
  match lst with
  | [] -> []
  | x::xs -> (f x) :: (map f xs);;

(* A polymorphic function that takes in any type and an integer and returns a list of elements with the given type *)
let rec generate_list x n =
  match n with
  | 0 -> []
  | _ -> x :: (generate_list x (n-1));;

(* A function that recursively calculates the sum of all elements in a given list *)
let rec sum lst =
  match lst with
  | [] -> 0
  | x::xs -> x + sum xs;;