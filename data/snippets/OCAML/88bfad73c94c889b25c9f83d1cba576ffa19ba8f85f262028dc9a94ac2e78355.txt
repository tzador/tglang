(* This is a function that takes in two arguments, x and n, and returns the factorial of x to the power of n *)
let rec factorial x n = 
    if n = 0 then 1                      (* Base case, when n becomes 0, return 1 *)
    else x * factorial x (n-1)          (* Recursive call, multiplies x by factorial of x to the power of (n-1) *)

(* Definition of a custom exception, used for error handling in the function below *)
exception InvalidInput of string

(* This is a function that takes in a list of integers and returns a list with each integer squared, if the input is not a list of integers, an exception will be thrown *)
let rec square_list lst = 
    match lst with 
    | [] -> []                           (* Base case, when list is empty, return empty list *)
    | h::t when int_of_float(h) <> h -> raise (InvalidInput "List must only contain integers")    (* Checks if first element is not an integer, if so, raise exception *)
    | h::t -> (h * h)::square_list t     (* Recursive call, squares first element and adds it to the list with the rest of the elements squared *)

(* Example of using the functions defined above *)
let factorial_of_5 = factorial 5 5 ;;
let squared_list = square_list [1;2;3;4;5;6;7;8;9;10] ;;