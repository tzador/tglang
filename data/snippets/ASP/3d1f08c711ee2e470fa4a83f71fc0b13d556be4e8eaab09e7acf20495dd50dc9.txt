<%
    Option Explicit 'specifies that all variables must be declared
    Dim arrNames() 'declares an empty array to hold names
    Dim strName 'declares a string variable for user input
    Dim intSize 'declares an integer variable to store size of array
    Dim i 'declares a counter variable
    Dim j 'another counter variable, used in nested loop
    Dim blnInvalidName 'boolean variable to check for invalid input
    Dim strOutput 'string variable to hold formatted output

    'prompt user for input
    Response.Write("Enter the size of the array: ")
    intSize = CInt(InputBox("Enter size of array", "Input Number"))

    'check for invalid input
    If intSize <= 0 Then 
        Response.Write("Invalid input. Please enter a positive integer.")
        Response.End 'terminate execution
    End If

    'redimension the array with user input size
    ReDim arrNames(intSize-1)

    'loop to get user input and store in array
    For i = 0 To intSize-1
        blnInvalidName = True 'set boolean variable to true for validation loop
        Do While blnInvalidName 'loop until valid input is received
            'prompt user for name
            Response.Write("<br>Enter name " & i+1 & ": ")
            strName = InputBox("Enter name " & i+1, "Input Name")
            'check for empty input
            If strName = "" Then
                Response.Write("Invalid input. Please enter a name.")
            Else
                'loop through array to check for duplicate names
                blnInvalidName = False 'assume input is valid
                For j = 0 To intSize-1
                    If strName = arrNames(j) Then 'if duplicate name found
                        Response.Write("Name already exists. Please enter a different name.")
                        blnInvalidName = True 'set boolean variable to true to repeat loop
                    End If
                Next
            End If
        Loop
        'add valid input to array
        arrNames(i) = strName
    Next

    'sort the array in alphabetical order
    Call sortArray(arrNames, intSize) 'call the sortArray function

    'format and display output
    strOutput = "<br>Sorted list of names:<br>" 'initialize output string
    For i = 0 To intSize-1
        strOutput = strOutput & arrNames(i) & "<br>" 'concatenate names to output string
    Next
    Response.Write(strOutput)

    'function to sort the array in alphabetical order
    Sub sortArray(arr, size)
        Dim temp 'temporary variable for swapping
        Dim i 'counter variable
        Dim j 'another counter variable, used in nested loop
        'use bubble sort algorithm
        For i = 0 To size-2
            For j = 0 To size-i-2
                If arr(j) > arr(j+1) Then 'if current element is greater than next element
                    'swap elements
                    temp = arr(j)
                    arr(j) = arr(j+1)
                    arr(j+1) = temp
                End If
            Next
        Next
    End Sub
%>