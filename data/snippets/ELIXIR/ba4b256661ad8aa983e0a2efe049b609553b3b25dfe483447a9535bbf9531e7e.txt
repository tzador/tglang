defmodule Employee do

  @moduledoc """
  This module represents an employee and contains functions related to 
  their information and job roles.
  """

  # Struct representing employee information
  @enforce_keys [:name, :age, :position]
  defstruct name: nil,
            age: nil,
            position: nil

  # Function to validate employee information
  @doc """
  Validates employee information and raises an ArgumentError if any fields are missing.
  """
  @spec validate_employee(map) :: map
  def validate_employee(employee) do
    if Map.has_key?(employee, :name) && 
       Map.has_key?(employee, :age) && 
       Map.has_key?(employee, :position) do
      employee
    else
      raise ArgumentError, "Incomplete employee information"
    end
  end

  # Function to get employee name
  @doc """
  Returns the name of the employee.
  """
  @spec get_name(map) :: binary
  def get_name(employee) do
    employee.name
  end

  # Function to change employee position
  @doc """
  Changes the position of the employee to the specified value.
  """
  @spec change_position(map, binary) :: map
  def change_position(employee, new_position) do
    %{employee | position: new_position}
  end
end