defmodule Post do  # Creates a new Elixir module named "Post"

  @behaviour Ecto.Schema  # Defines the behaviour of this module using Ecto.Schema 
  
  schema "posts" do  # Describes the database schema for the "posts" table
    field :title, :string  # Defines a field named "title" with a type of :string
    field :body, :text  # Defines a field named "body" with a type of :text
    field :author, :string  # Defines a field named "author" with a type of :string
    field :date, :date  # Defines a field named "date" with a type of :date
    field :views, :integer  # Defines a field named "views" with a type of :integer
  end
  
  # The changeset function is used to define changes that can be made to a post
  # It takes in a post as a parameter and a set of parameters for the changes
  def changeset(post, params) do  
    
    # The Ecto.Changeset module is used to validate and manipulate changes to a post
    # It takes in the post, the parameters, and a list of allowed fields for the changes
    post
    |> Ecto.Changeset.change(params)
    |> Ecto.Changeset.validate_required([:title, :body, :author]) # Ensures that the "title", "body", and "author" fields are present and not empty
    |> Ecto.Changeset.cast(params, [:title, :body, :author, :date, :views]) # Allows only the specified fields to be changed
    |> Ecto.Changeset.cast_assoc(:comments, with: &Comment.changeset/2) # Allows for changes to associated "comments" using the Comment.changeset function
    |> Ecto.Changeset.unique_constraint(:title) # Ensures that the "title" is unique
  end
  
end