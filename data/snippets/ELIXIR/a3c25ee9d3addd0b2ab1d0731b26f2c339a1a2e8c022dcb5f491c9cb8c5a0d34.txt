defmodule User do
  @moduledoc """
  This module represents a user in a system.
  """
 
  @type t :: %__MODULE__{
    name: String.t(),
    age: integer(),
    username: String.t(),
    email: String.t(),
    is_admin: boolean()
  }
 
  @doc """
  Creates a new user.
 
  Parameters:
 
    * `name`    - The user's name.
    * `age`     - The user's age.
    * `username`  - The user's username.
    * `email`    - The user's email address.
    * `is_admin` - Indicates whether the user is an admin or not.
 
  Returns: `%User{}` struct.
  """
  def new_user(name, age, username, email, is_admin \\ false) do
    %User{
      name: name,
      age: age,
      username: username,
      email: email,
      is_admin: is_admin
    }
  end
 
  @doc """
  Checks if a user is an admin.
 
  Parameters:
 
    * `user`    - The user struct to check.
 
  Returns: `true` if the user is an admin, `false` otherwise.
  """
  def is_admin?(%User{is_admin: true}), do: true
  def is_admin?(%User{is_admin: false}), do: false
 
  @doc """
  Prints the user's information.
 
  Parameters:
 
    * `user` - The user struct.
 
  Returns: `:ok`
  """
  def print_user(%User{name: name, age: age, username: username, email: email, is_admin: is_admin}) do
    IO.puts "Name: #{name}"
    IO.puts "Age: #{age}"
    IO.puts "Username: #{username}"
    IO.puts "Email: #{email}"
    IO.puts "Is admin? #{is_admin}"
 
    :ok
  end
end