# First, we define a function called "generate_matrix" which takes in two integers, rows and columns, and generates a 2D matrix filled with random numbers

def generate_matrix(rows, columns) do  
  matrix = []                 # empty list to store the rows
  for row <- 1..rows do       # loop to iterate through the rows
    inner_list = []           # empty list to store the values in a row
    for col <- 1..columns do  # loop to iterate through the columns
      value = :rand.uniform() # generate a random number
      inner_list = inner_list ++ [value] # append the random number to the inner list
    end

    matrix = matrix ++ [inner_list] # append the inner list to the matrix list
  end

  return matrix # return the final 2D matrix
end

# Then, we call the function and pass in the number of rows and columns we want for the matrix
matrix = generate_matrix(5, 5)

# Next, we define a function called "transpose_matrix" which takes in a matrix and transposes it, swapping rows and columns
def transpose_matrix(matrix) do
  transposed_matrix = []                  # empty list to store the transposed matrix
  for col <- 1..length(matrix[0]) do      # loop through the columns of the original matrix
    inner_list = []                       # empty list to store the values in a column
    for row <- matrix do                  # loop through the rows of the original matrix
      value = row[col]                    # get the value at the current column and row
      inner_list = inner_list ++ [value]  # append the value to the inner list
    end

    transposed_matrix = transposed_matrix ++ [inner_list] # append the inner list to the transposed matrix
  end

  return transposed_matrix # return the transposed matrix
end

# Finally, we call the "transpose_matrix" function on our generated matrix and store the result in a new variable
transposed = transpose_matrix(matrix)

# We can now print out our original matrix and the transposed matrix
IO.puts("Original Matrix:")
IO.inspect(matrix)
IO.puts("Transposed Matrix:")
IO.inspect(transposed)

# The output should look like this:
#
# Original Matrix:
# [[0.18766595018953627, 0.9045039692864862, 0.24209228858102216, 0.5402121663288503, 0.7597046128336045],
# [0.919839040039798, 0.21045205008483476, 0.4787372535434647, 0.7207501578563382, 0.25771642835556066],
# [0.05692210989849967, 0.3411856946824434, 0.38540069684382746, 0.10533786270143527, 0.6312665957935243],
# [0.4407451829758952, 0.7340333388923789, 0.010707078034517278, 0.033976540430132926, 0.6670607353738033],
# [0.33978775805492883, 0.4550445695950139, 0.5180860785070553, 0.2009872787481987, 0.08014468115452003]]
#
# Transposed Matrix:
# [[0.18766595018953627, 0.919839040039798, 0.05692210989849967, 0.4407451829758952, 0.33978775805492883],
# [0.9045039692864862, 0.21045205008483476, 0.3411856946824434, 0.7340333388923789, 0.4550445695950139],
# [0.24209228858102216, 0.4787372535434647, 0.38540069684382746, 0.010707078034517278, 0.5180860785070553],
# [0.5402121663288503, 0.7207501578563382, 0.10533786270143527, 0.033976540430132926, 0.2009872787481987],
# [0.7597046128336045, 0.25771642835556066, 0.6312665957935243, 0.6670607353738033, 0.08014468115452003]]