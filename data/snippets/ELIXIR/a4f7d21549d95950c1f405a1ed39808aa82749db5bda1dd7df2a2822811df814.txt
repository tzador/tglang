defmodule Complex do
  # This is a module that defines a complex number and its operations

  @doc """
  Creates a new complex number with the given real and imaginary parts.

  ## Examples

    iex> Complex.new(2, 3)
    #Complex<2+3i>

    iex> Complex.new(-1, 0.5)
    #Complex<-1+0.5i>
  """
  defstruct re: 0, im: 0

  @doc """
  Adds two complex numbers and returns the result.

  ## Examples

    iex> one = Complex.new(1, 2)
    #Complex<1+2i>
    iex> two = Complex.new(-3, 0.5)
    #Complex<-3+0.5i>
    iex> Complex.add(one, two)
    #Complex<-2+2.5i>
  """
  def add(#Complex{re: a, im: b}, #Complex{re: c, im: d}) do
    %Complex{re: a + c, im: b + d}
  end

  @doc """
  Subtracts two complex numbers and returns the result.

  ## Examples
    iex> one = Complex.new(1, 2)
    #Complex<1+2i>
    iex> two = Complex.new(-3, 0.5)
    #Complex<-3+0.5i>
    iex> Complex.subtract(one, two)
    #Complex<4+1.5i>
  """
  def subtract(#Complex{re: a, im: b}, #Complex{re: c, im: d}) do
    %Complex{re: a - c, im: b - d}
  end

  @doc """
  Multiplies two complex numbers and returns the result.

  ## Examples
    iex> one = Complex.new(1, 2)
    #Complex<1+2i>
    iex> two = Complex.new(-3, 0.5)
    #Complex<-3+0.5i>
    iex> Complex.multiply(one, two)
    #Complex<-3+4.5i>
  """
  def multiply(#Complex{re: a, im: b}, #Complex{re: c, im: d}) do
    %Complex{re: (a * c) - (b * d), im: (a * d) + (b * c)}
  end

  @doc """
  Divides two complex numbers and returns the result.

  ## Examples
    iex> one = Complex.new(1, 2)
    #Complex<1+2i>
    iex> two = Complex.new(-3, 0.5)
    #Complex<-3+0.5i>
    iex> Complex.divide(one, two)
    #Complex<-0.2-0.6i>
  """
  def divide(#Complex{re: a, im: b}, #Complex{re: c, im: d}) do
    denom = (c * c) + (d * d)
    re = (a * c) + (b * d)
    im = (b * c) - (a * d)
    %Complex{re: re / denom, im: im / denom}
  end

  @doc """
  Computes the absolute value of a complex number.

  ## Examples
    iex> num = Complex.new(3, 4)
    #Complex<3+4i>
    iex> Complex.abs(num)
    #5.0
  """
  def abs(#Complex{re: a, im: b}) do
    :math.sqrt((a * a) + (b * b))
  end

  @doc """
  Computes the complex conjugate of a complex number.

  ## Examples
    iex> num = Complex.new(3, 4)
    #Complex<3+4i>
    iex> Complex.conj(num)
    #Complex<3-4i>
  """
  def conj(#Complex{re: a, im: b}) do
    %Complex{re: a, im: -b}
  end

  @doc """
  Computes the argument (angle) of a complex number.

  ## Examples
    iex> num = Complex.new(1, 1)
    #Complex<1+1i>
    iex> Complex.arg(num)
    #0.7853981633974483
  """
  def arg(#Complex{re: a, im: b}) do
    :math.atan2(b, a)
  end
end