# define a module named 'BankAccount'
defmodule BankAccount do
  # define a struct named 'Account' with attributes 'id', 'balance' and 'owner'
  @enforce_keys [:id, :balance, :owner]
  defstruct [:id, :balance, :owner]

  # define a function 'initialize' that takes in an account id and owner name as parameters
  def initialize(id, owner) do
    # pass in the parameters to the 'Account' struct using the 'new' function
    new(id: id, balance: 0, owner: owner)
  end

  # define a function 'deposit' that takes in an account and amount as parameters
  def deposit(account, amount) do
    # check if the amount is greater than 0
    if amount > 0 do
      # update the account's balance by adding the amount
      account = %{account | balance: account.balance + amount}
      # return the updated account
      account
    else
      # if the amount is 0 or less, raise an error
      raise "Invalid deposit amount"
    end
  end

  # define a function 'withdraw' that takes in an account and amount as parameters
  def withdraw(account, amount) do
    # check if the amount is greater than 0 and less than or equal to the account's balance
    if amount > 0 && amount <= account.balance do
      # update the account's balance by subtracting the amount
      account = %{account | balance: account.balance - amount}
      # return the updated account
      account
    else
      # if the amount is 0 or less, raise an error
      raise "Invalid withdraw amount"
    end
  end
end