defmodule User do
  @moduledoc """
  This module represents a user in the system.
  """
  alias MyDatabase, as: DB

  # Function to initialize a new user with a given name and age
  def init(name, age) do
    %{"name" => name, "age" => age}
  end

  # Function to save a user into the database
  # Input: user - %User{} struct
  # Output: :ok if successful, {:error, message} if failed
  def save(user) do
    case DB.insert(user) do
      {:ok, _} -> :ok
      {:error, %{"message" => msg}} -> {:error, msg}
    end
  end

  # Function to retrieve a user from the database by name
  # Input: name - user's name (string)
  # Output: user - %User{} struct or nil if not found
  def get_by_name(name) do
    users = DB.get_all_users()
    Enum.find(users, &(&1.name == name))
  end

  # Function to update a user's age in the database
  # Input: user - %User{} struct, age - new age (integer)
  # Output: :ok if successful, {:error, message} if failed
  def update_age(user, age) do
    updated_user = %{user | "age" => age}
    case DB.update(user, updated_user) do
      {:ok, _} -> :ok
      {:error, %{"message" => msg}} -> {:error, msg}
    end
  end

  # Function to delete a user from the database
  # Input: name - user's name (string)
  # Output: :ok if successful, {:error, message} if failed
  def delete(name) do
    case DB.delete(name) do
      {:ok, _} -> :ok
      {:error, %{"message" => msg}} -> {:error, msg}
    end
  end
end

# Example usage:

# Create a new user
new_user = User.init("John", 25)

# Save user into database
User.save(new_user)

# Retrieve user from database by name
user = User.get_by_name("John")

# Update user's age to 30
User.update_age(user, 30)

# Delete user from database
User.delete(user.name)