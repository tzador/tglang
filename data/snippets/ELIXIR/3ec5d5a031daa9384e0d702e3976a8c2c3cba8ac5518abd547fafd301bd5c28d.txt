defmodule Complex do
  # Defines a new module named "Complex"

  @moduledoc """
  This module provides a data structure and functions for complex numbers
  """

  # This function creates a new complex number
  def new(x, y) when is_number(x) and is_number(y) do
    %Complex{real: x, imaginary: y}
  end

  # This function returns the real part of a complex number
  def real(complex) do
    complex.real
  end

  # This function returns the imaginary part of a complex number
  def imag(complex) do
    complex.imaginary
  end

  # This function adds two complex numbers together
  def add(complex1, complex2) do
    %Complex{
      real: complex1.real + complex2.real,
      imaginary: complex1.imaginary + complex2.imaginary
    }
  end

  # This function subtracts one complex number from another
  def subtract(complex1, complex2) do
    %Complex{
      real: complex1.real - complex2.real,
      imaginary: complex1.imaginary - complex2.imaginary
    }
  end

  # This function multiplies two complex numbers together
  def multiply(complex1, complex2) do
    %Complex{
      real: complex1.real * complex2.real - complex1.imaginary * complex2.imaginary,
      imaginary: complex1.real * complex2.imaginary + complex2.real * complex1.imaginary
    }
  end

  # This function divides one complex number by another
  def divide(complex1, complex2) do
    %Complex{
      real: (complex1.real * complex2.real + complex1.imaginary * complex2.imaginary) / (complex2.real ^ 2 + complex2.imaginary ^ 2),
      imaginary: (complex1.imaginary * complex2.real - complex1.real * complex2.imaginary) / (complex2.real ^ 2 + complex2.imaginary ^ 2)
    }
  end

  # This function calculates the absolute value of a complex number
  def abs(complex) do
    :math.sqrt(complex.real ^ 2 + complex.imaginary ^ 2)
  end

  # This function compares two complex numbers and returns true if they are equal
  def equals(complex1, complex2) do
    complex1.real == complex2.real and complex1.imaginary == complex2.imaginary
  end
end

complex1 = Complex.new(3, 4)
complex2 = Complex.new(-2, 7)

result = Complex.add(complex1, complex2)

IO.inspect(result)
# Returns %Complex{real: 1, imaginary: 11}