# Define a module for a bank account
defmodule BankAccount do
  # Specify attributes with defaults. Use @ for module attributes
  @balance 0
  @owner nil

  # Define getter and setter functions for attributes
  def get_balance(), do: @balance
  def set_balance(new_balance), do: @balance = new_balance
  def get_owner(), do: @owner
  def set_owner(new_owner), do: @owner = new_owner

  # Define a function to deposit money into the account
  def deposit(amount) do
    # Check that the amount is valid
    if amount > 0 do
      # Update the balance
      new_balance = @balance + amount
      # Use the setter function to set the new balance
      set_balance(new_balance)
      # Return the updated balance
      "New balance: #{@balance}"
    else
      # If the amount is invalid, return an error message
      "Invalid amount"
    end
  end

  # Define a function to withdraw money from the account
  def withdraw(amount) do
    # Check that the amount is valid
    if amount > 0 and amount <= @balance do
      # Update the balance
      new_balance = @balance - amount
      # Use the setter function to set the new balance
      set_balance(new_balance)
      # Return the updated balance
      "New balance: #{@balance}"
    else
      # If the amount is invalid, return an error message
      "Invalid amount"
    end
  end
end

# Create a new bank account with an initial balance of $100 and owner name "John"
account = BankAccount.new(balance: 100, owner: "John")

# Print the owner and balance of the account
IO.puts "Account owner: #{account.get_owner()}\nCurrent balance: $#{account.get_balance()}"

# Deposit $50 into the account
IO.puts "Depositing $50..."
IO.puts account.deposit(50)

# Withdraw $75 from the account
IO.puts "Withdrawing $75..."
IO.puts account.withdraw(75)

# Print the final balance of the account
IO.puts "Final balance: $#{account.get_balance()}"