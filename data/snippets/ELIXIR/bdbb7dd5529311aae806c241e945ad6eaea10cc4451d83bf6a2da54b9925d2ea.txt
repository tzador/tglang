# Creates a module
defmodule MathOps do
  # Defines a function to calculate the factorial of a number
  def factorial(n) do
    # Pattern matching to handle input of 0 and 1
    # Returns 1 if n is 0 or 1
    x when x in 0..1 -> 1
    # If n is greater than 1, recursively calls the factorial function
    # Multiplies n by the factorial of (n-1)
    x -> n * factorial(n-1)
  end

  # Defines a function to calculate the nth Fibonacci number
  def fib(n) do
    # Pattern matching to handle input of 0 and 1
    # Returns the corresponding number if n is 0 or 1
    x when x in 0..1 -> x
    # If n is greater than 1, recursively calls the fib function
    # Adds the previous two Fibonacci numbers to get the nth number
    x -> fib(n-1) + fib(n-2)
  end

  # Defines a function to calculate the greatest common divisor of two numbers
  def gcd(a, b) do
    # Uses a ternary operator to make sure a is always greater than b
    # If a is not greater than b, swaps the two values
    # a is the greater number
    a > b ? a : gcd(b, a)

    # Performs Euclid's algorithm to calculate the gcd
    # Continues until b is equal to 0
    # Returns a, which is the gcd at that point
    b == 0 && return a
    gcd(b, rem(a, b))
  end
end