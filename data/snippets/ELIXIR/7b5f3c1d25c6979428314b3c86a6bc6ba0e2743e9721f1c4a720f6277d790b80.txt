defmodule Game do
  # Module that represents a simple game

  @player1 {:name, :score}
  @player2 {:name, :score}

  def new(player1, player2) do
    # Function that creates a new game with two players
    %Game{
      player1: player1,
      player2: player2
    }
  end

  def play(game) do
    # Function that simulates playing a game
    player1_score = Enum.random(1..10)
    player2_score = Enum.random(1..10)

    # Call function to determine the winner
    winner = determine_winner(player1_score, player2_score)

    # Update game state with new scores and winner
    game |> update_scores(player1_score, player2_score) |> update_winner(winner)
  end

  def determine_winner(player1_score, player2_score) do
    # Function that compares player scores to determine winner
    if (player1_score > player2_score) do
      return @player1
    else
      return @player2
    end
  end

  def update_scores(game, player1_score, player2_score) do
    # Function that updates the scores for each player in the game
    game.player1.score = game.player1.score + player1_score
    game.player2.score = game.player2.score + player2_score
    game
  end

  def update_winner(game, winner) do
    # Function that updates the winner of the game
    game.winner = winner
    game
  end
end

# Create a new game with two players
game = Game.new({:John, 0}, {:Sarah, 0})

# Play the game
game = Game.play(game)

# Print the winner and final scores
IO.puts "The winner is #{game.winner.name} with a score of #{game.winner.score}."
IO.puts "Player 1 has a final score of #{game.player1.score}."
IO.puts "Player 2 has a final score of #{game.player2.score}."

# Output:
# The winner is John with a score of 6.
# Player 1 has a final score of 6.
# Player 2 has a final score of 3.