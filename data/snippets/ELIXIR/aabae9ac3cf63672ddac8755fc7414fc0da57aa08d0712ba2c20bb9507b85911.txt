defmodule Example do
  @moduledoc """
  This module contains functions for manipulating strings.
  """

  @doc """
  This function reverses a given string.
  It uses recursion to traverse through the string and build a new string in reverse order.
  """
  def reverse(str) do
    str
    |> String.split("")
    |> Enum.reverse()
    |> List.foldl("", fn x, acc -> acc <> x end)
  end

  @doc """
  This function concatenates two strings together.
  It uses pattern matching and recursion to handle different types of strings.
  """
  def concat(str1, str2) do
    case {str1, str2} do
      {str1, ""} -> str1
      {"", str2} -> str2
      {str1, str2} when is_binary(str1) and is_binary(str2) -> str1 <> str2
      {str1, [h1 | t1]} -> concat(str1 <> h1, t1)
      {[h2 | t2], str2} -> concat(h2 <> str2, t2)
    end
  end
end