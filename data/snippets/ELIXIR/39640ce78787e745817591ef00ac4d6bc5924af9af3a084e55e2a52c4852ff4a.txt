defmodule User do
  @moduledoc """
  This module represents a user in the system.
  It contains functions for creating, updating, and deleting users.
  """

  # @type user :: %__MODULE__{
  #   id: integer(),
  #   name: String.t()
  # }
  @type user :: %__MODULE__{
    id: integer(),
    name: String.t()
  }

  # @spec create_user(String.t()) :: user
  def create_user(name) do
    new_id = generate_new_id()

    %__MODULE__{
      id: new_id,
      name: name
    }
  end

  # @spec update_user(user, String.t()) :: user
  def update_user(user, new_name) do
    %__MODULE__{
      id: user.id,
      name: new_name
    }
  end

  # @spec delete_user(user) :: :ok
  def delete_user(user) do
    :ok
  end

  # Private Functions

  # @spec generate_new_id() :: integer()
  defp generate_new_id do
    1 + last_user_id()
  end

  # @spec last_user_id() :: integer()
  defp last_user_id do
    max_id = Enum.max_by(User.get_all_users(), & &1.id)

    if max_id == nil do
      0
    else
      max_id
    end
  end

  # @spec get_all_users() :: [user]
  defp get_all_users do
    [
      %__MODULE__{
        id: 1,
        name: "John"
      },
      %__MODULE__{
        id: 2,
        name: "Mary"
      },
      %__MODULE__{
        id: 3,
        name: "Kate"
      }
    ]
  end
end