defmodule Bank do
  @purpose "Managing bank accounts and performing transactions"
  @version "1.0.0"
  @author "John Doe"

  @account_limit 100_000 # in dollars

  @doc """
  Creates a new bank account with the given name and initial balance.
  The account balance cannot exceed the account limit.
  Returns the created account.
  """

  @spec create_account(name :: String.t(), balance :: float) :: %Bank.Account{}
  def create_account(name, balance) when balance <= @account_limit do
    %Bank.Account{
      name: name,
      balance: balance
    }
  end

  @doc """
  Deposits the given amount into the specified account.
  Returns the updated account.
  """

  @spec deposit(account :: %Bank.Account{}, amount :: float) :: %Bank.Account{}
  def deposit(%Bank.Account{name: name, balance: current_balance}, amount) do
    updated_balance = current_balance + amount
    %Bank.Account{
      name: name,
      balance: updated_balance
    }
  end

  @doc """
  Withdraws the specified amount from the given account.
  Returns the updated account.
  """

  @spec withdraw(account :: %Bank.Account{}, amount :: float) :: %Bank.Account{}
  def withdraw(%Bank.Account{name: name, balance: current_balance}, amount) do
    updated_balance = current_balance - amount
    %Bank.Account{
      name: name,
      balance: updated_balance
    }
  end

end