# This code snippet uses a recursive function to merge two sorted arrays together
defmodule Merge do
  # Function that takes in two sorted arrays as parameters and returns a merged sorted array
  def merge(array1, array2) do
    # Base case: if array1 is empty, return array2
    if length(array1) == 0 do
      array2
    # Base case: if array2 is empty, return array1
    else if length(array2) == 0 do
      array1
    # Recursive case: if first element of array1 is smaller than first element of array2, add it to merged array and call function again with remaining elements of array1 and the full array2
    else if hd(array1) < hd(array2) do
      [hd(array1) | merge(tl(array1), array2)]
    # Recursive case: if first element of array2 is smaller than first element of array1, add it to merged array and call function again with full array1 and remaining elements of array2
    else
      [hd(array2) | merge(array1, tl(array2))]
    end
  end

  # Function that takes in a list of sorted arrays and returns a merged sorted array
  def merge_arrays(arrays) do
    # Base case: if only one array is left, return that array
    if length(arrays) == 1 do
      hd(arrays)
    # Recursive case: merge first two arrays together and call function again with resulting merged array and remaining arrays
    else
      merge(merge(hd(arrays), hd(tl(arrays))), merge_arrays(tl(tl(arrays))))
    end
  end
end

# Example input and output:
# list1 = [1, 3, 5, 7]
# list2 = [2, 4, 6, 8]
# list3 = [9, 11, 13, 15]
# list4 = [10, 12, 14, 16]
# merged = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
merge_arrays([list1, list2, list3, list4]) #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]