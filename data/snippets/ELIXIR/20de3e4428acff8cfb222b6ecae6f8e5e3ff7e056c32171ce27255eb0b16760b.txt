defmodule Example do
  # Define a module called Example
  use GenServer
  # Use the built-in GenServer behavior
  require Logger
  # Require the Logger module for logging functionality
  @server_name "my_server"
  # Set a private variable for the server name
  def start_link(initial_state) do
    # Define a function called start_link that takes in an initial state
    GenServer.start_link(__MODULE__, initial_state, name: @server_name)
    # Use the GenServer.start_link function to start the server with the initial state and assign it the server name
  end
  
  def init(initial_state) do
    # Define a function called init that takes in an initial state
    Logger.info("#{@server_name} started with initial state: #{inspect initial_state}")
    # Use the Logger.info function to log the server's name and initial state
    {:ok, initial_state}
    # Return ok and the initial state as a tuple
  end
  
  def handle_cast({:add, num}, state) do
    # Define a function called handle_cast that takes in a tuple with the atom :add and a number as parameters, as well as the current state
    new_state = state + num
    # Add the number to the current state and assign it to a new variable
    Logger.info("#{@server_name} received the request to add #{num}, new state: #{new_state}")
    # Use the Logger.info function to log the server's name, the number being added, and the new state
    {:noreply, new_state}
    # Return noreply and the new state as a tuple
  end
  
  def handle_cast({:subtract, num}, state) do
    # Define a function called handle_cast that takes in a tuple with the atom :subtract and a number as parameters, as well as the current state
    new_state = state - num
    # Subtract the number from the current state and assign it to a new variable
    Logger.info("#{@server_name} received the request to subtract #{num}, new state: #{new_state}")
    # Use the Logger.info function to log the server's name, the number being subtracted, and the new state
    {:noreply, new_state}
    # Return noreply and the new state as a tuple
  end
  
  def handle_info({:get, sender}, state) do
    # Define a function called handle_info that takes in a tuple with the atom :get and the process id of the sender as parameters, as well as the current state
    Logger.info("#{@server_name} received the request to get the current state from process #{sender}")
    # Use the Logger.info function to log the server's name and the process id of the sender
    {:reply, state, state}
    # Return reply, the current state and the current state as a tuple
  end
  
  def handle_info(_msg, state) do
    # Define a function called handle_info that takes in any message and the current state as parameters
    {:noreply, state}
    # Simply return noreply and the current state as a tuple
  end
  
  def get_state(server) do
    # Define a function called get_state that takes in the server name as a parameter
    GenServer.call(server, {:get, self()})
    # Use the GenServer.call function to send a tuple with the atom :get and the process id of self as parameters to the server
  end
  
  def add(server, num) do
    # Define a function called add that takes in the server name and a number as parameters
    GenServer.cast(server, {:add, num})
    # Use the GenServer.cast function to send a tuple with the atom :add and the number as parameters to the server
  end
  
  def subtract(server, num) do
    # Define a function called subtract that takes in the server name and a number as parameters
    GenServer.cast(server, {:subtract, num})
    # Use the GenServer.cast function to send a tuple with the atom :subtract and the number as parameters to the server
  end
end