defmodule User do
  @moduledoc """
  This module represents a user in the system.
  It contains functions for creating, updating and deleting users.
  """

  @require_keys [:name, :age, :email]

  @doc """
  Creates a new user with the given parameters.
  
  ## Examples
  
  iex> User.create("John", 25, "john@example.com")
  {:ok, %User{name: "John", age: 25, email: "john@example.com"}}
  
  iex> User.create("Jane", 29, "")
  {:error, :invalid_email}
  """
  def create(name, age, email) do
    # Validate email
    if is_valid_email?(email) do
      # Create a user map with required keys
      user = %{name: name, age: age, email: email}
      # Return ok with user map if all required keys are present
      if keys_exist?(user) do
        {:ok, user}
      # Return error with message if any required key is missing
      else
        {:error, :missing_keys}
      end
    # Return error if email is not valid
    else
      {:error, :invalid_email}
    end
  end

  @doc """
  Updates the given user with the new parameters.

  ## Examples

  iex> User.update(%User{name: "John", age: 25, email: "john@example.com"}, name: "Johnny")
  %User{name: "Johnny", age: 25, email: "john@example.com"}

  iex> User.update(%User{name: "John", age: 25, email: "john@example.com"}, email: "john@example.net")
  %User{name: "John", age: 25, email: "john@example.net"}
  """
  def update(user, new_params) do
    # Merge the existing user map with the new parameters
    updated_user = Map.merge(user, new_params)
    # Validate email
    if is_valid_email?(updated_user.email) do
      # Return updated user
      updated_user
    # Return error if email is not valid
    else
      {:error, :invalid_email}
    end
  end

  @doc """
  Deletes the given user.

  ## Examples

  iex> User.delete(%User{name: "Jane", age: 29, email: "jane@example.com"})
  :ok
  """
  def delete(user) do
    # Delete user and return :ok
    :ok
  end

  # Private functions
  defp keys_exist(user) do
    # Check if all required keys are present in the user map
    for key <- @require_keys, key in Map.keys(user), do: key in Map.keys(user)
  end

  defp is_valid_email?(email) do
    # Validate email using a regex pattern
    Regex.match?(~r/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/, email)
  end
end