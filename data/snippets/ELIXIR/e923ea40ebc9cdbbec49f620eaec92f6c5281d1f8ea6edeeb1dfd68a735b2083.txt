defmodule User do
  @moduledoc """
  This is a user module that handles user creation and authentication.
  """
  require Logger

  # Function: create_user
  # Description: This function creates a new user with the given parameters.
  # Inputs:
  # - name (string): the name of the user
  # - email (string): the email address of the user
  # - password (string): the password for the user's account
  # Output:
  # - user (map): a map containing the user's information
  def create_user(name, email, password) do
    # Check if user already exists by email
    if find_user_by_email(email) == nil do
      # Generate a unique id for the user
      user_id = generate_user_id()
      
      # Hash the user's password for security
      hashed_password = hash_password(password)
      
      # Create a user map with the given parameters
      user = %{
        id: user_id,
        name: name,
        email: email,
        password: hashed_password
      }
      
      # Save the user to the database
      save_user(user)
      
      # Log user creation
      Logger.info("User created: #{name}")
      
      # Return the user map
      user
    else
      # User already exists with given email, throw error
      raise "User with email #{email} already exists"
    end
  end
  
  # Helper function to retrieve user by email from database
  defp find_user_by_email(email) do
    # Database query to find user with given email
    # For the sake of this code snippet, we'll return nil if not found
    nil
  end
  
  # Helper function to generate a unique id for the user
  defp generate_user_id() do
    # Generate a random number and convert to string
    random_num = :rand.uniform()
    id = to_string(random_num)
    # Append "user_" to the id for clarity
    "user_" <> id
  end
  
  # Helper function to hash the user's password
  def p hash_password(password) do
    # Use Elixir's built-in hashing library
    :erlang.phash2(password)
  end
  
  # Helper function to save the user to the database
  defp save_user(user) do
    # Database query to save user
    # For the sake of this code snippet, we'll just log the user's information
    Logger.info("User saved: #{inspect user}")
  end
end