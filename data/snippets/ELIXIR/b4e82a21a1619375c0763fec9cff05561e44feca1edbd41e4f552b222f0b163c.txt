defmodule User do
  # Function that takes in a list of users and sorts them alphabetically by name
  def sort_users(users) do
    users
    # Converts all names to lowercase for easier sorting
    |> Enum.map(fn user -> %{user | name: String.downcase(user.name)} end)
    # Sorts the users alphabetically by name
    |> Enum.sort(fn user1, user2 -> user1.name < user2.name end)
  end
  
  # Function that calculates the average age of the users in the list
  def calculate_average_age(users) do
    # Filters out any users that do not have an age attribute
    filtered_users = users |> Enum.filter(fn user -> Map.has_key?(user, :age) end)
    # Uses Enum.reduce to sum up the ages of all users in the list
    total_age = Enum.reduce(filtered_users, 0, fn user, acc -> acc + user.age end)
    # Calculates the average age by dividing the total age by the number of users
    average_age = total_age / length(filtered_users)
    # Returns the average age as a float with two decimal places
    Float.round(average_age, 2)
  end
  
  # Function that checks if a user's name contains a specific keyword
  def keyword_in_name?(user, keyword) do
    # Converts the user's name to lowercase for easier comparison
    name = String.downcase(user.name)
    # Checks if the keyword is contained in the user's name
    String.contains?(name, keyword)
  end
end