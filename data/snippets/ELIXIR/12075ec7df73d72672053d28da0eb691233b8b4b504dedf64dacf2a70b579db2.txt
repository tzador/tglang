defmodule Math {
    # Define a function that takes in two numbers and returns their sum
    def add(a, b) do
        # Use pattern matching to check if a and b are numbers
        case {a, b} do
            {num1, num2} when is_number(num1) and is_number(num2) ->
                # Use the plus operator to add the two numbers together
                num1 + num2
            _ ->
                # If a and b are not numbers, raise an argument error
                raise ArgumentError, "Input must be numbers"
        end
    end

    # Define a function that takes in a list of numbers and returns
    # the average of the numbers
    def average(nums) do
        # Use pattern matching to check if nums is a list
        case nums do
            [] ->
                # If the list is empty, raise an argument error
                raise ArgumentError, "List cannot be empty"
            [head | tail] ->
                # Use recursion to sum up all the numbers in the list
                # and keep track of the number of elements
                {sum, count} = Enum.reduce(nums, {0, 0}, fn num, acc ->
                    {acc_sum, acc_count} = acc
                    {acc_sum + num, acc_count + 1}
                end)
                # Divide the sum by the count to get the average
                # and round it to two decimal places
                round(sum/count, 2)
            _ ->
                # If nums is not a list, raise an argument error
                raise ArgumentError, "Input must be a list"
        end
    end
}