defmodule ExampleModule do
  @moduledoc """
  This is a documentation for the ExampleModule.
  """

  # Defines a public function that takes in two parameters: x and y
  # and multiplies them together.
  @doc """
  Multiplies the given number by the given multiplier.
  # Parameters:
  # - `x` - The number to be multiplied.
  # - `y` - The multiplier.
  # Returns the product of x and y.
  """
  def multiply(x, y) do
    # Checks if x or y is not a number
    case  {x, y} do
      {_, y when is_number(y) ==  false} -> :error
      {x, _ when is_number(x) ==  false} -> :error
      {x, y} -> x * y
    end
  end

  # Defines a private function that takes in a list and recursively calculates
  # the sum of all its elements.
  defp recursive_sum(list) do
    case list do
      [] -> 0
      [head | tail] -> head + recursive_sum(tail)
    end
  end
end