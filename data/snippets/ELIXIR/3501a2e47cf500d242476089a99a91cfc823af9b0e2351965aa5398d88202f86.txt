defmodule ModuleName do
  # This is a module that contains various functions to manipulate lists

  # Function to find the length of a given list
  def length(list) do
    case list do
      [] -> 0 # An empty list has a length of 0
      [_ | tail] -> 1 + length(tail) # If the list is not empty, add 1 and recursively call the function on the tail of the list
    end
  end

  # Function to reverse a given list
  def reverse(list) do
    case list do
      [] -> [] # An empty list reversed is still an empty list
      [head | tail] -> reverse(tail) ++ [head] # Recursively call the function on the tail of the list and append the head to the end
    end
  end

  # Function to check if a given list is a palindrome (same forwards and backwards)
  def is_palindrome(list) do
    if list == reverse(list) do # Compare the list to its reversed version
      true
    else
      false
    end
  end

  # Function to calculate the sum of all elements in a given list
  def sum(list) do
    case list do
      [] -> 0 # An empty list has a sum of 0
      [head | tail] -> head + sum(tail) # Add the head to the sum of the tail of the list
    end
  end
end