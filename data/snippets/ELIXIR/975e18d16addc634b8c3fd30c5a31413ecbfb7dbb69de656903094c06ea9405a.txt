defmodule Math do   #Defines a new module called Math

  ## Function that calculates the factorial of a number using recursion 
  def factorial(n) when n == 0, do: 1
  def factorial(n) when n > 0 do
    n * factorial(n-1)
  end

  ## Function that calculates the nth Fibonacci number using pattern matching
  def fib(n) when n == 0, do: 0
  def fib(n) when n == 1, do: 1
  def fib(n) when n > 1 do
    fib(n-1) + fib(n-2)
  end

  ## Function that returns the square root of a number using the Babylonian method
  def sqrt(n) when n < 0, do: :error   #Returns an error if the number is negative
  def sqrt(n) when n == 0, do: 0       #Base case
  def sqrt(n) do
    sqrt_iter(n, n/2, 0)              #Calls the helper function with initial values
  end

  defp sqrt_iter(n, guess, prev_guess) do #Helper function with 3 parameters
    if good_enough?(n, guess, prev_guess) do #Checks if the current guess is accurate enough
      guess                               #If yes, returns guess as the square root
    else
      new_guess = improve_guess(n, guess)  #If not, calculates a new guess
      sqrt_iter(n, new_guess, guess)       #Recursive call with new and previous guesses
    end
  end

  ## Function that checks if the current guess is accurate enough
  defp good_enough?(n, guess, prev_guess) do
    abs(guess - prev_guess) <= 0.000001   #Checks if the difference between new and previous guess is small
  end

  ## Function that calculates a better guess using the Babylonian method
  defp improve_guess(n, guess) do
    (guess + n/guess)/2                    #Calculates the new guess using the formula
  end

  ## Function that prints the first n Fibonacci numbers
  def print_fib(n) do
    for i <- 0..n do                      #Iterates from 0 to n 
      IO.puts fib(i)                      #Calls the fib function to print the nth Fibonacci number
    end
  end
end

# Example calls:
Math.factorial(5)      #Output: 120
Math.fib(10)           #Output: 55
Math.sqrt(100)         #Output: 10.000000994937383
Math.print_fib(5)      #Output: 0, 1, 1, 2, 3, 5