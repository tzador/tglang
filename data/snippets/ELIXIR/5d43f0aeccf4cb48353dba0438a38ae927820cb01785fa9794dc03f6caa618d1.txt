defmodule User do
  @moduledoc """
  This module represents a user and contains functions
  for creating a new user and retrieving user information.
  """

  @typep struct(
    name :: String.t(),
    age :: integer(),
    email :: String.t()
  )
  # Define a struct with fields for name, age, and email
  # @typep annotation specifies the types of each field

  @spec create_user(String.t(), integer(), String.t()) :: {:ok, struct()} | {:error, String.t()}
  # The @spec annotation specifies the function's type spec
  # Takes in a name, age, and email and either returns {:ok, user} or {:error, message}

  def create_user(name, age, email) do
    # Function to create a new user with the specified name, age, and email
    if String.length(name) > 0 && age >= 18 && String.match?(email, ~r/\A[^@]+@[^@]+\z/) do
      # Checks if name is not empty, age is 18 or over, and email is valid
      %User{name: name, age: age, email: email}
      # Creates a new user struct with specified fields
      |> {:ok, _} # return {:ok, user} if successful

    else
      {:error, "Invalid user data"}
      # Return {:error, message} if any of the checks fail
    end
  end

  @spec get_user_name(struct()) :: String.t()
  # The @spec annotation specifies the function's type spec
  # Takes in a user struct and returns their name

  def get_user_name(user) do
    # Function to retrieve the name of a user
    user.name # returns the user's name
  end
end