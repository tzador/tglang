defmodule Users do
  @moduledoc """
  This module handles all user-related functionality
  """

  import Ecto.Query

  alias MyApp.Repo
  alias MyApp.User

  use Ecto.Schema

  schema "users" do
    field :name, :string
    field :email, :string
    field :password, :string

    timestamps()
  end

  @doc """
  Inserts a new user into the database
  """
  def insert_user(name, email, password) do
    %User{}
    |> Ecto.Changeset.cast(%{name: name, email: email, password: password}, [:name, :email, :password])
    |> Ecto.Changeset.validate_required([:name, :email, :password])
    |> Ecto.Changeset.unique_constraint(:email)
    |> Repo.insert()
  end

  @doc """
  Finds a user by their email
  """
  def find_user_by_email(email) do
    from(user in User, where: user.email == ^email)
    |> Repo.one()
  end

  @doc """
  Updates a user's name in the database
  """
  def update_user_name(user_id, new_name) do
    User
    |> where(id: ^user_id)
    |> Repo.update_all(set: [name: ^new_name])
  end
end