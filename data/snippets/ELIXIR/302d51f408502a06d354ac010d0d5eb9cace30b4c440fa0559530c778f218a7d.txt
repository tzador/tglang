defmodule TestModule do
  @moduledoc """
  This is a test module in Elixir that contains a complex function.
  """
  @name "Test Module"

  use GenServer

  # Start the GenServer process
  def start_link(arg) do
    GenServer.start_link(__MODULE__, arg)
  end

  # GenServer callbacks
  def init(arg) do
    {:ok, %{arg: arg}}
  end

  def handle_call(:my_function, _from, %{arg: arg} = state),
    do: { :reply, my_function(arg), state }

  def handle_call(:my_other_function, _from, %{arg: arg} = state),
    do: { :reply, my_other_function(arg), state }

  def handle_cast({:my_function, val}, %{arg: arg} = state),
    do: {:noreply, %{state | result: my_function(val)}}

  def handle_cast({:my_other_function, val}, %{arg: arg} = state),
    do: {:noreply, %{state | result: my_other_function(val)}}

  def my_function(arg) do
    # complex logic
    result = arg * 2
    # do some other operations
    result = result |> divide_by_3 |> subtract_10
    # return result
    result
  end

  def my_other_function(arg) do
    # complex logic
    result = arg * 3
    # do some other operations
    result = result |> multiply_by_4 |> add_20
    # return result
    result
  end

  # Helper functions
  def divide_by_3(num) do
    result = num / 3
    result
  end

  def subtract_10(num) do
    result = num - 10
    result
  end

  def multiply_by_4(num) do
    result = num * 4
    result
  end

  def add_20(num) do
    result = num + 20
    result
  end
end