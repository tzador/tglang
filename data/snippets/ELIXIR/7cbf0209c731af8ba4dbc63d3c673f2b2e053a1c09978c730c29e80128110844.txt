defmodule User do 
  # Defining a struct to represent a user
  @enforce_keys [:name, :age, :email]
  defstruct [:name, :age, :email]

  # Defining user functions
  # A function to create a new user
  @spec new(name :: String.t, age :: integer, email :: String.t) :: %User{}
  def new(name, age, email) do
    %User{
      name: name,
      age: age,
      email: email
    }
  end

  # A function to get the user's name
  @spec get_name(user :: %User{}) :: String.t
  def get_name(user), do: user.name

  # A function to get the user's age
  @spec get_age(user :: %User{}) :: integer
  def get_age(user), do: user.age

  # A function to get the user's email
  @spec get_email(user :: %User{}) :: String.t
  def get_email(user), do: user.email

  # A function to update a user's name
  @spec update_name(user :: %User{}, name :: String.t) :: %User{}
  def update_name(user, name) do
    %User{
      name: name,
      age: user.age,
      email: user.email
    }
  end

  # A function to update a user's age
  @spec update_age(user :: %User{}, age :: integer) :: %User{}
  def update_age(user, age) do
    %User{
      name: user.name,
      age: age,
      email: user.email
    }
  end

  # A function to update a user's email
  @spec update_email(user :: %User{}, email :: String.t) :: %User{}
  def update_email(user, email) do
    %User{
      name: user.name,
      age: user.age,
      email: email
    }
  end
end