defmodule User do
  @moduledoc """
  This module is responsible for managing user data and permissions.
  """

  @moduledoc """
  This struct represents a user's profile.
  """
  defstruct name: "", age: 0, email: "", permissions: []

  @spec new(String.t, integer, String.t, list) :: User.new()
  def new(name, age, email, permissions) do
    %User{name: name, age: age, email: email, permissions: permissions}
  end

  @spec has_permission?(User.t, String.t) :: boolean
  def has_permission?(user, permission) do
    Enum.member?(user.permissions, permission)
  end
end

# Creating a new user
user = User.new("John", 25, "john@example.com", ["read", "write"])
# Checking if user has "read" permission
User.has_permission?(user, "read")