defmodule Recursion do
  # A module in Elixir is created using the 'defmodule' keyword
  # followed by the name of the module and 'do' keyword
  # 'do' signifies the start of the module's block
  def fib(n) when n <= 0, do: "Invalid input" 

  def fib(n) when n == 1 or n == 2, do: 1

  # Using pattern matching to define a recursive function
  def fib(n) do
    fib(n-1) + fib(n-2) # Calculation of Fibonacci numbers
  end
end

IO.puts "Enter a positive integer: "
# Asks the user to enter a positive integer

num = String.trim(IO.gets(""))

# Gets user input and trims any trailing spaces

fib_num = fib(String.to_integer(num))

# Converting the string input to an integer and storing it in a variable

IO.puts "Fibonacci number at #{num} is #{fib_num}"
# Outputs the result in the format "Fibonacci number at (input) is (result)"