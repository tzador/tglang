# Function to generate all possible permutations of a given list
defmodule Permutations do

  # Function to recursively generate permutations
  def generate_permutations(list) do
    # If list is empty, return empty list
    if length(list) == 0 do
      []
    else
      # Generate all permutations of the rest of the list
      # by recursively calling the function
      for perm <- generate_permutations(remove_first(list)) do
        # Insert the first element of the original list
        # at every position of the generated permutation
        insert_at_all(list, perm)
      end
    end
  end

  # Function to remove the first element from a list
  def remove_first(list) do
    # Split the list into head and tail
    [hd | tl] = list

    # Return the tail of the list
    tl
  end

  # Function to insert an element at all positions of a list
  def insert_at_all(element, list) do
    # If list is empty, insert the element as a list
    # and return it
    if length(list) == 0 do
      [[element]]
    else
      # Insert the element at the head of the list
      # and recursively call the function on the rest of the list
      [element | list] ++ insert_at_all(element, list)
    end
  end

end

# Example usage
input = [1, 2, 3]

# Generate all permutations of the input list
output = Permutations.generate_permutations(input)

# Print the output list
IO.puts(output)

# Output: [[1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1]]