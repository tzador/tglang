defmodule Robot do
  # defining a module named "Robot"

  @on_command "on"
  # setting a constant "on_command" to the string "on"

  @off_command "off"
  # setting a constant "off_command" to the string "off"

  # defining a function "new" which takes in a name and returns a new instance of Robot struct
  def new(name) do
    %__MODULE__{
      name: name,
      status: @off_command,
      position: {0, 0}
    }
    # double underscores before and after "MODULE" placeholder represents the current module being defined
  end

  # defining a function "move" which takes in a Robot instance and a direction and updates the position based on the given direction
  def move(%__MODULE__{position: {x, y}}, :up) do
    %__MODULE__{position: {x, y + 1}}
  end

  def move(%__MODULE__{position: {x, y}}, :down) do
    %__MODULE__{position: {x, y - 1}}
  end

  def move(%__MODULE__{position: {x, y}}, :right) do
    %__MODULE__{position: {x + 1, y}}
  end

  def move(%__MODULE__{position: {x, y}}, :left) do
    %__MODULE__{position: {x - 1, y}}
  end

  # defining a function "turn_on" which takes in a Robot instance and updates its status to on
  def turn_on(%__MODULE__{name: name, status: @off_command}) do
    %__MODULE__{name: name, status: @on_command}
  end

  # defining a function "turn_off" which takes in a Robot instance and updates its status to off
  def turn_off(%__MODULE__{name: name, status: @on_command}) do
    %__MODULE__{name: name, status: @off_command}
  end
end