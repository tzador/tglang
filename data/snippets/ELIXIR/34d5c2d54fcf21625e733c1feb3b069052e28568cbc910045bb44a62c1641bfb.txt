defmodule Calculator do
    # This module serves as a basic calculator.
    
    # Function to add two numbers
    def add(number1, number2) do
        return number1 + number2
    end
    
    # Function to subtract two numbers
    def subtract(number1, number2) do
        return number1 - number2
    end
    
    # Function to multiply two numbers
    def multiply(number1, number2) do
        return number1 * number2
    end
    
    # Function to divide two numbers
    # This function includes a guard clause to prevent division by zero
    def divide(number1, number2) when number2 != 0 do
        return number1 / number2
    end
    
    # Function to calculate the power of a number
    def power(number, exponent) do
        # Helper function to recursively calculate power
        def power_helper(number, exponent, result) when exponent == 0 do
            return result
        end
        def power_helper(number, exponent, result) do
            return power_helper(number, exponent - 1, result * number)
        end
        
        # Check if exponent is negative, if so, use power_helper function and divide result by 1
        if exponent < 0 do
            return 1 / power_helper(number, abs(exponent), 1)
        else
            return power_helper(number, exponent, 1)
        end
    end
    
    # Function to calculate the square root of a number
    def sqrt(number) do
        # Set the initial approximation to be the number itself
        approx = number
        # Helper function to recursively calculate a better approximation using Newton's method
        def newton(x, number) do
            return x - (x * x - number) / (2 * x)
        end
        
        # Loop until a satisfactory approximation is reached
        # We set the maximum number of iterations to be 100
        for _ <- 1..100 do
            approx = newton(approx, number)
        end
        return approx
    end
end