defmodule CircularList do # Creates a module named CircularList
  @moduledoc """
  This module implements a circular list data structure in Elixir.
  """

  @list_size 10 # Sets a default size of 10 for the circular list

  defstruct front: 0, back: 0, size: 0, list: %{} # Defines the structure of the circular list with initial values

  def new(list), do: %__MODULE__{list: list, size: Enum.count(list)} # Creates a new circular list with given values

  def new(), do: %__MODULE__{list: Enum.take(1..@list_size, @list_size), size: @list_size} # Creates a new circular list with default values

  @doc """
  Returns the size of the circular list.
  """
  def size(list), do: list.size # Returns the size of the given circular list

  @doc """
  Returns the element at the given index in the circular list.
  If the index is out of bounds, it will wrap around to the beginning of the list.
  """
  def get(list, index) do # Defines a function to get the element at a given index in the circular list
    if index < 0 do # Checks if the index is negative and converts it to a positive index
      index = list.size + index
    end
    rem(index, list.size) # Uses the remainder function to wrap the index around if it is larger than the size of the list
    Map.get(list.list, index) # Uses the Map.get function to retrieve the element at the index from the list
  end

  defp insert_front(list, element) do # Defines a private function to insert an element at the front of the list
    list.list = Map.put(list.list, list.front, element) # Uses the Map.put function to add the element at the front of the list
    list.size = list.size + 1 # Increases the size of the list by 1
    list.front = rem(list.front - 1, list.size) # Updates the front index by subtracting 1 and wrapping it around if needed
    list
  end

  defp insert_back(list, element) do # Defines a private function to insert an element at the back of the list
    list.list = Map.put(list.list, list.back, element) # Uses the Map.put function to add the element at the back of the list
    list.size = list.size + 1 # Increases the size of the list by 1
    list.back = rem(list.back + 1, list.size) # Updates the back index by adding 1 and wrapping it around if needed
    list
  end

  @doc """
  Inserts an element at the front of the circular list.
  If the list is full, the element at the back will be replaced.
  """
  def insert_front(list, element) do
    if list.size >= @list_size do # Checks if the list is full
      list = insert_back(list, element) # If full, replaces the element at the back
      list = remove_front(list) # Removes the element at the front to keep the size of the list constant
    else # If not full, inserts the element at the front using the private function
      list = insert_front(list, element)
    end
    list
  end

  @doc """
  Inserts an element at the back of the circular list.
  If the list is full, the element at the front will be replaced.
  """
  def insert_back(list, element) do
    if list.size >= @list_size do
      list = insert_front(list, element)
      list = remove_back(list)
    else
      list = insert_back(list, element)
    end
    list
  end

  defp remove_front(%{front: front} = list) do # Defines a private function to remove the element at the front of the list
    list.list = Map.delete(list.list, front) # Uses the Map.delete function to remove the element at the front
    list.size = list.size - 1 # Decreases the size of the list by 1
    list # Returns the updated list
  end

  defp remove_back(%{back: back} = list) do # Defines a private function to remove the element at the back of the list
    list.list = Map.delete(list.list, back) # Uses the Map.delete function to remove the element at the back
    list.size = list.size - 1 # Decreases the size of the list by 1
    list # Returns the updated list
  end
end