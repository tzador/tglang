defmodule Example do
  @moduledoc """
  This module provides functions for manipulating lists of integers
  """

  # Annotated code snippet to initialize a list of integers
  def init_list do
    # Generate a random integer between 0 and 100
    random_int = Enum.random(0..100)

    # Create a list of 10 elements, each being a random integer between 0 and 100
    list = Enum.map(1..10, fn _ -> random_int end)

    # Print the list to the console
    IO.puts(list)

    # Return the list
    list
  end

  # Annotated code snippet to find the average of a list of integers
  def average(list) do
    # Check if the list is empty
    if Enum.empty?(list) do
      # If empty, return nil
      nil
    else
      # Calculate the sum of all integers in the list
      sum = Enum.reduce(list, 0, fn x, acc -> x + acc end)

      # Calculate the length of the list
      len = length(list)

      # Calculate the average by dividing the sum by the length
      average = sum / len

      # Print the average to the console
      IO.puts("The average is #{average}")

      # Return the average
      average
    end
  end
end