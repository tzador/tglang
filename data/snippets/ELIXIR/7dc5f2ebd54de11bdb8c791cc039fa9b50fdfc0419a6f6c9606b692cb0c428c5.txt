defmodule Bank.Account do
  @start_balance 0

  defstruct name: "", balance: @start_balance

  def create(name) do
    %__MODULE__{name: name}
    |> deposit(100)
  end

  @doc """
  Returns the account's current balance.
  """
  def balance(%__MODULE__{balance: balance}), do: balance

  @doc """
  Deposits the given amount into the account's current balance and returns the updated balance.
  """
  def deposit(%__MODULE__{balance: balance}, amount) when is_number(amount), do: balance + amount

  @doc """
  Withdraws the given amount from the account's current balance and returns the updated balance.
  """
  def withdraw(%__MODULE__{balance: balance}, amount) when is_number(amount) and balance >= amount, do: balance - amount

  @doc """
  Transfers the given amount from one account's balance to another account's balance and returns the updated balances.
  """
  def transfer(from_acc, to_acc, amount) do
    from_balance = balance(from_acc)
    to_balance = balance(to_acc)

    if from_balance >= amount do
      from_new_balance = from_balance - amount
      to_new_balance = to_balance + amount

      %__MODULE__{from_acc | balance: from_new_balance}, %__MODULE__{to_acc | balance: to_new_balance}
    else
      raise "Insufficient funds in account"
    end
  end
end

john = Bank.Account.create("John")
mary = Bank.Account.create("Mary")

john_balance = Bank.Account.balance(john)
mary_balance = Bank.Account.balance(mary)

john, mary = Bank.Account.transfer(john, mary, 500)

new_john_balance = Bank.Account.balance(john)
new_mary_balance = Bank.Account.balance(mary)