defmodule Example do
  @moduledoc """
  This is a simple module that showcases the use of functions and pattern matching in Elixir.
  """

  def add_two_numbers(a, b) when is_number(a) and is_number(b) do
    a + b
  end

  def add_two_numbers(a, b) when is_list(a) and is_list(b) do
    [a | b]
  end

  @doc """
  This function takes in two numbers and adds them together.
  If the input is a list, it will concatenate the two lists together.
  """
  def add(a, b) do
    # Use pattern matching to determine which add_two_numbers function to use
    case {a, b} do
      {_, _} when is_number(a) and is_number(b) ->
        add_two_numbers(a, b)
      {_, _} when is_list(a) and is_list(b) ->
        add_two_numbers(a, b)
      _ ->
        "Invalid input"
    end
  end

  def greet(name) when is_atom(name) do
    "Hello #{name}!"
  end

  def greet(name) when is_binary(name) do
    "Hello #{String.capitalize(name)}!"
  end

  def greet(name) when is_list(name) do
    "Hello #{List.to_string(name)}!"
  end

  @doc """
  This function takes in a name and greets them.
  If the input is an atom, it will simply greet the person by their name.
  If the input is a string, it will capitalize the string before greeting.
  If the input is a list, it will convert the list to a string before greeting.
  """
  def greet_person(name) do
    # Use pattern matching to determine which greet function to use
    case name do
      name when is_atom(name) ->
        greet(name)
      name when is_binary(name) ->
        greet(name)
      name when is_list(name) ->
        greet(name)
      _ ->
        "Invalid input"
    end
  end

  # Use the Example module to add numbers or greet people
  IO.puts add(5, 3)
  IO.puts add([1, 2], [3, 4])
  IO.puts greet_person(:world)
  IO.puts greet_person("elixir")
  IO.puts greet_person(["hello", "world"])
end