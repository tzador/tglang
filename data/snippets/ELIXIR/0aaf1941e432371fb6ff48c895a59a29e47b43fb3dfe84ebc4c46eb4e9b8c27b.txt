defmodule Module do  # this creates a module named "Module" in Elixir
  use GenServer  # this allows the module to use the built-in GenServer behavior

  # this function initializes the state of the module upon creation
  def init(args) do
    state = %{data: [], args: args}  # creates a map with two keys: data and args
    {:ok, state}  # returns a tuple with the atom :ok to indicate success and the state as the second element
  end

  # this function handles incoming messages for the module
  def handle_info(:start, state) do
    IO.puts "Module started"  # prints "Module started" to the console
    {:noreply, state}  # returns a tuple with the atom :noreply to indicate no response needed and the updated state
  end

  # this function handles incoming messages with a specific pattern
  def handle_info({:add, value}, state) do
    new_state = %{state | data: [value | state.data]}  # updates the data in the state by adding the new value to the beginning of the list
    {:noreply, new_state}  # returns a tuple with the atom :noreply to indicate no response needed and the updated state
  end

  # this function handles incoming messages with a different specific pattern
  def handle_info({:remove, value}, state) do
    filtered_state = %{state | data: Enum.filter(state.data, fn x -> x != value end)}  # updates the data in the state by filtering out the specified value
    {:noreply, filtered_state}  # returns a tuple with the atom :noreply to indicate no response needed and the updated state
  end
end