defmodule MyModule do
  # Defines a module called MyModule
  @moduledoc """
    This is a documentation for MyModule.
  """
  @some_constant 42
  # Defines a module attribute called some_constant and assigns it the value 42

  @doc """
    Docstring for my_function.
  """
  def my_function(arg1) do
    # Defines a function called my_function that takes in one argument, arg1
    IO.puts "The argument is #{arg1}."
    # Prints a string with the interpolated value of the argument
    IO.puts "The value of some_constant is #{@some_constant}."
    # Prints a string with the interpolated value of the module attribute
    %{foo: "bar"} = arg1
    # Destructures the argument and assigns the value of the key :foo to a variable called bar
    if bar == "bar" do
      # Checks if the value of bar is equal to "bar"
      IO.puts "The value of bar is indeed bar."
      # Prints a string if the condition is true
    end
    File.write("file.txt", "Hello, world!")
    # Writes the string "Hello, world!" to a file called file.txt
  end

  defp private_function() do
    # Defines a private function that cannot be accessed outside of this module
    IO.puts "This function can only be called within this module."
    # Prints a string
  end

  @external_call :external_module.external_function(15)
  # Defines a module attribute that calls a function from an external module and passes in an argument
end

MyModule.my_function(%{foo: "bar"})
# Calls the function my_function and passes in a map as an argument