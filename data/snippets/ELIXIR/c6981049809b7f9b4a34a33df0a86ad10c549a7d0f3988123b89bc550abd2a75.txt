defmodule ExampleModule do
  use GenServer

  ## `start_link/2` defines the behavior for starting the
  ## process, often limiting it to an API for
  ## GenServer.start_link/3.
  def start_link(arg \\ []) do
    GenServer.start_link(__MODULE__, arg, name: __MODULE__)
  end

  ## GenServer-callbacks can be private which prevents
  ## direct execution without GenServer.call/2 orã€€
  ## GenServer.cast/2.
  @doc "Stores the state in-memory."
  def handle_call({:get, key}, _from, state) do
    case Map.get(state, key) do
      [value] ->
        {:reply, value, state}
      nil ->
        {:reply, nil, state}
    end
  end

  ## Public API

  ## `new` starts the process and assigns initial state.
  ## The `init/1` definitions below tell the behavior
  ## to store `:temp` and `:data` in the state.
  @doc "Creates new user"
  def new({:temp, :data}) do
    start_link(%{__MODULE__: __MODULE__, :temp})
  end

  ## `get_user` does one synchronous messaging,
  ## DO NOT confuse this with `handle_call/3`.
  ## In this call-style, the first element of the tuple
  ## must be an atom `__MODULE__` referring to this
  ## module.
  @doc "Gets user based on given key"
  def get_user(key) do
    GenServer.call({__MODULE__, :get, key})
  end

  ## GenServer-callbacks cause the modules pattern matching
  ## to potential invocations of monitor
  def terminate(_reason, _state) do
    IO.puts "Sorry to see you go"
    :ok
  end
end