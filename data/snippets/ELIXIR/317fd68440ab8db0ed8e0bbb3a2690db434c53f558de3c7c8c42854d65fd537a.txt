defmodule LinkedList do  # creates a module named LinkedList
  
  # struct that defines the structure of each node in the linked list
  defstruct value: nil, next: nil

  # function that adds a new value to the beginning of the linked list
  def prepend(list, value) do
    [%LinkedList{value: value, next: list} | list]
  end

  # function that appends a new value to the end of the linked list
  def append(list, value) do
    list ++ [%LinkedList{value: value, next: nil}]
  end

  # function that removes the first occurrence of a given value in the linked list
  # and returns the updated list
  def remove(list, value) do
    # checks if list is empty
    if list == [] do
      # if empty, raise an error
      raise "List is empty"
    else
      # if not, call the remove function recursively
      # passing in the next node and the value to be removed
      case list do
        # if current node is the given value, remove it by not including it in the updated list
        [%LinkedList{value: value} | tail] -> tail
        # if current node is not the given value, keep the node in the updated list and continue the recursion
        [head | tail] -> [head | remove(tail, value)]
      end
    end
  end

  # function that inserts a new value at a given index in the linked list
  def insert(list, index, value) do
    # checks if list is empty or if index is smaller than 0
    if list == [] || index < 0 do
      # if so, raise an error
      raise "List is empty or index is smaller than 0"
    else
      # if not, call the insert function recursively
      # passing in the next node and the updated index
      case list do
        # if index is 0, insert the new value at the beginning of the linked list
        0 -> [%LinkedList{value: value, next: list}]
        # if index is larger than 0, keep the current node in the updated list and decrease the index value by 1
        _ when index > 0 -> [hd | insert(tl, index-1, value)]
      end
    end
  end
end