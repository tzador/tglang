defmodule Queue do
  @moduledoc """
  A data structure that represents a first-in, first-out queue.
  """

  defstruct front: nil, back: nil

  @doc """
  Adds a new element to the back of the queue.
  """
  def add(queue, element) when is_binary(element) do
    %{queue | back: [element | get_back(queue)]}
  end

  @doc """
  Removes and returns the front element of the queue.
  """
  def remove(queue) do
    case queue.front do
      nil ->
        {:error, "Queue is empty"}
      [head | tail] ->
        {:ok, head, %{queue | front: tail}}
    end
  end

  defp get_back(queue) do
    case queue.back do
      nil ->
        [queue.front]
      _ ->
        queue.back
    end
  end
end