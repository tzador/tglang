defmodule ShoppingCart do
  @moduledoc """
  This module represents a shopping cart and its operations.
  """

  # product is a map that contains keys: name, price, quantity
  @product %{name: "Shoes", price: 50, quantity: 1}
  @cart []

  # Adds a product to the cart
  def add_product(product) do
    case is_product_valid(product) do
      true ->
        @cart = [@cart | product]
        IO.puts "Product added to cart successfully."
      false ->
        IO.puts "Invalid product."
    end
  end

  # Removes a product from the cart
  def remove_product(product) do
    case is_product_valid(product) do
      true ->
        @cart = :lists.filter(fn p -> p != product end, @cart)
        IO.puts "Product removed from cart successfully."
      false ->
        IO.puts "Invalid product."
    end
  end

  # Calculates total price of all products in the cart
  defp calculate_total_price do
    Enum.reduce(@cart, 0, fn p, acc -> acc + p[:price] * p[:quantity] end)
  end

  # Checks if a product is valid (all keys present and values are integers)
  defp is_product_valid(product) do
    Map.has_key?(product, :name) and
    Map.has_key?(product, :price) and
    Map.has_key?(product, :quantity) and
    is_integer(product[:price]) and
    is_integer(product[:quantity])
  end

  # Prints the total price of all products in the cart
  def print_total_price do
    price = calculate_total_price()
    IO.puts "Total price of all products: #{price}."
  end

  # Prints the list of products in the cart
  def print_cart do
    IO.puts "Products in cart:"
    for product <- @cart do
      IO.puts " - #{product[:name]} x #{product[:quantity]}"
    end
  end
end