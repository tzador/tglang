defmodule Example do
  use GenServer
  # This module uses the GenServer behavior to implement a simple server that stores and retrieves data

  # Function to start the server and initialize its state
  def start_link(initial_data) do
    GenServer.start_link(__MODULE__, initial_data)
  end

  # Start callback for the GenServer behavior
  def init(initial_data) do
    {:ok, initial_data}
  end

  # Function to add data to the server's state
  def add_data(server, new_data) do
    GenServer.cast(server, {:add_data, new_data})
  end

  # Cast callback for the GenServer behavior
  def handle_cast({:add_data, new_data}, state) do
    {:noreply, Map.put(state, new_data.key, new_data.value)}
  end

  # Function to retrieve data from the server's state
  def retrieve_data(server, key) do
    GenServer.call(server, {:get_data, key})
  end

  # Call callback for the GenServer behavior
  def handle_call({:get_data, key}, _from, state) do
    {:reply, Map.get(state, key), state}
  end
end

# Starting the server with initial data
{:ok, server} = Example.start_link(%{key: "value"})

# Adding data to the server's state
Example.add_data(server, %{key: "new_key", value: "new_value"})

# Retrieving data from the server's state
Example.retrieve_data(server, "new_key")