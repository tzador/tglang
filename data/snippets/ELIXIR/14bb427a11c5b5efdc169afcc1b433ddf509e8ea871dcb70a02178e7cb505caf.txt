# This is a function that takes in two numbers and returns their sum.
# The function uses pattern matching to handle different cases.

defmodule Math do
  def add(num1, num2) do
    # Handle case when both numbers are integers
    %{valid?: true, result: num1 + num2} when is_integer(num1) and is_integer(num2)

    # Handle case when both numbers are floats
    %{valid?: true, result: num1 + num2} when is_float(num1) and is_float(num2)

    # Handle case when one number is an integer and the other is a float
    %{valid?: true, result: num1 + num2} when is_integer(num1) and is_float(num2) or is_integer(num2) and is_float(num1)

    # Handle case when one number is a string and the other is an integer
    %{valid?: true, result: String.to_integer(num1) + num2} when is_integer(num2) and is_binary(num1)

    # Handle case when one number is a string and the other is a float
    %{valid?: true, result: String.to_float(num1) + num2} when is_float(num2) and is_binary(num1)

    # Handle case when both numbers are strings
    %{valid?: true, result: String.to_integer(num1) + String.to_integer(num2)} when is_binary(num1) and is_binary(num2)

    # Handle invalid cases and return an error message
    %{valid?: false, error: "Invalid input, please provide two numbers."}
  end
end

# Function call with integers
Math.add(5, 10) #=> %{valid?: true, result: 15}

# Function call with floats
Math.add(3.5, 2.5) #=> %{valid?: true, result: 6.0}

# Function call with one integer and one float
Math.add(5, 2.5) #=> %{valid?: true, result: 7.5}

# Function call with one string and one integer
Math.add("10", 5) #=> %{valid?: true, result: 15}

# Function call with one string and one float
Math.add("2.5", 3.5) #=> %{valid?: true, result: 6.0}

# Function call with both strings
Math.add("5", "10") #=> %{valid?: true, result: 15}

# Function call with invalid input
Math.add("hello", 5) #=> %{valid?: false, error: "Invalid input, please provide two numbers."}