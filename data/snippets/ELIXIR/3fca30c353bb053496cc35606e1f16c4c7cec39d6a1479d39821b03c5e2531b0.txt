defmodule BankAccount do  # Defines a new Elixir module called BankAccount
  @balance 1000  # Sets a default balance of 1000

  def withdraw(amount) do  # Defines the withdraw function
    if @balance >= amount do  # Checks if the balance is greater than or equal to the requested amount
      @balance = @balance - amount  # Updates the balance by subtracting the requested amount
      {:ok, "Withdrawal successful. Your new balance is #{@balance}"}  # Returns a tuple with the success message and updated balance
    else
      {:error, "Insufficient funds. Your current balance is #{@balance}"}  # Returns a tuple with the error message and current balance
    end
  end

  def deposit(amount) do  # Defines the deposit function
    @balance = @balance + amount  # Updates the balance by adding the deposited amount
    {:ok, "Deposit successful. Your new balance is #{@balance}"}  # Returns a tuple with the success message and updated balance
  end

  def balance do  # Defines the balance function
    {:ok, "Your current balance is #{@balance}"}  # Returns a tuple with the success message and current balance
  end
end

# Example usage:
{:ok, deposit_message} = BankAccount.deposit(500)  # Deposits 500 into the account
IO.puts(deposit_message)  # Prints the deposit message
{:ok, withdrawal_message} = BankAccount.withdraw(200)  # Withdraws 200 from the account
IO.puts(withdrawal_message)  # Prints the withdrawal message
{:ok, current_balance_message} = BankAccount.balance()  # Retrieves the current balance
IO.puts(current_balance_message)  # Prints the current balance message