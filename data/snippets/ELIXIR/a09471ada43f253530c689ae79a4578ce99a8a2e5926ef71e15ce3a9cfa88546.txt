# A function that computes the nth Fibonacci number
def fib(n) do
  # Create a map to store previously computed Fibonacci numbers
  fib_map = %{}

  # Recursive helper function to compute the Fibonacci number
  defp fib_helper(n, fib_map) do
    # Check if the current number is already in the map
    if Map.has_key?(fib_map, n) do
      # Return the cached result if it exists
      Map.get(fib_map, n)
    else
      # Otherwise, compute the Fibonacci number using recursion
      result = fib_helper(n-1, fib_map) + fib_helper(n-2, fib_map)
      # Store the result in the map for future use
      fib_map = Map.put(fib_map, n, result)
      # Return the result
      result
    end
  end

  # Start the recursive computation from the nth number
  fib_helper(n, fib_map)
end