defmodule ExampleModule do # Defines a new Elixir module named ExampleModule

  @moduledoc """
  This is a documentation block for the ExampleModule, used to describe its purpose and functionality.
  """

  @var_1 {:foo, "bar"}      # Defines a module attribute, a tuple with atom `:foo` and string "bar"

  @impl true                # Marks the following function definitions as implementation-defined

  @type map1 :: %{          # Defines a type `map1` as a map with atom keys and any values
    bar: any,               # Specifies that `bar` key can have any value
    baz: String.t()         # Specifies that `baz` key should have a string value
  }

  @type map2 :: %{          # Defines another type `map2` as a map with atom keys and integer values
    foo: integer,
    bar: integer
  }

  @spec my_function(map1, map2) :: list()  # Defines a specification for a function with two arguments and a list as return type

  def my_function(map1, map2) do   # Defines the function `my_function` with map arguments

    case map1.foo do                # Starts a `case` block based on the `bar` field in `map1`
      "any_value" -> :atom1         # If `bar` has the value `"any_value"`, return `:atom1`
      _ -> :atom2                   # For any other value, return `:atom2`
    end |
    case map2.bar do                # Starts another `case` block based on the `baz` field in `map2`
      integer when integer > 0 -> "Positive" ++ to_string(integer)     # If `baz` has a positive integer value, concatenate the string "Positive" and the integer converted to a string
      integer when integer < 0 -> "Negative" ++ to_string(integer)     # If `baz` has a negative integer value, concatenate the string "Negative" and the integer converted to a string
      _ -> "Zero"                                                      # For any other value, return the string "Zero"
    end |
    Enum.join(map1, map2)            # Joins the keys from both maps in a list and returns the result
  end
end