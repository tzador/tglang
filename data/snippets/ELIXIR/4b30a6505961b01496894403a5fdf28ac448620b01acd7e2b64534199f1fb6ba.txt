defmodule Math do
  @doc """
  Takes in a list of numbers and calculates the mean
  """
  def mean(numbers) do
    length = length(numbers)
    
    sum = Enum.reduce(numbers, 0, fn number, acc ->
      acc + number
    end)
    
    sum / length
  end
  
  @doc """
  Takes in a list of numbers and calculates the median
  """
  def median(numbers) do
    sorted = Enum.sort(numbers)
    length = length(numbers)
    
    if length == 0 do
      {:error, "Cannot find median of an empty list"}
    else
      if rem(length, 2) == 0 do
        (List.at(sorted, length/2 - 1) + List.at(sorted, length/2)) / 2
      else
        List.at(sorted, div(length, 2))
      end
    end
  end 
  
  @doc """
  Takes in a list of numbers and calculates the mode
  """
  def mode(numbers) do
    max_count = 0
    max_number = nil
    
    occurrences = Enum.reduce(numbers, %{}, fn number, acc ->
      update(acc, number, &1 + 1)
    end)
    
    for {number, count} <- occurrences, count > max_count do
      max_count = count
      max_number = number
    end 
    
    if max_count == 0 do
      {:error, "No mode can be found - all numbers appear equally"}
    else
      max_number
    end
  end
end