# This code snippet demonstrates how to create a module and define functions within it in Elixir

# Create a module called ExampleModule
defmodule ExampleModule do

  # Define a function to add two numbers
  def add(x, y) do
    x + y
  end

  # Define a function to multiply two numbers
  def multiply(x, y) do
    x * y
  end

  # Define a private function to subtract two numbers
  defp subtract(x, y) do
    x - y
  end
end

# Call the add function with 5 and 7 as arguments and store the result in a variable
result = ExampleModule.add(5, 7)

# Output the result
IO.puts(result)

# Call the multiply function with 10 and 5 as arguments and store the result in a variable
result = ExampleModule.multiply(10, 5)

# Output the result
IO.puts(result)

# This code snippet also demonstrates how to pattern match and use guards in function definitions in Elixir

# Define a function to get the first element of a list
def first([head | _]) do
  head
end

# Use guards to check if the list contains at least two elements and return the second element
def second([_head | [second | _rest]]) when length([_head | [second | _rest]]) >= 2 do
  second
end

# Use guards to handle cases where the list has less than two elements
def second(_rest) do
  "List does not have enough elements to return the second"
end

# Call the first function with a list as an argument and output the result
list = [1, 2, 3]
IO.puts(first(list))

# Call the second function with a list as an argument and output the result
IO.puts(second(list))

# Output:
# 12
# 50
# 1
# 2