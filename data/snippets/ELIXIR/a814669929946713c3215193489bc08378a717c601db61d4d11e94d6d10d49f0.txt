defmodule Bank do 
# Defines a Bank module

  @moduledoc """
  This is a banking module that contains functions for managing accounts and transactions.
  """

  @bank_accounts [] # initial empty list of bank accounts

  def new_account(holder_name, initial_balance \\ 0) do 
  # function for creating a new bank account with an optional initial balance

    account = %{
      holder_name: holder_name,
      balance: initial_balance
    }

    # appending the new account to the list of bank accounts
    @bank_accounts = [@bank_accounts | account]

    IO.puts("#{holder_name}'s account created successfully!")
    account # returning the created account as output
  end

  def deposit(account_number, amount) do 
  # function for depositing specified amount to a specified account

    # finding the account with matching account number
    account = Enum.find(@bank_accounts, fn(acc)-> acc.account_number == account_number end)

    # updating the account's balance
    account.balance = account.balance + amount

    IO.puts("#{amount} successfully deposited to account number #{account_number}.")
  end

  def withdraw(account_number, amount) do 
  # function for withdrawing a specified amount from a specified account

    # finding the account with matching account number
    account = Enum.find(@bank_accounts, fn(acc)-> acc.account_number == account_number end)

    if account.balance < amount do # if account has insufficient balance
      IO.puts("Insufficient balance for account number #{account_number} to withdraw #{amount}.")
    else # if account has sufficient balance
      account.balance = account.balance - amount
      IO.puts("#{amount} successfully withdrawn from account number #{account_number}.")
    end
  end

  def transfer(from_account_number, to_account_number, amount) do 
  # function for transferring a specified amount from one account to another

    # finding the account with matching account number to transfer from
    from_account = Enum.find(@bank_accounts, fn(acc) -> acc.account_number == from_account_number end)

    # finding the account with matching account number to transfer to
    to_account = Enum.find(@bank_accounts, fn(acc) -> acc.account_number == to_account_number end)

    # if from account has insufficient balance
    if from_account.balance < amount do 
      IO.puts("Insufficient balance for account number #{from_account_number} to transfer #{amount} to account number #{to_account_number}.")
    else # if from account has sufficient balance
      from_account.balance = from_account.balance - amount # deducting transferred amount from from account
      to_account.balance = to_account.balance + amount # adding transferred amount to to account

      IO.puts("#{amount} successfully transferred from account number #{from_account_number} to account number #{to_account_number}.")
    end
  end
end