# Module definition with documentation
defmodule Calculator do
  @moduledoc """
  This module contains functions for basic arithmetic calculations.
  """

  # Function definition with type specification
  @doc """
  Performs addition between two numbers.
  """
  @spec add(number, number) :: number
  def add(num1, num2) do
    num1 + num2
  end

  # Pattern matching on function parameters
  # Raises an error if inputs are not of type number
  @doc """
  Performs multiplication between two numbers.
  """
  @spec multiply(number, number) :: number
  def multiply(num1, num2) when is_number(num1) and is_number(num2) do
    num1 * num2
  end

  # Pattern matching with guards for complex calculations
  @doc """
  Performs division between two numbers.
  Returns an error if the denominator is 0 or not a number.
  """
  @spec divide(number, number) :: number
  def divide(num1, num2) when is_number(num1) and num2 != 0 do
    num1 / num2
  end

  def divide(_num1, _num2) do
    raise "Error: Second parameter must be a non-zero number"
  end
end

# Accessing and using functions from the Calculator module
input1 = 10
input2 = 5

# Adding two numbers
Calculator.add(input1, input2) # Output: 15

# Multiplying two numbers
Calculator.multiply(input1, input2) # Output: 50

# Dividing two numbers
Calculator.divide(input1, input2) # Output: 2.0

# Handling errors from division by 0
Calculator.divide(input1, 0) # Output: Error: Second parameter must be a non-zero number