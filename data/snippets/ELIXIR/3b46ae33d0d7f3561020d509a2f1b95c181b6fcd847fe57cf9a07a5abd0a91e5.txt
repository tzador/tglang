# Define module for a linked list
defmodule LinkedList do
  # Define struct and attributes for node in linked list
  defstruct [:data, :next]

  # Define function to add a node to the end of the list
  def add(list, new_data) do
    # Create new node with given data
    new_node = %LinkedList{data: new_data}

    # Check if list is empty
    if( length(list) == 0 ) do
      # Make new node the head of the list
      list = new_node
    else
      # Iterate through list to find last node
      curr = list
      while( curr.next != nil ) do
        curr = curr.next
      end
      # Add new node to the end of the list
      curr.next = new_node
    end
    # Return updated list
    list
  end

  # Define function to remove a node from the list
  def remove(list, data) do
    # Check if list is empty
    if( length(list) == 0 ) do
      # Print error message
      IO.puts("Error: list is empty")
    else
      # Iterate through list to find node with given data
      curr = list
      prev = nil
      while( curr.data != data ) do
        # Check if end of list is reached
        if( curr.next == nil ) do
          # Print error message
          IO.puts("Error: node with given data not found")
          # Return original list
          return list
        end
        # Move to next node
        prev = curr
        curr = curr.next
      end
      # Check if node to be removed is the head
      if( prev == nil ) do
        # Make next node the head of the list
        list = curr.next
      else
        # Remove node from list by updating previous node's next attribute
        prev.next = curr.next
      end
    end
    # Return updated list
    list
  end

  # Define function to print all nodes in the list
  def print(list) do
    # Check if list is empty
    if( length(list) == 0 ) do
      # Print empty message
      IO.puts("Empty list")
    else
      # Create empty string for nodes
      str = ""
      # Iterate through list
      curr = list
      while( curr != nil ) do
        # Append data of current node to string
        str = str <> "#{curr.data} "
        # Move to next node
        curr = curr.next
      end
      # Print nodes
      IO.puts(str)
    end
  end
end

# Create an empty linked list
list = %LinkedList{}

# Add nodes to the list
list = LinkedList.add(list, 5)
list = LinkedList.add(list, 10)
list = LinkedList.add(list, 3)
list = LinkedList.add(list, 7)

# Print all nodes in the list
LinkedList.print(list)

# Remove node with data 10 from the list
list = LinkedList.remove(list, 10)

# Print updated list
LinkedList.print(list)