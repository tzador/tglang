# Create a module named MyModule
defmodule MyModule do
  # Define a function named my_function that takes in two parameters
  def my_function(param1, param2) do
    # Add a variable named result which is the multiplication of the two parameters
    result = param1 * param2
    # Return the result
    result
  end

  # Define a function named my_other_function that takes in a list of numbers
  def my_other_function(numbers) do
    # Use pattern matching to check if the list is empty
    case numbers do
      # If the list is empty, return the atom :empty
      [] -> :empty
      # If the list is not empty, use recursion to call the function again
      [head | tail] -> my_other_function(tail)
    end
  end

  # Define a constant named PI
  @pi 3.14159

  # Define a function named calculate_circle_area that takes in a radius parameter
  def calculate_circle_area(radius) do
    # Use the constant PI and the square function to calculate the area
    area = @pi * square(radius)
    # Return the result
    area
  end

  # Define a private function named square that takes in a number parameter
  defp square(number) do
    # Multiply the number by itself
    number * number
  end
end

# Call the function my_function with the parameters 5 and 10
MyModule.my_function(5, 10)

# Call the function my_other_function with a list of numbers
MyModule.my_other_function([1, 2, 3, 4, 5])

# Call the function calculate_circle_area with a radius of 2.5
MyModule.calculate_circle_area(2.5)