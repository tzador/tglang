# This is a comment in Elixir

# Defining a function
defmodule Math do
  def add(x, y) do
    x + y
  end
  def subtract(x, y) do
    x - y
  end
end

# Pattern matching and recursion
defmodule Fibonacci do
  def of(0), do: 0
  def of(1), do: 1
  def of(n) when n > 1 do
    Fibonacci.of(n-1) + Fibonacci.of(n-2)
  end
end

# Pipe operator
numbers = [1, 2, 3, 4, 5]
result = numbers
  |> Enum.filter(&(&1 > 2))
  |> Enum.map(&(&1 * 10))
# result: [30, 40, 50]

# Function composition
sum = fn list -> Enum.reduce(list, 0, &+/2) end
multiply = fn list -> Enum.reduce(list, 1, &*/2) end
composed_function = fn list ->
  list
  |> sum.()
  |> multiply.()
end
result = composed_function.([1, 2, 3, 4, 5])
# result: 120

# Case expression
age = 22
case age do
  x when x < 21 ->
    "You are not old enough to drink."
  x when x > 21 ->
    "You are old enough to drink."
  x ->
    "You are the perfect age to drink."
end

# result: "You are old enough to drink."