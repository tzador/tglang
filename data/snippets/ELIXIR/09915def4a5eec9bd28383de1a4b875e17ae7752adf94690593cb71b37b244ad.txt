# Define a module that will handle tasks related to fractions
defmodule Fractions do
  # Accepts two fractions in the form of tuples, returns the result of addition
  def add({num1, denom1}, {num2, denom2}) do
    # Calculate the new denominator by finding the least common multiple
    new_denom = LCM(denom1, denom2)
    # Calculate the new numerator by multiplying by the appropriate factor
    new_num1 = num1 * (new_denom / denom1)
    new_num2 = num2 * (new_denom / denom2)
    # Add the numerators
    new_num = new_num1 + new_num2
    # Simplify the resulting fraction, if possible
    simplify(new_num, new_denom)
  end
  # Accepts two fractions in the form of tuples, returns the result of subtraction
  def subtract({num1, denom1}, {num2, denom2}) do
    # Calculate the new denominator by finding the least common multiple
    new_denom = LCM(denom1, denom2)
    # Calculate the new numerator by multiplying by the appropriate factor
    new_num1 = num1 * (new_denom / denom1)
    new_num2 = num2 * (new_denom / denom2)
    # Subtract the numerators
    new_num = new_num1 - new_num2
    # Simplify the resulting fraction, if possible
    simplify(new_num, new_denom)
  end
  # Accepts two fractions in the form of tuples, returns the result of multiplication
  def multiply({num1, denom1}, {num2, denom2}) do
    # Multiply the numerators
    new_num = num1 * num2
    # Multiply the denominators
    new_denom = denom1 * denom2
    # Simplify the resulting fraction, if possible
    simplify(new_num, new_denom)
  end
  # Accepts two fractions in the form of tuples, returns the result of division
  def divide({num1, denom1}, {num2, denom2}) do
    # Invert the second fraction
    inv_denom2 = invert({num2, denom2})
    # Multiplies the two fractions using the multiply function defined above
    multiply({num1, denom1}, inv_denom2)
  end
  # Finds the least common multiple of two numbers
  defp LCM(a, b) do
    max = max(a, b)
    num = max
    # Keep adding the max number until it is a multiple of both a and b
    while rem(num, a) != 0 || rem(num, b) != 0 do
      num = num + max
    end
    num
  end
  # Simplifies a fraction to its simplest form
  defp simplify(num, denom) do
    # Finds the greatest common divisor using the euclidean algorithm
    gcd = GCD(num, denom)
    # Divides the numerator and denominator by the gcd to reduce the fraction
    new_num = num / gcd
    new_denom = denom / gcd
    # Returns the simplified fraction as a tuple
    {new_num, new_denom}
  end
  # Finds the greatest common divisor of two numbers
  defp GCD(a, 0) do
    a
  end
  defp GCD(a, b) do
    GCD(b, rem(a, b))
  end
  # Inverts a fraction by swapping the numerator and denominator
  defp invert({num, denom}) do
    {denom, num}
  end
end