defmodule Stack do
  # This module defines a stack data structure.
  
  @doc """
  A stack with a list backing the elements.
  """
  defstruct [:elements]
  
  @doc """
  Creates an empty stack.
  
  ## Examples
  iex> stack = Stack.new()
  %Stack{elements: []}
  """
  def new(), do: %Stack{elements: []}
  
  @doc """
  Returns the size of the stack.
  
  ## Examples
  iex> stack = Stack.new()
  %Stack{elements: []}
  
  iex> stack = Stack.push(1, stack)
  %Stack{elements: [1]}
  
  iex> stack = Stack.push(2, stack)
  %Stack{elements: [1, 2]}
  
  iex> Stack.size(stack)
  2
  """
  def size(stack), do: length(stack.elements)
  
  @doc """
  Pushes an element onto the stack.
  
  ## Examples
  iex> stack = Stack.new()
  %Stack{elements: []}
  
  iex> stack = Stack.push(1, stack)
  %Stack{elements: [1]}
  """
  def push(element, %Stack{} = stack) do
    %Stack{elements: [element | stack.elements]}
  end
  
  @doc """
  Pops an element off the stack.
  
  ## Examples
  iex> stack = Stack.new()
  %Stack{elements: []}
  
  iex> stack = Stack.push(1, stack)
  %Stack{elements: [1]}
  
  iex> stack = Stack.push(2, stack)
  %Stack{elements: [1, 2]}
  
  iex> {element, stack} = Stack.pop(stack)
  {1, %Stack{elements: [2]}}
  """
  def pop(%Stack{} = stack) do
    case stack.elements do
      [element | rest] -> {element, %Stack{elements: rest}}
      [] -> {nil, stack}
    end
  end
  
  @doc """
  Returns the top element of the stack.
  
  ## Examples
  iex> stack = Stack.new()
  %Stack{elements: []}
  
  iex> stack = Stack.push(1, stack)
  %Stack{elements: [1]}
  
  iex> stack = Stack.push(2, stack)
  %Stack{elements: [1, 2]}
  
  iex> Stack.top(stack)
  2
  """
  def top(%Stack{} = stack) do
    case stack.elements do
      [element | _] -> element
      [] -> nil
    end
  end
end