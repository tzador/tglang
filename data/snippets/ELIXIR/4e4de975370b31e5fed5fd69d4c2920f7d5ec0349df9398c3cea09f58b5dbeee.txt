defmodule Bank do
  # Define a struct that represents a bank account
  @derive Inspect
  defstruct [:account_number, :balance, :owner]

  # Define a function that creates a new bank account
  def create_account(account_number, balance, owner) do
    %Bank{account_number: account_number, balance: balance, owner: owner}
  end

  # Define a function that deposits money into a bank account
  def deposit(account, amount) when is_number(amount) do
    balance = account.balance + amount

    # Return a new account with updated balance
    %Bank{account | balance: balance}
  end

  # Define a function that withdraws money from a bank account
  def withdraw(account, amount) when is_number(amount) do
    # Make sure account has enough balance for withdrawal
    if account.balance >= amount do
      balance = account.balance - amount

      # Return a new account with updated balance
      %Bank{account | balance: balance}
    else
      # Return original account and an error message
      {account, "Not enough balance to withdraw"}
    end
  end
end

# Create a new bank account
account = Bank.create_account("123456789", 1000, "John Smith")

# Deposit $500 into the account
account = Bank.deposit(account, 500)

# Withdraw $200 from the account
account = Bank.withdraw(account, 200)

# Print the current balance of the account
IO.puts "Current balance: #{account.balance}"

# Output:
#