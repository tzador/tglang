# Define a module with a nested function
defmodule Math do
  def add(a, b) do
    # Check the types before adding
    if is_number(a) && is_number(b) do
      a + b
    else
      # Return an error if types are incorrect
      raise "Invalid arguments, please provide numbers"
    end
  end
end

# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use `Enum.map/2` to iterate over the list and add 5 to each number
Math.add(numbers, 5)

# Output:
[6, 7, 8, 9, 10]

# Define a private function inside the module
defp subtract(a, b) do
  a - b
end

# Use `Enum.reduce/3` to subtract each number in the list from the previous number
# The initial accumulator value is the first element in the list
Enum.reduce(numbers, &subtract/2)

# Output:
-13