defmodule Bank do
# Creating a module named Bank  

  @accounts [] 
  # Initializing a private variable to hold all the accounts
  

  def add_account(name \\ "", balance \\ 0) when is_binary(name) and is_integer(balance) do
    # Function to add an account with a given name and balance
    @accounts = [@accounts | %{name: name, balance: balance}] 
    # Using pattern matching in the list to add a map with the given name and balance to @accounts variable
  end 

  
  def find_accounts(name) when is_binary(name) do
    # Function to find all the accounts under a given name
    Enum.filter(@accounts, fn %{name: n} -> n == name end) 
    # Using Enum.filter to filter the list of accounts based on the given name and return it
  end 

  
  def deposit(name, amount) when is_binary(name) and is_integer(amount) do
    # Function to deposit a given amount to the account under a given name  
    account = Enum.find(@accounts, fn %{name: n} -> n == name end) 
    # Using Enum.find to find the account with the given name
    updated_account = %{name: account.name, balance: account.balance + amount} 
    # Creating a new map with the updated balance
    @accounts = @accounts -- [account] 
    # Removing the old account from the @accounts variable
    @accounts = [@accounts | updated_account] 
    # Adding the updated account to the @accounts variable
  end 

  
  def withdraw(name, amount) when is_binary(name) and is_integer(amount) do
    # Function to withdraw a given amount from the account under a given name  
    account = Enum.find(@accounts, fn %{name: n} -> n == name end) 
    # Using Enum.find to find the account with the given name
    updated_account = %{name: account.name, balance: account.balance - amount} 
    # Creating a new map with the updated balance
    @accounts = @accounts -- [account] 
    # Removing the old account from the @accounts variable
    @accounts = [@accounts | updated_account] 
    # Adding the updated account to the @accounts variable
  end 

  
  def transfer(from_name, to_name, amount) when is_binary(from_name) and is_binary(to_name) and is_integer(amount) do
    # Function to transfer a given amount from one account to another
    from_account = Enum.find(@accounts, fn %{name: n} -> n == from_name end) 
    # Using Enum.find to find the account with the given name to transfer from
    to_account = Enum.find(@accounts, fn %{name: n} -> n == to_name end) 
    # Using Enum.find to find the account with the given name to transfer to
    updated_from_account = %{name: from_account.name, balance: from_account.balance - amount} 
    # Creating a new map with the updated balance in the from account
    updated_to_account = %{name: to_account.name, balance: to_account.balance + amount} 
    # Creating a new map with the updated balance in the to account
    @accounts = @accounts -- [from_account, to_account] 
    # Removing the old accounts from the @accounts variable
    @accounts = [@accounts | updated_from_account, updated_to_account] 
    # Adding the updated accounts to the @accounts variable
  end 
end