defmodule Person do
  @moduledoc """
  This module defines functions for creating and accessing
  information about a person.
  """
  require Logger
  
  # @type person_name() :: String
  # @type person_age() :: integer()
  @type person_name :: String.t()
  @type person_age :: integer
  
  @doc """
  Creates a new Person struct with the given name and age.
  
  Examples:
  
      iex> Person.new("John", 25)
      %Person{name: "John", age: 25}
  """
  defstruct name: nil, age: nil
  
  @doc """
  Returns the person's name.
  
  Examples:
  
      iex> person = %Person{name: "John", age: 25}
      iex> Person.name(person)
      "John"
  """
  @spec name(person_name) :: person_name
  def name(person), do: person.name
  
  @doc """
  Sets the person's name.
  
  Examples:
  
      iex> person = %Person{name: "John", age: 25}
      iex> Person.set_name(person, "Jane")
      %Person{name: "Jane", age: 25}
  """
  @spec set_name(person_name, String.t()) :: person_name
  def set_name(person, name), do: %{person | name: name}
  
  @doc """
  Returns the person's age.
  
  Examples:
  
      iex> person = %Person{name: "John", age: 25}
      iex> Person.age(person)
      25
  """
  @spec age(person_name) :: person_age
  def age(person), do: person.age
  
  @doc """
  Sets the person's age.
  
  Examples:
  
      iex> person = %Person{name: "John", age: 25}
      iex> Person.set_age(person, 30)
      %Person{name: "John", age: 30}
  """
  @spec set_age(person_name, integer()) :: person_name
  def set_age(person, age), do: %{person | age: age}
end