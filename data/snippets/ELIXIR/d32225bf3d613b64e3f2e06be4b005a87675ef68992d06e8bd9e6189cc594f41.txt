defmodule User do
  @behaviour Notifiable
  @name "Jane"

  # Public functions
  def greet(name) do
    IO.puts "Hello #{name}"
  end

  def add_friends(friends) do
    friends ++ ["John"]
  end

  # Private functions
  defp validate_name(name) do
    case name do
      "John" -> {:error, "Name already taken"}
      name -> {:ok, name}
    end
  end

  # Callback functions for behaviour
  def handle_notification(payload) do
    IO.inspect payload
  end
end

defprotocol Notifiable do
  @doc "The function that handles notifications."
  def handle_notification(payload)
end

defimpl Notifiable, for: User do
  def handle_notification(payload) do
    IO.puts "Received Notification: #{payload}"
  end
end

# Creating new User
user = User.greet(@name)
# Output: Hello Jane

# Adding new friends
friends = ["Bob", "Elena"]
updated_friends = User.add_friends(friends)
# Output: ["Bob", "Elena", "John"]

# Validating name
valid_name = User.validate_name("Jane")
# Output: {:ok, "Jane"}

# Sending notification
User.notify({:message, "New friend added"}, for: user)
# Output: Received Notification: {:message, "New friend added"}