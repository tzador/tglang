defmodule Tree do
  @moduledoc """
  A data structure for representing a binary tree.
  """

  defstruct value: nil, left: nil, right: nil  # Define a struct with three fields: value, left, right

  @doc """
  Recursively inserts a new key-value pair into the tree.
  """
  def insert(tree, key, value) do  # Define a function insert with three parameters: tree, key, and value
    case tree do # Use a `case` statement to check the tree
      nil ->
        %Tree{value: value} # If tree is nil, return a new tree with the given value
      %Tree{value: node_value, left: left, right: right} when key < node_value ->
        %Tree{  # If the key is less than the value of the current node, insert the new value in the left subtree.
          node_value,
          insert(left, key, value),  # Recursively call the insert function on the left subtree
          right
        }
      %Tree{value: node_value, left: left, right: right} when key > node_value ->
        %Tree{  # If the key is greater than the value of the current node, insert the new value in the right subtree.
          node_value,
          left,
          insert(right, key, value) # Recursively call the insert function on the right subtree
        }
      tree ->  # If the key is equal to the value of the current node, simply update the value.
        %Tree{tree | value: value}
  end

  @doc """
  Recursively searches for a key in the tree and returns its corresponding value.
  Returns `nil` if the key is not found.
  """
  def search(tree, key) do  # Define a function search with two parameters: tree and key
    case tree do  # Use a `case` statement to check the tree
      nil ->
        nil  # If tree is nil, return nil
      %Tree{value: node_value, left: left, right: right} when key < node_value ->
        search(left, key)  # If the key is less than the value of the current node, recursively call search on the left subtree
      %Tree{value: node_value, left: left, right: right} when key > node_value ->
        search(right, key)  # If the key is greater than the value of the current node, recursively call search on the right subtree
      %Tree{value: _node_value, left: _left, right: _right} ->
        tree.value  # If the key is equal to the value of the current node, return its corresponding value.
    end
  end

  @doc """
  Recursively traverses the tree in pre-order and returns a list of values.
  """
  def traverse_preorder(tree) do  # Define a function traverse_preorder with one parameter: tree
    case tree do  # Use a `case` statement to check the tree
      nil ->
        []  # If tree is nil, return an empty list
      %Tree{value: node_value, left: left, right: right} ->
        [node_value | (traverse_preorder(left) ++ traverse_preorder(right))]  # Return a list with the current node value and recursively traverse the left and right subtrees
    end
  end
end