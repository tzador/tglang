defmodule Game do
  @game_state %{player1_score: 0, player2_score: 0} # define initial game state

  def play_round(state) do
    new_state = handle_player1_turn(state)
    new_state = handle_player2_turn(new_state)
    check_winner(new_state)
  end

  defp handle_player1_turn(state) do
    # update game state with player 1's turn
    new_state = %{player1_score: state.player1_score + 1, player2_score: state.player2_score}
    IO.puts("Player 1's turn!")
    IO.puts("Player 1 scores a point!")
    IO.puts("Player 1's current score: #{new_state.player1_score}")
    new_state
  end

  defp handle_player2_turn(state) do
    # update game state with player 2's turn
    new_state = %{player1_score: state.player1_score, player2_score: state.player2_score + 1}
    IO.puts("Player 2's turn!")
    IO.puts("Player 2 scores a point!")
    IO.puts("Player 2's current score: #{new_state.player2_score}")
    new_state
  end

  defp check_winner(state) do
    # check if there is a winner
    if state.player1_score > state.player2_score do
      IO.puts("Player 1 wins!")
    elsif state.player2_score > state.player1_score do
      IO.puts("Player 2 wins!")
    else
      # if scores are tied, play another round
      IO.puts("Scores are tied, playing another round...")
      new_state = play_round(state)
      check_winner(new_state)
    end
  end
end

# start the game
Game.play_round(Game.@game_state)