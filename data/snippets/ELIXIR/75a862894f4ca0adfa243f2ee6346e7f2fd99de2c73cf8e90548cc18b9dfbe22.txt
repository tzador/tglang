#   This is a function that sorts a list of numbers using the QuickSort algorithm.
#   Inputs:
#   numbers - List of numbers to be sorted
#   Outputs:
#   Sorted version of the input list of numbers
defmodule QuickSort do
  #   This function takes a list of numbers and uses a pivot value to divide it into smaller and larger lists.
  #   Inputs:
  #   list - List of numbers to be partitioned
  #   pivot - Pivot value to divide the list
  #   Outputs:
  #   smaller - List of numbers smaller than the pivot
  #   larger - List of numbers larger than the pivot
  def partition(list, pivot) do
    smaller = []
    larger = []
    Enum.each(list, fn(x) ->
      if x < pivot do
        smaller = [x | smaller]
      else
        larger = [x | larger]
      end
    end)
    {smaller, larger}
  end

  #   This function recursively sorts a list of numbers by partitioning it and recombining the results.
  #   Inputs:
  #   numbers - List of numbers to be sorted
  #   Outputs:
  #   Sorted version of the input list of numbers
  def sort(numbers) do
    case numbers do
      [] -> []
      head :: tail ->
        pivot = List.first(numbers)
        {smaller, larger} = partition(tail, pivot)
        sort(smaller) ++ [pivot] ++ sort(larger)
    end
  end
end

#   Example Usage:
sorted = QuickSort.sort([5, 3, 8, 1, 2])
#   Output:
#   [1, 2, 3, 5, 8]