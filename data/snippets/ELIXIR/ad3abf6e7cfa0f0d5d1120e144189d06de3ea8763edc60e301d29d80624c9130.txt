# This is a function that uses recursion and pattern matching
# to calculate the fibonacci number at a given index
def fib(n) do
  case n do
    0 -> 0
    1 -> 1
    _ -> fib(n-1) + fib(n-2)
  end
end

# This is a recursive function that finds the length of a list
def list_length(list) do
  case list do
    [] -> 0
    [_ | tail] -> 1 + list_length(tail)
  end
end

# This is a function that implements a binary search algorithm
# to find a value in a sorted list
def binary_search(value, list) do
  case list do
    [] -> false
    [head | _tail] when head == value -> true
    [head | _tail] when head > value -> binary_search(value, list |> Enum.slice(0, Enum.count(list)/2))
    [head | _tail] when head < value -> binary_search(value, list |> Enum.slice(Enum.count(list)/2, Enum.count(list)))
  end
end

# This is a function that calculates the factorial of a number
# using tail recursion and an accumulator
def factorial(n) when n >= 0 do
  do_factorial(n, 1)
end

defp do_factorial(0, acc) do
  acc
end

defp do_factorial(n, acc) do
  do_factorial(n-1, acc * n)
end

# This is a module that stores functions for working with strings
defmodule StringHelpers do
  # This function takes in a string and returns the string with all letters capitalized
  def capitalize(string) do
    string |> String.capitalize
  end

  # This function takes in a string and returns the reverse of the string
  def reverse(string) do
    string |> String.reverse
  end
end