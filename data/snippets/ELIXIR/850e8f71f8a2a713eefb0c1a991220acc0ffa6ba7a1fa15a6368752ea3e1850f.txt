# Define a module
defmodule Animal do
  # Define a struct with attributes
  @enforce_keys [:name, :age]
  defstruct [:name, :age, :species]

  # Define a function with pattern matching
  def birthday(%Animal{name: name, age: current_age} = animal) do
    IO.puts "Happy birthday, #{name}!"
    # Use case statement to handle different cases
    case current_age do
      age when age >= 20 ->
        animal |> Map.put(:species, "Elder")
      age when age >= 10 ->
        animal |> Map.put(:species, "Adult")
      _ ->
        animal
    end
  end

  # Define a function with default arguments
  def change_species(%Animal{name: name, species: current_species} = animal, new_species \\ "Animal") do
    IO.puts "Changing #{name}'s species to #{new_species}"
    animal |> Map.put(:species, new_species)
  end

  # Define a function with guard clauses
  def make_sound(animal, sound) when is_binary(sound) and animal.age >= 10 do
    sound |> String.to_atom() |> IO.puts()
  end
end

# Create an instance of the Animal struct and call functions on it
animal = %Animal{name: "Max", age: 8}
animal |> birthday() 
animal |> change_species("Dog")
animal |> make_sound("Woof!")