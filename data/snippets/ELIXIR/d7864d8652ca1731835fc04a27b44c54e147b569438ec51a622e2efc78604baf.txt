defmodule User do
  @moduledoc """
  This module stores all information about the user.
  """
  
  @name " "
  @age " "
  @email " "
  
  def new(name, age, email) do
    %{name: name, age: age, email: email}
  end
  
  def greet(user) do
    IO.puts "Hello #{user.name}! Nice to meet you."
  end
  
  def update_name(user, new_name) do
    %{user | name: new_name}
  end
  
  def update_age(user, new_age) do
    %{user | age: new_age}
  end
  
  def update_email(user, new_email) do
    %{user | email: new_email}
  end
  
  defp validate_name(name) do
    if String.length(name) >= 5 do
      name
    else
      raise ArgumentError, "Name must be at least 5 characters long."
    end
  end
  
  defp validate_age(age) do
    if Integer.is_integer(age) and age > 0 do
      age
    else
      raise ArgumentError, "Age must be a positive integer."
    end
  end
  
  defp validate_email(email) do
    if String.ends_with?(email, ".com") or String.ends_with?(email, ".net") do
      email
    else
      raise ArgumentError, "Email must end with '.com' or '.net'."
    end
  end
  
  defp normalize_email(email) do
    String.downcase(email)
  end
end

user = User.new("Jane Doe", 27, "jane.doe@example.com")
User.greet(user)

new_name = User.validate_name("Janie")
updated_user = User.update_name(user, new_name)
User.greet(updated_user)

new_age = User.validate_age(30)
updated_user = User.update_age(user, new_age)
User.greet(updated_user)

new_email = User.validate_email("jane.doe2@example.net")
updated_user = User.update_email(user, new_email)
User.greet(updated_user)

normalized_email = User.normalize_email("Janie.doe@example.Net")
updated_user = User.update_email(user, normalized_email)
User.greet(updated_user)