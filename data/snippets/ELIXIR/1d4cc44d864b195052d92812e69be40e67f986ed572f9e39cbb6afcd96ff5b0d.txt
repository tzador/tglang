defmodule User do
  # Defines a module named User

  use GenServer
  # Use the GenServer behavior

  def handle_call(:get_status, _from, state) do
    # Handles the :get_status call by returning the current user status
    {:reply, state.status, state}
  end

  def handle_cast({:update_status, new_status}, state) do
    # Handles the :update_status cast by updating the user status and replying with the updated state
    {:noreply, %{state | status: new_status}}
  end

  def start_link(initial_status \\ :active) do
    # Starts a GenServer process for a new user with the given initial status
    GenServer.start_link(__MODULE__, %{status: initial_status}, [])
  end

  defp validate_status(status) do
    # Private helper function to ensure status is a valid atom
    unless is_atom(status) do
      raise ArgumentError, "status must be an atom"
    end
  end
end