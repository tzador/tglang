defmodule Queue do          # Defines a module named Queue
  @doc """                   # Documentation for Queue
  A data structure that follows the FIFO (First-In-First-Out) principle.
  """

  @moduledoc """
  Implements a queue data structure and its corresponding functions.
  """

  defstruct [               # Defines the struct of Queue with two fields: `front` to store the front element of the queue and `rear` to store the rear element of the queue
    front: [],
    rear: []
  ]

  @impl true                 # This module implements the behaviour of true

  @doc """                    # Documentation for init/1 function
  Initializes an empty queue.
  """
  def init(), do: %Queue{}   # Creates an empty queue using the predefined struct

  @doc """                    # Documentation for enqueue/2 function
  Adds a new element to the rear of the queue.
  """
  def enqueue(queue, element) do    # Takes in a queue and an element to enqueue
    %{ queue | rear: [element | queue.rear]}     # Adds the element to the rear of the queue using the `rear` field of the struct
  end

  @doc """                    # Documentation for dequeue/1 function
  Removes and returns the front element of the queue.
  """
  def dequeue(queue) do       # Takes in a queue
    case queue.front do       # Uses a case statement to handle different scenarios
      [] -> nil               # If the queue is empty, return nil
      [_|front] -> {front, %{queue | front: front}}    # If the queue has more than one element, remove the front element and return it along with the updated queue
    end
  end

  @doc """                    # Documentation for peek/1 function
  Returns the front element of the queue without removing it.
  """
  def peek(queue) do         # Takes in a queue
    hd(queue.front)         # Returns the first element of the queue using the `hd` function
  end

  @doc """                    # Documentation for size/1 function
  Returns the number of elements in the queue.
  """
  def size(queue) do        # Takes in a queue
    length(queue.front) + length(queue.rear)     # Calculates the total number of elements in the queue by adding the length of the `front` and `rear` lists
  end
end