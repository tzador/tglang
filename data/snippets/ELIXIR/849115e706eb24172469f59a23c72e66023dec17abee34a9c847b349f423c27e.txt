defmodule Calculator do           # defines a module named Calculator

  @param_type keyword             # defines a module attribute with the name of the parameter type

  @doc """
  Takes in two numbers and a string as parameters and performs a calculation based on the string.
  - Supported calculations are "add", "subtract", "multiply", and "divide".
  - Returns the result as a float.
  - If an unsupported calculation is given, returns an error.
  """

  @moduledoc false                 # disables the default module documentation
  def calculate(number1, number2, operation) do  # defines a function named calculate with three parameters
  
    cond do                                       # Conditional statement
      operation == "add" -> number1 + number2      # Checks if the operation is "add" and if true, returns the addition of two numbers
      operation == "subtract" -> number1 - number2 # Checks if the operation is "subtract" and if true, returns the subtraction of two numbers
      operation == "multiply" -> number1 * number2 # Checks if the operation is "multiply" and if true, returns the multiplication of two numbers
      operation == "divide" -> number1 / number2   # Checks if the operation is "divide" and if true, returns the division of two numbers
      true -> :error                               # If none of the above conditions are met, returns an error
    end
  end
end

IO.puts Calculator.calculate(2, 3, "add")          # Calls the calculate function and prints the result, which is 5
IO.puts Calculator.calculate(5, 2, "multiply")     # Calls the calculate function and prints the result, which is 10
IO.puts Calculator.calculate(7, 0, "divide")       # Calls the calculate function and prints the result, which is :error (division by zero error)