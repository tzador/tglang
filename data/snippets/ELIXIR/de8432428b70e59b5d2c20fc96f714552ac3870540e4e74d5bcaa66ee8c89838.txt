defmodule Account do
  # This module represents a user account with associated data
  # and functions for managing the account.

  # Define a struct to hold the account data
  # The account will have a name, email, and balance
  @derive [inspect: [:name, :email, :balance]]
  defstruct name: nil, email: nil, balance: 0

  # Function for creating a new account
  # Returns a new Account struct with the given name and email
  def new(name, email) do
    %Account{name: name, email: email}
  end

  # Function for depositing money into the account
  # Takes in an account struct and the amount to deposit
  # Returns an updated account struct with the new balance
  def deposit(account, amount) do
    updated_account = %Account{account | balance: account.balance + amount}
    # Print out a message to confirm the deposit
    IO.puts "Deposited #{amount} into account for #{account.name}"
    updated_account
  end

  # Function for withdrawing money from the account
  # Takes in an account struct and the amount to withdraw
  # Returns an updated account struct with the new balance
  def withdraw(account, amount) do
    # Check if the account has enough balance to withdraw
    if account.balance >= amount do
      updated_account = %Account{account | balance: account.balance - amount}
      # Print out a message to confirm the withdrawal
      IO.puts "Withdrew #{amount} from account for #{account.name}"
      updated_account
    else
      # If the account does not have enough balance, raise an error
      raise "Insufficient balance"
    end
  end

  # Function for transferring money from one account to another
  # Takes in the sending account struct, the receiving account struct,
  # and the amount to transfer
  # Returns an updated sending account struct and receiving account struct
  def transfer(from_account, to_account, amount) do
    # Check if the sending account has enough balance to transfer
    if from_account.balance >= amount do
      # Update both account balances
      updated_from = %Account{from_account | balance: from_account.balance - amount}
      updated_to = %Account{to_account | balance: to_account.balance + amount}
      # Print out a message to confirm the transfer
      IO.puts "Transferred #{amount} from #{from_account.name} to #{to_account.name}"
      {updated_from, updated_to}
    else
      # If the sending account does not have enough balance, raise an error
      raise "Insufficient balance"
    end
  end
end