defmodule User do
  @moduledoc """
  This module represents a user in our system.
  """
  
  # The user's information is stored in a map.
  # The map contains the following keys:
  # - :name: the user's name
  # - :age: the user's age
  # - :email: the user's email address
  # - :location: the user's location
  # - :hobbies: a list of the user's hobbies
  @type user :: %{
    name: String.t(),
    age: non_neg_integer(),
    email: String.t(),
    location: String.t(),
    hobbies: [String.t()]
  }
  
  # This function creates a new user with the given information.
  # It takes in five arguments:
  # - name: the user's name
  # - age: the user's age
  # - email: the user's email address
  # - location: the user's location
  # - hobbies: a list of the user's hobbies
  def create_user(name, age, email, location, hobbies) do
    %{
      name: name,
      age: age,
      email: email,
      location: location,
      hobbies: hobbies
    }
  end
  
  # This function updates a user's information.
  # It takes in two arguments:
  # - user: the user to be updated
  # - new_information: a map containing the updated information
  def update_user(user, new_information) do
    Map.merge(user, new_information)
  end
end

# Example usage:
# Create a new user
my_user = User.create_user("John", 25, "john@example.com", "New York", ["Hiking", "Cooking"])

# Update user information
new_information = %{age: 26, location: "California"}
updated_user = User.update_user(my_user, new_information)

# Print the updated user's information
IO.inspect(updated_user)