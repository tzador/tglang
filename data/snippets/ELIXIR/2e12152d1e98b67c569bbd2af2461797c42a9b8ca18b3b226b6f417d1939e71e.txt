defmodule Person do
  @encription_secret "mysecretkey"

  # This function takes in a person's name and age and returns a map with their encrypted information
  def encrypt_info(name, age) do
    # Set up encryption
    aes = :crypto.block_encrypt_init(:aes_cbc256, @encryption_secret)

    # Encrypt name and age using AES
    enc_name = :crypto.block_encrypt_update(aes, name)
    enc_age = :crypto.block_encrypt_update(aes, age)

    # Finish encryption and convert to base64
    enc_name = Base.encode64(:crypto.block_encrypt_final(aes))
    enc_age = Base.encode64(:crypto.block_encrypt_final(aes))

    # Create and return map with encrypted information
    %{name: enc_name, age: enc_age}
  end

  # This function takes in a map with encrypted name and age and returns the decrypted information
  def decrypt_info(enc_info) do
    # Set up decryption
    aes = :crypto.block_decrypt_init(:aes_cbc256, @encryption_secret)

    # Decrypt name and age using AES
    dec_name = :crypto.block_decrypt_update(aes, Base.decode64(enc_info.name))
    dec_age = :crypto.block_decrypt_update(aes, Base.decode64(enc_info.age))

    # Finish decryption and convert to strings
    dec_name = to_string(:crypto.block_decrypt_final(aes))
    dec_age = to_string(:crypto.block_decrypt_final(aes))

    # Create and return map with decrypted information
    %{name: dec_name, age: dec_age}
  end
end