# Generates a random list of numbers using the `Enum` module
# and calculates the sum of all even numbers in the list.

# Import the Enum module
import Enum

# Function to generate a list of random numbers
def random_list(length) do
  # Use the `for` comprehension to generate a list of `length` size
  # with random numbers in the range of 1 to 100
  for _ <- 1..length, do: :random.uniform(1..100)
end

# Function to calculate the sum of all even numbers in a list
def sum_even(numbers) do
  # Use the `reduce` function with an initial accumulator value of 0
  # to sum up all even numbers in the list using pattern matching
  Enum.reduce(numbers, 0, fn
    # `acc` represents the accumulator value and `num` represents the 
    # current element in the list
    acc, num when rem(num, 2) == 0 ->
      # Add the current even number to the accumulator
      acc + num
    # If the current element is not an even number, return the current
    # accumulator value to continue the reduction
    acc, _ ->
      acc
  end)
end

# Generate a list of 10 random numbers
numbers = random_list(10)

# Calculate the sum of all even numbers in the list
sum_even = sum_even(numbers)

# Print the generated list and the sum of all even numbers
IO.puts "Generated list: #{inspect numbers}"
IO.puts "Sum of even numbers: #{sum_even}"