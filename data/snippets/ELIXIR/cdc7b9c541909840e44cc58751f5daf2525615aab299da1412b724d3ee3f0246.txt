# This function performs a binary search on a sorted list
# It returns the index of the target value if found, otherwise it returns -1
# Arguments:
#   - arr: the list to search in
#   - target: the value to search for
#   - low: the lower bound of the search range (inclusive)
#   - high: the upper bound of the search range (inclusive)
def binary_search(arr, target, low, high) do
  # Base case: if the upper bound is smaller than the lower bound, the target is not in the list
  if low > high do
    return -1
  end
  
  # Calculate the middle index of the search range
  mid = (low + high) div 2
  
  # Check if the middle element is the target
  if arr[mid] == target do
    return mid
  # If the middle element is larger than the target, search the left half of the list
  elsif arr[mid] > target do
    return binary_search(arr, target, low, mid - 1)
  # If the middle element is smaller than the target, search the right half of the list
  else
    return binary_search(arr, target, mid + 1, high)
  end
end

# Example usage
arr = [4, 6, 8, 10, 12, 14, 16]
target = 12
result = binary_search(arr, target, 0, length(arr) - 1) # returns 4 (the index of 12 in the list)