# This is a function that takes in two parameters, a list and a function
# It then loops through the list and applies the given function to each element
defp map_list(list, function) do
  # This is the accumulator that will store the results
  acc = []

  # This is the recursive helper function
  def append_acc([head | tail], acc, function) do
    # Apply the function to the head of the list and store the result
    result = function.(head)

    # Append the result to the accumulator
    new_acc = [acc | result]

    # Call the helper function recursively on the remaining list
    append_acc(tail, new_acc, function)
  end

  # Call the recursive helper function on the original list and accumulator
  append_acc(list, acc, function)
end

# Example usage
list = [1, 2, 3, 4]
function = fn x -> x * x end

# This will return a new list with each element squared
map_list(list, function)