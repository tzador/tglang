defmodule Complex do
  # A complex number is defined as a tuple with two elements: real and imaginary
  @type complex_number :: {number(), number()}
  
  # Adds two complex numbers by adding their real and imaginary components separately
  def add(a = {r1, i1}, b = {r2, i2}) do
    {r1 + r2, i1 + i2}
  end
  
  # Subtracts one complex number from another by subtracting their real and imaginary components separately
  def subtract(a = {r1, i1}, b = {r2, i2}) do
    {r1 - r2, i1 - i2}
  end
  
  # Multiplies two complex numbers using the formula (a + ib) * (c + id) = (ac - bd) + i(ad + bc)
  def multiply(a = {r1, i1}, b = {r2, i2}) do
    {(r1 * r2) - (i1 * i2), (r1 * i2) + (i1 * r2)}
  end
  
  # Divides one complex number by another using the formula (a + ib) / (c + id) = ((ac + bd) / (c^2 + d^2)) + i((bc - ad) / (c^2 + d^2))
  def divide(a = {r1, i1}, b = {r2, i2}) do
    {((r1 * r2) + (i1 * i2)) / ((r2 * r2) + (i2 * i2)), ((i1 * r2) - (r1 * i2)) / ((r2 * r2) + (i2 * i2))}
  end
  
  # Returns the conjugate of a complex number, where the imaginary component is multiplied by -1
  def conjugate(a = {r, i}) do
    {r, -i}
  end
  
  # Returns the absolute value (magnitude) of a complex number using the Pythagorean theorem
  def abs(a = {r, i}) do
    Math.sqrt((r * r) + (i * i))
  end
  
  # Returns the squared magnitude of a complex number, which is equal to the sum of the squares of the real and imaginary components
  def squared_abs(a = {r, i}) do
    (r * r) + (i * i)
  end
  
  # Returns the phase (angle) of a complex number using the formula arctan(y / x) in radians
  def phase(a = {r, i}) do
    Math.atan(i / r)
  end
  
  # Converts a complex number to a string in the format a + bi, where a and b are the real and imaginary components
  def to_string(a = {r, i}) do
    "#{r} + #{i}i"
  end
  
  # Converts a string in the format a + bi to a complex number
  def from_string(str) do
    # Extracts the real and imaginary components from the string, using regex to match positive or negative numbers with or without decimals
    {r, i} = Regex.run(~r/([-+]?\d*\.?\d+)\s*([-+]?\d*\.?\d+)i/, str) |> Enum.at(1) |> List.to_tuple
    {String.to_float(r), String.to_float(i)}
  end
end

# Examples of using the functions in the Complex module
a = {2, 4}
b = {3, 5}
IO.puts "a = #{Complex.to_string(a)}" # Outputs "a = 2 + 4i"
IO.puts "b = #{Complex.to_string(b)}" # Outputs "b = 3 + 5i"

c = Complex.add(a, b) # c = {5, 9}
IO.puts "c = #{Complex.to_string(c)}" # Outputs "c = 5 + 9i"

d = Complex.multiply(a, b) # d = {-14, 22}
IO.puts "d = #{Complex.to_string(d)}" # Outputs "d = -14 + 22i"

e = Complex.divide(a, b) # e = {0.7435897435..., -0.0256410256...}
IO.puts "e = #{Complex.to_string(e)}" # Outputs "e = 0.7435897435... - 0.0256410256...i"

f = Complex.conjugate(a) # f = {2, -4}
IO.puts "f = #{Complex.to_string(f)}" # Outputs "f = 2 - 4i"

abs_a = Complex.abs(a) # abs_a = 4.472135955...
IO.puts "Absolute value of a: #{abs_a}" # Outputs "Absolute value of a: 4.472135955..."

sqr_abs_a = Complex.squared_abs(a) # sqr_abs_a = 20
IO.puts "Squared absolute value of a: #{sqr_abs_a}" # Outputs "Squared absolute value of a: 20"

phase_a = Complex.phase(a) # phase_a = 1.107148717...
IO.puts "Phase of a: #{phase_a}" # Outputs "Phase of a: 1.107148717..."

str_a = Complex.to_string(a) # str_a = "2 + 4i"
IO.puts "a as a string: #{str_a}" # Outputs "a as a string: 2 + 4i"

comp_a = Complex.from_string(str_a) # comp_a = {2, 4}
IO.puts "String converted back to complex number: #{Complex.to_string(comp_a)}" # Outputs "String converted back to complex number: 2 + 4i"