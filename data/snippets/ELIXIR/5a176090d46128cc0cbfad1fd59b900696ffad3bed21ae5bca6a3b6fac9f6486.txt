defmodule MyModule do
  # This is a function that takes in two integers as arguments and returns their sum
  # Arguments:
  # - num1: the first integer
  # - num2: the second integer
  # Returns:
  # The sum of the two integers
  def add(num1, num2) do
    # Pattern matching to check if the arguments are integers
    when is_integer(num1) and is_integer(num2) do
      # Using the '+' operator to add the two integers and return the result
      num1 + num2
    end
  end

  # This is a function that takes in a list of integers and returns the maximum value in the list
  # Arguments:
  # - int_list: the list of integers
  # Returns:
  # The maximum value in the list
  def get_max(int_list) do
    # Using recursion to iterate through the list and find the maximum value
    # Setting the initial maximum value as the first item in the list
    get_max_helper(Enum.drop(int_list, 1), hd(int_list))
  end

  # Helper function for get_max function
  # Arguments:
  # - remaining_list: the remaining list of integers to iterate through
  # - cur_max: the current maximum value
  # Returns:
  # The maximum value found in the list
  defp get_max_helper(remaining_list, cur_max) do
    # Pattern matching to check if the list is empty, indicating the end of iteration
    when remaining_list == [] do
      # Returning the current maximum value
      cur_max
    # Pattern matching to check if the current maximum value is less than the head of the remaining list
    when cur_max < hd(remaining_list) do
      # Calling the helper function recursively with the current maximum value replaced by the head of the remaining list
      get_max_helper(Enum.drop(remaining_list, 1), hd(remaining_list))
    # Pattern matching to handle all other cases
    else
      # Calling the helper function recursively with the remaining list and the same maximum value
      get_max_helper(Enum.drop(remaining_list, 1), cur_max)
    end
  end
end