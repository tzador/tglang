# Module declaration
defmodule Calculator do
  # Function definition with type-specification
  @spec sum(number, number) :: number
  def sum(num1, num2) do
    # Error handling for non-numeric inputs
    unless is_number(num1) and is_number(num2) do
      raise ArgumentError, "Invalid input: please provide numbers."
    end
    # Calculation using pattern matching
    case {num1, num2} do
      {x, y} when is_integer(x) and is_integer(y) -> x + y
      {x, y} when is_float(x) and is_float(y) -> x + y
      _ -> raise ArgumentError, "Invalid input: please provide numbers."
    end
  end

  # Function definition with pattern matching and guard clauses
  def multiply([], prod), do: prod
  def multiply([head | tail], prod) when is_number(head) do
    multiply(tail, head * prod)
  end
  def multiply([_head | tail], _prod), do: raise RuntimeError, "Invalid input: please provide a list of numbers."

  # Function composition using pipes
  def divide(num1, num2) do
    # Error handling for division by 0
    with {:ok, result} <- do_divide(num1, num2) do
      result
    else
      {:error, reason} -> raise RuntimeError, reason
    end
  end
  # Private function for division
  defp do_divide(num1, num2) do
    # Guard clause for division by 0
    cond do
      num2 == 0 -> {:error, "Cannot divide by zero."}
      # Calculation using pattern matching
      {x, y} when is_number(x) and is_number(y) -> {:ok, x / y}
      _ -> {:error, "Invalid input: please provide numbers."}
    end
  end
end

# Function usage
Calculator.sum(5, 10) #=> 15
Calculator.multiply([2, 3, 4]) #=> 24
Calculator.divide(10, 5) #=> 2.0