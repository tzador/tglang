defmodule User do
  @moduledoc """
  This module represents a user in the system.
  It contains functions for creating, updating, and deleting users,
  as well as managing user data.
  """
  
  # `@doc` annotations can also be added to specific functions
  @doc """
  Creates a new user with the given name and email.
  
  ## Examples
      iex> User.create("John", "john@example.com")
      %User{name: "John", email: "john@example.com"}
  
  """
  def create(name, email) do
    %User{name: name, email: email}
  end
  
  # `doctest` annotations allow for automatic testing when running `mix test`
  @doc """
  Updates the user with the given ID by changing the name or email.
  
  ## Examples
      iex> User.update(%User{id: 1, name: "John", email: "john@example.com"}, name: "Bob")
      %User{id: 1, name: "Bob", email: "john@example.com"}
  
      iex> User.update(%User{id: 1, name: "John", email: "john@example.com"}, email: "bob@example.com")
      %User{id: 1, name: "John", email: "bob@example.com"}
  """
  def update(user, update) do
    Map.update(user, :name, update[:name])
    |> Map.update(:email, update[:email])
  end
  
  @doc """
  Deletes the user with the given ID.
  
  ## Examples
      iex> User.delete(%User{id: 1, name: "John", email: "john@example.com"})
      :ok
  
  """
  def delete(user) do
    :ok
  end
end