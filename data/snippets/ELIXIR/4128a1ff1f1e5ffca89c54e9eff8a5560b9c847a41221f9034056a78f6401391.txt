defmodule Team do
  # Define a struct for the team data
  @enforce_keys [:name, :size, :city]
  defstruct [:name, :size, :city]

  # Define a function to calculate the average size of the team
  @spec calc_avg_size(list) :: integer
  def calc_avg_size(team) do
    # Use the Enum module's `reduce` function to sum up the team sizes
    total_size = Enum.reduce(team, 0, fn member, acc ->
      acc + member.size
    end)

    # Divide the total size by the length of the team to get the average
    avg_size = total_size / length(team)

    # Round the average size to the nearest whole number
    rounded_avg = round(avg_size)

    # Return the final result
    rounded_avg
  end

  # Define a function to add a new member to the team
  @spec add_member(tuple) :: list
  def add_member({name, size, city}) do
    # Create a new member map using the Team struct
    member = %{name: name, size: size, city: city}

    # Use pattern matching to add the new member to the team
    new_team = [member | @.team]

    # Return the updated team
    new_team
  end
end

# Create a new team with three members
team = [
  %{name: "John", size: 6, city: "New York"},
  %{name: "Emily", size: 7, city: "Chicago"},
  %{name: "Max", size: 5, city: "Los Angeles"}
]

# Calculate the average size of the team
avg_size = Team.calc_avg_size(team)

# Add a new member to the team
new_team = Team.add_member({"Sarah", 4, "Miami"})