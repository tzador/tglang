defmodule User do
  @moduledoc """
  Data structures and functions for managing a user's information.
  """

  # Module attributes
  @user_count 0

  # Struct for user information
  @enforce_keys [:name, :email, :age]
  defstruct [
    name: nil, # User's name
    email: nil, # User's email
    age: 0 # User's age
  ]

  # Function to create a new user
  # @param name [String] : name of user
  # @param email [String] : email of user
  # @param age [Integer] : age of user
  # @return [User] : new user struct
  def new(name, email, age) do
    @user_count += 1 # Increment user count
    %__MODULE__{} # Return empty struct
    |> put_name(name) # Add name to struct
    |> put_email(email) # Add email to struct
    |> put_age(age) # Add age to struct
  end

  # Function to update the user's name
  # @param %User{} : the user struct to update
  # @param name [String] : new name for user
  # @return [User] : updated user struct
  def put_name(%User{} = user, name) do
    %User{user | name: name} # Update name in struct
  end

  # Function to update the user's email
  # @param %User{} : the user struct to update
  # @param email [String] : new email for user
  # @return [User] : updated user struct
  def put_email(%User{} = user, email) do
    %User{user | email: email} # Update email in struct
  end

  # Function to update the user's age
  # @param %User{} : the user struct to update
  # @param age [Integer] : new age for user
  # @return [User] : updated user struct
  def put_age(%User{} = user, age) do
    %User{user | age: age} # Update age in struct
  end
end