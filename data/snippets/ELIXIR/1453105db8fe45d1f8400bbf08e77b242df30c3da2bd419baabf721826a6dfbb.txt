defmodule DataAnalysis do
  @moduledoc """
    A module that contains functions for analyzing data.
  """

  # Function to calculate the average
  @spec average([integer]) :: float
  def average(data) do
    length = length(data)
    total = Enum.sum(data)

    total / length
  end

  # Function to calculate the median
  @spec median([integer]) :: float
  def median(data) do
    sorted_data = Enum.sort(data)
    length = length(sorted_data)
    middle_index = length / 2

    # If length is even, take average of the middle two numbers
    if rem(length, 2) == 0 do
      (List.nth(sorted_data, middle_index - 1) + List.nth(sorted_data, middle_index)) / 2
    # If length is odd, take the middle number
    else
      List.nth(sorted_data, middle_index)
    end
  end

  # Function to calculate the mode
  @spec mode([integer]) :: [integer]
  def mode(data) do
    # Create a map to store the frequencies of each number
    freq_map = %{}

    # Iterate through the data
    Enum.each(data, fn num ->
      if Map.has_key?(freq_map, num) do
        # If number exists in map, increment its frequency by 1
        Map.update!(freq_map, num, &(&1+1))
      else
        # If number does not exist in map, add it and set its frequency to 1
        Map.put_new(freq_map, num, 1)
      end
    end)

    # Find the maximum frequency
    max_freq = Enum.max(freq_map, fn {_, freq} -> freq end)

    # Filter the map to only include numbers with the maximum frequency
    mode = Enum.filter(freq_map, fn {_, freq} -> freq == max_freq end)

    # Return only the keys (numbers) of the filtered map
    Map.keys(mode)
  end
end