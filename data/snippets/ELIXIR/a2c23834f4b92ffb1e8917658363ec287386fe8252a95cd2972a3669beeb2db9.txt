defmodule MyModule do #Define a module named MyModule
  use GenServer #Use the GenServer library for creating processes and managing state

  def start_link do #Define a function for starting the process
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
    # Start the process using the current module and with no initial state
    # Assign the name of the process as the name of the module
    # In Elixir, a process can be given a name to make it easier to identify and communicate with
  end

  # Define the callbacks for the GenServer behaviour
  def init(_args) do #The init callback is called when the process is started and is used to initialize the state
    {:ok, %{}}
    #Return a tuple with the atom :ok and an empty map as the initial state
  end

  def handle_call({:add, x, y}, _from, state) do #The handle_call callback is used to handle synchronous calls to the process
    # It takes in the call message, the caller's process id (_from), and the current state as arguments
    # In this case, the call message is a tuple with the atom :add and two numbers, x and y
    sum = x + y #Calculate the sum of x and y
    {:reply, sum, state} #Return a tuple with the atom :reply, the sum, and the current state as the reply message
  end

  def handle_cast({:update, key, value}, state) do #The handle_cast callback is used to handle asynchronous messages sent to the process
    # It takes in the cast message and the current state as arguments
    # In this case, the cast message is a tuple with the atom :update, a key, and a value
    updated_state = Map.put(state, key, value) #Update the state with the given key-value pair
    {:noreply, updated_state} #Return a tuple with the atom :noreply and the updated state to indicate that no response is necessary
  end

  def handle_info(:reset, state) do #The handle_info callback is used to handle arbitrary messages sent to the process
    # It takes in the info message and the current state as arguments
    # In this case, the info message is the atom :reset
    {:noreply, %{}}
    #Return a tuple with the atom :noreply and an empty map to reset the state
  end

  # Define functions for interacting with the process
  def add(x, y) do #A function that sends a synchronous call message to the process to calculate the sum of x and y
    GenServer.call(__MODULE__, {:add, x, y})
    #Sends a call message to the process using the module name (which is also the process name) and the tuple of the call message
  end

  def update(key, value) do #A function that sends an asynchronous cast message to the process to update the state with the given key-value pair
    GenServer.cast(__MODULE__, {:update, key, value})
    #Sends a cast message to the process using the module name (which is also the process name) and the tuple of the cast message
  end

  def reset do #A function that sends an arbitrary message to the process to reset its state to an empty map
    GenServer.cast(__MODULE__, :reset)
    #Sends a cast message to the process using the module name (which is also the process name) and the atom :reset
  end
end