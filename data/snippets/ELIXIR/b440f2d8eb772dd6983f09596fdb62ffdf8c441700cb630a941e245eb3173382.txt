defmodule Name.Space do
  @docs """This is a module named Name.Space."""

  @moduledoc """
  This module contains functions and data for handling names and namespaces.
  """

  def name_space("name", namespace) do
    {namespace, name}
  end

  @name_patterns ["first.last", "initials.last", "first.m.last"]
  @parent_namespaces ["first", "initials"]

  def name_space_pattern(name) do
    name
    |> String.split(".")
    |> Enum.reverse
    |> find_matching_name_pattern
  end

  defp find_matching_name_pattern([h|_]=name_parts) when String.length(h) != 1 do
    Enum.find(@name_patterns, &(name =~ &1))
  end

  defp find_matching_name_pattern([h, t|ts]) do
    case {parent_namespace(h), namespace_token(t)} do
      {nil, _} -> find_matching_name_pattern([t|ts])
      {_parent_namespace, nil} -> nil
      {_parent_namespace, _namespace_token} -> h
    end
  end

  defp parent_namespace(initial) when String.length(initial) == 1 do
    Enum.find(@parent_namespaces, &(&1 =~ ~r/^#{initial}/))
  end

  def namespace_token(token) do
    case String.match?(token, ~r/^[A-Z][_A-Za-z0-9]+$/) do
      false -> nil
      true -> token
    end
  end
end