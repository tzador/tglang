defmodule ExampleModule do
  @moduledoc """
  This is an example module in Elixir.
  It has multiple functions and uses pattern matching.
  """

  # Define a function with two parameters that can be of any type
  def example_function(param1, param2) do
    # Use a case statement to pattern match on the parameters
    case {param1, param2} do
      # If the parameters are both integers, perform addition
      {integer1, integer2} when is_integer(integer1) and is_integer(integer2) ->
        integer1 + integer2
      # If the parameters are both strings, concatenate them
      {string1, string2} when is_binary(string1) and is_binary(string2) ->
        string1 <> string2
      # If the parameters are both lists, add them element-wise
      {[head1 | tail1], [head2 | tail2]} ->
        [head1 + head2 | example_function(tail1, tail2)]
      # If the parameters are tuples, return their size
      {tuple1, tuple2} when is_tuple(tuple1) and is_tuple(tuple2) ->
        tuple_size(tuple1) + tuple_size(tuple2)
      # If none of the above cases match, raise an error
      _ ->
        raise "Invalid parameters provided."
    end
  end

  # Define a function with no parameters
  def example_function() do
    # Print a message
    IO.puts "No parameters provided."
    # Call the function with default values
    example_function(1, 2)
  end
end

# Call the function with different parameters
ExampleModule.example_function(1, 2) # 3
ExampleModule.example_function("Hello", "World") # "HelloWorld"
ExampleModule.example_function([1, 2, 3], [4, 5, 6]) # [5, 7, 9]
ExampleModule.example_function({1, 2, 3}, {4, 5, 6}) # 6

# Call the function with no parameters
ExampleModule.example_function() # "No parameters provided.3"