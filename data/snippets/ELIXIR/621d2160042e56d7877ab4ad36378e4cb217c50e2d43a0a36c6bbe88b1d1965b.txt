# This is an example of an Elixir function that creates a list of random numbers
defmodule RandomList do
  # Public function that takes in the size of the list and returns the list
  def generate_list(list_size) do 
    # Pattern matching to determine if the list size is 0
    case list_size do 
      0 ->
        # If the list size is 0, return an empty list
        []
      _ ->
        # If the list size is not 0, call the private generate_list function
        # passing in the list size and an empty list
        generate_list(list_size, [])
    end
  end
  
  # Private function that recursively generates random numbers and adds them to the list
  defp generate_list(0, list) do 
    # If the list size is 0, return the list
    list 
  end
  # Private function that recursively generates random numbers and adds them to the list
  defp generate_list(list_size, list) do 
    # Call the private generate_list function again, passing in the list size - 1
    # and the list with a new random number added to the front
    generate_list(list_size - 1, [random_number() | list])
  end
  
  # Helper function that generates a random number
  defp random_number() do 
    # Uses the Erlang builtin rand function to generate a random number between 1 and 100
    :rand.uniform(100)
  end
end

# Example usage:
# Generates a list of 10 random numbers
RandomList.generate_list(10) # [61, 47, 52, 39, 3, 20, 85, 73, 23, 1]