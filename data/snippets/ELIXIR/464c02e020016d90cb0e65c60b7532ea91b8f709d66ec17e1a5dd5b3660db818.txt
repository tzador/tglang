defmodule ShoppingCart do 
  use GenServer
  
  # A shopping cart will have a list of items and a total cost
  @total_cost 0
  @items []
  
  # Functions to start and stop the shopping cart process
  def start_link() do 
    GenServer.start_link(__MODULE__, [])
  end
  
  # Stop the shopping cart process
  def stop() do
    GenServer.stop(__MODULE__)
  end
  
  # Add an item to the shopping cart 
  # using the GenServer call function to handle concurrency
  def add_item(item) do
    GenServer.call(__MODULE__, {:add_item, item})
  end
  
  # Return the total cost of the items in the shopping cart
  def get_total_cost() do
    GenServer.call(__MODULE__, :get_total_cost)
  end
  
  # Handle incoming messages for the shopping cart
  def handle_call({:add_item, item}, _from, state) do
    # Add the item to the list of items
    @items = [@items, item]
    # Update the total cost
    @total_cost = @total_cost + item[:price]
    {:reply, "Item added to shopping cart.", state}
  end
  
  def handle_call(:get_total_cost, _from, state) do
    # Return the total cost
    {:reply, @total_cost, state}
  end
end

# Using the shopping cart module to add items and get the total cost
ShoppingCart.start_link()
ShoppingCart.add_item({:name, "Shoes", :price, 50})
ShoppingCart.add_item({:name, "Shirt", :price, 25})
total_cost = ShoppingCart.get_total_cost()

# Output: 
{:ok, #PID<0.112.0>}
{:ok, #PID<0.113.0>}
"Item added to shopping cart."
"Item added to shopping cart."
75