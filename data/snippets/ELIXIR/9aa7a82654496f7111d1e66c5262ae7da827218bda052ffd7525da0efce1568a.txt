defmodule User do
  @behaviour Resource # Annotated with the @behaviour decorator

  @moduledoc """
  User manages user data and authorization.
  """

  ### Struct for representing user data ###
  # Annotated with the schema decorator for defining fields and types
  @schema %{ 
    name: String.t,
    age: integer,
    email: String.t,
    password: String.t,
    permissions: [Permission.t]
  }

  ### Resource functions ###
  # Annotated with the @doc decorator for describing function purpose
  # and arguments 
  @doc "Create a new user with the given name, age, email and password."
  def create(name, age, email, password) do
    %User{
      name: name,
      age: age,
      email: email,
      password: password,
      permissions: []
    }
  end

  @doc "Verify if user has a specific permission."
  def has_permission?(user, permission) do
    Enum.member?(user.permissions, permission)
  end
end