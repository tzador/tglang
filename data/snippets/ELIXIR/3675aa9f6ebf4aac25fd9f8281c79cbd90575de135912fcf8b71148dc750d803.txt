defmodule User do
  @doc """
  struct representing a user
  """
  defstruct [
    email: nil,
    name: nil,
    age: nil,
    is_active: nil,
    address: nil,
    likes: [
      food: ["pizza", "sushi"],
      movies: ["action", "comedy"],
      books: ["fantasy", "sci-fi"]
    ]
  ]
  
  @doc """
  validates the user's age
  if the age is not a number, it returns an error
  otherwise, it returns the user's age
  """
  def age(user) do
    case user.age do
      n when is_number(n) -> n
      _ -> {:error, "Age must be a number"}
    end
  end
  
  @doc """
  checks if the user's email is valid 
  and returns the email if it is valid
  otherwise, returns an error
  """
  def email(user) do
    case user.email do
      e when String.match?(e, ~r/.+@.+/) -> e
      _ -> {:error, "Invalid email"}
    end
  end
  
  @doc """
  returns the total number of likes 
  the user has for all categories
  """
  def likes_count(user) do
    Enum.sum(Enum.map(user.likes, &length(&1)))
  end
  
  @doc """
  returns a list of all the user's favorite genres 
  from all categories
  """
  def favorite_genres(user) do
    genres = user.likes.food ++ user.likes.movies ++ user.likes.books
    Enum.uniq(genres)
  end
  
  @doc """
  calculates the percentage of users 
  who have the same favorite movie as the given user
  """
  def same_favorite_movie_percentage(user, users) do
    user_genre = user.likes.movies
    same_users = Enum.filter(users, fn u -> u.likes.movies == user_genre end)
    (Enum.count(same_users) / Enum.count(users)) * 100
  end
end