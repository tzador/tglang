defmodule User do
  @moduledoc """
  This module represents a user in the system.
  """

  # An example user with name, age, and email
  @type user :: %{name: String.t(), age: integer(), email: String.t()}

  # A list of users
  @type user_list :: list(user)

  # A user with an id, represented as an atom
  @type user_with_id :: %{id: atom(), name: String.t(), age: integer(), email: String.t()}

  # An example user with id
  example_user_with_id = %{id: :user1, name: "John", age: 30, email: "john@test.com"}

  # A tuple containing a user and their friends
  @type user_tuple :: {user_with_id, user_list}

  # A function that retrieves a user's name
  @spec get_user_name(user_with_id) :: String.t()
  def get_user_name(user_with_id) do
    user_with_id.name
  end

  # A function that creates a user tuple with the provided information
  @spec create_user_tuple(atom(), String.t(), integer(), String.t()) :: user_tuple
  def create_user_tuple(id, name, age, email) do
    %{id: id, name: name, age: age, email: email}, [example_user_with_id]
  end
end