# Function to calculate the factorial of a number
def factorial(n) do
  result = 1
  # Pattern matching and recursion
  case n do
    0 -> result # Base case
    _ -> n * factorial(n-1) # Recursive call
  end
  # Multiline comment
  # Output the result
  IO.puts("Factorial of #{n} is #{result}")
end

# Anonymous function to calculate the average of a list of numbers
average = fn (list) -> Enum.sum(list) / length(list) end

# List comprehension to generate a list of even numbers from 1 to n
even_numbers = for x <- 1..n, rem(x, 2) == 0, do: x

# Nested function to check if a number is prime
def is_prime(n) do
  # Helper function to check for factors
  def factors(n, i) when i <= 1, do: false
  def factors(n, i) when rem(n, i) == 0, do: true
  def factors(n, i), do: factors(n, i-1)

  # Check if there are only two factors
  if factors(n, n) and not factors(n, n-1), do: true, else: false
end

# Module attribute
@factorial 10

# Module function to run the code
def run do
  # Call the factorial function and store the result
  res = factorial(@factorial)

  # Print the result
  IO.puts("Factorial of #{@factorial} is #{res}")

  # Call the anonymous function to calculate the average of a list
  avg = average.([1, 2, 3, 4, 5])
  # Print the average
  IO.puts("The average is #{avg}")

  # Generate a list of even numbers using list comprehension and print it
  evens = even_numbers(n)
  IO.puts("Even numbers from 1 to #{n} are #{inspect evens}")

  # Check if a number is prime and print the result
  IO.puts("Is 7 prime? #{is_prime(7)}")
end

# Call the run function
run()