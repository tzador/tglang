# This is a function declaration for finding the nth prime number
# Input: n (int)
# Output: nth prime number (int)

defmodule Prime do
  # Helper function to determine if a number is prime
  def is_prime?(n) do
    # Base case: 2 & 3 are prime numbers
    if n <= 3 do
      return true
    else
      # Optimizations: check for even numbers and multiples of 3
      # Any number divisible by 2 or 3 is not prime
      if rem(n, 2) == 0 or rem(n, 3) == 0 do
        return false
      else
        # Loop through odd numbers up to half of n
        # Any number above half of n cannot be a factor of n
        for i <- 5..(n/2), rem(n, i) == 0 do
          return false
        end
      end
    end
    # If all conditions are met, n is a prime number
    return true
  end

  # Main function to find the nth prime number
  def nth_prime(n) do
    # Base case: 2 is the first prime number
    if n == 1 do
      return 2
    else
      # Initialize counter for prime numbers found
      count = 1
      # Start checking from 3 since 2 is already counted
      current = 3
      # Loop until count reaches n
      while count < n do
        # Check if current number is prime
        if is_prime?(current) do
          # Increment count
          count = count + 1
        end
        # Increase current number by 2 to check only odd numbers
        current = current + 2
      end
      # Return last checked number (which is the nth prime number)
      return current - 2
    end
  end
end

# Example:
IO.puts Prime.nth_prime(100)

# Output: 541