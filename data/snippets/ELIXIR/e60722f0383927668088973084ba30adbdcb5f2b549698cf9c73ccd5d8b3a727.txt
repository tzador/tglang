defmodule BinaryTree do

  @doc """
  Represents a Binary Tree data structure with a root node and two child nodes.
  """
  defstruct [:value, :left, :right]

  @doc """
  Creates a new binary tree with the specified value as the root node.
  The left and right child nodes are initialized as empty trees.
  """
  def new(value) do
    %BinaryTree{value: value, left: %BinaryTree{}, right: %BinaryTree{}}
  end

  @doc """
  Inserts a new value into the binary tree in the correct position based on
  the value's relationship to the existing values in the tree.
  """
  def insert(%BinaryTree{} = tree, value) do  # Takes in the tree and value to insert
    if value < tree.value do                     # If the value is less than the root node's value
      %BinaryTree{tree | left: insert(tree.left, value)} # Recursively insert the value into the left subtree
    else                                         # If the value is greater than or equal to the root node's value
      %BinaryTree{tree | right: insert(tree.right, value)} # Recursively insert the value into the right subtree
    end
  end

  @doc """
  Traverses the binary tree in-order and returns a list of all values in the tree.
  """
  def inorder(%BinaryTree{value: nil}) do
    []  # Base case: return an empty list if the tree is empty
  end
  def inorder(%BinaryTree{} = tree) do
    inorder(tree.left) ++ [tree.value] ++ inorder(tree.right)  # Recursively traverse left subtree, add root value, then traverse right subtree
  end
end

# Example usage:
tree = BinaryTree.new(5)   # initialize a new tree with root value of 5
tree = BinaryTree.insert(tree, 7)  # insert value 7 into the tree
tree = BinaryTree.insert(tree, 3)  # insert value 3 into the tree
values = BinaryTree.inorder(tree)  # traverse the tree in-order and store the values in a list
IO.inspect values     # output: [3, 5, 7]