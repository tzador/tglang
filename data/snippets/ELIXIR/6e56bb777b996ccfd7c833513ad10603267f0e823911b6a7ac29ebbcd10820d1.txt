# Finding the shortest path using Dijkstra's algorithm

# Define a function to find the shortest path using Dijkstra's algorithm
def shortest_path(graph, start, finish) do

  # Initialize a map to store the shortest distances to each node
  distances = %{start => 0}

  # Initialize a map to store the previous nodes in the shortest path
  previous = %{start => nil}

  # Initialize a priority queue to keep track of unvisited nodes
  unvisited = PriorityQueue.new()
  # Add the starting node with priority 0 to the queue
  unvisited = PriorityQueue.add(unvisited, start, 0)

  # Loop while there are still unvisited nodes in the queue
  while !PriorityQueue.empty?(unvisited) do
    # Get the node with the lowest priority (shortest distance)
    {current, _} = PriorityQueue.pop(unvisited)

    # Loop through all the current node's neighbors
    Enum.each(graph[current], fn {neighbor, distance} ->
      # Calculate the new distance to the neighbor
      new_distance = distances[current] + distance

      # If the neighbor has not been visited yet or the new distance is shorter
      if !Map.has_key?(distances, neighbor) || new_distance < distances[neighbor] do
        # Update the distance to the neighbor
        distances = Map.put(distances, neighbor, new_distance)

        # Update the previous node in the shortest path
        previous = Map.put(previous, neighbor, current)

        # Add the neighbor to the queue with its updated distance as priority
        unvisited = PriorityQueue.add(unvisited, neighbor, new_distance)
      end
    end)
  end

  # Initialize the shortest path list with the finish node
  shortest = [finish]
  # Start at the finish and move backwards through the previous nodes to get the full path
  while (previous[finish] != nil) do
    # Add the previous node to the path list
    shortest = [previous[finish] | shortest]
    # Move to the previous node
    finish = previous[finish]
  end

  # Reverse the path list to get the correct order
  shortest = Enum.reverse(shortest)

  # Return the shortest path and distance
  {shortest, distances[finish]}
end