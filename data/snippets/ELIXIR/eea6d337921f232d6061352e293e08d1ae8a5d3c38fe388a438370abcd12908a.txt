defmodule Game do
  @counter 0  # counter variable to keep track of number of games played

  @moduledoc """
  This module defines a basic game with simple rules.
  """

  # function to display game title and rules
    @doc """
    Displays the game title and simple rules.
    """
  def display_game_info do
    IO.puts "Welcome to the Simple Game!"
    IO.puts "The rules are simple:"
    IO.puts "1. You will play against the computer."
    IO.puts "2. The computer will select 'rock', 'paper', or 'scissors' at random."
    IO.puts "3. You must enter your choice of 'rock', 'paper', or 'scissors' when prompted."
    IO.puts "4. If you and the computer choose the same option, it is a tie."
    IO.puts "5. If you choose 'rock' and the computer chooses 'paper', the computer wins."
    IO.puts "6. If you choose 'paper' and the computer chooses 'scissors', the computer wins."
    IO.puts "7. If you choose 'scissors' and the computer chooses 'rock', the computer wins."
    IO.puts ""
  end

  # function to get the user's input and validate it
  defp get_user_input do
    IO.puts "Enter your choice: "
    choice = IO.gets() |> String.trim() |> String.downcase()  # get the user's input and format it
    valid_choices = ~w(rock paper scissors)  # list of valid choices
    if choice in valid_choices do
      choice
    else
      IO.puts "Invalid choice, please try again."
      get_user_input()  # recursively call the function until valid input is entered
    end
  end

  # function to generate computer's choice at random
  defp generate_computer_choice do
    valid_choices = ~w(rock paper scissors)  # list of valid choices
    Enum.random(valid_choices)  # select a random choice from the list
  end

  # function to determine the winner of the game
  defp determine_winner(user_choice, computer_choice) do
    if user_choice == computer_choice do  # if both choose the same option, it is a tie
      :tie
    elsif user_choice == "rock" and computer_choice == "paper" do  # if user chooses rock and computer chooses paper, computer wins
      :computer
    elsif user_choice == "paper" and computer_choice == "scissors" do  # if user chooses paper and computer chooses scissors, computer wins
      :computer
    elsif user_choice == "scissors" and computer_choice == "rock" do  # if user chooses scissors and computer chooses rock, computer wins
      :computer
    else  # otherwise, user wins
      :user
    end
  end

  # function to play a single game
  def play_game do
    user_choice = get_user_input()  # get user's input
    computer_choice = generate_computer_choice()  # get computer's choice
    IO.puts "You chose #{user_choice} and the computer chose #{computer_choice}."
    winner = determine_winner(user_choice, computer_choice)  # determine the winner
    case winner do
      :tie ->
        IO.puts "It's a tie. Try again!"
      :computer ->
        IO.puts "Computer wins. Better luck next time!"
      :user ->
        IO.puts "You win. Congratulations!"
    end
    @counter += 1  # increment the counter after every game played
    display_counter()  # display the number of games played
  end

  # function to display the number of games played
  defp display_counter do
    IO.puts "Number of games played: #{@counter}"
    IO.puts ""
  end

  # function to play multiple games
  def play_multiple_games do
    IO.puts "How many games do you want to play? "
    num_games = IO.gets() |> String.trim() |> String.to_integer()  # get user's input and convert it to integer
    for _ <- 1..num_games do
      play_game()  # play multiple games by calling play_game() function in a loop
    end
  end

  # call the main function to start playing the game
  def main do
    display_game_info()
    play_multiple_games()
  end

end

# call the main function to start the game
Game.main()