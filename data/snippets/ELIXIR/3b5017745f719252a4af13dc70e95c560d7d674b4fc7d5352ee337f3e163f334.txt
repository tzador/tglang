# Module definition
defmodule MyModule do
  # Function definition 
  def my_function(arg1, arg2) do
    # Pattern matching
    case {arg1, arg2} do
      {x, 0} when is_number(x) -> "Division by zero not allowed"
      {x, y} -> x / y
    end
  end

  # Function with default arguments
  def greet(name \\ "World") do
    "Hello #{name}"
  end

  # Anonymous function
  my_fun = fn(x) -> x * 2 end

  # Pipe operator
  "hello world"
  |> String.split(" ")
  |> Enum.map(fn word -> String.upcase(word) end)
  |> Enum.join(" ")

  # Simple GenServer implementation
  defmodule CountServer do
    use GenServer

    def start_link do
      # spawns a process and returns a tuple containing the Pid and the first message to send
      # in this case we send the atom :ok to execute the init function
      GenServer.start_link(__MODULE__, :ok)
    end 

    # init function with default state
    def init(:ok) do
      {:ok, 0}
    end

    # handle functions
    def handle_call({:increment, num}, _from, state) do
      {:reply, state + num, state + num}
    end

    def handle_call(:retrieve, _from, state) do
      {:reply, state, state}
    end
  end

  # Creating a new CountServer process
  {:ok, pid} = CountServer.start_link

  # Sending messages to the CountServer
  GenServer.call(pid, {:increment, 5})
  GenServer.call(pid, {:retrieve})

end