defmodule Graph do
  @moduledoc """
  This module implements a graph data structure and common graph algorithms.
  """

  @doc """
  Creates a new empty graph.
  """
  def new(), do: %Graph{vertices: [], edges: []}

  @doc """
  Adds a new vertex to the graph.
  If the vertex already exists, it will not be added again.
  Returns the updated graph.
  """
  def add_vertex(graph, vertex) do
    if search_vertex(graph, vertex) do
      graph
    else
      %Graph{graph | vertices: [vertex | graph.vertices]}
    end
  end

  @doc """
  Removes a vertex from the graph.
  If the vertex does not exist, the graph remains unchanged.
  Returns the updated graph.
  """
  def remove_vertex(graph, vertex) do
    if search_vertex(graph, vertex) do
      %Graph{
        graph | vertices: List.delete(graph.vertices, vertex),
        edges: remove_edges(graph, vertex)
      }
    else
      graph
    end
  end

  @doc """
  Adds a new edge to the graph.
  If any of the vertices do not exist, they will be added first.
  If the edge already exists, it will not be added again.
  Returns the updated graph.
  """
  def add_edge(graph, from, to, weight \\ 1) do
    vertices = graph.vertices |> add_vertices([from, to])

    if search_edge(graph, from, to) do
      graph
    else
      %Graph{graph | edges: [{from, to, weight} | graph.edges]}
    end
  end

  @doc """
  Removes an edge from the graph.
  If the edge does not exist, the graph remains unchanged.
  Returns the updated graph.
  """
  def remove_edge(graph, from, to) do
    if search_edge(graph, from, to) do
      %Graph{
        graph | edges: List.delete(graph.edges, {from, to}),
        vertices: remove_unused_vertices(graph, [from, to])
      }
    else
      graph
    end
  end

  @doc """
  Searches for a specific vertex in the graph.
  Returns true if the vertex exists, false otherwise.
  """
  def search_vertex(graph, vertex) do
    graph.vertices |> Enum.member?(vertex)
  end

  @doc """
  Searches for a specific edge in the graph.
  Returns true if the edge exists, false otherwise.
  """
  def search_edge(graph, from, to) do
    graph.edges |> Enum.any?({from, to})
  end


  defp add_vertices(vertices, vertex) do
    if search_vertex(vertices, vertex) do
      vertices
    else
      [vertex | vertices]
    end
  end

  defp remove_edges(graph, vertex) do
    graph.edges |> Enum.filter(fn {from, to, _} -> from != vertex and to != vertex end)
  end

  defp remove_unused_vertices(graph, vertices) do
    graph.vertices |> Enum.filter(&(&1 in [vertices[0], vertices[1]]))
  end
end