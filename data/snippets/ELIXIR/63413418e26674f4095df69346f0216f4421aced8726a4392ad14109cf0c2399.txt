defmodule ExampleModule do
  # this is a comment in Elixir, similar to other programming languages

  @fun1_value 1.5 # this is a module attribute, denoted by @ before the name

  # this is a function in Elixir, which takes in two parameters
  # and multiplies them together
  def fun1(x, y) do
    x * y
  end

  # this is a recursive function, which calls itself until the
  # given condition is met
  def factorial(x) when x > 1 do
    x * factorial(x - 1)
  end
  def factorial(1) do
    1
  end

  # this is a struct, similar to a class in other languages
  # it has a name and a value attribute, which can be accessed
  # using dot notation
  defstruct name: "John", value: 5.0

  # this is a pattern matching, which returns different results
  # depending on the value passed in
  def greet(:world) do
    "Hello, world!"
  end
  def greet(name) do
    "Hello, #{name}!"
  end

  # this is a list, which can hold any type of data
  # lists can also be concatenated using the ++ operator
  list = [1, "Hello", :world, {1, 2}, [3, 4, 5]]
  list2 = list ++ [6, 7, 8]

  # this is a pipe operator, used to chain functions together
  # it takes the result of the previous function and passes it
  # as the first argument of the next function
  1
  |> fun1(@fun1_value) # this is equivalent to fun1(1, 1.5)
  |> factorial()
  |> IO.puts()

  # this is a anonymous function, which takes in a list of names
  # and returns a new list with the names all capitalized
  list |> Enum.map(fn name -> String.capitalize(name) end)

end