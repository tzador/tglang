defmodule Tree do
  # Defining a struct with attributes left, value, right
  defstruct left: nil,
            value: nil,
            right: nil

  # Defining a function to insert an element into the tree
  def insert(tree, element) when is_nil(tree) do
    # Creating a new tree with the inserted element as the root node
    struct(Tree, value: element)
  end

  def insert(tree = %Tree{}, element) do
    # If the element is smaller than the value of the root node, insert it into the left subtree
    if element < tree.value do
      updated_tree = tree |> Map.put(:left, Tree.insert(tree.left, element))
    # If the element is larger than the value of the root node, insert it into the right subtree
    elsif element > tree.value do
      updated_tree = tree |> Map.put(:right, Tree.insert(tree.right, element))
    # If the element already exists in the tree, return the original tree
    else
      updated_tree = tree
    end
    # Return the updated tree
    updated_tree
  end

  # Defining a function to check if an element is present in the tree
  def search(tree, element) when is_nil(tree) do
    # If the element is not found, return false
    false
  end

  def search(%Tree{value: value}, element) when value == element do
    # If the element is found in the current root node, return true
    true
  end

  def search(%Tree{left: left}, element) do
    # Check the left subtree for the element
    Tree.search(left, element)
  end

  def search(%Tree{right: right}, element) do
    # Check the right subtree for the element
    Tree.search(right, element)
  end
end