# This function checks if a given number is a prime number
def is_prime(number) do
  # Initialise a counter to count the number of factors of the given number
  factors_counter = 0
  
  # Iterate from 1 to the given number
  Enum.each(1..number, fn factor ->
    # If the given number is divisible by the current factor, increase the counter
    if rem(number, factor) == 0, do: factors_counter = factors_counter + 1
  end)
  
  # If the counter is equal to 2 (prime numbers only have 2 factors), return true
  if factors_counter == 2 do
    true
  # Otherwise, return false
  else
    false
  end
end

# This function generates a list of first n prime numbers
def generate_prime_numbers(n) do
  # Initialise an empty list to store the prime numbers
  prime_numbers = []
  
  # Initialise an integer to keep track of the current prime number
  current_prime = 2
  
  # Start a loop that will continue until we have generated n prime numbers
  while length(prime_numbers) < n do
    # Check if the current prime number is indeed a prime number using the is_prime function
    if is_prime(current_prime) do
      # If it is prime, add it to the list of prime numbers
      prime_numbers = prime_numbers ++ [current_prime]
    end
    
    # Increment the current prime number by 1
    current_prime = current_prime + 1
  end
  
  # Return the list of prime numbers
  prime_numbers
end

# Print the first 10 prime numbers
IO.inspect(generate_prime_numbers(10))
# Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]