defmodule Example do  # Defines a module named "Example"
  use GenServer # Includes the GenServer behavior to handle server processes
  require Logger # Includes the Logger library for debugging purposes

  @doc """
  Parses a given string to remove all non-alphabetic characters and downcases it.
  Takes in a string and returns the parsed string.
  """
  def parse_string(string) do # Defines a function named "parse_string" with one argument
    string
    |> String.replace(~r/[^a-z]/i, "") # Uses a regex to replace all non-alphabetic characters with empty string
    |> String.downcase() # Downcases the string
  end

  @doc """
  Starts the GenServer process and assigns initial state.
  Takes in the state as argument and returns the initialized GenServer.
  """
  def start_link(state) do # Defines a function named "start_link" with one argument
    GenServer.start_link(__MODULE__, state, name: __MODULE__) # Starts a GenServer process with the current module and given state
  end

  @impl true # Marks that the following functions are implementing the GenServer behavior

  @doc """
  Handles the request message and updates the state accordingly.
  Takes in the current state and the request message, and returns the updated state.
  """
  def handle_call(:request, _from, state) do # Defines a function named "handle_call" with three arguments
    Logger.info("Received request with state: #{state}") # Logs the request message with state
    new_state = state |> parse_string() # Parses the state using the previously defined function
    {:reply, new_state, new_state} # Returns the updated state as the reply
  end

  @doc """
  Handles the cast message and updates the state accordingly.
  Takes in the current state and the request message, and returns :noreply.
  """
  def handle_cast(:cast, state) do # Defines a function named "handle_cast" with two arguments
    Logger.debug("Received cast with state: #{state}") # Logs the cast message with state
    :noreply # Returns :noreply as the reply
  end

  @doc """
  Handles the info message and prints out the current state.
  Takes in the current state and returns :noreply.
  """
  def handle_info(:info, state) do # Defines a function named "handle_info" with two arguments
    IO.puts("Current state: #{state}") # Prints out the current state
    :noreply # Returns :noreply as the reply
  end
end