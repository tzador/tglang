defmodule Math do
  # This is a module that contains mathematical functions

  # Function to find the exponential of a number
  def exp(x) when is_float(x), do: :math.exp(x)

  # Function to find the factorial of a number
  def factorial(n) when is_integer(n) and n >= 0,
    do: Enum.reduce(1..n, fn x, acc -> acc * x end)

  # Function to find the nth fibonacci number
  def fibonacci(0), do: 0
  def fibonacci(1), do: 1
  def fibonacci(n), do: fibonacci(n-1) + fibonacci(n-2)

  # Function to calculate the hypotenuse of a right triangle
  def hypotenuse(a,b), do: :math.sqrt(a*a + b*b)

  # Function to calculate the area of a triangle
  def triangle_area(b, h), do: 0.5 * b * h

  # Function to check if a number is prime
  def prime?(n) when is_integer(n) and n >= 2 do
    n
    |> Enum.reduce(2..n-1, fn i, acc -> acc and rem(n,i) != 0 end)
    |> Kernel.!
  end

  # Function to calculate the average of a list of numbers
  def average([], acc \\ 0), do: acc
  def average([head | tail], acc), do: average(tail, acc + head) / length(tail)

end