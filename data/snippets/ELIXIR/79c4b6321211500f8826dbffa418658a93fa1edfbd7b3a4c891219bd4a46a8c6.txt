defmodule ComplexMath do
  # This function calculates the factorial of a given number
  #
  # Parameters:
  # - n: The input number
  #
  # Returns:
  # - The factorial of the input number
  def factorial(n) do
    # Base case: If n is equal to 0, return 1
    if n == 0 do
      1
    # Recursive case: Calculate factorial for n-1 and multiply it by n
    else
      factorial(n-1) * n
    end
  end

  # This function calculates the nth Fibonacci number
  #
  # Parameters:
  # - n: The input number
  #
  # Returns:
  # - The nth Fibonacci number
  def fibonacci(n) do
    # Base cases: If n is either 0 or 1, return n
    if n == 0 || n == 1 do
      n
    # Recursive case: Calculate fibonacci for n-2 and n-1 and add them together
    else
      fibonacci(n-2) + fibonacci(n-1)
    end
  end

  # This function finds the greatest common divisor of two numbers
  #
  # Parameters:
  # - a: The first input number
  # - b: The second input number
  #
  # Returns:
  # - The greatest common divisor of a and b
  def gcd(a, b) do
    # Base case: If b is equal to 0, return a
    if b == 0 do
      a
    # Recursive case: Use the modulus operator to find the remainder and call gcd function on b and the remainder
    else
      gcd(b, rem(a, b))
    end
  end

  # This function calculates the nth power of a given number
  #
  # Parameters:
  # - num: The input number
  # - n: The power to be raised to
  #
  # Returns:
  # - The nth power of the input number
  def power(num, n) do
    # Base case: If n is equal to 0, return 1
    if n == 0 do
      1
    # Recursive case: Calculate power for n-1 and multiply it by num
    else
      power(num, n-1) * num
    end
  end
end