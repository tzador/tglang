defmodule DataStructure do
  # This module defines various data structures and their operations

  # Define a singly linked list data structure
  @doc """
  A singly linked list data structure consists of a head element and a tail which
  points to the rest of the elements in the list.
  """
  defstruct [:head, :tail]

  # Define a function to insert a new element at the beginning of a list
  @doc """
  Inserts a new element at the beginning of a list by setting the new element as
  the head and the old head as the tail.
  """
  def insert_head(list, element) do
    %DataStructure{head: element, tail: list}
  end

  # Define a function to insert a new element at the end of a list
  @doc """
  Inserts a new element at the end of a list by setting the new element as the
  tail and updating the tail of the previous last element to point to the new tail.
  """
  def insert_tail(list, element) do
    update_struct(list, :tail, &insert_tail/2, element)
  end

  # Define a function to remove the head element of a list and return it
  @doc """
  Removes the head element of a list and returns it, along with the rest of the list.
  """
  def remove_head(%DataStructure{head: head, tail: tail}) do
    {head, tail}
  end

  # Define a function to remove the tail element of a list and return it
  @doc """
  Removes the tail element of a list and returns it, along with the rest of the list.
  """
  def remove_tail(%DataStructure{head: head, tail: tail}) do
    case tail do
      nil -> {head, nil}
      %DataStructure{head: tail_head, tail: tail_tail} -> {tail_head, update_struct(tail_tail, :tail, &remove_tail/1)}
    end
  end

  # Define a function to retrieve the length of a list
  @doc """
  Returns the length of a list by recursively counting the elements.
  """
  def length(%DataStructure{head: nil, tail: nil}) do
    0
  end
  def length(%DataStructure{head: _, tail: nil}) do
    1
  end
  def length(%DataStructure{head: _, tail: tail}) do
    1 + length(tail)
  end
end