# Create a map with multiple layers
map = %{
  :layer1 => %{          # :layer1 is a key with a nested map
    :language => "ELIXIR",    # :language is a key with a string value
    :version => 1.10,          # :version is a key with a float value
    :features => ["pattern matching", "functional programming"]    # :features is a key with a list
  },
  :layer2 => %{
    :framework => "Phoenix",   # :framework is a key with a string value
    :version => 1.5            # :version is a key with an integer value
  }
}

# Accessing nested values in map
IO.puts(map[:layer1][:language])     # Output: "ELIXIR"
IO.puts(map[:layer2][:framework])    # Output: "Phoenix"

# Adding a new key-value pair to map
map = map |> Map.put(:layer3, %{name: "Code Snippet"})   # Output: %{layer1: %{features: ["pattern matching", "functional programming"], language: "ELIXIR", version: 1.10}, layer2: %{framework: "Phoenix", version: 1.5}, layer3: %{name: "Code Snippet"}}

# Updating a key-value pair in map
map = Map.update!(map, :layer2, fn val -> Map.put(val, :language, "Elixir") end)  # Output: %{layer1: %{features: ["pattern matching", "functional programming"], language: "ELIXIR", version: 1.10}, layer2: %{framework: "Phoenix", language: "Elixir", version: 1.5}, layer3: %{name: "Code Snippet"}}

# Adding a new key-value pair to nested map
map = map |> Map.update(:layer2, fn val -> Map.put(val, :additional_features, ["Ecto", "Plug"]) end)   # Output: %{layer1: %{features: ["pattern matching", "functional programming"], language: "ELIXIR", version: 1.10}, layer2: %{additional_features: ["Ecto", "Plug"], framework: "Phoenix", language: "Elixir", version: 1.5}, layer3: %{name: "Code Snippet"}}