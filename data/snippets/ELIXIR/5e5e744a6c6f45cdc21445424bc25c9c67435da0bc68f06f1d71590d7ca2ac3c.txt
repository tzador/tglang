defmodule Math do
  # Creates a module named "Math"

  @doc "Returns the sum of two numbers"
  def add(x, y) do
    # Defines a function named "add" that takes in two parameters, named "x" and "y"
    x + y # Returns the sum of "x" and "y"
  end
end

defmodule Calculator do
  # Creates a module named "Calculator"

  @doc "Performs basic arithmetic operations"
  def operate(operation, x, y) do
    # Defines a function named "operate" that takes in three parameters, named "operation", "x", and "y"
    case operation do
      # Uses the "case" keyword to perform pattern matching on the value of "operation"
      :add -> Math.add(x, y) # If "operation" is equal to the atom ":add", calls the "add" function from the "Math" module with the arguments "x" and "y"
      :subtract -> x - y # If "operation" is equal to the atom ":subtract", returns the difference of "x" and "y"
      :multiply -> x * y # If "operation" is equal to the atom ":multiply", returns the product of "x" and "y"
      :divide -> x / y # If "operation" is equal to the atom ":divide", returns the quotient of "x" and "y"
      _ -> IO.puts "Invalid operation" # If "operation" does not match any of the above patterns, prints an error message
    end
  end
end