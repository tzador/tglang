# Define a module named "MathFunctions"
defmodule MathFunctions do
  # Macro to generate overloaded function definitions
  defmacro defoverload(name, clauses) do
    quote do
      # Generate function definitions for each clause
      Enum.each(clauses, fn {pattern, body} ->
        def unquote(name)(pattern), do: unquote(body)
      end)
    end
  end

  # Overload the + operator for adding two integers
  defoverload +, {[a :: integer, b :: integer], a + b}

  # Overload the + operator for adding two floats
  defoverload +, {[a :: float, b :: float], a + b}

  # Overload the * operator for multiplying two integers
  defoverload *, {[a :: integer, b :: integer], a * b}

  # Overload the * operator for multiplying two floats
  defoverload *, {[a :: float, b :: float], a * b}
end

# Call the overloaded functions
MathFunctions.(1, 2) #=> 3
MathFunctions.(1.5, 2.5) #=> 4.0
MathFunctions.(3, 4) #=> 12
MathFunctions.(3.5, 4.5) #=> 15.75