# This function takes in two lists and outputs the intersecting elements
def intersect(list1, list2) do
  # Convert lists to a map with elements as keys and number of occurrences as values
  map1 = list_to_map(list1)
  map2 = list_to_map(list2)

  # Initialize empty list for storing intersecting keys
  intersecting_keys = []

  # Iterate through keys in map1
  for key1 <- Map.keys(map1) do
    # Check if key exists in map2
    if Map.has_key?(map2, key1) do
      # Get minimum value between number of occurrences in map1 and map2
      min_val = min(Map.get(map1, key1), Map.get(map2, key1))
      # Repeat key by min_val, e.g. [3, 4] -> [3, 3, 3, 4, 4, 4]
      repeated_keys = Enum.map(1..min_val, fn _ -> key1 end)
      # Add repeated keys to intersecting_keys list
      intersecting_keys = intersecting_keys ++ repeated_keys
    end
  end

  # Return intersecting_keys list
  intersecting_keys
end

# Example usage of intersect function
intersect([1, 2, 3, 3, 4, 5], [3, 4, 4, 5, 6]) # [3, 4, 4, 5]