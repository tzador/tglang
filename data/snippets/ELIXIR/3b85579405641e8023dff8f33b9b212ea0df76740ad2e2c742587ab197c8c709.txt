defmodule User do
  @moduledoc """
  This module represents a user and their corresponding attributes.
  """

  use Ecto.Schema

  schema "users" do
    field :name, :string
    field :age, :integer
    field :email, :string
    field :active, :boolean, default: true
    has_many :posts, Post
  end

  @doc """
  Validates the user's email address.
  """
  defp validate_email_changeset(changeset) do
    changeset
    |> validate_required([:email])
    |> validate_format(:email, ~r/@/)
  end

  @doc """
  Creates a new user changeset with the given parameters.
  """
  def changeset(%User{} = user, attrs) do
    user
    |> Ecto.Changeset.cast(attrs, [:name, :age, :email, :active])
    |> validate_email_changeset
  end

  @doc """
  Retrieves all active users in the database.
  """
  def active_users_query do
    from(u in User, where: u.active == true)
  end
end

defmodule Post do
  @moduledoc """
  This module represents a post made by a user.
  """

  use Ecto.Schema

  schema "posts" do
    field :title, :string
    field :content, :text
    belongs_to :user, User
  end

  @doc """
  Creates a new post changeset with the given parameters.
  """
  def changeset(%Post{} = post, attrs) do
    post
    |> Ecto.Changeset.cast(attrs, [:title, :content])
  end
end

#Note: This code snippet uses Ecto, a database wrapper for Elixir. For brevity, database migration and seeding code has been omitted.