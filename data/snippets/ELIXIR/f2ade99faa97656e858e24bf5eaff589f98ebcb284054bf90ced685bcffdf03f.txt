defmodule ShoppingCart do

  @doc """
  Module that manages a shopping cart
  """

  # Function to add item to cart
  @spec add_to_cart(item :: map, cart :: list) :: list
  def add_to_cart(item, cart) do
    case cart do
      [] -> [item]
      _ -> [item | cart]
    end
  end
  
  # Function to remove item from cart
  @spec remove_from_cart(item :: map, cart :: list) :: list
  def remove_from_cart(item, cart) do
    Enum.filter(cart, fn x -> x != item end)
  end
  
  # Function to update cart item quantity
  @spec update_cart_item(item :: map, quantity :: integer, cart :: list) :: list
  def update_cart_item(item, quantity, cart) do
    updated_cart = for i <- cart, i == item, do: Map.update(i, :quantity, fn x -> x + quantity end)
    Enum.map(updated_cart, fn x -> Map.put(x, :total_price, x[:price] * x[:quantity]) end)
  end
  
  # Function to calculate total price of items in cart
  @spec total_price(cart :: list) :: number
  def total_price(cart), do: Enum.reduce(cart, 0, fn x, acc -> acc + x[:total_price] end)
end

# Example use case
cart = []
cart = ShoppingCart.add_to_cart(%{name: "Shoes", price: 50.00, quantity: 1}, cart)
cart = ShoppingCart.add_to_cart(%{name: "Shirt", price: 25.00, quantity: 2}, cart)
cart = ShoppingCart.update_cart_item(%{name: "Shoes", price: 50.00, quantity: 1}, 1, cart)
ShoppingCart.total_price(cart)