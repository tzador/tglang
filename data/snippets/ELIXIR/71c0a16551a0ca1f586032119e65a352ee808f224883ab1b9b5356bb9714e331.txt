defmodule Example do # Creates a module named "Example"
  @a 3 # Sets a module attribute "a" with the value 3
  def func(b), do: @a * b # Defines a function named "func" that takes in an argument "b" and multiplies it by the module attribute "a"
  
  defstruct [:name, :age, :height] # Sets a default structure for the module with fields "name", "age", and "height"
  
  def new_struct(name, age, height) do # Defines a function named "new_struct" that takes in arguments for the structure fields
    %Example{name: name, age: age, height: height} # Uses pattern matching to assign values to corresponding structure fields
  end
  
  defp private_func(x, y) when x < y do # Defines a private function named "private_func" that takes in arguments "x" and "y" and only executes if "x" is less than "y"
    IO.inspect("X is less than Y")
    x + y
  end
  
  defp private_func(_x, _y) when x >= y, do: IO.inspect("X is greater than or equal to Y") # Defines another private function named "private_func" that takes in arguments "x" and "y" and only executes if "x" is greater than or equal to "y"
end