# A function to calculate the n-th Fibonacci number using recursion
# Takes in an integer n and returns the n-th Fibonacci number
def fib(n) do
  if n < 2 do
    n
  else
    fib(n-1) + fib(n-2)
  end
end

# A function to calculate the factorial of a number using recursion
# Takes in an integer n and returns the factorial of n
def factorial(n) do
  if n == 0 do
    1
  else
    n * factorial(n-1)
  end
end

# A function to generate a list of prime numbers up to a given number
# Takes in an integer n and returns a list of all prime numbers up to n
defprimes(n) do
  # Create a list of all numbers from 2 to n
  numbers = 2..n
  # Use recursion to remove multiples of earlier prime numbers
  def remove_multiples(primes, [head | tail]) do
    # Filter out any numbers that are not multiples of the current prime number
    new_numbers = Enum.filter(tail, fn x -> rem(x, head) != 0 end)
    # Add the current prime number to the list of primes
    new_primes = [head | primes]
    # Recursively call the function on the new list of primes and remaining numbers
    remove_multiples(new_primes, new_numbers)
  end
  # Call the remove_multiples function starting with an empty list of primes
  # and the list of all numbers from 2 to n
  remove_multiples([], numbers)
end

# A function to convert a list of integers to a list of strings
# Takes in a list of integers and returns a list of strings with the numbers converted to strings
def int_to_string(list) do
  # Use recursion to convert each integer in the list to a string
  Enum.map(list, fn x -> Integer.to_string(x) end)
end

# A function to find the longest word in a list of strings
# Takes in a list of strings and returns the longest string
def longest_word(list) do
  # Use recursion to compare the length of each string in the list
  # and return the longest string
  Enum.reduce(list, "", fn x, acc -> if String.length(x) > String.length(acc) do
                                      x
                                    else
                                      acc
                                    end
                      end)
end

# A function to print a multiplication table
# Takes in an integer n and prints a multiplication table with n rows and columns
def print_multiplication_table(n) do
  # Use nested recursion to print each row and column of the table
  for row <- 1..n do
    for column <- 1..n do
      # Calculate the product of the row and column numbers
      prod = row * column
      # Print the product with proper spacing
      print("#{prod} \t")
    end
    # Move to the next line before starting a new row
    IO.puts("")
  end
end