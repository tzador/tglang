defmodule User do                # Defines a module named User
  @moduledoc "A user record"     # Documentation for the module

  @type t :: %User{              # Defines a type for the User record 
    name: String.t(),            # User's name
    age: integer(),              # User's age
    email: String.t()            # User's email address
  }
  
  defstruct name: "John",        # Default value for name field is "John"  
            age: 25,             # Default value for age field is 25
            email: "john@example.com"     # Default value for email field is "john@example.com"

  @doc "Creates a new user with the given name, age, and email"    # Documentation for the function
  @spec new(String.t(), integer(), String.t()) :: t                # Specifies the function's types
  def new(name, age, email), do: %User{name: name, age: age, email: email}  # Function to create a new user record

  @doc "Gets the user's name"
  @spec get_name(t()) :: String.t()
  def get_name(user), do: user.name                                # Function to get the user's name

  @doc "Gets the user's age"
  @spec get_age(t()) :: integer()
  def get_age(user), do: user.age                                  # Function to get the user's age

  @doc "Gets the user's email"
  @spec get_email(t()) :: String.t()
  def get_email(user), do: user.email                              # Function to get the user's email
end

# Creating a new user with a different name, age, and email
user = %User{name: "Jane", age: 30, email: "jane@example.com"}

# Getting the user's name, age, and email using the defined functions
name = User.get_name(user)
age = User.get_age(user)
email = User.get_email(user)

IO.puts("Name: #{name}, Age: #{age}, Email: #{email}")