defmodule TextAnalyzer do
  @moduledoc """
  This module provides functions for analyzing text.
  """
  # Public functions
  @doc """
  Counts the number of words in a given text and returns the word count.
  It also removes any punctuation from the text.
  Examples
  iex> TextAnalyzer.word_count("Hello, world!")
  2
  """
  def word_count(text) do
    text
    |> String.replace(~r/[[:punct:]]/, "") # Removes punctuation
    |> String.split() # Splits the text into words
    |> Enum.count() # Counts the words in the list
  end

  @doc """
  Calculates the lexical density of a given text and returns a percentage.
  Lexical density is the ratio of content words to total words in a text.
  Examples
  iex> TextAnalyzer.lexical_density("The quick brown fox jumped over the lazy dog.")
  85.7
  """
  def lexical_density(text) do
    all_words = word_count(text) # Gets the total number of words in the text
    content_words =
      text
      |> String.replace(~r/[[:punct:]]/, "") # Removes punctuation
      |> String.split() # Splits the text into words
      |> Enum.filter(&is_content_word/1) # Filters out non-content words
      |> Enum.count() # Counts the content words in the list
    (content_words / all_words) * 100 # Calculates the percentage of content words
  end

  # Private functions
  defp is_content_word(word) do
    !String.match?(~r/[[:punct:]]/, word) # Returns true if the word contains no punctuation
  end
end