defmodule MyModule do
  @moduledoc """
  Module documentation
  """
  
  @attr1 42
  @attr2 "elixir"
  
  def func1(x, y) when is_integer(x) and is_integer(y) do
    sum = x + y
    IO.puts "The sum is #{sum}."
  end
  
  def func1(x, y) when is_list(x) and is_list(y) do
    result = x ++ y
    IO.puts "The concatenation result is #{result}."
  end
  
  def func1(x, y) do
    IO.puts "Invalid input types."
  end
  
  defp helper_func1(x, y) when is_atom(x) and is_atom(y) do
    result = to_string(x) <> " and " <> to_string(y)
    IO.puts "The result is #{result}."
  end
  
  defp helper_func1(x, y) when is_binary(x) and is_binary(y) do
    result = String.upcase(x) <> " " <> String.capitalize(y)
    IO.puts "The result is #{result}."
  end
  
  defp helper_func1(x, y) do
    IO.puts "Invalid input types."
  end
  
  def func2() do
    if @attr1 > 0 do
      IO.puts "#{@attr2} is a great language!"
    else
      IO.puts "Something went wrong."
    end
  end
  
  def func3(list) do
    for val <- list do
      IO.puts "#{val} has a length of #{String.length(val)}."
    end
  end
end