defmodule ShoppingCart do

  # Define the list of products
  @products [
    %{name: "tshirt", price: 10, quantity: 2},
    %{name: "pants", price: 20, quantity: 1},
    %{name: "hat", price: 5, quantity: 3}
  ]

  # Define the calculate total function
  def calculate_total do
    for product <- @products, reduce: 0 do
      total -> total + product[:price] * product[:quantity]
    end
  end

  # Define the add product function
  def add_product(name, price, quantity) do
    product = %{name: name, price: price, quantity: quantity}
    assert product[:name] && product[:price] && product[:quantity] > 0, "Invalid product parameters"

    {new_products, {_, product} = Enum.split(@products, length(@products) - 1)}
    new_products ++ [product]
  end

  # Define the remove product function
  def remove_product(name) do
    Enum.filter(@products, fn product -> product[:name] != name end)
  end

  # Define the checkout function
  def checkout do
    IO.puts "Thank you for shopping with us!"
  end
end

# Print out the total
IO.puts "Total: $ #{ShoppingCart.calculate_total()}"