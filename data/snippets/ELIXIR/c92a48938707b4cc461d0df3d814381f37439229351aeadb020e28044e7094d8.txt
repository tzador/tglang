/*
This is a code snippet written in Elixir.
It generates a list of prime numbers using the Sieve of Eratosthenes algorithm.
The algorithm uses the following steps:
Step 1: Create a list of consecutive integers from 2 to n: (2, 3, 4, ..., n).
Step 2: Start with the first number (2), mark it as prime and remove all its multiples from the list.
Step 3: Move to the next number in the list that is not marked as prime, and repeat step 2.
Step 4: The remaining numbers in the list are all prime numbers.
*/

# Define a function that takes in a limit and returns a list of prime numbers
def prime_sieve(limit) do

  # Create a list of consecutive integers from 2 to n
  numbers = 2..limit |> Enum.to_list

  # Initialize an empty list to store the prime numbers
  primes = []

  # Loop through the numbers list and mark them as prime or non-prime
  for n <- numbers do

    # If the number is already marked as non-prime, skip it
    next if n in primes

    # Add the number to the primes list as it is the first prime number
    primes = [n | primes]

    # Remove all multiples of the number from the numbers list
    for i <- numbers, rem(i, n) == 0 do
      numbers = List.delete(numbers, i)
    end
  end

  # Return the list of prime numbers
  primes
end

# Call the prime_sieve function and print the output
IO.puts(prime_sieve(100))

# Output:
# [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]