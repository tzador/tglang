defmodule User do  #Define a module named User
  @moduledoc """
  This module represents a user in the system.
  """  #Documentation for the module

  @name "John"  #Define a module attribute named @name

  def say_name, do: IO.puts("My name is #{@name}")  #Define a function named say_name that prints the value of @name

  def register_new_user(name, email) do
    new_user = %{
      name: name,
      email: email,
      role: "user",
      password: generate_password()
    } #Defines a new map named new_user with keys name, email, role and the result of the function generate_password as its value for the key password

    {:ok, new_user}  #Return a tuple with the atom :ok and the new_user map as its value
  end

  def generate_password do
    char_list = [65..90] ++ [a..z] ++ [0..9]  #Define a list of ASCII codes for uppercase letters, lowercase letters and numbers
    Enum.shuffle(char_list)  #Shuffle the list using the Enum.shuffle function
    |> Enum.take(8)  #Get the first 8 elements of the shuffled list
    |> Enum.map(&(:erlang.integer_to_list(&1)))  #Convert each element from ASCII code to string using the :erlang.integer_to_list function
    |> Enum.join()  #Join all the strings into one string
  end

  defp validate_email(email) do  #Define private function validate_email that takes in an email as an argument
    case String.split(email, "@") do  #Split the email at the "@" symbol and use a case statement
      [username, domain] when is_binary(username) and is_binary(domain) and byte_size(username) > 0 and byte_size(domain) > 0 ->
        :ok  #Return the atom :ok if all conditions are met
      _ ->
        {:error, "Invalid email"}  #Return a tuple with the atom :error and the message "Invalid email"
    end
  end
end