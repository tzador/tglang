defmodule MyModule do
  @moduledoc """
  This is a module that contains functions for manipulating lists.
  """

  # Function for flattening a list
  @doc """
  Flattens a list of nested lists into a single list.
  """
  def flatten(list, acc \\ [])
  def flatten([head | tail], acc) do
    flatten(tail, acc ++ head)
  end
  def flatten(item, acc) do
    [item | acc]
  end

  # Function for sorting a list in ascending order
  @doc """
  Sorts a list in ascending order using the bubble sort algorithm.
  """
  def bubble_sort(list) do
    bubble_sort(list, true)
  end

  def bubble_sort(list, sorted) when sorted == false do
    bubble_sort(list, true)
  end

  def bubble_sort(list, _) do
    sorted = true
    {new_list, sorted} = List.foldl(list, {[], true}, fn
      item, {acc, sorted} ->
        case acc do
          [h | t] when item < h ->
            {t ++ [item, h], false}
          [h | t] ->
            {[item, h | t], sorted}
          [] ->
            {[item], sorted}
        end
    end)

    if sorted do
      new_list
    else
      bubble_sort(new_list, sorted)
    end
  end
end