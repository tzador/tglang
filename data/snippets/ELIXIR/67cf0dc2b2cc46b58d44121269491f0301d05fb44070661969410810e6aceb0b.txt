# Create a new module
defmodule Math do

  # Define a function to calculate the factorial of a number
  def factorial(number) when number > 0 do
    # Use pattern matching to handle the base case
    1 -> 1
    # Use recursion to calculate the factorial
    number * factorial(number - 1)
  end

  # Define a function to calculate the n-th Fibonacci number
  def fib(n) do
    # Use pattern matching to handle the base case
    1 -> 1
    2 -> 1
    # Use recursion to calculate the n-th Fibonacci number
    n -> fib(n-1) + fib(n-2)
  end

  # Define a function to calculate the n-th prime number
  def prime(n) do
    # Define a helper function to check if a number is prime
    def is_prime?(number, div \\ 2) when div <= 2 do
      # Use pattern matching to check if the number is divisible by any number less than or equal to its half
      number == 2 -> true
      number < div*div -> true
      # Use recursion to check if the number is divisible by any number less than its half
      rem(number, div) == 0 -> false
      div -> is_prime?(number, div-1)
    end

    # Use pattern matching to handle the base case
    1 -> 2
    # Use recursion to find the n-th prime number
    n -> n == 2 -> prime(n-1)
          is_prime?(n) -> n
          prime(n+1)
  end
end

# Call the functions from the Math module and print the results
IO.puts("The factorial of 10 is #{Math.factorial(10)}")
IO.puts("The 7th Fibonacci number is #{Math.fib(7)}")
IO.puts("The 10th prime number is #{Math.prime(10)}")