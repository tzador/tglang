# Module definition
defmodule MyModule do
  
  # Function definition with pattern matching and guard clauses
  def fibonacci(0), do: 1
  def fibonacci(n) when n == 1 or n == 2, do: 1
  def fibonacci(n) when is_integer(n) and n > 2 do
    fibonacci(n - 1) + fibonacci(n - 2)
  end
  
  # Enumerables and pattern matching in a list comprehension
  def sum_fibonacci(n) do
    for i <- 1..n, do: fibonacci(i)
    |> Enum.filter(&rem(&1, 2) == 0)
    |> Enum.sum()
  end
  
  # Processes and message passing
  spawn_link(fn ->
    receive do
      :get_fibonacci ->
        send(self(), fibonacci(10)) # Send calculated fibonacci value back to main process
    end
  end)
  
  # Using Task to run fibonacci calculation asynchronously
  result = Task.async(fn -> fibonacci(20) end)
  
  # Access the computed value from the task
  Task.await(result)
  |> elem(1)
  |> IO.inspect(label: "Computed fibonacci value:")
end