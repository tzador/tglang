defmodule ExampleModule do # Defines a module in Elixir
  @module_constant "HelloWorld" # Declares a module constant with value "HelloWorld"

  defstruct name: "John", age: 30, occupation: "Developer" # Defines a structure with default values for name, age and occupation

  @doc """
  Allows for pattern matching on the provided struct.
  Returns a tuple of the name and age of the person, along with their occupation.
  """
  def get_name_and_age(%ExampleModule{name: name, age: age, occupation: occupation}) do
    {name, age, occupation}
  end

  @doc """
  Updates the provided struct with the given key-value pairs.
  Returns the updated struct.
  """
  def update_struct(struct, key, value) do
    struct
    |> Map.put(key, value)
    |> Tuple.to_list()
    |> Enum.into(%ExampleModule{})
  end

  def hello_world() do # Defines a function that prints "Hello, World!" and returns it
    IO.puts "Hello, World!"
    "Hello, World!"
  end

  def fibonacci(n) when n < 2, do: n # Defines a function that calculates the Fibonacci sequence recursively
  def fibonacci(n), do: fibonacci(n-1) + fibonacci(n-2) # Defines a function that calculates the Fibonacci sequence recursively

  @doc """
  Executes the provided function with the given arguments.
  Returns the result of the function.
  """
  def execute_function(function, args) do
    apply(function, args)
  end

  defp private_func() do # Defines a private function that cannot be called outside of the module
    "This function is private"
  end
end

ExampleModule.hello_world() # Calls the hello_world function in the ExampleModule and prints "Hello, World!"
ExampleModule.update_struct(%ExampleModule{}, :name, "Jane") # Updates the ExampleModule struct's name to "Jane"
ExampleModule.get_name_and_age(ExampleModule.update_struct(%ExampleModule{}, :age, 25)) # Calls the get_name_and_age function, passing in the updated struct and returns a tuple of "John", 25 and "Developer"
ExampleModule.execute_function(&ExampleModule.fibonacci/1, [10]) # Calls the execute_function helper function, passing in the fibonacci function and the argument 10. Returns the 10th Fibonacci number.