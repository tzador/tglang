defmodule MyModule do
  # Defines a module named "MyModule"
  
  @my_variable "hello world"
  # Creates a module attribute "my_variable" with the value "hello world"
  # Attributes can be used to store data that can be accessed by all functions within the module
  
  def say_hello do
    # Defines a function named "say_hello" with no arguments
    # The "do" keyword indicates the start of a function's body
    
    IO.puts(@my_variable)
    # Prints the value of "@my_variable" using the IO.puts function, which outputs a string to the console
    # The "@" symbol allows us to access module attributes within functions
    
    puts "This is a mix of Elixir and Ruby code."
    # Prints a string to the console using the "puts" function from the Ruby language
    # This demonstrates how different languages can be used together in Elixir code
    # This can be done using the Erlang Virtual Machine (VM) which Elixir runs on, allowing it to interact with other languages
    
    my_list = [1, 2, 3, 4]
    # Creates a list containing the numbers 1, 2, 3, and 4 and assigns it to the variable "my_list"
    # Lists are a fundamental data structure in Elixir and can hold any type of data
    
    for num <- my_list do
      # Starts a "for" loop that iterates over each element in "my_list" and assigns it to the variable "num"
      # The "<-" symbol is used to assign values in a for loop in Elixir, similar to the "in" keyword in Python
      
      IO.puts("The number is #{num}")
      # Prints a string to the console using string interpolation to insert the value of "num"
      # Interpolation in Elixir is done using the "#" symbol and curly braces
      
      if num == 2 do
        # Starts an "if" statement that checks if "num" is equal to 2
        # In Elixir, the "==" operator is used for comparison, similar to the "==" operator in JavaScript
        
        IO.puts("This number is 2!")
        # Prints a string to the console if the condition is true
        
      else
        IO.puts("This number is not 2.")
        # Prints a string to the console if the condition is false
        
      end
      # Ends the "if" statement
      
    end
    # Ends the "for" loop
    
    :ok
    # Returns the atom ":ok" to indicate that the function has finished executing successfully
    # Atoms are constant values that are used to represent unique identifiers in Elixir
    # The ":ok" atom is used to indicate that no errors occurred in the function
    
  end
  # Ends the "say_hello" function
  
end
# Ends the "MyModule" module