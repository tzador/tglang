defmodule MyModule do       # Define a new module named MyModule
  @list [1, 2, 3]           # Assign a list to a module attribute
  @name "John"              # Assign a string to a module attribute

  def factorial(0), do: 1   # Define a function with pattern matching
  def factorial(n) do       # Define a function with a catch-all pattern
    n * factorial(n-1)      # Recursive call to calculate factorial
  end

  def say_hello do          # Define a function with no parameters
    IO.puts "Hello, #{@name}!"  # Print a string that uses module attribute
  end

  def say_hello(name) do    # Define a function with one parameter
    IO.puts "Hello, #{name}!"   # Print a string that uses function argument
  end

  def list_sum(list) do                 # Define a function with one parameter
    Enum.reduce(list, 0, fn x, acc ->   # Use Enum.reduce to iterate over list
      acc + x                           # Add the current element to the accumulator
    end)
  end

  def list_reverse(list) do   # Define a function with one parameter
    Enum.reduce(list, [], fn x, acc ->   # Use Enum.reduce to iterate over list
      [x | acc]                          # Prepend current element to accumulator
    end)
  end
end