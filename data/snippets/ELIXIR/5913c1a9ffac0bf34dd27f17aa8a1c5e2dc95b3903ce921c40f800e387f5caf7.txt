defmodule User do
  @moduledoc """
  This module represents a user in the system.
  """

  @type t :: %__MODULE__{
    name: String.t(),
    age: integer() | nil
  }

  defstruct [:name, :age]

  @doc """
  Creates a new user with the given name and age.
  If no age is provided, it defaults to nil.
  """
  @spec new(String.t(), integer() | nil) :: t
  def new(name, age \\ nil) do
    %__MODULE__{
      name: name,
      age: age
    }
  end

  @doc """
  Updates a user's name and/or age.
  First argument is the user, second is the updated name,
  and third is the updated age.
  If no changes are provided, returns the original user.
  """
  @spec update(t, String.t(), integer() | nil) :: t
  def update(user, name, age) when is_nil(name) and is_nil(age), do: user
  def update(user, name, age), do: %{
    user | name: name, age: age
  }

  @doc """
  Returns the user's name.
  """
  @spec get_name(t) :: String.t()
  def get_name(user), do: user.name

  @doc """
  Returns the user's age.
  If no age is provided, returns the string "Unknown".
  """
  @spec get_age(t) :: String.t()
  def get_age(user) do
    case user.age do
      nil -> "Unknown"
      age -> "#{age}"
    end
  end
end