defmodule Bank do
  require Logger
  @account_records []

  def create_account(name, balance) do
    account = %{ name: name, balance: balance }
    @account_records = [@account_records, account]
  end

  def withdraw(name, amount) do
    case search_account(name) do
      nil ->
        Logger.info("#{name} has no account record")
      account ->
        new_balance = account.balance - amount
        account = %{ account | balance: new_balance }
        Logger.info("#{amount} withdrawn by #{name}")
    end
  end

  def deposit(name, amount) do
    case search_account(name) do
      nil ->
        Logger.info("#{name} has no account record")
      account ->
        new_balance = account.balance + amount
        account = %{ account | balance: new_balance }
        Logger.info("#{amount} deposited by #{name}")
    end
  end

  def get_balance(name) do
    case search_account(name) do
      nil ->
        Logger.info("#{name} has no account record")
      account ->
        Logger.info("#{name} has balance of #{account.balance}")
    end
  end

  defp search_account(name) do
    Enum.find(@account_records, fn account -> account.name == name end)
  end
end

Bank.create_account("John", 500)
# {name: "John", balance: 500}

Bank.withdraw("John", 100)
# 100 withdrawn by John

Bank.get_balance("John")
# John has balance of 400

Bank.deposit("John", 200)
# 200 deposited by John

Bank.get_balance("John")
# John has balance of 600