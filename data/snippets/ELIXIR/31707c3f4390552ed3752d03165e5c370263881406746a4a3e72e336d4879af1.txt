defmodule User do
  @moduledoc """
  This module defines a user and their attributes.
  """

  @{:name, :email, :password, :age} :default_attributes  # This sets a default map containing the user's attributes.

  def init(attrs) do
    @default_attributes |> Map.merge(attrs) |> process_attributes()
  end

  def process_attributes(attrs) do
    attrs
    |> Map.update(:name, &String.capitalize/1)
    |> Map.update(:email, &String.downcase/1)
    |> Map.update(:password, &hash_password/1)
    |> Map.update(:age, &validate_age/1)
  end

  defp hash_password(password) do  # This private function converts the password to a hashed value.
    :crypto.hash(:sha256, password)
  end

  defp validate_age(age) do  # This private function validates the age of the user.
    if age >= 18 do
      age
    else
      raise ArgumentError, "Must be at least 18 years old."
    end
  end

  def show(user) do  # This function displays the user's information in a readable format.
    IO.puts "Name: #{user.name}"
    IO.puts "Email: #{user.email}"
    IO.puts "Age: #{user.age}"
  end
end

# Example:
user = User.init(%{name: "John", email: "john@email.com", password: "password123", age: 25})
User.show(user)

# Output:
# Name: John
# Email: john@email.com
# Age: 25