defmodule Crypto do
  # Module for performing various cryptographic operations

  def encrypt(data, key) do
    # Function to encrypt the given data using the provided key
    encrypted_data = :crypto.encrypt(:aes_gcm, key, nil, data)
    # The encrypted data is returned as a tuple, so we pattern match to get the actual encrypted data
    encrypted_data = elem(encrypted_data, 1)

    # We also generate a random initialization vector (IV)
    iv = :enif_alloc(16)
    # We pack the IV and encrypted data into a single binary and return it
    <<iv::16, encrypted_data::binary>>
  end

  def decrypt(encrypted_data, key) do
    # Function to decrypt the given data using the provided key
    # We first unpack the IV and encrypted data from the binary
    {iv, encrypted_data} = <<iv::16, encrypted_data::binary>>
    # We use the IV to decrypt the data
    decrypted_data = :crypto.decrypt(:aes_gcm, key, iv, encrypted_data)
    # The decrypted data is returned as a tuple, so we pattern match to get the actual decrypted data
    decrypted_data = elem(decrypted_data, 1)

    # We convert the decrypted data to a string and return it
    binary_to_existing_atom(decrypted_data)
  end

  defhash(key, data) do
    # Function to generate a hash of the given data using the provided key
    # We first convert the data to a binary
    data = to_string(data)
    # We then use the key and data to generate a HMAC-SHA-512 hash
    hash = :crypto.mac(:hmac_sha512, key, data)
    # The hash is returned as a tuple, so we pattern match to get the actual hash
    hash = elem(hash, 1)

    # We convert the hash to a string and return it
    binary_to_existing_atom(hash)
  end

  defgenerate_random_key() do
    # Function to generate a random 32-byte (256-bit) key
    :crypto.strong_rand_bytes(32)
  end
end