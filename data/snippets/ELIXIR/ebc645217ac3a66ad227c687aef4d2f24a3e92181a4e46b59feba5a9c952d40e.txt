defmodule Product do
  # Defines a module named "Product"

  @price 0 # Module attribute to track current price of product
  @discount 0 # Module attribute to track any discounts applied to product

  # Defines a struct with fields for "name", "description", and "stock"
  defstruct [:name, :description, :stock]

  # Defines a function to add the product to inventory
  def add_to_inventory(product) do
    IO.puts "Adding #{product.name} to inventory..."
    product
  end

  # Defines a function to update the price of the product
  def update_price(product, new_price) do
    IO.puts "Updating #{product.name} price from #{@price} to #{new_price}"
    %Product{name: product.name, description: product.description, stock: product.stock, price: new_price}
  end

  # Defines a function to apply a discount to the product
  def apply_discount(product, discount) do
    IO.puts "Applying #{discount}% discount to #{product.name}..."
    @discount = discount
    %Product{name: product.name, description: product.description, stock: product.stock, price: @price - (@price * @discount / 100)}
  end
end

# Example usage of the Product module
product = %Product{name: "iPhone", description: "The latest and greatest smartphone from Apple", stock: 10}

product = Product.add_to_inventory(product)
# Output: Adding iPhone to inventory...

product = Product.update_price(product, 999)
# Output: Updating iPhone price from 0 to 999

product = Product.apply_discount(product, 20)
# Output: Applying 20% discount to iPhone...

# %Product{name: "iPhone", description: "The latest and greatest smartphone from Apple", stock: 10, price: 799.2}