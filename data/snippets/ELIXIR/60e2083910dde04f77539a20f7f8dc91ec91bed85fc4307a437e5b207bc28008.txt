defmodule User do
# This is a module declaration in Elixir, a collection of functions and data
  @moduledoc """
    This module represents a user in our application.
  """
  
  @doc """
    Initializes a new user with the given name and email.
    
    ## Params
      * `name` - the user's name as a string
      * `email` - the user's email address as a string
    
    ## Returns
      A map containing the user's name and email.
    
    ## Examples
      iex> User.new("John Doe", "johndoe@example.com")
      %{name: "John Doe", email: "johndoe@example.com"}
  """
  # This is a function declaration in Elixir, preceded by the @doc macro for documentation
  # The function takes in two parameters and returns a map
  def new(name, email) do
    %{name: name, email: email}
  end
  
  # This is a function declaration in Elixir, preceded by the @doc macro for documentation
  # The function takes in a map as a parameter and returns the user's name as a string
  def get_name(user) do
    user.name
  end
  
  # This is a function declaration in Elixir, preceded by the @doc macro for documentation
  # The function takes in a map as a parameter and returns the user's email as a string
  def get_email(user) do
    user.email
  end
  
  # This is a function declaration in Elixir, preceded by the @doc macro for documentation
  # The function takes in a map and a new name as parameters, updates the name and returns the updated map
  # The user's email is marked as required in the function signature using the required option
  def update_name(user, new_name, {_required: email}) do
    %{user | name: new_name}
  end
end