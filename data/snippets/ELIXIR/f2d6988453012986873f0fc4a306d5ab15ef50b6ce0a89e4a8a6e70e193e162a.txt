1. defmodule User do
    2. @moduledoc """
    3. This module represents a user in our system.
    4. """
    5. 
    6. @type user :: %User{
    7.     id: integer,
    8.     name: String.t(),
    9.     age: integer
    10. }
    11. 
    12. defstruct [:id, :name, :age]
    13. 
    14. def new(id, name, age) do
    15.     %User{id: id, name: name, age: age}
    16. end
    17. 
    18. def get_name(user), do: user.name
    19. 
    20. def get_age(user), do: user.age
    21. 
    22. def set_name(user, new_name) do
    23.     %{user | name: new_name}
    24. end
    25. 
    26. def set_age(user, new_age) do
    27.     %{user | age: new_age}
    28. end
    29. 
    30. defp validate_age(age) when is_integer(age) and age > 0, do: :ok
    31. 
    32. defp validate_age(age), do: {:error, "Invalid age. Age must be a positive integer."}
    33. 
    34. defp validate_name(name) when is_binary(name) and String.length(name) > 0, do: :ok
    35. 
    36. defp validate_name(name), do: {:error, "Invalid name. Name must be a non-empty string."}
    37. 
    38. def validate_user(user) do
    39.     with {:ok, age} <- validate_age(user.age),
    40.          {:ok, name} <- validate_name(user.name),
    41.          do: :ok
    42. end
    43. 
    44. def update_user(user, new_id, new_name, new_age) do
    45.     %User{id: new_id, name: new_name, age: new_age}
    46.     |> validate_user()
    47.     |> case do
    48.         :ok -> %{user | id: new_id, name: new_name, age: new_age}
    49.         _ -> user
    50.     end
    51. end