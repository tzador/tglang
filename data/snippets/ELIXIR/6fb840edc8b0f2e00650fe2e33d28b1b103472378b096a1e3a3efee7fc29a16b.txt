defmodule Animal do
  @type animal_name :: String.t()

  @callback name(animal_name) :: :ok | {:error, String.t()}

  @type animal :: %{name: String.t(), species: String.t()}

  defstruct [:name, :species]

  @spec create_name(animal_name :: String.t()) :: animal_name
  def create_name(name) do
    "This is a generated name: " <> name
  end

  @spec create_animal(animal :: %Animal{}) :: {:ok, animal} | {:error, String.t()}
  def create_animal(animal) do
    case validate_animal(animal) do
      :ok ->
        {:ok, animal}
      {:error, error} ->
        {:error, "Invalid animal: #{error}"}
    end
  end

  defp validate_animal(%Animal{name: name, species: species}) do
    case name(name) do
      :ok ->
        case species(species) do
          :ok ->
            :ok
          {:error, error} ->
            {:error, error}
        end
      {:error, error} ->
        {:error, error}
    end
  end

  @spec name(String.t()) :: :ok | {:error, String.t()}
  def name(name) do
    if String.length(name) > 20 do
      {:ok, name}
    else
      {:error, "Name should be at least 20 characters long"}
    end
  end

  @spec species(String.t()) :: :ok | {:error, String.t()}
  def species(species) do
    if String.length(species) > 10 do
      {:ok, species}
    else
      {:error, "Species should be at least 10 characters long"}
    end
  end
end

# This is a struct example using the Animal module
struct_example = %Animal{name: "Maximus", species: "Tiger"}

# This uses the create_animal function to validate and create an animal
generate_animal = Animal.create_animal(struct_example)

IO.puts(generate_animal) # Outputs {:ok, %Animal{name: "Maximus", species: "Tiger"}}