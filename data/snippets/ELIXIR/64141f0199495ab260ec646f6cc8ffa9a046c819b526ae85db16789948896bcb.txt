defmodule Blackjack do
  # This module represents the game of Blackjack
  # It includes methods for playing the game and
  # keeping track of player's balance and score

  # Defining a struct for representing a card
  defstruct suit: :spades, value: nil

  # Defining a struct for representing a player
  defstruct name: "Player", hand: nil, balance: 500, score: 0

  # Defining a function for creating a deck of cards
  # Takes in a list of suits and values, returns a list of cards
  def create_deck(suits, values) do
    for suit <- suits do
      for value <- values do
        %Blackjack.Card{suit: suit, value: value}
      end
    end
  end

  # Defining a function for shuffling the deck
  # Takes in a list of cards, returns a shuffled list of cards
  def shuffle_deck(cards) do
    Enum.shuffle(cards)
  end

  # Defining a function for dealing cards to a player
  # Takes in a player struct and a deck of cards, updates the player's hand
  def deal_cards(player, deck) do
    # Pop off the top 2 cards from the deck and add them to the player's hand
    [card1 | tail] = deck
    [card2 | _] = tail
    %Blackjack.Player{name: player.name, hand: [card1, card2], balance: player.balance, score: player.score}
  end

  # Defining a function for calculating a player's score
  # Takes in a player struct, returns their score
  def calculate_score(player) do
    # First, map the values of the cards to numerical values,
    # e.g. A -> 11, J -> 10, Q -> 10, K -> 10
    # Then, sum the values and return the score
    Enum.sum(for card <- player.hand do
      case card.value do
        "A" -> 11 # Ace can be 1 or 11, we will choose 11 for now
        "J" -> 10
        "Q" -> 10
        "K" -> 10
        _ -> String.to_integer(card.value) # Convert other face cards to integers
      end
    end)
  end
end