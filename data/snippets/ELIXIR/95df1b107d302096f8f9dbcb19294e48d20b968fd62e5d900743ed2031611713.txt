defmodule Example do
  # This is a comment in Elixir
  
  # This function takes in a number and multiplies it by 2
  def double(num) do
    num * 2
  end
  
  # This function takes in a list and returns the sum of all its elements
  def sum_list(list) do
    # base case: when the list is empty
    if length(list) == 0 do
      0
    # recursive case: if the list is not empty, add first element to sum of remaining list
    else
      hd(list) + sum_list(tl(list))
    end
  end
  
  # This function uses pattern matching to check if a given number is odd or even
  def is_even_or_odd(num) do
    # pattern for even numbers
    case rem(num, 2) do
      0 -> "even"
      # pattern for odd numbers
      _ -> "odd"
    end
  end
  
  # This function uses the pipe operator to add 1 to a given number and then multiply by it
  def pipe_example(num) do
    num
    |> add(1)
    |> multiply_by(num)
  end
  
  # This function takes in two values and returns the maximum of the two
  def max(a, b) do
    if a > b do
      a
    else
      b
    end
  end
end

# Example outputs:
# double(5) => 10
# sum_list([1, 2, 3, 4, 5]) => 15
# is_even_or_odd(6) => "even"
# pipe_example(4) => 20
# max(10, 5) => 10