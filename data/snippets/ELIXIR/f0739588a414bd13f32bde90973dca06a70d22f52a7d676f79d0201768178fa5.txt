# This code snippet uses Elixir to create a function that
# calculates the average of three numbers and returns it.
# It also utilizes pattern matching and guard clauses for error handling.

defmodule Average do
  # Function that takes in three numbers and calculates the average
  # error handling using guard clauses and pattern matching
  def calculate(num1, num2, num3) when is_number(num1) and is_number(num2) and is_number(num3) do
    sum = num1 + num2 + num3
    result = sum / 3
    if result < 0 do
      {:error, "Average cannot be negative."}
    elsif result > 100 do
      {:error, "Average cannot be greater than 100."}
    else
      {:ok, result}
    end
  end
end

# Testing the function with valid input
result = Average.calculate(5, 10, 15)
IO.puts("Average: #{result}")

# Testing the function with negative input
result = Average.calculate(-4, 8, 12)
IO.puts("Average: #{result}")

# Testing the function with input greater than 100
result = Average.calculate(50, 60, 55)
IO.puts("Average: #{result}")