defmodule User do
  @moduledoc """
  This module creates a representation of a user.
  """

  defstruct name: "Unknown", age: 0, email: nil  # Creates a struct with default values

  # Defines a function to calculate the user's current age
  @spec current_age(User.t) :: integer
  def current_age(user) do
    now = DateTime.utc_now()  # Gets the current date and time in UTC
    birthday = {:year, :month, :day} = user.birthdate  # Destructures the birthday value from the user struct
    {:year, month, day} = DateTime.Date.from_erl({:year, :month, :day})  # Destructures the current date value
    # Calculates the difference in years between the current date and the user's birthdate
    # Note: this calculation may not be completely accurate as it does not account for leap years
    now.year - year + 1 - (now.month < month or (now.month == month and now.day < day)) 
  end

  # Defines a function to update a user's email address
  @spec update_email(User.t, String.t) :: User.t
  def update_email(user, new_email) do
    %{user | email: new_email}  # Uses the map update syntax to update the email field in the user struct
  end
end

# Creates a new instance of the User struct with custom values
user = %User{name: "John Doe", age: 32, email: "johndoe@example.com"}
# Prints the user's current age
IO.puts "Current age: #{User.current_age(user)}"
# Updates the user's email address
user = User.update_email(user, "johndoe2@example.com")
# Prints the updated user struct
IO.inspect user