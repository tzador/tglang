defmodule Bank do
  # This module represents a bank with multiple accounts and operations
  defstruct accounts: %{},
            operations: %{}

  # Creates a new bank with no accounts or operations
  def new, do: %Bank{}

  # Adds a new account to the bank
  # Params:
  #  - %{owner: string, balance: number}
  # Returns:
  #  - the updated bank with the new account added
  def add_account(bank, %{owner: owner, balance: balance}) do
    new_account = %{owner: owner, balance: balance}

    %Bank{
      accounts: Map.put(bank.accounts, owner, new_account),
      operations: bank.operations
    }
  end

  # Withdraws an amount of money from the given account
  # Params:
  #  - account: string
  #  - amount: number
  # Returns:
  #  - the updated bank with the account's balance decreased
  def withdraw(bank, account, amount) do
    case Map.get(bank.accounts, account) do
      nil -> IO.puts "Account does not exist"
      account -> %Bank{
        accounts: Map.update!(bank.accounts, account, &Map.put(&1, :balance, &1.balance - amount)),
        operations: Map.put(bank.operations, {account, :withdraw}, amount)
      }
    end
  end

  # Deposits an amount of money into the given account
  # Params:
  #  - account: string
  #  - amount: number
  # Returns:
  #  - the updated bank with the account's balance increased
  def deposit(bank, account, amount) do
    case Map.get(bank.accounts, account) do
      nil -> IO.puts "Account does not exist"
      account -> %Bank{
        accounts: Map.update!(bank.accounts, account, &Map.put(&1, :balance, &1.balance + amount)),
        operations: Map.put(bank.operations, {account, :deposit}, amount)
      }
    end
  end

  # Prints the current balance of the given account
  # Params:
  #  - account: string
  # Returns:
  #  - the current balance of the account
  def print_account_balance(bank, account) do
    case Map.get(bank.accounts, account) do
      nil -> IO.puts "Account does not exist"
      account -> %Bank{
        accounts: bank.accounts,
        operations: bank.operations
      } |> Map.get(account).balance
    end
  end

  # Prints the history of operations for the given account
  # Params:
  #  - account: string
  # Returns:
  #  - a list of tuples in the form {{account, operation}, amount}
  def print_operations_history(bank, account) do
    case Map.get(bank.operations, account) do
      nil -> IO.puts "No operations found for this account"
      operations -> Map.to_list(operations)
    end
  end

end

# Example usage:

bank = Bank.new
# %Bank{accounts: %{}, operations: %{}}

bank = Bank.add_account(bank, %{owner: "John", balance: 5000})
# %Bank{accounts: %{"John" => %{owner: "John", balance: 5000}}, operations: %{}}

bank = Bank.withdraw(bank, "John", 1000)
# %Bank{
#   accounts: %{"John" => %{owner: "John", balance: 4000}},
#   operations: {{"John", :withdraw}, 1000}
# }

bank = Bank.deposit(bank, "John", 2000)
# %Bank{
#   accounts: %{"John" => %{owner: "John", balance: 6000}},
#   operations: {{"John", :deposit}, 2000}
# }

Bank.print_account_balance(bank, "John")
# 6000

Bank.print_operations_history(bank, "John")
# {{"John", :withdraw}, 1000}
# {{"John", :deposit}, 2000}