defmodule MyModule do
  use GenServer

  # Defines the starting state of the GenServer
  @initial_state %{
    counter: 0
  }

  # Defines the GenServer behavior
  def init(_) do
    {:ok, @initial_state}
  end

  # Handles a request to increment the counter
  def handle_call({:increment}, _from, state) do
    new_state = Map.update!(state, :counter, &(&1 + 1))
    {:reply, new_state, new_state}
  end

  # Handles a request to get the current counter value
  def handle_call({:get_counter}, _from, state) do
    {:reply, state.counter, state}
  end

  # Handles a request to reset the counter
  def handle_call({:reset_counter}, _from, _state) do
    {:reply, @initial_state, @initial_state}
  end
end

# Starts the GenServer and assigns it to a variable
{:ok, pid} = GenServer.start_link(MyModule, [])

# Sends a request to increment the counter
GenServer.call(pid, {:increment})

# Sends a request to get the current counter value and prints it
counter = GenServer.call(pid, {:get_counter})
IO.puts "Current counter value: #{counter}"

# Sends a request to reset the counter
GenServer.call(pid, {:reset_counter})

# Sends another request to get the current counter value and prints it
counter = GenServer.call(pid, {:get_counter})
IO.puts "Current counter value: #{counter}"

# Output:
# Current counter value: 1
# Current counter value: 0