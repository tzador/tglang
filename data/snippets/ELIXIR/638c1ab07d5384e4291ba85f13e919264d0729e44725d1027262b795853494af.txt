defmodule ListOps do
  # creates a function that takes in a list as a parameter and returns the length of the list
  def length(list) do
    case list do
      # if the list is empty, return 0
      [] -> 0
      # otherwise, use recursion to call the function again with the tail of the list and add 1 to the result
      [_|tail] -> 1 + length(tail)
    end
  end

  # creates a function that takes in a list and a function as parameters, and applies the function to each element in the list
  def map(list, fun) do
    case list do
      # if the list is empty, return an empty list
      [] -> []
      # otherwise, use recursion to apply the function to the head of the list and concatenate the result with the rest of the list
      [head|tail] -> [fun.(head)|map(tail, fun)]
    end
  end

  # creates a function that takes in a list and a starting accumulator value as parameters, and applies a function to each element in the list
  def reduce(list, fun, acc) do
    case list do
      # if the list is empty, return the accumulator value
      [] -> acc
      # otherwise, use recursion to apply the function to the head of the list and the current accumulator value, and pass the result to the next iteration
      [head|tail] -> reduce(tail, fun, fun.(head, acc))
    end
  end

  # creates a function that takes in a list as a parameter and returns a new list with elements that satisfy the given condition
  def filter(list, fun) do
    case list do
      # if the list is empty, return an empty list
      [] -> []
      # otherwise, use recursion to check if the head of the list satisfies the condition, and either include or exclude it in the new list
      [head|tail] -> if fun.(head), do: [head|filter(tail, fun)], else: filter(tail, fun)
    end
  end

  # creates a function that takes in a list as a parameter and returns a new list with the elements in reverse order
  def reverse(list) do
    case list do
      # if the list is empty, return an empty list
      [] -> []
      # otherwise, use recursion to add the head of the list to the end of the reversed tail of the list
      [head|tail] -> reverse(tail) ++ [head]
    end
  end
end