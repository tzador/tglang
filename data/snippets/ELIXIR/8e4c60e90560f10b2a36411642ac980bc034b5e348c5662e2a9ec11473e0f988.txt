# Annotated markdown code snippet in ELIXIR
# Creating a module to perform mathematical operations

defmodule MathOperations do
  # Defining a function to add two numbers
  # `add` - function name
  # `a` and `b` - arguments
  # `a + b` - body of the function
  def add(a, b) do
    a + b
  end

  # Defining a function to multiply two numbers
  # `multiply` - function name
  # `x` and `y` - arguments
  # `x * y` - body of the function
  def multiply(x, y) do
    x * y
  end

  # Defining a function to divide two numbers
  # `divide` - function name
  # `num` and `denom` - arguments
  # `num / denom` - body of the function
  def divide(num, denom) do
    num / denom
  end

  # Defining a function to calculate the factorial of a number
  # `factorial` - function name
  # `n` - argument
  # `Enum.reduce(1..n, fn x, acc -> x * acc end` - body of the function
  def factorial(n) do
    Enum.reduce(1..n, fn x, acc -> x * acc end)
  end
end

# Calling the `add` function with arguments `5` and `3`
MathOperations.add(5, 3)

# Output: 8

# Calling the `multiply` function with arguments `4` and `6`
MathOperations.multiply(4, 6)

# Output: 24

# Calling the `divide` function with arguments `10` and `2`
MathOperations.divide(10, 2)

# Output: 5.0

# Calling the `factorial` function with argument `5`
MathOperations.factorial(5)

# Output: 120