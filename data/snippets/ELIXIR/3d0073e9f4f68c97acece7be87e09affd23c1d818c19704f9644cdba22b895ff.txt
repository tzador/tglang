defmodule Encryption do

  @moduledoc """
  This module implements encryption algorithms for securing data.
  """

  ## Public API
  # Generates a random key for encryption
  def generate_key() do
    :crypto.strong_rand_bytes(32)
  end

  # Encrypts plaintext with given key
  # key - 32-byte binary
  # plaintext - any binary or string
  # Returns encrypted ciphertext as binary
  def encrypt(key, plaintext) do
    :crypto.aes_cfb_128_encrypt(plaintext, key, key)
  end

  # Decrypts ciphertext with given key
  # key - 32-byte binary
  # ciphertext - binary
  # Returns decrypted plaintext as binary
  def decrypt(key, ciphertext) do
    :crypto.aes_cfb_128_decrypt(ciphertext, key, key)
  end

  ## Private functions
  # Validates key length
  # key - binary
  # Raises ArgumentError if key length is not 32 bytes
  defp validate_key_length(key) do
    if byte_size(key) != 32 do
      raise ArgumentError, "Key must be 32 bytes long"
    end
  end

end