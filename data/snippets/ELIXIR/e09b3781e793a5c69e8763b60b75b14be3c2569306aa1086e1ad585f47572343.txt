%{
       title: "Elixir Code Snippet",
       description: "This code snippet is a demonstration of the power of pattern matching in Elixir.",
       author: "John Doe",
       date: "2021-10-27",
       language: "ELIXIR",
       complexity: "HIGH"
   }

defmodule Pattern do
   def detect(pattern, data) do
       data
       |> match(pattern)
       |> extract
   end

   def match(pattern, data) do
       case {pattern, data} do
           {[], data} -> [data]
           {[head | tail], [head | rest]} -> [head | match(tail, rest)]
           {_head, _rest} -> MatchError.raise
       end
   end

   def extract(data) do
       case data do
           {match_data, matched} -> [matched | extract(match_data)]
           _non_matched -> []
       end
   end
end

Pattern.detect([foo, bar], [foo, bar, baz, fizz, buzz])