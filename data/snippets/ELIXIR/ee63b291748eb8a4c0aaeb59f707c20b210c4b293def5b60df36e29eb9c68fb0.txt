# Module definition
defmodule Example do
  # Function definition with pattern matching
  def factorial(0), do: 1
  # Recursive function with guard clauses
  def factorial(n) when n > 0 do
    n * factorial(n-1)
  end
  # Private function
  defp private_function(arg) do
    # Do something with the argument
  end
  # Module attribute
  @attribute "value"
end

# Module usage
# Assigning a function to a variable
factorial = Example.factorial
# Calling the function with different arguments
factorial.(5) #=> 120
factorial.(10) #=> 3628800
# Accessing a module attribute
Example.attribute #=> "value"

# Pattern matching in function clauses
[head | tail] = [1, 2, 3]
head #=> 1
tail #=> [2, 3]
# Binding a function clause to a specific value
factorial(5) = 120
# This will return true since 5! = 120