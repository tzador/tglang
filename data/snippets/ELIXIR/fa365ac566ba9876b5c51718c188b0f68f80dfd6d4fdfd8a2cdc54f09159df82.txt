defmodule User do
  #Defines a new module named User
  @moduledoc """
  This module holds functions related to user information.
  """

  #Defines a public function that greets the user
  @spec greet(String.t) :: String.t
  def greet(name) do
    "Hello #{name}, welcome to our platform!"
  end

  #Defines a private function that returns the length of a string
  defp string_length(string) do
    String.length(string)
  end

  #Defines a function that checks if a user is underage
  @spec is_underage(name :: String.t, age :: non_neg_integer) :: boolean
  def is_underage(name, age) do
    if age < 18 do
      IO.puts "#{name} is underage." #Prints a message if the user is underage
      true
    else
      false
    end
  end

  #Defines an internal function that checks if a user is an admin
  defp is_admin(user) when user.role == :admin do
    true
  end

  #Defines a public function that creates a new user
  @spec create_user(name :: String.t, email :: String.t, age :: non_neg_integer) :: {:ok, map} | {:error, String.t}
  def create_user(name, email, age) do
    if is_underage(name, age) do
      {:error, "User must be at least 18 years old."} #Returns an error if the user is underage
    else
      user = %{
        name: name,
        email: email,
        age: age,
        role: :user
      }

      if is_admin(user) do
        user = Map.put(user, :role, :admin)
      end

      {:ok, user} #Returns a success message and the new user map
    end
  end
end