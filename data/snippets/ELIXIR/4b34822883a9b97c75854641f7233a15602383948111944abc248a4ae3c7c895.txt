# Define a module named "BankAccount" with state variables "balance" and "transactions"
defmodule BankAccount do
  @balance 0
  @transactions []

  # Define a function "deposit" that takes in an amount parameter and adds it to the balance
  def deposit(amount) do
    @balance = @balance + amount
    IO.puts("Deposited: " <> to_string(amount))
    IO.puts("New balance: " <> to_string(@balance))
  end

  # Define a function "withdraw" that takes in an amount parameter, checks if the balance is greater than or equal to the amount,
  # and if so, subtracts the amount from the balance and records the transaction in the transactions list
  # Otherwise, prints an error message
  def withdraw(amount) do
    if @balance >= amount do
      @balance = @balance - amount
      IO.puts("Withdrew: " <> to_string(amount))
      IO.puts("New balance: " <> to_string(@balance))

      # Add the transaction to the transactions list
      @transactions = [time_stamp(), "Withdraw", amount] ++ @transactions
    else
      IO.puts("Insufficient funds")
    end
  end

  # Define a function "time_stamp" that returns the current time in a readable format
  defp time_stamp() do
    DateTime.utc_now
    |> DateTime.to_iso8601
  end
end

# Create a new instance of the "BankAccount" module and call the "deposit" and "withdraw" functions
bank_account = BankAccount.new
bank_account.deposit(5000)
bank_account.withdraw(2000)
bank_account.withdraw(4000)

# Print out the final balance and list of transactions
IO.puts("Final balance: " <> to_string(bank_account.balance))
IO.puts("Transactions:")
Enum.each(bank_account.transactions, fn transaction ->
  IO.puts(transaction)
end)