# Defining a module in Elixir
defmodule Math do
  @doc "Adds two numbers"
  def add(a, b) do
    a + b
  end
  
  # private function for dividing two numbers
  defp divide(a, b), do: a / b
end

# Calling the add function from the Math module
Math.add(3, 5)

# Output: 8

# Pattern matching in function definitions
defmodule ListHelper do
  def sum([head | tail]) do
    head + sum(tail)
  end
  def sum([]) do
    0
  end
end

# Creating a list of numbers
numbers = [1, 2, 3, 4, 5]

# Calling the sum function from ListHelper module
ListHelper.sum(numbers)

# Output: 15

# Anonymous functions and capturing variables
multiply_by_four = fn(number) -> 
  number * 4 
end

# Calling the anonymous function
multiply_by_four.(5)

# Output: 20

# Compose function to combine multiple functions together
add_two = fn(number) -> 
  number + 2 
end

# Combining the add_two and multiply_by_four functions
combined_function = &multiply_by_four.(add_two.(&1))

# Calling the combined function
combined_function.(5)

# Output: 28