defmodule Number do
  @doc "Represents a number"
  defstruct [value: 0]

  @spec new(integer) :: %Number{}
  def new(value) when is_integer(value) do
    %Number{value: value}
  end

  @spec add(%Number{}, %Number{}) :: %Number{}
  def add(%Number{value: a}, %Number{value: b}) do
    %Number{value: a + b}
  end

  @doc """
  Calculates the factorial of a given number.

  Examples:

      iex> Number.factorial(10)
      3628800

      iex> Number.factorial(3)
      6
  """
  @spec factorial(integer) :: integer
  def factorial(0), do: 1
  def factorial(n) when n > 0, do: n * factorial(n-1)
end