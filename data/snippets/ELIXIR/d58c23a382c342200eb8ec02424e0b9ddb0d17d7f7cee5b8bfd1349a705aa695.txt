defmodule Sandbox do
  use GenServer

  def start_link do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  @impl true
  def init(_) do
    %{counter: 0}
  end

  @impl true
  def handle_call(:increment, _from, state) do
    new_state = %{state | counter: state.counter + 1}
    {:reply, new_state.counter, new_state}
  end

  @impl true
  def handle_cast({:print_counter, pid}, state) do
    IO.puts("Counter at process #{inspect pid}:\n#{state.counter}")
    {:noreply, state}
  end

  @impl true
  def handle_info(:shutdown, state) do
    {:stop, :normal, state}
  end

  def increment(pid) do
    GenServer.call(pid, :increment)
  end

  def print_counter(pid) do
    GenServer.cast(pid, {:print_counter, pid})
  end
end