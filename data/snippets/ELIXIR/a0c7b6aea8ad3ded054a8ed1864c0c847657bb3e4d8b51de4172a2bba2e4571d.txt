defmodule User do
  defstruct name: nil, age: nil # define a struct with two fields: name and age
end 

defmodule Database do
  @users [] # initialize an empty list for storing users

  # function that takes in a user struct as a parameter and adds it to the list of users in the database
  def add_user(user) do 
    new_user = %User{name: user.name, age: user.age}
    @users = [@users, new_user] 
  end 

  # function that retrieves and prints the name and age of all users in the database
  def print_users do 
    Enum.each(@users, fn user -> IO.puts "#{user.name}, #{user.age}" end) 
  end 

  # function that retrieves and prints the names and ages of users who are above a certain age
  def print_users_above_age(age) do 
    Enum.filter(@users, fn user -> user.age >= age end) 
    |> Enum.each(fn user -> IO.puts "#{user.name}, #{user.age}" end) 
  end 
end 

# example usage of the above code
# create two user structs 
user1 = %User{name: "John", age: 25} 
user2 = %User{name: "Mary", age: 30} 

# add users to the database 
Database.add_user(user1) 
Database.add_user(user2) 

# print all users in the database 
Database.print_users # output: John, 25  Mary, 30 

# print users who are above 25 years old 
Database.print_users_above_age(25) # output: Mary, 30