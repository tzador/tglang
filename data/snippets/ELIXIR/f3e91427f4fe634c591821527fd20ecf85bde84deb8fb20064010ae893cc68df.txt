# This is a comment in Elixir

# Defining a complex function with two parameters and multiple clauses
defmodule MyModule do
  def my_function(x, y) when x > 0 do
    x + y
  end

  def my_function(x, y) when x < 0 do
    x - y
  end

  def my_function(x, y) when x == 0 do
    x * y
  end
end

# Creating a list of tuples and pattern matching to destructure the tuples
my_list = [{1,2}, {3,4}, {5,6}]

for {a,b} <- my_list do
  IO.puts "Sum of tuple elements is #{a + b}"
end

# Using recursion to calculate factorial
def factorial(n) when n == 0, do: 1
def factorial(n) when n > 0 do
  n * factorial(n - 1)
end

# Creating a map and updating its values
my_map = %{a: 1, b: 2, c: 3}

updated_map = %{my_map | a: 5, b: 10}

# Using the pipe operator to chain functions together
sum = Enum.reduce(1..10, 0, fn x, acc -> x + acc end) |> Kernel.+(11)

# Defining a struct and accessing its fields
defmodule Person do
  defstruct name: "John", age: 30, occupation: "Programmer"
end

person = %Person{name: "Jane", age: 25, occupation: "Designer"}

IO.puts "#{person.name} is a #{person.occupation} who is #{person.age} years old"

# Creating a module attribute and accessing it within a function
defmodule MyModule do
  @base 10

  def convert_to_binary(n) do
    n * @base |> Integer.to_binary
  end
end

# Using anonymous functions to perform calculations on a list
my_list = [1, 2, 3, 4]

result = Enum.map(my_list, fn x -> x * 2 end)

# Using a case statement to pattern match and handle different scenarios
age = 18

case age do
  0..12 -> IO.puts "Child"
  13..17 -> IO.puts "Teenager"
  _ -> IO.puts "Adult"
end