# This is a module that implements a binary search tree data structure.
# It supports insertion, deletion, searching, and traversal operations.

defmodule BST do
  # The tree is represented as a tuple: {value, left_child, right_child}

  # Function to insert a key-value pair into the tree
  # Takes in the current tree tuple, and the key-value pair
  # Returns the updated tree tuple
  def insert(tree, {key, value}) do
    # Pattern match the tree tuple and check if the key already exists in the tree
    case tree do
      #{}, _, _ -> raise "Key already exists in tree"
      {key, _, _} -> raise "Key already exists in tree"
      {_value, left, right} ->
        # If key is less than the current node's key, insert into the left subtree
        if key < _value do
          {left, right} = insert(left, {key, value})
          {_value, left, right}
        
        # If key is greater than the current node's key, insert into the right subtree
        else
          {left, right} = insert(right, {key, value})
          {_value, left, right}
        end
    end
  end

  # Function to delete a key from the tree
  # Takes in the current tree tuple, and the key to be deleted
  # Returns the updated tree tuple
  def delete(tree, key) do
    # Pattern match the tree tuple
    case tree do
      # If key does not exist in the tree, raise an error
      #{}, _, _ -> raise "Key does not exist in tree"
      {key, _, _} -> raise "Key does not exist in tree"
      {_value, left, right} ->
        # If key is less than the current node's key, delete from the left subtree
        if key < _value do
          {left, right} = delete(left, key)
          {_value, left, right}
        # If key is greater than the current node's key, delete from the right subtree
        else
          {left, right} = delete(right, key)
          {_value, left, right}
        end
    end
  end

  # Function to search for a key in the tree
  # Takes in the current tree tuple, and the key to be searched
  # Returns the value associated with the key, if found; nil otherwise
  def search(tree, key) do
    # Pattern match the tree tuple
    case tree do
      # If key does not exist in the tree, return nil
      #{}, _, _ -> nil
      {key, _, _} -> nil
      {_value, left, right} ->
        # If key is less than the current node's key, search in the left subtree
        if key < _value do
          search(left, key)
        # If key is greater than the current node's key, search in the right subtree
        else
          search(right, key)
        end
    end
  end

  # In-order traversal of the tree
  # Takes in the current tree tuple
  # Prints out the elements in the tree in ascending order
  def inorder(tree) do
    # Pattern match the tree tuple
    case tree do
      #{}, _, _ -> nil
      {key, _, _} -> IO.puts "Value: #{key}"
      {_value, left, right} ->
        # Traverse the left subtree
        inorder(left)
        # Print out the value at the current node
        IO.puts "Value: #{_value}"
        # Traverse the right subtree
        inorder(right)
    end
  end
end

# Example usage of the BST module
# Create an empty tree tuple
tree = {}

# Insert key-value pairs into the tree
tree = BST.insert(tree, {5, "a"})
tree = BST.insert(tree, {3, "b"})
tree = BST.insert(tree, {8, "c"})
tree = BST.insert(tree, {4, "d"})

# In-order traversal of the tree
BST.inorder(tree)

# Search for a particular key in the tree
BST.search(tree, 8)

# Delete a key from the tree
tree = BST.delete(tree, 3)