defmodule User do 
  # This module creates a user and defines functions for interacting with user data.
  
  @moduledoc "This module represents a user and contains functions for manipulating user data."
  
  @user struct(first_name: "", last_name: "", username: "", email: "")
  
  # Creates a new user.
  def create_user(first_name, last_name, username, email) do
    %User{first_name: first_name, last_name: last_name, username: username, email: email}
  end
  
  # Returns the full name of a user.
  def full_name(user) do
    "#{user.first_name} #{user.last_name}"
  end
  
  # Changes the username of a user.
  def change_username(user, new_username) do
    user.username = new_username
    user
  end
  
  # Changes the email of a user.
  def change_email(user, new_email) do
    user.email = new_email
    user
  end
end

# Example usage:

user = User.create_user("John", "Smith", "johnsmith", "johnsmith@example.com")
IO.puts "User's full name: #{User.full_name(user)}"
user = User.change_username(user, "j.smith")
IO.puts "User's new username: #{user.username}"
user = User.change_email(user, "jsmith@example.com")
IO.puts "User's new email: #{user.email}"

# Output:
# User's full name: John Smith
# User's new username: j.smith
# User's new email: jsmith@example.com