# This is a module in Elixir that implements a binary search tree and contains several helper functions
defmodule BST do
  # An atom representing an empty tree
  @empty_tree :empty
  # The struct used to represent a node in the tree
  defstruct [:value, :left, :right]

  # Inserts a new value into the tree
  # Arguments:
  #   - tree: The tree to insert the value into
  #   - value: The value to insert
  # Returns:
  #   The tree with the new value inserted
  def insert(tree, value) do
    case tree do
      @empty_tree -> %BST{value: value, left: @empty_tree, right: @empty_tree}
      %BST{value: value} -> tree
      %BST{value: current_value, left: left, right: right} ->
        if value < current_value do
          %BST{value: current_value, left: insert(left, value), right: right}
        else
          %BST{value: current_value, left: left, right: insert(right, value)}
        end
    end
  end

  # Checks if a value is in the tree
  # Arguments:
  #   - tree: The tree to search for the value in
  #   - value: The value to search for
  # Returns:
  #   - true if the value is found
  #   - false otherwise
  def contains?(tree, value) do
    case tree do
      @empty_tree -> false
      %BST{value: value} -> true
      %BST{value: current_value, left: left, right: right} ->
        if value < current_value do
          contains?(left, value)
        else
          contains?(right, value)
        end
    end
  end

  # Returns the maximum value in the tree
  # Arguments:
  #   - tree: The tree to find the maximum value in
  # Returns:
  #   - The maximum value
  #   - nil if the tree is empty
  def find_max(tree) do
    case tree do
      @empty_tree -> nil
      %BST{value: value, right: @empty_tree} -> value
      %BST{right: right} -> find_max(right)
    end
  end

  # Returns the minimum value in the tree
  # Arguments:
  #   - tree: The tree to find the minimum value in
  # Returns:
  #   - The minimum value
  #   - nil if the tree is empty
  def find_min(tree) do
    case tree do
      @empty_tree -> nil
      %BST{value: value, left: @empty_tree} -> value
      %BST{left: left} -> find_min(left)
    end
  end

  # Returns the size of the tree, i.e. the number of nodes
  # Arguments:
  #   - tree: The tree to find the size of
  # Returns:
  #   - The size of the tree
  #   - 0 if the tree is empty
  def size(tree) do
    case tree do
      @empty_tree -> 0
      %BST{left: left, right: right} -> 1 + size(left) + size(right)
    end
  end

  # Prints the tree in-order using recursion
  # Arguments:
  #   - tree: The tree to print
  def print_inorder(tree) do
    case tree do
      @empty_tree -> :ok
      %BST{left: left, value: value, right: right} ->
        print_inorder(left)
        IO.inspect(value)
        print_inorder(right)
    end
  end
end

# Example usage: creating a new tree and inserting values
tree = %BST{}
tree = BST.insert(tree, 10)
tree = BST.insert(tree, 5)
tree = BST.insert(tree, 15)

# Print the size of the tree
IO.puts("The size of the tree is #{BST.size(tree)}")

# Check if the tree contains a certain value
IO.puts("Does the tree contain the value 5? #{BST.contains?(tree, 5)}")

# Print the tree in-order
IO.puts("The tree in-order is:")
BST.print_inorder(tree)