defmodule Example do
  @doc """
  Returns the sum of the given list of numbers.
  Arguments:
    * list - a list of numbers
  """
  def sum_list(list) do
    sum = 0
    for num <- list do
      sum = sum + num
    end
    sum
  end

  @doc """
  Calculates and returns the factorial of the given number.
  Arguments:
    * num - an integer
  """
  def factorial(num) do
    if num <= 1 do
      1
    else
      num * factorial(num - 1)
    end
  end

  @doc """
  Generates and returns a list of Fibonacci numbers up to the given limit.
  Arguments:
    * limit - the maximum value for the Fibonacci sequence
  """
  def fibonacci(limit) do
    fib_list = [0, 1]
    while Enum.last(fib_list) < limit do
      next_fib = Enum.sum(Enum.take(fib_list, 2))
      fib_list = [next_fib | fib_list]
    end
    Enum.reverse(fib_list)
  end
end

# Example usage:
Example.sum_list([1, 2, 3, 4]) # 10
Example.factorial(5) # 120
Example.fibonacci(50) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]