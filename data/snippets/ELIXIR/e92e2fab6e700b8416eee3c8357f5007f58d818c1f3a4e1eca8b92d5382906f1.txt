defmodule Example do
  use GenServer

  # This function starts the GenServer process
  def start_link(arg) do
    # This calls the GenServer.start_link/3 method
    GenServer.start_link(__MODULE__, arg, name: {:global, __MODULE__})
  end

  # This is the handle_call function that handles incoming calls to the process
  def handle_call(:get_data, _from, state) do
    # Some complex logic here to get the data
    data = Enum.reduce(state, fn({key, value}, acc) ->
      case value do
        String.t -> Map.put(acc, key, String.upcase(value))
        _ -> acc
      end
    end, %{})

    # Sends back the data to the caller
    {:reply, data, state}
  end

  # This is the init function that initializes the process state
  def init(arg) do
    # performs some initialization based on the input argument
    initial_state = %{
      name: "John",
      age: 25,
      occupation: "Software Engineer"
    }

    # Starts a timer that sends a message to itself every 10 seconds
    send(self(), :timer_10 seconds)

    {:ok, initial_state}
  end

  # Runs the process in a loop, handling incoming messages
  def handle_info(:timer_10 seconds, state) do
    # Randomly adds or removes a key-value pair from the state
    new_state = if random(seed(state)) > 0.5, do: Map.delete(state, :occupation), else: Map.put(state, :location, "California")

    {:noreply, new_state}
  end
end

# Starts the process with an initial argument and assigns it to a variable
{:ok, pid} = Example.start_link("Example Argument")

# Sends a call to the process to retrieve data
data = GenServer.call(pid, :get_data)

# Prints the retrieved data
IO.puts "The retrieved data is: #{inspect data}"