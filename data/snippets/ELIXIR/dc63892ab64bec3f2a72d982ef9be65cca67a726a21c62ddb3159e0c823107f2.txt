defmodule User do # defining an Elixir module named User

  @moduledoc """ # this is a module attribute, used for documentation and code organization
  
  This module represents a user in a system.
  """

  @doc """ # this is a function attribute, used for documentation within a module

  Returns a greeting message for the given user.
  """
  def greet(name) do # defining a greet function that takes in a user's name as a parameter
    "Hello #{name}! Welcome to our system!"
  end

  @doc """ # another function attribute, for a function that returns the user's age

  Returns the age of the given user, in years.
  """
  def age(user) do # defining an age function that takes in a user as a parameter
    # retrieving the user's date of birth from their data
    {year, month, day} = user.date_of_birth 
    # calculating the current date
    {current_year, current_month, current_day} = :calendar.now_to_date(:universal_time)
    # calculating the user's age
    age = current_year - year - 1 + (current_month >= month and current_day >= day) 
    # returning the age
    age
  end

end

# creating a new user instance with their name and date of birth
user = User.new("Jane Smith", {1995, 5, 15}) 
# calling the greet function with the user's name
greet_message = User.greet(user.name) 
# calling the age function with the user instance
age = User.age(user) 

# printing the results
IO.puts(greet_message)
IO.puts("You are #{age} years old.")