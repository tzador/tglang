defmodule User do
  @moduledoc "Module for creating and managing user records"

  import Ecto.Changeset

  @primary_key {:id, :binary_id, autogenerate: true}
  schema "users" do
    field :name, :string
    field :email, :string
    field :age, :integer
  end

  @doc "Creates a new user changeset"
  @spec new_changeset :: Ecto.Changeset.t()
  def new_changeset do
    %User{}
    |> cast(params, [:name, :email, :age])
    |> validate_required([:name, :email, :age])
    |> unique_constraint(:email)
    |> unique_constraint(:name)
    |> validate_format(:email, ~r/@/)
    |> validate_length(:name, min: 3)
    |> validate_number(:age, greater_than: 18)
  end

  @doc "Updates a user changeset based on given parameters"
  @spec update_changeset :: Ecto.Changeset.t()
  def update_changeset(user, params) do
    user
    |> cast(params, [:name, :email, :age])
    |> validate_format(:email, ~r/@/)
    |> validate_length(:name, min: 3)
    |> validate_number(:age, greater_than: 18)
  end
end