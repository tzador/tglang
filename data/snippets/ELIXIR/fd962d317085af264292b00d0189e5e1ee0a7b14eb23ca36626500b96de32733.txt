defmodule ElixirSnippet do
  @moduledoc """
  This is a module containing a complex code snippet in Elixir.
  """

  # This macro defines a function `print_list` that takes in a list and prints out
  # each element in the list, along with its index.
  # It also allows for optional formatting of the output.
  #
  # Parameters:
  # - list: A list of elements
  # - format: A string specifying the desired output format. Defaults to "Index: Element"
  #
  defmacro print_list(list, format \\ "Index: Element") do
    for {index, element} <- Enum.with_index(list) do
      quote do
        IO.puts(unquote(format), unquote(index), unquote(element))
      end
    end
    nil
  end

  # This function takes in two integers and returns the sum of their squares.
  # It also checks the arguments to ensure they are integers and raises an error if not.
  #
  # Parameters:
  # - a: An integer
  # - b: An integer
  #
  def sum_of_squares(a, b) when is_integer(a) and is_integer(b) do
    a * a + b * b
  end

  # This function takes in a map and a key and returns the corresponding value.
  # It also checks if the key exists in the map and raises an error if not.
  #
  # Parameters:
  # - map: A map
  # - key: A key to look up in the map
  #
  def get_value(map, key) do
    case Map.fetch(map, key) do
      {:ok, value} -> value
      {:error, _reason} -> raise "Key does not exist in map."
    end
  end

  # This function calculates the factorial of a given number using recursion.
  # It also handles the case when the number is negative or zero.
  #
  # Parameters:
  # - n: An integer
  #
  defp factorial(n) when n < 0, do: raise "Factorial not defined for negative numbers."
  defp factorial(0), do: 1
  defp factorial(n), do: n * factorial(n-1)
end