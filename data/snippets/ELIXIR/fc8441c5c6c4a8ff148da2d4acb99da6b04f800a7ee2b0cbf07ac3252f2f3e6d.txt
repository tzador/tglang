defmodule Complex do
  # Creating a struct with the fields real and imaginary
  @type t :: %Complex{
    real: number,
    imaginary: number
  }

  # Function to initialize the struct
  def new(real, imaginary) do
    %Complex{real: real, imaginary: imaginary}
  end

  # Operator overloading for addition of two complex numbers
  defimpl Addable do
    @impl true
    def add(a, b) do
      new(a.real + b.real, a.imaginary + b.imaginary)
    end
  end

  # Operator overloading for subtraction of two complex numbers
  defimpl Subtractable do
    @impl true
    def subtract(a, b) do
      new(a.real - b.real, a.imaginary - b.imaginary)
    end
  end

  # Operator overloading for multiplication of two complex numbers
  defimpl Multipliable do
    @impl true
    def multiply(a, b) do
      new((a.real * b.real) - (a.imaginary * b.imaginary), (a.real * b.imaginary) + (a.imaginary * b.real))
    end
  end

  # Operator overloading for division of two complex numbers
  defimpl Divisible do
    @impl true
    def divide(a, b) do
      # Calculating the conjugate of the second complex number
      conjugate = new(b.real, -b.imaginary)
      # Multiplying a by the conjugate of b and dividing it by the product of b and its conjugate
      new((a.real * conjugate.real + a.imaginary * conjugate.imaginary) / (b.real * conjugate.real + b.imaginary * conjugate.imaginary), (a.imaginary * conjugate.real - a.real * conjugate.imaginary) / (b.real * conjugate.real + b.imaginary * conjugate.imaginary))
    end
  end
end

# Creating two complex numbers
a = Complex.new(2, 3)
b = Complex.new(4, 5)

# Adding the two complex numbers
c = a + b
IO.puts c.real
# Output: 6

# Subtracting the two complex numbers
d = a - b
IO.puts d.imaginary
# Output: -2

# Multiplying the two complex numbers
e = a * b
IO.puts e.real
# Output: -7
IO.puts e.imaginary
# Output: 26

# Dividing the two complex numbers
f = a / b
IO.puts f.real
# Output: 0.56
IO.puts f.imaginary
# Output: -0.04