defmodule Calculator do
  # Function to add two numbers
  def add(x, y) do
    x + y
  end

  # Function to subtract two numbers
  def subtract(x, y) do
    x - y
  end

  # Function to multiply two numbers
  def multiply(x, y) do
    x * y
  end

  # Function to divide two numbers
  def divide(x, y) do
    # Check for division by zero
    if y == 0 do
      # Raise an error
      raise "Cannot divide by zero"
    else
      # Return the result of division
      x / y
    end
  end

  # Function to calculate the power of a number
  # Takes in two arguments - the base and the exponent
  def power(x, n) do
    # Define a recursive function to calculate the power
    def power_aux(acc, _, 0) do
      # When the exponent is 0, return the accumulated result
      acc
    end
    # If the exponent is negative, calculate the power of the reciprocal
    def power_aux(acc, x, n) when n < 0 do
      # The power of the reciprocal can be found by raising the base to the positive exponent, and dividing 1 by the result
      power_aux(acc / x, x, n + 1)
    end
    # If the exponent is positive, multiply the accumulated result by the base and recursively call the function with one less exponent value
    def power_aux(acc, x, n) do
      power_aux(acc * x, x, n - 1)
    end
    # Initialize the accumulator to 1
    acc = 1
    # Call the recursive function with the specified base and exponent
    power_aux(acc, x, n)
  end

  # Function to calculate the factorial of a number
  def factorial(x) do
    # Calls the internal recursive function with an accumulator set to 1, the factorial function argument, and the length of the input array
    # The recursive function will call itself until the factorial has been fully calculated
    factorial_aux(1, x)
  end

  # Internal recursive function to calculate the factorial
  # Takes in two arguments - the accumulator and the current number
  def factorial_aux(acc, 0) do
    # When the current number reaches 0, return the accumulated factorial
    acc
  end
  # If the current number is greater than 0, multiply the accumulated factorial by the current number and recursively call the function with one less number
  def factorial_aux(acc, x) do
    factorial_aux(acc * x, x - 1)
  end
end