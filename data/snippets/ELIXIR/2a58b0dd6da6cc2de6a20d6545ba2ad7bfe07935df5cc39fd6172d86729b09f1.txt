defmodule Tree do
  # Defines a binary tree structure
  defstruct value: nil, left: nil, right: nil

  # Function to insert a value into the tree
  def insert(tree, new_value) do
    if (is_nil(tree)) do
      # Create a new node with the new_value as its value
      %Tree{value: new_value}
  
    elsif (new_value < tree.value) do
      # Insert the new_value into the left subtree
      %Tree{tree | left: insert(tree.left, new_value)}
  
    else
      # Insert the new_value into the right subtree
      %Tree{tree | right: insert(tree.right, new_value)}
    end
  end

  # Function to traverse the tree in order
  def traverse(tree, fn) do
    if (!is_nil(tree)) do
      # Traverse the left subtree
      traverse(tree.left, fn)
      
      # Apply the given function to the current node
      fn.(tree.value)
  
      # Traverse the right subtree
      traverse(tree.right, fn)
    end
  end
end

# Create a new tree with some values
tree = %Tree{
  value: 50,
  left: %Tree{
    value: 30,
    left: %Tree{value: 10},
    right: %Tree{value: 40}
  },
  right: %Tree{
    value: 80,
    left: %Tree{value: 60},
    right: %Tree{value: 90}
  }
}

# Insert a new value into the tree
new_tree = Tree.insert(tree, 70)

# Traverse the tree in order and print each node's value
Tree.traverse(new_tree, fn(value) -> IO.puts value end)