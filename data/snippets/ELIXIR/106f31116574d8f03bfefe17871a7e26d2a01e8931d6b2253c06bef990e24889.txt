defmodule ExampleModule do         # defines a module named ExampleModule
  @moduledoc "This is an example module for demonstrating Elixir code snippets."       # documentation for the module
  
  def print_name(name) do          # defines a function named print_name
    puts "Hello #{name}!"          # prints a greeting with the given name
  end
  
  def add_numbers(x, y) do         # defines a function named add_numbers
    sum = x + y                    # calculates the sum of the two given numbers
    IO.puts("The sum is #{sum}")   # prints the sum to the console
    return sum                     # returns the sum as the result of the function
  end
  
  def start_server(port) do        # defines a function named start_server
    {:ok, server} = 
    :gen_tcp.bind(port, [:active, :binary, {:packet, :line}])       # sets up a TCP server on the given port
    loop(server)                   # calls the loop function with the server as the argument
  end
  
  defp loop(server) do             # defines a private function named loop
    {:ok, socket} = :gen_tcp.accept(server)      # accepts a connection on the server
    msg = :gen_tcp.recv(socket, 0)               # receives a message from the socket
    handle_msg(msg)                 # calls a function to handle the received message
    loop(server)                   # recursively calls the loop function to continue accepting connections
  end
  
  defp handle_msg(msg) do          # defines a private function named handle_msg
    case msg do
      "Hello" -> puts "Hello there!"     # case statement to handle different types of messages
      number when is_integer(number) -> puts "Received number: #{number}"     # handles when the message is an integer
      _ -> puts "Received unknown message."       # default case to handle any other type of message
    end
  end
end