# Define a module with a function
defmodule Math do
  # Defines the 'add' function that takes in two arguments, x and y
  # Uses the HEAD :: TAIL syntax to specify argument types
  # Specifies return type as integer
  def add(x :: integer, y :: integer) :: integer do
    # Adds the two arguments together and returns the result
    x + y
  end

  # Defines a 'factorial' function that takes in one argument, n
  # Uses the HEAD :: TAIL syntax to specify argument type
  # Specifies return type as integer
  def factorial(n :: integer) :: integer do
    # Uses pattern matching to check for base case where n is equal to 0
    # Returns 1 if base case is met
    def factorial(0), do: 1
    # Continues with recursion if base case is not met
    # Multiplies n with the factorial of n-1
    # Calls itself with a decremented argument each time
    def factorial(n), do: n * factorial(n-1)
  end
end

# Use the Math module to call the 'add' function
Math.add(5, 10)
# Output: 15

# Use the Math module to call the 'factorial' function
Math.factorial(5)
# Output: 120