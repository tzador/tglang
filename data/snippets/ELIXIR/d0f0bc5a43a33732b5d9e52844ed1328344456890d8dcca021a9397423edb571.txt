# Function to create a map of students with their grades
defmodule Grades do
  # Function to calculate the average grade of a student
  def average(grades) do
    # Pattern matching to get the student's name and grades
    {name, grades} = grades
    # Base case for recursion when there are no grades left
    average(_name, []) when is_binary(name) do
      # Return zero as average grade
      0
    end

    # Recursive case to calculate average
    average(name, [grade | rest]) when is_binary(name) do
      # Call average function for rest of the grades
      (grade + average(name, rest)) / (length(rest) + 1)
    end

    # Guard clause to handle invalid grades input
    average(name, _grades) when is_binary(name) do
      # Raise an error with custom message
      raise ArgumentError, "Invalid grades input"
    end
  end

  # Function to create a map with student's name and average grade
  def create_map(students) do
    # Use Enum.map to iterate through students list and get average grade for each student
    Enum.map(students, fn student ->
      # Use anonymous function to create a key-value pair in the map
      {student[:name], average(student[:grades])}
    end)
  end
end

# Example input for create_map function
students = [
  %{name: "John Smith", grades: [99, 87, 93]},
  %{name: "Jane Doe", grades: [75, 83, 91]},
  %{name: "Bob Johnson", grades: [85, 68, 72]}
]

# Call create_map function and store the map in result variable
result = Grades.create_map(students)

# Print the result
IO.inspect(result)