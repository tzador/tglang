# Define a module called Calculator
defmodule Calculator do

  # Define a public function add with 2 parameters
  def add(a, b) do

    # Use pattern matching to ensure the parameters are valid integers
    with a <- {:ok, int_a} when is_integer(int_a),
         b <- {:ok, int_b} when is_integer(int_b) do

      # Use the |> operator to pipe the result of the addition to the next function
      a + b |> handle_result
    end
  end

  # Define a private function handle_result with 1 parameter
  defp handle_result(result) do

    # Use a case statement to handle different types of results
    case result do
      # If the result is greater than 100, return a success tuple with the result and a message
      result when result > 100 ->
        {:ok, result, "The result is greater than 100."}

      # If the result is equal to 100, return a success tuple with the result and a different message
      result when result == 100 ->
        {:ok, result, "The result is exactly 100."}

      # If the result is less than 100, return an error tuple with a message
      _ ->
        {:error, "The result is less than 100."}
    end
  end
end

# Call the add function with valid parameters and store the result in a variable
result = Calculator.add(50, 75)

# Print the result
IO.puts(result)

# Output:
{:ok, 125, "The result is greater than 100."}