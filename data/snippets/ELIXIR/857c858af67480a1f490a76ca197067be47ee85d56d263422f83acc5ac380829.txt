# Define a function that takes in two arguments
defmodule MathFunctions do
  # Using pipe operator to add one to the second argument
  def add_one(a, b) do
    b
    # Using pipe operator to multiply the result by the first argument
    |> Kernel.*(a)
    # Using pipe operator to add the first argument to the result
    |> Kernel.+(a)
  end

  # Define another function that takes in an array of integers
  def sum_array(array) do
    # Using a reduce function to add all elements in the array together
    Enum.reduce(array, 0, fn x, acc -> acc + x end)
  end

  # Define a function that checks if a number is prime
  def is_prime(number) do
    # Using the div function to check if the number is divisible by any number other than 1 and itself
    # If it is divisible, it is not prime
    Enum.all?(2..(number-1), fn x -> div(number, x) != 0 end)
  end
end

# Printing the output of the functions
IO.puts(MathFunctions.add_one(5, 10)) # Output: 20
IO.puts(MathFunctions.sum_array([1, 2, 3, 4, 5])) # Output: 15
IO.puts(MathFunctions.is_prime(17)) # Output: true
IO.puts(MathFunctions.is_prime(24)) # Output: false