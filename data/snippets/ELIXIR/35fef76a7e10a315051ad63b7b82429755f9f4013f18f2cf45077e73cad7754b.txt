defstruct Person do
  name: nil,   # defines a struct with the attribute 'name' set to nil by default
  age: nil,
  address: nil,
  email: nil
end

defmodule Database do
  @data []   # defines an empty list to store person structs

  # function to add person to database
  def add_person(name, age, address, email) do
    new_person = %Person{name: name, age: age, address: address, email: email}
    @data = [@data | new_person]   # uses the pipe operator to add the new person struct to the database list
  end

  # function to retrieve a person from database by name
  def get_person(name) do
    Enum.find(@data, fn(person) -> person.name == name end)   # uses the Enum module's find function to search the database list
  end

  # function to update a person's age in database
  def update_age(name, new_age) do
    updated_data = Enum.map(@data, fn(person) ->
      if person.name == name do   # checks if person's name matches the given name
        %Person{person | age: new_age}   # updates the age attribute of the matching person struct
      else
        person   # if name does not match, returns the original person struct
      end
    end)

    @data = updated_data   # updates the database list with the updated data
  end

  # function to delete a person from database
  def delete_person(name) do
    updated_data = Enum.reject(@data, fn(person) -> person.name == name end)   # uses the Enum module's reject function to remove the matching person struct from the database list
    @data = updated_data   # updates the database list with the updated data
  end
end