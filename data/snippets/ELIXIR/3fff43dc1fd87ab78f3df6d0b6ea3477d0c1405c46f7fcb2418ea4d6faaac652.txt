defmodule Example do
  @exmaple_list ["Elixir", "is", "a", "functional", "and", "concurrent", "programming", "language"]
  @example_map %{"Elixir" => "is", "a" => "functional", "and" => "concurrent", "programming" => "language"}

  def convert_to_upcase(list) do
    Enum.map(list, &String.upcase/1)
  end

  def merge_maps(map1, map2) do
    Map.merge(map1, map2, fn(_key, val1, val2) -> [val1, val2] end)
  end

  def concat_lists(list1, list2) do
    list1 ++ list2
  end

  defp get_map_values(map) do
    Enum.map(map, &elem/1)
  end

  defp get_element_at_index(list, index) when is_number(index) do
    Enum.at(list, index)
  end

  if Enum.find(@example_list, "ELIXIR"), do: IO.puts("ELIXIR is a great language!")

  if Map.has_key?(@example_map, "concurrent"), do: IO.puts("Elixir supports concurrency!")

  #After executing the functions and if conditions, the final result is:
  final_result = concat_lists(convert_to_upcase(@exmaple_list), get_map_values(@example_map))

  IO.inspect(final_result)
end