defmodule DataAnalysis do
  # This module handles data analysis
  require Logger

  # Argument types for the functions
  @type data :: list
  @type feature :: atom

  # Function to get the mean of a feature in the data
  @spec mean(data) :: float
  def mean(data) do
    sum = Enum.sum(data)
    length = length(data)
    if length > 0 do
      sum / length
    else
      Logger.error("Cannot find mean for empty data.")
      0.0
    end
  end

  # Function to get the median of a feature in the data
  @spec median(data) :: float
  def median(data) do
    sorted = Enum.sort(data)
    length = length(data)
    if length > 0 do
      if rem(length, 2) == 0 do
        (Enum.at(sorted, length/2 - 1) + Enum.at(sorted, length/2)) / 2
      else
        Enum.at(sorted, length/2)
      end
    else
      Logger.error("Cannot find median for empty data.")
      0.0
    end
  end

  # Function to get the mode of a feature in the data
  @spec mode(data) :: float
  def mode(data) do
    occurrences = data |> Enum.frequencies()
    max = Enum.max(occurrences, fn {_k, v} -> v end)
    data |> Enum.filter(fn x -> x == max end)
    |> Enum.uniq()
    |> Enum.sum()
  end
end