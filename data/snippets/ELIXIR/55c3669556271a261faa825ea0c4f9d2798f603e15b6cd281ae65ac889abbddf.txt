# Define a module named "Math"
defmodule Math do
  # Define a function "factorial" that takes in one parameter
  # @param num [integer] - the number to find the factorial of
  def factorial(num) do
    # If the number is 0 or 1, return 1
    if num == 0 || num == 1 do
      return 1
    # If the number is greater than 1, recursively call the function
    # passing in the number - 1 and multiplying it by the number
    # @example factorial(5) would call factorial(4) * 5
    # @param num - 1 [integer] - the number to recursively call the function with
    # @return [integer] - the factorial of the given number
    # @examples factorial(5) would return 120 (1 * 2 * 3 * 4 * 5)
    else
      return factorial(num - 1) * num
    end
  end

  # Define a function "fibonacci" that takes in one parameter
  # @param num [integer] - the size of the fibonacci sequence to generate
  def fibonacci(num) do
    # Define a recursive function
    # @param index [integer] - the current index in the fibonacci sequence
    # @param prev [integer] - the previous number in the fibonacci sequence
    # @param curr [integer] - the current number in the fibonacci sequence
    def fib(index, prev, curr) do
      # If the index is 1, return the current number
      if index == 1 do
        return curr
      # If the index is greater than 1, recursively call the function
      # passing in the previous number and the current number added together
      # @example fib(5) would call fib(4, 1, 1) -> fib(3, 1, 2) -> fib(2, 2, 3) -> fib(1, 3, 5)
      # @param index - 1 [integer] - the number to recursively call the function with
      # @param curr [integer] - the new previous number for the next iteration
      # @param prev + curr [integer] - the new current number for the next iteration
      else
        return fib(index - 1, curr, prev + curr)
      end
    end

    # Call the recursive function with the given parameters and return the result
    return fib(num, 0, 1)
  end
end

# Call the functions from the module
Math.factorial(5) # 120
Math.fibonacci(10) # 55