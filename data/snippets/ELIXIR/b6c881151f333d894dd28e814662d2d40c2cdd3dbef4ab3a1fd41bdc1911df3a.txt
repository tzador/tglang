defmodule User do # defines a module in Elixir
  use Ecto.Schema # imports a data modeling library

  schema "users" do # defines a schema for the table "users"
    field :first_name, :string # creates a column for the first name of a user
    field :last_name, :string # creates a column for the last name of a user
    field :age, :integer # creates a column for the age of a user
    field :email, :string # creates a column for the email of a user
    field :password, :string # creates a column for the password of a user
    timestamps() # adds timestamp fields for created_at and updated_at

    def changeset(user, params \\ %{}) do # defines a changeset function that takes in a user and params as arguments
      user # returns the user object
      |> cast(params, [:first_name, :last_name, :age, :email, :password]) # ensures the user and params match the fields in the schema
      |> validate_required([:first_name, :last_name, :age, :email, :password]) # validates that all the required fields are present
      |> validate_length(:password, min: 8) # validates that the password is at least 8 characters long
      |> unique_constraint(:email) # checks for uniqueness of the email field
    end
  end
end

defmodule UserRepo do # defines a repository module for interacting with the database
  use Ecto.Repo, otp_app: :my_app # imports Ecto's repo behavior and sets the app name as "my_app"

  # defines a function for retrieving a user by their email
  def get_user_by_email(email) do
    from(u in User, where: u.email == ^email) # uses Ecto's "from" function to construct a query
    |> Repo.one() # executes the query and returns a single result
  end
end

# creates a new user and inserts it into the database using Ecto's "Repo" functionality
user = %User{first_name: "John", last_name: "Smith", age: 25, email: "johnsmith@email.com", password: "password"}
UserRepo.insert(user)

# retrieves a user from the database by their email
user = UserRepo.get_user_by_email("johnsmith@email.com")