defmodule ComplexMath do 
# Creating a module named ComplexMath
  
  @complex_number %Complex{}
  # defining an attribute "complex_number" which holds a complex number
  
  def add(a, b) when is_number(a) and is_number(b) do
  # Defining a function "add" which adds two numbers if they are both numbers
  
    a + b 
    # returns the sum of the two numbers
  end
  
  def add(a, b) do
  # Defining another function "add" which adds two complex numbers
  
    real = a.real + b.real
    imaginary = a.imaginary + b.imaginary
    # Calculating real and imaginary parts of the sum
    
    %Complex{real: real, imaginary: imaginary} 
    # returning a complex number with the calculated real and imaginary parts
  end
  
  def multiply(a, b) when is_number(a) and is_number(b) do
  # Defining a function "multiply" which multiplies two numbers if they are both numbers
  
    a * b 
    # returns the product of the two numbers
  end
  
  def multiply(a, b) do
  # Defining another function "multiply" which multiplies two complex numbers
  
    real = (a.real * b.real) - (a.imaginary * b.imaginary)
    imaginary = (a.real * b.imaginary) + (a.imaginary * b.real)
    # Calculating real and imaginary parts of the product
    
    %Complex{real: real, imaginary: imaginary}
    # returning a complex number with the calculated real and imaginary parts
  end
  
end