defmodule Bank do     # Defines Elixir module named "Bank"
  
  defstruct account: [], balance: 0  # Defines a struct with fields "account" and "balance", default values set
  
  def add_to_account(struct, amount) do  # Defines a function "add_to_account" with two parameters, a struct and an amount to add
    new_balance = struct.balance + amount  # Sets the new balance by adding the amount to the existing balance in the struct
    new_struct = %{struct | balance: new_balance}  # Creates a new struct with the updated balance
  end
  
  def get_balance(struct) do  # Defines a function "get_balance" with one parameter, a struct
    struct.balance  # Returns the balance stored in the struct
  end
  
  def get_account(struct) do  # Defines a function "get_account" with one parameter, a struct
    struct.account  # Returns the account stored in the struct
  end
  
  def generate_report(struct) do  # Defines a function "generate_report" with one parameter, a struct
    balance = get_balance(struct)  # Gets the balance stored in the struct
    account = get_account(struct)  # Gets the account stored in the struct
    IO.puts("Account: #{account}")  # Prints the account
    IO.puts("Current Balance: #{balance}")  # Prints the current balance
    IO.puts("Transaction History:")  # Prints the transaction history
    IO.puts("---------------------")  # Prints a separator
    for amount <- account do  # Loops through each amount in the account
      new_balance = add_to_account(struct, amount)  # Adds the amount to the current balance and updates the struct with the new balance
      IO.puts("Deposited: #{amount}")  # Prints the deposited amount
      IO.puts("New Balance: #{new_balance}")  # Prints the new balance after the deposit
      IO.puts("---------------------")  # Prints a separator
    end
  end
  
end   # End of the module declaration