defmodule ShoppingCart do  # Creates a new module for managing a shopping cart

  defstruct [items: [], total: 0]  # Defines the structure of the shopping cart, with items as a list and total as an integer

  # Adds an item to the shopping cart
  def add_item(cart, item) do
    cart = %{cart | items: cart.items ++ [item], total: cart.total + item.price}  # Updates the shopping cart by appending the new item to the items list and adding its price to the total
    IO.puts "Item added to cart"
    {cart, item}  # Returns the updated cart and the added item
  end

  # Removes an item from the shopping cart
  def remove_item(cart, item) do
    cart = %{cart | items: Enum.filter(cart.items, &(&1 != item)), total: cart.total - item.price}  # Updates the shopping cart by removing the specified item from the items list and subtracting its price from the total
    IO.puts "Item removed from cart"
    {cart, item}  # Returns the updated cart and the removed item
  end

  # Calculates the total price of the items in the shopping cart
  # Uses pattern matching to extract the items and total from the shopping cart struct
  def calculate_total(%{items: items, total: total}) do
    for item <- items, total_price = item.price * item.quantity, reduce: total_price do  # iterates through the items list and multiplies the price of each item by its quantity to get the total price
      total_price + total  # adds the total price to the current total
    end
  end
end  # end of module definition