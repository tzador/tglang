defmodule User do
  @moduledoc """
  This module represents a user and their information.
  """

  @doc """
  Struct representing a user.
  """
  @enforce_keys [:id, :username, :email, :age]
  defstruct [:id, :username, :email, :age]

  @doc """
  Checks if the user is an adult based on their age.
  Returns a boolean.
  """
  def is_adult?(user) do
    user.age >= 18
  end

  @doc """
  A function that takes in a user's email and returns the username associated with it.
  Raises an ArgumentError if the user does not have an email.
  """
  def get_username_from_email(email) do
    case email do
      nil -> raise(ArgumentError, message: "User does not have an email.")
      _ -> String.split(email, "@") |> elem(0) # We assume the username is the first part of the email before the @ symbol.
    end
  end

  @doc """
  A function that takes in a list of users and returns a list of their emails.
  """
  def get_emails(users) do
    for user <- users, into: [], do: user.email
  end

  @doc """
  An example function that uses pattern matching to check if a user is authorized based on their age and email.
  """
  def is_authorized?(%User{age: 18..120, email: email}) do
    IO.puts("User with email #{email} is authorized!")
  end
end