defmodule Game.Server do
  @moduledoc """
  This module contains functions for managing game servers.
  """

  use GenServer

  # Public API

  @doc """
  Starts a new game server with the given `name` and `port`.
  Returns `:ok` if successful, otherwise returns `{:error, reason}`.
  """
  @spec start_server(atom, pos_integer) :: :ok | {:error, term}
  def start_server(name, port) do
    GenServer.start_link(__MODULE__, {name, port})
  end

  @doc """
  Sends a command to the game server identified by `server_pid`.
  Takes a command, represented as a tuple, and returns a response, also a tuple.
  If an error occurs, returns `{:error, reason}`.
  """
  @spec send_command(pid, command) :: {:ok, response} | {:error, term}
  def send_command(server_pid, command) do
    GenServer.call(server_pid, {:command, command})
  end

  # Callbacks

  @impl true
  def init({name, port}) do
    # code for initializing the game server
    {:ok, %State{name: name, port: port, players: [], game: nil}}
  end

  @impl true
  def handle_call({:command, command}, _from, state) do
    # code for handling a command from a client
    {:reply, %Response{success: true}, state}
  end

  @impl true
  def handle_info({:tick, tick}, state) do
    # code for updating the game state on each tick
    {:noreply, state}
  end
end