defmodule LinkedList do 
  # Creates a new link list with specified head and tail values
  def new(head, tail) do 
    %LinkedList{head: head, tail: tail} 
  end 

  # Returns the head element of the linked list
  def head(%LinkedList{head: h, _tail: _t}) do 
    h 
  end 

  # Returns the tail of the linked list
  def tail(%LinkedList{head: _h, tail: t}) do 
    t 
  end 

  # Adds a new element to the front of the linked list
  def prepend(element, %LinkedList{head: h, tail: t}) do 
    %LinkedList{head: element, tail: %LinkedList{head: h, tail: t}} 
  end 

  # Adds a new element to the end of the linked list
  def append(element, %LinkedList{head: h, tail: nil}) do 
    %LinkedList{head: h, tail: %LinkedList{head: element, tail: nil}} 
  end 

  # Adds a new element at the specified index in the linked list
  def insert_at(element, index, list) when index < 0 or index > length(list), do: list 
  def insert_at(element, index, %LinkedList{head: h, tail: t}) when index == 0, do: %LinkedList{head: element, tail: %LinkedList{head: h, tail: t}} 
  def insert_at(element, index, %LinkedList{head: h, tail: t}) do 
    %LinkedList{head: h, tail: insert_at(element, index - 1, t)} 
  end 

  # Removes the element at the specified index in the linked list
  def delete_at(index, list) when index < 0 or index >= length(list) do 
    list 
  end 
  def delete_at(index, %LinkedList{head: h, tail: t}) when index == 0 do 
    t 
  end 
  def delete_at(index, %LinkedList{head: h, tail: t}) do 
    %LinkedList{head: h, tail: delete_at(index - 1, t)} 
  end 

  # Returns the length of the linked list
  def length(list) do 
    def do_length(%LinkedList{head: nil, tail: nil}, acc), 
    								do: acc 
    def do_length(%LinkedList{head: h, tail: t}, acc), do: do_length(t, acc + 1) 
    do_length(list, 0) 
  end 
end 

# Create a new linked list with head value of 1 and tail value of 2
list = LinkedList.new(1, 2) 

# Print the head element of the list 
IO.puts LinkedList.head(list) # prints 1 

# Print the tail element of the list 
IO.puts LinkedList.tail(list) # prints 2 

# Prepend a new element with value of 3 to the list 
list = LinkedList.prepend(3, list) 

# Append a new element with value of 4 to the list
list = LinkedList.append(4, list) 

# Insert a new element with value of 5 at index 2
list = LinkedList.insert_at(5, 2, list) 

# Delete the element at index 1 in the list
list = LinkedList.delete_at(1, list) 

# Print the length of the list 
IO.puts LinkedList.length(list) # prints 4