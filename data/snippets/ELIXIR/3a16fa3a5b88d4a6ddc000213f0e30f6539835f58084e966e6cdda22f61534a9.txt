defmodule Bank do #Defines a module named Bank
  defstruct account: nil, balance: 0 #Defines a struct named Bank with two fields: account and balance
  def transfer(source, destination, amount) do #Defines a function named transfer with three parameters: source, destination, and amount
    source_balance = Map.get(source, :balance) #Gets the value of the :balance key from the source map
    destination_balance = Map.get(destination, :balance) #Gets the value of the :balance key from the destination map
    if source_balance < amount do #Checks if the source balance is less than the amount to be transferred
      raise "Insufficient Funds" #Raises an error if there are insufficient funds
    else
      source = Map.put(source, :balance, source_balance - amount) #Updates the source map with the new balance after deducting the transferred amount
      destination = Map.put(destination, :balance, destination_balance + amount) #Updates the destination map with the new balance after adding the transferred amount
      {source, destination} #Returns a tuple with the updated source and destination maps
    end
  end
end

Bank.transfer(%Bank{account: "Savings", balance: 500}, %Bank{account: "Checking", balance: 200}, 300) #Calls the transfer function with sample source and destination maps and the amount to be transferred