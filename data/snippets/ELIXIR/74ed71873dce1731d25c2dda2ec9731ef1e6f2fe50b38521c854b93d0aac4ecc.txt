defmodule User do
  @moduledoc """
  This module defines the User struct and its functions.
  """

  defstruct name: "", age: 0, email: "" # defining the User struct with default values for its fields

  # defining the `new` function to create a new User with the given name, age and email
  # and returning the created User struct
  @doc """
  Creates a new User struct with the given name, age and email.
  Returns the created User struct.
  """
  def new(name, age, email) do
    %User{name: name, age: age, email: email}
  end

  # defining the `update_name` function to update the name of a given User
  # and returning the updated User struct
  @doc """
  Updates the name of the given User.
  Returns the updated User struct.
  """
  def update_name(user, name) do
    %User{user | name: name}
  end

  # defining the `update_age` function to update the age of a given User
  # and returning the updated User struct
  @doc """
  Updates the age of the given User.
  Returns the updated User struct.
  """
  def update_age(user, age) do
    %User{user | age: age}
  end

  # defining the `update_email` function to update the email of a given User
  # and returning the updated User struct
  @doc """
  Updates the email of the given User.
  Returns the updated User struct.
  """
  def update_email(user, email) do
    %User{user | email: email}
  end
end

# creating a new User and assigning it to the `user` variable
user = User.new("John", 25, "john@example.com")

# updating the User's name using the `update_name` function and saving the updated User to the `updated_user` variable
updated_user = User.update_name(user, "Johnny")

# updating the User's age using the `update_age` function and saving the updated User to the `updated_user` variable
updated_user = User.update_age(user, 26)

# updating the User's email using the `update_email` function and saving the updated User to the `updated_user` variable
updated_user = User.update_email(user, "johndoe@example.com")