defmodule MyApp do   # Creates a module named "MyApp"
  @moduledoc """      # Module documentation
  A short description of the module and its features
  """
  
  use GenServer     # Importing the GenServer behaviour into our module
  
  @doc """       # Function documentation
  Starts the GenServer process with given arguments
  """
  def start_link(arg1, arg2) do
    GenServer.start_link(__MODULE__, [arg1, arg2], :ok)
  end
  
  @doc """         # Function documentation
  Handles incoming messages and patterns matches based on the message type
  """
  def handle_info({:update, new_value}, state) do
    {:noreply, %{state | value: new_value}}
  end
  
  @doc """         # Function documentation
  Opens a file and reads its contents. Uses the `File` module from the Elixir standard library
  If the file is not found, an error is raised
  """
  def read_file(filename) do
    case File.read(filename) do
      {:ok, contents} -> contents
      {:error, reason} -> raise reason
    end
  end
  
  # Define the initial state for the GenServer process
  def init([arg1, arg2]) do
    %{value: arg1 + arg2}
  end
  
  # A function to call the GenServer process to get its current state
  def get_current_state() do
    GenServer.call(__MODULE__, :get_state)
  end
end