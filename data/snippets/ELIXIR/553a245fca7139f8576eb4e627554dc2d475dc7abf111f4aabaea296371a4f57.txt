defmodule Calculator do
# Module that defines a Calculator
    
  # Public function that calculates the sum of two numbers
  @spec sum(integer, integer) :: integer
  def sum(a, b) do
    a + b
  end
  
  # Public function that calculates the difference of two numbers
  @spec difference(integer, integer) :: integer
  def difference(a, b) do
    a - b
  end
  
  # Public function that calculates the product of two numbers
  @spec product(integer, integer) :: integer
  def product(a, b) do
    a * b
  end
  
  # Public function that calculates the quotient of two numbers
  @spec quotient(integer, integer) :: integer
  def quotient(a, b) do
    a / b
  end
  
  # Private function that checks if a number is prime
  defp is_prime(n) do
    prime = true
    # Loop through each number between 2 and the given number
    for i <- 2..n do
      # Check if the given number is divisible by any number between 2 and itself
      if rem(n, i) == 0 do
        # If it is divisible, then it is not prime
        prime = false
        # Stop the loop since we already know it is not prime
        break
      end
    end
    prime
  end

  # Public function that calculates the factorial of a number
  @spec factorial(integer) :: integer
  def factorial(n) do
    # If the number is less than 0, raise an error
    if n < 0 do
      raise "Number must be non-negative"
    # If the number is 0 or 1, return 1
    elsif n == 0 || n == 1 do
      1
    else
      # Otherwise, use recursion to calculate the factorial
      n * factorial(n-1)
    end
  end
  
end

# Example usage:

# Calculate sum of 5 and 10
Calculator.sum(5, 10)
# Output: 15

# Calculate difference of 10 and 5
Calculator.difference(10, 5)
# Output: 5

# Calculate product of 6 and 4
Calculator.product(6, 4)
# Output: 24

# Calculate quotient of 15 and 3
Calculator.quotient(15, 3)
# Output: 5

# Check if 17 is a prime number
Calculator.is_prime(17)
# Output: true

# Calculate the factorial of 5
Calculator.factorial(5)
# Output: 120