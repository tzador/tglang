# Define a module
defmodule Math do
  # Define a function that takes in two integers
  def add(a, b) when is_integer(a) and is_integer(b) do
    # Add the two integers and return the result
    result = a + b
    # Print the result to the console
    IO.puts("The result of adding #{a} and #{b} is: #{result}")
    # Return the result
    result
  end
  
  # Define a function that takes in a list of integers
  def sum_list(list) when is_list(list) do
    # Define a helper function to iterate through the list and add up the values
    defp sum_list_helper(acc, []) do
      # Once the list is empty, return the accumulator
      acc
    end
    defp sum_list_helper(acc, [head | tail]) do
      # Add the current value to the accumulator
      sum = acc + head
      # Recursively call the helper function with the updated accumulator and the remaining list
      sum_list_helper(sum, tail)
    end
    
    # Call the helper function with an initial accumulator of 0
    sum_list_helper(0, list)
  end
  
  # Define a function that takes in a string and returns the string as a list of characters
  def get_chars(string) when is_binary(string) do
    # Convert the string to a list of characters
    characters = String.to_charlist(string)
    # Print the list of characters to the console
    IO.puts("The characters in #{string} are:")
    IO.inspect(characters)
    # Return the list of characters
    characters
  end
end

# Call the add function with the values 2 and 5
Math.add(2, 5) # Output: The result of adding 2 and 5 is: 7

# Call the sum_list function with a list of integers
Math.sum_list([1, 2, 3, 4, 5]) # Output: 15

# Call the get_chars function with the string "elixir"
Math.get_chars("elixir") # Output: The characters in elixir are: [101, 108, 105, 120, 105, 114]