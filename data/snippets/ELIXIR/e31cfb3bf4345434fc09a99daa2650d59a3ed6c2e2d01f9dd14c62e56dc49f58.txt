defmodule Prime do

  #Defines a function to check if a number is prime
  def is_prime(n) do
    #If number is 2, it is prime
    if n == 2 do
      true
    #If number is 1 or less, it is not prime
    elsif n <= 1 do 
      false
    #If number is divisible by 2, it is not prime
    elsif rem(n, 2) == 0 do
      false
    else
      #Get square root of number and round up
      sqrt = :math.ceil(:math.sqrt(n))

      #Iterate through odd numbers starting from 3 up to square root
      for i <- 3..sqrt, rem(i, 2) != 0 do 
        #If number is divisible by any of the odd numbers, it is not prime
        if rem(n, i) == 0 do
          return false
        end
      end

      #If number is not divisible by any of the odd numbers, it is prime
      true
    end
  end

  #Function to generate a list of prime numbers up to a given number
  def generate_primes(n) do
    #Initialize empty list
    primes = []

    #Iterate through numbers starting from 2 up to n
    for i <- 2..n do
      #If number is prime, add it to the list
      if is_prime(i) do 
        primes = [i | primes]
      end
    end

    #Reverse the list to get prime numbers in ascending order
    Enum.reverse(primes)
  end
end

#Call the generate_primes function with a given number as argument
Prime.generate_primes(100)