defmodule SomeModule do
  use GenServer # using the GenServer behaviour
  require Logger # importing the Logger module

  # defining the state of the GenServer
  @doc """
  Contains a map of keys and values.
  """
  @state %{}

  # defining the messages that can be received by the GenServer
  @doc """
  Adds a key-value pair to the state.
  """
  @doc """
  key: the key to be added
  value: the value to be associated with the key
  Returns :ok if successful, otherwise an error
  """
  def handle_cast({:add, key, value}, state) do
    new_state = Map.put(state, key, value)
    {:noreply, new_state}
  end

  # defining the callbacks for the GenServer
  # each callback has a documentation
  # specifying the input and output parameters
  @doc """
  Starts the GenServer with an empty state.
  """
  def init(_) do
    Logger.info "Starting new GenServer!"
    {:ok, @state}
  end

  # handling a call message from a client
  @doc """
  Gets the value associated with a given key.
  """
  def handle_call({:get, key}, _sender, state) do
    value = Map.get(state, key)
    {:reply, value, state}
  end

  # handling a stop message from a client
  @doc """
  Stops the GenServer.
  """
  def handle_info(:stop, state) do
    Logger.info "Stopping GenServer!"
    {:stop, :normal, state}
  end
end