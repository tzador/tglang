defmodule Example do
  # Define a function with pattern matching
  def func_name(x) when is_number(x) do
    # Perform a simple calculation
    result = x + 5
    # Return a tuple with the result and a string
    {result, "The result is: #{result}"}
  end

  # Define a function with multiple clauses
  def func_name(x) when is_list(x) do
    # Call another function and store its result in a variable
    result = SomeModule.some_function(x)
    # Check if the result meets a specific condition
    if result > 10 do
      # Return a list with the result and a boolean value
      [result, true]
    else
      # Return a list with the result and a boolean value
      [result, false]
    end
  end

  # Define a private function
  defp private_func(x) do
    # Pattern match on the input and return a boolean value
    case x do
      1 -> true
      _ -> false
    end
  end

  # Define a recursive function with an accumulator
  def func_with_acc(x, acc \\ []) do
    # If the input is an empty list, return the accumulator
    case x do
      [] -> acc
      [head | tail] ->
        # Add the first element to the accumulator
        new_acc = [head | acc]
        # Recursively call the function with the remaining elements and the new accumulator
        func_with_acc(tail, new_acc)
    end
  end
end

# Call the functions and store their results in variables
result1 = Example.func_name(10)
result2 = Example.func_name([1, 2, 3])
result3 = Example.private_func(1)
result4 = Example.func_with_acc(["a", "b", "c"])

# Print the results
IO.puts result1
IO.puts result2
IO.puts result3
IO.puts result4