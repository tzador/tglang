defmodule Math do
  # Defines a module named "Math"

  @doc """
  Calculates the factorial of a given number.
  """
  def factorial(num) do
    # Defines a function named "factorial" that takes in a parameter "num"
    if num == 0 do
      # Checks if the parameter is equal to 0
      1 # If yes, returns 1
    else
      # If not, runs the code below
      num * factorial(num - 1) # Multiplies the parameter with the result of recursively calling the function with a decremented parameter
    end
  end

  # Defines a private function that calculates the nth power of a given number
  defp power(num, n) when n == 0, do: 1
  defp power(num, n) when n < 0, do: 1.0 / power(num, abs(n))

  # Defines a function that calculates the nth root of a given number
  def root(num, n) when n == 1, do: num
  def root(num, n) when n > 0, do: num ^ (1.0 / n)
  def root(num, n) when n < 0, do: 1.0 / root(num, abs(n))

  # Defines a function that calculates the value of pi using the Leibniz formula
  def leibniz_pi(n) do
    4 * Enum.sum(Enum.map(1..n, &((-1.0) ^ (&1 + 1)) / (2 * &1 - 1)))
  end
end

# Uses the Math module to calculate the factorial of 5
IO.puts(Math.factorial(5))

# Uses the Math module to calculate the value of pi using the Leibniz formula with n = 1000
IO.puts(Math.leibniz_pi(1000))

# Uses the Math module to calculate the 5th power of 2
IO.puts(Math.power(2, 5))

# Uses the Math module to calculate the square root of 25
IO.puts(Math.root(25, 2))