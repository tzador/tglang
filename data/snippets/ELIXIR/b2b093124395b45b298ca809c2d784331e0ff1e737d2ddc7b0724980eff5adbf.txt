defmodule Person do
  @moduledoc """
  This is a module that defines a person with a name and age.
  """

  defstruct name: nil, age: 0 # defines a struct with default values for name and age

  @doc """
  Creates a new person with the given name and age.
  Example:
    iex> Person.new("John", 25)
    %Person{name: "John", age: 25}
  """
  def new(name, age) do
    %Person{name: name, age: age}
  end

  @doc """
  Checks if the person is over 18 years old.
  Example:
    iex> Person.is_adult(%Person{name: "John", age: 20})
    true
  """
  def is_adult(%Person{age: age}) when age >= 18 do
    true
  end

  def is_adult(%Person{age: age}) when age < 18 do
    false
  end
end

defmodule Employee do
  @moduledoc """
  This is a module that defines an employee with a name, age, and position.
  """

  defstruct name: nil, age: 0, position: nil # defines a struct with default values for name, age, and position

  @doc """
  Creates a new employee with the given name, age, and position.
  Example:
    iex> Employee.new("Jane", 30, "Manager")
    %Employee{name: "Jane", age: 30, position: "Manager"}
  """
  def new(name, age, position) do
    %Employee{name: name, age: age, position: position}
  end

  @doc """
  Checks if the employee is in a management position.
  Example:
    iex> Employee.is_manager(%Employee{name: "Jane", age: 30, position: "Manager"})
    true
  """
  def is_manager(%Employee{position: position}) when position in ["Manager", "Director", "CEO"] do
    true
  end

  def is_manager(%Employee{position: position}) when position not in ["Manager", "Director", "CEO"] do
    false
  end
end