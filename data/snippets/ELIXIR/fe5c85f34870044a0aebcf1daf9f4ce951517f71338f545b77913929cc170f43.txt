# Function to calculate the nth Fibonacci number using recursion
def fibonacci(n) do
  # Base case: 0th and 1st Fibonacci numbers are 0 and 1 respectively
  if n in [0, 1] do
    n
  # Recursive case: calculate the sum of previous two Fibonacci numbers
  else
    # Function composition: fn1 |> fn2 === fn2(fn1)
    # Using pattern matching to assign values to temp variables
    prev = fibonacci(n-1)
    prev_prev = fibonacci(n-2)
    # Return the value of the nth Fibonacci number
    prev + prev_prev
  end
end

# Module attribute to store the value of the golden ratio
@phi (1+sqrt(5))/2

# Function to calculate the nth Lucas number using memoization
def lucas(n) do
  # Map from integers to their corresponding Lucas numbers
  # Default to calculating the Lucas number using the golden ratio
  %{0 => 2, 1 => 1} |> Enum.into(for {k, _} <- 2..n, {k, lucas(k-1) + lucas(k-2)}) |> Map.get(n, __MODULE__.@phi)
end

# Function that returns the list of Fibonacci numbers between a and b (both inclusive)
def fib_between(a, b) do
  # Map from integers to their corresponding Fibonacci numbers
  %{0 => 0, 1 => 1} |> Enum.into(for {k, v} <- 2..(b-a+1), {k, v}) |> Map.new() |> Enum.filter(fn {k, _} -> k >= a and k <= b end) |> Map.values()
end