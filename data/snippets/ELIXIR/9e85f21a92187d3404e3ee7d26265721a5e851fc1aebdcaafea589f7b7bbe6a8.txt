defmodule User do
  defstruct name: "John", age: 30, gender: :male, occupation: "Software Engineer"

  def validate_params(%{name: name, age: age, gender: gender, occupation: occupation}) do
    validate_name(name) |> validate_age(age) |> validate_gender(gender) |> validate_occupation(occupation)
  end

  def validate_name(name) do
    if name == "John" do
      {:ok, name}
    else
      {:error, "Invalid name"}
    end
  end

  def validate_age(age) do
    if age >= 18 do
      {:ok, age}
    else
      {:error, "You must be at least 18 years old"}
    end
  end

  def validate_gender(gender) do
    gender_list = [:male, :female, :nonbinary]
    if Enum.member?(gender_list, gender) do
      {:ok, gender}
    else
      {:error, "Invalid gender"}
    end
  end

  def validate_occupation(occupation) do
    if occupation == "Software Engineer" do
      {:ok, occupation}
    else
      {:error, "Invalid occupation"}
    end
  end
end

user = %User{name: "John", age: 30, gender: :male, occupation: "Software Engineer"}
User.validate_params(user)

# Output:
#