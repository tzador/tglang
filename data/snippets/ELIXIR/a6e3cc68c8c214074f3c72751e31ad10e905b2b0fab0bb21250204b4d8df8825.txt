# This function uses recursion to calculate the nth fibonacci number
def fibonacci(num) do
  if num == 0 or num == 1 do
    # base case, return 0 or 1
    num
  else
    # recursive case, call fibonacci function with num-1 and num-2 and add them together
    fibonacci(num-1) + fibonacci(num-2)
  end
end

# This function uses pattern matching and a list comprehension to filter out even numbers from a list
def filter_even(list) do
  # use pattern matching to check if the list is empty
  case list do
    [] -> []
    [head | tail] -> 
      # use list comprehension to filter out even numbers
      [head | _] = [num | num <- list, rem(num, 2) == 0]
      # recursively call filter_even function with the remaining numbers
      [head | filter_even(tail)]
  end
end

# This function uses pipe operator and anonymous functions to calculate the square root of a number
def square_root(num) do
  # use pipe operator to chain functions and calculate square root
  num 
  |> (fn(x) -> x*x end).()
  |> (fn(x) -> x/2 end).()
end