defmodule Tree do
    @moduledoc "This is a module that defines a tree data structure"

    defstruct [:values, :left, :right, :parent]

    @doc """
    Inserts a value into the tree at the specified node.
    If no node is specified, the value will be inserted at the root.
    Returns the updated tree with the value inserted.
    """
    def insert(tree, value, node \\ tree) do
        case compare(value, node.values) do
            :equal ->
                tree
            :less ->
                if node.left do
                    %{tree | left: insert(tree, value, node.left), parent: node}
                else
                    %{tree | left: Tree.new(value, parent: node)}
                end
            :greater ->
                if node.right do
                    %{tree | right: insert(tree, value, node.right), parent: node}
                else
                    %{tree | right: Tree.new(value, parent: node)}
                end
        end
    end

    @doc """
    Searches for a value in the tree and returns the node it is found in.
    If no node is specified, the search will start from the root.
    Returns nil if the value is not found in the tree.
    """
    def search(tree, value, node \\ tree) do
        case compare(value, node.values) do
            :equal ->
                node
            :less ->
                if node.left do
                    search(tree, value, node.left)
                else
                    nil
                end
            :greater ->
                if node.right do
                    search(tree, value, node.right)
                else
                    nil
                end
        end
    end

    @doc """
    Compares two values and returns :equal, :less, or :greater.
    """
    defp compare(v1, v2) do
        if v1 < v2 do
            :less
        else if v1 == v2 do
            :equal
        else
            :greater
        end
    end
end