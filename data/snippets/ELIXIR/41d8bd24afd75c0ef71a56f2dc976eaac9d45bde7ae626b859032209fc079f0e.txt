#This is a module declaration in Elixir
defmodule Example do
  #Defines a function with an argument and default value
  def function(argument \\ "default value") do
    #Prints the value of the argument
    IO.puts "Argument value: #{argument}"
  end

  #Defines a function with multiple arguments and pattern matching
  def function(arg1, arg2) when arg1 > arg2 do
    #Prints the result of some operations on the arguments
    IO.puts "Result: #{arg1 * arg2}"
  end

  #Defines a function with a do block
  def function(arg) do
    #Pattern matches on the argument and executes different code based on the pattern
    case arg do
      #If the argument is a number, print the square root
      number when is_number(number) -> IO.puts "Square root: #{:math.sqrt(number)}"
      #If the argument is a string, print the string length
      binary when is_binary(binary) -> IO.puts "String length: #{byte_size(binary)}"
      #If the argument is a list, print the list size
      list when is_list(list) -> IO.puts "List size: #{Enum.count(list)}"
    end
  end
end

#Calls the function with different arguments
Example.function(5) #Output: Argument value: 5
Example.function(3, 7) #Output: Result: 21
Example.function("hello") #Output: String length: 5
Example.function([1, 2, 3]) #Output: List size: 3