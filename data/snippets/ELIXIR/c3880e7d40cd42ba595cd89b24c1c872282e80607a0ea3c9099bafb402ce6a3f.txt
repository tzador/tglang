# This is a function that takes in two parameters and returns a list of all possible combinations
# between the two parameters. 
# The first parameter is a list of integers and the second parameter is a list of strings.

def module permutation do

  # Define a private function that takes in a list and a number
  defp combinations(list, n) do

    # Use recursion to return all possible combinations of the given number of elements from the list 
    # e.g. if n = 2 and list = [1, 2, 3], the combinations would be [[1, 2], [1, 3], [2, 3]]
    Enum.map(list, fn(x) ->
      combinations(list, n - 1, [x], [])
    end)
  end

  # Define the main function that takes in the two parameters
  def combinations(list_of_integers, list_of_strings) do

    # Use pattern matching to split the parameters into smaller lists
    [first_integer | remaining_integers] = list_of_integers
    [first_string | remaining_strings] = list_of_strings

    # Calculate the length of the lists
    num_of_integers = length(list_of_integers)
    num_of_strings = length(list_of_strings)

    # Use recursion to calculate all possible combinations between the two lists
    combinations(remaining_integers, remaining_strings, num_of_integers, num_of_strings, [])

  end

  # Define a private function to handle the base case when the number of combinations is 0
  defp combinations(_, _, 0, 0, permutations) do
    permutations
  end

  # Define a private function to handle the case when there are remaining integers but no remaining strings
  defp combinations(remaining_integers, _, _, 0, permutations) do
    combinations(tl(remaining_integers), [], length(tl(remaining_integers)), 0, permutations)
  end

  # Define a private function to handle the case when there are remaining strings but no remaining integers
  defp combinations(_, remaining_strings, 0, _, permutations) do
    combinations([], tl(remaining_strings), 0, length(tl(remaining_strings)), permutations)
  end

  # Define a private function to handle the case when there are both remaining integers and remaining strings
  defp combinations(remaining_integers, remaining_strings, num_of_integers, num_of_strings, permutations) do

    # Use pattern matching to split the remaining lists into smaller lists
    [first_integer | rest_integers] = remaining_integers
    [first_string | rest_strings] = remaining_strings

    # Use recursion to calculate all possible combinations with the first integer and string
    permutations = permutations ++ [[first_integer, first_string]]
    combinations(remaining_integers, rest_strings, num_of_integers - 1, num_of_strings, permutations) ++
      combinations(rest_integers, remaining_strings, num_of_integers, num_of_strings - 1, permutations)
  end
end

# Example usage:

# Define a list of integers and a list of strings
list_of_integers = [1, 2]
list_of_strings = ["a", "b"]

# Use the combinations function to get all possible combinations between the two lists
combinations = Permutation.combinations(list_of_integers, list_of_strings)

# Print the resulting combinations
IO.inspect combinations

# Output:
[[1, "a"], [1, "b"], [2, "a"], [2, "b"]]