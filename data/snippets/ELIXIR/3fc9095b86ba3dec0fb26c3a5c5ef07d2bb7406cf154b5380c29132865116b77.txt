defmodule Machine do

  use GenServer
  require Logger

  # Defining a struct for holding machine information
  defstruct name: nil,
            manufacturer: nil,
            serial_number: nil,
            production_date: nil,
            operational_hours: 0

  # Defining the initial state for the GenServer
  def init(name, manufacturer, serial_number, production_date) do
    # Creating a machine struct with the given information
    machine = %Machine{name: name, manufacturer: manufacturer, serial_number: serial_number, production_date: production_date}
    # Starting the GenServer with the machine struct as state
    {:ok, machine}
  end

  # Handling incoming messages
  def handle_info({:run, time}, state) do
    # Logging the start of the machine run with the current time
    Logger.info("Machine #{state.name} is starting a run at #{time}")
    # Updating the state with 1 more operational hour
    %{state | operational_hours: state.operational_hours + 1}
  end

  def handle_info(:stop, state) do
    # Logging the stop of the machine run
    Logger.info("Machine #{state.name} has stopped running")
    # Returning the updated state
    state
  end

  # A function to manually trigger a machine run with a specified time
  def run(machine_pid, time) do
    # Sending a message to the GenServer with the given time and machine PID
    GenServer.cast(machine_pid, {:run, time})
  end

  # A function to manually stop a machine run
  def stop(machine_pid) do
    # Sending a message to the GenServer to stop the run
    GenServer.cast(machine_pid, :stop)
  end

end