defmodule MyModule do
  use GenServer
  @moduledoc """
  This is a module that implements a GenServer.
  """

  # GenServer callbacks
  # In this case, we define the init and handle_info callbacks
  def init(state) do
    # Initialize the state with an empty map
    {:ok, %{state: %{}, msg_count: 0}}
  end

  # This callback is invoked for all messages that are not handled by other callbacks
  # In this example, we will simply increment the msg_count state variable
  def handle_info(_msg, %{state: state} = server_state) do
    updated_state = %{server_state | msg_count: server_state.msg_count + 1}
    {:noreply, updated_state, []}
  end

  # External API
  # In this case, we define the increment_msg_count and get_msg_count functions
  # These functions will interact with the GenServer through its name and its API
  def increment_msg_count(server_name) do
    GenServer.cast(server_name, :increment_msg_count)
  end

  def get_msg_count(server_name) do
    GenServer.call(server_name, :get_msg_count)
  end
end