defmodule MapReduce do
  @moduledoc """
  A module for performing a MapReduce algorithm on a collection of data
  """

  # Public API

  @doc """
  Applies a map function to a collection and then reduces the results
  using a reduce function.
  Args:
    map_fun: a function that takes in an element and returns a new element
    reduce_fun: a function that takes in two elements and returns a reduced element
    data: a collection of data to be mapped and reduced
    initial: the initial value for the reduce function, defaults to 0
  Returns:
    The result of the reduce function on the mapped data
  """
  def map_reduce(map_fun, reduce_fun, data, initial \\ 0) do
    data
    |> Enum.map(&map_fun.(&1))
    |> Enum.reduce(initial, &reduce_fun.(&1, &2))
  end
  # Private functions
  defp map_even(n), do: rem(n, 2) == 0
  defp map_odd(n), do: rem(n, 2) != 0
  defp map_squared(n), do: n * n
  defp reduce_sum(a, b), do: a + b
end

# Example usage
MapReduce.map_reduce(&MapReduce.map_even/1, &MapReduce.reduce_sum/2, [1, 2, 3, 4, 5]) # 6

MapReduce.map_reduce(&MapReduce.map_odd/1, &MapReduce.reduce_sum/2, [1, 2, 3, 4, 5]) # 9

MapReduce.map_reduce(&MapReduce.map_squared/1, &MapReduce.reduce_sum/2, [1, 2, 3, 4, 5], 10) # 65