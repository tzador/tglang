defmodule User do
  # Defining a struct to represent a user
  defstruct name: "", age: 0, email: "", password: ""

  # Defining a function to validate a user's email
  defp validate_email(user) do
    case String.contains?(user.email, "@") do
      true ->
        # Email is valid, return true
        true

      false ->
        # Email is invalid, raise an error
        raise ArgumentError, "Invalid email"
    end
  end

  # Defining a function to validate a user's password
  defp validate_password(user) do
    if String.length(user.password) >= 8 do
      # Password is valid, return true
      true
    else
      # Password is invalid, raise an error
      raise ArgumentError, "Password must be at least 8 characters long"
    end
  end

  # Defining a function to create a new user with validated email and password
  def create_new_user(name, age, email, password) do
    # Creating a new user struct with the given values
    user = %User{name: name, age: age, email: email, password: password}

    # Validate the user's email and password
    validate_email(user)
    validate_password(user)

    # All validation passes, return the new user
    user
  end
end

# Creating a new user called John with an invalid email
User.create_new_user("John", 25, "john.com", "password123")

# Output: Raises an ArgumentError with the message "Invalid email"