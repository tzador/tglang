defmodule User do
  @moduledoc """ 
  This module represents a user in the system.
  """
 
  @user_fields [:id, :name, :email, :password]
  @users [
    %{id: 1, name: "John", email: "john@domain.com", password: "password1"},
    %{id: 2, name: "Jane", email: "jane@domain.com", password: "password2"},
    %{id: 3, name: "Bob", email: "bob@domain.com", password: "password3"},
    %{id: 4, name: "Alice", email: "alice@domain.com", password: "password4"}
  ]

  # Function that retrieves a user's information based on their id
  def get_user(id) do
    Enum.find(@users, fn(user) -> user[:id] == id end)
  end

  # Function that retrieves a user's name based on their id
  def get_user_name(id) do
    get_user(id)[:name]
  end

  # Function that adds a new user to the list of users
  def add_user(name, email, password) do
    new_id = @users |> Enum.map(& &1[:id]) |> Enum.max() + 1
    user = %{id: new_id, name: name, email: email, password: password}
    @users = [@users, user]
    @users
  end
end

# Example usage of the User module
User.add_user("Samantha", "samantha@domain.com", "password5")
User.get_user(5)