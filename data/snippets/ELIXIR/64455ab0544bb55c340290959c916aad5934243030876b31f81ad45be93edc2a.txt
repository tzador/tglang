defmodule Dictionary do
  @doc """
  Stores key-value pairs and provides methods for accessing and manipulating the data.
  """
  defstruct data: []

  @doc """
  Adds a new key-value pair to the dictionary.
  If the key already exists, its value will be updated.
  """
  def add(dictionary, key, value) do
    case get(dictionary, key) do
      nil ->
        new_data = [{key, value} | dictionary.data]
        %{dictionary | data: new_data}
      _ ->
        index = get_index(dictionary.data, key)
        new_data = Enum.insert_at(dictionary.data, index, {key, value})
        %{dictionary | data: new_data}
    end
  end

  @doc """
  Retrieves the value for a given key from the dictionary.
  Returns nil if the key does not exist.
  """
  def get(dictionary, key) do
    list_to_key = fn [k, _v] -> k end
    list_to_value = fn [_k, v] -> v end
    Enum.map(dictionary.data, list_to_key)
    |> Enum.zip(Enum.map(dictionary.data, list_to_value))
    |> Map.new
    |> Map.get(key)
  end

  @doc """
  Updates the value for a given key in the dictionary.
  If the key does not exist, it will be added with the provided value.
  """
  def update(dictionary, key, value) do
    index = get_index(dictionary.data, key)
    case index do
      nil ->
        new_data = [{key, value} | dictionary.data]
        %{dictionary | data: new_data}
      _ ->
        new_data = Enum.update_at(dictionary.data, index, fn {k, _v} -> {k, value} end)
        %{dictionary | data: new_data}
    end
  end

  @doc """
  Deletes a key-value pair for a given key from the dictionary.
  Returns a new dictionary with the pair removed.
  """
  def delete(dictionary, key) do
    new_data = Enum.filter(dictionary.data, fn {k, _v} -> k != key end)
    %{dictionary | data: new_data}
  end

  @doc """
  Gets the index of a key in the list of key-value pairs.
  Returns the index or nil if the key does not exist.
  """
  defp get_index(data, key) do
    find_index = fn {k, _v} -> k == key end
    Enum.find_index(data, find_index)
  end
end