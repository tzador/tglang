# Function for creating a binary tree
def create_node(value, left_child, right_child) do
  node = %{
    value: value,
    left_child: left_child,
    right_child: right_child
  }

  return node
end

# Function for inserting a value into a binary tree
def insert(node, value) do
  if is_nil(node) do
    # If the node is nil, create a new node with the given value
    node = create_node(value, nil, nil)
  else
    # If the value is less than the current node's value, insert it into the left subtree
    if value < node.value do
      # Recursive call to insert the value into the left subtree
      node.left_child = insert(node.left_child, value)
    # If the value is greater than the current node's value, insert it into the right subtree
    else
      # Recursive call to insert the value into the right subtree
      node.right_child = insert(node.right_child, value)
    end
  end

  # Return the updated node with the new value inserted
  return node
end

# Example usage:

# Create a binary tree with a root node and two child nodes
root = create_node(3, create_node(1, nil, nil), create_node(5, nil, nil))

# Insert a new value into the binary tree
root = insert(root, 4)

# Output:
# %{
#   value: 3,
#   left_child: %{
#     value: 1,
#     left_child: nil,
#     right_child: nil
#   },
#   right_child: %{
#     value: 5,
#     left_child: %{
#       value: 4,
#       left_child: nil,
#       right_child: nil
#     },
#     right_child: nil
#   }
# }