defmodule User do
  @moduledoc """
  This module represents a user and contains functions related to users.
  """
  @name ""
  @age 0
  @email ""

  # Function to initialize a new user with given name, age, and email
  def init(name, age, email) do
    %__MODULE__{
      name: name,
      age: age,
      email: email
    }
  end

  # Function to get the user's name
  def get_name(user) do
    user.name
  end

  # Function to set the user's name
  def set_name(user, name) do
    %{user | name: name}
  end

  # Function to get the user's age
  def get_age(user) do
    user.age
  end

  # Function to set the user's age
  def set_age(user, age) do
    %{user | age: age}
  end

  # Function to get the user's email
  def get_email(user) do
    user.email
  end

  # Function to set the user's email
  def set_email(user, email) do
    %{user | email: email}
  end

  # Function to get the user's information as a string
  def info(user) do
    "#{user.name} is #{user.age} years old and can be contacted at #{user.email}."
  end
end

# Creating a new user and initializing it
user = User.init("John Doe", 25, "johndoe@example.com")

# Getting the user's name
name = User.get_name(user)

# Setting the user's name to a new value
new_user = User.set_name(user, "Jane Smith")

# Getting the user's age
age = User.get_age(user)

# Setting the user's age to a new value
user = User.set_age(user, 30)

# Getting the user's email
email = User.get_email(user)

# Setting the user's email to a new value
User.set_email(user, "janesmith@example.com")

# Getting the user's information as a string
info = User.info(user)

# Printing the user's information
IO.puts(info)