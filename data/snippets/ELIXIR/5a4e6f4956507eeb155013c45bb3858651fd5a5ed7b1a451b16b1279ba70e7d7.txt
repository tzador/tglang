defmodule Calculator do
  # This is a module called Calculator
  @doc """
  Calculates the result of a given mathematical expression.
  Supports addition, subtraction, multiplication and division.
  """
  # Documentation for the calculator module.

  @moduledoc """
  ## Usage
  Call the `calculate` function with the expression and get the result back.
  """
  # Module documentation on how to use the `calculate` function.

  def calculate(expression) do
  # Definition of a function called `calculate` that takes in an expression
  # and returns the result of the calculation.
    {:ok, result} = expression
      |> parse_expression
      |> validate_expression
      |> perform_calculation()

    result
  end

  defp parse_expression(expression) do
  # A private function for parsing the expression into a list based on the operators.
    {numbers, operators} =
      Enum.reduce_while(expression, {[], []}, fn
        # Pattern matching for the `+` operator.
        "+" ->
          {:cont, {_numbers, operators}, {_parsed_numbers, _parsed_operators}} ->
            {:halt, {_numbers, ["+ |#{operators}"]}, {_parsed_numbers, _parsed_operators}}

        # Pattern matching for the `-` operator.
        "-" ->
          {:cont, {_numbers, operators}, {_parsed_numbers, _parsed_operators}} ->
            {:halt, {_numbers, ["- |#{operators}"]}, {_parsed_numbers, _parsed_operators}}

        # Pattern matching for the `*` operator.
        "*" ->
          {:cont, {_numbers, operators}, {_parsed_numbers, _parsed_operators}} ->
            {:halt, {_numbers, ["* |#{operators}"]}, {_parsed_numbers, _parsed_operators}}

        # Pattern matching for the `/` operator.
        "/" ->
				  {:cont, {_numbers, operators}, {_parsed_numbers, _parsed_operators}} ->
            {:halt, {_numbers, ["/ |#{operators}"]}, {_parsed_numbers, _parsed_operators}}

        # Pattern matching for the numbers.
        n when is_number(n) ->
          {_numbers, operators} ->
            {:cont, {[n | _numbers], [_ | operators]}, {_parsed_numbers, _parsed_operators}}

        # Any other input is considered invalid.
        _ ->
          {_numbers, operators} ->
            {:halt, {_numbers, operators}, {_numbers, operators}}
      end)

    result = {numbers, operators}
      |> validate_numbers()
      |> validate_operators()

    result
  end

  defp validate_expression({numbers, operators}) do
  # A private function for validating the expression.
    # If there are no numbers, it is an invalid expression.
    if Enum.empty?(numbers) do
      raise ArgumentError, message: "Invalid expression."
    else
      {numbers, operators}
    end
  end

  defp validate_numbers(numbers) do
  # A private function for validating the numbers in the expression.
    # If there are more operators than numbers, it is an invalid expression.
    if Enum.count(numbers) < Enum.count(operators) do
      raise ArgumentError, message: "Invalid expression."
    else
      numbers
    end
  end

  defp validate_operators(operators) do
  # A private function for validating the operators in the expression.
    # If the last element in the list is an operator, it is an invalid expression.
    last_operator = List.last(operators)
    if last_operator == "+" || last_operator == "-" || last_operator == "*" || last_operator == "/" do
      raise ArgumentError, message: "Invalid expression."
    else
      operators
    end
  end

  defp perform_calculation({numbers, operators}) do
  # A private function for performing the calculation based on the operators.
    # Pattern matching for the `+` operator.
    case Enum.member?(operators, "+") do
      # If there is a `+` operator, perform addition.
      true ->
        {_numbers, "+" | _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 + &2))}
      _ ->
        {_numbers, _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 + &2))}
    end

    # Pattern matching for the `-` operator.
    case Enum.member?(operators, "-") do
      # If there is a `-` operator, perform subtraction.
      true ->
        {_numbers, "-" | _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 - &2))}
      _ ->
        {_numbers, _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 - &2))}
    end

    # Pattern matching for the `*` operator.
    case Enum.member?(operators, "*") do
      # If there is a `*` operator, perform multiplication.
      true ->
        {_numbers, "*" | _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 * &2))}
      _ ->
        {_numbers, _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 * &2))}
    end

    # Pattern matching for the `/` operator.
    case Enum.member?(operators, "/") do
      # If there is a `/` operator, perform division.
      true ->
        {_numbers, "/" | _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 / &2))}
      _ ->
        {_numbers, _operators} ->
          {_numbers, Enum.reduce(_numbers, &(&1 / &2))}
    end
  end
end