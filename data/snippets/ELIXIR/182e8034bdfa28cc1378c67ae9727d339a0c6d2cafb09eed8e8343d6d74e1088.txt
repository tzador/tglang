# Elixir Function that sorts a list of integers using the quicksort algorithm
# Code adapted from: https://github.com/jlajara/Elixir/blob/master/quicksort.ex

# Function to handle the partition step of quicksort algorithm
def partition(pivot, list) do
  {left, right} =
    Enum.partition(list, fn(x) -> x < pivot end) # partition the list into elements less than and greater than the pivot
  [left, pivot, right] # return a new list with the left, pivot, and right elements in order
end

# Function to handle the recursive step of quicksort algorithm
def quicksort(list) do
  if length(list) <= 1 do # check if the list is already sorted
    list # if so, just return the list
  else
    pivot = hd(list) # set the pivot as the first element in the list
    [left, pivot, right] = partition(pivot, list) # partition the list and get the left, pivot, and right elements
    quicksort(left) ++ quicksort(right) # recursively call quicksort on the left and right elements, then combine them with the pivot
  end
end

# Example list to test the quicksort function
list = [5, 1, 3, 8, 9, 2, 6]
# Output: [1, 2, 3, 5, 6, 8, 9]

# Call the quicksort function on the list
quicksort(list)
# Output: [1, 2, 3, 5, 6, 8, 9]

# Bonus Feature: Handle duplicate elements in the list
list = [5, 1, 3, 8, 9, 2, 6, 5]
# Output: [1, 2, 3, 5, 5, 6, 8, 9]

# Call the quicksort function on the list with duplicates
quicksort(list)
# Output: [1, 2, 3, 5, 5, 6, 8, 9]