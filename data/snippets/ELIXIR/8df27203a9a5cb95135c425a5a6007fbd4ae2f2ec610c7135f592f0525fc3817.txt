defmodule MyModule do
  # A comment
  @attr_one "value one"
  @attr_two "value two"
  
  def my_func(a, b) do
    # An if-else statement
    if a > b do
      IO.puts("a is greater than b")
    else
      IO.puts("b is greater than a")
    end
    
    # A case statement
    case {a, b} do
      {1, 2} ->
        # A list comprehension
        for num <- [1, 2, 3, 4], rem(num, a) == 0, do: num
      
      {3, 4} ->
        # A map with a function as a value
        %{"key" => fn x -> x * a end}
      
      _ ->
        # A nested function with pattern matching
        def on_unknown({a, b}) do
          a + b
        end
    end
    
    # A pipe operator with multiple transformations
    [1, 2, 3]
    |> Enum.map(fn x -> x + 1 end)
    |> Enum.filter(fn x -> rem(x, 2) == 0 end)
    |> Enum.reduce(0, fn x, acc -> acc + x end)
    
    # A recursive function
    def factorial(n) when n == 0 or n == 1 do
      1
    end
    
    def factorial(n) when n > 1 do
      n * factorial(n - 1)
    end
    
    # A module attribute with a function as a value
    @factorial fn(n) -> factorial(n) end
  end
end