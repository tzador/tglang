# Define a module `Calculator` with the `defmodule` keyword
defmodule Calculator do
  # Use the `@doc` module attribute to add documentation for the module
  @doc "This module provides basic math operations"

  # Define a function `add` with the `def` keyword
  # Add two numbers together with the `x` and `y` parameters
  # Use the `@spec` function attribute to add type specifications
  # Define the return type as an `integer`
  @spec add(x :: integer, y :: integer) :: integer
  def add(x, y) do
    # Use the `+` operator to add the two numbers
    x + y
  end

  # Define a function `multiply` with the `def` keyword
  # Multiply two numbers together with the `x` and `y` parameters
  # Use the `@spec` function attribute to add type specifications
  # Define the return type as a `float`
  @spec multiply(x :: number, y :: number) :: float
  def multiply(x, y) do
    # Use the `*` operator to multiply the two numbers
    x * y
  end
end

# Use the `Calculator` module to add and multiply numbers
# Call the `add` function with two integers and store the result in `add_result`
add_result = Calculator.add(5, 3)
# Call the `multiply` function with two floats and store the result in `multiply_result`
multiply_result = Calculator.multiply(2.5, 3.5)
# Print the results using the `IO.puts` function
IO.puts "5 + 3 = #{add_result}"
IO.puts "2.5 * 3.5 = #{multiply_result}"