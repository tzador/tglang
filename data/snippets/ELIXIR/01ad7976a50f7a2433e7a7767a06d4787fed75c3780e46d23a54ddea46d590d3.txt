defmodule MyEnum do
  # defines a module named MyEnum
  def reduce(enum, acc, func) do
    # defines a function named reduce with 3 parameters
    cond do
      # starts a conditional statement
      Enum.empty?(enum) ->
        # checks if the enum parameter is empty 
        acc # returns the accumulator if true
      true ->
        # if not empty, it executes the following code
        head = hd(enum) # assigns the first value in the enum to a variable named head
        tail = tl(enum) # assigns the remaining values to a variable named tail
        reduce(tail, func.(head, acc), func) # recursively calls reduce function on tail,
        # applies the given function on head and accumulator, and passes the function as a parameter
    end
  end
  
  def map(enum, func) do
    # defines a function named map with 2 parameters
    reduce(enum, [], fn(x, acc) -> [func.(x) | acc] end) # calls the reduce function with enum parameter,
    # an empty list as the accumulator and a function that applies the given function on each value in the enum and adds it to the accumulator 
  end
  
  def filter(enum, func) do
    # defines a function named filter with 2 parameters
    reduce(enum, [], fn(x, acc) -> if func.(x), do: [x | acc] end) # calls the reduce function with enum parameter,
    # an empty list as the accumulator and a function that checks if the given function returns true for each value in the enum and adds it to the accumulator if true 
  end
end