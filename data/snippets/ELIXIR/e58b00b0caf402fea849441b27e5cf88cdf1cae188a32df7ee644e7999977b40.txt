defmodule LinkedList do                            # Create a module named LinkedList
  defstruct value: nil, next: nil                  # Define the structure of the module
  @head nil                                       # Set the initial value of the head to nil
  def insert_first(list, value) do                # Create a function to insert a new value at the beginning of the list
    %LinkedList{value: value, next: list}         # Create a new linked list struct with the new value as the head and the old list as the next element
  end
  def insert_last(list, value) do                 # Create a function to insert a new value at the end of the list
    %LinkedList{value: value, next: nil}          # Create a new linked list struct with the new value as the head and null as the next element
    |> insert_last(list)                          # Call the insert_last function recursively to add the new value to the end of the list
  end

  defp insert_last(%LinkedList{next: nil}, value) do # Create a private function for inserting a value at the end of the list
    %LinkedList{next: %LinkedList{value: value, next: nil}} # Create a new linked list struct with the new value as the next element of the last element in the list
  end
  defp insert_last(%LinkedList{next: tail}, value) do # Create a private function for inserting a value at the end of the list
    %LinkedList{next: insert_last(tail, value)}     # Call the insert_last function recursively until we reach the end of the list
  end

  def delete_first(list) do                              # Create a function to delete the first element of the list
    %{list | next: list.next}                            # Set the next element of the original head as the new head
  end

  def delete_last(list) do                               # Create a function to delete the last element of the list
    %{list | next: delete_last_helper(list.next, list)}   # Call the delete_last_helper function to recursively find the last element of the list and set its next element to null
  end

  defp delete_last_helper(%LinkedList{next: nil}, _current) do # Create a private function for recursively finding the last element of the list
    nil                                                      # Set the next element of the last element to null
  end
  defp delete_last_helper(%LinkedList{next: tail}, current) do # Create a private function for recursively finding the last element of the list
    %{current | next: delete_last_helper(tail, current)}       # Set the next element of the second-to-last element to null
  end
 end