defmodule BankAccount do
  # Module that defines a bank account and its operations

  # Struct representation of a bank account
  @enforce_keys [:owner, :balance]
  defstruct [:owner, :balance]

  # Public function to create a new bank account
  # Params:
  # - owner: string representing the account owner's name
  # - starting_balance: float representing the initial balance, default to 0.0
  def new(owner, starting_balance \\ 0.0) do
    # Attributes:
    # - owner: string representing the account owner's name
    # - balance: float representing the current account balance
    %BankAccount{owner: owner, balance: starting_balance}
  end

  # Public function to deposit money into the account
  # Params:
  # - amount: float representing the amount to deposit
  # - account: struct representing the bank account
  # Return value:
  # - updated account struct with the new balance
  def deposit(amount, account) do
    # Check the account owner is authorized to perform the operation
    check_authorization(account.owner)

    # Update the balance by adding the deposit amount
    balance = account.balance + amount

    # Return the updated account struct
    %BankAccount{account | balance: balance}
  end

  # Public function to withdraw money from the account
  # Params:
  # - amount: float representing the amount to withdraw
  # - account: struct representing the bank account
  # Return value:
  # - updated account struct with the new balance
  def withdraw(amount, account) do
    # Check the account owner is authorized to perform the operation
    check_authorization(account.owner)

    # Check if the account has sufficient balance for the withdraw
    if account.balance >= amount do
      # Update the balance by subtracting the withdrawal amount
      balance = account.balance - amount

      # Return the updated account struct
      %BankAccount{account | balance: balance}
    else
      # If the account does not have sufficient balance, raise an error
      raise "Insufficient balance."
    end
  end

  # Private function to check the account owner's authorization
  # Params:
  # - owner: string representing the account owner's name
  # Side-effects:
  # - prints an error message if the account owner is not authorized
  defp check_authorization(owner) do
    # Authorized owners: "John Smith", "Jane Doe"
    authorized = ["John Smith", "Jane Doe"]

    # If the account owner is not in the authorized list, raise an error
    if owner not in authorized do
      # Print an error message
      IO.puts("Error: Not authorized to perform this operation.")
      # Raise an error
      raise "Authorization error."
    end
  end
end