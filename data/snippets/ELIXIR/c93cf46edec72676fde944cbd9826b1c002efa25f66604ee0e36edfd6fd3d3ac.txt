# An example of a complex function in Elixir

defmodule ExampleModule do
    # Defines a function with two parameters
    def complex_function(param1, param2) do
        # Calculates the sum of the two parameters
        sum = param1 + param2

        # Calculates the product of the two parameters
        product = param1 * param2

        # Uses pattern matching to check if the sum is greater than the product
        case sum > product do
            true -> IO.puts "The sum is greater than the product"
            false -> IO.puts "The sum is less than the product"
        end

        # Defines a list of tuples with the parameters and their respective values
        parameters = [{:param1, param1}, {:param2, param2}]
        
        # Prints out each tuple in a formatted way
        Enum.each(parameters, fn {parameter, value} ->
            IO.puts("#{parameter} = #{value}")
        end)

        # Calls a recursive helper function passing in the sum and product as parameters
        helper_function(sum, product)
    end

    # Recursive function that calculates the greatest common divisor of two numbers
    defp helper_function(number1, number2) when number2 == 0, do: number1
    defp helper_function(number1, number2) when number1 >= number2 do
        helper_function(number2, number1 % number2)
    end
    defp helper_function(number1, number2) when number2 > number1 do
        helper_function(number2 % number1, number1)
    end
end

# Example usage of the complex function
ExampleModule.complex_function(7, 21)

# Output:
# The sum is greater than the product
# param1 = 7
# param2 = 21