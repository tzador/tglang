defmodule MyModule do
  @decorator "This code is complex and long"
  @my_list [1, 2, 3, 4, 5]
  @my_map %{:key1 => "value1", :key2 => "value2", :key3 => "value3"}

  # Function that iterates through a list and maps each element to a new list based on the decorator
  def map_Function(list) do
    list
    |> Enum.map(fn(x) -> x * 2 end)
    |> decorate
  end

  # Private function that adds the decorator to each element of the list
  defp decorate(list) do
    Enum.map(list, fn(x) -> "#{x} #{@decorator}" end)
  end

  # Function that returns the sum of all the elements in a list
  def sum_Function(list) do
    Enum.reduce(list, 0, fn(x, acc) -> x + acc end)
  end

  # Function that returns a new map with only the keys that are included in the given list
  def filter_Function(keys) do
    for key <- keys, Map.has_key?(@my_map, key), into: %{} do
      {key, @my_map[key]}
    end
  end
end

IO.inspect(MyModule.map_Function(@my_list)) # Output: [2 This code is complex and long, 4 This code is complex and long, 6 This code is complex and long, 8 This code is complex and long, 10 This code is complex and long]
IO.inspect(MyModule.sum_Function(@my_list)) # Output: 15
IO.inspect(MyModule.filter_Function([:key1, :key3])) # Output: %{:key1 => "value1", :key3 => "value3"}