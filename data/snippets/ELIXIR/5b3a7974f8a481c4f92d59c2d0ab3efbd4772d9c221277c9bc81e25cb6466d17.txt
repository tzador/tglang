defmodule Bookstore do
  # module for managing books in the bookstore

  @books %{ # map of all books in the store
    "Hamlet": %{author: "William Shakespeare", year: 1609},
    "1984": %{author: "George Orwell", year: 1949},
    "To Kill a Mockingbird": %{author: "Harper Lee", year: 1960},
    "Pride and Prejudice": %{author: "Jane Austen", year: 1813}
  }

  # function for adding a new book to the store
  def add_book(title, author, year) do
    # check if book already exists in store
    if Map.has_key?(@books, title) do
      IO.puts "Book #{title} already exists in store."
    else
      # create a new map entry with given title as key
      @books = Map.put(@books, title, %{author: author, year: year})
      IO.puts "Added book #{title} to store."
    end
  end

  # function for removing a book from the store
  def remove_book(title) do
    # check if book exists in store
    if Map.has_key?(@books, title) do
      # remove book from map
      @books = Map.drop(@books, [title])
      IO.puts "Removed book #{title} from store."
    else
      IO.puts "Book #{title} does not exist in store."
    end
  end

  # function for updating the author of a book
  def update_author(title, new_author) do
    # check if book exists in store
    if Map.has_key?(@books, title) do
      # update author of book
      @books = Map.update!(@books, title, %{author: new_author})
      IO.puts "Updated author of #{title} to #{new_author}."
    else
      IO.puts "Book #{title} does not exist in store."
    end
  end

  # function for displaying all books in the store
  def display_books do
    # output all books in store
    Enum.each(@books, fn {title, book} ->
      IO.puts "#{title}: #{book.author}, #{book.year}"
    end)
  end
end

# add new book to the store
Bookstore.add_book("The Great Gatsby", "F. Scott Fitzgerald", 1925)

# remove book from the store
Bookstore.remove_book("Pride and Prejudice")

# update author of book in the store
Bookstore.update_author("1984", "George Orwell")

# display all books in the store
Bookstore.display_books()