defmodule Bank do
# Creates a module named 'Bank'

  def deposit(account, amount) do
  # Defines a function 'deposit' that takes in two parameters, 'account' and 'amount'
  
    new_balance = add(account.balance, amount)
    # Creates a new variable 'new_balance' and assigns it the value returned by the 'add' function, which adds the 'amount' to the current balance of the 'account'
    
    %Account{account | balance: new_balance}
    # Returns a new Account struct with the updated balance
  end

  defp add(x, y) do
  # Defines a private function 'add' that takes in two parameters, 'x' and 'y'
  
    x + y
    # Returns the sum of 'x' and 'y'
  end

  def withdraw(account, amount) do
  # Defines a function 'withdraw' that takes in two parameters, 'account' and 'amount'
  
    new_balance = subtract(account.balance, amount)
    # Creates a new variable 'new_balance' and assigns it the value returned by the 'subtract' function, which subtracts the 'amount' from the current balance of the 'account'
    
    %Account{account | balance: new_balance}
    # Returns a new Account struct with the updated balance
  end

# Private function 'subtract'
  defp subtract(x, y) do
  # Defines a private function 'subtract' that takes in two parameters, 'x' and 'y'
  
    x - y
    # Returns the difference of 'x' and 'y'
  end

  def transfer(from_account, to_account, amount) do
  # Defines a function 'transfer' that takes in three parameters, 'from_account', 'to_account', and 'amount'
  
    from_account = withdraw(from_account, amount)
    # Assigns the return value of the 'withdraw' function to the variable 'from_account'
    
    to_account = deposit(to_account, amount)
    # Assigns the return value of the 'deposit' function to the variable 'to_account'
    
    {:ok, %{from_account: from_account, to_account: to_account}}
    # Returns a tuple with the atom ':ok' and a map containing the updated 'from_account' and 'to_account'
  end
  
  # Creates a new struct named 'Account'
  defstruct [:balance]
end