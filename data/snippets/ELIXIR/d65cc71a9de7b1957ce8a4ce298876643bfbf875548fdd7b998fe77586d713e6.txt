# This function finds the nth number in the Fibonacci sequence using recursion
def fib(n) do
  case n do
    1 -> 1
    2 -> 1
    n -> fib(n-1) + fib(n-2)
  end
end

# This function calculates the factorial of a given number using tail recursion
def factorial(n) do
  if n == 1 do
    1
  else
    n * factorial(n-1)
  end
end

# This function returns true if the given string is a palindrome, otherwise returns false
def is_palindrome(string) do
  if string == "" || String.length(string) == 1 do
    true
  else
    string == String.reverse(string)
  end
end

# This function converts a list of integers to a string
def list_to_string(list) do
  Enum.reduce(list, "", fn number, string -> string <> Integer.to_string(number) end)
end

# This function sorts a list of integers in ascending order using the bubble sort algorithm
def bubble_sort(list) do
  if length(list) <= 1 do
    list
  else
    list
    |> Enum.map(fn number -> [number] end)
    |> bubble_sort_helper()
    |> List.flatten()
  end
end

# A helper function for bubble sort
def bubble_sort_helper(list) do
  Enum.reduce(list, [], fn sublist, result ->
    case sublist do
      [x] ->
        [x | result]
      [x, y | _] when x > y ->
        [y, x | result]
      [x, y | _] when x <= y ->
        bubble_sort_helper([x | List.delete(y, sublist) | _])
    end
  end)
end

# This function takes in a list of names and returns a list of their initials
def initials(names) do
  names
  |> Enum.map(fn name -> String.slice(name, 0, 1) end)
  |> Enum.join(".")
end

# This function calculates the sum of all numbers in a list using recursion
def sum(list) do
  case list do
    [] -> 0
    [x | tail] -> sum(tail) + x
  end
end

# This function takes in a list of tuples and returns a list of their first elements
def first_elements(list) do
  Enum.map(list, fn {a, _} -> a end)
end