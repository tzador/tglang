defmodule ProductCatalog do
  use GenServer
  
  def start_link(name) do
    GenServer.`start_link(__MODULE__, name, name: name)
  end

  # Function to add a new product to the catalog
  @doc """
  Adds a new product to the catalog.
  
  ## Examples
  
      iex> ProductCatalog.add_product(%{name: "Apple", price: 2.50})
      {:ok, %{name: "Apple", price: 2.50}}
      
      iex> ProductCatalog.add_product(%{name: "Banana", price: 1.50})
      {:ok, %{name: "Banana", price: 1.50}}
  """
  def add_product(product) do
    GenServer.call(__MODULE__, {:add_product, product})
  end

  # Function to update an existing product in the catalog
  @doc """
  Updates an existing product in the catalog.
  
  ## Examples
  
      iex> ProductCatalog.update_product(%{name: "Apple", price: 3.00})
      {:ok, %{name: "Apple", price: 3.00}}
  """
  def update_product(product) do
    GenServer.call(__MODULE__, {:update_product, product})
  end

  # Function to remove a product from the catalog
  @doc """
  Removes a product from the catalog.
  
  ## Examples
  
      iex> ProductCatalog.remove_product("Apple")
      :ok
  """
  def remove_product(name) do
    GenServer.call(__MODULE__, {:remove_product, name})
  end
  
  def init(name) do
    {:ok, %{}}
  end

  def handle_call({:add_product, product}, _from, catalog) do
    case Map.get(catalog, product[:name]) do
      nil ->
        {:reply, :ok, Map.put(catalog, product[:name], product)}
      _ ->
        {:reply, {:error, "Product already exists"}, catalog}
    end
  end

  def handle_call({:update_product, product}, _from, catalog) do
    case Map.get(catalog, product[:name]) do
      nil ->
        {:reply, {:error, "Product does not exist"}, catalog}
      _ ->
        {:reply, :ok, Map.put(catalog, product[:name], product)}
    end
  end

  def handle_call({:remove_product, name}, _from, catalog) do
    case Map.get(catalog, name) do
      nil ->
        {:reply, {:error, "Product does not exist"}, catalog}
      _ ->
        {:reply, :ok, Map.delete(catalog, name)}
    end
  end
end