defmodule User do
  #This is a module definition in Elixir
  use Ecto.Schema #This macro imports functionality from an external library
  alias Ecto.Changeset #This makes it easier to use the Changeset module

  schema "users" do
    #This is the name of the database table associated with this schema
    field :username, :string #This defines a field called "username" of type string
    field :age, :integer #This defines a field called "age" of type integer
    field :email, :string #This defines a field called "email" of type string
    field :password, :string #This defines a field called "password" of type string
  end

  @required_fields [:username, :age, :email, :password] #This defines a list of required fields for creating a new user

  @derive {Phoenix.Param, key: :username} #This automatically generates a parameter for identifying a user by their username

  def changeset(user, params \\ %{}) do
    #This function takes in a user and params and returns a changeset based on the schema defined above
    user
    #This marks the user as the struct we are modifying
    |> cast(params, @required_fields) #This casts the params to the required fields and returns a changeset with any errors
    |> validate_required(@required_fields) #This validates that the required fields are not empty
    |> unique_constraint(:username) #This ensures that the username is unique in the database
    |> validate_format(:email, ~r/@/) #This validates that the email is in the correct format
    |> validate_length(:password, min: 8) #This validates that the password is at least 8 characters long
  end
end