defmodule User do
  @moduledoc """
  This module represents a user in the system.
  """
  defstruct name: "John", age: 25, email: "example@example.com"

  def register_user(user) do
    """
    This function takes in a User struct and registers the user in the system.
    Args:
      user (struct): A User struct with name, age, and email keys.
    Returns:
      struct: The registered user with a unique id and registration date.
    """
    registered_user = %User{
      id: generate_id(),
      registered_date: Date.utc_today()
    } |> Map.merge(user)

    {:ok, registered_user}
  end

  defp generate_id do
    """
    This function generates a unique id for the user based on the current timestamp.
    Args:
      None
    Returns:
      string: A unique id for the user in the format "USER_<current_timestamp>"
    """
    "USER_#{DateTime.utc_now() |> Elem.time_to_microseconds()}"
  end
end

user = %User{name: "Lisa", age: 30, email: "lisa@example.com"}
registered_user = User.register_user(user)

IO.puts("Registered user: #{inspect registered_user}")
# Registered user: %User{id: "USER_1590719613778039", age: 30, email: "lisa@example.com", name: "Lisa", registered_date: ~U[2020-05-29 03:53:33.778039Z]}