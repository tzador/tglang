# This is a module that handles a graph data structure.
defmodule Graph do
  @moduledoc """
  This module provides functions for creating, modifying and querying a graph.
  For simplicity, this implementation only supports directed graphs.
  """

  @doc """
  Creates a new graph with the given nodes and edges.
  Each edge is represented as a tuple of the form {source, target}.
  """
  def create(nodes, edges) do
    Map.new(nodes, fn node ->
      {node, MapSet.new()}
    end)
    |> Enum.reduce(edges, fn {source, target}, graph ->
      add_edge(graph, source, target)
    end)
  end

  @doc """
  Adds an edge to an existing graph.
  """
  def add_edge(graph, source, target) do
    Map.update!(graph, source, fn _ ->
      MapSet.put_new(Map.get(graph, source), target)
    end)
  end

  @doc """
  Removes an edge from an existing graph.
  """
  def remove_edge(graph, source, target) do
    Map.update!(graph, source, fn edges ->
      MapSet.delete(edges, target)
    end)
  end

  @doc """
  Checks if an edge exists between two nodes in a graph.
  """
  def edge?(graph, source, target) do
    Map.get(graph, source)
    |> MapSet.member?(target)
  end

  @doc """
  Returns the number of nodes in a graph.
  """
  def num_nodes(graph) do
    Map.size(graph)
  end

  @doc """
  Returns the number of edges in a graph.
  """
  def num_edges(graph) do
    graph
    |> Enum.map(fn {_, edges} -> MapSet.size(edges) end)
    |> Enum.reduce(&(&1 + &2))
  end

  @doc """
  Returns a list of all nodes in a graph.
  """
  def nodes(graph) do
    Map.keys(graph)
  end

  @doc """
  Returns a list of all edges in a graph.
  Each edge is represented as a tuple of the form {source, target}.
  """
  def edges(graph) do
    graph
    |> Enum.flat_map(fn {source, edges} ->
      edges
      |> MapSet.to_list()
      |> Enum.map(fn target -> {source, target} end)
    end)
  end
end