defmodule ComplexMath do
  # Defines a module named "ComplexMath"

  @doc """
  Calculates the factorial of a given number.
  
  Examples:
    iex> ComplexMath.factorial(5)
    120
  
  """
  def factorial(n) do
    # Defines a function named "factorial" that takes in an argument "n"

    if n == 0 do
      # Checks if n is equal to 0
      1
      # Returns 1 if n is 0
    else
      # If n is not 0
      n * factorial(n-1)
    end
    # Recursively calls the factorial function with n-1 and multiplies it with n
  end

  @doc """
  Calculates the nth fibonacci number.
  
  Examples:
    iex> ComplexMath.fibonacci(5)
    5
    iex> ComplexMath.fibonacci(10)
    55
  """
  def fibonacci(0), do: 0
  # Defines a function named "fibonacci" that takes in argument 0 and returns 0

  def fibonacci(1), do: 1
  # Defines a function named "fibonacci" that takes in argument 1 and returns 1

  def fibonacci(n) do
    # Defines a function named "fibonacci" that takes in an argument "n"

    fibonacci(n-1) + fibonacci(n-2)
    # Recursively calls the fibonacci function with n-1 and n-2 and adds the results
  end
end

IO.puts(ComplexMath.factorial(10))
# Prints the factorial of 10, which is 3628800, using the ComplexMath module 
IO.puts(ComplexMath.fibonacci(10))
# Prints the 10th Fibonacci number, which is 55, using the ComplexMath module