defmodule Database do
  # create a struct to hold key-value pairs
  defstruct [:id, :key, :value]

  # define a function to retrieve a value
  def get_value(db, key) do
    # use pattern matching to match key-value pair
    # and return value if found
    [{^key, value}] = db
    value
  end

  # define a function to add a new key-value pair
  def add_value(db, key, value) do
    # add new pair to the beginning of the list
    [{key, value} | db]
  end

  # define a function to update an existing key-value pair
  def update_value(db, key, new_value) do
    # use pattern matching to match key-value pair
    [{^key, _} = key_value | tail] = db
    # replace the old key-value pair with the updated one
    [key_value | Map.put(tail, new_value)]
  end

  # define a function to remove a key-value pair
  def remove_value(db, key) do
    # use pattern matching to match key-value pair
    # and return tail of the list without the pair
    [{^key, _} | tail] = db
    tail
  end
end

# create a new database with some initial key-value pairs
db = [%Database{id: 1, key: "name", value: "John"},
      %Database{id: 2, key: "age", value: 25},
      %Database{id: 3, key: "location", value: "New York"}]

# get the value of "name" key from the database
name = Database.get_value(db, "name")
# update the value of "age" key to 30
db = Database.update_value(db, "age", 30)
# add a new key-value pair to the database
db = Database.add_value(db, "occupation", "programmer")
# remove the "location" key-value pair from the database
db = Database.remove_value(db, "location")