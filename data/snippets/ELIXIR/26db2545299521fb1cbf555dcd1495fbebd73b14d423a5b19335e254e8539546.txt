# Define a module
defmodule Calculator do
  # Define a function within the module
  def calculate(x, y, operation) do
    # Use a case statement to match the operation and return the corresponding result
    case operation do
      "+"
        x + y
      "-"
        x - y
      "*"
        x * y
      "^"
        x ^ y
      _ -> "Invalid operation"
    end
  end

  # Define a function within the module to calculate the factorial of a number
  def factorial(n) when n >= 0 do
    # Define an inner function to recursively calculate the factorial
    def factorial_helper(n, result) when n <= 1 do
      result
    end

    def factorial_helper(n, result) when n > 1 do
      factorial_helper(n-1, result*n)
    end

    # Call the inner function from the outer function
    factorial_helper(n, 1)
  end

  # Define a function within the module to calculate the nth Fibonacci number
  def fibonacci(n) when n >= 0 do
    # Define an inner function to recursively calculate the nth Fibonacci number
    def fibonacci_helper(n, first, second) when n == 0 do
      first
    end

    def fibonacci_helper(n, first, second) when n > 0 do
      fibonacci_helper(n-1, second, first+second)
    end

    # Call the inner function from the outer function
    fibonacci_helper(n, 0, 1)
  end
end

# Call the calculate function from the Calculator module with two numbers and an operation
Calculator.calculate(5, 3, "+")

# Call the factorial function from the Calculator module with a number
Calculator.factorial(5)

# Call the fibonacci function from the Calculator module with a number
Calculator.fibonacci(8)