# Define a module called "Calculator"
defmodule Calculator do  
  # Define a function that takes in two numbers as parameters
  def add(x, y) do
    # Add the two numbers together and print the result
    result = x + y
    IO.puts "The result is: #{result}"
  end

  # Define a function that takes in three numbers as parameters
  def multiply(x, y, z) do
    # Multiply the three numbers together and print the result
    result = x * y * z
    IO.puts "The result is: #{result}"
  end

  # Define a function that takes in a list of numbers as a parameter
  def get_average(numbers) do
    # Calculate the sum of all numbers in the list
    sum = Enum.sum(numbers)
    # Calculate the average by dividing the sum by the number of elements in the list
    average = sum / length(numbers)
    # Print the average
    IO.puts "The average is: #{average}"
  end
  
  # Define a function that takes in a list of strings as a parameter
  def concatenate(strings) do
    # Use the Enum.reduce function to concatenate all strings in the list
    result = Enum.reduce(strings, "", &(&1 <> &2))
    # Print the result
    IO.puts "The concatenated string is: #{result}"
  end

  # Define a function that takes in a map as a parameter
  def get_keys_and_values(map) do
    # Use the Map.keys function to get a list of all keys in the map
    keys = Map.keys(map)
    # Use the Map.values function to get a list of all values in the map
    values = Map.values(map)
    # Print the keys and values
    IO.puts "The keys are: #{keys}"
    IO.puts "The values are: #{values}"
  end
end

# Create an instance of the Calculator module
calculator = Calculator.new

# Call the add function with two parameters
Calculator.add(5, 10)

# Call the multiply function with three parameters
Calculator.multiply(2, 3, 4)

# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Call the get_average function with the list of numbers
Calculator.get_average(numbers)

# Create a list of strings
strings = ["Hello", "World", "!"]

# Call the concatenate function with the list of strings
Calculator.concatenate(strings)

# Create a map with key-value pairs
map = %{"name" => "John", "age" => 25, "country" => "USA"}

# Call the get_keys_and_values function with the map
Calculator.get_keys_and_values(map)