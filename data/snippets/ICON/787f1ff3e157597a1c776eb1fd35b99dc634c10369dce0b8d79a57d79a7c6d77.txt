procedure mergeSort(in out a, left, right)
   if left >= right
       return          ; array is sorted if it only contains one element
   end if

   mid := (left+right)/2        ; find the middle point
   call mergeSort(a, left, mid)
   call mergeSort(a, mid+1, right) ; recursively call mergeSort() on left and right subarrays
   call merge(a, left, mid, right) ; merge the two subarrays

procedure merge(in out a, left, mid, right)
    var n, m: integer
    n := mid - left + 1     ; length of left subarray
    m := right - mid     ; length of right subarray

    var l[n], r[m]        ; create temporary subarrays
    for i := 0 to n-1
        l[i] := a[left+i]
    end for
    for j := 0 to m-1
        r[j] := a[mid+1+j]
    end for

    var i, j, k: integer
    i := 0
    j := 0
    k := left            ; starting index of merged subarray
    while i < n and j < m do        ; merge the two subarrays in sorted order
        if l[i] <= r[j]
            a[k] := l[i]
            i := i + 1
        else
            a[k] := r[j]
            j := j + 1
        end if
        k := k + 1
    end while

    while i < n do            ; copy remaining elements from left subarray
        a[k] := l[i]
        i = i + 1
        k = k + 1
    end while

    while j < m do            ; copy remaining elements from right subarray
        a[k] := r[j]
        j = j + 1
        k = k + 1
    end while
end procedure