/* A complex algorithm for finding the shortest path between two points in a graph */

procedure shortest_path (start_node, end_node)
local i,j,k: integer;

/* Initialize distance and path matrix */
local distance_matrix: array[] of integer;
local path_matrix : array [] of integer;

/* Initialize all values in matrices to 'infinity' except for starting node */
for(i:= 1 to graph_size)
    for(j:= 1 to graph_size)
        distance_matrix[i][j] := infinity;
        if(i == start_node)
            distance_matrix[i][i] := 0;
        end

/*Floyd-Warshall Algorithm for finding shortest path */
for(k:= 1 to graph_size)
    for(i:= 1 to graph_size)
        for(j:= 1 to graph_size)
            if(distance_matrix[i][k]+distance_matrix[k][j] < distance_matrix[i][j])
                distance_matrix[i][j] := distance_matrix[i][k]+distance_matrix[k][j];
                path_matrix[i][j] := k;

/*Function to print shortest path (if exists) and its distance */
procedure print_shortest_path(node1, node2)
local path: string;
local temp: integer := end_node;

if (path_matrix[node1][node2] == 0)
    path := "No path exists";
else
    /*Reconstructing path using path matrix */
    path := node1 + " ";
    while(path_matrix[node1][node2] != node2)
        path := path + path_matrix[node1][node2] + " ";
        node1 := path_matrix[node1][node2];
        temp := path_matrix[node1][node2];
    end
    path := path + temp + " " + node2;

/*Print the path and distance */
print("Shortest path from " + node1 + " to " + node2 + " : " + path);
if(distance_matrix[node1][node2] == infinity)
    print("Distance: No path exists");
else
    print("Distance: " + distance_matrix[node1][node2]);

/*Example usage*/
procedure main()
    shortest_path(1,5); /*Finds shortest path from node 1 to 5 */