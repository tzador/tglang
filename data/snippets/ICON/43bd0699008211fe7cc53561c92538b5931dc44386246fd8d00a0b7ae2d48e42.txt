procedure INSERT(VAL x:ss_symbol);
forward;
procedure SEARCH(nn:ss_symbol):ss_bool;
forward;
procedure INSERT(VAL x:ss_symbol);
begin
	if SEARCH(x) then return; \\ Check if symbol already exists
	if ss_root = null then \\ Check if tree is empty
	begin
		ss_root := new ss_node; \\ Initialize root node
		ss_root^.item := x; \\ Set root item to x
		ss_root^.left := null; \\ Initialize left child
		ss_root^.right := null; \\ Initialize right child
	end else
	begin
		new := new ss_node; \\ Create new node
		new^.item := x; \\ Set new item to x
		new^.left := null; \\ Initialize left child
		new^.right := null; \\ Initialize right child
		current := ss_root; \\ Start at root node
		while true do \\ Loop until insert position is found
		begin
			if x < current^.item then \\ Check if x is less than current item
			begin
				if current^.left = null then \\ Check if left child is empty
				begin
					current^.left := new; \\ Insert new node as left child
					break; \\ Break out of loop
				end else begin
					current := current^.left; \\ Continue down left subtree
				end
			end else begin
				if current^.right = null then \\ Check if right child is empty
				begin
					current^.right := new; \\ Insert new node as right child
					break; \\ Break out of loop
				end else begin
					current := current^.right; \\ Continue down right subtree
				end
			end
		end
	end
end;
procedure SEARCH(nn:ss_symbol):ss_bool;
begin
	current := ss_root; \\ Start at root node
	while current <> null do \\ Loop until end of tree is reached
	begin
		if current^.item = n then \\ Check if current item is equal to n
		begin
			return true; \\ Symbol exists in tree
		end else if n < current^.item then \\ Check if n is less than current item
		begin
			current := current^.left; \\ Continue down left subtree
		end else begin
			current := current^.right; \\ Continue down right subtree
		end
	end
	return false; \\ Symbol does not exist in tree
end;