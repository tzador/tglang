procedure slow_quicksort (a)                  # Procedure definition for slow version of quicksort algorithm 
local l, p, r, i, j: integer;                 # Declare local variables to store indices and values
if l < r then                                 # Check if left index is smaller than right index
      p := a[(l + r) // 2]                     # Pick pivot element as median value of left and right indices
      i := l                                  # Set counter i to left index
      j := r                                  # Set counter j to right index
      while i <= j do                          # Loop while left index is smaller than or equal to right index
            while a[i] < p do                  # Loop while element at left index is smaller than pivot element
                  i := i + 1                   # Increment left index by 1
            end while
            while a[j] > p do                  # Loop while element at right index is larger than pivot element
                  j := j - 1                   # Decrement right index by 1
            end while
            if i <= j then                     # If left index is still smaller than or equal to right index
                  swap (a[i], a[j])            # Swap elements at left and right indices
                  i := i + 1                   # Increment left index by 1
                  j := j - 1                   # Decrement right index by 1
            end if
      end while
      slow_quicksort(a, l, j);                 # Recursive call on left subarray from left index to right index
      slow_quicksort(a, j + 1, r);             # Recursive call on right subarray from left index to right index
end if
end procedure