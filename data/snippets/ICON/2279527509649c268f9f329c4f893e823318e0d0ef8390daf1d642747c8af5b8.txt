procedure main()

;; This is a comment in ICON, preceded by two semicolons

;; Creating a variable and assigning a value to it.
;; Variables in ICON are declared using the keyword `global`.
global x = 10

;; Printing the value of the variable `x`.
;; The keyword `write` is used to output to the standard output.
write(x)

;; Defining a function that calculates the factorial of a given number.
;; ICON uses the keyword `procedure` to declare functions.
;; The function name followed by parentheses and arguments is used to define the function header.
;; Curly braces are used to enclose the function body.
procedure factorial(n)
{
    ;; Initializing the variable `result` with a value of 1.
    global result = 1

    ;; A `while` loop in ICON is similar to other programming languages.
    ;; The keyword `step` is used to define the end condition of the loop.
    while (n step >= 1) do
    {
        ;; Multiplying the current value of `result` with `n` and storing the result in `result`.
        result := result * n

        ;; Decrementing `n` by 1 in every iteration.
        n := n - 1
    }

    ;; Returning the calculated factorial value.
    return result
}

;; Calling the function `factorial` with an argument of 5 and storing the returned value in `result`.
global result := factorial(5)

;; Printing the calculated factorial value.
write(result)

end