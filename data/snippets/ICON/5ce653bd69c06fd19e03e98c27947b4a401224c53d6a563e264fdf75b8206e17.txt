procedure encrypt(input, output)
 # generate key using random permutation
 key := generate_key(input)

 # initialize output with input
 output := input

 # apply encryption algorithm 
 for i in 1 to length(key) do
   output := apply_cipher(output, key[i])
 endfor

 return output
end

procedure decrypt(input, output)
 # generate key using random permutation
 key := generate_key(input)

 # initialize output with input
 output := input

 # apply decryption algorithm
 for i in length(key) downto 1 do
   output := reverse_cipher(output, key[i])
 endfor

 return output
end

procedure generate_key(input)
 # initialize key array
 key := []

 # fill key array with unique numbers between 1 and length
 for i in 1 to length(input) do
   # generate random number between 1 and length
   rand_num := random(1, length(input))

   # ensure uniqueness in key array
   while rand_num in key do
     rand_num := random(1, length(input))
   endwhile
   
   # add number to key array
   key[i] := rand_num
 endfor

 return key
end

procedure apply_cipher(input, key)
 # initialize ciphered array
 ciphered := []

 # split input into chunks based on key length
 chunks := split_input(input, length(key))

 # apply cipher on each chunk
 for i in 1 to length(chunks) do
   # get chunk and corresponding key value
   chunk := chunks[i]
   key_val := key[i]

   # apply 'xor' operation on chunk and key value
   ciphered_chunk := chunk ^ key_val

   # add ciphered chunk to ciphered array
   ciphered[i] := ciphered_chunk
 endfor

 # join ciphered array into one string
 output := join_ciphers(ciphered)

 return output
end

procedure reverse_cipher(input, key)
 # initialize deciphered array
 deciphered := []

 # split input into chunks based on key length
 chunks := split_input(input, length(key))

 # apply reverse cipher on each chunk
 for i in 1 to length(chunks) do
   # get chunk and corresponding key value
   chunk := chunks[i]
   key_val := key[i]

   # apply 'xor' operation on chunk and key value
   deciphered_chunk := chunk ^ key_val

   # add deciphered chunk to deciphered array
   deciphered[i] := deciphered_chunk
 endfor

 # join deciphered array into one string
 output := join_deciphers(deciphered)

 return output
end

procedure split_input(input, chunk_size)
 # initialize chunks array
 chunks := []

 # loop through input and split into chunks
 for i in 1 to length(input) by chunk_size do
   # get chunk of input based on chunk size
   chunk := substring(input, i, i + chunk_size - 1)

   # add chunk to chunks array
   chunks[i] := chunk
 endfor

 return chunks
end

procedure join_ciphers(ciphered)
 # initialize output string
 output := ""

 # loop through ciphered chunks and concatenate into string
 for i in 1 to length(ciphered) do
   ciphered_chunk := ciphered[i]

   # convert ciphered chunk to hex value
   hex_value := to_hex(ciphered_chunk)

   # add hex value to output string
   output := output || hex_value
 endfor

 return output
end

procedure join_deciphers(deciphered)
 # initialize output string
 output := ""

 # loop through deciphered chunks and concatenate into string
 for i in 1 to length(deciphered) do
   deciphered_chunk := deciphered[i]

   # convert deciphered chunk to corresponding ASCII character
   ascii_val := to_ascii(deciphered_chunk)

   # add ASCII character to output string
   output := output || ascii_val
 endfor

 return output
end

procedure to_hex(input)
 # convert input to corresponding hex value
 hex_value := map(input, mapping_table)

 return hex_value
end

procedure to_ascii(input)
 # convert input to corresponding ASCII character
 ascii_val := map(input, inverse_mapping_table)

 return ascii_val
end

procedure map(input, mapping_table)
 # initialize mapped array
 mapped := []

 # loop through input and apply mapping
 for i in 1 to length(input) do
   # get corresponding value from mapping table
   mapped_val := mapping_table[input[i]]

   # add mapped value to mapped array
   mapped[i] := mapped_val
 endfor

 # join mapped array into one string
 output := join_mapped(mapped)

 return output
end

procedure join_mapped(mapped)
 # initialize output string
 output := ""

 # loop through mapped values and concatenate into string
 for i in 1 to length(mapped) do
   mapped_val := mapped[i]

   # add mapped value to output string
   output := output || mapped_val
 endfor

 return output
end

procedure init_mapping_table()
 # initialize mapping table with unique values
 mapping_table := {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't'}

 return mapping_table
end

procedure init_inverse_mapping_table()
 # initialize inverse mapping table with corresponding values
 inverse_mapping_table := {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20}

 return inverse_mapping_table
end

# initialize mapping tables
mapping_table := init_mapping_table()
inverse_mapping_table := init_inverse_mapping_table()

# get input from user
print("Enter message to be encrypted:")
input := read(input)

# encrypt message
encrypted := encrypt(input, output)

# print encrypted message
print("Encrypted message:")
print(encrypted)

# decrypt message
decrypted := decrypt(encrypted, output)

# print decrypted message
print("Decrypted message:")
print(decrypted)