procedure merge_sort(unsorted_array)
  # Checks if array is already sorted
  if unsorted_array.length <= 1
    return unsorted_array
  # Divides the array into two halves
  middle_index = unsorted_array.length / 2
  left_side = unsorted_array[0...middle_index]
  right_side = unsorted_array[middle_index..-1]
  # Recursive call to divide and sort left and right halves
  sorted_left = merge_sort(left_side)
  sorted_right = merge_sort(right_side)
  # Initialize variables for merging
  result = [] # empty array to store sorted elements
  left_index = 0 # keeps track of left side position
  right_index = 0 # keeps track of right side position
  # Merge sorted halves into one array
  while left_index < sorted_left.length && right_index < sorted_right.length
    if sorted_left[left_index] < sorted_right[right_index]
      result.push(sorted_left[left_index])
      left_index += 1
    else
      result.push(sorted_right[right_index])
      right_index += 1
    end
  end
  # If any elements are left in left side, push to result array
  while left_index < sorted_left.length
    result.push(sorted_left[left_index])
    left_index += 1
  end
  # If any elements are left in right side, push to result array
  while right_index < sorted_right.length
    result.push(sorted_right[right_index])
    right_index += 1
  end
  return result
end

# Set unsorted array
unsorted_array = [5, 2, 8, 1, 3, 9, 4, 6, 7, 10]
# Output sorted array using merge sort algorithm
sorted_array = merge_sort(unsorted_array)