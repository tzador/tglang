procedure mergeSort(list, low, high)
  # Split the array into two subarrays
  mid = low + (high - low) / 2
  arr1 = list[low:mid]
  arr2 = list[mid:high]
  # Recursive calls to mergeSort for both subarrays
  mergeSort(arr1, low, mid)
  mergeSort(arr2, mid, high)
  # Merge the two subarrays
  i = 0
  j = 0
  k = low
  while i < length(arr1) and j < length(arr2)
    if arr1[i] < arr2[j]
      list[k] = arr1[i]
      i = i + 1
    else
      list[k] = arr2[j]
      j = j + 1
    end if
    k = k + 1
  end while
  # Check if there are any remaining elements in arr1
  while i < length(arr1)
    list[k] = arr1[i]
    i = i + 1
    k = k + 1
  end while
  # Check if there are any remaining elements in arr2
  while j < length(arr2)
    list[k] = arr2[j]
    j = j + 1
    k = k + 1
  end while
end procedure

# Example of calling the mergeSort procedure
numList = [4, 8, 2, 5, 9, 3, 1, 6, 7]
mergeSort(numList, 0, length(numList))
# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]