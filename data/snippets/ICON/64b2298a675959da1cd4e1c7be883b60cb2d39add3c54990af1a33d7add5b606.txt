/*
 * Simple program to find the longest substring without repeating
 * characters
 *
 * Algorithm:
 * 1. Initialize start index as 0
 * 2. Initialize end index as -1
 * 3. Initialize a character array to store the characters in the substring
 * 4. Initialize a max_length variable to store the length of the longest substring
 * 5. Loop through each character in the input string
 * 6. If character is not present in the character array or it is present but not in the current 
 * substring, add it to the character array and update end index and max_length
 * 7. If character is present in the current substring, update start index to the index of the 
 * previous occurrence of this character + 1 and update max_length if necessary
*/

find_longest_substring(string input)
{
    // Initialize start index as 0
    int start_index = 0;

    // Initialize end index as -1
    int end_index = -1;

    // Initialize character array to store characters in substring
    char[] chars = [];

    // Initialize max_length variable
    int max_length = 0;

    // Loop through each character in input string
    for(i = 0; i < input.length; i++){

        // Check if character is in character array or is present in substring
        if(input.charAt(i) in chars){

            // Update start index to previous occurrence of character + 1
            start_index = chars.indexOf(input.charAt(i)) + 1;
        }

        // Update end index and max_length
        end_index = i;
        max_length = end_index - start_index + 1;

        // Add current character to character array
        chars.add(input.charAt(i));
    }

    // Print the longest substring
    print("Longest substring without repeating characters is: " + input.substring(start_index, end_index + 1));
}

// Example input
string input = "programminglanguages";

// Call function
find_longest_substring(input);