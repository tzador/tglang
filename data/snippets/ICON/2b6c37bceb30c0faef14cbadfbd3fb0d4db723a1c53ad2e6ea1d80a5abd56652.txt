procedure sort(array, low, high) { //create a procedure to sort an array
let i, j, temp //declare variables i, j, and temp
i := low //set i to the lowest index of the array
j := high //set j to the highest index of the array
pivot := array[low + (high - low) / 2] //calculate pivot point at the center of the array
/* partition the array based on pivot */
while i <= j do { //begin while loop while i is less than or equal to j
    while array[i] < pivot do { //begin inner while loop while element at i is less than pivot
        i := i + 1 //increment i
    }
    while array[j] > pivot do { //begin inner while loop while element at j is greater than pivot
        j := j - 1 //decrement j
    }
    if i <= j then { //if i is still less than or equal to j
        temp := array[i] //swap elements at i and j
        array[i] := array[j]
        array[j] := temp
        i := i + 1 //increment i
        j := j - 1 //decrement j
    }
}
/* recursively sort the left and right subarrays */
if low < j then { //if low index is still less than j
    sort(array, low, j) //recursively call sort on left subarray
}
if i < high then { //if high index is still greater than i
    sort(array, i, high) //recursively call sort on right subarray
}
}