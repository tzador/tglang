procedure quicksort(A, l, r)

    # Check if starting index is less than ending index
    if l < r then
        # Set pivot index to partition array
        pivotIndex := partition(A, l, r)

        # Recursively call quicksort for left subarray
        quicksort(A, l, pivotIndex - 1)
        # Recursively call quicksort for right subarray
        quicksort(A, pivotIndex + 1, r)
    end

end

procedure partition(A, l, r)

    # Set pivot element as last element in subarray
    pivot := A[r]

    # Set left index to starting index
    left := l
    # Set right index to last index in subarray
    right := r - 1

    # Loop until left and right indexes meet
    while left <= right do
        # Find element on left that should be on right
        while left <= right and A[left] < pivot do
            left := left + 1
        end

        # Find element on right that should be on left
        while left <= right and A[right] > pivot do
            right := right - 1
        end

        # Check if indexes have not crossed
        if left <= right then
            # Swap elements at left and right indexes
            swap(A[left], A[right])
            # Increment/decrement indexes
            left := left + 1
            right := right - 1
        end

    end

    # Swap pivot element with element at left index
    swap(A[left], A[r])

    # Return index of pivot element
    return left

end

# Example usage
A := [5, 2, 10, 3, 8]
quicksort(A, 0, length(A) - 1)

# Output: A = [2, 3, 5, 8, 10]