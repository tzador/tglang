Procedure "Sum_Two_Numbers"(a, b)   # Procedure for summing two numbers
    Sum_Nums = a + b   # Assigning the sum of a and b to variable Sum_Nums
    Return(Sum_Nums)   # Returning the value of Sum_Nums
End    # End of procedure

Procedure "Factorial"(n)   # Procedure for calculating factorial of a number
    If n = 0 then        # Checking if n is equal to 0
        Return(1)        # If true, return 1 as factorial of 0 is 1
    End
    Factorial = 1        # Initializing the variable Factorial with value 1
    While n > 0 do       # Loop continues till n is greater than 0
        Factorial = Factorial * n   # Calculating factorial
        n = n - 1                    # Decrementing n by 1
    End
    Return(Factorial)   # Returning the calculated factorial of input number
End    # End of procedure

Procedure "Merge_Sort"(arr)   # Procedure for implementing Merge Sort algorithm
    If Length(arr) = 1 then   # Checking if the array has only one element
        Return(arr)           # If true, return the array as it is already sorted
    End
    mid = Length(arr) / 2   # Calculating mid point of the array
    left = arr[1:mid]   # Dividing the array into two sub-arrays
    right = arr[mid+1:Length(arr)]   # Using slice operator to get elements from mid+1 till end
    left = Merge_Sort(left)   # Recursively calling Merge_Sort on left sub-array
    right = Merge_Sort(right)   # Recursively calling Merge_Sort on right sub-array
    sorted_arr = Merge(left, right)   # Calling another procedure Merge to merge the sorted sub-arrays
    Return(sorted_arr)   # Returning the final sorted array
End   # End of procedure

Procedure "Merge"(left, right)   # Procedure for merging two sub-arrays in Merge Sort
    merged_arr = []   # Initializing an empty array to store the merged array
    while Length(left) > 0 and Length(right) > 0 do   # Loop continues till either sub-array is empty
        if left[1] <= right[1] then      # Comparing the first elements of both sub-arrays
            Append(merged_arr, left[1])   # Appending the smaller element to the merged array
            left = left[2:Length(left)]   # Removing the first element from left sub-array
        else
            Append(merged_arr, right[1])   # Appending the smaller element to the merged array
            right = right[2:Length(right)]   # Removing the first element from right sub-array
        End
    End
    if Length(left) > 0 then   # Checking if any elements are remaining in left sub-array
        Append(merged_arr, left)   # Appending the remaining elements to the merged array
    else
        Append(merged_arr, right)   # Appending the remaining elements to the merged array
    End
    Return(merged_arr)   # Returning the final merged array
End   # End of procedure

Output = "Welcome to the program!"   # Assigning a welcome message to the variable Output

# Calling the procedures and printing the results
Print("Enter two numbers to find their sum:")
num1 = Input()   # Taking input from user
num2 = Input()
Print("The sum of", num1, "and", num2, "is:", Sum_Two_Numbers(num1, num2))
Print("Enter a number to find its factorial:")
n = Input()
Print("The factorial of", n, "is:", Factorial(n))
Print("Enter an array of numbers to be sorted:")
arr = Input()
Print("The sorted array is:", Merge_Sort(arr))
Print(Output)   # Printing the welcome message