\\ This code snippet is a basic implementation of Dijkstra's algorithm in ICON language.
\\ It takes in a graph, represented as an undirected matrix, and finds the shortest path from a starting node to an end node.
procedure main()
 
    \\ define the graph as an undirected matrix
    let G := [[0, 10, 5, 0],
             [10, 0, 2, 1],
             [5, 2, 0, 4],
             [0, 1, 4, 0]]
    
    \\ set the starting and end nodes
    let start := 1
    let end := 4

    \\ initialize the distance array to store the shortest distance from starting node to each node
    let distance[1..4] := [∞, ∞, ∞, ∞]

    \\ create a list to keep track of visited nodes
    let visited := []

    \\ set the distance of starting node to 0
    distance[start] := 0 

    while visited != [end] do

        \\ find the node with the shortest distance from starting node
        let smallest := findSmallest(distance)

        \\ add the current node to the list of visited nodes
        visited := visited || [smallest]

        \\ for each neighbor of current node
        for i in 1..4 do
            if G[smallest][i] > 0 then

                \\ calculate the total distance from starting node to neighbor through current node
                let total_dist := distance[smallest] + G[smallest][i]

                \\ if the total distance is smaller than the current distance, update the distance
                if total_dist < distance[i] then
                    distance[i] := total_dist
    
    \\ print the shortest distance from starting node to end node
    write("The shortest distance from node ", start, " to node ", end, " is ", distance[end])
end

procedure findSmallest(distance)
    \\ initialize smallest distance to infinity
    let smallest := ∞
    
    for i in 1..4 do
        if distance[i] < smallest then
            smallest := i
    
    return smallest
end