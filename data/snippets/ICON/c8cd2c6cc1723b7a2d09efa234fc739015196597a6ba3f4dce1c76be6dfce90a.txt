> procedure SORT(A, N) ## Creates a procedure named SORT that takes in an array A and size N.
<number> = 1 ## Initialize a variable to 1 for the outer loop.
<offset> = N - 1 ## Initialize a variable to the size of the array minus 1 for the inner loop.

if (<number> < N) then ## Checks if the outer loop index is less than the size of the array.
    <number> = <number> + 1 ## Increments the outer loop index by 1.
    if (<offset> >= 1) then ## Checks if the inner loop offset is greater than or equal to 1.
        <NEAR> := <offset> ## Initializes a variable named NEAR to the inner loop offset.
        <LOOP> while (<NEAR> >= 1) do ## Enters a loop while the inner loop offset is greater than or equal to 1.
             while ((NEAR >= 1) & (A[NEAR] > A[NEAR+1])) do ## Enters a loop while the inner loop offset is greater than or equal to 1 and the current array element is greater than the next one.
                  <temp> := A[NEAR] ## Initializes a variable named temp to store the current array element.
                  A[NEAR] := A[NEAR+1] ## Swaps the current array element with the next one.
                  A[NEAR+1] := <temp> ## Stores the temporarily saved array element in the next index.
                  NEAR := NEAR - 1 ## Decrements the inner loop offset by 1.
        <offset> := (<NEAR> + 1) ## Sets the inner loop offset to the current value of NEAR plus 1.
    call SORTNAMESPACE(<offset>) ## Calls the procedure SORTNAMESPACE with the inner loop offset value.
        goto next of SORT
done.