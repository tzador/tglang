/* Multiprocessing using semaphores */
15a9946205c
$SYSTEM
BEGIN:
    COUNT := 1         # initialize COUNT to 1
    SEMAPHORE_1 := 0   # initialize semaphore to 0
    SEMAPHORE_2 := 1   # initialize semaphore to 1
    SEMAPHORE_3 := 1   # initialize semaphore to 1
    DO WHILE COUNT <= 5
        TASK("Process_A")    # spawn process A
        TASK("Process_B")    # spawn process B
        TASK("Process_C")    # spawn process C
        TASK("Process_D")    # spawn process D
    END
    SYNTAX(1, COUNT, 15)    #pass semaphore value and MAX_COUNT value
TASK("Process_A"):
        WHILE COUNT <= MAX_COUNT
            WAIT(SEMAPHORE_1)    # wait if semaphore is 0, otherwise continue
            DISPLAY("Process A") # print process name
            COUNT := COUNT + 1   # increment COUNT
            WAIT(SEMAPHORE_2)    # wait if semaphore is 0, otherwise continue
            SIGNAL(SEMAPHORE_3)  # release semaphore for next process
        END
        STOP
TASK("Process_B"):
        WHILE COUNT <= MAX_COUNT
            WAIT(SEMAPHORE_2)    # wait if semaphore is 0, otherwise continue
            DISPLAY("Process B") # print process name
            COUNT := COUNT + 1   # increment COUNT
            WAIT(SEMAPHORE_3)    # wait if semaphore is 0, otherwise continue
            SIGNAL(SEMAPHORE_1)  # release semaphore for next process
        END
        STOP
TASK("Process_C"):
        WHILE COUNT <= MAX_COUNT
            WAIT(SEMAPHORE_3)    # wait if semaphore is 0, otherwise continue
            DISPLAY("Process C") # print process name
            COUNT := COUNT + 1   # increment COUNT
            WAIT(SEMAPHORE_1)    # wait if semaphore is 0, otherwise continue
            SIGNAL(SEMAPHORE_2)  # release semaphore for next process
        END
        STOP
TASK("Process_D"):
        WHILE COUNT <= MAX_COUNT
            WAIT(SEMAPHORE_1)    # wait if semaphore is 0, otherwise continue
            DISPLAY("Process D") # print process name
            COUNT := COUNT + 1   # increment COUNT
            WAIT(SEMAPHORE_2)    # wait if semaphore is 0, otherwise continue
            SIGNAL(SEMAPHORE_3)  # release semaphore for next process
        END
        STOP
END