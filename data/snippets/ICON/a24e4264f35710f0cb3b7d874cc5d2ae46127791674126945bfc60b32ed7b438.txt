' *** recursive binary search ***
procedure search(lst, key)
    if lst = [] then
        return -1
    else
        low := 0
        high := #lst - 1
        repeat
            mid := (low + high)/2
            if lst[mid] = key then
                return mid
            elsif lst[mid] > key then
                high := mid - 1
            else
                low := mid + 1
        loop while low <= high
        return -1
end

'
 
Explanation:
This code snippet is a recursive binary search algorithm, written in the programming language ICON. It begins by defining a procedure named 'search' which takes in two arguments, a list 'lst' and a key to search for. 
The first if statement checks if the list is empty, in which case it returns -1 to indicate that the key was not found. 
If the list is not empty, the algorithm begins by setting two variables, 'low' and 'high' to the first and last indices of the list, respectively.
It then enters a loop where it calculates the middle index of the list and compares the value at that index to the key. 
If they are equal, the index is returned as the result. 
If the value at the middle index is greater than the key, the high variable is updated to be one index lower than the mid. If the value at the middle index is less than the key, the low variable is updated to be one index higher than the mid. 
This loop continues until either the key is found or the low index becomes greater than the high index. 
If the key is not found, the procedure returns -1. 
The algorithm uses recursion by calling itself within the loop until the key is either found or the list is exhausted, in which case the initial constant -1 is returned.