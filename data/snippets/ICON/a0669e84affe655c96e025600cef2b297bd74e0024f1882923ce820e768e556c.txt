/* This code snippet generates a Mandelbrot set image in ICON */
/* Define function to calculate Mandelbrot set */
procedure mandelbrot_set(x, y, max_iter, conv_radius)
    /* initialize variables */
    z_re = 0.0
    z_im = 0.0
    c_re = x
    c_im = y
    iter = 0
    
    while (iter < max_iter) do {
        /* calculate complex numbers using recursive formula */
        z_re_next = z_re^2 - z_im^2 + c_re
        z_im_next = 2 * z_re * z_im + c_im
        
        /* update current value of z */
        z_re = z_re_next
        z_im = z_im_next
        
        /* check for convergence */
        if (sqrt(z_re^2 + z_im^2) > conv_radius)
            break
        
        /* increment iteration count */
        iter = iter + 1
    }
    
    /* return iteration count */
    return iter
end

/* Define function to calculate pixel color based on Mandelbrot set output */
procedure mandelbrot_color(iter, max_iter)
    /* calculate hue value based on iteration count */
    hue = iter * 360 / max_iter
    
    /* calculate brightness and saturation values based on iteration count */
    brightness = sqrt(iter) / sqrt(max_iter)
    saturation = iter / max_iter
    
    /* return RGB color values */
    return hsv_to_rgb(hue, saturation, brightness)
end

/* Set image size and resolution */
image_width = 1000
image_height = 1000
resolution = 0.01

/* Initialize image array */
image = empty array of size (image_width, image_height)

/* Loop through all pixels and calculate Mandelbrot set output and color */
for x = 1 to image_width do {
    for y = 1 to image_height do {
        /* calculate complex coordinate for current pixel */
        c_re = -2.5 + (x - 1) * resolution
        c_im = 1.5 - (y - 1) * resolution
        
        /* call mandelbrot_set function to calculate iteration count */
        iter = mandelbrot_set(c_re, c_im, 100, 2)
        
        /* call mandelbrot_color function to calculate RGB color values */
        color = mandelbrot_color(iter, 100)
        
        /* set pixel color in image array */
        image[x, y] = color
    }
}

/* Output image as PPM format */
print("P3")  /* PPM format header */
print(image_width, image_height)  /* image dimensions */
print(255)  /* maximum color value */
for x = 1 to image_width do {
    for y = 1 to image_height do {
        print(image[x, y])  /* print RGB color values for each pixel */
    }
}

/* Output image in HTML format */
print("<html>")
print("<head>")
print("<title>Mandelbrot Set</title>")
print("</head>")
print("<body>")
print("<h1>Mandelbrot Set</h1>")
print("<img src=\"mandelbrot.png\" alt=\"Mandelbrot Set\">")  /* assuming image is saved as mandelbrot.png */
print("</body>")
print("</html>")