# This program uses the ICON language to perform quicksort on an array of integers

# Input array
array := [5, 3, 8, 1, 2, 7, 4, 6]

# Function to partition the array based on a pivot value
procedure partition(array, left, right, pivot)
    # Initialize variables
    temp := 0
    i := left
    j := right

    # Loop until partition is complete
    while i <= j do
        # Find element on the left side that is greater than pivot
        while array[i] < pivot do
            i := i + 1
        # Find element on the right side that is less than pivot
        while array[j] > pivot do
            j := j - 1

        # Swap elements if needed
        if i <= j then
            temp := array[i]
            array[i] := array[j]
            array[j] := temp
            i := i + 1
            j := j - 1

    # Return index where partition is complete
    return i

# Function to perform quicksort on the input array
procedure quicksort(array, left, right)
    # Check for empty or single element array
    if left >= right then
        return

    # Choose pivot element
    pivot := array[floor((left + right) / 2)]

    # Partition the array using the chosen pivot
    index := partition(array, left, right, pivot)

    # Recursively perform quicksort on the subarrays
    quicksort(array, left, index - 1)
    quicksort(array, index, right)

# Call the quicksort function and print sorted array
quicksort(array, 0, length(array) - 1)
print(array)