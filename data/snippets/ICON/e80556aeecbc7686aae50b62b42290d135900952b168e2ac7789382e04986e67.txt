# This is a code snippet in ICON

# Declare a variable that will hold a list of numbers
my_list := []

# Generate 10 random numbers between 1 and 100 and add them to the list
for i in 1 to 10 loop
    my_list.append(random(1, 100))
end

# Print the list of numbers
printf("List of random numbers: %s\n", my_list)

# Create a variable that will hold the sum of all the numbers in the list
sum := 0

# Loop through the list and add each number to the sum variable
for i in 1 to len(my_list) loop
    sum := sum + my_list[i]
end

# Print the sum of all the numbers
printf("Sum of the numbers: %d\n", sum)

# Calculate the average of the numbers by dividing the sum by the amount of numbers in the list
average := sum / len(my_list)

# Print the average
printf("Average of the numbers: %f\n", average)

# Declare a function that will check if a number is prime or not
PROCEDURE is_prime(number)
    prime := 1
    if number <= 1 then 
        # 1 is not a prime number
        prime := 0 
    else 
        for i in 2 to number - 1 loop
            if number mod i = 0 then 
                # if the number is divisible by any number other than itself and 1, it's not a prime number
                prime := 0 
                exit 
            end
        end
    end
    return prime
end

# Loop through the list and check if each number is prime or not
for i in 1 to len(my_list) loop
    prime_result := is_prime(my_list[i])
    if prime_result = 1 then 
        printf("%d is a prime number\n", my_list[i])
    else 
        printf("%d is not a prime number\n", my_list[i])
    end
end

# Create a dictionary that will hold the names and ages of people
person_dict := {
    "John": 25,
    "Jane": 30,
    "Bob": 40,
    "Alice": 50
}

# Loop through the dictionary and print the name and age of each person
for name, age in person_dict loop
    printf("%s is %d years old\n", name, age)
end

# Create a class that represents a car with attributes for make, model, and year
CLASS Car 
    ATTRIBUTES
        make,
        model,
        year

    # Method to print the details of the car
    METHOD show_details()
        printf("Make: %s, Model: %s, Year: %d\n", self.make, self.model, self.year)
    END
END

# Create an instance of the Car class
my_car := Car{make: "Ford", model: "Mustang", year: 2021}

# Call the show_details method to print the details of the car
my_car.show_details()

# Declare a procedure that will reverse a string
PROCEDURE reverse_string(my_string)
    reversed_string := ""
    # Loop through the string in reverse and add each character to the reversed_string variable
    for i in len(my_string) to 1 by -1 loop
        reversed_string := reversed_string || my_string[i] 
    end
    return reversed_string
end

# Print the reversed string
printf("Reversed string: %s\n", reverse_string("Hello World"))

# Declare a function to check if a word is a palindrome
FUNCTION is_palindrome(word)
    reversed_word := reverse_string(word)
    # Compare the original word with the reversed word
    if word = reversed_word then 
        return 1 
    else 
        return 0 
    end
end

# Call the is_palindrome function to check if a word is a palindrome or not
palindrome_result := is_palindrome("radar")
if palindrome_result = 1 then 
    printf("radar is a palindrome\n")
else 
    printf("radar is not a palindrome\n")
end