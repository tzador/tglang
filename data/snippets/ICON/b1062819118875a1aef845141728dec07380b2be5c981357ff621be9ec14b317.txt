procedure longestSubstring (strVal)
/*This procedure takes in a string value and returns the longest substring within the string that contains
  unique characters only.*/

local len := strlen(strVal)  #get the length of the string
local start := 0             #start index of substring
local current, longest := 0  #variables to store current and longest substring

loop while current < len do  #loop through the string
    local temp := ""         #temporary string variable to store current substring
    local unique := true     #boolean to track if substring contains unique characters only
    
    loop while unique and current < len do   #loop through character by character
        #add current character to substring if it is not already in the substring
        if temp.indexOf(strVal[current]) < 0 then 
            temp := temp || strVal[current] 
            current := current + 1 
        else
            unique := false  #set flag to false if duplicate character is found 
        end

        #check if current substring is longer than longest substring
        if strlen(temp) > strlen(longest) then 
            longest := temp 
            start := current - strlen(temp)  #update start index of longest substring 
        end
    end
end

#output longest substring from original string
return "The longest substring in '" || strVal || "' is '" || longest || "', starting at index " || start || "."