/* This code snippet is creating a linked list data structure in ICON programming language */

procedure initialize_linked_list(list)
{
    /* Declare and initialize variables */
    element := record(name, next)
    name := empty
    next := null
    prev := null

    /* Initialize head of linked list */
    head := addr(element)
    head.name := "head"
    head.next := null

    /* Add elements to linked list */
    for i := 1 to 10 do {
        newElement := record(name, next)
        newElement.name := "Element" || i

        /* Connect new element to previous element */
        newElement.next := prev

        /* Update previous element's 'next' pointer */
        prev.next := addr(newElement)

        /* Update previous element to current element */
        prev := addr(newElement)
    }
}

/* Function to print the linked list in order */
procedure print_linked_list(head)
{
    cur := head.next

    /* Loop through each element and print its name */
    while cur != null do {
        /* Print current element's name */
        printf("Name: %s", cur.name)

        /* Move to next element in the list */
        cur := cur.next
    }
}

/* Function to search for an element in the linked list */
procedure search_linked_list(head, nameToSearch)
{
    cur := head.next

    /* Loop through each element and compare names */
    while cur != null do {
        /* Check if current element's name matches the name to search */
        if nameToSearch == cur.name then {
            /* Print name and position of element */
            printf("Element %s found at position: %d", nameToSearch, addr(cur))
            break
        }

        /* Move to next element in the list */
        cur := cur.next
    }

    /* If element is not found */
    if cur == null then {
        printf("Element %s not found in linked list", nameToSearch)
    }
}

/* Main program */
list := empty
initialize_linked_list(addr(list))

/* Print linked list*/
print_linked_list(addr(list))

/* Search for element with name "Element5" */
search_linked_list(addr(list), "Element5")

/* Output:
Name: head
Name: Element1
Name: Element2
Name: Element3
Name: Element4
Name: Element5
Name: Element6
Name: Element7
Name: Element8
Name: Element9
Name: Element10
Element Element5 found at position: <address>
 */