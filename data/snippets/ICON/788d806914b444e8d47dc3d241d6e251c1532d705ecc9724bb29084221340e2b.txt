//This is a code snippet in the ICON programming language, which is used for developing smart contracts on the ICON blockchain.

#ICON VERSION 3
#USING "icon-db"

#ADDRESS0x01

#META
#NAME "Token Contract"
#DESCRIPTION "A contract for creating and managing tokens on the ICON blockchain"

#INSTALL
#SET ALIAS "ICON"  #set an alias for the ICON smart contract

#GENESIS
#CALL "ICON" "initialize"  #initialize the smart contract

#PUBLIC
#FUNC "createToken"
#PARAM "TokenName:str"  #parameter for the name of the token
#PARAM "TokenSupply:int"  #parameter for the initial supply of the token
#PARAM "TokenSymbol:str"  #parameter for the symbol of the token
#RET "TokenId:int"  #return the ID of the created token
#IF "TokenSupply" < 1 "InvalidTokenSupplyException"  #check if token supply is valid
#IF "TokenId" != null "TokenAlreadyExistsException"  #check if token already exists
#CALL "ICON" "createToken" "TokenName" "TokenSupply" "TokenSymbol"  #call the "createToken" function on the ICON smart contract

#FUNC "transferToken"
#PARAM "TokenId:int"  #parameter for the ID of the token to be transferred
#PARAM "Recipient:str"  #parameter for the recipient of the token
#PARAM "Amount:int"  #parameter for the amount of token to be transferred
#IF "TokenId" != null "InvalidTokenIdException"  #check if token ID is valid
#IF "Amount" < 1 "InvalidTokenAmountException"  #check if token amount is valid
#CALL "ICON" "transferToken" "TokenId" "Recipient" "Amount"  #call the "transferToken" function on the ICON smart contract

#FUNC "burnToken"
#PARAM "TokenId:int"  #parameter for the ID of the token to be burned
#PARAM "Amount:int"  #parameter for the amount of token to be burned
#IF "TokenId" != null "InvalidTokenIdException"  #check if token ID is valid
#IF "Amount" < 1 "InvalidTokenAmountException"  #check if token amount is valid
#CALL "ICON" "burnToken" "TokenId" "Amount"  #call the "burnToken" function on the ICON smart contract

#FUNC "setTokenMetadata"
#PARAM "TokenId:int"  #parameter for the ID of the token to set metadata for
#PARAM "MetaDataKey:str"  #parameter for the key of the metadata to be set
#PARAM "MetaDataValue:str"  #parameter for the value of the metadata to be set
#IF "TokenId" != null "InvalidTokenIdException"  #check if token ID is valid
#IF "MetaDataKey" == null "InvalidMetaDataKeyException"  #check if metadata key is null
#CALL "ICON" "setTokenMetadata" "TokenId" "MetaDataKey" "MetaDataValue"  #call the "setTokenMetadata" function on the ICON smart contract

#FUNC "getTokenMetadata"
#PARAM "TokenId:int"  #parameter for the ID of the token to get metadata for
#PARAM "MetaDataKey:str"  #parameter for the key of the metadata to be retrieved
#RET "MetaDataValue:str"  #return the value of the specified metadata
#IF "TokenId" != null "InvalidTokenIdException"  #check if token ID is valid
#IF "MetaDataKey" == null "InvalidMetaDataKeyException"  #check if metadata key is null
#CALL "ICON" "getTokenMetadata" "TokenId" "MetaDataKey"  #call the "getTokenMetadata" function on the ICON smart contract, and return its value as the return value of this function

//end of public functions

#PRIVATE
#CALL "ICON" "setTokenOwner" #call the "setTokenOwner" function on the ICON smart contract to set the owner of the contract as the default owner of all newly created tokens

#FUNC "initialize"
#IF "icon.Property" == null "InitializeException"  #check if the ICON blockchain is properly configured for the contract
#CALL "ICON" "initialize" #call the "initialize" function on the ICON smart contract to finish the initialization process

#FUNC "getTokenOwner"
#PARAM "TokenId:int"  #parameter for the ID of the token to get owner for
#RET "TokenOwner:str"  #return the address of the owner of the specified token
#IF "TokenId" != null "InvalidTokenIdException"  #check if token ID is valid
#CALL "ICON" "getTokenOwner" "TokenId"  #call the "getTokenOwner" function on the ICON smart contract, and return its value as the return value of this function

#end of private functions

//end of contract