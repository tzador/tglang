procedure mandelbrot(matrix, max_iterations)  # defines a procedure with two parameters
  max_bound <- 2                               # define maximum bound to check for divergence
  x_min <- 0                                   # define minimum x coordinate for plotting
  x_max <- 8                                   # define maximum x coordinate for plotting
  y_min <- 0                                   # define minimum y coordinate for plotting
  y_max <- 8                                   # define maximum y coordinate for plotting
  step_x <- (x_max-x_min)/(cols(matrix)-1)     # calculate step size for horizontal axis
  step_y <- (y_max-y_min)/(rows(matrix)-1)     # calculate step size for vertical axis
  for i from 1 to cols(matrix)                  # loop through each column in the matrix
    x <- x_min + (i-1)*step_x                   # calculate x coordinate for current column
    for j from 1 to rows(matrix)                # loop through each row in the matrix
      y <- y_min + (j-1)*step_y                 # calculate y coordinate for current row
      curr_iteration <- 0                       # initialize current iteration to 0
      curr_z_real <- x                          # initialize real part of current z value to x
      curr_z_imag <- y                          # initialize imaginary part of current z value to y
      while (curr_iteration < max_iterations)   # perform iterations until max iterations reached
        temp_real <- curr_z_real                # temporarily save real part of z value
        temp_imag <- curr_z_imag                # temporarily save imaginary part of z value
        curr_z_real <- (temp_real * temp_real) - (temp_imag * temp_imag) + x 
                                                # calculate new real part of z value using previous iteration values
        curr_z_imag <- (2 * temp_real * temp_imag) + y
                                                # calculate new imaginary part of z value using previous iteration values
        if (curr_z_real * curr_z_real + curr_z_imag * curr_z_imag > max_bound) 
                                                # if magnitude of z value is greater than max bound
          matrix[j][i] <- curr_iteration+1      # set corresponding element in matrix to current iteration counter
          break                                 # exit the iteration loop
        else 
          curr_iteration <- curr_iteration + 1  # otherwise, increment iteration counter
        endif
      endwhile
    endfor
  endfor
endproc