procedure 'run/index()'
; handles the user input and starts the program

gEcho();   # creates a new echo object
'gEcho.showVersion'();   # shows the version of the program

input := 'getUserInput'();   # gets the user input and stores it in the 'input' variable

# loop through the input until there are no more characters left
while(length(input) > 0)
{
  'parseInput'(input);  # send the input to the parseInput function for further processing
  input := 'getNextInput';  # get the next input, if there is any, and store it in the 'input' variable
}

'executeProgram'();  # executes the main program logic

proc 'parseInput'(input)
{
  # check if the input matches any of the defined commands
  if(input = 'list')
  {
    'showList'();   # if input is 'list', show a list of available commands
  }
  else if(input = 'add')
  {
    'addData'();   # if input is 'add', prompt user for new data and add it to the program
  }
  else if(input = 'delete')
  {
    'deleteData'();   # if input is 'delete', prompt user to select data to delete and delete it
  }
  else if(input = 'update')
  {
    'updateData'();   # if input is 'update', prompt user to select data to update and update it
  }
  else if(input = 'filter')
  {
    'filterData'();   # if input is 'filter', prompt user to select a filter and filter the data
  }
  else
  {
    'handleUnknownInput'(input);   # if input does not match any defined commands, handle it as unknown input
  }
}

proc 'executeProgram'()
{
  # main program logic goes here
  'print'('Welcome to my program!');   # prints a welcome message
}

proc 'handleUnknownInput'(input)
{
  'print'('Unknown command: ' || input);   # prints an error message with the unknown input
  'print'('Please type "list" to see a list of available commands.');   # prompts the user to see a list of available commands
}

proc 'showList'()
{
  'print'('Available commands:');   # prints a header for the list of available commands
  'print'('list - show available commands');   # prints the command to show the list of available commands
  'print'('add - add new data');   # prints the command to add new data
  'print'('delete - delete existing data');   # prints the command to delete existing data
  'print'('update - update existing data');   # prints the command to update existing data
  'print'('filter - filter the data');   # prints the command to filter the data
}

proc 'addData'()
{
  newData := 'getNewData'();   # prompts the user to input new data and store it in the 'newData' variable
  'addToDatabase'(newData);   # adds the new data to the database
  'print'('Added new data: ' || newData);   # prints a success message with the newly added data
}

proc 'deleteData'()
{
  targetData := 'selectData'();   # prompts the user to select the data to be deleted and store it in the 'targetData' variable
  'deleteFromDatabase'(targetData);   # deletes the target data from the database
  'print'('Deleted data: ' || targetData);   # prints a success message with the deleted data
}

proc 'updateData'()
{
  targetData := 'selectData'();   # prompts the user to select the data to be updated and store it in the 'targetData' variable
  updatedData := 'getUpdatedData'(targetData);   # prompts the user to input updated data and store it in the 'updatedData' variable
  'updateInDatabase'(targetData, updatedData);   # updates the target data in the database with the updated data
  'print'('Updated data: ' || targetData || ' to ' || updatedData);   # prints a success message with the updated data
}

proc 'filterData'()
{
  filter := 'selectFilter'();   # prompts the user to select a filter and store it in the 'filter' variable
  filteredData := 'getFilteredData'(filter);   # filters the data based on the selected filter and store it in the 'filteredData' variable
  'print'('Filtered data: ' || filteredData);   # prints the filtered data
}

proc 'getNewData'()
{
  'print'('Please enter the new data: ');   # prompts the user to input the new data
  newInput := 'getUserInput'();   # gets the user input and store it in the 'newInput' variable
  return newInput;   # return the new input to the 'addData' function
}

proc 'addToDatabase'(newData)
{
  # code to add the new data to the database goes here
}

proc 'selectData'()
{
  'print'('Please select the data: ');   # prompts the user to select the data
  selectedInput := 'getUserInput'();   # gets the user input and store it in the 'selectedInput' variable
  return selectedInput;   # return the selected input to the 'deleteData' or 'updateData' function
}

proc 'deleteFromDatabase'(targetData)
{
  # code to delete the target data from the database goes here
}

proc 'updateInDatabase'(targetData, updatedData)
{
  # code to update the target data in the database with the updated data goes here
}

proc 'selectFilter'()
{
  'print'('Please select a filter: ');   # prompts the user to select a filter
  selectedInput := 'getUserInput'();   # gets the user input and store it in the 'selectedInput' variable
  return selectedInput;   # return the selected input to the 'filterData' function
}

proc 'getFilteredData'(filter)
{
  # code to filter the data based on the selected filter goes here
}