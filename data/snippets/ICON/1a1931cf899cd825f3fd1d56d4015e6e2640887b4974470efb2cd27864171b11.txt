procedure sort(A, N)
/*
This procedure sorts the array A of size N,
using the quicksort algorithm
*/
begin
  if(N < 2) then // base case, array is already sorted
    return A
  else
    var pivot = A[last] // select the last element as the pivot
    var i = 0 // initialize left pointer
    var j = N-2 // initialize right pointer

    while(i <= j) do // while left pointer is to the left of right pointer
      while(A[i] < pivot) do // find an element on the left that should be on the right
        i++
      while(A[j] > pivot) do // find an element on the right that should be on the left
        j--

      if(i <= j) then // swap the elements at positions i and j
        var temp = A[i]
        A[i] = A[j]
        A[j] = temp
        i++
        j--
    
    var temp = A[i] // the pivot element is now at position i, all elements to the left are smaller and all elements to the right are larger
    A[i] = A[last] // swap the pivot with the last element
    A[last] = temp

    var smaller = i-1 // recursively sort the subarray to the left of pivot
    var larger = N-i // recursively sort the subarray to the right of pivot
    sort(A, smaller)
    sort(A[i+1], larger)
end