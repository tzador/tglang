procedure sort(arr)
  symbol n, i, j
  n := len(arr)

  for i := (n / 2) + 1 downwards do
    siftDown(arr, i, n)

  for j := n downwards do
    temp := arr[1]
    arr[1] := arr[j]
    arr[j] := temp
    heapSize := heapSize - 1
    siftDown(arr, 1, j - 1)

procedure siftDown(arr, i, heapSize)
  symbol largest, l, r
  largest := i
  l := 2 * i
  r := (2 * i) + 1

  if l <= heapSize and arr[l] > arr[largest] then
    largest := l

  if r <= heapSize and arr[r] > arr[largest] then
    largest := r

  if largest != i then
    temp := arr[i]
    arr[i] := arr[largest]
    arr[largest] := temp
    siftDown(arr, largest, heapSize)