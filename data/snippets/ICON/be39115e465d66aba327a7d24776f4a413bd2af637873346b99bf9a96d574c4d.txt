procedure sort(A, l, r);
/*
    This procedure implements the quicksort algorithm to 
    sort an array A with start index l and end index r.
*/

if (l >= r) stop; /* base case for recursion */

/* select pivot */
pivot := A[(l+r)/2];

/* partition step */
i := l;
j := r;
while (i <= j) do {
    while (A[i] < pivot) i := i + 1; /* move left pointer until A[i] >= pivot */
    while (A[j] > pivot) j := j - 1; /* move right pointer until A[j] <= pivot */
    if (i <= j) {
        /* swap A[i] and A[j] */
        tmp := A[i];
        A[i] := A[j];
        A[j] := tmp;
        i := i + 1;
        j := j - 1;
    }
}

/* recursive calls */
if (l < j) sort(A, l, j); /* sort left partition */
if (i < r) sort(A, i, r); /* sort right partition */
end;