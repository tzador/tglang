procedure sort(var A)
// This procedure sorts an array A in ascending order
// Input: A – an array of values
// Output: A – the sorted array

do i = 2 to length(A)
		temp = A[i]
		j = i – 1

		while j > 0 and A[j] > temp
			// Shift element to the right to make space for insertion
			A[j + 1] = A[j]
			j = j – 1
		end // while

		A[j + 1] = temp // Insert current element into sorted section
	end // for i
end // procedure sort

// Annotated explanation of code:
// Input: A - an array of values
// Output: A - the sorted array
// Procedure sort uses the insertion sort algorithm to sort an array A in ascending order.
// It takes in the array A as input and sorts the array in-place.
// The procedure uses a for loop to iterate through the array, starting from the second element (i=2).
// For every iteration, it stores the current element in a temporary variable temp.
// It then uses a while loop to compare the current element with the elements in the sorted section of the array (from index 0 to i-1).
// If the current element is smaller than the element in the sorted section, it shifts the element to the right to make space for insertion.
// This process continues until the correct position for insertion is found.
// Once the correct position is found, the current element (temp) is inserted into the sorted section of the array.
// The sort procedure then continues to iterate through the remaining elements in the array.
// Once the for loop is completed, the array A is returned as the sorted array in ascending order.