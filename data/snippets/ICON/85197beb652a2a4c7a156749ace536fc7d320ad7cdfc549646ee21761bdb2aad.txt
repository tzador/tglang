procedure push_stack(eltptr)  # Procedure to push an element onto the stack
    integer eltptr  # Declaring the pointer to the element to be pushed
    if top = 10 then  # Check if stack is full
        !full  # Raise error if stack is full
    else
        top := top + 1  # Increment top of stack
        stack[top] := eltptr  # Push element onto stack
    fi
end

procedure pop_stack()  # Procedure to pop an element off the stack
    if top = -1 then  # Check if stack is empty
        !empty  # Raise error if stack is empty
    else
        eltptr := stack[top]  # Get element from top of stack
        top := top - 1  # Decrement top of stack
        return eltptr  # Return element
    fi
end

procedure print_stack()  # Procedure to print the elements in the stack
    for i := top to 0 step -1 do  # Loop through stack from top to bottom
        write (stack[i])  # Print element at current position
    end  # End of loop
end

procedure search_stack(search_item)  # Procedure to search for an element in the stack
    integer search_item  # Declaring the item to be searched for
    found := false  # Flag to track if element is found
    for i := 0 to top do  # Loop through stack from bottom to top
        if stack[i] = search_item then  # Check if current element matches search item
            found := true  # Set flag to true
            break  # End loop if item is found
        fi
    end  # End of loop
    return found  # Return flag
end

procedure clear_stack()  # Procedure to clear the stack
    top := -1  # Reset top of stack
end

# Main program
# Initialize stack and top variable
define stack[10]  # Defining an array to store stack elements
define top  # Variable to track the top of stack

top := -1  # Set initial value of top

# Pushing elements onto stack
push_stack(5)  # Pushing the number 5 onto the stack
push_stack(10)  # Pushing the number 10 onto the stack
push_stack(3)  # Pushing the number 3 onto the stack

# Popping element off stack
pop_element := pop_stack()  # Popping the top element (3) off the stack

# Printing elements in stack
print_stack() # Printing elements in the stack (expecting output to be 10, 5)

# Searching for an element in stack
found := search_stack(10)  # Searching for the number 10 in the stack