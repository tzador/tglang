# Provides the next higher number
procedure nxt (num)
num = x + 1;

# Calculates the average of two numbers
procedure avrg (num1, num2)
num1 = a;
num2 = b;
average = (a + b)/2;

# Returns the factorial of a number
procedure factorial (num)
if (num = 0) then
return 1;
else
return (num * factorial(num-1));

# Prints the Fibonacci sequence up to a specific number
procedure fibonacci (num)
first = 0;
second = 1;
for i = 1 to num do
{
print first;
sum = first + second;
first = second;
second = sum;
}

# Uses recursion to find the greatest common divisor of two numbers
procedure gcd (num1, num2)
if (num2 = 0) then
return num1;
else
return gcd(num2, num1 % num2);

# Creates a list of prime numbers up to a specific number
procedure primes (num)
primes_list = new_list();
for i = 2 to num do
is_prime = true;
for j = 2 to i do
{
if (i % j = 0) then
{
is_prime = false;
break;
}
}
if (is_prime = true) then
add_to_list(primes_list, i);
print_list(primes_list);

# Solves a quadratic equation and returns the real roots
procedure quadratic_eq (a, b, c)
discriminant = b^2 - 4*a*c;
if (discriminant < 0) then
return "No real roots";
else if (discriminant = 0) then
return -b/(2*a);
else
{
root1 = (-b + sqrt(discriminant)) / (2*a);
root2 = (-b - sqrt(discriminant)) / (2*a);
return (root1, root2);
}