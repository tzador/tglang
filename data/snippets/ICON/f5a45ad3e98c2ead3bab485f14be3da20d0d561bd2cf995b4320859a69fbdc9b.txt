procedure calc (x, y) # Calculates the sum of two integers
let z := x + y             # Assigns the sum to variable z
write (z)                   # Outputs the sum
return z                    # Returns the sum as the final result
end                         # Ends the procedure

proc display (a, b)         # Displays the value of two variables
write (a, b)                # Outputs the values of both variables
end                         # Ends the procedure

while (x < 10) do           # Loops while x is less than 10
let x := x + 1              # Increments x by 1
end                         # Ends the loop

if (z > 100) then           # Checks if z is greater than 100
write ("Too large!")        # Outputs a message if condition is met
end                         # Ends the if statement

let arr := [1, 2, 3, 4]     # Initializes an array with four elements
arr[0] := 5                 # Assigns a new value to the first element
arr[3] := arr[0] + arr[1]   # Assigns the sum of first two elements to last element
write (arr)                 # Outputs the updated array

record person {             # Defines a record structure called person
    name: "John",           # Name field with value "John"
    age: 30                 # Age field with value 30
}

let john := person()        # Initializes a new person record
john.name := "Jane"         # Changes the name field to "Jane"
john.city := "New York"     # Adds a new field called "city" with value "New York"

typedef list {              # Defines a list datatype
    list(*list)             # Pointer to a list of lists
    data:*element           # Pointer to an element
}

proc addToList (l, element) # Adds an element to a list
l.data := element           # Assigns the element to the list's data field
return l                    # Returns the updated list
end                         # Ends the procedure