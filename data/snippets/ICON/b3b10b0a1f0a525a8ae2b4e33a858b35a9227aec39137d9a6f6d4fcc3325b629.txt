;; "Icon" algorithm for finding the shortest path from a starting point to an end point
;; using a greedy approach with a priority queue

;; Define a class "Node" to represent locations in the graph
class Node(name)
  self.name = name ;; name of the node
  self.distance = INF ;; distance from starting point, initially set to infinity
  self.parent = NULL ;; parent node, initially set to NULL

;; Define a class "PriorityNode" to represent nodes in the priority queue
class PriorityNode(node, distance)
  self.node = node ;; reference to the node
  self.distance = distance ;; distance from starting point to this node

;; Initialize an empty graph
graph = []

;; Define a function "add_node" to add nodes to the graph
function add_node(name)
  node = Node(name) ;; create a new node with given name
  append(graph, node) ;; add node to the graph

;; Define a function "add_edge" to add edges between nodes in the graph
function add_edge(source, dest, weight)
  ;; find the nodes with given names
  source_node = find_node(source)
  dest_node = find_node(dest)
  ;; create a new edge between the two nodes with given weight
  edge = (dest_node, weight)
  ;; add the edge to the source node's list of edges
  append(source_node.edges, edge)

;; Define a function "find_node" to find a node in the graph with given name
function find_node(name)
  ;; loop through all nodes in the graph
  for node in graph do
    ;; if the node's name matches the given name, return the node
    if node.name == name then return node

;; Define a function "find_shortest_path" to find the shortest path from start to end
function find_shortest_path(start, end)
  ;; initialize an empty priority queue
  queue = []
  ;; initialize the starting node's distance to zero
  start.distance = 0
  ;; add the starting node to the queue
  append(queue, PriorityNode(start, 0))

  ;; while the queue is not empty
  while not is_empty(queue) do
    ;; pop the first element from the queue
    current = pop(queue)
    ;; if the current node is the end node, path has been found
    if current.node == end then
      return traceback(current) ;; call helper function to find the path
    ;; loop through all edges of the current node
    for edge in current.node.edges do
      ;; calculate the new distance from start to the current edge's destination
      new_distance = current.distance + edge.weight
      ;; if the new distance is less than the destination's current distance
      if new_distance < edge.destination.distance then
        ;; update the destination's distance and parent
        edge.destination.distance = new_distance
        edge.destination.parent = current.node
        ;; add the destination node to the queue with updated distance
        append(queue, PriorityNode(edge.destination, new_distance))
  ;; if the end node's parent is NULL, no path was found
  if end.parent == NULL then return "No path found"
  ;; otherwise, call helper function to find the path
  return traceback(end)

;; Define a helper function "traceback" to find the path by backtracking from end node
function traceback(end)
  ;; initialize an empty list for the path
  path = []
  ;; starting from the end node, loop through its parents until we reach the start node
  current = end
  while not is_empty(current) do
    ;; add the current node to the path
    append(path, current.node)
    ;; set the current node to its parent
    current = current.node.parent
  ;; reverse the path (since we backtracked from end to start)
  reverse(path)
  return path ;; return the shortest path from start to end

;; Example usage:
;; add nodes to the graph
add_node("A")
add_node("B")
add_node("C")
add_node("D")
add_node("E")
;; add edges between nodes with weights
add_edge("A", "B", 4)
add_edge("A", "C", 1)
add_edge("B", "D", 3)
add_edge("C", "D", 1)
add_edge("C", "E", 6)
add_edge("D", "E", 2)
;; find the shortest path from "A" to "E"
path = find_shortest_path(find_node("A"), find_node("E"))
print("Shortest path from A to E: " + path) ;; output: Shortest path from A to E: [A, C, D, E]