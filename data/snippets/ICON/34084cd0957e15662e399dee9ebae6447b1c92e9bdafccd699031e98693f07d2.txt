procedure permute (n, m)  ##function to generate all possible permutations of n elements taken m at a time 
                                   ##using recursion
if m < 0 then
    printf("Error: cannot take negative number of elements")
else
    for i:= 1 to m do                             ##loop to generate all possible permutations
        result[i] := 0                             ##initialize result array to 0
    permute_sub(n, m, 0)                          ##recursive function to generate permutations
end

procedure permute_sub (n, m, count)            ##recursive function to generate permutations
                      ##where count is the current index of the result array
if count = m then                                ##base case: all elements have been placed in result array
    for i:= 1 to m do
        printf(result[i])                      ##output the current permutation
else                                             ##recursion step
    for j:= 1 to n do
        if result[count] = 0 then                ##if the element has not been used yet
            result[count] := j                     ##place the element at appropriate index in result array
            permute_sub(n, m, count+1)       ##recursive call with incremented count value
            result[count] := 0                     ##backtrack: reset the element to 0
        end
    end
end

permute(4, 2)                                      ##function call to generate permutations of 2 elements taken from 4 elements