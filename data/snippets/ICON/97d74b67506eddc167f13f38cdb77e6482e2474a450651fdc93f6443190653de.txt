/* generate all combinations of n items */
procedure combinations(n)
    integer n              /* number of items */
    integer count          /* number of combinations */
    integer result(1:n)    /* array to store result */

    count := n * 2 ** n      /* calculate total number of combinations */

    for i := 1 to count do /* loop through each combination */

        /* initialize the current combination index */
        current_index := i

        for j := 1 to n do    /* loop through each item in combination */

            /* calculate the binary representation of current index */
            binary_index := to_binary(current_index)

            /* get the jth digit of the binary index */
            current_digit := binary_index[j]

            /* if the digit is 1, add the corresponding item to result */
            if current_digit = 1 then
                result[j] := item[j]
            end if

            /* divide the current index by 2 to move to next digit */
            current_index := current_index / 2

        end for

    end for

end procedure