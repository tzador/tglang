forward: procedure (top)
  call go(top);               /* call go for top segment */
end: procedure (top)

go: procedure (arg)            /* draw arg recursively */
  if numeric(arg) then {       /* if absolute distance */
     call draw(arg);           /* call draw to draw the distance */
     return;                   /* return */
  };
  first := first(arg);         /* get the first half of argument */
  second := second(arg);       /* get the second half of argument */
  call callproc (first, second, #go);
  call callproc (first, second, #go);
  /* recursively call go for both halves */
end: procedure (arg, goto)
                              
callproc: procedure (first, second, proc)
  savepos := getpos();
  call :proc (first);         /* save current position and call proc */
  dist := length(first);      /* get distance of first half */
  forward(dist);              /* move forward by distance */
  call :proc (second);        /* call proc for second half */
  back(dist);                 /* move back to saved position */
end: procedure (first, second, proc) 
                              
length: procedure (arg)
  result := 0;                /* initialize result variable */
  while arg do {
     result +:= 1;            /* increment result for each element */
     arg := qtail (arg);      /* move to next element */
  };
  return(result);             /* return result */
end: procedure (arg)
                              
qtail: procedure (arg)        /* get queue tail */
  return(arg -> succ);        /* return successor of queue head */
end: procedure (arg)          

back: procedure (dist)
  left := turn(180);          /* get left turn instruction for 180 degrees */
  call :left();               /* call the turn instruction */
  forward(dist);              /* move forward by distance */
  call :left();               /* call the turn instruction again for 180 degrees */
end: procedure (dist)
                              
turn: procedure (deg)         /* get turn instruction for given degrees */
  if deg = 90 then {          /* if left turn */
     return(right);           /* return right turn instruction */
  } else if deg = 180 then {  /* if right turn */
     return(left);            /* return left turn instruction */
  };
end: procedure (deg)