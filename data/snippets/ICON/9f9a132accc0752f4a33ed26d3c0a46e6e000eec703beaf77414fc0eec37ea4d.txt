procedure main()
   lst := array (4, 5, 6, 7, 8, 9) # initialize an array with values
   sorted_lst := sort(lst) # call sort procedure to sort the array 
   print ("Sorted Array:", sorted_lst) # print the sorted array

procedure sort(lst)
   if size(lst) <= 1 then # base case: array of 0 or 1 elements is already sorted
      return lst
   end

   # recursive case:
   pivot := lst[size(lst)/2] # choose a pivot element
   less, more := partition(lst, pivot) # partition the array into two subarrays
   return append(sort(less), pivot, sort(more)) # recursively sort the two subarrays and append them to the pivot element
end

procedure partition(lst, pivot)
   less := array() # initialize empty array for elements less than pivot
   more := array() # initialize empty array for elements greater than pivot

   # loop through elements in lst and assign them to either the less or more array
   for i := 1 to size(lst) do
      if lst[i] < pivot then
         append(less, lst[i])
      else
         append(more, lst[i])
      end
   end

   return less, more # return the two subarrays
end