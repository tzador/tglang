procedure add(x, y)
  x + y
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure fibonacci(n)
  if n < 2 then
    n
  else
    fibonacci(n - 1) + fibonacci(n - 2)
  endif
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure merge_sort(array)
  if length(array) <= 1 then
    array
  else
    midpoint := length(array) / 2
    left := merge_sort(array[1 to midpoint])
    right := merge_sort(array[midpoint+1 to length(array)])
    merge(left, right)
  endif
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure merge(left, right)
  result := []
  while length(left) > 0 and length(right) > 0 do
    if left[1] <= right[1] then
      result.append(left[1])
      left.remove(1)
    else
      result.append(right[1])
      right.remove(1)
    endif
  end
  result.concat(left)
  result.concat(right)
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure binary_search(array, target)
  lowest := 0
  highest := length(array) - 1
  while lowest <= highest do
    midpoint := lowest + (highest - lowest) / 2
    if array[midpoint] > target then
      highest := midpoint - 1
    elseif array[midpoint < target then
      lowest := midpoint + 1
    else
      return midpoint
    endif
  end
  return -1
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure selection_sort(array)
  for i := 0 to length(array) - 2 do
    min_index := i
    for j := i + 1 to length(array) - 1 do
      if array[j] < array[min_index] then
        min_index := j
      endif
    end
    swap(array, i, min_index)
  end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure swap(array, a, b)
  temp := array[a]
  array[a] := array[b]
  array[b] := temp
end