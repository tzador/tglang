/*
This program uses recursion and memoization to generate 
the Fibonacci sequence up to a given number.
*/

#PROC fibonacci(n)					# Declare procedure to calculate Fibonacci sequence
   n <= 1 | return n 				# If n is 0 or 1, return n (base cases)
   memo(n) :: int[0..n]				# Create array to store memoized values for each index
   memo(n) <= 0 | return 0			# Initialize memoized values for indices 0 and 1
   memo(n) <= 1 | return 1
   memo(n) :: fibonacci(n - 1) + fibonacci(n - 2) 	# If value at index n has not been calculated yet, recursively call procedure to calculate and store it in memo array
   return memo(n)					# Return value at index n

begin								# Start of program
   print("Enter a number: ")			# Prompt user to enter a number
   read(n) 							# Read user input and store in n
   result :: fibonacci(n)			# Call fibonacci procedure and store result in result variable
   print("The Fibonacci sequence up to ", n, "is: ") 	# Print message
   for i in 0..n do					# Loop through indices from 0 to n and print memoized values
      print(memo(i) + " ")
   end
end