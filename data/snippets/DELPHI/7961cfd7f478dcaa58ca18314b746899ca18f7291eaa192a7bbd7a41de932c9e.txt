unit Unit1;

interface

uses
  SysUtils, Classes, Forms, Controls, Graphics, Dialogs, StdCtrls, ExtCtrls,
  ComCtrls;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    Memo1: TMemo;
    CheckBox1: TCheckBox;
    RadioGroup1: TRadioGroup;
    procedure FormCreate(Sender: TObject);
    procedure Panel1MouseMove(Sender: TObject; Shift: TShiftState;
      X, Y: Integer);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure GenerateRandomStrings;
  end;

var
  Form1: TForm1;
  randomStrings: TStringList;

implementation

{$R *.dfm} // This directive links the compiled resource file (the .res file) to the unit.

procedure TForm1.FormCreate(Sender: TObject);
begin
  randomStrings := TStringList.Create; // Creating a TStringList to hold randomly generated strings
  Panel1.DoubleBuffered := true; // Double buffering avoids flickering when updating the Panel
  CheckBox1.Caption := 'Enable Random Strings'; // Assigning a caption to the Checkbox
  RadioGroup1.Caption := 'Random String Length'; // Assigning a caption to the RadioGroup
  RadioGroup1.Items.Add('10 characters'); // Adding an item to the RadioGroup
  RadioGroup1.Items.Add('20 characters');
  RadioGroup1.Items.Add('30 characters');
  RadioGroup1.Items.Add('40 characters');
  { button = square root button }
  Panel1.OnMouseMove := Panel1MouseMove; // Assigning the OnMouseMove event to a method
end;

procedure TForm1.Panel1MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
var
  randomString: string;
  index: Integer;
begin
  if CheckBox1.Checked then // Checking if the checkbox is checked
  begin
    if randomStrings.Count > 0 then // If there are already random strings generated
    begin
      index := Random(randomStrings.Count); // Generating a random index in the range of the number of strings
      randomString := randomStrings[index]; // Retrieving a random string from the string list
    end
    else // If no random strings are generated yet
    begin
      randomString := ''; // Set the random string to empty
    end;

    Canvas.Brush.Color := Random(256 * 256 * 256 - 1); // Setting the drawing color to a random color
    Canvas.FillRect(ClientRect); // Filling the canvas (in this case, the Panel) with the random color
    Canvas.Font.Color := clWhite; // Setting the font color to white
    Canvas.Font.Size := StrToInt(RadioGroup1.Items[RadioGroup1.ItemIndex]); // Retrieving the font size based on the selected item in the RadioGroup
    Canvas.Font.Name := 'Arial'; // Setting the font name to Arial
    Canvas.TextOut(X, Y, randomString); // Drawing the random string at the current mouse position
  end;
end;

procedure TForm1.GenerateRandomStrings;
var
  i: Integer;
  s: string;
begin
  randomStrings.Clear; // Clearing the list before generating new strings
  for i := 1 to 10 do // Generating 10 random strings
  begin
    s := ''; // Initializing the current string to empty
    while Length(s) < 30 do // Generating random characters until the string length is 30
    begin
      s := s + Chr(Random(26) + Ord('a')); // Generating a random character and adding it to the string
    end;
    randomStrings.Add(s); // Adding the random string to the list
  end;
end;

end.