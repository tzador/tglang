//This code snippet uses Delphi to create a class and demonstrate inheritance and virtual methods
type
  //This is the parent class
  TParentClass = class
  protected
    //This is a private variable accessible only within the class
    FPrivateVariable : Integer;
  public
    //This is a public variable accessible outside the class
    FPublicVariable : String;

    //This is the constructor for the class, takes in an integer parameter
    constructor Create(AValue : Integer); //The Create method is the constructor for the class
    //This is a virtual method that can be overridden by child classes
    procedure VirtualMethod; virtual;

    //This is a regular method that calculates the addition of FPrivateVariable and the passed in parameter
    function Add(AValue : Integer) : Integer;
  end;

  //This is a child class that inherits from TParentClass
  TChildClass = class(TParentClass)
  public
    //This is a method that overrides the VirtualMethod from the parent class
    procedure VirtualMethod; override;
  end;

//Implementation of TParentClass methods and constructor
constructor TParentClass.Create(AValue : Integer);
begin
  FPrivateVariable := AValue;
  FPublicVariable := 'This is a string'; //Assigning a value to the public variable
end;

procedure TParentClass.VirtualMethod;
begin
  WriteLn('This is the parent class virtual method');
end;

function TParentClass.Add(AValue : Integer) : Integer;
begin
  Result := FPrivateVariable + AValue;
end;

//Implementation of TChildClass method
procedure TChildClass.VirtualMethod;
begin
  WriteLn('This is the child class virtual method');
  inherited; //Calls the parent class method first, then executes the child class method
end;

//Sample usage of the created classes
var
  ParentObject : TParentClass; //Declaring an instance of TParentClass
  ChildObject : TChildClass; //Declaring an instance of TChildClass

begin
  ParentObject := TParentClass.Create(5); //Calling the constructor for TParentClass
  ChildObject := TChildClass.Create(10); //Calling the constructor for TChildClass

  WriteLn(ParentObject.PublicVariable); //Printing the value of the public variable
  WriteLn(ChildObject.PublicVariable); //Printing the value of the public variable from the child class

  ParentObject.VirtualMethod; //Calling the virtual method from the parent class
  ChildObject.VirtualMethod; //Calling the virtual method from the child class, which will call the parent class method first and then its own method

  WriteLn(ParentObject.Add(5)); //Calculating the addition using the regular method from the parent class

  ParentObject.Free; //Freeing the memory allocated for the parent object
  ChildObject.Free; //Freeing the memory allocated for the child object
end.
` ` `DELPHI
//Output:
This is a string 
This is a string 
This is the parent class virtual method 
This is the child class virtual method 
This is the parent class virtual method 
This is the child class virtual method 
 20