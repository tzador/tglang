// This is a comment in Delphi
program ComplexCalculation; // Program declaration

uses // Use clause
  MathHelper, // Importing MathHelper unit
  SysUtils; // Importing SysUtils unit

const // Constant declaration
  PI = 3.141592653589793; // Value of PI

type // Type declaration
  ECalculationError = class(Exception); // Custom exception class

var // Variable declaration
  radius: Double; // Radius of a circle
  result: Double; // Result of calculations

// Function declaration
function CalculateArea(radius: Double): Double;
begin
  if radius < 0 then // Check for negative radius
    raise ECalculationError.Create('Radius cannot be negative'); // Throw exception

  result := Power(radius, 2) * PI; // Calculate area
end;

begin // Main program block
  try // Begin try block
    // User input
    Write('Enter the radius of the circle: '); // Prompt user for input
    ReadLn(radius); // Read user input
    // Calculation
    result := CalculateArea(radius); // Call function to calculate area
    // Output
    WriteLn('The area of the circle with a radius of ', radius, ' is ', result); // Print result
  except // Catch any exceptions
    on E: ECalculationError do // Handle ECalculationError
      WriteLn('Error: ', E.Message); // Print custom error message
    on E: Exception do // Handle any other exceptions
      WriteLn('Unexpected error: ', E.Message); // Print generic error message
  end; // End try block
end. // End of program