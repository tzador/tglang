// This code snippet is a function that calculates the minimum number of moves
// required to arrange an array of integers in ascending order using bubble sort.
// The function takes in an array of integers and returns the minimum number of moves.
function CalculateMinimumMoves(arr: array of Integer): Integer;
var
  i, j, temp: Integer;
  moves: Integer;
  swapped: Boolean;
begin
  moves := 0; // initializes the number of moves to 0
  for i := 0 to Length(arr) - 2 do // loops through the array, excluding the last element
  begin
    swapped := False; // initializes swapped variable to false
    for j := 0 to Length(arr) - 2 - i do // loops through the array, excluding sorted elements
    begin
      if arr[j] > arr[j + 1] then // checks if current element is greater than next element
      begin
        temp := arr[j]; // swaps elements if current element is greater than next element
        arr[j] := arr[j + 1];
        arr[j + 1] := temp;
        swapped := True; // updates swapped variable to true
        moves := moves + 1; // increments moves by 1
      end;
    end;
    if not swapped then // checks if no swaps were made in inner loop
      break; // breaks out of outer loop if array is already sorted
  end;
  Result := moves; // returns the minimum number of moves
end;