unit Main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls;

type
  TMainForm = class(TForm)
    TreeView1: TTreeView;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm} // Direct access to the >Designated-Field Pointer has been added

// Class declaration - used to define the properties and methods of an object
type
  TPerson = class(TObject)
  private
    FFirstName: string; // Private (internal) variable
    FLastName: string; // Private (internal) variable
  public
    constructor Create(AFirstName, ALastName: string); // Constructor method - Initializes an object of type TPerson
    function GetFullName: string; // Public function method - Returns the full name of the person
  end;

// Class implementation - used to define the actual code for the properties and methods of the object
constructor TPerson.Create(AFirstName, ALastName: string);
begin
  FFirstName := AFirstName; // Assign the parameter to the internal variable
  FLastName := ALastName; // Assign the parameter to the internal variable
end;

function TPerson.GetFullName: string;
begin
  Result := FFirstName + ' ' + FLastName; // Combine the first name and last name with a space in between
end;

// Another class declaration - this time with inheritance from TPerson
type
  TEmployee = class(TPerson)
  private
    FPosition: string; // Private (internal) variable
    FSalary: Double; // Private (internal) variable
  public
    constructor Create(AFirstName, ALastName, APosition: string; ASalary: Double); // Constructor method - Initializes an object of type TEmployee
    function GetDetails: string; // Public function method - Returns the full details of the employee
  end;

// Another class implementation - defining the code for the properties and methods of the TEmployee object
constructor TEmployee.Create(AFirstName, ALastName, APosition: string; ASalary: Double);
begin
  inherited Create(AFirstName, ALastName); // Call the constructor of the parent class
  FPosition := APosition; // Assign the parameter to the internal variable
  FSalary := ASalary; // Assign the parameter to the internal variable
end;

function TEmployee.GetDetails: string;
begin
  Result := GetFullName + ' is a ' + FPosition + ' with a salary of $' + FloatToStrF(FSalary, ffCurrency, 10, 2); // Combine the full name, position, and salary into a string
end;

var
  Person1: TPerson; // Create an object of type TPerson
  Employee1: TEmployee; // Create an object of type TEmployee

// Main program code
begin
  Person1 := TPerson.Create('John', 'Doe'); // Create a person with the first name 'John' and last name 'Doe'
  Employee1 := TEmployee.Create('Jane', 'Smith', 'Manager', 50000); // Create an employee with the first name 'Jane', last name 'Smith', position of 'Manager', and salary of $50000

  MainForm.TreeView1.Items.Add(nil, Person1.GetFullName); // Add the person's full name as a top-level node to the tree view
  MainForm.TreeView1.Items.AddChild(MainForm.TreeView1.Items[0], Employee1.GetDetails); // Add the employee's details as a child node to the person's node in the tree view

  Person1.Free; // Destroy the person object
  Employee1.Free; // Destroy the employee object
end.