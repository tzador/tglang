unit Fibonacci;

interface

// This unit contains a function to generate a Fibonacci sequence up to a given number.

function generateFibonacciSequence(limit: Integer): TArray<Integer>;
// The function takes in a limit, which is the highest number the sequence should reach.
// The function returns an array of integers, representing the Fibonacci sequence.

implementation

function generateFibonacciSequence(limit: Integer): TArray<Integer>;
// The function takes in a limit, which is the highest number the sequence should reach.
// The function returns an array of integers, representing the Fibonacci sequence.
var
  sequence: TArray<Integer>; // Create an array to store the Fibonacci sequence
  i: Integer; // Create a variable to store the current index
begin    
  SetLength(sequence, 2); // Set the initial length of the sequence to 2
  sequence[0] := 0; // Set the first number in the sequence to 0
  sequence[1] := 1; // Set the second number in the sequence to 1

  for i := 2 to limit do // Loop through the sequence up to the given limit
  begin
    SetLength(sequence, i+1); // Increase the length of the sequence by 1 for each iteration
    // The next number in the sequence is the sum of the two previous numbers
    sequence[i] := sequence[i-1] + sequence[i-2]; 
  end;

  Result := sequence; // Return the generated sequence
end;

end.
// End of the unit.