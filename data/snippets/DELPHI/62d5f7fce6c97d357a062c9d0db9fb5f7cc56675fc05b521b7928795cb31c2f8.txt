{ This is a complex code snippet in DELPHI.
  It includes various data types, control structures, functions, procedures,
  and objects. It also demonstrates the use of comments and annotations.

  Author: John Doe
}

unit MainUnit; // Unit declaration

interface

uses // List of libraries used in the unit
  System.SysUtils, // Allows the use of system utilities
  Classes, // Allows the use of class definitions
  Math; // Allows the use of math functions

type
  TPerson = class // Class definition for a person
  private
    FFirstName: string; // Private property for first name
    FLastName: string; // Private property for last name
  public
    constructor Create( AFirstName, ALastName: string ); // Constructor with parameters
    procedure PrintFullName(); // Procedure for printing full name
  end;

implementation

{ TPerson }

constructor TPerson.Create( AFirstName, ALastName: string ); // Constructor implementation
begin
  FFirstName := AFirstName;
  FLastName := ALastName;
end;

procedure TPerson.PrintFullName(); // Procedure implementation
begin
  // Use format function to concatenate full name
  WriteLn( Format( 'Full Name: %s %s', [FFirstName, FLastName] ) );
end;

procedure Main(); // Entry point for the program
var
  Name: string; // Variable declaration
  Age: Integer; // Variable declaration
  Person: TPerson; // Object declaration
begin
  // Get user input for name and age
  Write( 'Enter your name: ' );
  ReadLn( Name );
  Write( 'Enter your age: ' );
  ReadLn( Age );

  // Create new person object and call constructor with provided inputs
  Person := TPerson.Create( Name, 'Doe' );

  // Use if-else control structure to print different messages based on age
  if Age < 18 then
    WriteLn( 'You are not allowed to use this program.' )
  else
    WriteLn( 'Welcome to the program!' );

  // Call procedure to print full name
  Person.PrintFullName();
end;

begin
  Main(); // Call Main function
end.