// This code snippet demonstrates how to sort an array in Delphi using the bubble sort algorithm

// Define the array
var
  myArray: array[1..10] of Integer;

// Fill the array with random numbers
for i: Integer := 1 to 10 do
  myArray[i] := Random(100);

// Define a temporary variable
var
  temp: Integer;

// Create a "swapped" flag to check if any swaps were made
var
  swapped: Boolean;

// Start the bubble sort algorithm
repeat

  // Reset the "swapped" flag at the beginning of each iteration
  swapped := False;

  // Loop through the array
  for i: Integer := 1 to 9 do
  begin
    // Compare the current element with the next element
    if myArray[i] > myArray[i + 1] then
    begin
      // Swap the elements if the current element is greater than the next element
      temp := myArray[i];
      myArray[i] := myArray[i + 1];
      myArray[i + 1] := temp;

      // Set the "swapped" flag to True
      swapped := True;
    end;
  end;

// Continue the loop until no swaps are made
until swapped = False;

// Print the sorted array
for i: Integer := 1 to 10 do
  WriteLn(myArray[i]);