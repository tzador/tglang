// This code snippet demonstrates how to create a class and use methods and properties in DELPHI

unit Unit1; // creates a unit (container for code)

interface  // declares the interface section

type
  TPerson = class    // class declaration 
  private
    FName: string;   // private property
  public
    constructor Create(Name: string); overload;    // constructor method
    destructor Destroy; override;                 // destructor method
    function GetInitials: string;                  // public method
    property Name: string read FName write FName;  // property declaration
  end;

implementation  // declares the implementation section

constructor TPerson.Create(Name: string);                  // constructor method definition
begin
  FName := Name;                                           // initializes private property
  ShowMessage('Welcome ' + FName + '!');                   // displays a message using ShowMessage function
end;

destructor TPerson.Destroy;                                // destructor method definition
begin
  ShowMessage('Goodbye ' + FName + '!');                   // displays a message using ShowMessage function
  inherited;                                               // calls parent destructor
end;

function TPerson.GetInitials: string;                      // method definition
var
  Initials: string;
begin
  Initials := FName[1];                                    // assigns first letter of name to initials variable
  Initials := Initials + FName[Pos(' ', FName) + 1];       // appends first letter after space to initials
  Result := UpperCase(Initials);                            // returns initials in uppercase
end;

// Main program
var
  John: TPerson;                   // declaration of object using class TPerson
begin
  John := TPerson.Create('John');   // instantiates object with name 'John'
  ShowMessage('Initials: ' + John.GetInitials);   // displays John's initials using GetInitials method
  John.Free;                      // frees memory for object John
end;