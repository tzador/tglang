unit MyUnit;

interface

type
  // Creating a class to represent a mathematical function and its parameters
  TMyFunction = class
  private
    FName: string;
    FParameters: array[0..4] of Double; // Parameters for the function, assuming there are 5 parameters
    FSolution: Double; // Will hold the resulting solution of the function

    // Function to calculate the solution using the given parameters
    function CalculateSolution: Double;
  public
    // Constructor to initialize the object with a function name and a set of parameters
    constructor Create(Name: string; Parameters: array of Double);

    // Property to get the function name
    property Name: string read FName;
    // Property to get the solution of the function
    property Solution: Double read FSolution;

    // Method to print out the solution of the function
    procedure PrintSolution;
  end;

implementation

// Constructor for the TMyFunction class, with default parameters
constructor TMyFunction.Create(Name: string; Parameters: array of Double);
begin
  FName := Name;
  // Loop through all elements of the Parameters array and assign them to the FParameters array
  for var i := Low(Parameters) to High(Parameters) do
    FParameters[i] := Parameters[i];
  // Call the CalculateSolution function to get the solution and assign it to FSolution
  FSolution := CalculateSolution;
end;

// Function to calculate the solution using the given parameters
function TMyFunction.CalculateSolution: Double;
var
  // Temporary variables to store the given parameters, for readability
  Param1, Param2, Param3, Param4, Param5: Double;
begin
  // Assign the parameters to the temporary variables
  Param1 := FParameters[0];
  Param2 := FParameters[1];
  Param3 := FParameters[2];
  Param4 := FParameters[3];
  Param5 := FParameters[4];

  // Perform the calculation to get the solution
  Result := ((Param1 + Param2) * (Param3 / Param4)) - Param5;
end;

// Method to print out the solution of the function
procedure TMyFunction.PrintSolution;
begin
  // Output the function name and the solution to the console
  Writeln('The solution for function ', FName, ' is: ', FSolution);
end;

end.