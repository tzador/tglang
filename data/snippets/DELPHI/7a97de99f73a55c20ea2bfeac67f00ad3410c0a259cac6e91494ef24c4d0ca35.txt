unit TestUnit;

interface

uses
  SysUtils, Classes;

type
  TTestClass = class(TObject)
  private
    FTestString: string;
    FTestInteger: Integer;
  public
    constructor Create; virtual;
    property TestString: string read FTestString write FTestString;
    property TestInteger: Integer read FTestInteger write FTestInteger;
  end;

  TTestFunctionClass = class
  private
    class procedure TestProcedure(Param1, Param2, Param3: Integer); static;
  public
    class function TestFunction(Parameter: string): string; static;
  end;

implementation

{ TTestClass }

constructor TTestClass.Create;
begin
  FTestString := 'Default String';
  FTestInteger := 0;
end;

{ TTestFunctionClass }

class function TTestFunctionClass.TestFunction(Parameter: string): string;
var
  I: Integer;
begin
  Result := 'The parameter is: ' + Parameter;
  for I := 1 to Length(Parameter) do
  begin
    if (Parameter[I] = 'a') or (Parameter[I] = 'A') then
      Result := Result + ', and ' + IntToStr(I) + ' is the index of "a"';
  end;
end;

class procedure TTestFunctionClass.TestProcedure(Param1, Param2, Param3: Integer);
begin
  if Param1 > Param2 then
    Param3 := (Param1 - Param2) * 2
  else
    Param3 := Param1 + Param2;
end;

end.