{ This code snippet uses the 'InterlockedCompareExchange' function to establish a thread-safe counter }

unit Counter;

interface

uses
  Windows;

type
  TInterlockedCounter = class
  private
    FValue: Integer;
  public
    constructor Create(AInitialValue: Integer = 0);
    function Increment: Integer;
    function Decrement: Integer;
  end;

implementation

// Constructor to set initial value
constructor TInterlockedCounter.Create(AInitialValue: Integer);
begin
  FValue := AInitialValue;
end;

// Function to increment the counter value
function TInterlockedCounter.Increment: Integer;
begin
  // Uses InterlockedCompareExchange to increment the value in a thread-safe manner
  Result := InterlockedCompareExchange(FValue, FValue + 1, FValue);
end;

// Function to decrement the counter value
function TInterlockedCounter.Decrement: Integer;
begin
  // Uses InterlockedCompareExchange to decrement the value in a thread-safe manner
  Result := InterlockedCompareExchange(FValue, FValue - 1, FValue);
end;

end.