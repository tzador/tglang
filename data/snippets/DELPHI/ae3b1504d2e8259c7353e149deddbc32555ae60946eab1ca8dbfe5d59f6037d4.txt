procedure MergeSort(var A: array of Integer; l, r: Integer);
var
  m, i, j, k: Integer;
  temp: array of Integer;
begin
  if r > l then   // check if array needs sorting
  begin
    m := (l + r) div 2;   // calculate middle index

    MergeSort(A, l, m);   // recursively sort left half
    MergeSort(A, m + 1, r);  // recursively sort right half

    // merge sorted halves
    k := 0;
    i := l;
    j := m + 1;

    while (i <= m) and (j <= r) do
    begin
      if A[i] <= A[j] then
      begin
        SetLength(temp, k + 1);
        temp[k] := A[i];
        i := i + 1;
      end
      else
      begin
        SetLength(temp, k + 1);
        temp[k] := A[j];
        j := j + 1;
      end;
      k := k + 1;
    end;

    // add remaining elements from left half
    while i <= m do
    begin
      SetLength(temp, k + 1);
      temp[k] := A[i];
      i := i + 1;
      k := k + 1;
    end;

    // add remaining elements from right half
    while j <= r do
    begin
      SetLength(temp, k + 1);
      temp[k] := A[j];
      j := j + 1;
      k := k + 1;
    end;

    // copy sorted elements back to original array
    for i := l to r do
      A[i] := temp[i - l];
  end;
end;