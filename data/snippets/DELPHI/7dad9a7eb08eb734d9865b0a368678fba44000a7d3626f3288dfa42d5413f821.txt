//Declare variables
var
  i, j, n, k: Integer;
  arr: array of Integer;
  flag: Boolean;
begin

  //Initialize variables
  n := 10;
  k := 5;

  //Generate random array of integers
  SetLength(arr, n);
  for i := 0 to n - 1 do
    arr[i] := Random(100);

  //Display array elements
  writeln('Input array:');
  for i := 0 to n - 1 do
    write(arr[i], ' ');

  writeln;

  //Sort array in ascending order using bubble sort algorithm
  for i := 0 to n - 2 do
  begin
    for j := 0 to n - i - 2 do
    begin
      if arr[j] > arr[j + 1] then
      begin
        //Swap elements
        flag := True;
        arr[j + 1] := arr[j + 1] + arr[j];
        arr[j] := arr[j + 1] - arr[j];
        arr[j + 1] := arr[j + 1] - arr[j];

        //Set flag to false, indicating that a swap has occurred
        flag := False;
      end;

      //Exit inner loop if there are no more swaps to be made
      if flag = True then
        Break;
    end;
  end;

  //Display sorted array elements using binary search
  writeln('Sorted array:');
  while k < n do
  begin
    //Perform binary search
    i := 0;
    j := n - 1;
    while i <= j do
    begin
      //Calculate midpoint
      k := (i + j) div 2;

      //Check if target element is at midpoint
      if arr[k] = arr[j] then
      begin
        writeln('Target element found at index ', k);
        Break;
      end
      //If target element is less than midpoint, adjust upper bound
      else if arr[k] > arr[j] then
        j := k - 1
      //If target element is greater than midpoint, adjust lower bound
      else
        i := k + 1;
    end;
  end;
end.