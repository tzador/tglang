unit Main;
{This is the main unit of our program.}

interface

uses
  Classes, SysUtils, Windows;

const
  MAX_SIZE = 100; {Constant variable for maximum size.}
  ERROR_CODE = -1; {Constant variable for error code.}

type
  TPerson = class(TObject) {This is our custom class for a person.}
  private
    FLastName: string; {Private variable for storing the last name.}
    FFirstName: string; {Private variable for storing the first name.}
  public
    constructor Create(const AFirstName, ALastName: string); {Custom constructor for creating a TPerson object.}
    property LastName: string read FLastName write FLastName; {Public property for getting and setting the last name.}
    property FirstName: string read FFirstName write FFirstName; {Public property for getting and setting the first name.}
  end;

var
  PersonArray: array[0..MAX_SIZE-1] of TPerson; {Global variable for an array of TPerson objects.}

{Function for sorting the PersonArray by last name in ascending order.}
function SortByLastName(Item1, Item2: Pointer): Integer; stdcall;
begin
  Result := CompareText(TPerson(Item1).LastName, TPerson(Item2).LastName);
end;

{Function for searching for a specific person in the PersonArray.}
function SearchPerson(Person: TPerson): Integer;
var
  FoundIndex: Integer; {Local variable for storing the index of the found person.}
begin
  FoundIndex := 0; {Initialize the found index to 0.}
  while (FoundIndex < MAX_SIZE) and (PersonArray[FoundIndex] <> Person) do {Loop through the array until the person is found or the end is reached.}
    Inc(FoundIndex); {Increment the found index.}
  if FoundIndex = MAX_SIZE then {Check if the person was not found.}
    Result := ERROR_CODE {Return error code.}
  else {Otherwise, return the index of the found person.}
    Result := FoundIndex;
end;

implementation

constructor TPerson.Create(const AFirstName, ALastName: string); {Implementation of the custom constructor.}
begin
  FLastName := ALastName; {Assign the last name.}
  FFirstName := AFirstName; {Assign the first name.}
end;

begin
  PersonArray[0] := TPerson.Create('John', 'Smith'); {Create a new TPerson object and assign it to the first index of the PersonArray.}
  PersonArray[1] := TPerson.Create('Jane', 'Doe'); {Create a new TPerson object and assign it to the second index of the PersonArray.}
  PersonArray[2] := TPerson.Create('Michael', 'Johnson'); {Create a new TPerson object and assign it to the third index of the PersonArray.}
  PersonArray[3] := TPerson.Create('Samantha', 'Wilson'); {Create a new TPerson object and assign it to the fourth index of the PersonArray.}
  QuickSort(@PersonArray, MAX_SIZE, SizeOf(TPerson), SortByLastName); {Sort the PersonArray using the SortByLastName function.}
  // Now the PersonArray is sorted in ascending order by last name.
  WriteLn('Searching for Samantha Wilson...'); // Output: Searching for Samantha Wilson...
  if SearchPerson(TPerson.Create('Samantha', 'Wilson')) <> ERROR_CODE then // Check if the person was found.
    WriteLn('Samantha Wilson found!') // Output: Samantha Wilson found!
  else
    WriteLn('Samantha Wilson not found. Error code: ', ERROR_CODE); // Output: Samantha Wilson not found. Error code: -1
end.