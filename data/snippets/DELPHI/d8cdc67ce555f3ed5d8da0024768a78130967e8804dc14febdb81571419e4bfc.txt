unit Calculator;

interface
uses sysutils, math;

type
    TCalculator = class // Declare a class called TCalculator
        private
            FNumber: Integer; // Private variable to store numbers
        public
            function Add(A, B: Integer): Integer; // Function to add two numbers
            function Subtract(A, B: Integer): Integer;// Function to subtract two numbers
            function Multiply(A, B: Integer): Integer; // Function to multiply two numbers
            function Divide(A, B: Integer): Integer; // Function to divide two numbers and return integer result
            function Power(A, B: Integer): Integer; // Function to raise A to the power of B and return integer result
            function SquareRoot(A: Integer): Double; // Function to find the square root of a number and return a double
            function Factorial(A: Integer): Integer; // Function to find the factorial of a number and return an integer
        end;

implementation

function TCalculator.Add(A, B: Integer): Integer;
begin
    Result := A + B; // Add A and B and store the result in the Result variable
end;

function TCalculator.Subtract(A, B: Integer): Integer;
begin
    Result := A - B; // Subtract B from A and store the result in the Result variable
end;

function TCalculator.Multiply(A, B: Integer): Integer;
begin
    Result := A * B; // Multiply A and B and store the result in the Result variable
end;

function TCalculator.Divide(A, B: Integer): Integer;
begin
    Result := A div B; // Divide A by B and store the integer result in the Result variable
end;

function TCalculator.Power(A, B: Integer): Integer;
begin
    Result := Round(IntPower(A, B)); // Raise A to the power of B and round the result before storing it in the Result variable
end;

function TCalculator.SquareRoot(A: Integer): Double;
begin
    Result := Sqrt(A); // Find the square root of A and return a double
end;

function TCalculator.Factorial(A: Integer): Integer;
var
    i: Integer;
begin
    Result := 1; // Initialize the Result variable to 1
    for i := 1 to A do // Loop from 1 to A
    begin
        Result := Result * i; // Multiply the current result by the current value of i
    end;
end;