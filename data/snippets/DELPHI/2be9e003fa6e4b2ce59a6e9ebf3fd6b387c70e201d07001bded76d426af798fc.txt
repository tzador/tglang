/// This is a class declaration in DELPHI
type
  /// This is a class called 'TMyClass'
  TMyClass = class
  private
    /// This is a private member variable called 'FName'
    FName: String;
  public
    /// This is a public constructor for the class
    constructor Create;
    /// This is a public destructor for the class
    destructor Destroy; override;
    /// This method sets the value of 'FName'
    /// @param AName the new value to set
    procedure SetName(AName: String);
    /// This method gets the current value of 'FName'
    /// @returns the current value of 'FName'
    function GetName: String;
    /// This is a virtual method that can be overridden by subclasses
    /// @param AMessage the message to display
    virtual procedure DisplayMessage(AMessage: String); virtual;
  end;

/// This is the constructor for TMyClass
constructor TMyClass.Create;
begin
  inherited;
  FName := 'John'; // assigns a default value to FName
end;

/// This is the destructor for TMyClass
destructor TMyClass.Destroy;
begin
  // perform cleanup tasks
  inherited;
end;

/// This is a method to set the value of 'FName'
procedure TMyClass.SetName(AName: String);
begin
  FName := AName;
end;

/// This is a method to get the current value of 'FName'
function TMyClass.GetName: String;
begin
  Result := FName;
end;

/// This is an example of overriding the DisplayMessage method
procedure TMyOtherClass.DisplayMessage(AMessage: String);
begin
  inherited; // calls the superclass method first
  ShowMessage('Hello ' + AMessage); // displays the message with a prefix
end;

/// This is another class which inherits from TMyClass
type
  TMyOtherClass = class(TMyClass)
  public
    /// This is a public constructor that calls the inherited constructor
    constructor Create;
    /// This is an example of overriding a virtual method
    procedure DisplayMessage(AMessage: String); override;
  end;

/// This is the constructor for TMyOtherClass
constructor TMyOtherClass.Create;
begin
  inherited;
end;

/// This is an example of overriding the DisplayMessage method
procedure TMyOtherClass.DisplayMessage(AMessage: String);
begin
  inherited; // calls the superclass method first
  ShowMessage('Goodbye ' + AMessage); // displays the message with a prefix
end;

/// Example usage of TMyClass and TMyOtherClass
var
  MyClass: TMyClass;
  MyOtherClass: TMyOtherClass;
begin
  MyClass := TMyClass.Create; // creates an instance of TMyClass
  MyOtherClass := TMyOtherClass.Create; // creates an instance of TMyOtherClass
  MyClass.SetName('Jane'); // sets the name of TMyClass instance
  MyOtherClass.SetName('Jane'); // sets the name of TMyOtherClass instance
  // displays the current names of the instances
  Writeln(MyClass.GetName); // output: Jane
  Writeln(MyOtherClass.GetName); // output: Jane
  MyClass.DisplayMessage('World'); // calls the DisplayMessage method
  MyOtherClass.DisplayMessage('World'); // calls the overridden DisplayMessage method
  MyClass.Free; // frees the instance of TMyClass
  MyOtherClass.Free; // frees the instance of TMyOtherClass
end.