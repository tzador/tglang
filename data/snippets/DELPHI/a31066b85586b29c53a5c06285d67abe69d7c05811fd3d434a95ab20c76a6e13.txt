// This code snippet shows how to implement a quicksort algorithm in Delphi

procedure QuickSort(var arr: array of Integer; low, high: Integer);
// This procedure sorts an array using the quicksort algorithm
var
  i, j, pivot, temp: Integer;

begin
  if low < high then
  // If there are more than one element in the array
  begin
    pivot := low; // Choose a pivot element, in this case the first element in the array
    i := low;
    j := high;

    while i < j do // While the indices haven't crossed each other
    begin
      while (arr[i] < arr[pivot]) and (i < high) do // Find an element from the left that is greater than the pivot
        i := i + 1;

      while arr[j] > arr[pivot] do // Find an element from the right that is smaller than the pivot
        j := j - 1;

      if i < j then // If the two elements haven't crossed, swap them
      begin
        temp := arr[i];
        arr[i] := arr[j];
        arr[j] := temp;
      end;
    end;

    temp := arr[pivot];
    arr[pivot] := arr[j];
    arr[j] := temp;
    // At this point, all elements to the left of the pivot are smaller than it and all elements to the right are greater than it

    QuickSort(arr, low, j - 1); // Sort the left subarray recursively
    QuickSort(arr, j + 1, high); // Sort the right subarray recursively
  end;
end;

// Example usage:
var
  arr: array[1..10] of Integer; // Declare an array of integers
var
  i: Integer;
begin
  for i := 1 to 10 do // Populate the array with random values
  begin
    arr[i] := Random(10);
    Write(arr[i], ' ');
  end;
  Writeln;

  QuickSort(arr, 1, 10); // Sort the array

  for i := 1 to 10 do // Print the sorted array
    Write(arr[i], ' ');