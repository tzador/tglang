unit Unit1; //Defining a unit in Delphi

interface //Keyword to define the interface section of a unit

uses //Keyword to define the list of units used in the program
  Sysutils, //Example of a unit being used
  Classes, //Example of another unit being used
  Dialogs; //Example of third unit being used

type //Keyword to define the type section of a unit
  TMyClass = class(TObject) //Defining a class named TMyClass which inherits from TObject
  private //Keyword to define the private section of a class
    FSomeInt: Integer; //Declaring a private variable of type Integer
    FSomeString: string; //Declaring a private variable of type string

    procedure PrivateProcedure; //Defining a private procedure within the class
  protected //Keyword to define the protected section of a class
    procedure ProtectedProcedure; //Defining a protected procedure within the class
  public //Keyword to define the public section of a class
    constructor Create; //Defining a public constructor for the class

    function PublicFunction(param: Integer): string; //Defining a public function with a parameter and return type of string
  end; //End of class declaration

implementation //Keyword to define the implementation section of a unit

{ TMyClass } //Defining the class for which the following procedures and functions belong to
constructor TMyClass.Create; //Implementing the public constructor for the class
begin
  inherited Create; //Calling the constructor of the inherited class
  FSomeInt := 5; //Assigning a value to the private variable FSomeInt
end;

procedure TMyClass.PrivateProcedure; //Implementing the private procedure for the class
begin
  ShowMessage('This is a private procedure.'); //Displaying a message box
end;

procedure TMyClass.ProtectedProcedure; //Implementing the protected procedure for the class
begin
  ShowMessage('This is a protected procedure.'); //Displaying a message box
end;

function TMyClass.PublicFunction(param: Integer): string; //Implementing the public function for the class
begin
  Result := 'The parameter value is ' + IntToStr(param); //Assigning a value to the return variable and converting the parameter to a string
end;

begin //Start of the program
  var //Keyword to define a variable within a program
    myObject: TMyClass; //Declaring a variable of type TMyClass

  myObject := TMyClass.Create; //Creating an instance of the class and assigning it to the variable

  try //Start of try block
    myObject.ProtectedProcedure; //Calling the protected procedure of the class
    ShowMessage(myObject.PublicFunction(10)); //Displaying the result of the public function
  finally //Start of finally block
    myObject.Free; //Freeing the instance of the class
  end; //End of try-finally block
end. //End of program