unit ComplexArithmetic;

interface

uses Math;

type
  TComplexNumber = record // Defines a record type for a complex number
    RealPart: Double; // Stores the real part of the complex number
    ImaginaryPart: Double; // Stores the imaginary part of the complex number
  end;

// Adds two complex numbers and returns the result
function AddComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
// Subtracts Complex2 from Complex1 and returns the result
function SubtractComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
// Multiplies two complex numbers and returns the result
function MultiplyComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
// Divides Complex1 by Complex2 and returns the result
function DivideComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;

implementation

// Adds two complex numbers and returns the result
function AddComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
begin
  Result.RealPart := Complex1.RealPart + Complex2.RealPart; // Adds the real parts
  Result.ImaginaryPart := Complex1.ImaginaryPart + Complex2.ImaginaryPart; // Adds the imaginary parts
end;

// Subtracts Complex2 from Complex1 and returns the result
function SubtractComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
begin
  Result.RealPart := Complex1.RealPart - Complex2.RealPart; // Subtracts the real parts
  Result.ImaginaryPart := Complex1.ImaginaryPart - Complex2.ImaginaryPart; // Subtracts the imaginary parts
end;

// Multiplies two complex numbers and returns the result
function MultiplyComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
begin
  Result.RealPart := Complex1.RealPart * Complex2.RealPart - Complex1.ImaginaryPart * Complex2.ImaginaryPart; // Multiplies the real parts and subtracts the product of the imaginary parts
  Result.ImaginaryPart := Complex1.RealPart * Complex2.ImaginaryPart + Complex1.ImaginaryPart * Complex2.RealPart; // Multiplies the real part of Complex1 with the imaginary part of Complex2 and adds the product of the imaginary part of Complex1 with the real part of Complex2
end;

// Divides Complex1 by Complex2 and returns the result
function DivideComplexNumbers(Complex1, Complex2: TComplexNumber): TComplexNumber;
var
  Divisor: Double; // Stores the divisor
begin
  Divisor := Sqr(Complex2.RealPart) + Sqr(Complex2.ImaginaryPart); // Calculates the divisor by squaring each part of Complex2 and adding them
  Result.RealPart := (Complex1.RealPart * Complex2.RealPart + Complex1.ImaginaryPart * Complex2.ImaginaryPart) / Divisor; // Multiplies the real part of Complex1 and Complex2 and adds the product of the imaginary parts, then divides by the divisor
  Result.ImaginaryPart := (Complex1.ImaginaryPart * Complex2.RealPart - Complex1.RealPart * Complex2.ImaginaryPart) / Divisor; // Multiplies the imaginary part of Complex1 and the real part of Complex2 and subtracts the product of the real parts, then divides by the divisor
end;

end.