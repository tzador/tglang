//This code snippet is for implementing a binary search algorithm in DELPHI language

//Create a function named "binarySearch" which takes in 3 parameters - a sorted array of integers "arr", the value to search for "target", and the size of the array "n"
function binarySearch(arr: array of integer; target: integer; n: integer): integer;
var
    low, high, mid: integer;  //declare variables for storing the indices of the low, high and mid points of the array
begin
    low := 0; //initialize low to 0
    high := n - 1; //initialize high to size of the array - 1

    while(low <= high) do //while loop to continue searching until low is less than or equal to high
    begin
        mid := (low + high) div 2; //calculate the mid point of the array
        if(arr[mid] = target) then //if the mid point value is equal to the target, return its index
            Result := mid
        else if(arr[mid] < target) then //if the mid point value is less than the target, then the target must be in the second half of the array
            low := mid + 1 //set low to the mid point index + 1
        else
            high := mid - 1 //if the mid point value is greater than the target, then the target must be in the first half of the array, so set high to the mid point index - 1
    end;

    //if the target is not found after the while loop, return -1 to indicate it was not found in the array
   Result := -1;
end;

//Create an array of integers to be searched
arr: array[0..9] of integer = (1, 3, 5, 7, 10, 14, 16, 19, 21, 25);
//Call the binarySearch function and pass in the array, the value to search for (10), and the size of the array (10)
index := binarySearch(arr, 10, 10);
//Print out the result of the search, which in this case should be 4 since 10 is located at index 4 in the array
WriteLn(index);