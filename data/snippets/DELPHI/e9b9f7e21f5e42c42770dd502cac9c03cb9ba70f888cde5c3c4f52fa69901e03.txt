procedure MergeSort(var arr: array of Integer; startIdx: Integer; endIdx: Integer);
var
    len, mid, i, j, k: Integer;
    buf, left, right: array of Integer;
begin
    len := endIdx - startIdx;
    mid := (startIdx + endIdx) div 2;
    
    if len <= 1 then 
        Exit;
    
    SetLength(left, mid - startIdx);
    SetLength(right, endIdx - mid);
    
    // Copy original array into left and right subarrays
    for i := 0 to mid - startIdx - 1 do
        left[i] := arr[startIdx + i];
        
    for i := 0 to endIdx - mid - 1 do
        right[i] := arr[mid + i];
        
    // Recursively sort left and right subarrays
    MergeSort(left, 0, mid - startIdx);
    MergeSort(right, 0, endIdx - mid);
    
    // Merge sorted subarrays into buf array
    i := 0;
    j := 0;
    k := 0;
    
    while (i < Length(left)) and (j < Length(right)) do
    begin
        if left[i] < right[j] then
        begin
            buf[k] := left[i];
            i := i + 1;
        end
        else
        begin
            buf[k] := right[j];
            j := j + 1;
        end;
        k := k + 1;
    end;
    
    // Copy remaining elements from left subarray
    while i < Length(left) do
    begin
        buf[k] := left[i];
        i := i + 1;
        k := k + 1;
    end;
    
    // Copy remaining elements from right subarray
    while j < Length(right) do
    begin
        buf[k] := right[j];
        j := j + 1;
        k := k + 1;
    end;
    
    // Copy sorted elements from buf back into original array
    for i := 0 to len - 1 do
        arr[startIdx + i] := buf[i];
end;