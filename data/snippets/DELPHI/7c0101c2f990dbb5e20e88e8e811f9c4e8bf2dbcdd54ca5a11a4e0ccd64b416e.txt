{ This program demonstrates a complex algorithm for finding the median of a set of numbers }
program MedianCalculator;

uses math; // using the math library for sorting the set of numbers

var
  numbers: array[1..10] of integer; // declaring an array to hold the numbers
  median: integer; // declaring a variable for the median value

procedure bubbleSort(var arr: array of integer); // defining a procedure for sorting the numbers in ascending order
var
  i, j, temp: integer;
begin
  for i := Low(arr) to High(arr) - 1 do // looping through the array
  begin
    for j := Low(arr) to High(arr) - i - 1 do
    begin
      if arr[j] > arr[j+1] then // comparing two adjacent numbers
      begin
        temp := arr[j]; // swapping the numbers if they are not in ascending order
        arr[j] := arr[j+1];
        arr[j+1] := temp;
      end;
    end;
  end;
end;

function findMedian(arr: array of integer): integer; // defining a function to find the median of a set of numbers
begin
  bubbleSort(arr); // calling the bubbleSort procedure to sort the numbers in ascending order
  if Length(arr) mod 2 = 0 then // if the number of numbers is even
    Result := (arr[(Length(arr) div 2) - 1] + arr[Length(arr) div 2]) div 2 // the median is the average of the two middle numbers
  else // if the number of numbers is odd
    Result := arr[Length(arr) div 2]; // the median is the middle number
end;

begin // the main program block
  // getting input from the user and storing it in the numbers array
  writeln('Enter 10 numbers:');
  for var i := 1 to 10 do
  begin
    readln(numbers[i]);
  end;
  
  median := findMedian(numbers); // calling the findMedian function to find the median value
  
  // printing the output to the user
  writeln('The median is: ', median);
end.