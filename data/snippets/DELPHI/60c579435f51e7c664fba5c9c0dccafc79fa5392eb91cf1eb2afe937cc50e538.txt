function mergeSort(arr: array of Integer): array of Integer;
begin
  if Length(arr) <= 1 then
    Exit(arr);
  
  var midIndex: Integer := Length(arr) div 2;
  var leftArray: array of Integer := copy(arr, 0, midIndex); // use Delphi's built-in copy function to create left sub-array
  var rightArray: array of Integer := copy(arr, midIndex, Length(arr) - midIndex); // use Delphi's built-in copy function to create right sub-array
  
  // call mergeSort recursively on left and right sub-arrays
  leftArray := mergeSort(leftArray);
  rightArray := mergeSort(rightArray);
  
  // perform merging step
  Result := merge(leftArray, rightArray);
end;