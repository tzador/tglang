'
// This is a complex class that implements a binary search tree
type
  TNode = class
    value: Integer;  // stores the value of the node
    left: TNode;     // points to the left child node
    right: TNode;    // points to the right child node

    constructor Create(val: Integer);  // constructor to create a new node
  end;

  TBinarySearchTree = class
    root: TNode;  // points to the root node of the tree

    constructor Create;  // constructor to create a new tree

    // Function to insert a new node into the tree
    // Parameters:
    // val: Integer - value to be inserted into the tree
    procedure InsertNode(val: Integer);
  end;

constructor TNode.Create(val: Integer);
begin
  value := val;    // set the value of the node
  left := nil;     // initialize left child node as nil
  right := nil;    // initialize right child node as nil
end;

// Constructor for the binary search tree
constructor TBinarySearchTree.Create;
begin
  root := nil;    // initialize the root node as nil
end;

// Function to insert a new node into the tree
procedure TBinarySearchTree.InsertNode(val: Integer);
var
  currentNode, parentNode, newNode: TNode;
begin
  newNode := TNode.Create(val);    // create a new node with the given value
  if root = nil then    // if tree is empty
    root := newNode     // set the new node as the root
  else
  begin
    currentNode := root;    // start at the root node
    parentNode := nil;      // initialize parent node as nil
    while currentNode <> nil do
    begin
      parentNode := currentNode;    // set parent node as current node
      if val < currentNode.value then    // if value is less than current node value
        currentNode := currentNode.left  // move to the left child node
      else                                // if value is greater than current node value
        currentNode := currentNode.right; // move to the right child node
    end;
    // once a null node is reached, insert the new node
    if val < parentNode.value then
      parentNode.left := newNode
    else
      parentNode.right := newNode;
  end;
end;