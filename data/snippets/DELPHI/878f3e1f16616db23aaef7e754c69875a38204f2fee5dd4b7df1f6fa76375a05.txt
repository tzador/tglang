// This code snippet shows an example of sorting an array of integers using the Quicksort algorithm in Delphi.

program Quicksort;

//Defining the types
type IntArray = array of Integer;

//Function to partition the array
function Partition(var nums: IntArray; left, right: Integer): Integer;
var
  pivot, temp: Integer;
  i, j: Integer;
begin
  pivot := nums[left];
  i := left;
  j := right + 1;

  //Partitioning the array
  repeat
    repeat
      i := i + 1;
    until nums[i] >= pivot;
    repeat
      j := j - 1;
    until nums[j] <= pivot;

    //Swapping values
    temp := nums[i];
    nums[i] := nums[j];
    nums[j] := temp;
  until i >= j;

  //Putting the pivot in its correct position
  temp := nums[i];
  nums[i] := nums[j];
  nums[j] := temp;
  temp := nums[left];
  nums[left] := nums[j];
  nums[j] := temp;
  Partition := j;
end;

//Function to perform Quicksort
procedure Quicksort(var nums: IntArray; left, right: Integer);
var
  i: Integer;
begin
  if left < right then
  begin
    //Partitioning the array
    i := Partition(nums, left, right);

    //Sorting the left and right sub-arrays
    Quicksort(nums, left, i - 1);
    Quicksort(nums, i + 1, right);
  end;
end;

//Initializing the array
var
  arr: IntArray;
  i: Integer;

begin
  //Setting array size and values
  SetLength(arr, 10);
  arr[0] := 5;
  arr[1] := 2;
  arr[2] := 9;
  arr[3] := 4;
  arr[4] := 1;
  arr[5] := 7;
  arr[6] := 3;
  arr[7] := 8;
  arr[8] := 6;
  arr[9] := 10;

  //Printing the unsorted array
  WriteLn('Unsorted Array:');
  for i := 0 to Length(arr) - 1 do
  begin
    Write(arr[i], ' ');
  end;

  //Sorting the array using Quicksort
  Quicksort(arr, 0, Length(arr) - 1);

  //Printing the sorted array
  WriteLn;
  WriteLn('Sorted Array:');
  for i := 0 to Length(arr) - 1 do
  begin
    Write(arr[i], ' ');
  end;
end.