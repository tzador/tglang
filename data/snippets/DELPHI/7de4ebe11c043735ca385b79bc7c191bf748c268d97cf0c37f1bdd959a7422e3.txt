{ This code snippet demonstrates a complex sorting algorithm called Quick Sort in Delphi. }

{ First, declare the function quickSort that takes in an array of integers and two indices as parameters. }

procedure quickSort(var arr: array of Integer, lowIndex: Integer, highIndex: Integer);

{ Create the variables i, j, pivot, and temp for use in the algorithm. }

var
  i, j, pivot, temp: Integer;

{ Check if the low index is less than the high index to ensure there are elements to sort. }

if lowIndex < highIndex then
begin

    { Set the pivot to the middle element of the array using integer division. }

    pivot := arr[(lowIndex + highIndex) div 2];

    { Set i and j to the low index and high index, respectively. }

    i := lowIndex;
    j := highIndex;

    { Start the while loop for partitioning the array. }

    while i <= j do
    begin

        { Increment i while the element at i is less than the pivot. }

        while arr[i] < pivot do
            i := i + 1;

        { Decrement j while the element at j is greater than the pivot. }

        while arr[j] > pivot do
            j := j - 1;

        { If i is less than or equal to j, swap the elements at i and j,
          and increment i and decrement j. }

        if i <= j then
        begin
            temp := arr[i];
            arr[i] := arr[j];
            arr[j] := temp;
            i := i + 1;
            j := j - 1;
         end;
     end;

     { Recursive calls for the left and right partitions of the array. }

     if lowIndex < j then
        quickSort(arr, lowIndex, j);
     if i < highIndex then
        quickSort(arr, i, highIndex);
end;