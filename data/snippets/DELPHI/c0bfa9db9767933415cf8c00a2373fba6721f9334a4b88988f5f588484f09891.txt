procedure SortArray(var Arr: array of Integer; StartIndex, EndIndex: Integer);
var
  I, J, Pivot, Temp: Integer; {define variables for indices and pivot value}
begin
  if StartIndex < EndIndex then {check if the start index is less than the end index}
  begin
    Pivot := Arr[StartIndex]; {assign the pivot value as the first element in the array}
    I := StartIndex; {set the first index as the start index}
    J := EndIndex; {set the last index as the end index}
    while I < J do {loop until the two indices meet}
    begin
      while (Arr[I] < Pivot) do {loop while the element at index I is less than the pivot value}
        I := I + 1; {increment the index}
      while (Arr[J] > Pivot) do {loop while the element at index J is greater than the pivot value}
        J := J - 1; {decrement the index}
      if (I <= J) then {check if the two indices have not crossed each other}
      begin
        {swap the elements at index I and J}
        Temp := Arr[I];
        Arr[I] := Arr[J];
        Arr[J] := Temp;
        {update the indices}
        I := I + 1;
        J := J - 1;
      end;
    end;
    {recursively call the procedure for the subarrays on either side of the pivot}
    SortArray(Arr, StartIndex, J);
    SortArray(Arr, I, EndIndex);
  end;
end;