unit MainUnit;

interface

uses
  Classes, SysUtils, Forms, Controls, StdCtrls;

type
  //This is a custom TWinControl that represents a shaded panel
  TShadedPanel = class(TWinControl)
  private
    FColorTop: TColor;
    FColorLeft: TColor;
    FColorRight: TColor;
    FColorBottom: TColor;
    FBorderColor: TColor;
    FBorderWidth: Integer;
    FBorderRadius: Integer;
    FGradient: Boolean;
    FGradientColors: array of TColor;
  protected
    procedure Paint; override;
    procedure SetColorTop(Value: TColor);
    procedure SetColorLeft(Value: TColor);
    procedure SetColorRight(Value: TColor);
    procedure SetColorBottom(Value: TColor);
    procedure SetBorderColor(Value: TColor);
    procedure SetBorderWidth(Value: Integer);
    procedure SetBorderRadius(Value: Integer);
    procedure SetGradient(Value: Boolean);
    procedure SetGradientColors(Value: array of TColor);
  public
    constructor Create(AOwner: TComponent); override;
  published
    //Specifies the top shading color
    property ColorTop: TColor read FColorTop write SetColorTop;
    //Specifies the left shading color
    property ColorLeft: TColor read FColorLeft write SetColorLeft;
    //Specifies the right shading color
    property ColorRight: TColor read FColorRight write SetColorRight;
    //Specifies the bottom shading color
    property ColorBottom: TColor read FColorBottom write SetColorBottom;
    //Specifies the border color
    property BorderColor: TColor read FBorderColor write SetBorderColor;
    //Specifies the width of the border
    property BorderWidth: Integer read FBorderWidth write SetBorderWidth;
    //Specifies the radius of the border
    property BorderRadius: Integer read FBorderRadius write SetBorderRadius;
    //Specifies if the panel is gradient or not
    property Gradient: Boolean read FGradient write SetGradient;
    //Specifies the gradient colors for the panel
    property GradientColors: array of TColor read FGradientColors write SetGradientColors;
  end;

implementation

{ TShadedPanel }

constructor TShadedPanel.Create(AOwner: TComponent);
begin
  inherited;
  ControlStyle := ControlStyle + [csAcceptsControls]; //Panel can have child controls
  FColorTop := clWhite;
  FColorLeft := clGray;
  FColorRight := clSilver;
  FColorBottom := clLtGray;
  FBorderColor := clBlack;
  FBorderWidth := 1;
  FBorderRadius := 4;
  FGradient := False;
end;

procedure TShadedPanel.Paint;
var
  i: Integer;
begin
  inherited;
  Canvas.Brush.Style := bsSolid;

  //Draw top portion of panel
  Canvas.Brush.Color := FColorTop;
  Canvas.FillRect(Rect(0, 0, Width, Height div 4));

  //Draw left portion of panel
  Canvas.Brush.Color := FColorLeft;
  Canvas.FillRect(Rect(0, Height div 4, Width div 4, Height));

  //Draw right portion of panel
  Canvas.Brush.Color := FColorRight;
  Canvas.FillRect(Rect(Width - Width div 4, Height div 4, Width, Height));

  //Draw bottom portion of panel
  Canvas.Brush.Color := FColorBottom;
  Canvas.FillRect(Rect(0, Height - Height div 4, Width, Height));

  //Draw border
  Canvas.Pen.Color := FBorderColor;
  Canvas.Pen.Width := FBorderWidth;
  Canvas.RoundRect(Canvas.Pen.Width div 2, Canvas.Pen.Width div 2, Width - Canvas.Pen.Width div 2,
    Height - Canvas.Pen.Width div 2, FBorderRadius, FBorderRadius);

  //Draw gradient if enabled
  if FGradient then
  begin
    for i := 1 to Length(FGradientColors) do
    begin
      Canvas.Brush.Color := FGradientColors[i - 1];
      //Calculate position based on gradient count
      Canvas.FillRect(Rect(0, (i * Height) div Length(FGradientColors), Width, ((i + 1) * Height) div Length(FGradientColors)));
    end;
  end;
end;

//Setters for different properties

procedure TShadedPanel.SetColorTop(Value: TColor);
begin
  if FColorTop <> Value then
  begin
    FColorTop := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetColorLeft(Value: TColor);
begin
  if FColorLeft <> Value then
  begin
    FColorLeft := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetColorRight(Value: TColor);
begin
  if FColorRight <> Value then
  begin
    FColorRight := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetColorBottom(Value: TColor);
begin
  if FColorBottom <> Value then
  begin
    FColorBottom := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetBorderColor(Value: TColor);
begin
  if FBorderColor <> Value then
  begin
    FBorderColor := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetBorderWidth(Value: Integer);
begin
  if FBorderWidth <> Value then
  begin
    FBorderWidth := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetBorderRadius(Value: Integer);
begin
  if FBorderRadius <> Value then
  begin
    FBorderRadius := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetGradient(Value: Boolean);
begin
  if FGradient <> Value then
  begin
    FGradient := Value;
    Invalidate;
  end;
end;

procedure TShadedPanel.SetGradientColors(Value: array of TColor);
begin
  if Length(FGradientColors) <> Length(Value) then
  begin
    SetLength(FGradientColors, Length(Value));
  end;

  //Copy the values from the input array
  Move(Value[0], FGradientColors[0], Length(Value) * SizeOf(TColor));
  Invalidate;
end;

end.