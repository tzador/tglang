// This code snippet is written in Delphi and creates a custom list class
type
  // declaring a public class
  TCustomList = class(TObject)
  private
    // declaring private properties
    FList: TList;
    FCount: Integer;
    FCapacity: Integer;

    // declaring private methods
    procedure Grow;
  public
    // declaring public methods
    function Add(AItem: TObject): Integer;
    procedure Delete(AIndex: Integer);
    function IndexOf(AItem: TObject): Integer;

    // declaring public properties
    property Items[const Index: Integer]: TObject read FList[Index];
    property Count: Integer read FCount;
  end;

// defining the Add method of the custom list class
function TCustomList.Add(AItem: TObject): Integer;
begin
  // add the item to the end of the list
  FList.Add(AItem);
  // increment the count
  Inc(FCount);
  // if the new count exceeds the current capacity, call the Grow method
  if FCount > FCapacity then
    Grow;

  // return the index of the added item
  Result := FCount - 1;
end;

// defining the Delete method of the custom list class
procedure TCustomList.Delete(AIndex: Integer);
begin
  // check if the index is within bounds
  if (AIndex < 0) or (AIndex >= FCount) then
    Exit;

  // delete the item at the specified index
  FList.Delete(AIndex);
  // decrement the count
  Dec(FCount);
end;

// defining the IndexOf method of the custom list class
function TCustomList.IndexOf(AItem: TObject): Integer;
begin
  Result := -1;
  // loop through the list to find the index of the specified item
  for var I := 0 to FCount-1 do
    if Items[I] = AItem then
    begin
      Result := I;
      Break;
    end;
end;

// defining the Grow method of the custom list class
procedure TCustomList.Grow;
begin
  // double the capacity
  FCapacity := FCapacity * 2;
  // create a new list with the new capacity
  var NewList := TList.Create;
  // copy all the items from the old list to the new list
  NewList.Assign(FList);
  // free the old list
  FList.Free;
  // assign the new list as the list property
  FList := NewList;
end;