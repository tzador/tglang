// This code snippet demonstrates how to implement a binary search tree in Delphi

type

  // This is the class definition for a node in the binary search tree
  TNode = class
  private
    // Private variables for left and right child nodes
    FLeftChild: TNode;
    FRightChild: TNode;
    // Public property for key value of the node
    FKey: Integer;
  public
    // Constructor to create a new node
    constructor Create(Key: Integer);
    // Destructor to destroy the node
    destructor Destroy; override;
    // Getter and setter methods for the left and right child nodes
    property LeftChild: TNode read FLeftChild write FLeftChild;
    property RightChild: TNode read FRightChild write FRightChild;
    // Getter and setter methods for the key value of the node
    property Key: Integer read FKey write FKey;
  end;

  // This is the class definition for the binary search tree
  TBinarySearchTree = class
  private
    // Private variable for the root node of the tree
    FRoot: TNode;
  public
    // Constructor to create a new empty tree
    constructor Create;
    // Destructor to destroy the tree
    destructor Destroy; override;
    // Method to insert a new key value into the tree
    procedure Insert(Key: Integer);
    // Method to remove a key value from the tree
    procedure Remove(Key: Integer);
    // Method to search for a key value in the tree
    function Search(Key: Integer): Boolean;
  end;

// Constructor for node
constructor TNode.Create(Key: Integer);
begin
  FKey := Key;
  FLeftChild := nil;
  FRightChild := nil;
end;

// Destructor for node
destructor TNode.Destroy;
begin
  // Freeing the left and right child nodes
  FLeftChild.Free;
  FRightChild.Free;
  inherited;
end;

// Constructor for binary search tree
constructor TBinarySearchTree.Create;
begin
  FRoot := nil;
end;

// Destructor for binary search tree
destructor TBinarySearchTree.Destroy;
begin
  // Freeing the root node
  FRoot.Free;
  inherited;
end;

// Method to insert a new key value into the tree
procedure TBinarySearchTree.Insert(Key: Integer);
var
  Current, Parent: TNode;
begin
  // Creating a new node with the provided key value
  Current := TNode.Create(Key);
  // If the tree is empty, the new node becomes the root node
  if FRoot = nil then
    FRoot := Current
  else
  begin
    // Starting at the root node, we traverse the tree until we find an appropriate spot to insert the new node
    Parent := FRoot;
    while True do
    begin
      // If the new key value is less than the current node's key value, we go to the left child node
      if Key < Parent.Key then
      begin
        // If the left child node is empty, the new node becomes the left child node
        if Parent.LeftChild = nil then
        begin
          Parent.LeftChild := Current;
          Exit;
        end
        // If not, we continue traversing the tree
        else
          Parent := Parent.LeftChild;
      end
      // If the new key value is greater than or equal to the current node's key value, we go to the right child node
      else
      begin
        // If the right child node is empty, the new node becomes the right child node
        if Parent.RightChild = nil then
        begin
          Parent.RightChild := Current;
          Exit;
        end
        // If not, we continue traversing the tree
        else
          Parent := Parent.RightChild;
      end;
    end;
  end;
end;

// Method to remove a key value from the tree
procedure TBinarySearchTree.Remove(Key: Integer);
var
  Current, Parent, Successor: TNode;
  SuccessorValue: Integer;
begin
  // Starting at the root node, we traverse the tree until we find the node with the key value we want to remove
  Current := FRoot;
  Parent := FRoot;
  while Current.Key <> Key do
  begin
    // If the key value is less than the current node's key value, we go to the left child node
    if Key < Current.Key then
    begin
      Parent := Current;
      Current := Current.LeftChild;
    end
    // If the key value is greater than the current node's key value, we go to the right child node
    else
    begin
      Parent := Current;
      Current := Current.RightChild;
    end;
    // If we reach the bottom of the tree without finding the key value, it does not exist in the tree
    if Current = nil then
    begin
      Writeln('Key value not found in the tree.');
      Exit;
    end;
  end;
  // If the current node has no children, we simply delete it
  if (Current.LeftChild = nil) and (Current.RightChild = nil) then
  begin
    // Checking if the current node is the left or right child of its parent and setting the appropriate child node to nil
    if Parent.LeftChild = Current then
      Parent.LeftChild := nil
    else
      Parent.RightChild := nil;
    // Freeing the current node
    Current.Free;
  end
  // If the current node has one child, we replace it with its child node
  else if Current.LeftChild = nil then
  begin
    // Checking if the current node is the left or right child of its parent and setting the appropriate child node to its child node
    if Parent.LeftChild = Current then
      Parent.LeftChild := Current.RightChild
    else
      Parent.RightChild := Current.RightChild;
    // Freeing the current node
    Current.Free;
  end
  else if Current.RightChild = nil then
  begin
    // Checking if the current node is the left or right child of its parent and setting the appropriate child node to its child node
    if Parent.LeftChild = Current then
      Parent.LeftChild := Current.LeftChild
    else
      Parent.RightChild := Current.LeftChild;
    // Freeing the current node
    Current.Free;
  end
  // If the current node has two children, we replace it with its inorder successor
  else
  begin
    Successor := Current.RightChild;
    // Finding the leftmost node in the right subtree of the current node (inorder successor)
    while Successor.LeftChild <> nil do
      Successor := Successor.LeftChild;
    // Saving the key value of the inorder successor
    SuccessorValue := Successor.Key;
    // Removing the inorder successor (which now has no left child) from the tree
    Remove(Successor.Key);
    // Replacing the current node's key value with the key value of the inorder successor
    Current.Key := SuccessorValue;
  end;
end;

// Method to search for a key value in the tree
function TBinarySearchTree.Search(Key: Integer): Boolean;
var
  Current: TNode;
begin
  // Starting at the root node, we traverse the tree until we find the key value
  Current := FRoot;
  while Current.Key <> Key do
  begin
    // If the key value is less than the current node's key value, we go to the left child node
    if Key < Current.Key then
      Current := Current.LeftChild
    // If the key value is greater than the current node's key value, we go to the right child node
    else
      Current := Current.RightChild;
    // If we reach the bottom of the tree without finding the key value, it does not exist in the tree
    if Current = nil then
      Exit(False);
  end;
  // If we found the key value, it exists in the tree
  Result := True;
end;