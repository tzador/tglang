// This code snippet demonstrates how to sort an array using the QuickSort algorithm in Delphi.

// Define an array of integers
var
  arrayToSort: array[0..9] of Integer;
  
// Populate the array with random values
for i := 0 to 9 do
  arrayToSort[i] := Random(100);
  
// Print the unsorted array
WriteLn('Unsorted Array:');
for i := 0 to 9 do
  WriteLn(arrayToSort[i]);
  
// Define a function to partition the array
function Partition(arr: array of Integer; low, high: Integer): Integer;
var
  pivot, temp: Integer;
  i, j: Integer;
begin
  pivot := arr[high];
  i := low - 1;
  for j := low to high - 1 do
  begin
    if arr[j] <= pivot then
    begin
      i := i + 1;
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
    end;
  end;
  temp := arr[i + 1];
  arr[i + 1] := arr[high];
  arr[high] := temp;
  Result := i + 1;
end;

// Define the QuickSort function
procedure QuickSort(arr: array of Integer; low, high: Integer);
var
  pi: Integer;
begin
  if low < high then
  begin
    pi := Partition(arr, low, high);
    QuickSort(arr, low, pi - 1);
    QuickSort(arr, pi + 1, high);
  end;
end;

// Call the QuickSort function on the defined array
QuickSort(arrayToSort, 0, 9);

// Print the sorted array
WriteLn('Sorted Array:');
for i := 0 to 9 do
  WriteLn(arrayToSort[i]);