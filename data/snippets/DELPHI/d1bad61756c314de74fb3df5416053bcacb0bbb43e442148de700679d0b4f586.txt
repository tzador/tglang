{ This code snippet demonstrates the use of a thread pool in Delphi. }

{ Create a TThreadPool object to manage the thread pool. }
var
  ThreadPool: TThreadPool;

{ Create a TThreadedTask object to represent the task that will be executed in a thread. }
var
  ThreadedTask: TThreadedTask;

{ Create a TWaitEvent object to signal when the task is finished. }
var
  WaitEvent: TWaitEvent;

{ Set the number of threads to use in the thread pool. }
ThreadPool.MaxThreads := 5;

{ Create a task procedure that will be executed in a thread. }
procedure TaskProcedure;
begin
  // Do some work here...
  // Use WaitEvent to signal when the task is finished.
  WaitEvent.SetEvent;
end;

{ Create a loop to create and queue multiple tasks to the thread pool. }
for i := 1 to 10 do
begin
  { Reset the WaitEvent to make sure it is not already signaled. }
  WaitEvent.ResetEvent;

  { Create the ThreadedTask object using the task procedure. }
  ThreadedTask := TThreadedTask.Create(TaskProcedure);

  { Queue the task to the thread pool. }
  ThreadPool.QueueTask(ThreadedTask);

  { Wait for the task to finish by waiting for the WaitEvent to be signaled. }
  WaitEvent.WaitFor(INFINITE);

  { Free the ThreadedTask object after it has finished. }
  ThreadedTask.Free;
end;

{ Cleanup the resources by freeing the thread pool and the WaitEvent. }
ThreadPool.Free;
WaitEvent.Free;