function BinarySearch(ElemArray: TArray<integer>; Element: integer): integer;
var
  L, R, Mid: integer; //declare variables for left, right, and middle indices
begin
  Result := -1; //initialize result variable to -1
  L := 0; //set left index to start of array
  R := Length(ElemArray) - 1; //set right index to end of array
  while L <= R do //loop until left index is less than or equal to right index
  begin
    Mid := (L + R) div 2; //calculate middle index using integer division
    if ElemArray[Mid] = Element then //if element is found at middle index
    begin
      Result := Mid; //set result to middle index
      break; //exit loop
    end
    else if ElemArray[Mid] < Element then //if element is greater than middle index
      L := Mid + 1 //move left index to one more than middle
    else //if element is less than middle index
      R := Mid - 1; //move right index to one less than middle
  end;
end;