unit Unit1; // declares the start of the unit
interface // declares the start of the interface section
uses // used to specify other units that are used by this unit
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, // specifies the units to be used in this program
  Generics.Collections; // specifies the usage of generics.collections unit
type // declares the type section
  TMyClass = class // declares a new class named TMyClass
  private // specifies private variables and procedures
    FList: TList<TObject>; // declares a private variable FList of the type TList
    FNumber: Integer;// declares a private variable FNumber of the type integer
  public // specifies public variables and procedures
    constructor Create; overload; // declares a public constructor with no parameters
    constructor Create(AList: TList<TObject>; ANumber: Integer); overload;// declares a public constructor with parameters
    procedure AddToList(AObject: TObject); // declares a public procedure to add an object to the list
    function GetCount: Integer; // declares a public function to get the count of objects in the list
    property List: TList<TObject> read FList; // declares a public property to read the private variable FList
    property Number: Integer read FNumber write FNumber; // declares a public property to read and write the private variable FNumber
  end;
  
implementation // declares the start of the implementation section
constructor TMyClass.Create; // implements the public constructor with no parameters
begin
  FList := TList<TObject>.Create; // creates a new instance of TList and assigns it to the private variable FList
end;

constructor TMyClass.Create(AList: TList<TObject>; ANumber: Integer); // implements the public constructor with parameters
begin
  FList := AList; // assigns the parameter AList to the private variable FList
  FNumber := ANumber; // assigns the parameter ANumber to the private variable FNumber
end;

procedure TMyClass.AddToList(AObject: TObject); // implements the public procedure to add an object to the list
begin
  FList.Add(AObject); // adds the parameter AObject to the list FList
end;

function TMyClass.GetCount: Integer; // implements the public function to get the count of objects in the list
begin
  Result := FList.Count; // assigns the count of objects in the list to the function result
end;