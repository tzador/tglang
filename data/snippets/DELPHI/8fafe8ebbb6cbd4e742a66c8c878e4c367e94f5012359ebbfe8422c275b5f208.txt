unit Main;

interface

uses
  System.SysUtils, System.Classes,
  Vcl.Forms, Vcl.Dialogs, Vcl.Graphics;

type
  // Declaration of custom exception class
  EMyException = class(Exception);

  // Declaration of abstract class
  TMainForm = class abstract(TForm)
  private
    // Private variables
    FCanvas: TCanvas;
    FWidth, FHeight: Integer;
    // Private method to create the canvas
    procedure CreateCanvas;
    // Private method to draw circle on canvas
    procedure DrawCircle;
  protected
    // Protected method to paint the form
    procedure Paint; override;
  public
    // Public constructor
    constructor Create(AOwner: TComponent); override;
    // Public method to handle exceptions
    class procedure HandleException(E: Exception);
    // Public method to process user input
    procedure ProcessInput(Input: String); virtual; abstract;
  end;

  // Declaration of derived class
  TMyForm = class(TMainForm)
  public
    // Public method to process user input
    procedure ProcessInput(Input: String); override;
  end;

  // Main program
  Program Main;

implementation

{$R *.dfm} // Include the form resource file

{ TMainForm }

constructor TMainForm.Create(AOwner: TComponent);
begin
  inherited;
  FWidth := 500;
  FHeight := 500;
  // Handle any exceptions thrown during form creation
  try
    CreateCanvas;
  except
    on E: EMyException do HandleException(E);
  end;
end;

procedure TMainForm.CreateCanvas;
begin
  // Create a new canvas and set its properties
  FCanvas := TCanvas.Create;
  FCanvas.Width := FWidth;
  FCanvas.Height := FHeight;
  FCanvas.Brush.Color := clWhite;
end;

procedure TMainForm.DrawCircle;
begin
  // Draw a circle with random color and position on canvas
  FCanvas.Brush.Color := Random(RGB(0, 255, 255));
  FCanvas.Ellipse(Random(FWidth), Random(FHeight), Random(FWidth), Random(FHeight));
end;

procedure TMainForm.Paint;
begin
  // Call the inherited method to paint the form
  inherited;
  // Draw 100 circles on the canvas
  for var i := 0 to 100 do
    DrawCircle;
end;

class procedure TMainForm.HandleException(E: Exception);
begin
  // Log the error and show a message box to the user
  WriteLn('Error: ' + E.Message);
  ShowMessage('Error: ' + E.Message);
end;

// Implementation of TMyForm
procedure TMyForm.ProcessInput(Input: String);
begin
  // Handle user input and show a message box with the input
  WriteLn('User input: ' + Input);
  ShowMessage(Input);
end;

// Main program
begin
  // Create an instance of TMyForm
  Application.CreateForm(TMyForm, MyForm);
  // Process user input
  MyForm.ProcessInput('Hello World!');
  // Release forms and application resources upon termination
  MyForm.Free;
  Application.Terminate;
end.