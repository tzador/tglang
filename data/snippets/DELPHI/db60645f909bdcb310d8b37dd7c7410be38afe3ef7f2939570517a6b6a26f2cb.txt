function mergeSort(arr: Array of Integer): Array of Integer;
var
  n, i, mid: Integer;
  left, right, result: Array of Integer;
begin
  n := Length(arr);
  if n <= 1 then
  begin
    Result := arr; // base case: array is already sorted
    Exit;
  end;
  
  mid := n div 2; // finding middle index
  SetLength(left, mid); // initialising left array with size of mid
  SetLength(right, n - mid); // initialising right array with remaining size
  for i := 0 to mid - 1 do
  begin
    left[i] := arr[i]; // copying first half of arr to left array
  end;
  for i := mid to n - 1 do
  begin
    right[i - mid] := arr[i]; // copying second half of arr to right array
  end;

  left := mergeSort(left); // recursively calling mergeSort on left array
  right := mergeSort(right); // recursively calling mergeSort on right array
  result := merge(left, right); // merging the two sorted arrays
  Result := result; // returning merged result
end;