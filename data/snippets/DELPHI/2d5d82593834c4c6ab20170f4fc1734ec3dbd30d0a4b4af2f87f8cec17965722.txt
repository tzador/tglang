type                                 `Declare a new type in DELPHI named Person`
  Person = class                     `Define the class Person`
  private                            `Set the visibility of the class to private`
    name: string;                    `Define a private variable named name of type string`
    age: integer;                    `Define a private variable named age of type integer`
  public                             `Set the visibility of the class to public`
    constructor Create;              `Define a constructor for the Person class`
    function getName: string;        `Define a function that returns the name of the person`
    function getAge: integer;        `Define a function that returns the age of the person`
  end;                               `End the class definition`
  
constructor Person.Create;           `Define the constructor function for the Person class`
begin
  name := 'John Doe';                `Set the default value for the name variable`
  age := 30;                         `Set the default value for the age variable`
end;

function Person.getName: string;     `Define the getName function for the Person class`
begin
  Result := name;                    `Set the return value of the function to the name variable`
end;

function Person.getAge: integer;     `Define the getAge function for the Person class`
begin
  Result := age;                     `Set the return value of the function to the age variable`
end;

var                                  `Declare a variable named p of type Person`
  p: Person;                         `Set the variable p to an instance of the Person class`
  
begin                                `Start of the main program`
  p := Person.Create;                `Call the Create function to create a new Person object`
  writeln('Name: ' + p.getName);     `Write the name of the person to the console`
  writeln('Age: ' + IntToStr(p.getAge));   `Write the age of the person to the console`
  p.free;                            `Free the memory used by the Person object`
end.                                 `End of the main program`