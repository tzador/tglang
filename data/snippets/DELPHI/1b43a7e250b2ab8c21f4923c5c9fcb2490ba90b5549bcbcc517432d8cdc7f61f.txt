// This code snippet is a function that takes in two arrays and performs a merge sort.

function mergeSort(leftArray: array of integer; rightArray: array of integer): array of integer;
var
    // variables to keep track of the size of each array
    leftSize, rightSize: integer;

    // variables to keep track of the current index in each array
    leftIndex, rightIndex: integer;

    // variable to keep track of the new sorted array
    sortedArray: array of integer;

// begin function
begin
    // set the size of each array
    leftSize := Length(leftArray);
    rightSize := Length(rightArray);

    // initialize the sortedArray with the size of both arrays combined
    SetLength(sortedArray, leftSize + rightSize);

    // set the current indices to the starting positions of both arrays
    leftIndex := 0;
    rightIndex := 0;

    // loop through the arrays until one of them is exhausted
    while (leftIndex < leftSize) and (rightIndex < rightSize) do
    begin
        // compare the elements at the current indices and add the smaller one to the sortedArray
        if leftArray[leftIndex] < rightArray[rightIndex] then
        begin
            sortedArray[leftIndex + rightIndex] := leftArray[leftIndex];
            leftIndex := leftIndex + 1;
        end
        else 
        begin
            sortedArray[leftIndex + rightIndex] := rightArray[rightIndex];
            rightIndex := rightIndex + 1;
        end;
    end;

    // add the remaining elements from the left array, if any
    while leftIndex < leftSize do
    begin
        sortedArray[leftIndex + rightIndex] := leftArray[leftIndex];
        leftIndex := leftIndex + 1;
    end;

    // add the remaining elements from the right array, if any
    while rightIndex < rightSize do
    begin
        sortedArray[leftIndex + rightIndex] := rightArray[rightIndex];
        rightIndex := rightIndex + 1;
    end;

    // return the fully sorted array 
    Result := sortedArray;
end;