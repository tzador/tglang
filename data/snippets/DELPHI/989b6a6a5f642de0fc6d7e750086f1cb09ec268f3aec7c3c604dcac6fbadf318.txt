{This code snippet is a function that calculates the square root of a number. It uses a recursive algorithm called the Babylonian method.}

function SquareRoot(inputNum: Double): Double;
begin

{Initialize variables}
var
  guess: Double; // Variable to store initial guess
  root: Double; // Variable to store root value
  prevRoot: Double; // Variable to store previous root value
  
{Set initial guess using input number divided by 2}
guess := inputNum / 2;

{Use a loop to continuously update the guess until the root value is accurate}
while true do
begin
  {Calculate new guess using the Babylonian formula}
  root := (guess + (inputNum / guess)) / 2; 
  
  {Check if the new root has converged to the desired level of accuracy}
  if Abs(root - prevRoot) < 0.000001 then
    break; // If accurate, break out of loop
    
  {Update previous root and guess values}
  prevRoot := root;
  guess := root;
end;

{Return the final root value}
Result := root;

end;