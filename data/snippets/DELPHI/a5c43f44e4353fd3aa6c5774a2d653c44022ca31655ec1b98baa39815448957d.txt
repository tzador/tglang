{ This code snippet creates a class that represents a car}

type
  TCar = class //declaration of the class
  private
    FModel: string;
    FYear: integer;
    FColor: string;
    FSpeed: real;
    
  public
    constructor Create(model: string; year: integer; color: string); //constructor that takes in parameters
    procedure Accelerate(speed: real); //procedure that modifies speed
    procedure Brake; //procedure that sets speed to 0
    function GetDetails: string; //function that returns details of the car
    
  end;
  
  constructor TCar.Create(model: string; year: integer; color: string); //constructor definition
  begin
    FModel := model; //assign value to private variable
    FYear := year;
    FColor := color;
    FSpeed := 0; //set initial speed to 0
  end;
  
  procedure TCar.Accelerate(speed: real); //procedure definition
  begin
    FSpeed := speed; //update speed
    writeln(FModel, ' is now accelerating to ', FSpeed, ' km/h');
  end;
  
  procedure TCar.Brake; //procedure definition
  begin
    FSpeed := 0; //set speed to 0 when braking
    writeln(FModel, ' has come to a stop');
  end;
  
  function TCar.GetDetails: string; //function definition
  begin
    GetDetails := FModel + ' (' + FColor + ')' + ' - ' + IntToStr(FYear); //return details of the car as a string
  end;
  
  //to use the class:
  
  var
    MyCar: TCar;
  begin
    MyCar := TCar.Create('Toyota Corolla', 2015, 'Red'); //create an instance of the class
    writeln(MyCar.GetDetails); //print out the details of the car
    MyCar.Accelerate(50); //accelerate the car to 50 km/h
    MyCar.Brake; //brake the car (speed becomes 0)
    MyCar.Free; //free up the memory used by the instance
  end;