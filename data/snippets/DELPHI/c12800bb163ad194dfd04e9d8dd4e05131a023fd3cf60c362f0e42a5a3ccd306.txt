// declaring a custom type
type
  // defining a record with nested records
  TPerson = record
    // declaring fields
    FirstName: string;
    LastName: string;
    address: record
      Street: string;
      City: string;
      ZipCode: Integer;
    end;
    // declaring constants
    const
      MAX_AGE = 120;
    var
      // declaring dynamic array
      Aliases: array of string;
  end;
  
// declaring a function
function GetFullName(Person: TPerson): string;
begin
  // accessing record fields
  Result := Person.FirstName + ' ' + Person.LastName;
end;

// declaring a procedure with parameters
procedure AddAliasToPerson(Person: TPerson; Alias: string);
begin
  // checking if alias array is empty
  if Length(Person.Aliases) = 0 then
  begin
    // setting array length to 1
    SetLength(Person.Aliases, 1);
    // setting first element to alias
    Person.Aliases[0] := Alias;
  end
  else // alias array is not empty
  begin
    // getting current array length
    CurrentLength := Length(Person.Aliases);
    // increasing array length by 1
    SetLength(Person.Aliases, CurrentLength + 1);
    // setting new element to alias
    Person.Aliases[CurrentLength] := Alias;
  end;
end;

// initializing a person record
var
  John: TPerson;

// setting values for record fields
John.FirstName := 'John';
John.LastName := 'Smith';
John.address.Street := '123 Main St';
John.address.City := 'New York';
John.address.ZipCode := 11111;

// calling functions and procedures
var
  PersonFullName, AliasToAdd: string;
begin
  // getting person's full name
  PersonFullName := GetFullName(John);
  // adding an alias to the person
  AliasToAdd := 'Johnny';
  AddAliasToPerson(John, AliasToAdd);
end.