(* This is a code snippet in Delphi that generates a list of prime numbers up to a given number.
   It uses the Sieve of Eratosthenes algorithm. *)

program SieveOfEratosthenes;

{$APPTYPE CONSOLE}  // Declaring app type as console application

uses
  SysUtils;  // Importing the SysUtils library for system utilities

const
  MAX_NUMBER = 100000;  // Max number to be checked

var
  prime: array[2..MAX_NUMBER] of Boolean;  // Declaring an array of booleans to store prime numbers
  i, j: Integer;  // Declaring loop variables i and j for iteration
  output: string;  // Declaring a string to store the final output

begin
  try
    // Setting all elements of array to true
    for i := 2 to MAX_NUMBER do
      prime[i] := true;

    // Applying Sieve of Eratosthenes algorithm
    i := 2;
    while i * i <= MAX_NUMBER do
    begin
      // If the number is still marked as prime, mark all its multiples as not prime
      if prime[i] then
      begin
        j := i * i;
        while j <= MAX_NUMBER do
        begin
          prime[j] := false;
          j := j + i;
        end;
      end;
      i := i + 1;
    end;

    // Generating the list of prime numbers as a string
    output := 'List of prime numbers up to ' + IntToStr(MAX_NUMBER) + ': ';
    for i := 2 to MAX_NUMBER do
    begin
      if prime[i] then
        output := output + IntToStr(i) + ' ';
    end;

    // Outputting the final result
    Writeln(output);
  except
    on E: Exception do
      Writeln('Exception: ', E.Message);
  end;
end.