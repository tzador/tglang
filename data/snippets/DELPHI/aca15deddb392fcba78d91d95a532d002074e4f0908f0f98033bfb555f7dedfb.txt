{ This code snippet creates a class called Employee with properties and methods for managing employee information }
unit EmployeeUnit;

interface

type
  // Declare the class Employee
  Employee = class
    private
      // Private fields to hold employee information
      FName: string; // First Name
      LName: string; // Last Name
      Age: Integer; // Age
      Salary: Double; // Salary
    public
      // Constructor method to initialize employee information
      constructor Create(FirstName: string; LastName: string; Age: Integer; Salary: Double);
      // Getter and Setter methods for FName property
      property FName: string read FName write FName;
      // Getter and Setter methods for LName property
      property LName: string read LName write LName;
      // Getter and Setter methods for Age property
      property Age: Integer read Age write Age;
      // Getter and Setter methods for Salary property
      property Salary: Double read Salary write Salary;

      // Method to calculate salary after giving a raise
      procedure GiveRaise(raisePercent: Integer);

      // Method to print employee information
      procedure PrintInfo;
  end;

implementation

{ Employee class constructor }
constructor Employee.Create(FirstName: string; LastName: string; Age: Integer; Salary: Double);
begin
  // Initialize fields with passed values
  FName := FirstName;
  LName := LastName;
  Age := Age;
  Salary := Salary;
end;

{ Method to calculate salary after giving a raise }
procedure Employee.GiveRaise(raisePercent: Integer);
begin
  // Calculate raise amount based on percentage
  var raiseAmount := Salary * raisePercent / 100;
  // Add raise amount to current salary
  Salary := Salary + raiseAmount;
end;

{ Method to print employee information }
procedure Employee.PrintInfo;
begin
  // Print employee information in a formatted string
  var info := Format('First Name: %s, Last Name: %s, Age: %d, Salary: %f', [FName, LName, Age, Salary]);
  // Output formatted string to console
  WriteLn(info);
end;

end.