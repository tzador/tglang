//This code snippet is a complex and lengthy example of using classes and objects in DELPHI.

{   This is a simple class called "Person". It has two properties - name and age.
    It also has a constructor to initialize the properties.
    Notice the use of "public" and "private" keywords to define the visibility of the properties and methods. }
type
  Person = class
  private
    fName: string; //private string variable to store the name
    fAge: integer; //private integer variable to store the age
  public
    constructor Create(name: string; age: integer); //constructor to initialize the properties
    property Name: string read fName write fName; //public property to access the name
    property Age: integer read fAge write fAge; //public property to access the age
    procedure PrintInfo(); //public method to print the person's name and age
  end;

{   Constructor definition for the "Person" class.
    It takes in two parameters - name and age and assigns them to the corresponding properties. }
constructor Person.Create(name: string; age: integer);
begin
    fName := name; //assign the name parameter to the fName property
    fAge := age; //assign the age parameter to the fAge property
end;

{   Procedure definition for the "PrintInfo" method in the "Person" class.
    It simply prints the person's name and age to the console. }
procedure Person.PrintInfo();
begin
    writeln(fName, ' is ', fAge, ' years old.'); //print the person's name and age
end;

//Now, let's create two objects of the "Person" class and set their properties using the constructor.
var
  person1, person2: Person; //declare two variables of type "Person"
begin
    person1 := Person.Create('John', 30); //create object and pass in values for name and age
    person2 := Person.Create('Jane', 25); //create another object with different values
    person1.PrintInfo(); //call the PrintInfo method for the first object
    person2.PrintInfo(); //call the PrintInfo method for the second object
end.