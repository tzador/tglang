/// The following code snippet creates a class called "Person"
/// with various properties and methods.
/// It also includes examples of encapsulation and inheritance.
unit PersonUnit;

interface

type
  TPerson = class(TObject) // Create a class called "Person" that inherits from TObject
  private
    FName: string; // Private field for storing name
    FAge: Integer; // Private field for storing age
    FAddress: string; // Private field for storing address
  public
    property Name: string read FName write FName; // Public property for getting and setting name
    property Age: Integer read FAge write FAge; // Public property for getting and setting age
    property Address: string read FAddress write FAddress; // Public property for getting and setting address
    procedure SetName(const AName: string); // Public method for setting name
    procedure SetAge(AAge: Integer); // Public method for setting age
    procedure SetAddress(const AAddress: string); // Public method for setting address
    function GetFullName: string; // Public method for getting full name
  end;

implementation

{ TPerson }

procedure TPerson.SetName(const AName: string); // Implementation of SetName method
begin
  // Encapsulation: only allow setting name if it is not empty
  if AName <> '' then
    FName := AName;
end;

procedure TPerson.SetAge(AAge: Integer); // Implementation of SetAge method
begin
  // Encapsulation: only allow setting age if it is greater than 0
  if AAge > 0 then
    FAge := AAge;
end;

procedure TPerson.SetAddress(const AAddress: string); // Implementation of SetAddress method
begin
  FAddress := AAddress;
end;

function TPerson.GetFullName: string; // Implementation of GetFullName method
begin
  // Inheritance: use inherited method to access parent class
  Result := FName + ' is ' + IntToStr(FAge) + ' years old and lives at ' + FAddress;
end;

end.