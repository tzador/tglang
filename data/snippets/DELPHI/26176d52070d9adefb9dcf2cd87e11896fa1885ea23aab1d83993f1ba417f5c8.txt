procedure QuickSort(var ArrayToSort: array of Integer; L, R: Integer);
begin
  if R > L then
  begin
    //set pivot as the last element in the array
    Pivot := ArrayToSort[R];
    i := L - 1;
    j := R;

    while true do
    begin
      //increment i until an element greater than pivot is found
      repeat
        i := i + 1;
      until ArrayToSort[i] >= Pivot;

      //decrement j until an element less than pivot is found
      repeat
        j := j - 1;
      until (j < L) or (ArrayToSort[j] <= Pivot);

      if i >= j then
        break
      else
        //swap elements i and j
        Temp := ArrayToSort[i];
        ArrayToSort[i] := ArrayToSort[j];
        ArrayToSort[j] := Temp;
    end;
    //swap pivot with element at index i
    Temp := ArrayToSort[i];
    ArrayToSort[i] := ArrayToSort[R];
    ArrayToSort[R] := Temp;

    //recursively sort elements to the left of pivot
    QuickSort(ArrayToSort, L, i - 1);
    //recursively sort elements to the right of pivot
    QuickSort(ArrayToSort, i + 1, R);
  end;
end;