// Declare a class
type
  TMyClass = class
  private
    FPrivateField: String;
  protected
    FProtectedField: Integer;
  public
    FPublicField: Boolean;
    constructor Create; // Constructor method
    destructor Destroy; override; // Destructor method
    procedure SetPrivateField(Value: String);
    function GetProtectedField: Integer;
    procedure SetPublicField(Value: Boolean);
    property PrivateField: String read FPrivateField write SetPrivateField;
    property ProtectedField: Integer read GetProtectedField;
    property PublicField: Boolean read FPublicField write SetPublicField;
  end;
  
// Constructor method
constructor TMyClass.Create;
begin
  inherited; // Call inherited constructor
  FPrivateField := 'Private'; // Set value for private field
  FProtectedField := 10; // Set value for protected field
  FPublicField := True; // Set value for public field
end;

// Destructor method
destructor TMyClass.Destroy;
begin
  inherited; // Call inherited destructor
  // Perform any necessary cleanup or additional actions here
end;

// Private set method for PrivateField property
procedure TMyClass.SetPrivateField(Value: String);
begin
  FPrivateField := Value;
end;

// Protected get method for ProtectedField property
function TMyClass.GetProtectedField: Integer;
begin
  Result := FProtectedField;
end;

// Public set method for PublicField property
procedure TMyClass.SetPublicField(Value: Boolean);
begin
  FPublicField := Value;
end;