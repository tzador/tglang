// This is a comment line in DELPHI
program ComplexCode;
// This is the main program that executes the complex code

uses
  System.SysUtils, System.Classes, StrUtils, Math; // Importing necessary libraries

// Global variables
var
  x: Integer; // Global integer variable
  y: string; // Global string variable
  z: array[1..10] of Double; // Global array of Doubles

// Function to calculate the factorial of a number
function Factorial(n: Integer): Integer;
begin
  if (n = 0) then // Check for base case
    Result := 1
  else // Recursive function call
    Result := n * Factorial(n - 1);
end;

// Class for a complex number
type
  Complex = class
  private
    real: Double; // Private variable for real part
    imag: Double; // Private variable for imaginary part
  public
    constructor Create(real, imag: Double); // Constructor of the complex class
    function Add(complex: Complex): Complex; // Function to add complex numbers
    function Multiply(complex: Complex): Complex; // Function to multiply complex numbers
    function Power(n: Integer): Complex; // Function to raise complex number to a power
  end;

// Constructor of the Complex class
constructor Complex.Create(real, imag: Double);
begin
  Self.real := real; // Assigning real part to private variable
  Self.imag := imag; // Assigning imaginary part to private variable
end;

// Function to add complex numbers
function Complex.Add(complex: Complex): Complex;
var
  resultReal, resultImag: Double;
begin
  resultReal := self.real + complex.real; // Adding the real parts
  resultImag := self.imag + complex.imag; // Adding the imaginary parts
  Result := Complex.Create(resultReal, resultImag); // Creating a new complex number with the result
end;

// Function to multiply complex numbers
function Complex.Multiply(complex: Complex): Complex;
var
  resultReal, resultImag: Double;
begin
  resultReal := (self.real * complex.real) - (self.imag * complex.imag); // Calculating real part
  resultImag := (self.real * complex.imag) + (self.imag * complex.real); // Calculating imaginary part
  Result := Complex.Create(resultReal, resultImag); // Creating a new complex number with the result
end;

// Function to raise complex number to a power
function Complex.Power(n: Integer): Complex;
var
  resultReal, resultImag: Double;
begin
  resultReal := Power(self.real, n) - Power(self.imag, n); // Calculating real part
  resultImag := (n * Power(self.real, n-1) * self.imag) + (n * Power(self.imag, n-1) * self.real); // Calculating imaginary part
  Result := Complex.Create(resultReal, resultImag); // Creating a new complex number with the result
end;

begin
  // Main program starts here
  x := 5; // Assigning a value to global variable x
  y := 'Code'; // Assigning a value to global variable y

  // Loop to populate array z with factorials
  for i := 1 to 10 do
  begin
    z[i] := Factorial(i); // Calling the factorial function with current value of i
  end;

  // Creating two complex numbers
  complex1 := Complex.Create(2.5, 4.2); 
  complex2 := Complex.Create(1.8, 3.1);

  // Adding the two complex numbers and printing the result
  complexSum := complex1.Add(complex2);
  WriteLn('The sum of complex ' + FloatToStr(complex1.real) + ' + ' + FloatToStr(complex1.imag) + 'i and ' +
    FloatToStr(complex2.real) + ' + ' + FloatToStr(complex2.imag) + 'i is ' + FloatToStr(complexSum.real) + ' + ' +
    FloatToStr(complexSum.imag) + 'i.');

  // Multiplying the two complex numbers and printing the result
  complexProduct := complex1.Multiply(complex2);
  WriteLn('The product of complex ' + FloatToStr(complex1.real) + ' + ' + FloatToStr(complex1.imag) + 'i and ' +
    FloatToStr(complex2.real) + ' + ' + FloatToStr(complex2.imag) + 'i is ' + FloatToStr(complexProduct.real) + ' + ' +
    FloatToStr(complexProduct.imag) + 'i.');

  // Raising the complex number to a power and printing the result
  complexPower := complex1.Power(2);
  WriteLn('The complex number ' + FloatToStr(complex1.real) + ' + ' + FloatToStr(complex1.imag) + 'i raised to the power of 2 is ' +
    FloatToStr(complexPower.real) + ' + ' + FloatToStr(complexPower.imag) + 'i.');

  // End of the program
  ReadLn;
end.