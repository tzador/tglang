unit Calculator;

interface

type
  TCalculator = class
  private
    FInput: string;
    FResult: Double;
  public
    constructor Create;
    destructor Destroy; override;
    function GetResult: Double;
    procedure Add(AValue: Double);
    procedure Subtract(AValue: Double);
    procedure Multiply(AValue: Double);
    procedure Divide(AValue: Double);
    procedure Clear;
    procedure Square;
    procedure Cube;
    procedure Sine;
    procedure Cosine;
    procedure Tangent;       
  end;

implementation

constructor TCalculator.Create;
begin
  inherited;
  FInput := '';
  FResult := 0;
end;

destructor TCalculator.Destroy;
begin
  inherited;
end;

function TCalculator.GetResult: Double;
begin
  Result := FResult;
end;

procedure TCalculator.Add(AValue: Double);
begin
  FResult := FResult + AValue; // adds the given value to the result
end;

procedure TCalculator.Subtract(AValue: Double);
begin
  FResult := FResult - AValue; // subtracts the given value from the result
end;

procedure TCalculator.Multiply(AValue: Double);
begin
  FResult := FResult * AValue; // multiplies the result by the given value
end;

procedure TCalculator.Divide(AValue: Double);
begin
  FResult := FResult / AValue; // divides the result by the given value
end;

procedure TCalculator.Clear;
begin
  FInput := ''; // clears the input
  FResult := 0; // resets the result to 0
end;

procedure TCalculator.Square;
begin
  FResult := FResult * FResult; // squares the result
end;

procedure TCalculator.Cube;
begin
  FResult := FResult * FResult * FResult; // cubes the result
end;

procedure TCalculator.Sine;
begin
  FResult := Sin(FResult); // calculates the sine of the result
end;

procedure TCalculator.Cosine;
begin
  FResult := Cos(FResult); // calculates the cosine of the result
end;

procedure TCalculator.Tangent;
begin
  FResult := Tan(FResult); // calculates the tangent of the result
end;

end.