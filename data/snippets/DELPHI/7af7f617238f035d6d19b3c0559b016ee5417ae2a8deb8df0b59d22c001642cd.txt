unit unit1; {beginning of Delphi unit}

interface {unit interface section}

uses
  {$IFDEF MSWINDOWS}Windows,{$ENDIF}
  Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, {units used}

type
  TMyClass = class(TObject) {class definition}
  private
    Field1: Integer; // private field
    FPrivateProp: String; {private property}
  protected // protected section
    FProtectedProp: Boolean; {protected property}
  public // public section
    procedure PublicProc(const Arg: TDateTime); {public procedure}
    function GetPrivateProp: String; {public method to get private property}
    property ProtectedProp: Boolean read FProtectedProp write FProtectedProp; {protected property}
  published // published section
    property PrivateProp: String read FPrivateProp write FPrivateProp; {published property}
  end;

var
  MyObject: TMyClass; {object of TMyClass}

implementation {implementation section}

{$R *.DFM} {include the form resource file}

{ TMyClass implementation}

procedure TMyClass.PublicProc(const Arg: TDateTime);
begin
  if Assigned(MyObject) then {check if object has been created}
  begin
    Field1 := 10; // set private field value
    FPrivateProp := 'Property value'; {set private property value}
    ShowMessage('The argument is: ' + DateTimeToStr(Arg));
  end;
end;

function TMyClass.GetPrivateProp: String;
begin
  Result := FPrivateProp;
end;

end. {end of Delphi unit}