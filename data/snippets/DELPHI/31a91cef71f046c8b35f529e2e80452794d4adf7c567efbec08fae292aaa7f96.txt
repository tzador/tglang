procedure QuickSort(var A: array of Integer; iLo, iHi: Integer);
// This procedure performs a QuickSort algorithm on the given integer array, starting at index iLo and ending at index iHi.
// It modifies the array A directly, instead of returning a sorted copy.
// The sorting is done in ascending order.
var
  Lo: Integer;
  Hi: Integer;
  Pivot: Integer;
  temp: Integer;
begin
  Lo := iLo;
  Hi := iHi;
  Pivot := A[(Lo + Hi) div 2]; // Selects a pivot element in the middle of the range to be sorted.
  repeat
    while A[Lo] < Pivot do
      Inc(Lo); // Finds the first element in the range that is greater than or equal to the pivot.
    while A[Hi] > Pivot do
      Dec(Hi); // Finds the last element in the range that is less than or equal to the pivot.
    if Lo <= Hi then // If Lo is still less than or equal to Hi, it means there are still elements to swap.
    begin
      temp := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := temp; // Swaps the elements at indices Lo and Hi, placing them in the correct partition.
      Inc(Lo);
      Dec(Hi);
    end;
  until Lo > Hi;
  if iLo < Hi then
    QuickSort(A, iLo, Hi); // Recursively calls QuickSort on the first partition (iLo to Hi).
  if Lo < iHi then
    QuickSort(A, Lo, iHi); // Recursively calls QuickSort on the second partition (Lo to iHi).
end;