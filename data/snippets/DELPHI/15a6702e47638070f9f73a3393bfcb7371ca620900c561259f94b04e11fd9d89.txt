uses SysUtils, Classes;

type
  // Defines a custom person class with properties for name, age, and address
  TPerson = class
  private
    FName: string;
    FAge: Integer;
    FAddress: string;
    
    // Getter and setter methods for the person's name property
    procedure SetName(const Value: string);
    function GetName: string;
    
    // Getter and setter methods for the person's age property
    procedure SetAge(const Value: Integer);
    function GetAge: Integer;
    
    // Getter and setter methods for the person's address property
    procedure SetAddress(const Value: string);
    function GetAddress: string;
    
  public
    // Constructor for the person class
    constructor Create(Name: string; Age: Integer; Address: string);
    
    // Destructor for the person class
    destructor Destroy; override;
    
    // Properties for accessing the person's name, age, and address
    property Name: string read GetName write SetName;
    property Age: Integer read GetAge write SetAge;
    property Address: string read GetAddress write SetAddress;
  end;
  
// Custom constructor for the person class, assigns values to properties
constructor TPerson.Create(Name: string; Age: Integer; Address: string);
begin
  FName := Name;
  FAge := Age;
  FAddress := Address;
end;

// Custom destructor for the person class, frees memory occupied by the object
destructor TPerson.Destroy;
begin
  // Optional code for any clean up actions, such as closing open files or connections
  inherited;
end;

// Getter method for the person's name property, returns the name as a string
function TPerson.GetName: string;
begin
  Result := FName;
end;

// Setter method for the person's name property, sets the name property to the given value
procedure TPerson.SetName(const Value: string);
begin
  FName := Value;
end;

// Getter method for the person's age property, returns the age as an integer
function TPerson.GetAge: Integer;
begin
  Result := FAge;
end;

// Setter method for the person's age property, sets the age property to the given value
procedure TPerson.SetAge(const Value: Integer);
begin
  // Validates that the age is greater than 0 before setting it
  if Value > 0 then
    FAge := Value;
end;

// Getter method for the person's address property, returns the address as a string
function TPerson.GetAddress: string;
begin
  Result := FAddress;
end;

// Setter method for the person's address property, sets the address property to the given value
procedure TPerson.SetAddress(const Value: string);
begin
  FAddress := Value;
end;