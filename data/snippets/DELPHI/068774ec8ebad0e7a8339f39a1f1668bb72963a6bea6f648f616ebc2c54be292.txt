unit myUnit;

interface

uses
  SysUtils, Forms, Controls, Classes, Dialogs, myConstants;

type
  // This is a custom exception class
  EMyException = class(Exception);

  // This is a simple record type
  TMyRecord = record
    Name: string;
    Age: Integer;
    Birthday: TDateTime;
  end;

  // This is a generic class
  TMyClass<T> = class
  private
    FValue: T;
  public
    constructor Create(AValue: T);
    procedure DoSomething();
  end;

implementation

uses
  myHelpers, My.Folder.MyUnit;

// This is a function that calculates the fibonacci sequence up to the given number
function CalculateFibonacci(n: Integer): TMyRecord;
var
  i: Integer;
begin
  // Initialize the record with default values
  Result.Name := 'Fibonacci Sequence';
  Result.Age := n;
  Result.Birthday := Date();

  // Check that n is not negative
  if n < 0 then
    raise EMyException.Create('Cannot calculate fibonacci sequence for negative numbers');

  // Calculate the sequence
  if n <= 1 then
    Exit;

  Result.Name := Format('%d %s', [n, 'numbers']);
  SetLength(Result.Ages, n);
  Result.Ages[0] := 0;
  Result.Ages[1] := 1;
  for i := 2 to n do
  begin
    Result.Ages[i] := Result.Ages[i-1] + Result.Ages[i-2];
  end;

end;

{ TMyClass<T> }

// Constructor for TMyClass
constructor TMyClass<T>.Create(AValue: T);
begin
  FValue := AValue;
end;

// A generic procedure that prints out the value of FValue
procedure TMyClass<T>.DoSomething();
begin
  Writeln(Format('Value of FValue: %s', [FValue.ToString()]));
end;

end.