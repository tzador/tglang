(*
  This is a complex code snippet in DELPHI.
  It creates a new instance of a class and performs various operations on it.
*)

// Declare a class
type
  TMyClass = class
  private
    FValue: Integer;

  public
    constructor Create(AValue: Integer); // Constructor that takes an integer parameter
    destructor Destroy; override; // Destructor

    function GetValue: Integer; // Getter method for FValue
    procedure SetValue(const AValue: Integer); // Setter method for FValue

    function Add(const AValue: Integer): Integer; // Method that adds AValue to FValue
    function Subtract(const AValue: Integer): Integer; // Method that subtracts AValue from FValue
    function Multiply(const AValue: Integer): Integer; // Method that multiplies FValue by AValue
    function Divide(const AValue: Integer): Integer; // Method that divides FValue by AValue
end;

// Constructor implementation
constructor TMyClass.Create(AValue: Integer);
begin
  inherited Create; // Call parent class constructor
  FValue := AValue; // Set FValue to parameter value
end;

// Destructor implementation
destructor TMyClass.Destroy;
begin
  // Perform any required clean up operations here
  inherited Destroy; // Call parent class destructor
end;

// Getter method implementation
function TMyClass.GetValue: Integer;
begin
  Result := FValue; // Return FValue
end;

// Setter method implementation
procedure TMyClass.SetValue(const AValue: Integer);
begin
  FValue := AValue; // Set FValue to parameter value
end;

// Add method implementation
function TMyClass.Add(const AValue: Integer): Integer;
begin
  Result := FValue + AValue; // Add AValue to FValue and return the result
end;

// Subtract method implementation
function TMyClass.Subtract(const AValue: Integer): Integer;
begin
  Result := FValue - AValue; // Subtract AValue from FValue and return the result
end;

// Multiply method implementation
function TMyClass.Multiply(const AValue: Integer): Integer;
begin
  Result := FValue * AValue; // Multiply FValue by AValue and return the result
end;

// Divide method implementation
function TMyClass.Divide(const AValue: Integer): Integer;
begin
  Result := FValue div AValue; // Divide FValue by AValue and return the result
end;

// Create a new instance of TMyClass with initial value of 5
var
  MyObject: TMyClass; // Declare variable of type TMyClass
begin
  MyObject := TMyClass.Create(5); // Create new instance with initial value of 5

  // Perform operations using the methods of TMyClass
  MyObject.SetValue(10); // Set value to 10
  ShowMessage('Value: ' + IntToStr(MyObject.GetValue)); // Output: Value: 10
  ShowMessage('Add 5: ' + IntToStr(MyObject.Add(5))); // Output: Add 5: 15
  ShowMessage('Subtract 2: ' + IntToStr(MyObject.Subtract(2))); // Output: Subtract 2: 8
  ShowMessage('Multiply by 3: ' + IntToStr(MyObject.Multiply(3))); // Output: Multiply by 3: 30
  ShowMessage('Divide by 3: ' + IntToStr(MyObject.Divide(3))); // Output: Divide by 3: 3

  MyObject.Free; // Free memory used by MyObject
end.