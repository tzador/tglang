// This program calculates the minimum spanning tree using Kruskal's algorithm

const
  // set MAX constant to represent the maximum number of vertices in the graph
  MAX = 100;

type
  // define a record type to hold information about the edges in the graph
  edge = record
    vertex1 : integer; // first vertex of the edge
    vertex2 : integer; // second vertex of the edge
    weight : integer; // weight of the edge
  end;
  
var
  // declare variables
  numVertices, numEdges, i, j, k, totalWeight : integer;
  edges : array[1..MAX] of edge;
  parent : array[1..MAX] of integer;
  
begin
  // read in the number of vertices and edges in the graph
  readln(numVertices, numEdges);
  
  // read in the edges and their weights
  for i := 1 to numEdges do
  begin
    readln(edges[i].vertex1, edges[i].vertex2, edges[i].weight);
  end;
  
  // sort the edges in ascending order based on their weights
  for i := 1 to numEdges - 1 do
  begin
    for j := i + 1 to numEdges do
    begin
      if edges[i].weight > edges[j].weight then
      begin
        // swap the edges
        edge temp := edges[i];
        edges[i] := edges[j];
        edges[j] := temp;
      end;
    end;
  end;
  
  // initialize parent array, each vertex is its own parent
  for i := 1 to numVertices do
  begin
    parent[i] := i;
  end;
  
  // loop through the sorted edges
  for i := 1 to numEdges do
  begin
    // find the parent of each vertex in the edge
    // repeat this until the parent of the current vertex is the same as the vertex itself
    while parent[edges[i].vertex1] <> edges[i].vertex1 do
    begin
      edges[i].vertex1 := parent[edges[i].vertex1];
    end;
    while parent[edges[i].vertex2] <> edges[i].vertex2 do
    begin
      edges[i].vertex2 := parent[edges[i].vertex2];
    end;
    
    // check if the vertices belong to different sets
    if edges[i].vertex1 <> edges[i].vertex2 then
    begin
      // if they do, update the parent array to connect their sets
      parent[edges[i].vertex1] := edges[i].vertex2;
      
      // add the weight of the edge to the total weight of the MST
      totalWeight := totalWeight + edges[i].weight;
    end;
  end;
  
  // output the total weight of the minimum spanning tree
  writeln('Total weight of the minimum spanning tree is: ', totalWeight);
end.