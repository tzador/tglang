unit MyUnit; // unit declaration

interface // interface section
type
  // declaring a record with two fields
  TMyRecord = record 
    Field1: Integer;
    Field2: Boolean;
  end;

  // declaring a class
  TMyClass = class 
  private
    FPrivateField: String; // private field
    procedure PrivateMethod; // private method
  protected
    FProtectedField: Integer; // protected field
    procedure ProtectedMethod; // protected method
  public
    // constructor with parameters
    constructor Create(AField: Integer);
    // destructor
    destructor Destroy; override;
    // property with getter and setter
    property MyProperty: String read FPrivateField write FPrivateField;
    // public method
    procedure PublicMethod(AString: String); virtual;
  end;

implementation // implementation section

// constructor implementation
constructor TMyClass.Create(AField: Integer);
begin
  // initializing protected field
  FProtectedField := AField;
end;

// destructor implementation
destructor TMyClass.Destroy;
begin
  // empty destructor
end;

// private method implementation
procedure TMyClass.PrivateMethod;
begin
  // accessing private field
  FPrivateField := 'Private Value';
end;

// protected method implementation
procedure TMyClass.ProtectedMethod;
begin
  // accessing protected field
  FProtectedField := 123;
end;

// public method implementation
procedure TMyClass.PublicMethod(AString: String);
begin
  // accessing private property
  MyProperty := AString;
end;

end. // end of unit