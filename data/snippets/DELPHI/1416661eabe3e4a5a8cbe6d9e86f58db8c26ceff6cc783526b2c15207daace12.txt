// This code snippet is a simple implementation of a binary search tree using the Delphi programming language

// Declaring a node for the binary tree
type
  TreeNode = class
    public
      value: Integer; // The value of the node
      left, right: TreeNode; // Pointers to the left and right child nodes
  end;

// Function to insert a new node in the binary tree
procedure InsertNode(var root: TreeNode; val: Integer);
var
  newNode, currNode, parentNode: TreeNode;
begin
  // Creating a new node with the given value
  newNode := TreeNode.Create;
  newNode.value := val;
  newNode.left := nil;
  newNode.right := nil;

  // If the tree is empty, the new node is the root
  if root = nil then
    root := newNode
  else
  begin
    // Searching for the correct position in the tree to insert the new node
    currNode := root;
    while(currNode <> nil) do
    begin
      parentNode := currNode;

      if val < currNode.value then
        currNode := currNode.left
      else
        currNode := currNode.right;
    end;

    // Inserting the new node at the correct position in the tree
    if val < parentNode.value then
      parentNode.left := newNode
    else
      parentNode.right := newNode;
  end;
end;

// Function to search for a specific value in the binary tree
function SearchNode(root: TreeNode; val: Integer): Boolean;
begin
  // If the tree is empty, the value does not exist
  if root = nil then
    Result := False
  else
  begin
    // Traversing the tree to find the value
    if val = root.value then
      Result := True
    else if val < root.value then
      Result := SearchNode(root.left, val)
    else
      Result := SearchNode(root.right, val);
  end;
end;

// Function to delete a node from the binary tree
procedure DeleteNode(var root: TreeNode; val: Integer);
var
  currNode, parentNode, tempNode: TreeNode;
begin
  // If the tree is empty, the value does not exist
  if root = nil then
    Exit;

  // Searching for the node with the given value
  currNode := root;
  parentNode := nil;
  while((currNode <> nil) and (currNode.value <> val)) do
  begin
    parentNode := currNode;

    if val < currNode.value then
      currNode := currNode.left
    else
      currNode := currNode.right;
  end;

  // If the value was not found in the tree, do nothing
  if currNode = nil then
    Exit;

  // If the node to be deleted has no child nodes
  if(currNode.left = nil) and (currNode.right = nil) then
  begin
    // If the node to be deleted is the root
    if(currNode = root) then
      root := nil
    else
    begin
      // Updating the parent node's child pointer to nil
      if(parentNode.left = currNode) then
        parentNode.left := nil
      else
        parentNode.right := nil;
    end;

    // Freeing up the memory occupied by the node
    currNode.Free;
  end
  // If the node to be deleted has only one child node
  else if (currNode.left <> nil) xor (currNode.right <> nil) then
  begin
    // If the node to be deleted is the root
    if (currNode = root) then
    begin
      // Updating the root to the child node
      if (currNode.left <> nil) then
        root := currNode.left
      else
        root := currNode.right;

      // Freeing up the memory occupied by the node
      currNode.Free;
      currNode := nil;
    end
    else
    begin
      // Updating the parent node's child pointer to the child node
      if (parentNode.left = currNode) then
      begin
        if (currNode.left <> nil) then
          parentNode.left := currNode.left
        else
          parentNode.left := currNode.right;
      end
      else
      begin
        if (currNode.left <> nil) then
          parentNode.right := currNode.left
        else
          parentNode.right := currNode.right;
      end;

      // Freeing up the memory occupied by the node
      currNode.Free;
      currNode := nil;
    end;
  end
  // If the node to be deleted has two child nodes
  else
  begin
    // Finding the minimum node in the right subtree of the current node
    tempNode := currNode.right;
    while(tempNode.left <> nil) do
      tempNode := tempNode.left;

    // Storing the value of the minimum node
    val := tempNode.value;

    // Deleting the minimum node from the tree
    DeleteNode(root, tempNode.value);

    // Updating the current node's value
    currNode.value := val;
  end;
end;

// Initializing the root node
var
  root: TreeNode;

begin
  root := nil;

  // Inserting nodes in the tree
  InsertNode(root, 10);
  InsertNode(root, 5);
  InsertNode(root, 3);
  InsertNode(root, 8);
  InsertNode(root, 12);
  InsertNode(root, 11);
  InsertNode(root, 15);

  // Searching for a specific value in the tree
  Writeln('Node with value 11 exists in the tree: ', SearchNode(root, 11)); // Output: Node with value 11 exists in the tree: True

  // Deleting a node from the tree
  DeleteNode(root, 8);

  // Searching again for the deleted value
  Writeln('Node with value 8 exists in the tree: ', SearchNode(root, 8)); // Output: Node with value 8 exists in the tree: False
end.