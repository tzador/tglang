//This code snippet is a Delphi procedure that sorts an array of integers

procedure Sort(var arr: array of Integer; lIndex, rIndex: Integer);
var
  i, j: Integer;
  mid, temp: Integer;

begin
  i := lIndex;
  j := rIndex;
  mid := arr[(lIndex + rIndex) div 2]; //Finding the middle value of the array

  //Loop through the array and partition the elements
  while (i <= j) do
  begin
    while (arr[i] < mid) do i := i + 1; //Increment i while value is less than the middle value
    while (arr[j] > mid) do j := j - 1; //Decrement j while value is greater than the middle value
    if (i <= j) then //Swap elements and move to the next pair
    begin
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
      i := i + 1;
      j := j - 1;
    end;
  end;

  //Recursive calls for the left and right partitions
  if (lIndex < j) then Sort(arr, lIndex, j);
  if (i < rIndex) then Sort(arr, i, rIndex);
end;