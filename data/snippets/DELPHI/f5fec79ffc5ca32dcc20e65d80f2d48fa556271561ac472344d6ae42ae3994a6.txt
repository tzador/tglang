procedure TForm1.FormCreate(Sender: TObject);
var
  i: Integer;
  arr: array[1..10] of Integer; // declaring an array of size 10
begin
  Randomize; // function to generate random numbers
  for i := 1 to 10 do // loop to populate the array
    arr[i] := Random(100); // assigning a random number between 0 and 100 to each index
  ShowMessage('Array before sorting: ' + IntToStr(arr[1]) + ', ' + IntToStr(arr[2]) + ', ' + IntToStr(arr[3]) + ', ' + IntToStr(arr[4]) + ', ' + IntToStr(arr[5]) + ', ' + IntToStr(arr[6]) + ', ' + IntToStr(arr[7]) + ', ' + IntToStr(arr[8]) + ', ' + IntToStr(arr[9]) + ', ' + IntToStr(arr[10])); // displaying the contents of the array before sorting
  QuickSort(arr, 1, 10); // calling the QuickSort procedure to sort the array
  ShowMessage('Array after sorting: ' + IntToStr(arr[1]) + ', ' + IntToStr(arr[2]) + ', ' + IntToStr(arr[3]) + ', ' + IntToStr(arr[4]) + ', ' + IntToStr(arr[5]) + ', ' + IntToStr(arr[6]) + ', ' + IntToStr(arr[7]) + ', ' + IntToStr(arr[8]) + ', ' + IntToStr(arr[9]) + ', ' + IntToStr(arr[10])); // displaying the contents of the array after sorting
end;

procedure QuickSort(var arr: array of Integer; start, stop: Integer);
var
  left, right, pivot, temp: Integer;
begin
  left := start;
  right := stop;
  pivot := arr[(start + stop) div 2]; // selecting the middle element as the pivot
  while left <= right do // partitioning the array
  begin
    while arr[left] < pivot do
      left := left + 1;
    while arr[right] > pivot do
      right := right - 1;
    if left <= right then // swapping elements if they are on the wrong sides
    begin
      temp := arr[left];
      arr[left] := arr[right];
      arr[right] := temp;
      left := left + 1;
      right := right - 1;
    end;
  end;
  if start < right then
    QuickSort(arr, start, right); // recursively calling QuickSort on the left subarray
  if left < stop then
    QuickSort(arr, left, stop); // recursively calling QuickSort on the right subarray
end;