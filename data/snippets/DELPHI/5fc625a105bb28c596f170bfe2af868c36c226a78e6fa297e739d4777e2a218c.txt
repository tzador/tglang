//This code snippet creates a class and methods to handle an array of integers
type
  TCustomArray = class
    private
      FArray: array of Integer;
      FLength: Integer;
      FCapacity: Integer;
    public
      constructor Create;
      destructor Destroy; override;
      function GetLength: Integer;
      procedure EnsureCapacity(aCapacity: Integer);
      procedure Add(aValue: Integer);
      procedure Remove(index: Integer);
      function GetValue(index: Integer): Integer;
      procedure SetValue(index: Integer; value: Integer);
      property Count: Integer read GetLength;
      property Capacity: Integer read FCapacity write EnsureCapacity;
      property Value[index: Integer]: Integer read GetValue write SetValue; default;
      property AsString: string read GetAsString;
    private
      function GetAsString: string;
  end;
  
constructor TCustomArray.Create;
begin
  FLength := 0;
  FCapacity := 1;
  SetLength(FArray, FCapacity);
end;

destructor TCustomArray.Destroy;
begin
  FLength := 0;
  FCapacity := 0;
  SetLength(FArray, 0);
  inherited Destroy;
end;

function TCustomArray.GetLength: Integer;
begin
  Result := FLength;
end;

procedure TCustomArray.EnsureCapacity(aCapacity: Integer);
begin
  if aCapacity > FCapacity then
  begin
    FCapacity := aCapacity;
    SetLength(FArray, FCapacity);
  end;
end;

procedure TCustomArray.Add(aValue: Integer);
begin
  if FLength < FCapacity then
  begin
    FArray[FLength] := aValue;
    FLength := FLength + 1;
  end
  else
  begin
    Capacity := FLength * 2;
    Add(aValue);
  end;
end;

procedure TCustomArray.Remove(index: Integer);
var
  i: Integer;
begin
  if (index > -1) and (index < FLength) then
  begin
    FLength := FLength - 1;
    for i := index to FLength - 1 do
    begin
      FArray[i] := FArray[i + 1];
    end;
  end;
end;

function TCustomArray.GetValue(index: Integer): Integer;
begin
  if (index > -1) and (index < FLength) then
  begin
    Result := FArray[index];
  end
  else
  begin
    raise Exception.Create('Index out of bounds.');
  end;
end;

procedure TCustomArray.SetValue(index: Integer; value: Integer);
begin
  if (index > -1) and (index < FLength) then
  begin
    FArray[index] := value;
  end
  else
  begin
    raise Exception.Create('Index out of bounds.');
  end;
end;

function TCustomArray.GetAsString: string;
var
  i: Integer;
begin
  Result := '[';
  for i := 0 to FLength - 1 do
  begin
    Result := Result + IntToStr(FArray[i]);
    if (i < FLength - 1) then
    begin
      Result := Result + ', ';
    end;
  end;
  Result := Result + ']';
end;