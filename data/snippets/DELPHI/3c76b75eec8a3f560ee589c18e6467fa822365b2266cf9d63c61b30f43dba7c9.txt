// This code snippet demonstrates a custom sorting function in Delphi
// The sorting function takes in a generic array of any type and sorts it in ascending order
// The function makes use of the 'Swap' function to switch elements in the array
procedure CustomSort(var Arr: array of T; Compare: TComparison<T>);
var
  Sorted: Boolean; // flag to indicate if array is sorted
begin
  repeat
    Sorted := True;
    for i := Low(Arr) to High(Arr) - 1 do // loop through array
    begin
      // compare adjacent elements and swap if necessary
      if Compare(Arr[i], Arr[i+1]) > 0 then
      begin
        Swap(Arr[i], Arr[i+1]); // switch positions
        Sorted := False; // set flag to indicate array is not yet sorted
      end;
    end;
  until Sorted; // repeat until array is sorted
end;

// Sample usage of CustomSort function
var
  MyArray: array[1..5] of Integer = (5, 3, 1, 2, 4); // declare and initialize array
begin
  // call CustomSort function and pass in anonymous function to compare elements
  CustomSort(MyArray,
    function(Num1, Num2: Integer): Integer
    begin
      if Num1 > Num2 then
        Result := 1 // return positive integer if Num1 is greater than Num2
      else if Num1 < Num2 then
        Result := -1 // return negative integer if Num1 is less than Num2
      else
        Result := 0; // return 0 if Num1 and Num2 are equal
    end
  );
end.