unit WorldGenerator;

interface

uses
  SysUtils, Classes, Graphics, Types;

type
  TWorld = class(TObject)
  private
    FWidth: Integer;
    FHeight: Integer;
    FMap: array of array of Integer;
    FPixels: TBitmap;
  public
    constructor Create(Width, Height: Integer);
    destructor Destroy; override;
    procedure SaveToFile(const FileName: String);
    function GetPixelColor(X, Y: Integer): TColor;
    procedure SetPixelColor(X, Y: Integer; Color: TColor);
  end;

function GenerateRandomWorld(Width, Height: Integer): TWorld;
  { Generates a random world with the specified dimensions and returns it as a TWorld object.
    The world is filled with randomly colored pixels. }

implementation

{ TWorld }

constructor TWorld.Create(Width, Height: Integer);
var
  I, J: Integer;
begin
  inherited Create;

  FWidth := Width;
  FHeight := Height;

  SetLength(FMap, FWidth, FHeight);

  FPixels := TBitmap.Create;
  FPixels.Width := FWidth;
  FPixels.Height := FHeight;

  for I := 0 to FWidth - 1 do
  begin
    for J := 0 to FHeight - 1 do
    begin
      FMap[I, J] := Random(MaxInt);
      FPixels.Canvas.Pixels[I, J] := FMap[I, J];
    end;
  end;
end;

destructor TWorld.Destroy;
begin
  FPixels.Free;
  inherited;
end;

function TWorld.GetPixelColor(X, Y: Integer): TColor;
begin
  Result := FPixels.Canvas.Pixels[X, Y];
end;

procedure TWorld.SetPixelColor(X, Y: Integer; Color: TColor);
begin
  FMap[X, Y] := Color;
  FPixels.Canvas.Pixels[X, Y] := Color;
end;

procedure TWorld.SaveToFile(const FileName: String);
begin
  FPixels.SaveToFile(FileName);
end;

function GenerateRandomWorld(Width, Height: Integer): TWorld;
var
  World: TWorld;
begin
  World := TWorld.Create(Width, Height);
  Result := World;
end;