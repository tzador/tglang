// This code snippet creates a custom database application in Delphi
//The application enables the user to add, edit, delete and search records.
program DatabaseApp;
// Create a record structure to store information about a person
type
  Person = record
    Id: Integer;
    Name: string;
    Age: Integer;
    Job: string;
    Address: string;
  end;

// Create a dynamic array of Person records to store multiple records
var
  People: Array of Person;
// Create a variable to store the current number of records in the array
var
  NumRecords: Integer = 0;

  // A procedure to add a new record to the database
  procedure AddRecord;
  var
    NewPerson: Person;
  begin
    // Prompt user for input and assign values to the new record
    WriteLn('Enter a new person record:');
    Write('ID: ');
    ReadLn(NewPerson.Id);
    Write('Name: ');
    ReadLn(NewPerson.Name);
    Write('Age: ');
    ReadLn(NewPerson.Age);
    Write('Job: ');
    ReadLn(NewPerson.Job);
    Write('Address: ');
    ReadLn(NewPerson.Address);

    // Add the new record to the end of the array
    SetLength(People, NumRecords + 1);
    People[NumRecords] := NewPerson;
    // Increment the number of records
    Inc(NumRecords);
  end;

  // A procedure to edit an existing record in the database
  procedure EditRecord(index: Integer);
  var
    EditPerson: Person;
  begin
    // Prompt user for input and assign values to the new record
    WriteLn('Editing person record with ID ', People[index].Id, ':');
    Write('Name: ');
    ReadLn(EditPerson.Name);
    Write('Age: ');
    ReadLn(EditPerson.Age);
    Write('Job: ');
    ReadLn(EditPerson.Job);
    Write('Address: ');
    ReadLn(EditPerson.Address);

    // Update the record in the array with the new values
    People[index].Name := EditPerson.Name;
    People[index].Age := EditPerson.Age;
    People[index].Job := EditPerson.Job;
    People[index].Address := EditPerson.Address;
  end;

  // A procedure to delete a record from the database
  procedure DeleteRecord(index: Integer);
  begin
    // Shift all records after the deleted record by one position
    for var i := index to High(People) - 1 do
      People[i] := People[i + 1];

    // Reduce the length of the array by one and update the number of records
    SetLength(People, Length(People) - 1);
    Dec(NumRecords);
  end;

  // A procedure to search for a record by ID and print its details
  procedure SearchRecord;
  var
    SearchId: Integer;
  begin
    // Prompt user for input
    Write('Enter the ID of the record you want to search for: ');
    ReadLn(SearchId);

    // Search for the record in the array
    for var i := 0 to High(People) do
    begin
      if People[i].Id = SearchId then
      begin
        // Print the record details
        WriteLn('Person record with ID ', SearchId, ':');
        WriteLn('Name: ', People[i].Name);
        WriteLn('Age: ', People[i].Age);
        WriteLn('Job: ', People[i].Job);
        WriteLn('Address: ', People[i].Address);
      end;
    end;
  end;

(*================================Main Program====================================*)

// Main program
begin
  // Welcome message and options menu
  WriteLn('Welcome to the Database Application!');
  WriteLn('1. Add new record');
  WriteLn('2. Edit existing record');
  WriteLn('3. Delete record');
  WriteLn('4. Search record');
  WriteLn('0. Exit');

  // Loop until user chooses to exit
  while True do
  begin
    Write('Enter your choice: ');
    var choice: Integer;
    ReadLn(choice);

    // Execute the corresponding procedure based on user's choice
    case choice of
      1: AddRecord;
      2:
        begin
          Write('Enter the index of the record you want to edit: ');
          var index: Integer;
          ReadLn(index);
          EditRecord(index);
        end;
      3:
        begin
          Write('Enter the index of the record you want to delete: ');
          var index: Integer;
          ReadLn(index);
          DeleteRecord(index);
        end;
      4: SearchRecord;
      0: Exit;
      else
        WriteLn('Invalid choice, please try again.');
    end;

    // Print the current records in the database
    WriteLn('Current records:');
    for var i := 0 to High(People) do
    begin
      // Print the details of each record
      WriteLn('ID: ', People[i].Id);
      WriteLn('Name: ', People[i].Name);
      WriteLn('Age: ', People[i].Age);
      WriteLn('Job: ', People[i].Job);
      WriteLn('Address: ', People[i].Address);
    end;
    WriteLn();
  end;
end.