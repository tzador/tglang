unit Unit1;
{This is a sample unit with a class, procedure and function}
interface
uses
   SysUtils;

type
   TSampleClass = class
   private
      FSampleInt: Integer; {private variable}
   public
      constructor Create; {constructor}
      function SampleFunction(a, b: Integer): Integer; {sample function with parameters}
      procedure SampleProcedure; {procedure}
   published
      property SampleInteger: Integer read FSampleInt write FSampleInt; {published property}
   end;
   
constructor TSampleClass.Create;
begin
   inherited;
   FSampleInt := 0; {initializing private variable}
end;

function TSampleClass.SampleFunction(a, b: Integer): Integer;
begin
   Result := a + b; {returns sum of two parameters}
end;

procedure TSampleClass.SampleProcedure;
var
   SampleStr: String; {local variable}
begin
   SampleStr := 'Sample String'; {assigning value to local variable}
   WriteLn('Printing sample string: ' + SampleStr); {printing sample string}
end;

begin
   {main code}
   with TSampleClass.Create do {creating instance of class}
   begin
      SampleInteger := 10; {setting value for published property}
      SampleProcedure; {calling procedure}
      WriteLn('Result of sample function: ' + SampleFunction(5, SampleInteger)); {calling function with parameters}
      Free; {freeing class instance}
   end;
end.