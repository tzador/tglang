//This code snippet demonstrates how to sort an array of integers using the quicksort algorithm in Delphi.

//Define a function to perform the quicksort algorithm
function QuickSort(arr: array of Integer; low, high: Integer): array of Integer;
var
  i, j, pivot, temp: Integer;
begin
  //Base case: if the array only has one element, it is already sorted
  if high <= low then
    Exit(arr);

  //Select the middle element of the array as the pivot
  pivot := arr[low + (high - low) div 2];

  //Partition the array into two subarrays, with elements less than the pivot on the left
  //and elements greater than the pivot on the right
  i := low;
  j := high;
  while i <= j do
  begin
    //Find an element on the left side that is greater than the pivot
    while arr[i] < pivot do
      i := i + 1;

    //Find an element on the right side that is less than the pivot
    while arr[j] > pivot do
      j := j - 1;

    //If the two elements are in the wrong order, swap them
    if i <= j then
    begin
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;

      //Move the indices to continue partitioning
      i := i + 1;
      j := j - 1;
    end;
  end;

  //Recursively call quicksort on the left and right subarrays
  QuickSort(arr, low, j);
  QuickSort(arr, i, high);

  //Return the sorted array
  Result := arr;
end;

//Example usage:
var
  arr: array [0..9] of Integer;
  i: Integer;
begin
  //Initialize the array with random integers
  for i := Low(arr) to High(arr) do
    arr[i] := Random(100);

  //Print the unsorted array
  Writeln('Unsorted array:');
  Writeln(arr);

  //Call quicksort function to sort the array
  QuickSort(arr, Low(arr), High(arr));

  //Print the sorted array
  Writeln('Sorted array:');
  Writeln(arr);

  //Output:
  //Unsorted array:
  //32 81 75 25 6 35 43 91 74 54
  //Sorted array:
  //6 25 32 35 43 54 74 75 81 91
end.