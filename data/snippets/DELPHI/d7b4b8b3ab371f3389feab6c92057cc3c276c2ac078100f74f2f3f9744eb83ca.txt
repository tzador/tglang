procedure TForm1.Button1Click(Sender: TObject);
var
  i: Integer;
begin
  // Creates an array with 10 elements
  SetLength(myArray, 10);
  
  // Fills the array with random numbers between 1 and 100
  for i := 0 to Length(myArray) - 1 do
  begin
    myArray[i] := RandomRange(1, 100);
  end;
  
  // Sorts the array in ascending order
  QuickSort(myArray, 0, Length(myArray) - 1);
  
  // Displays the sorted array in a message box 
  ShowMessage('Sorted Array: ' + IntToStr(myArray));
end;

// QuickSort procedure to sort the array in ascending order
procedure QuickSort(var A: array of Integer; Low, High: Integer);
var
  i, j, Pivot, temp: Integer;
begin
  // Sets the pivot to the middle element of the array
  Pivot := A[(Low + High) div 2];
  i := Low;
  j := High;
  
  // Partitions the array into two subarrays based on the pivot value
  while i <= j do
  begin
    // Finds the first element from the left that is greater than the pivot
    while A[i] < Pivot do
    begin
      i := i + 1;
    end;
    
    // Finds the first element from the right that is less than the pivot
    while A[j] > Pivot do
    begin
      j := j - 1;
    end;
    
    // Swaps the elements if they are in the wrong subarray
    if i <= j then
    begin
      temp := A[i];
      A[i] := A[j];
      A[j] := temp;
      
      // Moves to the next element in both subarrays
      i := i + 1;
      j := j - 1;
    end;
  end;
  
  // Recursively calls the QuickSort procedure on the two subarrays
  if Low < j then
  begin
    QuickSort(A, Low, j);
  end;
  
  if i < High then
  begin
    QuickSort(A, i, High);
  end;
end;