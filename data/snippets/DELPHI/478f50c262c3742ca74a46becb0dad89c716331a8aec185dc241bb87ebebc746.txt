unit Unit1; {Delphi unit definition}

interface {interface section of unit}

uses {list of units used}
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Menus, CommCtrl, ComCtrls, Grids, StrUtils,
  Math, ActiveX, ShlObj;

const //constants used in unit
  MAX_COUNT = 1000;
  MIN_COUNT = 0;

type //define types used in unit
  TMyRecord = record
    Name: string;
    Age: integer;
  end;
  TMyArray = array[0..9] of integer;

var //global variables used in unit
  MyRecord: TMyRecord; //define an instance of TMyRecord
  MyArray: TMyArray; //define an instance of TMyArray

procedure Calculate(var x: integer; var y: integer); //define a procedure

function Factorial(n: integer): integer; //define a function

implementation {implementation section of unit}

{$R *.dfm} //instruct the compiler to include a form resource file

procedure Calculate(var x: integer; var y: integer); //implementation of Calculate procedure
begin
  x := x + 1; //increment x by 1
  y := y * 2; //multiply y by 2
end;

function Factorial(n: integer): integer; //implementation of Factorial function
var
  i: integer;
begin
  Result := 1; //initial result is 1
  for i := 1 to n do //loop from 1 to n
    Result := Result * i; //multiply result by current iteration
end;

begin //main body of program
  MyRecord.Name := 'John'; //set value for Name field in MyRecord
  MyRecord.Age := 30; //set value for Age field in MyRecord
  MyArray[0] := Factorial(MyRecord.Age); //call Factorial function and assign result to first element of MyArray
  ShowMessage('The factorial of ' + IntToStr(MyRecord.Age) + ' is ' + IntToStr(MyArray[0])); //display message with factorial result
end.