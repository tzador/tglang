{$APPTYPE CONSOLE} //defines the type of application being created
program ComplexCodeSnippet; //program name

uses
  System.SysUtils, //unit used for system functions
  System.DateUtils; //unit used for date and time functions

type
  TCar = record //record type for a car
    Model: string; //field for model of the car
    Year: Integer; //field for year of the car
    Color: string; //field for color of the car
  end;

  TDriver = class //class type for a driver
  private //private declarations
    FFullName: string; //field for full name of the driver
    FBirthdate: TDateTime; //field for birthdate of the driver
    FLicenseNumber: string; //field for driver's license number
    FCar: TCar; //field for driver's car
  public //public declarations
    constructor Create(const AFullName: string; ABirthdate: TDateTime; 
      const ALicenseNumber: string; const ACar: TCar); //constructor for TDriver
    procedure Drive(ADestination: string); //procedure for driving to a destination
  end;

constructor TDriver.Create(const AFullName: string; ABirthdate: TDateTime; 
  const ALicenseNumber: string; const ACar: TCar); //constructor implementation
begin
  FFullName := AFullName;
  FBirthdate := ABirthdate;
  FLicenseNumber := ALicenseNumber;
  FCar := ACar;
end;

procedure TDriver.Drive(ADestination: string); //procedure implementation
begin
  Writeln(FFullName + ' is driving a ' + FCar.Color + ' ' + FCar.Model +
    ' from ' + DateToStr(Today) + ' to ' + ADestination + '.'); //prints driving message
end;

var
  Car1: TCar; //declaring a variable of type TCar
  Driver1: TDriver; //declaring a variable of type TDriver
begin
  try //try statement for error handling
    Car1.Model := 'BMW'; //assigning values to the fields of Car1
    Car1.Year := 2015;
    Car1.Color := 'black';

    Driver1 := TDriver.Create('John Doe', EncodeDate(1990, 4, 15), 'D12345', Car1); 
    //creating an instance of TDriver, passing in the required parameters

    Driver1.Drive('the beach'); //calling the Drive procedure for Driver1

  except //exception handling
    on E: Exception do //catching and handling any exceptions
      Writeln('Error: ' + E.Message);
  end;
  
end.