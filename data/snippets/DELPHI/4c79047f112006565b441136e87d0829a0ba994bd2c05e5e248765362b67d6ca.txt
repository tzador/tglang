unit Test;

interface

type
  // This is a custom record type that will store information about a person
  TPerson = record
    ID: Integer; // The person's unique identifier
    Name: String; // The person's name
    Age: Integer; // The person's age
    Address: String; // The person's address
  end;

  // This is a static class that will be used to store and retrieve person data
  TPersonRepository = class
    private
      class var FPeople: array of TPerson; // An array to store all the people
    public
      // This function will add a new person to the repository
      class function AddPerson(person: TPerson): Integer;
      // This function will get a person's information from the repository based on their ID
      class function GetPerson(ID: Integer): TPerson;
  end;

implementation

{ TPerson }

class function TPersonRepository.AddPerson(person: TPerson): Integer;
begin
  // Increase the length of the people array by 1
  SetLength(FPeople, Length(FPeople) + 1);
  // Set the new person as the last element in the array
  FPeople[High(FPeople)] := person;
  // Return the person's ID
  Result := person.ID;
end;

class function TPersonRepository.GetPerson(ID: Integer): TPerson;
var
  i: Integer;
begin
  // Loop through the people array
  for i := Low(FPeople) to High(FPeople) do
  begin
    // Check if the current person's ID matches the specified ID
    if FPeople[i].ID = ID then
    begin
      // If there is a match, return the person record
      Result := FPeople[i];
      Exit;
    end;
  end;
  // If no match is found, return an empty person record
  FillChar(Result, SizeOf(Result), 0);
end;

end.