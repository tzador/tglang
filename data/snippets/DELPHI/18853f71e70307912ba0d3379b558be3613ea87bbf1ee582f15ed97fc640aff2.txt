// This code snippet implements a binary search tree data structure in Delphi
type
  PNode = ^TNode;
  TNode = record
    Value: Integer;
    Left, Right: PNode;
  end;
  
  // Function to insert a new value into the binary search tree
  // Parameters:
  // - Root: The root of the tree
  // - Value: The value to be inserted
procedure Insert(var Root: PNode; Value: Integer);
begin
  // If root is nil, create new node with given value and assign to root
  if Root = nil then
  begin
    New(Root);
    Root^.Value := Value;
    Root^.Left := nil;
    Root^.Right := nil;
  end
  // If value is less than root's value, recursively insert into left subtree
  else if Value < Root^.Value then
    Insert(Root^.Left, Value)
  // If value is greater than root's value, recursively insert into right subtree
  else
    Insert(Root^.Right, Value);
end;

// Function to check if a given value is present in the binary search tree
// Parameters:
// - Root: The root of the tree
// - Value: The value to be searched
// Returns:
// - True if value is found, False if not found
function Search(Root: PNode; Value: Integer): Boolean;
begin
  // If root is nil, return False
  if Root = nil then
    Result := False
  // If value is equal to root's value, return True
  else if Value = Root^.Value then
    Result := True
  // If value is less than root's value, recursively search in left subtree
  else if Value < Root^.Value then
    Result := Search(Root^.Left, Value)
  // If value is greater than root's value, recursively search in right subtree
  else
    Result := Search(Root^.Right, Value);
end;

// Function to delete a node from the binary search tree
// Parameters:
// - Root: The root of the tree
// - Value: The value to be deleted
procedure Delete(var Root: PNode; Value: Integer);
var
  Temp: PNode;
begin
  // If root is nil, return as there is nothing to delete
  if Root = nil then
    Exit
  // If value is less than root's value, recursively delete from left subtree
  else if Value < Root^.Value then
    Delete(Root^.Left, Value)
  // If value is greater than root's value, recursively delete from right subtree
  else if Value > Root^.Value then
    Delete(Root^.Right, Value)
  // If value is equal to root's value
  else
  begin
    // If root has no children, simply delete the node
    if (Root^.Left = nil) and (Root^.Right = nil) then
    begin
      Dispose(Root);
      Root := nil;
    end
    // If root has a right child, replace with the minimum value in the right subtree
    else if Root^.Right <> nil then
    begin
      Temp := Root^.Right;
      Root^.Value := Temp^.Value;
      Root^.Right := Temp^.Right;
      Dispose(Temp);
    end
    // If root has a left child, replace with the maximum value in the left subtree
    else
    begin
      Temp := Root^.Left;
      Root^.Value := Temp^.Value;
      Root^.Left := Temp^.Left;
      Dispose(Temp);
    end;
  end;
end;