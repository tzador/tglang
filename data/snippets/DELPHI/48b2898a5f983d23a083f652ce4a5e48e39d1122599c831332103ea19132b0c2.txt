program ComplexCode;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  SysUtils,
  Classes,
  Windows,
  Variants,
  Math;

type
  TMyClass = class
  private
    FInteger: Integer;
    FString: string;
    FFloat: Double;
  public
    constructor Create(AInteger: Integer; AString: string; AFloat: Double); // constructor with parameters
    destructor Destroy; // destructor
    procedure SetInteger(AInteger: Integer); // method to set FInteger value
    procedure SetString(AString: string); // method to set FString value
    procedure SetFloat(AFloat: Double); // method to set FFloat value
    function GetInteger: Integer; // method to get FInteger value
    function GetString: string; // method to get FString value
    function GetFloat: Double; // method to get FFloat value
    function CalculateSum(AInteger: Integer; AFloat: Double): Double; // function to calculate sum of two values
  end;

constructor TMyClass.Create(AInteger: Integer; AString: string; AFloat: Double); // constructor implementation
begin
  FInteger := AInteger; // assign parameter value to FInteger
  FString := AString; // assign parameter value to FString
  FFloat := AFloat; // assign parameter value to FFloat
end;

destructor TMyClass.Destroy; // destructor implementation
begin
  // perform cleanup actions
end;

procedure TMyClass.SetInteger(AInteger: Integer); // method implementation
begin
  FInteger := AInteger; // assign parameter value to FInteger
end;

procedure TMyClass.SetString(AString: string); // method implementation
begin
  FString := AString; // assign parameter value to FString
end;

procedure TMyClass.SetFloat(AFloat: Double); // method implementation
begin
  FFloat := AFloat; // assign parameter value to FFloat
end;

function TMyClass.GetInteger: Integer; // method implementation
begin
  Result := FInteger; // return FInteger value
end;

function TMyClass.GetString: string; // method implementation
begin
  Result := FString; // return FString value
end;

function TMyClass.GetFloat: Double; // method implementation
begin
  Result := FFloat; // return FFloat value
end;

function TMyClass.CalculateSum(AInteger: Integer; AFloat: Double): Double; // function implementation
begin
  Result := FInteger + FFloat; // calculate sum of FInteger and FFloat, and return the result
end;

var
  MyObject: TMyClass; // declare variable of type TMyClass
  IntegerValue: Integer;
  StringValue: string;
  FloatValue: Double;
  Sum: Double;
begin
  try
    MyObject := TMyClass.Create(10, 'Hello', 3.14); // instantiate object of type TMyClass using constructor
    IntegerValue := MyObject.GetInteger; // get value of FInteger using GetInteger method
    StringValue := MyObject.GetString; // get value of FString using GetString method
    FloatValue := MyObject.GetFloat; // get value of FFloat using GetFloat method
    Sum := MyObject.CalculateSum(IntegerValue, FloatValue); // calculate sum using CalculateSum function
    Writeln('Integer value: ' + IntegerValue.ToString);
    Writeln('String value: ' + StringValue);
    Writeln('Float value: ' + FloatValue.ToString);
    Writeln('Sum of integer and float values: ' + Sum.ToString);
    MyObject.Free; // free the object after use
    Readln; // wait for user input
  except
    on E: Exception do
      Writeln('Error: ' + E.Message); // print error message
  end;
end.