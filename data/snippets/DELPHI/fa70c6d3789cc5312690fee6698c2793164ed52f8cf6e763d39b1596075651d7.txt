// This code snippet is written in Delphi, a popular Object-Oriented Pascal-based language
unit Unit1; // declare unit

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls;

type
  TSomeClass = class(TObject) // declare a class named TSomeClass that inherits from TObject class
  private // private section - only accessible within the class itself
    FSomething: string; // private variable declaration
    procedure DoSomething(AParam: Integer); // private procedure declaration
  public // public section - accessible from other units and classes
    constructor Create(ASomething: string); // public constructor declaration
    destructor Destroy; override; // public destructor declaration
    function GetSomething: string; // public function declaration
  end;

var
  Form1: TForm1; // declare a form variable

implementation

{$R *.dfm} // include object definitions from the .dfm file, including form design and components

constructor TSomeClass.Create(ASomething: string); // constructor definition, assigns passed string to FSomething
begin
  FSomething := ASomething;
end;

destructor TSomeClass.Destroy; // destructor definition
begin
  inherited; // calls destructor of inherited class
end;

procedure TSomeClass.DoSomething(AParam: Integer); // procedure definition, takes in an integer parameter
begin
  ShowMessage(IntToStr(AParam) + ' ' + FSomething); // displays message box with concatenated string
end;

function TSomeClass.GetSomething: string; // function definition
begin
  Result := FSomething; // returns value of FSomething
end;

procedure TForm1.Button1Click(Sender: TObject); // event handler for button click
var
  MyClass: TSomeClass; // declare instance of TSomeClass
begin
  MyClass := TSomeClass.Create('Hello'); // initialize instance with string parameter
  try
    MyClass.DoSomething(5); // call class procedure with integer parameter
    ShowMessage(MyClass.GetSomething); // display returned string using class function
  finally
    MyClass.Free; // free up allocated memory
  end;
end;

end.