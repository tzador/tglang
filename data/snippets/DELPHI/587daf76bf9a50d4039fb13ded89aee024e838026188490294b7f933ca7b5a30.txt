//This snippet defines a custom widget class with properties, methods, and events

unit CustomWidget;

interface

uses
  Forms, Classes, Controls, Graphics, StdCtrls, ExtCtrls;

type
  // Define the class
  TCustomWidget = class(TPanel)
  private
    FText: string;
    FFont: TFont;
    FColor: TColor;
    FVisible: Boolean;
    FOnClick: TNotifyEvent;
    procedure Draw; //method to draw the widget
    procedure Click; //method to handle the widget click event
    procedure SetText(const Value: string); //property setter for the Text property
    procedure SetFont(const Value: TFont); //property setter for the Font property
    procedure SetColor(const Value: TColor); //property setter for the Color property
    procedure SetVisible(const Value: Boolean); //property setter for the Visible property
  protected
    procedure Paint; override; //override the Paint method to draw the widget
  public
    constructor Create(AOwner: TComponent); override; //constructor to initialize the properties
    destructor Destroy; override; //destructor to free the memory used by the font
  published
    property Text: string read FText write SetText; //Text property with getter and setter methods
    property Font: TFont read FFont write SetFont; //Font property with getter and setter methods
    property Color: TColor read FColor write SetColor; //Color property with getter and setter methods
    property Visible: Boolean read FVisible write SetVisible; //Visible property with getter and setter methods
    property OnClick: TNotifyEvent read FOnClick write FOnClick; //OnClick event for the widget
  end;

implementation

constructor TCustomWidget.Create(AOwner: TComponent);
begin
  inherited; //call the inherited constructor
  FFont := TFont.Create; //initialize the font object
  FText := 'Custom Widget'; //default text for the widget
  FColor := clBtnFace; //default color for the widget
  FVisible := True; //default visible state for the widget
end;

destructor TCustomWidget.Destroy;
begin
  FFont.Free; //free the memory used by the font object
  inherited; //call the inherited destructor
end;

procedure TCustomWidget.Draw;
var
  TextWidth: Integer; //variable to store the width of the text
  TextHeight: Integer; //variable to store the height of the text
  TextX: Integer; //variable to store the x position of the text
  TextY: Integer; //variable to store the y position of the text
begin
  Canvas.Brush.Color := FColor; //set the color for the canvas
  Canvas.Rectangle(0, 0, Width, Height); //draw a rectangle for the background
  TextWidth := Canvas.TextWidth(FText); //calculate the width of the text
  TextHeight := Canvas.TextHeight(FText); //calculate the height of the text
  TextX := (Width - TextWidth) div 2; //calculate the x position of the text
  TextY := (Height - TextHeight) div 2; //calculate the y position of the text
  Canvas.Font := FFont; //set the font for the canvas
  Canvas.TextOut(TextX, TextY, FText); //draw the text on the canvas
end;

procedure TCustomWidget.Click;
begin
  Invalidate; //redraw the widget when it is clicked
  if Assigned(FOnClick) then //check if the OnClick event has been assigned
    FOnClick(Self); //trigger the OnClick event
end;

procedure TCustomWidget.Paint;
begin
  if FVisible then //only draw the widget if it is visible
    Draw;
end;

procedure TCustomWidget.SetText(const Value: string);
begin
  if FText <> Value then //only update the text if it has changed
  begin
    FText := Value;
    Invalidate; //redraw the widget to show the new value
  end;
end;

procedure TCustomWidget.SetFont(const Value: TFont);
begin
  FFont.Assign(Value); //assign the font to the font object to preserve properties
  Invalidate; //redraw the widget to reflect the new font
end;

procedure TCustomWidget.SetColor(const Value: TColor);
begin
  if FColor <> Value then //only update the color if it has changed
  begin
    FColor := Value;
    Invalidate; //redraw the widget to show the new color
  end;
end;

procedure TCustomWidget.SetVisible(const Value: Boolean);
begin
  if FVisible <> Value then //only update the visible state if it has changed
  begin
    FVisible := Value;
    Invalidate; //redraw the widget to reflect the new visible state
  end;
end;

end.