function MergeSort(list: TList; low: Integer; high: Integer): TList;
// function to perform a merge sort algorithm on a list of numbers
var
  i, j, k, mid, temp: Integer;
  tempList: TList;
begin
  if (low < high) then
  begin
    mid := (low + high) div 2; // determine the middle of the list
    tempList := TList.Create;
    
    MergeSort(list, low, mid); // recursively sort the left half of the list
    MergeSort(list, mid + 1, high); // recursively sort the right half of the list
    
    // merge the results from the two sorted halves
    i := low;
    j := mid + 1;
    k := 0;

    while (i <= mid) and (j <= high) do // iterate through both halves
    begin
      if (list[i] < list[j]) then // check which half has the smaller value and add it to the temporary list
      begin
        tempList[k] := list[i];
        i := i + 1;
      end
      else
      begin
        tempList[k] := list[j];
        j := j + 1;
      end;
      
      k := k + 1;
    end;
    
    while (i <= mid) do // add any remaining elements from the left half to the temporary list
    begin
      tempList[k] := list[i];
      i := i + 1;
      k := k + 1;
    end;
    
    while (j <= high) do // add any remaining elements from the right half to the temporary list
    begin
      tempList[k] := list[j];
      j := j + 1;
      k := k + 1;
    end;
    
    for i := low to high do // copy the temporary list back into the original list
    begin 
      list[i] := tempList[i - low];
    end;
    
    tempList.Free; // free the temporary list from memory
  end;
  
  Result := list; // return the sorted list
end;