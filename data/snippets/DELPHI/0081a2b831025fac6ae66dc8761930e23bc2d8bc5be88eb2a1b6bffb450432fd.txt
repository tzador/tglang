// Declare a generic class
type
  // Class name: TList
  // Generic type: T
  TList<T> = class(TObject)
  private
    // Declare a record type
    type
      // Record name: TListNode
      // Fields: Value: T; Next: TListNode
      TListNode = record
        Value: T;
        Next: TListNode;
      end;
    var
      // Declare private variables
      FHead, FTail: TListNode;
      FCount: Integer;
  public
    // Declare public methods
      
    // Constructor with no parameters
    constructor Create;
    // Destructor
    destructor Destroy; override;
    // Add a new item to the end of the list
    procedure Add(const Value: T);
    // Get the number of items in the list
    function Count: Integer;
    // Get the item at the specified index
    function ItemAt(const Index: Integer): T;
  end;

// Constructor definition
constructor TList<T>.Create;
begin
  inherited Create;
  // Initialize private variables
  FHead.Next := nil;
  FTail := FHead;
  FCount := 0;
end;

// Destructor definition
destructor TList<T>.Destroy;
begin
  // Destroy all items in the list
  Clear;
  inherited Destroy;
end;

// Add procedure definition
procedure TList<T>.Add(const Value: T);
var
  // Declare a new node
  NewNode: TListNode;
begin
  // Set the value of the new node
  NewNode.Value := Value;
  // Point the tail to the new node
  FTail.Next := @NewNode;
  // Update the tail
  FTail := @NewNode;
  // Increase the count
  Inc(FCount);
end;

// Count function definition
function TList<T>.Count: Integer;
begin
  // Return the count
  Result := FCount;
end;

// ItemAt function definition
function TList<T>.ItemAt(const Index: Integer): T;
var
  Node: TListNode;
  i: Integer;
begin
  // Check if index is within range
  if Index < 0 then
    raise Exception.Create('Index out of range');
  
  // Set the starting node to the head
  Node := FHead;
  // Loop through the list to get to the desired node
  for i := 0 to Index do
  begin
    // Check if the next node is nil (end of list)
    if Node.Next = nil then
      raise Exception.Create('Index out of range');
    // Set the node to the next node
    Node := Node.Next;
  end;
  
  // Return the value of the node at the specified index
  Result := Node.Value;
end;

// Example usage:
// Create a new TList of integers
var
  IntList: TList<Integer>;
begin
  // Add some values to the list
  IntList.Add(5);
  IntList.Add(10);
  IntList.Add(15);
  
  // Print the number of items in the list
  WriteLn('Number of items: ' + IntToStr(IntList.Count));
  // Print the first item in the list
  WriteLn('First item: ' + IntToStr(IntList.ItemAt(0)));
  // Print the last item in the list
  WriteLn('Last item: ' + IntToStr(IntList.ItemAt(IntList.Count - 1));
end.