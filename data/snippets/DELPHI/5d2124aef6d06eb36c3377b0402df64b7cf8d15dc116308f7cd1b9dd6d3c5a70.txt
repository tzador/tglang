(*
  This program calculates the average grade for a list of students
  and outputs the average as well as a list of students who received
  an above average grade.
*)

program CalculateAverageGrade;

uses SysUtils, Math;

const
  MAX_STUDENTS = 50; (* maximum number of students *)

type
  Student = record (* student record type *)
    name: string; (* student name *)
    grades: array[1..5] of integer; (* array of 5 grades for each student *)
    averageGrade: real; (* calculated average grade *)
  end;

var
  studentList: array[1..MAX_STUDENTS] of Student; (* array of students *)
  numStudents: integer; (* number of students *)
  averageGrade: real; (* calculated average grade *)
  aboveAverage: array of string; (* dynamically allocated array for above average students *)
  numAboveAverage: integer; (* number of above average students *)
  i, j: integer; (* counter variables *)

(* function to calculate average grade for a given student *)
function CalculateAverage(student: Student): real;
var
  sum: integer; (* sum of grades *)
  i: integer; (* counter variable *)
begin
  sum := 0; (* initialize sum to 0 *)
  (* iterate through grades and add them to the sum *)
  for i := 1 to 5 do
  begin
    sum := sum + student.grades[i];
  end;
  (* calculate average by dividing sum by number of grades *)
  result := sum / 5;
end;

begin (* main program *)
  (* prompt user for number of students *)
  writeln('Enter the number of students:');
  readln(numStudents);
  (* ensure number of students does not exceed maximum *)
  if numStudents > MAX_STUDENTS then
  begin
    writeln('Maximum number of students exceeded.');
    Exit; (* exit program *)
  end;
  (* prompt user for student information *)
  for i := 1 to numStudents do
  begin
    writeln('Enter student ', i, ' name:');
    readln(studentList[i].name);
    (* prompt user for student grades *)
    writeln('Enter student ', i, ' grades:');
    for j := 1 to 5 do
    begin
      readln(studentList[i].grades[j]);
    end;
    (* calculate average grade for student and store it in the record *)
    studentList[i].averageGrade := CalculateAverage(studentList[i]);
  end;
  (* calculate overall average grade by summing all student averages and dividing by number of students *)
  for i := 1 to numStudents do
  begin
    averageGrade := averageGrade + studentList[i].averageGrade;
  end;
  averageGrade := averageGrade / numStudents;
  (* dynamically allocate above average array based on number of students *)
  setlength(aboveAverage, numStudents);
  (* iterate through students and add names of above average students to dynamically allocated array *)
  for i := 1 to numStudents do
  begin
    if studentList[i].averageGrade > averageGrade then
    begin
      aboveAverage[numAboveAverage] := studentList[i].name;
      numAboveAverage := numAboveAverage + 1;
    end;
  end;
  (* output average grade *)
  writeln('Average grade: ', averageGrade:0:2);
  (* output list of above average students *)
  writeln('Above average students:');
  for i := 0 to numAboveAverage - 1 do
  begin
    writeln(aboveAverage[i]);
  end;
end.