program ComplexSnippet;

{This is a Delphi program for implementing a complex algorithm}

var
  inputArray: array[1..10] of integer;
  resultArray: array[1..10] of integer;

procedure BubbleSort(var a: array of Integer);
{This procedure implements the Bubble Sort algorithm to sort an array of integers}
var
  i, j, temp: Integer;

begin
  for i := low(a) to high(a) do
  begin
    for j := low(a) to high(a) - 1 do
    begin
      if a[j] > a[j + 1] then
      begin
        temp := a[j];
        a[j] := a[j + 1];
        a[j + 1] := temp;
      end;
    end;
  end;
end;

function Fibonacci(n: Integer): Integer;
{This function calculates the nth number in the Fibonacci sequence recursively}
begin
  if (n = 1) or (n = 2) then
    Result := 1
  else
    Result := Fibonacci(n - 1) + Fibonacci(n - 2);
end;

begin
  //Input array
  inputArray[1] := 5;
  inputArray[2] := 3;
  inputArray[3] := 7;
  inputArray[4] := 9;
  inputArray[5] := 2;
  inputArray[6] := 1;
  inputArray[7] := 8;
  inputArray[8] := 4;
  inputArray[9] := 6;
  inputArray[10] := 10;

  //Print input array
  writeln('Input array:');
  for i := 1 to 10 do
    write(inputArray[i], ' ');

  //Sort array using Bubble Sort
  BubbleSort(inputArray);

  //Print sorted array
  writeln('Sorted array:');
  for i := 1 to 10 do
    write(inputArray[i], ' ');

  //Calculate and print Fibonacci sequence
  writeln('Fibonacci sequence:');
  for i := 1 to 10 do
  begin
    resultArray[i] := Fibonacci(i);
    write(resultArray[i], ' ');
  end;
end.