/// This code snippet demonstrates how to create a multi-threaded program in Delphi ///

// Declare a global thread object
var
  Thread: TThread;

// Create a custom thread class that extends TThread
type
  TMyThread = class(TThread)
  private
    FCount: Integer; // private variable for thread
  public
    procedure Execute; override; // override the Execute method

    property Count : Integer read FCount write FCount; // thread-safe property for accessing the private variable
end;

// Implementation of the Execute method
procedure TMyThread.Execute;
begin
  inherited; // call the inherited Execute method

  // perform desired thread actions here
  for I := 1 to 10 do
  begin
    Sleep(1000); // delays the thread for 1 second
    Count := I; // update the thread-safe property with the current iteration number
  end;
end;

// Create and start the thread
begin
  Thread := TMyThread.Create(True); // create the thread and set its Suspended property to True
  Thread.Free; // free the thread object after execution

  Thread.Count := 0; // set the initial value of the thread's thread-safe property
  Thread.Start; // start the thread's execution
  
  // wait for the thread to finish execution
  while Thread.Finished = False do
  begin
    Application.ProcessMessages; // process any pending events in the main thread
  end;
  
  // print the final value of the thread's thread-safe property
  Writeln('Final count: ' + IntToStr(Thread.Count));
end.