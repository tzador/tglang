// This code snippet shows how to implement a binary search algorithm in Delphi

// First, define a function that takes in an array of integers and the target value
// It will return the index of the target value if found, or -1 if not found
function BinarySearch(arr: array of Integer; target: Integer): Integer;
var 
    low, high, mid: Integer; // variables to track the low, high and mid positions
begin
    low := 0; // set the initial low position to 0
    high := Length(arr) - 1; // set the initial high position to the last index of the array

    // use a while loop to continue searching while the low position is less than or equal to the high position
    while low <= high do
    begin
        mid := (low + high) div 2; // calculate the mid position by taking the average of the low and high positions
        if arr[mid] = target then // if the target value is found at the mid position, return the index
            Result := mid
        else if arr[mid] < target then // if the target is greater than the value at the mid position, update the low position
            low := mid + 1
        else // if the target is less than the value at the mid position, update the high position
            high := mid - 1;
    end;
    
    Result := -1; // if the target value is not found, return -1
end;

// Now, let's test the function by creating an array and searching for a value
var
    myList: array of Integer; // declare an array of integers
    targetValue, index: Integer; // declare variables to store the target value and the index
begin
    myList := [2, 5, 10, 12, 17]; // initialize the array with some values
    targetValue := 12; // set the target value to search for
    index := BinarySearch(myList, targetValue); // call the BinarySearch function and store the result in the index variable
    if index <> -1 then // if the value is not -1, it means the target value was found
        Writeln('The target value was found at index ', index)
    else // otherwise, it was not found
        Writeln('The target value was not found');
end.