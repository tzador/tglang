procedure QuickSort(var A: Array of Integer; iLo, iHi: Integer);
{This procedure implements the quicksort algorithm to efficiently sort an array of integers.}
var
  Lo, Hi, Pivot, Temp: Integer;
begin
  Lo := iLo; {lower bound of the array}
  Hi := iHi; {upper bound of the array}
  Pivot := A[(Lo + Hi) div 2]; {selecting pivot element as the middle element of the array}

  while Lo <= Hi do {iterating until the lower bound is greater than the upper bound}
  begin
    while A[Lo] < Pivot do
      Inc(Lo); {moving the lower bound towards the pivot element}
    while A[Hi] > Pivot do
      Dec(Hi); {moving the upper bound towards the pivot element}

    if Lo <= Hi then {if the lower bound is still less than or equal to upper bound}
    begin
      Temp := A[Lo]; {swap elements at lower bound and upper bound}
      A[Lo] := A[Hi];
      A[Hi] := Temp;
      Inc(Lo); {increment lower bound}
      Dec(Hi); {decrement upper bound}
    end;
  end;

  if iLo < Hi then {recursively call quicksort with the subarray to the left of the pivot}
    QuickSort(A, iLo, Hi);
  if Lo < iHi then {recursively call quicksort with the subarray to the right of the pivot}
    QuickSort(A, Lo, iHi);
end;