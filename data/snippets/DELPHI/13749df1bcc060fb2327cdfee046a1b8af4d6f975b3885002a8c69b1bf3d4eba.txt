unit Main;
//A unit declaration in Delphi, declaring the name of the unit as "Main"

interface
//The interface section of the unit, where external elements are declared

uses
  SysUtils, Classes;
//The uses clause, importing units SysUtils and Classes into our Main unit

type
  //The type section of the unit, where custom types are defined
  TEmployee = class
    //Defines a class named TEmployee
    private
      FFirstName: string;
      FLastName: string;
      FSalary: Integer;
    public
      constructor Create(FirstName, LastName: string; Salary: Integer);
      //A constructor method for creating new instances of the class
      function GetFullName: string;
      //A public method for retrieving the full name of the employee
      procedure SetSalary(NewSalary: Integer);
      //A procedure for setting the salary of the employee
      function IncreaseSalary(Amount: Integer): Integer;
      //A function for increasing the salary of the employee by a specified amount
  end;

  TEmployeeList = class
    //Defines a class named TEmployeeList
    private
      FEmployees: array of TEmployee;
      //An array of type TEmployee for storing employee objects
      FCount: Integer;
      //An integer variable for keeping track of the number of employees in the list
    public
      constructor Create;
      //A constructor method for creating new instances of the class
      function GetEmployee(Index: Integer): TEmployee;
      //A public method for retrieving an employee from the list by its index
      function AddEmployee(Employee: TEmployee): Integer;
      //A function for adding an employee to the list and returning its index
      procedure RemoveEmployee(Index: Integer);
      //A procedure for removing an employee from the list by its index
  end;

implementation
//The implementation section of the unit, where the code for the class methods is written

{$R *.dfm}
//A compiler directive that specifies which resource file to use for this unit

{ TEmployee }
//Documentation comment for the TEmployee class

constructor TEmployee.Create(FirstName, LastName: string; Salary: Integer);
//Implementation of the Create method for the TEmployee class
begin
  FFirstName := FirstName;
  //Assigns the FirstName parameter to the FFirstName field of the class
  FLastName := LastName;
  //Assigns the LastName parameter to the FLastName field of the class
  FSalary := Salary;
  //Assigns the Salary parameter to the FSalary field of the class
end;

function TEmployee.GetFullName: string;
//Implementation of the GetFullName method for the TEmployee class
begin
  Result := FFirstName + ' ' + FLastName;
  //Concatenates the first and last name fields and returns them as a string
end;

procedure TEmployee.SetSalary(NewSalary: Integer);
//Implementation of the SetSalary method for the TEmployee class
begin
  FSalary := NewSalary;
  //Assigns the NewSalary parameter to the FSalary field of the class
end;

function TEmployee.IncreaseSalary(Amount: Integer): Integer;
//Implementation of the IncreaseSalary method for the TEmployee class
begin
  FSalary := FSalary + Amount;
  //Increases the current salary by the specified amount and assigns it to the FSalary field of the class
  Result := FSalary;
  //Returns the updated salary
end;

{ TEmployeeList }
//Documentation comment for the TEmployeeList class

constructor TEmployeeList.Create;
//Implementation of the Create method for the TEmployeeList class
begin
  FCount := 0;
  //Sets the initial value of the FCount variable to 0
end;

function TEmployeeList.GetEmployee(Index: Integer): TEmployee;
//Implementation of the GetEmployee method for the TEmployeeList class
begin
  Result := FEmployees[Index];
  //Returns the employee at the specified index from the FEmployees array
end;

function TEmployeeList.AddEmployee(Employee: TEmployee): Integer;
//Implementation of the AddEmployee method for the TEmployeeList class
begin
  SetLength(FEmployees, FCount + 1);
  //Increases the length of the FEmployees array by 1
  FEmployees[FCount] := Employee;
  //Adds the new employee to the end of the FEmployees array
  Result := FCount;
  //Returns the index of the new employee
  Inc(FCount);
  //Increments the FCount variable by 1
end;

procedure TEmployeeList.RemoveEmployee(Index: Integer);
//Implementation of the RemoveEmployee method for the TEmployeeList class
var
  i: Integer;
//Local variable for looping through the FEmployees array
begin
  for i := Index+1 to FCount-1 do
    //Loops through the FEmployees array starting from the specified index
  begin
    FEmployees[i-1] := FEmployees[i];
    //Moves each employee one index to the left
  end;
  SetLength(FEmployees, FCount - 1);
  //Decreases the length of the FEmployees array by 1
  Dec(FCount);
  //Decrements the FCount variable by 1
end;

end.
//End of the unit declaration