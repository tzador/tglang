unit Unit1;

interface

uses
  System.SysUtils, System.Classes, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls, Vcl.Grids;

type
  TChecklistItem = record // Define a structure called TChecklistItem
    Title: string; // Define a field called Title of type string
    Completed: boolean; // Define a field called Completed of type boolean
  end;

  TChecklist = class(TObject) // Define a class called TChecklist that inherits from TObject
  private
    FItems: TArray<TChecklistItem>; // Define a private field called FItems of type array of TChecklistItem
    FItemIndex: integer; // Define a private field called FItemIndex of type integer
  public
    constructor Create; // Define the constructor for TChecklist
    function GetItem(Index: integer): TChecklistItem; // Define a public function called GetItem that takes in an integer and returns a TChecklistItem
    function GetCount: integer; // Define a public function called GetCount that returns an integer
    procedure AddItem(Title: string); // Define a public procedure called AddItem that takes in a string parameter
    procedure RemoveItem(Index: integer); // Define a public procedure called RemoveItem that takes in an integer parameter
    procedure CompleteItem(Index: integer); // Define a public procedure called CompleteItem that takes in an integer parameter
    procedure Clear; // Define a public procedure called Clear
  end;

  TForm1 = class(TForm) // Define a class called TForm1 that inherits from TForm
    Button1: TButton;
    StringGrid1: TStringGrid;
    procedure Button1Click(Sender: TObject); // Define a public procedure called Button1Click that takes in a TObject parameter
  private
    FChecklist: TChecklist; // Define a private field called FChecklist of type TChecklist
    procedure UpdateGrid; // Define a private procedure called UpdateGrid
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

{ TChecklist }

constructor TChecklist.Create;
begin
  inherited;
  FItemIndex := 0; // Initialize FItemIndex to 0
end;

procedure TChecklist.AddItem(Title: string);
begin
  SetLength(FItems, FItemIndex + 1); // Increase the length of FItems by 1
  FItems[FItemIndex].Title := Title; // Set the Title field of the newly added item to the given Title
  FItems[FItemIndex].Completed := False; // Set the Completed field of the newly added item to False
  Inc(FItemIndex); // Increment FItemIndex
end;

procedure TChecklist.Clear;
begin
  SetLength(FItems, 0); // Set the length of FItems to 0
  FItemIndex := 0; // Set FItemIndex to 0
end;

procedure TChecklist.RemoveItem(Index: integer);
var
  i: integer;
begin
  for i := Index to High(FItems) - 1 do // Loop through FItems starting from the given Index and ending at the second last item
  begin
    FItems[i] := FItems[i + 1]; // Move the item at the next index to the current index
  end;
  SetLength(FItems, High(FItems)); // Decrease the length of FItems by 1
  Dec(FItemIndex); // Decrement FItemIndex
end;

procedure TChecklist.CompleteItem(Index: integer);
begin
  FItems[Index].Completed := True; // Set the Completed field of the item at the given Index to True
end;

function TChecklist.GetCount: integer;
begin
  Result := Length(FItems); // Return the length of FItems
end;

function TChecklist.GetItem(Index: integer): TChecklistItem;
begin
  Result := FItems[Index]; // Return the item at the given Index
end;

{ TForm1 }

procedure TForm1.Button1Click(Sender: TObject);
begin
  FChecklist := TChecklist.Create; // Create an instance of TChecklist and assign it to FChecklist
  FChecklist.AddItem('Task 1'); // Add a new item with Title 'Task 1'
  FChecklist.AddItem('Task 2'); // Add a new item with Title 'Task 2'
  FChecklist.CompleteItem(1); // Complete the item at index 1
  UpdateGrid; // Update the grid
end;

procedure TForm1.UpdateGrid;
var
  i: integer;
begin
  StringGrid1.RowCount := FChecklist.GetCount; // Set the number of rows in the StringGrid to the count of items in FChecklist
  for i := 0 to FChecklist.GetCount - 1 do // Loop through FChecklist
  begin
    StringGrid1.Cells[0, i] := FChecklist.GetItem(i).Title; // Set the value of the first cell in the current row in the StringGrid to the Title of the item at the current index in FChecklist
    StringGrid1.Cells[1, i] := BoolToStr(FChecklist.GetItem(i).Completed); // Set the value of the second cell in the current row in the StringGrid to the Completed field of the item at the current index in FChecklist converted to a string
  end;
end;

end. // End of unit