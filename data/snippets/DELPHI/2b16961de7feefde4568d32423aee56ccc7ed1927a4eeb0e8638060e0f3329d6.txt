unit Calculations; { // This unit contains helper functions for performing calculations }

interface

uses
  SysUtils, Math;

function Factorial(n: Integer): Integer;
{ // This function calculates the factorial of a given integer using a recursive method
  // Input: n - the integer to calculate the factorial for
  // Output: the factorial of n as an integer }

function Power(base, exponent: Double): Double;
{ // This function calculates the power of a given base and exponent using built-in Delphi functions
  // Input: base - the base number
  //        exponent - the exponent number
  // Output: the result of base raised to the power of the exponent as a double }

function Log(base, value: Double): Double;
{ // This function calculates the logarithm of a given value with a given base
  // using the logarithm functions in the Math unit
  // Input: base - the base of the logarithm
  //        value - the value to take the logarithm of
  // Output: the logarithm of the value with the given base as a double }

implementation

function Factorial(n: Integer): Integer;
begin
  if (n = 0) or (n = 1) then { // base case: 0! and 1! are 1 }
    Result := 1
  else { // recursive case: n! = n * (n - 1)! }
    Result := n * Factorial(n - 1);
end;

function Power(base, exponent: Double): Double;
begin
  Result := Power(base, exponent); { // uses the Power function from the Math unit }
end;

function Log(base, value: Double): Double;
begin
  Result := LogN(base, value); { // uses the LogN function from the Math unit }
end;

end. { // end of unit }