// This code snippet creates a class for a car dealership system in Delphi

unit uCarDealership;

interface

type
  TCar = class                  // Define a class for cars
  private
    FMake: string;              // Private attribute: car make
    FModel: string;             // Private attribute: car model
    FYear: Integer;             // Private attribute: car year
    FPrice: Double;             // Private attribute: car price
  public
    constructor Create;         // Constructor for creating an instance of TCar class
    property Make: string read FMake write FMake;   // Getter and Setter for car make
    property Model: string read FModel write FModel; // Getter and Setter for car model
    property Year: Integer read FYear write FYear;   // Getter and Setter for car year
    property Price: Double read FPrice write FPrice; // Getter and Setter for car price
  end;

  TCarDealership = class        // Define a class for car dealership
  private
    FInventory: array of TCar;       // Private attribute: array of TCar for inventory
    function GetCarsInStock: Integer; // Private function for calculating number of cars in stock
  public
    property CarsInStock: Integer read GetCarsInStock;       // Getter for number of cars in stock
    procedure AddCar(const Car: TCar);  // Procedure for adding a new car to inventory
    procedure SellCar(const Car: TCar); // Procedure for selling a car from inventory
  end;

implementation

constructor TCar.Create;        // Implementation of TCar class constructor
begin
  inherited Create;             // Call inherited constructor
  // Set default values for private attributes
  FMake := '';
  FModel := '';
  FYear := 0;
  FPrice := 0.00;
end;

procedure TCarDealership.AddCar(const Car: TCar);
begin
  SetLength(FInventory, Length(FInventory)+1);  // Increase length of array by 1
  FInventory[High(FInventory)] := Car;          // Add new car to end of array
end;

procedure TCarDealership.SellCar(const Car: TCar);
var
  i: Integer;
begin
  for i := 0 to High(FInventory) do     // Loop through inventory to find matching car
  begin
    if FInventory[i] = Car then         // If car is found, remove it from inventory
    begin
      for j := i to High(FInventory)-1 do
        FInventory[j] := FInventory[j+1];   // Move cars in front of sold car down 1 index
      SetLength(FInventory, Length(FInventory)-1);  // Decrease length of array by 1
      Exit;                              // Exit loop once car is found and sold
    end;
  end;
end;

function TCarDealership.GetCarsInStock: Integer;
begin
  Result := Length(FInventory);    // Return length of inventory array to determine number of cars in stock
end;

end.