unit Test;

interface

uses
  Classes, SysUtils;

type
  TTest = class(TObject)
  private
    FCount: Integer;
    FData: TStringList;
    FMessage: string;
    procedure SetCount(const Value: Integer); //Set FCount variable to given value
    function GetData: TStrings; //Returns FData variable
    procedure SetData(const Value: TStrings); //Sets FData variable to given value
    function GetCount: Integer; //Returns FCount variable
    procedure SetMessage(const Value: string); //Sets FMessage variable to given value
    function GetMessage: string; //Returns FMessage variable
    function CalculateSum(const Values: array of Integer): Integer; //Calculates sum of integer values in given array
    function ReverseString(const Str: string): string; //Reverses the given string
  public
    property Data: TStrings read GetData write SetData; //Public property for FData variable
    property Count: Integer read GetCount write SetCount; //Public property for FCount variable
    property Message: string read GetMessage write SetMessage; //Public property for FMessage variable
  end;

implementation

{ TTest }

function TTest.CalculateSum(const Values: array of Integer): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := Low(Values) to High(Values) do
    Result := Result + Values[I];
end;

function TTest.ReverseString(const Str: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := Length(Str) downto 1 do
    Result := Result + Str[I];
end;

function TTest.GetData: TStrings;
begin
  Result := FData;
end;

function TTest.GetCount: Integer;
begin
  Result := FCount;
end;

function TTest.GetMessage: string;
begin
  Result := FMessage;
end;

procedure TTest.SetData(const Value: TStrings);
begin
  FData := Value;
end;

procedure TTest.SetCount(const Value: Integer);
begin
  FCount := Value;
end;

procedure TTest.SetMessage(const Value: string);
begin
  FMessage := Value;
end;

end.