// This is a Delphi code example that shows how to create a class
unit MyClass;

interface

type
  // Create a class named "MyClass"
  // The class is a child of the "TObject" class
  // The class is "public" which means it is accessible outside the unit
  // The class has "strict" visibility which means it only allows access to its methods and properties
  // from inside the unit 
  // The class has "abstract" set to "false" which means it can be instantiated and used
  // The class has "sealed" set to "false" which means it can be inherited from
  MyClass = class(TObject)
  public
    // Create a public "constructor" for the class
    // The constructor has an "overload" which accepts an integer value
    // The constructor has a "virtual" keyword which means it can be overridden by a child class
    constructor Create(AValue: Integer); overload; virtual;
    // ...

  strict private
    // Create a private "field" named "FValue" which will store an integer value
    // The field is only accessible from inside the class
    FValue: Integer;
    // ...

  public
    // Create a public "property" named "Value" which gives read/write access to the private "FValue" field
    // The property is of type "integer"
    // The "read" method returns the value of the "FValue" field
    // The "write" method sets the value of the "FValue" field
    property Value: Integer read FValue write FValue;
    // ...
  end;

implementation

// Create a implementation of the constructor declared in the interface section
// The constructor calls the inherited constructor of the "TObject" class
// The constructor assigns the value passed in the "AValue" parameter to the "FValue" field
// This constructor will be used when instantiating the class with an integer value
constructor MyClass.Create(AValue: Integer);
begin
  inherited Create;
  FValue := AValue;
end;

end.