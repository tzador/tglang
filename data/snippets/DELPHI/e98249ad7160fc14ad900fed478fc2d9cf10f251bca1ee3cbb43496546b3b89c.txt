// This code snippet creates a class in Delphi called 'Person' with properties, methods, and constructors
// The class has encapsulation, validation, and error handling implemented
// The methods perform various tasks related to a person object

type
  { Class 'Person' represents an individual person }
  Person = class
    private
      { Fields to store personal information }
      firstName: string;
      lastName: string;
      age: Integer;
      gender: string;
      phoneNumber: string;
    public
      { Property to get and set the person's first name }
      property FirstName: string read firstName write firstName;
      { Property to get and set the person's last name }
      property LastName: string read lastName write lastName;
      { Property to get and set the person's age }
      property Age: Integer read age write age;
      { Property to get and set the person's gender }
      property Gender: string read gender write gender;
      { Property to get and set the person's phone number }
      property PhoneNumber: string read phoneNumber write phoneNumber;
      
      { Constructor for creating a new person object }
      constructor Create(newFirstName: string; newLastName: string; newAge: Integer; newGender: string; newPhoneNumber: string);
      { Destructor for freeing up memory }
      destructor Destroy; override;

      { Method to display the person's full name }
      { Returns a string of the full name in the format: Last Name, First Name }
      function getFullName: string;
      { Method to validate the person's age }
      { Throws an exception if age is not within a valid range }
      procedure validateAge;
      { Method to check if the person is an adult }
      { Returns a boolean value indicating if the person is an adult (over 18) }
      function isAdult: Boolean;
  end;

{ Constructor for creating a new person object }
constructor Person.Create(newFirstName: string; newLastName: string; newAge: Integer; newGender: string; newPhoneNumber: string);
begin
  // Initialize fields with provided values
  firstName := newFirstName;
  lastName := newLastName;
  age := newAge;
  gender := newGender;
  phoneNumber := newPhoneNumber;

  // Validate age
  validateAge;
end;

{ Destructor for freeing up memory }
destructor Person.Destroy;
begin
  // Perform any necessary cleanup
  inherited; // Call inherited destructor
end;

{ Method to display the person's full name }
{ Returns a string of the full name in the format: Last Name, First Name }
function Person.getFullName: string;
begin
  Result := lastName + ', ' + firstName;
end;

{ Method to validate the person's age }
{ Throws an exception if age is not within a valid range }
procedure Person.validateAge;
begin
  // Check if age is within valid range (0-150)
  if (age < 0) or (age > 150) then
    raise Exception.Create('Age must be between 0 and 150.');
end;

{ Method to check if the person is an adult }
{ Returns a boolean value indicating if the person is an adult (over 18) }
function Person.isAdult: Boolean;
begin
  Result := age >= 18;
end;

// Example usage:

// Create a new Person object with provided data
var
  person1: Person;
begin
  person1 := Person.Create('John', 'Doe', 25, 'Male', '123-456-7890');
  
  // Display person's full name
  ShowMessage(person1.getFullName); // Outputs 'Doe, John'
  
  // Check if person is an adult
  if person1.isAdult then
    ShowMessage('Person is an adult.') // Outputs 'Person is an adult.'
  else
    ShowMessage('Person is not an adult.');
    
  // Free up memory by destroying the Person object
  person1.Destroy; 
end.