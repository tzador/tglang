unit progressBar;
 
interface
 
uses
  WinApi.Windows,
  WinApi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ComCtrls;
 
type
  TProgressBar = class(TCustomProgressBar)
  private
    FMin: Integer; // minimum value
    FMax: Integer; // maximum value
    FStep: Integer; // step size
    FPosition: Integer; // current position
 
    procedure SetStep(const Value: Integer);
    procedure SetMin(const Value: Integer);
    procedure SetMax(const Value: Integer);
    procedure SetPosition(const Value: Integer);
  protected
    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
    procedure WMSize(var Message: TWMSize); message WM_SIZE;
  public
    constructor Create(AOwner: TComponent); override;
  published
    property Min: Integer read FMin write SetMin default 0;
    property Max: Integer read FMax write SetMax default 100;
    property Step: Integer read FStep write SetStep default 1;
    property Position: Integer read FPosition write SetPosition default 0;
  end;
 
implementation
 
constructor TProgressBar.Create(AOwner: TComponent);
begin
  inherited;
  ControlStyle := ControlStyle + [csOpaque];
end;
 
procedure TProgressBar.CreateParams(var Params: TCreateParams);
begin
  inherited;
 
  // Set style flags to make the control smooth and flat
  Params.Style := Params.Style or PBS_SMOOTH;
  Params.Style := Params.Style or PBS_VERTICAL;
  Params.Style := Params.Style or PBS_MARQUEE;
  Params.Style := Params.Style or PBS_SMOOTHREVERSE;
 
  // Disable the vertical scroll bar
  Params.Style := Params.Style and not WS_VSCROLL;
end;
 
procedure TProgressBar.SetStep(const Value: Integer);
begin
  if FStep <> Value then
  begin
    FStep := Value;
    Invalidate;
  end;
end;
 
procedure TProgressBar.SetMin(const Value: Integer);
begin
  if FMin <> Value then
  begin
    FMin := Value;
    Invalidate;
  end;
end;
 
procedure TProgressBar.SetMax(const Value: Integer);
begin
  if FMax <> Value then
  begin
    FMax := Value;
    Invalidate;
  end;
end;
 
procedure TProgressBar.SetPosition(const Value: Integer);
begin
  if FPosition <> Value then
  begin
    FPosition := Value;
    Invalidate;
  end;
end;
 
procedure TProgressBar.CreateWnd;
begin
  inherited;
 
  // Set the minimum and maximum values
  SendMessage(Handle, PBM_SETSTEP, FStep, 0);
  SendMessage(Handle, PBM_SETMIN, FMin, 0);
  SendMessage(Handle, PBM_SETMAX, FMax, 0);
 
  // Set the initial position
  SendMessage(Handle, PBM_SETPOS, FPosition, 0);
end;
 
procedure TProgressBar.WMSize(var Message: TWMSize);
begin
  inherited;
 
  // Adjust the height to be the width of the control for vertical orientation
  if Orientation = pbVertical then
    Height := Width;
end;
 
end.