unit UnitName; //create a new unit named UnitName

interface //indicates that the unit is meant to be imported by other units

uses //declaring any other units that this unit relies on
  System.Classes, //imports the System.Classes unit
  System.SysUtils; //imports the System.SysUtils unit

type
  TClassName = class //create a new class named TClassName
  private
    FVariable: string; //declares a private variable of type string
    procedure PrivateProcedure; //declares a private procedure
  public
    constructor Create(AVariable: string); //declares a public constructor with a parameter
    destructor Destroy; override; //declares a destructor that overrides the inherited destructor
    function PublicFunction(AParameter: integer): string; //declares a public function with a parameter and a return value
    procedure PublicProcedure; //declares a public procedure
  end;

implementation //contains the implementation of the unit

constructor TClassName.Create(AVariable: string); //constructor implementation
begin
  inherited Create; //calls the inherited constructor
  FVariable := AVariable; //assigns the passed-in variable to the private variable
  PrivateProcedure; //calls a private procedure
end;

destructor TClassName.Destroy; //destructor implementation
begin
  inherited Destroy; //calls the inherited destructor
  //clean up any resources here
end;

function TClassName.PublicFunction(AParameter: integer): string; //function implementation
begin
  Result := FVariable + ' ' + IntToStr(AParameter); //returns the concatenated string
end;

procedure TClassName.PublicProcedure; //procedure implementation
begin
  //do something
end;

procedure TClassName.PrivateProcedure; //private procedure implementation
begin
  //do something
end;

end. //end of unit