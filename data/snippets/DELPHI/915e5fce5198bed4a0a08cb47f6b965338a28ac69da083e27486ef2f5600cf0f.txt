procedure QuickSort(var A: array of Integer; iLo, iHi: Integer);
// This is the QuickSort procedure in Delphi that sorts an array of integers

  procedure QuickSortPartition(var A: array of Integer; iLo, iHi: Integer);
  // This procedure partitions the given array into two subarrays

  var
    iPivot, i, j, temp: Integer;
  
  begin
    // Set the pivot element
    iPivot := A[(iLo + iHi) div 2];
    i := iLo;
    j := iHi;

    repeat
      // Find an element in the left subarray that is greater than the pivot element
      while A[i] < iPivot do
        Inc(i);

      // Find an element in the right subarray that is less than the pivot element
      while A[j] > iPivot do
        Dec(j);

      // If the elements are not in the correct order, swap them
      if i <= j then
      begin
        temp := A[i];
        A[i] := A[j];
        A[j] := temp;
        Inc(i);
        Dec(j);
      end;
    until i > j;

    // Recursively call QuickSort on the two subarrays
    if iLo < j then
      QuickSort(A, iLo, j);
    if i < iHi then
      QuickSort(A, i, iHi);
  end;

begin
  // Call QuickSortPartition to partition the array and sort it
  QuickSortPartition(A, iLo, iHi);
end;