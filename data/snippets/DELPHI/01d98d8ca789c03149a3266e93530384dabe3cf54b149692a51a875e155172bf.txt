unit MainProgram;
  interface
  uses
    Classes, SysUtils;
type
  {$M+}
  TEmployee = class
  private
    FName: string;
    FAge: Integer;
    FSsn: string;
  public
    constructor Create(const AName: string; const AAge: Integer; const AEmpId: string);
    procedure PrintEmployeeInfo;
  end;

  TRole = (Manager, Assistant, Clerk, Intern);

  TDepartment = class
    FDepartmentName: string;
    FHead: TEmployee;
    FEmployees: array of TEmployee;
    constructor Create(const AName: string; const AHead: TEmployee);
    procedure AddEmployee(const AEmp: TEmployee);
    procedure PrintDepartmentInfo;
    function GetEmployeesByRole(const ARole: TRole): array of TEmployee;
    function GetEmployeesByAge(const AMinAge, AMaxAge: Integer): array of TEmployee;
    function GetEmployeesBySsn(const ASsn: string): array of TEmployee;
  end;

implementation

{ TEmployee }

constructor TEmployee.Create(const AName: string; const AAge: Integer; const AEmpId: string);
begin
  FName := AName;
  FAge := AAge;
  FSsn := AEmpId;
end;

procedure TEmployee.PrintEmployeeInfo;
begin
  Writeln('Name: ' + FName);
  Writeln('Age: ' + FAge);
  Writeln('SSN: ' + FSsn);
end;

{ TDepartment }

constructor TDepartment.Create(const AName: string; const AHead: TEmployee);
begin
  FDepartmentName := AName;
  FHead := AHead;
end;

procedure TDepartment.AddEmployee(const AEmp: TEmployee);
begin
  SetLength(FEmployees, Length(FEmployees) + 1);
  FEmployees[High(FEmployees)] := AEmp;
end;

procedure TDepartment.PrintDepartmentInfo;
var
  Emp: TEmployee;
begin
  Writeln('Department: ' + FDepartmentName);
  Writeln('Head of Department: ' + FHead.FName);
  Writeln('Employees:');
  for Emp in FEmployees do
    Writeln(Emp.FName);
end;

function TDepartment.GetEmployeesByRole(const ARole: TRole): array of TEmployee;
var
  Emp: TEmployee;
begin
  SetLength(Result, 0);
  for Emp in FEmployees do
  begin
    if Emp.FRole = ARole then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := Emp;
    end;
  end;
end;

function TDepartment.GetEmployeesByAge(const AMinAge, AMaxAge: Integer): array of TEmployee;
var
  Emp: TEmployee;
begin
  SetLength(Result, 0);
  for Emp in FEmployees do
  begin
    if (Emp.FAge >= AMinAge) and (Emp.FAge <= AMaxAge) then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := Emp;
    end;
  end;
end;

function TDepartment.GetEmployeesBySsn(const ASsn: string): array of TEmployee;
var
  Emp: TEmployee;
begin
  SetLength(Result, 0);
  for Emp in FEmployees do
  begin
    if Emp.FSsn = ASsn then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := Emp;
    end;
  end;
end.