procedure Encryption(Data: TStream; Key: TKey; Operations: TCryptoOperations; out EncryptedData: TStream);
// This procedure performs encryption on a given stream of data using a specified key and encryption operations.
var
  BufferSize: Integer; // Variable to hold the size of the buffer used for encryption
  Buffer: TBytes; // Byte array to hold the data read from the stream
  EncBuffer: TBytes; // Byte array to hold the encrypted data
  IV: TBytes; // Byte array to hold the initialization vector for encryption
  InvalidKeySizeMessage: AnsiString; // Message to show when an invalid key size is used
  DataSize: Int64; // Variable to hold the size of the data in the stream
  Encrypt: TEncryptionClass; // Class that handles encryption operations
begin
  // Initialize the encryption class with the specified key and operations
  Encrypt := TEncryptionClass.Create(Key, Operations);

  // Get the size of the data in the stream
  DataSize := Data.Size;

  // Set the size of the buffer to use for encryption
  BufferSize := 4096;

  // Initialize the buffer with the specified size
  SetLength(Buffer, BufferSize);

  // Initialize the encrypted data buffer with the size of the data in the stream
  SetLength(EncBuffer, DataSize);

  // Set the initialization vector, which will be used to generate random bytes for encryption
  SetLength(IV, Encrypt.BlockSize);

  // Check if the size of the encryption key is valid
  if Encrypt.KeySize = 0 then
  begin
    // Display an error message and exit the procedure
    // Invalid key size! Use a valid key size.
    Exit;
  end;

  // Perform encryption on the data in the stream
  while (Data.Position < DataSize) do
  begin
    // Read the data from the stream and store it in the buffer
    Data.ReadBuffer(Buffer[0], BufferSize);

    // Encrypt the data from the buffer and store it in the encrypted buffer
    Encrypt.Encrypt(Buffer[0], EncBuffer[0]);

    // Write the data from the encrypted buffer to the output stream
    EncryptedData.WriteBuffer(EncBuffer[0], BufferSize);
  end;

  // Free the encryption class
  Encrypt.Free();
end;