// This code snippet creates a class for a basic calculator with additional functions

type
  TCalculator = class(TObject) // Define a new class named TCalculator, inheriting from TObject
  private
    FCurrentValue: Double; // Private variable to store current value
    FMemory: Double; // Private variable to store memory value
  public
    constructor Create(const InitialValue: Double); // Constructor to initialize the calculator with an initial value
    procedure Clear; // Public method to reset the calculator
    procedure Add(const Value: Double); // Public method to add a value to the current value
    procedure Subtract(const Value: Double); // Public method to subtract a value from the current value
    procedure Multiply(const Value: Double); // Public method to multiply the current value by a value
    procedure Divide(const Value: Double); // Public method to divide the current value by a value
    procedure MemoryClear; // Public method to reset the memory value
    procedure MemoryAdd(const Value: Double); // Public method to add a value to the memory value
    procedure MemorySubtract(const Value: Double); // Public method to subtract a value from the memory value
    function Equal: Double; // Public method to return the current value
    function MemoryRecall: Double; // Public method to return the memory value
    procedure Square; // Public method to square the current value
    procedure Cube; // Public method to cube the current value
    procedure SquareRoot; // Public method to calculate the square root of the current value
  end;
  
constructor TCalculator.Create(const InitialValue: Double); // Define constructor to initialize the calculator with an initial value
begin
  inherited Create(); // Call the inherited constructor from TObject
  FCurrentValue := InitialValue; // Set current value to the initial value
  FMemory := 0; // Set memory value to 0
end;

procedure TCalculator.Clear; // Define public method to reset the calculator
begin
  FCurrentValue := 0; // Reset the current value to 0
  FMemory := 0; // Reset the memory value to 0
end;

procedure TCalculator.Add(const Value: Double); // Define public method to add a value to the current value
begin
  FCurrentValue := FCurrentValue + Value; // Add the given value to the current value
end;

procedure TCalculator.Subtract(const Value: Double); // Define public method to subtract a value from the current value
begin
  FCurrentValue := FCurrentValue - Value; // Subtract the given value from the current value
end;

procedure TCalculator.Multiply(const Value: Double); // Define public method to multiply the current value by a value
begin
  FCurrentValue := FCurrentValue * Value; // Multiply the current value by the given value
end;

procedure TCalculator.Divide(const Value: Double); // Define public method to divide the current value by a value
begin
  FCurrentValue := FCurrentValue / Value; // Divide the current value by the given value
end;

procedure TCalculator.MemoryClear; // Define public method to reset the memory value
begin
  FMemory := 0; // Reset the memory value to 0
end;

procedure TCalculator.MemoryAdd(const Value: Double); // Define public method to add a value to the memory value
begin
  FMemory := FMemory + Value; // Add the given value to the memory value
end;

procedure TCalculator.MemorySubtract(const Value: Double); // Define public method to subtract a value from the memory value
begin
  FMemory := FMemory - Value; // Subtract the given value from the memory value
end;

function TCalculator.Equal: Double; // Define public method to return the current value
begin
  Result := FCurrentValue; // Return the current value
end;

function TCalculator.MemoryRecall: Double; // Define public method to return the memory value
begin
  Result := FMemory; // Return the memory value
end;

procedure TCalculator.Square; // Define public method to square the current value
begin
  FCurrentValue := FCurrentValue * FCurrentValue; // Multiply the current value by itself
end;

procedure TCalculator.Cube; // Define public method to cube the current value
begin
  FCurrentValue := FCurrentValue * FCurrentValue * FCurrentValue; // Multiply the current value by itself twice
end;

procedure TCalculator.SquareRoot; // Define public method to calculate the square root of the current value
begin
  FCurrentValue := sqrt(CurrentValue); // Use the sqrt function to calculate the square root of the current value
end;