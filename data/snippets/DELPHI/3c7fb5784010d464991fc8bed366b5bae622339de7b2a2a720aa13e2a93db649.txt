Type
  // This is a record type that represents a person
  Person = record
    Name: string;
    Age: Integer;
  end;

  // This is a class type that represents a bank account
  BankAccount = class
  private
    // Private variables of the class
    FOwner: Person;
    FBalance: Double;
  public
    // Public methods of the class
    constructor Create(OwnerName: string; OwnerAge: Integer); 
    // This is the constructor that sets the class variables
    // to the values passed in by the user
    function GetOwner: Person;
    // This function returns the Person record of the account owner
    function GetBalance: Double;
    // This function returns the balance of the account
    procedure Deposit(amount: Double);
    // This procedure adds the given amount to the account balance
    procedure Withdraw(amount: Double);
    // This procedure subtracts the given amount from the account balance
    procedure Transfer(amount: Double; destination: BankAccount);
    // This procedure transfers the given amount from this account to
    // the specified destination account
  end;

// Constructor of the BankAccount class
constructor BankAccount.Create(OwnerName: string; OwnerAge: Integer);
begin
  FOwner.Name := OwnerName;
  FOwner.Age := OwnerAge;
  FBalance := 0;
end;

// GetOwner function of the BankAccount class
function BankAccount.GetOwner: Person;
begin
  Result := FOwner;
end;

// GetBalance function of the BankAccount class
function BankAccount.GetBalance: Double;
begin
  Result := FBalance;
end;

// Deposit procedure of the BankAccount class
procedure BankAccount.Deposit(amount: Double);
begin
  FBalance := FBalance + amount;
end;

// Withdraw procedure of the BankAccount class
procedure BankAccount.Withdraw(amount: Double);
begin
  FBalance := FBalance - amount;
end;

// Transfer procedure of the BankAccount class
procedure BankAccount.Transfer(amount: Double; destination: BankAccount);
begin
  if destination <> nil then // check if destination account is valid
  begin
    if Self.FBalance >= amount then // check if this account has enough balance
    begin
      Self.FBalance := Self.FBalance - amount;
      destination.FBalance := destination.FBalance + amount;
    end;
  end;
end;

// Example usage of the BankAccount class
var
  owner: Person;
  account1, account2: BankAccount;
begin
  // Create a new account for John, age 30
  account1 := BankAccount.Create('John', 30);
  // Create a new account for Sarah, age 25
  account2 := BankAccount.Create('Sarah', 25);
  // Deposit $1000 to John's account
  account1.Deposit(1000);
  // Withdraw $500 from Sarah's account
  account2.Withdraw(500);
  // Transfer $200 from Sarah's account to John's account
  account2.Transfer(200, account1);

  // Get the owner and balance of John's account
  owner := account1.GetOwner;
  ShowMessage(owner.Name + ' ' + IntToStr(owner.Age));
  ShowMessage(FloatToStr(account1.GetBalance));
end.