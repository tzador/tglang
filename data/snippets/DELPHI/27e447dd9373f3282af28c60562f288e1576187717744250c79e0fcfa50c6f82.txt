function BinarySearch(A: TArray<Integer>; Target: Integer; var Index: Integer): Boolean;
var
  L, R, M: Integer;
begin
  Result := False; // initialize result to false
  L := 0; // set left index to 0
  R := Length(A) - 1; //set right index to the last element of array A
  Index := -1; // initialize index to -1

  while L <= R do // while the left index is less than or equal to the right index
  begin
    M := (L + R) div 2; // calculate mid element index
    if A[M] < Target then
      L := M + 1 // move left index to the right
    else if A[M] > Target then
      R := M - 1 // move right index to the left
    else
    begin
      Index := M; // set index to the mid element index
      Result := True; // set result to true
      Break; // break out of the loop
    end;
  end;
end;