procedure QuickSort(var ArrayOfIntegers: array of Integer; L, R: Integer);
// Procedure to perform quicksort on an array of integers

var
  I, J, P, Temp: Integer;
// Variable declarations

begin
  // Checks if the left index is less than the right index
  if (L < R) then
  begin
    // Initializes pivot index to the middle element of the array
    P := (L + R) div 2;

    // Swaps the pivot element with the last element of the subarray
    Temp := ArrayOfIntegers[P];
    ArrayOfIntegers[P] := ArrayOfIntegers[R];
    ArrayOfIntegers[R] := Temp;

    // Initializes variables for loop iteration
    I := L;
    J := R - 1;

    // Loop until the left and right index converge
    while (I <= J) do
    begin
      // Finds an element on the left side that is greater than the pivot
      while (ArrayOfIntegers[I] < ArrayOfIntegers[R]) do
      begin
        Inc(I);
      end;

      // Finds an element on the right side that is less than or equal to the pivot
      while (ArrayOfIntegers[J] >= ArrayOfIntegers[R]) do
      begin
        Dec(J);
      end;

      // Swaps the elements
      if (I < J) then
      begin
        Temp := ArrayOfIntegers[I];
        ArrayOfIntegers[I] := ArrayOfIntegers[J];
        ArrayOfIntegers[J] := Temp;
      end;
    end;

    // Places the pivot element in its correct sorted position
    Temp := ArrayOfIntegers[I];
    ArrayOfIntegers[I] := ArrayOfIntegers[R];
    ArrayOfIntegers[R] := Temp;

    // Recursive calls to perform quicksort on the subarrays
    QuickSort(ArrayOfIntegers, L, I - 1);
    QuickSort(ArrayOfIntegers, I + 1, R);
  end;
end;