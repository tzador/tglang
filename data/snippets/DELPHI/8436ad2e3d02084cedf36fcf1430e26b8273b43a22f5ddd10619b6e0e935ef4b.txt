unit Unit1;

interface

type
  TMyClass = class //creates a class named TMyClass
  private //declaring private fields
    FNum1: Integer; //a private integer field
    FNum2: Integer; //another private integer field
  protected //declaring protected fields
    FStr1: string; //a protected string field
    FStr2: string; //another protected string field
    function SumNums(): Integer; //a protected function that returns an integer
  public //declaring public fields
    constructor Create(Num1, Num2: Integer; Str1, Str2: string); //public constructor that takes in two integers and two strings as parameters
    property Num1: Integer read FNum1 write FNum1; //public property for accessing and modifying the private field FNum1
    property Num2: Integer read FNum2 write FNum2; //public property for accessing and modifying the private field FNum2
    function Concat(): string; //public function that returns a string
  end;

implementation

{ TMyClass }

constructor TMyClass.Create(Num1, Num2: Integer; Str1, Str2: string);
begin //setting the values of private and protected fields using the parameters passed in
  FNum1 := Num1;
  FNum2 := Num2;
  FStr1 := Str1;
  FStr2 := Str2;
end;

function TMyClass.SumNums(): Integer;
begin //returns the sum of private fields FNum1 and FNum2
  Result := FNum1 + FNum2;
end;

function TMyClass.Concat(): string;
begin //concatenates the private and protected strings
  Result := FStr1 + ' ' + FStr2;
end;

end.