unit SampleUnit;
// This is a sample unit in Delphi
interface

uses
  SysUtils, Classes;

type
  TSampleClass = class(TObject)
  private
    FSampleInt: Integer;
    FSampleStr: string;
    function GetSampleInt: Integer;
    procedure SetSampleInt(const Value: Integer);
    function GetSampleStr: string;
    procedure SetSampleStr(const Value: string);
  public
    constructor Create(); // public constructor
    destructor Destroy(); override; // public destructor
    property SampleInt: Integer read GetSampleInt write SetSampleInt; // SampleInt property
    property SampleStr: string read GetSampleStr write SetSampleStr; // SampleStr property
    function ReverseString(const AString: string): string; // ReverseString function
  end;

implementation

{ TSampleClass }

constructor TSampleClass.Create();
begin
  inherited; // calls TObject's constructor
  FSampleInt := 0; // initialize SampleInt property
  FSampleStr := ''; // initialize SampleStr property
end;

destructor TSampleClass.Destroy();
begin
  // no need to free FSampleInt and FSampleStr properties because they are of primitive types
  inherited; // calls TObject's destructor
end;

function TSampleClass.GetSampleInt: Integer;
begin
  Result := FSampleInt;
end;

procedure TSampleClass.SetSampleInt(const Value: Integer);
begin
  FSampleInt := Value;
end;

function TSampleClass.GetSampleStr: string;
begin
  Result := FSampleStr;
end;

procedure TSampleClass.SetSampleStr(const Value: string);
begin
  FSampleStr := Value;
end;

function TSampleClass.ReverseString(const AString: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := Length(AString) downto 1 do // loop backwards from the last character
  begin
    Result := Result + AString[I];
  end;
end;

end.