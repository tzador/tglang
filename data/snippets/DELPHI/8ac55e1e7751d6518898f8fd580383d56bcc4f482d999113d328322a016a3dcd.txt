procedure QuickSort(var A: array of Integer; iLo, iHi: Integer);
// The QuickSort procedure takes in an array A of Integers, as well as the indices iLo and iHi.
// It will sort the array A in ascending order, using the QuickSort algorithm.

var
  Lo, Hi, Pivot, Temp: Integer;

begin
  Lo := iLo; // Set the Lo index to the input parameter iLo.
  Hi := iHi; // Set the Hi index to the input parameter iHi.
  Pivot := A[(Lo + Hi) div 2]; // Set the Pivot element to be the middle element of the current subarray.
  while Lo <= Hi do // As long as Lo is less than or equal to Hi, we continue.
  begin
    while A[Lo] < Pivot do // Find the first element in the subarray that is greater than or equal to the Pivot.
      Inc(Lo);
    while A[Hi] > Pivot do // Find the first element in the subarray that is less than or equal to the Pivot.
      Dec(Hi);
    if Lo <= Hi then // If the inverted elements are still in the "wrong" half, swap them.
    begin
      Temp := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := Temp;
      Inc(Lo);
      Dec(Hi);
    end;
  end;
  if iLo < Hi then // If there are still elements in the left half of the subarray, recursively call QuickSort on it.
    QuickSort(A, iLo, Hi);
  if Lo < iHi then // If there are still elements in the right half of the subarray, recursively call QuickSort on it.
    QuickSort(A, Lo, iHi);
end;