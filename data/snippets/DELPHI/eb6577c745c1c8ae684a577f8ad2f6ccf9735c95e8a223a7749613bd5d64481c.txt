unit MathUtils; //unit declaration
interface //interface section

uses //uses clause
  SysUtils, Classes, Math; //used units

{Functions section}

//Finds the greatest common divisor of two numbers using Euclid's algorithm
function GCD(const A, B: Integer): Integer;
begin
  Result := B;
  if Result = 0 then
    Result := A
  else
    while A > 0 do
    begin
      Result := A;
      A := B mod A;
      B := Result;
    end;
end;

//Calculates the factorial of a number
function Factorial(N: Integer): Integer;
begin
  if N < 0 then //check for negative input
    Result := -1 //return error code
  else if N = 0 then //base case
    Result := 1 //return 1
  else //recursive case
    Result := N * Factorial(N-1); //recursive call
end;

{Class section}

//Generic class to represent a mathematical vector
type
  TVector<TItem> = class
    private
      FItems: array of TItem; //dynamic array to store vector items
      FName: string; //name of the vector
    public
      constructor Create(Name: string); //constructor
      procedure InsertItem(Item: TItem); //method to insert an item to the vector
      function MultiplyItems: TItem; //method to multiply all items in the vector
      function GetSum: TItem; //method to get the sum of all items in the vector
      property Name: string read FName write FName; //getter and setter for vector name
  end;

//Constructor for TVector class
constructor TVector<TItem>.Create(Name: string);
begin
  SetLength(FItems, 0); //initialize array to size 0
  FName := Name; //set vector name
end;

//Method to insert an item to the vector
procedure TVector<TItem>.InsertItem(Item: TItem);
begin
  SetLength(FItems, Length(FItems)+1); //increase array size by 1
  FItems[High(FItems)] := Item; //insert item at the end of the array
end;

//Method to multiply all items in the vector
function TVector<TItem>.MultiplyItems: TItem;
var
  i: Integer;
begin
  Result := FItems[0]; //initialize result with first item in the array
  for i := 1 to High(FItems) do //loop through array starting from second item
    Result := Result * FItems[i]; //multiply current result with current item
end;

//Method to get the sum of all items in the vector
function TVector<TItem>.GetSum: TItem;
var
  i: Integer;
begin
  Result := 0; //initialize result with 0
  for i := 0 to High(FItems) do //loop through the array
    Result := Result + FItems[i]; //add current item to result
end;

begin //main program
  //create an integer vector
  var IntVector: TVector<Integer> := TVector<Integer>.Create('Integer Vector');
  //insert items to the vector
  IntVector.InsertItem(2);
  IntVector.InsertItem(4);
  IntVector.InsertItem(6);
  //calculate and print the greatest common divisor of 3 and 4
  WriteLn(GCD(3, 4)); //output: 1
  //calculate and print the factorial of 5
  WriteLn(Factorial(5)); //output: 120
  //calculate and print the product of all items in the integer vector
  WriteLn(IntVector.MultiplyItems); //output: 48
  //calculate and print the sum of all items in the integer vector
  WriteLn(IntVector.GetSum); //output: 12
end. //end of main program and unit