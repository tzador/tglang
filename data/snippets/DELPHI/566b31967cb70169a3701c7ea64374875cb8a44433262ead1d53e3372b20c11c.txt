//This code snippet is an example of a binary search algorithm in Delphi.
//It implements both the iterative and recursive approach.
program BinarySearch;

{$APPTYPE CONSOLE}

uses
  SysUtils;

const
  MAX = 100;

var
  arr: array[1..100] of Integer;
  num, result: Integer;

//Iterative approach
function BinarySearchIterative(startIndex, endIndex, value: Integer): Integer;
var
  middleIndex: Integer;
begin
  while (startIndex <= endIndex) do
  begin
    middleIndex := (startIndex + endIndex) div 2;
    if (arr[middleIndex] = value) then
      Exit(middleIndex)
    else if (arr[middleIndex] < value) then
      startIndex := middleIndex + 1
    else
      endIndex := middleIndex - 1;
  end;
  Result := -1;
end;

//Recursive approach
function BinarySearchRecursive(startIndex, endIndex, value: Integer): Integer;
var
  middleIndex: Integer;
begin
  if (endIndex >= startIndex) then
  begin
    middleIndex := (startIndex + endIndex) div 2;
    if (arr[middleIndex] = value) then
      Exit(middleIndex)
    else if (arr[middleIndex] > value) then
      Exit(BinarySearchRecursive(startIndex, middleIndex - 1, value))
    else
      Exit(BinarySearchRecursive(middleIndex + 1, endIndex, value))
  end;
  Result := -1;
end;

begin
  //Filling the array with sorted values
  for var i := 1 to MAX do
  begin
    arr[i] := i;
  end;

  //Input value to search for
  Write('Enter a number to search for: ');
  Readln(num);

  //Finding index of value using iterative approach
  result := BinarySearchIterative(1, MAX, num);
  if (result <> -1) then
    Writeln('Index of ', num, ' using iterative approach: ', result)
  else
    Writeln(num, ' is not present in the array');

  //Finding index of value using recursive approach
  result := BinarySearchRecursive(1, MAX, num);
  if (result <> -1) then
    Writeln('Index of ', num, ' using recursive approach: ', result)
  else
    Writeln(num, ' is not present in the array');
    
  Readln;
end.