// This is a comment line
program ComplexCodeSnippet;

uses
  SysUtils, Classes; // Importing necessary libraries

const
  NUMBER_OF_THREADS = 5; // Defining a constant variable

var
  i: Integer; // Defining a variable of type Integer
  s: string; // Defining a variable of type string

type
  TMyThread = class(TThread) // Defining a class that inherits from TThread
  private
    FThreadNumber: Integer; // Private variable of type Integer
  public
    procedure Execute; override; // Overriding the Execute method
    constructor Create(ThreadNumber: Integer); // Constructor with one integer parameter
  end;

constructor TMyThread.Create(ThreadNumber: Integer);
begin
  inherited Create(false); // Call the inherited Create method with parameter false
  FThreadNumber := ThreadNumber; // Assigning the passed in ThreadNumber to the private variable
end;

procedure TMyThread.Execute;
begin
  s := Format('Hello from thread #%d', [FThreadNumber]); // Creating a formatted string with the thread number
  Writeln(s); // Printing the string to standard output
end;

var
  threads: array[0..NUMBER_OF_THREADS-1] of TThread; // Declaring an array of TThread objects

begin
  for i := 0 to NUMBER_OF_THREADS-1 do begin // Loop to create the threads
    threads[i] := TMyThread.Create(i); // Creating a new TMyThread object and assigning it to the array
    threads[i].Start; // Starting the thread
  end;
  Sleep(1000); // Sleeping for 1 second
end.