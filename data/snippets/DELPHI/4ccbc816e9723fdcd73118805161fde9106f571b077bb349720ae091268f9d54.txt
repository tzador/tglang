// This example code shows how to perform a binary search in Delphi. 

// Create an array with sorted integers 
var 
  Numbers: array[0..9] of Integer = (1, 3, 5, 7, 9, 11, 13, 15, 17, 19);

// Declare a function for binary search 
function BinarySearch(Arr: array of Integer; Target: Integer): Integer;
var 
  Low, High, Mid: Integer;
begin
  Low := 0; // Starting index of array 
  High := Length(Arr) - 1; // Last index of array 
  while Low <= High do 
  begin
    Mid := (Low + High) div 2; // Calculate middle index 
    if Arr[Mid] = Target then
      Exit(Mid) // Target found, return index 
    else if Target < Arr[Mid] then
      High := Mid - 1 // Target is in left half of array 
    else
      Low := Mid + 1; // Target is in right half of array 
  end;
  Result := -1; // Target not found, return -1 
end;

// Call the BinarySearch function and print the results 
var
  Index: Integer;
begin
  Index := BinarySearch(Numbers, 7); // Search for 7 in the array 
  WriteLn('Index of 7 in the array: ', Index);
end.