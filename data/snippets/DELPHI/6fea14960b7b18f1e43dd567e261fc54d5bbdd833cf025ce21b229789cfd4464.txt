unit MathFunctions; // Creates a unit named MathFunctions, used for organizing and grouping related code

interface // Declares the public interface of the unit, allows access to functions and variables from other units

uses
  SysUtils, Classes; // Imports units that provide basic functionality, such as string manipulation and class creation
type
  TMath = class // Creates a class named TMath, used for encapsulating related functions and variables
  private // Defines private components of the class, not accessible outside of the class
    const
      PI = 3.14159; // Defines a constant variable, the value of PI
    var
      FCount: Integer; // Defines a variable for keeping track of the number of times a function is called
  public // Defines public components of the class, accessible from outside of the class
    class function Add(const A, B: Double): Double; // Defines a function that takes in two Double values and returns their sum
    class function Subtract(const A, B: Double): Double; // Defines a function that takes in two Double values and returns their difference
    class function Multiply(const A, B: Double): Double; // Defines a function that takes in two Double values and returns their product
    class function Divide(const A, B: Double): Double; // Defines a function that takes in two Double values and returns their quotient

    class function Power(const Base, Exponent: Double): Double; // Defines a function that takes in a base and an exponent and returns the base raised to the power of the exponent
    class function SquareRoot(const Value: Double): Double; // Defines a function that takes in a value and returns its square root
    class function Factorial(const Value: Integer): Integer; // Defines a function that takes in an Integer value and returns its factorial
  end;

implementation // Provides implementation of the declared public interface

class function TMath.Add(const A, B: Double): Double; // Implements the Add function, takes in two Double values and returns their sum
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := A + B; // Adds A and B and assigns it to the function's return value
end;

class function TMath.Subtract(const A, B: Double): Double; // Implements the Subtract function, takes in two Double values and returns their difference
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := A - B; // Subtracts B from A and assigns it to the function's return value
end;

class function TMath.Multiply(const A, B: Double): Double; // Implements the Multiply function, takes in two Double values and returns their product
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := A * B; // Multiplies A and B and assigns it to the function's return value
end;

class function TMath.Divide(const A, B: Double): Double; // Implements the Divide function, takes in two Double values and returns their quotient
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := A / B; // Divides A by B and assigns it to the function's return value
end;

class function TMath.Power(const Base, Exponent: Double): Double; // Implements the Power function, takes in a base and an exponent and returns the base raised to the power of the exponent
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := Power(Base, Exponent); // Uses the built-in Power function to calculate the result and assign it to the function's return value 
end;

class function TMath.SquareRoot(const Value: Double): Double; // Implements the SquareRoot function, takes in a value and returns its square root
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := Sqrt(Value); // Uses the built-in Sqrt function to calculate the result and assign it to the function's return value 
end;

class function TMath.Factorial(const Value: Integer): Integer; // Implements the Factorial function, takes in an Integer value and returns its factorial
var
  i: Integer; // Declares a variable for the loop iteration
begin
  Inc(FCount); // Increments the value of the FCount variable
  Result := 1; // Assigns 1 to the result, the initial value for the factorial calculation
  for i := 1 to Value do // Loops through all the numbers from 1 to the given value
    Result := Result * i; // Multiplies the current result with the current iteration and assigns it to the result, resulting in the factorial calculation
end;

end. // Ends the unit and marks the end of the file