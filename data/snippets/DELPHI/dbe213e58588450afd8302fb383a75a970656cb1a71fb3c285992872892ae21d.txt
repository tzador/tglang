unit MyUnit; //Defines a unit for organization

interface

uses //Declares units used by this unit
  SysUtils, //Contains system-wide functions and variables
  Classes, //Defines base classes
  Math; //Contains mathematical functions and types

type //Defines new types
  TMyClass = class(TObject) //Defines a class that inherits from TObject
  private //Defines the private section of the class
    FSomeInt: Integer; //Defines a private integer variable
    FSomeString: string; //Defines a private string variable
  protected //Defines the protected section of the class
    function CalculateSomething(Value: Integer): Integer; //Defines a protected function that takes in an integer parameter and returns an integer
  public //Defines the public section of the class
    constructor Create(AOwner: TComponent); override; //Defines a public constructor that takes in a TComponent parameter
    procedure SetSomeString(Value: string); //Defines a public procedure that takes in a string parameter
  end;

implementation

//Constructor definition
constructor TMyClass.Create(AOwner: TComponent);
begin
  inherited Create(AOwner); //Calls the inherited constructor
  FSomeInt := 10; //Assigns a value to the private integer variable
  FSomeString := 'Hello World'; //Assigns a value to the private string variable
end;

//Procedure definition
procedure TMyClass.SetSomeString(Value: string);
begin
  FSomeString := Value; //Sets the private string variable to the parameter value
end;

//Function definition
function TMyClass.CalculateSomething(Value: Integer): Integer;
begin
  Result := FSomeInt + Value + RandomRange(1, 10); //Calculates a result based on the private integer variable, the function parameter, and a random number between 1 and 10
end;

//Main program
var
  MyObject: TMyClass; //Declares a variable of type TMyClass
begin
  MyObject := TMyClass.Create(nil); //Creates an instance of the TMyClass object and assigns it to the variable
  try
    MyObject.SetSomeString('Hello World'); //Calls the SetSomeString procedure and passes in a parameter
    ShowMessage(IntToStr(MyObject.CalculateSomething(5))); //Calls the CalculateSomething function and displays the result in a message
  finally
    MyObject.Free; //Frees the memory allocated to the object
  end;
end.