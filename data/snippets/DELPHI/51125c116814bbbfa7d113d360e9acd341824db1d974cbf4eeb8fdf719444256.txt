// This code snippet creates a dynamic array of integers and sorts it using quicksort algorithm
 
// Declare a dynamic array of integers
var
  myArray: array of Integer;
 
// Assign values to the array
myArray := [5, 1, 9, 3, 8, 2, 7, 4, 6];
 
// Create a procedure for quicksort algorithm
procedure QuickSort(var ArrayToSort: array of Integer; leftIndex: Integer; rightIndex: Integer);
var
  i,j,temp,pivot: Integer;
begin
  i := leftIndex;
  j := rightIndex;
  pivot := ArrayToSort[(leftIndex + rightIndex) div 2];
 
  // Loop until indices meet
  while i <= j do
  begin
    // Find the first element from left that is greater than the pivot
    while ArrayToSort[i] < pivot do
      i := i + 1;
 
    // Find the first element from right that is smaller than the pivot
    while ArrayToSort[j] > pivot do
      j := j - 1;
 
    // Swap the two elements if not already in correct order
    if i <= j then
    begin
      temp := ArrayToSort[i];
      ArrayToSort[i] := ArrayToSort[j];
      ArrayToSort[j] := temp;
      i := i + 1;
      j := j - 1;
    end;
  end;
 
  // Recursively call the procedure for the two subarrays
  if leftIndex < j then
    QuickSort(ArrayToSort, leftIndex, j);
  if i < rightIndex then
    QuickSort(ArrayToSort, i, rightIndex);
end;
 
// Call the procedure with the array and its indices as parameters
QuickSort(myArray, 0, Length(myArray) - 1);
 
// Print the sorted array
for i := 0 to Length(myArray) - 1 do
  WriteLn(myArray[i]);