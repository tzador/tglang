// This code snippet calculates the square root of a given number using the Babylonian method
unit BabylonianSquareRoot;

interface

// function to calculate square root using Babylonian method
function CalculateSquareRoot(value: Integer): Real;

implementation

function CalculateSquareRoot(value: Integer): Real;
var
  startValue, endValue, midValue, squareValue: Real; // variables to store values
  iterations: Integer; // variable to keep track of iterations
begin
  // initialize values
  startValue := 0;
  endValue := value;
  midValue := (startValue + endValue) / 2;
  squareValue := midValue * midValue;
  iterations := 1;

  // loop until square value is close enough to original value
  while Abs(squareValue - value) > 0.0001 do 
  begin
    // adjust start or end value based on comparison
    if squareValue > value then
      endValue := midValue
    else
      startValue := midValue;

    // calculate new mid value and square value
    midValue := (startValue + endValue) / 2;
    squareValue := midValue * midValue;

    // increment iteration count
    Inc(iterations);
  end;

  // output result and number of iterations
  WriteLn('Square root of ', value, ' is ', midValue:6:2, ' after ', iterations, ' iterations');
end;

end.