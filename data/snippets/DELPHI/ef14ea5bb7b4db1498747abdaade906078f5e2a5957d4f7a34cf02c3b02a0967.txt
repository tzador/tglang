unit Main;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Menus, StdCtrls, Buttons, ExtCtrls, ComCtrls, DBCtrls, DB,

  {The following units are used for data access:}
  DBTables, DBGrids, DBLookup, Mask, DBEdit, DBNavigator, DBGrid, MaskUtils,

  {The following units are used for reporting and printing:}
  Quickrpt, Qrctrls, QRExport, QRPrntr, QRWebFilt, QRCtrls, QRPComm,
  QRProd, QRCtrlsExt, QRubiCtrl,

  {The following units are used for database connectivity:}
  ADODB, ADOX, SqlTimSt,
  ZConnection, {$IFDEF MSWINDOWS}ZDbcInterbase, {$ENDIF} ZDbcMySql, ZDbcOdbc, ZDbcASA, ZDbcPostgreSql, ZDbcInformix,

  {The following units are used for internet connectivity:}
  IdBaseComponent, IdComponent, IdTCPServer, IdHTTP, IdCookie, IdTCPClient, IdIOHandler, IdIOHandlerSocket,
  IdIOHandlerStack, IdSSL, IdSSLOpenSSL, IdCSP, IdSSLOpenSSLHeaders, IdURI,

  {The following units are used for encryption and security:}
  IdTCPConnection, IdHTTPServer, IdGlobal, IdTCPServerReply, IdServerIOHandler,
  IdServerIOHandlerSocket, IdServerIOHandlerStack, IdServerIOHandlerSSLOpenSSL, IdServerIOHandlerWebsocket, IdCoderZLib,
  IdZLibCompressorBase, IdZLibCompressorBase64;

const
  MaxMessageLength = 16384;

type
  {TMyClass implements interface IMyInterface}
  TMyClass = class(TInterfacedObject, IMyInterface)
  private
    FMessage: WideString;
    FConnections: TList;
    {Private methods can also be declared here}

  protected
    {Protected methods can be declared here}

    {Implementing interface methods}
    function GetMessage: WideString; safecall;
    procedure SetMessage(const Value: WideString); safecall;

  public
    {Public members can be declared here}

    {Class constructor}
    constructor Create;

    {Class destructor}
    destructor Destroy; override;

    {Public methods can be declared here}
    procedure AddConnection(Connection: TConnection);
    function GetConnection(Index: Integer): TConnection;
  end;

implementation

{TMyClass constructor}
constructor TMyClass.Create;
begin
  inherited Create;
  FMessage := 'Hello World!';
  FConnections := TList.Create;
end;

{TMyClass destructor}
destructor TMyClass.Destroy;
var
  i: Integer;
begin
  for i := 0 to FConnections.Count - 1 do
    TConnection(FConnections[i]).Free;

  FConnections.Free;
  inherited Destroy;
end;

{Implementing interface method}
function TMyClass.GetMessage: WideString;
begin
  Result := FMessage;
end;

{Implementing interface method}
procedure TMyClass.SetMessage(const Value: WideString);
begin
  FMessage := Value;
end;

{Public method}
procedure TMyClass.AddConnection(Connection: TConnection);
begin
  FConnections.Add(Connection);
end;

{Public method}
function TMyClass.GetConnection(Index: Integer): TConnection;
begin
  Result := TConnection(FConnections[Index]);
end;

end.