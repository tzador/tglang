unit ComplexMath;

// This unit contains functions for performing complex mathematical operations

interface

uses
  SysUtils, Math;

// Constants
const
  TOLERANCE = 0.00001; // Used for equality checks when dealing with complex numbers

// Types
type
  TComplexNumber = record // Defines a structure for storing complex numbers
    Real: Double; // Stores the real part of the complex number
    Imaginary: Double; // Stores the imaginary part of the complex number
  end;

  // Exception class for division by zero errors
  EDivByZero = class(Exception);

// Functions
function AddComplexNumbers(A, B: TComplexNumber): TComplexNumber; // Adds two complex numbers and returns the result
function SubtractComplexNumbers(A, B: TComplexNumber): TComplexNumber; // Subtracts two complex numbers and returns the result
function MultiplyComplexNumbers(A, B: TComplexNumber): TComplexNumber; // Multiplies two complex numbers and returns the result
function DivideComplexNumbers(A, B: TComplexNumber): TComplexNumber; // Divides two complex numbers and returns the result

implementation

// Function for adding two complex numbers
function AddComplexNumbers(A, B: TComplexNumber): TComplexNumber;
var
  Result: TComplexNumber; // Variable to store the result
begin
  Result.Real := A.Real + B.Real; // Adds the real parts of the complex numbers
  Result.Imaginary := A.Imaginary + B.Imaginary; // Adds the imaginary parts of the complex numbers
  Result := SimplifyComplexNumber(Result); // Simplifies the resulting complex number
  Result := RoundComplexNumber(Result); // Rounds the resulting complex number
  Result := TrimComplexNumber(Result); // Trims any small values from the resulting complex number
  Result := CheckComplexNumber(Result); // Checks if the resulting complex number is too small and sets it to 0 if it is within tolerance
  Result := CheckComplexNumber(Result); // Checks again in case the real or imaginary part were set to 0
end;

// Function for subtracting two complex numbers
function SubtractComplexNumbers(A, B: TComplexNumber): TComplexNumber;
var
  Result: TComplexNumber; // Variable to store the result
begin
  Result.Real := A.Real - B.Real; // Subtracts the real parts of the complex numbers
  Result.Imaginary := A.Imaginary - B.Imaginary; // Subtracts the imaginary parts of the complex numbers
  Result := SimplifyComplexNumber(Result); // Simplifies the resulting complex number
  Result := RoundComplexNumber(Result); // Rounds the resulting complex number
  Result := TrimComplexNumber(Result); // Trims any small values from the resulting complex number
  Result := CheckComplexNumber(Result); // Checks if the resulting complex number is too small and sets it to 0 if it is within tolerance
  Result := CheckComplexNumber(Result); // Checks again in case the real or imaginary part were set to 0
end;

// Function for multiplying two complex numbers
function MultiplyComplexNumbers(A, B: TComplexNumber): TComplexNumber;
var
  Result: TComplexNumber; // Variable to store the result
begin
  Result.Real := A.Real * B.Real - A.Imaginary * B.Imaginary; // Multiplies the real and imaginary parts of the complex numbers and subtracts them
  Result.Imaginary := A.Real * B.Imaginary + A.Imaginary * B.Real; // Multiplies the real and imaginary parts of the complex numbers and adds them
  Result := SimplifyComplexNumber(Result); // Simplifies the resulting complex number
  Result := RoundComplexNumber(Result); // Rounds the resulting complex number
  Result := TrimComplexNumber(Result); // Trims any small values from the resulting complex number
  Result := CheckComplexNumber(Result); // Checks if the resulting complex number is too small and sets it to 0 if it is within tolerance
  Result := CheckComplexNumber(Result); // Checks again in case the real or imaginary part were set to 0
end;

// Function for dividing two complex numbers
function DivideComplexNumbers(A, B: TComplexNumber): TComplexNumber;
var
  Result: TComplexNumber; // Variable to store the result
  Denominator: Double; // Variable to store the denominator of the division
begin
  Denominator := B.Real * B.Real + B.Imaginary * B.Imaginary; // Calculates the denominator of the division
  if Denominator = 0 then // Checks if the denominator is equal to 0 (division by 0)
    raise EDivByZero.Create('Error: Division by zero') // Throws an exception if the denominator is 0
  else
  begin
    Result.Real := (A.Real * B.Real + A.Imaginary * B.Imaginary) / Denominator; // Calculates the real part of the result
    Result.Imaginary := (A.Imaginary * B.Real - A.Real * B.Imaginary) / Denominator; // Calculates the imaginary part of the result
  end;
  Result := SimplifyComplexNumber(Result); // Simplifies the resulting complex number
  Result := RoundComplexNumber(Result); // Rounds the resulting complex number
  Result := TrimComplexNumber(Result); // Trims any small values from the resulting complex number
  Result := CheckComplexNumber(Result); // Checks if the resulting complex number is too small and sets it to 0 if it is within tolerance
  Result := CheckComplexNumber(Result); // Checks again in case the real or imaginary part were set to 0
end;

// Function for simplifying a complex number
function SimplifyComplexNumber(A: TComplexNumber): TComplexNumber;
begin
  if A.Real = 0 then // Checks if the real part is 0
    A.Imaginary := 0; // Sets the imaginary part to 0 if the real part is 0
  if A.Imaginary = 0 then // Checks if the imaginary part is 0
    A.Real := 0; // Sets the real part to 0 if the imaginary part is 0
  Result := A; // Returns the simplified complex number
end;

// Function for rounding a complex number
function RoundComplexNumber(A: TComplexNumber): TComplexNumber;
begin
  A.Real := RoundTo(A.Real, -10); // Rounds the real part to 10 decimal places
  A.Imaginary := RoundTo(A.Imaginary, -10); // Rounds the imaginary part to 10 decimal places
  Result := A; // Returns the rounded complex number
end;

// Function for trimming small values from a complex number
function TrimComplexNumber(A: TComplexNumber): TComplexNumber;
begin
  if Abs(A.Real) < TOLERANCE then // Checks if the absolute value of the real part is smaller than the tolerance
    A.Real := 0; // Sets the real part to 0 if it is
  if Abs(A.Imaginary) < TOLERANCE then // Checks if the absolute value of the imaginary part is smaller than the tolerance
    A.Imaginary := 0; // Sets the imaginary part to 0 if it is
  Result := A; // Returns the trimmed complex number
end;

// Function for checking if a complex number is too small and setting it to 0 if it is within tolerance
function CheckComplexNumber(A: TComplexNumber): TComplexNumber;
begin
  if Abs(A.Real) < TOLERANCE then // Checks if the absolute value of the real part is smaller than the tolerance
    A.Real := 0; // Sets the real part to 0 if it is
  if Abs(A.Imaginary) < TOLERANCE then // Checks if the absolute value of the imaginary part is smaller than the tolerance
    A.Imaginary := 0; // Sets the imaginary part to 0 if it is
  Result := A; // Returns the checked complex number
end;

end.