{This code snippet generates all possible combinations of an array}

program CombinationGenerator;

var
  arr: array[1..5] of integer; {declare an array to hold values}
  comb: array[1..5] of integer; {declare an array to hold combinations}
  i, j: integer; {declare variables for loops}

{function to check if an array is empty}
function arrayIsEmpty(a: array of integer): boolean;
begin
  arrayIsEmpty := (Length(a) = 0);
end;

{function to generate combinations}
function generateCombinations(a: array of integer; var c: array of integer; k, start, size: integer): boolean;
var
   i, j: integer;
begin
   if k <= size then {checks if there is still space for more combinations}
   begin
      for i := start to Length(a) do
      begin
         c[k] := a[i]; {add element to combination}
         if generateCombinations(a, c, k+1, i+1, size) then {recursive call to generate more combinations}
            exit(true); {return if successful}
      end;
   end
   else
      exit(true); {return true if combinations are successfully generated}
   exit(false); {return false if combination cannot be generated}
end;

{main program}
begin
  arr := [1, 2, 3, 4, 5]; {initialize array with values}
  writeln('All possible combinations of array: ');
  for i := 1 to Length(arr) do {loop through all sizes of combinations}
  begin
    if generateCombinations(arr, comb, 1, 1, i) then {call generateCombinations function}
    begin
      for j := 1 to i do
        write(' ', comb[j]); {print combinations}
      writeln;
    end;
  end;
  readln;
end.