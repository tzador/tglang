{Multi-line comment that explains the purpose of the code snippet}
unit Main;

{Importing necessary modules}
uses
  Classes, SysUtils, Math;

{Defining a constant variable}
const
  PI = 3.141592653589793;

{Defining a custom data type}
type
  TShape = (Circle, Square, Rectangle, Triangle);

{Defining a record to hold shape properties}
type
  TShapeProperties = record
    Radius: Double;
    SideLength: Double;
    Width: Double;
    Height: Double;
  end;

{Preparing an array of shapes with different properties}
var
  Shapes: array[0..3] of TShapeProperties;
  i: Integer;

begin
  {Initializing the array with shape properties}
  Shapes[0].Radius := 5.0;
  Shapes[1].SideLength := 10.0;
  Shapes[2].Width := 6.0;
  Shapes[2].Height := 8.0;
  Shapes[3].SideLength := 4.0;
  Shapes[3].Height := 5.0;

  {Looping through the array and calculating area for each shape}
  for i := 0 to 3 do
  begin
    case TShape(i) of
      Circle: {Calculating area of circle using PI and radius}
      begin
        Result := PI * Power(Shapes[i].Radius, 2);
      end;
      Square: {Calculating area of square using side length}
      begin
        Result := Power(Shapes[i].SideLength, 2);
      end;
      Rectangle: {Calculating area of rectangle using width and height}
      begin
        Result := Shapes[i].Width * Shapes[i].Height;
      end;
      Triangle: {Calculating area of triangle using base and height}
      begin
        Result := 0.5 * Shapes[i].SideLength * Shapes[i].Height;
      end;
    end;
  end;
end.