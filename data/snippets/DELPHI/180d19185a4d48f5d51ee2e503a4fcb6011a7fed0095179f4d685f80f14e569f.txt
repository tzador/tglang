// This code snippet demonstrates a simple use of classes and inheritance in Delphi.

// Create a parent class called "Vehicle" with a property "topSpeed"
type
  Vehicle = class
    private
      topSpeed: Integer;
    public
      constructor Create(speed: Integer);
      function GetTopSpeed(): Integer;
      procedure SetTopSpeed(newSpeed: Integer);
  end;

// Create a constructor for the "Vehicle" class
constructor Vehicle.Create(speed: Integer);
begin
  Self.topSpeed := speed;
end;

// Create a function to retrieve the top speed property
function Vehicle.GetTopSpeed(): Integer;
begin
  Result := Self.topSpeed;
end;

// Create a procedure to set a new top speed
procedure Vehicle.SetTopSpeed(newSpeed: Integer);
begin
  Self.topSpeed := newSpeed;
end;

// Create a child class called "Car" which inherits from "Vehicle"
type
  Car = class(Vehicle)
    private
      brand: String;
    public
      constructor Create(speed: Integer; carBrand: String);
      function GetBrand(): String;
      procedure SetBrand(newBrand: String);
  end;

// Create a constructor for the "Car" class
constructor Car.Create(speed: Integer; carBrand: String);
begin
  inherited Create(speed);
  Self.brand := carBrand;
end;

// Create a function to retrieve the car brand
function Car.GetBrand(): String;
begin
  Result := Self.brand;
end;

// Create a procedure to set a new car brand
procedure Car.SetBrand(newBrand: String);
begin
  Self.brand := newBrand;
end;

// Create instances of the "Vehicle" and "Car" classes
var
  vehicle1: Vehicle;
  car1: Car;
begin
  vehicle1 := Vehicle.Create(100);
  car1 := Car.Create(150, 'Toyota');

// Print out the top speed and car brand of "car1"
  Writeln('Top speed of car1: ' + IntToStr(car1.GetTopSpeed()));
  Writeln('Brand of car1: ' + car1.GetBrand());
end.