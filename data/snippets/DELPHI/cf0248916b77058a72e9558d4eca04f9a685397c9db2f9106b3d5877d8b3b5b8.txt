// This code snippet showcases an example of implementing a binary search in Delphi. 
// It takes in an array and a specific number to search for, and returns the index of the number if found.

procedure BinarySearch(A : array of Integer; num : Integer);
var
  low, high, mid : Integer;  
begin
  low := 0; // Initialize the lower bound to start of the array
  high := Length(A) - 1; // Initialize the upper bound to end of the array
  while (low <= high) do // Loop until the lower bound is less than the upper bound
  begin
    mid := (low + high) div 2; // Calculate the middle index
    if (A[mid] = num) then // Check if the middle element is equal to the number
    begin
      WriteLn('Number ', num ,' found at index ', mid);
      Exit; // Exit the procedure
    end
    else if (A[mid] < num) then // If the middle element is less than the number
      low := mid + 1 // Update the lower bound to move to the upper half of the array
    else // If the middle element is greater than the number
      high := mid - 1; // Update the upper bound to move to the lower half of the array
  end;
  WriteLn('Number ', num ,' not found in array');
end;

// Example usage
var
  A : array[0..9] of Integer = (1, 3, 5, 7, 9, 11, 13, 15, 17, 19); // Initialize an array of integers
begin
  BinarySearch(A, 11); // Search for number 11 in the array
end.