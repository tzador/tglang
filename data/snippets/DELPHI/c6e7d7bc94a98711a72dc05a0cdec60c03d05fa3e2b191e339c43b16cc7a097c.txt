// This code snippet generates a custom hash value using SHA-1 encryption algorithm
// Input: string to be encrypted
// Output: hexadecimal string representing the hashed value
function GenerateHash(const input: string): string;
var
  key, hash: AnsiString;
  digest: TSHA1Digest;
  i, j, round: Integer;
begin
  // convert input to AnsiString
  key := AnsiString(input);
  
  // pad input to multiple of 64 bytes
  while (Length(key) mod 64 <> 0) do
  begin
    key := key + #0;
  end;
  
  // initialize digest with initial values
  digest[0] := $67452301;
  digest[1] := $efcdab89;
  digest[2] := $98badcfe;
  digest[3] := $10325476;
  digest[4] := $c3d2e1f0;
  
  for i := 1 to Length(key) div 64 do // for each 64-byte chunk in input
  begin
    // break chunk into 16 32-bit words
    for j := 0 to 15 do
    begin
      // combine 4 bytes into 32-bit word
      digest[j] := (Ord(key[(i-1)*64 + j*4]) shl 24) or
                   (Ord(key[(i-1)*64 + j*4 + 1]) shl 16) or
                   (Ord(key[(i-1)*64 + j*4 + 2]) shl 8) or
                   (Ord(key[(i-1)*64 + j*4 + 3]));
    end;
    
    // perform 80 rounds of calculations
    for round := 0 to 79 do
    begin
      // choose function based on current round
      case round of
        0..19: digest[5] := (digest[0] shl 5) or (digest[0] shr 27); // f (b, c, d) = (b AND c) OR ((NOT b) AND d)
        20..39: digest[5] := (digest[0] shl 5) or (digest[0] shr 27); // g (b, c, d) = b XOR c XOR d
        40..59: digest[5] := (digest[0] shl 5) or (digest[0] shr 27); // h (b, c, d) = (b AND c) OR (b AND d) OR (c AND d)
        60..79: digest[5] := (digest[0] shl 5) or (digest[0] shr 27); // i (b, c, d) = b XOR c XOR d
      end;
      
      // calculate current round value
      digest[5] := digest[0] + digest[5] + digest[round] + RoundConstants[round] + buffer[round mod 16];
      
      // perform rotation and addition
      digest[0] := digest[4];
      digest[4] := digest[3];
      digest[3] := digest[2] shl 30;
      digest[2] := digest[1];
      digest[1] := digest[5];
    end;
    
    // update values for next round
    digest[0] := digest[0] + $67452301;
    digest[1] := digest[1] + $efcdab89;
    digest[2] := digest[2] + $98badcfe;
    digest[3] := digest[3] + $10325476;
    digest[4] := digest[4] + $c3d2e1f0;
  end;
  
  // convert digest to hexadecimal string
  for i := 0 to 4 do
  begin
    hash := hash + IntToHex(digest[i], 8);
  end;
  
  // return hashed value
  Result := hash;
end;