module arithmetic_logic_unit(input [7:0] A, B,
                             input [2:0] opcode,
                             output reg [7:0] result,
                             output reg flags);

    // Internal wires declaration
    wire [7:0] internal_result;
    wire [7:0] N, Z, C; // Negative, Zero, Carry flags

    // Internal instruction codes
    parameter ADD = 3'b000, SUB = 3'b001, AND = 3'b010,
              OR = 3'b100, XOR = 3'b110, CMP = 3'b111;

    // Perform the operation based on opcode
    always @*
    begin
        case(opcode)
            ADD: internal_result = A + B;
            SUB: internal_result = A - B;
            AND: internal_result = A & B;
            OR: internal_result = A | B;
            XOR: internal_result = A ^ B;
            CMP: internal_result = A - B;
        endcase
    end

    // Assign flags based on result
    always @*
    begin
        N = internal_result[7];
        Z = (internal_result == 0);
        C = (internal_result[8] | internal_result[9]);
    end

    // Output result and flags
    always @*
    begin
        result = internal_result;
        flags = {N, Z, C};
    end
endmodule