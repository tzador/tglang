// This code snippet is in the VERILOG hardware description language.
// It implements a simple sequential circuit using flip-flops and combinational logic.
// The circuit contains 4 inputs, 1 output and 2 internal signals.

module sequential_circuit(
  input [3:0] x, // 4-bit input
  input clk,     // clock input
  input rst,     // reset input
  output reg y,  // 1-bit output
  wire [1:0] z   // 2-bit internal signals
);

// Declare input, output and internal signals
reg [3:0] reg_x;  // 4-bit register for input x
reg [2:0] reg_z;  // 3-bit register for internal signal z
wire [1:0] and_z; // 2-bit AND gate output for z

// Register for input x
always @(posedge clk or posedge rst) begin
  if (rst) begin
    reg_x <= 4'b0; // reset value of 0 for input x
  end else begin
    reg_x <= x;    // assign input x to register
  end
end

// Register for internal signal z
always @(posedge clk or posedge rst) begin
  if (rst) begin
    reg_z <= 3'b0; // reset value of 0 for internal signal z
  end else begin
    reg_z <= and_z;  // assign AND gate output to register
  end
end

// Combinational logic for internal signal z
assign and_z = reg_x & 2'b11;  // AND input x with 2-bit value 11

// Output register
always @(reg_z) begin
  y <= reg_z[1]; // assign most significant bit of internal signal z to output y
end

endmodule