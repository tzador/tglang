module test_module(
  input wire clk,
  input wire [7:0] data_in,
  output reg [2:0] data_out
);

  reg [7:0] temp_data;     // declaring a 8-bit register to store temporary data

  always @ (posedge clk) begin   // always block triggered at every positive clock edge
    if (data_in == 8'b00110011) begin     // checking if input data is equal to a specific value

      // bit shifting the input data by 2 bits to the right and storing in the register
      temp_data = data_in >> 2;

      // adding 1 to the second bit of the temporary data
      temp_data[2] = temp_data[2] + 1;

      // assigning the temporary data to the output
      data_out = temp_data;
    end
    else if (data_in > 8'b01000000) begin   // checking if input data is greater than a specific value
      data_out = 3'b101;     // assigning a specific value to the output based on the condition
    end
    else begin   // default condition if none of the above are met
      data_out = data_in[2:0];    // assigning the lower 3 bits of the input data to the output
    end
  end
endmodule