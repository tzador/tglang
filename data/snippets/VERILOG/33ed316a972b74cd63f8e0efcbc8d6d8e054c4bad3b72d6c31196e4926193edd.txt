module decoder (
    input [3:0] binary_in,         // 4-bit binary input
    output reg [15:0] select_out   // 16-bit select output
);

always@ (binary_in) begin
    case (binary_in)
        // case statement to check input and assign values to output
        4'b0000 : select_out = 16'h0001;        // assign select_out the value of "0001" in hexadecimal
        4'b0001 : select_out = 16'h0010;        // assign select_out the value of "0010" in hexadecimal
        4'b0010 : select_out = 16'h0100;        // assign select_out the value of "0100" in hexadecimal
        4'b0011 : select_out = 16'h1000;        // assign select_out the value of "1000" in hexadecimal
        4'b0100 : select_out = 16'h0011;        // assign select_out the value of "0011" in hexadecimal
        4'b0101 : select_out = 16'h0101;        // assign select_out the value of "0101" in hexadecimal
        4'b0110 : select_out = 16'h1001;        // assign select_out the value of "1001" in hexadecimal
        4'b0111 : select_out = 16'h0110;        // assign select_out the value of "0110" in hexadecimal
        4'b1000 : select_out = 16'h0111;        // assign select_out the value of "0111" in hexadecimal
        4'b1001 : select_out = 16'h1100;        // assign select_out the value of "1100" in hexadecimal
        4'b1010 : select_out = 16'h1010;        // assign select_out the value of "1010" in hexadecimal
        4'b1011 : select_out = 16'h1000;        // assign select_out the value of "1000" in hexadecimal
        4'b1100 : select_out = 16'h1101;        // assign select_out the value of "1101" in hexadecimal
        4'b1101 : select_out = 16'h1110;        // assign select_out the value of "1110" in hexadecimal
        4'b1110 : select_out = 16'h1111;        // assign select_out the value of "1111" in hexadecimal
        4'b1111 : select_out = 16'h0000;        // assign select_out the value of "0000" in hexadecimal
    endcase
end

endmodule