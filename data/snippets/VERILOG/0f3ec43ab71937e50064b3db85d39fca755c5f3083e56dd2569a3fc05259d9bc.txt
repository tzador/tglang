/* This code snippet generates a 4-bit counter using a synchronous reset D flip-flop
   with enable and asynchronous clear */

// Define input and output ports
module counter_4bit(
    input clk,       // clock input
    input [1:0] en,  // enable input, active high
    input clear,     // asynchronous clear input, active high
    output [3:0] q   // 4-bit counter output
);

// Define internal signal and register
reg [3:0] count;    // register to hold counter value, initialized to 0

// Synchronous reset D flip-flop with enable and asynchronous clear
always @(posedge clk) begin

    // Clear logic
    if (clear) begin
        count <= 0; // reset to 0 when clear input is high
    end
    // Enable logic
    else if (en == 2'b11) begin
        count <= count + 1; // increment count by 1 when enable input is high
    end
    // Hold state when enable is low
    else begin
        count <= count;
    end

end

// Assign output to register value
assign q = count;

endmodule