/*
 * This is a test module that consists of a simple counter 
 * that increments from 0 to 15 and then resets back to 0.
*/
module counter(
    input clk,
    output reg [3:0] count
);

reg [3:0] state, next_state;  // Registers to hold the current and next state
`define IDLE 2'b00            // Define for the state IDLE
`define COUNT 2'b01           // Define for the state COUNT
`define RESET 2'b10           // Define for the state RESET

always @(posedge clk) begin
    // Sequential logic for state transition
    case (state)
        `IDLE: begin
            // If in IDLE state, wait for next clock and transition to COUNT state
            next_state = `COUNT;
        end
        `COUNT: begin
            // If in COUNT state, increment count and transition to RESET state
            next_state = `RESET;
            count <= count + 1;
        end
        `RESET: begin
            // If in RESET state, reset count to 0 and transition to IDLE state
            next_state = `IDLE;
            count <= 0;
        end
    endcase

    // Update current state with next state for next clock
    state <= next_state;
end

endmodule