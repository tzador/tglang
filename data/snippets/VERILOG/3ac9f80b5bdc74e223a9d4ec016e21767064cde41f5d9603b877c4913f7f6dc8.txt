//This is a module named "divider"
//It takes in an input of 8 bits and outputs the quotient and remainder after dividing by 2

module divider (input [7:0] num, output reg [5:0] quotient, output reg [2:0] remainder);

reg [7:0] temp_num;
reg [7:0] initial_num;
reg [5:0] count;

initial begin
    initial_num = 0; //initialize initial_num to 0
    count = 0; //initialize count to 0
end

always @ (posedge num) begin //on positive edge of num input
    temp_num = initial_num; //store initial_num value in temp_num
    initial_num = num; //assign num input value to initial_num
end

always @ (posedge num) begin //on positive edge of num input
    if (num == 0) begin
        quotient = count; //when num is 0, quotient is equal to count
        remainder = 0; //when num is 0, remainder is 0
    end
    else begin
        while (initial_num > 0) begin //loop until initial_num becomes 0
            initial_num = initial_num - 1; //subtract 1 from initial_num
            count = count + 1; //increase count by 1
        end
        quotient = count; //when initial_num becomes 0, quotient is equal to count
        remainder = temp_num; //when initial_num becomes 0, remainder is equal to temp_num
        count = 0; //reset count to 0 for the next iteration
    end
end

endmodule