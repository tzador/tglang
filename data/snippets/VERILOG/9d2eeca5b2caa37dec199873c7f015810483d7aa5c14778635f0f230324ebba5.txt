// This is a verilog code that implements a 4-bit ripple carry adder with carry in.

module ripple_carry_adder(input wire [3:0] a, b, // Input ports a and b, 4-bits each
                          input wire cin, // Carry in input
                          output wire [3:0] sum, // 4-bit sum output
                          output wire cout); // Carry out output

wire [3:0] c; // Internal signal to store carry values

// Assigning initial values to output wires
assign sum[0] = a[0] ^ b[0] ^ cin; // Sum of LSB and carry in
assign cout = (a[0] & b[0]) | (a[0] & cin) | (b[0] & cin); // Determining carry out

// Generating a for loop to iterate through remaining bits (1-3)
genvar i;
generate
    for (i=1; i<=3; i=i+1) begin : gen_loop
        assign sum[i] = a[i] ^ b[i] ^ c[i-1]; // Sum of current bits and previous carry
        assign c[i] = (a[i] & b[i]) | (a[i] & c[i-1]) | (b[i] & c[i-1]); // Updating carry value
    end
endgenerate
endmodule