// 8-bit Multiplier Circuit
// This code implements an 8-bit multiplier using structural design approach

module multiplier(output reg [15:0] out, input [7:0] a, b);

reg [7:0] row_results [7:0]; // stores the intermediate results of each row

// Block 1: generate partial products for each bit in b
assign row_results[0] = a[0] ? b : 0; // multiply first bit of a with all bits of b
assign row_results[1] = a[1] ? b : 0;
assign row_results[2] = a[2] ? b : 0;
assign row_results[3] = a[3] ? b : 0;
assign row_results[4] = a[4] ? b : 0;
assign row_results[5] = a[5] ? b : 0;
assign row_results[6] = a[6] ? b : 0;
assign row_results[7] = a[7] ? b : 0;

// Block 2: perform row-wise addition to get the final result
always @ (posedge clk) // synchronous always block
begin
    out <= row_results[0]; // initialize the output with the first row result
    for (i = 1; i < 8; i = i + 1)
    begin
        // use built-in "+" operator to perform addition of partial products
        out <= out + row_results[i];
    end
end

endmodule