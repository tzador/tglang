// This is a code snippet showing the implementation of a simple ALU in Verilog
module ALU (a, b, op, result);

// Declare inputs and outputs of the module
input [3:0] a, b; // Two 4-bit inputs
input [1:0] op;   // Two control bits for the operation
output [3:0] result; // 4-bit output for the result

// Create internal signals for intermediate calculations
wire [4:0] sum;
wire [3:0] shifted_a, shifted_b;

// Instantiate a 4-bit adder named "adder"
adder add(sum, a, b); // Outputs a 5-bit sum

// Instantiate a 4-bit shifter named "shifter"
shifter shift(shifted_a, a, op[0]); // Outputs a shifted version of a
shifter shift(shifted_b, b, op[0]); // Outputs a shifted version of b

// Case statement to determine operation based on op bits
// Note: Default case is included to catch any invalid operations
always @ (*) begin
  case (op)
    2'b00 : result = sum; // Addition operation, do nothing to sum
    2'b01 : result = 0;   // Clear operation, results in all 0's
    2'b10 : result = shifted_a; // Shift operation, use shifted_a as result
    default : result = {4{1'bZ}}; // Invalid operation, outputs a 4-bit Z vector
  endcase
end

endmodule