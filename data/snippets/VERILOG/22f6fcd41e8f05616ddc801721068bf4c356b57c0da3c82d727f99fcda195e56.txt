// Defining a 4-bit Adder module

module adder4bit(input [3:0] A, input [3:0] B, input cin, output [3:0] S, output cout);

  // Define internal signals and variables
  wire [3:0] A_xor_B, A_and_B, A_or_B;
  wire [2:0] A_xor_B_and_cin, A_and_B_and_cin, A_xor_B_or_cin;
  reg [3:0] S_reg = 0, cout_reg = 0;

  // Bitwise operations for XOR, AND, and OR
  assign A_xor_B = A ^ B;
  assign A_and_B = A & B;
  assign A_or_B = A | B;

  // Generate internal signals for carry calculation
  assign A_xor_B_and_cin[2] = A_xor_B[3] & cin;
  assign A_and_B_and_cin[2] = A_and_B[3] & cin;
  assign A_xor_B_or_cin[2] = A_xor_B[3] | cin;
  assign A_xor_B_or_cin[1] = A_xor_B[2] | A_and_B_and_cin[2];
  assign A_and_B_and_cin[1] = A_and_B[2] | A_xor_B_or_cin[2];
  assign A_xor_B_or_cin[0] = A_xor_B[1] | A_and_B_and_cin[1];
  assign A_and_B_and_cin[0] = A_and_B[1] | A_xor_B_or_cin[1];

  // Calculate sum and carry output
  always @* begin
    S_reg[0] = A_xor_B[0] ^ cin;
    S_reg[1] = A_and_B[0] ^ A_xor_B_or_cin[0];
    S_reg[2] = A_and_B[1] ^ A_xor_B_or_cin[1];
    S_reg[3] = A_and_B[2] ^ A_xor_B_or_cin[2];
    cout_reg = A_and_B_and_cin[2] | A_and_B_and_cin[1] | A_and_B_and_cin[0];
  end

  // Assign outputs to external signals
  assign S = S_reg;
  assign cout = cout_reg;
  
endmodule