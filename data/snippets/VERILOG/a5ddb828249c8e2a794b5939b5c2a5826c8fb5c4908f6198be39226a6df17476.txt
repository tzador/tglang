/*
This is a Verilog code snippet for a 4-bit ripple carry adder.
*/


`timescale 1ns / 1ps                         // specifying timescale for simulation
module ripple_carry_adder(a, b, cin, sum, cout);  // defining module with input and output ports
    input [3:0] a, b;                        // 4-bit input ports a and b
    input cin;                               // input carry-in port
    output [3:0] sum;                        // 4-bit output port for sum
    output cout;                             // output carry-out port

    wire [4:0] temp;                         // internal wire for temporary storage
    assign temp = {cin, a} + {b, 4'b0};      // concatenating a and b with a 0 padding and adding with carry-in
    assign sum = temp[3:0];                   // output sum is the least significant 4 bits of temp
    assign cout = temp[4];                    // output carry-out is the most significant bit of temp
endmodule

/* 
Testbench for the 4-bit ripple carry adder module.
*/

`timescale 1ns / 1ps                         // specifying timescale for simulation
module ripple_carry_test;

    // defining inputs and outputs
    reg[3:0] a, b;                           
    reg cin;
    wire[3:0] sum;
    wire cout;

    // instantiating the module
    ripple_carry_adder adder(.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout));

    // initial block for assigning inputs and displaying outputs
    initial begin
        a = 4'b0001;                         // first input of 1
        b = 4'b0011;                         // second input of 3
        cin = 1'b0;                          // carry-in of 0

        // evaluating outputs at time 0
        $display("Inputs a = %b, b = %b, cin = %b", a, b, cin);
        #5 $display("Outputs sum = %b, cout = %b", sum, cout);

        // changing inputs and evaluating outputs again
        a = 4'b1111;                         // first input of 15
        b = 4'b0110;                         // second input of 6
        cin = 1'b1;                          // carry-in of 1

        // evaluating outputs at time 5
        $display("Inputs a = %b, b = %b, cin = %b", a, b, cin);
        #5 $display("Outputs sum = %b, cout = %b", sum, cout);

        // adding more test cases as desired

        $ finish;                            // terminating simulation
    end
endmodule