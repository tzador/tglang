/* This is a module named "adder" that takes in two 4-bit inputs and outputs the sum */
module adder(input [3:0] A, input [3:0] B, output reg [4:0] sum); // Declaring inputs and output
    always @ (A, B) begin // Always block with sensitivity list for inputs A and B
        case ({A, B}) // Combining inputs A and B into one vector to perform case analysis
            8'b00000001: sum = 2'b01; // If both inputs are 0000, output will be 01
            8'b00000010: sum = 2'b01;
            8'b00000011: sum = 2'b10; // If both inputs are 0001, output will be 10
            8'b00000100: sum = 2'b01;
            8'b00000101: sum = 2'b10;
            8'b00000110: sum = 2'b11; // If both inputs are 0010, output will be 11
            8'b00001000: sum = 2'b01;
            8'b00001001: sum = 2'b10;
            8'b00001010: sum = 2'b11; // If both inputs are 0100, output will be 11
            8'b00010000: sum = 2'b01;
            8'b00010001: sum = 2'b10;
            8'b00010010: sum = 2'b11; // If both inputs are 1000, output will be 11
            8'b00100000: sum = 3'b001; // If input A is 0100 and input B is 0001, output will be 001
            8'b01000000: sum = 3'b010; // If input A is 1000 and input B is 0001, output will be 010
            8'b10000000: sum = 3'b011; // If input A is 1000 and input B is 0010, output will be 110
            default: sum = 5'b00000; // Default case if none of the above conditions are met, output will be 00000
    end
endmodule