module ALU(input [7:0] A, B,
           input [2:0] sel,
           output [7:0] result,
           output [3:0] flags);

   reg [7:0] result;
   wire [3:0] flags;
   always @(A, B, sel) // sensitive to changes in input A, B, and sel
   begin
     case(sel)
      // ALU operation cases
      3'b000: result = A + B; // sel = 0 -> addition
      3'b001: result = A - B; // sel = 1 -> subtraction
      3'b010: result = A & B; // sel = 2 -> bitwise AND
      3'b011: result = A | B; // sel = 3 -> bitwise OR
      3'b100: result = A ^ B; // sel = 4 -> bitwise XOR
      3'b101: result = A >> 1; // sel = 5 -> shift A right by 1 bit
      3'b110: result = A << 1; // sel = 6 -> shift A left by 1 bit
      3'b111: result = A ^ B ^ 8'b00000001; // sel = 7 -> bitwise XOR with 8-bit constant
      default: result = 0; // no operation selected, output 0
    endcase
    
    // flags generation
    if(result == 0)
      flags[0] = 1; // zero flag
    else
      flags[0] = 0;
    
    if(result[7] == 1)
      flags[1] = 1; // sign flag
    else
      flags[1] = 0;
      
    if(A < B)
      flags[2] = 1; // carry flag
    else
      flags[2] = 0;
      
    if(result[6:0] == 0)
      flags[3] = 1; // parity flag
    else
      flags[3] = 0;
      
  end
  
endmodule

// Usage example:
// ALU A1(A, B, sel, result, flags); // create instance A1 of ALU module
// assign C = result; // assign output result to a wire named C
// assign PF = flags[3]; // assign output parity flag to a wire named PF