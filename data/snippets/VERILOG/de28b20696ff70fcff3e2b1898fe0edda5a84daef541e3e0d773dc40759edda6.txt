//This module defines a 4-bit ripple carry adder
module ripple_carry_adder(input [3:0] A, B, //4-bit inputs A and B
                          input Cin, //carry-in
                          output [3:0] S, //4-bit sum
                          output Cout); //carry-out

  wire [4:0] temp_sum; //create a temporary wire for the sum
  assign temp_sum = A + B + Cin; //calculate the sum

  assign Cout = temp_sum[4]; //assign the carry-out as the MSB of the sum

  assign S = temp_sum[3:0]; //assign the lower 4 bits of the sum as the output

endmodule //end of module

//testbench to simulate the ripple carry adder module
module testbench;

reg [3:0] A, B; //register inputs A and B
reg Cin; //register input for carry-in
wire [3:0] S; //wire for sum
wire Cout; //wire for carry-out

ripple_carry_adder UUT(.A(A), .B(B), .Cin(Cin), .S(S), .Cout(Cout)); //instantiate the ripple carry adder module

//input and output values for testing
initial begin
  A = 4'b0101; //input A = 5
  B = 4'b0010; //input B = 2
  Cin = 1'b0; //carry-in = 0
  #5; //wait for 5 time units
  $display("Sum = %b", S); //display the output sum in binary format
  $display("Cout = %b", Cout); //display the carry-out bit
end

endmodule //end of testbench