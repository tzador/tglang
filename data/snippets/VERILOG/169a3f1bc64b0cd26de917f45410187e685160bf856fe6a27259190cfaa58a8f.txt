//An 8-bit binary adder with carry in and carry out
module adder8bit(input [7:0] A, B, //8-bit inputs
                input cin,            //carry in
                output [7:0] sum,     //8-bit sum output
                output cout);         //carry out

    reg [8:0] temp; //temporarily holds sum and carry out
    
    //a full adder for LSB (Least Significant Bit)
    fulladder fa0(A[0], B[0], cin, temp[0], temp[1]);
    
    //a series of full adders for remaining bits, cascading the carry out of previous bit to carry in of next bit
    fulladder fa1(A[1], B[1], temp[1], temp[2], temp[3]);
    fulladder fa2(A[2], B[2], temp[3], temp[4], temp[5]);
    fulladder fa3(A[3], B[3], temp[5], temp[6], temp[7]);
    fulladder fa4(A[4], B[4], temp[7], temp[8], temp[9]);
    fulladder fa5(A[5], B[5], temp[9], temp[10], temp[11]);
    fulladder fa6(A[6], B[6], temp[11], temp[12], temp[13]);
    fulladder fa7(A[7], B[7], temp[13], temp[14], temp[15]);
    
    //assigning the sum output to the first 8 bits of the temp sum, and assigning the carry output to the 9th bit
    assign sum = temp[7:0];
    assign cout = temp[8];
endmodule

//full adder module
module fulladder(input a, b, cin, output sum, cout);
    reg s, c; //registers for sum and carry
    
    //XOR gate for sum output
    xor x1(s, a, b);
    
    //AND gate for carry output
    and a1(c, a, b);
    
    //XOR gate to combine previous carry and input carry
    xor x2(c, c, cin);
    
    //assigning outputs
    assign sum = s;
    assign cout = c;
endmodule