/* This is a module declaration */
module alu (input [7:0] inputA, input [7:0] inputB, input [2:0] opcode, output [7:0] output);

/* Declare internal wires and register */
wire [7:0] tempOutput;
wire [3:0] tempResult;

/* Perform arithmetic operations based on opcode */
always @ (*) begin
    case (opcode)
        3'b000: tempResult = inputA + inputB; //Addition
        3'b001: tempResult = inputA - inputB; //Subtraction
        3'b010: tempResult = inputA * inputB; //Multiplication
        3'b011: tempResult = inputA / inputB; //Division
        3'b100: tempResult = inputA & inputB; //AND operation
        3'b101: tempResult = inputA | inputB; //OR operation
        3'b110: tempResult = inputA ^ inputB; //XOR operation
        3'b111: tempResult = ~inputA; //Complement
    endcase
end

/* Register to output the result */
always @ (posedge clock) begin
    tempOutput <= tempResult;
end

/* Assign output to be the final result */
assign output = tempOutput;

endmodule