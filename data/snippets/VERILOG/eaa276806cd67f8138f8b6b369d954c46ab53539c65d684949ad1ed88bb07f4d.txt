// This is a complex verilog code snippet for a 4-bit register with synchronous reset and enable

// Creating the module
module register_4bit (
input [3:0] dataIn, // input data
input load, // input to control when to load data
input clk, // input clock signal
input reset, // input to reset the register
output reg [3:0] dataOut // output of the register
);

// Assigning the initial values for the register
reg [3:0] reg_data = 4'b0000; // 4-bit register with initial value of 0000

// Creating a synchronous always block to store data on rising edge of clock
always @(posedge clk) begin
    if (reset == 1) // checking if reset signal is high
        reg_data <= 4'b0000; // resetting the register to 0000
    else if (load == 1) // checking if load signal is high
        reg_data <= dataIn; // loading the input data to the register
end

// Assigning the output of the register
assign dataOut = reg_data;

endmodule // end of module

// Testbench for the register module
module testbench;

// Creating the clock signal
reg clk = 0; // creating a 1-bit register for clock signal
always #5 clk = ~clk; // toggling the clock signal every 5 units of time

// Creating the inputs and outputs for the register module
reg [3:0] dataIn; // input data
reg load; // input to control when to load data
reg reset; // input to reset the register
wire [3:0] dataOut; // output of the register

// Instantiating the register module
register_4bit register_4bit_inst (
.dataIn(dataIn),
.load(load),
.clk(clk),
.reset(reset),
.dataOut(dataOut)
);

// Assigning values to the inputs
initial begin
    dataIn = 4'b1010; // input data of 1010
    load = 0; // load signal initially low
    reset = 0; // reset signal initially low
    #10 load = 1; // load signal high after 10 units of time
    #10 reset = 1; // reset signal high after 10 units of time
end

// Monitoring the outputs in the simulation
initial begin
    $monitor("DataIn = %b, DataOut = %b", dataIn, dataOut);
end

endmodule // end of testbench