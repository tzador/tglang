// Create a 32-bit two's complement counter with asynchronous reset and enable
module counter32 (
    input wire clk,       // Clock input
    input wire rst,       // Asynchronous reset input
    input wire en,        // Enable input
    output reg [31:0] out // 32-bit output
);
    
    // Create a parameter for the maximum count value
    // In this case, it will be 2^32 - 1 or 4294967295
    parameter MAX_COUNT = 32'hFFFFFFFF;
    
    // Create a 32-bit internal register to store the count value
    reg [31:0] count;
    
    // Create a synchronous always block that increments the count on positive edge of the clock
    always @(posedge clk) begin
        // If the enable input is high, increment the count by 1
        if (en) begin
            // Check if the current count value is equal to the maximum count value
            if (count == MAX_COUNT) begin
                // If equal, reset the count to 0
                count <= 32'h0;
            end
            // If not equal, increment the count by 1
            else begin
                count <= count + 1;
            end
        end
    end
    
    // Create an asynchronous always block that resets the count to 0 on high level of the reset input
    always @(rst) begin
        // If the reset input is high, reset the count to 0
        if (rst) begin
            count <= 32'h0;
        end
    end
    
    // Assign the output to the count register
    assign out = count;
endmodule