// This code implements an 8-bit ripple carry adder using Verilog
module RippleCarryAdder(
  input [7:0] A, // first input operand, 8 bits wide
  input [7:0] B, // second input operand, 8 bits wide
  input Cin, // carry-in bit
  output [7:0] S, // sum output, 8 bits wide
  output Cout // carry-out bit
);

// instantiate 8 full-adder modules
// 'genvar' allows for a variable number of instantiations
// 'i' is the index variable
genvar i;
generate
  for (i = 0; i < 8; i = i + 1) begin: full_adder_inst
    // instantiate full adder module
    full_adder FA(
      .A(A[i]), // first input bit, index 'i' of operand A
      .B(B[i]), // second input bit, index 'i' of operand B
      .Cin(Cin), // carry-in bit, same for all full adders
      .S(S[i]), // sum output bit, index 'i'
      .Cout(C[i+1]) // carry-out bit, index 'i+1'
    );
  end
endgenerate

// assign carry-out bit of last full adder to Cout output
assign Cout = C[8];

endmodule

module full_adder(
  input A, // first input bit
  input B, // second input bit
  input Cin, // carry-in bit
  output S, // sum output bit
  output Cout // carry-out bit
);

// generate sum and carry-out bits
assign S = A ^ B ^ Cin; // XOR operation
assign Cout = (A & B) | (A & Cin) | (B & Cin); // OR operation

endmodule