`timescale 1ns / 1ps

module adder #(
        parameter WIDTH = 8)
    (input [WIDTH-1:0] a, b,
    output [WIDTH:0] sum);

    // instantiate adder submodules
    genvar i;
    generate
        for (i = 0; i < WIDTH; i=i+1) begin : add_gen
            full_adder fa(
                .a(a[i]),
                .b(b[i]),
                .c_in(sum[i]),
                .sum(sum[i+1])
            );
        end
    endgenerate

    // assign carry out bit
    assign sum[WIDTH] = sum[WIDTH-1] ^ sum[WIDTH-2];

endmodule

module full_adder (
        input a,
        input b,
        input c_in,
        output c_out,
        output sum
);

    // define internal signals
    wire p, g;

    // calculate sum
    assign sum = a ^ b ^ c_in;

    // calculate carry out bit
    assign p = a | b;
    assign g = a & b;
    assign c_out = p & c_in | g;

endmodule