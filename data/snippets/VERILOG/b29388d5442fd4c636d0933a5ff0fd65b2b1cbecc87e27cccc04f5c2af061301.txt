// This is a multi-line comment in Verilog

// Defining a 4-bit adder module
module adder (
    input [3:0] a, b, // 4-bit input signals
    output [3:0] sum, // 4-bit output signal
    output carry // Output carry bit
    );
    
    // Internal signals for each bit of the sum
    wire [3:0] add_out;
    // Internal carry signals for each bit
    wire c1, c2, c3;
    
    // Defining the 4-bit full adders
    FullAdder fa1(a[0], b[0], 0, add_out[0], c1);
    FullAdder fa2(a[1], b[1], c1, add_out[1], c2);
    FullAdder fa3(a[2], b[2], c2, add_out[2], c3);
    FullAdder fa4(a[3], b[3], c3, add_out[3], carry);
    
    // Assigning the sum output
    assign sum = add_out;
    
endmodule

// Defining the full adder module
module FullAdder (
    input a, b, cin, // Input signals
    output sum, cout // Output signals
    );
    
    // Internal signals for each bit
    wire s, c1, c2;
    
    // Defining the equations
    xor(xor(s, a, b), cin);
    and(c1, a, b);
    and(c2, xor(a, b), cin);
    
    // Assigning the outputs
    assign sum = s;
    assign cout = or(c1, c2);
    
endmodule

// Instantiating the adder module
adder a1(
    .a(input1), // First input
    .b(input2), // Second input
    .sum(output_sum), // Output sum
    .carry(output_carry) // Output carry bit
);