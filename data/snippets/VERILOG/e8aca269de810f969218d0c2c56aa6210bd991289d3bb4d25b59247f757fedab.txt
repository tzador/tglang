// define a module with input, output, and internal signals
module counter(input clk, input reset, output reg [3:0] count, output reg enable, reg [3:0] internalSig1, reg [3:0] internalSig2);

// declare a clocked always block to handle sequential logic
always@(posedge clk) begin
    // if reset is active (high), reset the counter to 0
    if(reset == 1) begin
        count <= 0;
    end
    // if enable is active and internal signals are not equal, increment the counter by 1
    else if(enable == 1 && internalSig1 != internalSig2) begin
        count <= count + 1;
    end
end

// instantiate a combinational always block to handle combinational logic
always@(internalSig1, internalSig2) begin
    // if internal signals are equal, set enable to 1
    if(internalSig1 == internalSig2) begin
        enable = 1;
    end
    // otherwise, set enable to 0
    else begin
        enable = 0;
    end
end

endmodule