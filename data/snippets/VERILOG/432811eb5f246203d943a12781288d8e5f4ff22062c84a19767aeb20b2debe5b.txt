/* This module represents a 4-bit ripple-carry adder with carry-in and carry-out */

module ripple_carry_adder(
  input [3:0] A, // 4-bit input A
  input [3:0] B, // 4-bit input B
  input C_in, // carry-in input
  output [3:0] S, // 4-bit sum output
  output C_out // carry-out output
  );

  wire [3:0] carry; // wire for internal carry signals

  /* Define half-adder module for single bit addition */
  module half_adder(
    input a,
    input b,
    output s,
    output c
    );

    assign s = a ^ b; // output sum
    assign c = a & b; // output carry

  endmodule // end half-adder module

  /* Define full-adder module for two-bit addition */
  module full_adder(
    input a,
    input b,
    input c,
    output s,
    output cout
    );

    wire s1, s2, c1, c2; // wires for intermediate signals

    /* Construct two half-adders to generate sum and carry */
    half_adder ha1(a, b, s1, c1);
    half_adder ha2(s1, c, s2, c2);

    assign s = s2; // final sum output
    assign cout = c1 | c2; // final carry output

  endmodule // end full-adder module

  /* Define 4-bit adder */
  genvar i; // generate loop variable
  generate
    for(i=0;i<4;i=i+1) begin // for loop to instantiate four full-adders

      /* Construct full-adder for each bit */
      full_adder fa(
        A[i], // input bit from A
        B[i], // input bit from B
        carry[i], // carry input from previous stage
        S[i], // output bit for sum
        carry[i+1] // carry output for next stage
        );

    end // end for loop
  endgenerate // end generate block

  assign C_out = carry[3]; // final carry-out is the carry from the last stage

endmodule // end ripple_carry_adder module