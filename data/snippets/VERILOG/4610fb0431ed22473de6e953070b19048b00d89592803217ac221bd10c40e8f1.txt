//This module represents a N-bit ripple carry adder, with carry in and carry out ports.

module ripple_carry_adder #(parameter N = 8) (input [N-1:0] A, B, //N-bit inputs
                                        input C_in, //carry in
                                        output [N-1:0] S, //N-bit sum output
                                        output C_out); //carry out

    assign S = A + B + C_in; //sum is calculated by adding A, B, and carry in
    
    //define a bit wide vector to store the carry_out values at each bit position
    reg [N:0] carry_out_bits; 
    
    always @* begin
        carry_out_bits[0] = 0; //initialize the first bit to 0
        for (int i = 0; i < N; i = i + 1) begin
              if (i == 0) begin //for the first bit, carry_out is simply C_in
                  carry_out_bits[i+1] = C_in; 
              end else begin //for the rest of the bits, calculate carry_out based on the input values
                  carry_out_bits[i+1] = (A[i] & B[i]) | (A[i] & carry_out_bits[i]) | (B[i] & carry_out_bits[i]);
              end
        end
    end
    
    assign C_out = carry_out_bits[N]; //C_out is the last value in the carry_out_bits vector
    
endmodule