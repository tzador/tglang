/* Define module */
module FSM(
  input clk,
  input in1,
  input in2,
  input reset,
  output reg out
);

/* Define states as an enum */
typedef enum integer logic[1:0] {
  S0,
  S1,
  S2
} states;

/* Define local variables */
logic[1:0] curr_state, next_state;
reg temp;

/* Define state and output registers */
always@(posedge clk or posedge reset) begin
  /* Reset values */
  if(reset) begin
    curr_state <= S0;
    next_state <= S0;
  end
  /* State transition logic */
  else begin
    curr_state <= next_state;
    case (curr_state)
      S0: if(in1 && in2) next_state <= S1;
          else next_state <= S0;
      S1: if(in1 && !in2) begin
            temp <= 1'b1;
            next_state <= S2;
          end
          else next_state <= S1;
      S2: if(temp) begin
            temp <= 1'b0;
            next_state <= S0;
          end
          else next_state <= S2;
    endcase
  end
end

/* Define output logic */
always@(curr_state) begin
  case (curr_state)
    S0: out <= 1'b0;
    S1: out <= 1'b1;
    S2: out <= temp;
  endcase
end

endmodule