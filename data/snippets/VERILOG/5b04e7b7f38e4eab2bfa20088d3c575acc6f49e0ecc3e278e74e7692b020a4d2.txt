// Defining input signals
input clk, rst, data_in;

// Declaring output signals
output reg [15:0] data_out;
output reg [15:0] counter;

// Defining internal wires
wire [15:0] temp_data;
wire [15:0] temp_counter;

// Reset condition
always @(posedge rst) begin
    data_out <= 0;
    counter <= 0;
end

// Main logic
always @(posedge clk) begin
    // Data and counter increment condition
    if (data_in == 1'b1) begin
        temp_data <= data_out + 1;
        temp_counter <= counter + 1;
    end
    // Data and counter decrement condition
    else if (data_in == 1'b0) begin
        temp_data <= data_out - 1;
        temp_counter <= counter - 1;
    end
    // Default condition
    else begin
        temp_data <= data_out;
        temp_counter <= counter;
    end
end

// Assigning values to output signals
always @* begin
    data_out <= temp_data;
    counter <= temp_counter;
end