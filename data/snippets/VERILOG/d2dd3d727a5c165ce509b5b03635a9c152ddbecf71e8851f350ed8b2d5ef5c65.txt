module adder (
    input[7:0] A, // 8 bit input A
    input[7:0] B, // 8 bit input B
    output[8:0] S, // 9 bit output S, allows for overflow bit
    
    input clk,
    input rst,
    
    output carry_out,
    output overflow
    );
    
    wire [8:0] sum; // temporary 9 bit wire to store sum
    wire carry_in; // wire to store carry in value
    
    assign overflow = S[8]; // set overflow bit to MSB of sum
    assign carry_out = sum[8]; // set carry out bit to MSB of sum
    
    // instantiate full adder module for each bit
    fullAdder FA0 (.A(A[0]), .B(B[0]), .C(carry_in), .S(sum[0]), .C(carry_in));
    fullAdder FA1 (.A(A[1]), .B(B[1]), .C(carry_in), .S(sum[1]), .C(carry_in));
    fullAdder FA2 (.A(A[2]), .B(B[2]), .C(carry_in), .S(sum[2]), .C(carry_in));
    fullAdder FA3 (.A(A[3]), .B(B[3]), .C(carry_in), .S(sum[3]), .C(carry_in));
    fullAdder FA4 (.A(A[4]), .B(B[4]), .C(carry_in), .S(sum[4]), .C(carry_in));
    fullAdder FA5 (.A(A[5]), .B(B[5]), .C(carry_in), .S(sum[5]), .C(carry_in));
    fullAdder FA6 (.A(A[6]), .B(B[6]), .C(carry_in), .S(sum[6]), .C(carry_in));
    fullAdder FA7 (.A(A[7]), .B(B[7]), .C(carry_in), .S(sum[7]), .C(carry_in));
    
    // instantiate XOR gates to check for overflow
    xor xor1 (.A(sum[8]), .B(sum[7]), .Y(overflow));
    xor xor2 (.A(sum[8]), .B(sum[6]), .Y(overflow));
    xor xor3 (.A(sum[8]), .B(sum[5]), .Y(overflow));
    xor xor4 (.A(sum[8]), .B(sum[4]), .Y(overflow));
    xor xor5 (.A(sum[8]), .B(sum[3]), .Y(overflow));
    xor xor6 (.A(sum[8]), .B(sum[2]), .Y(overflow));
    xor xor7 (.A(sum[8]), .B(sum[1]), .Y(overflow));
    xor xor8 (.A(sum[8]), .B(sum[0]), .Y(overflow));
    
    // instantiate D flip-flops for synchronous operation
    always @(posedge clk, posedge rst) begin
        if (rst) begin // if reset is asserted
            S <= 0; // output S is cleared
            carry_in <= 0; // carry in is cleared
        end
        else begin // if reset is not asserted on positive edge of clk
            S <= sum; // output S is set to sum
            carry_in <= carry_out; // carry in is set to carry out
        end
    end
    
endmodule