// Defining a reusable paramter, a 4-bit register
`define DATA_WIDTH 4 

// Creating a module with inputs and outputs
module register (clk, rst, en, din, dout);

// Defining inputs and outputs
input clk; // clock signal
input rst; // reset signal
input en; // enable signal
input [DATA_WIDTH-1:0] din; // 4-bit data input
output [DATA_WIDTH-1:0] dout; // 4-bit data output

// Creating a 4-bit register
reg [DATA_WIDTH-1:0] register;

// Sensitivity list for always block
always@(posedge clk or negedge rst) begin
    // Reset condition
    if(~rst) begin
        register <= {DATA_WIDTH{1'b0}}; // When rst is low, set register to 4'b0000
    end
    // Enable condition
    else if(en) begin
        register <= register + din; // When en is high, add din to register
    end
end

// Assigning output
assign dout = register; // Output is connected to register

endmodule // End of module