// This code snippet represents a hierarchical description of a 3-bit multiplier

module multiplier(
    input [2:0] a, // input first number in 3-bit binary form
    input [2:0] b, // input second number in 3-bit binary form
    output reg [5:0] result // output the result in 6-bit binary form
);

reg [2:0] temp; // temporary register to hold intermediate results
wire [2:0] a_shifted; // wire to store shifted value of a
wire [2:0] b_shifted; // wire to store shifted value of b

always@(a or b) begin // combinational block
    a_shifted = {a, 3'b000}; // shift a by 3 bits and store in wire
    b_shifted = {3'b000, b}; // shift b by 3 bits and store in wire
    temp = a_shifted * b_shifted; // perform multiplication of shifted values and store in temporary register
end

always@(temp) begin // sequential block
    result[5] = temp[8]; // add most significant bit of temp to result
    result[4] = temp[7]; // add second-most significant bit of temp to result
    result[3] = temp[6]; // add third-most significant bit of temp to result
    result[2] = temp[5]; // add fourth-most significant bit of temp to result
    result[1] = temp[4]; // add fifth-most significant bit of temp to result
    result[0] = temp[3]; // add least significant bit of temp to result
end

endmodule