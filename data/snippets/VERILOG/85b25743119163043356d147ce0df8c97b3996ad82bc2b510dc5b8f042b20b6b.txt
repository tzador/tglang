/* This code snippet is a module that implements a binary multiplier using four 1-bit adders.
It takes two 4-bit numbers as inputs (a and b) and outputs a 8-bit product. */

module binary_multiplier(a, b, product);

// Define inputs and outputs
input [3:0] a; // a is a 4-bit number
input [3:0] b; // b is a 4-bit number
output [7:0] product; // product is an 8-bit number

// Define internal wire and register
wire [3:0] temp_product; // wire used to store intermediate results
reg [7:0] final_product; // register used to store final result

// Instantiate four 1-bit adders
adder #(.BITS(4)) adder1(.a(a[0]), .b(b[0]), .cin(1'b0), .cout(temp_product[0]), .sum(temp_product[0]), .overflow()); // sum of first 4-bit numbers
adder #(.BITS(4)) adder2(.a(a[1]), .b(b[1]), .cin(temp_product[0]), .cout(temp_product[1]), .sum(temp_product[1]), .overflow()); // sum of second 4-bit numbers
adder #(.BITS(4)) adder3(.a(a[2]), .b(b[2]), .cin(temp_product[1]), .cout(temp_product[2]), .sum(temp_product[2]), .overflow()); // sum of third 4-bit numbers
adder #(.BITS(4)) adder4(.a(a[3]), .b(b[3]), .cin(temp_product[2]), .cout(temp_product[3]), .sum(temp_product[3]), .overflow()); // sum of fourth 4-bit numbers

// Assign the final product to the output port
assign product = {temp_product, final_product};

// Always block to update the final product register
always @ (temp_product) begin
    final_product <= temp_product;
end

// Initial block to give the register an initial value of 0
initial begin
    final_product = 8'b0;
end

endmodule