// Example Verilog code for a 4-bit counter

`timescale 1ns/1ps // set time scale to 1 nanosecond / 1 picosecond

module counter (input clk, input rst, output reg [3:0] count); // declare module and ports, with a 4-bit output reg

always @(posedge clk) begin // always block triggered by positive edge of clock
    if (rst) begin // if reset is asserted
        count <= 4'b0000; // reset the count to 0
    end
    else begin // if reset is not asserted
        case (count) // use a case statement to determine next count value
            4'b0000: count <= 4'b0001; // if count is 0, increment to 1
            4'b0001: count <= 4'b0010; // if count is 1, increment to 2
            4'b0010: count <= 4'b0011; // if count is 2, increment to 3
            4'b0011: count <= 4'b0100; // if count is 3, increment to 4
            4'b0100: count <= 4'b0000; // if count is 4, reset to 0
            default: count <= 4'bXXXX; // if count is not any of the above, set to unknown value
        endcase
    end
end

endmodule // end module