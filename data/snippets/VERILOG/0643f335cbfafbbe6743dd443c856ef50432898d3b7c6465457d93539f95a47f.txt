// Initializing a RAM with read and write functionality
module RAM #(PARAMETER WIDTH = 8, ADDR_WIDTH = 4) (
    input clk, // clock signal
    input rst, // reset signal
    input [ADDR_WIDTH-1:0] addr, // address input for read/write
    input wr_en, // write enable signal
    input [WIDTH-1:0] wr_data, // write data input
    output [WIDTH-1:0] rd_data // read data output
    );

    // Defining internal memories
    reg [WIDTH-1:0] mem [2**ADDR_WIDTH-1:0];
    reg [WIDTH-1:0] rd_buffer; // internal buffer for read operation
    
    // Clocked always block for read and write operations
    always @ (posedge clk) begin
        // Reset operation
        if (rst) begin
            // Assign all memory locations to 0
            for (integer i=0; i<2**ADDR_WIDTH; i=i+1) begin
                mem[i] = 0;
            end
        end
        // Write operation
        else if (wr_en) begin
            // Write data to specified address
            mem[addr] = wr_data;
        end
        // Read operation
        else begin
            // Read data from specified address
            rd_buffer = mem[addr];
        end
    end
    
    // Assigning read data output from internal buffer
    assign rd_data = rd_buffer;
            
endmodule