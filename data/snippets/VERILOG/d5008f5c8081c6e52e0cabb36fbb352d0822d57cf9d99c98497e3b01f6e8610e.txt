// This code snippet is written in VERILOG
module datapath(input clk,
               input rst,
               input [7:0] in1,
               input [7:0] in2,
               input [7:0] in3,
               output [7:0] out1,
               output [7:0] out2,
               output [7:0] out3);

    parameter SIZE = 8; // defining a parameter for vector size

    reg [SIZE-1:0] temp1, temp2; // defining registers to store intermediate values

    // always block to perform arithmetic operations on inputs
    always @ (posedge clk, posedge rst) begin
        if (rst) begin
            temp1 <= 0;
            temp2 <= 0;
        end
        else begin
            temp1 <= in1 + in2;
            temp2 <= in1 - in3;
        end
    end

    assign out1 = temp1; // assigning intermediate values to output ports
    assign out2 = temp2;
    assign out3 = in1 & in2; // performing bitwise AND on inputs
    
endmodule

// Example test bench for datapath module
module datapath_tb;
    
    // declaring inputs and outputs
    reg clk, rst;
    reg [7:0] in1, in2, in3;
    wire [7:0] out1, out2, out3;

    // instantiating datapath module
    datapath DUT(
        .clk(clk),
        .rst(rst),
        .in1(in1),
        .in2(in2),
        .in3(in3),
        .out1(out1),
        .out2(out2),
        .out3(out3)
    );

    // clock generator
    always #5 clk = ~clk;

    // test vectors for inputs
    initial begin
        in1 = 8'b01101010;
        in2 = 8'b00000101;
        in3 = 8'b11100110;

        // initializing reset and running for 10 clock cycles
        rst = 1;
        #10 rst = 0;

        // printing outputs after each clock cycle
        repeat (10) begin
            #5;
            $display("Out1: %b, Out2: %b, Out3: %b", out1, out2, out3);
        end
        $finish;
    end
endmodule