/*
 * This is a verilog code snippet that implements a 4-bit ALU
 * with addition, subtraction, and bitwise AND operations.
 * It takes inputs A, B, and C as 4-bit binary numbers, where C is the operation selector.
 * The ALU output is a 4-bit binary number.
 */

module ALU(A, B, C, ALU_OUT);

input [3:0] A; //4-bit input A
input [3:0] B; //4-bit input B
input [1:0] C; //2-bit operation selector
output [3:0] ALU_OUT; //4-bit output

reg [3:0] ALU_TEMP; //temp variable for ALU output

always @ (A, B, C) begin
	case(C)
		2'b00: ALU_TEMP = A + B; //addition operation
		2'b01: ALU_TEMP = A - B; //subtraction operation
		2'b10: ALU_TEMP = A & B; //bitwise AND operation
		2'b11: ALU_TEMP = ~A; //bitwise NOT operation
	endcase
end

assign ALU_OUT = ALU_TEMP; //assign ALU output to temp variable

endmodule