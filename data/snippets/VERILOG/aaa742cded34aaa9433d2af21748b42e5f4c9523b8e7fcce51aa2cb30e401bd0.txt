# Define a module named "ALU" that takes in three inputs: A, B, and Sel

module ALU (A, B, Sel);
input [7:0] A, B;
input [2:0] Sel;

# Define internal wires for each bitwise operation

wire [7:0] AND, OR, XOR, ADD, SUB, SLT, SLL, SRL, SRA;

# Instantiate the AND gate and assign it to the AND wire

AND #(8) and_gate (A, B, AND);

# Instantiate the OR gate and assign it to the OR wire

OR #(8) or_gate (A, B, OR);

# Instantiate the XOR gate and assign it to the XOR wire

XOR #(8) xor_gate (A, B, XOR);

# Instantiate the full adder and assign it to the ADD wire

FullAdder #(8) adder (A, B, 1'b0, ADD);

# Instantiate the subtractor and assign it to the SUB wire

Subtractor #(8) subtractor (A, B, SUB);

# Instantiate the comparator and assign it to the SLT wire

Comparator #(8) comparator (A, B, SLT);

# Instantiate the left shift logical and assign it to the SLL wire

Shifter #(8) lshift (A, Sel, SLL);

# Instantiate the right shift logical and assign it to the SRL wire

Shifter #(8) rshift (A, Sel, SRL);

# Instantiate the right shift arithmetic and assign it to the SRA wire

Shifter #(8) arshift (A, Sel, SRA);

# Define internal output wires for each operation and assign them to the proper gates
wire [7:0] out_and, out_or, out_xor, out_add, out_sub, out_slt, out_sll, out_srl, out_sra;
assign out_and = AND;
assign out_or = OR;
assign out_xor = XOR;
assign out_add = ADD;
assign out_sub = SUB;
assign out_slt = SLT;
assign out_sll = SLL;
assign out_srl = SRL;
assign out_sra = SRA;

# Define output ports for each operation and connect them to the internal output wires
output [7:0] AND_out, OR_out, XOR_out, ADD_out, SUB_out, SLT_out, SLL_out, SRL_out, SRA_out;
assign AND_out = out_and;
assign OR_out = out_or;
assign XOR_out = out_xor;
assign ADD_out = out_add;
assign SUB_out = out_sub;
assign SLT_out = out_slt;
assign SLL_out = out_sll;
assign SRL_out = out_srl;
assign SRA_out = out_sra;

endmodule