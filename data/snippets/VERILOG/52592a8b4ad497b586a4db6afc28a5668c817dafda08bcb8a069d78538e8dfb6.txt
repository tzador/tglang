//Defining module for a 3-bit Ripple Carry Adder
module ripple_carry_adder(input [2:0] A, input [2:0] B, input cin, output reg [2:0] sum, output cout);

reg [3:0] temp; //Creating temporary register to store the sum of each bit
assign sum = temp[2:0]; //Assigning the last 3 bits of temp as output sum

always @ (A or B or cin) begin
	temp[0] = A[0] ^ B[0] ^ cin; //Calculating the sum of the first bit
	temp[1] = A[1] ^ B[1] ^ (A[0] & B[0]); //Calculating the sum of the second bit
	temp[2] = A[2] ^ B[2] ^ (A[1] & B[1]); //Calculating the sum of the third bit
	temp[3] = A[2] & B[2]; //Calculating the carry out

	if (A[2] & B[2] == 1'b1) begin //Checking for overflow
		cout = 1'b1; //Setting carry out to 1 if there is an overflow
	end
	else begin
		cout = temp[3]; //Setting carry out to the calculated carry
	end
end
endmodule //End of module