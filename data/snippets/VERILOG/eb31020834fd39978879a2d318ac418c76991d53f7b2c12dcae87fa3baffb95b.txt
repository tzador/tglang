// Example code snippet in VERILOG
module ALU (input [7:0] A, input [7:0] B, input [2:0] Op, output [7:0] Result);

// Declare internal signals
wire [7:0] A_inv, B_inv;
wire [7:0] A_and_B, A_or_B, A_xor_B, A_nand_B, A_nor_B, A_xnor_B;
wire [7:0] A_plus_B, A_minus_B, A_times_B, A_div_B, A_mod_B, A_pow_B;

// Define logic operations
assign A_inv = ~A;
assign A_and_B = A & B;
assign A_or_B = A | B;
assign A_xor_B = A ^ B;
assign A_nand_B = ~(A & B);
assign A_nor_B = ~(A | B);
assign A_xnor_B = ~(A ^ B);

// Define arithmetic operations
assign A_plus_B = A + B;
assign A_minus_B = A - B;
assign A_times_B = A * B;
assign A_div_B = A / B;
assign A_mod_B = A % B;
assign A_pow_B = A ** B;

// Case statement for selecting operation based on input Op
// 000 = bitwise NOT, 001 = AND, 010 = OR, 011 = XOR, 100 = NAND, 101 = NOR, 110 = XNOR, 111 = arithmetic operations 
always @(A or B or Op) begin
    case (Op)
        3'b000: Result = A_inv;
        3'b001: Result = A_and_B;
        3'b010: Result = A_or_B;
        3'b011: Result = A_xor_B;
        3'b100: Result = A_nand_B;
        3'b101: Result = A_nor_B;
        3'b110: Result = A_xnor_B;
        default: begin
            case (Op)
                3'b111: Result = A_plus_B;
                3'b110: Result = A_minus_B;
                3'b101: Result = A_times_B;
                3'b100: Result = A_div_B;
                3'b011: Result = A_mod_B;
                3'b010: Result = A_pow_B;
                default: Result = 8'h00;
            endcase
        end
    endcase
end
endmodule