/*******************************************************************************

This code snippet is a 4-bit adder module in Verilog, representing a basic building block of digital logic circuits.

`timescale 1ns / 1ps  // Defines the time unit and precision for the module

// Declare the module inputs and outputs
module four_bit_adder (
  input [3:0] A, B,       // Two 4-bit inputs
  input Cin,              // Carry-in bit
  output [3:0] S,         // 4-bit sum output
  output Cout             // Carry-out bit
);

// Create internal wires for storing intermediate values
wire [3:0] sum;           // Wires for sum of inputs
wire Cout;                // Wire for carry-out

// Bit wise addition of inputs A and B using a full adder module
// Assign the corresponding bits to the output sum wire and the carry-out wire
full_adder fa0(sum[0], Cout, A[0], B[0], Cin); 
full_adder fa1(sum[1], Cout, A[1], B[1], Cout);
full_adder fa2(sum[2], Cout, A[2], B[2], Cout);
full_adder fa3(sum[3], Cout, A[3], B[3], Cout);

// Assign the sum wire as the output for S and the carry-out wire as Cout
assign S = sum;
assign Cout = Cout;

endmodule

// Full adder module
// Performs bit wise addition of three inputs
module full_adder(S, Cout, A, B, Cin);
  input A, B, Cin;      // Three inputs
  output S, Cout;       // Output for sum and carry-out

  // Internal wire for storing intermediate values
  wire temp;            // Wire for temporary value

  // Perform addition using boolean logic
  // Assign the sum bit to S and the carry bit to Cout
  assign temp = ~(~A & ~B) & ~(A & B);
  assign S = (temp & ~Cin) | (A & B & Cin);
  assign Cout = temp | (A & B) | (A & Cin) | (B & Cin);
  
endmodule

/*******************************************************************************