// Creating a state machine with input, output, and internal register

module state_machine (clk, rst, in, out);
	input clk, rst;
	input in;
	output out;
	
	// Internal register to store previous state
	reg [2:0] state_reg;
	
	// Next state logic
	always @(posedge clk or negedge rst) begin
	   if (!rst) begin
	      state_reg <= 0; // Reset state to initial state
	   end else begin
	      case (state_reg) // State transition cases
	         3'b000: if (in) state_reg <= 3'b001; // Based on input, go to next state
	         3'b001: state_reg <= 3'b010;
	         3'b010: state_reg <= 3'b100;
	         3'b100: state_reg <= 3'b000;
	         default: state_reg <= 0; // If none of the above cases, reset state to initial state
	      endcase
	   end
	end
	
	// Output logic
	assign out = (state_reg == 3'b100); // Set output to 1 if in state 3
	
endmodule