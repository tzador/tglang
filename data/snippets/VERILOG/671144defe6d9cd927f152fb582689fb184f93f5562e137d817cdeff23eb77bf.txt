module alu(
  input wire [3:0] a,
  input wire [3:0] b,
  input wire [2:0] op,
  output reg [3:0] out,
  output wire zero,
  output reg overflow
);

  always @(*) begin
    case (op)
      0: out = a + b; // performs addition
      1: out = a - b; // performs subtraction
      2: out = a & b; // performs bitwise AND
      3: out = a | b; // performs bitwise OR
      4: out = a ^ b; // performs bitwise XOR
      5: out = a << b; // performs logical left shift
      6: out = a >> b; // performs logical right shift
      7: out = a >>> b; // performs arithmetic right shift
      default: out = 0; // default case, sets output to zero
    endcase
  end

  assign zero = (out == 0); // output is set to 1 if out equals 0

  always @(*) begin
    // checks for overflow in addition operation
    if (op == 0 && a[3] == b[3] && out[3] != a[3]) begin
      overflow = 1;
    end
    // checks for underflow in subtraction operation
    else if (op == 1 && a[3] != b[3] && out[3] != a[3]) begin
      overflow = 1;
    end
    else begin
      overflow = 0; // no overflow or underflow
    end
  end

endmodule