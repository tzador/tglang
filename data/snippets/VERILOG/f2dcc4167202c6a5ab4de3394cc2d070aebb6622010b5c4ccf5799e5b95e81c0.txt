/* This code snippet creates an 8-bit adder using 4 full adders */
module adder_8bit( input [7:0] a, input [7:0] b, output [8:0] sum );

    /* Declare internal signals for carry and sum bits */
    wire [7:0] carry;
    wire [7:0] sum_bits;

    /* Instantiate 4 full adders */
    full_adder fa1(a[0], b[0], 1'b0, sum_bits[0], carry[0]);
    full_adder fa2(a[1], b[1], carry[0], sum_bits[1], carry[1]);
    full_adder fa3(a[2], b[2], carry[1], sum_bits[2], carry[2]);
    full_adder fa4(a[3], b[3], carry[2], sum_bits[3], carry[3]);

    /* Declare internal wires */
    wire [8:0] temp_sum;
    wire [8:0] temp_carry;

    /* Assign outputs for each full adder */
    assign sum_bits[4:7] = temp_sum[4:7];
    assign carry[4:7] = temp_carry[4:7];

    /* Assign the final carry and sum bits */
    assign sum_bits[7] = temp_sum[7] ^ temp_carry[7];
    assign sum_bits[8] = temp_carry[8];

    /* Assign output */
    assign sum = sum_bits;

endmodule

/* Define full adder module */
module full_adder( input a, input b, input carry_in, output sum, output carry_out );

    /* Calculate sum bit */
    assign sum = a ^ b ^ carry_in;

    /* Calculate carry out bit */
    assign carry_out = (a & b) | (b & carry_in) | (a & carry_in);

endmodule