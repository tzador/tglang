module fsm (clock, resetn, input, output);
  input clock, resetn, input;
  output output;

  // FSM state definitions
  parameter LOW = 1'b0;
  parameter HIGH = 1'b1;

  reg current_state, next_state;

  // FSM states
  parameter IDLE = 2'b00;
  parameter LOADING = 2'b01;
  parameter PROCESSING = 2'b10;
  parameter TRANSFERING = 2'b11;

  // FSM state transition table
  always @ (posedge clock) begin
    if (!resetn) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state; 
    end
  end

  // FSM state outputs
  always @ (current_state or input) begin
    case (current_state)
      IDLE: output <= LOW;
      LOADING: output <= HIGH;
      PROCESSING: output <= input;
      TRANSFERING: output <= ~input;
    endcase
  end

  // FSM state logic
  always @ (posedge clock or negedge resetn) begin
    if (!resetn) begin
      next_state <= IDLE;
    end else begin
      case (current_state)
        IDLE: begin
          if (input) begin
            next_state <= LOADING;
          end else begin
            next_state <= IDLE;
          end
        end
        LOADING: next_state <= PROCESSING;
        PROCESSING: next_state <= TRANSFERING;
        TRANSFERING: next_state <= IDLE;
      endcase
    end
  end
endmodule