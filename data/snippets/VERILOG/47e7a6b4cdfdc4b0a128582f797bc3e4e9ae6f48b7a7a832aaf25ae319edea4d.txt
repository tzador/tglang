// Creating a 4-bit adder using behavioral modeling
module adder (
    input [3:0] A,
    input [3:0] B,
    input Cin,
    output [3:0] Sum,
    output Cout
    );

    assign Sum[0] = A[0] ^ B[0] ^ Cin; // Calculating sum for the LSB

    // Using a for loop for simplicity
    genvar i; // Defining a generate variable
    for (i = 1; i < 4; i=i+1) begin // Looping through bits 1 to 3
        assign Sum[i] = A[i] ^ B[i] ^ Sum[i-1];
    end

    // Calculating the carry out
    assign Cout = A[3] & B[3] | (Sum[2] & A[2]) | (Sum[2] & B[2]);

endmodule

// Testing the adder module with a testbench
module adder_tb;

    // Declaring inputs and outputs
    reg [3:0] A, B;
    reg Cin;
    wire [3:0] Sum;
    wire Cout;

    // Instantiating the adder module
    adder test_adder (
        .A(A),
        .B(B),
        .Cin(Cin),
        .Sum(Sum),
        .Cout(Cout)
    );

    // Initializing inputs
    initial begin
        A = 4'b0010; // Assigning 2 to A
        B = 4'b0101; // Assigning 5 to B
        Cin = 1'b0; // Assigning 0 to Cin
        #10; // Delay of 10 time units
        #10; // Another delay of 10 time units to observe output
        $finish; // Ending the simulation
    end

    // Displaying the inputs and outputs
    always @(A, B, Cin) begin
        $display("A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", A, B, Cin, Sum, Cout);
    end

endmodule