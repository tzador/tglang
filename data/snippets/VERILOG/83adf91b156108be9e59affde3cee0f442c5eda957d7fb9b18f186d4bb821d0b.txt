module multiplication(
  input logic signed [7:0] a, // Input a, a signed 8-bit number
  input logic signed [7:0] b, // Input b, a signed 8-bit number
  output logic signed [15:0] product // Output product, a signed 16-bit number
);

  logic signed [15:0] temp; // Declare temp, a signed 16-bit number to store intermediate results
  logic signed [23:0] multiplier; // Declare multiplier, a signed 24-bit number to hold b in 2's complement form
  logic signed [15:0] partial_prod; // Declare partial_prod, a signed 16-bit number to store partial products

  always @* begin // Begin always block
    multiplier = {8'b0, b}; // Convert b to 24-bit 2's complement form
    partial_prod = {8'b0, a}; // Convert a to 16-bit form
    temp = 16'b0; // Initialize temp to 16 bits of 0s

    for (int i = 0; i < 8; i++) begin // Begin for loop for 8 iterations
      if (multiplier[i] == 1) begin // Check if current bit of multiplier is 1
        temp = temp + partial_prod; // Add partial product to temp
      end
      partial_prod = partial_prod << 1; // Left shift partial_prod by 1 bit
    end // End for loop
  end // End always block

  assign product = temp; // Assign temp to product as final result
endmodule // End module