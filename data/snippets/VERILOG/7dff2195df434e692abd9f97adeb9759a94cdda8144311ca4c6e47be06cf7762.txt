module convolution (
    input signed [7:0] data_in,      // Input data
    input signed [7:0] kernel [2:0],  // Kernel coefficients
    output signed [15:0] data_out,    // Output data
    input clk,                        // Clock input
    input rst,                        // Reset input
);

reg signed [15:0] intermediate_sum1 [2:0];  // Intermediate sums for each kernel coefficient
wire signed [15:0] intermediate_sum2 [2:0];  // Intermediate sums multiplied by input data

// Synchronous reset
always @ (posedge clk) begin
    if (rst) begin
        intermediate_sum1 <= 16'd0;
    end else begin
        // Shift in new input data
        intermediate_sum1 <= {data_in, intermediate_sum1[2:1]};
    end
end

// Multiplication and accumulation
integer i, j;
always @ (intermediate_sum1) begin
    // Multiply intermediate sum by kernel coefficient
    for (i = 0; i < 3; i = i + 1) begin
        intermediate_sum2[i] = intermediate_sum1[i]*kernel[i];
    end
    
    // Accumulate intermediate sums to get output data
    data_out = intermediate_sum2[0] + intermediate_sum2[1] + intermediate_sum2[2];
end

endmodule