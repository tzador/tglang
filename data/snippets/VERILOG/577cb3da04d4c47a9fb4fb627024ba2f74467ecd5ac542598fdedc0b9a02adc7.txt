/* This code snippet is a 16-bit pipelined multiplier with carry save addition */
module EightBitMultiplier (A, B, Prod, Cout);
    input [7:0] A, B;
    output [15:0] Prod;
    output Cout;

    wire [7:0] B_0, B_1, B_2, B_3, B_4, B_5, B_6, B_7;
    /* Splitting the B input into 8 individual bits */
    assign {B_7, B_6, B_5, B_4, B_3, B_2, B_1, B_0} = B;

    wire [15:0] P0, P1, P2, P3, P4, P5, P6, P7;
    wire [15:0] G0, G1, G2, G3, G4, G5, G6, C1, C2, C3;
    /* P0 to P4 store the partial products and G0 to G6 store the carry bits */

    /* First set of partial products */
    assign P0 = A * B_0;
    assign {G1, G0} = P0[15:14];

    /* Second set of partial products */
    assign P1 = A * B_1;
    assign {G2, G3} = P1[15:14];

    /* Third set of partial products */
    assign P2 = A * B_2;
    assign {G3, G4} = P2[15:14];

    /* Fourth set of partial products */
    assign P3 = A * B_3;
    assign {G5, G6} = P3[15:14];

    /* Fifth set of partial products */
    assign P4 = A * B_4;

    /* Carry save addition of the partial products */
    assign P5 = {P0[13:0], G1, G0} + {P1[13:0], G3, G2};
    assign P6 = {P2[13:0], G4, G3} + {P3[13:0], G6, G5};
    assign P7 = P4 + {P5[13:0], 0, G1};

    /* Final addition to get the full product */
    assign Prod = P7 + {P6[12:0], 0, G4};

    /* Calculating the carry out */
    assign Cout = (C1|C2|C3);
endmodule