// This is a module named "complex_adder"
module complex_adder ( // defining module
input [7:0] a, // input signal of 8 bits 
input [7:0] b, // input signal of 8 bits
output [8:0] sum_c, // output signal of 9 bits
output [7:0] carryout // output signal to check for overflow
);

// Parameters declared for reusability
parameter ADDER_WIDTH = 8; // defines the width of our adder

// Generating internal signals
wire [8:0] sum_signal; // internal signal for sum
wire [7:0] carry; // internal signal for carry bit

// Instantiate adder modules
full_adder #(.WIDTH(ADDER_WIDTH)) FA1(.a(a[0]), .b(b[0]), .c(1'b0), .sum(sum_signal [0]), .carry(carry[0]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA2 (.a(a[1]), .b(b[1]), .c(carry[0]), .sum(sum_signal [1]), .carry(carry[1]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA3 (.a(a[2]), .b(b[2]), .c(carry[1]), .sum(sum_signal [2]), .carry(carry[2]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA4 (.a(a[3]), .b(b[3]), .c(carry[2]), .sum(sum_signal [3]), .carry(carry[3]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA5 (.a(a[4]), .b(b[4]), .c(carry[3]), .sum(sum_signal [4]), .carry(carry[4]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA6 (.a(a[5]), .b(b[5]), .c(carry[4]), .sum(sum_signal [5]), .carry(carry[5]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA7 (.a(a[6]), .b(b[6]), .c(carry[5]), .sum(sum_signal [6]), .carry(carry[6]));
full_adder #(.WIDTH(ADDER_WIDTH)) FA8 (.a(a[7]), .b(b[7]), .c(carry[6]), .sum(sum_signal [7]), .carry(carry[7]));

// Assigning outputs of full adders to sum_c
assign sum_c = {carry [7], sum_signal};

// Calculating carryout
assign carryout = carry[7];

endmodule // end of module complex_adder