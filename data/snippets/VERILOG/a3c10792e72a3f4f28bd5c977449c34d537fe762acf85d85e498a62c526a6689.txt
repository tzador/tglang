// This is a Verilog code snippet that implements a 4-bit ALU module

module ALU_4bit(
  input [3:0] A,
  input [3:0] B,
  input [1:0] op,
  output [3:0] out
);

// Declare internal signals for intermediate operations
// Carry, overflow and zero flags
wire [3:0] sum;
wire [3:0] carry;
wire [3:0] overflow;
wire [3:0] zero;

// Instantiate a full-adder module for each bit
genvar i;
generate
  for (i = 0; i < 4; i = i + 1) begin : instance
    full_adder_alt FA(.A(A[i]), .B(B[i]), .Cin(carry[i]), .S(sum[i]), .Cout(carry[i+1]));
  end
endgenerate

// Initialize flags to zero
assign overflow = 0;
assign zero = 0;

// Perform the specified operation based on the op input
always @(*) begin
  case (op)
    // Addition - sum is calculated by default
    2'b00: begin
      // Check for overflow
      if (carry[3] == 1) begin
        overflow = 1;
      end
    end
    // Subtraction - sum is inverted and 1 is added
    2'b01: begin
      sum = ~sum + 1;
    end
    // Bitwise AND operation
    2'b10: begin
      sum = A & B;
    end
    // Bitwise OR operation
    2'b11: begin
      sum = A | B;
    end
  endcase
end

// Set zero flag if sum is all zeros
// Note: zero flag will not be set for subtraction as sum will not be all zeros
assign zero = (sum == 0) ? 1'b1 : 1'b0;

// Output final result
assign out = sum;

endmodule