module multiply (A, B, Y);
// This module performs multiplication of two inputs and stores the result in the output
// A and B are 4-bit binary inputs, Y is a 8-bit binary output

input [3:0] A;
input [3:0] B;
output [7:0] Y;

reg [7:0]Y_temp; // temporary register to store intermediate values
reg [3:0] A_temp; // temporary register for shifting A
reg [7:0] product; // final result stored in this register

// Logic for multiplication using repeated addition
always @(*) begin
    A_temp = A; // assigning A to temporary register
    Y_temp = 0; // initializing Y_temp to 0
    product = 0; // initializing product to 0

    // Iterating through each bit of B
    for (i=0; i<4; i=i+1) begin
        // If B's bit is 1, add A_temp to Y_temp
        if (B[i] == 1'b1) begin
            Y_temp = Y_temp + A_temp;
        end
        // Shift A_temp left by 1 bit
        A_temp = A_temp << 1;
    end
    
    // Assigning Y_temp to the lower 8 bits of product
    product[7:0] = Y_temp;
end

assign Y = product; // assigning final result to output Y
endmodule