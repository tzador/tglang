// Declaration of input signals
input [7:0] data; // 8-bit data signal
input clk; // clock signal
input rst; // reset signal

// Declaration of output signals
output reg [9:0] count; // 10-bit count signal
output reg [11:0] sum; // 12-bit sum signal

// Declaration of internal signals
reg [9:0] temp; // 10-bit temporary signal
reg [11:0] tmp_sum; // 12-bit temporary sum signal

// Sequential always block to increment count 
always @ (posedge clk or posedge rst) begin
	if (rst) // if reset signal is high
		count <= 10'b0; // reset count to 0
	else
		count <= count + 1; // increment count by 1
end

// Sequential always block to calculate sum of data
always @ (posedge clk or posedge rst) begin
	if (rst) // if reset signal is high
		sum <= 12'b0; // reset sum to 0
	else begin // if reset signal is low
		tmp_sum <= tmp_sum + data; // add data to temporary sum
		sum <= tmp_sum; // assign temporary sum to sum
	end
end

// Combinational always block to perform logic on internal signals
always @ (count) begin
	// Logic to calculate temporary value based on count
	case(count)
		10'b0: temp = data + 10'b0001; // if count is 0, add 1 to data
		10'b1: temp = data - 10'b0001; // if count is 1, subtract 1 from data
		10'b10: temp = data * 10; // if count is 2, multiply data by 10
		default: temp = 10'b0; // if count is anything else, assign 0 to temp 
	endcase
end