module barrel_shifter(input [7:0] data, input [2:0] shift, output reg [7:0] result);
	// A barrel shifter module with a parallel input, shift control and parallel output

	reg [7:0] shifted_data; // Intermediate signal to hold data after it is shifted

	always @(*)
		// A combinational logic block to perform the shifting operation based on the shift control input
		case (shift)
			3'd0: shifted_data = data; // No shift 
			3'd1: shifted_data = {data[6:0], data[7]}; // Rotate right by 1 bit 
			3'd2: shifted_data = {data[5:0], data[7:6]}; // Rotate right by 2 bits 
			3'd3: shifted_data = {data[4:0], data[7:5]}; // Rotate right by 3 bits 
			3'd4: shifted_data = {data[3:0], data[7:4]}; // Rotate right by 4 bits 
			3'd5: shifted_data = {data[2:0], data[7:3]}; // Rotate right by 5 bits 
			3'd6: shifted_data = {data[1:0], data[7:2]}; // Rotate right by 6 bits 
			3'd7: shifted_data = {data[0], data[7:1]}; // Rotate right by 7 bits 
		endcase

	always @(*) 
		// A sequential logic block to store the shifted data in the output register
		result = shifted_data;
endmodule