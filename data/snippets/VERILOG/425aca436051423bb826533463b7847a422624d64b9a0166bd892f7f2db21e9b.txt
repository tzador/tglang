// Declare a 4-bit input variable named "input"
input [3:0] input;

// Define a 4-bit output variable named "output"
output [3:0] output;

// Create a 4-bit register named "reg" with an initial value of 0
reg [3:0] reg = 4'b0000;

// Design a combinational logic to output the inverse of the input
assign output = ~input;

// Create a always block that will execute on every positive edge of the clock
always @(posedge clock) begin
    // Shift the value of the register to the right by 1, creating a right shift
    reg <= reg >> 1;
    // Assign the least significant bit of the input to the most significant bit of the register
    reg[3] <= input[0];
end