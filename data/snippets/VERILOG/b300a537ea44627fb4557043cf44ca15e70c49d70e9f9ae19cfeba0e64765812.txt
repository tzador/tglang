// This code snippet generates a finite state machine that counts from 0 to 15
module counter (
  input wire clk,
  input wire reset,
  output reg [3:0] count
);

// Declare states as parameters
parameter S0 = 4'b0000;
parameter S1 = 4'b0001;
parameter S2 = 4'b0010;
parameter S3 = 4'b0011;
parameter S4 = 4'b0100;
parameter S5 = 4'b0101;
parameter S6 = 4'b0110;
parameter S7 = 4'b0111;
parameter S8 = 4'b1000;
parameter S9 = 4'b1001;
parameter S10 = 4'b1010;
parameter S11 = 4'b1011;
parameter S12 = 4'b1100;
parameter S13 = 4'b1101;
parameter S14 = 4'b1110;
parameter S15 = 4'b1111;

// Declare current state and next state variables
reg [3:0] current_state;
reg [3:0] next_state;

// Assign initial state to current state
always @(posedge clk, posedge reset)
begin
  if (reset) begin
    current_state <= S0;
  end
  else begin
    current_state <= next_state;
  end
end

// Logic for next state
always @(current_state)
begin
  case (current_state)
    S0: next_state <= S1;
    S1: next_state <= S2;
    S2: next_state <= S3;
    S3: next_state <= S4;
    S4: next_state <= S5;
    S5: next_state <= S6;
    S6: next_state <= S7;
    S7: next_state <= S8;
    S8: next_state <= S9;
    S9: next_state <= S10;
    S10: next_state <= S11;
    S11: next_state <= S12;
    S12: next_state <= S13;
    S13: next_state <= S14;
    S14: next_state <= S15;
    S15: next_state <= S0;
  endcase
end

// Assign output to current state
always @(current_state)
begin
  case (current_state)
    S0: count <= 4'b0000;
    S1: count <= 4'b0001;
    S2: count <= 4'b0010;
    S3: count <= 4'b0011;
    S4: count <= 4'b0100;
    S5: count <= 4'b0101;
    S6: count <= 4'b0110;
    S7: count <= 4'b0111;
    S8: count <= 4'b1000;
    S9: count <= 4'b1001;
    S10: count <= 4'b1010;
    S11: count <= 4'b1011;
    S12: count <= 4'b1100;
    S13: count <= 4'b1101;
    S14: count <= 4'b1110;
    S15: count <= 4'b1111;
  endcase
end

endmodule