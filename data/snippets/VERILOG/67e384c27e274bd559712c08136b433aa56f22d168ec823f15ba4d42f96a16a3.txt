module myCPU (
  input clk, // clock input
  input rst, // reset input
  input [7:0] data_in, // data input
  input [3:0] sel, // selection input
  output [7:0] addr // address output
);
  reg [7:0] data_out; // data output register
  reg [7:0] addr; // address register

  always @ (posedge clk) begin // execute on rising edge of clock
    if (rst) begin // reset behavior
      data_out <= 0; // set data output to 0
      addr <= 0; // set address to 0
    end else begin // normal operation
      case (sel) // use sel input to select operation
        4'b0000: data_out <= data_in; // assign data input to data output
        4'b0001: data_out <= data_in + 1; // add 1 to data input and assign to data output
        4'b0010: data_out <= data_in - 1; // subtract 1 from data input and assign to data output
        4'b0100: data_out <= data_in * 2; // multiply data input by 2 and assign to data output
        4'b1000: data_out <= data_in / 2; // divide data input by 2 and assign to data output
        default: data_out <= 0; // default behavior is to set data output to 0
      endcase
      if (data_out >= 255) begin // check if data output is more than 255
        addr <= 0; // if so, set address to 0
      end else begin // otherwise
        addr <= data_out; // assign data output to address
      end
    end
  end

  assign addr_out = addr; // assign address register to output

endmodule