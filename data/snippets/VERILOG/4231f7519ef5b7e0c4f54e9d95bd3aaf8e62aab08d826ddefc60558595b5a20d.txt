`timescale 1ns / 1ps   // Set timescale for simulation
`include "constants.vh"     // Include constant values from header file

module test_module(clk, rst, in1, out1);   // Define module with inputs and outputs
  input clk, rst;
  input [`DATA_WIDTH-1:0] in1;
  output [`DATA_WIDTH-1:0] out1;
  reg [`DATA_WIDTH-1:0] reg1, reg2;

  always @ (posedge clk or posedge rst) begin   // Create positive-edge trigger always block
    if (rst) begin
      reg1 <= 0;  // Reset reg1 value to 0
      reg2 <= 0;  // Reset reg2 value to 0
    end
    else begin
      reg2 <= in1;  // Assign input value to reg2
      if (reg1 == 0) begin    // If reg1 is 0
        reg2 <= reg1;   // Assign value of reg1 to reg2
      end
      else begin    // If reg1 is not 0
        reg2 <= reg1 << 1;   // Shift reg1 left by 1 and assign to reg2
      end
      reg1 <= reg2;   // Assign reg2 value to reg1
    end
  end

  assign out1 = reg1;    // Assign reg1 value to out1
endmodule