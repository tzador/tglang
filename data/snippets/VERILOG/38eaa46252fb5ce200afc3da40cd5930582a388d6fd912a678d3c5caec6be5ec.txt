/* 
  This code snippet creates a 4-bit ripple carry adder using Verilog
  It takes in two 4-bit inputs, A and B, and outputs a 4-bit sum and carry bit 
*/

module ripple_carry_adder(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    output [3:0] sum, // 4-bit sum output 
    output cout // carry output bit
);

    assign cout = 0; // initialize carry bit to 0
    
    generate // loop for creating 4 full adders 
        genvar i; // generate loop variable 
        for (i = 0; i < 4; i = i + 1) begin : adder
            full_adder FA(
                .A(A[i]), // take each bit of A as input to full adder
                .B(B[i]), // take corresponding bit of B as input to full adder
                .Cin(cout), // take previous carry bit as input to full adder
                .S(sum[i]), // store sum bit
                .Cout(cout) // store carry output bit for next full adder
            );
        end
    endgenerate
    
endmodule

module full_adder(
    input A, // input bit A
    input B, // input bit B
    input Cin, // carry input bit
    output S, // sum bit 
    output Cout // carry output bit
);

    assign S = A ^ B ^ Cin; // calculate sum bit using XOR gate 
    assign Cout = (A & B) | (A & Cin) | (B & Cin); // calculate carry bit using OR gate 
    
endmodule