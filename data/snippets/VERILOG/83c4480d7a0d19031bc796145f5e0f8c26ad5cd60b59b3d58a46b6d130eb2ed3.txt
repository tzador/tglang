// This code snippet is an example of a sequential circuit that implements a Johnson counter.

module johnson_counter(input clk, input reset, output reg [3:0] q);

	// declare internal signals
	wire [3:0] next_q;
	wire [1:0] control;

	// initialize the counter to 0000
	initial begin
		q = 4'b0000;
	end

	// always block triggered by the clock
	always@(posedge clk) begin

		// if reset signal is high, reset the counter to 0000
		if(reset) begin
			q <= 4'b0000;
		end
		// else, calculate next state based on current state
		else begin
			// assign next state based on control signal
			case(control)
				2'b00: next_q = q + 1; // increment counter
				2'b01: next_q = q - 1; // decrement counter
				2'b10: next_q = q>>1; // shift counter to the right
				2'b11: next_q = q<<1; // shift counter to the left
			endcase

			// assign next state to output
			q <= next_q;
		end
	end

	// always block triggered by changes in control signal
	always@(*) begin
		// calculate control signal based on current state
		if(q == 4'b0000) begin
			control = 2'b10; // if counter is 0000, shift right
		end
		else if(q == 4'b1111) begin
			control = 2'b01; // if counter is 1111, decrement
		end
		else begin
			control = 2'b00; // default to increment
		end
	end
endmodule