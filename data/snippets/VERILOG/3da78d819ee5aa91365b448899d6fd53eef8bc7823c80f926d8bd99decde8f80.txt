/* This code snippet is a 16-bit multiplier using Verilog */

`timescale 1ns / 1ps      // Declare timescale for simulation

module multiplier(       // Define module named multiplier
    input [15:0] a,       // Declare inputs: a (16-bit), b (16-bit)
    input [15:0] b,
    output [31:0] result  // Declare output: result (32-bit)
    );
    
    wire [31:0] temp;     // Declare wire for intermediate calculation
    reg [15:0] i;         // Declare register for loop counter
    reg [31:0] sum;       // Declare register for storing sum
    
    assign temp = a * b;  // Use 'assign' to assign multiplication of a and b to temp
    
    always @* begin            // Use 'always' to specify behavior of a combinational circuit
        sum = temp;            // Assign value of temp to sum
        for (i = 15; i > 0; i=i-1) begin // Use 'for' loop to perform 16 iterations (one for each bit)
            sum = sum << 1;     // Shift sum left by 1 bit on each iteration
        end
    end
    
    assign result = sum;  // Assign value of sum to output result
    
endmodule  // End of module