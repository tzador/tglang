// This is a code snippet in VERILOG
module myModule(input A, output reg [3:0] B);
    // input A is a single bit
    // output B is a 4-bit register
    // reg specifies that B is a registered output

    // always block that assigns B based on A and a counter
    always @ (A or counter)
    begin
        case (A)
            1'h0: B <= counter; // if A is 0, B is assigned the value of the counter
            1'h1: B <= ~counter; // if A is 1, B is assigned the complement of the counter
        endcase
    end

    // counter that increments with each clock cycle
    // always_ff keyword specifies that this block is sensitive to the clock input
    always_ff @(posedge clk)
    begin
        counter = counter + 1;
    end

endmodule