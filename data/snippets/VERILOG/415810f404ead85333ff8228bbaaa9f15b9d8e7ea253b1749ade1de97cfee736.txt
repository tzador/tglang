module Multiply_32bit (input [31:0] A, input [31:0] B, output reg[63:0] result);

reg[31:0] multiplicand; // declares a 32-bit register for the multiplicand
reg[31:0] multiplier; // declares a 32-bit register for the multiplier
reg[63:0] product; // declares a 64-bit register for the product
reg[5:0] count; // declares a 6-bit register for the counter

initial begin
  count = 0; // initializes the counter to 0
  product = 0; // initializes the product to 0
end

always @(*) begin
  if (count < 32) begin
    multiplicand = A[count]; // assigns the bit at the current counter position from A to the multiplicand register
    multiplier = B[count]; // assigns the bit at the current counter position from B to the multiplier register
    if (multiplier == 1) // checks if the bit in the multiplier is 1
      product = product + (multiplicand << count); // multiplies the multiplicand with 2^count and adds it to the product register
  end
  count = count +1; // increments the counter
end

assign result = product; // assigns the product to the output

endmodule