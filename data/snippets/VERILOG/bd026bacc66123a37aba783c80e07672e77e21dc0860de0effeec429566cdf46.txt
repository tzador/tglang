// This module is used to multiply two 8-bit numbers using verilog language

module multiplier(a, b, result);
 
input[7:0] a, b; // two 8-bit input numbers
output[15:0] result; // 16-bit output result
 
reg[7:0] multiplicand, multiplier; // temporary registers to store inputs
reg[15:0] temp_result; // temporary register to store intermediate result
 
integer i, j; // integer variables for loop counters
 
always @(a or b) begin // always block to trigger when inputs change
    multiplicand = a; // assigning input a to multiplicand
    multiplier = b; // assigning input b to multiplier
    temp_result = 0; // initializing temporary result to 0
 
    // nested for loops to perform multiplication
    for (i = 0; i < 8; i = i + 1) begin
        for (j = 0; j < 8; j = j + 1) begin
            if (multiplier[j] == 1) // checking if bit is 1
                temp_result[i+j] = temp_result[i+j] + multiplicand[j]; // adding multiplicand value to temporary result at specific bit index
        end
    end
 
    result = temp_result[15:0]; // assigning final result to output
end
 
endmodule