module ALU(input [7:0] A, input [7:0] B, input [2:0] opcode, output [7:0] result);

  // internal registers
  reg [7:0] a_reg;
  reg [7:0] b_reg;

  // cases for different operations based on opcode
  always @*
    case (opcode)
      0: // addition operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg + b_reg;
        end
      1: // subtraction operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg - b_reg;
        end
      2: // multiplication operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg * b_reg;
        end
      3: // division operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg / b_reg;
        end
      4: // bitwise AND operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg & b_reg;
        end
      5: // bitwise OR operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg | b_reg;
        end
      6: // bitwise XOR operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg ^ b_reg;
        end
      7: // logical shift left operation
        begin
          a_reg = A;
          b_reg = B;
          result = a_reg << b_reg;
        end
    endcase

endmodule