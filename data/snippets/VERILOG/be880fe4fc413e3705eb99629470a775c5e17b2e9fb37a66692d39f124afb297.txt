// Module Declaration
module decoder (
    input [3:0] input_code,
    output [15:0] output_code
);
    
    // Declare signal for storing binary numbers
    reg [15:0] temp;
    
    // Generate case statement for all possible input codes
    always @ (*)
        case(input_code)
            // Case for input code '0000'
            4'b0000 : temp = 16'b0000000100000001;
            // Case for input code '0001'
            4'b0001 : temp = 16'b0000001000000010;
            // Case for input code '0010'
            4'b0010 : temp = 16'b0000010000000100;
            // Case for input code '0011'
            4'b0011 : temp = 16'b0000100000001000;
            // Case for input code '0100'
            4'b0100 : temp = 16'b0001000000010000;
            // Case for input code '0101'
            4'b0101 : temp = 16'b0010000000100000;
            // Case for input code '0110'
            4'b0110 : temp = 16'b0100000001000000;
            // Case for input code '0111'
            4'b0111 : temp = 16'b1000000010000000;
            // Case for input code '1000'
            4'b1000 : temp = 16'b0000000000000001;
            // Case for input code '1001'
            4'b1001 : temp = 16'b0000000000000010;
            // Case for input code '1010'
            4'b1010 : temp = 16'b0000000000000100;
            // Case for input code '1011'
            4'b1011 : temp = 16'b0000000000001000;
            // Case for input code '1100'
            4'b1100 : temp = 16'b0000000000010000;
            // Case for input code '1101'
            4'b1101 : temp = 16'b0000000000100000;
            // Case for input code '1110'
            4'b1110 : temp = 16'b0000000001000000;
            // Case for input code '1111'
            4'b1111 : temp = 16'b0000000010000000;
            // Default case
            default : temp = 16'b0000000000000000;
        endcase
    
    // Assign output code to the temporary signal
    assign output_code = temp;
    
endmodule