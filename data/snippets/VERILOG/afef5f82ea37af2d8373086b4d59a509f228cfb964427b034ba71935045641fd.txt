/* Defining a module with inputs and outputs */
module calculator(
  input logic [7:0] a, b, // 8-bit inputs a and b
  output logic [7:0] result,  // 8-bit output result
  output logic [1:0] operation // 2-bit output operation
);

/* Creating wires for internal signals */
logic [9:0] sum; // 10-bit wire for sum calculation
logic [9:0] difference; // 10-bit wire for difference calculation
logic [9:0] product; // 10-bit wire for product calculation

/* Assigning sum to result when operation is 2'b00 */
assign result = (operation == 2'b00) ? sum[7:0] : 0;

/* Assigning difference to result when operation is 2'b01 */
assign result = (operation == 2'b01) ? difference[7:0] : 0;

/* Assigning product to result when operation is 2'b10 */
assign result = (operation == 2'b10) ? product[7:0] : 0;

/* Assigning a and b to appropriate inputs for each operation */
always_comb begin
  case (operation)
    2'b00: begin // addition
      sum = a + b;
      difference = 0; // set to 0 as it is not needed for addition
      product = 0; // set to 0 as it is not needed for addition
    end
    2'b01: begin // subtraction
      sum = 0; // set to 0 as it is not needed for subtraction
      difference = a - b;
      product = 0; // set to 0 as it is not needed for subtraction
    end
    2'b10: begin // multiplication
      sum = 0; // set to 0 as it is not needed for multiplication
      difference = 0; // set to 0 as it is not needed for multiplication
      product = a * b;
    end
    2'b11: begin // invalid operation
      sum = 0;
      difference = 0;
      product = 0;
    end
  endcase
end

/* Assigning input values to operation based on user input */
always_comb begin
  if (a == b) begin // a = b -> operation is addition
    operation = 2'b00;
  end
  else if (a > b) begin // a > b -> operation is subtraction
    operation = 2'b01;
  end
  else if (a < b) begin // a < b -> operation is multiplication
    operation = 2'b10;
  end
  else begin // if none of the above conditions are true, operation is invalid
    operation = 2'b11;
  end
end

endmodule