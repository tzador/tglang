// This is a Verilog code snippet that implements a 4-bit counter with asynchronous reset
// The counter counts up on the positive edge of the clock and resets to 0 on the negative edge
// The reset signal is asynchronous and active high
// The output of the counter is a 4-bit binary number

module counter (input clk, input rst, output reg [3:0] count);

// The hardware module starts with the keyword "module" followed by the name of the module
// In this case, the module is called "counter"
// Inside the module, we define the input and output ports
// clk is the clock signal, rst is the reset signal, and count is the output of the counter
// The [3:0] notation specifies that count is a 4-bit binary number

  reg [3:0] tmp_reg; // Temporary register to store the current value of count
  
  // A register is a sequential element that stores a value and updates it on the positive edge of the clock
  // In this case, we use a 4-bit register called tmp_reg to store the current value of count
  
  always @(posedge clk or negedge rst) // Always block that triggers on the positive edge of clk or negative edge of rst
  begin
    if (rst) // If statement to check if rst is active high
      tmp_reg <= 4'b0000; // Assigns 0000 to tmp_reg if rst is active high
    else
      tmp_reg <= tmp_reg + 1; // Adds 1 to the current value of tmp_reg if rst is inactive (low)
  end
  
  assign count = tmp_reg; // Assigns the value of tmp_reg to count
  
endmodule

// End of the module definition
// The "assign" keyword is used to assign a value to a wire (a combinational element)
// In this case, we use it to assign the value of tmp_reg to count, which is declared as an output reg (register)
// This ensures that count holds its value until it is updated on the positive edge of clk
// The "endmodule" keyword marks the end of the module definition