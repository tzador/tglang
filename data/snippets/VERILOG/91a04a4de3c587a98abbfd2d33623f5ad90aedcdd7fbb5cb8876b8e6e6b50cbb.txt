// This is a multi-module Verilog code snippet

// Module 1: Registers and Adder
`timescale 1ns / 1ps

module registers_and_adder(
    input [7:0] operand_a,
    input [7:0] operand_b,
    input clk,
    input rst,
    output [7:0] sum,
    output [15:0] prod
);

    // Declaring registers
    reg [7:0] reg_a;
    reg [7:0] reg_b;

    always @ (posedge clk) begin
        if (rst) begin
            // Reset registers to 0
            reg_a <= 0;
            reg_b <= 0;
        end else begin
            // Update registers with inputs
            reg_a <= operand_a;
            reg_b <= operand_b;
        end
    end

    // Declaring outputs
    wire [7:0] add_result;
    wire [15:0] mult_result;

    // Adder module instantiation
    adder add_inst(
        .a(reg_a),
        .b(reg_b),
        .sum(add_result)
    );

    // Multiplier module instantiation
    multiplier mult_inst(
        .a(reg_a),
        .b(reg_b),
        .product(mult_result)
    );

    // Assigning outputs
    assign sum = add_result;
    assign prod = mult_result;

endmodule

// Module 2: Adder
module adder(
    input [7:0] a,
    input [7:0] b,
    output [7:0] sum
);

    // Assigning sum as the addition of the two inputs
    assign sum = a + b;

endmodule

// Module 3: Multiplier
module multiplier(
    input [7:0] a,
    input [7:0] b,
    output [15:0] product
);

    // Assigning product as the multiplication of the two inputs
    assign product = a * b;

endmodule