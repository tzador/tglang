// This is a high-level behavioral description of a finite state machine

module finite_state_machine (

input wire clock, // input clock
input wire reset, // input reset
input wire start, // input to start the FSM
input wire brake, // input to brake the FSM

output reg [2:0] state // outputs the current state of the FSM

);

// define states as parameters
parameter [2:0] idle = 3'b001;
parameter [2:0] driving = 3'b010;
parameter [2:0] braking = 3'b011;
parameter [2:0] stopped = 3'b100;

// create state register
reg [2:0] current_state, next_state, reset_state;

// initial state assignment
initial begin
current_state = idle;
next_state = idle;
reset_state = idle;
end

// state transition and output logic
always @(posedge clock) begin
if (reset) begin // reset state to idle
current_state <= reset_state;
end else begin
current_state <= next_state;
next_state = current_state;
case (current_state)
idle: begin // idle state logic
if (start) begin
next_state <= driving;
end else begin
next_state <= idle;
end
end
driving: begin // driving state logic
if (brake) begin
next_state <= braking;
end else begin
next_state <= driving;
end
end
braking: begin // braking state logic
if (start) begin
next_state <= driving;
end else begin
next_state <= stopped;
end
end
stopped: begin // stopped state logic
if (start) begin
next_state <= driving;
end else begin
next_state <= stopped;
end
end
endcase
end
endmodule