//Implementation of a 4-bit ALU using bitwise arithmetic operations

module alu(input [3:0] a, input [3:0] b, input [1:0] op, output [3:0] out);

//Declare internal signals
reg [3:0] result;
wire carry;

//Perform arithmetic operations based on op code
always @(a, b, op) begin
    case(op)
        2'b00: result = a + b; //Addition operation
        2'b01: result = a - b; //Subtraction operation
        2'b10: result = a & b; //Bitwise AND operation
        2'b11: result = a | b; //Bitwise OR operation
    endcase
end

//Check for carry out for addition operation
assign carry = (result[3] & ((a[3] ^ b[3]) | (a[3] & b[3])));

//Check for overflow for subtraction operation
always @(a, b) begin
    if (op == 2'b01 && a[3] == 1 && b[3] == 0 && result[3] == 0) begin
        $display("Overflow occurred");
    end
end

//Assign output based on op code
assign out = (op[1] == 0) ? result : {carry, result[2:0]};

endmodule