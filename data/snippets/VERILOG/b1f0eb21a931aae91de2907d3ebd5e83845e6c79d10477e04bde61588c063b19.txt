//This module implements a finite state machine to control an LED based on input signals
module FSM_LED_control(
 input clk,
 input rst,
 input in1,
 input in2,
 output reg LED
 );

 //Define states as parameters
 parameter S0=0, //initial state
          S1=1, //state 1
          S2=2, //state 2
          S3=3, //state 3
          S4=4; //final state

 //Define internal variables for current state and next state
 reg [3:0] state_reg, next_state;

 //Define state register
 always @(posedge clk or posedge rst)
 begin
  if (rst)
   state_reg <= S0; //reset to initial state
  else
   state_reg <= next_state; //update to next state
 end

 //Define output register
 always @(posedge clk)
 begin
  case(state_reg)
   S0: LED <= 0; //initial state, turn off LED
   S1: LED <= in1; //state 1, LED is controlled by in1
   S2: LED <= in2; //state 2, LED is controlled by in2
   S3: LED <= in1 & in2; //state 3, LED is controlled by in1 and in2
   S4: LED <= ~LED; //final state, toggle LED
   default: LED <= 0;
  endcase
 end
 
 //Define next state logic
 always @(*)
 begin
  case(state_reg)
   S0: next_state = S1; //initial state, transition to state 1
   S1: next_state = S2; //state 1, transition to state 2
   S2: next_state = S3; //state 2, transition to state 3
   S3: next_state = S4; //state 3, transition to final state
   S4: next_state = S0; //final state, transition back to initial state
   default: next_state = S0;
  endcase
 end
endmodule