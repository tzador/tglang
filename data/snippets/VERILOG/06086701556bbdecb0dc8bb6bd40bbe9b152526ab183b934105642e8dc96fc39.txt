// This code is an example of a 32-bit ripple carry adder in Verilog.
// It takes two 32-bit inputs (A and B), and outputs a 32-bit sum (S) and carry-out (C).
module ripple_carry_adder (
    input [31:0] A,
    input [31:0] B,
    output [31:0] S,
    output C
);

// Create an array of 32 full-adders to perform the addition of each bit.
wire [31:0] carry;
wire [31:0] sum;
genvar i;
generate
    for (i = 0; i < 32; i = i + 1) begin : adder_loop
        full_adder adder (
            .A(A[i]),
            .B(B[i]),
            .carry_in(carry[i]),
            .sum_out(sum[i]),
            .carry_out(carry[i+1])
        );
    end
endgenerate

// Assign the sum output of the last full-adder to the output signal S.
assign S = sum[31];

// Assign the carry output of the last full-adder to the output signal C.
assign C = carry[32];

endmodule

// This module represents a single full-adder.
module full_adder (
    input A,
    input B,
    input carry_in,
    output sum_out,
    output carry_out
);

// Create the internal signals for the adder.
wire sum_intermediate;
wire carry_intermediate;

// Use Verilog's ternary operator to represent a half-adder.
assign {carry_intermediate, sum_intermediate} = (A & B) | (A & carry_in) | (B & carry_in);

// Represent the sum output of the full-adder as the xor of all three inputs.
assign sum_out = A ^ B ^ carry_in;

// Assign the carry output of the full-adder as the carry out of the half-adder added with the carries of the previous bits.
assign carry_out = (A & B) | (A & carry_in) | (B & carry_in);

endmodule