/*
This is a code snippet written in VERILOG.
It is a continuous finite state machine that
counts the number of 1's on a single-bit input.
*/

// Declare input and output ports
module CountOnes(
    input clk, // Clock signal
    input rst, // Asynchronous reset
    input in,  // Input signal
    output reg [3:0] count // Output counter signal
);

// Define states
parameter S0 = 2'b00; // Initial state
parameter S1 = 2'b01; // State for counting 1's
parameter S2 = 2'b10; // Final state for outputting count

// Declare flip-flops for current and next state
reg [1:0] cur_state, next_state;

// Define state transition and output logic
always @(posedge clk or negedge rst) begin
    // Reset to initial state if reset signal is low
    if (!rst) begin
        cur_state <= S0;
        count <= 0;
    end
    else begin
        // Transition to next state based on current state and input signal
        case (cur_state)
            S0: begin
                if (in) begin
                    next_state <= S1;
                end
                else begin
                    next_state <= S0;
                end
            end
            S1: begin
                if (!in) begin
                    next_state <= S2;
                end
                else begin
                    next_state <= S1;
                end
            end
            S2: begin
                next_state <= S0;
            end
        endcase

        // Output logic for counting 1's
        if (cur_state == S1 && next_state == S2) begin
            count <= count + 1;
        end
    end
end

// Assign current state to next state after clock edge
assign cur_state = next_state;

endmodule // End of module