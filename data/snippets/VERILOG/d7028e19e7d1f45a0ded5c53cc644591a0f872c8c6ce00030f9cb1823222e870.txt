// Declaring a 32-bit signed variable named "a"
// with an initial value of 5
reg signed [31:0] a = 5;

// Declaring a 32-bit unsigned variable named "b"
// with an initial value of 10
reg [31:0] b = 10;

// Declaring a 64-bit signed variable named "c"
// with an initial value of 0
reg signed [63:0] c = 0;

// Adding "a" and "b" together and storing the result in "c"
// using a combinatorial always block
always @* begin
    c = a + b;
end

// Declaring a 4-bit input named "d" and a 1-bit output named "e"
// with initial values of 0
module adder(
    input [3:0] d,
    output [0:0] e
);

// Creating a 4-bit register named "out" for internal calculations
wire [3:0] out;

// Using a behavioral always block to add "d" to itself and store it in "out"
always @* begin
    out = d + d;
end

// Assigning the most significant bit of "out" to "e"
assign e = out[3];
endmodule