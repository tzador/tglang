module counter(
  input wire clk,
  input wire reset,
  output reg [7:0] count,
  output reg [1:0] state
);

// defining reg type variables for states
reg [1:0] S0, S1, S2, S3;

// initializing states
initial begin
  S0 = 2'b00;
  S1 = 2'b01;
  S2 = 2'b10;
  S3 = 2'b11;
end

// declaring current state and next state variables
reg [1:0] current_state, next_state;

// assigning next state based on current state and inputs
always @ (posedge clk or posedge reset) begin
  if (reset) begin
    // if reset is high, go back to initial state
    next_state = S0; 
  end
  else begin
    case (current_state)
      S0: begin
        // if current state is S0, next state is S1
        next_state = S1;
      end
      S1: begin
        // if current state is S1, next state is S2
        next_state = S2;
      end
      S2: begin
        // if current state is S2, next state is S3
        next_state = S3;
      end
      S3: begin
        // if current state is S3, next state is S0
        next_state = S0;
      end
      default: begin
        next_state = S0;
      end
    endcase
  end
end

// assigning current state to next state at every positive edge of clock
always @ (posedge clk) begin
  current_state <= next_state;
end

// assigning count based on current state
always @ (current_state) begin
  case (current_state)
    S0: begin
      // if current state is S0, count is 0
      count <= 8'd0;
    end
    S1: begin
      // if current state is S1, count is 1
      count <= 8'd1;
    end
    S2: begin
      // if current state is S2, count is 2
      count <= 8'd2;
    end
    S3: begin
      // if current state is S3, count is 3
      count <= 8'd3;
    end
    default: begin
      count <= 8'd0;
    end
  endcase
end

// assigning state based on current state
always @ (current_state) begin
  case (current_state)
    S0: begin
      // if current state is S0, state is 0
      state <= 2'b00;
    end
    S1: begin
      // if current state is S1, state is 1
      state <= 2'b01;
    end
    S2: begin
      // if current state is S2, state is 2
      state <= 2'b10;
    end
    S3: begin
      // if current state is S3, state is 3
      state <= 2'b11;
    end
    default: begin
      state <= 2'b00;
    end
  endcase
end

endmodule