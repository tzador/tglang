module foo(clk, rst, din, dout);
  // This is a module declaration, where "foo" is the name of the module.
  // It has four input and output ports: clk, a clock signal;
  // rst, a reset signal;
  // din, a data input;
  // and dout, a data output.
  
  input clk, rst, din;
  output dout;
  
  reg [7:0] counter; 
  // This is a register declaration, where "reg" is the keyword for declaring a 
  // variable that can store values. 
  // Here, "counter" is a 8-bit register.
  
  always @(posedge clk or posedge rst) 
  // This is an "always" block, which means the code inside it will be executed 
  // whenever there is a positive edge on the clock signal or reset signal.
  begin
    if (rst) 
    // This checks if the reset signal is high. If it is, the code inside the "begin" 
    // and "end" blocks will be executed.
    begin
      counter <= 0; 
      // Sets the value of "counter" to 0.
    end
    else // If the reset signal is not high, the code inside the "else" block will be executed.
    begin 
      if (din) 
      // This checks if the data input is high. If it is, the code inside the "begin" 
      // and "end" blocks will be executed.
      begin 
        counter <= counter + 1; 
        // Increases the value of "counter" by 1.
      end 
    end
  end
  
  assign dout = counter; 
  // This assigns the current value of "counter" to the data output "dout".
  
endmodule