// A module that implements a 4 digit binary up/down counter with a carry bit
// module name: binary_counter
// port definitions: clk, reset, up_down, carry, digit
module binary_counter (
input clk, // clock input
input reset, // resets the counter to 0000 when high
input up_down, // selects counting up or down
output carry, // output bit indicating if carry occurred
output [3:0] digit // outputs the current counter value
);
	
// internal signals
reg [3:0] count; // stores the current counter value
wire [3:0] next_count; // stores the next count value
wire [4:0] sum; // stores the addition of count and 1

// always block for clock operation
always @(posedge clk) begin
	if (reset) begin // reset to 0000 if reset signal is high
		count <= 4'b0000;
	end else begin // otherwise, perform counting operation
		if (up_down) // count up if up_down signal is high
			count <= next_count;
		else // count down if up_down signal is low
			count <= next_count - 1;
	end
end

// combinational logic for calculating next count
assign sum = count + 4'b0001; // add 1 to current count
assign next_count = (up_down) ? sum[3:0] : sum[4:1]; // extract only 4 bits for next count and account for carry if counting down

// assign carry output
assign carry = sum[4]; // carry occurs when adding 1 to F (15)

// assign digit output
assign digit = count; // output current count value

endmodule // end of module