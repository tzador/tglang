// creating a module with parameters
module counter #(
parameter CLK_WIDTH = 1, // parameter for clock width
parameter DATA_WIDTH = 8, // parameter for data width
parameter COUNT_MAX = 255 // parameter for maximum count value
) (
input logic [CLK_WIDTH-1:0] CLK, // input clock
input logic [DATA_WIDTH-1:0] RESET, // input reset signal
input logic [DATA_WIDTH-1:0] ENABLE, // input enable signal
output logic [DATA_WIDTH-1:0] COUNT, // output count value
output logic [1:0] OVERFLOW // output overflow signal
);
// creating internal registers
logic [DATA_WIDTH-1:0] count_reg; // register for count value
logic [1:0] overflow_reg; // register for overflow signal
// initializing the registers with default values
always_ff@(posedge CLK)
begin
if (RESET) // if reset
begin
count_reg <= 0; // set count value to 0
overflow_reg <= 0; // set overflow signal to 0
end
else if (ENABLE) // if enable
begin
count_reg <= count_reg + 1; // increment count value
if (count_reg == COUNT_MAX) // if count reaches max value
overflow_reg <= 2'b01; // set overflow signal to 01
else
overflow_reg <= 2'b00; // set overflow signal to 00
end
end
// assigning the output values to the registers
assign COUNT = count_reg; // assign count value to output
assign OVERFLOW = overflow_reg; // assign overflow signal to output
endmodule