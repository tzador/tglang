// Assigning variables to inputs
input [7:0] A; // 8-bit input A
input [7:0] B; // 8-bit input B
input [7:0] C; // 8-bit input C

// Defining a constant value
parameter D = 5; // constant value D is assigned to decimal value 5

// Assigning a condition to a variable
assign A = (B > C) ? D : B; // If B is greater than C, A is assigned value D, else A is assigned value B

// Creating a 4-to-1 multiplexer
module mux(
    input [1:0] select, // input to select which data input to output
    input [7:0] data0, // 8-bit data input 0
    input [7:0] data1, // 8-bit data input 1
    input [7:0] data2, // 8-bit data input 2
    input [7:0] data3, // 8-bit data input 3
    output reg [7:0] out // 8-bit output
);

always @(*) begin
    case(select) // using case statement for different cases of select input
        2'b00: out = data0; // if select is 00, output is data input 0
        2'b01: out = data1; // if select is 01, output is data input 1
        2'b10: out = data2; // if select is 10, output is data input 2
        2'b11: out = data3; // if select is 11, output is data input 3
    endcase
end

// Creating a 4-bit ripple carry adder
module ripple_carry_adder(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    output [4:0] sum // 5-bit output to account for carry bit
);

wire [3:0] carry; // creating a wire to hold the carry bits between each stage

assign carry[0] = 1'b0; // first carry bit is always 0

genvar i; // declaring a generic variable for looping

generate // using generate statement for loop
    for (i = 0; i < 4; i = i + 1) begin // loop for 4 stages of addition
        full_adder FA( // instantiating full adder module
            .a(A[i]), // connecting input A to full adder module
            .b(B[i]), // connecting input B to full adder module
            .c(carry[i]), // connecting carry wire to full adder module
            .sum(sum[i]) // connecting output sum to full adder module
        );
        assign carry[i + 1] = FA.cout; // assigning carry out from full adder to next stage's carry input
    end
endgenerate

endmodule // end of ripple carry adder module

// Creating a full adder
module full_adder(
    input a, // input a
    input b, // input b
    input c, // input carry
    output sum, // output sum
    output cout // output carry out
);

assign sum = a ^ b ^ c; // using bitwise XOR to determine sum
assign cout = (a & b) | (b & c) | (a & c); // using bitwise OR to determine cout

endmodule // end of full adder module