// This module multiplies two 8-bit signed numbers using Booth's algorithm
module Booth_Multiplier(A, B, P);
input [7:0] A, B;
output [15:0] P;
wire [15:0] A_shift;
assign A_shift = {A, 8'b0};

wire [15:0] A_compl;
assign A_compl = ~A_shift + 1;

wire [9:0] B_shift;
assign B_shift = {B, 2'b0};

wire [9:0] B_compl;
assign B_compl = ~B_shift + 1;

reg [1:0] count;
reg [15:0] Ptemp;
reg [15:0] Paccum;
reg [15:0] result;
wire [1:0] add_sub;

always @(count or Ptemp)
begin
case({count, Ptemp[1:0]})
2'b00: {Paccum, Ptemp} = {Paccum[15], Paccum} << 1;
2'b01: {Paccum, Ptemp} = {Paccum[15], Paccum} - B_compl;
2'b10: {Paccum, Ptemp} = {Paccum[15], Paccum} + B_comp;
0x11: {} // Do nothing
endcase
end

assign add_sub = Ptemp[15:14];
always @(A_shift or B_shift)
begin
if(A_shift[1:0] == 2'b00)
begin
count <= B_shift[9:8];
result <= Paccum;
end
else if(A_shift[1:0] == 2'b01)
begin
count <= B_shift[9:8];
result <= Paccum + B_shift;
end
else
begin
count <= B_shift[9:8];
result <= Paccum + B_compl;
end
end

assign P = result;
endmodule