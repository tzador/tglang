// This code snippet is a 4-bit multiplexer using a hierarchical design approach

module mux_4bit(input [3:0] data, input [1:0] select, output [3:0] output);

  wire [3:0] m0_output;
  wire [3:0] m1_output;
  wire [3:0] m2_output;
  wire [3:0] m3_output;
  
  // Multiplexing each bit using a 2-to-1 multiplexer
  // Hierarchical design approach is used to simplify the code
  // For each bit, 2 to 1 multiplexer is instantiated
  // The select line determines which input is passed to the output
  mux_2to1 b0 (data[0], data[0], select[0], m0_output[0]);
  mux_2to1 b1 (data[1], data[1], select[0], m1_output[1]);
  mux_2to1 b2 (data[2], data[2], select[1], m2_output[2]);
  mux_2to1 b3 (data[3], data[3], select[1], m3_output[3]);
  
  // Assigning the output bits based on the select lines
  assign output[0] = m0_output[0];
  assign output[1] = m1_output[1];
  assign output[2] = m2_output[2];
  assign output[3] = m3_output[3];
  
endmodule

// 2-to-1 Multiplexer module 
module mux_2to1(input data0, input data1, input select, output output);
  
  // Select line is used to determine which input is passed to the output
  // If select is 0, data0 is selected, else data1 is selected
  assign output = select ? data1 : data0;
  
endmodule