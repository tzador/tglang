//Defining a module
module add_sub(input [7:0] A, B, input sel, output [7:0] result, output overflow);
    
    //Internal variables
    wire [8:0] signed_sum; //Holds the signed sum of A and B
    wire [8:0] diff1; //Temp variable used to calculate the signed difference
    wire [8:0] diff2; //Final signed difference
    
    //Full adder for addition
    assign signed_sum[0] = A[0] + B[0] + sel;
    assign signed_sum[1] = A[1] + B[1] + signed_sum[0]>>1;
    assign signed_sum[2] = A[2] + B[2] + signed_sum[1]>>1;
    assign signed_sum[3] = A[3] + B[3] + signed_sum[2]>>1;
    assign signed_sum[4] = A[4] + B[4] + signed_sum[3]>>1;
    assign signed_sum[5] = A[5] + B[5] + signed_sum[4]>>1;
    assign signed_sum[6] = A[6] + B[6] + signed_sum[5]>>1;
    assign signed_sum[7] = A[7] + B[7] + signed_sum[6]>>1;
    assign signed_sum[8] = 1'b0; //Set the MSB as 0, since we are not dealing with negative numbers
    
    //Full subtractor for subtraction
    assign diff1[0] = A[0] + B[0] + ~sel;
    assign diff1[1] = A[1] + B[1] + diff1[0]>>1;
    assign diff1[2] = A[2] + B[2] + diff1[1]>>1;
    assign diff1[3] = A[3] + B[3] + diff1[2]>>1;
    assign diff1[4] = A[4] + B[4] + diff1[3]>>1;
    assign diff1[5] = A[5] + B[5] + diff1[4]>>1;
    assign diff1[6] = A[6] + B[6] + diff1[5]>>1;
    assign diff1[7] = A[7] + B[7] + diff1[6]>>1;
    assign diff1[8] = 1'b1; //Set the MSB as 1, since we are dealing with negative numbers
    
    //Two's complement of diff1 to get final difference
    assign diff2 = ~diff1 + 1;
    
    //Output based on selection 
    always@(*) begin
        if(sel) begin //Perform addition
            result = signed_sum[7:0];
            overflow = signed_sum[8];
        end
        else begin //Perform subtraction
            result = diff2[7:0];
            overflow = diff2[8];
        end
    end
    
endmodule