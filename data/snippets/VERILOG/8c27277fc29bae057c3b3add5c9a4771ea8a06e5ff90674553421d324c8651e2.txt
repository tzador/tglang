// Define input and output ports
module multiplier (
input [3:0] A, B, // 4-bit input ports A and B
output [7:0] C // 8-bit output port C
);

// Internal variables and outputs
reg [7:0] P; // 8-bit product P
reg [2:0] i, j; // 3-bit counters i and j

// Multiplication logic
always @ (A or B) begin
    P = 8'bz; // initialize P to unknown value
    for (i = 0; i < 4; i=i+1) begin
        for (j = 0; j < 4; j=j+1) begin
            if (B[j] & 1'b1) begin // check if jth bit of B is 1
                // P = P + (A << j); // if B[j] is 1, add A shifted by j bits to P
                P = P + {A, {j{1'b0}}}; // equivalent to shifting A left by j bits
            end
        end
        A = A << 1; // shift A left by 1 bit in each iteration
    end
    C = P; // assign P to the output C
end

endmodule