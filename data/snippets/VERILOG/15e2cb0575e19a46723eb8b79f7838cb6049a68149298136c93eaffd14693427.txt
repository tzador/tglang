module counter (
    input rst_n, // reset signal
    input clk, // clock signal
    input en, // enable signal
    output reg [7:0] count // 8-bit output count
    );

    // declare internal wires
    reg [2:0] state;
    wire [2:0] next_state;
    wire add;
    wire sub;

    // declare state parameters
    parameter INIT = 3'b000;
    parameter INC = 3'b001;
    parameter DEC = 3'b010;
    parameter HOLD = 3'b100;

    // state transition logic
    always @ (posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            count <= 8'b00000000; // reset count to 0
            state <= INIT; // reset state to INIT
        end else begin
            state <= next_state; // update state based on next_state
        end
    end

    // next_state logic
    always @ (state or en) begin
        case (state)
            INIT: begin
                if (en) next_state = INC; // if enable, transition to INC state
                else next_state = INIT; // otherwise remain in INIT state
            end
            INC: begin
                if (add) next_state = DEC; // if add signal, transition to DEC state
                else next_state = INC; // otherwise remain in INC state
            end
            DEC: begin
                if (sub) next_state = HOLD; // if sub signal, transition to HOLD state
                else next_state = DEC; // otherwise remain in DEC state
            end
            HOLD: begin
                if (en) next_state = INC; // if enable, transition to INC state
                else next_state = HOLD; // otherwise remain in HOLD state
            end
        endcase
    end

    // count logic
    always @ (state) begin
        case (state)
            INIT: count <= 8'b00000000; // reset count to 0 in INIT state
            INC: count <= count + 8'b00000001; // increment count in INC state
            DEC: count <= count - 8'b00000001; // decrement count in DEC state
            HOLD: count <= count; // hold count in HOLD state
        endcase
    end
    
endmodule