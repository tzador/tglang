// Define a module with three input ports, two output ports, and one inout port
module my_module (
    input  logic[7:0] portA, // 8-bit input port
    input  logic       portB, // 1-bit input port
    input  logic       portC, // 1-bit input port
    output logic[3:0] portD, // 4-bit output port
    output logic[1:0] portE, // 2-bit output port
    inout  logic[5:0] portF // 6-bit inout port
);

// Declare internal signals and register
logic[3:0] result; // 4-bit internal signal
logic[2:0] counter; // 3-bit register for counting

// Combinational logic
assign result = portA + portB; // Calculate result by adding portA and portB
assign portD = result[3:0]; // Assign result to the 4-bit output port

always_comb begin // Begin of combinational always block
    if (portC) // Check if portC is high
        result = portA & portB; // Bitwise AND operation on portA and portB
    else // If portC is low
        result = portA | portB; // Bitwise OR operation on portA and portB
    portE[1] = result[0]; // Assign lowest bit of result to bit 1 of portE
    portE[0] = counter[2]; // Assign third bit of counter to bit 0 of portE
end // End of combinational always block

// Sequential logic
always_ff @(posedge clock) begin // Begin of sequential always block triggered by clock's positive edge
    if (reset) // Check if reset is high
        counter <= 0; // Reset counter to 0
    else // If reset is low
        counter <= counter + 1; // Increment counter by 1 on every clock cycle
    portF[counter[2:0]] <= portA; // Write portA to portF at the address specified by the lowest three bits of counter
end // End of sequential always block

endmodule // End of module