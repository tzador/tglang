`timescale 1 ns / 1 ps // sets the timescale for simulation

module counter (clk, rst, enable, count); // defines a module for a counter

input clk, rst, enable; // input signals for the counter module
output [3:0] count; // output signal for the counter module, 4 bits wide

reg [3:0] count; // declares a 4 bit register to store the count value
wire clk_2, clk_3, rst_2; // declares wires to create delayed versions of clk and rst

assign clk_2 = clk; // assigns previous value of clk to clk_2
assign clk_3 = clk_2; // assigns previous value of clk_2 to clk_3
assign rst_2 = rst; // assigns previous value of rst to rst_2

always @ (posedge clk_3) begin // creates an always block for sequential logic
	if (rst_2) // checks if reset signal is high
		count <= 4'b0000; // if true, resets count to 0
	else if (enable) begin // checks if enable signal is high
		if (count == 4'b0111) // checks if count is equal to 7
			count <= 4'b0000; // if true, resets count to 0
		else
			count <= count + 1; // if false, increments count by 1
	end
end

endmodule // ends the counter module