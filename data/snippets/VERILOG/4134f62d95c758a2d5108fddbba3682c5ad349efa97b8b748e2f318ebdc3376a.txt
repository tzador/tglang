// This code snippet is a combination of a state machine and a counter module.

module state_machine(
  input logic clock,
  input logic reset,
  output logic[3:0] state
);

  // creating registers for state transitions and counter values
  logic[3:0] current_state;
  logic[3:0] next_state;
  logic[15:0] count;

  // initializing states and counter value
  always_ff @(posedge clock or posedge reset) begin
    if (reset) begin
      current_state <= 4'h0; // starting state
      count <= 16'h0; // reset counter value
    end
    else begin
      current_state <= next_state;
    end
  end

  // state transitions and counter logic
  always_comb begin
    case (current_state)
      4'h0: begin // state 0: counter increment
        next_state = 4'h1;
        count = count + 1;
      end
      4'h1: begin // state 1: counter value check
        if (count == 16'hFFFF) begin // counter reaches maximum value
          next_state = 4'h2; // transition to state 2
          count = 16'h0; // reset counter value
        end
        else begin // counter value not reached
          next_state = 4'h0; // stay in state 0
        end
      end
      4'h2: begin // state 2: counter decrement
        next_state = 4'h3;
        count = count - 1;
      end
      4'h3: begin // state 3: counter value check
        if (count == 16'h0000) begin // counter reaches minimum value
          next_state = 4'h0; // transition back to state 0
          count = 16'hFFFF; // reset counter value
        end
        else begin // counter value not reached
          next_state = 4'h2; // stay in state 2
        end
      end
      default:
        next_state = 4'h0; // default state to prevent invalid states
    endcase
  end

  // output state value
  assign state = current_state;

endmodule