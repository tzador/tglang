module FSM (
    input logic clk, //input for clock signal
    input logic reset, //input for reset signal
    input logic start, //input for start signal
    output logic done //output for done signal
);

    parameter STATE1 = 2'd0; //defining parameter for state 1
    parameter STATE2 = 2'd1; //defining parameter for state 2
    parameter STATE3 = 2'd2; //defining parameter for state 3

    //defining internal state register
    logic [1:0] state_reg;
    //defining next state register
    logic [1:0] next_state_reg;
    //defining output register for done signal
    logic done_reg;

    //synchronous always block for state and output register updates
    always_ff @ (posedge clk or posedge reset) begin
        if (reset) begin
            //resetting state register and output register
            state_reg <= STATE1;
            done_reg <= 1'b0;
        end else begin
            state_reg <= next_state_reg;
            done_reg <= 1'b0;
        end
    end

    //next state logic
    always_comb begin
        case (state_reg)
            STATE1: begin
                if (start) //if start signal is asserted
                    next_state_reg = STATE2; //transition to state 2
                else
                    next_state_reg = STATE1; //stay in state 1
            end
            STATE2: begin
                if (some_condition) //condition for transitioning to state 3
                    next_state_reg = STATE3; //transition to state 3
                else
                    next_state_reg = STATE2; //stay in state 2
            end
            STATE3: begin
                next_state_reg = STATE1; //always transition back to state 1
            end
            default: begin //if any unknown state is reached, return to state 1
                next_state_reg = STATE1;
            end
        endcase
    end

    //assigning output done signal based on current state
    assign done = (state_reg == STATE3) ? 1'b1 : done_reg;

endmodule