// Registers module
module Registers(
  input [7:0] data_in, // Input data
  input clk, // Clock signal
  input load, // Load signal
  output reg [7:0] data_out // Output data
  );

  reg [7:0] register_a; // Register A
  reg [7:0] register_b; // Register B

  always @(posedge clk) // On positive edge of clock
  if (load) // If load signal is high
    register_a <= data_in; // Load data into register A
  else
    register_a <= register_a; // Else keep previous value in register A

  always @(posedge clk) // On positive edge of clock
  if (load) // If load signal is high
    register_b <= data_in; // Load data into register B
  else
    register_b <= register_b; // Else keep previous value in register B

  always @* // Continuous assignment for output
  if (load) // If load signal is high
    data_out = register_a + register_b; // Add values in registers and assign to output
  else
    data_out = register_a; // Else assign value in register A to output
endmodule  // End of module