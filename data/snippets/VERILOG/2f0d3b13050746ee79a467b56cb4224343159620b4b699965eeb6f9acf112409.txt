module ALU (
    input logic [7:0] operand1, // input operand 1
    input logic [7:0] operand2, // input operand 2 
    input logic [2:0] opcode,   // input opcode
    output logic [7:0] result,  // output result of operation
    output logic zero,          // output flag for zero result
    output logic overflow,      // output flag for overflow

    // internal signals
    logic [7:0] sum;        // result of addition
    logic [7:0] difference; // result of subtraction
    logic [7:0] product;    // result of multiplication
    logic [6:0] quotient;   // result of division
    logic [7:0] remainder;  // remainder of division

    always_comb begin
        // determine operation based on opcode
        case (opcode)
            3'b000: begin    // addition
                sum = operand1 + operand2;
                result = sum;
            end

            3'b001: begin    // subtraction
                difference = operand1 - operand2;
                result = difference;
            end

            3'b010: begin    // multiplication
                product = operand1 * operand2;
                result = product;
            end

            3'b011: begin    // division
                quotient = operand1 / operand2;
                remainder = operand1 % operand2;
                result = quotient;
            end

            3'b100: begin    // bitwise AND
                result = operand1 & operand2;
            end

            3'b101: begin    // bitwise OR
                result = operand1 | operand2;
            end

            3'b110: begin    // bitwise XOR
                result = operand1 ^ operand2;
            end

            3'b111: begin    // bitwise NOT
                result = ~operand1;
            end
        endcase
    end

    // determine flags
    assign zero = (result == 0) ? 1 : 0; // set zero flag if result is zero
    assign overflow = (result > 255) ? 1 : 0; // set overflow flag if result is larger than 8 bits

endmodule