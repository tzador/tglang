// Create a 16-bit full adder module
module full_adder(input [15:0] a, b, // 16-bit input wires for operands a and b
                  input cin, // input wire for carry-in
                  output [15:0] sum, // 16-bit output wire for sum
                  output cout); // output wire for carry-out

  wire [15:0] sum_temp; // create wire to hold temporary sum of two bits

  // instantiate first full adder for least significant bit
  half_adder ha1(a[0], b[0], sum_temp[0], cout_temp[0]); // instantiate half adder for LSB
  // use carry-in for initial sum 
  full_adder fa1(sum_temp[0], cin, sum[0], cout_temp[0]); // instantiate full adder for LSB

  // instantiate full adder for all other bits
  genvar i; // use generate loop to instantiate multiple full adders
  generate
    for (i = 1; i < 16; i = i+1) begin : gen_full_adder
      full_adder fa2(a[i], b[i], sum_temp[i], cout_temp[i]); // instantiate full adder for each bit
      fa2.fa1(sum_temp[i-1], fa1.cout, sum[i], fa1.cout); // use previous carry-out for sum and cout
    end
  endgenerate

  assign cout = cout_temp[15]; // assign final carry-out to output wire
endmodule // end full_adder