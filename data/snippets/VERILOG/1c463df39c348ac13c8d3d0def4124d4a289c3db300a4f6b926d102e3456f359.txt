// This code snippet illustrates a finite state machine implementation using Verilog

module fsm(
  input clk,
  input reset,
  input [2:0] in,
  output reg [2:0] out
);

// Variables to store current and next state values
reg [1:0] current_state;
reg [1:0] next_state;

// Define states as parameters
parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;
parameter STATE_C = 2'b10;
parameter STATE_D = 2'b11;

always @ (posedge clk) begin
  if (reset) begin
    current_state <= STATE_A; // Initial state
  end else begin
    current_state <= next_state; // Update current state to be the next state
  end
end

always @ (*) begin
  // Determine next state based on current state and input
  case (current_state)
    STATE_A: begin
      if (in == 3'b001) begin
        next_state = STATE_B;
      end else begin
        next_state = STATE_C;
      end
    end // End of STATE_A

    STATE_B: begin
      if (in == 3'b010) begin
        next_state = STATE_C;
      end else begin
        next_state = STATE_D;
      end
    end // End of STATE_B

    STATE_C: begin
      if (in == 3'b101) begin
        next_state = STATE_A;
      end else begin
        next_state = STATE_D;
      end
    end // End of STATE_C

    STATE_D: begin
      if (in == 3'b010) begin
        next_state = STATE_B;
      end else begin
        next_state = STATE_C;
      end
    end // End of STATE_D
  endcase // End of case statement
end // End of always block

// Output logic
always @ (*) begin
  case (current_state)
    STATE_A: begin
      out = 3'b000;
    end
    STATE_B: begin
      out = 3'b001;
    end
    STATE_C: begin
      out = 3'b010;
    end
    STATE_D: begin
      out = 3'b100;
    end
  endcase // End of case statement
end // End of always block

endmodule // End of module