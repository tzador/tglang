// This is a code snippet of a finite state machine in Verilog
// with a four input and four output design.

module FSM (
    input [3:0] input_signals,
    output [3:0] output_signals,
    input clk, reset_n, enable
);

// Define states of the FSM
parameter IDLE = 2'b00;
parameter STATE_1 = 2'b01;
parameter STATE_2 = 2'b10;
parameter ERROR = 2'b11;

// Define current state and next state variables
reg [1:0] current_state, next_state;

// Define registers for holding output values
reg [3:0] output_register;

// Define state transitions
always @(posedge clk or negedge reset_n) begin
    if(!reset_n) begin
        current_state <= IDLE;
    end else if(enable) begin
        case(current_state)
            IDLE: begin
                output_register <= 4'b0001;
                next_state <= STATE_1;
            end
            STATE_1: begin
                output_register <= input_signals;
                next_state <= STATE_2;
            end
            STATE_2: begin
                output_register <= input_signals + 1;
                next_state <= IDLE;
            end
            default: next_state <= ERROR;
        endcase
    end else begin
        next_state <= current_state;
    end
end

// Assign output signals based on current state
always @(current_state) begin
    case(current_state)
        IDLE: output_signals <= 4'b0001;
        STATE_1: output_signals <= output_register;
        STATE_2: output_signals <= output_register + 1;
        ERROR: output_signals <= 4'b1111;
    endcase
end

endmodule