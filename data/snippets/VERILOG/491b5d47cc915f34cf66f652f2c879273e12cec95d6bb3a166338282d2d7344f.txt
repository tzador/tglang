// Example of an arithmetic logic unit (ALU) with control signals for addition, subtraction, 
// and bitwise AND operations
module ALU(
    input [3:0] a, b, // 4-bit input values
    input [3:0] control, // 4-bit control signal
    output [3:0] result // 4-bit result
);
    
    // Intermediate signals
    wire [3:0] add_result; // Output of the addition operation
    wire [3:0] sub_result; // Output of the subtraction operation
    wire [3:0] and_result; // Output of the bitwise AND operation

    // Addition operation
    // Uses a full adder component
    // Inputs are a, b, and carry-in (set to 0)
    // Outputs are sum and carry-out
    full_adder add_component (.a(a), .b(b), .cin(1'b0), .sum(add_result), .cout());

    // Subtraction operation
    // Uses a 2's complement converter and a full adder component
    // Inputs are a, b, and borrow-in (set to 1)
    // Outputs are difference and borrow-out (used for overflow detection)
    wire [3:0] b_complement; // Inverted bits of b
    wire [3:0] sub_cout; // Temp variable for borrow-out of the full adder
    invert invert_b_b (b, b_complement);
    full_adder sub_component (.a(a), .b(b_complement), .cin(1'b1), .sum(sub_result), .cout(sub_cout));

    // Bitwise AND operation
    // Inputs are a and b
    // Output is the ANDed value
    and and_component (.a(a), .b(b), .out(and_result));

    // Control signals
    // Use the 4-bit control signal to select the appropriate operation result
    always @ (a, b, control)
        case (control)
            4'b0000 : result = add_result;
            4'b0001 : result = sub_result;
            4'b0010 : result = and_result;
            default : result = 4'bxxxx; // Output undefined for invalid control signals
        endcase
endmodule