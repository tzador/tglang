module shift_register (
    input clock,
    input reset,
    input shift_enable,
    input load_enable,
    input [7:0] data_in,
    output [7:0] data_out
);

// This module represents an 8-bit shift register with parallel load.
// The input 'shift_enable' controls the shifting of data, while
// 'load_enable' allows for parallel data loading when high.
// The initial state of the shift register can be reset with 'reset'

reg [7:0] register [0:7]; // creates an 8x8 array of registers to store data
reg [2:0] shift_counter = 0; // keeps track of current shift position
 
always @(posedge (clock) or posedge (reset)) begin
    if (reset) begin // reset the shift register when 'reset' is high
        for (int i=0; i<8; i=i+1)
            register[i] <= 0;
    end
    else if (shift_enable) begin // shift data when 'shift_enable' is high
        shift_counter <= shift_counter + 1;
        for (int i=0; i<7; i=i+1)
            register[i] <= register[i+1];
        register[7] <= 0;
    end
    else if (load_enable) begin // load parallel data when 'load_enable' is high
        for (int i=0; i<8; i=i+1)
            register[i] <= data_in[i];
    end
end

assign data_out = register[0]; // output data from the first register in array

endmodule