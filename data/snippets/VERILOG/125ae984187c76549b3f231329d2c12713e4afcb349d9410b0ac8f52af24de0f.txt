module clock_divider(
    input logic clk, //Clock signal
    input logic en, //Enable signal
    input logic rst, //Reset signal
    output logic [3:0] counter, //4-bit counter output
    output logic out //Divided clock output
    );

    reg [2:0] count; //3-bit register for counting
    always_ff @(posedge clk or posedge rst) //Sensitivity list
    begin
        if(rst) //Check if reset signal is high
            count <= 0; //Reset the counter
        else if(en) //Check if enable signal is high
            count <= count + 1; //Increment the counter
    end

    assign counter = count; //Assign the counter output

    always_comb //Combinational always block
    begin
        out = (count == 0) ? 1'b1 : 1'b0; //Divided clock output, high for 1 clock cycle and low for (count+1) clock cycles
    end
endmodule