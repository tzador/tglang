// This code snippet shows a finite state machine implementation in Verilog

// Declare inputs and outputs
input [2:0] data; // 3-bit input
output reg [1:0] state; // 2-bit output representing state

// Define states using parameters
parameter S0 = 2'b00; // Initial state
parameter S1 = 2'b01; // State 1
parameter S2 = 2'b10; // State 2
parameter S3 = 2'b11; // State 3

// Declare internal signals
reg [2:0] next_state; // 3-bit register for next state

// Define state transitions using always block
always @ (posedge clk) begin // On positive edge of clock
    case (state) // Select state based on current state
        S0: begin // Initial state case
            if (data == 3'b001) // If input is 001
                next_state = S1; // Transition to State 1
            else if (data == 3'b010) // If input is 010
                next_state = S2; // Transition to State 2
            else if (data == 3'b111) // If input is 111
                next_state = S3; // Transition to State 3
            else // If input is anything else
                next_state = S0; // Remain in Initial state
        end
        S1: begin // State 1 case
            if (data == 3'b001) // If input is 001
                next_state = S2; // Transition to State 2
            else if (data == 3'b100) // If input is 100
                next_state = S3; // Transition to State 3
            else // If input is anything else
                next_state = S1; // Remain in State 1
        end
        S2: begin // State 2 case
            if (data == 3'b011) // If input is 011
                next_state = S3; // Transition to State 3
            else // If input is anything else
                next_state = S2; // Remain in State 2
        end
        S3: begin // State 3 case
            if (data == 3'b110) // If input is 110
                next_state = S1; // Transition to State 1
            else if (data == 3'b000) // If input is 000
                next_state = S0; // Transition to Initial state
            else // If input is anything else
                next_state = S3; // Remain in State 3
        end
    endcase
end

// Update state at the end of the always block
always @ (posedge clk)
    state <= next_state; // Assign next state to current state at every positive clock edge