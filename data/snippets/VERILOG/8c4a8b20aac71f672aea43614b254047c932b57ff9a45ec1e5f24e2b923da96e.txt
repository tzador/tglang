/* This code snippet is a 4-bit ripple carry adder with carry-in and carry-out.
   It takes two 4-bit inputs and produces a 4-bit sum output along with the carry-out bit. */

module ripple_carry_adder(input [3:0] A, input [3:0] B, input Cin, output reg [3:0] S, output reg Cout);

// Internal wires to store partial results
wire [3:0] P, G;

// Generate the partial results using AND and XOR gates
assign P = A & B;
assign G = A ^ B;

// Calculate the sum and carry-out using a sequential always block
always @ (posedge A or posedge B or posedge Cin) begin
    S <= A ^ B ^ Cin; // Sum calculation
    Cout <= (P & Cin) | G; // Carry-out calculation
end

endmodule