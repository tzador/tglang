//declaring a 32-bit adder module
module adder32bit(
    input [31:0] A,
    input [31:0] B,
    output [31:0] S
);

//defining internal wires and registers
wire [31:0] C; //carry wire
reg [31:0] tmp; //intermediate register for overflow detection
reg [31:0] overflow; //register for storing overflow

//performing addition using 32 full-adder modules
//each full-adder module takes in two inputs and produces two outputs (sum and carry)
//S is the sum of A and B, calculated by cascading the outputs of all 32 full-adder modules
//C is the final carry-out of the adder, indicating whether an overflow occurred or not
//tmp is used to store intermediate values for detecting overflow
//overflow is set to 1 if there is overflow, and 0 otherwise
//the process statement is used to define the behavior of the adder
//the @(*) annotation ensures continuous updating of the output values
genvar i; //generate variable for loop
generate //generate statement to create multiple instances of the full-adder module
    for(i=0; i<32; i=i+1) //loop to create 32 instances
        full_adder #(i) //passing the generate variable as a parameter to the full-adder module
        inst (.A(A[i]), .B(B[i]), .C(C[i]), .S(S[i])); //creating instance of full-adder module and connecting inputs and outputs
endgenerate

//process statement to detect overflow
always @(*) begin
    tmp = A + B; //calculate the sum of A and B in the intermediate register
    if(tmp[31]==1) //if the MSB is 1, overflow occurred
        overflow = 1; //setting overflow to 1
    else
        overflow = 0; //setting overflow to 0
end

endmodule //end of module