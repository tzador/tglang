// This code snippet is a 4-bit ripple carry adder
// It takes two 4-bit inputs (A and B) and outputs their sum in a 4-bit result

module four_bit_adder(
  input [3:0] A, // 4-bit input A
  input [3:0] B, // 4-bit input B
  output [3:0] sum // 4-bit output sum
);

reg [3:0] sum; // register to hold the sum value
wire [3:0] carry; // wire to hold the carry value

// create a full adder instance for each bit of the inputs
// the output of each adder is connected to the next adder's carry input
full_adder fa0(A[0], B[0], 1'b0, sum[0], carry[0]);
full_adder fa1(A[1], B[1], carry[0], sum[1], carry[1]);
full_adder fa2(A[2], B[2], carry[1], sum[2], carry[2]);
full_adder fa3(A[3], B[3], carry[2], sum[3], carry[3]);

// assign the carry wire to the 5th bit of the output sum
assign sum[4] = carry[3];

endmodule

// full adder module to add three inputs (A, B, and C)
// the output sum is the sum of the three inputs, and the carry output is the carry bit
module full_adder(
  input A, // first input
  input B, // second input
  input C, // third input
  output sum, // sum output
  output carry // carry output
);

assign sum = (A ^ B) ^ C; // use XOR gates to calculate the sum
assign carry = (A & B) | (A & C) | (B & C); // use AND gates to calculate the carry

endmodule