/*
* This is a verilog code for a 4-bit Ripple Carry Adder
* This adder supports input carry and calculates the sum and carry for 4-bit operands
* The carry-out is the final output, while the sum is stored in a 4-bit register
*/

module ripple_carry_adder(input [3:0] A, input [3:0] B, input cin, output cout, output [3:0] sum);

    // Declare internal signals
    reg [3:0] carry_temp; // Store interim carry values
    reg [3:0] sum_temp;  // Store interim sum values

    // Calculate sum and carry for the first bit
    assign {cout, carry_temp[0]} = A[0] + B[0] + cin;

    // Calculate sum and carry for the remaining bits using a for loop
    // Note: The loop starts from i = 1 as the first bit has already been calculated
    genvar i;
    generate
        for (i = 1; i < 4; i = i + 1) begin : loop
            assign {carry_temp[i], sum_temp[i]} = A[i] + B[i] + carry_temp[i - 1];
        end
    endgenerate

    // Store the final carry value
    assign cout = carry_temp[3];

    // Store the final sum value
    assign sum = sum_temp;

endmodule