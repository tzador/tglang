//This is a Verilog code snippet that implements a 3-bit up-counter
//It uses a combinational logic for sequential counting

module upCounter(
input CLK, //input clock
input RESET, //input reset signal
input ENABLE, //input enable signal
output reg [2:0] count //output count signal
);

always @(posedge CLK) begin //always block triggered on positive edge of clock
    if (RESET) begin //if reset signal is active
        count <= 0; //reset count to 0
    end else if (ENABLE) begin //if enable signal is active
        case(count) //use case statement for different count values
            3'h0: count <= 3'h1; //if count is 000, increment to 001
            3'h1: count <= 3'h2; //if count is 001, increment to 010
            3'h2: count <= 3'h3; //if count is 010, increment to 011
            3'h3: count <= 3'h0; //if count is 011, increment to 100 (wrap around)
            default: count <= 3'h0; //if none of the above, reset count to 000
        endcase
    end else begin //if neither reset nor enable signal is active
        count <= count; //maintain current count value
    end
end

endmodule