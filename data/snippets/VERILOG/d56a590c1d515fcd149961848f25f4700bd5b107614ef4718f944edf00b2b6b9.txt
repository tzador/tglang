module full_adder ( input [1:0] a, b, input carry_in, output [1:0] sum, output carry_out );

	// Declare variables for intermediate steps
	wire a_xor_b;
	wire b_xor_carry_in;
	wire a_and_b;
	wire b_and_carry_in;
	wire a_and_carry_in;
	wire carry_out1;
	wire carry_out2;

	// Calculate intermediate steps
	xor(a_xor_b, a, b);
	xor(b_xor_carry_in, b, carry_in);
	and(a_and_b, a, b);
	and(b_and_carry_in, b, carry_in);
	and(a_and_carry_in, a, carry_in);

	// Perform full adder logic
	assign sum[0] = a_xor_b;
	and(sum[1], a_xor_b, b_xor_carry_in);
	and(carry_out1, a_and_b, b_xor_carry_in);
	or(carry_out2, b_and_carry_in, a_and_carry_in);
	assign carry_out = carry_out1 | carry_out2;
  
endmodule