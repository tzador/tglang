// Module to store and display a binary number
module binary_number(
  input [7:0] num, // 8-bit binary number
  output reg [7:0] led, // LED array to display binary number
  output reg [2:0] seg); // seven segment display value

// Define seven segment display values for binary numbers 0-9
reg [2:0] seg_values[9:0] = {7'b0111111, 7'b0000110, 7'b1011011, 7'b1001111, 7'b1100110,
                             7'b1101101, 7'b1111101, 7'b0000111, 7'b1111111, 7'b1101111};

// Declare a wire for each segment of the seven segment display
wire seg0, seg1, seg2, seg3, seg4, seg5, seg6;

// Assign each wire to the corresponding segment of the seven segment display
assign seg[0] = seg0;
assign seg[1] = seg1;
assign seg[2] = seg2;
assign seg[3] = seg3;
assign seg[4] = seg4;
assign seg[5] = seg5;
assign seg[6] = seg6;

// Use a case statement to determine which seven segment display values to assign to each wire
always @* begin
  case(num)
    8'h0: begin
      seg0 = seg_values[0][0];
      seg1 = seg_values[0][1];
      seg2 = seg_values[0][2];
      seg3 = seg_values[0][3];
      seg4 = seg_values[0][4];
      seg5 = seg_values[0][5];
      seg6 = seg_values[0][6];
    end
    8'h1: begin
      seg0 = seg_values[1][0];
      seg1 = seg_values[1][1];
      seg2 = seg_values[1][2];
      seg3 = seg_values[1][3];
      seg4 = seg_values[1][4];
      seg5 = seg_values[1][5];
      seg6 = seg_values[1][6];
    end
    8'h2: begin
      seg0 = seg_values[2][0];
      seg1 = seg_values[2][1];
      seg2 = seg_values[2][2];
      seg3 = seg_values[2][3];
      seg4 = seg_values[2][4];
      seg5 = seg_values[2][5];
      seg6 = seg_values[2][6];
    end
    8'h3: begin
      seg0 = seg_values[3][0];
      seg1 = seg_values[3][1];
      seg2 = seg_values[3][2];
      seg3 = seg_values[3][3];
      seg4 = seg_values[3][4];
      seg5 = seg_values[3][5];
      seg6 = seg_values[3][6];
    end
    8'h4: begin
      seg0 = seg_values[4][0];
      seg1 = seg_values[4][1];
      seg2 = seg_values[4][2];
      seg3 = seg_values[4][3];
      seg4 = seg_values[4][4];
      seg5 = seg_values[4][5];
      seg6 = seg_values[4][6];
    end
    8'h5: begin
      seg0 = seg_values[5][0];
      seg1 = seg_values[5][1];
      seg2 = seg_values[5][2];
      seg3 = seg_values[5][3];
      seg4 = seg_values[5][4];
      seg5 = seg_values[5][5];
      seg6 = seg_values[5][6];
    end
    8'h6: begin
      seg0 = seg_values[6][0];
      seg1 = seg_values[6][1];
      seg2 = seg_values[6][2];
      seg3 = seg_values[6][3];
      seg4 = seg_values[6][4];
      seg5 = seg_values[6][5];
      seg6 = seg_values[6][6];
    end
    8'h7: begin
      seg0 = seg_values[7][0];
      seg1 = seg_values[7][1];
      seg2 = seg_values[7][2];
      seg3 = seg_values[7][3];
      seg4 = seg_values[7][4];
      seg5 = seg_values[7][5];
      seg6 = seg_values[7][6];
    end
    8'h8: begin
      seg0 = seg_values[8][0];
      seg1 = seg_values[8][1];
      seg2 = seg_values[8][2];
      seg3 = seg_values[8][3];
      seg4 = seg_values[8][4];
      seg5 = seg_values[8][5];
      seg6 = seg_values[8][6];
    end
    8'h9: begin
      seg0 = seg_values[9][0];
      seg1 = seg_values[9][1];
      seg2 = seg_values[9][2];
      seg3 = seg_values[9][3];
      seg4 = seg_values[9][4];
      seg5 = seg_values[9][5];
      seg6 = seg_values[9][6];
    end
  endcase
end

// Declare a counter to keep track of which LED to turn on
reg [2:0] counter = 3'b000;

// Create a clock that only increments the counter when it is high
always @(posedge clk) begin
  if(~reset) begin
    counter <= 3'b000;
  end else begin
    counter <= counter + 1'b1;
  end
end

// Use the counter to determine which LED to turn on and off
always @* begin
  case(counter)
    3'b000: begin
      led = 8'b00000001;
    end
    3'b001: begin
      led = 8'b00000010;
    end
    3'b010: begin
      led = 8'b00000100;
    end
    3'b011: begin
      led = 8'b00001000;
    end
    3'b100: begin
      led = 8'b00010000;
    end
    3'b101: begin
      led = 8'b00100000;
    end
    3'b110: begin
      led = 8'b01000000;
    end
    3'b111: begin
      led = 8'b10000000;
    end
  endcase
end

endmodule