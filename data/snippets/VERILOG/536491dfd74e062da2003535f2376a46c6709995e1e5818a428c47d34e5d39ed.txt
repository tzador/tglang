// This code snippet is an example of a module that implements a 4-bit counter using flip-flops.

module counter(
    input clk, // clock input
    input rst, // active high reset input
    output reg [3:0] count // 4-bit output count
);

// internal wires
wire [3:0] next_count; // stores next count value
wire [3:0] current_count; // stores current count value

// flip-flops for storing count value
reg [3:0] ff1; 
reg [3:0] ff2;
reg [3:0] ff3;
reg [3:0] ff4;

// always block for synchronous logic
always @ (posedge clk, posedge rst) begin
    // if reset signal is high, reset the counter value to 0
    if (rst) begin
        ff1 <= 4'b0000;
        ff2 <= 4'b0000;
        ff3 <= 4'b0000;
        ff4 <= 4'b0000;
    end
    // if clock signal is high, update the count value
    else begin
        ff1 <= next_count[0];
        ff2 <= next_count[1];
        ff3 <= next_count[2];
        ff4 <= next_count[3];
    end
end

// always block for combinational logic
always @ (*) begin
    // calculate next count value based on current count value
    next_count = (current_count == 4'b1001) ? 4'b0000 : current_count + 1;
end

// assign current count value to output
assign current_count = count;

endmodule