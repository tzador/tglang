module adder (input [7:0] a, input [7:0] b, output [8:0] sum);
    // input declarations for two 8-bit numbers, a and b
    // output will be a 9-bit sum (8 bits + carry)
    
    wire [7:0] carry_out; // declare a 1-bit wire for carry out
    
    assign {carry_out, sum[7:0]} = a + b; // use concatenation to assign sum
    assign sum[8] = carry_out; // assign carry out bit to MSB of output
    
    // adder logic
    // three bits are added at a time, LSB first
    // LSB is calculated by adding the two LSBs of a and b, and checking for carry out
    // next two bits are added by including the carry out from previous adder
    // MSB adder includes carry out from previous adder and produces carry out for next adder
    
    // LSB adder
    assign {carry_out, sum[1:0]} = a[1:0] + b[1:0];
    
    // second bit adder
    assign {carry_out, sum[3:2]} = a[3:2] + b[3:2] + carry_out;
    
    // third bit adder
    assign {carry_out, sum[5:4]} = a[5:4] + b[5:4] + carry_out;
    
    // MSB adder
    assign {carry_out, sum[7:6]} = a[7:6] + b[7:6] + carry_out;
endmodule