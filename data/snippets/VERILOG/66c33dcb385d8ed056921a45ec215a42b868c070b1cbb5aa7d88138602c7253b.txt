module calculator (
    input [7:0] a,
    input [7:0] b,
    input [2:0] op,
    output [7:0] result
);

    // Input and output declarations
    input [7:0] a;					// First input operand
    input [7:0] b;					// Second input operand
    input [2:0] op;					// Operation select
    output [7:0] result;				// Output result

	// Declare internal signals
	reg [7:0] temp1, temp2;			// Temporary storage for input operands
	reg [8:0] temp3;				// Temporary register for operation result
	reg [2:0] state;				// State register for controlling operation steps
	
	// State definitions
	localparam IDLE = 3'b000;		// Idle state, waiting for inputs
	localparam INPUT = 3'b001;		// Input state, waiting for second input
	localparam ADD = 3'b010;		// Addition state
	localparam SUB = 3'b011;		// Subtraction state
	localparam MULT = 3'b100;		// Multiplication state
	
	// Combinational logic for performing operations
	always @* begin
		// Perform addition
		if (op == 3'b000) begin
			temp3 = temp1 + temp2;
		end
		
		// Perform subtraction
		else if (op == 3'b001) begin
			temp3 = temp1 - temp2;
		end
		
		// Perform multiplication
		else if (op == 3'b010) begin
			temp3 = temp1 * temp2;
		end
	end
	
	// State machine to control operation sequence
	always @(posedge CLK) begin
		case (state)
			IDLE: begin				// Idle state, waiting for inputs
				temp1 = a;
				temp2 = b;
				result = 8'b0;
				state = INPUT;		// Transition to input state
			end
			
			INPUT: begin				// Input state, waiting for second input
				temp1 = a;
				temp2 = b;
				state = op;			// Transition to operation state
			end
			
			ADD: begin				// Addition state
				result = temp3;		// Output result
				state = IDLE;		// Return to idle state
			end
			
			SUB: begin				// Subtraction state
				result = temp3;		// Output result
				state = IDLE;		// Return to idle state
			end
			
			MULT: begin				// Multiplication state
				result = temp3;		// Output result
				state = IDLE;		// Return to idle state
			end
		endcase
	end
	
endmodule