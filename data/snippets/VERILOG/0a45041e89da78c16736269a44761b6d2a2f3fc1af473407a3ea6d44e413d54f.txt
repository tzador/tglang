// This is a verilog code snippet that performs a 32-bit multiplication of two inputs, a and b, and outputs their result in a 64-bit register
module multiplier_32bit(a, b, mult_result);
input [31:0] a, b; // input signals a and b, each 32 bits in size
output [63:0] mult_result; // output signal mult_result, 64 bits in size

reg [31:0] product [0:31]; // register for storing the partial products of a and b
reg [63:0] temporary_result; // register for storing the temporary result of the multiplication
integer i; // integer variable for looping

always @(*) begin // synchronous always block
    for(i=0; i<32; i=i+1) begin // loop for performing 32 cycles of multiplication
        product[i] = a * b[i]; // multiplying a with each bit of b and storing in corresponding index of product register
    end
    temporary_result = 0; // initialize temporary result to 0
    for(i=0; i<32; i=i+1) begin
        temporary_result = temporary_result + (product[i] << (i + 1)); // shifting each partial product by a specific amount and adding to temporary result
    end
    mult_result <= temporary_result; // assign temporary result to output signal
end

endmodule // end of module multiplier_32bit