module adder (
  input logic [7:0] a, 
  input logic [7:0] b, 
  output logic [8:0] sum
);

  always_comb begin
    sum[0] = a[0] ^ b[0]; // First bit of sum is XOR of first bits of a and b
    sum[1] = a[1] ^ b[1]; // Second bit of sum is XOR of second bits of a and b
    sum[2] = a[2] ^ b[2]; // Third bit of sum is XOR of third bits of a and b
    sum[3] = a[3] ^ b[3]; // Fourth bit of sum is XOR of fourth bits of a and b
    sum[4] = a[4] ^ b[4]; // Fifth bit of sum is XOR of fifth bits of a and b
    sum[5] = a[5] ^ b[5]; // Sixth bit of sum is XOR of sixth bits of a and b
    sum[6] = a[6] ^ b[6]; // Seventh bit of sum is XOR of seventh bits of a and b
    sum[7] = a[7] ^ b[7]; // Eighth bit of sum is XOR of eighth bits of a and b
    sum[8] = 0;           // Ninth bit of sum is 0, representing carry bit
    
    if ((a[7] && b[7]) || (!sum[7] && (a[7] || b[7]))) begin
      // If both the eighth bits of a and b are 1, or
      // if the ninth bit of sum is not 1 and either
      // the eighth bit of a or b is 1, then the
      // carry bit is 1.
      sum[8] = 1; // Set carry bit to 1
    end
  end
  
endmodule