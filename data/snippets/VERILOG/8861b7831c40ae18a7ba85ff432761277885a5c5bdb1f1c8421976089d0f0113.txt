//This code snippet shows a simple implementation of a 4-bit shift register with a parallel load control.

//Define the module name
module ShiftRegister4BitParallelLoad(input data, input clk, input load, output reg [3:0] q);

//Define internal signals
reg [3:0] q_internal; //Output register
wire [2:0] q_shift; //Shifted output

//Assign shift logic using verilog's parameterized for-loop
genvar i;
generate
  for(i=0; i<3; i=i+1) begin: SHIFT
    assign q_shift[i] = q_internal[i+1];
  end
endgenerate

//Assign output register using a ternary operation
assign q = (load) ? data : q_shift;

//Create always block for sequential logic
always @(posedge clk) begin
  if(load) begin
    //Load data into output register when load is high
    q_internal <= data;
  end
  else begin
    //Shift data when load is low
    q_internal <= q_shift;
  end
end
endmodule