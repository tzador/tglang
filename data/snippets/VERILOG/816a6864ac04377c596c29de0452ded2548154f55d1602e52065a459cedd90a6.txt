// This is a code snippet in VERILOG that creates a module with inputs, outputs and internal variables
module circuit(input a, input b, input c, output out1, output out2, output out3);
	// declare internal variables
	reg x;
	wire y, z;
	
	// assign statements to internal variables
	assign y = a & b; // bitwise AND operation
	assign z = y | c; // bitwise OR operation
	always @(posedge x) begin // always block with posedge clock condition
		out1 <= z; // output out1 updated with value of z
		out2 <= y; // output out2 updated with value of y
		$display("z: %b, y: %b", z, y); // display statement to show values of variables
	end
	
	// instantiate another module within this module
	submodule1 submod1(.in1(a), .in2(b), .out1(c));
	
	// use conditional statements
	if (x) begin
		out3 <= z;
	end else begin
		out3 <= 1'b0;
	end
endmodule

// submodule declaration
module submodule1(input in1, input in2, output out1);
	reg c;
	
	// use a case statement
	casez({in1, in2})
		2'b11: c = 1'b1; // if in1 and in2 are both 1, then c is assigned 1
		2'b10: c = in1; // if in1 is 1 and in2 is 0, then c is assigned in1's value
		2'b01: c = in2; // if in1 is 0 and in2 is 1, then c is assigned in2's value
	endcase
	assign out1 = c; // assign out1 as c's value
endmodule