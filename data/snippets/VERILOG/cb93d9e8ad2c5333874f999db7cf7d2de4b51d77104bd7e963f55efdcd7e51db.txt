module adder(input clk, input [3:0] A, input [3:0] B, output reg [4:0] sum);

    //Output register for sum
    reg [4:0] temp_sum;
    
    // Registers for storing carry bits
    reg [3:0] carry_1, carry_0;
    
    // First stage of adder: sum without carry bit
    always @(posedge clk) begin
        temp_sum = A + B;
    end
    
    // Second stage of adder: calculate carry bits
    always @(posedge clk) begin
        carry_1 = (A[3] & B[3]) | (A[3] & carry_0) | (B[3] & carry_0);
        carry_0 = (A[2] & B[2]) | (A[2] & B[3]) | (A[3] & B[2]);
    end
    
    // Final stage of adder: combine sum and carry bits and store in output register
    always @(posedge clk) begin
        sum = temp_sum + {carry_1, carry_0};
    end
endmodule