// This is a 32-bit ripple carry adder.
module rippleCarryAdder(A, B, Cin, Sum, Cout);
    // Declare inputs and outputs.
    input [31:0] A, B;
    input Cin;
    output [31:0] Sum;
    output Cout;

    // Declare internal signals.
    wire [31:0] sum_wire;
    wire carry_out;

    // Implement the adder using a for loop.
    genvar i;
    generate
        for (i = 0; i < 32; i = i + 1) begin
            // Use full adder module at each stage.
            fullAdder FA(A[i], B[i], Cin, sum_wire[i], carry_out);
            assign Cin = carry_out;
        end
    endgenerate

    // Assign output and carry out.
    assign Sum = sum_wire;
    assign Cout = carry_out;
endmodule

// Create a full adder module.
module fullAdder(A, B, Cin, Sum, Cout);
    // Declare inputs and outputs.
    input A, B, Cin;
    output Sum, Cout;

    // Create internal signals.
    wire sum_wire1, sum_wire2, carry_out1, carry_out2;

    // Implement the adder using logic gates.
    assign sum_wire1 = A ^ B;
    assign sum_wire2 = sum_wire1 ^ Cin;
    assign Sum = sum_wire2;
    assign carry_out1 = A & B;
    assign carry_out2 = A | B;
    assign Cout = carry_out1 | (carry_out2 & Cin);
endmodule