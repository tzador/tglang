//This is a module declaration in Verilog
module myModule (
    input clk, //clock input
    input [3:0] data, //4-bit data input
    output reg [7:0] out //8-bit register output
);

//This is an always block, which is used to create synchronous logic
always @ (posedge clk) begin
    //this is a case statement
    //it checks the value of the data input and assigns a value to the output register accordingly
    case (data)
        4'b0000: out <= 8'b00000000; //if data is 4'b0000, output is 8'b00000000
        4'b0001: out <= 8'b00000001; //if data is 4'b0001, output is 8'b00000001
        4'b0010: out <= 8'b00000010; //if data is 4'b0010, output is 8'b00000010
        4'b0011: out <= 8'b00000011; //if data is 4'b0011, output is 8'b00000011
        4'b0100: out <= 8'b00000100; //if data is 4'b0100, output is 8'b00000100
        4'b0101: out <= 8'b00000101; //if data is 4'b0101, output is 8'b00000101
        4'b0110: out <= 8'b00000110; //if data is 4'b0110, output is 8'b00000110
        4'b0111: out <= 8'b00000111; //if data is 4'b0111, output is 8'b00000111
        4'b1000: out <= 8'b00001000; //if data is 4'b1000, output is 8'b00001000
        4'b1001: out <= 8'b00001001; //if data is 4'b1001, output is 8'b00001001
        4'b1010: out <= 8'b00001010; //if data is 4'b1010, output is 8'b00001010
        4'b1011: out <= 8'b00001011; //if data is 4'b1011, output is 8'b00001011
        4'b1100: out <= 8'b00001100; //if data is 4'b1100, output is 8'b00001100
        4'b1101: out <= 8'b00001101; //if data is 4'b1101, output is 8'b00001101
        4'b1110: out <= 8'b00001110; //if data is 4'b1110, output is 8'b00001110
        4'b1111: out <= 8'b00001111; //if data is 4'b1111, output is 8'b00001111
        default: out <= 8'b00000000; //if data is not any of the above, output is 8'b00000000
    endcase
end
endmodule