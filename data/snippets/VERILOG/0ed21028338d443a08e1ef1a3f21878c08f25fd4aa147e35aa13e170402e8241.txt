module encoder(
    input logic [7:0] input_data,
    output logic [1:0] output_data
);

    always_comb begin
        case(input_data)
            8'h00: output_data = 2'b00; // if input is 0x00, output is 2'b00
            8'h01: output_data = 2'b01; // if input is 0x01, output is 2'b01
            8'h02: output_data = 2'b01; // if input is 0x02, output is 2'b01
            8'h03: output_data = 2'b11; // if input is 0x03, output is 2'b11
            8'h04: output_data = 2'b01; // if input is 0x04, output is 2'b01
            8'h05: output_data = 2'b11; // if input is 0x05, output is 2'b11
            8'h06: output_data = 2'b11; // if input is 0x06, output is 2'b11
            8'h07: output_data = 2'b10; // if input is 0x07, output is 2'b10
            8'h08: output_data = 2'b10; // if input is 0x08, output is 2'b10
            8'h09: output_data = 2'b10; // if input is 0x09, output is 2'b10
            8'h0A: output_data = 2'b10; // if input is 0x0A, output is 2'b10
            8'h0B: output_data = 2'b10; // if input is 0x0B, output is 2'b10
            8'h0C: output_data = 2'b10; // if input is 0x0C, output is 2'b10
            8'h0D: output_data = 2'b10; // if input is 0x0D, output is 2'b01
            8'h0E: output_data = 2'b11; // if input is 0x0E, output is 2'b11
            8'h0F: output_data = 2'b11; // if input is 0x0F, output is 2'b11
            default: output_data = 2'b00; // if input is anything else, output is 2'b00
        endcase
    end
    
endmodule