// Define array of inputs and output
input [3:0] A;
input [3:0] B;
input [3:0] C;
output [3:0] Z;

// Use a case statement to perform bitwise operations on inputs
always @ (*)
begin
    case (A[0])
        1'b0: Z[0] = B[0] & C[0];
        1'b1: Z[0] = B[0] | C[0];
    endcase

    case (A[1])
        1'b0: Z[1] = B[1] & C[1];
        1'b1: Z[1] = B[1] | C[1];
    endcase

    case (A[2])
        1'b0: Z[2] = B[2] & C[2];
        1'b1: Z[2] = B[2] | C[2];
    endcase

    case (A[3])
        1'b0: Z[3] = B[3] & C[3];
        1'b1: Z[3] = B[3] | C[3];
    endcase
end

// Define a register with a positive edge clock and asynchronous reset
// Store the value of Z from the case statement
reg [3:0] D;

always @ (posedge clk or negedge rst_n)
begin
    if (!rst_n) // asynchronous reset
        D <= 4'b0000;
    else // positive edge clock
        D <= Z;
end

// Add in a shift register using a for loop and conditional statements
reg [3:0] E;

always @ (*)
begin
    for (i = 0; i < 4; i = i + 1)
    begin
        if (i == 0) // first index
            E[0] = D[3];
        else if (i == 1) // second index
            E[1] = D[0];
        else if (i == 2) // third index
            E[2] = D[1];
        else if (i == 3) // fourth index
            E[3] = D[2];
    end
end

// Output the final result
assign Z = E;