// this code snippet creates a 4-bit adder using full adders

//define module with four inputs (A,B,C_in,Clock) and two outputs (S_out, C_out)
module four_bit_adder(A,B,C_in,Clock,S_out,C_out);

//declare four 1-bit inputs
input A;
input B;
input C_in;
input Clock;

//declare two 2-bit outputs
output [3:0] S_out;
output C_out;

//define signals for intermediate calculations
wire [3:0] sum;
wire [3:0] carry;

//create instance of full adder for each bit
four_bit_full_adder fa0(.A(A), .B(B), .C_in(C_in), .S(sum[0]), .C_out(carry[0]));
four_bit_full_adder fa1(.A(A), .B(B), .C_in(carry[0]), .S(sum[1]), .C_out(carry[1]));
four_bit_full_adder fa2(.A(A), .B(B), .C_in(carry[1]), .S(sum[2]), .C_out(carry[2]));
four_bit_full_adder fa3(.A(A), .B(B), .C_in(carry[2]), .S(sum[3]), .C_out(carry[3]));

//assign values to outputs
assign S_out = sum; //result of addition is stored in S_out
assign C_out = carry[3]; //final carry out is stored in C_out

//create clocked process
always @ (posedge Clock) begin
	//perform addition only when clock is in rising edge
	S_out <= sum; 
	C_out <= carry[3];
end

endmodule

//define full adder module with three inputs (A,B,C_in) and two outputs (S_out, C_out)
module four_bit_full_adder(A,B,C_in,S_out,C_out);

//declare three 1-bit inputs
input A;
input B;
input C_in;

//declare two 1-bit outputs
output S_out;
output C_out;

//define signals for intermediate calculations
wire sum;
wire carry_out;

//addition operation using XOR gate
assign sum = A ^ B ^ C_in;

//carry out calculation using AND and OR gates
assign carry_out = (A & B) | (B & C_in) | (A & C_in);

//assign values to outputs
assign S_out = sum; //result of addition is stored in S_out
assign C_out = carry_out; //carry out is stored in C_out

endmodule