//Defining a 4-bit Shift Register
module shift_register(input clk, input reset, input enable, input [3:0] data, output [3:0] q);
    reg [3:0] reg_data; //creating a 4-bit register

    always @(posedge clk or posedge reset) begin
        if (reset) begin //resetting the register to 0
            reg_data <= 4'b0;
        end else if (enable) begin //if enable is high, shift data into register
            reg_data <= {reg_data[2:0], data[0]}; //shifts data from inputs into register, pushing oldest bit out
        end
    end

    assign q = reg_data; //output data from register

endmodule