module ALU(input [7:0] A, input [7:0] B, input opcode, output reg [7:0] OUT);
always @* begin
    // Performs addition if opcode is 0
    if (opcode == 0) begin
        OUT = A + B;
    end
    // Performs subtraction if opcode is 1
    else if (opcode == 1) begin
        OUT = A - B;
    end
    // Performs bitwise AND if opcode is 2
    else if (opcode == 2) begin
        OUT = A & B;
    end
    // Performs bitwise OR if opcode is 3
    else if (opcode == 3) begin
        OUT = A | B;
    end
    // Performs bitwise XOR if opcode is 4
    else if (opcode == 4) begin
        OUT = A ^ B;
    end
    // Performs bitwise NOR if opcode is 5
    else if (opcode == 5) begin
        OUT = ~(A | B);
    end
    // Performs bitwise NAND if opcode is 6
    else if (opcode == 6) begin
        OUT = ~(A & B);
    end
    // Performs left shift on A by B if opcode is 7
    else if (opcode == 7) begin
        OUT = A << B;
    end
    // Performs right shift on A by B if opcode is 8
    else if (opcode == 8) begin
        OUT = A >> B;
    end
    // Performs logical shift left on A by B if opcode is 9
    else if (opcode == 9) begin
        OUT = A >>> B;
    end
    // Performs logical shift right on A by B if opcode is 10
    else if (opcode == 10) begin
        OUT = A <<< B;
    end
    // Sets OUT to 0 if opcode is not within 0-10
    else begin
        OUT = 0;
    end
end
endmodule