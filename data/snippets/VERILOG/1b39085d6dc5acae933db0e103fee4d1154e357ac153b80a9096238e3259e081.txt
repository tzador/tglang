/* This is a verilog code snippet that implements a 4-bit adder with carry in and carry out */
module adder_4bit(
    input [3:0] a, b, // 4-bit inputs
    input carry_in,   // carry in input
    output [3:0] sum, // 4-bit output
    output carry_out  // carry out output
    );
    
    wire [3:0] sum_temp;              // declare a 4-bit wire for intermediate sum
    wire carry_intermediate, overflow; // declare two wires for intermediate carry and overflow
    
    /* instantiate full adder modules for each bit */
    full_adder fa0 (a[0], b[0], carry_in, sum_temp[0], carry_intermediate, overflow);
    full_adder fa1 (a[1], b[1], carry_intermediate, sum_temp[1], carry_intermediate, overflow);
    full_adder fa2 (a[2], b[2], carry_intermediate, sum_temp[2], carry_intermediate, overflow);
    full_adder fa3 (a[3], b[3], carry_intermediate, sum_temp[3], carry_out, overflow);
    
    /* assign sum and carry out outputs */
    assign sum = sum_temp;
    assign carry_out = carry_intermediate;

endmodule

/* define full adder module */
module full_adder(
    input a, b, carry_in,   // inputs
    output sum, carry_out,  // outputs
    output overflow         // output for overflow detection
    );
    
    /* use XOR gates to calculate sum and carry out */
    assign sum = a ^ b ^ carry_in;
    assign carry_out = (a & b) | (a & carry_in) | (b & carry_in);
    
    /* use AND gates to detect overflow */
    assign overflow = ((a & b & carry_in) | (~a & ~b & carry_in)) ? 1'b1 : 1'b0;

endmodule