// This code snippet is a register file in Verilog with 8 bit inputs and outputs
`timescale 1ns / 1ps // define the timescale of the circuit
module register_file (
    input logic clock, // define the clock signal
    input logic [7:0] address_1, // define the first address input
    input logic [7:0] address_2, // define the second address input
    input logic [1:0] write_enable, // define the write enable input
    input logic [7:0] write_data, // define the data to be written
    output logic [7:0] output_1, // define the first output
    output logic [7:0] output_2 // define the second output
);

logic [7:0] registers [0:255]; // create an array of 256 8-bit registers

// always block to handle write operations
always @ (posedge clock) begin
    if (write_enable == 2'b01) begin // if write enable is high (01)
        registers[address_1] <= write_data; // store the write data in the register at address_1
        registers[address_2] <= write_data; // store the write data in the register at address_2
    end
    else if (write_enable == 2'b10) begin // if write enable is high (10)
        registers[address_l] <= write_data; // store the write data in the register at address_1
        registers[address_2] <= write_data; // store the write data in the register at address_2
    end
end

// always block to handle read operations
always @ (*) begin
    output_1 <= registers[address_1]; // assign the value of the register at address_1 to output_1
    output_2 <= registers[address_2]; // assign the value of the register at address_2 to output_2
end

endmodule // end of register_file module