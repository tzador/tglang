// This code snippet shows an example of a finite state machine implemented in verilog
// It is a Mealy Machine, meaning that both the outputs and the next state are determined by the current state and the inputs.

// Defining the states and inputs
typedef enum logic[2:0] {S0, S1, S2} state;
typedef enum logic[1:0] {A, B} input;

// Defining the state register and next state logic
always @ (posedge clk)
begin
    case (state)     // current state
        // State S0: output is 0 and next state is S1 if input A, else S0
        S0: begin
            output = 0;
            next_state = (input == A) ? S1 : S0;
        end
        // State S1: output is 1 and next state is S2 if input A, else S0
        S1: begin
            output = 1;
            next_state = (input == A) ? S2 : S0;
        end
        // State S2: output is 1 and next state is S0 if input A, else S0
        S2: begin
            output = 1;
            next_state = (input == A) ? S0 : S0;
        end
    endcase
end

// Defining the combinational logic for output and next state
always @ (*)
begin
    case (state)     // current state
        // State S0: output is 0 and next state is S1 if input A, else S0
        S0: begin
            output = 0;
            next_state = (input == A) ? S1 : S0;
        end
        // State S1: output is 1 and next state is S2 if input A, else S0
        S1: begin
            output = 1;
            next_state = (input == A) ? S2 : S0;
        end
        // State S2: output is 1 and next state is S0 if input A, else S0
        S2: begin
            output = 1;
            next_state = (input == A) ? S0 : S0;
        end
    endcase
end

// Defining the D flip flop to handle the next state
always @ (posedge clk, posedge rst)
begin
    if (rst)
        state = S0;     // reset to initial state
    else
        state = next_state;     // update state to next state
end

// Defining the testbench to simulate the finite state machine
module fsm_tb;
    // Define inputs and outputs
    reg clk, rst, input;
    wire output;

    // Instantiate the finite state machine module
    fsm fsm_inst(.clk(clk), .rst(rst), .input(input), .output(output));

    // Clock generation
    always #10 clk = ~clk;

    // Reset generation
    initial begin
        rst = 0;
        #20 rst = 1;
        #20 rst = 0;
    end

    // Test input sequence
    initial begin
        input = 0;
        #10 input = 1;
        #10 input = 0;
        #10 input = 1;
        #10 input = 0;
        #10 input = 1;
        #10 input = 0;
        #10 input = 1;
    end
endmodule