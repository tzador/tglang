// This is a code snippet in VERILOG
module ripple_carry_adder(input [7:0] a,b, // 8-bit inputs
                         output [7:0] sum, // 8-bit output
                         output cout); // carry-out

  reg [7:0] temp;
  wire [7:0] carry;
  wire [8:0] temp_sum;

  // The sum of each bit is computed by xoring
  // the input bits and the carry bit
  assign temp = a ^ b;

  // The carry is computed by anding the bits
  // with a shifted version of itself
  assign carry = a & b;

  // A temporary sum is created by bit-adders
  assign temp_sum = {temp, carry};

  // The output sum is the sum of the temporary
  // sum and the original carry
  assign sum = temp_sum[7:0] ^ cout;

  // The final carry is taken from the most
  // significant bit of the temporary sum
  assign cout = temp_sum[8];

endmodule