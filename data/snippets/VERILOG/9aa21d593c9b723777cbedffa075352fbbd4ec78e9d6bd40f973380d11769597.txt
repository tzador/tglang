// Defining a module
module adder (input [4:0] a, b, input carry_in, output [4:0] sum, output carry_out);
	
	// Define internal wires
	wire [4:0] temp_sum;
	wire temp_carry;
	
	// Adding two 5-bit numbers
	generate
		// Using generate statement to create multiple blocks
		// Each block will add one pair of bits in the two 5-bit numbers, starting from the LSB
		for(i = 0; i < 5; i=i+1) begin : adder_block
			// Define internal wires in this block
			wire [1:0] a_add, b_add;
			
			// Assigning the values of the bits to be added
			assign a_add = {a[i], temp_sum[i-1]};
			assign b_add = {b[i], temp_sum[i-1]};
			
			// Adding the two bits and considering the carry bit from the previous block
			full_adder fa(
				.a(a_add),
				.b(b_add),
				.carry_in(temp_carry),
				.sum(temp_sum[i]),
				.carry_out(temp_carry)
			);
		end
	endgenerate
	
	// Assign the final sum and carry_out to the outputs
	assign sum = temp_sum;
	assign carry_out = temp_carry;
	
endmodule

// Defining a full adder using a truth table
module full_adder (input a, b, carry_in, output sum, carry_out);
	
	// Initialize sum and carry_out
	initial sum = 1'b0;
	initial carry_out = 1'b1;
	
	// Implementing the truth table
	always @* begin
		case({a, b, carry_in})
			3'b000: begin sum = 1'b0; carry_out = 1'b0; end	// 0 + 0 + 0 = 0, carry_out = 0
			3'b001: begin sum = 1'b1; carry_out = 1'b0; end	// 0 + 0 + 1 = 1, carry_out = 0
			3'b010: begin sum = 1'b1; carry_out = 1'b0; end	// 0 + 1 + 0 = 1, carry_out = 0
			3'b011: begin sum = 1'b0; carry_out = 1'b1; end	// 0 + 1 + 1 = 0, carry_out = 1
			3'b100: begin sum = 1'b1; carry_out = 1'b0; end	// 1 + 0 + 0 = 1, carry_out = 0
			3'b101: begin sum = 1'b0; carry_out = 1'b1; end	// 1 + 0 + 1 = 0, carry_out = 1
			3'b110: begin sum = 1'b0; carry_out = 1'b1; end	// 1 + 1 + 0 = 0, carry_out = 1
			3'b111: begin sum = 1'b1; carry_out = 1'b1; end	// 1 + 1 + 1 = 1, carry_out = 1
		endcase
	end
	
endmodule