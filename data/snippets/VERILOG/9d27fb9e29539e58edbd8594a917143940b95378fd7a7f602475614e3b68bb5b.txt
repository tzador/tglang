// Verilog code for a 4-bit adder
module adder (in1, in2, carry_in, sum, carry_out);
    
    // declare inputs and outputs
    input [3:0] in1;    // 4-bit input 1
    input [3:0] in2;    // 4-bit input 2
    input carry_in;     // carry input
    output [3:0] sum;   // 4-bit output sum
    output carry_out;   // carry output

    wire [3:0] temp;    // temporary wire for sum calculations
    wire carry;         // wire to hold carry value
    
    // create a 4-bit full adder for each digit
    full_adder FA0 (in1[0], in2[0], carry_in, temp[0], carry);
    full_adder FA1 (in1[1], in2[1], carry, temp[1], carry);
    full_adder FA2 (in1[2], in2[2], carry, temp[2], carry);
    full_adder FA3 (in1[3], in2[3], carry, temp[3], carry_out);
    
    // assign summed bits to output
    assign sum = temp;
    
endmodule

// code for a full adder
module full_adder (a, b, carry_in, sum, carry_out);
    
    // declare inputs and outputs
    input a;            // first input bit
    input b;            // second input bit
    input carry_in;     // carry input
    output sum;         // output of sum
    output carry_out;   // output of carry
    
    // calculate sum using bitwise XOR
    assign sum = a ^ b ^ carry_in;
    
    // calculate carry using bitwise OR and AND
    assign carry_out = (a & b) | (a & carry_in) | (b & carry_in);
endmodule