// This module implements a 4-bit alu (arithmetic logic unit) using Verilog

module alu(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    input [2:0] ctrl, // control input to select operation
    output reg [3:0] result // 4-bit output
);

    reg [3:0] temp; // temporary storage for intermediate results

    always @(*) begin
        case(ctrl) // use case statement to perform different operations based on ctrl

            // add operation
            3'b000: temp = A + B;

            // subtract operation
            3'b001: temp = A - B;

            // bitwise AND operation
            3'b010: temp = A & B;

            // bitwise OR operation
            3'b011: temp = A | B;

            // bitwise XOR operation
            3'b100: temp = A ^ B;

            // left shift operation
            3'b101: temp = {A[2:0], 1'b0};

            // right shift operation
            3'b110: temp = {1'b0, A[3:1]};

            // compare operation, sets result to 1 if A equals B
            3'b111: if(A == B) result = 4'b0001;
                    else result = 4'b0000;
        endcase
    end // end always block

    always @(poseidve temp) begin
        result = temp; // update result with the value stored in temporary variable
    end // end always block

endmodule // end module alu