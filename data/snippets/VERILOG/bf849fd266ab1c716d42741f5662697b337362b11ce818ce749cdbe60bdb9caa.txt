//This is a multi-line comment in Verilog
`include "my_defines.v" //Include another file with pre-defined constants and parameters

module my_module(input clk, input [7:0] data_in, output reg [7:0] data_out);
	//Define a module with 3 ports: clock, 8-bit input, and 8-bit output
	
	parameter DATA_WIDTH = 8; //Define a parameter with a value of 8

	//Define internal wires and registers
	wire [DATA_WIDTH-1:0] data1, data2;
	reg [DATA_WIDTH-1:0] reg_data;
	
	//Define a submodule
	my_submodule submodule_inst(clk, data1, data2);
	
	//Assign values to internal wires and registers
	always@(posedge clk) begin
		data1 <= data_in;
		data2 <= {reg_data[6:0], reg_data[7]}; //Concatenate bits in reverse order
	end
	
	always@(posedge clk) begin //Always block executes when posedge of clock is detected
		reg_data <= reg_data + 1; //Increment register value by 1
	end
	
	//Assign output
	assign data_out = reg_data;
	
endmodule

//Submodule definition
module my_submodule(input clk, input [7:0] in1, output [7:0] out1, output [7:0] out2);
	wire [7:0] temp; //Define a wire variable
	
	//Instantiate another submodule
	my_another_submodule another_inst(clk, in1, temp);
	
	//Assign outputs
	assign out1 = temp + 1; //Add 1 to temp variable
	assign out2 = temp - 1; //Subtract 1 from temp variable
	
endmodule

//Another submodule definition
module my_another_submodule(input clk, input [7:0] in1, output reg [7:0] out1);
	always@(posedge clk) begin
		case(in1) //Case statement for different input values
			8'd0: out1 = 8'hFF; //If input is 0, output is FF
			8'd1: out1 = 8'hFE; //If input is 1, output is FE
			8'd2: out1 = 8'hFD; //If input is 2, output is FD
			8'd3: out1 = 8'hFC; //If input is 3, output is FC
			8'd4: out1 = 8'h00; //If input is 4, output is 00
			8'd5: out1 = 8'h01; //If input is 5, output is 01
			8'd6: out1 = 8'h02; //If input is 6, output is 02
			8'd7: out1 = 8'h03; //If input is 7, output is 03
		endcase
	end

endmodule