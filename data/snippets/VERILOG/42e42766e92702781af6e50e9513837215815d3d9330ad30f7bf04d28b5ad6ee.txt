// Declaring a parameter
parameter width = 8;

// Declaring a wire
wire [width-1:0] my_wire;

// Declaring a reg
reg [width+1:0] my_reg;

// Assigning values to wires
assign my_wire = 8'b11111111;

// Assigning values to registers using always block
// @(*) is used to specify an implicit sensitivity list
always @(*) begin
    my_reg = width+2;
end

// Using generate block to create multiple instances of a module
// genvar is used to generate a range of values
// for each instance of the module
genvar i;
generate
    for (i = 0; i < width; i = i + 2) begin : gen_block
        // Instantiating the module with a unique name
        // The value of i is used as the suffix to the module name
        my_module #(.param(i)) my_module_i (my_wire, my_reg);
    end
endgenerate

// Defining a parameterized module
module my_module
#(parameter param = 0) // Parameter can have a default value
(
    input [param-1:0] input_wire,
    output [param+1:0] output_reg
);

// Using 'generate' to create a set of registers
genvar j;
generate
    for (j = 0; j < param; j = j + 1) begin
        // Creating a unique name for each register using the value of j
        // The registers are declared as part of 'gen_block'
        reg [param-1:0] my_reg_j;
    end
endgenerate

// Assigning values to the registers using a for loop
integer k;
always @(*) begin
    for (k = 0; k < param; k = k + 1) begin
        // Assigning values to the registers based on the value of k 
        my_reg_j[k] = input_wire[k];
    end
end

// Assigning values to the output register using a case statement
always @(*) begin
    case (input_wire)
        0: output_reg = 2'b00;
        1: output_reg = 2'b01;
        2: output_reg = 2'b10;
        default: output_reg = 2'b11;
    endcase
end

endmodule