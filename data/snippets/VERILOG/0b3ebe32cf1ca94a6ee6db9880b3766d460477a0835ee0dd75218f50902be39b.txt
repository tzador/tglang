module FSM(
  // Inputs
  input clk, rstn,
  input wire x,
  // Outputs
  output reg z,
  // Registers
  reg [2:0] state, next_state,
  // Parameters
  parameter state1 = 3'd0,
  parameter state2 = 3'd1,
  parameter state3 = 3'd2
);

  // Sequential logic
  always @(posedge clk or negedge rstn)
    if (!rstn) begin
      state <= state1;
      z <= 0;
    end else begin
      state <= next_state;
      z <= 1;
    end

  // Combinational logic
  always @*
    case (state)
      state1: begin
        next_state = x ? state2 : state3;
        z = 1;
      end
      state2: begin
        next_state = state3;
        z = 1;
      end
      state3: begin
        next_state = state1;
        z = 0;
      end
    endcase
endmodule