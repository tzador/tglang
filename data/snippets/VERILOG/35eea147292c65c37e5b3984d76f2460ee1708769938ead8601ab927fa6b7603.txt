//example code
module example_module(
    input wire clk,
    input wire rst_n,
    input wire [7:0] data_in,
    output reg [7:0] data_out
);

    //internal signals
    wire [7:0] temp_data;

    //data input register
    reg [7:0] data_reg;

    //synchronous reset
    always @(posedge clk, negedge rst_n) begin
        if (!rst_n) begin
            data_reg <= 8'b0;  //reset data register
        end
        else begin
            data_reg <= data_in; //load data from input
        end
    end

    //combinational logic
    assign temp_data = data_reg + 1;

    //synchronous output
    always @(posedge clk) begin
        data_out <= temp_data; //output incremented data
    end

endmodule

//example testbench
module testbench;

    //dut instance
    example_module dut(
        .clk(clk),
        .rst_n(rst_n),
        .data_in(data_in),
        .data_out(data_out)
    );

    //test input
    reg [7:0] test_input = 8'b10000000;

    //clock generation
    reg clk = 1'b0;
    always #5 clk = ~clk;  //5ns clock period

    //reset generation
    reg rst_n = 1'b1;
    initial #10 rst_n = 1'b0; //10ns reset duration

    //stimulus process
    initial begin
        //wait for reset to complete
        #20;

        //load test input
        data_in <= test_input;

        //wait for output to update
        #10;

        //check output
        if (data_out !== test_input + 1) begin
            $display("Error: Output mismatch");
        end
        else begin
            $display("Success!");
        end

    end
    
endmodule