// This code snippet implements an iterative binary search algorithm
// It searches for a given element in a sorted array and returns the index if found, -1 if not found

module binary_search(input [7:0] input_array[31:0], input [7:0] search_value, output reg [31:0] index, output reg found);

// Define internal variables
reg [4:0] low = 0; // Beginning of the array
reg [4:0] high = 31; // End of the array
reg [4:0] mid; // Midpoint of the array
reg [31:0] array_value; // Value at the mid index
reg [1:0] compare; // Comparison result between search_value and array_value

// Main loop for binary search
always @ (posedge clk) begin
    // Calculate midpoint of array
    mid = (low + high) / 2;
    // Retrieve value at midpoint
    array_value = input_array[mid];
    // Compare search_value to array_value
    if (search_value == array_value) begin
        // Element found, set index to midpoint and set found to 1
        index = mid;
        found = 1;
    end else begin
        // Element not found, set found to 0
        found = 0;
    end
    // Update low or high based on comparison result
    case (compare)
        2'b00: begin // search_value is smaller than array_value
            high = mid - 1;
        end
        2'b01: begin // search_value is larger than array_value
            low = mid + 1;
        end
        2'b10: begin // search_value is equal to array_value, no need to update low and high
        end
    endcase
end

endmodule

// Initialize internal variables
initial begin
    low = 0;
    high = 31;
    mid = 15;
    array_value = input_array[mid];
    compare = (search_value > array_value) ? 2'b01 : (search_value < array_value) ? 2'b00 : 2'b10;
end

// Testbench for binary search
module testbench;

// Define inputs and outputs
reg [7:0] input_array[31:0];
reg [7:0] search_value;
wire [31:0] index;
wire found;

// Instantiate binary_search module
binary_search bs(input_array, search_value, index, found);

// Initialize inputs
initial begin
    // Initialize sorted array
    input_array[0] = 1;
    input_array[1] = 3;
    input_array[2] = 5;
    input_array[3] = 7;
    input_array[4] = 9;
    input_array[5] = 11;
    input_array[6] = 13;
    input_array[7] = 15;
    input_array[8] = 17;
    input_array[9] = 19;
    input_array[10] = 21;
    input_array[11] = 23;
    input_array[12] = 25;
    input_array[13] = 27;
    input_array[14] = 29;
    input_array[15] = 31;
    input_array[16] = 33;
    input_array[17] = 35;
    input_array[18] = 37;
    input_array[19] = 39;
    input_array[20] = 41;
    input_array[21] = 43;
    input_array[22] = 45;
    input_array[23] = 47;
    input_array[24] = 49;
    input_array[25] = 51;
    input_array[26] = 53;
    input_array[27] = 55;
    input_array[28] = 57;
    input_array[29] = 59;
    input_array[30] = 61;
    input_array[31] = 63;

    // Set search_value to 19 (which is present in the array)
    search_value = 19;
end

endmodule