// This code snippet is a 32-bit ripple carry adder using structural modeling in Verilog

module RippleCarryAdder(input [31:0] a, b, // input registers
input cin, // carry input
output [31:0] sum, // output register
output cout // carry output
);
wire [31:0] ag, bg, co; // internal wires to connect inputs to gates
assign ag = a & b; // AND gates for inputs
assign bg = ~a & ~b; // NOT gates for inputs
add1bit f1(.ag(ag[0]), .bg(bg[0]), .ci(cin), .cout(co[0]), .sum(sum[0])); // 1st bit addition
add1bit f2(.ag(ag[1]), .bg(bg[1]), .ci(co[0]), .cout(co[1]), .sum(sum[1])); // 2nd bit addition
add1bit f3(.ag(ag[2]), .bg(bg[2]), .ci(co[1]), .cout(co[2]), .sum(sum[2])); // 3rd bit addition
add1bit f4(.ag(ag[3]), .bg(bg[3]), .ci(co[2]), .cout(co[3]), .sum(sum[3])); // 4th bit addition
add1bit f5(.ag(ag[4]), .bg(bg[4]), .ci(co[3]), .cout(co[4]), .sum(sum[4])); // 5th bit addition
add1bit f6(.ag(ag[5]), .bg(bg[5]), .ci(co[4]), .cout(co[5]), .sum(sum[5])); // 6th bit addition
add1bit f7(.ag(ag[6]), .bg(bg[6]), .ci(co[5]), .cout(co[6]), .sum(sum[6])); // 7th bit addition
add1bit f8(.ag(ag[7]), .bg(bg[7]), .ci(co[6]), .cout(co[7]), .sum(sum[7])); // 8th bit addition
add1bit f9(.ag(ag[8]), .bg(bg[8]), .ci(co[7]), .cout(co[8]), .sum(sum[8])); // 9th bit addition
add1bit f10(.ag(ag[9]), .bg(bg[9]), .ci(co[8]), .cout(co[9]), .sum(sum[9])); // 10th bit addition
add1bit f11(.ag(ag[10]), .bg(bg[10]), .ci(co[9]), .cout(co[10]), .sum(sum[10])); // 11th bit addition
add1bit f12(.ag(ag[11]), .bg(bg[11]), .ci(co[10]), .cout(co[11]), .sum(sum[11])); // 12th bit addition
add1bit f13(.ag(ag[12]), .bg(bg[12]), .ci(co[11]), .cout(co[12]), .sum(sum[12])); // 13th bit addition
add1bit f14(.ag(ag[13]), .bg(bg[13]), .ci(co[12]), .cout(co[13]), .sum(sum[13])); // 14th bit addition
add1bit f15(.ag(ag[14]), .bg(bg[14]), .ci(co[13]), .cout(co[14]), .sum(sum[14])); // 15th bit addition
add1bit f16(.ag(ag[15]), .bg(bg[15]), .ci(co[14]), .cout(co[15]), .sum(sum[15])); // 16th bit addition
add1bit f17(.ag(ag[16]), .bg(bg[16]), .ci(co[15]), .cout(co[16]), .sum(sum[16])); // 17th bit addition
add1bit f18(.ag(ag[17]), .bg(bg[17]), .ci(co[16]), .cout(co[17]), .sum(sum[17])); // 18th bit addition
add1bit f19(.ag(ag[18]), .bg(bg[18]), .ci(co[17]), .cout(co[18]), .sum(sum[18])); // 19th bit addition
add1bit f20(.ag(ag[19]), .bg(bg[19]), .ci(co[18]), .cout(co[19]), .sum(sum[19])); // 20th bit addition
add1bit f21(.ag(ag[20]), .bg(bg[20]), .ci(co[19]), .cout(co[20]), .sum(sum[20])); // 21st bit addition
add1bit f22(.ag(ag[21]), .bg(bg[21]), .ci(co[20]), .cout(co[21]), .sum(sum[21])); // 22nd bit addition
add1bit f23(.ag(ag[22]), .bg(bg[22]), .ci(co[21]), .cout(co[22]), .sum(sum[22])); // 23rd bit addition
add1bit f24(.ag(ag[23]), .bg(bg[23]), .ci(co[22]), .cout(co[23]), .sum(sum[23])); // 24th bit addition
add1bit f25(.ag(ag[24]), .bg(bg[24]), .ci(co[23]), .cout(co[24]), .sum(sum[24])); // 25th bit addition
add1bit f26(.ag(ag[25]), .bg(bg[25]), .ci(co[24]), .cout(co[25]), .sum(sum[25])); // 26th bit addition
add1bit f27(.ag(ag[26]), .bg(bg[26]), .ci(co[25]), .cout(co[26]), .sum(sum[26])); // 27th bit addition
add1bit f28(.ag(ag[27]), .bg(bg[27]), .ci(co[26]), .cout(co[27]), .sum(sum[27])); // 28th bit addition
add1bit f29(.ag(ag[28]), .bg(bg[28]), .ci(co[27]), .cout(co[28]), .sum(sum[28])); // 29th bit addition
add1bit f30(.ag(ag[29]), .bg(bg[29]), .ci(co[28]), .cout(co[29]), .sum(sum[29])); // 30th bit addition
add1bit f31(.ag(ag[30]), .bg(bg[30]), .ci(co[29]), .cout(co[30]), .sum(sum[30])); // 31st bit addition
add1bit f32(.ag(ag[31]), .bg(bg[31]), .ci(co[30]), .cout(co[31]), .sum(sum[31])); // 32nd bit addition
endmodule

module add1bit(input ag, bg, ci, output cout, sum); // module for single bit addition
assign cout = (ag & bg) | (ci & ag) | (ci & bg); // calculation of carry output
assign sum = ag ^ bg ^ ci; // calculation of sum output
endmodule