// Definition of a 4-bit parallel adder
module adder4bit(
    input logic [3:0] A,
    input logic [3:0] B,
    input logic Cin,
    output logic [3:0] S,
    output logic Cout
);

logic [2:0] C; // Internal carries

// Full Adder module
// Inputs: A, B, Cin
// Outputs: S, Cout
module full_adder(
    input logic A,
    input logic B,
    input logic Cin,
    output logic S,
    output logic Cout
);

// Intermediate signals
logic sum, carry1, carry2;

// Sum output
assign S = sum;

// Carry output
assign Cout = carry1 | carry2;

// Generate sum and carry signals using truth table
always_comb begin
    case({A, B, Cin})
        3'b000: begin
            sum = 1'b00;
            carry1 = 1'b0;
            carry2 = 1'b0;
        end
        3'b001: begin
            sum = 1'b01;
            carry1 = 1'b0;
            carry2 = 1'b0;
        end
        3'b010: begin
            sum = 1'b10;
            carry1 = 1'b0;
            carry2 = 1'b0;
        end
        3'b011: begin
            sum = 1'b11;
            carry1 = 1'b0;
            carry2 = 1'b0;
        end
        3'b100: begin
            sum = 1'b00;
            carry1 = 1'b1;
            carry2 = 1'b0;
        end
        3'b101: begin
            sum = 1'b01;
            carry1 = 1'b1;
            carry2 = 1'b0;
        end
        3'b110: begin
            sum = 1'b10;
            carry1 = 1'b1;
            carry2 = 1'b0;
        end
        3'b111: begin
            sum = 1'b11;
            carry1 = 1'b1;
            carry2 = 1'b0;
        end
    endcase
end

endmodule // end of full_adder module

// Generate carry signals for 4-bit adder using cascaded full adders
always_comb begin
    C[0] = Cin;
    C[1] = full_adder(A[0], B[0], C[0]).Cout;
    C[2] = full_adder(A[1], B[1], C[1]).Cout;
    C[3] = full_adder(A[2], B[2], C[2]).Cout;
end

// Generate sum signals for 4-bit adder
always_comb begin
    S[0] = full_adder(A[0], B[0], C[0]).S;
    S[1] = full_adder(A[1], B[1], C[1]).S;
    S[2] = full_adder(A[2], B[2], C[2]).S;
    S[3] = full_adder(A[3], B[3], C[3]).S;
end

endmodule // end of adder4bit module