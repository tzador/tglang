// This code snippet is a testbench for a 4-bit adder using Verilog.
// The testbench will generate random inputs and check the outputs.
// Declare inputs and outputs
module testbench();
reg [3:0] a, b; // 4-bit input for operands
wire [4:0] sum; // 5-bit output for sum
// Instantiate adder module
adder uut(
  .a(a),
  .b(b),
  .sum(sum)
);
// Create clock and reset signals
reg clk, rst;
// Utilize random number generator for inputs
initial
begin
  clk = 0;
  rst = 0;
  // Loop 10 times for different inputs
  repeat(10)
  begin
    #5 // delay for 5 units
    a = $random; // generate random input for a
    b = $random; // generate random input for b
  end
end
// Create always block for clock and reset signals
always
begin
  #5 // delay for 5 units
  clk = ~clk; // toggle clock every 5 units
  if(clk === 1) // check for positive clock edge
  begin
    rst = 0; // reset deactivated
    #2; // small delay
    rst = 1; // reset activated
  end
end
// Monitor block for checking outputs
always @*
begin
  if(a + b === sum) // check if output is correct
    $display("Test passed!"); // display message
  else
    $display("Test failed!"); // display message
end
endmodule // end of testbench module
// Declare adder module
module adder(a, b, sum);
input [3:0] a, b; // 4-bit input for operands
output [4:0] sum; // 5-bit output for sum
reg [4:0] tmpsum; // temporary sum variable to account for carry
// Create always block for adding operation
always @*
begin
  tmpsum = a + b; // add operands
  if(tmpsum[4] === 1) // check if last bit is a carry
    sum = tmpsum + 1; // add carry bit
  else
    sum = tmpsum; // assign temporary sum to output
end
endmodule // end of adder module