/* This code snippet is a module that implements a 4x4 bit multiplier using ripple carry adders */ 

module multiplier4x4(input [3:0] a, b, output [6:0] c);

reg [3:0] p0, p1, p2, p3, p4, p5, p6;
wire [7:0] t1, t2, t3, t4;
wire c0,c1, c2, c3, c4;

// Stage 1 
assign t1 = a[0] * b; // calculates partial product for first bit of a 
assign p0 = 0; // set to 0 for first stage 

// Stage 2 
assign t2 = a[1] * b; // calculates partial product for second bit of a 
assign p1 = t1[1] + t2[0]; // adds partial products from stages 1 and 2 

// Stage 3 
assign t3 = a[2] * b; // calculates partial product for third bit of a 
assign p2 = t1[2] + t2[1] + t3[0]; // adds partial products from stages 1, 2, and 3 

// Stage 4 
assign t4 = a[3] * b; // calculates partial product for fourth bit of a 
assign p3 = t1[3] + t2[2] + t3[1] + t4[0]; // adds partial products from stages 1, 2, 3, and 4 

// Final stage 
assign p4 = t2[3] + t3[2] + t4[1]; // adds remaining partial products 
assign p5 = t3[3] + t4[2]; // adds remaining partial products 
assign p6 = t4[3]; // adds remaining partial products 

// Ripple Carry Adder 
adder4 p0 (.a(p0), .b(p1), .c(c0), .s(c)); // adds partial products from stages 1 and 2 
adder4 p1 (.a(p2), .b(p3), .c(c1), .s(c)); // adds partial products from stages 3 and 4 
adder4 p2 (.a(p4), .b(p5), .c(c2), .s(c)); // adds remaining partial products 
adder4 p3 (.a(c0), .b(c1), .c(c3), .s(c)); // adds results from previous stages 
adder4 p4 (.a(c2), .b(p6), .c(c4), .s(c)); // adds remaining partial products 

assign c = {c4, c3, c2, c1, c0}; // concatenates all carry bits to final result 

endmodule 

// Ripple Carry Adder module 
module adder4(input a, b, c, output s); 
assign s = a + b + c; 
endmodule