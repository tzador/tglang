// This code uses structural modeling to create and instantiate a 4-bit comparator

// Define the module, with inputs A, B, and outputs EQ, GT, and LT
module Comparator(A, B, EQ, GT, LT);

    // Define the 4-bit inputs and outputs
    input [3:0] A;
    input [3:0] B;
    output EQ;
    output GT;
    output LT;

    // Create instances of the 4-bit comparators for each bit
    ComparatorBit bit0(A[0], B[0], EQ[0], GT[0], LT[0]);
    ComparatorBit bit1(A[1], B[1], EQ[1], GT[1], LT[1]);
    ComparatorBit bit2(A[2], B[2], EQ[2], GT[2], LT[2]);
    ComparatorBit bit3(A[3], B[3], EQ[3], GT[3], LT[3]);

    // Define internal wire for AND gate
    wire and_result;

    // Connect the outputs of the 4-bit comparators to the AND gate
    assign and_result = EQ[0] & EQ[1] & EQ[2] & EQ[3];

    // Use the and_result wire to drive the EQ output
    assign EQ = and_result;

    // Define internal wires for OR gates
    wire or_gt_lt;
    wire or_eq_lt;
    wire or_eq_gt;

    // Connect the outputs of the 4-bit comparators to the OR gates
    assign or_gt_lt = GT[0] | GT[1] | GT[2] | GT[3];
    assign or_eq_lt = EQ[0] | EQ[1] | EQ[2] | EQ[3];
    assign or_eq_gt = EQ[0] | EQ[1] | EQ[2] | EQ[3];

    // Use the OR gates to drive the GT and LT outputs
    assign GT = or_gt_lt & !or_eq_lt;
    assign LT = or_eq_lt & !or_gt_lt;
endmodule

// Define the module for the 4-bit comparator bit
module ComparatorBit(A, B, EQ, GT, LT);

    // Define the 2-bit inputs and outputs
    input A;
    input B;
    output EQ;
    output GT;
    output LT;

    // Define internal wires for the XOR and AND gates
    wire xor_result;
    wire and_result;

    // Use the XOR gate to determine if A and B are equal
    assign xor_result = A ^ B;

    // Use the AND gate to determine if A is greater than B
    assign and_result = A & !B;

    // Use the XOR and AND results to drive the EQ, GT, and LT outputs
    assign EQ = !xor_result;
    assign GT = and_result;
    assign LT = xor_result & !and_result;
endmodule