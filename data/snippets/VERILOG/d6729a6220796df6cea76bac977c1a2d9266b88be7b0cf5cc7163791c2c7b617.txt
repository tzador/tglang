// This is a 4-bit carry-lookahead adder
module CLA_adder(
    input [3:0] A, B, // input 4-bit numbers to be added
    output [3:0] S, // output 4-bit sum
    output Cout // output carry-out
);

// First stage (generate)
wire [2:0] P, G; // P and G generate vectors for each bit
generate
    for(i = 0; i < 3; i=i+1) begin
        assign P[i] = A[i] & B[i]; // generate P
        assign G[i] = A[i] | B[i]; // generate G
    end
endgenerate

// Second stage (propagate)
wire [3:0] P2, G2; // P2 and G2 propagate vectors for each bit
assign P2[0] = P[0]; // first bit just passes through
generate
    for(i = 1; i < 3; i=i+1) begin
        // generate P2 and G2 based on previous stage
        assign P2[i] = P[i] | (G[i-1] & P2[i-1]);
        assign G2[i] = G[i-1] & G2[i-1];
    end
endgenerate

// Third stage (generate and propagate output)
assign S[0] = A[0] ^ B[0]; // first bit sum
assign S[1] = P2[1] ^ (G2[0] & P2[0]); // second bit sum
assign S[2] = P2[2] ^ (G2[1] & P2[1]); // third bit sum
assign S[3] = P2[3] ^ (G2[2] & P2[2]); // fourth bit sum
assign Cout = G[3] | (G2[2] & P2[2]); // output carry-out

endmodule