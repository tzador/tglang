// This code performs a bit-level multiplication using Booth's algorithm

// Declare input registers A, B of 16 bits and output register P of 32 bits
reg [15:0] A, B;
wire [31:0] P;

// Multiplication process begins
always @* begin
  // Initialize the product register to all 0s
  P = 0;
  // Create temporary registers for A and B
  reg [16:0] temp_A, temp_B;

  // Perform sign extension for A by duplicating the most significant bit
  temp_A = {16{A[15]}, A};
  // Perform sign extension for B by duplicating the most significant bit
  temp_B = {16{B[15]}, B};

  // Repeat for 16 cycles as we are dealing with 16-bit numbers
  for (i = 0; i < 16; i = i + 1) begin
    // If LSB of B is 1, add A to P
    if (temp_B[0] == 1'b1)
      P = P + temp_A;
    
    // If LSB of B is 0, subtract A from P
    else if (temp_B[0] == 1'b0)
      P = P - temp_A;
    
    // Shift right by 1 bit (i.e. divide by 2)
    temp_B = temp_B >>> 1;

    // Shift left by 1 bit (i.e. multiply by 2)
    temp_A = temp_A << 1;
  end

  // Discard the first 16 bits as they are just the sign-extended bits of P
  P = P[31:16];
end