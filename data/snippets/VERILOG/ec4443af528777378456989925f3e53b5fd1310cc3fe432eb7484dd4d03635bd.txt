//===========================================================================
// Module Name: ALU (Arithmetic Logic Unit)
// This module functions as an Arithmetic Logic Unit for a microprocessor.
// It takes in a 4-bit opcode and two 8-bit inputs and produces a 8-bit output.
//===========================================================================
module ALU(
    input [3:0] opcode, // 4-bit input for specifying the operation
    input [7:0] inputA, // 1st 8-bit input
    input [7:0] inputB, // 2nd 8-bit input
    output [7:0] output // 8-bit output
);

reg [7:0] result; // register for storing the result

//=== ALU Operations ===
always @ (*) begin
    case (opcode)
        4'b0000: result = inputA + inputB; // addition operation
        4'b0001: result = inputA - inputB; // subtraction operation
        4'b0010: result = inputA & inputB; // bitwise AND operation
        4'b0011: result = inputA | inputB; // bitwise OR operation
        4'b0100: result = inputA ^ inputB; // bitwise XOR operation
        4'b0101: result = ~inputA; // bitwise NOT operation on inputA
        4'b0110: result = ~inputB; // bitwise NOT operation on inputB
        4'b0111: result = inputA << inputB; // left shift operation by inputB bits
        4'b1000: result = inputA >> inputB; // right shift operation by inputB bits
        4'b1001: result = inputA >>> inputB; // arithmetic right shift by inputB bits
        4'b1010: result = inputA < inputB ? 8'b1 : 8'b0; // less than comparison
        4'b1011: result = inputA == inputB ? 8'b1 : 8'b0; // equality comparison
        4'b1100: result = inputA >= inputB ? 8'b1 : 8'b0; // greater than or equal comparison
        4'b1101: result = inputA <= inputB ? 8'b1 : 8'b0; // less than or equal comparison
        4'b1110: result = inputA > inputB ? 8'b1 : 8'b0; // greater than comparison
        4'b1111: result = inputA != inputB ? 8'b1 : 8'b0; // inequality comparison
    endcase
end

assign output = result; // assign result to output
endmodule