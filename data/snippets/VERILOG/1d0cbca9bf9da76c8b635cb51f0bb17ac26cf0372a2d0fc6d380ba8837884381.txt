module ALU #(parameter WIDTH=8) (
    input [WIDTH-1:0] A,
    input [WIDTH-1:0] B,
    input [2:0] ALU_OP,
    output reg [WIDTH-1:0] RESULT,
    output reg ZERO_FLAG,
    output reg CARRY_FLAG,
    output reg OVERFLOW_FLAG
);

    // Internal wire for storing intermediate result and carries
    wire [WIDTH:0] TEMP;

    // Perform arithmetic or logical operation based on ALU_OP
    // Note: Verilog always treats arithmetic operations as signed
    always @ (*) begin
        case (ALU_OP)
            0: RESULT = A + B;
            1: RESULT = A - B;
            2: RESULT = A & B;
            3: RESULT = A | B;
            4: RESULT = A ^ B;
            5: RESULT = A << B;
            6: RESULT = A >> B;
            7: // Conditional move based on A == 0
                if (A == 0) begin
                    RESULT = B;
                end
                else begin
                    RESULT = A;
                end
            default: // Unexpected ALU_OP, result is set to 0
                RESULT = 0;
        endcase
    end

    // Check for zero flag (RESULT == 0)
    always @ (*) begin
        if (RESULT == 0) begin
            ZERO_FLAG = 1;
        end
        else begin
            ZERO_FLAG = 0;
        end
    end

    // Check for carry flag (if TEMP[WIDTH] is 1)
    always @ (*) begin
        if (TEMP[WIDTH] == 1) begin
            CARRY_FLAG = 1;
        end
        else begin
            CARRY_FLAG = 0;
        end
    end

    // Check for overflow flag (if result is larger than maximum value for signed integer)
    always @ (*) begin
        if (RESULT > ((2**(WIDTH-1))-1) || RESULT < -((2**(WIDTH-1)))) begin
            OVERFLOW_FLAG = 1;
        end
        else begin
            OVERFLOW_FLAG = 0;
        end
    end
endmodule