// This module is a 4-bit ripple carry adder with carry-in and carry-out inputs and outputs
module RippleCarryAdder(input [3:0] A, B, // inputs for the 4-bit operands A and B
                        input C_in,         // input for the carry-in bit
                        output [3:0] S,     // output for the 4-bit sum S
                        output C_out        // output for the carry-out bit
                        ); 

    // declare internal wires for the intermediate sums and carry bits
    wire [3:0] S_0, S_1, S_2, S_3;
    wire C_0, C_1, C_2, C_3;

    // generate the first sum and carry bit (corresponding to least significant bit) 
    HalfAdder HA_0(A[0],B[0],S_0,C_0);

    // generate the second sum and carry bit
    FullAdder FA_1(A[1],B[1],C_0,S_1,C_1);

    // generate the third sum and carry bit
    FullAdder FA_2(A[2],B[2],C_1,S_2,C_2);

    // generate the final sum and carry bit (corresponding to most significant bit)
    FullAdder FA_3(A[3],B[3],C_2,S_3,C_3);

    // assign the carry-out bit to the output port
    assign C_out = C_3;

    // assign the 4-bit sum to the output port
    assign S = {S_3, S_2, S_1, S_0}; 
endmodule

// This module is a half adder that takes in two bits and generates the sum and carry-out bit
module HalfAdder(input A, B, 
                 output S, C_out);

    // generate the sum and carry-out bit using logic gates
    xor(S,A,B);
    and(C_out,A,B);
endmodule

// This module is a full adder that takes in two bits and the carry-in bit and generates 
// the sum and carry-out bit
module FullAdder(input A, B, C_in, 
                 output S, C_out);

    // declare internal wires for the intermediate sum and carry bit
    wire S_intermediate, C_intermediate;

    // generate the first sum using a half adder
    HalfAdder HA_1(A,B,S_intermediate,C_intermediate);
    
    // generate the final sum using a half adder and an OR gate
    HalfAdder HA_2(S_intermediate,C_in,S,C_out);
endmodule