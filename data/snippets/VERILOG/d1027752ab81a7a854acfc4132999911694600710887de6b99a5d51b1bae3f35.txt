//module declaration
module test (input clk, input rst, input [3:0] data, output reg [7:0] sum);

   //declare reg and wire variables
   reg [2:0] count;
   wire [7:0] temp;

   //always block for clock and reset
   always @ (posedge clk or posedge rst) begin
      if (rst) begin
         sum <= 8'b0; //reset sum
         count <= 3'd0; //reset count
      end else begin
         if (count == 3'd7) //once count reaches 7
            sum <= sum + temp; //add temp to sum
         else
            count <= count + 1'd1; //increment count
      end
   end

   //always block for data input
   always @ (data) begin
      case (data)
         4'd0: temp <= 8'b00100000; //if data is 0, assign temp to ASCII value of 32 (space)
         4'd1: temp <= 8'b01000001; //if data is 1, assign temp to ASCII value of 65 (A)
         4'd2: temp <= 8'b01100010; //if data is 2, assign temp to ASCII value of 98 (b)
         4'd3: temp <= 8'b10000011; //if data is 3, assign temp to ASCII value of 131 (c)
         4'd4: temp <= 8'b10100100; //if data is 4, assign temp to ASCII value of 164 (d)
         4'd5: temp <= 8'b11000101; //if data is 5, assign temp to ASCII value of 197 (e)
         4'd6: temp <= 8'b11100110; //if data is 6, assign temp to ASCII value of 230 (f)
         4'd7: temp <= 8'b00000111; //if data is 7, assign temp to ASCII value of 7 (bell)
         default: temp <= 8'b00000000; //default case, assign temp to 0
      endcase
   end

endmodule