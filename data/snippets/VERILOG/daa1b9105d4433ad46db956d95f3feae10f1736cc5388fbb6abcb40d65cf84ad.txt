module 4_bit_adder (input bit [3:0] A, B, output bit[3:0] S, output bit C);

//This module represents a 4-bit adder in Verilog
//It takes in two 4-bit inputs, A and B, and outputs the sum in S and the carry in C

wire[3:0] sum; //wire that stores the sum of A and B
wire carry; //wire that stores the carry bit

//full adder sub-module
//takes in two bits, A and B, and the carry bit, and outputs the sum and the new carry bit
//the sum and new carry are calculated using the full adder truth table
//the new carry is derived by ANDing the three inputs and ORing the first two inputs
module full_adder (input bit A, B, C, output bit sum, new_carry);
	assign sum = A ^ B ^ C; //XOR gate representing the sum
	assign new_carry = (A & B) | (B & C) | (A & C); //OR gate representing the new carry
endmodule

//4 full adders connected in series to create a 4-bit adder
//each adder takes in two bits of A and B and the carry bit from the previous adder
full_adder fa1(.A(A[0]), .B(B[0]), .C(0), .sum(sum[0]), .new_carry(carry[0])); //first full adder for the LSB
full_adder fa2(.A(A[1]), .B(B[1]), .C(carry[0]), .sum(sum[1]), .new_carry(carry[1])); //second full adder
full_adder fa3(.A(A[2]), .B(B[2]), .C(carry[1]), .sum(sum[2]), .new_carry(carry[2])); //third full adder
full_adder fa4(.A(A[3]), .B(B[3]), .C(carry[2]), .sum(sum[3]), .new_carry(C)); //fourth full adder for the MSB

assign S = sum; //assign the sum wire to the output S

endmodule //end of 4-bit adder module