module decoder (input logic [2:0] address,
                input logic enable,
                output logic [7:0] data);
//This module implements a 3-to-8 decoder, with an enable signal.
//Inputs:
//    address - the 3-bit binary address to be decoded
//    enable - the enable signal, used to control the output
//Outputs:
//    data - 8-bit binary code representing the selected output
//Example:
//    address = 0b000, enable = 1, then data = 0b00000001

  //Internal wires for intermediate calculations
  logic [2:0] index;
  logic [7:0] output;

  //Decoder block
  always_comb begin
    //If enable is 0, output is all 0's
    if (!enable) begin
      output <= 8'd0;
    end else begin
      //Otherwise, use a case statement to map address to output
      case (address)
        //Address 0 -> Output 1:1:1:0:0:0:0:0
        3'b000: output <= 8'b00000001;
        //Address 1 -> Output 0:1:1:1:0:0:0:0
        3'b001: output <= 8'b00000010;
        //Address 2 -> Output 0:0:1:1:1:0:0:0
        3'b010: output <= 8'b00000100;
        //Address 3 -> Output 0:0:0:1:1:1:0:0
        3'b011: output <= 8'b00001000;
        //Address 4 -> Output 0:0:0:0:1:1:1:0
        3'b100: output <= 8'b00010000;
        //Address 5 -> Output 0:0:0:0:0:1:1:1
        3'b101: output <= 8'b00100000;
        //Address 6 -> Output 0:0:0:0:0:0:1:1
        3'b110: output <= 8'b01000000;
        //Address 7 -> Output 0:0:0:0:0:0:0:1
        3'b111: output <= 8'b10000000;
        //Default case, should never happen
        default: output <= 8'b00000000;
      endcase
    end
  end

  //Assign statement for output
  assign data = output;

endmodule