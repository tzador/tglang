// This code snippet implements a 4-bit binary counter with asynchronous reset
// It uses a finite state machine to generate the counter output
// Inputs: clk, rst
// Outputs: count[3:0]

// Input clock signal with period of 10ns
input clk;
// Input asynchronous reset signal
input rst;

// Output 4-bit count variable
output [3:0] count;

// Define finite state machine states
parameter IDLE = 0;
parameter INC = 1;
parameter RESET = 2;

// Define initial state as IDLE
reg [1:0] state = IDLE;

// Define 4-bit register to hold count variable
reg [3:0] count_reg;

// Always block for sequencing
always @(posedge clk or posedge rst)
begin
    // If reset signal is high, set state to RESET
    if (rst)
        state = RESET;
    // If reset signal is low and current state is RESET, set state to IDLE
    else if (!rst && state == RESET)
        state = IDLE;
    // If clock signal is high and current state is IDLE, set state to INC
    else if (clk && state == IDLE)
        state = INC;
    // If clock signal is low and current state is INC, perform increment operation on count register and set state to IDLE
    else if (!clk && state == INC)
    begin
        count_reg = count_reg + 1;
        state = IDLE;
    end
end

// Output count variable to count register
assign count = count_reg;

// End of code snippet