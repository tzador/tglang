// This code defines a 4-bit multiplier module with input and output ports.
// The module has two 4-bit inputs (A and B) and one 8-bit output (result).
// This code also includes a reset functionality and a testbench for simulation purposes.

module mult4x4(A, B, result, reset);

input [3:0] A; // First input - 4 bits
input [3:0] B; // Second input - 4 bits
output [7:0] result; // Output - 8 bits

wire [3:0] A1, A2; // Intermediate wires for A
wire [3:0] B1, B2; // Intermediate wires for B
wire [3:0] temp1, temp2, temp3; // Intermediate wires for multiplication

// Splitting the inputs into two halves for efficient multiplication
assign {A1, A2} = A; // A1 = least significant bits, A2 = most significant bits
assign {B1, B2} = B; // B1 = least significant bits, B2 = most significant bits

// Multiplication logic for least significant bits
assign temp1 = A1 * B1; // temp1 will be a 4-bit number (max value: 15)

// Multiplication logic for most significant bits
assign temp3 = A2 * B2; // temp3 will be an 8-bit number (max value: 255)
assign temp2 = A2 * B1; // temp2 will be a 4-bit number (max value: 15)
assign temp2 = temp2 << 4; // Shift temp2 4 bits to the left to align with temp1

// Combining and adding the results
wire [7:0] temp_result; // Intermediate wire for final result
assign temp_result = temp3 + temp2 + temp1; // Adding all three parts of the result

// Output result
assign result = temp_result;

// Initializing result to 0 on reset
initial begin
    result = 8'b0; // 8-bit binary number 00000000
end

// Testbench for simulating the multiplier
initial begin
    #10 A = 4'b0110; // Initialize A to binary number 0110 (decimal 6)
    #10 B = 4'b1011; // Initialize B to binary number 1011 (decimal 11)
    #20 $display("A: %d, B: %d, result: %d", A, B, result); // Display input and output values
end
endmodule