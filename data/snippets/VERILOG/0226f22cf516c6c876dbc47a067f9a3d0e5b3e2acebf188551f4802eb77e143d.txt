// Reset Input
input reset;
// Clock Input
input clk;
// Data Input
input [7:0] datain;
// Write Enable
input wr_en;
// Address Input
input [3:0] addr;
// Output Registers
reg [7:0] reg1, reg2, reg3, reg4;

// Counter Module
module counter(
input clk,
input reset,
input wr_en,
input [3:0] addr,
input [7:0] datain,
output [7:0] dataout
);

// Registers
always @(posedge clk, posedge reset) begin
if (reset) begin
reg1 <= 0;
reg2 <= 0;
reg3 <= 0;
reg4 <= 0;
end
else if (wr_en) begin
case (addr)
4'b0000: reg1 <= datain;
4'b0001: reg2 <= datain;
4'b0010: reg3 <= datain;
4'b0011: reg4 <= datain;
endcase
end
end

// Output MUX
always @(*) begin
case (addr)
4'b0000: dataout = reg1;
4'b0001: dataout = reg2;
4'b0010: dataout = reg3;
4'b0011: dataout = reg4;
endcase
end

endmodule