// This is a multi-line comment in VERILOG

module counter(input clk, // input clock signal
               input reset, // input reset signal
               output reg [3:0] count); // output 4-bit counter
                
always @(posedge clk) begin // always block with positive edge clock trigger
    if (reset) begin // if statement for reset trigger
        count <= 0; // reset counter to 0
    end else begin // else statement for when reset is not triggered
        if (count < 15) begin // if statement to ensure counter does not exceed 15 (4-bit max)
            count <= count + 1; // increment counter by 1
        end else begin // else statement for when counter reaches 15
            count <= 0; // reset counter to 0
        end
    end
endmodule

/* This code snippet creates a 4-bit counter in VERILOG. It takes in a clock signal and reset signal as inputs and outputs a 4-bit count value.
The counter starts at 0 and increments by 1 for every positive edge of the clock signal. Once the count reaches 15, it resets back to 0.
This ensures that the counter stays within the 4-bit range.
*/