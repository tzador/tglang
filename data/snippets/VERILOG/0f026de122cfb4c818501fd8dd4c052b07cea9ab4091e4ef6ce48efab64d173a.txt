// This verilog code snippet creates a module for a binary counter with asynchronous reset and clear inputs

module binary_counter(input clk, // clock input
                      output reg [7:0] count, // 8-bit output of the counter
                      input rst, // asynchronous reset input
                      input clr); // asynchronous clear input
	reg [7:0] next_count; // register to hold next value of counter
	
	// always block to increment counter on positive edge of clock signal
	always @(posedge clk) begin 
		if (!rst) // check if reset input is low
			count <= 0; // if so, reset counter value to 0
		else if (!clr) // check if clear input is low
			count <= 255; // if so, set counter value to maximum 8-bit value (11111111)
		else // if neither reset nor clear is activated
			count <= next_count; // update counter value with next value from register 
		end
		
	// always block to generate next value of counter
	always @(count or rst or clr) begin
		if (rst) // if reset input is low
			next_count <= 0; // set next value to 0
		else if (clr) // if clear input is low
			next_count <= 255; // set next value to maximum 8-bit value (11111111)
		else // if neither reset nor clear is activated
			next_count <= count + 1; // increment next value by 1
	end
endmodule