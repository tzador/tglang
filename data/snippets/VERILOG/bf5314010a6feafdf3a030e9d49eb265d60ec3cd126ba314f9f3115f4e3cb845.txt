// This code implements an 8-bit shift register with synchronous parallel load functionality

module shift_register (
  input rst,           // reset input
  input clk,           // clock input
  input ld,            // parallel load input
  input [7:0] data_in, // data input for parallel load
  output reg [7:0] q   // output of the shift register
);
  
  always @(posedge clk) begin
    if (rst) begin
      q <= 8'b0;       // if reset, output is cleared
    end else if (ld) begin
      q <= data_in;    // if parallel load is high, data input is loaded into output
    end else begin
      q <= {q[6:0], q[7]}; // shift output by one bit to the left, with MSB being replaced by LSB
    end
  end

endmodule