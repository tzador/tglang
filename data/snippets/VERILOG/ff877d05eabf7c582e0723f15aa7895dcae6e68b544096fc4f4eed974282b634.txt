module binary_encoder(
    input [3:0]binary_input, //input binary number with 4 bits
    output reg [1:0]encoded_output //encoded binary number with 2 bits
);

always @(binary_input) begin //sensitivity list for input changes
    case (binary_input) //begin case statement for input values
        4'b0000: encoded_output = 2'b00; //if input is 0000, output is 00
        4'b0001: encoded_output = 2'b01; //if input is 0001, output is 01
        4'b0010: encoded_output = 2'b10; //if input is 0010, output is 10
        4'b0011: encoded_output = 2'b01; //if input is 0011, output is 01
        4'b0100: encoded_output = 2'b01; //if input is 0100, output is 01
        4'b0101: encoded_output = 2'b11; //if input is 0101, output is 11
        4'b0110: encoded_output = 2'b10; //if input is 0110, output is 10
        4'b0111: encoded_output = 2'b01; //if input is 0111, output is 01
        4'b1000: encoded_output = 2'b01; //if input is 1000, output is 01
        4'b1001: encoded_output = 2'b10; //if input is 1001, output is 10
        4'b1010: encoded_output = 2'b01; //if input is 1010, output is 01
        4'b1011: encoded_output = 2'b10; //if input is 1011, output is 10
        4'b1100: encoded_output = 2'b11; //if input is 1100, output is 11
        4'b1101: encoded_output = 2'b10; //if input is 1101, output is 10
        4'b1110: encoded_output = 2'b01; //if input is 1110, output is 01
        4'b1111: encoded_output = 2'b11; //if input is 1111, output is 11
    endcase //end case statement
end //end always block

endmodule //end module