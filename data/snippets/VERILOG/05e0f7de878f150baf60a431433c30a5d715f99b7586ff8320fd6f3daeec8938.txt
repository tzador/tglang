// This is a Verilog code snippet that implements a 4-bit adder using structural modeling

// Defining the module
module fourBitAdder(
    input [3:0] a, b,          // 4-bit input numbers
    input cin,                 // carry-in bit
    output [4:0] sum,          // 5-bit output sum
    output cout                // carry-out bit
);

  // Defining internal signals
  wire [4:0] temp;            // temporary sum signal to hold intermediate calculations
  wire [3:0] carry;           // carry signal for each bit

  // Connecting the full adders to create the 4-bit adder
  // Note: Four full adders are used to perform the addition
  fullAdder FA0 (.a(a[0]), .b(b[0]), .cin(cin), .sum(temp[0]), .cout(carry[0]));
  fullAdder FA1 (.a(a[1]), .b(b[1]), .cin(carry[0]), .sum(temp[1]), .cout(carry[1]));
  fullAdder FA2 (.a(a[2]), .b(b[2]), .cin(carry[1]), .sum(temp[2]), .cout(carry[2]));
  fullAdder FA3 (.a(a[3]), .b(b[3]), .cin(carry[2]), .sum(temp[3]), .cout(carry[3]));

  // Assigning the output values accordingly
  assign sum = {temp[3:0], carry[3]};      // Concatenating the temporary sum and carry to create the final sum
  assign cout = carry[3];                   // Assigning the last carry bit as the carry-out bit

endmodule

// Defining the Full Adder module that performs 1-bit addition
module fullAdder(
    input a, b, cin,     // 1-bit input values
    output sum,          // 1-bit output sum
    output cout          // carry-out bit
    );

  // Defining internal signals
  wire s1, c1, c2;

  // Performing the first stage addition
  xor gate1 (s1, a, b);              // XOR gate to calculate the sum bit
  and gate2 (c1, a, b);              // AND gate to calculate the carry bit

  // Performing the second stage addition
  xor gate3 (sum, s1, cin);          // XOR gate to create the final sum bit
  and gate4 (c2, s1, cin);           // AND gate to calculate the carry-out bit

  // Assigning the final output values
  assign cout = c1 | c2;             // Assigning the carry-out bit as the OR of the two carry bits

endmodule