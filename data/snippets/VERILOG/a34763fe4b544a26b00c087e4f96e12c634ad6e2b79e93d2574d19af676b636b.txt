module mux8x1(
  input [7:0] data0,
  input [7:0] data1,
  input [7:0] data2,
  input [7:0] data3,
  input [7:0] data4,
  input [7:0] data5,
  input [7:0] data6,
  input [7:0] data7,
  input [2:0] select,
  output [7:0] output_data
  );

  // Define internal wires for intermediate data signals
  wire [7:0] inter_data0;
  wire [7:0] inter_data1;
  wire [7:0] inter_data2;
  wire [7:0] inter_data3;
  wire [7:0] inter_data4;
  wire [7:0] inter_data5;
  wire [7:0] inter_data6;
  wire [7:0] inter_data7;

  // Mux output is a function of the select input
  // Uses conditional assignment (also known as if-else) to choose the desired input
  assign output_data = (select == 3) ? data7 :
                       (select == 2) ? data6 :
                       (select == 1) ? data5 :
                       (select == 0) ? data4 :
                       (select == 4) ? data3 :
                       (select == 5) ? data2 :
                       (select == 6) ? data1 :
                       (select == 7) ? data0 : 0;

  // Determine outputs for each intermediate wire based on the select input
  // Uses case statement to determine the desired output
  always @ (select) begin
    case (select)

      // If select is 0, output data4
      0: begin
        inter_data0 = data4;
      end

      // If select is 1, output data5
      1: begin
        inter_data1 = data5;
      end

      // If select is 2, output data6
      2: begin
        inter_data2 = data6;
      end

      // If select is 3, output data7
      3: begin
        inter_data3 = data7;
      end

      // If select is 4, output data3
      4: begin
        inter_data4 = data3;
      end

      // If select is 5, output data2
      5: begin
        inter_data5 = data2;
      end

      // If select is 6, output data1
      6: begin
        inter_data6 = data1;
      end

      // If select is 7, output data0
      7: begin
        inter_data7 = data0;
      end

      // Default case is to output 0
      default: begin
        inter_data0 = 0;
        inter_data1 = 0;
        inter_data2 = 0;
        inter_data3 = 0;
        inter_data4 = 0;
        inter_data5 = 0;
        inter_data6 = 0;
        inter_data7 = 0;
      end
    endcase
  end

endmodule