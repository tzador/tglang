module convolution(input wire clk, input wire reset_n, input wire [7:0] in_data, output wire [15:0] out_data);
    parameter CONV_WIDTH = 8;
    parameter FILTER_SIZE = 3;
    
    reg [7:0] filter[FILTER_SIZE][FILTER_SIZE];
    reg [15:0] intermediate_data;
    
    //Initialize filter values
    initial begin
        filter[0][0] = 1;
        filter[0][1] = 2;
        filter[0][2] = 1;
        filter[1][0] = 2;
        filter[1][1] = 4;
        filter[1][2] = 2;
        filter[2][0] = 1;
        filter[2][1] = 2;
        filter[2][2] = 1;
    end
    
    always @(posedge clk or negedge reset_n) begin
        if(!reset_n) begin
            intermediate_data <= 0;
        end
        else begin
            //Perform convolution operation
            for(int i=0; i<FILTER_SIZE; i=i+1) begin
                for(int j=0; j<FILTER_SIZE; j=j+1) begin
                    intermediate_data <= intermediate_data + in_data[i*CONV_WIDTH+j] * filter[i][j];
                end
            end
            out_data <= intermediate_data;
        end
    end
endmodule