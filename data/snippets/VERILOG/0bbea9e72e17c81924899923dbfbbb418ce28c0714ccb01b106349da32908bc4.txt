// Creating a 4-to-1 multiplexer module
module mux4to1 (input [3:0] data_in, input [1:0] sel, output reg data_out); // declaring inputs and output as well as assigning 4 bits for inputs and 2 bits for select

always @ (data_in or sel) // always block to continuously update the output based on the inputs
begin
   if (sel == 2'b00) // checking if the select bits are 00, which corresponds to the first input
      data_out <= data_in[0]; // if the first input is selected, assign the first bit of data_in to data_out
   else if (sel == 2'b01) // checking if the select bits are 01, which corresponds to the second input
      data_out <= data_in[1]; // if the second input is selected, assign the second bit of data_in to data_out
   else if (sel == 2'b10) // checking if the select bits are 10, which corresponds to the third input
      data_out <= data_in[2]; // if the third input is selected, assign the third bit of data_in to data_out
   else // if none of the above conditions are met, then the select bits must be 11, which corresponds to the fourth input
      data_out <= data_in[3]; // if the fourth input is selected, assign the fourth bit of data_in to data_out
end

endmodule // end of module