// This code snippet implements a finite impulse response (FIR) filter using Verilog
module fir_filter (
 input clk, // system clock
 input reset, // active high reset signal
 input signed [7:0] data_in, // input data
 output reg signed [7:0] data_out // filtered data output
);
parameter N = 16, // number of filter coefficients
parameter [7:0] b0 = 8'd8, // filter coefficient b0
parameter [7:0] b1 = 8'd-17, // filter coefficient b1
parameter [7:0] b2 = 8'd24, // filter coefficient b2
parameter [7:0] b3 = 8'd-36, // filter coefficient b3
parameter [7:0] b4 = 8'd-45, // filter coefficient b4
parameter [7:0] b5 = 8'd97, // filter coefficient b5
parameter [7:0] b6 = 8'd113, // filter coefficient b6
parameter [7:0] b7 = 8'd-115, // filter coefficient b7
parameter [7:0] b8 = 8'd-105, // filter coefficient b8
parameter [7:0] b9 = 8'd84, // filter coefficient b9
parameter [7:0] b10 = 8'd-45, // filter coefficient b10
parameter [7:0] b11 = 8'd-102, // filter coefficient b11
parameter [7:0] b12 = 8'd106, // filter coefficient b12
parameter [7:0] b13 = 8'd-123, // filter coefficient b13
parameter [7:0] b14 = 8'd174, // filter coefficient b14
parameter [7:0] b15 = 8'd4; // filter coefficient b15
reg signed [7:0] input_buffer [0:N-1]; // input data buffer
reg signed [7:0] output_buffer [0:N-1]; // output data buffer
reg [3:0] buffer_index = 0; // buffer index counter
wire signed [15:0] sum; // accumulator output
// shift input data into buffer
always @(posedge clk) begin
 if (reset) begin
 buffer_index <= 0;
 input_buffer[0] <= 0;
 end else begin
 buffer_index <= buffer_index + 1;
 input_buffer[buffer_index] <= data_in;
 end
end
// calculate filter output on next posedge clock after input
always @(posedge clk) begin
// reset accumulator
sum <= 0;
// multiply and accumulate input data with coefficients
sum <= sum + input_buffer[buffer_index] * b0;
sum <= sum + input_buffer[(buffer_index-1)%N] * b1;
sum <= sum + input_buffer[(buffer_index-2)%N] * b2;
sum <= sum + input_buffer[(buffer_index-3)%N] * b3;
sum <= sum + input_buffer[(buffer_index-4)%N] * b4;
sum <= sum + input_buffer[(buffer_index-5)%N] * b5;
sum <= sum + input_buffer[(buffer_index-6)%N] * b6;
sum <= sum + input_buffer[(buffer_index-7)%N] * b7;
sum <= sum + input_buffer[(buffer_index-8)%N] * b8;
sum <= sum + input_buffer[(buffer_index-9)%N] * b9;
sum <= sum + input_buffer[(buffer_index-10)%N] * b10;
sum <= sum + input_buffer[(buffer_index-11)%N] * b11;
sum <= sum + input_buffer[(buffer_index-12)%N] * b12;
sum <= sum + input_buffer[(buffer_index-13)%N] * b13;
sum <= sum + input_buffer[(buffer_index-14)%N] * b14;
sum <= sum + input_buffer[(buffer_index-15)%N] * b15;
// shift output data into buffer
output_buffer[buffer_index] <= sum[N-1:0]; // keep only 8 least significant bits
end
// assign output to buffered data on clock edge
always @(posedge clk) begin
 data_out <= output_buffer[buffer_index];
end
endmodule