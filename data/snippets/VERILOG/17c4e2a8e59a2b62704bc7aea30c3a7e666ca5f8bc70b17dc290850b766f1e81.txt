// This is a commented line in Verilog
module Adder (input [3:0]a, input [3:0]b, output [4:0]s, output cout); // This is a module declaration with input and output ports
    // Declare internal wire and register for intermediate calculations
    wire [4:1] c; // This is a wire declaration with a width of 4 bits, named c
    reg [5:0] temp; // This is a register declaration with a width of 6 bits, named temp
    // This is the addition logic, using bitwise AND and bitwise XOR operations
    assign c = a & b; // Bitwise AND to calculate the carry bits
    assign s = a ^ b; // Bitwise XOR to calculate the sum bits
    // This is the propagation logic, for detecting overflow
    always @(c[4:1]) begin // This is an always block, triggering on any change to the carry bits
        // Use a temporary register to store the carry bits
        temp = c; // Store the carry bits in the temporary register
        if (temp[5] == 1) begin // Check if there is an overflow in the most significant bit
            temp[5] <= ~temp[4]; // If there is an overflow, invert the carry bit
            s[3:0] <= ~s[3:0]; // Also invert the sum bits to indicate overflow
        end
    end
endmodule // End of module declaration