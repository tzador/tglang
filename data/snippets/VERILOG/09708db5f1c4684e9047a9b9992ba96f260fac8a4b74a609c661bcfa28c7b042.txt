module ALU(output [7:0] result, input [7:0] A, B, input [2:0] opcode, input carry_in, input reset);

  always @(A, B, opcode)
  begin
    case (opcode)
      3'b000: result = A + B; // ADD operation
      3'b001: result = A - B; // SUB operation
      3'b010: result = A & B; // AND operation
      3'b011: result = A | B; // OR operation
      3'b100: result = ~A; // NOT operation
      3'b101: result = ~B; // NOT operation
      3'b110: result = A ^ B; // XOR operation
      default: result = A; // default to A if opcode does not match any cases
    endcase
  end

  // check for carry in
  always @*
  begin
    case (opcode)
      3'b000:
        begin
          result = A + B + carry_in; // add carry in to result
        end
      3'b001:
        begin
          result = A - B - carry_in; // subtract carry in from result
        end
      3'b010: result = A & B; // AND operation, no carry in needed
      3'b011: result = A | B; // OR operation, no carry in needed
      3'b100: result = ~A; // NOT operation, no carry in needed
      3'b101: result = ~B; // NOT operation, no carry in needed
      3'b110: result = A ^ B; // XOR operation, no carry in needed
      default: result = A; // default to A if opcode does not match any cases
    endcase
  end

  // handle reset
  always @(posedge reset)
  begin
    result <= 0; // reset output to 0
  end

endmodule