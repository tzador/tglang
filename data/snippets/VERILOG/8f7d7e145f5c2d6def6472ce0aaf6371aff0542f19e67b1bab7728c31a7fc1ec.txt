// This is a code snippet in VERILOG
// It is a 4-bit ripple carry adder with overflow detection

module adder_4bit (input [3:0] a, input [3:0] b, input cin, output [3:0] sum, output cout);

  wire [3:0] temp;

  full_adder fa1(a[0], b[0], cin, sum[0], temp[0]);
  full_adder fa2(a[1], b[1], temp[0], sum[1], temp[1]);
  full_adder fa3(a[2], b[2], temp[1], sum[2], temp[2]);
  full_adder fa4(a[3], b[3], temp[2], sum[3], cout);
  
  assign cout = temp[3]; // overflow detection
  
endmodule

module full_adder (input a, input b, input cin, output sum, output cout);
  
  assign sum = a ^ b ^ cin; // XOR gate for sum

  assign cout = (a & b) | (cin & a) | (cin & b); // OR gate for carry out

endmodule