// This is a Verilog code snippet that creates a 16-bit register file with 4 read ports and 2 write ports

`timescale 1ns / 1ps     // sets the resolution and time units of the code

module register_file(
  input [3:0] write_addr_1, write_addr_2,    // input for write address 1 and 2
  input [3:0] read_addr_1, read_addr_2, read_addr_3, read_addr_4,   // inputs for read address 1, 2, 3, 4
  input [15:0] data_in_1, data_in_2,    // input for data to be written into register
  input write_enable_1, write_enable_2,    // input for the write enable signals for write port 1 and 2
  output [15:0] data_out_1, data_out_2, data_out_3, data_out_4    // output for the data read from register
);

reg [15:0] reg_file [0:15];    // creates a 16 by 16 register file, each register is 16 bits wide

always @ (posedge clk) begin    // executes the following code on positive edge of the clock
  if (write_enable_1) begin     // if write enable for write port 1 is high
    reg_file[write_addr_1] = data_in_1;    // write the data_in_1 to the register specified by write address 1
  end
  if (write_enable_2) begin     // if write enable for write port 2 is high
    reg_file[write_addr_2] = data_in_2;    // write the data_in_2 to the register specified by write address 2
  end
end

assign data_out_1 = reg_file[read_addr_1];     // assigns the value of the register at read address 1 to data_out_1
assign data_out_2 = reg_file[read_addr_2];     // assigns the value of the register at read address 2 to data_out_2
assign data_out_3 = reg_file[read_addr_3];     // assigns the value of the register at read address 3 to data_out_3
assign data_out_4 = reg_file[read_addr_4];     // assigns the value of the register at read address 4 to data_out_4

endmodule     // ends the module