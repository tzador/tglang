// This code snippet generates a simple 8-bit ripple carry adder

// Input signals
module ripple_carry_adder(input [7:0] A, B, // 8-bit input operands A and B
                          input C_in,         // Carry-in bit
                          
// Output signals
                          output reg [7:0] S, // 8-bit sum output
                          output reg C_out);  // Carry-out bit

// Internal signals
reg  [7:0] S_tmp;        // Temporary sum signal
wire [7:0] C_tmp;        // Temporary carry signal

// Full adder submodule
// Consists of two input bits and a carry input, produces a sum and carry output

// Functionality of the full adder
// A B C_in | S C_out
// 0 0 0    | 0 0
// 0 0 1    | 1 0
// 0 1 0    | 1 0
// 0 1 1    | 0 1
// 1 0 0    | 1 0
// 1 0 1    | 0 1
// 1 1 0    | 0 1
// 1 1 1    | 1 1

// Definition of the full adder submodule
module full_adder(input A, B, C_in, // Inputs
                  output S, C_out); // Outputs

// Logic for generating the sum output (XOR gate)
assign S = A ^ B ^ C_in;

// Logic for generating the carry output (AND gate)
assign C_out = (A & B) | (A & C_in) | (B & C_in);

endmodule // End of full_adder module definition

// Ripple carry adder implementation
always @(A or B or C_in)
begin
  // Perform addition of two inputs and carry-in bit
  begin
    S_tmp = A + B + C_in;
    S = S_tmp[7:0]; // Assign the 8-bit sum output
    C_tmp = S_tmp[8]; // Store the 9th bit (carry output)
  end
  // Repeat the process for all bits
  for(int i=1; i<8; i++)
  begin
    S_tmp = S_tmp + A[i] + B[i];
    S[i] = S_tmp[7:0]; // Assign the current bit of the sum output
    C_tmp = S_tmp[8]; // Store the carry output for the next iteration
  end
  C_out = C_tmp; // Assign the final carry output
end

endmodule // End of ripple_carry_adder module definition