module alu(input [7:0] in1, input [7:0] in2, input [2:0] opr, output reg [7:0] out);
	// This module implements a simple ALU using Verilog
	
	// Input signals: in1, in2 - 8-bit integer values to be operated on
	// opr - 3-bit control signal for selecting operation type
	// Output signal: out - 8-bit result of the operation
	
	reg [7:0] res; // Register for storing intermediate result
	
	// 8-bit adder
	always @(*) begin
		if(opr == 3'b000) // If opr = 0, perform addition
			res = in1 + in2;
		end
	end
	
	// 8-bit subtractor
	always @(*) begin
		if(opr == 3'b001) // If opr = 1, perform subtraction
			res = in1 - in2;
		end
	end
	
	// 8-bit bitwise AND
	always @(*) begin
		if(opr == 3'b010) // If opr = 2, perform bitwise AND
			res = in1 & in2;
		end
	end
	
	// 8-bit bitwise OR
	always @(*) begin
		if(opr == 3'b011) // If opr = 3, perform bitwise OR
			res = in1 | in2;
		end
	end
	
	// 8-bit logical left shift
	always @(*) begin
		if(opr == 3'b100) // If opr = 4, perform logical left shift
			res = in1 << in2;
		end
	end
	
	// 8-bit logical right shift
	always @(*) begin
		if(opr == 3'b101) // If opr = 5, perform logical right shift
			res = in1 >> in2;
		end
	end
	
	// 8-bit arithmetic right shift
	always @(*) begin
		if(opr == 3'b110) // If opr = 6, perform arithmetic right shift
			res = $signed(in1) >>> in2;
		end
	end
	
	// 8-bit 2's complement
	always @(*) begin
		if(opr == 3'b111) // If opr = 7, perform 2's complement
			res = ~in1 + 1;
		end
	end
	
	// Output
	assign out = res; 
endmodule