//This code snippet represents a two-stage, 4-bit pipelined adder
//Inputs x1 and x2 are 4-bit numbers, outputs z will be the sum of x1 and x2
module pipelined_adder(x1, x2, z);

input [3:0] x1, x2;
output [3:0] z;

//First stage of the pipeline
reg [3:0] sum1; //Stores the sum of the first 4 bits
always @(x1, x2)
begin
  sum1 <= x1 + x2;
end

//Second stage of the pipeline
reg [3:0] sum2; //Stores the sum of the second 4 bits
always @(posedge clk)
begin
  sum2 <= sum1 + x2; //sum1 is used because it holds the previous sum
end

assign z = sum2; //Output is the final sum after the second stage

endmodule