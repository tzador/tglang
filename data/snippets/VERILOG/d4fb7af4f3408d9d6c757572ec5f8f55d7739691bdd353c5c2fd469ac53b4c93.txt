// Initializing variables for 8-bit binary adder
module binary_adder(input [7:0] A, B, // Input variables A and B for 8-bit binary numbers
					input carry_in, // Input variable for carry in bit
					output reg [7:0] sum, // Output variable for 8-bit sum
					output reg carry_out); // Output variable for carry out bit

// Creating an 8-bit full adder
// Using half adders to get sum and carry out
// Calculating the sum of LSB bits
always @ (posedge A or posedge B or posedge carry_in)
begin
	// Calculating the sum with XOR gate
	sum[0] <= A[0] ^ B[0] ^ carry_in;
end

// Calculating the sum of remaining bits using full adder
// Each full adder calculates the sum and carry out for 2 bits
genvar i;
generate
	for(i = 1; i < 8; i = i + 1)
	begin
		// Creating full adder instance
		// Using previous carry out for current carry in
		// Getting sum of 2 bits and carry out for next bit
		full_adder fa(.A(A[i]), .B(B[i]), .carry_in(carry_out[i-1]), .sum(sum[i]), .carry_out(carry_out[i]));
	end
endgenerate

endmodule