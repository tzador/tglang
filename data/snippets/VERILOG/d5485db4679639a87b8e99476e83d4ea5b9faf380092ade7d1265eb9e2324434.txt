module ALU(
    input [7:0] A, B,
    input [1:0] alu_op,
    output [7:0] result,
    output oflo // overflow bit
);

// Declare internal wires and registers
wire [8:0] add_result;
reg oflo = 0; // initialized to 0

// ALU operation cases
always @(*) begin
    case (alu_op)
        2'b00: begin // Addition
            add_result = A + B;
            if (add_result[8] == 1) // check for overflow, MSB is 1
                oflo = 1; // set overflow bit
            else
                oflo = 0; // clear overflow bit
            result = add_result[7:0]; // take only lower 8 bits as result
        end
        2'b01: begin // Subtraction
            result = A - B;
            // overflow bit is set if result is negative (MSB is 1)
            if (result[7] == 1)
                oflo = 1; // set overflow bit
            else
                oflo = 0; // clear overflow bit
        end
        2'b10: begin // Logical AND
            result = A & B;
            // no overflow
            oflo = 0; // clear overflow bit
        end
        2'b11: begin // Logical OR
            result = A | B;
            // no overflow
            oflo = 0; // clear overflow bit
        end
    endcase
end

endmodule