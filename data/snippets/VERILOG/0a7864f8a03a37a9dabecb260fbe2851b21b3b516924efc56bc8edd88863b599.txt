// This is a code snippet in VERILOG
module Clocked_Register(
    input wire clk,
    input wire rst,
    input wire [7:0] data_in,
    output wire [7:0] data_out,
    output wire reg_out
);
    
    // Define reg_out as a 1-bit register
    reg reg_out;
    
    // Create an 8-bit register for data_in
    reg [7:0] reg_data_in;
    
    // Assign data_in to reg_data_in on positive edge of clk
    always @(posedge clk) begin
        reg_data_in <= data_in;
    end
    
    // Assign reg_data_in to data_out at all times
    assign data_out = reg_data_in;
    
    // Reset the register on rst
    always @(posedge rst) begin
        reg_data_in <= 0;
        reg_out <= 0;
    end
    
    // Set reg_out to 1 if reg_data_in is greater than 128
    always @* begin
        if(reg_data_in > 128) begin
            reg_out <= 1;
        end else begin
            reg_out <= 0;
        end
    end
endmodule