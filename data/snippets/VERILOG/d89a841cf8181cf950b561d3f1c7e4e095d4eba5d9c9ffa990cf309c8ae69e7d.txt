// This code snippet is a 4-bit ALU (Arithmetic Logic Unit) design.
// ALU takes in two 4-bit inputs (A and B), and performs various operations on them based on control inputs.
// Outputs include the result (out), carry out (cout), and various flags to indicate the outcome of the operation (zero, negative, overflow). 
module alu (input [3:0] A, B, input [2:0] control, output [3:0] out, output cout, output zero, output negative, output overflow);
  // Declare internal wires and register for intermediate calculations
  wire [4:0] sum;
  wire carry;
  reg [3:0] result;
  
  // Create the following 16 combinational logic blocks for each operation (names given assuming control input is 000):
  // - ADD operation (sum = A + B)
  // - SUB operation (sum = A - B)
  // - AND operation (sum = A & B)
  // - OR operation (sum = A | B)
  // - XOR operation (sum = A ^ B)
  // - NOT operation (sum = ~A)
  // - Shift left operation (sum = A << 1)
  // - Shift right operation (sum = A >> 1)
  // - Rotate left operation (sum = {A[2:0], A[3]})
  // - Rotate right operation (sum = {A[0], A[3:1]})
  // - Compare A and B (Sets flags based on result of A-B)
  // - Load A (sum = A)
  // - Load B (sum = B)
  // - Move result to out (out = sum)
  // - Set carry (carry = 1)
  // - Clear carry (carry = 0)
  always @(*)
    begin
      // Perform selected operation based on control signals
      case (control)
        // ADD operation
        // sum = A + B
        3'b000: begin
          sum = A + B;
          result = sum[3:0];
          // Check for carry out and set overflow flag
          carry = sum[4];
          overflow = (A[3] & B[3] & ~result[3]) | (~A[3] & ~B[3] & result[3]); 
        end
        // SUB operation
        // sum = A - B
        3'b001: begin
          sum = A - B;
          result = sum[3:0];
          // Check for borrow and set overflow flag
          carry = sum[4];
          overflow = (A[3] & ~B[3] & ~result[3]) | (~A[3] & B[3] & result[3]); 
        end
        // AND operation
        // sum = A & B
        3'b010: begin
          sum = A & B;
          result = sum[3:0];
          carry = 0;
          overflow = 0;
        end
        // OR operation
        // sum = A | B
        3'b011: begin
          sum = A | B;
          result = sum[3:0];
          carry = 0;
          overflow = 0;
        end
        // XOR operation
        // sum = A ^ B
        3'b100: begin
          sum = A ^ B;
          result = sum[3:0];
          carry = 0;
          overflow = 0;
        end
        // NOT operation
        // sum = ~A
        3'b101: begin
          sum = ~A;
          result = sum[3:0];
          carry = 0;
          overflow = 0;
        end
        // Shift left operation
        // sum = A << 1
        3'b110: begin
          sum = A << 1;
          result = sum[3:0];
          // Set carry flag to shifted out bit
          carry = A[3];
          overflow = 0;
        end
        // Shift right operation
        // sum = A >> 1
        3'b111: begin
          sum = A >> 1;
          result = sum[3:0];
          // Set carry flag to shifted out bit
          carry = A[0];
          overflow = 0;
        end
        default: begin
          sum = 0;
          result = 0;
          carry = 0;
          overflow = 0;
        end
      endcase
    end
      
  // Assign outputs to appropriate signals
  assign out = result;
  assign cout = carry;
  assign zero = (result == 0) ? 1 : 0;
  assign negative = result[3];
  
endmodule