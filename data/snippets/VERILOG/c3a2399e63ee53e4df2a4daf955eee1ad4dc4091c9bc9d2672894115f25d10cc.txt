module ALU (input [7:0] operand_A, input [7:0] operand_B, input [2:0] operation, output reg [7:0] result); //defines a module named 'ALU' with input variables: 'operand_A', 'operand_B', and 'operation' of 8-bit size and an output variable 'result' of 8-bit size. 

reg [7:0] temp; //defines a register 'temp' of 8-bit size to store intermediate values.

always @(*) //defines a combinational always block.
begin
    case (operation) //starts a case statement based on the 'operation' input variable.
        3'b000: temp = operand_A + operand_B; //if operation is '000', performs addition of 'operand_A' and 'operand_B' and stores the result in 'temp' register.
        3'b001: temp = operand_A - operand_B; //if operation is '001', performs subtraction of 'operand_A' and 'operand_B' and stores the result in 'temp' register.
        3'b010: temp = operand_A & operand_B; //if operation is '010', performs bitwise AND operation of 'operand_A' and 'operand_B' and stores the result in 'temp' register.
        3'b011: temp = operand_A | operand_B; //if operation is '011', performs bitwise OR operation of 'operand_A' and 'operand_B' and stores the result in 'temp' register.
        3'b100: temp = operand_A ^ operand_B; //if operation is '100', performs bitwise XOR operation of 'operand_A' and 'operand_B' and stores the result in 'temp' register.
        3'b101: temp = operand_A | ~operand_B; //if operation is '101', performs bitwise OR operation of 'operand_A' and the inverse of 'operand_B' and stores the result in 'temp' register.
        3'b110: temp = operand_A >> 1; //if operation is '110', performs bitwise right shift operation of 'operand_A' by 1 bit and stores the result in 'temp' register.
        3'b111: temp = operand_A << 1; //if operation is '111', performs bitwise left shift operation of 'operand_A' by 1 bit and stores the result in 'temp' register.
    endcase
end

always @(posedge clk) //defines a sequential always block triggered by positive edge of clock signal.
begin
    result <= temp; //assigns the value of 'temp' register to 'result' output variable.
end

endmodule //ends the module definition.