module processor (clk, reset, A, B, out);
  // input and output declarations
  input clk, reset;
  input [3:0] A, B;
  output reg [7:0] out;
  
  // internal variable and register declarations
  reg [3:0] temp;
  reg [2:0] counter;
  
  // initializations
  initial begin
    temp = 0;
    counter = 0;
    out = 0;
  end
  
  // always block for synchronous reset and clock
  always @ (posedge clk) begin
  	if (reset) begin
  		temp <= 0;
  		counter <= 0;
  	end
  	else begin
  		// arithmetic operations with A and B
  		temp <= (A & B) ^ (~A & B) ^ (A & ~B) ^ (A + B);
  		// logical operations with temp and counter
  		if (temp > counter) begin
  			out <= out + temp;
  			counter <= temp;
  		end
  		else if (temp < counter) begin
  			out <= out - temp;
  			counter <= temp;
  		end
  		else begin
  			out <= out | counter;
  			counter <= counter ^ temp;
  		end
  	end
  end
  
endmodule