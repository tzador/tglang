/* This is a code snippet in VERILOG for a 4-bit Ripple Carry Adder */

module RippleCarryAdder (
    input [3:0] A, B,  // Inputs A and B
    input cin,         // Carry-in
    output [3:0] sum,  // Output sum
    output cout        // Carry-out
    );
    
    wire [3:0] carry;  // Intermediate carry signals
    
    assign carry[0] = A[0] & B[0];  // Calculate carry0
    assign carry[1] = (A[1] & B[1]) | (A[0] & B[0]);  //Calculate carry1
    assign carry[2] = (A[2] & B[2]) | (A[1] & B[1]) | (A[0] & B[0]);  // Calculate carry2
    assign carry[3] = (A[3] & B[3]) | (A[2] & B[2]) | (A[1] & B[1]) | (A[0] & B[0]);  // Calculate carry3
    
    assign sum[0] = A[0] ^ B[0] ^ cin;  // Calculate sum0
    assign sum[1] = A[1] ^ B[1] ^ carry[0];  // Calculate sum1
    assign sum[2] = A[2] ^ B[2] ^ carry[1];  // Calculate sum2
    assign sum[3] = A[3] ^ B[3] ^ carry[2];  // Calculate sum3
    
    assign cout = carry[3];  // Output carry-out
    
endmodule