// Verilog code implementing a 32-bit pipelined adder

module pipelined_adder(
    input [31:0] A,
    input [31:0] B,
    input clk,
    output reg [31:0] S,
    output reg cout
);

// Register declarations for pipeline stages
reg [31:0] A_reg, B_reg, S_reg;
reg cin1, cin2, cin3;

// First stage of the pipeline
always @(posedge clk) begin
    A_reg <= A;
    B_reg <= B;
    cin1 <= 0;
end

// Second stage of the pipeline
always @(posedge clk) begin
    cin2 <= cin1;
    cin1 <= 1'b0;
end

// Third stage of the pipeline
always @(posedge clk) begin
    S_reg <= A_reg + B_reg + cin2;
    cin2 <= 0;
    cin3 <= cin2;
end

// Final stage of the pipeline
always @(posedge clk) begin
    S <= S_reg + cin3;
    cin3 <= 0;
    cout <= S_reg[31];
end

endmodule