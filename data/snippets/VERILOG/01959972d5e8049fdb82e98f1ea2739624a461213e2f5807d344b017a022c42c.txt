// This is a commented line in VERILOG

// Variable declaration
reg [3:0] a; // Declares a 4-bit variable a
wire b; // Declares a wire

// Conditional statement
if(a == 4'b1111) begin // Checks if a is equal to 1111 in binary
    b = 1'b1; // Assigns the value 1 to wire b
end else begin
    b = 1'b0; // Assigns the value 0 to wire b
end

// Loop statement
for(i = 0; i < 4; i = i + 1) begin // Loops 4 times with i starting at 0 and incrementing by 1 each time
    a = a + 1; // Adds 1 to variable a each iteration
    if(i == 3) begin // Checks if i is equal to 3
        a = a * 2; // Multiplies a by 2
    end
end

// Function declaration
function [7:0] add_two_numbers;
    input [3:0] num1, num2; // Declares two input variables
    begin
        add_two_numbers = num1 + num2; // Adds the two inputs and assigns the result to the function's output
    end
endfunction

// Module declaration
module test_module(
    input [7:0] input1,
    output [3:0] output1,
    output [7:0] output2
);

// Internal wire declaration
wire [7:0] internal_wire;

// Instantiation of other module
other_module other_module_inst(
    .input1(input1),
    .output1(internal_wire)
);

// Assign statements
assign output1 = add_two_numbers(8'b10101010, input1); // Assigns the output of the function to output1
assign output2 = input1 + internal_wire; // Assigns the sum of the input and internal wire to output2

endmodule // End of module declaration