/* This is a test module that implements a 32-bit ripple carry adder */
module ripple_carry_adder(input [31:0] A, input [31:0] B, output [32:0] SUM);
  reg [31:0] carry; // register to store the carry bit
  assign SUM[0] = A[0] ^ B[0]; // XOR operation on LSB inputs
  assign carry = A[0] & B[0]; // AND operation on LSB inputs
  // iterating over the remaining 31 bits
  genvar i; // generate a variable for indexing
  generate
    for(i=1; i<32; i=i+1) begin
      assign SUM[i] = A[i] ^ B[i] ^ carry; // XOR operation with previous carry bit
      assign carry = (A[i] & B[i]) | (A[i] & carry) | (B[i] & carry); // calculating new carry bit
    end
  endgenerate
  assign SUM[32] = carry; // assigning final carry bit to MSB of output
endmodule