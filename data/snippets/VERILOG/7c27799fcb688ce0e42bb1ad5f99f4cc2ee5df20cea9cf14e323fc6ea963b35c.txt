// Declaring a 4-bit register
reg [3:0] myRegister;

// Declaring a 2-bit input
input [1:0] myInput;

// Assigning a value to the register based on input
always @ (myInput)
begin
    case (myInput)
        2'b00: myRegister = 4'b0101; // Assigning binary value 0101 to register
        2'b01: myRegister = 4'b0011; // Assigning binary value 0011 to register
        2'b10: myRegister = 4'b1111; // Assigning binary value 1111 to register
        2'b11: myRegister = 4'b0000; // Assigning binary value 0000 to register
    endcase
end

// Declaring a 3-bit output
output [2:0] myOutput;

// Assigning value based on register contents
assign myOutput = myRegister[2:0]; // Assigning first 3 bits of register to output

// Declaring a 2-bit wire for bitwise operation
wire [1:0] myWire;

// Performing bitwise AND operation on register and input
assign myWire = myRegister & myInput;

// Declaring a 4-bit output for arithmetic operation
output [3:0] myArithmetic;

// Assigning value based on arithmetic operation
assign myArithmetic = myRegister + 2'b10; // Adding binary value 10 to register and assigning to output

// Declaring a 4-bit memory with 3 read addresses and 1 write address
reg [3:0] myMemory [2:0];
reg [1:0] readAddr1, readAddr2, readAddr3;
reg writeAddr;

// Assigning values to memory at given addresses
always @ (writeAddr)
begin
    myMemory[0] = 4'b1100; // Assigning binary value 1100 to first memory location
    myMemory[1] = 4'b1010; // Assigning binary value 1010 to second memory location
    myMemory[2] = 4'b0011; // Assigning binary value 0011 to third memory location
end

// Reading from memory at given addresses and assigning to output
always @ (readAddr1, readAddr2, readAddr3)
begin
    myArithmetic[0] = myMemory[readAddr1]; // Reading value from first memory location and assigning to first bit of output
    myArithmetic[1] = myMemory[readAddr2]; // Reading value from second memory location and assigning to second bit of output
    myArithmetic[2] = myMemory[readAddr3]; // Reading value from third memory location and assigning to third bit of output
    myArithmetic[3] = myRegister[0]; // Assigning first bit of register to last bit of output
end

// Using a loop to perform a specific operation multiple times
integer i;
for (i = 0; i < 6; i = i + 1)
begin
    myRegister = myRegister << 1; // Shift register one bit to the left
end