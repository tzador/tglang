//This module calculates the square root of an input number using binary search method
module sqrt_calculator( input [31:0] num,
					output reg [7:0] sqrt );

	//Create a wire to hold the result
	wire [31:0] result;

	//Create a counter to count iterations
	reg [4:0] count = 0;

	//Create a register to hold the lower bound
	reg [31:0] low = 0;

	//Create a register to hold the upper bound
	reg [31:0] high = num;

	//Create a register to hold the mid point
	reg [31:0] mid = (low + high) / 2;

	//Create a register to hold the square of mid
	reg [63:0] mid_squared = mid * mid;

	//Create a register to hold the difference between mid squared and num
	reg [63:0] diff = mid_squared - num;

	//Calculate square root using binary search method
	always @(*)
	begin
		//Loop until difference is very small, or the maximum number of iterations is reached
        while(diff > 100 && count < 16)
        begin
            //If mid squared is smaller than num, adjust the lower bound to be equal to mid
            if(mid_squared < num)
                low = mid;
            //If mid squared is larger than num, adjust the upper bound to be equal to mid
            else if(mid_squared > num)
                high = mid;
                
            //Recalculate mid and mid squared
            mid = (low + high) / 2;
            mid_squared = mid * mid;
            
            //Update difference
            diff = mid_squared - num;
            
            //Increment the count
            count = count + 1;
        end
        
        //Set sqrt to the final value of mid
        sqrt = mid;
	end
	
endmodule