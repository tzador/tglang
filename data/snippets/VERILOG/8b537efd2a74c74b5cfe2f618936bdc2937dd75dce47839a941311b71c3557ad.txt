// This code is for a 4-bit Adder with Carry Out

module adder (output reg [3:0] result,
              output reg carry_out,
              input [3:0] a,
              input [3:0] b,
              input carry_in);

  // "result" is a 4-bit output register that stores the sum of "a" and "b"
  // "carry_out" is a single-bit output register that stores the carry out of the addition
  // "a" and "b" are input registers that store the 4-bit numbers to be added
  // "carry_in" is a single-bit input register that stores the carry in for the addition

  always @(a, b, carry_in) begin
    // This always block triggers when there is a change in any of the input registers
    result = a + b + carry_in; // Adds "a" and "b" along with "carry_in"

    // If the result is greater than 4 bits (i.e. there is a carry out), set the carry_out register to 1
    if (result > 4'b1111) begin
      carry_out = 1;
    end else begin
      carry_out = 0; // Otherwise, set carry_out register to 0
    end
  end
endmodule