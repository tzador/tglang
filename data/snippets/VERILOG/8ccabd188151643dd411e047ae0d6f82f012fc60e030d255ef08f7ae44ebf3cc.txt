// This code snippet generates a finite state machine that counts from 0 to 9 and then resets

module counter(
    input clk, // clock input
    input rst, // asynchronous reset input
    output [3:0] count // 4-bit output representing the count
);

// create a 4-bit register to hold the count
reg [3:0] count_reg;

// state enum for the finite state machine
typedef enum logic [2:0] {
    STATE_0, // initial counter state
    STATE_1,
    STATE_2,
    STATE_3,
    STATE_4,
    STATE_5,
    STATE_6,
    STATE_7,
    STATE_8,
    STATE_9, // final counter state
    STATE_RESET // reset state for count
} state_enum;

// create an instance of the state enum
state_enum current_state, next_state;

// always block for sequential state logic
always_ff @(posedge clk, negedge rst) begin
    if (rst == 1) begin // asynchronous reset
        current_state <= STATE_RESET; // reset state
        count_reg <= 0; // reset count
    end else begin
        current_state <= next_state; // update current state
    end
end

// combinational logic for next state and count increment
always_comb begin
    case (current_state)
        STATE_0: begin
            next_state = STATE_1; // transition to next state
            count_reg = 0; // increment count
        end
        STATE_1: begin
            next_state = STATE_2;
            count_reg = 1;
        end
        STATE_2: begin
            next_state = STATE_3;
            count_reg = 2;
        end
        STATE_3: begin
            next_state = STATE_4;
            count_reg = 3;
        end
        STATE_4: begin
            next_state = STATE_5;
            count_reg = 4;
        end
        STATE_5: begin
            next_state = STATE_6;
            count_reg = 5;
        end
        STATE_6: begin
            next_state = STATE_7;
            count_reg = 6;
        end
        STATE_7: begin
            next_state = STATE_8;
            count_reg = 7;
        end
        STATE_8: begin
            next_state = STATE_9;
            count_reg = 8;
        end
        STATE_9: begin
            next_state = STATE_RESET; // transition to reset state
            count_reg = 9; // final count value
        end
        STATE_RESET: begin
            next_state = STATE_0; // transition back to initial state
            count_reg = 0; // reset count
        end
    endcase
end

// assign the count_reg value to the output
assign count = count_reg;

endmodule