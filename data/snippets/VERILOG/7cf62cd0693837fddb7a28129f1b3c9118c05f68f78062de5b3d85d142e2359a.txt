/**
 * A 4-bit binary-to-BCD converter using Verilog
 * Inputs: 4-bit binary number
 * Outputs: 8-bit BCD equivalent
 */

module binary_to_bcd(
    input [3:0] binary,
    output [7:0] bcd
);

// define an 8-bit vector to store the BCD digits
reg [7:0] bcd_digits;

// use a case statement to convert binary to BCD
always @* begin
    case(binary)
        // if binary is 0000, set bcd_digits to 0000 0000
        4'd0: bcd_digits = 8'b00000000;
        // if binary is 0001, set bcd_digits to 0000 0001
        4'd1: bcd_digits = 8'b00000001;
        // if binary is 0010, set bcd_digits to 0000 0010
        4'd2: bcd_digits = 8'b00000010;
        // if binary is 0011, set bcd_digits to 0000 0011
        4'd3: bcd_digits = 8'b00000011;
        // if binary is 0100, set bcd_digits to 0000 0100 
        4'd4: bcd_digits = 8'b00000100;
        // if binary is 0101, set bcd_digits to 0000 0101 
        4'd5: bcd_digits = 8'b00000101;
        // if binary is 0110, set bcd_digits to 0000 0110
        4'd6: bcd_digits = 8'b00000110;
        // if binary is 0111, set bcd_digits to 0000 0111
        4'd7: bcd_digits = 8'b00000111;
        // if binary is 1000, set bcd_digits to 0000 1000
        4'd8: bcd_digits = 8'b00001000;
        // if binary is 1001, set bcd_digits to 0000 1001
        4'd9: bcd_digits = 8'b00001001;
        // if binary is 1010, set bcd_digits to 0001 0000
        4'd10: bcd_digits = 8'b00010000;
        // if binary is 1011, set bcd_digits to 0001 0001
        4'd11: bcd_digits = 8'b00010001;
        // if binary is 1100, set bcd_digits to 0001 0010
        4'd12: bcd_digits = 8'b00010010;
        // if binary is 1101, set bcd_digits to 0001 0011
        4'd13: bcd_digits = 8'b00010011;
        // if binary is 1110, set bcd_digits to 0001 0100
        4'd14: bcd_digits = 8'b00010100;
        // if binary is 1111, set bcd_digits to 0001 0101
        4'd15: bcd_digits = 8'b00010101;
    endcase
end

// assign the output bcd to the bcd_digits vector
assign bcd = bcd_digits;

endmodule