//This is a verilog code snippet for a 4-bit ripple carry adder

/* Module declaration*/
module add4bit (input [3:0] A, B, output [3:0] SUM, output CARRY);
   /* Declare internal signals */
   wire [4:0] tempSUM, tempCARRY; 
   /* Use full adder for each bit */
   fullAdder FA0 (A[0], B[0], 0, tempSUM[0], tempCARRY[0]); 
   fullAdder FA1 (A[1], B[1], tempCARRY[0], tempSUM[1], tempCARRY[1]); 
   fullAdder FA2 (A[2], B[2], tempCARRY[1], tempSUM[2], tempCARRY[2]); 
   fullAdder FA3 (A[3], B[3], tempCARRY[2], tempSUM[3], tempCARRY[3]); 
   
   /* Output sum and carry */
   assign SUM = tempSUM[3:0]; 
   assign CARRY = tempCARRY[3]; 
endmodule 

/* Full adder module declaration */
module fullAdder (input a, b, c, output sum, output carry); 
   wire s1, s2, c1, c2; 
   xor(s1, a, b); // First XOR operation 
   xor(sum, s1, c); // Second XOR operation 
   and(c1, s1, c); // First AND operation 
   and(c2, a, b); // Second AND operation 
   or(carry, c1, c2); // OR operation 
endmodule