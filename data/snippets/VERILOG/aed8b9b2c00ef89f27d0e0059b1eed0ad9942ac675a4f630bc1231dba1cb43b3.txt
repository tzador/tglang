/*
This code snippet implements a finite state machine
that determines the next state based on two input signals
and outputs the current state.
*/

module state_machine(
  input clk, // clock input signal
  input reset, // reset signal
  input signal_1, // first input signal
  input signal_2, // second input signal
  output reg[1:0] current_state // current state output signal
);

  // declare states as parameters
  parameter A = 2'b00;
  parameter B = 2'b01;
  parameter C = 2'b10;
  parameter D = 2'b11;

  // declare state register and initialize to state A
  reg[1:0] state_reg = A;

  // always block triggered on the clock signal
  always@(posedge clk) begin
    // check if reset signal is high
    if (reset) begin
      // reset state to initial state A
      state_reg <= A;
    end
    else begin
      // perform state transition based on input signals
      case(state_reg)
        A: begin
          if (signal_1 && signal_2) begin
            state_reg <= B;
          end
          else if (signal_1 && !signal_2) begin
            state_reg <= C;
          end
          else begin
            state_reg <= D;
          end
        end
        B: begin
          if (!signal_1 && signal_2) begin
            state_reg <= A;
          end
          else if (signal_1 && signal_2) begin
            state_reg <= C;
          end
          else begin
            state_reg <= D;
          end
        end
        C: begin
          if (signal_1 && !signal_2) begin
            state_reg <= D;
          end
          else if (signal_1 && signal_2) begin
            state_reg <= A;
          end
          else begin
            state_reg <= B;
          end
        end
        D: begin
          if (!signal_1 && !signal_2) begin
            state_reg <= A;
          end
          else if (!signal_1 && signal_2) begin
            state_reg <= C;
          end
          else begin
            state_reg <= B;
          end
        end
      endcase
    end
  end

  // assign current state to output signal
  always@(state_reg) begin
    current_state = state_reg;
  end

endmodule