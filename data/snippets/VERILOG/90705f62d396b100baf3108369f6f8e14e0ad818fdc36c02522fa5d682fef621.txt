//this is a 16-bit ripple carry adder module
module ripple_carry_adder(
  input [15:0] A, //first 16-bit input
  input [15:0] B, //second 16-bit input
  input C_in, //carry-in input
  output [15:0] sum, //16-bit sum output
  output C_out //carry-out output
);

//define internal signals
wire [15:0] carry; //carry signal
wire [15:0] carry_in; //internal carry signal, used for carry propagation
wire [15:0] sum_temp; //temporary sum signal

//generate the sum signal using full adder modules
//and assign it to the temporary sum signal
genvar i; //generate variable for indexing
generate
  for(i=0; i<16; i=i+1) begin : adders
    full_adder fa(
      .A(A[i]),
      .B(B[i]),
      .C(carry_in[i]), //carry-in signal for this adder
      .sum(sum_temp[i]),
      .C_out(carry[i])
    );
    assign carry_in[i+1] = carry[i]; //carry-out of this adder is the carry-in of the next one
  end
endgenerate

//assign the carry-out of the MSB full adder to the overall C_out output
assign C_out = carry[15];

//assign the temporary sum signal to the output sum
assign sum = sum_temp;

endmodule

//define the full adder module
module full_adder(
  input A, //first input
  input B, //second input
  input C, //carry-in input
  output sum, //sum output
  output C_out //carry-out output
);

//generate the sum and carry-out signals using XOR and AND gates
//and assign them to the outputs
assign sum = A ^ B ^ C;
assign C_out = (A & B) | (A & C) | (B & C);

endmodule