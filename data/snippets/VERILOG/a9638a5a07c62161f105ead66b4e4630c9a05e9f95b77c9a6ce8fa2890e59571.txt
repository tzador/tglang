module multiplier (a, b, start, clk, ready, result);
// Inputs
input [7:0] a; // First number
input [7:0] b; // Second number
input start; // Start signal
input clk; // Clock signal

// Outputs
output ready; // Output signal indicating when result is ready
output [15:0] result; // Result of multiplication

// Registers
reg signed [15:0] mult_res; // Register for holding the multiplied result
reg [3:0] loop_count; // Register for counting the number of iterations in the loop

// Internal signals
wire [7:0] a_reg; // Internal register for holding the value of a
wire [7:0] b_reg; // Internal register for holding the value of b
wire [7:0] b_shifted; // Internal register for holding the value of b shifted by one bit

// Combinational logic
always @ (a)
a_reg <= a; // Assign the value of a to the internal register a_reg
 
always @ (b)
b_reg <= b; // Assign the value of b to the internal register b_reg

always @ (b_reg)
b_shifted <= {b_reg[6:0], 1'b0}; // Shift b_reg by one bit, equivalent to multiplying by 2

// Sequential logic for multiplication loop
always @ (posedge clk)
begin
    if (start) begin // Start signal is active
        loop_count <= 4'b0; // Initialize loop_count to 0
        mult_res <= 16'b0; // Initialize mult_res to 0
    end else if (loop_count < 4) begin // Loop through 4 iterations
        mult_res <= mult_res + {(b_reg[0] & a_reg), b_shifted}; // Add b_shifted to mult_res if b_reg is odd
        b_reg <= b_shifted; // Update b_reg by shifting it by one bit
        loop_count <= loop_count + 1; // Increment loop_count by 1
    end else begin // All iterations completed
        ready <= 1; // Set ready signal high
        result <= mult_res; // Assign the final result to the output signal
    end
end
endmodule