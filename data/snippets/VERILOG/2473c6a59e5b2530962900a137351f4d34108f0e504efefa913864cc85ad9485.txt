module MultDiv(input wire [7:0] A, B, input wire clk, input wire reset, output reg [15:0] M, Q, output reg flags);

//MultDiv module performs multiplication and division operations on two 8-bit signed inputs, A and B
//It uses Booth's algorithm for multiplication and non-restoring division algorithm for division

//Register declaration for Multiplication operation
reg [7:0] P, C1, C2;	//Intermediate registers used in Booth's algorithm
reg C0;			//Used to store the carry bit

//Register declaration for Division operation
reg [7:0] R1, R2;	//Intermediate registers used in non-restoring division algorithm
reg R0;		//Used to store the remainder
reg sign;	//Stores the sign of the result

always @ (posedge clk)
	begin
		if (reset == 0)		//Reset condition, all registers set to 0 and flags cleared
			begin
				M <= 0;
				Q <= 0;
				flags <= 0;
				P <= 0;
				C0 <= 0;
				C1 <= 0;
				C2 <= 0;
				R0 <= 0;
				R1 <= 0;
				R2 <= 0;
				sign <= 0;
			end
			
		else if (A[7] == 1 && B[7] == 1)	//Check for negative inputs
			sign <= 1;
		
		else
			sign <= 0;
		
		//Multiplication operation using Booth's algorithm
		P <= {A[7], A};	//Adding a sign bit to A
		C0 <= 0;
		C2 <= P[0];		
		C1 <= P[1];
		
		always @ (C2 or C1)
			begin
				case ({C2, C1})
					2'b00: begin P <= P >> 1; C0 <= 0; end		//Multiplication by 0
					2'b01: begin P <= P + B; C0 <= 0; end			//Multiplication by 1, no shift required
					2'b10: begin P <= P - B; C0 <= 1; end			//Multiplication by -1, shift and 2's complement required
					2'b11: begin P <= P + B; C0 <= 1; end			//Multiplication by -2, shift and 2's complement required
				endcase
			end

		//Division operation using non-restoring division algorithm
		if (B == 0)	//If divisor is 0, set flags to indicate error
			flags[0] <= 1;
		
		else if (A == 0)	//Output 0 if dividend is 0
			begin
				M <= 0;
				Q <= 0;
			end
		
		else 
			begin
				R1 <= {A[7], A};	//Adding a sign bit to A
				R0 <= 0;
				
				for (i = 7; i >= 0; i = i - 1)
					begin
						R0 <= R0 << 1;
						R0[0] <= R1[0];
						
						if (R0 > 0)		//If remainder is positive, subtract divisor and shift quotient to the left by 1
							begin
								R0 <= R0 - B;
								R1 <= R0 << 1;
								Q <= Q << 1;
								Q[0] <= 1;
							end
						
						else if (R0 < 0)	//If remainder is negative, add divisor and shift quotient to the left by 1
							begin
								R0 <= R0 + B;
								R1 <= R0 << 1;
								Q <= Q << 1;
								Q[0] <= 0;
							end
						
						else		//If remainder is 0, shift quotient to the left by 1
							begin
								Q <= Q << 1;
								Q[0] <= 0;
							end
					end
				
				M <= R0;	//Output remainder
			end
	
	end

//Flags to indicate status of operation
assign flags[1] = A[7] ^ B[7];	//Overflow flag
assign flags[2] = (A[7] && B[7]) || (~A[7] && ~B[7]);	//Sign flag
assign flags[3] = Q[7] ^ sign;	//Carry flag

endmodule