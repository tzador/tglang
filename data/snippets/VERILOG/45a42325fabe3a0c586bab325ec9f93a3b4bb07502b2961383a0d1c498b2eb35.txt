module ALU(input [7:0] A, input [7:0] B, input [2:0] opcode, output [7:0] output);

reg [7:0] result;
always @(*) begin
        case(opcode)
                3'b000 : result <= A + B; // add
                3'b001 : result <= A - B; // subtract
                3'b010 : result <= A & B; // bitwise and
                3'b011 : result <= A | B; // bitwise or
                3'b100 : result <= A ^ B; // bitwise xor
                3'b101 : result <= ~A; // bitwise not of A
                3'b110 : result <= A << 1; // shift A left by 1
                3'b111 : result <= B >> 1; // shift B right by 1
                default : result <= 8'b00000000; // default to outputting 0
        endcase
end

assign output = result;

endmodule