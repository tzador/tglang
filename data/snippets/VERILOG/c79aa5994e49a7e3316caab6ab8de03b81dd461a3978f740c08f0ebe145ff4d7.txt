// This code represents a 10-bit counter with reset functionality

module counter (clk, reset, c_out);

  input clk, reset;
  output [9:0] c_out;

  reg [9:0] count;

  always @ (posedge clk or posedge reset) begin // using a always block for synchronous behavior and edge detection
    if (reset) begin // if reset is high, set count to 0
      count <= 10'b0;
    end else begin // if reset is low, increment count by 1
      count <= count + 1;
    end
  end

  assign c_out = count; // assigning the count value to output

endmodule