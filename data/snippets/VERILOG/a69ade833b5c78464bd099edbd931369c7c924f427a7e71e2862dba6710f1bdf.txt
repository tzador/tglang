// This is a Verilog code snippet for a 4-bit shift register with inputs for data, shift direction, and a clock

module shift_register(
  input [3:0] data_in, // input data to be shifted into the register
  input shift_dir, // input to determine direction of shift (0 for right, 1 for left)
  input clk, // input clock signal
  output reg [3:0] data_out // output data from the register
);

  reg [3:0] register; // internal register used for storing data
  wire [3:0] shifted; // internal wire used for shifting data

  always @(posedge clk) begin // synchronous process triggered on positive edge of clock
    if (shift_dir) begin // if shift direction is left
      shifted[0] = register[1]; // shift data from [1] to [0]
      shifted[1] = register[2]; // shift data from [2] to [1]
      shifted[2] = register[3]; // shift data from [3] to [2]
      shifted[3] = data_in; // replace [3] with new input data
    end else begin // if shift direction is right
      shifted[0] = data_in; // replace [0] with new input data
      shifted[1] = register[0]; // shift data from [0] to [1]
      shifted[2] = register[1]; // shift data from [1] to [2]
      shifted[3] = register[2]; // shift data from [2] to [3]
    end
    register <= shifted; // set register to shifted data on next positive edge
  end

  assign data_out = register; // assign output to current register value
endmodule