// Declaration of counter variable
reg [3:0] counter;

// Declaration of input and output ports
input clk, reset;
output reg [7:0] outputValue;

// Initial block to initialize counter to 15 and output to 0
initial begin
  counter = 4'b1111;
  outputValue = 8'b00000000;
end

// Always block to increment counter every time the clock ticks
always @ (posedge clk or posedge reset) begin
  if (reset) begin
    // If reset is high, reset counter to 15 and output to 0
    counter <= 4'b1111;
    outputValue <= 8'b00000000;
  end
  else begin
    // If reset is low, increment counter and output based on counter value
    counter <= counter + 1;
    case (counter)
      // When counter is 15, output value is 255 (11111111 in binary)
      4'b1111: outputValue <= 8'b11111111;
      // When counter is 14, output value is 170 (10101010 in binary)
      4'b1110: outputValue <= 8'b10101010;
      // When counter is 13, output value is 85 (01010101 in binary)
      4'b1101: outputValue <= 8'b01010101;
      // When counter is 12, output value is 0 (00000000 in binary)
      4'b1100: outputValue <= 8'b00000000;
      // Default case to output counter value in binary form
      default: outputValue <= counter;
    endcase
  end
end