// This code snippet models a 4-bit divider
module divider (clk, rst, dividend, divisor, quotient, remainder);
  input clk, rst;
  input [3:0] dividend, divisor;
  output [3:0] quotient, remainder;

  reg [3:0] dividend_reg, divisor_reg, quotient_reg, remainder_reg;
  reg [2:0] count;

  always @(posedge clk or negedge rst) begin
    if (!rst) begin // reset values
      count <= 4'b0;
      dividend_reg <= 4'b0;
      divisor_reg <= 4'b0;
      quotient_reg <= 4'b0;
      remainder_reg <= 4'b0;
    end else begin // perform division
      if (count == 4'b0) begin
        dividend_reg <= dividend;
        divisor_reg <= divisor;
      end else begin
        dividend_reg <= {dividend_reg[2:0], dividend_reg[3]};
        if (dividend_reg[3:0] >= divisor_reg) begin
          dividend_reg <= dividend_reg - divisor_reg;
          quotient_reg[count-1] <= 1'b1;
        end else begin
          quotient_reg[count-1] <= 1'b0;
        end
      end
      if (count < 4'b1000) begin
        count <= count + 1'b1;
      end else begin // division complete
        remainder_reg <= dividend_reg;
        count <= 4'b0; // reset count
      end
    end
  end

  assign quotient = quotient_reg;
  assign remainder = remainder_reg;

endmodule