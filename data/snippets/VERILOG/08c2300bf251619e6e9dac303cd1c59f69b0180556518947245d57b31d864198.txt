//This code snippet uses a state machine to control an LED based on user input

//Defining module for state machine
module state_machine(input clk, input user_input, output reg led);
    //Defining states
    localparam S0 = 0, //Initial state
                S1 = 1, //State where LED is ON
                S2 = 2, //State where LED is OFF
                S3 = 3; //Final state
                
    reg [1:0] state, next_state; //Registers to hold current and next state values
    
    always @ (posedge clk) begin
        if(user_input) begin //If user input is high
            case(state) //Check current state
                S0: begin //If initial state
                    next_state = S1; //Go to state S1 (turn LED ON)
                    led = 1; //Set LED value to high
                end
                S1: begin //If state S1
                    next_state = S2; //Go to state S2 (turn LED OFF)
                    led = 0; //Set LED value to low
                end
                S2: begin //If state S2
                    next_state = S1; //Go to state S1 (turn LED ON)
                    led = 1; //Set LED value to high
                end
                default: next_state = S0; //If any other state, go back to initial state
            endcase
        end
        else begin //If user input is low
            case(state) //Check current state
                S0: next_state = S0; //Stay in state S0
                S1: next_state = S1; //Stay in state S1
                S2: next_state = S2; //Stay in state S2
                default: next_state = S0; //If any other state, go back to initial state
            endcase
        end
    end
    
    always @* begin //Next state logic
        state = next_state; //Update current state with next state
    end
endmodule

//Defining module for testbench
module tb_state_machine();
    reg clk, user_input; //Input signals
    wire led; //Output signal
    
    state_machine sm(clk, user_input, led); //Instantiate state machine module
    
    //Clock generation
    initial begin
        clk = 0; //Initial value of clock
        #5 clk = 1; //Toggle clock every 5 units of time
        #5 clk = 0;
    end
    
    //User input generation
    initial begin
        user_input = 0; //Initial value of user input
        #10 user_input = 1; //Set user input to high after 10 units of time
        #5 user_input = 0; //Set user input back to low after 5 units of time
        #15 user_input = 1; //Set user input to high after 15 units of time
    end
endmodule