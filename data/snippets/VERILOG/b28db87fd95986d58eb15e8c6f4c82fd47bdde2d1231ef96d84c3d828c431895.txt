// This module implements a shift register with parallel load
module shift_register (
	input clock, 			// input clock signal
	input reset,			// input reset signal, active high
	input load,			// input load signal, active high
	input [7:0] data_in,	// input data to be loaded
	input enable,			// input enable signal, active high
	output reg [7:0] data_out	// output data
);

	reg [7:0] reg_data;	// internal register for storing data

	// reset the register to all zeros
	always @ (posedge reset)
		reg_data <= 8'b00000000;

	// load data into register when load signal is high and enable is also high
	// data will be loaded on the next positive clock edge
	always @ (posedge clock)
		if (load && enable)
			reg_data <= data_in;

	// shift the data in the register on every positive clock edge
	always @ (posedge clock)
		if (~load && enable)
			reg_data <= {reg_data[6:0], reg_data[7]};

	// output the data from the last position in the register
	assign data_out = reg_data[7];

endmodule