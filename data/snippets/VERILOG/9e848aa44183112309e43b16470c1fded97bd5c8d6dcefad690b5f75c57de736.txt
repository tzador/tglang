module FSM (input clk, 
           input reset, 
           input req, 
           output reg [2:0] state, 
           output reg valid);

  // State definitions
  parameter S0 = 3'd0;
  parameter S1 = 3'd1;
  parameter S2 = 3'd2;
  parameter S3 = 3'd3;
  
  // Output definitions
  parameter VALID = 1'b1;
  parameter NOT_VALID = 1'b0;
  
  // Registers for storing current state and next state
  reg [2:0] current_state, next_state;
  
  // Initial state
  always @ (posedge clk, negedge reset) begin
    if (reset) begin
      current_state <= S0;
    end else begin
      current_state <= S0; // change this to change the initial state
    end
  end
  
  // State transition logic
  always @ (posedge clk) begin
    if (req) begin
      case (current_state)
        S0: next_state <= S1;
        S1: next_state <= S2;
        S2: next_state <= S3;
        S3: next_state <= S0;
      endcase
    end else begin
      next_state <= current_state;
    end
  end
  
  // Output logic
  always @ (posedge clk) begin
    if (req) begin
      valid <= VALID;
    end else begin
      valid <= NOT_VALID;
    end
  end
  
  // Assign next state to current state
  always @ (posedge clk) begin
    current_state <= next_state;
  end
  
endmodule