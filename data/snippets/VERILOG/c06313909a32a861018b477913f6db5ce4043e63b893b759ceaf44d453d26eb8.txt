// This is a module declaration
module counter #(
parameter N = 4, // Defining a parameter N with a default value of 4
parameter M = 2 // Defining a parameter M with a default value of 2
)(
input clk,   // Input clock signal
input rst,   // Input reset signal
input start, // Input start signal
output reg [N-1:0] count,
output reg done
);

reg [N-1:0] count_reg; // Creating a register to store the count value
wire [N-1:0] count_next; // Creating a wire to hold the next count value
wire [N-1:0] count_enable; // Creating a wire to enable counting
wire [N-1:0] reset_count; // Creating a wire to reset the count value

assign count_next = count_reg + 1; // Assigning the next count value to be one more than the current count value
assign count_enable = (start && ~done) ? 1 : 0; // Assigning the count enable to be true when the start signal is high and done signal is low
assign reset_count = (reset || done) ? 1 : 0; // Assigning the reset count signal to be true when either the reset or done signal is true

always @(posedge clk) begin  // Creating a synchronous always block to increment the count
    if(reset_count) begin // If the reset count signal is true
        count_reg <= N'b0; // Reset the count value to be all 0's
    end else if(count_enable) begin // If the count enable signal is true
        count_reg <= count_next; // Assign the next count value to the count register
    end
end

always @(posedge clk) begin // Creating a synchronous always block to check if counting is complete
    if(reset_count) begin // If the reset count signal is true
        done <= 1'b0; // Set the done signal to be low
    end else if(count_reg >= M) begin // If the count value is greater than or equal to the defined threshold M
        done <= 1'b1; // Set the done signal to be high
    end
end

endmodule // End of module declaration