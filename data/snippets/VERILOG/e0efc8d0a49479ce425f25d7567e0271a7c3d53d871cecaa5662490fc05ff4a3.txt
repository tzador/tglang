// Defining a submodule with input, output, and internal signal
module Submodule(
    input a, b, c, // input signals
    output d, e, // output signals
    output [3:0] f, // 4-bit output signal
    // internal signal
    reg [2:0] internal_sig
    );

    // Combinational logic
    // Using assign statement to assign values to output signals
    assign d = a & b; // d is the result of a AND b
    assign e = b | c; // e is the result of b OR c
    assign f[3] = a; // first bit of f is the value of a
    assign f[2] = b; // second bit of f is the value of b
    assign f[1] = c; // third bit of f is the value of c
    assign f[0] = internal_sig; // fourth bit of f is the value of internal_sig

    // Sequential logic
    always @ (posedge clk)
    begin
        internal_sig <= a ^ b; // internal_sig is updated on every rising edge of clk by performing XOR operation on a and b
    end

endmodule