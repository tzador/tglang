// This is a Verilog code snippet that implements a 4-bit adder using carry lookahead adder architecture

module adder_4_bit(input [3:0] a, b, //input 4-bit numbers
			output [3:0] sum, //output 4-bit sum
			output carry_out); //carry out bit
	//declare internal wires and registers
	wire [3:0] g, p; //generate and propagate signals
	reg [3:0] c; //carry in bits

	//assign carry in bits
	assign c[0] = 0; //first bit has no carry in
	assign c[1] = g[0] | (p[0] & c[0]); //second bit is generated or propagated and combined with previous carry in bit
	assign c[2] = g[1] | (p[1] & c[1]); //third bit is generated or propagated and combined with previous carry in bit
	assign c[3] = g[2] | (p[2] & c[2]); //fourth bit is generated or propagated and combined with previous carry in bit

	//assign sum bits
	assign sum[0] = a[0] ^ b[0] ^ c[0]; //first bit is a XOR b XOR carry in
	assign sum[1] = a[1] ^ b[1] ^ c[1]; //second bit is a XOR b XOR carry in
	assign sum[2] = a[2] ^ b[2] ^ c[2]; //third bit is a XOR b XOR carry in
	assign sum[3] = a[3] ^ b[3] ^ c[3]; //fourth bit is a XOR b XOR carry in

	//assign carry out bit
	assign carry_out = g[3] | (p[3] & c[3]); //carry out bit is generated or propagated and combined with fourth carry in bit

	//generate generate and propagate signals
	assign g[0] = a[0] & b[0]; //generate signal for first bit
	assign p[0] = a[0] | b[0]; //propagate signal for first bit
	assign g[1] = a[1] & b[1]; //generate signal for second bit
	assign p[1] = a[1] | b[1]; //propagate signal for second bit
	assign g[2] = a[2] & b[2]; //generate signal for third bit
	assign p[2] = a[2] | b[2]; //propagate signal for third bit
	assign g[3] = a[3] & b[3]; //generate signal for fourth bit
	assign p[3] = a[3] | b[3]; //propagate signal for fourth bit

	//testbench for adder module
	initial begin
		//test case 1
		a = 4'b0000; //input a = 0
		b = 4'b0000; //input b = 0
		#10 $display("sum = %b, carry_out = %b", sum, carry_out); //display output sum and carry out
		//test case 2
		a = 4'b0001; //input a = 1
		b = 4'b0001; //input b = 1
		#10 $display("sum = %b, carry_out = %b", sum, carry_out); //display output sum and carry out
		//test case 3
		a = 4'b0010; //input a = 2
		b = 4'b0101; //input b = 5
		#10 $display("sum = %b, carry_out = %b", sum, carry_out); //display output sum and carry out
		//test case 4
		a = 4'b1111; //input a = 15
		b = 4'b0001; //input b = 1
		#10 $display("sum = %b, carry_out = %b", sum, carry_out); //display output sum and carry out
	end
endmodule