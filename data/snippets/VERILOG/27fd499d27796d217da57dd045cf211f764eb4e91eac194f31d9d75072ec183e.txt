`timescale 1ns / 1ps // set timescale to 1ns/1ps
module counter (input clk, input rst, input enable, output reg [3:0] count); // declare module with inputs and output
parameter LIMIT = 8; // define parameter LIMIT as 8
reg [3:0] next_count, temp_count; // declare two registers with 4 bits
always @(posedge clk) begin // start always block with sensitivity to positive edge of clk
	if (rst) begin // check if rst is 1
		next_count <= 0; // if yes, set next_count to 0
	end else if (enable) begin // else check if enable is 1
		temp_count <= next_count + 1; // if yes, increment temp_count by 1
		if (temp_count >= LIMIT) begin // check if temp_count is greater than or equal to LIMIT
			next_count <= 0; // if yes, set next_count to 0
		end else begin // else
			next_count <= temp_count; // set next_count to temp_count
		end
	end
end
assign count = next_count; // assign output to next_count
endmodule // end module declaration