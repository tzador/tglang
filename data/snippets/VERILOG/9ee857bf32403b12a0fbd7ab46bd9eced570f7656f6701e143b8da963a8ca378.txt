// this module implements a 32-bit adder with carry input and output

module adder_32bit (
    input [31:0] num1,
    input [31:0] num2,
    input cin,
    output [31:0] sum,
    output cout
);

reg [31:0] temp_sum;
reg temp_cout;

// use a carry look-ahead method for faster computation
wire [31:0] g, p, carry;

assign g = num1 & num2; // generate function for carry lookahead
assign p = num1 ^ num2; // propagate function for carry lookahead
assign carry = {g[30:1], num1[0] & num2[0]} | (p & {num1[30:1], num1[0]} & {num2[30:1], num2[0]});

// compute the sum using full-adders with carry input and output
always @ (*)
begin
    temp_sum[0] = num1[0] ^ num2[0] ^ cin;
    temp_cout = g[0] | (p[0] & cin);
    for (int i = 1; i < 32; i = i + 1)
    begin
        temp_sum[i] = num1[i] ^ num2[i] ^ carry[i-1];
        temp_cout = g[i] | (p[i] & carry[i-1]) | (temp_cout & (num1[i] | num2[i])); 
    end
end

assign sum = temp_sum;
assign cout = temp_cout;

endmodule