// This code snippet implements a 4-bit ALU with a carry and overflow flag

module ALU4bit(input [3:0] A, B, //input operands
               input [3:0] Sel,   //input for operation select
               input C_in,         //input for carry in
               output [3:0] Out,   //output result
               output C_out,       //output carry out
               output OVF         //output overflow flag
               );
  wire [3:0] and_out, or_out, xor_out, sum_out; //wires for intermediate outputs
  wire and_sel0, and_sel1, or_sel0, or_sel1, xor_sel0, xor_sel1; //wires to select operation
  wire C_op; //wire for carry operation

  // Operation select logic
  assign and_sel0 = Sel[0] & Sel[1];
  assign and_sel1 = Sel[2] | Sel[3];
  assign or_sel0 = Sel[0] | Sel[1];
  assign or_sel1 = Sel[2] & Sel[3];
  assign xor_sel0 = Sel[0] ^ Sel[1];
  assign xor_sel1 = Sel[2] ^ Sel[3];

  // Operation logic
  assign and_out = (and_sel0 & A) & (and_sel1 & B);
  assign or_out = (or_sel0 | A) | (or_sel1 | B);
  assign xor_out = (xor_sel0 ^ A) ^ (xor_sel1 ^ B);

  // Carry logic
  assign C_out = (and_out | or_out | xor_out) & C_in; //carry out is high if any of the three outputs are high
  assign C_op = and_sel0 | (or_sel0 & C_in); //carry operation is performed with AND and OR gates
  assign sum_out = xor_out ^ C_op; //sum is XOR of operation output and carry operation

  // Result logic
  assign Out = sum_out[3:0]; //output result is 4 bits
  assign OVF = sum_out[2]; //overflow flag is determined by the 3rd bit of the sum

endmodule