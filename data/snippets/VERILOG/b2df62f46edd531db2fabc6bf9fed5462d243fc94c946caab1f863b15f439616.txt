//This code snippet is a 4-bit ripple carry adder in Verilog
module ripple_carry_adder(input [3:0] A, input [3:0] B, //create inputs A and B as 4-bit vectors
                          input C_in, //single input for the carry in
                          output [3:0] sum, //output as a 4-bit vector
                          output C_out); //single output for the carry out
 
    reg [3:0] sum; //declare a 4-bit register for the sum
    reg C_out; //declare a single bit register for the carry out
 
    always@(A or B or C_in) begin //use always block to update the sum and carry out
        sum = A + B + C_in; //sum is equal to A + B + the carry in
        C_out = (A[0] & B[0]) | (A[0] & C_in) | (B[0] & C_in); //carry out is determined by the bitwise AND and OR operations of the individual bits
 
        for(int i = 0; i < 3; i = i + 1) begin //for loop to implement the ripple carry mechanism for each bit
            C_out = (A[i+1] & B[i+1]) | (A[i+1] & C_out) | (B[i+1] & C_out); //carry out is updated using the next bit in A and B
            sum[i+1] = A[i+1] ^ B[i+1] ^ C_out; //sum is updated using the bitwise XOR operation of the individual bits
        end
    end
 
endmodule //end of the module