// This code snippet shows the implementation of a 4-bit adder using two 2-bit adders

module four_bit_adder (
  input [3:0] A, B, // 4-bit inputs
  input C_in, // carry input
  output [3:0] S, // 4-bit sum output
  output C_out // carry output
);

wire [1:0] carry; // wire to store intermediate carry value

// Instantiate two 2-bit adders and connect them to the inputs
two_bit_adder adder1(
  .A(A[1:0]),
  .B(B[1:0]),
  .C_in(C_in),
  .S(S[1:0]),
  .C_out(carry[0])
);

two_bit_adder adder2(
  .A(A[3:2]),
  .B(B[3:2]),
  .C_in(carry[0]),
  .S(S[3:2]),
  .C_out(C_out)
);

endmodule // end of module four_bit_adder

// Submodule for a 2-bit adder
module two_bit_adder (
  input [1:0] A, B, // 2-bit inputs
  input C_in, // carry input
  output [1:0] S, // 2-bit sum output
  output C_out // carry output
);

// Intermediate signals for the adder
wire X, Y, Z;

// Calculate the sum bits
assign X = A[0] ^ B[0];
assign Y = A[1] ^ B[1];
assign S = {C_in, X ^ C_in, Y};

// Calculate the final carry bit
assign Z = C_in & X | A[0] & B[0];

assign C_out = Z | Y & X; // Use intermediate signals to calculate final carry bit

endmodule // end of submodule two_bit_adder