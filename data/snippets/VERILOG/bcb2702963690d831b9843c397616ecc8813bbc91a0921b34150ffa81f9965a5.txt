// Code snippet for implementing a full adder using Verilog

module full_adder(input a, input b, input carry_in, output sum, output carry_out);

  // Internal wires for intermediate calculations
  wire out1;
  wire out2;

  // Intermediate AND and XOR gates
  assign out1 = a & b; // AND gate for input bits
  assign out2 = a ^ b; // XOR gate for input bits

  // Output XOR and carry generation using intermediate wires
  assign sum = out2 ^ carry_in; // Output sum using XOR gate
  assign carry_out = out1 | (out2 & carry_in); // Output carry using OR and AND gates
    
endmodule