module ALU(clk, reset, A, B, op, result, cin, cout);
  input clk, reset;
  input [31:0] A, B;
  input [3:0] op;
  output [8:0] result;
  output cout;
  wire [31:0] temp1, temp2;

  // Operation selection
  assign temp1 = (op == 4'b0000) ? A & B : // AND operation
                 (op == 4'b0001) ? A | B : // OR operation
                 (op == 4'b0010) ? A ^ B : // XOR operation
                 (op == 4'b0011) ? A + B : // ADD operation
                 (op == 4'b0100) ? A - B : // SUBTRACT operation
                 (op == 4'b0101) ? A >> B : // RIGHT SHIFT operation
                 (op == 4'b0110) ? A << B : // LEFT SHIFT operation
                 (op == 4'b0111) ? ~A : // NOT operation
                 (op == 4'b1000) ? A * B : // MULTIPLY operation
                 (op == 4'b1001) ? A / B : // DIVIDE operation
                 (op == 4'b1010) ? A % B : // MODULO operation
                 (op == 4'b1011) ? A & ~B : // AND NOT operation
                 (op == 4'b1100) ? A | ~B : // OR NOT operation
                 (op == 4'b1101) ? A ^ temp2 : // XOR SWAP operation
                 (op == 4'b1110) ? A && B : // AND COMPARE operation
                 (op == 4'b1111) ? A == B :  // EQUALS operation
                 32'h0; // Default case

  // Carry/Borrow generation
  assign temp2 = (op == 4'b0011) ? temp1[31] : // Carry from ADD operation
                 (op == 4'b0100) ? temp1[31] : // Borrow from SUBTRACT operation
                 (op == 4'b1000) ? temp1[63:32] : // High carry from MULTIPLY operation
                 (op == 4'b1001) ? temp1[63:32] : // High borrow from DIVIDE operation
                 (op == 4'b1010) ? temp1[31] : // Modulo result is always positive
                 (op == 4'b1111) ? temp1[31] : // Carry from EQUALS operation
                 1'b0; // Default case
  

  // Result and carry/borrow output
  assign result = {temp1[31], temp1[31:24], temp2[31], temp1[23:0]}; // Combining result and carry/borrow into output
  assign cout = temp2[31]; // Carry/borrow is equal to the most significant bit of temp2
endmodule