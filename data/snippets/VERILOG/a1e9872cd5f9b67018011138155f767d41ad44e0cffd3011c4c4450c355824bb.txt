// Declare a module with two inputs (A and B) and three outputs (sum, carry, and overflow)
module add(A, B, sum, carry, overflow);

  // Internal wires used for intermediate calculations
  wire [3:0] a = {A, 0}; // Pad A with a zero bit
  wire [3:0] b = {B, 0}; // Pad B with a zero bit

  // Declare a full adder with inputs (A, B, C) and outputs (sum, carry)
  // This full adder will be used for each bit of the addition operation
  full_adder FA(a[0], b[0], 0, sum[0], carry[0]);
  full_adder FA(a[1], b[1], carry[0], sum[1], carry[1]);
  full_adder FA(a[2], b[2], carry[1], sum[2], carry[2]);
  full_adder FA(a[3], b[3], carry[2], sum[3], overflow);

endmodule

// Declare a full adder module with inputs (A, B, Cin) and outputs (S, Cout)
module full_adder(A, B, Cin, S, Cout);

  // Intermediate wires used for calculations
  wire w1, w2, w3;

  // Generate the sum output by using an XOR gate
  assign S = A ^ B ^ Cin;

  // Generate the carry output by using an OR gate
  assign w1 = A & B;
  assign w2 = A & Cin;
  assign w3 = B & Cin;
  assign Cout = w1 | w2 | w3;

endmodule