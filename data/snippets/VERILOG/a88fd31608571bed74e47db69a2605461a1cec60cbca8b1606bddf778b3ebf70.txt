// This code is a 16-bit ripple carry adder with overflow detection
module ripple_carry_adder(
    input [15:0] a, // first input
    input [15:0] b, // second input
    input cin, // carry in
    output [15:0] sum, // output sum
    output cout // carry out
    );
    wire [15:0] sum_wire; // intermediate wire for sum
    wire [16:0] carry; // intermediate wire for carry
    
    // generate 16 full adders in parallel
    genvar i;
    generate
        for(i=0; i<16; i=i+1) begin : adder_loop
            FA #(.WIDTH(1)) full_adder( // using parameterized full adder module
                .cin(i == 0 ? cin : carry[i-1]), // if it's the first adder, use cin, otherwise use carry from previous adder
                .a(a[i]), // use ith bit of a as first input to full adder
                .b(b[i]), // use ith bit of b as second input to full adder
                .cout(carry[i]), // ith bit of carry is the carry out from the full adder
                .sum(sum_wire[i]) // ith bit of sum_wire is the sum output from the full adder
                );
        end
    endgenerate
    
    assign cout = carry[16]; // carry out is the 17th bit of carry
    
    assign sum = sum_wire; // assign output sum to intermediate wire
    
endmodule