/*
This code snippet creates a shift register with a parallel load function
and synchronous shift capabilities.
*/

module shift_reg_parallel_load (clk,load,shift {
    input clk; //clock input
    input load; //load input
    input shift; //shift input
    
    parameter WIDTH = 8; //specifies the width of the shift register
    reg [WIDTH-1:0] data; //declaring a register array for the shift register
    
    always @ (posedge clk) begin //synchronous block begins at every positive edge of clock
        if (load) begin //check if load signal is active
            data <= in; //loads the input into the register array
        end
        else if (shift) begin //check if shift signal is active
            data <= {data[WIDTH-1], data[WIDTH-2:0]}; //shift register by 1 bit
        end
    end
    
    output out = data; //output the current state of the shift register
    
    //testbench code to simulate and test the shift register module
    initial begin
        clk = 0; //initialize clock
        load = 0; //initialize load signal
        shift = 0; //initialize shift signal
        in = 0; //initialize input
        
        #5 load = 1; //set load signal high after 5 time units
        #10 in = 8'hFF; //set input to FF after 10 time units
        #15 load = 0; //set load signal low after 15 time units
        
        #25 shift = 1; //set shift signal high after 25 time units
        #30 shift = 0; //set shift signal low after 30 time units
        
        #35 shift = 1; //set shift signal high again after 35 time units
        #40 shift = 0; //set shift signal low again after 40 time units
        
        #45 $finish; //end simulation after 45 time units
    end
}); //end module shift_reg_parallel_load