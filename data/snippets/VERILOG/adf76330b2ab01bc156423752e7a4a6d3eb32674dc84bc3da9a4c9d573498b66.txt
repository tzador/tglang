// Declare a module
module ComplexCalculator(
    input [7:0] op1, // First operand
    input [7:0] op2, // Second operand
    input [1:0] operation, // Operation to be performed
    output [15:0] result // Result of operation
);
    // Declare internal wires
    wire [15:0] temp_result; // Temporary result for intermediate calculations
    wire [7:0] temp_op; // Temporary operand for conversion and shifts

    // Declare a parameter
    parameter [1:0] ADD = 2'b00; // Addition operation code
    parameter [1:0] MULT = 2'b01; // Multiplication operation code
    parameter [1:0] DIV = 2'b10; // Division operation code
    parameter [1:0] SUB = 2'b11; // Subtraction operation code

    // Declare a variable
    reg [15:0] final_result; // Final result for output

    // Perform appropriate operation based on the code provided
    always @*
        case(operation) // Case statement for operation code
            ADD: begin
                temp_result = op1 + op2; // Perform addition
                final_result = temp_result; // Assign final result
            end
            MULT: begin
                temp_result = op1 * op2; // Perform multiplication
                final_result = temp_result; // Assign final result
            end
            DIV: begin
                temp_op = op1 / op2; // Perform division
                temp_result = temp_op; // Convert temporary operand back to 16-bit
                final_result = temp_result; // Assign final result
            end
            SUB: begin
                temp_result = op1 - op2; // Perform subtraction
                final_result = temp_result; // Assign final result
            end
        endcase
    end

    // Output final result
    assign result = final_result;
endmodule