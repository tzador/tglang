//define parameters for dynamic shift register module
parameter WIDTH = 32; //number of bits in the shift register
parameter DEPTH = 4; //number of registers in the shift register
//create input and output ports for shift register
module shift_register(
  input clk, //clock signal
  input rst, //reset signal
  input [WIDTH-1:0] data_in, //input data to shift register
  output [WIDTH-1:0] data_out //output data from shift register
);
//define internal wires
reg [WIDTH-1:0] reg_data [0:DEPTH-1]; //data registers of shift register
reg [WIDTH-1:0] next_data [0:DEPTH-1]; //hold next values for registers
//assign input data to first register
always @ (posedge clk) begin
  if (!rst) begin //reset signal is active low
    reg_data[0] <= data_in;
  end else begin
    reg_data[0] <= next_data[0];
    next_data[0] <= data_in;
  end
end
//loop through registers to shift the data
always @ (posedge clk) begin
  if (!rst) begin //reset signal is active low
    for (int i=1; i<DEPTH; i=i+1) begin
      reg_data[i] <= reg_data[i-1];
    end
  end else begin
    for (int i=1; i<DEPTH; i=i+1) begin
      reg_data[i] <= next_data[i];
      next_data[i] <= reg_data[i-1];
    end
  end
end
//assign output data from last register
assign data_out = reg_data[DEPTH-1];
endmodule //end of shift_register module