// Declares a module named "basic_circuit" with four input ports and one output port
module basic_circuit (input [3:0] A, B, C, D, output Y);

// Defines a clock signal and a reset signal
reg clk, reset;

// Declares a four-bit register with asynchronous reset
reg [3:0] reg_out; 
always @ (posedge clk or posedge reset) begin
    if (reset) begin
        reg_out <= 4'b0000;
    end else begin
        reg_out <= A ^ B ^ C ^ D;
    end
end

// Assigns the output port "Y" to the output of the register
assign Y = reg_out;

// Instantiates the "basic_circuit" module 
basic_circuit circuit (
    .A(A), // Connects the input port "A" of the "basic_circuit" module to the input port "A" above
    .B(B), // Connects the input port "B" of the "basic_circuit" module to the input port "B" above
    .C(C), // Connects the input port "C" of the "basic_circuit" module to the input port "C" above
    .D(D), // Connects the input port "D" of the "basic_circuit" module to the input port "D" above
    .Y(reg_out) // Connects the output port "Y" of the "basic_circuit" module to the output port "reg_out" above
);

// Defines a testbench module for simulating the "basic_circuit" module
module testbench;
    // Declares a clock signal with a period of 10 units
    reg clk = 1;
    always #10 clk = ~clk;
    
    // Declares four input signals for the "basic_circuit" module
    reg [3:0] A, B, C, D;
    
    // Instantiates the "basic_circuit" module in the testbench
    basic_circuit test_circuit (
        .A(A),
        .B(B),
        .C(C),
        .D(D),
        .Y()
    );
    
    // Initializes the input signals
    initial begin
        A = 4'b0101;
        B = 4'b0011;
        C = 4'b1100;
        D = 4'b1010;
        #20;
    end
endmodule