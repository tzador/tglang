module adder(clk, reset, a, b, sum);
  input clk;       //input clock signal
  input reset;     //input reset signal
  input [7:0] a, b;  //input 8-bit numbers a and b
  output [7:0] sum;  //output 8-bit sum of a and b

  reg [7:0] temp_a;  //register to store temporary value of a
  reg [7:0] temp_b;  //register to store temporary value of b
  reg [7:0] temp_s;  //register to store temporary sum value

  always@(posedge clk or posedge reset) begin
    if(reset) begin
      temp_a <= 0;   //set temporary value of a to 0
      temp_b <= 0;   //set temporary value of b to 0
    end
    else begin
      temp_a <= a;   //store value of a in temp_a
      temp_b <= b;   //store value of b in temp_b
    end
    temp_s <= temp_a + temp_b;  //calculate sum and store it in temp_s register
  end

  assign sum = temp_s; //assign value of temp_s as output to sum

endmodule