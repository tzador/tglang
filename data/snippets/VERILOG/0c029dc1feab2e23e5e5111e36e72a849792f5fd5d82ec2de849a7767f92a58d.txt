`timescale 1ns / 1ns

module CLA
(
    input [3:0] A,
    input [3:0] B,
    output [4:0] SUM
);

// Define internal wires and output register
wire [3:0] M1, M2, M3, M4, Cout; // internal wires for carry calculation
reg [4:0] SUM; // output register for final sum

// Generate the full adder modules
FullAdder F1(A[0], B[0], Cin, M1, Cout[0]);
FullAdder F2(A[1], B[1], Cout[0], M2, Cout[1]);
FullAdder F3(A[2], B[2], Cout[1], M3, Cout[2]);
FullAdder F4(A[3], B[3], Cout[2], M4, Cout[3]);

// Generate the final carry calculation
assign Cout[4] = Cout[3] & M4;

// Generate the final sum calculation
always @(*) begin
    SUM = {Cout[4], M3, M2, M1, A[0] ^ B[0]};
end

endmodule

module FullAdder
(
    input A,
    input B,
    input Cin,
    output S,
    output Cout
);

assign S = A ^ B ^ Cin; // calculate sum
assign Cout = (A & B) | (Cin & (A ^ B)); // calculate carry

endmodule