// This code defines a 32-bit binary adder module with carry-in and carry-out ports

module BinaryAdder(
    input [31:0] A, // first addend
    input [31:0] B, // second addend
    input C_in, // carry-in input
    output [31:0] Sum, // sum of A and B
    output C_out // carry-out output
);
    
    reg [31:0] temp; // temporary register to store sum
    wire carry; // wire to store carry value
    
    assign Sum = temp[31:0]; // assign sum to output port
    assign C_out = carry; // assign carry to output port
    
    integer i; // index variable for loop
    
    always@(*) begin // always block for sum calculation
        temp = 32'b0; // initialize temp register to 0
        
        for(i = 0; i < 32; i = i + 1) begin // loop through each bit
            temp[i] = A[i] ^ B[i] ^ C_in; // calculate sum using XOR gate and carry-in
            
            if(i != 31) // check if not at last bit
                carry = (A[i] & B[i]) | (A[i] & C_in) | (B[i] & C_in); // calculate carry using AND and OR gates
        end
    end
    
endmodule