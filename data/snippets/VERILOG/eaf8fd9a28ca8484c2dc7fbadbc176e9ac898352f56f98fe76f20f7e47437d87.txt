// This is a Verilog code snippet that implements a 4-bit shift register
module shift_register(
    input logic [3:0] input_data, // 4-bit input data
    input logic clk, // clock input
    input logic enable, // enable signal input
    output logic [3:0] output_data // 4-bit output data
);

logic [3:0] reg_data; // 4-bit register data

// Sequential logic process using always_ff to trigger on positive edge of clock
always_ff @ (posedge clk) begin
    if (enable) begin
        reg_data <= {reg_data[2:0], input_data}; // shift data by one bit to the left
    end
end

assign output_data = reg_data; // assign register data to output_data

endmodule