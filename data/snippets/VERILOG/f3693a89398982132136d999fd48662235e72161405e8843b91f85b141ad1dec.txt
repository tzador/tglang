//This code uses three counters and a multiplexer to generate a complex waveform
//These counters control the duty cycle and period of the generated waveform
//They are connected to the inputs of the multiplexer to select the appropriate waveform

//Declare the three counters with initial values
reg [7:0] counter1 = 8'b00001111; //determines duty cycle
reg [5:0] counter2 = 6'b001100; //determines period
reg [2:0] counter3 = 3'b000; //determines which waveform to generate

//Declare the output signal
wire out_waveform;

//Instantiate the multiplexer
mux8to1 mux (out_waveform, counter1[5], counter2[2], counter3[1], counter3[0]);

//Generate the waveforms
always @ (posedge clk) begin
    if (counter3 == 3'b000)
        counter1 <= counter1 + 8'b00000001; //increase duty cycle
    else if (counter3 == 3'b001)
        counter2 <= counter2 + 6'b000001; //increase period
    else if (counter3 == 3'b010)
        counter1 <= counter1 - 8'b00000001; //decrease duty cycle
    else if (counter3 == 3'b011)
        counter2 <= counter2 - 6'b000001; //decrease period
    else if (counter3 == 3'b100)
        counter1 <= counter1 + 8'b00000111; //sine waveform
    else if (counter3 == 3'b101)
        counter1 <= counter1 - 8'b00000111; //square waveform
    else if (counter3 == 3'b110)
        counter1 <= counter1 + 8'b00000001; //triangle waveform
    else
        counter1 <= counter1 - 8'b00000001; //sawtooth waveform
end

//Control the selection of the waveform using manual inputs
always @ (posedge clk) begin
    if (sel1)
        counter3 <= 3'b000; //duty cycle
    else if (sel2)
        counter3 <= 3'b001; //period
    else if (sel3)
        counter3 <= 3'b010; //phase
    else if (sel4)
        counter3 <= 3'b011; //direction
    else if (sel5)
        counter3 <= 3'b100; //sine waveform
    else if (sel6)
        counter3 <= 3'b101; //square waveform
    else if (sel7)
        counter3 <= 3'b110; //triangle waveform
    else if (sel8)
        counter3 <= 3'b111; //sawtooth waveform
end