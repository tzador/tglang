// Simple counter module
module counter(
    input clk, // Clock input 
    input reset, // Active high reset input
    output reg [7:0] count // 8-bit output representing the count value
);

always @ (posedge clk or posedge reset) begin
    if (reset) begin // If reset is high, reset the count value to 0
        count <= 8'b0;
    end else begin // Else increment the count value by 1
        count <= count + 1;
    end
end

endmodule

// Testbench for counter module
module counter_test;

reg clk; // Clock signal
reg reset; // Reset signal
wire [7:0] count; // Output wire for the count value

// Instantiate the counter module
counter dut(
    .clk(clk),
    .reset(reset),
    .count(count)
);

// Clock generation
always #10 clk = ~clk;

// Reset generation
initial begin
    reset = 1; // Assert reset
    #5 reset = 0; // Release reset after 5 time units
end

// Simulation
initial begin
    // Print header
    $display("Time, Count");

    // Run simulation for 25 time units
    repeat (25) begin
        #10; // Wait for 10 time units
        $display("%d, %d", $time, count); // Print time and count value
    end
    $finish; // End simulation
end

endmodule