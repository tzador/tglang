// This is a Verilog code snippet for a 4-bit ripple-carry adder

module ripple_carry_adder(input [3:0] A, B, // 4-bit inputs A,B
                         input C_in, // carry-in
                         output [3:0] S, // 4-bit sum output
                         output C_out); // carry-out

wire [3:0] temp; // used to store intermediate sum
wire [3:0] C; // used to store intermediate carry values

// The full adder module takes in two bits and a carry-in, and outputs the sum and carry-out
// It can be replaced with a built-in full-adder primitive in Verilog

module full_adder(a, b, c_in, s, c_out);
    input a; // first input bit
    input b; // second input bit
    input c_in; // carry-in
    output s; // sum output bit
    output c_out; // carry-out

    assign s = a ^ b ^ c_in; // sum is XOR of inputs and carry-in
    assign c_out = (a & b) | (a & c_in) | (b & c_in); // carry-out is OR of ANDs of inputs
endmodule

// The ripple-carry adder is constructed using multiple full adders, with the carry-out connected to the next adder's carry-in
// The first adder has C_in connected to the initial carry-in input

full_adder FA0 (.a(A[0]), .b(B[0]), .c_in(C_in), .s(S[0]), .c_out(C[0]));
full_adder FA1 (.a(A[1]), .b(B[1]), .c_in(C[0]), .s(S[1]), .c_out(C[1]));
full_adder FA2 (.a(A[2]), .b(B[2]), .c_in(C[1]), .s(S[2]), .c_out(C[2]));
full_adder FA3 (.a(A[3]), .b(B[3]), .c_in(C[2]), .s(S[3]), .c_out(C_out));
endmodule

// Example usage:

module test();
    reg [3:0] A, B;
    reg C_in;
    wire [3:0] S;
    wire C_out;

    ripple_carry_adder RCA (.A(A), .B(B), .C_in(C_in), .S(S), .C_out(C_out));

    initial
    begin
        A = 4'b1010; // 10 in binary
        B = 4'b0011; // 3 in binary
        C_in = 1'b0;
        $display("A = %b, B = %b, C_in = %b", A, B, C_in);
        #5;
        $display("Sum = %b, Carry-out = %b", S, C_out);
        // Output should be '1101' and '0' (13 in binary and no carry-out)
        #10;
        A = 4'b1111; // 15 in binary
        B = 4'b0001; // 1 in binary
        C_in = 1'b1;
        $display("A = %b, B = %b, C_in = %b", A, B, C_in);
        #5;
        $display("Sum = %b, Carry-out = %b", S, C_out);
        // Output should be '0001' and '1' (1 in binary and carry-out of 1)
    end
endmodule

/*
Output:
A = 1010, B = 0011, C_in = 0
Sum = 1101, Carry-out = 0
A = 1111, B = 0001, C_in = 1
Sum = 0001, Carry-out = 1
*/