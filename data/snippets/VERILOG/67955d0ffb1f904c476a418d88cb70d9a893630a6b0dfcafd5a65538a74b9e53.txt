//Defining two 16-bit input ports
module addition(input [15:0] A, input [15:0] B, output [15:0] sum);

//Creating a 16-bit register for storing the sum
reg [15:0] sum_reg;

//Defining a 16-bit wire for handling carryout
wire [15:0] carry_out;

//Creating a variable for handling overflow
integer overflow = 0;

//Generating the addition logic using full adders
genvar i;
generate
    for (i = 0; i < 16; i = i + 1) begin
        full_adder full_adder_inst(
            .a(A[i]),
            .b(B[i]),
            .c_in(carry_out[i]),
            .sum(sum_reg[i]),
            .c_out(carry_out[i+1])
        );

        //Handling overflow by checking the carryout of the MSB
        if (i == 15 && carry_out[15] == 1) begin
            overflow = 1;
        end
    end
endgenerate

//Assigning output based on the overflow variable
assign sum = (overflow == 1) ? 65535 : sum_reg;

endmodule

//Creating a full adder module
module full_adder(input a, input b, input c_in, output sum, output c_out);
    //Generating the sum using an XOR gate
    assign sum = a ^ b ^ c_in;

    //Determining the carryout using an OR gate
    assign c_out = (a & b) | (a & c_in) | (b & c_in);
endmodule