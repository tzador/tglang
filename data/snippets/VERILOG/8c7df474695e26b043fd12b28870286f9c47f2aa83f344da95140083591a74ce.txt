//Defining a module with input, output, and reg variables
module example_module (
    input [7:0] A, //input variable with 8-bit width
    input [3:0] B, //input variable with 4-bit width
    output [11:0] C, //output variable with 12-bit width
    reg [11:0] D //register variable with 12-bit width
);

//Defining a wire variable
wire [7:0] E;

//Defining an always block
always @ (*) begin
    //Combinational logic with case statements
    case (A[7:4]) //using the higher 4 bits of input A for case selection
        4'b0001: E = A + B; //if A[7:4] equals 4'b0001, add A and B and assign to E
        4'b1000: E = A - B; //if A[7:4] equals 4'b1000, subtract B from A and assign to E
        default: E = A; //if A[7:4] doesn't match any of the cases, assign A to E
    endcase
    
    //Sequential logic with always @(posedge clk) block
    always @(posedge clk) begin
        //Incrementing register D on each positive clock edge
        D <= D + 1;
    end
end

//Assigning output C to be the concatenation of E and D
assign C = {E, D};

endmodule