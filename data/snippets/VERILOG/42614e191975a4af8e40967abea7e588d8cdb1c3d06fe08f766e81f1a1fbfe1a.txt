module complex_multiplier( input signed [7:0] x_real, input signed [7:0] x_imag, input signed [7:0] y_real, input signed [7:0] y_imag, output signed [15:0] out_real, output signed [15:0] out_imag);
// This module performs complex multiplication on two 8-bit signed numbers
// and outputs the result as a 16-bit signed number for both the real and imaginary components.

wire signed [14:0] prod1_real, prod1_imag, prod2_real, prod2_imag, prod3_real, prod3_imag, prod4_real, prod4_imag, prod5_real, prod5_imag;

/* First, we calculate the four partial products using the input numbers. 
    The partial products are 15 bits wide to avoid overflow during multiplication. */
    
assign prod1_real = x_real * y_real;
assign prod2_real = x_real * y_imag;
assign prod3_real = x_imag * y_real;
assign prod4_real = x_imag * y_imag;

assign prod1_imag = 0;
assign prod2_imag = prod3_real;
assign prod3_imag = prod2_real;
assign prod4_imag = -(x_real * y_real);

/* Next, we use a combination of addition and subtraction to calculate the 
   final real and imaginary products. The result is then truncated to 16 bits. */
   
assign prod5_real = prod1_real + prod4_imag;
assign prod5_imag = prod2_imag + prod3_real;

assign out_real = prod5_real[15:0];
assign out_imag = prod5_imag[15:0];

endmodule