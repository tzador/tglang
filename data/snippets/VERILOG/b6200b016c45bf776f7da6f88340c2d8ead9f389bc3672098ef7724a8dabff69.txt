// This code snippet creates a 4-bit ripple carry adder with overflow detection

module ripple_carry_adder(
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output cout
    );
    
    wire [3:0] carry; // declaring a wire to store the carry bits
    
    assign carry[0] = (a[0] & b[0]) | (a[0] & cin) | (b[0] & cin); // calculate the carry bit for the first bit
    assign carry[1] = (a[1] & b[1]) | (a[1] & carry[0]) | (b[1] & carry[0]); // calculate the carry bit for the second bit
    assign carry[2] = (a[2] & b[2]) | (a[2] & carry[1]) | (b[2] & carry[1]); // calculate the carry bit for the third bit
    assign carry[3] = (a[3] & b[3]) | (a[3] & carry[2]) | (b[3] & carry[2]); // calculate the carry bit for the fourth bit
    
    assign sum = a + b + cin; // calculate the sum
    
    assign cout = carry[3]; // assign the last carry bit to the output carry
    
endmodule