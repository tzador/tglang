module pattern_detector (
    input clk, // clock input
    input rst, // reset input
    input pattern[7:0], // pattern to be detected
    input sample, // sample input
    output reg match // output indicating if the pattern has been detected
);

reg [7:0] shift_reg[7:0]; // shift register to store sampled bits
reg [7:0] compare_reg[7:0]; // register to compare stored bits with pattern
reg [7:0] counter; // counter to keep track of number of matches
reg [7:0] match_counter; // counter to keep track of number of consecutive matches
reg [7:0] target_match; // target number of consecutive matches needed

always @ (posedge clk or posedge rst) begin
    if (rst) begin
        // reset shift register, compare register, and counters
        for (int i = 0; i < 8; i++) begin
            shift_reg[i] <= 0;
            compare_reg[i] <= 0;
        end
        counter <= 0;
        match_counter <= 0;
        target_match <= 0;
    end else if (sample) begin
        // shift register and compare register to the right
        for (int i = 7; i > 0; i--) begin
            shift_reg[i] <= shift_reg[i-1];
            compare_reg[i] <= compare_reg[i-1];
        end
        // insert new sample into shift register
        shift_reg[0] <= sample;
        // set compare register to target pattern
        compare_reg[0] <= pattern;
        // check if compare register matches pattern
        if (compare_reg == pattern) begin
            counter <= counter + 1;
        end else begin
            counter <= 0;
        end
        // check if number of matches reaches target number
        if (counter == target_match) begin
            match_counter <= match_counter + 1;
        end else begin
            match_counter <= 0;
        end
        // set match output if consecutive matches reaches target
        if (match_counter == target_match) begin
            match <= 1;
        end else begin
            match <= 0;
        end
    end
end

endmodule