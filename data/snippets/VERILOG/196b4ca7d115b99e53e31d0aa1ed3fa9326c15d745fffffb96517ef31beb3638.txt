// Module declaration
module ALU (input [7:0] a, input [7:0] b, input [2:0] op, output reg [7:0] y, output reg carry_out);

  // Create internal signals
  wire [7:0] sum;
  wire [8:0] extended_a, extended_b;
  
  // Extend input values to 8 bits
  assign extended_a = {a[7], a};
  assign extended_b = {b[7], b};
  
  // Logic to carry out various arithmetic/logic operations
  always @* begin
    case(op)
      3'b000: begin // Addition operation
        sum = extended_a + extended_b;
        carry_out = sum[8];
      end
      3'b001: begin // Subtraction operation
        sum = extended_a - extended_b;
        carry_out = ~sum[8];
      end
      3'b010: begin // Bitwise AND operation
        sum = a & b;
        carry_out = sum[7];
      end
      3'b011: begin // Bitwise OR operation
        sum = a | b;
        carry_out = sum[7];
      end
      3'b100: begin // Bitwise XOR operation
        sum = a ^ b;
        carry_out = sum[7];
      end
      3'b101: begin // Left shift operation
        sum = a << b;
        carry_out = a[7];
      end
      3'b110: begin // Right shift operation
        sum = a >> b;
        carry_out = a[0];
      end
      3'b111: begin // Logical equality operation
        sum = (a == b) ? 8'b0000_0000 : 8'b1111_1111;
        carry_out = 0;
      end
      default: begin
        sum = 0;
        carry_out = 0;
      end
    endcase
  end
  
  // Output value
  always @* begin
    y = sum;
  end
  
endmodule