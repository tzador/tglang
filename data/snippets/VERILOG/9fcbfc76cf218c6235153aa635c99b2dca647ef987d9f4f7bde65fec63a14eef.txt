//This code snippet creates a 4-bit Ripple Carry Adder module
module ripple_carry_adder (
    input [3:0] A, B, //4-bit inputs A and B
    input cin, //carry-in
    output [3:0] sum, //4-bit output for sum
    output cout //carry-out
    );
    
    reg [3:0] temp_sum; //register to store the sum
    reg temp_cout; //register to store carry-out
    wire [3:0] carry_in; //wire to connect carry-in to full adder
    wire [3:0] carry_out; //wire to store carry-out for each full adder
    
    assign carry_in[0] = cin; //assign carry-in to first full adder
    assign carry_in[1] = carry_out[0]; //assign carry-out of first full adder to second full adder's carry-in
    assign carry_in[2] = carry_out[1]; //assign carry-out of second full adder to third full adder's carry-in
    assign carry_in[3] = carry_out[2]; //assign carry-out of third full adder to fourth full adder's carry-in
    
    //create 4 full adders for each bit
    full_adder fa0(A[0], B[0], carry_in[0], temp_sum[0], carry_out[0]);
    full_adder fa1(A[1], B[1], carry_in[1], temp_sum[1], carry_out[1]);
	full_adder fa2(A[2], B[2], carry_in[2], temp_sum[2], carry_out[2]);
	full_adder fa3(A[3], B[3], carry_in[3], temp_sum[3], temp_cout);
	
	//assign outputs to sum and cout
	assign sum = temp_sum;
	assign cout = temp_cout;
	
endmodule

//Full adder module to add two bits 
module full_adder (
    input a, b, c, //inputs a, b, and carry-in c
    output sum, //output sum of the two bits
    output cout //output carry-out
    );
    
    //use two half adders to create a full adder
    half_adder ha1(a, b, temp_sum1, temp_cout1); //first half adder
    half_adder ha2(temp_sum1, c, sum, temp_cout2); //second half adder with previous sum as input and carry-in as b
    
    assign cout = temp_cout1 | temp_cout2; //carry-out is the combination of the carry-out from both half adders
    
endmodule

//Half adder module to add two bits
module half_adder (
    input a, b,
    output sum, //output sum of the two bits
    output cout //output carry-out
    ); 
    
    assign sum = a ^ b; //sum is a XOR b
    assign cout = a & b; //carry-out is a AND b
    
endmodule