// This code snippet is a Verilog module that implements a 32-bit shift register
module shift_register
#(
parameter WIDTH = 32 // define WIDTH parameter with default value of 32 bits
)
(
input clk, // clock input
input rst, // reset input
input [WIDTH-1:0] data_in, // input data
input en, // enable input
output reg [WIDTH-1:0] data_out // output data
);

reg [WIDTH-1:0] reg_data; // define internal register with width based on parameter

always @(posedge clk or posedge rst) begin // synchronous always block
  if (rst) begin // reset condition
    reg_data <= 0; // reset internal register to 0
  end else begin // non-reset condition
    if (en) begin // enable condition
      reg_data <= {reg_data[WIDTH-2:0], data_in[0]}; // shift data into register, dropping first bit
    end
  end
end

assign data_out = reg_data; // assign internal register value to output

endmodule