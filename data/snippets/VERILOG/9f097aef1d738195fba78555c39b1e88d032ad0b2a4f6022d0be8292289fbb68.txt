//This code snippet generates a 64-bit ripple carry adder
//with carry input and output

module adder_64bit(input [63:0] A, B, input Cin, output [63:0] S, output Cout);

    //Define a 1-bit full adder module
    module full_adder(input a, b, Cin, output S, output Cout);
        wire Sum;
        wire Cout_p, Cout_g;

        //Calculate the sum and the different carry outputs
        assign {Cout_p, Cout_g} = a & b; //Carry outputs for input a and b
        assign {S, Carry_g} = a ^ b; //Sum and carry output for input a and b
        assign Cout = Cout_p | (Cin & Cout_g); //Final carry output including input Cin

    endmodule

    //Instantiate 64 full adders for each bit of the inputs
    genvar i;
    generate
        for (i = 0; i < 64; i = i + 1) begin: adder_loop
            full_adder FA (
                //Input bits
                .a(A[i]),
                .b(B[i]),
                .Cin(C[i]),
                //Output bits
                .S(S[i]),
                .Cout(C_next[i])
            ); 
        end
    endgenerate

    //Output the final carry output and sum
    assign Cout = C_next[64];
    assign S = {C_next[63:0], A[0]} ^ B[0]; //Final sum calculation

endmodule