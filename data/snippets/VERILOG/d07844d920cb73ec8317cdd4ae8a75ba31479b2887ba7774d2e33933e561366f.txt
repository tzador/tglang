/*
This code snippet shows the implementation of a synchronous counter using D flip-flops.
*/

module counter (
    input clk, reset,
    output reg [3:0] count
    );

// Define signals to be used as intermediate values
reg [3:0] q;
reg [3:0] next_q;

always @(posedge clk) begin
    // Synchronous reset
    if (reset) begin
        q <= 4'b0000;
    end else begin
        // Counting logic using D flip-flops
        // Next value of q is equal to current value of q + 1
        next_q[0] <= q[0];
        next_q[1] <= q[1] & (q[0] ^ q[2]);
        next_q[2] <= q[2] & (q[1] ^ q[3]);
        next_q[3] <= q[3] & ~q[2];
        // Update value of q
        q <= next_q;
    end
end

// Output count is always equal to current value of q
assign count = q;

endmodule