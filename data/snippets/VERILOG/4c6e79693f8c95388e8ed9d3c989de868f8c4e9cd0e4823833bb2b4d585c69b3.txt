module ALU(input a, b, output reg [7:0] result, input [3:0] opcode);

// defining the necessary internal registers and wires
reg [7:0] temp;
reg carry;
wire zeroFlag, overflow;

// combinational logic for different opcode operations
always @*
begin

    case (opcode)
        4'b0000: result = a & b; // bitwise AND operation
        4'b0001: result = a | b; // bitwise OR operation
        4'b0010: result = a ^ b; // bitwise XOR operation
        4'b0011: result = a >> 1; // right shift operation
        4'b0100: result = a << 1; // left shift operation
        4'b0101: result = a + b;  // addition operation
        4'b0110: result = a - b;  // subtraction operation
        4'b0111: result = a * b;  // multiplication operation
        
        default: result = a & b; // default opcode is bitwise AND
    endcase
    
    // checking for zeroFlag and overflow conditions
    zeroFlag = (result == 0);
    if (opcode[3] == 0) begin // for shift and bitwise operations
        carry = 0;
        overflow = 0;
    end
    else begin // for addition, subtraction, and multiplication operations
        carry = (result[7] != temp[7]);
        overflow = (result[7] != ~(a[7] ^ b[7]) && temp[7] == ~(a[7] ^ b[7]));
    end
end

// sequential logic for updating temp register and displaying output result
always @(posedge clk)
begin
    temp <= a;
end

endmodule