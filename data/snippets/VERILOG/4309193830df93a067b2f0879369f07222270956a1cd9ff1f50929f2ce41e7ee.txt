module ALU (
    input op,
    input [3:0] a,
    input [3:0] b,
    output reg [3:0] result,
    output carry
);

    /*
        The ALU module takes in two 4-bit inputs (a and b) and an operation (op) 
        and performs the specified operation on the two inputs. 
        The result is stored in the register 'result' and the carry bit is output.
    */

    reg [3:0] temp_result; //temporary register to store intermediate results
    reg carry; //register to store carry bit value

    always @* begin
        case(op)
            0: begin //op = 0 -> Addition
                temp_result = a + b; //perform addition operation
                carry = (a[3] & b[3]) | (a[3] & temp_result[3]) | (b[3] & temp_result[3]); //calculate carry bit
            end

            1: begin //op = 1 -> Subtraction
                temp_result = a - b; //perform subtraction operation
                if(a >= b) carry = 0; //if a is greater than or equal to b then carry is 0 
                else carry = 1; //else carry is 1
            end

            2: begin //op = 2 -> Bitwise AND
                temp_result = a & b; //perform AND operation
                carry = 0; //carry is always 0 for AND operation
            end

            3: begin //op = 3 -> Bitwise OR
                temp_result = a | b; //perform OR operation
                carry = 0; //carry is always 0 for OR operation
            end

            4: begin //op = 4 -> Bitwise XOR
                temp_result = a ^ b; //perform XOR operation
                carry = 0; //carry is always 0 for XOR operation
            end

            5: begin //op = 5 -> Logical Shift Right
                temp_result = a >>> b; //perform logical shift right operation
                carry = a[0]; //carry is the value of the least significant bit of a (lost during shift operation)
            end

            6: begin //op = 6 -> Logical Shift Left
                temp_result = a <<< b; //perform logical shift left operation
                carry = a[3]; //carry is the value of the most significant bit of a (lost during shift operation)
            end

            7: begin //op = 7 -> Arithmetic Shift Right
                temp_result = a >> b; //perform arithmetic shift right operation
                carry = a[0]; //carry is the value of the least significant bit of a (lost during shift operation)
            end

            8: begin //op = 8 -> Arithmetic Shift Left
                temp_result = a << b; //perform arithmetic shift left operation
                carry = a[3]; //carry is the value of the most significant bit of a (lost during shift operation)
            end
        endcase

        result = temp_result; //store result in 'result' register
    end

endmodule