module top_module 
(
// input ports 
  input clk, // clock input 
  input rst_n, // active low reset 
  input [7:0] data_in, // 8-bit data input 
  input enable, // control signal for enabling 
// output ports 
  output reg [7:0] data_out, // 8-bit data output 
);
// internal registers and wires 
reg [1:0] state; // 2-bit state register 
reg [7:0] counter; // 8-bit counter 
reg [7:0] accumulator; // 8-bit accumulator for summing data inputs 
wire [7:0] product; // 8-bit wire for storing product of data input and counter 
// state definitions 
parameter IDLE = 2'b00; // initial state 
parameter COUNTING = 2'b01; // state where counter is incremented 
parameter OUTPUT = 2'b10; // state where data is output 
// always block for state machine 
always @(posedge clk or negedge rst_n) begin 
 if (!rst_n) begin // asynchronous reset 
   state <= IDLE; // reset state to idle 
   counter <= 0; // reset counter 
   accumulator <= 0; // reset accumulator 
   data_out <= 0; // reset output data 
 end else begin 
   case (state) 
     IDLE: begin 
       if (enable) begin // if enable signal is high, transition to counting state 
         state <= COUNTING; 
       end 
     end 
   
     COUNTING: begin 
       counter <= counter + 1; // increment counter every clock cycle 
       product <= data_in * counter; // calculate product of data input and counter 
       accumulator <= accumulator + product; // add product to accumulator 
       if (counter == 255) begin // if counter reaches max value, transition to output state 
         state <= OUTPUT; 
       end 
     end 
   
     OUTPUT: begin 
       data_out <= accumulator; // output accumulated data 
       counter <= 0; // reset counter 
       accumulator <= 0; // reset accumulator 
       state <= IDLE; // transition back to idle state 
     end 
   endcase 
 end 
end 
endmodule