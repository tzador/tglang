module CPU (input wire clk, rst,
input wire [31:0] data_in,
output wire [31:0] data_out,
output wire [3:0] flag);
//This module represents a basic CPU with a 32-bit data bus, reset, and output flags for different operations.

//Define internal registers
reg [31:0] accumulator;
reg [31:0] data_temp;
reg [31:0] data_out_temp;
reg [3:0] flag_temp;

//Clock cycle process
always @(posedge clk) begin
  //Reset condition
  if(rst) begin
    accumulator <= 0;
    flag_temp <= 0;
  end
  //Instruction fetch cycle
  else begin
    if(flag_temp == 0) begin //Load instruction
      data_temp <= data_in;
      accumulator <= data_temp;
      flag_temp <= 1; //Set flag to next operation
    end
    else if(flag_temp == 1) begin //Increment instruction
      accumulator <= accumulator + 1;
      flag_temp <= 2; //Set flag to next operation
    end
    else if(flag_temp == 2) begin //Store instruction
      data_out_temp = accumulator;
      flag_temp <= 0; //Set flag back to load
      data_out <= data_out_temp; //Output data
    end
  end
end

//Assign output flags based on current flag value
always @(*) begin
  if(flag_temp == 0) //Load flag
    flag = 4'b0001;
  else if(flag_temp == 1) //Increment flag
    flag = 4'b0010;
  else if(flag_temp == 2) //Store flag
    flag = 4'b0100;
  else //Default flag
    flag = 4'b0000;
end

endmodule