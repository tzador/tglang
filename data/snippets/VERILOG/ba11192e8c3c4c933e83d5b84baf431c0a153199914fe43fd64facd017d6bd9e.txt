`timescale 1ns / 1ps // sets the simulation timescale to 1 nanosecond / 1 picosecond

module example(input wire clk, input wire [7:0] data_in, output reg [7:0] data_out);

parameter DATA_LENGTH = 10; // sets a parameter for the data length to 10 bits

reg [7:0] temp_data; // declares a register for temporary data
reg [7:0] data_array [DATA_LENGTH-1:0]; // declares an array of registers for data storage

always @(posedge clk) // executes the following block on every positive edge of the clock
begin
	temp_data <= data_in; // assigns the input data to the temporary data register
end

always @* // executes the following block whenever the input data changes
begin
	for (int i = 0; i < DATA_LENGTH; i = i + 1) // initializes a for loop to iterate through the data array
	begin
		data_array[i] <= temp_data[i]; // assigns the corresponding bits from the temporary data to the data array
	end
end

always @(posedge clk) // executes the following block on every positive edge of the clock
begin
	data_out <= data_array[0]; // assigns the first element of the data array to the output data
	for (int i = DATA_LENGTH-1; i > 0; i = i - 1) // initializes a for loop to iterate through the data array in reverse order
	begin
		data_out <= {data_out[6:0], data_array[i]}; // shifts the output data to the left and adds the next bit from the data array
	end
end

endmodule // ends the module declaration