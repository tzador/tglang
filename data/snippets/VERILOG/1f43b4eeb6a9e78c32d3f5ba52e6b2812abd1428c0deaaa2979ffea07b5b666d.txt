// Declare a module for an Arbiter with two input signals and one output signal
module Arbiter (input CLK, input RST, input [1:0] REQ, output CON);
	
	// Declare a state register for storing the current state of the Arbiter
	reg [1:0] state;
	
	// Declare a temporary register for storing the highest priority request, initialize to 2'b0
	reg [1:0] temp = 2'b0;
	
	// Declare a logic block for combinatorial logic
	always @ (REQ, state) begin
		
		// Check if the priority level of the current request is higher than the current highest priority
		if (REQ[0] > temp[0]) begin
			temp = REQ;
			state = 2'b01; // Change state to request 0 winning
		end else if (REQ[1] > temp[1]) begin
			temp = REQ;
			state = 2'b10; // Change state to request 1 winning
		end else begin
			state = 2'b00; // Keep state at idle
		end
		
	end
	
	// Declare a sequential block for clocked logic
	always @ (posedge CLK or posedge RST) begin
		if (RST) begin
			// Reset the state and output to idle
			state <= 2'b00;
			CON <= 1'b0;
		end else begin
			// Set the output to the corresponding winning request based on the current state
			case (state)
				2'b01: CON <= REQ[0];
				2'b10: CON <= REQ[1];
				default: CON <= 1'b0;
			endcase
		end
	end
	
endmodule