/*This module takes in a 4-bit input and produces a one-hot encoded output*/
module one_hot_encoder(
    input [3:0] input_data, 
    output [15:0] encoded_output
);

reg [3:0] temp; //temporary register to store input data
reg [15:0] output; //register to hold encoded output

integer i; //integer used for looping

//combinational logic to encode input data
always @* begin
    for(i=0; i<4; i=i+1) begin
        if(input_data[i] == 1'b1) begin
            output[i*4:(i*4)+3] = 4'b0001;
        end else begin
            output[i*4:(i*4)+3] = 4'b0000;
        end
    end
end

//sequential logic that assigns output to encoded output register
always @(posedge clk) begin
    encoded_output <= output;
end

endmodule