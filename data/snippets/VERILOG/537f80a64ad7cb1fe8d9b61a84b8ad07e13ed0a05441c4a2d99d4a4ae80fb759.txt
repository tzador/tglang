// This code snippet is a verilog design for a 2-bit synchronous counter with reset and enable control
module counter2bit(
    input clk, // clock input signal
    input [1:0] reset, // reset input signal
    input enable, // enable input signal
    output reg [1:0] count // output register for the counter value
);

// define internal signals for the counter
reg [1:0] next_count; // stores the next count value
reg [1:0] curr_count; // stores the current count value

// define the counter logic
always @ (posedge clk) begin // synchronous always block triggered on the positive edge of the clock
    if (reset == 2'b11) begin // check if both bits of reset signal are high
        next_count <= 2'b00; // set the next count to 0
    end else begin
        if (enable) begin // check if enable signal is high
            next_count <= curr_count + 1; // increment the count by 1
        end else begin
            next_count <= curr_count; // keep the count value same
        end
    end
end

// assign the count output to current count value
always @ (posedge clk) begin
    curr_count <= next_count; // update the current count value on positive edge of clk
end

// assign the output to the current count value
assign count = curr_count; // assign the output to the current count value

endmodule