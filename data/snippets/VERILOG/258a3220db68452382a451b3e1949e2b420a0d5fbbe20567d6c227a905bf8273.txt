module priority_encoder(input logic [7:0] input_vector, output logic [2:0] encoded_vector);
//Creates a module for a priority encoder with an 8-bit input and 3-bit output

  logic [7:0] temp_vector; //Creates a temporary vector to store the input
  logic [7:0] checked_vector; //Creates a vector to store which input bits have been checked
  
  //Assigns the input vector to the temporary vector
  assign temp_vector = input_vector;
  
  //Checks each input bit to determine the highest priority bit
  always_comb begin
    //Resets the checked vector
    checked_vector = 8'b00000000;
    
    //Iterates through each bit in the temporary vector
    for (integer i = 0; i < 8; i++) begin
      //If the current bit is the highest priority and has not already been checked
      if (temp_vector[i] && !checked_vector[i]) begin
        //Assigns the highest priority bit to the first output bit (MSB)
        encoded_vector[2] = temp_vector[i];
        
        //Sets the current bit as checked
        checked_vector[i] = 1;
        
        //Stops checking the remaining bits
        break;
      end
    end
    
    //Iterates through each bit in the temporary vector again
    for (integer i = 0; i < 8; i++) begin
      //If the current bit is the second highest priority and has not already been checked
      if (temp_vector[i] && !checked_vector[i]) begin
        //Assigns the second highest priority bit to the second output bit 
        encoded_vector[1] = temp_vector[i];
        
        //Sets the current bit as checked
        checked_vector[i] = 1;
        
        //Stops checking the remaining bits
        break;
      end
    end
    
    //Iterates through each bit in the temporary vector again
    for (integer i = 0; i < 8; i++) begin
      //If the current bit is the third highest priority and has not already been checked
      if (temp_vector[i] && !checked_vector[i]) begin
        //Assigns the third highest priority bit to the third output bit (LSB)
        encoded_vector[0] = temp_vector[i];
        
        //Stops checking the remaining bits
        break;
      end
    end
  end
  
endmodule