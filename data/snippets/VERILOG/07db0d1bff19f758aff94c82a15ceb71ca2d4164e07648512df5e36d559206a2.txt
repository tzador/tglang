// Declare a module
module full_adder (
  input a, // First input
  input b, // Second input
  input c_in, // Carry input
  output sum, // Output of sum
  output c_out // Output of carry out
)

  // Declare internal wires
  wire s1, s2, s3;

  // Instantiate half adders for first two bits
  half_adder HA1( .a(a), .b(b), .sum(s1), .c_out(c1) );
  half_adder HA2( .a(s1), .b(c_in), .sum(s2), .c_out(c2) );

  // Instantiate another half adder for final bit
  half_adder HA3( .a(s2), .b(c1), .sum(s3), .c_out(c3) );

  // Output the sum as the final result
  assign sum = s3;

  // Generate carry out using OR gate
  assign c_out = c2 | c3;
endmodule

// Declare a half adder module
module half_adder (
  input a, // First input
  input b, // Second input
  output sum, // Output of sum
  output c_out // Output of carry out
)

  // Generate sum bit using XOR gate
  assign sum = a ^ b;

  // Generate carry out using AND gate
  assign c_out = a & b;
endmodule