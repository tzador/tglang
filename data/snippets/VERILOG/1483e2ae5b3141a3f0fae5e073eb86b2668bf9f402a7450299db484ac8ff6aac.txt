// This code snippet demonstrates a Verilog module that performs a binary addition
// The module takes in two 4-bit inputs (A and B) and outputs the sum in a 4-bit output (S)

module binary_addition(A, B, S);     // Module declaration with inputs and output
    input [3:0] A;                    // Declaration of 4-bit input A
    input [3:0] B;                    // Declaration of 4-bit input B
    output [3:0] S;                   // Declaration of 4-bit output S
    wire [3:0] carry;                 // Declaration of 4-bit wire for carry bit

    // Module instantiation for a 1-bit full adder
    // The adder takes in two bits of A and B as inputs and outputs a sum (sum) and carry bit (temp_carry)
    full_adder FA0(A[0], B[0], 1'b0, S[0], temp_carry[0]);    // Instantiating first bit of S and carry bit

    // Iterative addition for remaining bits (1 to 3)
    // Each bit is added using a full adder and the output is fed into the next full adder
    full_adder FA1(A[1], B[1], temp_carry[0], S[1], temp_carry[1]);    // Instantiating second bit of S and carry bit
    full_adder FA2(A[2], B[2], temp_carry[1], S[2], temp_carry[2]);    // Instantiating third bit of S and carry bit
    full_adder FA3(A[3], B[3], temp_carry[2], S[3], carry);            // Instantiating fourth bit of S and final carry bit

    // The final carry bit (carry) is ignored as we are only dealing with a 4-bit sum
    // If the carry bit is 1, it indicates that the sum has exceeded the capacity of 4 bits

endmodule                          // End of module binary_addition

// Definition of a 1-bit full adder module with inputs and outputs
// The inputs are two bits (A and B), carry in (Cin) and the output is a sum (sum) and a carry out (Cout)

module full_adder(A, B, Cin, sum, Cout);
    input A, B, Cin;     // Declaration of inputs
    output sum, Cout;    // Declaration of outputs

    // Intermediate wires for simplifying the gate equations
    wire temp, temp_1, temp_2, temp_3;

    // Implementation of the sum output
    // sum = A xor B xor Cin
    assign temp_1 = A ^ B;         // temp_1 = A xor B
    assign temp_2 = temp_1 ^ Cin;  // temp_2 = (A xor B) xor Cin
    assign sum = temp_2;           // sum = A xor B xor Cin

    // Implementation of the carry output
    // Cout = (A and B) or (Cin and (A xor B))
    assign temp = A & B;                   // temp = A and B
    assign temp_3 = Cin & temp_1;          // temp_3 = Cin and (A xor B)
    assign Cout = temp | temp_3;           // Cout = (A and B) or (Cin and (A xor B))

endmodule   // End of module full_adder