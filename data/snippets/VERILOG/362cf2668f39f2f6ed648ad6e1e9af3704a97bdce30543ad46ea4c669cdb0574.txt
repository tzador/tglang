module adder (x, y, z);
  // This module takes in two inputs, x and y, and outputs their sum, z
  input [7:0] x; // x is an 8-bit binary number
  input [7:0] y; // y is also an 8-bit binary number 
  output [8:0] z; // z is the 9-bit sum of x and y

  wire carry; // wire used to store the carry out from each addition 

  assign z = x + y; // assign statement used to calculate the sum of x and y

  always @* begin // always block used to continuously run the following statements
    if (x[0] && y[0]) begin // if statement used to check if both inputs have a value of 1 in their least significant bit
      assign carry = 1'b1; // if true, carry is set to 1
    end
    else if (x[0] || y[0]) begin // else if statement used to check if either input has a value of 1 in their least significant bit
      assign carry = 1'b0; // if true, carry is set to 0
    end
    else begin // if neither if or else if statements are true, this else statement is executed
      assign carry = 1'b0; // carry is set to 0
    end
  end

  assign z[8] = carry; // assign statement used to assign the carry as the most significant bit of the sum
endmodule