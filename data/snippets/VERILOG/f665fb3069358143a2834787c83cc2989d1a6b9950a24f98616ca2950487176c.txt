// This code snippet generates a 3 bit synchronous up counter with reset and enable signals
// Define inputs and outputs
module up_counter_3bit(
    input wire clk, // clock signal
    input wire rst, // reset signal
    input wire en, // enable signal
    output reg [2:0] count // 3 bit output counter
    );
    
    // Define temporary register
    reg [2:0] temp_count;
    
    // Synchronous reset condition
    always @ (posedge clk, posedge rst) begin
        // Reset counter to 0 if rst signal is high
        if (rst == 1'b1) begin
            count <= 3'b000;
            temp_count <= 3'b000;
        end
        // Else, latch input to temporary register
        else begin
            temp_count <= count;
        end
    end
    
    // Synchronous enable condition
    always @ (posedge clk) begin
        // If enable is high, increment count by 1
        if (en == 1'b1) begin
            count <= temp_count + 1;
        end
        // Else, do not change count value
        else begin
            count <= temp_count;
        end
    end
    
endmodule

// Instantiate module and provide inputs and outputs
up_counter_3bit up_counter(
    .clk(clk), // provide clock signal
    .rst(rst), // provide reset signal
    .en(en), // provide enable signal
    .count(count) // provide output counter signal
);

// Use testbench to test functionality of the up counter
module testbench();
    // Define inputs and outputs for the testbench module
    reg clk; // clock signal
    reg rst; // reset signal
    reg en; // enable signal
    wire [2:0] count; // output counter signal
    
    // Instantiate up counter module with the testbench inputs and outputs
    up_counter_3bit up_counter(
        .clk(clk), // provide clock signal
        .rst(rst), // provide reset signal
        .en(en), // provide enable signal
        .count(count) // provide output counter signal
    );
    
    // Create clock signal with 50% duty cycle
    always #5 clk = ~clk;
    
    // Initial values for inputs
    initial begin
        clk = 1'b0;
        rst = 1'b0;
        en = 1'b0;
        #20 // wait 20 time units to observe counter output
        rst = 1'b1;
        en = 1'b1;
        #20 // wait 20 more time units
        rst = 1'b0;
        en = 1'b1;
        #20 // wait 20 more time units
        en = 1'b0;
        #20 // wait 20 more time units
        $stop; // stop simulation
    end
endmodule