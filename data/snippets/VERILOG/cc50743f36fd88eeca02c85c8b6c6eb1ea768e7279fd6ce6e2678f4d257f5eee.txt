module decoder(input [7:0] address, input [2:0] input_sel, output [7:0] output, input enable, input clock, input reset);
//This module implements a 3-to-8 decoder with enable and synchronous reset

//Signal declarations
reg [7:0] decoded_address;
reg [7:0] out;

//Decoder logic
always @ (posedge clock or posedge reset) begin
	if (reset) begin
		decoded_address <= 0; //Reset decoded address to 0
	end else if (enable) begin
		case (input_sel)
			3'b000: decoded_address <= address[0]; //Select bit 0 of address input
			3'b001: decoded_address <= address[1]; //Select bit 1 of address input
			3'b010: decoded_address <= address[2]; //Select bit 2 of address input
			3'b011: decoded_address <= address[3]; //Select bit 3 of address input
			3'b100: decoded_address <= address[4]; //Select bit 4 of address input
			3'b101: decoded_address <= address[5]; //Select bit 5 of address input
			3'b110: decoded_address <= address[6]; //Select bit 6 of address input
			3'b111: decoded_address <= address[7]; //Select bit 7 of address input
		endcase
	end
end

//Assign output based on decoded address
assign out = {decoded_address, 1'b0};

//Output
assign output = out;

endmodule