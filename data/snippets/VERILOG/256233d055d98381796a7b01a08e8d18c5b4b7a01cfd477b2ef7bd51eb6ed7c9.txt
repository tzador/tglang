/* This code snippet generates a 4-bit ripple-carry adder
   with two 4-bit inputs (A and B) and a 1-bit carry input (Cin) 
   that outputs a 4-bit sum (S) and a 1-bit carry output (Cout).
   It uses full-adder submodules to perform the addition
*/

// Define the module with inputs and outputs
module ripple_adder(
  input [3:0] A,
  input [3:0] B,
  input Cin,
  output [3:0] S,
  output Cout
);

  // Declare internal wires to connect submodules and carry chain
  wire [3:0] sum;
  wire [2:0] carry;

  // Declare submodules for each full-adder
  // The first full-adder uses the inputs A[0], B[0], and Cin
  full_adder FA0(.A(A[0]), .B(B[0]), .Cin(Cin), .S(sum[0]), .Cout(carry[0]));
  // Subsequent full-adders use the inputs A[i], B[i], and the carry output of the previous full-adder
  full_adder FA1(.A(A[1]), .B(B[1]), .Cin(carry[0]), .S(sum[1]), .Cout(carry[1]));
  full_adder FA2(.A(A[2]), .B(B[2]), .Cin(carry[1]), .S(sum[2]), .Cout(carry[2]));
  full_adder FA3(.A(A[3]), .B(B[3]), .Cin(carry[2]), .S(sum[3]), .Cout(Cout));

  // Assign the outputs of the full-adder submodules to the module outputs
  assign S = sum;
  assign Cout = carry[2];

endmodule

// Define the full-adder submodule with inputs, outputs, and internal wires
module full_adder(
  input A,
  input B,
  input Cin,
  output S,
  output Cout
);

  // Declare internal wires for the internal operations
  wire temp1, temp2;

  // Perform the operations for the output sum (S) and carry output (Cout) using bitwise logic
  assign temp1 = A ^ B; // XOR operator (^) compares the inputs and outputs 1 if they are different
  assign S = temp1 ^ Cin; // XOR operator performs the sum
  assign temp2 = A & B; // AND operator (&) compares the inputs and outputs 1 if they are both 1
  assign Cout = temp2 | (temp1 & Cin); // OR operator (|) compares the inputs and outputs 1 if either or both are 1

endmodule