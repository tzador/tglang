// This code snippet generates a divider module using a combinational algorithm

module divider(
    input [7:0] dividend, // input is an 8-bit number representing the dividend
    input [3:0] divisor, // input is a 4-bit number representing the divisor
    output reg [7:0] quotient, // output is an 8-bit number representing the quotient
    output reg [3:0] remainder // output is a 4-bit number representing the remainder
  );

  always @(*) begin // always block to continuously update outputs
    quotient = 8'b0; // initialize quotient to 0
    remainder = 4'b0; // initialize remainder to 0
    for (int i = 7; i >= 0; i = i-1) begin // use a for-loop to iterate through the divisor
      quotient = quotient << 1; // shift quotient left by 1 to make room for next bit
      remainder = remainder << 1; // shift remainder left by 1 to make room for next bit
      if (dividend[i] == 1) begin // if the current bit in dividend is 1
        remainder[0] = 1; // set LSb of remainder to 1
        if(remainder >= divisor) begin // if remainder is greater than or equal to divisor
          remainder = remainder - divisor; // subtract divisor from remainder
          quotient[0] = 1; // set LSb of quotient to 1
        end
      end
    end
  end
endmodule