// This code snippet creates a 4-to-1 multiplexer using Verilog syntax

module multiplexer4to1(input [3:0] data, input [1:0] select, output reg data_out);
	// Define input wires and output reg (register) for data_out
	
	always @(*) begin
		// Use the select inputs to choose which data input to output
		case (select)
			// If select is '00', output data[0]
			2'b00: data_out = data[0];
			// If select is '01', output data[1]
			2'b01: data_out = data[1];
			// If select is '10', output data[2]
			2'b10: data_out = data[2];
			// If select is '11', output data[3]
			2'b11: data_out = data[3];
		endcase
	end
endmodule

/*
This code snippet can be used to create a 4-to-1 multiplexer with 4 data inputs and 2 select inputs.

To use the module, simply instantiate it in your top-level module and connect the data and select inputs and the data output to your desired signals. Example usage:

module top_level_module(input [3:0] data, input [1:0] select, output reg data_out);

	multiplexer4to1 mux_inst(.data(data), .select(select), .data_out(data_out));

endmodule
*/