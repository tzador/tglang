<!DOCTYPE module>
/**
 * Top-level module description
 */
module top (
    input clk,
    input rst,
    input [7:0] data,
    output [7:0] output_data
);

// Instantiate a sub-module
sub_module sub_1 (
    .clk(clk),
    .rst(rst),
    .data1(data),
    .data2(output_data)
);

// Some other logic
reg [7:0] temp_reg;
always @(posedge clk, posedge rst) begin
    if (rst == 1) begin
        temp_reg <= 0;
    end else begin
        temp_reg <= data + 1;
    end
end

// Sequential always block
reg [7:0] counter = 8'd0;
always @(posedge clk) begin
    if (counter < 8'hFF) begin
        counter <= counter + 1;
    end else begin
        counter <= 8'b0;
    end
end

// Combinational always block
assign output_data = (temp_reg > 4'h4) ? data << counter : data + counter;

// Unused wire declaration with default value
wire [7:0] unused_wire = 8'b11001100;

endmodule