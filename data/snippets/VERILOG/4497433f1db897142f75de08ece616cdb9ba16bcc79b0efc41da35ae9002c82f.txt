// Defining an 8-bit adder using carry-lookahead logic
module adder_8bit(
  input [7:0] a,
  input [7:0] b,
  input cin,
  output [8:0] sum
);

// Internal 4-bit adder module
module adder_4bit(
  input [3:0] a,
  input [3:0] b,
  input c,
  output [4:0] s
);

// Intermediate signals for carry lookahead logic
wire[1:0] p;
wire[1:0] g;

// Generate and propagate signals for each bit
assign p[0] = a[0] | b[0];
assign g[0] = a[0] & b[0];
assign p[1] = p[0] | (a[1] & b[1]);
assign g[1] = g[0] + (g[0] & (a[1] | b[1]));

// Propagate carry output for each bit
assign c[0] = c | (p[0] & g[0]);
assign c[1] = c[0] | (p[1] & g[1]);

// Instantiating four 4-bit adders to form an 8-bit adder
adder_4bit adder0(.a(a[0:3]),
                  .b(b[0:3]),
                  .c(c[0]),
                  .s(sum[0:3]));
adder_4bit adder1(.a(a[4:7]),
                  .b(b[4:7]),
                  .c(c[1]),
                  .s(sum[4:7]));

// Final carry output and sum output
assign sum[8] = c[1];
assign sum[7:0] = {adder1.s, adder0.s};

endmodule