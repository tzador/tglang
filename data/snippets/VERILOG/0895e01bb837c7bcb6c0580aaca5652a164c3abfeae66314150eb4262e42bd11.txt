// This is a code snippet in VERILOG that demonstrates a 4-bit ALU (Arithmetic Logic Unit)

// Define inputs - A and B are the two 4-bit input values and Sel[1:0] is the 2-bit ALU operation selector
module alu4bit(A, B, Sel, Out);

// Define input and output ports
input [3:0] A, B;
input [1:0] Sel;
output [3:0] Out;

// Create ALU operation constants
parameter ADD = 2'b00; // Addition operation
parameter SUB = 2'b01; // Subtraction operation
parameter AND = 2'b10; // Bitwise AND operation
parameter OR = 2'b11; // Bitwise OR operation

// Create internal wires to store intermediate values
wire [3:0] result; // Stores the result of the ALU operation
wire carry_out; // Stores the carry out bit for addition and subtraction operations

// Perform the ALU operation based on the selected operation
always @(*) begin
	case (Sel)
		ADD: begin  // Addition operation
			result = A + B;
			carry_out = (A[3] & B[3]); // Calculate carry out bit
		end
		SUB: begin  // Subtraction operation
			result = A - B;
			carry_out = (~A[3] & B[3]); // Calculate carry out bit
		end
		AND: result = A & B; // Bitwise AND operation
		OR: result = A | B; // Bitwise OR operation
	endcase
end

// Output the result of the ALU operation based on the carry_out value
assign Out = (carry_out) ? result[2:0] : result[3:0];

endmodule