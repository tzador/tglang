module Adder4Bit(input [3:0] a, b, output [3:0] sum, carry); // Create a 4-bit adder module with 2 inputs and 2 outputs
	assign {carry, sum} = a + b; // Assign the sum and carry values using the addition operator
	
	// Create a 4-bit ripple carry adder using four full adders
	// Each full adder takes two input bits and a carry-in bit and outputs a sum and carry-out bit
	// The carry-out bit is used as the carry-in bit for the next full adder
	// The carry-in bit for the first full adder is the input carry, and the carry-out bit for the last full adder is the output carry
	full_adder fa0(a[0], b[0], carry, sum[0], co0); // Create the first full adder and connect its inputs and outputs
	full_adder fa1(a[1], b[1], co0, sum[1], co1); // Create the second full adder and connect its inputs and outputs
	full_adder fa2(a[2], b[2], co1, sum[2], co2); // Create the third full adder and connect its inputs and outputs
	full_adder fa3(a[3], b[3], co2, sum[3], carry); // Create the last full adder and connect its inputs and outputs
	
	// Define the full adder module
	module full_adder(input a, b, ci, output s, co);
		assign s = a ^ b ^ ci; // Use the logical XOR operator to compute the sum
		assign co = (a & b) | (b & ci) | (a & ci); // Use logical AND and OR operators to compute the carry-out
endmodule // End the full adder module
endmodule // End the 4-bit adder module