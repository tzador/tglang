/* This code snippet is a demonstration of a finite state machine in Verilog */
 
// Define the state machine module
module FSM (
    input clk,          // Clock input
    input reset,        // Reset input
    output reg out,     // Output of the state machine
    output reg state    // Current state of the state machine
);
 
// Define the states using an enum
typedef enum [3:0] {
    START,
    STATE_1,
    STATE_2,
    STATE_3,
    STATE_4,
    STATE_5,
    STATE_6,
    STATE_7
} states;

// Create state register to keep track of current state
reg [3:0] state_reg; 

// Create next state logic using case statement
always @ (posedge clk or negedge reset) begin
    if (reset == 1) begin // Reset state to start
        state_reg <= START;
    end else begin // Update state based on current state
        case (state_reg)
            // In START state, go to STATE_1
            START: state_reg <= STATE_1;

            // In STATE_1, go to STATE_2 if input is high, otherwise stay in STATE_1
            STATE_1: state_reg <= (input == 1) ? STATE_2 : STATE_1;

            // In STATE_2, go to STATE_3 if input is high, otherwise go to STATE_4
            STATE_2: state_reg <= (input == 1) ? STATE_3 : STATE_4;

            // In STATE_3, go to STATE_4 if input is high, otherwise stay in STATE_3
            STATE_3: state_reg <= (input == 1) ? STATE_4 : STATE_3;

            // In STATE_4, go to STATE_5 if input is high, otherwise go to STATE_6
            STATE_4: state_reg <= (input == 1) ? STATE_5 : STATE_6;

            // In STATE_5, go to STATE_6 if input is high, otherwise stay in STATE_5
            STATE_5: state_reg <= (input == 1) ? STATE_6 : STATE_5;

            // In STATE_6, go to STATE_7 if input is high, otherwise go to STATE_1
            STATE_6: state_reg <= (input == 1) ? STATE_7 : STATE_1;

            // In STATE_7, go to STATE_1 if input is high, otherwise stay in STATE_7
            STATE_7: state_reg <= (input == 1) ? STATE_1 : STATE_7;
        endcase
    end
end

// Output logic based on current state
always @ * begin
    case (state_reg)
        // In START state, output is 0
        START: out = 0;

        // In STATE_1, output is 1
        STATE_1: out = 1;

        // In STATE_2, output is 2
        STATE_2: out = 2;

        // In STATE_3, output is 4
        STATE_3: out = 4;

        // In STATE_4, output is 8
        STATE_4: out = 8;

        // In STATE_5, output is 16
        STATE_5: out = 16;

        // In STATE_6, output is 32
        STATE_6: out = 32;

        // In STATE_7, output is 64
        STATE_7: out = 64;
    endcase
end

endmodule