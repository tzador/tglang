//Define a module to describe an 8-bit adder with carry input and output
module adder8bit (A,B,Ci,S,Co);
    //Define the inputs A and B as 8-bit binary numbers
    input [7:0] A,B;
    //Define the carry input Ci and output Co as single bit binary numbers
    input Ci;
    output [7:0] S;
    output Co;

    //Define an 8-bit wire to store the sum
    wire [7:0] sum;

    //Setup 8 full adders to perform the addition
    //Iterate through each bit, starting from the least significant bit (rightmost bit)
    genvar i;
    //Define an instance of a full adder for each bit
    generate
        //Connect the inputs A, B, and Ci to the respective inputs of the full adder
        assign sum[0] = A[0] ^ B[0] ^ Ci; //Add the inputs and any carry bits from previous addition
        assign Co = (A[0] & B[0]) | (Ci & (A[0] ^ B[0])); //Calculate the carry bit (1 = carry, 0 = no carry)

        //Repeat for the remaining 7 bits
        for (i = 1; i < 8; i=i+1) begin
            assign sum[i] = A[i] ^ B[i] ^ Co[i-1]; //Add the inputs and any carry bits from previous addition
            assign Co[i] = (A[i] & B[i]) | (Co[i-1] & (A[i] ^ B[i])); //Calculate the carry bit (1 = carry, 0 = no carry)
        end
    endgenerate

    //Assign the output S to the sum wire
    assign S = sum;

endmodule //End of module adder8bit