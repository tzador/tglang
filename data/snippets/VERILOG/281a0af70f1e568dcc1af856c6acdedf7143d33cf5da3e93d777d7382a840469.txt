/**
 This is a code snippet in VERILOG that multiplies two 8-bit signed numbers using Booth's algorithm
 Author: John Smith
**/

module Booth_Multiplier(x, y, out);
  input signed [7:0] x, y;   //declare the inputs as 8-bit signed numbers
  output signed [15:0] out;   //declare the output as a 16-bit signed number
  wire [7:0] A, B, P;   //declare temporary wires for intermediate calculations
  wire [3:0] count;   //declare a 4-bit wire to keep count of the number of operations done
  reg [7:0] X, X_prev;   //declare registers to store the values of x in each iteration

  assign {A, B} = {x, y};   //assign the input values to wires A and B
  assign P = 8'b0;   //initialize P to 8 zeros

  always@(posedge clk) begin   //create a clocked always block
    if(count == 4) begin   //check if 4 operations have been completed
      count <= 0;   //reset the count
    end else begin
      X_prev <= X;   //store the previous value of x
      count <= count + 1;   //increment the count
      X <= {A[0], X_prev[7:1]};   //right shift the value of x by 1 bit
      if(X_prev[0] == 1'b1) begin   //check if the least significant bit of x is 1
        P <= P + B;   //if yes, add B to P
      end else begin   //if not, subtract B from P
        P <= P - B;
      end
      A <= {A[6:0], A[7]};   //update the value of A by left shifting it
    end
  end

  assign out = {P, X_prev};   //assign the final product to the output port
endmodule