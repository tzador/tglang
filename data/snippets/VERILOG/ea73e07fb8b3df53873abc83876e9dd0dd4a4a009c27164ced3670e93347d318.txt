//--------------------- ALU Module ----------------------------------
module ALU(input [7:0]a, input [7:0]b, input [3:0]opcode, output reg [7:0]result, output reg zero_flag, output reg overflow_flag);
  /*
  Inputs:
  - a: 8-bit input operand A
  - b: 8-bit input operand B
  - opcode: 4-bit operation code (0 = addition, 1 = subtraction, 2 = multiplication, 3 = division, 4 = bitwise AND, 5 = bitwise OR, 6 = bitwise XOR)
  
  Outputs:
  - result: 8-bit result of the operation
  - zero_flag: flag indicating if the result is equal to zero (1 if equal, 0 otherwise)
  - overflow_flag: flag indicating if the operation resulted in an overflow (1 if overflow, 0 otherwise)
  */
  
  reg carry; //register to store carry value
  reg [7:0]temp; //register to store temporary value
  
  always @(a or b or opcode) begin //sensitivity list for always block
    case(opcode) //start of case statement based on opcode input
      0: begin //addition operation
        temp = a + b; //perform addition of operands a and b and store in temp register
        carry = temp[8]; //store carry value in carry register
        result = temp[7:0]; //store result in result register
        zero_flag = (result == 0); //set zero flag based on result value
        overflow_flag = (carry == 1); //set overflow flag based on carry value
      end
      
      1: begin //subtraction operation
        temp = a - b; //perform subtraction of operands a and b and store in temp register
        carry = temp[8]; //store carry value in carry register
        result = temp[7:0]; //store result in result register
        zero_flag = (result == 0); //set zero flag based on result value
        overflow_flag = (carry == 1); //set overflow flag based on carry value
      end
      
      2: begin //multiplication operation
        temp = a * b; //perform multiplication of operands a and b and store in temp register
        result = temp[7:0]; //store result in result register
        zero_flag = (result == 0); //set zero flag based on result value
        if(result[8] == 1) //check for overflow
          overflow_flag = 1; //set overflow flag if result is negative (overflow)
        else
          overflow_flag = 0; //otherwise, set overflow flag to 0
      end
      
      3: begin //division operation
        temp = a / b; //perform division of operands a and b and store in temp register
        result = temp[7:0]; //store result in result register
        zero_flag = (result == 0); //set zero flag based on result value
        if(b == 0) //check for division by zero
          overflow_flag = 1; //set overflow flag if division by zero occurs
        else
          overflow_flag = 0; //otherwise, set overflow flag to 0
      end
      
      4: begin //bitwise AND operation
        result = a & b; //perform bitwise AND of operands a and b and store in result register
        zero_flag = (result == 0); //set zero flag based on result value
        overflow_flag = 0; //bitwise AND does not cause an overflow, set overflow flag to 0
      end
      
      5: begin //bitwise OR operation
        result = a | b; //perform bitwise OR of operands a and b and store in result register
        zero_flag = (result == 0); //set zero flag based on result value
        overflow_flag = 0; //bitwise OR does not cause an overflow, set overflow flag to 0
      end
      
      6: begin //bitwise XOR operation
        result = a ^ b; //perform bitwise XOR of operands a and b and store in result register
        zero_flag = (result == 0); //set zero flag based on result value
        overflow_flag = 0; //bitwise XOR does not cause an overflow, set overflow flag to 0
      end
      
      default: begin //if opcode does not match any of the cases, return 0 for all outputs
        result = 0;
        zero_flag = 1;
        overflow_flag = 0;
      end
    endcase //end of case statement
  end //end of always block
endmodule //end of ALU module