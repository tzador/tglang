/* This code snippet is a complex example of a 4-bit arithmetic logic unit (ALU) implemented in Verilog. */

`timescale 1ns / 1ps

/* Defining the module and its inputs and outputs */
module alu(
    input [3:0] a, // 4-bit input A
    input [3:0] b, // 4-bit input B
    input [2:0] op, // 3-bit opcode
    output reg [3:0] result, // 4-bit ALU output
    output carry // 1-bit output carry flag
    );

/* Defining internal signals and registers */
reg [3:0] a_reg, b_reg; // 4-bit registers to store inputs
reg [4:0] prod_reg, sum_reg; // 5-bit registers to store intermediate results
reg carry_reg; // 1-bit register to store carry flag

/* Combining input A and B with the logical and arithmetic operations specified by the opcode */
always @(*) begin
    case(op)
        3'b000 : begin // addition
            {carry_reg, sum_reg} = a_reg + b_reg;
        end 
        3'b001 : begin // subtraction
            {carry_reg, sum_reg} = a_reg - b_reg;
        end
        3'b010 : begin // bitwise AND
            result = a_reg & b_reg;
        end
        3'b011 : begin // bitwise OR
            result = a_reg | b_reg;
        end
        3'b100 : begin // bitwise XOR
            result = a_reg ^ b_reg;
        end
        3'b101 : begin // left shift
            result = a_reg << 1;
        end
        3'b110 : begin // right shift
            result = a_reg >> 1;
        end
    endcase
end

/* Assigning the output carry flag based on the opcode and intermediate results */
always @(posedge clk) begin
    if (op == 3'b000 || op == 3'b001) begin
        carry = carry_reg; // set carry flag for addition and subtraction
    end
    else if (op == 3'b010 || op == 3'b011 || op == 3'b100) begin
        carry = 1'b0; // clear carry flag for bitwise operations
    end
    else begin
        carry = a[3]; // set carry flag to MSB of input A for shifts
    end
end

/* Assigning the output result to the appropriate register based on the opcode */
always @(posedge clk) begin
    case(op)
        3'b000 : begin // addition
            result = sum_reg[3:0];
        end 
        3'b001 : begin // subtraction
            result[3:0] = sum_reg[3:0];
        end
        3'b010 : begin // bitwise AND
            result = a_reg & b_reg;
        end
        3'b011 : begin // bitwise OR
            result = a_reg | b_reg;
        end
        3'b100 : begin // bitwise XOR
            result = a_reg ^ b_reg;
        end
        3'b101 : begin // left shift
            result = a_reg << 1;
        end
        3'b110 : begin // right shift
            result = a_reg >> 1;
        end
    endcase
end

/* Assigning the input values to the registers */
always @(posedge clk) begin
    a_reg <= a;
    b_reg <= b;
end

endmodule