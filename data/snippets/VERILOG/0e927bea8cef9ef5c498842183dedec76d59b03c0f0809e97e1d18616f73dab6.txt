module FullAdder (A, B, C_in, sum, C_out);
   /* Inputs */
   input A, B, C_in;
   
   /* Outputs */
   output sum, C_out;
   
   /* Internal variables */
   wire A_xor_B, B_xor_C_in, A_xor_B_xor_C_in, C_in_and_A, C_in_and_B, A_and_B;
   
   /* Logic gates */
   assign A_xor_B = A ^ B;
   assign B_xor_C_in = B ^ C_in;
   assign A_xor_B_xor_C_in = A_xor_B ^ C_in;
   assign C_in_and_A = C_in & A;
   assign C_in_and_B = C_in & B;
   assign A_and_B = A & B;
   
   /* Output assignments */
   assign sum = A_xor_B_xor_C_in;
   assign C_out = C_in_and_A | C_in_and_B | A_and_B;
   
   /* Testbench */
   initial begin
      // Test case 1
      A = 0;
      B = 0;
      C_in = 0;
      #5 $display("Sum: %b | Carry Out: %b", sum, C_out);
      
      // Test case 2
      A = 1;
      B = 1;
      C_in = 0;
      #5 $display("Sum: %b | Carry Out: %b", sum, C_out);
      
      // Test case 3
      A = 0;
      B = 1;
      C_in = 1;
      #5 $display("Sum: %b | Carry Out: %b", sum, C_out);
      
      // Test case 4
      A = 1;
      B = 0;
      C_in = 1;
      #5 $display("Sum: %b | Carry Out: %b", sum, C_out);
   end
endmodule