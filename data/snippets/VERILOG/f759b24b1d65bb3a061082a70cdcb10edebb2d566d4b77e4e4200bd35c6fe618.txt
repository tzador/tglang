/*
Author: John Doe
Date: October 1, 2021
Description: This code snippet is a sequential circuit that implements parallel addition of two 4-bit binary numbers.
*/

module adder4(input [3:0] num1, input [3:0] num2, input clk, output reg [3:0] sum);

    reg [3:0] carry, partialSum; // declare internal registers

    always @ (posedge clk) begin
        // perform parallel addition using full adders
        sum[0] <= (num1[0] ^ num2[0] ^ carry[0]);
        partialSum[0] <= (num1[0] & num2[0]) | (num1[0] & carry[0]) | (num2[0] & carry[0]);
        carry[1] <= (partialSum[0] & carry[0]) | (num1[0] & num2[0]);
        
        sum[1] <= (num1[1] ^ num2[1] ^ carry[1]);
        partialSum[1] <= (num1[1] & num2[1]) | (num1[1] & carry[1]) | (num2[1] & carry[1]);
        carry[2] <= (partialSum[1] & carry[1]) | (num1[1] & num2[1]);
        
        sum[2] <= (num1[2] ^ num2[2] ^ carry[2]);
        partialSum[2] <= (num1[2] & num2[2]) | (num1[2] & carry[2]) | (num2[2] & carry[2]);
        carry[3] <= (partialSum[2] & carry[2]) | (num1[2] & num2[2]);
        
        sum[3] <= (num1[3] ^ num2[3] ^ carry[3]);
        carry[3] <= (num1[3] & num2[3]);
    end
endmodule