// This code snippet is a 4-bit shift register using D flip-flops

// Define the module
module shift_register(input clk, reset, input data, output [3:0] q);

// Declare internal wires
reg [3:0] d;
wire [3:0] q_next;

// Instantiate D flip-flops
D_FF dff0(.clk(clk), .reset(reset), .d(data), .q(q_next[0]));
D_FF dff1(.clk(clk), .reset(reset), .d(q_next[0]), .q(q_next[1]));
D_FF dff2(.clk(clk), .reset(reset), .d(q_next[1]), .q(q_next[2]));
D_FF dff3(.clk(clk), .reset(reset), .d(q_next[2]), .q(q_next[3]));

// Assign next state of q
assign q_next = {data, q[3:1]};

// Assign output
assign q = q_next;

endmodule

// Define D flip-flop module
module D_FF(input clk, reset, input d, output reg q);

// Declare internal wire
wire d_next;

// Assign next state of q
assign d_next = d;

// Create clocked always block
always@(posedge clk) begin
    // Reset if reset is asserted
    if (reset) begin
        q <= 0;
    end
    else begin
        // Assign d_next to q on clock edge
        q <= d_next;
    end
end

endmodule