module Counter(
    input logic clk,
    input logic rst,
    input logic [7:0] loadVal,
    input logic en,
    output logic [7:0] count
    );
    
    logic [7:0] counter_reg; // register to hold count value
    
    always_ff @(posedge clk or negedge rst) begin
        if (rst == 0) begin // if reset is active low, use negedge
            counter_reg <= 0; // reset count value to 0
        end else if (en == 1) begin // if enable signal is high
            if (loadVal == 0) begin // if loadVal is 0, do nothing
                counter_reg <= counter_reg; // hold current count value
            end else begin // if loadVal is not 0, load new value
                counter_reg <= loadVal; // load new count value
            end
        end
    end
    
    assign count = counter_reg; // assign register value to output
    
endmodule