module traffic_light(input clk, input rst, input [1:0] state, output reg [2:0] output);

	//This module represents a simple traffic light system with three lights: green, yellow, and red
	//It uses a finite state machine to transition between different states based on the clock signal

	//Input signals: clk - clock signal, rst - reset signal, state - current state of the system
	//Output signals: output - represents the state of the lights, with green = 2'b01, yellow = 2'b10, and red = 2'b11

	//Define the states as parameters
	parameter GREEN = 2'b01;
	parameter YELLOW = 2'b10;
	parameter RED = 2'b11;

	//Create a reg to store the current state of the system
	reg [1:0] current_state;

	//Initialize the output with the current state of the system
	assign output = current_state;

	//Define the next state logic
	always @(posedge clk or posedge rst) begin
		//If the system is in the reset state, set the current state to red
		if (rst) begin
			current_state <= RED;
		//Otherwise, follow the state transition based on the current state
		//and the input state signal
		//Note that this is a simple sequential state machine with no combinational logic
		end else case (current_state)
			GREEN: current_state <= state;
			YELLOW: current_state <= state;
			RED: current_state <= state;
		endcase
	end
	
endmodule