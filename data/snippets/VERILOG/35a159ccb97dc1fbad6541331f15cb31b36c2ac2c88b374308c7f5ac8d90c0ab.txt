// This is a 32-bit parallel adder module with overflow detection
module parallel_adder(
    input [31:0] a, // first 32-bit input
    input [31:0] b, // second 32-bit input
    input cin, // carry-in input for overflow detection
    output [31:0] sum, // output of the addition
    output cout // carry-out output for overflow detection
);
    
    // Declare internal signals
    wire [31:0] temp; // temporary 32-bit signal used for intermediate summation
    wire temp_cout; // temporary carry-out signal used for overflow detection
    
    // Generate a full adder for each bit of a, b, and cin
    genvar i;
    generate
        for (i = 0; i < 32; i = i + 1) begin : full_adder_gen
            full_adder adder (
                .a(a[i]),
                .b(b[i]),
                .cin((i == 0) ? cin : temp_cout), // use previous carry-out as carry-in for all except first adder
                .sum(temp[i]),
                .cout(temp_cout)
            );
        end
    endgenerate
    
    // Output the final sum and carry-out
    assign sum = temp;
    assign cout = temp_cout;
    
endmodule

// Define a full adder module for single bit addition
module full_adder(
    input a, // first input bit
    input b, // second input bit
    input cin, // carry-in
    output sum, // sum output bit
    output cout // carry-out
);
    
    // Use half adder for first addition
    half_adder first_adder (.a(a), .b(b), .sum(sum_int), .cout(cout_int));
    
    // Use another half adder to add carry-in to the first addition
    half_adder second_adder (.a(sum_int), .b(cin), .sum(sum), .cout(cout_int));
    
    // The final carry-out is a combination of the two half adders' carry-outs
    assign cout = cout_int1 | cout_int2;
    
endmodule

// Define a half adder module for single bit addition
module half_adder(
    input a, // first input bit
    input b, // second input bit
    output sum, // sum output bit
    output cout // carry-out
);
    
    // The sum is simply the XOR of the two inputs
    assign sum = a ^ b;
    
    // The carry-out is the AND of the two inputs
    assign cout = a & b;
    
endmodule