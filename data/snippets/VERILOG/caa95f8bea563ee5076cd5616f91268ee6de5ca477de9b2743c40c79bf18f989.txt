// Defining an 8-bit register with asynchronous reset
module register (
    input clk, // clock input
    input rst, // reset input
    input [7:0] din, // data input
    output [7:0] dout // data output
    );

    reg [7:0] state // state variable

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= 8'b0; // set state to 0 on reset
        end else begin
            state <= din; // update state with input data
        end
    end

    assign dout = state; // assign state to output

endmodule