module multiplier #(parameter WIDTH = 16) (
	input [WIDTH-1:0] a, b,
	output [2*WIDTH-1:0] result
	);

	// instantiate a register to hold the sum
	reg [2*WIDTH-1:0] sum;
	
	// instantiate a register to hold the multiplier b
	reg [WIDTH-1:0] multiplier_b;
	
	// instantiate a wire to hold the product of a and b
	wire [2*WIDTH-1:0] product;
	
	// instantiate a wire to hold the current bit of b
	wire current_bit;
	
	// assign current bit to the least significant bit of multiplier_b
	assign current_bit = multiplier_b[0];
	
	// instantiate a wire to hold the shifted value of b
	wire [WIDTH-1:0] shifted_b;
	
	// shift b to the right by 1 bit
	assign shifted_b = multiplier_b >> 1;
	
	// check if current bit is 1
	if (current_bit == 1) begin
		
		// if current bit is 1, add a to the sum
		assign sum = sum + a;
		
		end else begin
			// if current bit is 0, do nothing
		end
	
	// instantiate a wire to hold the current value of a
	wire [WIDTH-1:0] current_a;
	
	// assign current value of a to the most significant bits of product
	assign product[2*WIDTH-1:WIDTH] = a;
	
	// instantiate a wire to hold the current value of sum
	wire [WIDTH-1:0] current_sum;
	
	// instantiate a wire to hold the shifted value of sum
	wire [WIDTH-1:0] shifted_sum;
	
	// shift sum to the left by 1 bit
	assign shifted_sum = sum << 1;
	
	// assign current value of sum to the least significant bits of product
	assign product[WIDTH-1:0] = current_sum;
	
	// recursively multiply the shifted values of a and b
	multiplier
	#(.WIDTH (WIDTH))
	m(split_a, shifted_b, product);
	
	// assign the final product to the result
	assign result = product;
	
	endmodule