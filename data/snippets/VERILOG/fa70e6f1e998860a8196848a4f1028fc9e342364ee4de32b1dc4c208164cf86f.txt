// This is a commented code snippet in VERILOG

module circuit(
  input wire clk, // Input clock signal
  input wire [3:0] data_in, // Input data signal with size of 4 bits
  output wire [3:0] data_out, // Output data signal with size of 4 bits
  output wire valid, // Output signal indicating valid data
  output wire [3:0] errors // Output signal indicating error bits
);

  // Declare internal registers
  reg [3:0] data_reg; // Register for storing input data
  reg valid_reg; // Register for storing valid signal
  reg [3:0] errors_reg; // Register for storing error bits

  // Declare internal wires
  wire [3:0] data_temp; // Intermediate wire for data processing

  // Use always block for always executing following code
  always @(posedge clk) begin // On every positive edge of the clock signal
    // Get input data and store it in data_reg
    data_reg <= data_in;

    // Reset valid and errors registers
    valid_reg <= 0;
    errors_reg <= 0;

    // Use for loop for error detection on each bit of the input data
    for (i = 0; i < 4; i = i + 1) begin
      // XOR each bit of input data with its complement,
      // if the result is not equal to 0, it means there is an error
      data_temp[i] <= data_reg[i] ^ ~data_reg[i];

      // Store error bits in errors_reg
      errors_reg[i] <= data_temp[i];
    end

    // Use conditional statement to check if there are any error bits
    if (data_temp != 0) begin
      // If there are error bits, set valid_reg to 0
      valid_reg <= 0;
    end else begin
      // If there are no error bits, set valid_reg to 1
      valid_reg <= 1;
    end

    // Assign outputs to internal registers
    data_out <= data_reg;
    valid <= valid_reg;
    errors <= errors_reg;
  end

endmodule