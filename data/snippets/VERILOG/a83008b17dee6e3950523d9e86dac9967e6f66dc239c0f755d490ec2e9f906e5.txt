//This is a Verilog code to implement a 4-bit counter using a finite state machine

module counter(clock, reset, enable, count);
  //input port declarations
  input clock;      //system clock
  input reset;      //reset signal
  input enable;     //counter enable signal
  
  //output port declarations
  output [3:0] count;     //4-bit counter output
  
  //internal signal declarations
  reg [3:0] nextState;    //next state signal
  reg [3:0] currentState; //current state signal
  
  //counter states definition
  parameter S0 = 4'd0;    //initial state
  parameter S1 = 4'd1;    //state 1
  parameter S2 = 4'd2;    //state 2
  parameter S3 = 4'd3;    //state 3
  parameter S4 = 4'd4;    //state 4
  
  //state transition logic
  always @(posedge clock, posedge reset) begin
    if (reset) begin       //if reset signal is high
      currentState <= S0;  //reset to initial state
    end else if (enable) begin   //if enable signal is high
      currentState <= nextState; //move to next state
    end
  end
  
  //next state logic
  always @(*) begin
    case (currentState)         //checks current state
      S0 : nextState = S1;      //if current state is S0, go to S1 in next state
      S1 : nextState = S2;      //if current state is S1, go to S2 in next state
      S2 : nextState = S3;      //if current state is S2, go to S3 in next state
      S3 : nextState = S4;      //if current state is S3, go to S4 in next state
      S4 : nextState = S0;      //if current state is S4, go to S0 in next state
      default : nextState = S0; //default case if current state is not defined
    endcase
  end
  
  //output logic
  always @(*) begin
    if (currentState == S0) begin       //if current state is S0
      count = 4'b0000;                  //output 0
    end else if (currentState == S1) begin  //if current state is S1
      count = 4'b0001;                      //output 1
    end else if (currentState == S2) begin  //if current state is S2
      count = 4'b0010;                      //output 2
    end else if (currentState == S3) begin  //if current state is S3
      count = 4'b0011;                      //output 3
    end else begin                          //if current state is S4
      count = 4'b0100;                      //output 4
    end
  end
endmodule