//This module defines a 4-bit BCD counter with parallel load

module bcd_counter(input clk, //input clock
	input [3:0] parallel_load, //input to load a specific count
	output [3:0] counter); //output of the counter

	//define internal signals
	reg [3:0] next_count; //next count to be loaded
	reg [3:0] internal_count; //internal representation of the counter
	always@(posedge clk) begin //synchronous always block
		if (parallel_load[0] == 1) begin //load condition for first bit
			next_count[0] = 0; //load 0
		end else begin
			next_count[0] = internal_count[0]; //retain current value
		end
		if (parallel_load[1] == 1) begin //load condition for second bit
			next_count[1] = 0; //load 0
		end else begin
			next_count[1] = internal_count[1]; //retain current value
		end
		if (parallel_load[2] == 1) begin //load condition for third bit
			next_count[2] = 0; //load 0
		end else begin
			next_count[2] = internal_count[2]; //retain current value
		end
		if (parallel_load[3] == 1) begin //load condition for fourth bit
			next_count[3] = 0; //load 0
		end else begin
			next_count[3] = internal_count[3]; //retain current value
		end
		internal_count <= next_count; //assign next count to internal count
	end

	assign counter = internal_count; //assign internal count to output
endmodule