/*
This program shows an 8-bit adder module using the cascading method.
*/

// Define module with input and output declarations
module eight_bit_adder(
    input [7:0] A, 
    input [7:0] B, 
    input Cin, 
    output [7:0] Sum, 
    output Cout
);

// Create an 8-bit wire to store the intermediate sums
wire [7:0] intermediate_sum;

// Instantiate a full adder for each bit, using the carry bit as input
full_adder first_bit(A[0], B[0], Cin, intermediate_sum[0], carry1);
full_adder second_bit(A[1], B[1], carry1, intermediate_sum[1], carry2);
full_adder third_bit(A[2], B[2], carry2, intermediate_sum[2], carry3);
full_adder fourth_bit(A[3], B[3], carry3, intermediate_sum[3], carry4);
full_adder fifth_bit(A[4], B[4], carry4, intermediate_sum[4], carry5);
full_adder sixth_bit(A[5], B[5], carry5, intermediate_sum[5], carry6);
full_adder seventh_bit(A[6], B[6], carry6, intermediate_sum[6], carry7);
full_adder eighth_bit(A[7], B[7], carry7, intermediate_sum[7], Cout);

// Assign output sum to the intermediate sum wire
assign Sum = intermediate_sum;

endmodule

// Define the full adder module with input and output declarations
module full_adder(
    input A, 
    input B, 
    input Cin, 
    output Sum, 
    output Cout
);
    
// Use XOR gate to calculate sum (A + B + Cin)
assign Sum = A ^ B ^ Cin;

// Use AND gate to calculate carry (AB + AC + BC)
assign Cout = (A & B) | (B & Cin) | (A & Cin);

endmodule