// This code snippet is a 4-bit ripple carry adder in Verilog.

// Declare the module with inputs a, b and carry in, and outputs sum and carry out
module ripple_carry_adder(
    input [3:0] a,
    input [3:0] b,
    input carry_in,
    output [3:0] sum,
    output carry_out
);

// Declare internal signals
reg [3:0] sum_reg;
wire [3:0] carry_out_wire;

// Generate the sum using a full adder for each bit
genvar i;
generate
    for (i=0; i<4; i=i+1) begin
        // Instantiate full adder
        full_adder FA(
            .a(a[i]),
            .b(b[i]),
            .carry_in((i==0) ? carry_in : sum_reg[i-1]),
            .sum(sum_reg[i]),
            .carry_out(carry_out_wire[i])
        );
    end
endgenerate

// Assign outputs
assign sum = sum_reg;
assign carry_out = carry_out_wire[3];

// End module
endmodule


// Declare full adder module with inputs a, b and carry in, and outputs sum and carry out
module full_adder(
    input a,
    input b,
    input carry_in,
    output sum,
    output carry_out
);

// Declare internal signals
wire and_out;
wire xor_out;

// AND gate for carry calculation
assign and_out = a & b;

// XOR gate for sum calculation
assign xor_out = a ^ b;

// Calculate sum and carry out using carry in and previous carry
assign sum = carry_in ^ xor_out;
assign carry_out = (carry_in & xor_out) | and_out;

// End module
endmodule