// MODULE DECLARATION
module divider (
    input wire [8:0] dividend,
    input wire [8:0] divisor,
    input wire clk,
    output reg [8:0] quotient,
    output reg [8:0] remainder
);

// INTERNAL REGISTERS
reg [8:0] dividend_reg, divisor_reg, count_reg; 

// ALGORITHMIC LOGIC FOR DIVISION
always @(posedge clk) begin
    // RESET VALUES
    if (reset) begin
        dividend_reg <= 0;
        divisor_reg <= 0;
        quotient <= 0;
        remainder <= 0;
        count_reg <= 0;
    end
    else begin
        // SAVE DIVIDEND AND DIVISOR
        dividend_reg <= dividend;
        divisor_reg <= divisor;

        // DIVISON PROCESS
        if (divisor_reg > dividend_reg) begin
            quotient <= 0;
            remainder <= dividend_reg;
        end
        else begin
            count_reg <= 1;
            while (dividend_reg >= divisor_reg) begin
                divisor_reg <= divisor_reg << 1;
                count_reg <= count_reg << 1;
            end
            while (count_reg > 1) begin
                divisor_reg <= divisor_reg >> 1;
                count_reg <= count_reg >> 1;
                if (dividend_reg >= divisor_reg) begin
                    dividend_reg <= dividend_reg - divisor_reg;
                    quotient[count_reg] <= 1;
                end
                else begin
                    quotient[count_reg] <= 0;
                end
            end
            remainder <= dividend_reg;
        end
    end
end

// END OF MODULE
endmodule