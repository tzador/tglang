module ALU (input signed [7:0] A, B, input [2:0] Opcode, output wire signed [23:0] Result, output wire OverflowFlag, output wire ZeroFlag);
// This module represents an Arithmetic Logic Unit (ALU) in a processor
// Inputs include the two operands (A and B) and the opcode for the operation
// Outputs include the result, the overflow flag, and the zero flag

// Declare internal registers
reg signed [7:0] accumulator;
reg signed [31:0] temp; // for storing intermediate results

// Declare wire for handling overflow flag
wire OverflowFlag;

// Declare wire for handling zero flag
wire ZeroFlag;

// Declare wire and logic for selecting operation based on opcode
wire [2:0] opSel;
always @ (Opcode) begin
  case (Opcode)
    3'd0: opSel = 3'b000; // Addition
    3'd1: opSel = 3'b000; // Addition
    3'd2: opSel = 3'b010; // Subtraction
    3'd3: opSel = 3'b100; // Multiplication
    3'd4: opSel = 3'b101; // Division
    3'd5: opSel = 3'b011; // Bitwise AND
    3'd6: opSel = 3'b110; // Bitwise OR
    3'd7: opSel = 3'b111; // Bitwise XOR
  endcase
end

// Declare wires and logic for handling overflow and zero flags
always @ (temp) begin
  // Check if result overflows 8 bits
  if (temp[7:0] != temp[8]) begin
    OverflowFlag = 1; // set overflow flag to 1
  end
  else begin
    OverflowFlag = 0; // set overflow flag to 0
  end
  
  // Check if result is 0
  if (temp == 0) begin
    ZeroFlag = 1; // set zero flag to 1
  end
  else begin
    ZeroFlag = 0; // set zero flag to 0
  end
end

// Declare wire and logic for selecting operation based on opcode
wire [7:0] output;
always @ (A, B, opSel) begin
  case (opSel)
    3'b000: output = A + B; // Addition
    3'b010: output = A - B; // Subtraction
    3'b100: begin // Multiplication
      temp = $signed(A) * $signed(B); // Cast operands to signed for correct result
      output = temp >> 24; // Truncate to 24-bit result
    end
    3'b101: begin // Division
      temp = $signed(A) / $signed(B); // Cast operands to signed for correct result
      output = temp >> 24; // Truncate to 24-bit result
    end  
    3'b011: output = A & B; // Bitwise AND
    3'b110: output = A | B; // Bitwise OR
    3'b111: output = A ^ B; // Bitwise XOR
  endcase
end

// Declare output
assign Result = output;
endmodule