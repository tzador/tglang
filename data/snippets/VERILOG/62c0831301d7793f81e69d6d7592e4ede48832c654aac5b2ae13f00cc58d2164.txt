/*
This code snippet is a complex block of Verilog code that implements a 4-bit binary counter
with synchronous reset and enable functionality.

The code first declares a module named "counter" with four inputs: Clock, Reset, Enable, and
DataIn. It also has one output called "DataOut".

Inside the module, an internal 4-bit register called "count" is declared to keep track of the 
binary count. This register is initialized to 4'b0000 at the start of the code.

Next, a combinational logic block is created using the always @(*) keyword. Within this block,
the count register is updated based on the values of Enable and DataIn. If Enable is set to 1,
the count will increment by 1 every time the clock signal is triggered. If Enable is 0, the
count will remain the same.

The always @(posedge Clock) keyword specifies that the code within this block will only execute
on the rising edge of the Clock signal. This ensures that the counter is only updated when
the clock signal rises.

A synchronous reset functionality is added using the if (Reset == 1) statement. If the Reset
input is set to 1, the count register will be reset to 4'b0000.

Finally, the output DataOut is assigned with the value of the count register at the end of 
the code block. This allows the counter to output the correct binary count as its output.

This code snippet is written in a modular and efficient manner, making it easy to integrate
into larger Verilog designs.
*/ 

module counter(
  input Clock,
  input Reset,
  input Enable,
  input [3:0] DataIn,
  output [3:0] DataOut
);

reg [3:0] count = 4'b0000;

always @(*)
begin
    if (Enable == 1)
        count = count + 1;
    else
        count = count;
end

always @(posedge Clock)
begin
    if (Reset == 1)
        count <= 4'b0000;
end

assign DataOut = count;

endmodule