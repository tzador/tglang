parameter WIDTH = 8; // parameter declaration with value assignment
module my_module ( input [WIDTH-1:0] input_data, // module declaration with input port
                   output [WIDTH-1:0] output_data ); // and output port
    reg [WIDTH-1:0] output_data_reg; // register declaration for output data
    always @(input_data) begin // always block that triggers when input_data changes
        if (input_data == 0) begin // check if input_data is equal to 0
            output_data_reg <= 0; // if true, assign 0 to output_data_reg
        end else begin // if false
            for (integer i = WIDTH-1; i >= 0; i = i - 1) begin // loop through bits of input_data
                if (input_data[i] == 1) begin // check if current bit is 1
                    output_data_reg[i] <= 1; // if true, assign 1 to output_data_reg at current bit position
                end else begin // if false
                    output_data_reg[i] <= 0; // assign 0 to output_data_reg at current bit position
                end
            end
        end
    end
    assign output_data = output_data_reg; // assign output_data_reg to output_data
endmodule