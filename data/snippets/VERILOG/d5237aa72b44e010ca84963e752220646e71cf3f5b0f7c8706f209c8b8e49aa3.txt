/*
Complex Example using various operators and modules in VERILOG
This code snippet creates a 16-bit full adder circuit with an output carry bit
*/

`timescale 1ns / 1ps // sets the time scale for the simulation

module full_adder(input [15:0] a, b, // inputs a and b are 16 bits
                  input cin,           // input carry bit
                  output [15:0] sum,   // output sum is also 16 bits
                  output cout);         // output carry bit
                  
    assign sum = a + b + cin; // assigns sum as the sum of inputs and carry bit
    
    // generate conditional statements for different inputs and outputs
    always @(*) begin
        if (sum > 16'b1111111111111111) begin // if sum is greater than 16 bits
            cout = 1; // set the carry bit to 1
        end else if (sum < 16'b0000000000000001) begin // if sum is less than 1
            cout = 0; // set the carry bit to 0
        end else begin // for all other cases
            cout = sum[15]; // set the carry bit to the most significant bit of sum
        end
    end
endmodule

// instantiate the full adder module and define input and output values
full_adder FA_inst(.a(16'b0101010101010101), .b(16'b1010101010101010), .cin(1), .sum(sum), .cout(cout));