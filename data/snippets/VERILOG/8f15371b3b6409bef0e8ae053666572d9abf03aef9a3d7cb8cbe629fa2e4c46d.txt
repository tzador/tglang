// Module to multiply two 8-bit numbers
module multiplier(input [7:0] first_num, input [7:0] second_num, output reg [15:0] result);

// Declare internal wires and registers
reg [7:0] a; // first number
reg [7:0] b; // second number
reg [3:0] count; // counter 
reg [7:0] temp; // temporary storage for intermediate results
wire carry; // carry bit used for addition in the multiplication process

// Assign input signals to internal wires and registers
assign a = first_num;
assign b = second_num;

// Multiplication process using shifting and addition
always @ (a or b) begin
  result = 16'd0; // initialize result to 0
  count = 4'd0; // initialize counter to 0
  temp[7:0] = {8'd0, b}; // initialize temp to 0 and first byte of b
  
  // Shift left and add method
  // Loop until counter reaches 4 (for 8-bit numbers)
  while (count < 4) begin
    if (a[0]) begin // if LSB of a is 1, add temp to result 
      result = result + temp;
    end

    temp = temp << 1; // shift temp left by 1
    count = count + 1; // increment counter
    a = a >> 1; //shift a right by 1
  end
  
  // Check for overflow
  if (carry == 1) begin
    result[7:0] = result[7:0] + b; // add last bit of b to LSB of result
  end
end

endmodule