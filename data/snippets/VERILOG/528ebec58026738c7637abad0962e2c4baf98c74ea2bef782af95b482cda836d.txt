// Defines a 16-bit ripple carry adder module
module ripple_carry_adder(
    input [15:0] A, // 16-bit input A
    input [15:0] B, // 16-bit input B
    output [15:0] S, // 16-bit sum output S
    output Cout // Carry output
);

wire [15:0] C; // Define a 16-bit wire C to store intermediate carry bits

// Instantiate full adder module 16 times to create the ripple carry effect
full_adder FA0(A[0], B[0], 1'b0, S[0], C[0]); // First full adder, carry input set to 0
full_adder FA1(A[1], B[1], C[0], S[1], C[1]); // Second full adder, carry input set to C[0]
full_adder FA2(A[2], B[2], C[1], S[2], C[2]); // Third full adder, carry input set to C[1]
// ... Repeat for remaining 13 bits

// Assign the carry output to the last bit of C
assign Cout = C[15];

endmodule

// Defines a full adder module with carry input
module full_adder(
    input A, // First input bit
    input B, // Second input bit
    input Cin, // Carry input
    output S, // Sum output
    output Cout // Carry output
);

// Use two half adders to handle the addition and carry operations
wire [1:0] HA1, HA2; // Define 2-bit wires for the half adders
half_adder HA1_inst(A, B, HA1[0], HA1[1]); // First half adder
half_adder HA2_inst(HA1[0], Cin, S, HA2[0]); // Second half adder with carry input set to the first half adder's output
assign Cout = HA1[1] | HA2[0]; // Calculate the carry output using a logical OR operation on the two half adder's carry outputs

endmodule

// Defines a half adder module
module half_adder(
    input A, // First input bit
    input B, // Second input bit
    output S, // Sum output
    output Cout // Carry output
);

assign S = A ^ B; // XOR operation to calculate the sum output
assign Cout = A & B; // AND operation to calculate the carry output

endmodule