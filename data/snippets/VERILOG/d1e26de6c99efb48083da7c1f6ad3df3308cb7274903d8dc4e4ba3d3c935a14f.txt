`timescale 1ns / 1ns

module decoder(
    input [3:0] data,
    input enable,
    input [1:0] select,
    output reg [7:0] out
    );

    // Define a parameter for the data width
    parameter data_width = 4;

    // Create a local wire for the output
    wire [data_width-1:0] local_out;

    // Create a local wire for the select input
    wire [2:0] select_wire;

    // Assign the select wire to the select input
    assign select_wire = {select,1'b0};

    // Use a case statement to define the output based on the select input
    always @* begin
        case (select_wire)
            3'b000: local_out = data; // Output data as is if select input is 000
            3'b001: local_out = data + 1; // Add 1 to data if select input is 001
            3'b010: local_out = data - 1; // Subtract 1 from data if select input is 010
            3'b011: local_out = data + 2; // Add 2 to data if select input is 011
            3'b100: local_out = data - 2; // Subtract 2 from data if select input is 100
            3'b101: local_out = data & 4'b0011; // Use bitwise AND to keep only the last 2 bits of data if select input is 101
            3'b110: local_out = data | 4'b1100; // Use bitwise OR to set the first 2 bits of data to 1 if select input is 110
            3'b111: local_out = data ^ 4'b1111; // Use bitwise XOR to invert all bits of data if select input is 111
            default: local_out = data; // If none of the above cases match, output data as is
        endcase
    end

    // Use an always block with a posedge clock to assign the local output to the output register
    always @(posedge clk) begin
        if (enable) begin
            out <= local_out;
        end
    end

endmodule