/*
This is a code snippet in VERILOG
It defines a double-clocked D flip-flop with an asynchronous reset
*/

// Define the module
module dflipflop (
    input d, //Data input
    input clk, //Clock input
    input rstn, //Asynchronous reset input
    output reg q //Output
);

// Define the internal variables
reg d_ff1; //First D flip-flop
reg d_ff2; //Second D flip-flop
reg q_out; //Temporary output

// First D flip-flop
always @(posedge clk, negedge rstn) begin
    if (!rstn) //If asynchronous reset is active
        d_ff1 <= 1'b0; //Clear the first D flip-flop
    else //Else, if the clock is triggered
        d_ff1 <= d; //Update the first D flip-flop with the input data
end

// Second D flip-flop
always @(posedge clk, negedge rstn) begin
    if (!rstn) //If asynchronous reset is active
        d_ff2 <= 1'b0; //Clear the second D flip-flop
    else //Else, if the clock is triggered
        d_ff2 <= d_ff1; //Update the second D flip-flop with the output of the first D flip-flop
end

// Temporary output
always @(posedge clk) begin //On the rising edge of the clock
    q_out <= d_ff2; //Update the temporary output with the output of the second D flip-flop
end

// Assign the output 
assign q = q_out; 

endmodule //End of the module