//Defining a 32-bit ALU (Arithmetic Logic Unit)
module ALU(clk, rst, operandA, operandB, operation, result, overflow);

input clk, rst;
input [31:0] operandA, operandB;
input [2:0] operation;
output [31:0] result, overflow;
reg [31:0] temp;

//Initializing a reg for temporary storage
always @ (posedge clk) begin
    if(rst) begin
        temp <= 0;
    end
    else begin
        //Performing the specified operation
        case(operation)
            3'b000: temp <= operandA + operandB; //addition
            3'b001: temp <= operandA - operandB; //subtraction
            3'b010: temp <= operandA & operandB; //bitwise AND
            3'b011: temp <= operandA | operandB; //bitwise OR
            3'b100: temp <= operandA ^ operandB; //bitwise XOR
            3'b101: temp <= operandA << operandB; //left shift
            3'b110: temp <= operandA >> operandB; //right shift
            3'b111: temp <= operandA + operandB; //default case
        endcase
    end
end

//Passing the result and possible overflow to the output ports
assign result = temp[31:0];
assign overflow = temp[32];

endmodule