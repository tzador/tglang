// This code snippet is a module for a 4-bit counter with synchronous reset

       module counter_4bit (
           input clk, // clock input
           input rst, // reset input

           output reg [3:0] cnt // 4-bit counter output
       );

       // Registers to store current count value and next count value
       reg [3:0] curr_count, next_count;

       // Assign current count to be the next count on the next clock cycle
       always @(posedge clk) begin
           curr_count <= next_count;
       end

       // Assign next count to increment if reset is not activated
       always @(*) begin
           if (!rst) begin
               next_count <= 4'b0001;
           end else if (curr_count === 4'b1111) begin
               next_count <= 4'b0000;
           end else begin
               next_count <= curr_count + 4'b0001;
           end
       end

       // Output current count to cnt
       assign cnt = curr_count;

       endmodule