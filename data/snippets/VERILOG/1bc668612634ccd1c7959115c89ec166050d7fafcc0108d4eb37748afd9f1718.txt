//Module that assigns a parity bit to a 4-bit input
module parity_bit (
    input [3:0] data_in, //4-bit input
    output reg [4:0] data_out, //output with added parity bit
    output reg parity //output for the parity bit
    );
    
    always @* begin //combintational logic for calculating parity bit
        case (data_in)
            4'b0000 : begin
                data_out = 5'b00000; //data_out is equal to input with a 0 parity bit
                parity = 1'b0; //parity bit is 0 for even parity
            end
            4'b0001 : begin
                data_out = 5'b00011; //data_out is equal to input with a 1 parity bit
                parity = 1'b1; //parity bit is 1 for odd parity
            end
            4'b0010 : begin
                data_out = 5'b00101;
                parity = 1'b0;
            end
            4'b0011 : begin
                data_out = 5'b00110;
                parity = 1'b1;
            end
            4'b0100 : begin
                data_out = 5'b01000;
                parity = 1'b1;
            end
            4'b0101 : begin
                data_out = 5'b01000;
                parity = 1'b1;
            end
            4'b0110 : begin
                data_out = 5'b01110;
                parity = 1'b1;
            end
            4'b0111 : begin
                data_out = 5'b10001;
                parity = 1'b0;
            end
            4'b1000 : begin
                data_out = 5'b10100;
                parity = 1'b0;
            end
            4'b1001 : begin
                data_out = 5'b10110;
                parity = 1'b0;
            end
            4'b1010 : begin
                data_out = 5'b11001;
                parity = 1'b1;
            end
            4'b1011 : begin
                data_out = 5'b11011;
                parity = 1'b0;
            end
            4'b1100 : begin
                data_out = 5'b11101;
                parity = 1'b0;
            end
            4'b1101 : begin
                data_out = 5'b11111;
                parity = 1'b1;
            end
            4'b1110 : begin
                data_out = 5'b11011;
                parity = 1'b0;
            end
            4'b1111 : begin
                data_out = 5'b11001;
                parity = 1'b1;
            end
        endcase
    end
endmodule