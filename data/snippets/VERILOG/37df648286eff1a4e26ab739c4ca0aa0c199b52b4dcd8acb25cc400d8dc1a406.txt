//This code snippet shows an implementation of a 4-bit multiplier in Verilog

//Module declaration
module multiplier(
    input [3:0] A, //4-bit input A
    input [3:0] B, //4-bit input B
    output [7:0] P //8-bit output P
);

    wire [7:0] P; //declaring the wire vector P of size 8 bits

    //multiplexer module instantiation
    mux_4bit #(4) mux(.in({A,B}), .sel({A[3],B[3]}), .out(AB));
    
    //adder module instantiation
    adder_8bit add(.A(AB), .B(AB), .C(0), .sum(P));  
    //using carry-in 0 to get the correct 8-bit output
    
endmodule

//Multiplexer module with parameterized size
module mux_4bit #(parameter N) (
    input [N-1:0] in, //N-bit input vector
    input [1:0] sel, //2-bit selection vector
    output wire out //output wire
);

wire out; //declaring the output wire

//using case statements to select the output based on the selection vector
//case statement for selecting input vector index 0
case(sel)
    2'b00: out = in[0];
    
    //case statement for selecting input vector index 1
    2'b01: out = in[1];
    
    //case statement for selecting input vector index 2
    2'b10: out = in[2];
    
    //case statement for selecting input vector index 3
    2'b11: out = in[3];
endcase

endmodule

//Adder module with 8-bit inputs and output
module adder_8bit(
    input [7:0] A, //8-bit input A
    input [7:0] B, //8-bit input B
    input C, //carry-in
    output [7:0] sum //8-bit output sum
);

generate
    //for loop to instantiate 8 full adders to perform 8-bit addition
    for(i=0; i<8; i=i+1)
        begin
            full_adder add(.A(A[i]), .B(B[i]), .C(C), .S(sum[i]), .CO(CO));
            C = CO; //setting the output carry to the input carry of the next full adder
        end
endgenerate

endmodule

//Full adder module
module full_adder(
    input A, //input A
    input B, //input B
    input C, //carry-in
    output S, //sum
    output CO //carry-out
);

    wire S; //declaring the sum wire
    wire CO; //declaring the carry-out wire
    
    //using logic gates to generate the sum and output carry
    and and1(A, B, and_out);
    xor xor1(A, B, xor_out);
    and and2(C, xor_out, and_out2);
    or or1(and_out, and_out2, S);
    and and3(A, B, CO);

endmodule