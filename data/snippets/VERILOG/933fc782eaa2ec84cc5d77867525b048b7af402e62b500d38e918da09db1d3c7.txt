// This is a code snippet in VERILOG that implements a Finite State Machine for a simple calculator
// Supported operations are addition, subtraction, multiplication, and division

// Defining states of the machine
`define START 0 // start state
`define NUM1 1 // state where first number is entered
`define OP 2 // state where operator is entered
`define NUM2 3 // state where second number is entered
`define CALC 4 // state where calculation is performed
`define RESULT 5 // state where result is displayed

// Inputs to the machine
input clk; // clock input
input rst; // reset input
input [3:0] input1; // input for first number
input [3:0] input2; // input for second number
input [1:0] operation; // input for operation (00 - add, 01 - subtract, 10 - multiply, 11 - divide)

// Outputs from the machine
output reg [7:0] result; // output for result
output reg [2:0] state; // output for current state of the machine

// Register for storing the current state
reg [2:0] current_state;

// Combinational logic to determine the next state
always @ (posedge clk, posedge rst) begin
    if (rst) begin
        current_state <= `START;
    end else begin
        case (current_state)
            `START: begin // start state
                state <= `NUM1; // move to NUM1 state
                result <= 8'b0; // initialize result to 0
            end
            `NUM1: begin // NUM1 state
                state <= `OP; // move to OP state
            end
            `OP: begin // OP state
                state <= `NUM2; // move to NUM2 state
            end
            `NUM2: begin // NUM2 state
                state <= `CALC; // move to CALC state
            end
            `CALC: begin // CALC state
                state <= `RESULT; // move to RESULT state
                case (operation) // perform operation based on input
                    2'b00: result <= input1 + input2; // addition
                    2'b01: result <= input1 - input2; // subtraction
                    2'b10: result <= input1 * input2; // multiplication
                    2'b11: result <= input1 / input2; // division
                endcase
            end
            `RESULT: begin // RESULT state
                state <= `START; // move back to START state
            end
        endcase
    end
end

// End of code snippet.