//Module for a 4-bit multiplier using behavioral modeling 
//with a single bit adder as the building block

module multiplier(x, y, p);
input [3:0] x, y;  //inputs for the multiplicands x and y
output [7:0] p;    //output for the product p
wire [7:0] partial_prod;    //intermediate wire for partial products
reg [3:0] counter;    //counter for iterating through the multiplicands
reg [7:0] adder_out;  //output of the single bit adder
reg [6:0] shift_val;  //shift value for shifting the partial products
reg [7:0] temp;   //temporary storage for the shifted partial product

//single bit adder module
module adder(a, b, c_in, sum, c_out);
input a, b, c_in;    //inputs for the two bits to be added and the carry-in bit
output sum, c_out;   //output for the sum and carry-out bit
assign sum = a ^ b ^ c_in;    //sum calculation
assign c_out = (a & b) | (a & c_in) | (b & c_in);    //carry-out calculation
endmodule  //end of single bit adder module

//behavioral implementation of the 4-bit multiplier
always @ (x or y) begin
    //reset counter and partial product wire
    counter = 0;
    partial_prod = 0;

    //iterate through the multiplicands
    repeat(4) begin
        //shift partial product by 1 bit to the left for each iteration
        shift_val = partial_prod << 1;
        //add the shifted partial product and the current multiplier
        adder_out = adder(shift_val, y[counter], partial_prod[0], partial_prod);
        //store the result in temporary storage
        temp = partial_prod;
        //shift the result by the counter value to add the correct number of zeros
        //to the end of the partial product
        partial_prod = temp << counter;
        //update the counter
        counter = counter + 1;
    end

    //assign the final product to the output
    p = partial_prod;
end

endmodule  //end of multiplier module