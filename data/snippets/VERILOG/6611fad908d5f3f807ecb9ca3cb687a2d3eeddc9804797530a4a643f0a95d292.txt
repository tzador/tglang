/*
This is a Verilog code snippet for a basic full adder module
*/

//Define inputs and outputs for the module
module fullAdder(
input [1:0] A, //2-bit input A
input [1:0] B, //2-bit input B
input Cin, //Input carry bit
output [1:0] Sum, //2-bit output sum
output Cout //Output carry bit
);

//Define internal wires
wire [1:0] X;

assign X[0] = A[0] ^ B[0]; //First bit of sum is XOR of A and B
assign X[1] = A[1] ^ B[1]; //Second bit of sum is XOR of A and B

assign Sum[0] = X[0] ^ Cin; //First bit of sum is XOR of first XOR result and carry bit
assign Sum[1] = X[1] ^ ((A[0] & B[0]) | (A[0] & Cin) | (B[0] & Cin)); //Second bit of sum is XOR of second XOR result and combinations of inputs and carry bit

assign Cout = (A[0] & B[0]) | (A[0] & Cin) | (B[0] & Cin) | (A[1] & B[1]); //Carry out is OR of combinations of inputs

endmodule //End of module