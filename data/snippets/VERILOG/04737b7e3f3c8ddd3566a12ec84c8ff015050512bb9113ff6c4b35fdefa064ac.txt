// Declare a 16-bit register called 'data_in'
reg [15:0] data_in;

// Initialize the data_in register with hex value "ABCD"
assign data_in = 16'hABCD;

// Declare a 16-bit register called 'data_out'
reg [15:0] data_out;

// Instantiate a D Flip Flop with active-low clock and asynchronous reset
// Input: data_in, clock and reset
// Output: data_out
DFF u_dff(
  .d(data_in),
  .clk(clock),
  .rst_n(reset),
  .q(data_out) // Assign data_out to the output of the Flip Flop
);

// Instantiate a 4-bit AND gate
// Input: data_out
// Output: output
WIRE [3:0] output; // Declare a wire to hold the output of the AND gate
AND u_and(
  .a(data_out[3]), // Connect the MSB of data_out to input a of the AND gate
  .b(data_out[2]), // Connect the 2nd MSB of data_out to input b of the AND gate
  .c(data_out[1]), // Connect the 3rd MSB of data_out to input c of the AND gate
  .d(data_out[0]), // Connect the LSB of data_out to input d of the AND gate
  .out(output)     // Assign the output of the AND gate to the wire 'output'
);

// Declare a 4-bit constant called 'constant'
// Initialize with binary value 0110
parameter [3:0] constant = 4'b0110;

// Declare a 4-bit wire called 'result'
wire [3:0] result;

// Instantiate a 4-bit XOR gate
// Input: constant, result
// Output: result
XOR #4 u_xor(
  .a(constant), // Connect the constant to input a of the XOR gate
  .b(result),   // Connect the result to input b of the XOR gate
  .out(result)  // Assign the output of the XOR gate back to result
);