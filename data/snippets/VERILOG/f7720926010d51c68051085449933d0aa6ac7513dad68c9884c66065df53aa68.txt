// Random number generator using Linear Feedback Shift Register

module lfsr(
    input clk, // clock signal
    input rst, // reset signal
    output [31:0] rand // output random number of 32 bits
);
    reg [31:0] lfsr_reg; // register used for LFSR operations
    wire [31:0] lfsr_out; // output of XOR operations
    // Inital Seed for the LFSR
    reg [31:0] seed = 32'hACE1C73C;
    wire [31:0] feedback; //feedback signal for LFSR

    // Implementing D Flip-Flop for clocking
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            lfsr_reg <= 32'hc73cbae1; //reset value for register
        end
        else begin
            lfsr_reg <= lfsr_out; // storing the output of XOR operations in the register
        end
    end

    // Generating feedback signal using XOR operations
    assign feedback = (lfsr_reg[0] ^ lfsr_reg[3] ^ lfsr_reg[7] ^ lfsr_reg[12] ^ lfsr_reg[16] ^ lfsr_reg[22] ^ lfsr_reg[27]);

    // Logic for shifting and adding new feedback bit in LSB
    always @(*) begin
        lfsr_out[0] = lfsr_reg[31] ^ feedback; // output bit is XOR of MSB and feedback
        lfsr_out[1:31] = lfsr_reg[0:30]; // shifting the register to the left
    end

    // Outputting random number generated by LFSR
    assign rand = lfsr_reg;

endmodule

// Testbench code for generating 10 random numbers using LFSR
module lfsr_test;
    reg clk, rst;
    wire [31:0] rand;

    lfsr dut (clk, rst, rand); //instantiating the LFSR module

    // Generating clock signal
    always begin
        clk = ~clk; //flip-flop behavior using not gate
        #10 //10 time units delay
    end

    initial begin
        // Initializing signals to start LFSR process
        clk = 0;
        rst = 1; //reset signal set high

        // Waiting for 20 time units to ensure reset process is complete
        #20

        // Releasing reset signal
        rst = 0;

        // Generating 10 random numbers
        repeat(10) begin
            // Printing random number to console
            $display("Random Number: %d", rand);
            #10; //10 time units delay between each random number generation
        end
    end
endmodule