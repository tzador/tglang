// This code snippet is a module that calculates the sum of two 8-bit binary numbers and outputs a 9-bit result
module adder(
    input [7:0] A, // 8-bit input A
    input [7:0] B, // 8-bit input B
    output [8:0] sum // 9-bit output for sum
    );

    // Declare internal wires for the addition
    wire [8:0] temp_sum;
    wire [7:0] carry_out;
    wire [7:0] sum_part;
    
    // Assign statements for the addition process
    assign temp_sum = A + B; // Adds A and B, result is stored in temp_sum
    assign carry_out = A[7] & B[7]; // Calculates carry bit for the MSBs
    assign sum_part = A[6:0] + B[6:0] + carry_out; // Calculates sum for the LSBs and adds carry bit
    
    // Use a conditional statement to handle overflow
    if(temp_sum > 255) begin
        assign sum = {temp_sum[7:0], 1'b1}; // If overflow occurs, add 1 to MSB of sum
    end else begin
        assign sum = temp_sum; // If no overflow, assign temp_sum to sum
    end
    
endmodule