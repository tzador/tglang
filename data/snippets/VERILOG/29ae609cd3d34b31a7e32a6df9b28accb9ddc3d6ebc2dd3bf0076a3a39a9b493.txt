//This code snippet is an example of a finite state machine in Verilog

module FSM (

   input clk, //input clock signal
   input reset, //input reset signal

   output reg state_reg, //state register
   output reg reg_1, reg_2 //two output registers for different states

);

   //define states
   parameter state_1 = 1'b0;
   parameter state_2 = 1'b1;
   parameter state_3 = 1'b2;

   //declare state variable
   reg state;

   //create a state register
   always @(posedge clk or posedge reset) begin
      if (reset) //check for reset signal
         state <= state_1; //reset to initial state 
      else //if no reset signal
         state <= state_reg; //copy state register
   end

   //logic for different states
   always @(*) begin
      case (state)
         state_1: begin //first state
            reg_1 = 1'b0; //set output to 0
            reg_2 = !state_reg; //second output is opposite of state
            state_reg = state_1; //update state register
         end
         state_2: begin //second state
            reg_1 = 1'b1; //set output to 1
            reg_2 = state_reg; //second output is same as state
            state_reg = state_3; //update state register
         end
         state_3: begin //third state
            reg_1 = !state_reg; //first output is opposite of state
            reg_2 = !state_reg; //second output is opposite of state
            state_reg = state_2; //update state register
         end
      endcase
   end

endmodule