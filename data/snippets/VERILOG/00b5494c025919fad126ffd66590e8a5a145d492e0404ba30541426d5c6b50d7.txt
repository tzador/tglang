// This is a 4-bit ripple carry adder module in verilog

module Ripple_Carry_Adder(
    input [3:0] A,
    input [3:0] B,
    input Cin,
    output [3:0] Sum,
    output Cout
);

// Declare internal wires and reg using 'wire' and 'reg' keywords
reg [3:0] temp_sum;
wire [2:0] inter_sum;
wire [3:0] final_sum;
wire [3:0] temp_cout;

// Use full adder module to perform addition between A and B
full_adder F1(.A(A[0]),
    .B(B[0]),
    .Cin(Cin),
    .Sum(inter_sum[0]),
    .Cout(temp_cout[0]));

full_adder F2(.A(A[1]),
    .B(B[1]),
    .Cin(temp_cout[0]),
    .Sum(inter_sum[1]),
    .Cout(temp_cout[1]));

full_adder F3(.A(A[2]),
    .B(B[2]),
    .Cin(temp_cout[1]),
    .Sum(inter_sum[2]),
    .Cout(temp_cout[2]));

full_adder F4(.A(A[3]),
    .B(B[3]),
    .Cin(temp_cout[2]),
    .Sum(inter_sum[3]),
    .Cout(Cout));

// Assign internal wires to final sum
assign temp_sum = {temp_cout, inter_sum};
assign final_sum = {0, temp_sum};

// Output final sum and carry out
assign Sum = final_sum;
assign Cout = temp_cout;

endmodule