module decoder(
    input [3:0] input_code,
    output [7:0] output_signals
);

// This module represents a 4-to-16 decoder with active low outputs

wire [3:0] input_code_complement;
assign input_code_complement = ~input_code; // invert the input code to get active low outputs

// intermediate signals to generate output signals
wire [7:0] intermediate1;
wire [7:0] intermediate2;
wire [7:0] intermediate3;
wire [7:0] intermediate4;

// generate intermediate signals using logic gates and the input code
assign intermediate1 = input_code & 4'b1110; // AND gate
assign intermediate2 = input_code_complement | 4'b0110; // OR gate
assign intermediate3 = input_code ^ 4'b1101; // XOR gate
assign intermediate4 = ~input_code | 4'b1011; // NOR gate

// use intermediate signals to generate output signals
assign output_signals[0] = intermediate1[0] | intermediate2[6]; // OR gate
assign output_signals[1] = intermediate2[5] & intermediate3[4]; // AND gate
assign output_signals[2] = intermediate3[3] ^ intermediate4[2]; // XOR gate
assign output_signals[3] = ~(intermediate1[1] & intermediate4[7]); // NAND gate
assign output_signals[4] = intermediate2[6] | intermediate3[5]; // OR gate
assign output_signals[5] = intermediate1[2] ^ intermediate4[6]; // XOR gate
assign output_signals[6] = ~(intermediate2[4] | intermediate3[2]); // NOR gate
assign output_signals[7] = intermediate3[1] & intermediate4[3]; // AND gate
assign output_signals[8] = ~(intermediate1[3] ^ intermediate4[0]); // NOR gate
assign output_signals[9] = intermediate2[1] | intermediate3[7]; // OR gate
assign output_signals[10] = ~(intermediate3[6] ^ intermediate4[5]); // NAND gate
assign output_signals[11] = intermediate1[0] & intermediate4[1]; // AND gate
assign output_signals[12] = intermediate2[7] ^ intermediate3[4]; // XOR gate
assign output_signals[13] = ~(intermediate1[2] | intermediate4[6]); // NOR gate
assign output_signals[14] = intermediate2[3] & intermediate3[5]; // AND gate
assign output_signals[15] = intermediate3[2] ^ intermediate4[0]; // XOR gate

endmodule