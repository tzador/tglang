// This code snippet is a 4-bit ripple carry adder using structural modeling in VERILOG
// It takes in two 4-bit input vectors and produces a 4-bit output vector with a carry-out bit
// The adder is built using full adder modules

module full_adder(input a, input b, input cin, output sum, output cout);
    // Definition of a full adder module with 3 inputs (a, b and carry-in) and 2 outputs (sum and carry-out)

    assign sum = a ^ b ^ cin; // XOR operation to calculate sum
    // ^ is the bitwise XOR operator in VERILOG

    assign cout = (a & b) | (b & cin) | (a & cin); // Calculation of carry-out bit
    // & is the bitwise AND operator in VERILOG
    // | is the bitwise OR operator in VERILOG
endmodule

module ripple_carry_adder(input [3:0] a, input [3:0] b, output [3:0] sum, output cout);
    // Definition of a 4-bit ripple carry adder, with two 4-bit input vectors and two outputs (sum and carry-out)

    // Internal signals to store carry bits after each adder stage
    wire [3:0] carry; // Array of 4 wires, each storing a carry bit for the corresponding bit position

    // Instantiation of four full adder modules to perform the addition of the two input vectors
    full_adder fa0(.a(a[0]), .b(b[0]), .cin(1'b0), .sum(sum[0]), .cout(carry[0]));
    full_adder fa1(.a(a[1]), .b(b[1]), .cin(carry[0]), .sum(sum[1]), .cout(carry[1]));
    full_adder fa2(.a(a[2]), .b(b[2]), .cin(carry[1]), .sum(sum[2]), .cout(carry[2]));
    full_adder fa3(.a(a[3]), .b(b[3]), .cin(carry[2]), .sum(sum[3]), .cout(cout));

    // Note: The carry-in for the first full adder is connected to a constant 0 using 1'b0

endmodule