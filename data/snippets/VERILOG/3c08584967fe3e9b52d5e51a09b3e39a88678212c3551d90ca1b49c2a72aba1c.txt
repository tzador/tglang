//Example of a complex Verilog code for a dual-edge triggered flip-flop

module dual_edge_ff (
    input clk, rst,
    input D, 
    output reg Q,
    output reg Q_bar
);

reg D_prev, D_next; //registers for storing the current and next input values

always @ (posedge clk) begin //synchronized section triggered on clock's positive edge
    if(rst) begin //reset condition
        D_prev <= 1'b0; //sets the previous input to 0
        D_next <= 1'b0; //sets the next input to 0
        Q <= 1'b0; //sets the output to 0
        Q_bar <= 1'b1; //sets the inverted output to 1
    end else begin //normal operation
        D_prev <= D; //stores the current input as the previous input
        D_next <= D; //stores the current input as the next input
        Q <= D_next; //sets the output to the next input
        Q_bar <= ~D_next; //sets the inverted output to the complement of the next input
    end
end

always @ (negedge clk) begin //synchronized section triggered on clock's negative edge
    if(rst) begin //reset condition
        D_next <= 1'b0; //sets the next input to 0
    end else begin //normal operation
        D_next <= D_prev; //stores the previous input as the next input
    end
end

endmodule