`timescale 1ns / 1ps           // Setting the timescale for simulation

module my_module(input a, b, output reg [7:0] c);         // Declaring a module with two input and one output, using a register for output

  reg [3:0] temp;              // Declaring a 4-bit register

  always @ (a,b)                // Always block to monitor changes in inputs a and b
    begin
      if (a == 0 && b == 0)     // Checking if both inputs are 0
        temp <= 4'b1111;        // Assigning binary value 1111 to temp
      else if (a == 0 || b == 0) // Checking if either input is 0
        temp <= 4'b0011;        // Assigning binary value 0011 to temp
      else                       // If no conditions are met
        temp <= 4'b0000;        // Assigning binary value 0000 to temp
    end

  always @ (temp)               // Always block to monitor changes in temp
    begin
      case (temp)               // Using a case statement to assign output c based on temp's value
        4'b1111: c <= 8'd255;   // If temp is 1111, output c is assigned decimal value 255
        4'b0011: c <= 8'd15;    // If temp is 0011, output c is assigned decimal value 15
        default: c <= 8'd0;     // If temp is any other value, output c is assigned decimal value 0
      endcase
    end

endmodule                       // End of module