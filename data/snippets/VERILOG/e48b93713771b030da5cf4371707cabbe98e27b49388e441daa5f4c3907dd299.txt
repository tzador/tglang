module ALU (op, a, b, out);
input [3:0] op;          //input signal for selecting operation
input [7:0] a, b;        //input signals for operands
output [7:0] out;        //output signal for result
reg [7:0] out;           //output register for storing result temporarily
wire [7:0] sum, diff;    //wires for intermediate sum and difference values

always @(*) begin
    case(op)
        4'b0000: out = a;                      //if op = 0000, out = a (copy a)
        4'b0001: out = b;                      //if op = 0001, out = b (copy b)
        4'b0010: out = a + b;                  //if op = 0010, out = a + b
        4'b0011: out = a - b;                  //if op = 0011, out = a - b
        4'b0100: out[0] = a[0] & b[0]           //if op = 0100, out = bitwise AND of a and b
                   out[1] = a[1] & b[1]         
                   out[2] = a[2] & b[2] 
                   out[3] = a[3] & b[3]         
                   out[4] = a[4] & b[4]         
                   out[5] = a[5] & b[5]         
                   out[6] = a[6] & b[6] 
                   out[7] = a[7] & b[7]; 
        4'b0101: out[0] = a[0] | b[0]           //if op = 0101, out = bitwise OR of a and b
                   out[1] = a[1] | b[1]         
                   out[2] = a[2] | b[2] 
                   out[3] = a[3] | b[3]         
                   out[4] = a[4] | b[4]         
                   out[5] = a[5] | b[5]         
                   out[6] = a[6] | b[6] 
                   out[7] = a[7] | b[7];
        4'b0110: out[0] = a[0] ^ b[0]           //if op = 0110, out = bitwise XOR of a and b
                   out[1] = a[1] ^ b[1]         
                   out[2] = a[2] ^ b[2] 
                   out[3] = a[3] ^ b[3]         
                   out[4] = a[4] ^ b[4]         
                   out[5] = a[5] ^ b[5]         
                   out[6] = a[6] ^ b[6] 
                   out[7] = a[7] ^ b[7];  
        4'b0111: out[0] = a[0] ~^ b[0]          //if op = 0111, out = bitwise XNOR of a and b
                   out[1] = a[1] ~^ b[1]         
                   out[2] = a[2] ~^ b[2] 
                   out[3] = a[3] ~^ b[3]         
                   out[4] = a[4] ~^ b[4]         
                   out[5] = a[5] ~^ b[5]         
                   out[6] = a[6] ~^ b[6] 
                   out[7] = a[7] ~^ b[7];  
        4'b1000: out = (a < b) ? 8'b00000001 : 8'b00000000; //if op = 1000, out = 1 if a < b, 0 otherwise
        4'b1001: out = (a > b) ? 8'b00000001 : 8'b00000000; //if op = 1001, out = 1 if a > b, 0 otherwise
        4'b1010: out = (a == b) ? 8'b00000001 : 8'b00000000; //if op = 1010, out = 1 if a == b, 0 otherwise
        4'b1011: out = (a != b) ? 8'b00000001 : 8'b00000000; //if op = 1011, out = 1 if a != b, 0 otherwise
        4'b1100: out = a >> b;                     //if op = 1100, out = a right shifted by b
        4'b1101: out = a << b;                     //if op = 1101, out = a left shifted by b
        4'b1110: out = (a[7] == 1) ? {1'b1, a[6:0]} : {1'b0, a[6:0]}; //if op = 1110, out = a[7] shifted to LSB
        4'b1111: out = (a[0] == 1) ? {a[7:1], 1'b1} : {a[7:1], 1'b0}; //if op = 1111, out = a[0] shifted to MSB
    endcase
end

endmodule