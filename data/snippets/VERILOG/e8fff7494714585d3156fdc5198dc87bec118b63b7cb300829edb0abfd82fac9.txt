// Defining a register with 8-bit data width and 10ns delay
reg [7:0] myReg; `timescale 1ns/1ns // defining the timescale

always @(posedge clk) // creating a synchronous always block
begin
  #10 myReg <= dataIn // assigning value to register after 10 ns delay
end

// Creating a 4-to-1 multiplexer with enable signal
module mux4to1 (input [3:0] select, // input select signal for choosing input
                input [7:0] in0, in1, in2, in3, // input data signals
                input enable, // enable signal
                output reg [7:0] out); // output signal as register

always @(*) // creating a combinational always block
begin
  case(select) // using select signal to choose input
    4'b0000: out = in0;
    4'b0001: out = in1;
    4'b0010: out = in2;
    4'b0011: out = in3;
    default: out = 8'b00000000;
  endcase

  if(!enable) // checking if enable signal is low
    out = 8'b00000000; // output is reset to all zeros
endmodule

// Testbench for the 4-to-1 multiplexer
module testbench;
  // Creating clock signal
  reg clk = 0; // clock signal as a register
  always #5 clk = ~clk; // toggling clock signal every 5 ns

  // Creating inputs and outputs for the multiplexer
  reg [3:0] select; // input select signal
  reg [7:0] in0, in1, in2, in3; // input data signals
  reg enable; // enable signal
  wire [7:0] out; // output signal

  mux4to1 mux(.select(select), .in0(in0), .in1(in1), .in2(in2), .in3(in3), .enable(enable), .out(out)); // instantiating the multiplexer

  initial
  begin
    // Assigning values to input signals for testing
    select = 4'b0000;
    in0 = 8'b00000010;
    in1 = 8'b00010010;
    in2 = 8'b00100010;
    in3 = 8'b00110010;
    enable = 1;
  end

  always @(posedge clk)
  begin
    #5 select = select + 1; // incrementing select signal every 5 ns
  end

  // Printing input and output values to the console
  initial
  begin
    $display("Select = %b, In0 = %b, In1 = %b, In2 = %b, In3 = %b, Enable = %b", select, in0, in1, in2, in3, enable);
    $display("Output = %b", out);
  end
endmodule