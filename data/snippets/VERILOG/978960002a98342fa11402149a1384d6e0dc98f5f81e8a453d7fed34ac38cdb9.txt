// Definition of a 16-bit up counter with asynchronous reset
module up_counter_16bit(
    input clk, // Input clock signal
    input rst, // Asynchronous reset signal
    input [15:0] data_in, // Data input signal
    output reg [15:0] count // Output count signal
);

// Define a reg variable to hold the current count value
reg [15:0] current_count = 16'b0;

// Create a always block for synchronous behavioral logic
always @ (posedge clk or posedge rst) begin
    if (rst) begin
        // Reset the counter to 0 when rst is high
        current_count <= 16'b0;
    end else begin
        // Increment the counter by 1 on each clock cycle
        current_count <= current_count + 16'b1;
    end
end

// Assign the output count signal to the current_count variable
assign count = current_count;

endmodule