module ALU(
  input [3:0] op, // 4-bit selector for operation
  input [7:0] a, // first 8-bit input
  input [7:0] b, // second 8-bit input
  output [7:0] out, // output of operation
  
  wire [7:0] sum, // wire for addition result
  wire [7:0] diff, // wire for subtraction result
  wire [7:0] prod, // wire for multiplication result
  wire [7:0] quo // wire for division result
);

  // use case statement to select operation based on op input
  always @(*) begin
    case (op)
      4'b0000: out = a + b; // addition operation
      4'b0001: out = a - b; // subtraction operation
      4'b0010: out = a * b; // multiplication operation
      4'b0011: out = a / b; // division operation
      4'b0100: out = (a < b) ? 8'h01 : 8'h00; // less than comparison operation
      4'b0101: out = (a > b) ? 8'h01 : 8'h00; // greater than comparison operation
      4'b0110: out = (a == b) ? 8'h01 : 8'h00; // equality comparison operation
      4'b0111: out = a | b; // bitwise OR operation
      4'b1000: out = a & b; // bitwise AND operation
      4'b1001: out = a ^ b; // bitwise XOR operation
      default: out = 8'h00; // default to 0 output if no valid operation selected
    endcase
  end
  
  // assign statements for calculating results of specific operations
  assign sum = a + b; // addition
  assign diff = a - b; // subtraction
  assign prod = a * b; // multiplication
  assign quo = a / b; // division
  
endmodule