module full_adder(input a, input b, input c, output sum, output carry);
	// This module represents a full adder circuit with three input bits (a, b, c) and two output bits (sum, carry).
	// This implementation uses structural modeling approach.
	
	// Part 1: Create half adder instances for first and second bit addition
	half_adder HA1 (.a(a), .b(b), .sum(s1), .carry(c1));
	half_adder HA2 (.a(s1), .b(c), .sum(sum), .carry(c2));
	
	// Part 2: Create XOR gate for generating the final carry
	xor_gate xg1 (.a(c1), .b(c2), .output(carry));
	
	// Part 3: Define internal signals
	wire s1, c1, c2;
	
	// Part 4: Define truth table for half adder
	// | A | B | Sum | Carry |
	// |---|---|-----|-------|
	// | 0 | 0 |  0  |   0   |
	// | 0 | 1 |  1  |   0   |
	// | 1 | 0 |  1  |   0   |
	// | 1 | 1 |  0  |   1   |
	
	// Part 5: End module
	endmodule