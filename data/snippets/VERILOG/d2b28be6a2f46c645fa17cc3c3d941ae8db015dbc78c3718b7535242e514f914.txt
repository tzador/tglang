// Module to implement a 4x1 multiplexer
module mux_4x1(input wire [3:0] data_in, input wire [1:0] sel, output reg data_out);

// Declare internal wires and reg
reg w0, w1, w2, w3;

// Continuous assignment for internal wires
assign w0 = (sel == 2'b00) ? data_in[0] : 1'b0; // If sel == 00, w0 = data_in[0], else w0 = 0
assign w1 = (sel == 2'b01) ? data_in[1] : 1'b0; // If sel == 01, w1 = data_in[1], else w1 = 0
assign w2 = (sel == 2'b10) ? data_in[2] : 1'b0; // If sel == 10, w2 = data_in[2], else w2 = 0
assign w3 = (sel == 2'b11) ? data_in[3] : 1'b0; // If sel == 11, w3 = data_in[3], else w3 = 0

// Multiplexer implementation
always @(*) begin
    case(sel)
        2'b00: data_out = w0; // Output is w0 if sel == 00
        2'b01: data_out = w1; // Output is w1 if sel == 01
        2'b10: data_out = w2; // Output is w2 if sel == 10
        2'b11: data_out = w3; // Output is w3 if sel == 11
    endcase
end

endmodule // end of mux_4x1 module