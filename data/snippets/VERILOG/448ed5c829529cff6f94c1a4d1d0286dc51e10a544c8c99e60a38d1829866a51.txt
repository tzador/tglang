/**
* This is a module for a 16-bit binary counter with an asynchronous reset.
*
* Inputs:
*     clock (input, 1-bit): the clock signal
*     reset (input, 1-bit): the asynchronous reset signal
*
* Outputs:
*     count (output, 16-bit): the 16-bit counter output
*/

module binary_counter(clock, reset, count);
    // define input and output ports
    input clock, reset; 
    output reg [15:0] count;
    
    // create a 16-bit register to store the count
    reg [15:0] reg_count;
    
    // assign count output to stored value
    assign count = reg_count; 
    
    // create a always block for counting
    always @ (posedge clock) begin
        // handle logic for asynchronous reset
        if (reset) begin
            // if reset signal is high, set count to 0
            reg_count <= 0;
        end else begin
            // if reset signal is low, increment count
            reg_count <= reg_count + 1;
        end
    end
endmodule