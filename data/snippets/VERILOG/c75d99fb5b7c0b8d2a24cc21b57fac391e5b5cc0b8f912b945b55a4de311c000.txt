`timescale 1ns / 1ps // sets the timescale for simulation

module encoder (
	input [7:0] data,
	output [3:0] encoded_data
	);
	
	reg [4:0] temp_data;
	
	always @ (data) begin // define a sensitivity list
		case(data)
			8'b00000001 : temp_data = 5'b00001; // encoding for data value of 1
			8'b00000011 : temp_data = 5'b00010; // encoding for data value of 3
			8'b00000111 : temp_data = 5'b00011; // encoding for data value of 7
			8'b00001111 : temp_data = 5'b00100; // encoding for data value of 15
			8'b00011111 : temp_data = 5'b00101; // encoding for data value of 31
			8'b00111111 : temp_data = 5'b00110; // encoding for data value of 63
			8'b01111111 : temp_data = 5'b00111; // encoding for data value of 127
			8'b11111111 : temp_data = 5'b01000; // encoding for data value of 255
			default : temp_data = 5'b00000; // default case
		endcase
	end
	
	assign encoded_data = {2'b00, temp_data[4:3], temp_data[2:0]}; // assigns the encoded data to output
	
endmodule

/* 
This code snippet creates a module called "encoder" that takes in an 8-bit data input and outputs a 4-bit encoded data.
It uses a sensitivity list to check for changes in the input data and assigns the corresponding encoded value using a case statement.
The encoded data is then assigned to the output using a concatenation statement.
*/