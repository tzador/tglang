//Declaration of variables
reg [15:0] A, B; //declare two 16-bit registers (A and B)
wire [15:0] result; //declare a 16-bit wire (used for connecting different modules)

//Adder module
module adder(input [7:0] a, b, //inputs to the adder (two 8-bit variables)
           output c); //output of the adder (8-bit variable)
  assign c = a + b; //using assign statement to assign the sum of a and b to c
endmodule

//Multiplexer module
module mux(input [1:0] sel, //input to select which input to output (2-bit variable)
           input [15:0] in0, in1, //two inputs of 16-bits each
           output [15:0] out); //output of 16-bits
  always @(*) begin //combinational logic
    case(sel) //using case statement to select input based on sel
      2'b00: out = in0; //if sel is 00, output in0
      2'b01: out = in1; //if sel is 01, output in1
      2'b10: out = A; //if sel is 10, output register A (declared earlier)
      2'b11: out = B; //if sel is 11, output register B (declared earlier)
    endcase
  end
endmodule

//Testbench module
module testbench;
  reg [1:0] sel; //input for mux module (2-bit variable)
  reg [15:0] in0, in1; //inputs for mux module (16-bit variables)
  wire [15:0] out; //output from mux module (16-bit variable)
  
  //Instantiating modules
  adder adder_inst(); //instantiating adder module
  mux mux_inst(sel, in0, in1, out); //instantiating mux module with inputs and outputs
  
  initial begin
    $monitor("Result is %d", out); //printing the output value
    #10; //delay by 10 time units
    in0 = 8'hAB; //assigning value to input in0
    in1 = 8'hCD; //assigning value to input in1
    sel = 2'b01; //assigning value to select input
    @(posedge clk); //wait for a positive edge on clock
    #10; //delay by 10 more time units
    A = 16'h1234; //assigning value to register A
    B = 16'h5678; //assigning value to register B
    sel = 2'b11; //changing select input to output from register B
    @(posedge clk); //wait for another positive edge on clock
    #10; //delay by 10 more time units
    A = 16'hABCD; //changing value of register A
    sel = 2'b10; //changing select input to output from register A
    @(posedge clk); //wait for another positive edge on clock
    #10; //delay by 10 more time units
    $finish; //end simulation
  end
endmodule