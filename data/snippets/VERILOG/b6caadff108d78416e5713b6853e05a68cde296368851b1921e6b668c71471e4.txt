// 8-bit barrel shifter implementation

module barrel_shifter(input [7:0] data, input [2:0] shift_amt, input shift_en, output [7:0] shifted_data);

// signal declarations
reg [7:0] temp_shift, shifter_output;
wire [2:0] shift_index;
reg [7:0] result;

// shift index calculation
assign shift_index = shift_amt + {3{shift_en}};

always @(*)
begin
	// shifting operation
	case(shift_index)
		3'b000: temp_shift = data << 1; // left shift by 1
		3'b001: temp_shift = data << 2; // left shift by 2
		3'b010: temp_shift = data << 4; // left shift by 4
		3'b011: temp_shift = data << 8; // left shift by 8
		3'b100: temp_shift = data >> 1; // right shift by 1
		3'b101: temp_shift = data >> 2; // right shift by 2
		3'b110: temp_shift = data >> 4; // right shift by 4
		3'b111: temp_shift = data >> 8; // right shift by 8
	endcase
end

// output assignment
assign shifter_output = temp_shift | data;

// result assignment
always @(*)
begin
	if(shift_en)
		result = shifter_output;
	else
		result = data;
end

// output declaration
assign shifted_data = result;

endmodule