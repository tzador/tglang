// This is a simple verilog code snippet that implements a 4-bit ripple carry adder
module ripple_carry_adder (output [3:0] sum, input [3:0] A, B, input cin);

wire [3:0] c_out;

// Full adder module to be used in the design
// The carry-out (cout) and sum (s) are declared as outputs while the inputs are declared as a, b and cin
module full_adder (output cout, output s, input a, b, cin);
// Declare internal wires to be used in the full adder
wire carry0, sum0, carry1, sum1;

// First full adder
// Uses the inputs a, b and cin and generates the sum (s) and carry-out (cout)
// The sum uses a XOR gate while the carry-out uses an AND gate
// The internal wires are connected to appropriate gates and outputs
xor x0 (sum0, a, b);
and a0 (carry0, a, b);
xor x1 (s, sum0, cin);
and a1 (cout, sum0, carry0);

// Second full adder
// Uses the sum from the previous adder and the input b
xor x2 (sum1, carry1, sum0);
and a2 (carry1, carry0, sum0);
xor x3 (s, sum1, cin);
and a3 (cout, sum1, carry1);
endmodule

// Ripple Carry Adder Logic
// Uses four instances of full adders to generate the final sum and carry-out
// The carry-out of the first three adders are connected to the carry-in of the next adder
full_adder fa0 (c_out[0], sum[0], A[0], B[0], cin);
full_adder fa1 (c_out[1], sum[1], A[1], B[1], c_out[0]);
full_adder fa2 (c_out[2], sum[2], A[2], B[2], c_out[1]);
full_adder fa3 (c_out[3], sum[3], A[3], B[3], c_out[2]);
endmodule