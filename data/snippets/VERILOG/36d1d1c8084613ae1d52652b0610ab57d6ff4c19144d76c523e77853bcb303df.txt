// Definition of a five bit adder with carry in and carry out

module five_bit_adder (
  input clk, // clock input
  input [4:0] a, // five bit input a
  input [4:0] b, // five bit input b
  input cin, // carry in input
  output [4:0] sum, // five bit output sum
  output cout // carry out output
);

  reg [4:0] sum; // sum register that stores the output
  wire [4:0] temp_sum; // temporary sum wires
  wire [4:0] temp_carry; // temporary carry wires
  wire [4:0] temp_carry_out; // temporary carry out wires

  // five bit full adder
  full_adder fa0 (
    .a(a[0]), // first bit of a
    .b(b[0]), // first bit of b
    .cin(cin), // carry in
    .sum(temp_sum[0]), // first bit of temp sum
    .cout(temp_carry[0]) // first bit of temp carry
  );

  full_adder fa1 (
    .a(a[1]), // second bit of a
    .b(b[1]), // second bit of b
    .cin(temp_carry[0]), // carry in from previous full adder to propagate carry
    .sum(temp_sum[1]), // second bit of temp sum
    .cout(temp_carry[1]) // second bit of temp carry
  );

  full_adder fa2 (
    .a(a[2]),
    .b(b[2]),
    .cin(temp_carry[1]),
    .sum(temp_sum[2]),
    .cout(temp_carry[2])
  );

  full_adder fa3 (
    .a(a[3]),
    .b(b[3]),
    .cin(temp_carry[2]),
    .sum(temp_sum[3]),
    .cout(temp_carry[3])
  );

  full_adder fa4 (
    .a(a[4]),
    .b(b[4]),
    .cin(temp_carry[3]),
    .sum(temp_sum[4]),
    .cout(temp_carry_out[0]) // carry out from last full adder
  );

  assign sum = temp_sum; // assign temp sum to final sum output
  assign cout = temp_carry_out[0]; // assign temp carry out to final carry out output

endmodule