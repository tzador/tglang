// Verilog code snippet to implement a 4-stage pipelined processor

module processor ( input clk, rst_n, input [31:0] data_in, output [31:0] data_out );

    // Registers to store data at each pipeline stage
    reg [31:0] stage1_reg, stage2_reg, stage3_reg, stage4_reg;

    // Combinational logic at each stage to calculate the output
    always @ (posedge clk or negedge rst_n) begin
        if (rst_n = 1'b0) begin
            stage1_reg <= 0;
            stage2_reg <= 0;
            stage3_reg <= 0;
            stage4_reg <= 0;
        end else begin
            stage1_reg <= data_in;
            stage2_reg <= stage1_reg + 4'b0010;
            stage3_reg <= stage2_reg * stage1_reg;
            stage4_reg <= stage3_reg - 3'b001;
        end
    end

    // Output the data from the last stage
    assign data_out = stage4_reg;

endmodule