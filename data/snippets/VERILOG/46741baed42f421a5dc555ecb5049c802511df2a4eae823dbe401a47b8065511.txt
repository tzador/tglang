/*
* This code snippet is a 4-bit multiplier using combinational logic.
* The inputs 'a' and 'b' are 4-bit numbers and the output 'p' is the product of 'a' and 'b'.
* It uses an array of AND gates to calculate the product bit by bit.
* The output 'p' is a 8-bit number, the first 4 bits are the lower half of the product and the
* last 4 bits are set to zero.
*/

module multiplier(a, b, p);

input [3:0] a;
input [3:0] b;
output [7:0] p;

// Declaration of internal wires to store intermediate calculations
wire [3:0] p_low; 
wire [3:0] p_high;

// Multiplication using bit-by-bit AND operation
// Lower half of the product
and and1(p_low[0], a[0], b[0]);
and and2(p_low[1], a[1], b[0]);
and and3(p_low[2], a[2], b[0]);
and and4(p_low[3], a[3], b[0]);

// Higher half of the product
and and5(p_high[0], a[0], b[1]);
and and6(p_high[1], a[1], b[1]);
and and7(p_high[2], a[2], b[1]);
and and8(p_high[3], a[3], b[1]);

// Intermediate results to calculate final product
wire [3:0] p1, p2, p3, p4;

// AND operation between 'b' bits and higher half of the product
and and9(p1[0], a[0], p_high[0]);
and and10(p1[1], a[1], p_high[1]);
and and11(p1[2], a[2], p_high[2]);
and and12(p1[3], a[3], p_high[3]);

// Shifted results of first AND operation
and and13(p2[0], a[0], p_high[0]);
and and14(p2[1], a[1], p_high[1]);
and and15(p2[2], a[2], p_high[2]);
and and16(p2[3], a[3], p_high[3]);

// AND operation between 'a' bits and lower half of the product
and and17(p3[0], p_low[0], b[0]);
and and18(p3[1], p_low[1], b[0]);
and and19(p3[2], p_low[2], b[0]);
and and20(p3[3], p_low[3], b[0]);

// Shifted results of second AND operation
and and21(p4[0], a[0], p_low[0]);
and and22(p4[1], a[1], p_low[1]);
and and23(p4[2], a[2], p_low[2]);
and and24(p4[3], a[3], p_low[3]);

// Final product bit-by-bit calculation
// First bit of the product
or or1(p[0], p1[0], p2[0], p3[0]);

// Second bit of the product
or or2(p[1], p1[1], p2[1], p4[0]);

// Third bit of the product
or or3(p[2], p1[2], p2[2], p4[1]);

// Fourth bit of the product
or or4(p[3], p1[3], p2[3], p4[2]);

// Fifth bit of the product
or or5(p[4], p2[0], p3[1], p4[3]);

// Sixth bit of the product
or or6(p[5], p2[1], p3[2], p4[3]);

// Seventh bit of the product
or or7(p[6], p2[2], p3[3], b[0]);

// Eighth bit of the product
or or8(p[7], p2[3], p4[3], b[0]);

endmodule