module ComplexDivider(
    input signed [15:0] dividend, //input signed 16 bit dividend
    input signed [31:0] divisor, //input signed 32 bit divisor
    output reg [15:0] quotient, //output 16 bit quotient
    output reg [15:0] remainder, //output 16 bit remainder
    output reg [15:0] error, //output 16 bit error flag
    //declare internal variables
    reg [15:0] temp_dividend, //temporary variable to store dividend
    reg [31:0] temp_divisor, // temporary variable to store divisor
    reg [15:0] count, //variable to count number of divisions
    reg [1:0] sign; //variable to store sign of result
    always @(dividend) begin //always block to monitor changes in dividend
         //shift dividend to higher bits to prepare for division
         temp_dividend = {dividend, 16'b0};
         //store absolute value of dividend
         temp_dividend = (dividend[15]) ? -dividend : dividend;
         //shift divisor to align with dividend
         temp_divisor = divisor << count;
         //set error flag to 0
         error = 0;
         //if divisor is 0, set error flag to 1
         if (divisor == 0)
             error = 1;
         //if dividend is 0, set quotient and remainder as 0
         else if (dividend == 0) begin
             quotient = 0;
             remainder = 0;
         end
         //otherwise, continue with division
         else begin
             //loop until divisor is larger than shifted dividend
             while (temp_divisor <= temp_dividend) begin
                 //subtract divisor from shifted dividend
                 temp_dividend = temp_dividend - temp_divisor;
                 //increment count
                 count = count + 1;
             end
             //store sign of result in sign variable
             sign = (dividend[15] ^ divisor[15]) ? 2'b1 : 2'b0;
             //if result is negative, take 2's complement
             if (sign == 2'b1)
                 temp_dividend = -temp_dividend;
             //assign result to quotient and remainder
             quotient = temp_dividend;
             remainder = temp_dividend;
         end
         //finalize result based on sign
         //if result is negative, take 2's complement of quotient and remainder
         if (sign == 2'b1) begin
             quotient = -quotient;
             remainder = -remainder;
         end
     end
)