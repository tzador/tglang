// This code snippet is a counter that increments by 1 every clock cycle
module counter
(
    input wire clk, // clock input
    input wire rst, // reset input
    
    output wire [7:0] count, // 8-bit output count
    output wire overflow // output to indicate when the count reaches its maximum value
);

reg [7:0] count; // register to hold the count value
reg [7:0] next_count; // register to hold the next count value

always @ (posedge clk) begin // sequential always block triggered by positive edge of clock
    if (rst) begin // if reset is asserted
        count <= 0; // set count to 0
    end else begin
        if (count == 8'hFF) begin // if count reaches its maximum value of 8 bits
            next_count <= 0; // set next count to 0
            overflow <= 1; // set overflow to 1 to indicate overflow
        end else begin
            next_count <= count + 1; // increment next count value by 1
            overflow <= 0; // set overflow to 0 to indicate no overflow
        end
        count <= next_count; // update the count value with the next count value
    end
end

endmodule