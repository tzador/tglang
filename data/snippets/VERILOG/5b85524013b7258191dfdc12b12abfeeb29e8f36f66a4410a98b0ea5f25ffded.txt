// Verilog code to implement a 4-bit ALU with 3 operations

module ALU (
  input [3:0] operand1, // 4-bit input operand1
  input [3:0] operand2, // 4-bit input operand2
  input [1:0] operation, // 2-bit operation select
  output [3:0] result // 4-bit output result
);

// Declare internal wires for multiplexers and internal signals
wire [3:0] add_res, sub_res, and_res, or_res, xor_res;
wire [3:0] mux_out;
wire [1:0] mux_sel, cmp_res;

// Assign the output based on the selected operation
assign result = (operation == 2'b00) ? add_res :
                 (operation == 2'b01) ? sub_res :
                 (operation == 2'b10) ? mux_out :
                 (operation == 2'b11) ? cmp_res : 4'b0000;

// Implement the addition operation by using the "+" operator
assign add_res = operand1 + operand2;

// Implement the subtraction operation by inverting operand2 and adding 1
assign sub_res = operand1 + ~operand2 + 1;

// Implement the bitwise AND operation
assign and_res = operand1 & operand2;

// Implement the bitwise OR operation
assign or_res = operand1 | operand2;

// Implement the bitwise XOR operation
assign xor_res = operand1 ^ operand2;

// Implement the 4-to-1 multiplexer to select between the different operations
assign mux_sel = operation[0] ? operation[1] : operation[1];
assign mux_out = (mux_sel == 2'b00) ? add_res :
                 (mux_sel == 2'b01) ? and_res :
                 (mux_sel == 2'b10) ? or_res :
                 (mux_sel == 2'b11) ? xor_res : 4'b0000;

// Implement the comparison operation by using the "<" operator
assign cmp_res = (operand1 < operand2) ? 4'b0001 : 4'b0000;

endmodule