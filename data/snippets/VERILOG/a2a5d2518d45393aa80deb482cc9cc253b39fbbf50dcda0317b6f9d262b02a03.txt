module memory_controller(
input wire [7:0] addr,
input wire [7:0] data_in,
input wire clk,
input wire reset,
output reg [7:0] data_out
);

reg [7:0] memory[0:255];

always@(posedge clk) begin
  if(reset) begin
    data_out <= 8'h00; // initialize output data
    memory[0] <= data_in; // initialize first memory location
  end
  
  else begin
    data_out <= memory[addr]; // output data from memory location
        
    case (addr) // check address to determine operation
      8'h00: memory[addr] <= data_in; // store data in memory
      8'h01: memory[addr] <= memory[addr] + data_in; // add data to memory location
      8'h02: memory[addr] <= data_in ^ 8'hFF; // perform bitwise XOR operation with memory data
      default: memory[addr] <= data_in; // if address is not specified, store data in memory
    endcase
  end
end

endmodule