module Example (
  input wire [7:0] a, //input port with 8-bit data
  input wire b, //single bit input port
  output reg [15:0] c //output register with 16-bit data
);

  //internal signal declarations
  wire q;
  reg [3:0] d;
  
  //simple 2-input AND gate
  assign q = a[0] & b;
  
  //sequential logic using if-else statement
  always @ (posedge q)
    if (d[3] == 1) //conditional statement
      d <= {d[2:0], a[7]}; //concatenates a single bit from a with bits from d
    else
      d <= d << 1; //shifts d one bit to the left
  
  //combinational logic using case statement
  always @ (*)
    case (a[3:1]) //checks cases based on bits 1-3 of a
      3'b000: c = d + a[7:4]; //adds bits 4-7 of a to d
      3'b001: c = d - a[7:4]; //subtracts bits 4-7 of a from d
      3'b010: c = d ^ a[7:4]; //XORs bits 4-7 of a with d
      3'b011: c = d & a[7:4]; //ANDs bits 4-7 of a with d
      3'b100: c = d | a[7:4]; //ORs bits 4-7 of a with d
      default: c = {d, 8'b0}; //default case, concatenates d with 8 zeros to create 16-bit c
    endcase
  
endmodule