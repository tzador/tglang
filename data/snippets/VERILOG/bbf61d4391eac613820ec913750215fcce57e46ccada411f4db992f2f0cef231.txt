module multiply #(parameter WIDTH = 8)(
  input [WIDTH-1:0] a,
  input [WIDTH-1:0] b,
  output logic [2*WIDTH-1:0] result
);

// Declare internal registers to hold intermediate values
logic [WIDTH-1:0] a_reg;
logic [WIDTH-1:0] b_reg;
logic [WIDTH-1:0] a_neg;
logic [WIDTH-1:0] b_neg;
logic [WIDTH-1:0] product_reg;
logic [2*WIDTH-1:0] tmp_reg;
logic [WIDTH-1:0] a_abs;
logic [WIDTH-1:0] b_abs;

// Negative number detection
assign a_neg = a[WIDTH-1];
assign b_neg = b[WIDTH-1];

// Convert inputs to absolute values
assign a_abs = a_neg ? ~a + 1'b1 : a;
assign b_abs = b_neg ? ~b + 1'b1 : b;

// Shift b_abs to the left to align with a_abs
assign b_reg = (b_abs << WIDTH);

always @(posedge clk) begin
  // Shift a_abs and b_reg right by 1 bit
  a_reg = a_abs >> 1;
  b_reg = b_reg >> 1;

  // Calculate the product of the shifted values
  product_reg = a_reg * b_reg;

  // Shift product_reg left by 1 bit to align with a_reg and b_reg
  tmp_reg = product_reg << 1;

  // Add the shifted product to tmp_reg
  tmp_reg = tmp_reg + product_reg;

  always @(posedge clk) begin
    // If a_reg is not 0, repeat the process until a_reg is 0
    if (a_reg > 0) begin
      // Shift a_abs and b_reg right by 1 bit
      a_reg = a_reg >> 1;
      b_reg = b_reg >> 1;

      // Calculate the product of the shifted values
      product_reg = a_reg * b_reg;

      // Shift product_reg left by 1 bit to align with a_reg and b_reg
      tmp_reg = product_reg << 1;

      // Add the shifted product to tmp_reg
      tmp_reg = tmp_reg + product_reg;
    end
  end
end

// Convert the result back to a signed number
assign result = a_neg ^ b_neg ? ~tmp_reg + 1'b1 : tmp_reg;

endmodule