module decoder(
  input [3:0] address,
  output reg [7:0] output,
  input enable,
  input reset,
  input clock
);

// This module implements a decoder using a case statement

// Declare a wire to hold the output of the decoder
wire [7:0] temp;

// Use a case statement to determine the output based on the address
always @ (address or enable) begin
  case (address)
    4'd0: temp = 8'b00000001; // If address is 0, output is 00000001
    4'd1: temp = 8'b00000010; // If address is 1, output is 00000010
    4'd2: temp = 8'b00000100; // If address is 2, output is 00000100
    4'd3: temp = 8'b00001000; // If address is 3, output is 00001000
    4'd4: temp = 8'b00010000; // If address is 4, output is 00010000
    4'd5: temp = 8'b00100000; // If address is 5, output is 00100000
    4'd6: temp = 8'b01000000; // If address is 6, output is 01000000
    4'd7: temp = 8'b10000000; // If address is 7, output is 10000000
    default: temp = 8'b00000000; // If address is any other value, output is 00000000
  endcase
end

// Use a clocked always block to update the output register
always @ (posedge clock or posedge reset) begin
  if (reset) begin // If reset is high, set output to 0
    output <= 8'b00000000;
  end else begin
    if (enable) begin // If enable is high, update output with the value from the case statement
      output <= temp;
    end
  end
end

endmodule