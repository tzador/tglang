// This is a module called "adder"
module adder(input [3:0] a, input [3:0] b, output [4:0] sum);

  // Declare internal wires
  wire [3:0] a_and_b;
  wire c0, c1, c2;

  // Use assign statement to perform bitwise AND
  assign a_and_b = a & b;

  // Instantiate the full adder module
  full_adder fa0(
    .a(a[0]),
    .b(b[0]),
    .c_in(1'b0), // Set carry-in to 0
    .sum(sum[0]),
    .c_out(c0)
  );

  // Instantiate the full adder module
  full_adder fa1(
    .a(a[1]),
    .b(b[1]),
    .c_in(c0), // Use carry from previous adder as input
    .sum(sum[1]),
    .c_out(c1)
  );

  // Instantiate the full adder module
  full_adder fa2(
    .a(a[2]),
    .b(b[2]),
    .c_in(c1), // Use carry from previous adder as input
    .sum(sum[2]),
    .c_out(c2)
  );

  // Instantiate the full adder module
  full_adder fa3(
    .a(a[3]),
    .b(b[3]),
    .c_in(c2), // Use carry from previous adder as input
    .sum(sum[3]),
    .c_out(sum[4]) // Last carry-out is assigned to 5th bit of sum
  );
endmodule

// This is a module called "full_adder"
module full_adder(input a, input b, input c_in, output sum, output c_out);

  // Define internal wires
  wire ab_xor, a_and_b, b_and_c, a_and_c;

  // Use assign statements to perform XOR and AND operations
  assign ab_xor = a ^ b;
  assign a_and_b = a & b;
  assign b_and_c = b & c_in;
  assign a_and_c = a & c_in;

  // Define output
  assign sum = ab_xor ^ c_in;
  assign c_out = a_and_b | b_and_c | a_and_c;
endmodule