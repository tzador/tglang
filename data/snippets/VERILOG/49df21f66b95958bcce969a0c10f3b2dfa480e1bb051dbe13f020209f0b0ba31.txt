/* Verilog code to implement a BCD to 7-segment display converter */

module BCDto7Seg(
    input [3:0] BCD_input,   // 4-bit input representing the BCD number
    output reg [6:0] Seg_output    // 7-bit output representing segments of 7-segment display
);

always @ (BCD_input) begin

    // Initializing all the segments to 0 by default
    Seg_output = 7'b0000000;

    // Using a case statement to define the output for each possible input combination
    case(BCD_input)

        4'b0000: Seg_output = 7'b1000000;   // Output '0' if input is 0
        4'b0001: Seg_output = 7'b1111001;   // Output '1' if input is 1
        4'b0010: Seg_output = 7'b0100100;   // Output '2' if input is 2
        4'b0011: Seg_output = 7'b0110000;   // Output '3' if input is 3
        4'b0100: Seg_output = 7'b0011001;   // Output '4' if input is 4
        4'b0101: Seg_output = 7'b0010010;   // Output '5' if input is 5
        4'b0110: Seg_output = 7'b0000010;   // Output '6' if input is 6
        4'b0111: Seg_output = 7'b1111000;   // Output '7' if input is 7
        4'b1000: Seg_output = 7'b0000000;   // Output '8' if input is 8
        4'b1001: Seg_output = 7'b0010000;   // Output '9' if input is 9
        4'b1010: Seg_output = 7'b0001000;   // Output 'A' if input is 10 (decimal)
        4'b1011: Seg_output = 7'b0000011;   // Output 'B' if input is 11 (decimal)
        4'b1100: Seg_output = 7'b1000110;   // Output 'C' if input is 12 (decimal)
        4'b1101: Seg_output = 7'b0100001;   // Output 'D' if input is 13 (decimal)
        4'b1110: Seg_output = 7'b0000110;   // Output 'E' if input is 14 (decimal)
        4'b1111: Seg_output = 7'b0001110;   // Output 'F' if input is 15 (decimal)

    endcase
end
endmodule

// To use this module, instantiate it in the main code and connect the inputs and outputs as per requirement
// For example:
/*
`include "BCDto7Seg.v"

module main(
    input [3:0] BCD_input,
    output [6:0] Seg_output
);

BCDto7Seg converter(
    .BCD_input(BCD_input),
    .Seg_output(Seg_output)
);
endmodule
*/