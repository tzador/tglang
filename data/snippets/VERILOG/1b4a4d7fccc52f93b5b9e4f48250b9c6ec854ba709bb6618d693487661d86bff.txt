// This module represents a 4-bit arithmetic logic unit (ALU)
module alu_4bit(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    input [2:0] ALU_OP, // 3-bit input for ALU operation selection
    output [3:0] out, // 4-bit output
    output zero, // output indicating if the result is zero
    output overflow // output indicating if the result overflows

    );

    // Internal wires for intermediate calculations
    wire [3:0] sum; // wire for storing sum of A and B
    wire [3:0] diff; // wire for storing difference between A and B
    wire [3:0] prod; // wire for storing product of A and B

    // Perform arithmetic and logic operations based on ALU_OP
    always @ (*) begin

        // Addition operation
        if (ALU_OP == 3'b000) begin
            sum = A + B; // calculate sum of A and B
            out = sum; // assign sum to output
        end

        // Subtraction operation
        else if (ALU_OP == 3'b001) begin
            diff = A - B; // calculate difference between A and B
            out = diff; // assign difference to output
        end

        // Multiplication operation
        else if (ALU_OP == 3'b010) begin
            prod = A * B; // calculate product of A and B
            out = prod; // assign product to output
        end

        // Bitwise AND operation
        else if (ALU_OP == 3'b011) begin
            out = A & B; // perform bitwise AND on A and B
        end

        // Bitwise OR operation
        else if (ALU_OP == 3'b100) begin
            out = A | B; // perform bitwise OR on A and B
        end

        // Bitwise XOR operation
        else if (ALU_OP == 3'b101) begin
            out = A ^ B; // perform bitwise XOR on A and B
        end

        // Logical shift left operation
        else if (ALU_OP == 3'b110) begin
            out = A << B; // perform logical shift left by B bits on A
        end

        // Logical shift right operation
        else if (ALU_OP == 3'b111) begin
            out = A >> B; // perform logical shift right by B bits on A
        end

    end

    // Check if result is zero
    assign zero = (out == 4'b0000) ? 1'b1 : 1'b0;

    // Check if result overflows
    assign overflow = (out[3] == 1 && B[3] == 1) ? 1'b1 : 1'b0;

endmodule