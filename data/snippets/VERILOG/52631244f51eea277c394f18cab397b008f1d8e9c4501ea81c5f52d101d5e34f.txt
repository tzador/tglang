/* This code snippet is an example of a Moore Finite State Machine in Verilog */

module FSM(

    input clk, // clock signal
    input rst, // reset signal
    input [1:0] in, // input signal with 2 bits
    output reg [1:0] out // output signal with 2 bits

    );

    // creating states using enum
    typedef enum logic [1:0] {S0, S1, S2} state;

    // defining current state and next state registers
    reg [1:0] current_state, next_state;

    // defining parameters for state transitions
    parameter [1:0] S0in = 2'b00; // required input for state S1
    parameter [1:0] S1in = 2'b01; // required input for state S2
    parameter [1:0] S2in = 2'b10; // required input for state S0

    // creating combinational logic
    always @(*) begin
        // default next state is current state
        next_state = current_state;

        // state transitions based on inputs
        case(current_state)
            S0: if(in == S0in)
                    next_state = S1;
                else if(in == S1in)
                    next_state = S2;
            S1: if(in == S1in)
                    next_state = S2;
                else if(in == S2in)
                    next_state = S0;
            S2: if(in == S0in)
                    next_state = S1;
                else if(in == S2in)
                    next_state = S0;
        endcase
    end

    // creating sequential logic
    always @(posedge clk, posedge rst) begin
        if(rst) // reset condition
            current_state <= S0;
        else // state update
            current_state <= next_state;
    end

    // assigning outputs based on current state
    always @(*) begin
        case(current_state)
            S0: out = 2'b00;
            S1: out = 2'b01;
            S2: out = 2'b10;
        endcase
    end

endmodule