// Declaring a 32-bit signed register
reg signed [31:0] my_reg;

// Initializing a 32-bit unsigned constant
parameter unsigned [31:0] my_const = 32'hABCD;

// Multiplexing using an always block
always @ (my_reg)
begin
	case (my_reg[2:0])
		3'b000: my_reg <= my_const;
		3'b001: my_reg <= my_reg + 1;
		3'b010: my_reg <= my_reg - 1;
		3'b011: my_reg <= my_reg * 2;
		3'b100: my_reg <= my_reg / 2;
		3'b101: my_reg <= my_reg | my_const;
		3'b110: my_reg <= my_reg ^ my_const;
		3'b111: my_reg <= my_reg & my_const;
	endcase
end

// Defining a counter with reset and enable inputs
module counter (
	input clk,
	input rst,
	input enable,
	output reg [7:0] count
);

always @ (posedge clk)
begin
	if (rst) count <= 8'h00;
	else if (enable) count <= count + 1;
end

endmodule

// Instantiating the counter module
counter my_counter(
	.clk(clock), // Clock input
	.rst(reset), // Reset input
	.enable(en), // Enable input
	.count(my_count) // Output count
);