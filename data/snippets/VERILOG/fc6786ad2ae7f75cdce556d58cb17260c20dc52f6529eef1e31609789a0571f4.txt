//module declaration
module adder (input clk, rst, [31:0] a, b, output [31:0] c);
  //internal signals
  wire [32:0] sum;
  
  //addition block with carry-in and carry-out
  always @ (posedge clk) begin
    if (rst) sum <= 0;
    else sum <= a + b + sum[32];
  end
  
  //assigning output
  assign c = sum[31:0];
endmodule

//testbench module
module testbench;
  //inputs with 50ns clock cycle
  reg clk = 0;
  reg rst = 0;
  reg [31:0] a, b;
  //outputs with 100ns clock cycle
  wire [31:0] c;
  
  //instantiating module
  adder inst (.clk(clk), .rst(rst), .a(a), .b(b), .c(c));
  
  //clock generation
  always #50 clk = ~clk;
  
  //initial block for input
  initial begin
    a = 10;
    b = 15;
    #100 rst = 1;
    #100 rst = 0;
  end
endmodule