//This is a multibit adder module 
module multibit_adder (input [7:0] a, input [7:0] b, input carry_in, output [7:0] sum, output carry_out); 

//defining internal signals for calculations 
wire [7:0] a_xor_b, a_and_b; 
wire [7:0] temp_sum; 

//defining the intermediate calculations 
assign a_xor_b = a ^ b; 
assign a_and_b = a & b; 

//half adder for calculating the first bit of sum 
wire [7:0] ha_sum; 
wire ha_carry; 
half_adder ha_xor_gate_1 (.a(a_xor_b[0]), .b(a_and_b[0]), .sum(temp_sum[0]), .carry(ha_carry)); 

//full adder for calculating the remaining 7 bits of sum 
wire [7:0] fa_sum; 
wire [7:0] fa_carry; 
full_adder fa_xor_gate_1 (.a(a_xor_b[1]), .b(a_and_b[1]), .carry_in(ha_carry), .sum(temp_sum[1]), .carry(fa_carry[0])); 

//cascade full adders for remaining bits 
for (i = 2; i <= 7; i = i + 1) begin 
    full_adder temp_fa (.a(a_xor_b[i]), .b(a_and_b[i]), .carry_in(fa_carry[i-2]), .sum(temp_sum[i]), .carry(fa_carry[i-1])); 
end 

//assigning the final sum and carry_out 
assign sum = temp_sum; 
assign carry_out = fa_carry[7]; 

endmodule