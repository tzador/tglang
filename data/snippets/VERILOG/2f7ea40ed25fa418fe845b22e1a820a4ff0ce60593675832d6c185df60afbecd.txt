/*
Module name: memory_controller
Purpose: Control and manage the flow of data between a master and a slave module in a memory system
*/

`timescale 1ns / 1ps
// `timescale directive specifies the simulation timescale, with 1ns as the unit of time and 1ps as the precision

module memory_controller(
    input clk, // input clock signal
    input rst_n, // asynchronous active-low reset signal
    input [7:0] addr, // input address bus with 8 bits
    input [7:0] wr_data, // input write data bus with 8 bits
    input [7:0] rd_data, // output read data bus with 8 bits
    input wr_en, // input write enable signal
    input rd_en, // input read enable signal
    input mem_sel, // input selector signal to choose between multiple memory modules
    output [7:0] mem_addr, // output address bus for memory module
    output [7:0] mem_wr_data, // output write data bus for memory module
    output [7:0] mem_rd_data // input read data bus for memory module
);

// defining internal signals for data and address buffers
wire [7:0] data_buffer;
reg [7:0] addr_buffer;

// defining a 2-dimensional array of registers to hold the data for multiple memory modules
reg [7:0] mem_data [0:10][0:1023];

// defining a register to hold the index for the selected memory module
reg [3:0] mem_index;

// synchronous reset logic
always @(posedge clk, negedge rst_n) begin
    if (!rst_n) begin // reset is active low
        addr_buffer <= 0;
    end else begin
        addr_buffer <= addr;
    end
end

// mux logic for selecting the memory module based on the mem_sel signal
always @(mem_sel) begin
    case (mem_sel)
        0: mem_index <= 0;
        1: mem_index <= 1;
        2: mem_index <= 2;
        3: mem_index <= 3;
        default: mem_index <= 0; // in case of any other value, default to first memory module
    endcase
end

// logic for writing data to the selected memory module
always @(posedge clk) begin
    if (wr_en && !rd_en) begin // write enable is high and read enable is low
        mem_data[mem_index][addr_buffer] <= wr_data;
    end
end

// logic for reading data from the selected memory module
always @(posedge clk) begin
    if (rd_en && !wr_en) begin // read enable is high and write enable is low
        data_buffer <= mem_data[mem_index][addr_buffer];
    end
end

// assigning output values
assign mem_addr = addr_buffer;
assign mem_wr_data = wr_data;
assign mem_rd_data = data_buffer;

endmodule