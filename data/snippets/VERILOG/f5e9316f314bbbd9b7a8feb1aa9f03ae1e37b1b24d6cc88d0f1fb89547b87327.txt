/*This is a code snippet in VERILOG that creates a 16-bit ALU*/

//module definition
module ALU(input [15:0] A, B, //16-bit inputs
        input [2:0] control, //control signal for operation selection
        output reg [15:0] out, //16-bit output
        output reg zero //flag for whether output is zero or not
    );

//internal wires and registers
wire [15:0] add_res; //temporary register for addition result
wire [15:0] sub_res; //temporary register for subtraction result
reg [15:0] and_res; //internal register for AND operation
reg [15:0] or_res; //internal register for OR operation

//control signals for selecting operations
wire add_enable = (control == 3'b000); //control signal for addition
wire sub_enable = (control == 3'b001); //control signal for subtraction
wire and_enable = (control == 3'b010); //control signal for logical AND
wire or_enable = (control == 3'b011); //control signal for logical OR

//arithmetic and logical operations
always @* begin
    //addition operation
    if(add_enable)
        out = A + B;
    //subtraction operation
    else if(sub_enable)
        out = A - B;
    //logical AND operation
    else if(and_enable)
        out = A & B;
    //logical OR operation
    else if(or_enable)
        out = A | B;
end

//zero flag check
always @* begin
    zero = (out == 16'b0000000000000000); //if output is zero, set flag to 1
end

endmodule //end of ALU module