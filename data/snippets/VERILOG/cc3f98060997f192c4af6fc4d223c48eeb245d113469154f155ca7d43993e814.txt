// Defining module
module MultiplyTwoNumbers(input [7:0] num1, num2, // input variables
			 output [15:0] result); // output variable

	// Defining internal signals
	reg [15:0] temp;
	wire [3:0] count;
	wire [15:0] accumulator;

	// Defining combinational logic for accumulator
	assign accumulator = temp + {result[15:8], 4'b0}; // takes the first 8 bits of result and shifts it 4 bits to the left, adding 4 bits of zeros

	// Defining sequential logic for multiplying two numbers
	always @(posedge clk) begin
		temp <= (num2[count]) ? (accumulator << 1) : accumulator; // if the current bit of num2 is 1, shift accumulator left by 1, otherwise leave it as is
		count <= count + 1; // increment count by 1
	end

	// Defining output logic
	assign result = temp;

endmodule