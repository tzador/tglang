// This is a test code for a finite state machine in Verilog

module FSM (input clk,             // clock signal
            input rst,             // reset signal
            input start,           // start signal
            output reg out);       // output signal

    // State definitions
    parameter S0 = 2'b00;       // initial state
    parameter S1 = 2'b01;       // intermediate state
    parameter S2 = 2'b10;       // final state

    // Registers for storing current and next states
    reg [1:0] current_state, next_state;

    // Instantiate always block for clock signal
    always @(posedge clk) begin

        // Reset the state to initial state when reset signal is high
        if (rst) begin
            current_state <= S0;
        end

        // Otherwise, change the state based on current and next state
        else begin
            current_state <= next_state;
        end
    end

    // Instantiate always block for input signals
    always @* begin
        case (current_state)
            S0: begin
                // Wait for start signal
                if (start) begin
                    // Sequential logic for intermediate state
                    next_state = S1;
                end
            end

            S1: begin
                // Sequential logic for final state
                next_state = S2;
            end

            S2: begin
                // Output the final state when the state reaches here
                out = 1'b1;
            end
        endcase
    end
endmodule