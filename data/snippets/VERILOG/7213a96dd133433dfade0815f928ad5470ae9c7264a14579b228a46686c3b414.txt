`timescale 1ns / 1ps             // include timescale for simulation

module mux4 (S, D, A, B, C, D); // declare module with inputs and outputs

input [3:0] S;                   // declare 4-bit input S
input [7:0] D;                   // declare 8-bit input D
output reg [7:0] Y;              // declare 8-bit output Y
// note: reg keyword declares a variable as a register type

always @ (S) begin              // begin always block - triggered on change of input S
  case (S)                      // begin case statement
    4'b0000 : Y = D[0];         // if S equals 0000, set Y equal to first bit of D
    4'b0001 : Y = D[1];         // if S equals 0001, set Y equal to second bit of D
    4'b0010 : Y = D[2];         // if S equals 0010, set Y equal to third bit of D
    4'b0011 : Y = D[3];         // if S equals 0011, set Y equal to fourth bit of D
    4'b0100 : Y = D[4];         // if S equals 0100, set Y equal to fifth bit of D
    4'b0101 : Y = D[5];         // if S equals 0101, set Y equal to sixth bit of D
    4'b0110 : Y = D[6];         // if S equals 0110, set Y equal to seventh bit of D
    4'b0111 : Y = D[7];         // if S equals 0111, set Y equal to eight bit of D
    4'b1000 : Y = 8'h00;        // if S equals 1000, set Y equal to 8-bit zero value
    default : Y = 8'h00;        // if S does not match any of the cases, set Y equal to 8-bit zero value
  endcase                       // end case statement
end                            // end always block 

endmodule                      // end module