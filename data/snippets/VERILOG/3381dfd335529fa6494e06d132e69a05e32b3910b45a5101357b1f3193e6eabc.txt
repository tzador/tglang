// Simple state machine
module state_machine(clock, reset, input, output);
    input clock, reset, input;
    output reg output;
    reg [1:0] state, next_state;
    
    // Declare states
    parameter STATE_A = 2'b00; // Initial state
    parameter STATE_B = 2'b01;
    parameter STATE_C = 2'b10;
    parameter STATE_D = 2'b11;

    // Initialize outputs
    initial begin
        state = STATE_A;
        output = 0;
    end

    // Sequential logic
    always@(posedge clock) begin
        if(reset) begin
            state <= STATE_A;
        end else begin
            state <= next_state;
        end
    end

    // Combinational logic
    always@(state, input) begin
        case(state)
            STATE_A: begin
                if(input) begin
                    // Transition to next state
                    next_state = STATE_B;
                end else begin
                    next_state = STATE_D;
                end
            end
            
            STATE_B: begin
                if(input) begin
                    next_state = STATE_C;
                end else begin
                    next_state = STATE_A;
                end
            end

            STATE_C: begin
                if(input) begin
                    next_state = STATE_D;
                end else begin
                    next_state = STATE_C;
                end
            end

            STATE_D: begin
                if(input) begin
                    next_state = STATE_A;
                end else begin
                    next_state = STATE_B;
                end
            end
        endcase
    end

    // Output logic
    always@(state) begin
        case(state)
            STATE_A: begin
                output = 0;
            end

            STATE_B: begin
                output = 1;
            end

            STATE_C: begin
                output = 1;
            end

            STATE_D: begin
                output = 0;
            end
        endcase
    end
endmodule