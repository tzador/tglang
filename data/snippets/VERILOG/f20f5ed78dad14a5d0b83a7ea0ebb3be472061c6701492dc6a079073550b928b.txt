// Module Declaration
module ALU(input signed [31:0] data1, data2, input [3:0] control,
          output reg [31:0] result, output wire zero_flag);

// Declare and assign internal signals
reg [31:0] temp;
wire [3:0] equal_control = 4'b0001;
wire [3:0] and_control   = 4'b0100;
wire [3:0] or_control    = 4'b0101;
wire [3:0] add_control   = 4'b0110;
wire [3:0] sub_control   = 4'b1011;
wire [3:0] slt_control  = 4'b0111;

// Use case statement to implement logic based on control inputs
always @(*) begin
    case(control)
        4'b0000: temp = data1; // Pass input data1 as result
        equal_control: temp = (data1==data2); // Check for equality
        and_control: temp = (data1 & data2); // bitwise AND
        or_control: temp = (data1 | data2); // bitwise OR
        add_control: temp = (data1 + data2); // Addition
        sub_control: temp = (data1 - data2); // Subtraction
        slt_control: temp = (data1 < data2); // Set less than flag
        default: temp = 32'b0; // Default value if control not specified
    endcase
end

// Assign result and zero flag outputs
assign result = temp;
assign zero_flag = (temp == 0);

endmodule // End of module