//This code snippet uses the VERILOG programming language to implement a 4x4 multiplier module

module multiplier_4x4(input [3:0] a, b, output [7:0] c);
	reg [7:0] c; //register for storing the result

	always @(a or b) begin //sensitivity list for update of c
		case({a,b}) //use a, b as a 2-bit concatenation
			4'd0: c = 8'd0; //result is 0 if both a and b are 0
			4'd1: c = 8'd0 + a; //result is a if only a[0] is 1
			4'd2: c = 8'd0 + a[1:0]; //result is a*2 if only a[1] is 1
			4'd3: c = 8'd0 + a[2:0]; //result is a*4 if only a[2] is 1
			4'd4: c = 8'd0 + a[3:0]; //result is a*8 if only a[3] is 1
			4'd5: c = 8'd0 + a[4:0]; //result is a*16 if only a[4] is 1
			4'd6: c = 8'd0 + a[5:0]; //result is a*32 if only a[5] is 1
			4'd7: c = 8'd0 + a[6:0]; //result is a*64 if only a[6] is 1
			4'd8: c = 8'd0 + a[7:0]; //result is a*128 if only a[7] is 1
			4'd9: c = 8'd0 + a[8:0]; //result is a*256 if only a[8] is 1
			default: c = 8'd0; //if none of the above cases match, result is 0
		endcase
	end
endmodule