// Define assigns the input and output signals
module myModule(
    input logic [3:0] data_in,
    input logic clk,
    output logic [4:0] data_out
);

// Declare internal variables
logic [4:0] temp_data;
logic [3:0] counter;

// Instantiate a D flip flop with reset
reg [4:0] q;
always_ff @(posedge clk) begin
    if (reset) begin
        q <= 0;
    end else begin
        q <= data_in;
    end
end

// Instantiate 4-bit adder
adder4 adder_inst(
    .a(data_in),
    .b(counter),
    .sum(temp_data)
);

// Instantiate 1-bit adder and connect to LSB of temp_data
adder1 adder1_inst(
    .a(temp_data[0]),
    .b(q[4]),
    .sum(q[0])
);

// Declare output register
always_ff @(posedge clk) begin
    data_out <= q;
end

// Increment counter and reset on overflow
always_comb begin
    counter = counter + 1'b1;
    if (counter == 16) begin
        counter = 0;
    end
end

endmodule