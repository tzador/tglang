/* This is an example of a complex code snippet in Verilog.
   It includes several modules, always blocks, and logic gates.
   The output of this code snippet cannot be determined without a testbench simulation.
   
   MODULE definition:
   This module defines a basic adder with two 4-bit inputs and a 5-bit output.
   
   Inputs:
   A - 4-bit input
   B - 4-bit input
   
   Outputs:
   C - 5-bit output
   
   LOGIC DEFINITION:
   The output C is defined as the sum of A and B, using a ripple carry adder.
   
   ALWAYSBLOCK:
   The always block defines the functionality of the ripple carry adder, including the carry in and out.
   
   Testbench:
   This code snippet does not include a testbench, so the inputs and output values are not defined.
*/

// MODULE definition:
module Adder_4bit(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    output [4:0] C // 5-bit output C
);

// LOGIC DEFINITION:
assign C = A + B; // C is equal to the sum of A and B

// ALWAYSBLOCK:
always @(*) begin
    for (int i = 0; i < 4; i = i+1) begin
        // Use a ripple carry adder to calculate the sum
        // Carry in is set to 0 for the first bit
        // Carry out is assigned to C[4], the 5th bit of the output
        ripplecarryadder( A[i], B[i], carryin, sum, carryout );
    end
end

// END OF MODULE
endmodule

// SUBMODULE definition for ripple carry adder:
module ripplecarryadder(
    input [3:0] A, // 4-bit input A
    input [3:0] B, // 4-bit input B
    input carryin, // Carry in from the previous bit
    output [3:0] sum, // 4-bit output sum
    output carryout // Carry out to the next bit
);

// Declare internal signals for the full adder gates
// The carry in is connected to the internal carry signal
wire carry, c1, c2, c3;

// Full adder 1: Cout = (A xor B) xor carryin
// Sum = A xor B
// Cout = A and B or (A xor B) and carryin
// Internal carry = (A and B) or (carryin and (A xor B))
fulladder fa1(.a(A[0]), .b(B[0]), .cin(carryin), .sum(sum[0]), .cout(c1), .internalcarry(carry));

/* Full adder 2 and 3 use similar logic as full adder 1, but with different inputs and outputs */
fulladder fa2(.a(A[1]), .b(B[1]), .cin(c1), .sum(sum[1]), .cout(c2), .internalcarry(c3));
fulladder fa3(.a(A[2]), .b(B[2]), .cin(c2), .sum(sum[2]), .cout(carry), .internalcarry(c1));
fulladder fa4(.a(A[3]), .b(B[3]), .cin(c3), .sum(sum[3]), .cout(carryout), .internalcarry(c2));

// END OF SUBMODULE
endmodule