// This module implements a 4-bit ripple carry adder using Verilog

module ripple_carry_adder (input [3:0] a, b, // 4-bit inputs
                           input cin,          // carry-in input
                           output [3:0] sum,    // 4-bit output
                           output cout);        // carry-out output
                           
    // Define internal nets for full adders
    wire f1, f2, f3;
    
    // Instantiate full adders and connect inputs and outputs
    full_adder fa1 (.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]), .cout(f1));
    full_adder fa2 (.a(a[1]), .b(b[1]), .cin(f1), .sum(sum[1]), .cout(f2));
    full_adder fa3 (.a(a[2]), .b(b[2]), .cin(f2), .sum(sum[2]), .cout(f3));
    full_adder fa4 (.a(a[3]), .b(b[3]), .cin(f3), .sum(sum[3]), .cout(cout));
    
endmodule

// Define a 1-bit full adder module
module full_adder (input a, b, cin,
                   output sum, cout);
                   
    // Internal nets for Adder
    wire a_xor_b, a_and_b, a_and_b_and_cin;
    
    // Define logic equations
    assign a_xor_b = a ^ b;
    assign a_and_b = a & b;
    assign a_and_b_and_cin = a_and_b & cin;
    
    // Define output equations
    assign sum = a_xor_b ^ cin;
    assign cout = a_and_b_and_cin | a_and_b | a_xor_b;
    
endmodule