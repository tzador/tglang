module ALU(input [7:0] A, B, input [2:0] OP, output [7:0] result, output carry, output zero); // module declaration
	reg [7:0] sum; // register declaration
	reg carry; // register declaration
	wire [3:0] A2; // wire declaration
	assign A2 = {A, 0}; // adding 0 to A to make it 8 bits
	always @(*) begin // combinational always block
		case (OP) // case statement for different operations
			3'b000: sum = A2 + B; // addition
			3'b001: sum = A2 - B; // subtraction
			3'b010: sum = A2 & B; // bitwise AND
			3'b011: sum = A2 | B; // bitwise OR
			3'b100: sum = A2 ^ B; // bitwise XOR
			3'b101: sum = ~A2; // bitwise NOT
			3'b110: sum = (A2 > B) ? 1 : 0; // greater than comparison
			3'b111: sum = (A2 < B) ? 1 : 0; // less than comparison
		endcase
		carry = sum[8]; // assigning carry output
		if (sum == 0) // checking for zero output
			zero = 1;
		else
			zero = 0;
	end
	assign result = sum[7:0]; // assigning result output
endmodule