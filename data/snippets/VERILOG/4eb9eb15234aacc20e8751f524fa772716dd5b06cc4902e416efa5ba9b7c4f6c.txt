//Verilog code for an 8-bit register with load and clr function

//Define module with input, output and internal signals
module register_8bit(
    input clk,  //Clock signal
    input load, //Load signal
    input clr,  //Clear signal
    input [7:0] data_in, //Input data
    output reg [7:0] data_out //Output data
    );

    reg [7:0] reg_data; //Internal register for storing data

    //Synchronous load function
    always @(posedge clk) begin
        if(load) begin //Check if load signal is active
            reg_data <= data_in; //Load input data into register
        end
    end

    //Asynchronous clear function
    always @(*) begin
        if(clr) begin //Check if clear signal is active
            reg_data <= 8'b0; //Clear register by setting all bits to 0
        end
    end

    //Assign output as the value of internal register
    assign data_out = reg_data;

endmodule