// This module implements a finite state machine to control a washing machine

module washing_machine(   // Module declaration with ports
  input start_btn,        // Input for start button
  input pause_btn,        // Input for pause button
  input reset_btn,        // Input for reset button
  output wire on_off,     // Output for power to machine
  output reg [1:0] leds,  // Output for LED display
  output wire motor,      // Output for motor control
  output wire valve       // Output for water valve control
);

reg [2:0] state;          // Registers for current state of machine

parameter OFF = 0, READY = 1, RUNNING = 2, PAUSED = 3;  // Parameters for states

always @(posedge start_btn or negedge reset_btn) begin  // State change logic
  if (reset_btn === 0) begin
    state <= OFF;
  end else if (start_btn === 1 && state == OFF) begin
    state <= READY;
  end else if (start_btn === 0 && pause_btn === 1) begin
    state <= PAUSED;
  end else if (start_btn === 1 && state === PAUSED) begin
    state <= RUNNING;
  end else if (start_btn === 0 && pause_btn === 0 && state === RUNNING) begin
    state <= READY;
  end
end

always @(state) begin  // Output logic for power and LED display
  case(state)
    OFF: begin
      on_off <= 0;
      leds <= 0;  
    end
    READY: begin
      on_off <= 1;
      leds <= 2'b01;
    end
    RUNNING: begin
      on_off <= 1;
      leds <= 2'b10;
    end
    PAUSED: begin
      on_off <= 1;
      leds <= 2'b11;
    end
  endcase
end

assign motor = (state === RUNNING) ? 1 : 0;    // Motor control assignment
assign valve = (state === RUNNING) ? 1 : 0;    // Water valve control assignment

endmodule  // End of module declaration