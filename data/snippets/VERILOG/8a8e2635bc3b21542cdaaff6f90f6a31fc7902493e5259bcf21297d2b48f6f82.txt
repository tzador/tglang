// Register File Module

module register_file (
    input clk,
    input reset,
    input [4:0] rdAddr1, // read address 1
    input [4:0] rdAddr2, // read address 2
    input [4:0] wrAddr, // write address
    input [31:0] data_in, // data to be written
    input write_enable, // enable signal for writing
    output [31:0] data_out1, // data read from first address
    output [31:0] data_out2 // data read from second address
    );

    /* Register declarations */
    reg [31:0] r0; // register 0
    reg [31:0] r1; // register 1
    reg [31:0] r2; // register 2
    reg [31:0] r3; // register 3
    reg [31:0] r4; // register 4
    reg [31:0] r5; // register 5
    reg [31:0] r6; // register 6
    reg [31:0] r7; // register 7
    reg [31:0] r8; // register 8
    reg [31:0] r9; // register 9
    
    // write enable logic
    always @(posedge clk) begin
        if (reset) begin // reset all registers to 0
            r0 <= 0;
            r1 <= 0;
            r2 <= 0;
            r3 <= 0;
            r4 <= 0;
            r5 <= 0;
            r6 <= 0;
            r7 <= 0;
            r8 <= 0;
            r9 <= 0;
        end else if (write_enable) begin // check for write enable signal
            case (wrAddr) // write data to appropriate register
                5'b00000 : r0 <= data_in;
                5'b00001 : r1 <= data_in;
                5'b00010 : r2 <= data_in;
                5'b00011 : r3 <= data_in;
                5'b00100 : r4 <= data_in;
                5'b00101 : r5 <= data_in;
                5'b00110 : r6 <= data_in;
                5'b00111 : r7 <= data_in;
                5'b01000 : r8 <= data_in;
                5'b01001 : r9 <= data_in;
                default : $display("Invalid register address."); // error if address is out of range
            endcase
        end
    end
    
    // read logic
    assign data_out1 = (rdAddr1 == 0) ? 0 : (rdAddr1 == 1) ? r1 :
                       (rdAddr1 == 2) ? r2 : (rdAddr1 == 3) ? r3 :
                       (rdAddr1 == 4) ? r4 : (rdAddr1 == 5) ? r5 :
                       (rdAddr1 == 6) ? r6 : (rdAddr1 == 7) ? r7 :
                       (rdAddr1 == 8) ? r8 : (rdAddr1 == 9) ? r9 : 0; // read data from first address, return 0 if address is 0
    assign data_out2 = (rdAddr2 == 0) ? 0 : (rdAddr2 == 1) ? r1 :
                       (rdAddr2 == 2) ? r2 : (rdAddr2 == 3) ? r3 :
                       (rdAddr2 == 4) ? r4 : (rdAddr2 == 5) ? r5 :
                       (rdAddr2 == 6) ? r6 : (rdAddr2 == 7) ? r7 :
                       (rdAddr2 == 8) ? r8 : (rdAddr2 == 9) ? r9 : 0; // read data from second address, return 0 if address is 0

endmodule