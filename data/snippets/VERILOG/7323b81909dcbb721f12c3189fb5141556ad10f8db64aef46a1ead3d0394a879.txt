// Define module with input, output, and internal wires
module multiplication(
  input [31:0] A, // 32-bit input A
  input [31:0] B, // 32-bit input B
  output [63:0] product // 64-bit output product
);
  
  // Define internal wires for holding intermediate results
  wire [63:0] temp_result1;
  wire [63:0] temp_result2;
  wire [63:0] temp_result3;
  
  // Perform multiplication using simple shift-add algorithm
  assign temp_result1 = A * B; // Multiply A and B and store result in temp_result1
  
  // Perform addition with zero-extended inputs
  assign temp_result2 = {A, 32'b0} + {32'b0, B}; // Left shift A by 32 bits and add it with zero-extended B
  assign temp_result3 = {32'b0, A} + {B, 32'b0}; // Left shift B by 32 bits and add it with zero-extended A
  
  // Check for overflow and select appropriate result
  always @* begin
    if (temp_result1 > {32'b0, temp_result2[63:32]}) begin // Check if temp_result1 is greater than temp_result2 with sign-extension
      product = temp_result1; // If temp_result1 is greater, assign it as product
    end else begin
      product = {32'b0, temp_result2[63:32]}; // Else assign temp_result2 as product with sign-extension
    end
  end
  
endmodule // End module multiplication