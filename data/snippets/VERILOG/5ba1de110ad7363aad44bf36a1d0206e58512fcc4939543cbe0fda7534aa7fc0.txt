// Defining a module
module counter(
    input clk, // input clock signal
    input rst, // input reset signal
    input incr, // input increment signal
    input decr, // input decrement signal
    input [3:0] val, // input value to be incremented or decremented
    output reg [3:0] count // output count value
);

// Defining internal signals
reg [3:0] temp_count; // temporary register to store count value

// Defining clock logic
always @(posedge clk)
begin
    // Reset logic
    if(rst)
        begin
            count <= 0; // resetting count value to 0
            temp_count <= 0; // resetting temporary register
        end

    // Increment logic
    else if(incr)
        begin
            temp_count <= count + 1; // increasing temporary count value by 1
        end

    // Decrement logic
    else if(decr)
        begin
            temp_count <= count - 1; // decreasing temporary count value by 1
        end
end

// Assigning output
assign count = (val == 4'b1111)? 0 : temp_count; // if input value reaches max (15), output 0

endmodule