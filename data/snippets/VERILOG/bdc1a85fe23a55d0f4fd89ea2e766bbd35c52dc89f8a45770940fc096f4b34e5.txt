// Example code showing hierarchical structure in Verilog

module top_module (
  input clk,
  input rst_n,
  output [7:0] data,
  output ready
);

  // Instantiate child modules
  child_module child_inst (
    .clk(clk),
    .rst_n(rst_n),
    .data(data),
    .ready(ready)
  );

  // Define internal signal
  reg [7:0] internal_data;

  // Define internal logic
  always @ (posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      internal_data <= 0;
    end else begin
      internal_data <= internal_data + 1;
    end
  end

  // Assign internal signal to output signal
  assign data = internal_data;

endmodule

module child_module (
  input clk,
  input rst_n,
  output [7:0] data,
  output ready
);

  // Define internal signals
  reg [7:0] internal_data;
  reg internal_ready;

  // Define internal logic
  always @ (posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      internal_data <= 0;
      internal_ready <= 0;
    end else begin
      internal_data <= data;
      internal_ready <= 1;
    end
  end

  // Assign internal signals to outputs
  assign data = internal_data;
  assign ready = internal_ready;

endmodule