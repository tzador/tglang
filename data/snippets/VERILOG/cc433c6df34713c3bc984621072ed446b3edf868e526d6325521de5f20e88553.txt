// This code snippet is a combinational circuit that implements the Exclusive OR (XOR) function
module XOR_gate(
    //input ports
    input A,
    input B,

    //output ports
    output reg Y
);

//combinational statement for XOR function
always @*
    Y = A ^ B;  //A XOR B

endmodule

//Testbench code for XOR_gate module
module XOR_gate_tb;

    //input ports for testbench
    reg A;
    reg B;

    //output port
    wire Y;

    //instantiate XOR_gate module
    XOR_gate uut(
        .A(A),
        .B(B),
        .Y(Y)
    );

    //clock signal
    reg clk = 1;
    always #5 clk = ~clk; //toggle clock signal with period of 5 units

    //testcases
    initial begin
        //testcase 1: A and B are both 0
        A = 0;
        B = 0;
        #10 $display("A = %b, B = %b, Y = %b", A, B, Y);
        //expected output: Y = 0 (A XOR B)

        //testcase 2: A is 1, B is 0
        A = 1;
        B = 0;
        #10 $display("A = %b, B = %b, Y = %b", A, B, Y);
        //expected output: Y = 1 (A XOR B)

        //testcase 3: A is 0, B is 1
        A = 0;
        B = 1;
        #10 $display("A = %b, B = %b, Y = %b", A, B, Y);
        //expected output: Y = 1 (A XOR B)

        //testcase 4: A and B are both 1
        A = 1;
        B = 1;
        #10 $display("A = %b, B = %b, Y = %b", A, B, Y);
        //expected output: Y = 0 (A XOR B)
    end

endmodule