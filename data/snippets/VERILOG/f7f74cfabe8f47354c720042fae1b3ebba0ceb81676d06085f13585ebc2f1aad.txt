module multiplier(input reg [3:0] A, B,
                  output [7:0] result);
  // This module multiplies two 4-bit numbers, A and B, and outputs an 8-bit result 
  // using the shift-and-add algorithm 
  // Declare a wire for the intermediate sum and a register for the final result 
  wire [7:0] temp_sum;
  reg [7:0] final_result;
  
  // Parameterize the number of iterations based on the bit widths of A and B
  // This will ensure the proper number of shifts and adds are performed
  parameter iterations = A + B + 1; 
  
  // Create a for loop to iterate through each bit of B, starting from the least significant bit
  // Each iteration, the bits of A will be shifted and added to the sum if the corresponding bit of B is 1
  // At the end of the loop, the final result will be stored in the result register
  for (i = 0; i < iterations; i = i + 1) begin
    if (B[i] == 1) begin
      temp_sum = temp_sum + (A << i); 
    end
  end
  
  // Assign the final result to the output port
  assign result = temp_sum;
endmodule