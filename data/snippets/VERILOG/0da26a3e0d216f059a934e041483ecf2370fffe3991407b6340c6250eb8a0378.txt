// This module is a programmable logic device that functions as a shift register
// with parallel load and clear controls.

module shift_register(input clock, input reset, input load, input clear, input data_in,
                      output reg [7:0] data_out);

  reg [7:0] register [0:255]; // 8-bit register array with 256 elements
  reg [7:0] parallel_load_data; // 8-bit data input for parallel load
  reg [7:0] shift_data; // 8-bit data input for shift operation
  reg [7:0] shift_out; // 8-bit data output for shift operation

  initial // initialize the shift register on reset
    begin
      for (int i = 0; i < 256; i = i + 1) begin // loop through each element in the register
        register[i] = 8'h00; // initialize all elements to 8-bit zeros
      end
    end

  always @(posedge clock) begin // execute on the positive edge of the clock signal
    if (reset) begin // reset control
      for (int i = 0; i < 256; i = i + 1) begin // loop through each element in the register
        register[i] <= 8'h00; // set all elements to 8-bit zeros
      end
    end
    else begin // if not on reset, perform shift or parallel load operation
      if (load) begin // parallel load control
        parallel_load_data <= data_in; // load data from data input into parallel load data
        for (int i = 0; i < 256; i = i + 1) begin // loop through each element in the register
          register[i] <= parallel_load_data; // load parallel load data into each element
        end
      end
      else if (clear) begin // clear control
        for (int i = 0; i < 256; i = i + 1) begin // loop through each element in the register
          register[i] <= 8'h00; // set all elements to 8-bit zeros
        end
      end
      else begin // shift control
        for (int i = 0; i < 256; i = i + 1) begin // loop through each element in the register
          shift_data <= register[i]; // store current element in shift data
          register[i] <= shift_out; // set current element to previous element's value
          shift_out <= shift_data; // update shift out to previous element's value
        end
      end
    end
  end

  assign data_out = shift_out; // output data is equal to shift out data

endmodule