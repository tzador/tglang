// Register with enable and asynchronous reset
module register (
input clk, // clock input
input en, // enable input
input rst, // reset input
input [7:0] d, // data input
output reg [7:0] q // output
);
always @ (posedge clk, posedge rst) begin
	if(rst) // reset
		q <= 0;
	else if(en) // enable
		q <= d;
end
endmodule

// Counter with clock enable and synchronous reset
module counter (
input clk, // clock input
input ce, // clock enable input
input rst, // reset input
output [3:0] count // output
);
reg [3:0] count_reg;
always @ (posedge clk or posedge rst) begin
	if(rst) // reset
		count_reg <= 0;
	else if(ce) // clock enable
		count_reg <= count_reg + 1;
end
assign count = count_reg; // assign output to the count register
endmodule

// Multiplexer using conditional assignment
module mux (
input select, // select input
input [7:0] a, // first input
input [7:0] b, // second input
output reg [7:0] c // output
);
always @ (select or a or b) begin
	if(select) // if select is 1
		c <= b; // assign b to c
	else // if select is 0
		c <= a; // assign a to c
end
endmodule