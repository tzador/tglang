// This module implements a 4-bit ripple carry adder

module ripple_carry_adder(
    A, // input port representing first operand
    B, // input port representing second operand
    Cin, // input port representing carry-in
    S, // output port representing sum
    Cout // output port representing carry-out
    );

    input [3:0] A;
    input [3:0] B;
    input Cin;
    output [3:0] S;
    output Cout;
    
    wire [3:0] sum1; // represents the result of adding the 0th bits of A and B
    wire [3:0] sum2; // represents the result of adding the 1st bits of A and B
    wire [3:0] sum3; // represents the result of adding the 2nd bits of A and B
    wire [3:0] sum4; // represents the result of adding the 3rd bits of A and B
    
    // calculates the 0th bit of the sum 
    full_adder fa0(sum1[0], A[0], B[0], Cin); 
    
    // calculates the 1st bit of the sum
    full_adder fa1(sum2[1], A[1], B[1], fa0[1]); 
    
    // calculates the 2nd bit of the sum
    full_adder fa2(sum3[2], A[2], B[2], fa1[2]); 
    
    // calculates the 3rd bit of the sum
    full_adder fa3(sum4[3], A[3], B[3], fa2[3]); 
    
    // assigns the final sum output
    assign S = {sum4[3], sum3[2], sum2[1], sum1[0]}; 
    
    // calculates the carry-out
    assign Cout = fa3[3]; 
    
endmodule

// This module implements a full adder

module full_adder(
    S, // output port representing sum
    A, // input port representing first operand
    B, // input port representing second operand
    Cin // input port representing carry-in
    );

    output S;
    input A;
    input B;
    input Cin;
    
    // calculates the sum
    assign S = A ^ B ^ Cin; 
    
    // calculates the carry-out
    assign Cout = (A & B) | (A & Cin) | (B & Cin); 
    
endmodule