//Defining module
module adder (input [3:0] a, b, output [4:0] sum, output c_out);
//Defining internal wires
wire [4:0] temp;
wire [3:0] temp_carry;
//4-bit ripple carry adder
ripple_carry_adder rca(.a(a), .b(b), .sum(temp), .c_out(temp_carry));
//Sum of bits
assign sum = temp;
//Carry out
assign c_out = temp_carry[3];
endmodule

//Defining module
module ripple_carry_adder(input [3:0] a, b, output [4:0] sum, output c_out);
//Internal wires
wire [4:0] temp;
//Full adder instances for each bit
full_adder fa0(.a(a[0]), .b(b[0]), .c_in({1'b0, c_out[0]}), .sum(sum[0]), .c_out(temp[0]));
full_adder fa1(.a(a[1]), .b(b[1]), .c_in(temp[0]), .sum(sum[1]), .c_out(temp[1]));
full_adder fa2(.a(a[2]), .b(b[2]), .c_in(temp[1]), .sum(sum[2]), .c_out(temp[2]));
full_adder fa3(.a(a[3]), .b(b[3]), .c_in(temp[2]), .sum(sum[3]), .c_out(temp[3]));
full_adder fa4(.a(temp[3]), .b(c_out), .c_in(temp[3]), .sum(sum[4]), .c_out(c_out));
endmodule

//Defining module
module full_adder(input a, b, c_in, output sum, c_out);
//Intermediate wires for logic
wire s0;
wire s1;
//Internal gates
and a1and (s0, a, b);
and a2and (s1, a, c_in);
and a3and (s2, b, c_in);
or o1or(sum, s0, s1, s2);
or o2or(c_out, a, b, c_in);
endmodule