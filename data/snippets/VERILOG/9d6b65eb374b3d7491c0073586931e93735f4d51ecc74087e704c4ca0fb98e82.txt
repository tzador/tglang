/* This is a code snippet for a Finite State Machine implementation in VERILOG */// STARTING WITH DEFINING OUR INPUTS AND OUTPUTS
input logic clk;
input logic reset;
input logic start;
input logic [7:0] data_in;
output logic done;
output logic [3:0] state;// DECLARE REGISTERS FOR HOLDING CURRENT STATE AND NEXT STATElogic [3:0] current_state;
logic [3:0] next_state;// DEFINE OUR STATES AS PARAMETERS
parameter S_IDLE = 4'b0000;
parameter S_WAIT = 4'b0001;
parameter S_PROCESS = 4'b0010;
parameter S_FINISH = 4'b0011;// USE CASE STATEMENTS TO DEFINE TRANSITIONS AND OUTPUTS
always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S_IDLE;
    end else begin
        case(current_state)
            S_IDLE: begin
                if (start) begin
                    next_state <= S_WAIT;
                end else begin
                    next_state <= S_IDLE;
                end
                done    <= 1'b0;
                state   <= S_IDLE;
            end
            S_WAIT: begin
                if (data_in == 8'hFF) begin
                    next_state <= S_PROCESS;
                end else begin
                    next_state <= S_WAIT;
                end
                done    <= 1'b0;
                state   <= S_WAIT;
            end
            S_PROCESS: begin
                next_state <= S_FINISH;
                done    <= 1'b1;
                state   <= S_PROCESS;
            end
            S_FINISH: begin
                next_state <= S_IDLE;
                done    <= 1'b0;
                state   <= S_FINISH;
            end
        endcase
    end
end// SET CURRENT STATE TO NEXT STATE AT EVERY CLOCK CYCLE
always_comb begin
    current_state = next_state;
end