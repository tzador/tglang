// Declare an 8-bit signed register
reg signed [7:0] my_register;

// Declare a 16-bit unsigned wire
wire [15:0] my_wire;

// Specify a parameter for a 4-to-1 multiplexer
parameter MUX_WIDTH = 4;

// Define the mux module
module mux(
    input [MUX_WIDTH-1:0] select,
    input [3:0] input1,
    input [3:0] input2,
    input [3:0] input3,
    input [3:0] input4,
    output reg [3:0] output
);
    always @*
    begin
        case(select) // Use case statement to select input based on select value
            0: output = input1;
            1: output = input2;
            2: output = input3;
            3: output = input4;
            default: output = 4'b0; // If select value is not 0,1,2,or 3, output default value of 0000
        endcase
    end
endmodule

// Instantiate the mux module
mux mux_inst(
    .select(select_signal), // Connect select input to a signal called select_signal
    .input1(input1_signal), // Connect input1 to a signal called input1_signal
    .input2(input2_signal), // Connect input2 to a signal called input2_signal
    .input3(input3_signal), // Connect input3 to a signal called input3_signal
    .input4(input4_signal), // Connect input4 to a signal called input4_signal
    .output(output_signal) // Connect output to a signal called output_signal
);