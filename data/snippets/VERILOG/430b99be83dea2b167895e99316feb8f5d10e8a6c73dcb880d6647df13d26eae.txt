//This is a code snippet in VERILOG that models a 4-bit ripple carry adder module
//
`timescale 1ns/1ps
module ripple_carry_adder(
    input [3:0] a, b, //input 4-bit numbers a and b
    input cin, //input carry in
    output [3:0] sum, //output 4-bit sum
    output cout //output carry out
    );
    
    wire [3:0] s; //internal wires for the sum bits
    wire p, g; //internal wires for the propagate and generate signals
    
    assign p = a & b; //calculate the propagate signal
    assign g = a | b; //calculate the generate signal
    
    assign s[0] = p[0] ^ cin; //calculate the sum bit for the least significant bit position
    assign cout = g[0] | (p[0] & cin); //calculate the carry out bit
    //For the rest of the bits, use a for loop
    genvar i;
    generate
        for(i = 1; i < 4; i = i + 1) begin: loop 
            assign s[i] = p[i] ^ (cin & g[i-1]) ^ (s[i-1] & p[i-1]); //calculate the sum bit
            assign cout = g[i] | (p[i] & s[i-1]) | (s[i-1] & p[i-1]); //calculate the carry out bit
        end
    endgenerate
    
    assign sum = s; //assign the internal wires to the output sum wire
    
endmodule