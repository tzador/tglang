module fsm(in, clk, reset, out); 
    // Define input, clock, reset, and output signals 
    input in; 
    input clk; 
    input reset; 
    output out; 
 
    // Define states as enum 
    typedef enum [1:0] {S0, S1, S2, S3, S4} states; 
 
    // Define register for state 
    reg [1:0] current_state; 
 
    // Define combinational logic for next state 
    always @ (posedge clk or posedge reset) begin 
        if (reset) 
            current_state <= S0; 
        else if (current_state == S0 && in) 
            current_state <= S1; 
        else if (current_state == S1 && in) 
            current_state <= S2; 
        else if (current_state == S2 && !in) 
            current_state <= S3; 
        else if (current_state == S3 && in) 
            current_state <= S4; 
        else if (current_state == S4 && !in) 
            current_state <= S0; 
    end 
 
    // Define combinational logic for output 
    always @ (*) begin 
        case(current_state) 
            S0: out = 0; 
            S1: out = 1; 
            S2: out = 0; 
            S3: out = 1; 
            S4: out = 0; 
        endcase 
    end 
endmodule