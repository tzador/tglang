// This code snippet is a finite state machine in Verilog that detects a sequence of inputs and outputs a corresponding sequence of outputs.

module FSM (
    input clk, // clock input
    input reset, // reset input
    input in, // input
    output reg out // output
);

// defining states using parameters
parameter state1 = 2'b00;
parameter state2 = 2'b01;
parameter state3 = 2'b10;
parameter state4 = 2'b11;

// defining the state register
reg [1:0] state_reg;
// initial value for state register
initial state_reg = state1;

// always block to check for input transitions and compute output
always @ (posedge clk or posedge reset) begin
    if(reset) begin
        state_reg <= state1;
        out <= 0;
    end
    else begin
        case(state_reg)
            state1: begin
                if(in == 1)
                    state_reg <= state2;
                else
                    state_reg <= state1;
                out <= 0;
            end
            state2: begin
                if(in == 0)
                    state_reg <= state3;
                else
                    state_reg <= state2;
                out <= 0;
            end
            state3: begin
                if(in == 1)
                    state_reg <= state4;
                else
                    state_reg <= state3;
                out <= 0;
            end
            state4: begin
                if(in == 0)
                    state_reg <= state1;
                else
                    state_reg <= state4;
                out <= 1;
            end
        endcase
    end
end

endmodule