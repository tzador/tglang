// This is a simple two-bit counter in VERILOG
// This counter counts from 0 to 3 and then resets to 0

// Declare input and output ports
module counter(
  input wire clk, // clk input for clock signal
  output reg [1:0] count // 2-bit output for counter
);

// Declare reg variables for counter
reg [1:0] curr_count, next_count; // current and next count values

// Sequential logic implementation
always @(posedge clk) begin
  next_count <= curr_count + 1; // increment next count by 1
end

// Combinational logic implementation
always @(*) begin
  case (curr_count)
    0: begin
      count[1:0] = 2'b00; // when count is 0, output 00
    end
    1: begin
      count[1:0] = 2'b01; // when count is 1, output 01
    end
    2: begin
      count[1:0] = 2'b10; // when count is 2, output 10
    end
    3: begin
      count[1:0] = 2'b11; // when count is 3, output 11
    end
    default: begin
      count[1:0] = 2'b00; // default case, output 00
    end
  endcase
end

// Assign current count value to next count after clock edge
always @(posedge clk) begin
  curr_count <= next_count;
end

endmodule // end counter module