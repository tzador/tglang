// This code snippet is a multiplexer with 8 inputs and 3 outputs
// The multiplexer takes in 3 bits as selection inputs and selects the correct input based on the
// binary representation of the selection inputs

module multiplexer(input [7:0] data, input [2:0] selection, output reg [7:0] output);

// reg keyword indicates that the output is of type 'register' and can be stored and updated
// data is a bus of 8 bits representing the 8 input signals
// selection is a bus of 3 bits representing the selection inputs
// output is a bus of 8 bits representing the output signal

always @ ( * ) begin
    case (selection) //begin case statement
        3'b000 : output = data[7];  // if selection inputs are 0, select input 7
        3'b001 : output = data[6];  // if selection inputs are 1, select input 6
        3'b010 : output = data[5];  // if selection inputs are 2, select input 5
        3'b011 : output = data[4];  // if selection inputs are 3, select input 4
        3'b100 : output = data[3];  // if selection inputs are 4, select input 3
        3'b101 : output = data[2];  // if selection inputs are 5, select input 2
        3'b110 : output = data[1];  // if selection inputs are 6, select input 1
        3'b111 : output = data[0];  // if selection inputs are 7, select input 0
        default : output = 0;  // if none of the cases are matched, output 0
    endcase //end case statement
end //end always block

endmodule //end module