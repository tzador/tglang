/* This is a complex code snippet in VERILOG */
module complex_module(input clk, input [3:0] data_in, output reg [3:0] data_out);

  // Declare internal signals and regs
  wire [3:0] internal_in;
  reg [3:0] internal_out;
  
  // Assign internal signal to input
  assign internal_in = data_in;
  
  // Submodule instantiation
  simple_module simple_mod(.clk(clk), .data_in(internal_in), .data_out(internal_out));
  
  // Declare and initialize parameters
  parameter DELAY = 5;
  parameter COUNT = 8;
  parameter ENABLE = 1;
  
  // Create a for loop
  integer i;
  always @(posedge clk) begin
    for (i = 0; i < COUNT; i = i + 1) begin
      if (internal_in[1] == ENABLE) begin
        #DELAY internal_out <= internal_out + 1;
      end
    end
  end
  
  // Declare and initialize an array
  reg [3:0] data_array [0:3];
  initial begin
    data_array[0] = 4'b0000;
    data_array[1] = 4'b0011;
    data_array[2] = 4'b0101;
    data_array[3] = 4'b1010;
  end
  
  // Create a case statement
  always @(internal_out) begin
    case(internal_out)
      1'b0: data_out <= internal_out + data_array[0];
      1'b1: data_out <= internal_out + data_array[1];
      1'b10: data_out <= internal_out + data_array[2];
      1'b11: data_out <= internal_out + data_array[3];
      default: data_out <= data_array[0];
    endcase
  end
  
endmodule