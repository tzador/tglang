module ALU (A, B, opcode, F);
    input [3:0] A; // 4-bit input A
    input [3:0] B; // 4-bit input B
    input [2:0] opcode; // 3-bit input representing the operation to be performed
    output [3:0] F; // 4-bit output representing the result of the operation
    
    reg [3:0] intermediate; // 4-bit intermediate value used for calculations
    
    always @ (A or B or opcode) begin // sensitive to changes in inputs A, B, and opcode
        case (opcode) // defines different cases based on opcode values
            3'b000: intermediate = A + B; // addition operation
            3'b001: intermediate = A - B; // subtraction operation
            3'b010: intermediate = A & B; // bitwise AND operation
            3'b011: intermediate = A | B; // bitwise OR operation
            3'b100: intermediate = A ^ B; // bitwise XOR operation
            3'b101: intermediate = A << B; // left shift operation
            3'b110: intermediate = A >> B; // right shift operation
            3'b111: intermediate = ~A; // bitwise NOT operation
        endcase
    end
    
    assign F = intermediate; // assigns the value of intermediate to the output F
    
endmodule