//This is a code snippet for a 16-bit counter with synchronous reset and load inputs
//Define inputs and outputs
module counter_16bit(
    input clk, //clock input
    input reset, //synchronous reset input
    input load, //load input
    output [15:0] count //counter output
);

//Define internal registers
reg [15:0] reg_count; //register for the counter value

//Synchronous reset logic
always @(posedge clk) begin
    if(reset) //if reset is enabled
        reg_count <= 16'h0000; //reset counter value to 0
    else if(load) //if load is enabled
        reg_count <= count; //load counter value from input
    else //if neither reset nor load is enabled
        reg_count <= reg_count + 1; //increment counter value
end

//Assign output
assign count = reg_count; //assign counter value to output

endmodule