// Register File module
module Register_File(input wire clk, input wire rst_n, input wire [3:0] read_addr1, input wire [3:0] read_addr2,
					input wire [3:0] write_addr, input wire [31:0] write_data, input wire write_en,
					output reg [31:0] read_data1, output reg [31:0] read_data2);

	// Parameter declarations
	parameter NUM_REGISTERS = 16; // number of registers in register file
	
	// Internal signal declarations
	reg [31:0] registers [0:NUM_REGISTERS-1]; // array of registers
	reg [3:0] read_addr1_reg, read_addr2_reg; // registered versions of read addresses for synchronized reads
	
	// Register file logic
	always @(posedge clk or negedge rst_n) begin
		if(~rst_n) begin
			registers <= 32'h00000000; // initialize all registers to 0
			read_addr1_reg <= 4'h0;  // initialize read address 1 to 0
			read_addr2_reg <= 4'h0; // initialize read address 2 to 0
		end
		else begin
			// Reads
			if(read_addr1 !== read_addr1_reg) begin // if read address 1 changes, latch the new value
				read_addr1_reg <= read_addr1;
			end
			if(read_addr2 !== read_addr2_reg) begin // if read address 2 changes, latch the new value
				read_addr2_reg <= read_addr2;
			end
			
			// Write
			if(write_en) begin // if write enable is high, write to register at write address
				registers[write_addr] <= write_data;
			end
		end
	end
	
	// Output logic
	always @* begin
		// Read data outputs
		read_data1 = registers[read_addr1_reg]; // output data from register at read address 1
		read_data2 = registers[read_addr2_reg]; // output data from register at read address 2
	end
	
endmodule