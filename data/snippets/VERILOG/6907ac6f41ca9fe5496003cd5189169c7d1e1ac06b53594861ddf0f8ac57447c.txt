// Example of a ripple carry adder module with 4-bit input and output

module ripple_carry_adder(input [3:0] A, B, // 4-bit inputs A and B
output [3:0] S, // 4-bit output S
output cout // carry out
);

// Internal signals
wire [3:0] sum; // sum of A and B
wire [3:0] carry; // carries generated from each bit pair
wire [3:0] cout_temp; // temporary carry out for each bit pair
wire [3:0] A_xor_B; // XOR of A and B
wire [3:0] A_and_B; // AND of A and B

// Generate sum and carry signals
assign sum = A ^ B; // XOR operation between A and B
assign A_xor_B = A ^ B; // save the XOR result in a temporary signal
assign A_and_B = A & B; // AND operation between A and B
assign cout_temp[0] = A_and_B[0]; // carry generated from the first bit pair
assign cout_temp[1] = A_and_B[1] | (A_xor_B[1] & cout_temp[0]); // carry generated from the second bit pair
assign cout_temp[2] = A_and_B[2] | (A_xor_B[2] & cout_temp[1]); // carry generated from the third bit pair
assign cout_temp[3] = A_and_B[3] | (A_xor_B[3] & cout_temp[2]); // carry generated from the fourth bit pair

// Assign output values
assign S = sum; // output the sum of A and B
assign cout = cout_temp[3]; // output the final carry

endmodule