module ALU(input [7:0] A, input [7:0] B, input [2:0] F, output [7:0] C);
// This module represents an Arithmetic Logic Unit (ALU)
// It takes two 8-bit inputs A and B, and a 3-bit function code F
// Based on the function code, it performs different arithmetic and logic operations on the inputs
// The result is stored in the 8-bit output C

// Declare internal wires
wire [7:0] add_out, sub_out, and_out, or_out, xor_out;
wire zero, overflow, carry, negative;

// Adder/Subtractor: performs addition or subtraction based on F[2]
assign add_out = A + B;
assign sub_out = A - B;

// Logic operations: performs AND, OR, or XOR based on F[1:0]
assign and_out = A & B;
assign or_out = A | B;
assign xor_out = A ^ B;

// Result selection based on function code
always @ (A or B or F) begin
    case (F)
        3'b000: C = add_out; // Addition
        3'b001: C = sub_out; // Subtraction
        3'b010: C = and_out; // Bitwise AND
        3'b011: C = or_out; // Bitwise OR
        3'b100: C = xor_out; // Bitwise XOR
        3'b101: C = A; // Pass A
        3'b110: C = B; // Pass B
        3'b111: C = 0; // Zero
        default: C = 0; // Default case (should never happen)
    endcase
end

// Zero flag: set to 1 if output C is zero
assign zero = (C == 0);

// Overflow flag: set to 1 if there is an overflow in addition or subtraction
assign overflow = (F[2] == 1 && ((A[7] == B[7]) && (add_out[7] != A[7])));

// Carry flag: set to 1 if there is a carry out of the most significant bit in addition
assign carry = (add_out[7] != A[7]);

// Negative flag: set to 1 if output C is negative
assign negative = (C[7] == 1);
endmodule