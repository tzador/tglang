module counter (input clk, input reset, output reg [3:0] count);
    
    // Define internal signals for processing
    reg [3:0] next_count;
    
    // Create a 4-bit counter using an always block
    always @(posedge clk) begin
        if (reset)
            count <= 0; // Reset counter to 0
        else
            count <= next_count; // Update count with next_count
    end
    
    // Create a combinational always block to calculate next_count
    always @* begin
        case (count)
            4'b0000: next_count = 4'b0001; // Increment by 1 when count is 0
            4'b0001: next_count = 4'b0010; // Increment by 1 when count is 1
            4'b0010: next_count = 4'b0011; // Increment by 1 when count is 2
            4'b0011: next_count = 4'b0100; // Increment by 1 when count is 3
            4'b0100: next_count = 4'b0000; // Reset count to 0 when count reaches 4
            default: next_count = 4'b0000; // Default case for safety
        endcase
    end
endmodule