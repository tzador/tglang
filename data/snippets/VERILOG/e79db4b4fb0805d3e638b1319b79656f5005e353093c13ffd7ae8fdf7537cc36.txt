// Defining a 32-bit adder module
module adder32bit (
    input [31:0] a,
    input [31:0] b,
    output [32:0] sum
);

// Defining internal signals and wires
wire [32:0] temp;
reg [32:0] carry;

// Instantiate 32 full-adders
genvar i;
generate
    for (i = 0; i < 32; i++) begin : adders
        // Declaring inputs
        wire c_in;
        reg [1:0] a_bit, b_bit;
        
        // Connecting inputs to respective bits
        assign c_in = carry[i];
        assign a_bit = a[i];
        assign b_bit = b[i];
        
        // Instantiating a full-adder and connecting inputs/outputs
        full_adder fa (
            .a(a_bit),
            .b(b_bit),
            .c_in(c_in),
            .sum(temp[i]),
            .c_out(carry[i+1])
        );
    end
endgenerate

// Assigning output sum with carried bits
assign sum = {carry[32], temp[31:0]};

// Defining full-adder module
module full_adder (
    input a, 
    input b,
    input c_in,
    output sum,
    output c_out
);

// Adding a, b, and c_in to get sum
assign sum = a ^ b ^ c_in;

// Defining carry logic
assign c_out = (a & b) | (a & c_in) | (b & c_in);
endmodule