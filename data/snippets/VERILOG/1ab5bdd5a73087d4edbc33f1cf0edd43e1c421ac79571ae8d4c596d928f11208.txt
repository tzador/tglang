//This code snippet is written in VERILOG

module dynamic_fifo #(
    parameter WIDTH = 8,
    parameter DEPTH = 16,
    parameter WORD_WIDTH = 8
)(
    input clk,
    input rst,
    input wr_en,
    input rd_en,
    input [WIDTH-1:0] data_in,
    output reg [WIDTH-1:0] data_out
);

/*
This module is a dynamic FIFO (First-In-First-Out) implementation with variable width, depth and word size.
It takes in data on the 'data_in' port and outputs data on the 'data_out' port based on the 'wr_en' and 'rd_en' signals.
The FIFO can be reset using the 'rst' signal and is synchronized with the input clock 'clk'.
*/

reg [WIDTH-1:0] fifo [DEPTH-1:0]; //declaring a register array for the FIFO

integer write_ptr = 0; //integer to keep track of the write pointer
integer read_ptr = 0;  //integer to keep track of the read pointer
wire empty = (read_ptr == write_ptr); //wire to check if the FIFO is empty
wire full = ((write_ptr + 1 ) % DEPTH == read_ptr); //wire to check if the FIFO is full

always @(posedge clk) begin
    if (rst) begin           //resetting the FIFO when rst is high
        fifo <= 0;
        write_ptr <= 0;
        read_ptr <= 0;
    end else begin
        if(wr_en && !full) begin      //writing data into FIFO if it is not full
            fifo[write_ptr] <= data_in;
            write_ptr <= write_ptr + 1;
        end
        if(rd_en && !empty) begin     //reading data from FIFO if it is not empty
            data_out <= fifo[read_ptr];
            read_ptr <= read_ptr + 1;
        end
    end
end

endmodule