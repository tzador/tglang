// Creates a 4-bit adder module with inputs A, B and outputs S (sum) and C (carry out)
`timescale 1ns/1ps
module adder_4bit(input [3:0] A, input [3:0] B, output [3:0] S, output C);

	// Internal signals for each stage of the adder
	wire [3:0] sum1, sum2, sum3;
	wire C1, C2, C3;

	// First stage of adder - adding A[0] and B[0]
	fulladder FA0(.A(A[0]), .B(B[0]), .Cin(1'b0), .S(sum1[0]), .Cout(C1));

	// Second stage of adder - adding A[1] and B[1], along with carry from previous stage
	fulladder FA1(.A(A[1]), .B(B[1]), .Cin(C1), .S(sum1[1]), .Cout(C2));

	// Third stage of adder - adding A[2] and B[2], along with carry from previous stage
	fulladder FA2(.A(A[2]), .B(B[2]), .Cin(C2), .S(sum1[2]), .Cout(C3));

	// Fourth stage of adder - adding A[3] and B[3], along with carry from previous stage
	fulladder FA3(.A(A[3]), .B(B[3]), .Cin(C3), .S(sum1[3]), .Cout(C));

	// Assigning output values
	assign S = sum1;
	assign C = C;

endmodule

// Full Adder module - adds two 1-bit inputs A and B, along with a carry input Cin,
// outputs a 1-bit sum S and a carry output Cout
module fulladder(input A, input B, input Cin, output S, output Cout);

	// Internal signals for each stage of the adder
	wire X1, X2, X3;

	// Generating sum output
	assign S = A ^ B ^ Cin;

	// Generating carry output
	assign Cout = (A&B) | (A&Cin) | (B&Cin);

endmodule