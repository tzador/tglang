`timescale 1ns/1ns
// Defines the time scale for the simulation with units of nanoseconds

module myModule(clk, rst, data_in, data_out);
// Defines a module named "myModule" with inputs clk, rst and data_in and output data_out

input clk, rst, data_in;
// Declares the inputs for the module

output reg [7:0] data_out;
// Declares an 8-bit output register named "data_out"

reg [7:0] counter;
// Declares an 8-bit register named "counter"

always @(posedge clk)
begin
    // Executes the following code on the positive edge of the clock signal
    if (rst)
        // Resets the counter if rst is high
        counter <= 0;
    else
        // Increments the counter by 1 if rst is low
        counter <= counter + 1;
    end
    
    case (counter)
        8'b00000000: begin
            // Executes the following code when counter is equal to 0
            data_out = data_in;
        end
        8'b00000001: begin
            // Executes the following code when counter is equal to 1
            data_out = data_in + 2;
        end
        8'b00000010: begin
            // Executes the following code when counter is equal to 2
            data_out = data_in + 4;
        end
        default: begin
            // Executes the following code when counter is not equal to any of the cases above
            data_out = 0;
        end
    endcase
end
endmodule