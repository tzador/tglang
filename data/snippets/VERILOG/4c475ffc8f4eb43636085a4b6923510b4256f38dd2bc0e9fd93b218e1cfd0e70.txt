module dut(input [7:0] data, output reg [7:0] out);

reg [7:0] temp;
reg clk, rst;
reg [2:0] sel;

// input clock and reset
always #10 clk = ~clk; // toggle every 10 time units
always #70 rst = 1; // hold reset for 70 time units

// synchronous process
always @(posedge clk, posedge rst) begin
  if(rst)
    temp <= 8'h00; // reset state
  else begin
    case(sel)
      3'b000: temp <= data + 8'h01; // adding 1
      3'b001: temp <= data - 8'h01; // subtracting 1
      3'b010: temp <= data << 1; // left shift by 1
      3'b011: temp <= data >> 1; // right shift by 1
      3'b100: temp <= data & 8'h0F; // bitwise AND with 00001111
      3'b101: temp <= data | 8'hF0; // bitwise OR with 11110000
      3'b110: temp <= ~data; // bitwise NOT
      3'b111: temp <= data; // no operation
    endcase
  end
end

// combinational process
always @(*) begin
  case(temp)
    8'h00: out = 8'h00; // output 0 if temp equals 0
    8'h01: out = 8'h10; // output 16 if temp equals 1
    8'h02: out = 8'h20; // output 32 if temp equals 2
    8'h03: out = 8'h30; // output 48 if temp equals 3
    8'h04: out = 8'h40; // output 64 if temp equals 4
    8'h05: out = 8'h50; // output 80 if temp equals 5
    8'h06: out = 8'h60; // output 96 if temp equals 6
    8'h07: out = 8'h70; // output 112 if temp equals 7
    8'h08: out = 8'h80; // output 128 if temp equals 8
    8'h09: out = 8'h90; // output 144 if temp equals 9
    default: out = 8'hFF; // output 255 for any other value of temp
  endcase
end

endmodule