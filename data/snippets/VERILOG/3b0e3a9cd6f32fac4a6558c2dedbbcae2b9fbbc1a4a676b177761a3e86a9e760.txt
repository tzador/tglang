module ExampleModule(
input [7:0] data_in, // input port with an 8-bit vector, array starts at index 7 and ends at index 0
output reg [3:0] data_out, // output port with a 4-bit vector, array starts at index 3 and ends at index 0
inout [1:0] control, // inout port with a 2-bit vector, array starts at index 1 and ends at index 0
input clock // input port for clock signal
);
	
	reg [7:0] temp_data; // register to store input data
	
	always @ (posedge clock) begin // always block that executes on positive edge of clock
		temp_data <= data_in; // assign input data to temporary register
		data_out <= temp_data[3:0]; // assign the lower 4 bits of temp_data to data_out
	end
	
	assign control[1] = data_in[0]; // assign the LSB of data_in to the first index of control
	assign control[0] = data_in[1]; // assign the second bit of data_in to the second index of control
	
endmodule