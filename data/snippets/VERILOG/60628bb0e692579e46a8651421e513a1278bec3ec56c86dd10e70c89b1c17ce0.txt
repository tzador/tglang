module Full_Adder(
    input a,
    input b,
    input carry_in,
    output sum,
    output carry_out
);
    //declare internal wires to hold intermediate values
    wire a_xor_b;
    wire a_and_b;
    wire b_and_carry_in;
    wire a_and_b_and_carry_in;
    wire carry_out;
    
    //perform XOR operation for sum
    assign a_xor_b = a ^ b;
    
    //perform AND operation for intermediate value
    assign a_and_b = a & b;
    
    //perform AND operation for b and carry in
    assign b_and_carry_in = b & carry_in;
    
    //perform AND operation for a, b, and carry in to compute final carry_out
    assign a_and_b_and_carry_in = a & b & carry_in;
    
    //use logical operators to compute final sum and carry_out
    assign sum = a_xor_b ^ carry_in;
    assign carry_out = a_and_b | b_and_carry_in | a_and_b_and_carry_in;
    
endmodule