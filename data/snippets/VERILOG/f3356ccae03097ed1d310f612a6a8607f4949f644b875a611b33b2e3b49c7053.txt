// This module represents a 4-bit Ripple Carry Adder using structural modeling
module RCA_4_bit(
    input [3:0] A, B, // 4-bit input for the numbers to be added
    input cin, // input carry
    output reg [3:0] sum, // 4-bit output for the sum
    output cout // output carry
    );

    wire [2:0] c; // wire for intermediate carries

    FA fa_0 (.A(A[0]), .B(B[0]), .cin(cin), .sum(sum[0]), .cout(c[0])); // Full Adder instantiation
    FA fa_1 (.A(A[1]), .B(B[1]), .cin(c[0]), .sum(sum[1]), .cout(c[1])); // Full Adder instantiation
    FA fa_2 (.A(A[2]), .B(B[2]), .cin(c[1]), .sum(sum[2]), .cout(c[2])); // Full Adder instantiation
    FA fa_3 (.A(A[3]), .B(B[3]), .cin(c[2]), .sum(sum[3]), .cout(cout)); // Full Adder instantiation

endmodule

// This module represents a full adder using primitive gates
module FA(
    input A, B, cin, // input bits
    output reg sum, // output bit for the sum
    output cout // output bit for the carry
    );

    wire s; // wire for the sum of the inputs

    // XOR gate for generating the sum bit
    assign s = A ^ B;

    // AND gate for generating the carry bit
    assign cout = (A & B) | (s & cin);

    // Assigning the sum and carry bits to the output ports
    always @(*) begin
        sum = s;
    end

endmodule