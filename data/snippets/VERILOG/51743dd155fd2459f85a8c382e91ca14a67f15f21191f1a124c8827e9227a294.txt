// Module for a 4-bit adder using Verilog

module four_bit_adder(

    // Declare inputs and outputs
    input [3:0] a, b, // 4-bit inputs
    input cin, // Carry-in input
    output [3:0] sum, // 4-bit sum output
    output cout // Carry-out output
);

    // Declare 4-bit registers for inputs and outputs
    reg [3:0] a_reg, b_reg, sum_reg;
    // Declare a 1-bit register for carry-in and carry-out
    reg cin_reg, cout_reg;

    // Assign inputs to registers
    always @ (a, b, cin)
    begin
        a_reg = a;
        b_reg = b;
        cin_reg = cin;
    end

    // Assign outputs to registers
    always @(sum_reg)
        sum = sum_reg;
    always @(cout_reg)
        cout = cout_reg;

    // Logic for the 4-bit adder
    always @ (posedge clk)
        begin
            // Initialize sum register to 0
            sum_reg <= 4'b0000;

            // Loop 4 times for each bit in the sum
            for (i=0; i<4; i=i+1)
                begin
                    // Add current bits of a, b, and carry-in
                    sum_reg[i] <= a_reg[i] + b_reg[i] + cin_reg;
                    // Update carry-out based on current bits
                    cout_reg <= (a_reg[i] & b_reg[i]) | (a_reg[i] & cin_reg) | (b_reg[i] & cin_reg);
                    // Shift carry-in for next bit addition
                    cin_reg <= (a_reg[i] & b_reg[i]) | (a_reg[i] & cin_reg[i-1]) | (b_reg[i] & cin_reg[i-1]);
                end
        end

endmodule