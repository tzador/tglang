//Module for creating a binary adder
module adder (a, b, sum, carry);
  input [7:0] a, b; //8-bit input signals
  output [7:0] sum; //8-bit sum output
  output carry; //carry output bit
  wire [7:0] temp; //signal for temporary sum
  wire [7:0] carry_in; //signal for carry in bit
  assign carry_in = 1'b0; //assign 0 to carry_in bit
  //full adder instantiation for each bit
  //the first adder uses the carry_in bit signal
  full_adder fa0(a[0], b[0], carry_in, sum[0], temp[0], carry[1]);
  //use a for loop to instantiate the remaining full adders
  integer i;
  for(i=1; i<8; i=i+1) begin
    full_adder fa(i, a[i], b[i], carry[i-1], sum[i], temp[i], carry[i+1]);
  end
endmodule
//Definition for the full adder module
module full_adder (a, b, carry_in, sum, temp, carry_out);
  input a, b, carry_in; //inputs for each bit
  output sum, temp, carry_out; //outputs for each bit
  wire p, g; //wires for the internal computations
  //generate the equations for p, g, temp, and carry_out
  assign p = a ^ b;
  assign g = a & b;
  assign temp = p ^ carry_in;
  assign carry_out = g | (p & carry_in);
  //define the sum and carry_out outputs for the bit
  assign sum = temp; //sum output is the temporary sum
  assign carry_out = carry_out; //carry_out output is the carry_out signal
endmodule