module pipeline (
    input clk,            // input clock
    input [7:0] data_in,  // input data
    input valid,          // input data valid flag
    output [7:0] data_out // output data
);

reg [3:0] stage1_data;    // register for first stage data
reg stage1_valid;         // register for first stage valid flag
reg [3:0] stage2_data;    // register for second stage data
reg stage2_valid;         // register for second stage valid flag

always @(posedge clk) begin

    // first stage process
    if (valid) begin
        stage1_data <= data_in;    // store input data in first stage register
        stage1_valid <= 1'b1;      // set first stage valid flag
    end

    // second stage process
    if (stage1_valid) begin
        stage2_data <= stage1_data; // store first stage data in second stage register
        stage2_valid <= 1'b1;       // set second stage valid flag
    end
end

assign data_out = stage2_data;    // output data is second stage data

endmodule