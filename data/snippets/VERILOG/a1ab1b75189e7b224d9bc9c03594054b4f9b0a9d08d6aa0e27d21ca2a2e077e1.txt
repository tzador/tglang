// This is a comment in Verilog
module ALU(input [7:0] input1, input [7:0] input2, input [2:0] control, output reg [7:0] result);
    // Define the inputs and output of the ALU module, with 8-bit width for the inputs and output
    reg [7:0] alu_result; // Initialize a register for storing the result of the ALU operation
    always @* begin // Start an always block that executes whenever there is a change in the inputs
        case(control) // Use a case statement to determine the operation to be performed based on the control signal
            3'b000: alu_result = input1 & input2; // Bitwise AND operation for control signal "000"
            3'b001: alu_result = input1 | input2; // Bitwise OR operation for control signal "001"
            3'b010: alu_result = input1 ^ input2; // Bitwise XOR operation for control signal "010"
            3'b011: alu_result = ~(input1 & input2); // Bitwise NOR operation for control signal "011"
            3'b100: alu_result = input1 + input2; // Addition operation for control signal "100"
            3'b101: alu_result = input1 - input2; // Subtraction operation for control signal "101"
            3'b110: alu_result = input1 << input2; // Shift left operation for control signal "110"
            3'b111: alu_result = input1 >> input2; // Shift right operation for control signal "111"
        endcase
    end
    // Assign the value of the alu_result register to the output port
    assign result = alu_result;
endmodule