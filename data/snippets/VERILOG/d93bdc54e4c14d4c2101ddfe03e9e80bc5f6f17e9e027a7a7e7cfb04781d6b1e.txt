// This is a code snippet for a 4-bit arithmetic logic unit (ALU) in Verilog.

module ALU(input [3:0] A, input [3:0] B, input [1:0] opcode, output reg [3:0] Y);

always @(*) begin
  // Check the opcode to choose the operation
  case(opcode)
    0: Y = A + B; // Addition
    1: Y = A - B; // Subtraction
    2: Y = A & B; // Bitwise AND
    3: Y = A | B; // Bitwise OR
    4: Y = ~A;    // Bitwise NOT A
    5: Y = ~B;    // Bitwise NOT B
    6: Y = A ^ B; // Bitwise XOR
    7: Y = A << 1; // Shift A to the left by 1
    8: Y = A >> 1; // Shift A to the right by 1
    9: Y = B << 1; // Shift B to the left by 1
    10: Y = B >> 1; // Shift B to the right by 1
    11: Y = A + 1; // Increment A by 1
    12: Y = B + 1; // Increment B by 1
    13: Y = A - 1; // Decrement A by 1
    14: Y = B - 1; // Decrement B by 1
    default: Y = 0; // If opcode is invalid, output 0
  endcase
end

endmodule