module multiplier (a,b,c,input,x,y);
parameter N = 4; //sets the number of input bits

input [N-1:0] a, b; //sets a and b as input variables
output reg [2*N-1:0] c; //sets c as an output variable, double the size of inputs to store full product
wire [2*N-1:0] x,y; //creates intermediate wires for calculations

//multiplier logic
genvar i,j; //generate variable

generate
  for (i = 0; i < N; i = i + 1) begin //loop for first input
    for (j = 0; j < N; j = j + 1) begin //nested loop for second input
      assign x[i+j] = a[i] & b[j]; //AND gate to calculate partial product and store in intermediate wire
    end
  end
endgenerate

generate
  for (i = 0; i < 2*N; i = i + 1) begin //loop for summing partial products
    always @(posedge input) begin //sensitivity list for clock edge
      c[i] <= 0; //clear output before calculation
      for (j = 0; j < N; j = j + 1) begin //nested loop to add partial products
        if (i >= j && (i-j) < N) //condition to check if partial products should be added
          c[i] <= c[i] + x[i-j]; //adds partial product to output
      end
    end
  end
endgenerate
endmodule