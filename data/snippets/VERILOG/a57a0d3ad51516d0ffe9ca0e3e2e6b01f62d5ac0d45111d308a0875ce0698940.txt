// Module declaration
module ALU (clk, reset, opcode, A, B, result);

    // Input and output ports
    input clk, reset;
    input [3:0] opcode;
    input [7:0] A, B;
    output [7:0] result;

    // Internal signals
    wire [7:0] temp1, temp2;

    // Adder block
    assign temp1 = A + B;

    // Subtractor block
    assign temp2 = A - B;

    // Multiplexer block
    always @ (posedge clk) begin
        if (reset) begin
            result <= 0; // Output set to 0 in case of reset
        end else begin
            case (opcode)
                4'b0000: result <= temp1; // Addition operation
                4'b0001: result <= temp2; // Subtraction operation
                4'b0010: result <= A & B; // Bitwise AND operation
                4'b0011: result <= A | B; // Bitwise OR operation
                4'b0100: result <= A ^ B; // Bitwise XOR operation
                4'b0101: result <= ~A; // Bitwise NOT operation
                4'b0110: result <= A << 1; // Shift left by 1 operation
                4'b0111: result <= A >> 1; // Shift right by 1 operation
                4'b1000: result <= A + 1; // Increment operation
                4'b1001: result <= A - 1; // Decrement operation
                4'b1010: result <= A; // Pass-through operation
                default: result <= 0; // Default case for undefined opcode
            endcase
        end
    end

endmodule