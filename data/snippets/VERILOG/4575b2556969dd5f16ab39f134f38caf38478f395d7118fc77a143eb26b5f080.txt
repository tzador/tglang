`timescale 1ns / 1ps                       // define the simulation timescale

module adder (                             // define a module called "adder"
    input [7:0] a,                          // input a 8-bit signal "a"
    input [7:0] b,                          // input a 8-bit signal "b"
    output reg [8:0] sum,                    // output a 9-bit registered signal "sum"
    output reg overflow                     // output a registered flag "overflow"
);

    always @(a, b) begin                     // perform the following operations every time inputs "a" or "b" change
        sum <= a + b;                        // assign the sum of inputs to the "sum" signal
        overflow <= (a + b > 255) ? 1'b1 : 1'b0; // check if the sum is larger than 8 bits and set "overflow" flag accordingly
    end

endmodule                                   // end of module "adder"

initial begin                               // define initial block for simulation
    $dumpfile("adder.vcd");                 // create a waveform file for simulation results
    $dumpvars(0, adder);                    // dump all signals in the "adder" module
    a = 8'b00101010;                        // assign a value to input "a"
    b = 8'b10101010;                        // assign a value to input "b"
    #10 $finish;                            // end simulation after 10 nanoseconds
end

`ifndef SYNTHESIS                          // only include simulation-specific code if not synthesizing for hardware
initial begin
    // test adder functionality
    if (sum === 8'b11010100) begin          // check if the expected output "sum" is correct
        $display("Adder test passed");      // output message if test is passed
    end else begin
        $display("Adder test failed");      // output message if test is failed
    end
end
`endif