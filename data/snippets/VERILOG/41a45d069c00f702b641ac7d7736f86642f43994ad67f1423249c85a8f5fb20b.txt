// A multiplexer module with two inputs, three selectors, and one output

module multiplexer (input [1:0]in0, in1, input [2:0]sel, output reg out);

always@(*)
begin
  case(sel)
    3'b000: out = in0[0];
    3'b001: out = in0[1];
    3'b010: out = in1;
    3'b011: out = ((in0[0] & in1) | (in0[1] & ~in1));
    3'b100: out = ~(in0[0] | in0[1] | in1);
    default: out = 1'b0;
  endcase
end
endmodule

// Module declaration for a multiplexer
module multiplexer (input [1:0]in0, input in1, input [2:0]sel, output reg out);

// always block for sequential logic
always@(*)
begin
  // case statement with selector values
  case(sel)
    // if sel = 000, select in0[0] as the output
    3'b000: out = in0[0];
    // if sel = 001, select in0[1] as the output
    3'b001: out = in0[1];
    // if sel = 010, select in1 as the output
    3'b010: out = in1;
    // if sel = 011, perform bitwise AND operation between in0[0] and in1, and bitwise OR operation between in0[1] and the inverse of in1
    3'b011: out = ((in0[0] & in1) | (in0[1] & ~in1));
    // if sel = 100, perform bitwise OR operation between in0[0], in0[1], and in1, and then invert the result
    3'b100: out = ~(in0[0] | in0[1] | in1);
    // if any other selector value is given, output 0
    default: out = 1'b0;
  endcase
end
endmodule