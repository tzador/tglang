`define INP_WIDTH 8    // defining macro for input width
module multiplier (input [`INP_WIDTH-1:0] a, b, output [INP_WIDTH*2-1:0] p);    // module declaration with input and output ports
    reg signed [INP_WIDTH-1:0] input_a;    // declaring input_a as a signed reg with width of INP_WIDTH
    reg signed [INP_WIDTH-1:0] input_b;    // declaring input_b as a signed reg with width of INP_WIDTH
    reg signed [INP_WIDTH-1:0] output_p;   // declaring output_p as a signed reg with width of INP_WIDTH
    always @(a) input_a = a;   // always block with sensitivity list of 'a'
    always @(b) input_b = b;   // always block with sensitivity list of 'b'
    always @(*) begin  // always block with no sensitivity list, triggered by any change in inputs
        output_p = input_a * input_b;   // performing multiplication and storing result in output_p
    end
    assign p = output_p;   // assigning output_p to output port 'p'
endmodule

// Explanation:
// The code above defines a macro for the input width, and declares a Verilog module named 'multiplier' with two input ports 'a' and 'b',
// and one output port 'p'. Inside the module, variables 'input_a', 'input_b', and 'output_p' are declared as signed registers with a width
// of INP_WIDTH. Two always blocks are used to assign the values of inputs 'a' and 'b' to the variables 'input_a' and 'input_b', respectively.
// The third always block has no sensitivity list and is triggered by any change in inputs, and it performs the multiplication operation
// on 'input_a' and 'input_b', storing the result in 'output_p'. Finally, the output port 'p' is assigned the value of 'output_p' using the
// 'assign' statement, completing the functionality of the multiplier module.