// Module to perform binary multiplication using full adders
module Binary_Multiplication(
input [7:0] a, b,          // inputs a and b
output [15:0] result       // output result
);
wire [3:0] rows [0:3];     // 4x4 grid of 4-bit rows
wire [3:0] columns [0:3];  // 4x4 grid of 4-bit columns
wire [7:0] partial_prod [0:15];     // 16-bit partial products

// Generate partial products for each bit of input b
genvar i, j;
generate
  for (i = 0; i < 4; i = i + 1) begin     // loop through rows
    for (j = 0; j < 4; j = j + 1) begin   // loop through columns
      assign partial_prod[i*4+j] = a[i]*b[j];  // multiply each bit of a with each bit of b
      assign columns[j][i] = partial_prod[i*4+j];  // store in the corresponding column
    end
  end
endgenerate

// Generate full adders for the rows of the grid
genvar k;
generate
  for (k = 0; k < 4; k = k + 1) begin     // loop through rows
    GenFullAdder #(.WIDTH(4)) FA (     // instantiate a full adder with bit width of 4
      .A(columns[3][k]),               // input a is the last bit in each column
      .B(rows[k][3]),                  // input b is the last bit in each row
      .Ci(rows[k][2]),                 // carry in is the second to last bit in each row
      .S(result[4*k +: 4]),            // output sum is 4 bits, starting at index 4*k
      .Co(rows[k+1][0])                // carry out goes to the first bit of the next row
    );
  end
endgenerate
endmodule