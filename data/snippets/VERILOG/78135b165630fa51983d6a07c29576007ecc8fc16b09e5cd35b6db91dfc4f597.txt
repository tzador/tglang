module BarrelShifter (
    input [3:0] A,      // input operand
    input [3:0] B,      // shift amount
    input shift_enable, // enable signal for shifting
    input direction,    // direction of shift (left = 1, right = 0)
    output [3:0] Y      // output result
);
    reg [3:0] result;                  // register to store result

    always @(*) begin                  // combinational logic
        if (direction) begin           // if direction = left
            case (B)                   // case statement based on shift amount
                2'b00: result = A << 0; // no shift, output equals input
                2'b01: result = A << 1; // shift left by 1 bit
                2'b10: result = A << 2; // shift left by 2 bits
                2'b11: result = A << 3; // shift left by 3 bits
            endcase
        end else begin                 // if direction = right
            case (B)                   // case statement based on shift amount
                2'b00: result = A >> 0; // no shift, output equals input
                2'b01: result = A >> 1; // shift right by 1 bit
                2'b10: result = A >> 2; // shift right by 2 bits
                2'b11: result = A >> 3; // shift right by 3 bits
            endcase
        end
    end

    assign Y = shift_enable ? result : A; // output Y equals result only if shift is enabled, else output equals input A
endmodule

/*
This module implements a barrel shifter that can shift an input operand by a specified amount and direction,
with shift enable functionality. The output result is stored in a register and is only updated if shift is enabled.
The direction of shift is determined by the 'direction' input, with 1 indicating left shift and 0 indicating right shift.
The shift amount is specified by the 'B' input, with 2 bits allowing for shifts of 0-3 bits.
The output 'Y' is equal to the input 'A' if shift is not enabled.
*/