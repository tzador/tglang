module mytop(Clock, Rst, Data_In, Data_Out);

    // Input signals
    input Clock, Rst, Data_In;

    // Output signals
    output Data_Out;

    // Internal signals
    wire Intermediate1;
    reg Intermediate2;

    // Instantiate a D flip-flop
    DFF myDFF(Clock, Data_In, Intermediate1);

    // Assign the output of the D flip-flop to a register
    always @(posedge Clock)
    	begin
    		if (Rst == 1'b1)
    			Intermediate2 <= 1'd0;
    		else
    			Intermediate2 <= Intermediate1;
    	end

    // Instantiate a mux with the D flip-flop output and Data_In as inputs
    // Choose Data_In as output when Intermediate2 is 1, else choose the output of the D flip-flop
    MUX myMUX (Intermediate2, Data_In, Intermediate1, Data_Out, Rst);

endmodule

// D flip-flop module
module DFF(Clock, Data_In, Data_Out);

    input Clock, Data_In;
    output Data_Out;

    always @(posedge Clock)
        Data_Out <= Data_In;

endmodule

// Mux module
module MUX(Control, Input1, Input2, Output, Rst);

    input Control, Input1, Input2;
    output Output;
    input Rst;

    always @(*)
        case (Control)
            1'b1: Output = Input1;
            1'b0: Output = Input2;
            default: Output = 1'b0;
        endcase

    // Reset logic
    always @(posedge Rst)
        Output <= 1'b0;

endmodule