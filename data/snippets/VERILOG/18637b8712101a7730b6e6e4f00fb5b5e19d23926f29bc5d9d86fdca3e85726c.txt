// This Verilog code snippet is used to implement a 32-bit floating point adder 
// with rounding and overflow handling 

// Input ports
module floating_point_adder (
    input [31:0] A, // 1st operand
    input [31:0] B, // 2nd operand
    input [2:0] rounding_mode, // rounding mode (0: round to nearest, 1: round to zero)
    input [1:0] overflow_mode, // overflow mode (0: truncate, 1: saturate to max value)
    output [31:0] result, // result of addition
    output valid, // flag indicating valid result
    output overflow // flag indicating overflow
  );

  // Internal signals
  wire [31:0] sum; // sum of the two operands
  wire [30:0] A_exp; // exponent of A
  wire [30:0] B_exp; // exponent of B
  wire [1:0] A_sig; // significand of A
  wire [1:0] B_sig; // significand of B
  wire [31:0] mantissa; // mantissa of result
  wire [30:0] exp_diff; // difference in exponents
  wire [30:0] shifted_sig; // significand of result after shifting
  wire [30:0] shifted_sig_32; // 32-bit significand of result after shifting

  // Extracting exponent and significand from A and B
  assign A_exp = A[30:23];
  assign B_exp = B[30:23];
  assign A_sig = {1'b1, A[22:0]};
  assign B_sig = {1'b1, B[22:0]};

  // Handling negative operands by taking 2's complement
  assign A_sig = A[31] ? ~A_sig + 1 : A_sig;
  assign B_sig = B[31] ? ~B_sig + 1 : B_sig;

  // Calculating the exponent difference
  assign exp_diff = A_exp - B_exp;

  // Shifting significand of B based on exponent difference
  assign shifted_sig = (exp_diff >= 0) ? {1'b0, B_sig} << exp_diff : {1'b0, B_sig} >> -exp_diff;
  assign shifted_sig_32 = shifted_sig[30:0];

  // Performing addition of significands
  assign {overflow, mantissa} = A_sig + shifted_sig_32;

  // Handling overflow
  assign result = (overflow_mode == 1 && overflow == 1) ? {31'b1, {1'b1, mantissa}} : {result[31], {31'b0, mantissa}};

  // Rounding based on rounding mode
  assign rounded_mantissa = (rounding_mode == 0) ? mantissa[30:0] + 1'b0.5 : mantissa[30:2] + (mantissa[1] && mantissa[0]);

  // Handling rounding and shift after addition
  assign valid = 1'b1;
  assign {result[31], result[30], result[29:23], result[22:0]} = rounded_mantissa[24:0] << exp_diff;

endmodule