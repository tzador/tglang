//First module declaration 
module top (input wire Clk,
    input wire [3:0] A,
    input wire [3:0] B,
    output wire [3:0] Y,
    reg [3:0] R);

    reg[3:0] M[15:0];

    //This always block assigns values to the reg M
    //based on the input values of A, B and constant values
    //W and X
    always@ (A or B) begin
        case ({A, B})
            4'b0001: M[0] = 4'b0000; //If A=1 and B=0, M0 = 0
            4'b0010: M[1] = 4'b0001; //If A=0 and B=1, M1 = 1
            4'b0011: M[2] = 4'b0010; //If A=1 and B=1, M2 = 2
            4'b0100: M[3] = 4'b0011; //If A=0 and B=0, M3 = 3
            4'b0101: M[4] = 4'b0100; //If A=1 and B=0, M4 = 4
            4'b0110: M[5] = 4'b0101; //If A=0 and B=1, M5 = 5
            4'b0111: M[6] = 4'b0110; //If A=1 and B=1, M6 = 6
            4'b1000: M[7] = 4'b0111; //If A=0 and B=0, M7 = 7
            4'b1001: M[8] = 4'b1000; //If A=1 and B=0, M8 = 8
            4'b1010: M[9] = 4'b1001; //If A=0 and B=1, M9 = 9
            4'b1011: M[10] = 4'b1010; //If A=1 and B=1, M10 = 10
            4'b1100: M[11] = 4'b1011; //If A=0 and B=0, M11 = 11
            4'b1101: M[12] = 4'b1100; //If A=1 and B=0, M12 = 12
            4'b1110: M[13] = 4'b1101; //If A=0 and B=1, M13 = 13
            4'b1111: M[14] = 4'b1110; //If A=1 and B=1, M14 = 14
            default: M[15] = 4'b1111; //If inputs are invalid, M15 = 15
        endcase
    end
    
    //Assigns the values of R based on the values of M
    assign R = M[15:0] + 4'b0001; //R = M + 1

    //Assigns the values of Y based on the values of R
    assign Y = R + 4'b1001; //Y = R + 9
    
endmodule