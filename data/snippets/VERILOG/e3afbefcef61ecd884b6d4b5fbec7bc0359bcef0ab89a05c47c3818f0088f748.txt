/*
 *
 * This is a multi-line
 * comment explanation of a module
 *
 */

 // Module declaration
module counter (
    // Input signal
    input clk,

    // Output signals
    output reg [7:0] count,
    output reg [7:0] inverted_count
);

 // Internal signal
reg [7:0] next_count;

// Always block using posedge of input clock
always @(posedge clk) begin
    // Increment count
    if (count == 0) begin
        next_count <= 1;
    end else if (count == 255) begin
        next_count <= 0;
    end else begin
        next_count <= count + 1;
    end
end

// Assign inverted count
assign inverted_count = ~count;

// Sequential always block for synchronous reset
always @(posedge clk) begin
    if (rst) begin
        count <= 0;
    end else begin
        count <= next_count;
    end
end

// End of module
endmodule