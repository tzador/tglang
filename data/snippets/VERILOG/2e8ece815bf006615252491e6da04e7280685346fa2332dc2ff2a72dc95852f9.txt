// This is a code snippet in VERILOG used for designing digital
// circuits.
module adder_subtractor(
    input [15:0] A, B, // 16-bit inputs A and B
    input ci, // carry-in bit
    input s, // subtraction mode select
    output [15:0] sum, // result of addition or subtraction
    output co // carry-out bit
);

// Define internal signals
wire [15:0] A_xor_B; // XOR of A and B
wire [15:0] A_and_B; // AND of A and B
wire [16:0] A_plus_B; // A plus B plus the carry-in bit ci
wire [15:0] A_minus_B; // A minus B
wire [15:0] s_A_minus_B; // Subtraction mode of A minus B
wire [15:0] s_A_plus_B; // Subtraction mode of A plus B

// Circuit logic
xor(A_xor_B, A, B); // get XOR of A and B
and(A_and_B, A, B); // get AND of A and B
assign A_plus_B = {1'b0, A_xor_B} + {ci, A_and_B}; // add A and B with carry-in bit
assign A_minus_B = A + ~B + 1; // subtract B from A
assign s_A_minus_B = A_minus_B + ~s + 1; // select subtraction mode for A_minus_B
assign s_A_plus_B = A_plus_B + ~s + 1; // select subtraction mode for A_plus_B
assign sum = s ? s_A_minus_B : s_A_plus_B; // select final result based on subtraction mode
assign co = s ? s_A_minus_B[15] : A_plus_B[16]; // get carry-out bit based on subtraction mode
endmodule