// This is a multi-line comment in VERILOG
module example_module (input A, input B, output Y);
// This is a single-line comment in VERILOG
// The module declaration begins with the keyword "module"
// Followed by the name of the module "example_module"
// Input and output ports are specified within parentheses
// Each port is declared with a direction and a name
// Input ports have the keyword "input" before their name
// Output ports have the keyword "output" before their name
// The module definition begins with the keyword "module" followed by the name (in this case "example_module") and a list of input and output ports
// The module definition ends with the keyword "endmodule"

// Inside the module, the statements are executed sequentially
// The order of the statements determines the order of execution

// This is a wire, it is used to connect the output of one logic gate to the input of another
wire wire_output;

// This is an AND gate, it takes two inputs and produces an output that is only high when both inputs are high
// The "and" keyword is used to declare an AND gate
// The inputs are specified within parentheses
// The output is specified after the equals sign
assign wire_output = A & B;

// This is an OR gate, it takes two inputs and produces an output that is high when either input is high
// The "or" keyword is used to declare an OR gate
// The output is also specified after the equals sign
assign wire_output = A | B;

// This is an XOR gate, it takes two inputs and produces an output that is high when only one of the inputs is high
// The "xor" keyword is used to declare an XOR gate
// The output is again specified after the equals sign
assign wire_output = A ^ B;

// This is a NOT gate, it takes one input and produces an inverted output
// The "not" keyword is used to declare a NOT gate
// The input is specified within parentheses
// The output is specified after the equals sign
assign wire_output = ~A;

// The output of the module is determined by the final value of the wire_output wire
assign Y = wire_output;

// End of module definition
endmodule