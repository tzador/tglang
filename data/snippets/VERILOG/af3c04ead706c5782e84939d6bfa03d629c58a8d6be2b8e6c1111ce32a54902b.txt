/*
This code snippet is written in VERILOG and generates a digital counter using a finite state machine.
The counter starts from 00 and goes up to 11, then resets back to 00.
The code uses behavioral modeling and includes a clock and reset signal.
*/

`timescale 1ns / 1ps //specifies the time scale for simulation 

module counter (input clk, reset, output reg [1:0] count); //module declaration with input and output ports

	reg [1:0] next_count; //next state variable

	always @(posedge clk or posedge reset) begin //always block with clock and reset conditions
		if (reset) //checks if reset is asserted
			begin
				next_count = 2'b00; //sets the next state to 00 when reset is asserted
			end
		else
			begin
				case (count) //case statement for current count value
					2'b00: next_count = 2'b01; //transitions to next state 01
					2'b01: next_count = 2'b10; //transitions to next state 10
					2'b10: next_count = 2'b11; //transitions to next state 11
					2'b11: next_count = 2'b00; //transitions back to initial state 00
				endcase
			end
	end

	assign count = next_count; //assigns current state to output port

endmodule //end of module