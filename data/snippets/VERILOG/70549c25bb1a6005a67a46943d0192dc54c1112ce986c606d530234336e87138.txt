//Defining Inputs and Outputs
module AND(output, input1, input2); //creates a module named AND with an output and two inputs
output = input1 & input2; //assigns the output to the logical AND of the two inputs
endmodule //end of module

//Defining Registers
module register(output, input, clock);
reg output; //creates a register named output
input input; //creates an input named input
input clock; //creates an input named clock
always@(posedge clock) //sensitivity list for the always block
output <= input; //assigns the output to the input during a positive clock edge
endmodule //end of module

//Defining flip-flops
module flip_flop(output, input, clock, reset);
output register; //creates an output register
input input; //creates an input named input
input clock; //creates an input named clock
input reset; //creates an input named reset
wire input_data; //creates a wire named input_data
wire output_data; //creates a wire named output_data
AND and_gate1(output_data, input, clock); //calls the AND module to create an internal gate
register reg(output_data, input_data, clock); //calls the register module to create an input register
assign input_data = input & reset; //assigns the input_data to the logical AND of the input and reset signals
assign output = output_data & reset; //assigns the output to the logical AND of the output_data and reset signals
endmodule //end of module

//Defining a full adder using flip-flops
module full_adder(output, input1, input2, carry_in, carry_out);
output [3:0] output; //creates a 4-bit output for the sum and carry out bits
input [1:0] input1; //creates a 2-bit input for the first number
input [1:0] input2; //creates a 2-bit input for the second number
input carry_in; //creates an input for the carry in bit
wire internal_carry1; //creates an internal wire for the first carry
wire internal_carry2; //creates an internal wire for the second carry
flip_flop flipflop1(output[0], input1[0], input2[0], carry_in); //creates a flip-flop for the least significant bit
flip_flop flipflop2(output[1], input1[1], input2[1], internal_carry1); //creates a flip-flop for the second bit
flip_flop flipflop3(output[2], internal_carry2, input2[2], internal_carry1); //creates a flip-flop for the third bit
flip_flop flipflop4(output[3], internal_carry2, input1[3], internal_carry1); //creates a flip-flop for the most significant bit
assign carry_out = internal_carry1 & internal_carry2; //assigns the carry out value to the logical AND of the two internal carries
endmodule //end of module