module alu (input [3:0] operandA, input [3:0] operandB, input [4:0] function, output reg [7:0] result);
	always @ (operandA, operandB, function)
		begin
			case (function)
				0: result = operandA + operandB; // addition
				1: result = operandA - operandB; // subtraction
				2: result = operandA & operandB; // bitwise AND
				3: result = operandA | operandB; // bitwise OR
				4: result = operandA ^ operandB; // bitwise XOR
				5: result = operandA << 1; // shift left by 1
				6: result = operandA >> 1; // shift right by 1
				7: result = operandA * operandB; // multiplication
				8: result = operandA / operandB; // division
				9: result = operandA % operandB; // modulo
				10: if (operandA > operandB)
					result = operandA; // check for max value
				 else
					result = operandB; // else, operandB is max value
				default: result = 0; // default case, result is 0
			endcase
		end
endmodule