module counter (input clk, //clock input
				reset,  //reset input
				input [3:0] set_value,  //input to set the counter value
				output reg [3:0] count); //output of the counter

	//register to store the current count value
	reg [3:0] current_count;

	//synchronous reset condition
	always @ (posedge clk or posedge reset) begin
		if (reset) begin
			current_count <= 4'b0000; //reset count to 0
		else begin
			current_count <= set_value; //set count value
		end
	end
	
	//combinational logic to increment count based on current value
	always @ (current_count) begin
		if (current_count == 4'b1111) begin
			count <= 4'b0000; //reset count back to 0
		else begin
			count <= current_count + 1; //increment count by 1
		end
	end
endmodule //end of module counter