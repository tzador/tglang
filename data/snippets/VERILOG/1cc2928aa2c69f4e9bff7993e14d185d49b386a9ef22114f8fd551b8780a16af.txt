// This is a code snippet in Verilog illustrating a finite state machine
// with Mealy outputs and transition delays

// Define inputs and outputs
module fsm (
	input clk,
	input rst,
	input input_a,
	input input_b,
	output reg output_a
);

// Define states and their transitions
parameter s0 = 2'b00;
parameter s1 = 2'b01;
parameter s2 = 2'b10;

// Define internal signals
reg state; // Current state
reg next_state; // Next state to transition to
reg output_b; // Output for state s2

// Define state transitions and Mealy outputs
always @ (posedge clk) begin
	if (rst) begin
		state <= s0; // Reset to initial state
		next_state <= s0;
		output_a <= 0;
		output_b <= 0;
	end else begin
		state <= next_state; // Transition to the next state
		case (state)
			s0: begin // State s0
				if (input_a) begin
					next_state <= s1; // Transition to state s1 if input_a is high
					output_a <= 0; // Output_a is 0 for state s0
				end else if (input_b) begin
					next_state <= s2; // Transition to state s2 if input_b is high
					output_a <= 1; // Output_a is 1 for state s0
				end
			end
			s1: begin // State s1
				if (input_a) begin
					next_state <= s1; // Stay in state s1 if input_a is high
					output_b <= 1; // Output_b is 1 for state s1
				end else if (input_b) begin
					next_state <= s2; // Transition to state s2 if input_b is high
					output_b <= 0;
				end
			end
			s2: begin // State s2
				if (input_a) begin
					next_state <= s1; // Transition to state s1 if input_a is high
					output_b <= 0;
				end else if (input_b) begin
					next_state <= s2; // Stay in state s2 if input_b is high
					output_b <= 1; // Output_b is 1 for state s2
				end
			end
		endcase
	end
end

endmodule