module ALU (input [7:0] A, B, input [2:0] operation, output reg [7:0] result);
// This module represents an arithmetic logic unit (ALU) that performs basic arithmetic and logical operations on two 8-bit inputs.

always @ (A, B, operation) begin // This begins the always block, which ensures that the output is continuously updated based on the inputs.
  case (operation) // This is used to choose the operation based on the value of the operation input.
    3'b000: result = A + B; // Addition operation between A and B.
    3'b001: result = A - B; // Subtraction operation between A and B.
    3'b010: result = A & B; // Bitwise AND operation between A and B.
    3'b011: result = A | B; // Bitwise OR operation between A and B.
    3'b100: result = A ^ B; // Bitwise XOR operation between A and B.
    3'b101: result = ~A; // Bitwise complement operation on A.
    3'b110: result = A << B; // Left shift operation on A by B bits.
    3'b111: result = A >> B; // Right shift operation on A by B bits.
  endcase
end

endmodule