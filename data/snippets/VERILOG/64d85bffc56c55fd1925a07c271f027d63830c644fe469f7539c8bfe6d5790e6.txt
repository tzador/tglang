// Declaration of input signals for the module
input [7:0] input1; // 8-bit input signal named 'input1'
input [7:0] input2; // 8-bit input signal named 'input2'
input clk; // input clock signal

// Creating internal signals for calculation
reg [8:0] temp; // 9-bit register named 'temp' for storing intermediate values during calculation
wire [7:0] output; // 8-bit wire named 'output' for outputting the final result

// Creating a counter for looping through bits of input signals
reg [3:0] counter = 0; // 4-bit counter initialized to 0

// Module that performs addition of two 8-bit input signals
module adder(
    input [7:0] input1,
    input [7:0] input2,
    input clk,
    output [7:0] output
);
    
    // Synchronous always block that performs addition on rising edge of clock
    always @ (posedge clk) begin
        // Looping through each bit of input signals using the counter
        for (counter = 0; counter < 8; counter = counter + 1) begin
            // Adding corresponding bits of input signals and storing in temp
            temp[counter+1] <= input1[counter] + input2[counter];
        end
        
        // Assigning output wire to the final result stored in temp
        output <= temp[7:0];
    end
    
endmodule

// Instantiating the adder module
adder adder_inst(
    .input1(input1), // connecting input1 signal to the input1 port of adder module
    .input2(input2), // connecting input2 signal to the input2 port of adder module
    .clk(clk), // connecting clk signal to the clk port of adder module
    .output(output) // connecting output signal to the output port of adder module
);

// Code block to test the adder module
always begin
    // Generating a clock signal with 10ns period
    clk = #10 ~clk;
    
    // Assigning random values to input signals
    input1 = $random;
    input2 = $random;
    
    // Printing out the input signals and expected output
    $display("input1 = %d, input2 = %d, expected output = %d", input1, input2, input1 + input2);
    
    // Waiting for 10ns before generating next clock edge
    #10;
end