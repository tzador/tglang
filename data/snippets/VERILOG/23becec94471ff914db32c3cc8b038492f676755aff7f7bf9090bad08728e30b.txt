/*
 This is a code snippet in VERILOG that creates a 4-bit adder with carry-in and carry-out.
 The inputs and outputs are declared as logic vectors.
 This adder uses a hierarchical structure, with a full adder module within a 4-bit adder module.
*/
module fourBitAdder(input [3:0] A, B, //input logic vectors A and B, each with 4 bits
                    input Cin, //carry-in input
                    output [3:0] S, //sum output, also a 4-bit logic vector
                    output Cout); //carry-out output

    wire [3:0] sum; //intermediate wire for the sum of A and B
    wire [3:0] carry; //intermediate wire for the carry-out of each full adder

    //instantiation of four full adder modules, representing each bit
    fullAdder FA0(A[0], B[0], Cin, sum[0], carry[0]);
    fullAdder FA1(A[1], B[1], carry[0], sum[1], carry[1]);
    fullAdder FA2(A[2], B[2], carry[1], sum[2], carry[2]);
    fullAdder FA3(A[3], B[3], carry[2], sum[3], Cout);

    //assign the final sum output
    assign S = sum;
    
    //assign the final carry-out output
    //the final carry-out is the carry-out of the last full adder module
    assign Cout = carry[3];

endmodule //end of fourBitAdder module

//full adder module
module fullAdder(input A, B, Cin, output S, Cout);
    //input and output variables declared as single bits
    input A;
    input B;
    input Cin;
    output S;
    output Cout;

    //combinational logic for the sum output
    assign S = A ^ B ^ Cin; //using xor operator

    //combinational logic for the carry-out output
    assign Cout = (A & B) | (A & Cin) | (B & Cin); //using and and or operators
endmodule //end of fullAdder module