`timescale 1ns / 1ps
module ALU (input [31:0] A, B, // 32-bit input for arithmetic operations
            input [2:0] ALUOp, // 3-bit input for operation selection
            output reg [31:0] result, // 32-bit output for result
            output reg zeroFlag // 1-bit output for zero flag
            );
            
    always @(*) begin
        case (ALUOp)
            3'b000: result = A + B; // add operation
            3'b001: result = A - B; // subtract operation
            3'b010: result = A & B; // bitwise AND operation
            3'b011: result = A | B; // bitwise OR operation
            3'b100: result = A ^ B; // bitwise XOR operation
            3'b101: result = A >>> 1; // logical right shift operation
            3'b110: result = A << 1; // logical left shift operation
            3'b111: result = A ~^ B; // bitwise XNOR operation
        endcase
        zeroFlag = (result == 0) ? 1'b1 : 1'b0; // set zero flag if result is zero
    end
endmodule