// Create a 32-bit adder with carry-in and carry-out

module adder_32bit(in_A, in_B, carry_in, sum, carry_out);

input [31:0] in_A; // 32-bit input A
input [31:0] in_B; // 32-bit input B
input carry_in; // carry-in bit

output [31:0] sum; // 32-bit output sum
output carry_out; // carry-out bit

wire [31:0] temp_sum; // temporary sum wire
wire temp_carry; // temporary carry wire

// Generate the 32 full adders using a for loop
genvar i; // create a generate variable for indexing
generate
for(i=0; i<32; i=i+1) begin
    full_adder fa_inst(
        .in_a(in_A[i]), // index into the 32-bit input A
        .in_b(in_B[i]), // index into the 32-bit input B
        .carry_in(temp_carry), // use the temporary carry wire
        .sum(temp_sum[i]), // index into the temporary sum wire
        .carry_out(temp_carry) // use the temporary carry wire for carry-out
    );
end
endgenerate

assign sum = temp_sum; // assign the temporary sum wire to the 32-bit output sum
assign carry_out = temp_carry; // assign the temporary carry wire to the carry-out bit

endmodule