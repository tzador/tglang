// This module simulates a digital counter that counts up when enabled
module counter(input clk, input enable, input reset, output reg [3:0] count);

    // Define state variables
    reg [3:0] current_state, next_state;

    // Define state parameters
    parameter IDLE = 4'b0000; // Counter is idle, not counting
    parameter COUNTUP = 4'b0001; // Counter is counting up

    // Define state machine logic
    always @(posedge clk) begin
        if (reset) begin // If reset is high, go to idle state
            current_state <= IDLE;
        end
        else if (enable) begin // If enable is high, go to countup state
            current_state <= COUNTUP;
        end
    end

    // Define next state logic
    always @(*) begin
        case(current_state)
            IDLE: begin
                if (reset) begin // If reset is high, stay in idle state
                    next_state = IDLE;
                end
                else if (enable) begin // If enable is high, go to countup state
                    next_state = COUNTUP;
                end
            end
            COUNTUP: begin
                if (reset) begin // If reset is high, go back to idle state
                    next_state = IDLE;
                end
                else if (enable) begin // If enable is high, increment count
                    next_state = current_state + 1;
                end
            end
        endcase
    end

    // Define output logic
    always @(*) begin
        case(current_state)
            IDLE: begin
                count = 4'b0000; // Output 0 in idle state
            end
            COUNTUP: begin
                count = next_state; // Output next state in countup state
            end
        endcase
    end

endmodule