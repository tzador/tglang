// Module Declaration
module adder (
  // Inputs
  input [7:0] num1, // 8-bit input for first number
  input [7:0] num2, // 8-bit input for second number

  // Outputs
  output [8:0] sum // 9-bit output for sum
);

// Declare internal signals
wire [7:0] num1_left_shifted; // 8-bit internal signal for left-shifted num1
wire [7:0] num2_right_shifted; // 8-bit internal signal for right-shifted num2
wire [9:0] carry; // 10-bit internal signal for carry bit

// Left shift num1 by 1 bit
assign num1_left_shifted = {num1[6:0], 1'b0};

// Right shift num2 by 1 bit
assign num2_right_shifted = {1'b0, num2[7:1]};

// Adder logic
assign sum[0] = num1[0] ^ num2[0]; // LSB of sum is XOR of LSBs of num1 and num2
assign carry[0] = num1[0] & num2[0]; // Carry for LSB is AND of LSBs of num1 and num2

// Carry generation logic for remaining bits
genvar i;
generate
  for (i = 1; i < 8; i = i + 1) begin
    assign sum[i] = num1[i] ^ num2[i] ^ carry[i-1]; // Sum is XOR of corresponding bits and carry from previous bit
    assign carry[i] = (num1[i] & num2[i]) | (num1[i] & carry[i-1]) | (num2[i] & carry[i-1]); // Carry is OR of three AND gates
  end
endgenerate

// Add MSB of num1_left_shifted and LSB of num2_right_shifted to final sum
assign sum[8] = num1_left_shifted[7] ^ num2_right_shifted[0] ^ carry[7]; // MSB of sum is XOR of MSB of num1_left_shifted, LSB of num2_right_shifted and carry from previous bit

// End of adder module
endmodule