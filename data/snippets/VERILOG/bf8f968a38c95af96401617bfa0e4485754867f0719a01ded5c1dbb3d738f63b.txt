// Declaring and instantiating a 4-bit adder
module adder4bit(A, B, Cin, S, Cout);
    input [3:0] A, B; // Inputs A and B are 4-bit vectors
    input Cin; // Input Cin is a single bit

    output [3:0] S; // Output S is a 4-bit vector
    output Cout; // Output Cout is a single bit

    wire [3:0] temp; // Internal wire used for intermediate calculations
    wire [4:0] sum; // Internal wire used for sum of inputs and Cin

    assign temp = A + B; // Assigning the result of A + B to temp wire
    assign sum = temp + Cin; // Assigning the sum of temp and Cin to sum wire

    assign Cout = sum[4]; // Assigning the carry bit to Cout output
    assign S = sum[3:0]; // Assigning the 4-bit sum to S output
endmodule

// Testing the 4-bit adder with testbench
module testbench;
    reg [3:0] A, B; // Input reg variables for A and B
    reg Cin;
    wire [3:0] S;
    wire Cout;

    // Instantiating the 4-bit adder module with the inputs and outputs
    adder4bit uut(A, B, Cin, S, Cout);

    // Assigning values to inputs
    initial begin
        A = 4'b0001;
        B = 4'b0010;
        Cin = 1'b0;
    end

    // Printing the inputs and outputs
    always begin
        $display("A = %b, B = %b, Cin = %b, S = %b, Cout = %b", A, B, Cin, S, Cout);
    end

    // Stopping the simulation when the output reaches expected value
    always @(S or Cout) begin
        if (S == 4'b0011 && Cout == 1'b0) begin
            $display("Simulation stopped successfully.");
            $finish;
        end
    end
endmodule