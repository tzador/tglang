/*
This code snippet generates a 16-bit ripple carry adder using structural modelling in Verilog.
It takes in two 16-bit inputs and outputs the result of their addition.
*/

// Define module for 16-bit ripple carry adder
module ripple_carry_adder(
    input [15:0] a, // First 16-bit input
    input [15:0] b, // Second 16-bit input
    output [15:0] sum // Output of addition
);

// Declare internal wires for carry bits
wire [15:0] c; // Array of carry bits

// Instantiate 16 full adders in a chain
// First full adder takes in first bits of a and b, and a carry of 0
// Each subsequent full adder takes the previous carry bit and the next bits of a and b
full_adder fa0(.a(a[0]), .b(b[0]), .c(1'b0), .sum(sum[0]), .cout(c[0]));
full_adder fa1(.a(a[1]), .b(b[1]), .c(c[0]), .sum(sum[1]), .cout(c[1]));
full_adder fa2(.a(a[2]), .b(b[2]), .c(c[1]), .sum(sum[2]), .cout(c[2]));
full_adder fa3(.a(a[3]), .b(b[3]), .c(c[2]), .sum(sum[3]), .cout(c[3]));
full_adder fa4(.a(a[4]), .b(b[4]), .c(c[3]), .sum(sum[4]), .cout(c[4]));
full_adder fa5(.a(a[5]), .b(b[5]), .c(c[4]), .sum(sum[5]), .cout(c[5]));
full_adder fa6(.a(a[6]), .b(b[6]), .c(c[5]), .sum(sum[6]), .cout(c[6]));
full_adder fa7(.a(a[7]), .b(b[7]), .c(c[6]), .sum(sum[7]), .cout(c[7]));
full_adder fa8(.a(a[8]), .b(b[8]), .c(c[7]), .sum(sum[8]), .cout(c[8]));
full_adder fa9(.a(a[9]), .b(b[9]), .c(c[8]), .sum(sum[9]), .cout(c[9]));
full_adder fa10(.a(a[10]), .b(b[10]), .c(c[9]), .sum(sum[10]), .cout(c[10]));
full_adder fa11(.a(a[11]), .b(b[11]), .c(c[10]), .sum(sum[11]), .cout(c[11]));
full_adder fa12(.a(a[12]), .b(b[12]), .c(c[11]), .sum(sum[12]), .cout(c[12]));
full_adder fa13(.a(a[13]), .b(b[13]), .c(c[12]), .sum(sum[13]), .cout(c[13]));
full_adder fa14(.a(a[14]), .b(b[14]), .c(c[13]), .sum(sum[14]), .cout(c[14]));
full_adder fa15(.a(a[15]), .b(b[15]), .c(c[14]), .sum(sum[15]), .cout(c[15]));

endmodule

// Define full adder module
// Takes in two 1-bit inputs, a and b, and the previous carry bit, c
// Outputs the sum and the new carry bit
module full_adder(
    input a, // First input bit
    input b, // Second input bit
    input c, // Previous carry bit
    output sum, // Output of addition
    output cout // New carry bit
);

assign sum = a ^ b ^ c; // Assign output sum using XOR gate
assign cout = (a & b) | (a & c) | (b & c); // Assign new carry bit using OR gate

endmodule