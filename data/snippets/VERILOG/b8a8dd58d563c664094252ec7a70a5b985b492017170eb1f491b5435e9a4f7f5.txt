module adder(
    input [3:0] num1,
    input [3:0] num2,
    output [4:0] result
);
    assign result = num1 + num2;
endmodule

// This is a module called "adder" that takes in two 4-bit inputs, "num1" and "num2", and outputs a 5-bit "result" based on the addition of the two inputs.
// The "module" keyword is used to define a module in Verilog. This is similar to a function or a class in other programming languages.
// The "input" keyword is used to indicate a variable as an input to the module, and the "output" keyword denotes an output variable.
// The brackets "[3:0]" indicate the range of bits for the input or output variable. In this case, both inputs and the output have 4 bits.
// The assign statement is used to perform the addition operation and store the result in the "result" variable.
// Verilog uses the "+" symbol for addition, but instead of performing the operation immediately, it creates a logic gate that adds the two inputs.
// The "endmodule" keyword marks the end of the module definition. The code inside the module must end with a semicolon ";".

// To use this module, we can instantiate it in a higher-level module or within a testbench.
module top();
    // Instantiate the "adder" module
    adder adder_inst(
        .num1(4'b0010), // assign a 4-bit binary value of "0010" to "num1"
        .num2(4'b0101), // assign a 4-bit binary value of "0101" to "num2"
        .result(result) // the output "result" is connected to a wire variable declared in the top module
    );

    // Declare a wire variable "result" to store the output from the adder module
    wire [4:0] result;

    // Display the result using the $display system task
    initial begin
        $display("The result of adding %b and %b is %b", adder_inst.num1, adder_inst.num2, result); // %b is used to display a binary value
    end
endmodule

// Output:
// The result of adding 0010 and 0101 is 10011