// This code snippet is a Verilog module for a 4-bit ripple carry adder
// with 2 input ports (A and B) and 1 output port (sum)

module ripple_carry_adder(A, B, sum);

   // Define inputs A and B as 4-bit vectors
   input [3:0] A, B;
   
   // Define output sum as a 4-bit vector
   output [3:0] sum;
   
   // Instantiate 4 full adders for each bit of the sum
   full_adder FA0(.x(A[0]), .y(B[0]), .z(1'b0), .sum(sum[0]), .carry(carry[0]));
   full_adder FA1(.x(A[1]), .y(B[1]), .z(carry[0]), .sum(sum[1]), .carry(carry[1]));
   full_adder FA2(.x(A[2]), .y(B[2]), .z(carry[1]), .sum(sum[2]), .carry(carry[2]));
   full_adder FA3(.x(A[3]), .y(B[3]), .z(carry[2]), .sum(sum[3]), .carry(carry[3]));

   // Declare a temporary 1-bit vector to hold the carry for each full adder
   wire [3:0] carry;

endmodule

// Define a full adder module with 5 inputs (x, y, z, sum, carry) and 2 outputs (sum, carry)
module full_adder(x, y, z, sum, carry);

   // Define inputs x, y, and z as 1-bit values
   input x, y, z;
   
   // Define outputs sum and carry as 1-bit values
   output sum, carry;
   
   // Declare internal wires to hold intermediate calculation results
   wire s1, s2, carry1, carry2;

   // Calculate sum and carry values using Boolean logic statements
   assign s1 = x ^ y; // XOR gate
   assign sum = s1 ^ z;
   assign s2 = x & y; // AND gate
   assign carry1 = s2 | (s1 & z); // OR and AND gates
   assign carry2 = x & y & z; // AND gate
   
   // Calculate final carry value based on intermediate carry values
   assign carry = carry1 | carry2; // OR gate

endmodule