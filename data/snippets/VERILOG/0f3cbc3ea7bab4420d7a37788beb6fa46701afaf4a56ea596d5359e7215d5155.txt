module top_module (
  input clk,
  input rst,
  input [7:0] data_in,
  output reg [7:0] data_out
  );
  
  /* This code snippet creates a top module with an clock, reset,
  input data bus and output data bus. */
  
  // Registers used for storing previous data and input data
  reg [7:0] prev_data;
  reg [7:0] curr_data;
  
  // Counter for counting number of clock cycles
  reg [31:0] count = 0;
  
  always @(posedge clk) begin
    // Reset counter and output data if reset is asserted
    if (rst) begin
      data_out <= 8'b00000000;
      count <= 0;
      prev_data <= 8'b00000000;
      curr_data <= 8'b00000000;
    end
    // Else, increment counter and store current data in previous data
    else begin
      count <= count + 1;
      prev_data <= curr_data;
      curr_data <= data_in;
      
      // Output the sum of previous data and current data
      data_out <= prev_data + curr_data;
    end
  end
  
endmodule