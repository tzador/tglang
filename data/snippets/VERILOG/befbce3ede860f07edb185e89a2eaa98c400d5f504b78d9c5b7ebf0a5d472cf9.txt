module counter (
  input clk, // clock input
  input reset, // reset input
  input enable, // enable input
  output reg[7:0] count // 8-bit output count
  );
  
  reg[7:0] internal_count; // internal 8-bit counter
  reg[7:0] compare_num; // internal 8-bit register for comparison
  
  always@(posedge clk) begin // always block triggered by positive edge of clock
    if(reset) begin // if reset input is high, reset the counter
      internal_count <= 8'b0; // assign 8-bit 0 to internal count
      compare_num <= 8'b0; // assign 8-bit 0 to compare number
    end else begin // else block for normal operation
      if(enable) begin // if enable input is high, increment counter every clock cycle
        internal_count <= internal_count + 1; // increment internal count by 1
      end
      compare_num <= 8'b10101010; // assign an 8-bit value for comparison
    end
  end
  
  always@(internal_count, enable) begin // always block triggered by changes in internal count or enable input
    if(internal_count == compare_num) begin // if internal count is equal to compare number
      count <= internal_count; // output internal count value to output count
    end else begin // else block for when internal count is not equal to compare number
      count <= 8'b00000000; // output 8-bit 0 to output count
    end
  end
endmodule