to square :size  ; defines a procedure named "square" that takes a parameter "size"
  repeat 4 [  ; loops 4 times
    fd :size  ; moves forward by the value of "size"
    rt 90  ; turns right by 90 degrees
  ]
end  ; ends the procedure
to triangle :size  ; defines a procedure named "triangle" that takes a parameter "size"
  repeat 3 [  ; loops 3 times
    fd :size  ; moves forward by the value of "size"
    rt 120  ; turns right by 120 degrees
  ]
end  ; ends the procedure
to circle :radius  ; defines a procedure named "circle" that takes a parameter "radius"
  repeat 360 [  ; loops 360 times
    fd :radius  ; moves forward by the value of "radius"
    rt 1  ; turns right by 1 degree
  ]
end  ; ends the procedure

to spiral :size :turns  ; defines a procedure named "spiral" that takes two parameters "size" and "turns"
  repeat :turns [  ; loops the value of "turns" times
    fd :size  ; moves forward by the value of "size"
    rt 360 / :turns  ; turns right by the value of 360 degrees divided by "turns"
  ]
end  ; ends the procedure

; call the procedures with desired parameters
square 100  ; calls the "square" procedure and passes 100 as the value for "size"
triangle 50  ; calls the "triangle" procedure and passes 50 as the value for "size"
circle 25  ; calls the "circle" procedure and passes 25 as the value for "radius"
spiral 50 10  ; calls the "spiral" procedure and passes 50 as the value for "size" and 10 as the value for "turns"