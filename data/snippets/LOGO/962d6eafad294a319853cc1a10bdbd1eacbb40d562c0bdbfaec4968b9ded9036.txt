to square :side         ; defines a procedure called "square" with a parameter "side"
  repeat 4 [             ; loop 4 times
    fd :side             ; move forward by the value of "side"
    rt 90                ; turn right 90 degrees
  ]
end                     ; end of procedure
to spiral :length :angle  ; defines a procedure called "spiral" with parameters "length" and "angle"
  if :length > 0 [       ; checks if the value of "length" is greater than 0
    fd :length          ; move forward by the value of "length"
    rt :angle           ; turn right by the value of "angle"
    spiral :length - 1 :angle * 0.95    ; recursively calls "spiral" with adjusted parameters
  ]
end                     ; end of procedure
to drawCircle :radius   ; defines a procedure called "drawCircle" with a parameter "radius"
  repeat 180 [           ; loop 180 times
    fd :radius          ; move forward by the value of "radius"
    rt 2                ; turn right by 2 degrees
  ]
end                     ; end of procedure
to fractal :size        ; defines a procedure called "fractal" with a parameter "size"
  if :size <= 1 [       ; checks if the value of "size" is less than or equal to 1
    fd :size            ; move forward by the value of "size"
  ] else [              ; if not, run the following code
    lt 60               ; turn left by 60 degrees
    fractal :size / 2   ; recursively call "fractal" with half the size
    rt 120              ; turn right by 120 degrees
    fractal :size / 2   ; recursively call "fractal" with half the size
    rt 120              ; turn right by 120 degrees
    fractal :size / 2   ; recursively call "fractal" with half the size
    lt 60               ; turn left by 60 degrees
  ]
end                     ; end of procedure
to generateRandomString :length  ; defines a procedure called "generateRandomString" with a parameter "length"
  make "output ""         ; create a variable "output" and set it to an empty string
  repeat :length [       ; loop "length" times
    make "output (word :output char (random 26 + 65)) ; add a random letter (A-Z) to "output"
  ]
end                     ; end of procedure