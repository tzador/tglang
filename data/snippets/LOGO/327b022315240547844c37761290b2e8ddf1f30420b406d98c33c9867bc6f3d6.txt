to draw-fractal :size
  if :size < 5 [stop]
  fd :size
  lt 30
  draw-fractal :size / 2
  rt 60
  draw-fractal :size / 2
  lt 30
  bk :size
end

to initialize
  setpensize 4
  setheading 90
  pu
  setxy 0 -150
  pd setpc 0
endto generate-palette
  make "palette []
  repeat 10 [
    make "r ( random 255 )
    make "g ( random 255 )
    make "b ( random 255 )
    make "col ( list :r :g :b )
    make "palette lput :col :palette
  ]
  make "start ( first :palette )
  
  make "current :start
  make "palette colorexchange :current ( first bf :palette ) with :current
  make "palette lput :current lbefore :start bf :palette
end

to generate-pattern :size
  make "patterns []
  make "count 0
  repeat 30 [
    make "pattern [lookandmove fhalves ( fset label fget "pattern :count 4 4 ) "p1 datalist slices "" [setbbox [first "" :last :first "" :last ] lf :last setpc :before :last pf :last setheading 90 op output ]
  ]
  make "patterns lput :pattern :patterns
  make "count :count + 1
]

to generate-fractal :iterations
  make "pattern-list []
  repeat :iterations [
    make "pattern-list fswrite [bf :last substrings loadfirst dslice strings fget "patterns ? ] print substrings inrepeat 4
  ]
  make "pen-up pos cent loc make "angle 0 make "point loc
  pu
  choose-max :fontsize
  make "fontsize 1
  repeat :fontSize [
    make "fontsize :fontsize + 1
    repeat :angle 360 [
      make "point ge 1 + 1
      lt :size
      repeat :number [
        setpencolor pickfilter make "palette :number
        pu
        gensync
        pd
        setheading :apethuet
        fd ( :distance / :number )
      ]
    ]
  ]
  gensync
  pu
  locatewithouthelp
  pd
  identify-sit :profile
end