to square :length  \\ creates a procedure called "square" that takes in a parameter "length"
  repeat 4 [        \\ repeat the following code 4 times 
    forward :length \\ move forward by "length" units 
    right 90         \\ turn right by 90 degrees 
  ]
end                \\ end the procedure

to spiral :length :angle :n  \\ creates a procedure called "spiral" that takes in 3 parameters "length", "angle" and "n"
  if :n > 0 [                 \\ if "n" is greater than 0
    forward :length           \\ move forward by "length" units
    right :angle              \\ turn right by "angle" degrees
    spiral :length :angle :n - 1 \\ recursively call the "spiral" procedure with new value of "n"
  ]
end                          \\ end the procedure

to recursive_square :length :angle :n  \\ creates a procedure called "recursive_square" that takes in 3 parameters "length", "angle" and "n"
  if :n > 0 [                           \\ if "n" is greater than 0
    to square :length                  \\ create a nested procedure "square" that takes in "length" as a parameter
      repeat 4 [                        \\ repeat the following code 4 times
        forward :length                 \\ move forward by "length" units
        right 90                         \\ turn right by 90 degrees
      ]
    end                                \\ end the nested "square" procedure

    square :length                    \\ call the nested "square" procedure with "length" as the parameter
    right :angle                      \\ turn right by "angle" degrees 
    recursive_square :length :angle :n - 1  \\ recursively call the "recursive_square" procedure with new value of "n"
  ]
end                                  \\ end the procedure