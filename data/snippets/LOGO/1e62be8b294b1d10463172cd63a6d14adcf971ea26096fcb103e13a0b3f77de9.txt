to polyline :n :length   ; Define a procedure named polyline with two inputs: n and length 
  repeat :n [              ; Use the repeat command to loop through the following code :n times
    forward :length        ; Move forward by the length specified by the user
    right 360/:n           ; Turn right by 360 degrees divided by the number of sides
  ]
end                       ; End of procedure definition

to polygon :n :length   ; Define a procedure named polygon with two inputs: n and length 
  repeat :n [           ; Use the repeat command to loop through the following code :n times
    forward :length     ; Move forward by the length specified by the user
    right 360/:n        ; Turn right by 360 degrees divided by the number of sides
  ]
end                    ; End of procedure definition

to spiral :n :length   ; Define a procedure named spiral with two inputs: n and length 
  setangle 0           ; Set the turtle's angle to 0 degrees
  repeat :n [          ; Use the repeat command to loop through the following code :n times
    forward :length    ; Move forward by the length specified by the user
    right 360/:n       ; Turn right by 360 points divided by the number of sides
    setangle sum :angle 90     ; Change the turtle's angle by adding 90 degrees
  ]
end                     ; End of procedure definition

to snowflake :size    ; Define a procedure named snowflake with an input: size
  repeat 6 [           ; Use the repeat command to loop through the following code 6 times
    forward :size      ; Move forward by the size specified by the user
    right 60           ; Turn right by 60 degrees
    forward :size      ; Move forward by the size specified by the user
    left 120           ; Turn left by 120 degrees
    forward :size      ; Move forward by the size specified by the user
    right 60           ; Turn right by 60 degrees
    backward :size     ; Move backward by the size specified by the user
    right 60           ; Turn right by 60 degrees
    forward :size      ; Move forward by the size specified by the user
    left 120           ; Turn left by 120 degrees
    forward :size      ; Move forward by the size specified by the user
    right 60           ; Turn right by 60 degrees
  ]
end                    ; End of procedure definition

to tree :depth :angle   ; Define a procedure named tree with two inputs: depth and angle
  if :depth > 0 [        ; If the depth is greater than 0, then execute the following code
    forward :depth      ; Move forward by the depth specified by the user
    right :angle        ; Turn right by the angle specified by the user
    tree :depth - 1 :angle  ; Call the tree procedure recursively with a decreased depth value and same angle
    right 180           ; Turn right by 180 degrees
    tree :depth - 1 :angle  ; Call the tree procedure recursively with a decreased depth value and same angle
    right :angle        ; Turn right by the angle specified by the user
    forward :depth      ; Move forward by the depth specified by the user
  ]
end                    ; End of procedure definition

to fractal :depth :length :angle   ; Define a procedure named fractal with three inputs: depth, length and angle
  if :depth > 0 [      ; If the depth is greater than 0, then execute the following code
    forward :length    ; Move forward by the length specified by the user
    right :angle       ; Turn right by the angle specified by the user
    fractal :depth - 1 :length * 0.7 :angle  ; Call the fractal procedure recursively with a decreased depth value, decreased length value and same angle
    left :angle        ; Turn left by the angle specified by the user
    fractal :depth - 1 :length * 0.7 :angle  ; Call the fractal procedure recursively with a decreased depth value, decreased length value and same angle
    backward :length   ; Move backward by the length specified by the user
    right 180          ; Turn right by 180 degrees
    fractal :depth - 1 :length * 0.7 :angle  ; Call the fractal procedure recursively with a decreased depth value, decreased length value and same angle
    right :angle       ; Turn right by the angle specified by the user
    fractal :depth - 1 :length * 0.7 :angle  ; Call the fractal procedure recursively with a decreased depth value, decreased length value and same angle
  ]
end                    ; End of procedure definition

to gradient :color1 :color2 :n :length   ; Define a procedure named gradient with four inputs: color1, color2, n and length
  setcolor :color1                        ; Set the turtle's pen color to color1
  repeat :n [                             ; Use the repeat command to loop through the following code :n times
    setpenwidth :n                        ; Set the pen's width to the value of n
    forward :length                       ; Move forward by the length specified by the user
    setcolor gradient :color1 :color2     ; Set the pen's color to a gradient of color1 and color2
    right 360/:n                          ; Turn right by 360 degrees divided by the number of sides
  ]
end                       ; End of procedure definition