; This code creates a complex geometric pattern using recursion
TO pattern :size :level :angle :shift
  IF :level < 1 [ ; if recursion level is less than 1, halt
    STOP
  ]
  IFELSE :level > 1 [ ; if recursion level is greater than 1
    REPEAT 4 [ ; create 4 sides of the pattern
      FORWARD :size ; move forward by size
      RIGHT 90 ; turn right by 90 degrees
    ]
    PATTERN :size * 0.9 :level - 1 :angle :shift ; recursively call pattern with smaller size and level
    RIGHT :angle ; turn right by angle
    FORWARD :shift ; move forward by shift
    PATTERN :size * 0.9 :level - 1 :angle :shift ; recursively call pattern with smaller size and level
    LEFT :angle ; turn left by angle
    FORWARD :shift ; move forward by shift
    PATTERN :size * 0.9 :level - 1 :angle :shift ; recursively call pattern with smaller size and level
    RIGHT :angle ; turn right by angle
    FORWARD :shift ; move forward by shift
    PATTERN :size * 0.9 :level - 1 :angle :shift ; recursively call pattern with smaller size and level
  ] [ ; else if recursion level is 1
    REPEAT 4 [ ; create 4 sides of the pattern
      FORWARD :size ; move forward by size
      RIGHT 90 ; turn right by 90 degrees
    ]
  ]
END
PATTERN 100 4 30 10 ; call the pattern procedure with starting size of 100, recursion level of 4, angle of 30 degrees, and shift of 10 units