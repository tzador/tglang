//This code snippet is a QML component that creates a custom button with different visual states
Item {
    id: customButton

    width: 200
    height: 100

    property bool isPressed: false //property to track if the button is currently pressed

    Rectangle {
        anchors.fill: parent
        color: "#2E86C1" //default color of the button

        states: [
            State {
                name: "pressed"
                when: customButton.isPressed //change color when pressed
                PropertyChanges {
                    target: customButton
                    color: "#CD5C5C"
                }
            },
            State {
                name: "hovered"
                when: customButton.hovered //change color when hovered
                PropertyChanges {
                    target: customButton
                    color: "#F4D03F"
                }
            }
        ]

        transitions: Transition {
            SerialAnimation {
                PropertyAction {
                    target: customButton
                    property: "color" //animation to smoothly transition between states
                    from: "#2E86C1"
                    to: "#CD5C5C"
                    duration: 500
                }
            }
        }
    }

    Text {
        text: "Click me!"
        font.bold: true
        color: "#FFF"
        font.pixelSize: 24
        anchors.centerIn: parent //center text within the button
    }

    MouseArea { //detect mouse clicks and change state of button
        anchors.fill: parent
        onClicked: customButton.isPressed = true
        onPressed: customButton.isPressed = false
    }
}