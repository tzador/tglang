import QtQuick 2.0          // Import QtQuick module

Item {                      // Define an empty Item object
    id: myItem              // Assign an id to the Item

    width: 200              // Set width to 200 pixels
    height: 200             // Set height to 200 pixels
    
    property color color: "red"         // Define a property called color and assign it a value of "red"
    
    Rectangle {                         // Define a Rectangle
        anchors.fill: parent            // Set the Rectangle's anchors to fill the parent Item
        color: myItem.color             // Set Rectangle's color to the value of myItem's color property
        
        Text {                          // Define a Text element
            text: "Hello World!"        // Set the text to display
            font.pixelSize: 24          // Set font size to 24 pixels
            anchors.centerIn: parent    // Center the Text element within the parent Rectangle
        }
    }
    
    MouseArea {                         // Define a MouseArea to handle mouse events
        anchors.fill: parent            // Set MouseArea's anchors to fill the parent Item
        onClicked: {                    // Define an onClicked handler
            console.log("Mouse clicked!")   // Output "Mouse clicked!" to console
        }
    }
    
    states: [                           // Define a list of states
        State {                         // Define a State
            name: "selected"            // Set the name of the state
            when: myItem.color == "blue"// Define the condition for this state to be active
            
            PropertyChanges {           // Define changes to be applied when this state is active
                target: myItem          // Target the myItem object
                color: "orange"         // Change the color property to "orange"
            }
        },
        State {                         // Define another State
            name: "unselected"          // Set the name of the state
            when: myItem.color == "red" // Define the condition for this state to be active
            
            PropertyChanges {           // Define changes to be applied when this state is active
                target: myItem          // Target the myItem object
                color: "green"          // Change the color property to "green"
            }
        }
    ]
    
    transitions: [                          // Define a list of transitions
        Transition {                        // Define a transition
            from: "*"                       // Set the starting state of the transition to any state
            to: "*"                         // Set the ending state of the transition to any state
            NumberAnimation {               // Define a NumberAnimation to animate properties
                properties: "x, y"          // Set the properties to animate
                easing.type: Easing.OutBounce  // Set the easing type to create a bouncing effect
                duration: 1000              // Set animation duration to 1000 milliseconds
            }
        }
    ]
}