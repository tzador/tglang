// This code snippet creates a navigation drawer with multiple pages
// The drawer is anchored to the left side of the parent item
Drawer {
  id: navDrawer // define an id to access the drawer properties
  edge: Qt.Left // set the anchor to the left side
  width: parent.width * 0.8 // set the width to 80% of the parent item's width
  visible: false // set the initial visibility to false 

  // add a list view to display the different pages
  ListView {
    id: navList // define an id to access the list properties
    anchors.fill: parent // make the list fill the drawer
    clip: true // clip the content to the drawer's boundaries

    // define the model for the list view
    model: ListModel {
      ListElement {
        pageName: "Home"
        pageComponent: Qt.createComponent("pages/HomePage.qml")
      }
      ListElement {
        pageName: "About"
        pageComponent: Qt.createComponent("pages/AboutPage.qml")
      }
      ListElement {
        pageName: "Contact"
        pageComponent: Qt.createComponent("pages/ContactPage.qml")
      }
    }

    // create delegate to display each item in the list view
    delegate: ItemDelegate {
      // set the height of the delegate to 50
      height: 50
      // add a row and column layout to the delegate
      RowLayout {
        anchors.fill: parent
        // display the page name in a text item
        Text {
          text: model.pageName
          font.bold: true
        }
        // add a spacer to push the text item to the left
        LayoutMirroring {
          anchors.fill: parent
          spacing: 10
          Rectangle {
            Layout.preferredWidth: 10
          }
        }

        // add an arrow icon to the right of the page name
        Image {
          source: "icons/arrow.png"
          // set the width to 20
          width: 20
          // set the height to match the height of the text item
          height: parent.height
          // horizontally center the icon
          anchors.verticalCenter: parent.verticalCenter
          // define a signal handler for when the icon is clicked
          MouseArea {
            anchors.fill: parent
            // when clicked, emit the clickedPage signal and pass in the page name as a parameter
            onClicked: {
              navDrawer.close() // close the drawer
              clickedPage(model.pageName) // emit the signal with the page name
            }
          }
        }
      }
    }
  }
}