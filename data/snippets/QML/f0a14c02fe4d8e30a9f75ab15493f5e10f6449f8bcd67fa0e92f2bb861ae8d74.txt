/* This is a QML code snippet that creates a complex user interface with multiple nested components
and uses various properties and bindings to dynamically update the interface based on user input */

import QtQuick 2.15 // Import QtQuick version 2.15

Item { // Create an Item component to hold the nested components

    /* Define the properties for the parent component
    These will be used to dynamically update the interface */

    property bool showDetails: false // A boolean property to toggle the display of details
    property int selectedIndex: 0 // An integer property to track the selected index of a list

    width: 800 // Set the width of the component to 800 pixels
    height: 600 // Set the height of the component to 600 pixels

    Column { // Create a Column component to hold the nested components

        /* Set the Column's properties to align its children
        and give it some spacing between components */

        anchors.fill: parent // Set the Column to fill the parent Item
        spacing: 10 // Set the spacing between components to 10 pixels
        horizontalAlignment: Qt.AlignHCenter // Set the horizontal alignment to center

        Text { // Create a Text component to display a title
            text: "User Interface" // Set the text to display
            font.pixelSize: 20 // Set the font size to 20 pixels
        }

        Rectangle { // Create a Rectangle component to act as a container
            color: "lightblue" // Set the color of the rectangle to light blue
            radius: 10 // Set the corner radius to 10 pixels
            width: 300 // Set the width of the rectangle to 300 pixels
            height: 400 // Set the height of the rectangle to 400 pixels

            Column { // Create a nested Column to hold components inside the rectangle
                anchors.fill: parent // Set the Column to fill the parent Rectangle
                spacing: 10 // Set the spacing between components to 10 pixels

                Rectangle { // Create a nested Rectangle to act as a header
                    color: "lightgray" // Set the color of the rectangle to light gray
                    radius: parent.radius // Use the parent's corner radius to maintain consistency
                    width: parent.width // Set the width to match the parent's width
                    height: 50 // Set the height to 50 pixels

                    Text { // Create a nested Text component to display a label
                        id: label // Assign an id to be used for binding later
                        text: "Details" // Set the text to display
                        font.bold: true // Set the font to bold
                        font.pixelSize: 18 // Set the font size to 18 pixels
                        anchors.centerIn: parent // Set the text to be centered in the parent
                    }
                }

                Column { // Create another nested Column for the content inside the rectangle
                    anchors.fill: parent // Set the Column to fill the parent Rectangle
                    spacing: 5 // Set the spacing between components to 5 pixels
                    visible: parent.showDetails // Use parent property to toggle visibility

                    Text { // Create a Text component to display a label
                        text: "Name" // Set the text to display
                        font.bold: true // Set the font to bold
                        font.pixelSize: 16 // Set the font size to 16 pixels
                        anchors.horizontalCenter: parent.horizontalCenter // Set the label to be centered
                    }

                    TextField { // Create a TextField component for user input
                        id: name // Assign an id to be used for binding later
                        placeholderText: "Enter your name" // Set a placeholder text
                        width: parent.width * 0.9 // Set the width to be 90% of the parent's width
                    }

                    Text { // Create another Text component to display a label
                        text: "Age" // Set the text to display
                        font.bold: true // Set the font to bold
                        font.pixelSize: 16 // Set the font size to 16 pixels
                        anchors.horizontalCenter: parent.horizontalCenter // Set the label to be centered
                    }

                    SpinBox { // Create a SpinBox component for numerical input
                        minimumValue: 0 // Set the minimum value
                        maximumValue: 100 // Set the maximum value
                        id: age // Assign an id to be used for binding later
                        value: 25 // Set a default value
                    }

                    Text { // Create another Text component to display a label
                        text: "Gender" // Set the text to display
                        font.bold: true // Set the font to bold
                        font.pixelSize: 16 // Set the font size to 16 pixels
                        anchors.horizontalCenter: parent.horizontalCenter // Set the label to be centered
                    }

                    ComboBox { // Create a ComboBox component for selecting a gender
                        id: gender // Assign an id to be used for binding later
                        model: ["Male", "Female", "Non-Binary"] // Set the model options
                        width: parent.width * 0.9 // Set the width to be 90% of the parent's width
                    }

                    Text { // Create another Text component to display a label
                        text: "Hobbies" // Set the text to display
                        font.bold: true // Set the font to bold
                        font.pixelSize: 16 // Set the font size to 16 pixels
                        anchors.horizontalCenter: parent.horizontalCenter // Set the label to be centered
                    }

                    ListView { // Create a ListView component to display a list of hobbies
                        id: hobbies // Assign an id to be used for binding later
                        model: ["Reading", "Sports", "Cooking", "Gaming"] // Set the model options
                        height: contentHeight // Set the height to fit the contents
                        width: parent.width * 0.9 // Set the width to be 90% of the parent's width
                        highlight: Rectangle { // Set a custom highlight for the selected item
                            color: "lightgreen" // Set the color to light green
                            radius: 10 // Set the corner radius to 10 pixels
                        }
                        focus: true // Set focus to allow keyboard navigation
                        onCurrentIndexChanged: parent.selectedIndex = currentIndex // Update parent property
                    }

                    Text { // Create another Text component to display a label
                        text: "Selected Hobby: " + hobbies.currentItem // Bind to the current item in the list
                        font.bold: true // Set the font to bold
                        font.pixelSize: 16 // Set the font size to 16 pixels
                        visible: hobbies.currentItem // Show the label only if there is a selected hobby
                    }
                }
            }
        }

        Button { // Create a Button component to toggle the display of details
            text: "Show" // Set the text to display
            onClicked: showDetails = !showDetails // Toggle the boolean property to show/hide details
            anchors.right: parent.right // Set the button to the right side of the parent
        }
    }
}