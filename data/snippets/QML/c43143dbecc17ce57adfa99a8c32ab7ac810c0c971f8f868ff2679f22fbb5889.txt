import QtQuick 2.12 // importing QML version 2.12 of the QtQuick module

/*!
 * The Flickable element represents a scrollable area that can display
 * it's content either horizontally or vertically, with optional content
 * bouncing at the endpoints.
 */
Flickable {
    // setting the width to match the parent element
    width: parent.width

    // setting the height to match the parent element
    height: parent.height

    // setting the flickable's content width
    contentWidth: imageGrid.width

    // setting the flickable's content height
    contentHeight: imageGrid.height

    // defining the flickable's content
    Rectangle {
        id: imageGrid // assigning an id to this element

        // setting the width to match the parent element
        width: parent.width

        // setting the height to match the parent element
        height: parent.height

        // defining a list of colors to display in the grid
        ListModel {
            id: colorModel // assigning an id to this element

            // defining the items in the list
            ListElement {
                color: "red"
            }
            ListElement {
                color: "blue"
            }
            ListElement {
                color: "green"
            }
            ListElement {
                color: "yellow"
            }
            ListElement {
                color: "orange"
            }
            ListElement {
                color: "purple"
            }
        }

        // creating a GridView element to display the list of colors in a grid layout
        GridView {
            anchors.fill: parent // setting the anchors to fill the parent element
            model: colorModel // setting the model of the GridView to the list of colors
            cellWidth: parent.width / 3 // setting the width of each cell to one third of the parent element
            cellHeight: parent.height / 3 // setting the height of each cell to one third of the parent element
            delegate: Rectangle { // defining the delegate for each cell
                width: parent.width / 3 // setting the width of the delegate to one third of the parent element
                height: parent.height / 3 // setting the height of the delegate to one third of the parent element
                color: model.color // binding the color property to the color of the current item in the list
            }
        }
    }
}