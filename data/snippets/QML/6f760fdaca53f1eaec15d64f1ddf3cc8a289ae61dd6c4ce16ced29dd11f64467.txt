// Define a custom item

Item {
    id: customItem
    x: 100  // Set a specific x position
    y: 200  // Set a specific y position
    width: 300  // Set a width of 300 units
    height: 400  // Set a height of 400 units
    color: "red"  // Set color to red
    visible: true  // Make item visible
    opacity: 0.5  // Set opacity to 50%
    rotation: 45  // Rotate item by 45 degrees
    scale: 2  // Scale item by a factor of 2
    clip: true  // Enable clipping of child items
    antialiasing: true  // Enable antialiasing
    focus: true  // Set item as focusable
    enabled: true  // Enable user interaction with item
    anchors {  // Set anchors for item
        horizontalCenter: parent.horizontalCenter  // Center item horizontally
        top: parent.top  // Align top of item with top of parent
        margins: 20  // Set margins of 20 units on all sides
    }
    transform: Rotation {  // Apply transformation to item
        origin.x: 0.5  // Set origin point for rotation
        origin.y: 0.5
        angle: 30  // Rotate item by 30 degrees
    }
    states: State {  // Define states for item
        name: "active"  // Set name of state
        when: customItem.active  // Activate state when "active" property is true
        PropertyChanges {  // Change properties when state is active
            x: 150
            color: "blue"
        }
    }
    transitions: Transition {  // Define transitions for switching between states
        from: "inactive"  // Set state to transition from
        to: "active"  // Set state to transition to
        PropertyAnimation {  // Animate x position
            target: customItem
            property: "x"
            from: 100
            to: 150
            duration: 500  // Animation duration of 500ms
        }
        PropertyAnimation {  // Animate color
            target: customItem
            property: "color"
            from: "red"
            to: "blue"
            duration: 500  // Animation duration of 500ms
        }
    }
    MouseArea {  // Define mouse area for item
        anchors.fill: parent  // Take up entire area of parent item
        onClicked: {  // Triggered when item is clicked
            customItem.active = !customItem.active  // Toggle "active" property
        }
    }
}