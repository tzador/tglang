/*This code snippet creates a custom button with a gradient effect*/

Item {
    id: button
    width: 200
    height: 60
    property color gradientColor: "#2F80ED, #56CCF2" //defines the colors for gradient
    property real gradientAngle: -135 //defines the gradient angle in degrees

    Rectangle { //defines the main button shape
        anchors.fill: parent
        radius: 10
        color: "#f5f5f5"
        border.color: "black"
        border.width: 1

        gradient: Gradient { //defines the gradient
            GradientStop { position: 0.0; color: button.gradientColor.split(",")[0] } //sets the first color stop
            GradientStop { position: 1.0; color: button.gradientColor.split(",")[1] } //sets the second color stop
            GradientStop { position: 0.5; color: Qt.lighten(button.gradientColor.split(",")[0], 0.2) } //sets a lighter color in the middle for gradient effect
        }
    }

    Text {
        anchors.centerIn: parent
        text: "Custom Button"

        font.pixelSize: 24
        color: "white"
    }

    MouseArea { //creates a hover effect when the cursor is over the button
        anchors.fill: parent
        hoverEnabled: true
        cursorShape: Qt.PointingHandCursor

        Rectangle {
            anchors.fill: parent
            radius: 10
            color: gradientAngle > 0 ? Qt.lighten(button.gradientColor.split(",")[0], 0.2) : Qt.lighten(button.gradientColor.split(",")[1], 0.2) //sets a lighter color based on gradient angle
            visible: hover
            opacity: 0.8
        }
    }

    /*The code below creates a pressed effect when the button is clicked*/

    //sets the initial button state
    states: State {
        name: "initial"
        PropertyChanges {
            target: button
            scale: 1
            gradientAngle: -135
        }
    }

    //changes the button state when it is pressed
    MouseArea {
        anchors.fill: parent
        onPressed: {
            button.state = "pressed"
        }
    }

    /*The code below creates a transition between the initial state and the pressed state*/

    //defines the transition
    transitions: Transition {
        to: "pressed"
        PropertyAnimation {
            properties: "scale, gradientAngle"
            duration: 100
            easing.type: Easing.InOutQuad
        }
    }

    //changes the button state back to initial when it is released
    MouseArea {
        anchors.fill: parent
        onReleased: {
            button.state = "initial"
        }
    }
}