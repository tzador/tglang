// This is a QML component that displays a circular progress bar

import QtQuick 2.0

Item {
  id: progressBar
  
  // defining variables for progress bar dimensions
  property int radius: 50 // radius of the circle
  property int lineWidth: 10 // width of progress line
  
  // defining variables for progress bar colors
  property color outerColor: "lightgray" // color of the outer circle
  property color innerColor: "gray" // color of the inner circle
  property color progressColor: "blue" // color of the progress line
  
  // make the progress bar a circle shape
  function shapePath() {
    var path = new Path();
    path.addEllipse(0, 0, radius * 2, radius * 2);
    return path;
  }
  
  Rectangle {
    // setting the progress bar dimensions
    width: radius * 2
    height: radius * 2
    
    // making the rectangle round
    radius: radius
    
    // using the shapePath function to make it a circle
    shape: shapePath()
    
    // Setting properties for the progress line
    color: innerColor // color of the inner circle
    border.color: outerColor // color of the outer circle
    border.width: lineWidth // width of progress line
    
    // Setting clip property to true so that progress line stays inside the circle
    clip: true
    
    // Creating a mask for progress line using an Image
    mask: Image {
      // Source for the image is a transparent progress bar image
      source: "transparent-progress-bar.png"
    }
  }
  
  // Create a second Rectangle for the actual progress line
  Rectangle {
    // Setting the dimensions for the progress line
    width: radius * 2
    height: radius * 2
    
    // Making it round
    radius: radius
    
    // Using same shapePath function to make it a circle
    shape: shapePath()
    
    // Setting color to the progressColor variable
    color: progressColor
    
    // Adjusting the width based on the progress percentage
    width: radius + Math.round(Math.cos(Math.PI * -2 * (progress / 100))) * (radius - (lineWidth / 2))
    
    // Setting clip property to true so that progress line stays inside the circle
    clip: true
    
    // Setting the z value to ensure that the progress line is behind the inner and outer circles
    z: -1
  }
  
  // Adding a text label to show progress percentage
  Text {
    // Aligning it in the center of the progress bar
    anchors.centerIn: parent
    
    // Setting the z value to ensure that the text is on top of the progress line
    z: 1
    
    // Converting progress percentage to a string and adding a percentage sign
    text: progress.toString() + "%"
    
    // Setting a larger font size to make it more visible
    font.pixelSize: 20
  }
}