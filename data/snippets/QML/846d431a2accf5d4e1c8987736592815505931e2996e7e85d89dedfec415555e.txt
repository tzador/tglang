// This is a QML code snippet for a simple calculator

import QtQuick 2.12
import QtQuick.Controls 2.12

Item { // define an item for the calculator
   id: calc
   width: 400; height: 600 // set the dimensions of the calculator
   property real result // property to hold the result of calculations

   Column { // define a column to hold the calculator display and buttons
       id: displayCol
       anchors.fill: parent
       spacing: 10 // spacing between elements in the column

       // calculator display
       Text {
           id: display
           text: result // displays the current result
           font.pixelSize: 40 // set font size to 40 pixels
           anchors.horizontalCenter: parent.horizontalCenter // center the display horizontally
           width: parent.width - 20 // set display width to parent width - 20
           horizontalAlignment: Text.AlignRight // align text to the right
       }

       // calculator buttons
       Grid {
           columns: 4 // set number of columns in the grid to 4
           spacing: 10 // spacing between buttons
           anchors.centerIn: parent // center the grid in the column

           // define buttons for numbers 0-9 and decimal point
           NumberButton { // customized button for numbers
               text: "7"
               onClicked: display.text = display.text + text // add number to display when clicked
           }

           NumberButton {
               text: "8"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "9"
               onClicked: display.text = display.text + text
           }

           OperatorButton { // customized button for operators
               text: "/"
               backgroundColor: "orange" // set button background color
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "4"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "5"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "6"
               onClicked: display.text = display.text + text
           }

           OperatorButton {
               text: "*"
               backgroundColor: "orange"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "1"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "2"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "3"
               onClicked: display.text = display.text + text
           }

           OperatorButton {
               text: "-"
               backgroundColor: "orange"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "0"
               onClicked: display.text = display.text + text
           }

           NumberButton {
               text: "."
               onClicked: display.text = display.text + text
           }

           OperatorButton {
               text: "+"
               backgroundColor: "orange"
               onClicked: display.text = display.text + text
           }

           // clear button
           Button {
               text: "C"
               onClicked: display.text = "" // clear display when clicked
           }

           // equals button
           Button {
               text: "="
               onClicked: {
                   result = eval(display.text) // evaluate and store the result in the property
                   display.text = result // update the display with the result
               }
           }
       }
   }
}

// Customized button for numbers
// Inherits properties and signals from QML Button element
// Contains specialized styling and onClicked signal handler
// Has a text property to display the number on the button

Item {
   id: numberButton // set id of the button to numberButton
   property alias text // create text property

   // styling for the button
   property alias backgroundColor: backgroundRectangle.color // create property for background color of button
   property int borderWidth: 2 // create property for border width of button
   property alias borderColor: borderRectangle.color // create property for border color of button
   property string fontColor: "white" // create property for font color of button

   signal clicked // create onClicked signal


   // button background rectangle
   Rectangle {
       id: backgroundRectangle
       width: 60; height: 60 // set dimensions of the button
       radius: 10 // set corner radius of the button
       color: "black" // set default background color

       // border rectangle
       Rectangle {
           id: borderRectangle
           anchors.fill: parent // fill the parent rectangle
           color: borderColor // set color to borderColor property
           radius: 10 // set corner radius to match parent rectangle
           anchors.margins: borderWidth // set margins for the border

           Rectangle {
               color: backgroundColor // set color to backgroundColor property
               anchors.fill: parent // fill the parent rectangle
               radius: 10 // set corner radius to match parent rectangle
               anchors.margins: borderWidth * 2 // set margins to be twice the border width
           }

           // button text
           Text {
               text: parent.text // bind to parent's text property
               font.pixelSize: 24 // set font size to 24 pixels
               color: fontColor // bind to fontColor property
               anchors.centerIn: parent // center text in parent rectangle
           }
       }
   }

   // signal handler for when button is clicked
   MouseArea {
       anchors.fill: parent // fill the parent item
       onClicked: {
           clicked() // emit clicked signal
       }
   }
}

// Customized button for operators
// Inherits from customized numberButton element
// Contains specialized styling and onClicked signal handler

Item {
   id: operatorButton // set id of the button to operatorButton
   // inherits properties and signals from customized numberButton
   // text, backgroundColor, borderWidth, borderColor, and fontColor
   property alias text // create text property

   // set properties and signals from parent numberButton element
   parent: numberButton

   // styling for the button
   // uses parent's backgroundColor, borderWidth, borderColor, and fontColor properties
   property alias backgroundColor: backgroundRectangle.color // bind to parent's backgroundColor property
   property alias borderColor: borderRectangle.color // bind to parent's borderColor property

   // button background rectangle
   Rectangle {
       id: backgroundRectangle
       // inherits properties and signals from parent numberButton
       parent: numberButton

       // set dimensions of the button
       width: 60
       height: 60

       // style the rectangle to have a more rounded top edge
       radius: 10
       clip: true // clip the button to its parent rectangle
       Rectangle {
           anchors.fill: parent // fill the parent rectangle
           clip: true // clip to parent's rectangle
           color: parent.backgroundColor // bind to parent's backgroundColor property
           radius: parent.radius // bind to parent's radius property
           anchors.margins: parent.borderWidth // bind to parent's borderWidth property
       }

       // style the rectangle to have a more square bottom edge
       Rectangle {
           anchors.bottom: parent.bottom // align to bottom of button
           width: parent.width // match parent's width
           height: parent.height - parent.width // set height to parent's height - parent's width
           color: backgroundColor // bind to backgroundColor property
       }

       // button text
       Text {
           text: parent.text // bind to parent's text property
           font.pixelSize: 24 // set font size to 24 pixels
           color: fontColor // bind to fontColor property
           anchors.centerIn: parent // center text in parent rectangle
       }
   }

   // signal handler for when button is clicked
   MouseArea {
       anchors.fill: parent // fill the parent item
       onClicked: {
           clicked() // emit clicked signal
       }
   }
}