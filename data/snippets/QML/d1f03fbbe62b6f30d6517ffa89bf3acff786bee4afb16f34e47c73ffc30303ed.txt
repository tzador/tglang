// This code creates a custom button with a gradient background and hover effect
import QtQuick 2.12
import QtQuick.Controls 2.12

Button {
  id: customButton                  // Creates an id for referencing the button in other parts of the code
  width: 200                        // Sets the width of the button to 200 pixels
  height: 50                        // Sets the height of the button to 50 pixels
  text: "Click Me"                  // Sets the text displayed on the button to "Click Me"
  font.bold: true                   // Makes the text bold
  font.pointSize: 16                // Sets the font size to 16
  font.family: "Arial"              // Sets the font family to Arial
  
  background: Rectangle {
    border.color: "#303030"         // Sets the border color to a dark gray
    gradient: Gradient {            // Creates a gradient background
      GradientStop {                // Specifies the colors and positions of the gradient stops
        position: 0                 // Sets the first gradient stop at the start of the gradient (0%)
        color: "#ff6a00"            // Sets the color to a bright orange
      }
      GradientStop {
        position: 1                 // Sets the second gradient stop at the end of the gradient (100%)
        color: "#fe0e8b"            // Sets the color to a bright pink
      }
    }
  }
  
  property color hoverColor: "#f9cb0a"    // Creates a custom property for the hover color
  
  states: [                              // Adds a state for the hover effect
    State {
      name: "hovered"                    // Sets the name of the state to "hovered"
      PropertyChanges {
        target: customButton             // Specifies the button that the changes will affect
        background.gradient: Gradient {  // Changes the background gradient to a brighter one
          GradientStop {
            position: 0
            color: "#ffea00"
          }
          GradientStop {
            position: 1
            color: "#ff1493"
          }
        }
      }
    }
  ]
  
  transitions: Transition {         // Adds a transition for the hover effect
    NumberAnimation {               // Animates the color change when the button is hovered over
      target: customButton
      property: "hoverColor"
      duration: 300
      easing.type: Easing.OutQuad
    }
  }
  
  onEntered: {                            // Changes the hover color to yellow when the button is entered
    customButton.hoverColor = "#ffee13"
  }
  onExited: {                             // Changes the hover color back to the original when the button is exited
    customButton.hoverColor = "#f9cb0a"
  }
}