Item {
    id: root // this is the root item
    property int width // this is a property representing the width of the item
    property int height // this is a property representing the height of the item

    Rectangle {
        id: rect // this is the rectangle child item
        width: root.width // binds the rectangle's width to the root's width property
        height: root.height // binds the rectangle's height to the root's height property
        color: "red" // sets the rectangle's color to red
        anchors.centerIn: parent // positions the rectangle at the center of its parent
        rotation: 45 // rotates the rectangle by 45 degrees
        border.width: 2 // sets the width of the border to 2 pixels
        border.color: "black" // sets the border color to black
    }

    MouseArea {
        anchors.fill: parent // covers the entire parent item to detect mouse events
        onClicked: { // defines a JavaScript function to be executed when the mouse is clicked
            if (rect.rotation === 45) { // checks if the rectangle is already rotated at 45 degrees
                rect.rotation = 0 // if it is, set the rotation back to 0
            } else { // if not, rotate the rectangle back to 45 degrees
                rect.rotation = 45
            }
        }
    }

    states: [ // defines a list of states for the item
        State {
            name: "rotated" // name of the state
            PropertyChanges { // defines changes to be applied when the item is in this state
                target: rect // sets the target item to be the rectangle
                rotation: 45 // sets the rotation of the rectangle to 45 degrees
            }
        },
        State {
            name: "default" // name of the state
            PropertyChanges { // defines changes to be applied when the item is in this state
                target: rect // sets the target item to be the rectangle
                rotation: 0 // sets the rotation of the rectangle to 0 degrees
            }
        }
    ]

    transitions: [ // defines a list of transitions to animate between states
        Transition { // defines a single transition
            from: "*" // from any state
            to: "rotated" // to the "rotated" state
            PropertyAnimation { // animates a single property
                target: rect // target item
                property: "rotation" // property to animate
                duration: 500 // animation duration in milliseconds
                easing.type: Easing.InOutCubic // easing function to use
            }
        },
        Transition {
            from: "*" // from any state
            to: "default" // to the "default" state
            PropertyAnimation {
                target: rect
                property: "rotation"
                duration: 500
                easing.type: Easing.InOutCubic
            }
        }
    ]
}