// This code snippet uses a GridView element to display a list of items
GridView {
    id: gridView
    width: parent.width // sets the width of the GridView to the width of its parent
    height: parent.height // sets the height of the GridView to the height of its parent
    anchors.centerIn: parent // centers the GridView within its parent

    // generators are used to populate the GridView with items
    // in this case, the model is an integer array with 20 elements
    model: 20
    delegate: Item {
        width: gridView.cellWidth // sets the width of the delegate to the cell width of the GridView
        height: gridView.cellHeight // sets the height of the delegate to the cell height of the GridView

        // the index property represents the current item's index in the model
        // the text of the delegate will display the index of each item
        Text {
            text: index
        }

        // the color of the delegate will be determined by the index
        // items with even indexes will have a red background, odd indexes will have a blue background
        // the color will animate when the user hovers over the item
        color: index % 2 === 0 ? "#FF0000" : "#0000FF"
        Behavior on color {
            NumberAnimation {
                on: "color"
                loops: Animation.Infinite // the animation will loop infinitely
                PropertyAnimation {
                    target: color
                    property: "color"
                    from: "#0000FF"
                    to: "#FF0000"
                    duration: 1000 // each loop will take 1 second to complete
                }
            }
        }
    }
}