import QtQuick 2.12 // Importing QtQuick version 2.12
Rectangle { // Creating a rectangle
    id: rect // Giving the rectangle an id
    width: 200 // Setting the width to 200
    height: 200 // Setting the height to 200

    property int count: 0 // Creating a property with type integer and initial value of 0
    property color color1: "red" // Creating a property with type color and initial value of "red"

    SequentialAnimation { // Creating a sequential animation
        loops: Animation.Infinite // Setting the animation to loop infinitely

        NumberAnimation { // Creating a number animation
            target: rect // Setting the target of the animation to be the rectangle
            property: "x" // Setting the property of the animation to be the x value of the rectangle
            from: 0 // Starting value for the animation
            to: 100 // Ending value for the animation
            duration: 2000 // Duration of the animation in milliseconds
            easing.type: Easing.InOutQuad // Setting the easing type of the animation
        }

        NumberAnimation { // Creating another number animation
            target: rect // Setting the target of the animation to be the rectangle
            property: "y" // Setting the property of the animation to be the y value of the rectangle
            from: 0 // Starting value for the animation
            to: 100 // Ending value for the animation
            duration: 2000 // Duration of the animation in milliseconds
            easing.type: Easing.InOutQuad // Setting the easing type of the animation
        }

        NumberAnimation { // Creating a third number animation
            target: rect // Setting the target of the animation to be the rectangle
            property: "width" // Setting the property of the animation to be the width of the rectangle
            from: 200 // Starting value for the animation
            to: 400 // Ending value for the animation
            duration: 2000 // Duration of the animation in milliseconds
            easing.type: Easing.InOutQuad // Setting the easing type of the animation
        }

        NumberAnimation { // Creating a fourth number animation
            target: rect // Setting the target of the animation to be the rectangle
            property: "height" // Setting the property of the animation to be the height of the rectangle
            from: 200 // Starting value for the animation
            to: 400 // Ending value for the animation
            duration: 2000 // Duration of the animation in milliseconds
            easing.type: Easing.InOutQuad // Setting the easing type of the animation
        }
    }

    MouseArea { // Creating a mouse area
        anchors.fill: parent // Making the mouse area cover the entire parent (in this case, the rectangle)
        onClicked: { // Defining a function when the mouse is clicked
            count += 1 // Incrementing the count property by 1
            if (count % 2 === 0) { // Checking if the count is even
                rect.color1 = "green" // Changing the color to green
            } else { // If the count is odd
                rect.color1 = "red" // Changing the color back to red
            }
        }
    }

    Text { // Creating a text object
        anchors.centerIn: parent // Centering the text within the parent (rectangle)
        text: "Click me to change color!" // Setting the text to be displayed
        font.pixelSize: 20 // Setting the font size in pixels
        font.bold: true // Making the text bold
    }

    Component.onCompleted: { // Function that runs when the rectangle is completed
        console.log("Rectangle completed!") // Logging a message to the console
    }
}