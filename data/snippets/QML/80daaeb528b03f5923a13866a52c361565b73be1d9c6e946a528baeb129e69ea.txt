// This code snippet creates a custom reusable button in QML

Button {
    id: customButton // assigns an id to the button
    objectName: "MyButton" // sets the object name for easy reference
    text: "Click me" // sets the button text
    anchors.centerIn: parent // centers the button in its parent container
    width: 100 // sets the button width
    height: 30 // sets the button height
    property bool hovered: false // creates a property for tracking hover state
    property alias hoveredColor: background.color // creates alias for button background color
    property alias pressCommand: onClicked // creates alias for button click handler
    color: hovered ? "#DDDDDD" : "#AAAAAA" // ternary operator for changing button color on hover
    radius: 5 // sets the button corner radius

    signal clicked() // creates a custom signal for button click handler

    Rectangle { // creates a rectangle to act as button background
        id: background
        anchors.fill: parent // fills the dimensions of the parent button
        gradient: Gradient {
            GradientStop { position: 0 ; color: "steelblue" } // sets gradient stop at position 0 with steelblue color
            GradientStop { position: 1 ; color: "lightsteelblue" } // sets gradient stop at position 1 with lightsteelblue color
        }
        radius: parent.radius // sets radius to match parent button
    }

    Text { // creates text element for button label
        id: label
        text: parent.text // sets text to match parent button
        anchors.centerIn: parent // centers text in button
        font { pixelSize: 14 } // sets font size to 14 pixels
    }

    MouseArea { // creates mouse area for tracking mouse events
        anchors.fill: parent // ensures mouse area fills the button dimensions
        hoverEnabled: true // enables hover tracking
        onEntered: hovered = true // sets hover state to true on mouse enter
        onExited: hovered = false // sets hover state to false on mouse exit
        onClicked: customButton.clicked() // emits custom signal on button click
    }
}