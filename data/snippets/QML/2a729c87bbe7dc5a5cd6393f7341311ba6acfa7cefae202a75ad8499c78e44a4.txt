// This code snippet creates a custom button with a gradient background and various hover animations

import QtQuick 2.12
import QtQuick.Controls 2.5

Rectangle { // Creates a rectangle as the base of the button
    width: 150
    height: 50
    border.width: 1

    gradient: Gradient { // Creates a gradient for the background of the rectangle
        GradientStop { position: 0; color: "#4169E1" } // Specifies the starting color of the gradient
        GradientStop { position: 1; color: "#1E90FF" } // Specifies the ending color of the gradient
    }

    MouseArea { // Creates a mouse area to detect hover and click events
        anchors.fill: parent // Fills the entire rectangle
        hoverEnabled: true

        // Hover animations for the button
        Behavior on opacity { // Changes opacity when the mouse is hovered over the button
            NumberAnimation { duration: 200 }
        }

        Behavior on scale { // Scales the button slightly when hovered over
            NumberAnimation { duration: 200 }
        }

        onEntered: { // Function executed when the mouse hovers over the button
            opacity = 0.8 // Changes the opacity to 0.8 to create a hover effect
            scale = 1.05 // Scales the button up by 5%
        }

        onExited: { // Function executed when the mouse leaves the button
            opacity = 1 // Resets the opacity back to 1
            scale = 1 // Resets the scale back to 1
        }

        onClicked: { // Function executed when the button is clicked
            console.log("Button clicked!") // Prints a message to the console
        }
    }

    Text { // Creates the text displayed on the button
        anchors.centerIn: parent // Centers the text in the rectangle
        text: "Click Me!" // Specifies the text to be displayed
        font.bold: true // Makes the text bold
        font.pixelSize: 20 // Sets the font size to 20 pixels
        color: "white" // Sets the text color to white
    }
}