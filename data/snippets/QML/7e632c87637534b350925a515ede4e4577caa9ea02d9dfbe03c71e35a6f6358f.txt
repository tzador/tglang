// This code snippet creates a custom button with dynamic properties and a gradient background

import QtQuick 2.0
import QtQuick.Controls 1.4

Rectangle {
    width: 200
    height: 60
    color: "lightgrey"

    property bool pressed: false // dynamic property that keeps track of button press
    property color gradientStart: "steelblue" // dynamic property that defines gradient start color
    property color gradientEnd: "lightblue" // dynamic property that defines gradient end color

    MouseArea {
        anchors.fill: parent
        hoverEnabled: true

        onEntered: {
            pressed = true // set pressed to true when mouse hovers over the button
            gradientStart = "lightblue" // change gradient start color to lightblue
            gradientEnd = "steelblue" // change gradient end color to steelblue
        }
        onExited: {
            pressed = false // set pressed to false when mouse exits the button
            gradientStart = "steelblue" // change gradient start color to steelblue
            gradientEnd = "lightblue" // change gradient end color to lightblue
        }
    }

    Rectangle {
        anchors.fill: parent
        color: pressed ? "darkgrey" : "lightgrey" // change color to darkgrey when button is pressed
        radius: 5 // rounded corners

        // gradient background
        gradient: Gradient {
            GradientStop { position: 0.0; color: root.gradientStart } // gradient start color
            GradientStop { position: 1.0; color: root.gradientEnd } // gradient end color
        }

        Text {
            anchors.centerIn: parent
            text: "Custom Button" // button label
            font.bold: true
        }
    }
}