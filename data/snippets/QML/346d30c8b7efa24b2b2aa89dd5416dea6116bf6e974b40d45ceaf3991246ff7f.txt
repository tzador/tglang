// This example creates a custom RadioButton component that displays a label and has a dynamic background color
import QtQuick 2.15

Item {
    width: 200
    height: 100

    // Define a property to hold the label text
    property string labelText: "Option 1"

    // Define a property to hold the radio button status
    property bool radioChecked: false

    // Define a property to hold the background color
    property color backgroundColor: "#82c759"

    // Create a MouseArea to handle mouse clicks
    MouseArea {
        anchors.fill: parent // Fill the entire area
        onClicked: radioChecked = true // Set radioChecked to true when clicked
    }

    // Create a Rectangle for the radio button
    Rectangle {
        anchors.verticalCenter: parent.verticalCenter
        anchors.left: parent.left
        width: 20
        height: 20
        border.width: 2
        border.color: "#000000"
        radius: 10
        color: radioChecked ? "#f4a460" : "#ffffff" // Dynamic color based on radioChecked status
    }

    // Create a Label for the radio button text
    Label {
        anchors.verticalCenter: parent.verticalCenter
        anchors.left: parent.left
        anchors.right: parent.right
        text: labelText // Use the defined property for the label text
        font.pixelSize: 16
        color: radioChecked ? "#ffffff" : "#000000" // Dynamic color based on radioChecked status
    }

    // Create a Rectangle as the background
    Rectangle {
        anchors.fill: parent // Fill the entire area
        color: backgroundColor // Use the defined property for the background color
        radius: 5
    }
}