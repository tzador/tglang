//This code snippet is a small example showing a complex UI layout with different components and states.

import QtQuick 2.0

//First we define a Rectangle component that will serve as our main container.
//This Rectangle has a gradient color, a size and a border radius.
Rectangle {
    id: mainContainer
    width: 800 
    height: 600
    color: Gradient {
        GradientStop { position: 0.0; color: "lightblue" }
        GradientStop { position: 1.0; color: "lightgreen" }
    }
    radius: 20

    //Inside the main container, we have two RowLayouts.
    //One RowLayout contains a Text component and a Button component, while the other RowLayout contains two Rectangle components.
    RowLayout {
        anchors.centerIn: parent
        spacing: 20 //sets the space between components

        //The first component in the RowLayout is a Text component.
        //This Text component has a font size and color defined.
        Text {
            text: "Hello World!"
            font.pixelSize: 24
            color: "white"
        }

        //The next component is a Button, with an onClicked signal handler.
        //When clicked, it will change the state of the main container to reveal a hidden Text component.
        Button {
            text: "Click Me!"
            onClicked: mainContainer.state = "showText"
        }
    }

    //The second RowLayout is used to hold two Rectangle components side by side.
    //These two Rectangle components have different colors and sizes.
    RowLayout {
        anchors.bottom: parent.bottom
        spacing: 20

        //The first Rectangle is red and has a width of 200 and height of 100.
        Rectangle {
            width: 200
            height: 100
            color: "red"
        }

        //The second Rectangle is blue and has a width of 400 and height of 50.
        Rectangle {
            width: 400
            height: 50
            color: "blue"
            radius: 10 //sets a border radius for the rectangle
        }
    }

    //Lastly, we define a State element that will change the visibility of a hidden Text component when activated.
    states: State {
        name: "showText"

        //The specified changes will occur when the state is activated.
        //In this case, the hidden Text component's visibility will change to true.
        PropertyChanges {
            target: hiddenText
            visible: true
        }
    }

    //The hidden Text component is initially set to be invisible, until the state is activated.
    Text {
        id: hiddenText
        text: "Congratulations, you found the hidden text!"
        font.pixelSize: 18
        color: "black"
        visible: false
        anchors.centerIn: parent
    }
}