import QtQuick 2.0 // Importing the QtQuick module with a specific version

Item { // Defining an Item element

    id: root // Assigning an id to the Item element

    readonly property Item properties: Item { // Defining a readonly Item property with an initializer
        y: 100
        sourceComponent: Item { // Defining the source component
            Rectangle { // Defining a Rectangle component within the source component
                color: "red"
                width: 50
                height: 50
                radius: 5
            }
        }
    }

    Component.onCompleted: { // Adding an onCompleted handler to the Item component
        console.log("Component completed.")
    }

    QtObject { // Defining a QtObject component within the Item element
        id: internalObject // Assigning an id to the QtObject component
        property var internalProp: "Internal Property"
    }

    property Component complexProp: Rectangle { // Defining a complex property with an initializer
        color: "blue"
        width: 100
        height: 100
        radius: 10

        Rectangle { // Defining a Rectangle component within the complex property
            color: root.color // Binding to the color property of the root Item element
            width: 50
            height: 50
            radius: 5
        }
    }

    onWidthChanged: { // Adding a signal handler to the widthChanged signal
        console.log("Width changed to " + width)
    }

    states: [ // Defining a list of states for the Item component
        State { // Defining a State element
            name: "active" // Assigning a name to the state
            when: root.width > 100 // Defining the conditions for the state to be active
            PropertyChanges { // Defining changes to properties when the state is active
                target: root // Targeting the root Item element
                color: "green" // Changing the color property to "green"
            }
        },
        State { // Defining another State element
            name: "inactive" // Assigning a name to the state
            when: root.width < 100 // Defining the conditions for the state to be active
            PropertyChanges { // Defining changes to properties when the state is active
                target: root // Targeting the root Item element
                color: "gray" // Changing the color property to "gray"
            }
        }
    ]

    transitions: [ // Defining a list of transitions for the Item component
        Transition { // Defining a Transition element
            to: "active" // Defining the target state for the transition
            NumberAnimation { // Defining a NumberAnimation component within the Transition element
                properties: "width" // Targeting the width property
                duration: 500 // Defining the duration of the animation
                easing.type: Easing.InOutQuad // Defining the easing type
            }
        },
        Transition { // Defining another Transition element
            to: "inactive" // Defining the target state for the transition
            NumberAnimation { // Defining a NumberAnimation component within the Transition element
                properties: "width" // Targeting the width property
                duration: 500 // Defining the duration of the animation
                easing.type: Easing.InOutQuad // Defining the easing type
            }
        }
    ]

    Rectangle { // Defining a Rectangle component within the Item element
        id: rect // Assigning an id to the Rectangle component
        color: "orange"
        width: 200
        height: 200
        radius: 20
        visible: true

        Text { // Defining a Text component within the Rectangle element
            id: text // Assigning an id to the Text component
            text: "This is a long and complex code snippet in QML." // Setting the text property
            font.pixelSize: 20 // Changing the font size
            anchors.centerIn: parent // Anchoring the Text component in the center of the Rectangle component
        }
    }
}