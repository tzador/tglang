// This code snippet creates a complex interface for a calendar app

import QtQuick 2.0
import QtQuick.Controls 2.12

Rectangle {
   id: root
   width: 600
   height: 400
   color: "white"

   property var currentMonth: new Date().getMonth() // property for storing the current month and controlling which month is displayed on the calendar

   Row { // row for displaying the month and navigating between months
      anchors.horizontalCenter: parent.horizontalCenter
      spacing: 10

      Text {
         text: ["January","February","March","April","May","June","July","August","September","October","November","December"][currentMonth] // dynamically display the current month
         font.pixelSize: 20
         style: Text.Outline // outline style for better visibility
         wrapMode: Text.WordWrap // wrap the text if it's too long
         color: "black"
      }

      Button {
         text: "Previous"
         onClicked: currentMonth-- // decrease current month by one on click
         enabled: currentMonth != 0 // disable button if current month is January (i.e. 0)
         font.pixelSize: 16
      }

      Button {
         text: "Next"
         onClicked: currentMonth++ // increase current month by one on click
         enabled: currentMonth != 11 // disable button if current month is December (i.e. 11)
         font.pixelSize: 16
      }
   }

   Row {
      anchors.horizontalCenter: parent.horizontalCenter

      Repeater {
         model: 7 // repeat 7 times for 7 days in a week

         Text {
            text: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][index] // dynamically display the days of the week
            font.pixelSize: 18
            style: Text.Bold // bold style for the days of the week
            wrapMode: Text.WordWrap // wrap the text if it's too long
            color: "black"
            horizontalAlignment: Text.AlignHCenter // center the text horizontally
         }
      }
   }

   ColumnLayout {
      anchors.horizontalCenter: parent.horizontalCenter

      Repeater {
         model: new Date(new Date().getFullYear(), currentMonth + 1, 0).getDate() // repeat for the number of days in the current month using the Date() function
         delegate: DayButton { // custom delegate for the day buttons
            day: index + 1 // set the day number as the button's "day" property
            month: currentMonth // pass the current month to the button
            year: new Date().getFullYear() // pass the current year to the button
         }
      }
   }

   Item {
      anchors.fill: parent
      z: 5

      Rectangle { // highlight the current day on the calendar
         width: root.width / 8
         height: root.height / 8
         y: ((new Date().getDay() - 1) % 7) * (root.height / 8) // calculate the y position based on the current day (shifted by one to account for Sunday being the 0th day)
         color: "lightblue"
      }
   }

   states: [ // states for animating the calendar
      State { // state for sliding to the left
         name: "slideLeft"
         PropertyChanges { target: root; x: -600 }
      },
      State { // state for sliding to the right
         name: "slideRight"
         PropertyChanges { target: root; x: 600 }
      }
   ]

   transitions: Transition { // transition for animating between states
      NumberAnimation { properties: "x"; duration: 250 } // animate the x property with a duration of 250 milliseconds
   }
}