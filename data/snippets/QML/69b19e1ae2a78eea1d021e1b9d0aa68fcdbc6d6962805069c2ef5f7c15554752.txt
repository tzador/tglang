// This code snippet creates a custom button with multiple states and transitions

Rectangle {
    id: customButton // unique identifier for this button
    width: 200 // initial width of the button
    height: 50 // initial height of the button
    color: "lightblue" // initial color of the button

    // various states that the button can have
    states: [
        State {
            name: "normal" // default state when the button is not being clicked
            PropertyChanges {
                target: customButton // the button whose property is changing
                width: 200 // width remains the same
                height: 50 // height remains the same
                color: "lightblue" // color remains the same
            }
        },
        State {
            name: "pressed" // state when the button is being clicked
            PropertyChanges {
                target: customButton
                width: 190 // width decreases by 10px
                height: 40 // height decreases by 10px
                color: "darkblue" // color changes to a darker shade of blue
            }
        },
        State {
            name: "hovered" // state when the mouse is hovered over the button
            PropertyChanges {
                target: customButton
                width: 210 // width increases by 10px
                height: 60 // height increases by 10px
                color: "lighterblue" // color changes to a lighter shade of blue
            }
        }
    ]

    // transitions between different states
    transitions: [
        Transition {
            from: "normal" // transition from the normal state
            to: "pressed" // to the pressed state when clicked
            MouseArea {
                // behavior when the mouse is clicked on the button
                anchors.fill: parent // fill the entire button
                onClicked: customButton.state = "pressed" // change the state of the button when clicked
            }
        },
        Transition {
            from: "pressed" // transition from the pressed state
            to: "hovered" // to the hovered state when the mouse is over the button
            MouseArea {
                anchors.fill: parent // fill the entire button
                hoverEnabled: true // enable hover
            }
        },
        Transition {
            from: "hovered" // transition from the hovered state
            to: "normal" // to the normal state when the mouse leaves the button
            MouseArea {
                anchors.fill: parent // fill the entire button
                onExited: customButton.state = "normal" // change the state of the button when the mouse exits
            }
        }
    ]
}