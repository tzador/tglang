/ This code snippet creates a custom progress bar component in QML

import QtQuick 2.12 // Import the QtQuick module
import QtQuick.Controls 2.12 // Import the QtQuick Controls module

Item { // Define the root element of the component
    id: progressBar // Give the component an id for referencing later
    width: 200 // Set the desired width of the component
    height: 20 // Set the desired height of the component
    property double value: 0 // Define a property 'value' which will hold the progress percentage of the bar
    property int borderWidth: 1 // Define a property 'borderWidth' which will hold the desired border width of the bar
    property alias color: bar.color // Alias the 'color' property to the color of the bar element
    property alias backgroundColor: background.color // Alias the 'backgroundColor' property to the color of the background element
    
    Rectangle { // Create the bar element which will display the progress
        id: bar // Give the bar element an id for referencing later
        anchors.fill: parent // Set the bar to fill the entire component
        color: "green" // Set the default color of the bar
        border.color: "black" // Set the default color of the border
        border.width: progressBar.borderWidth // Use the borderWidth property to set the border width
        clip: true // Clip the bar if it extends beyond the component boundaries
        Behavior on width { // Add a behavior to animate the width of the bar when the value changes
            NumberAnimation { duration: 500 } // Set the duration of the animation
        }
    }
    
    Rectangle { // Create the background element which will display the remaining progress
        id: background // Give the background element an id for referencing later
        anchors.fill: parent // Set the background to fill the entire component
        color: "grey" // Set the default color of the background
        clip: true // Clip the background if it extends beyond the component boundaries
        Behavior on width { // Add a behavior to animate the width of the background when the value changes
            NumberAnimation { duration: 500 } // Set the duration of the animation
        }
    }
    
    Timer { // Create a timer to update the progress of the bar
        id: progressTimer // Give the timer an id for referencing later
        interval: 50 // Set the interval at which the timer will trigger
        running: true // Start the timer immediately
        repeat: true // Make the timer repeat indefinitely
        onTriggered: { // Define the function to run when the timer triggers
            if (progressBar.value < 100) { // Check if the progress is less than 100%
                progressBar.value += 1 // Increment the progress by 1
            } else { // When progress reaches 100%
                progressBar.value = 0 // Reset the progress to 0
            }
        }
    }
}