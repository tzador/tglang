/*!
 * Imports specific and aliased modules from the Qt library.
 */
import QtQuick 2.12
import QtQuick.Controls 2.12 as QtCtrl
import QtQuick.Layouts 1.12

/*!
 * Defines a Window element with specified properties.
 * Window is the top level QML element that defines a window for a Qt Quick view.
 */
Window {
    id: mainWindow // assigns an identifier to the Window element

    width: 800 // sets the width of the window to 800 pixels
    height: 600 // sets the height of the window to 600 pixels
    color: "gray" // sets the background color of the window

    /*!
     * Adds a RowLayout element as the child element.
     * RowLayout allows items to be horizontally aligned in a row.
     */
    RowLayout {
        anchors.fill: parent // sets the RowLayout to fill the parent element (Window)
        
        /*!
         * Adds a Rectangle element as a child item.
         * Rectangle is a basic graphical element that can be filled, stroked or used to clip other items.
         */
        Rectangle {
            id: leftRect // assigns an identifier to the Rectangle element

            width: mainWindow.width / 2 // sets the width of the Rectangle to half of the window width
            height: parent.height // sets the height of the Rectangle to equal the parent element height
            color: "lightblue" // sets the color of the Rectangle

            /*!
             * Adds a MouseArea element as a child item.
             * MouseArea allows detecting mouse events within a specified area.
             */
            MouseArea {
                anchors.fill: parent // sets the MouseArea to fill the parent element (Rectangle)
                
                // detects when the mouse is clicked and the Rectangle is pressed (clicked)
                onClicked: {
                    leftRect.color = "lightgreen" // changes the color of the Rectangle to light green
                    rightRect.color = "lightgray" // changes the color of the Rectangle to light gray
                }
            }
        }
        
        /*!
         * Adds a Rectangle element as a child item.
         * This Rectangle element will be aligned to the right of the RowLayout.
         */
        Rectangle {
            id: rightRect // assigns an identifier to the Rectangle element

            width: mainWindow.width / 2 // sets the width of the Rectangle to half of the window width
            height: parent.height // sets the height of the Rectangle to equal the parent element height
            color: "lightgray" // sets the color of the Rectangle

            /*!
             * Adds a Text element as a child item.
             * Text is a graphical element that displays a piece of text.
             */
            Text {
                anchors.centerIn: parent // centers the Text element inside the parent element (Rectangle)
                font.pointSize: 36 // sets the font size to 36 points
                text: "Click me!" // sets the text to be displayed
            }
        }
    }
    
    /*!
     * Defines an Item element as a child item.
     * Item is a basic visual element without a visible appearance.
     */
    Item {
        anchors.fill: parent // sets the Item element to fill the parent element (Window)
        
        /*!
         * Adds a Rectangle element as a child item.
         * This Rectangle element will be positioned on top of the other elements.
         */
        Rectangle {
            width: parent.width // sets the width of the Rectangle to equal the parent element width
            height: parent.height // sets the height of the Rectangle to equal the parent element height
            color: "transparent" // sets the color of the Rectangle to transparent
            
            /*!
             * Adds a Gradient element as the Rectangle's gradient.
             * Gradient allows specifying a color gradient for filling graphical elements.
             */
            gradient: Gradient {
                GradientStop { position: 0.0; color: "white" } // adds a gradient stop at 0% with white color
                GradientStop { position: 0.1; color: "lightgray" } // adds a gradient stop at 10% with light gray color
                GradientStop { position: 0.9; color: "lightgray" } // adds a gradient stop at 90% with light gray color
                GradientStop { position: 1.0; color: "white" } // adds a gradient stop at 100% with white color
            }
        }
    }
}