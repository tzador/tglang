/*
This is a complex code snippet in QML that creates a custom button
with a gradient background and a drop shadow effect.
It also includes a mouse area and animations.

Author: John Smith
*/

Rectangle {
    id: customButton // assigns an id to the button for later reference
    width: 200; height: 50 // sets the size of the button

    // gradient background
    Gradient {
        id: gradient // assigns an id to the gradient for animations
        GradientStop { position: 0; color: "red" } // starting color at 0%
        GradientStop { position: 1; color: "blue" } // ending color at 100%
    }
    background: gradient // sets the gradient as the background

    // drop shadow effect
    DropShadow {
        source: customButton // sets the source for the drop shadow
        horizontalOffset: 5 // shifts the shadow to the right
        verticalOffset: 5 // shifts the shadow down
        color: "#333"; radius: 10 // sets the color and radius of the shadow
        samples: 16 // number of samples used for the blur effect
    }

    // text inside the button
    Text {
        id: buttonText // assigns an id to the text for animations
        text: "Custom Button" // sets the text to display
        color: "white" // sets the color of the text
        font.bold: true // makes the text bold
        font.pointSize: 20 // sets the font size
        anchors.centerIn: parent // centers the text inside the button
    }

    // mouse area to capture clicks
    MouseArea {
        id: mouseArea // assigns an id to the mouse area for animations
        anchors.fill: parent // makes the mouse area cover the entire button
        onClicked: console.log("Button clicked!") // prints a message when clicked
        onEntered: buttonText.text = "Click Me!" // changes text when mouse enters
        onExited: buttonText.text = "Custom Button" // changes text when mouse exits
    }

    // animations for the button
    states: [
        // state for when mouse is pressed
        State {
            name: "pressed"
            PropertyChanges {
                target: gradient // targets the gradient for changes
                GradientStop { position: 0; color: "blue" } // changes starting color
                GradientStop { position: 1; color: "red" } // changes ending color
            }
            PropertyChanges {
                target: mouseArea // targets the mouse area for changes
                scale: 0.9 // shrinks the mouse area when pressed
            }
            PropertyChanges {
                target: buttonText // targets the text for changes
                y: 5 // moves the text down when pressed
            }
        },
        // default state when button is not pressed
        State {
            name: "default"
            PropertyChanges {
                target: gradient // targets the gradient for changes
                GradientStop { position: 0; color: "red" } // resets starting color
                GradientStop { position: 1; color: "blue" } // resets ending color
            }
            PropertyChanges {
                target: mouseArea // targets the mouse area for changes
                scale: 1 // returns mouse area to original size
            }
            PropertyChanges {
                target: buttonText // targets the text for changes
                y: 0 // resets text position
            }
        }
    ]

    // transitions for smooth animation
    transitions: Transition {
        NumberAnimation { properties: "scale, y" } // animates scale and y properties
        ColorAnimation { target: gradient } // animates color changes in the gradient
    }
}