// This is a QML code snippet that creates a complex layout with multiple nested components

// Define a custom component called 'Rectangle' with properties for its color and size 
Rectangle {
    id: rect1
    color: "red"
    width: 200
    height: 100
    // Add an inner Text component that displays the text "Hello World!"
    Text {
        text: "Hello World!"
        // Add a property binding for the font size based on the parent Rectangle's height
        font.pixelSize: parent.height * 0.2 
        anchors.centerIn: parent
    }
}

// Add a second Rectangle component with a different color and position
Rectangle {
    id: rect2
    color: "#52ADC8"
    // Add a property binding for the size based on the first Rectangle's width
    width: rect1.width * 2
    height: 150
    // Add an inner Rectangle component with a different color and position
    Rectangle {
        color: "yellow"
        // Add property bindings for the size and position based on the parent Rectangle
        width: parent.width * 0.5
        height: parent.height * 0.5
        anchors.bottom: parent.bottom
        anchors.left: parent.left
        // Add an inner Text component that displays the text "Inner Rectangle"
        Text {
            text: "Inner Rectangle"
            // Add a property binding for the font size based on the parent Rectangle's width
            font.pixelSize: parent.width * 0.08 
            anchors.centerIn: parent
        }
    }
}

// Add a third Rectangle component that overlays the second Rectangle
// This will create a layered effect for the layout
Rectangle {
    id: rect3
    color: "purple"
    // Add property bindings for the size and position based on the second Rectangle
    width: rect2.width * 0.8
    height: rect2.height * 0.8
    anchors.centerIn: rect2
    // Add an inner Text component that displays the text "Overlay Rectangle"
    Text {
        text: "Overlay Rectangle"
        // Add a property binding for the font size based on the parent Rectangle's width
        font.pixelSize: parent.width * 0.06 
        anchors.centerIn: parent
    }
}