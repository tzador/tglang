import QtQuick 2.12
import QtQuick.Window 2.12

// define a root item
Window {
    id: root // set an id for referencing the root item

    // define properties of the root item
    visible: true // set the root item to be visible
    width: 600 // set the width of the root item to be 600
    height: 400 // set the height of the root item to be 400
    title: "Complex Code Snippet" // set the title of the root item to be 'Complex Code Snippet'

    // define a property to store a list of names
    property var names: ["John", "Jane", "Mary"]

    // define a property to store a dictionary of information
    property var info: {
        "John": { age: 25, city: "New York" },
        "Jane": { age: 30, city: "London" },
        "Mary": { age: 28, city: "Sydney" }
    }

    // define a delegate component to display each item in the list
    Component { // component allows reuse of code for each item
        id: nameDelegate
        Item { // define item as base for delegate
            // define properties for each item within the delegate
            width: parent.width // item width matches parent width
            height: root.height / names.length // item height divided evenly among list
            anchors.horizontalCenter: parent.horizontalCenter // horizontally centered within parent
            anchors.top: parent.top // aligned to top of parent
            clip: true // clip contents to item boundaries

            Text { // define text item for displaying names
                text: modelData // retrieve data from model (list in this case)
                font.pixelSize: 20 // set font size to 20 pixels
                anchors.centerIn: parent // center text within item
            }

            Rectangle { // define rectangle item for displaying information
                color: info[modelData].color // retrieve color from dictionary based on name
                width: parent.width // item width matches parent width
                height: parent.height // item height matches parent height
                anchors.bottom: parent.bottom // aligned to bottom of parent
                anchors.left: parent.left // aligned to left of parent
                anchors.right: parent.right // aligned to right of parent
                
                Text { // define text item for displaying age
                    text: "Age: " + info[modelData].age // retrieve age information from dictionary based on name
                    font.pixelSize: 12 // set font size to 12 pixels
                    anchors.top: parent.top // aligned to top of parent
                    anchors.horizontalCenter: parent.horizontalCenter // horizontally centered within parent
                }

                Text { // define text item for displaying city
                    text: "City: " + info[modelData].city // retrieve city information from dictionary based on name
                    font.pixelSize: 12 // set font size to 12 pixels
                    anchors.bottom: parent.bottom // aligned to bottom of parent
                    anchors.horizontalCenter: parent.horizontalCenter // horizontally centered within parent
                }
            }
        }
    }

    // create a ListModel to store the names
    ListModel {
        id: nameModel
        ListElement { name: "John" }
        ListElement { name: "Jane" }
        ListElement { name: "Mary" }
    }

    Column {
        // use the delegate component to display each item in the names list
        Repeater {
            id: nameRepeater
            model: nameModel // set the model to be the ListModel created earlier
            delegate: nameDelegate // set the delegate to be the component created earlier
        }
    }
}