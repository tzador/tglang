// This code creates a custom button with different properties

import QtQuick 2.12
import QtQuick.Controls 2.12

Button {
    id: customBtn
    text: "Custom Button" // sets the text of the button
    width: 200 // sets the width of the button
    height: 50 // sets the height of the button
    x: 100 // sets the x position of the button
    y: 100 // sets the y position of the button
    font {
        family: "Arial" // sets the font family
        pixelSize: 18 // sets the font size
        bold: true // sets the font to bold
        capitalization: Font.AllUppercase // sets font capitalization to uppercase
        letterSpacing: 1 // sets the letter spacing of the font
        wordSpacing: 3 // sets the word spacing of the font
        kerning: true // sets kerning to true
        renderType: Text.NativeRendering // sets the text rendering type
    }
    color: "pink" // sets the color of the button
    background: Rectangle { // creates a rectangle as background for the button
        color: "white" // sets the color of the rectangle
        radius: 10 // sets the radius of the corners of the rectangle
    }
    BorderImage { // sets an image as border for the button
        source: "border.png" // sets the source of the image
        border { // sets the borders of the image
            left: 10 // sets the left border width
            right: 10 // sets the right border width
            top: 5 // sets the top border width
            bottom: 5 // sets the bottom border width
        }
        center: false // sets the centering of the image to false
    }
    onClicked: console.log("Button clicked!") // prints a message to the console when the button is clicked
    onHoveredChanged: {
        if (hovered) console.log("Button hovered!") // prints a message to the console when the button is hovered over
    }
    onReleased: console.log("Button released!") // prints a message to the console when the button is released
    onPressed: console.log("Button pressed!") // prints a message to the console when the button is pressed
    onPressedChanged: {
        if (pressed) console.log("Button is currently pressed!") // prints a message to the console when the button is currently pressed
    }
    onClicked: {
        mouse.accepted = false // ensures that other onClicked handlers are not triggered when this button is clicked
    }
}