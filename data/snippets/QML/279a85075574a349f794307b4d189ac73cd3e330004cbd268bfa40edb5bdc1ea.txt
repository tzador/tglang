/*
A QML component that creates a custom button
*/
import QtQuick 2.15
import QtQuick.Controls 2.6

Rectangle {
    width: 100
    height: 50

    MouseArea {
        anchors.fill: parent
        onClicked: {
            console.log("Button clicked")
        }
    }

    Text {
        text: "Click me!"
        anchors.centerIn: parent
        font.pixelSize: 20
    }

    Gradient {
        id: buttonGradient
        anchors.fill: parent
        gradient: Gradient {
            GradientStop { position: 0.0; color: "#b3d4fc" }
            GradientStop { position: 1.0; color: "#89c5f7" }
        }
    }

    BorderImage {
        anchors.fill: parent
        source: "button_border.png"
        sourceSize: Qt.size(100, 50)
        border.left: 10
        border.right: 10
        border.top: 10
        border.bottom: 10
        sourceCaps: "round"
        fillMode: BorderImage.Stretch
    }

    states: [
        State {
            name: "active"
            PropertyChanges { target: buttonGradient; start: Qt.point(0.5, 1); end: Qt.point(0.5, 0) }
            PropertyChanges { target: borderImage; source: "active_button_border.png" }
        },
        State {
            name: "disabled"
            PropertyChanges { target: buttonGradient; color: "#808080" }
            PropertyChanges { target: borderImage; source: "disabled_button_border.png" }
            PropertyChanges { target: text; color: "white" }
        }
    ]
    transitions: [
        Transition {
            PropertyAnimation { properties: "start, end"; duration: 200 }
            PropertyAnimation { target: borderImage; properties: "color, source"; duration: 200 }
        }
    ]
}