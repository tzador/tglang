/* This is a QML code snippet that creates a custom button with various properties and animations */

import QtQuick 2.12                 // Importing the QtQuick library
import QtQuick.Controls 2.12        // Importing the QtQuick.Controls library

Rectangle {
    id: customButton               // Defining a unique ID for the button

    width: 200                     // Setting the width of the button to 200 pixels
    height: 50                     // Setting the height of the button to 50 pixels

    color: "grey"                  // Setting the background color of the button to grey

    border.color: "#1E90FF"        // Setting the border color of the button to a shade of blue
    border.width: 2                // Setting the width of the border to 2 pixels
    radius: 10                     // Applying a border radius of 10 pixels to create rounded corners

    Text {
        id: buttonText            // Defining an ID for the text inside the button

        anchors.centerIn: parent  // Positioning the text in the center of the button
        text: "Click me!"         // Setting the text inside the button

        font.pointSize: 20         // Setting the font size of the text to 20 points
        color: "white"            // Setting the color of the text to white
    }

    MouseArea {
        id: buttonArea            // Defining an ID for the entire mouse area of the button

        anchors.fill: parent      // Setting the mouse area to cover the entire button

        hoverEnabled: true        // Enabling hover detection for the button

        onClicked: {              // Defining an action when the button is clicked
            buttonText.text = "Clicked!"   // Changing the text of the button to "Clicked!"
            customButton.color = "blue"    // Changing the background color of the button to blue
            buttonArea.opacity = 0.5       // Setting the opacity of the mouse area to half when clicked
        }

        onEntered: {              // Defining an action when the mouse hovers over the button
            buttonText.text = "Hovered!"   // Changing the text of the button to "Hovered!"
        }

        onExited: {               // Defining an action when the mouse exits the button
            buttonText.text = "Click me!"   // Restoring the text of the button to its default value
        }
    }

    states: [                    // Defining multiple states for the button
        State {
            name: "pressed"       // Defining the name of this state as "pressed"

            PropertyChanges {
                target: customButton
                color: "blue"    // Changing the background color of the button to blue
            }

            PropertyChanges {
                target: buttonText
                text: "Pressed!"  // Changing the text of the button to "Pressed!"
            }
        },

        State {
            name: "released"      // Defining the name of this state as "released"

            PropertyChanges {
                target: customButton
                color: "grey"    // Changing the background color of the button back to grey
            }

            PropertyChanges {
                target: buttonText
                text: "Click me!" // Changing the text of the button back to its default value
            }
        }
    ]

    transitions: [                // Defining a transition between the states
        Transition {
            from: "*"
            to: "pressed"         // Transitioning from any state to "pressed" state

            PropertyAnimation {
                target: customButton
                property: "color"        // Animating the change in background color
                easing.type: Easing.InOutQuad  // Setting the easing type
            }

            PropertyAnimation {
                target: buttonText
                property: "text"         // Animating the change in text
                easing.type: Easing.InOutQuad  // Setting the easing type
            }
        },

        Transition {
            from: "*"
            to: "released"        // Transitioning from any state to "released" state

            PropertyAnimation {
                target: buttonText
                property: "text"         // Animating the change in text
                easing.type: Easing.InOutBounce  // Setting a different easing type
            }
        }
    ]
}

/* For more detailed documentation on QML, refer to the Qt website: https://doc.qt.io/qt-5/qmlapplications.html */