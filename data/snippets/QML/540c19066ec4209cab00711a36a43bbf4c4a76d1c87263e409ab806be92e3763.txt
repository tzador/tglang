// This is a complex code snippet in QML

// Defining a custom rectangle component
Rectangle {
    id: customRect // Unique ID for this component
    width: 500 // Setting the width
    height: 300 // Setting the height
    color: "red" // Setting the color

    // Binding the color to a property for easy modification
    property color rectColor: color

    // Adding a label inside the rectangle
    Label {
        id: customLabel // Unique ID for this label
        text: "Custom Rectangle" // Setting the label text
        color: customRect.rectColor // Binding the label color to the rectangle color

        // Setting the font size based on the rectangle's height
        fontSizeMode: Label.Fit
        fontSizeStep: customRect.height / 10

        // Adding an animation to the label
        Behavior on fontSize {
            NumberAnimation { // Scaling animation
                duration: 1000 // Duration of 1 second
                loops: Animation.Infinite // Loop infinitely
                from: 12 // Starting font size
                to: 30 // Ending font size
                easing.type: Easing.InOutQuad // Easing type
            }
        }
    }

    // Adding a drop shadow effect to the rectangle
    DropShadow {
        anchors.fill: customRect // Fill the entire rectangle with the shadow
        radius: 10 // Setting the shadow radius to 10
        samples: 10 // Number of samples to use for antialiasing
        color: "black" // Shadow color
        source: customRect // Source for the shadow, which is the rectangle itself
    }

    // Adding a button inside the rectangle
    Button {
        id: customButton // Unique ID for this button
        width: customRect.width / 2 // Half the width of the rectangle
        height: customRect.height / 3 // One third the height of the rectangle
        text: "Click me!" // Setting the button text
        anchors.centerIn: customRect // Center the button in the rectangle
        onClicked: { // Event handler for button clicks
            // Change the rectangle color to blue and make the button disappear
            customRect.color = "blue"
            customButton.visible = false
        }
    }
}