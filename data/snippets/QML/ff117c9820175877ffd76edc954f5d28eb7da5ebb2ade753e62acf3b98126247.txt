import QtQuick 2.9  // import statement
import QtQuick.Window 2.2  // import statement

Window { // main window
    visible: true  // window visibility property
    width: 800  // window width property
    height: 600  // window height property
    title: "My Application"  // window title property
    color: "white"  // window color property
    maximumWidth: Screen.desktopAvailableWidth // setting maximum width to available desktop width
    maximumHeight: Screen.desktopAvailableHeight // setting maximum height to available desktop height
    minimumWidth: 400 // setting minimum width to 400 pixels
    minimumHeight: 300 // setting minimum height to 300 pixels
    flags: Qt.FramelessWindowHint | Qt.WindowSystemMenuHint // setting window flags
    property var myArray: ["Item 1", "Item 2", "Item 3", "Item 4"] // defining an array property
    property var myObject: { // defining an object property
        name: "John" // object property
        age: 25 // object property
    }
    Rectangle { // rectangle component
        anchors.fill: parent // setting rectangle size to match parent size
        color: "lightblue" // rectangle color property
        radius: 20 // rectangle corner radius property
        Text { // text component
            text: "Welcome to my application" // text property
            anchors.centerIn: parent // centering text inside parent
        }
        ListView { // listview component
            anchors.top: parent.top // setting listview position to top of parent
            anchors.left: parent.left // setting listview position to left of parent
            anchors.margins: 10 // setting listview margins
            width: parent.width // setting listview width to match parent width
            height: parent.height // setting listview height to match parent height
            model: myArray // assigning array to listview model
            delegate: Text { // text delegate component
                text: modelData // displaying listview item data
                font.pixelSize: 24 // setting font size
                elide: Text.ElideRight // truncating text if it exceeds item width
            }
        }
    }
}