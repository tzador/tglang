// Main QML file

import QtQuick 2.14 // importing the QtQuick module for UI components

Item { // top-level visual item in QML

    width: 400 // sets the width property of the item to 400 pixels

    height: function() { // sets the height property of the item to a function
        // that returns a calculation based on the parent's width and height
        return parent.width / parent.height * 200
    }

    property string someText: "Hello World" // defines a property with type string and value "Hello World"

    Button { // creates a button component
        id: btn // assigns an id to the button for referencing later
        text: someText // sets the text property of the button to the value of the previously defined property
        onClicked: { // defines the click event handler for the button
            console.log("Button clicked!") // prints "Button clicked!" to the console
            someText = "Goodbye World" // changes the value of the property to "Goodbye World"
        }
        anchors.centerIn: parent // anchors the button to the center of the parent item
    }

    Rectangle { // creates a rectangle component
        color: "#00FF00" // sets the color property of the rectangle to green
        anchors.fill: btn // anchors the rectangle to fill the area of the button component
        transform: // defines a transform to rotate the rectangle
            Rotation {
                angle: 45 // rotates the rectangle by 45 degrees
                origin.x: parent.width / 2 // sets the x origin to the center of the parent
                origin.y: parent.height / 2 // sets the y origin to the center of the parent
            }
    }

    Text { // creates a text component
        text: someText // sets the text property to the value of the previously defined property
        font.bold: true // sets the font to bold
        anchors.horizontalCenter: parent.horizontalCenter // centers the text horizontally in the parent
        anchors.bottom: parent.bottom // anchors the text to the bottom of the parent
    }

    Image { // creates an image component
        source: "https://example.com/image.jpg" // sets the source property to an image url
        width: parent.width * 0.8 // sets the width property to 80% of the parent's width
        height: parent.height * 0.8 // sets the height property to 80% of the parent's height
        fillMode: Image.PreserveAspectFit // sets the fill mode to preserve the aspect ratio of the image
        anchors.centerIn: parent // anchors the image to the center of the parent item
    }

    Model { // creates a model component
        id: myModel // assigns an id to the model for referencing later
        ListModel { // creates a ListModel to hold data
            ListElement { // defines a data element with properties
                name: "John"
                age: 30
            }
            ListElement {
                name: "Jane"
                age: 28
            }
        }
    }

    ListView { // creates a list view component
        model: myModel // sets the model property to the previously defined model
        delegate: Text { // defines the delegate for each item in the list view
            text: name + " - " + age // sets the text property to display the values from the model
            font.bold: true // sets the font to bold
        }
        anchors.horizontalCenter: parent.horizontalCenter // centers the list view horizontally in the parent
        anchors.top: parent.top // anchors the list view to the top of the parent
        anchors.bottom: parent.bottom // anchors the list view to the bottom of the parent
        width: parent.width * 0.2 // sets the width of the list view to 20% of the parent's width
    }
}