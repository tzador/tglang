/* This code snippet creates a complex custom button with a gradient background and hover animation */ 

import QtQuick 2.0 // import the necessary QML module

Rectangle { // create a Rectangle element
    id: button // set an id for the button
    
    property bool hover: false // create a property to track the hover state of the button

    width: 150 // set the width of the button
    height: 50 // set the height of the button
    radius: 25 // set the border radius of the button

    gradient: Gradient { // create a gradient background for the button
        GradientStop { position: 0; color: "#add8e6" } // specify a color stop at position 0
        GradientStop { position: 1; color: "#008080" } // specify a color stop at position 1
    }

    Behavior on hover { // create an animation for the hover state
        PropertyAnimation {
            target: button
            property: "scale" // animate the scale property
            to: 1.1 // increase the scale by 10%
            duration: 100 // set the duration of the animation to 100 milliseconds
        }
    }

    MouseArea { // create a MouseArea to track mouse events on the button
        anchors.fill: parent // make the MouseArea cover the entire button
        hoverEnabled: true // enable hover tracking
        onEntered: button.hover = true // set the hover property to true when the mouse enters the button
        onExited: button.hover = false // set the hover property to false when the mouse exits the button
    }

    Text { // add text to the button
        text: "Click me!" // set the text to be displayed
        font.bold: true // make the font bold
        font.pixelSize: 20 // set the font size to 20 pixels
        anchors.centerIn: parent // center the text within the button
        color: "white" // set the text color to white
    }
}