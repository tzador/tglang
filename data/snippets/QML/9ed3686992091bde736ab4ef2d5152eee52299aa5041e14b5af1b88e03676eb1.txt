//This example shows how to create a custom rectangle component in QML

import QtQuick 2.0 //import necessary libraries

Rectangle { //define the rectangle component

    property alias color: rect.color //create a property called color that is an alias for the rect color
    property int width //create a property called width that will be used to set the width of the rectangle

    id: rect //set an ID for the rectangle component

    color: "red" //set the initial color of the rectangle to red
    width: 100 //set the initial width of the rectangle to 100

    anchors.centerIn: parent //center the rectangle in the parent element

    border.color: "black" //set the border color of the rectangle to black
    border.width: 2 //set the border width of the rectangle to 2

    //create a gradient background using the gradient component
    gradient: Gradient {
        GradientStop { position: 0.0; color: "green" } //set the first gradient stop to green
        GradientStop { position: 1.0; color: "blue" } //set the second gradient stop to blue
    }

    //add a rounded corner radius to the rectangle
    radius: 10

    //create a property animation for changing the width of the rectangle
    PropertyAnimation {
        target: rect //set the target of the animation to the rectangle component
        property: "width" //set the property that will be animated to width
        from: 100 //set the starting width
        to: 200 //set the ending width
        duration: 1000 //set the duration of the animation to 1000 milliseconds
    }

    //create a MouseArea to handle mouse clicks on the rectangle
    MouseArea {
        anchors.fill: parent //make the MouseArea fill the entire parent element
        onClicked: {
            //when the rectangle is clicked, change the color to yellow
            rect.color = "yellow"
        }
    }
}