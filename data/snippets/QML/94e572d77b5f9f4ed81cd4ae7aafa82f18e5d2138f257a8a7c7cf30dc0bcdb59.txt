import QtQuick 2.12

Item {
    id: root //Creates a root item
    clips: true //Sets clip enabled for the item, meaning its children will be clipped when drawn outside its bounds

    keys.behavior: AnimatedImage.DontRestore //Sets the behavior for key interactions

    property bool isClicked: false //Creates a boolean property

    signal itemClicked() //Creates a signal

    anchors.fill: parent //Sets the item to fill its parent's size
    anchors.margins: 10 //Sets margins to 10 pixels all around

    Rectangle {
        id: rect //Creates a rectangle item as a child

        anchors.centerIn: parent //Sets the rectangle to be centered within its parent
        anchors.fill: parent //Sets the rectangle to fill its parent's size

        color: "red" //Sets the color of the rectangle

        PropertyAnimation { //Creates a property animation for the rectangle
            target: rect //Sets the target to be the rectangle item
            property: "width" //Sets the property to animate, in this case, width
            duration: 500 //Sets the duration of the animation in milliseconds
            from: 100 //Sets the starting value for the property
            to: 200 //Sets the ending value for the property
            loops: Animation.Infinite //Sets the animation to loop infinitely
            easing.type: Easing.OutQuad //Sets the type of easing used for the animation 
        }
    }

    MouseArea {
        id: mouseArea //Creates a mouse area for handling click events

        anchors.fill: parent //Sets the mouse area to fill its parent's size

        onClicked: { //Sets the on clicked event handler for the mouse area
            root.isClicked = true //Sets the boolean property to true
            root.itemClicked() //Emits the signal for when the item is clicked
        }
    }

    Component.onCompleted: { //Runs when the component is completed
        if (isClicked) { //Checks if the item was clicked
            console.log("Item was clicked") //Outputs to the console
        }
    }
}