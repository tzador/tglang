import QtQuick 2.12 // Import statement specifying the version of QtQuick being used
import QtQuick.Controls 2.12 // Import statement for the QtQuick.Controls library

// The Rectangle is the root item of our QML code. It defines the size and appearance of our interface
Rectangle {
    // The id property allows us to refer to this item later
    // This is especially useful when using signals and slots
    id: root
    
    // We define the size of our rectangle using the width and height properties
    width: 500
    height: 400
    
    // We also specify the color of our rectangle using the color property
    color: "lightgrey"
    
    // We use the border property to add a border around our rectangle
    // The border is made up of three components - the width, the color and the style
    border {
        // We specify the width of the border in pixels
        width: 1
        
        // We specify the color of the border using the Qt color name
        color: "darkgrey"
        
        // We specify the style of the border using the BorderStyle enumeration
        style: BorderStyle.Dotted
    }
    
    // We use the gradient property to add a gradient effect to our rectangle
    // The gradient is made up of two components - the gradient type and the colors used in the gradient
    gradient: Gradient {
        // We specify the type of gradient we want to use using the GradientType enumeration
        type: GradientType.Linear
        
        // We specify the colors used in the gradient using the GradientStop element
        GradientStop {
            // We specify the position of the color in the gradient using the position property
            position: 0.0
            
            // We specify the color itself using the Qt color name
            color: "lightblue"
        }
        
        // We can add multiple GradientStop elements to achieve a multicolor gradient
        GradientStop {
            position: 1.0
            color: "darkblue"
        }
    }
    
    // We use the MouseArea element to enable mouse interaction with our rectangle
    // This allows us to define different behaviors for different mouse events
    MouseArea {
        // We specify the parent of the MouseArea element using the parent property
        parent: root
        
        // We specify the width and height of the MouseArea element
        // These should be the same as the width and height of our rectangle
        width: root.width
        height: root.height
        
        // We use the onReleased signal to define the behavior when the mouse is released within the MouseArea
        onReleased: {
            // We use the colorChange function to change the color of the rectangle
            // This function is defined in the JavaScript code below
            colorChange()
        }
        
        // We can also define behaviors for other mouse events, such as onEntered and onExited
    }
}

// The handler.js file contains the JavaScript code used in our QML file
// We import it using the import statement
// Note: The handler.js file should be in the same directory as our QML file
import "handler.js" as Handlers

// The function defined in the handler.js file is used to change the color of our rectangle
// It takes in a color parameter and changes the color property of our rectangle
function colorChange() {
    root.color = Handlers.getRandomColor()
}

// We use the utility function to generate a random RGB color
// This function is also defined in the handler.js file
// Note: The function should be placed before the rectangle declaration in our QML code
property var randomColor: Handlers.getRandomColor()

// We use the Component element to define a custom component that can be used multiple times in our code
Component {
    // We specify the id of our component so we can refer to it later
    id: customItem
    
    // We define the properties of our custom component
    // Note: These properties can be set when using our custom component in other parts of our code
    // For example, we can set the width and height of our component to be different from the root item
    // when we use it elsewhere
    width: 100 // a default value can be specified
    height: 100 // a default value can be specified
    color: "orange" // a default value can be specified
    
    // We use the Rectangle element to define the appearance of our custom component
    Rectangle {
        // The parent of the Rectangle is the customItem component
        parent: customItem
        
        // We use the properties defined in our customItem component to set the properties of our Rectangle
        // These properties can also be overridden when using the component in other parts of our code
        width: customItem.width
        height: customItem.height
        color: customItem.color
    }
}

// We can now use our customItem component multiple times in our code
// Each time we use it, we can specify different properties for our customItem
customItem {
    width: 50
    height: 50
    color: "green"
}

customItem {
    x: 200
    y: 100
    color: "purple"
}

// We can also use our component within another component
// This allows for further organization and reuse of our code
Component {
    id: parentComponent
    
    Rectangle {
        parent: parentComponent
        
        // We use customItem as a child of our parent component
        customItem {
            // We can set properties for our customItem within our parent component
            // These properties can choose their own values or inherit from the parent component
            color: Gradient {
                type: GradientType.Radial
                GradientStop {
                    position: 0.0
                    color: "red"
                }
                GradientStop {
                    position: 1.0
                    color: "darkred"
                }
            }
        }
    }
}