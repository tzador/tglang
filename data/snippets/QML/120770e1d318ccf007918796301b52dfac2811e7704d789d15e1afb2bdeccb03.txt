/* This code snippet creates a custom item with various properties and animations */

Item {
  id: customItem              // declaring an Item component with an id
  width: 300                  // setting the width of the item to 300 pixels
  height: 300                 // setting the height of the item to 300 pixels
  color: "#ff0000"            // setting the background color to red
  
  property int fontSize: 20   // declaring a custom property of type integer with an initial value of 20
  
  Image {                     // declaring an Image component as a child of the Item
    id: image                  // giving it an id
    source: "img.png"         // setting the source of the image to "img.png"
    anchors.fill: parent      // setting the image to fill the parent item
    visible: false            // making the image initially invisible
  }
  
  Text {                      // declaring a Text component as a child of the Item
    text: "Hello World"       // setting the text property to "Hello World"
    font.pixelSize: fontSize  // setting the font size to the custom property we declared earlier
    anchors.centerIn: parent  // setting the text to be centered in the parent item
    color: "#ffffff"          // setting the text color to white
  }
  
  SequentialAnimation {       // declaring a SequentialAnimation to animate the image
    id: animation             // giving it an id
    loops: Animation.Infinite // setting the animation to loop indefinitely
    
    PropertyAction {          // defining the first animation in the sequence
      target: image           // setting the target of the animation to the image component
      property: "visible"     // specifying which property to animate
      to: true                // setting the end value of the animation to true
    }
    
    PropertyAnimation {       // defining the second animation in the sequence
      target: image           // setting the target of the animation to the image component
      property: "scale"       // specifying which property to animate
      to: 1.5                 // setting the end value of the animation to 1.5
      duration: 500           // setting the duration of the animation to 500 milliseconds
      easing.type: Easing.Out // specifying the type of easing to use
    }
    
    PropertyAction {          // defining the third animation in the sequence
      target: image           // setting the target of the animation to the image component
      property: "visible"     // specifying which property to animate
      to: false               // setting the end value of the animation to false
    }
  }
  
  MouseArea {                 // adding a MouseArea component to listen for mouse clicks
    anchors.fill: parent      // setting it to fill the parent item
    onClicked: animation.start() // starting the animation when clicked
  }
  
  states: [                   // defining states for the item
    State {                   // creating a state called "active"
      name: "active"          // giving it a name
      when: customItem.clicked // specifying a condition for the state to be active
      PropertyChanges {       // defining changes to be applied when the state is active
        target: customItem    // setting the target to the parent item
        color: "#00ff00"      // changing the background color to green
      }
    },
    State {                   // creating a state called "inactive"
      name: "inactive"        // giving it a name
      when: !customItem.clicked // specifying a condition for the state to be active
      PropertyChanges {       // defining changes to be applied when the state is active
        target: customItem    // setting the target to the parent item
        color: "#ff0000"      // resetting the background color to red
      }
    }
  ]
  
  transitions: [              // defining transitions between states
    Transition {              // defining a transition from "inactive" to "active" state
      from: "inactive"        // specifying the starting state
      to: "active"            // specifying the end state
      ParallelAnimation {     // defining a parallel animation to run when transitioning
        Animation {           // defining an animation for the text component
          target: text        // setting the target to the text component
          property: "fontSize" // specifying which property to animate
          from: 20             // setting the initial value of the property
          to: 30               // setting the end value of the property
          duration: 300        // setting the duration of the animation to 300 milliseconds
        }
        PropertyAnimation {   // defining an animation for the image component
          target: image       // setting the target to the image component
          property: "color"   // specifying which property to animate
          to: "#ffffff"       // setting the end value of the property to white
          duration: 300       // setting the duration of the animation to 300 milliseconds
        }
      }
    },
    Transition {              // defining a transition from "active" to "inactive" state
      from: "active"          // specifying the starting state
      to: "inactive"          // specifying the end state
      ParallelAnimation {     // defining a parallel animation to run when transitioning
        Animation {           // defining an animation for the text component
          target: text        // setting the target to the text component
          property: "fontSize" // specifying which property to animate
          from: 30             // setting the initial value of the property
          to: 20               // setting the end value of the property
          duration: 300        // setting the duration of the animation to 300 milliseconds
        }
        PropertyAnimation {   // defining an animation for the image component
          target: image       // setting the target to the image component
          property: "color"   // specifying which property to animate
          to: "#ff0000"       // setting the end value of the property to red
          duration: 300       // setting the duration of the animation to 300 milliseconds
        }
      }
    }
  ]
}