/*
  This code snippet creates a custom progress bar with animation.
*/

//importing necessary modules
import QtQuick 2.0
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.12

//defining colors
color white: "#FFFFFF"
color black: "#000000"
color blue: "#3B86E5"
color darkBlue: "#0A1C45"

//defining custom progress bar component
ProgressBar {
  //setting properties
  id: progressBar
  width: 300 //constant width
  height: 10 //constant height
  color: blue //default color
  border.color: darkBlue
  border.width: 1
  radius: 10 //setting rounded edges
  smooth: true //enabling smooth animation
  
  //animating progress using a number animation
  NumberAnimation {
    target: progressBar //applying animation to the progress bar
    property: "value" //specifying property to animate
    from: 0 //initial value
    to: 100 //final value
    duration: 1000 //animation duration
    running: true //starting the animation
    loops: Animation.Infinite //repeating the animation infinitely
    easing.type: Easing.OutQuad //applying easing effect to the animation
  }
  
  //customizing the background
  background: Rectangle {
    color: black //setting color to black
    radius: progressBar.radius //inheriting radius from the progress bar component
    
    //creating gradient effect using linear gradient
    LinearGradient {
      id: backgroundGradient //setting id for easier referencing
      start: Qt.point(0, 0) //starting point for gradient
      end: Qt.point(progressBar.width, progressBar.height) //ending point for gradient
      gradient: Gradient {
        GradientStop { position: 0.0; color: darkBlue } //starting color
        GradientStop { position: 1.0; color: blue } //ending color
      }
    }
    
    //applying gradient to the background
    gradient: backgroundGradient
  }
  
  //customizing progress bar using a child Rectangle
  Rectangle {
    //setting properties
    width: progressBar.width * (progressBar.visualPosition / progressBar.maxValue) //calculating width based on progress
    height: progressBar.height //same height as parent
    color: white //setting color to white
    radius: progressBar.radius //inheriting radius from progress bar component
    
    //animating progress using a property animation
    PropertyAnimation {
      target: progressBar //applying animation to the progress bar
      properties: "visualPosition" //specifying properties to animate
      duration: 500 //animation duration
      running: true //starting the animation
      loops: Animation.Infinite //repeating the animation infinitely
      easing.type: Easing.OutQuad //applying easing effect to the animation
    }
  }
} //end of custom progress bar component