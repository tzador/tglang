// This is a QML component that creates a customized button
import QtQuick 2.12

// Define a rectangle as the button's background
Rectangle {
    id: button // unique identifier for the button
    width: 80 // width of the button
    height: 40 // height of the button
    radius: 5 // corner radius of the button
    color: "lightblue" // background color of the button

    // Define the text displayed on the button
    Text {
        anchors.centerIn: parent // center the text in the button
        text: "Click Me" // text to be displayed
        font.pixelSize: 20 // font size of the text
    }

    // Define a state for the button when it is pressed
    states: State {
        name: "pressed" // state name
        PropertyChanges { // change properties when button is pressed
            target: button // target the button component
            color: "orange" // change background color
            scale: 0.95 // scale down the button size
        }
    }

    // Define a transition for the button state change
    transitions: Transition {
        from: "" // from the default state
        to: "pressed" // to the "pressed" state
        PropertyAnimation { // animate property changes
            target: button // target the button component
            property: "color" // animate the background color
            duration: 200 // animation duration in milliseconds
            easing.type: Easing.InOutQuad // easing type of the animation
        }
        SequentialAnimation { // animate multiple properties in sequence
            PropertyAnimation {
                target: button // target the button component
                property: "scale" // animate the scale
                duration: 200 // animation duration in milliseconds
                easing.type: Easing.InOutQuad // easing type of the animation
            }
            PropertyAnimation {
                target: button // target the button component
                property: "color" // animate the background color
                duration: 100 // animation duration in milliseconds
                easing.type: Easing.InOutQuad // easing type of the animation
            }
        }
    }

    // Define an event handler for when the button is clicked
    MouseArea {
        anchors.fill: parent // fill the entire button area
        onClicked: { // handle the clicked event
            button.state = "pressed" // set the button state to "pressed"
        }
    }
}