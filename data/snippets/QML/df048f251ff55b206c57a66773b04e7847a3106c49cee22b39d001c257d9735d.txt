/*
 * This is a complex QML code snippet that uses various programming constructs and features.
 * It creates a 3D scene with animated objects and interactions.
 */

import QtQuick 2.0
import Qt3D.Core 2.0

/*
 * Defines the main application with a window and a 3D scene.
 */
ApplicationWindow {
    visible: true
    width: 800
    height: 600

    /*
     * Defines the 3D scene with the x, y, and z axes.
     */
    Entity {
        /*
         * Creates a camera to view the scene.
         */
        Camera {
            id: mainCamera
            position: Qt.vector3d(0, 0, 100)
        }

        /*
         * Defines the light sources in the scene.
         * Ambient light illuminates the entire scene while directional lights cast shadows and give more realistic lighting.
         */
        components: [
            DirectionalLight {
                id: directionalLight
                direction: Qt.vector3d(-10, -100, -200)
            },

            AmbientLight {
                id: ambientLight
                color: "#888"
            }
        ]

        /*
         * Creates a 3D model of a cube and adds it to the scene.
         * It uses the Phong material for realistic lighting.
         * The Transform component allows for positioning and scaling of the cube.
         */
        CubeMesh {
            id: cubeMesh
        }

        PhongMaterial {
            id: cubeMaterial
            ambient: Qt.rgba(1, 1, 1, 0.5)
            diffuse: Qt.rgba(1, 1, 1, 0.6)
            specular: Qt.rgba(0.5, 0.5, 0.5, 1)
        }

        Transform {
            id: cubeTransform
            scale: Qt.vector3d(5, 5, 5)
            translation: Qt.vector3d(0, 10, 0)
        }

        /*
         * Creates an animation for the cube, rotating it around the x axis.
         */
        NumberAnimation {
            target: cubeTransform
            property: "rotation.x"
            duration: 2000
            loops: Animation.Infinite
            to: 360
        }

        /*
         * Allows for user interaction with the cube by clicking on it.
         * On click, the cube will change color and emit a signal.
         */
        MouseArea {
            anchors.fill: cubeMesh
            onClicked: {
                cubeMaterial.ambient = Qt.rgba(1, 0, 0, 0.5)
                cubeMaterial.diffuse = Qt.rgba(1, 0, 0, 0.6)
                cubeMaterial.specular = Qt.rgba(0.5, 0, 0, 1)
                cubeSignal.changed()
            }
        }

        signal cubeSignal
    }
}