/**

The code snippet generated below is a complex and long code segment written in QML.
It uses various QML properties and features to dynamically create a user interface component.

**/

// Import necessary QML modules
import QtQuick 2.0
import QtQuick.Window 2.0
import QtQuick.Controls 2.0
import QtQuick.Layouts 1.3

// Define a custom QML component named 'ComplexComponent'
Item {
    id: complexComponent

    // Set the size and position of the component
    width: 400
    height: 300
    x: 100
    y: 100

    // Add a color gradient background
    Rectangle {
        anchors.fill: parent
        gradient: Gradient {
            GradientStop { position: 0.0; color: "#37474F" }
            GradientStop { position: 1.0; color: "#607D8B" }
        }
    }

    // Add a text label with custom font and placement
    Text {
        text: "Complex Component"
        color: "#FFFFFF"
        font.pixelSize: 30
        anchors.centerIn: parent
        z: 1
    }

    // Add a button with custom text and function
    Button {
        text: "Generate"
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        onClicked: {
            // Generate a random number
            var randomNumber = Math.floor(Math.random() * 100);
            // Set the number as the component's width
            complexComponent.width = randomNumber;
        }
    }

    // Add a nested layout with custom spacing and orientation
    RowLayout {
        anchors.top: parent.top
        anchors.margins: 10
        spacing: 10
        orientation: Qt.Horizontal

        // Add multiple text labels with custom text
        Text { text: "Name:" }
        Text { text: "Age:" }
        Text { text: "Occupation:" }

        // Add multiple text input fields with custom placeholders and function
        TextField { placeholderText: "Enter name..." }
        TextField { placeholderText: "Enter age..." }
        TextField { placeholderText: "Enter occupation..." }
    }
}