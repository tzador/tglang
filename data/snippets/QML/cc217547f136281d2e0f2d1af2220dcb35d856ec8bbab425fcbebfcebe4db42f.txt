// This is a complex code snippet in QML

// Import necessary modules
import QtQuick 2.14
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.12

// Declare a Rectangle component with a specified width and height
Rectangle {
    width: 500
    height: 500
    color: "blue"
    border width: 2
    radius: 20

    // Declare a ColumnLayout to organize child items vertically
    ColumnLayout {
        x: 10
        y: 10

        // Declare a Label component with custom text and font properties
        Label {
            text: "Hello World"
            font.pixelSize: 20
            font.weight: Font.Bold
        }

        // Declare a Rectangle with a gradient fill effect
        Rectangle {
            width: parent.width - 20 // Use parent's width minus 20 for desired size
            height: parent.height - 60 // Use parent's height minus 60 for desired size

            // Set the gradient fill parameters
            gradient: Gradient {
                GradientStop { position: 0.0; color: "white" }
                GradientStop { position: 1.0; color: "gray" }
            }

            // Declare a ColumnLayout to organize child items horizontally
            ColumnLayout {

                // Set the spacing between child items
                spacing: 5

                // Declare a TextEdit component with custom properties
                TextEdit {
                    width: parent.width / 2 // Use half of parent's width for desired size
                    height: parent.height - 10 // Use parent's height minus 10 for desired size
                    verticalAlignment: TextEdit.AlignVCenter // Align vertically to center
                    font.italic: true // Set font style to italic
                    wrapMode: TextEdit.Wrap // Enable line wrapping for long texts
                }

                // Declare a Button component with custom text and onCliced function
                Button {
                    text: "Click Here"
                    onClicked: {
                        // Define a function to generate a random RGB color value
                        function getRandomColor() {
                            return Qt.rgba(Math.random(), Math.random(), Math.random(), 1.0)
                        }

                        // Apply the randomly generated color to the parent Rectangle
                        parent.color = getRandomColor()
                    }
                }
            }
        }

        // Declare an Item to act as a spacer and stretch the content
        Item {
            Layout.fillHeight: true
        }
    }
}