/*! A custom delegate for a list item */
import QtQuick 2.0

//![0]
//![1]
//![2] This delegate is used to display custom items in a ListView
//![3]
//![4] The item is colored based on the value of the "color" role
//![5] provided by the model data.
//![6]
//![7] It will also display any text or image offset rect border with a red outline
//![8] if the item is being pressed or contains the mouse.
//![9]
//![10] Implements the necessary properties specified in QAbstract32DModel \
//![11] QStyleOptionViewItem
//![12]
//![13] In this example, we use the "row" role to display the list index for each item
//![14]
//![15] The 'delegate' property provides a QQuickItem defining the visual
//![16]   representation of an item in the model's ContentView
//![17]
//![18] The content item is automatically 'updated' when any data referred
//![19] to by $styleData, such as $styleData.row, changes.
//![20]
//![21] The 'ListView' of 'd' and 'p' for list model data control
//![22] this example's 'additionalData' item has its 'd' property
//![23] set to the model data's row number.
//![24] This delegate will set the 'p' property of the 'ListView'
//![25] to the color provided by the model data
//![26]
//![27] QML provides implicit object types for all of the properties in the
//![28] QAbstractItemModel and QStyleOptionViewItem C++ types, making them
//![29] available for use in the delegate.
//![30]
//![31] The 'id' property of the root item allows us to easily identify it
//![32] for styling purposes from outside of the delegate. This is not
//![33] necessary for this example, but can be useful in more complex cases.
//![34]
//![35] When you use a list view with drag and drop, the item's data is
//![36] available as the list item's 'dd' property.
//![37]
//![38] ItemPixmapRectangle provides an easy way to draw an image inside a
//![39] rectangle that's anchored to and fills the entire item.
//![40]
//![41] The image will automatically be resized to fit the available size,
//![42] preserving its aspect ratio.
//![43]!
//![0]
//![1]
//![2] This is a complex QML code snippet 
//![3]
//![4] which implements a custom delegate for a list item 
//![5] and defines the behavior and appearance of the list item based on data from a model 
//![6]
//![7] The implemented delegate will display text or an image, with a red outline border when pressed 
//![8] or when the mouse is hovering over the item 
//![9]
//![10] The delegate also implements necessary properties for the QAbstractItemModel and QStyleOptionViewItem types
//![11]
//![12] In this example, the "row" role from the model data is used to display the list index 
//![13] for each item in the list view 
//![14]
//![15] The 'delegate' property sets the visual representation of the item in the list view 
//![16]
//![18] The content item is automatically updated when any data referred to by $styleData changes 
//![20]
//![21] The 'ListView' is used to control the list model data 
//![22] In this example, the 'additionalData' item has its 'd' property set to the model data's row number 
//![24] This delegate also sets the 'p' property of the 'ListView' to the color provided by the model data 
//![26]
//![27] Implicit object types for the properties in the QAbstractItemModel and QStyleOptionViewItem types are available in QML for use in the delegate 
//![30]
//![31] The root item's 'id' property can be used for styling purposes outside of the delegate 
//![32]
//![35] When using a list view with drag and drop, the item's data is available as the list item's 'dd' property 
//![38] ItemPixmapRectangle is used to draw an image inside a rectangle that fills the entire item, automatically resizing the image to fit the available size and preserving its aspect ratio.
//![40]
//![41] This code snippet provides a reusable and complex solution for customizing the appearance and behavior of list items in QML.