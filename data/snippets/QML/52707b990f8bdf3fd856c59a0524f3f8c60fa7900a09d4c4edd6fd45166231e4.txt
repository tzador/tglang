/*
 * This is a complex code snippet in QML.
 * It creates a text input field with placeholder text and validation rules.
 * It also includes a label, button, and signal handler for form submission.
 */

import QtQuick 2.0 // Import the QtQuick module

Rectangle { // Create a rectangle element
    id: root // Set an id for the root element
    width: 400 // Set the width of the rectangle
    height: 300 // Set the height of the rectangle

    // Define properties for the rectangle
    property var username: "" // Empty string for the username
    property var email: "" // Empty string for the email
    property var password: "" // Empty string for the password
    property bool valid: false // Boolean for form validation

    // Add a text input field for the username with placeholder text
    TextInput {
        placeholderText: "Username" // Set the placeholder text
        anchors.top: parent.top // Position the input field at the top of the parent element
        anchors.horizontalCenter: parent.horizontalCenter // Center the input field horizontally
        width: parent.width * 0.8 // Set the width of the input field to 80% of the parent element
        font.pixelSize: 16 // Set the font size
        onTextChanged: { // Signal handler for when the text in the input field changes
            root.username = text // Update the username property with the text from the input field
        }
    }

    // Add a text input field for the email with placeholder text and validation rules
    TextInput {
        placeholderText: "Email" // Set the placeholder text
        anchors.top: parent.top // Position the input field below the previous one
        anchors.horizontalCenter: parent.horizontalCenter // Center the input field horizontally
        width: parent.width * 0.8 // Set the width of the input field to 80% of the parent element
        font.pixelSize: 16 // Set the font size
        validator: RegExpValidator { // Add a validator to ensure proper email format
            regExp: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/ // Regular expression for validating email addresses
        }
        onTextChanged: { // Signal handler for when the text in the input field changes
            root.email = text // Update the email property with the text from the input field
        }
    }

    // Add a text input field for the password with placeholder text and validation rules
    TextInput {
        placeholderText: "Password" // Set the placeholder text
        anchors.top: parent.top // Position the input field below the previous one
        anchors.horizontalCenter: parent.horizontalCenter // Center the input field horizontally
        width: parent.width * 0.8 // Set the width of the input field to 80% of the parent element
        font.pixelSize: 16 // Set the font size
        echoMode: TextInput.Password // Set the input field to display only dots for password protection
        validator: RegExpValidator { // Add a validator to ensure proper password format
            regExp: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/ // Regular expression for validating passwords (at least 8 characters with at least one uppercase letter, one lowercase letter, and one number)
        }
        onTextChanged: { // Signal handler for when the text in the input field changes
            root.password = text // Update the password property with the text from the input field
        }
    }

    // Add a label to display error messages if the form is not valid
    Label {
        anchors.top: parent.top // Position the label below the input fields
        anchors.horizontalCenter: parent.horizontalCenter // Center the label horizontally
        width: parent.width * 0.8 // Set the width of the label to 80% of the parent element
        font.pixelSize: 14 // Set the font size
        color: "red" // Set the font color to red
        visible: !root.valid // Only show the label if the form is not valid
        text: "Please enter a valid username, email, and password." // Set the error message
        horizontalAlignment: Text.AlignHCenter // Center the error message text horizontally
    }

    // Add a button to submit the form
    Button {
        text: "Submit" // Set the button text
        anchors.bottom: parent.bottom // Position the button at the bottom of the parent element
        anchors.horizontalCenter: parent.horizontalCenter // Center the button horizontally
        onClicked: { // Signal handler for when the button is clicked
            // Validate the form and emit a signal with the form data if it is valid
            if (root.username !== "" && root.email !== "" && root.password !== "" && root.username !== null && root.email !== null && root.password !== null) {
                root.valid = true // Set the valid property to true
                // Emit a signal with the form data
                submitForm(root.username, root.email, root.password)
            } else {
                root.valid = false // Set the valid property to false
            }
        }
    }

    // Add a signal handler for the form submission
    signal submitForm(string username, string email, string password) // Define a custom signal with the form data

    // Add a signal handler for when the form is submitted
    onFormSubmitted: {
        // Print the form data to the console
        console.log("Username:", username)
        console.log("Email:", email)
        console.log("Password:", password)
        // Add code to actually submit the form to a server or database
    }
}