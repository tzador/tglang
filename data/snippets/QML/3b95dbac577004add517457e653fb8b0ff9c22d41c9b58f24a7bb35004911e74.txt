import QtCharts 2.12
import QtQuick.Controls 2.15

ChartView {
    id: chart
    height: 400
    width: 600

    absMagnitudeAxisX: LogValueAxis {
        id: xAxis
        labelFormat: "%.1f"
        minorTickCount: 9
        tickCount: 10
    }
    logarithmicAxisY: ValueAxis {
        id: yAxis
        min: 0.01
        max: 1
        labelFormat: "%.3f"
        tickCount: 11
    }
    valueAxis: customValueAxis {
        id: customAxis
        min: 0.001
        max: 1
        labelFormat: "%.4f"
    }
    absMagnitudeAxisX: Axis {
        color: "red"
        minorTickCount: 5
    }
    Legend {
        color: "black"
        backgroundVisible: true
        labelsVisible: true
        alignment: Qt.AlignRight
        orientation: Qt.Vertical
        font.familyBold: defaultFont
        markerShape: Legend.MarkerShapeRectangle

        topMargin: 10
        rightMargin: 10
        bottomMargin: 10
        leftMargin: 10
        spacing: 10

        displacement: 10
        minimumWidth: 120
        minimumHeight: 60
        maximumWidth: 200
        maximumHeight: 100

        PropertyAction {
            target: font
            property: "pixelSize"
            value: 12
        }
    }
    series: LineSeries {
        name: "Sine Function"
        axisX: xAxis
        axisY: yAxis
        color: "red"
        width: 2
        XYPoint { x: 0; y: 0 }
        XYPoint { x: customAxis.max; y: xAxis.max }
        XYPoint { x: xAxis.max; y: yAxis.max }
    }
    series: SplineSeries {
        name: "Cosine Function"
        axisX: xAxis
        axisY: yAxis
        color: "blue"
        width: 2
        XYPoint { x: 0; y: 1 }
        XYPoint { x: 1; y: 0 }
        XYPoint { x: yAxis.max; y: 0 }
        XYPoint { x: customAxis.min; y: customAxis.max }
    }

    protected function calculateDistance(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))
    }
    function animateSeries(target, group) {
        PropertyAnimation { target: target; property: "opacity"; from: 1; to: 0; duration: 250; easing.type: Easing.InOutQuad; running: group.enabled }
        PropertyAnimation { target: target; property: "color"; from: Qt.rgba(1, 1, 1, 0); to: Qt.rgba(1, 0, 0, 1); duration: 250; easing.type: Easing.InOutQuad; running: group.enabled }
        CustomAnimation { target: root; from: 0; to: 1; duration: 250; easing.type: Easing.InOutQuad; running: group.enabled }
    }
    MouseArea {
        anchors.fill: parent
        hoverEnabled: true

        onPressed: {
            animateSeries(chart.series[0], chart.series[1])
        }
        onReleased: {
            animateSeries(chart.series[0], chart.series[1])
        }
    }
}