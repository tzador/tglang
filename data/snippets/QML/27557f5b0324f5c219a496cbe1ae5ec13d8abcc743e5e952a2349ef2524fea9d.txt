/* This is a complex QML code snippet that creates a customized button with multiple states and behaviors */

import QtQuick 2.0 // Imports the required QML module
import QtQuick.Controls 2.12 // Imports the necessary controls module

Item { // Creates an item to hold the button

  id: customButton // Sets an id for the button

  width: 100 // Sets the width of the button to 100 pixels
  height: 50 // Sets the height of the button to 50 pixels
  clip: true // Clips any overflows from the button

  property alias text: buttonLabel.text // Creates a property for button text and assigns it to the text property of label

  property bool checked: false // Creates a property for button state and assigns default value to false

  property bool hover: false // Creates a property for hover state and assigns default value to false

  property bool active: false // Creates a property for active state and assigns default value to false

  Rectangle { // Creates a rectangle as the base of the button

    id: buttonBase // Sets an id for the rectangle

    anchors.fill: parent // Anchors the rectangle to the parent item
    radius: 5 // Sets the corner radius of the rectangle to 5

    color: customButton.active ? "#007bff" : customButton.hover ? "#17a2b8" : "#ffffff" // Sets the color of the button based on its state

    Behavior on color { // Creates a behavior that animates the color property
      ColorAnimation { // Animates the color transition
        duration: 200 // Sets the duration of the animation to 200 milliseconds
      }
    }
  }

  Label { // Creates a label to display the button text

    id: buttonLabel // Sets an id for the label

    anchors.centerIn: parent // Aligns the label to the center of the parent item

    text: "Click Me!" // Default text for the button

    font.pixelSize: 16 // Sets the font size to 16 pixels
    font.bold: true // Makes the text bold

    color: customButton.checked ? "#ffffff" : "#000000" // Sets the color of the text based on button state

    Behavior on color { // Creates a behavior that animates the color property
      ColorAnimation { // Animates the color transition
        duration: 200 // Sets the duration of the animation to 200 milliseconds
      }
    }
  }

  MouseArea { // Creates a mouse area to handle button interactions

    id: buttonArea // Sets an id for the mouse area

    anchors.fill: parent // Anchors the mouse area to the parent item
    hoverEnabled: true // Enables hover detection for the mouse area

    onClicked: { // Creates an action upon click
      customButton.checked = !customButton.checked // Toggles the button state
    }

    onEntered: customButton.hover = true // Sets hover state to true on mouse enter
    onExited: customButton.hover = false // Sets hover state to false on mouse exit
    onPressAndHold: customButton.active = true // Sets active state to true as long as the button is pressed
    onReleased: customButton.active = false // Sets active state to false upon button release
  }
}