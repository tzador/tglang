//! [Initialization]
// Define a custom rectangle component with properties 'color' and 'size'
Rectangle {
    id: customRect
    color: "red"

    //! [Signals and Slots]
    // Define a signal 'positionChanged' to be emitted on position change
    // Emit the signal when the rectangle is clicked
    signal positionChanged(int x, int y)
    MouseArea {
        anchors.fill: parent
        onClicked: customRect.positionChanged(randint(0, parent.width), randint(0, parent.height))
    }
    //! [Signals and Slots]

    //! [States and Transitions]
    // Create a state 'highlighted' with a target property 'color'
    // Define a transition to change the target property to 'lightgray'
    State {
        name: "highlighted"
        PropertyChanges { target: customRect; color: "lightgray" }
    }
    // Create a state 'notHighlighted' with a target property 'color'
    // Define a transition to change the target property to 'red'
    State {
        name: "notHighlighted"
        PropertyChanges { target: customRect; color: "red" }
    }

    // Add a property 'highlighted' to track the state of the rectangle
    property bool highlighted: false
    //! [States and Transitions]

    //! [State Changes]
    // Update the state and emit the 'positionChanged' signal when the rectangle is double-clicked
    // Toggle the state between 'highlighted' and 'notHighlighted'
    MouseArea {
        anchors.fill: parent
        onClicked: {
            if (mouse.button === Qt.LeftButton) {
                // Toggle the highlighted property
                highlighted = !highlighted
                // Emit the signal
                customRect.positionChanged(randint(0, parent.width), randint(0, parent.height))
            }
        }
        onDoubleClicked: {
            // Toggle the state between 'highlighted' and 'notHighlighted'
            if (highlighted) {
                customRect.state = "notHighlighted"
            } else {
                customRect.state = "highlighted"
            }
        }
    }
    //! [State Changes]

    //! [Timers]
    // Create an interval timer that emits the 'positionChanged' signal every 2 seconds
    Timer {
        interval: 2000
        repeat: true
        running: true
        onTriggered: customRect.positionChanged(randint(0, parent.width), randint(0, parent.height))
    }
    //! [Timers]
}
//! [Initialization]