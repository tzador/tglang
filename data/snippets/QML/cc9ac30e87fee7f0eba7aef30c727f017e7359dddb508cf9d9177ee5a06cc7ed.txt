// This code snippet creates a custom clock component

import QtQuick 2.15

// Define the root of the component
Item {
    id: clock
    width: 200
    height: 200

    // Define the clock's circular shape
    property int clockRadius: 100
    property int clockCenterX: clock.width / 2
    property int clockCenterY: clock.height / 2

    // Define the hour, minute, and second hands
    property int hour handLength: clockRadius * 0.5
    property int minuteHandLength: clockRadius * 0.7
    property int secondHandLength: clockRadius * 0.9

    // Create a timer to update the clock every second
    Timer {
        id: clockTimer
        interval: 1000 // update every 1 second
        repeat: true // keep repeating
        running: true // start the timer immediately
    }

    // Define the function to convert degrees to radians
    function degToRad(deg) {
        return deg * (Math.PI / 180)
    }

    // Define the function to calculate the position of the hands
    function handPosition(handLength, handRotation) {
        var angle = degToRad(handRotation)
        var x = clockCenterX + handLength * Math.cos(angle)
        var y = clockCenterY + handLength * Math.sin(angle)
        return Qt.point(x, y)
    }

    // Create a Rectangle to represent the clock face
    Rectangle {
        width: clockRadius * 2
        height: clockRadius * 2
        color: "black"
        radius: clockRadius
    }

    // Create a Text item to display the current time
    Text {
        id: clockTime
        color: "white"
        text: Qt.formatTime(clockTimer.deltaTime, "hh:mm:ss")
        font.pixelSize: 20
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottom: parent.bottom
    }

    // Create a Line to represent the hour hand
    Line {
        id: hourHand
        startX: clockCenterX
        startY: clockCenterY
        endX: handPosition(hourHandLength, clockTimer.deltaTime.hour * 30 - 90).x
        endY: handPosition(hourHandLength, clockTimer.deltaTime.hour * 30 - 90).y
        color: "white"
        width: 3
    }

    // Create a Line to represent the minute hand
    Line {
        id: minuteHand
        startX: clockCenterX
        startY: clockCenterY
        endX: handPosition(minuteHandLength, clockTimer.deltaTime.minute * 6 - 90).x
        endY: handPosition(minuteHandLength, clockTimer.deltaTime.minute * 6 - 90).y
        color: "white"
        width: 2
    }

    // Create a Line to represent the second hand
    Line {
        id: secondHand
        startX: clockCenterX
        startY: clockCenterY
        endX: handPosition(secondHandLength, clockTimer.deltaTime.second * 6 - 90).x
        endY: handPosition(secondHandLength, clockTimer.deltaTime.second * 6 - 90).y
        color: "red"
        width: 1
    }

    // Create a Component to encapsulate the functionality for the hands
    Component {
        id: handComponent

        // Function to update the hand's position every second
        function updateHand(hand, handLength, angle) {
            hand.x = clockCenterX + handLength * Math.cos(angle)
            hand.y = clockCenterY + handLength * Math.sin(angle)
        }

        // Define the behavior of the hands in the onCompleted signal
        onCompleted: {
            updateHand(hourHand, hourHandLength, degToRad(clockTimer.currentTime.hour * 30 - 90))
            updateHand(minuteHand, minuteHandLength, degToRad(clockTimer.currentTime.minute * 6 - 90))
            updateHand(secondHand, secondHandLength, degToRad(clockTimer.currentTime.second * 6 - 90))
        }
    }

    // Instantiate the handComponent to add functionality to the hands
    Component.onCompleted: hourComponent.createObject(clock)
    Component.onCompleted: minuteComponent.createObject(clock)
    Component.onCompleted: secondComponent.createObject(clock)

    // Create the hour hand using the handComponent
    Component {
        id: hourComponent
        Hand {
            id: hourHand
            color: "white"
            width: 3
        }
    }

    // Create the minute hand using the handComponent
    Component {
        id: minuteComponent
        Hand {
            id: minuteHand
            color: "white"
            width: 2
        }
    }

    // Create the second hand using the handComponent
    Component {
        id: secondComponent
        Hand {
            id: secondHand
            color: "red"
            width: 1
        }
    }
}

// Create a custom QML type for the clock hands
Item {
    id: Hand
    property color color
    property int width
}