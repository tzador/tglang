// This is a custom component that displays a clickable button with a custom image as the icon

// Import necessary QML modules
import QtQuick 2.0
import QtQuick.Controls 2.0
import QtQuick.Layouts 1.3

// Define a custom component named 'ImageButton'
Item {
    id: ImageButton

    property string iconSource // This stores the path of the custom image to be used as the icon
    property string buttonText // This stores the text to be displayed below the icon
    property bool isClickable: true // This indicates whether the button is clickable or not

    // Define the visual structure of the component
    width: 100
    height: 120

    Rectangle {
        id: background
        color: "#e0e0e0"
        radius: 10
        border.color: "#c0c0c0"
        border.width: 1
        anchors.fill: parent
    }

    Image {
        id: icon
        source: iconSource // Set the source of the image to the value stored in the 'iconSource' property
        anchors.centerIn: parent
        width: 50
        height: 50
    }

    Text {
        id: buttonTextItem
        text: buttonText // Set the text to be displayed to the value stored in the 'buttonText' property
        color: "#333333"
        font.pixelSize: 12
        anchors.bottom: parent.bottom
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottomMargin: 15
    }

    // Define the behavior of the component
    MouseArea {
        id: buttonArea
        anchors.fill: parent
        enabled: isClickable // Bind the 'enabled' property to the value stored in the 'isClickable' property

        // Define the behavior for when the button is pressed
        onPressed: {
            background.scale = 0.95 // Scale the background rectangle to give a visual feedback
            icon.scale = 0.9 // Scale the icon to give a visual feedback
            buttonTextItem.scale = 0.9 // Scale the text to give a visual feedback
        }

        // Define the behavior for when the button is released
        onReleased: {
            background.scale = 1 // Reset the background scale back to normal
            icon.scale = 1 // Reset the icon scale back to normal
            buttonTextItem.scale = 1 // Reset the text scale back to normal

            // Emit a signal indicating that the button has been clicked
            if (isClickable) {
                buttonClicked() // Call the signal handler function defined later
            }
        }
    }

    // Define a signal named 'buttonClicked' with no parameters
    signal buttonClicked()

    // Define a signal handler function that emits the 'buttonClicked' signal and does something else
    function buttonClicked() {
        console.log("Button was clicked!")
        buttonClicked() // Emit the 'buttonClicked' signal
    }
}