/* This code snippet creates a custom button component in QML */
/* First, we create a Rectangle object to act as our button */
Rectangle {
    id: customButton // Unique identifier for this component
    width: 200  // Set the width of the button
    height: 60  // Set the height of the button
    color: "steelblue" // Set the background color of the button
    border.width: 2 // Set the width of the border
    border.color: "grey" // Set the color of the border

    /* Add a Text object as the label for our button */
    Text {
        text: "Click Me!" // Set the text to display on the button
        color: "white" // Set the text color
        font.pointSize: 24 // Set the font size
        anchors.centerIn: parent // Center the Text object within the button
    }

    /* Add mouse area to handle button clicks */
    MouseArea {
        anchors.fill: parent // The mouse area should cover the entire button
        onClicked: {
            console.log("Button was clicked!") // Print a message when the button is clicked
        }
    }
}

/* Animate the button when it is pressed */
/* First, create an animation using QML's Animation element */
Animation {
    id: buttonAnimation // Unique identifier for this animation
    target: customButton // Specify the target component for the animation
    property: "scale" // Specify which property of the target to animate
    duration: 100 // Set the duration of the animation in milliseconds
    easing.type: Easing.InOutElastic // Set the easing type for a bouncy effect
    from: 1 // Set the initial scale value
    to: 0.8 // Set the final scale value
    onRunningChanged: {
        /* Once the animation is complete, reset the scale back to 1 */
        if (!running && customButton.scale !== 1) {
            customButton.scale = 1;
        }
    }
}

/* Trigger the animation when the button is pressed */
CustomButton.onClicked: {
    buttonAnimation.start(); // Start the animation when the button is clicked
}