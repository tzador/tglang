import QtQuick 2.6 // Importing QtQuick 2.6 version

/* Defining a RectangleItem as base item */
RectangleItem {
    id: baseItem // Assigning an id
    color: "red" // Setting color property to red
    border { // Defining a border element within the RectangleItem
        width: 2 // Assigning width property
        color: "black" // Assigning color property
    }
    
    Rectangle { // Defining a Rectangle element within the RectangleItem
        id: nestedRect // Assigning an id
        x: 10 // Setting x property to 10
        y: 10 // Setting y property to 10
        width: 50 // Setting width property to 50
        height: 50 // Setting height property to 50
        color: "blue" // Setting color property to blue
    }
    
    MouseArea { // Defining a MouseArea element within the RectangleItem
        id: mouseArea // Assigning an id
        anchors.fill: parent // Setting anchors to fill parent item
        onClicked: { // Defining a function to be called on click
            baseItem.color = "green" // Setting color property of baseItem to green
            nestedRect.width = 100 // Setting width property of nestedRect to 100
            mouseArea.enabled = false // Disabling mouseArea element
        }
    }
    
    states: [ // Defining states to be triggered by different conditions
        State { // First state
            name: "active" // Assigning a name
            when: mouseArea.enabled == true // Triggered when mouseArea is enabled
            PropertyChanges { // Defining changes to be applied when state is triggered
                target: nestedRect // Targeting nestedRect item
                color: "yellow" // Changing color property to yellow
            }
        },
        State { // Second state
            name: "disabled" // Assigning a name
            when: mouseArea.enabled == false // Triggered when mouseArea is disabled
            PropertyChanges { // Defining changes to be applied when state is triggered
                target: nestedRect // Targeting nestedRect item
                color: "grey" // Changing color property to grey
            }
        }
    ]
    
    transitions: [ // Defining transitions for smooth state changes
        Transition { // First transition
            from: "* -> active" // Applying transition from any state to active state
            PropertyAnimation { // Defining property animation to be applied during transition
                target: nestedRect // Targeting nestedRect item
                property: "scale" // Setting property to be animated to scale
                duration: 1000 // Animation duration (in milliseconds)
                easing.type: Easing.OutBounce // Setting easing type
                to: 2 // Scaling factor to animate to
            }
        },
        Transition { // Second transition
            from: "* -> disabled" // Applying transition from any state to disabled state
            PropertyAnimation { // Defining property animation to be applied during transition
                target: nestedRect // Targeting nestedRect item
                property: "rotation" // Setting property to be animated to rotation
                duration: 500 // Animation duration (in milliseconds)
                easing.type: Easing.OutCirc // Setting easing type
                to: 90 // Rotation angle to animate to
            }
        }
    ]
}