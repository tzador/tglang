// This is a QML code snippet that creates a simple 2D rectangle and animates it

import QtQuick 2.0 // Import the necessary QML module

Rectangle { // Create a Rectangle object
    id: myRectangle // Give it an id for easy reference
    
    width: 200 // Set the width of the rectangle to 200 pixels
    height: 200 // Set the height of the rectangle to 200 pixels
    color: "red" // Set the color of the rectangle to red
    
    MouseArea { // Create a MouseArea within the rectangle
        anchors.fill: parent // Set the MouseArea to cover the entire rectangle
        onClicked: { // When the MouseArea is clicked, execute the following code
            if (myRectangle.color === "red") { // If the rectangle is currently red
                myRectangle.color = "blue" // Change the color to blue
            } else { // Otherwise, if the rectangle is currently blue
                myRectangle.color = "red" // Change the color back to red
            }
        }
    }
    
    states: [ // Define two states for the rectangle to transition between
        State { // First state
            name: "small" // State name for easy reference
            PropertyChanges { // Define a property to change in this state
                target: myRectangle // Target the rectangle
                width: 100 // Set the width to 100 pixels
                height: 100 // Set the height to 100 pixels
            }
        },
        State { // Second state
            name: "large" // State name for easy reference
            PropertyChanges { // Define a property to change in this state
                target: myRectangle // Target the rectangle
                width: 400 // Set the width to 400 pixels
                height: 400 // Set the height to 400 pixels
            }
        }
    ]
    
    transitions: [ // Define a transition between the two states
        Transition { // Create a Transition object
            from: "*" // Transition from any state
            to: "*" // Transition to any state
            reversible: true // Allow the transition to be reversed
            PropertyAnimation { // Define the type of animation for the transition
                target: myRectangle // Target the rectangle
                property: "scale" // Animate the scale property
                duration: 1000 // Set the duration of the animation to 1 second
                easing.type: Easing.OutBounce // Use an easing function for a more realistic animation 
            }
        }
    ]
    
    Component.onCompleted: { // Once the rectangle is created and rendered, execute the following code
        var state = "small" // Start with the initial state
        setInterval(function() { // Create a timer to switch between states
            if (state === "small") { // If currently in the small state
                state = "large" // Switch to the large state
            } else { // If currently in the large state
                state = "small" // Switch back to the small state
            }
            myRectangle.state = state // Set the new state for the rectangle
        }, 2000) // Change states every 2 seconds
    }
}