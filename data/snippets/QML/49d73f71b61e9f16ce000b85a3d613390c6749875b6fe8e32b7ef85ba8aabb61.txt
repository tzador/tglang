// This code snippet contains a custom paint item that creates a star shape in QML.

import QtQuick 2.14         // Import Qt Quick and version 2.14

Item {                      // Create an Item element
    id: starItem            // Assign an id to the Item element

    property int numberOfPoints: 5      // Create a property to store the number of points in the star shape
    property int outerRadius: 50        // Create a property to store the outer radius of the star
    property int innerRadius: 25        // Create a property to store the inner radius of the star

    width: outerRadius * 2      // Set the width of the Item element to twice the outer radius
    height: width                // Set the height of the Item element to be the same as the width

    Rectangle {                            // Create a rectangle element to serve as the background of the star
        anchors.fill: parent                // Set the rectangle to fill the entire parent
        color: "black"                       // Set the color of the rectangle to black
    }

    Canvas {                       // Create a canvas element to draw the star shape
        anchors.fill: parent          // Set the canvas to fill the entire parent

        onPaint: {                     // Implement the onPaint function to draw the star shape
            var ctx = getContext("2d");     // Get the drawing context for the canvas

            ctx.strokeStyle = "white";          // Set the stroke color to white
            ctx.lineWidth = 1;                   // Set the line width to 1
            ctx.beginPath();                      // Start a new path for drawing
            ctx.moveTo(outerRadius, 0);            // Move the cursor to the first point of the star shape

            // Loop through the number of points and calculate the coordinates for each point
            for (var i = 1; i < numberOfPoints * 2; i++) {
                var angle = i * Math.PI / numberOfPoints;   // Calculate the angle based on the number of points
                var radius = i % 2 === 0 ? outerRadius : innerRadius;     // Alternate between the outer and inner radius
                var x = radius * Math.cos(angle);        // Calculate the x coordinate
                var y = radius * Math.sin(angle);        // Calculate the y coordinate 
                ctx.lineTo(x, y);                       // Draw a line to the calculated coordinates
            }

            ctx.closePath();                         // Close the path
            ctx.stroke();                            // Stroke the path to draw the star shape
        }
    }
}