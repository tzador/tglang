/**
 * This is a complex code snippet in QML that creates a custom button
 * with a gradient background and a hover animation
*/

import QtQuick 2.15
import QtQuick.Controls 2.15

// Define the custom button component
Rectangle {
    id: customButton

    // Define default properties
    property color buttonColor: "#7EB04A"
    property color buttonHoverColor: "#5D803E"
    property color textColor: "#FFFFFF"

    // Create a gradient background
    Rectangle {
        id: buttonBackground
        anchors.fill: parent

        // Use the properties to set the gradient colors
        gradient: Gradient {
            GradientStop { position: 0.0; color: customButton.buttonColor }
            GradientStop { position: 1.0; color: customButton.buttonHoverColor }
        }
    }

    // Add a hover animation
    Transitions {
        id: hoverAnimation
        enabled: true

        // Define the animation properties
        PropertyAnimation {
            target: buttonBackground
            property: "opacity"
            duration: 100
            easing.type: Easing.InOutQuad
        }
    }

    // Create a text label for the button
    Text {
        id: buttonText
        text: "Click Me!"
        color: customButton.textColor
        font.pixelSize: 16
        anchors.centerIn: parent
    }

    // Create mouse area for hover detection
    MouseArea {
        anchors.fill: parent

        // When mouse hovers over, start the hover animation
        onEntered: {
            hoverAnimation.running = true
        }

        // When mouse exits, reverse the animation
        onExited: {
            hoverAnimation.running = false
            buttonBackground.opacity = 1.0
        }
    }
}

// Example usage
customButton {
    buttonColor: "#FFA07A"
    buttonHoverColor: "#FF8C69"
    textColor: "#000000"
}