// This is a QML code snippet that creates a complex UI element
// The element is a custom slider with custom properties and functionality

import QtQuick 2.0

Rectangle {
    id: slider
    width: 300
    height: 30

    // Custom properties
    property int minValue: 0
    property int maxValue: 100
    property int currentValue: 50
    property bool enabled: true

    // Signals for value changes
    signal valueChanged(int newValue)
    signal sliderMoved(int newPosition)

    // Mouse events for interaction
    MouseArea {
        anchors.fill: parent
        onPressed: {
            // Disable clicking if slider is not enabled
            if (!slider.enabled) return;
            // Calculate the new value based on position
            var newValue = (mouseX / width) * (slider.maxValue - slider.minValue) + slider.minValue;
            // Update current value and emit signal
            slider.currentValue = newValue;
            slider.valueChanged(newValue);
            // Hold the mouse position for dragging
            mouse.left.x = mouseX;
        }
        onPositionChanged: {
            // Disable moving if slider is not enabled
            if (!slider.enabled) return;
            // Calculate the new value based on position
            var newValue = (mouseX / width) * (slider.maxValue - slider.minValue) + slider.minValue;
            // Update current value and emit signal
            slider.currentValue = newValue;
            slider.sliderMoved(newValue);
            // Update the position of the mouse
            mouse.left.x = mouseX;
        }
    }

    // Visual representation of the slider
    Rectangle {
        id: sliderBar
        x: slider.currentValue * (slider.width / (slider.maxValue - slider.minValue))
        width: slider.width - 20
        height: 10
        color: "lightgray"
        border.width: 1
        border.color: "gray"
        radius: height / 2
        // Control the movement of the slider bar using the mouse position
        MouseArea {
            anchors.fill: parent
            acceptedButtons: Qt.LeftButton
            onPressed: {
                // Disable clicking if slider is not enabled
                if (!slider.enabled) return;
                // Hold the mouse position for dragging
                mouse.left.x = mouseX;
            }
            onPositionChanged: {
                // Disable moving if slider is not enabled
                if (!slider.enabled) return;
                // Calculate the new position within the slider boundaries
                var newPosition = Math.max(slider.x + mouse.left.x - mouseX, 0);
                newPosition = Math.min(newPosition, slider.width - sliderBar.width);
                // Update the position of the slider bar
                sliderBar.x = newPosition;
                // Calculate the new value and emit signal
                var newValue = (newPosition / slider.width) * (slider.maxValue - slider.minValue) + slider.minValue;
                slider.currentValue = newValue;
                slider.sliderMoved(newValue);
            }
        }
    }

    // Visual representation of the slider knob
    Rectangle {
        id: sliderKnob
        x: sliderBar.x + sliderBar.width - 10
        y: slider.height / 2 - 10
        width: 20
        height: 20
        color: "white"
        border.width: 1
        border.color: "gray"
        radius: width / 2
        // Control the movement of the slider knob using the mouse position
        MouseArea {
            anchors.fill: parent
            acceptedButtons: Qt.LeftButton
            onPressed: {
                // Disable clicking if slider is not enabled
                if (!slider.enabled) return;
                // Hold the mouse position for dragging
                mouse.left.x = mouseX;
            }
            onPositionChanged: {
                // Disable moving if slider is not enabled
                if (!slider.enabled) return;
                // Calculate the new position within the slider boundaries
                var newPosition = Math.max(sliderBar.x + sliderKnob.x + mouse.left.x - sliderBar.x - mouseX, 0);
                newPosition = Math.min(newPosition, slider.width - sliderBar.width);
                // Update the position of the slider knob
                sliderKnob.x = newPosition - sliderBar.x;
                // Calculate the new value and emit signal
                var newValue = (newPosition / slider.width) * (slider.maxValue - slider.minValue) + slider.minValue;
                slider.currentValue = newValue;
                slider.sliderMoved(newValue);
            }
        }
    }

    // Display the current value of the slider
    Text {
        anchors.fill: parent
        text: "Current Value: " + slider.currentValue
        font.pixelSize: 14
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
    }
}