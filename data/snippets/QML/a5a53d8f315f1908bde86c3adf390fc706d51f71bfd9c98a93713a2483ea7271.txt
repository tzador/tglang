// This code snippet creates a custom reusable button component with various properties and states.
// The button uses a Rectangle item as a background, with customizable color and border properties.
Item {
    id: customButton // id for accessing this component later

    property Item onClicked // property for defining the action to be performed when button is clicked
    property string buttonText // property for setting the button text
    property color color // property for customizing the background color

    // states for defining different button states
    states: [
        State {
            name: "normal" // state for the default button appearance
            PropertyChanges {
                target: background // target item to change properties of
                color: customButton.color // set the background color to the custom color property
            }
            PropertyChanges {
                target: text // target item to change properties of
                text: customButton.buttonText // set the button text to the custom buttonText property
            }
        },
        State {
            name: "pressed" // state for when button is pressed
            PropertyChanges {
                target: background // change background color to a lighter shade for pressed effect
                color: customButton.color.lighter(2000)
            }
        },
        State {
            name: "disabled" // state for when button is disabled
            PropertyChanges {
                target: background // change background color to grey for disabled effect
                color: "grey"
            }
        }
    ]

    Rectangle {
        id: background // id for accessing this item later
        color: customButton.color // set background color to custom color property
        border.color: "black" // set border color
        border.width: 1 // set border width
        radius: 5 // round the corners of the button

        // mouse area for handling button clicks
        MouseArea {
            anchors.fill: parent // set to fill the entire button area
            onClicked: {
                customButton.onClicked() // perform the action defined by the onClicked property
                customButton.state = "pressed" // change button state to pressed
            }
        }
    }

    Text {
        id: text // id for accessing this item later
        text: customButton.buttonText // set text to custom buttonText property
        color: "white" // set text color
        anchors.centerIn: parent // center text within the button
    }
}