// This QML code snippet creates a customized Button component
// with a gradient background and a hover animation.

import QtQuick 2.0

Rectangle { // creates a rectangle to contain the components

    width: 200 // sets the width of the rectangle
    height: 50 // sets the height of the rectangle
    radius: 10 // sets the corner radius of the rectangle
    color: "#40739e" // sets the initial background color of the rectangle

    property color gradientStartColor // creates a property for the start color of the gradient
    property color gradientEndColor // creates a property for the end color of the gradient

    // specifies the gradient for the background 
    gradient: Gradient {
        GradientStop { position: 0.0; color: gradientStartColor } // start color of the gradient at 0%
        GradientStop { position: 1.0; color: gradientEndColor } // end color of the gradient at 100%
    }

    // creates a state for when the button is hovered
    MouseArea {
        id: hoverArea // sets an id for the MouseArea
        anchors.fill: parent // sets the MouseArea to cover the entire button

        // defines the animations for the hover state
        Behavior on opacity { // animates the opacity property
            PropertyAnimation { // specifies the type of animation
                duration: 100 // sets the duration of the animation to 100 milliseconds
            }
        }
        Behavior on gradientStartColor { // animates the start color of the gradient
            ColorAnimation { // specifies the type of animation
                duration: 100 // sets the duration of the animation to 100 milliseconds
            }
        }
        Behavior on gradientEndColor { // animates the end color of the gradient
            ColorAnimation { // specifies the type of animation
                duration: 100 // sets the duration of the animation to 100 milliseconds
            }
        }
    }

    // text label for the button
    Text {
        text: "Click Me!" // sets the text for the label
        anchors.centerIn: parent // centers the label within the button
        color: "white" // sets the text color to white
        font.pixelSize: 20 // sets the font size to 20
    }
}