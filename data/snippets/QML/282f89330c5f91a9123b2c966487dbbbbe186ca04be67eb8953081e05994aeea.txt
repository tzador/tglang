//This code creates a custom button component with multiple states
Rectangle {
    id: button 
    width: 200
    height: 50
    color: "#3f51b5" //set the button's initial color

    property bool hovered: false //create a property to track if the button is being hovered over
    property bool pressed: false //create a property to track if the button is being pressed

    signal clicked() //create a signal for the clicked event

    MouseArea { //create a mouse area to detect mouse events within the button
        id: area
        anchors.fill: parent
        hoverEnabled: true

        onEntered: button.hovered = true //when mouse enters button area, set hovered property to true
        onExited: button.hovered = false //when mouse exits button area, set hovered property to false
        onPressed: button.pressed = true //when mouse presses down on button, set pressed property to true
        onReleased: {
            button.pressed = false //when mouse releases from button, set pressed property to false
            if (mouse.x > 0 && mouse.x < button.width && mouse.y > 0 && mouse.y < button.height)
                clicked() //if mouse is released within button area, emit the clicked signal
        }
    }

    states: [
        State {
            name: "normal" //set the default state of the button
            PropertyChanges { target: button; color: "#3f51b5" } //change the color of the button for this state
        },
        State {
            name: "hovered"
            //when the hovered property is true, change the color of the button to a lighter shade
            when: button.hovered
            PropertyChanges { target: button; color: "#5c6bc0" }
        },
        State {
            name: "pressed"
            //when the pressed property is true, change the color of the button to a darker shade
            when: button.pressed
            PropertyChanges { target: button; color: "#2c387e" }
        }
    ]

    transitions: Transition {
        //add a transition between states
        ParallelAnimation { 
            //use parallel animation to change the button's color and scale when transitioning between states
            ColorAnimation { target: button; property: "color" }
            ScaleAnimation { target: button; property: "scale" }
        }
    }
}