// This code snippet creates a complex layout with dynamic properties and signals

// Importing necessary modules
import QtQuick 2.12
import QtQuick.Window 2.12
import QtQuick.Layouts 1.12

// Creating a window
Window {
    id: main_window
    width: 600
    height: 400
    visible: true
    title: "Complex Layout"

    // Defining a layout to organize the elements
    GridLayout {
        anchors.fill: parent
        rows: 2
        columns: 2

        // Creating a label and applying custom style
        Label {
            text: "Welcome to QML!"
            font.pixelSize: 20
            Layout.fillWidth: true
            Layout.fillHeight: true
            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
        }

        // Creating a dynamic property
        Rectangle {
            id: rect
            width: 100
            height: 100
            Layout.fillWidth: true
            Layout.fillHeight: true
            color: "green"

            // Applying a signal handler
            signal colorChanged

            // Changing the color on click
            MouseArea {
                anchors.fill: parent
                onClicked: {
                    rect.color = Qt.rgba(Math.random(),Math.random(),Math.random(),1)
                    // Emitting the signal
                    rect.colorChanged()
                }
            }
        }

        // Creating a text input and using the signal from rectangle to change its properties
        TextField {
            id: input
            Layout.fillWidth: true
            Layout.fillHeight: true
            font.pixelSize: 15
            horizontalAlignment: Text.AlignHCenter
            // Binding the color property using the signal
            color: rect.color
            // Applying a placeholder text
            placeholderText: "Enter text"
            // Changing the font color when the clicked signal is emitted
            onClicked: {
                input.color = Qt.rgba(Math.random(),Math.random(),Math.random(),1)
            }
        }

        // Creating a button and connecting it to the signal
        Button {
            id: btn
            Layout.fillWidth: true
            Layout.fillHeight: true
            text: "Click to change rectangle color"
            // Connecting the signal from rectangle to change button color
            Connections {
                target: rect
                onColorChanged: {
                    btn.color = rect.color
                }
            }
        }
    }
}