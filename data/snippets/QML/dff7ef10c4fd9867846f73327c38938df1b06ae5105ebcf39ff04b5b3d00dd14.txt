// This code snippet generates a custom carousel component with three images.

Item {
  id: carousel  // unique identifier for the item

  property int currentIndex: 0  // property to keep track of current image index
  property int imageWidth: 25  // width of each image, in percentages
  property int imageHeight: 50 // height of each image, in percentages
  property int spacing: 10 // spacing between images, in pixels
  property var images: ["image1.png", "image2.png", "image3.png"] // list of images to display

  width: (imageWidth + spacing) * 3  // total width of the carousel
  height: imageHeight // height of the carousel

  RowLayout {  // layout for images to be displayed horizontally
    x: -carousel.currentIndex * (carousel.imageWidth + carousel.spacing)  // x position for current image
    spacing: carousel.spacing  // spacing between images
    Repeater {  // repeater to dynamically create images
      model: carousel.images  // model for repeater to use
      Image {  // QML image component
        width: carousel.imageWidth + "%" // width of image based on percentage
        height: carousel.imageHeight + "%" // height of image based on percentage
        source: modelData // set source of image to corresponding image in images list
      }
    }
  }

  Rectangle {  // rectangle to display current image in center
    x: carousel.imageWidth  // x position for rectangle
    width: imageWidth + "%" // width of rectangle based on percentage
    height: imageHeight + "%" // height of rectangle based on percentage
    color: "grey" // color of rectangle
    BorderImage {  // QML border image component
      source: images[currentIndex] // set source of border image to current image in list
      anchors.fill: parent // fill rectangle with border image
    }
  }

  Timer { // timer to automatically cycle through images
    interval: 2000 // interval of timer in milliseconds
    running: true   // start the timer
    repeat: true    // make timer repeat
    onTriggered: carousel.currentIndex = (carousel.currentIndex + 1) % images.length // update current index to next image
  }
}