// This is a complex and lengthy code snippet in QML
// It creates a custom button with different states and animations
import QtQuick 2.12

Rectangle {
    id: button
    width: 150
    height: 50
    color: "gray"
    radius: 10
    border.width: 2
    border.color: "#555"

    // State for when the mouse is hovering over the button
    property bool hovered: false
    states: State {
        name: "hovered"
        when: button.hovered
        PropertyChanges { target: button; color: "#ddd" }
    }

    // State for when the button is pressed
    property bool pressed: false
    states: State {
        name: "pressed"
        when: button.pressed
        PropertyChanges { target: button; color: "steelblue" }
    }

    // State for when the button is disabled
    property bool disabled: false
    states: State {
        name: "disabled"
        when: button.disabled
        PropertyChanges { target: button; color: "lightgray" }
    }

    // Transitions for when states change
    transitions: Transition {
        NumberAnimation { properties: "width, height, radius"; easing.type: Easing.OutQuad; duration: 200 }
    }

    // Animations for when the button is hovered over
    Behavior on hovered {
        PropertyAnimation { properties: "color"; duration: 200 }
    }

    // Animations for when the button is pressed
    Behavior on pressed {
        PropertyAnimation { properties: "color"; duration: 200 }
        PropertyAnimation { target: button; properties: "x, y"; from: 0; to: 5; duration: 200; easing.type: Easing.InOutQuad }
    }

    // On click of the button, toggle the pressed state
    MouseArea {
        anchors.fill: parent
        onClicked: button.pressed = !button.pressed
    }

    // Text label for the button
    Text {
        anchors.centerIn: parent
        text: "Custom Button"
        font.pixelSize: 16
        // When disabled, grey out the text
        color: !button.disabled ? "black" : "darkgray"
    }
}