// This is a QML code snippet that creates a custom reusable button component
import QtQuick 2.12
import QtQuick.Controls 2.5

ComboBox {
    id: customButton // sets id for the button component
    text: "Custom Button" // sets the initial text of the button
    width: 200 // sets the width of the button to 200 pixels
    
    // sets the property of the button to have a customized background, border, and font color
    property color background: "#1F1F1F"
    property color border: "#FFD600"
    property color textColor: "#FFFFFF"
    
    // sets the background, border, and text color when the button is pressed and held
    backgroundPressed: "#FFD600"
    borderPressed: "#FFFFFF"
    textColorPressed: "#1F1F1F"
    
    // sets the background, border, and text color when the button is hovered over
    backgroundHovered: "#FFFFFF"
    borderHovered: "#FFD600"
    textColorHovered: "#1F1F1F"
    
    // assigns an implicitWidth and implicitHeight for the component
    implicitWidth: textItem.implicitWidth + 20
    implicitHeight: textItem.implicitHeight + 10
    
    // creates a Rectangle element as the background for the button
    Rectangle {
        anchors {
            fill: parent
            margins: 3
        }
        color: customButton.background // sets the color to the previously defined background color
        border.color: customButton.border // sets the border color to the previously defined border color
        radius: 5 // sets the radius of the rectangle corners to be rounded
        
        // creates a gradient for the background with a top to bottom linear gradient
        gradient: Gradient {
            GradientStop { position: 0.0; color: customButton.background }
            GradientStop { position: 1.0; color: "#0B0B0B" }
        }
    }
    
    // creates a Label element with the text of the button
    Label {
        id: textItem // sets id for the Label element
        anchors.centerIn: parent // centers the label within the button
        text: customButton.text // sets the label text to be the same as the button text
        font.pixelSize: 20 // sets the font size to 20 pixels
        color: customButton.textColor // sets the font color to the previously defined text color
    }
    
    // creates an animation for the button when it is pressed, to simulate a click effect
    MouseArea {
        anchors.fill: parent // assigns the mouseArea to cover the entire button
        onPressed: {
            TextColorAnimation {
                target: textItem // sets the animation to target the label element
                color: "#FFD600" // changes the label's color to the previously defined pressed text color
                duration: 200 // sets the animation duration to 200 milliseconds
            }
            
            RectangeScaleAnimation {
                target: parent // sets the animation to target the rectangle background element
                scale: 1.1 // scales the rectangle to 110% of its original size
                duration: 200 // sets the animation duration to 200 milliseconds
            }
        }
        
        // creates an animation for the button when the mouse is released, to revert to its default state
        onReleased: {
            TextColorAnimation {
                target: textItem // sets the animation to target the label element
                color: customButton.textColor // changes the label's color back to the default color
                duration: 200 // sets the animation duration to 200 milliseconds
            }
            
            RectangeScaleAnimation {
                target: parent // sets the animation to target the rectangle background element
                scale: 1.0 // scales the rectangle back to its original size
                duration: 200 // sets the animation duration to 200 milliseconds
            }
        }
    }
}