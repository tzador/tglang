// This example code snippet creates a complex user interface using QML

import QtQuick 2.12 // Importing the QtQuick library with version 2.12
import QtQuick.Controls 2.5 // Importing the QtQuick Controls library with version 2.5

Rectangle { // A basic building block for creating graphical components
    id: root // Setting an id for this component

    width: 800 // Setting the width of the component to 800 pixels
    height: 600 // Setting the height of the component to 600 pixels
    color: "lightgrey" // Setting the background color to light grey

    Text { // Creating a text element within the rectangle
        text: "Welcome to my QML user interface" // Setting the text to display
        font.pixelSize: 40 // Setting the font size to 40 pixels
        anchors.centerIn: parent // Aligning the text to be centered within the parent element
    }

    Button { // Creating a button element within the rectangle
        text: "Click me!" // Setting the text for the button
        font.bold: true // Making the button text bold
        font.pixelSize: 20 // Setting the font size to 20 pixels
        anchors { // Setting anchors to align and position the button within the rectangle
            top: text.bottom // Aligning the top of the button with the bottom of the text element
            horizontalCenter: parent.horizontalCenter // Aligning the horizontal center of the button with the horizontal center of the parent element
            margins: 20 // Setting a 20 pixel margin on all sides of the button
        }
        onClicked: { // Defining behavior for when the button is clicked
            console.log("Button clicked!") // Printing "Button clicked!" to the console
            root.color = "lightblue" // Changing the background color of the rectangle to light blue
        }
    }

    Rectangle { // Creating a nested rectangle within the original rectangle
        width: 200 // Setting the width of the nested rectangle to 200 pixels
        height: 200 // Setting the height of the nested rectangle to 200 pixels
        color: "red" // Setting the background color to red
        anchors.centerIn: parent // Aligning the rectangle to be centered within the parent element

        Text {
            text: "Nested rectangle" // Setting the text to display
            font.pixelSize: 30 // Setting the font size to 30 pixels
            anchors.centerIn: parent // Aligning the text to be centered within the parent element
        }
    }
}