/* This is a complex QML code that sets up a custom button with various properties and behaviors */

import QtQuick 2.0 // importing the necessary module

Rectangle { // creating a rectangle to contain the button, can be replaced with any other QML element
    id: buttonContainer // assigning an id for referencing later
    
    width: 100 // setting the width of the rectangle
    height: 40 // setting the height of the rectangle
    color: "lightblue" // setting the background color of the rectangle
    
    property bool isHovered: false // creating a custom property to track if the button is currently being hovered over
    property bool isPressed: false // creating a custom property to track if the button is currently being pressed
    
    // signal handlers to change the custom properties when interacting with the button
    onHoveredChanged: isHovered = hovered
    onPressedChanged: isPressed = pressed
    
    // adding a gradient background to the rectangle
    gradient: Gradient {
        GradientStop { position: 0; color: "#3e81f0" } // start of the gradient
        GradientStop { position: 1; color: "#1d5290" } // end of the gradient
    }
    
    // adding a border to the rectangle
    border {
        width: 1 // setting the border width
        color: "white" // setting the border color
        radius: 10 // setting the border radius, creating a rounded rectangle
    }
    
    // adding a text element to display the button label
    Text {
        id: buttonText // assigning an id for referencing later
        
        text: "Click Me!" // setting the button label
        color: "white" // setting the text color
        bold: true // making the text bold
        wrapMode: Text.WordWrap // setting the wrap mode for when the label exceeds the width of the button
        
        // adjusting the position of the label within the rectangle
        anchors.centerIn: parent
        anchors.verticalCenterOffset: -2 // offsetting the label vertically to center it
        font.pixelSize: 16 // setting the font size
    }
    
    // adding a behavior to change the color of the button when hovered over
    Behavior on isHovered {
        ColorAnimation { // using a color animation to smoothly transition the color change
            target: buttonContainer // referencing the parent rectangle
            property: "color" // specifying the property to be changed
            to: isHovered ? "lightblue" : "royalblue" // specifying the target color when hovered or not hovered
        }
        
        // adjusting the label text color to make it more visible on the darker background color when hovered
        PropertyAnimation {
            target: buttonText // referencing the button label
            property: "color" // specifying the property to be changed
            to: isHovered ? "white" : "black" // specifying the target color when hovered or not hovered
        }
    }
    
    // adding a behavior to change the size of the button when pressed
    Behavior on isPressed {
        Scale {
            duration: 250 // setting the duration for the animation
            xScale: isPressed ? 0.95 : 1.0 // specifying the target x scale when pressed or not pressed
            yScale: isPressed ? 0.95 : 1.0 // specifying the target y scale when pressed or not pressed
            origin.x: parent.width / 2 // setting the horizontal center of the scaling to the center of the button
            origin.y: parent.height / 2 // setting the vertical center of the scaling to the center of the button
        }
    }
    
    // adding a handler for when the button is clicked
    MouseArea {
        anchors.fill: parent // making the mouse area fill the entire rectangle
        onClicked: { // specifying the onClicked signal handler
            console.log("The button was clicked!") // printing a message to the console when the button is clicked
        }
    }
}