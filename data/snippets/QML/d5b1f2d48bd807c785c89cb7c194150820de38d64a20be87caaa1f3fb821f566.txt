// This code snippet is a complex QML component that creates a customized button
Item {
  id: customButton // sets the id of the button for referencing in other parts of the code
  
  // properties
  property string text: "" // represents the text displayed on the button
  property color textColor: "black" // sets the color of the button text
  property color backgroundColor: "lightblue" // sets the color of the button background
  property int fontSize: 16 // sets the font size of the button text
  
  // signals (events)
  signal clicked // signal emitted when button is clicked
  
  // visuals
  Rectangle { // creates a rectangle which acts as the button
    id: buttonRect // sets the id of the rectangle for referencing
    color: backgroundColor // sets the color of the rectangle to the background color property
    border.width: 2 // sets the width of the rectangle border
    border.color: "darkblue" // sets the color of the rectangle border
    radius: 5 // sets the border radius of the rectangle to create rounded corners
    
    Text { // creates the button text
      id: buttonText // sets the id of the text for referencing
      anchors.centerIn: parent // centers the text in the rectangle
      font.pointSize: fontSize // sets the font size to the font size property
      text: customButton.text // sets the text to the text property of the button component
      color: customButton.textColor // sets the text color to the textColor property of the button component
    }
    
    MouseArea { // creates a clickable area for the button
      id: buttonMouseArea // sets the id for referencing
      anchors.fill: parent // fills the entire rectangle to make the entire area clickable
      onClicked: customButton.clicked() // emits the clicked signal when the button is clicked
    }
  }
}