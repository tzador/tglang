import QtQuick 2.15 // Importing the QtQuick library to use its functionality

Rectangle { // Creating a rectangle as the root element
    id: root // Assigning an id to the root element
    width: 400 // Setting the width of the rectangle to 400 pixels
    height: 400 // Setting the height of the rectangle to 400 pixels
    color: "lightgrey" // Setting the color of the rectangle to light grey
    
    Text { // Creating a Text element inside the Rectangle
        text: "Hello World!" // Assigning the text to be displayed as "Hello World!"
        anchors.centerIn: parent // Centering the Text element in the parent (Rectangle)
        
        font { // Setting the text font
            family: "Arial" // Setting the font family to Arial
            pixelSize: 30 // Setting the font size to 30 pixels
        }
    }
    
    MouseArea { // Creating a MouseArea element to handle mouse events
        anchors.fill: parent // Filling the entire Rectangle with the MouseArea
        onClicked: { // Handling the onClicked event
            console.log("Rectangle clicked!") // Printing a message to the console when the rectangle is clicked
            root.color = "darkgrey" // Changing the color of the rectangle to dark grey
        }
        
        onReleased: { // Handling the onReleased event
            console.log("Rectangle released!") // Printing a message to the console when the mouse is released
            root.color = "lightgrey" // Changing the color of the rectangle back to light grey when released
        }
    }
    
    Rectangle { // Creating a nested rectangle inside the root Rectangle
        anchors.centerIn: parent // Centering the nested rectangle in the parent (root) Rectangle
        width: 200 // Setting the width of the nested rectangle to 200 pixels
        height: 200 // Setting the height of the nested rectangle to 200 pixels
        color: "darkgrey" // Setting the color of the nested rectangle to dark grey
        
        states: [ // Defining different states for the nested rectangle
            State { // A state when the rectangle is pressed
                name: "pressed" // Assigning a name to the state
                PropertyChanges { target: root; color: "lightgrey" } // Changing the color of the root Rectangle to light grey
                PropertyChanges { target: this; scale: 0.9 } // Scaling the nested rectangle to 90%
            },
            State { // A state when the rectangle is released
                name: "released" // Assigning a name to the state
                PropertyChanges { target: root; color: "darkgrey" } // Changing the color of the root Rectangle back to dark grey
                PropertyChanges { target: this; scale: 1.0 } // Returning the nested rectangle to its original scale (100%)
            }
        ]
        
        transitions: [ // Defining transitions between the states
            Transition { // A transition when going from "released" state to "pressed" state
                from: "released" // Defining the start state of the transition
                to: "pressed" // Defining the end state of the transition
                PropertyAnimation { target: this; property: "scale"; duration: 100; easing.type: Easing.OutQuad } // Scaling the nested rectangle with an easing effect
            },
            Transition { // A transition when going from "pressed" state to "released" state
                from: "pressed" // Defining the start state of the transition
                to: "released" // Defining the end state of the transition
                PropertyAnimation { target: this; property: "scale"; duration: 100; easing.type: Easing.OutQuad } // Scaling the nested rectangle with an easing effect
            }
        ]
    }
}