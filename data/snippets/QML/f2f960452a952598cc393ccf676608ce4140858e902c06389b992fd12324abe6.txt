/* This code snippet is a complex QML component that provides a customized button with a gradient background and hover animation. */

Item {
    /* This item is the root of our component and provides the base for all the elements inside it. */
    id: customButton
    /* The id is used for referencing this item in other parts of the code. */

    property color primaryColor: "lightgreen"
    /* This property defines the base color of our button, which in this case is a light green. */

    property color secondaryColor: "darkgreen"
    /* This property defines the secondary color, which in this case is a darker shade of green. */

    property int borderWidth: 2
    /* This property defines the width of the button's border, which in this case is set to 2 pixels. */

    property int borderRadius: 3
    /* This property defines the radius of the button's corners, which in this case is set to 3 pixels. */

    property int hoverAnimationDuration: 500
    /* This property defines the duration of our hover animation, which in this case is set to 500 milliseconds. */

    /* The code below creates a gradient element that will be used as a background for our button. */
    Rectangle {
        /* This rectangle will provide the base for our gradient. */
        width: parent.width
        height: parent.height
        /* The width and height are set to match the size of its parent, which is our customButton item. */

        gradient: Gradient {
            /* The gradient element provides a way to display a smooth transition between two or more colors. */
            GradientStop {
                /* This defines the first color of the gradient. */
                position: 0
                color: customButton.primaryColor
                /* This position is set to 0, meaning that this color will start at the top of the rectangle and gradually transition to the next color. */
            }
            GradientStop {
                /* This defines the second color of the gradient. */
                position: 1
                color: customButton.secondaryColor
                /* This position is set to 1, meaning that this color will start at the bottom of the rectangle and gradually transition to the previous color. */
            }
        }

        /* The code below creates a mouse area that will trigger our hover animation when the mouse cursor is over our button. */
        MouseArea {
            anchors.fill: parent
            /* This anchors the mouse area to the whole rectangle, ensuring that any mouse events inside the rectangle will be detected. */

            hoverEnabled: true
            /* This enables the detection of hovering events. */

            /* The code below defines the behavior of our hover animation when the mouse is hovering over our button. */
            onContainsMouseChanged: {
                /* This handler will be called when the mouse enters or leaves the area of our button. */
                if (containsMouse) {
                    /* If the mouse is inside the button, we want to animate a glow effect to make it stand out. */
                    buttonGlowAnimation.start()
                } else {
                    /* If the mouse leaves the button, we want to reverse the animation to its original state. */
                    buttonGlowAnimation.reverse()
                }
            }
        }
    }

    ColorAnimation {
        /* This animation will create a glow effect on our button when the mouse hovers over it. */

        id: buttonGlowAnimation
        /* The id is used for referencing this animation in other parts of the code. */

        target: customButton
        /* This defines the target of our animation, which is our customButton item. */

        property: "color"
        /* This defines the property that will be animated, which in this case is the color of our customButton item. */

        from: customButton.primaryColor
        /* This property defines the starting color for our animation. */

        to: customButton.secondaryColor
        /* This property defines the end color for our animation. */

        duration: customButton.hoverAnimationDuration
        /* This property defines the duration of our animation, which will be controlled by our customButton item's hoverAnimationDuration property. */

        easing.type: Easing.InOutQuad
        /* This property defines the type of easing that will be used for our animation, in this case a quadratic curve for a smoother transition. */
    }

    /* The code below creates a border around our button. */
    Rectangle {
        /* This rectangle will serve as the border for our button. */
        anchors.fill: parent
        /* This anchors the rectangle to the whole parent item, in this case our customButton. */

        color: "black"
        /* This sets the color of our border to black. */

        border.width: customButton.borderWidth
        /* This sets the width of our border to the value defined in our customButton item's borderWidth property. */

        radius: customButton.borderRadius
        /* This sets the radius of our border corners to the value defined in our customButton item's borderRadius property. */
    }
}