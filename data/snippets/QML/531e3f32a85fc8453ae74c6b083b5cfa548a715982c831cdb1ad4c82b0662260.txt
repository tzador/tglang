/**
 * This is a multi-line comment in QML.
 * It is used to provide descriptions of code and its purpose.
 */

// This is a single-line comment in QML.

// This is an example of a primitive type (integer) assignment.
// The var keyword is used to declare a variable.
var integerVariable = 5

// This is an example of assigning a value to a property.
// The id property is used to uniquely identify a QML item.
// In this example, we are assigning a string value to the text property of a Text item.
Text {
    id: textItem
    text: "Hello, world!"
}

// This is an example of declaring and assigning a list.
// Lists in QML are enclosed in square brackets.
// The list can contain values of any type.
// In this example, we are assigning integer values to the list.
var integerList = [1, 2, 3, 4, 5]

// This is an example of a function declaration.
// The function name is followed by a pair of parentheses for parameters.
// The curly braces denote the start and end of the function body.
// A function in QML can be used to encapsulate code and perform specific tasks.
function sumValues(firstValue, secondValue) {
    return firstValue + secondValue
}

// This is an example of a conditional statement.
// The if keyword is used to start a conditional statement.
// The parentheses contain the condition that needs to be evaluated.
// The curly braces enclose the code that needs to be executed if the condition is true.
if (integerVariable > 3) {
    console.log("The integer variable is greater than 3.")
}

// This is an example of a loop in QML.
// The for keyword is used to start the loop.
// The first parameter is the variable used as the loop counter.
// The second parameter is the condition that needs to be evaluated for each iteration.
// The third parameter is the code to be executed after each iteration.
for (var i = 0; i < integerList.length; i++) {
    console.log("The value at index " + i + " is " + integerList[i])
}

// This is an example of creating a custom QML item.
// The Component element is used to define a custom item.
// The id property is used to assign a unique identifier to the custom item.
// The Rectangle item is used as the base element for our custom item.
Component {
    id: customRectangle

    Rectangle {
        id: rectangle
        color: "red"
        width: 100
        height: 100

        // This is an example of using the property alias syntax to assign values to properties.
        // The alias property allows us to use a shorter property name in the custom item.
        // In this example, "text" is the alias for "rectangleText.text".
        // This allows us to set the text property of the Rectangle directly in our custom item.
        property alias text: rectangleText.text

        // This is an example of declaring a text item within the custom item.
        // The id property is used to uniquely identify the Text item.
        // The parent property is used to specify the parent item for the Text element.
        Text {
            id: rectangleText
            parent: rectangle
            text: "Custom Rectangle"
        }
    }
}

// This is an example of creating an instance of a custom QML item.
// The custom item is created using the createObject() method.
// The first parameter is the custom item's id.
// The second parameter is the parent item for our custom item.
var customItem = customRectangle.createObject(container)

// This is an example of invoking a function in QML.
// The function can be invoked by using the dot notation with the object's id.
// In this example, we are invoking the sumValues function we declared earlier.
var sum = sumValues(3, 5)

// This is an example of accessing the property of a QML item.
// The dot notation is used to access the property of an object.
// In this example, we are getting the value of the text property of the Text item we created earlier.
var textValue = textItem.text