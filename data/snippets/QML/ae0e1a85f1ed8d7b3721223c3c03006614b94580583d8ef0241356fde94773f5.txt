import QtQuick 2.0 // Import the QtQuick library
import QtQuick.Controls 2.12 // Import the Controls submodule 

// Define a custom rectangle component with properties
Rectangle {
    id: customRect // Set an ID for the component
    
    property int xPosition: 50 // Define an integer property for the x position
    property int yPosition: 50 // Define an integer property for the y position
    property int height: 100 // Define an integer property for the height
    property int width: 100 // Define an integer property for the width 
    property color color: "red" // Define a color property with a default value of red
    
    onXPositionChanged: { // Define a handler for when the x position property is changed
        console.log("X position changed to " + xPosition) // Output the new value to the console
    }
    
    // Define signal handlers for mouse events
    MouseArea {
        anchors.fill: parent // Make the mouse area cover the entire rectangle
        onClicked: { // Define handler for when the rectangle is clicked
            color = "green" // Change the color of the rectangle to green
        }
        onPressed: { // Define handler for when the mouse is pressed on the rectangle
            rectangle.opacity = 0.5 // Change the opacity of the rectangle to 0.5
            rectangle.scale = 1.2 // Scale the rectangle to 1.2 times its original size
        }
        onReleased: { // Define handler for when the mouse is released from the rectangle
            rectangle.opacity = 1 // Restore the opacity to 1
            rectangle.scale = 1 // Restore the scale to its original size
        }
    }
    
    // Define a text component that displays the x and y position of the rectangle
    Text {
        anchors.centerIn: parent // Center the text inside the rectangle
        text: "Position: " + customRect.xPosition + ", " + customRect.yPosition // Display the x and y position
        font.pixelSize: 12 // Set the font size to 12 pixels
        color: "white" // Set the font color to white
    }
    
    // Define a property animation for the rectangle's width
    PropertyAnimation {
        target: customRect // Specify the target object
        property: "width" // Specify the property to animate
        duration: 1000 // Set the duration of the animation to 1 second
        to: 200 // Set the end value for the property
        running: true // Start the animation immediately
    }
}