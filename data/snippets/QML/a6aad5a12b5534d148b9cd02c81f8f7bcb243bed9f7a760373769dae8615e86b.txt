import QtQuick 2.12
import QtQuick.Controls 2.12

// Define a custom button component
ApplicationWindow {
    id: window
    visible: true
    width: 640
    height: 480
    title: "Example Button"

    // Custom component properties
    property alias buttonLabel: label.text
    property alias buttonEnabled: button.enabled
    property alias buttonText: button.text
    property alias buttonColor: button.color

    // Button delegate to handle different button states
    property Component buttonDelegate:
        Rectangle {
            id: button
            width: parent.width
            height: parent.height

            // Button background color
            color: "#2196f3"

            // Button text
            Text {
                id: label
                text: "Press me!"
                color: "white"
                anchors.centerIn: parent
            }

            // Button hover behavior
            states: State {
                name: "hovered" // defines when this behavior should trigger
                when: button.hovered // checks if the button is currently being hovered over
                
                // Changes the color and text of the button when hovered
                PropertyChanges {
                    target: label
                    text: "Click!"
                    color: "tomato"
                }
            }

            // Button pressed behavior
            states: State {
                name: "pressed" // defines when this behavior should trigger
                when: button.pressed // checks if the button is currently being pressed
                
                // Changes the color and text of the button when pressed
                PropertyChanges {
                    target: label
                    text: "Released!"
                    color: "lightgreen"
                }
            }

            // Default state
            // Sets the button back to its default color and text
            states: State {
                name: "default" // defines when this behavior should trigger
                when: true // sets this state as the default
                
                // Changes the color and text of the button back to default
                PropertyChanges {
                    target: label
                    text: "Press me!"
                    color: "white"
                }
            }

            // Button transitions
            transitions: Transition {
                // Animation when transitioning between states
                NumberAnimation {
                    properties: "y"
                    easing.type: Easing.InOutQuad
                    duration: 500
                }
            }
        }

    // Use the custom button delegate inside a list view
    ListView {
        width: parent.width
        height: parent.height
        anchors.centerIn: parent

        // Add sample items
        model: 3

        // Custom delegate for list items
        delegate: Item {
            width: parent.width
            height: 40

            // Use the defined button delegate
            Button {
                anchors.fill: parent
                anchors.margins: 10
                delegate: buttonDelegate // set the button's delegate as the custom button component
            }
        }
    }
}