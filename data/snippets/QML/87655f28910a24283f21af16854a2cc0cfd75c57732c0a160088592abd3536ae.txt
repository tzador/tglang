// This code snippet draws a custom animated clock using QML Canvas
// Define the canvas item
Canvas {
    // Set the width and height
    height: 500
    width: 500
    // Define the canvas properties
    id: clockCanvas
    anchors.centerIn: parent
    // Define the clock's center
    property real centerX: width/2
    property real centerY: height/2
    // Define the clock's radius
    property real radius: Math.min(centerX, centerY)
    // Define the clock's background color
    color: "#fff"
    // Set the render target
    renderTarget: CanvasRenderTarget {
        contextType: "2d"
    }
    // Define the clock's hands
    // Hour hand
    Path {
        // Define the hand's path
        path: Path {
            startX: centerX
            startY: centerY
            // Draw the hand
            PathArc {
                x: centerX
                y: centerY
                radiusX: radius*0.5
                radiusY: radius*0.1
                startAngle: 0
                // Rotate the hand according to the current hour
                rotation: currentHour*30
            }
        }
        // Define the hand's appearance
        // Color
        // Define the gradient that will be used to color the hand
        gradient: Gradient {
            GradientStop { // Start color
                position: 0
                color: "#16a085"
            }
            GradientStop { // End color
                position: 1
                color: "#fff"
            }
        }
        // Opacity
        opacity: 0.9
    }
    // Minute hand
    Path {
        // Define the hand's path
        path: Path {
            startX: centerX
            startY: centerY
            // Draw the hand
            PathArc {
                x: centerX
                y: centerY
                radiusX: radius*0.7
                radiusY: radius*0.05
                startAngle: 0
                // Rotate the hand according to the current minute
                rotation: currentMinute*6
            }
        }
        // Define the hand's appearance
        // Color
        // Define the gradient that will be used to color the hand
        gradient: Gradient {
            GradientStop { // Start color
                position: 0
                color: "#16a085"
            }
            GradientStop { // End color
                position: 1
                color: "#fff"
            }
        }
        // Opacity
        opacity: 0.8
    }
    // Second hand
    Path {
        // Define the hand's path
        path: Path {
            startX: centerX
            startY: centerY
            // Draw the hand
            PathArc {
                x: centerX
                y: centerY
                radiusX: radius*0.9
                radiusY: radius*0.02
                startAngle: 0
                // Rotate the hand according to the current second
                rotation: currentSecond*6
            }
        }
        // Define the hand's appearance
        // Color
        // Define the gradient that will be used to color the hand
        gradient: Gradient {
            GradientStop { // Start color
                position: 0
                color: "#16a085"
            }
            GradientStop { // End color
                position: 1
                color: "#fff"
            }
        }
        // Opacity
        opacity: 0.7
    }
    // Define the clock's ticks
    // Define the number of ticks
    property int numTicks: 12
    // Define the angle between each tick
    property real tickAngle: 360/numTicks
    // Draw the ticks
    Repeater {
        model: numTicks
        delegate: Rectangle {
            // Set the rectangle's size and position
            width: radius*0.015
            height: radius*0.1
            x: centerX - width/2
            y: 10
            // Rotate the tick according to its position
            rotation: index*tickAngle
            // Set the tick's color
            color: "#2c3e50"
        }
    }
    // Define the clock's numbers
    // Define the number of numbers
    property int numNumbers: 12
    // Define the angle between each number
    property real numberAngle: 360/numNumbers
    // Set the font for the numbers
    property font numberFont: Font {
        family: "Arial"
        pixelSize: radius*0.08
        bold: true
    }
    // Draw the numbers
    Repeater {
        model: numNumbers
        delegate: Text {
            // Set the text's position and rotation
            x: Math.cos((index-3)*numberAngle*Math.PI/180)*radius*0.75 + centerX - width/2
            y: Math.sin((index-3)*numberAngle*Math.PI/180)*radius*0.75 + centerY - height/2
            rotation: index*numberAngle
            // Set the text's appearance
            color: "#2c3e50"
            font: numberFont
            // Set the text's value
            text: (index+1).toString()
            // Center the text horizontally and vertically
            horizontalAlignment: Text.AlignHCenter
            verticalAlignment: Text.AlignVCenter
        }
    }
    // Define a timer to update the clock every second
    Timer {
        // Set the interval to 1 second
        interval: 1000
        // Define a signal to emit every second
        onTriggered: {
            // Get the current hour, minute, and second using JavaScript functions
            var currentTime = new Date()
            // Get the hour, minute, and second using QML functions
            currentHour = currentTime.getHours()
            currentMinute = currentTime.getMinutes()
            currentSecond = currentTime.getSeconds()
            // Redraw the canvas
            clockCanvas.requestPaint()
        }
        // Start the timer
        running: true
    }
}