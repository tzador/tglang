// This QML code snippet creates a custom button component with a dynamically changing color

// Import necessary QML modules
import QtQuick 2.0
import QtQuick.Controls 2.0

// Define custom button component
Component {
    // Set the type to Button so it can be used as a button
    type: Button
    // Set the default properties for the button
    property alias text: label.text
    property color normalColor: "red"
    property color hoverColor: "green"
    property color pressedColor: "blue"

    // Define the button's visual elements
    Item {
        // Set the size and anchors of the button
        width: parent.width
        height: parent.height
        anchors.centerIn: parent

        // Create the button's background rectangle
        Rectangle {
            anchors.fill: parent
            // Set the color to the value defined in the "normalColor" property
            color: parent.normalColor
            // Define a state to change the color when the button is hovered over
            states: State {
                name: "hovered"
                // Set the color to the value defined in the "hoverColor" property
                PropertyChanges {
                    target: parent
                    color: parent.hoverColor
                }
            }
            // Define a state to change the color when the button is pressed
            states: State {
                name: "pressed"
                // Set the color to the value defined in the "pressedColor" property
                PropertyChanges {
                    target: parent
                    color: parent.pressedColor
                }
            }
            // Smoothly transition between states
            transitions: Transition {
                NumberAnimation { properties: "color"; duration: 200 }
            }
        }

        // Create the label for the button
        Text {
            id: label
            text: "Click Me"
            // Center the text within the button
            horizontalAlignment: Text.AlignHCenter
            verticalAlignment: Text.AlignVCenter
        }
    }

    // Handle button clicks
    MouseArea {
        // Make the MouseArea the same size as the button
        anchors.fill: parent
        // Detect clicks on the button
        onClicked: {
            // Emit the clicked() signal so the button can be used like a normal button
            parent.clicked()
        }
    }
}