// This QML code snippet creates a custom draggable rectangle component
// with additional properties for color, opacity, and border radius.
// It also allows for a drop shadow effect and rotation animation.

import QtQuick 2.12
import QtQuick.Controls 2.12
import QtGraphicalEffects 1.12

Rectangle {
    id: customRectangle // declare id for referencing in other components
    x: 50 // set x position
    y: 50 // set y position
    width: 200 // set width
    height: 100 // set height
    color: "red" // set default color to red
    border.color: "black" // set border color
    border.width: 2 // set border width
    radius: 10 // set border radius
    opacity: 0.8 // set default opacity to 0.8

    DropShadow {
        id: shadow // declare id for referencing in animation
        anchors.fill: parent // fill entire parent component with shadow effect
        horizontalOffset: 5 // set horizontal offset
        verticalOffset: 5 // set vertical offset
        radius: 10 // set shadow radius
        samples: 16 // set number of samples for smoother edges
        color: "black" // set shadow color
        source: customRectangle // set source component to customRectangle
    }

    MouseArea {
        id: mouseArea // declare id for referencing in dragging behavior
        anchors.fill: parent // fill entire parent component with mouse area
        drag.target: customRectangle // specify target component for dragging
    }

    RotationAnimation {
        id: rotation // declare id for referencing in button behavior
        target: customRectangle // specify target component for rotation animation
        property: "rotation" // specify property to animate
        from: 0 // set starting rotation
        to: 360 // set ending rotation
        duration: 1000 // set duration of animation in milliseconds
        running: false // set initial state to not running
    }

    Button {
        id: button // declare id for referencing in button behavior
        anchors.bottom: parent.bottom // position button at bottom of parent component
        anchors.horizontalCenter: parent.horizontalCenter // center button horizontally
        text: "Rotate" // set button text
        onClicked: rotation.running = !rotation.running // toggle rotation animation on/off on button click
    }

    Text {
        anchors.centerIn: parent // center text within parent component
        font.pixelSize: 24 // set font size
        text: "Drag and Rotate" // set text
        color: "white" // set text color
        // specify text formatting
        font.bold: true
        font.italic: true
        font.underline: true
    }
}