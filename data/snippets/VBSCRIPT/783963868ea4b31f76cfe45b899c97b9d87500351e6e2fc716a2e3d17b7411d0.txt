Option Explicit ' Forces explicit declaration of all variables

Dim num1, num2 ' Declaring two variables
num1 = 5 ' Assigning a value to the first variable
num2 = 10 ' Assigning a value to the second variable

If num1 > num2 Then ' Checking if the value of the first variable is greater than the second
  MsgBox "The value of num1 is greater than num2" ' Displaying a message box if the condition is true
Else ' If the condition is not true
  MsgBox "The value of num2 is greater than num1" ' Displaying a message box
End If

For i = 1 To 10 Step 2 ' Looping from 1 to 10 with a step of 2
  MsgBox "The value of i is: " & i ' Displaying current value of i in a message box
Next ' Ending the for loop

Select Case num1 ' Starting a select case statement based on the value of num1
  Case 1 To 5 ' If the value is between 1 and 5 (inclusive)
    MsgBox "The value of num1 is between 1 and 5" ' Displaying a message box
  Case 6 To 10 ' If the value is between 6 and 10 (inclusive)
    MsgBox "The value of num1 is between 6 and 10" ' Displaying a message box
  Case Else ' If the value is not within the specified ranges
    MsgBox "The value of num1 is not between 1 and 10" ' Displaying a message box
End Select ' Ending the select case statement

Function addNumbers(x, y) ' Declaring a function with two parameters
  addNumbers = x + y ' Returning the sum of the two parameters
End Function ' Ending the function

MsgBox "The sum of num1 and num2 is: " & addNumbers(num1, num2) ' Displaying the sum of the two variables using the addNumbers function

Const PI = 3.14 ' Declaring a constant with a predefined value
Dim radius ' Declaring another variable
radius = 5 ' Assigning a value to the radius variable

Dim area ' Declaring another variable
area = PI * radius^2 ' Calculating the area of a circle with the given radius

MsgBox "The area of the circle is: " & area ' Displaying the calculated area in a message box