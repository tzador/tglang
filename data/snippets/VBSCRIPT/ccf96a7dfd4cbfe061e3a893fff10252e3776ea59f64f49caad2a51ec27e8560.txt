' This code snippet prints out a randomly generated binary search tree '

Option Explicit ' ensures all variables are explicitly declared

' define class Node for each element in the tree
Class Node

    Private leftChild  ' holds the left child node
    Private rightChild ' holds the right child node
    Private value      ' holds the value of the node

    ' initialize the node with given value
    Private Sub Class_Initialize(ByVal nodeValue)
        value = nodeValue
    End Sub
    
    ' set the left child node
    Public Sub setValue(ByVal nodeValue)
        Set leftChild = nodeValue
    End Sub

    ' set the right child node
    Public Sub setValue(ByVal nodeValue)
        Set rightChild = nodeValue
    End Sub
    
    ' get the value of the node
    Public Function getValue()
        getValue = value
    End Function

    ' checks if node has a left child
    Private Function hasLeftChild()
        If IsObject(leftChild) Then
            hasLeftChild = True
        Else
            hasLeftChild = False
        End If
    End Function

    ' checks if node has a right child
    Private Function hasRightChild()
        If IsObject(rightChild) Then
            hasRightChild = True
        Else
            hasRightChild = False
        End If
    End Function

End Class ' end of Node class

' function to generate a random binary search tree of given size
Function generateBinarySearchTree(size)

    ' initialize empty tree
    Dim root
    Set root = Nothing

    ' generate nodes with random values and insert into tree
    For i = 1 To size
        Dim newNode
        Set newNode = New Node(Rnd()*100 + 1) ' generate random value between 1 and 100
        
        ' insert at root if tree is empty
        If IsEmpty(root) Then
            Set root = newNode
        Else ' otherwise, insert at appropriate position
            insertNode root, newNode
        End If
    Next

    ' return root of the tree
    Set generateBinarySearchTree = root
End Function ' end of generateBinarySearchTree function

' recursive function to insert a new node into the tree
Sub insertNode(node, newNode)

    ' if new value is less than current node value, insert in left subtree
    If newNode.getValue() < node.getValue() Then
        If node.hasLeftChild() Then ' if node has a left child, recursively call insertNode on it
            insertNode node.leftChild, newNode
        Else ' otherwise, assign new node as the left child
            Set node.leftChild = newNode
        End If

        ' if new value is greater than current node value, insert in right subtree
    ElseIf newNode.getValue() > node.getValue() Then
        If node.hasRightChild() Then ' if node has a right child, recursively call insertNode on it
            insertNode node.rightChild, newNode
        Else ' otherwise, assign new node as the right child
            Set node.rightChild = newNode
        End If
    Else
        ' do nothing if the new value is equal to the current node value
    End If

End Sub ' end of insertNode function

' printing the tree in order using in-order traversal
Sub printTreeInOrder(node)

    If IsObject(node) Then
        ' recursively call function on left subtree
        printTreeInOrder node.leftChild

        ' print out current node value
        WScript.Echo " " & node.getValue() & " "

        ' recursively call function on right subtree
        printTreeInOrder node.rightChild
    End If
End Sub ' end of printTreeInOrder function

' program entry point
Dim treeSize
treeSize = 10 ' set tree size

' generate binary search tree of given size
Dim tree
Set tree = generateBinarySearchTree(treeSize)

' print generated tree in order
WScript.Echo "Generated Binary Search Tree:"
printTreeInOrder tree