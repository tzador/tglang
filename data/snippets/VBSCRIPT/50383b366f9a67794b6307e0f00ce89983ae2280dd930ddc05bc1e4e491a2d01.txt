' This code snippet uses basic string manipulations and file input/output operations

' Create a file system object
Set fs = CreateObject("Scripting.FileSystemObject")

' Check if file exists
If fs.FileExists("test.txt") Then
    ' Open the file in read mode
    Set f = fs.OpenTextFile("test.txt", 1)

    ' Read the contents of the file
    contents = f.ReadAll

    ' Close the file
    f.Close
Else
    ' If file does not exist, display error message and exit the script
    MsgBox "File does not exist."
    WScript.Quit
End If

' Split the contents of the file by new line character
lines = Split(contents, vbNewLine)

' Create a dictionary to store the word count
Set wordCount = CreateObject("Scripting.Dictionary")

' Loop through each line in the file
For Each line In lines
    ' Remove any leading and trailing spaces from the line
    line = Trim(line)

    ' Split the line by space character
    words = Split(line, " ")

    ' Loop through each word in the line
    For Each word In words
        ' Check if the word is already in the dictionary
        If wordCount.Exists(word) Then
            ' If so, increase the count by 1
            wordCount(word) = wordCount(word) + 1
        Else
            ' If not, add the word to the dictionary with a count of 1
            wordCount.Add word, 1
        End If
    Next
Next

' Sort the dictionary in descending order by word count
sortedWords = wordCount.Keys
sortedWords = SortDictionary(sortedWords, wordCount)

' Create a new file to store the sorted words
Set output = fs.CreateTextFile("sorted_words.txt", True)

' Loop through each word in the sorted dictionary
For Each word In sortedWords
    ' Write the word and its count to the output file
    output.WriteLine word & " - " & wordCount(word)
Next

' Close the output file
output.Close

' Display success message and exit the script
MsgBox "Word count successfully generated."
WScript.Quit

' Function to sort the dictionary by value (word count)
Function SortDictionary(keys, dict)
    ' Initialize a new dictionary
    Set newDict = CreateObject("Scripting.Dictionary")

    ' Loop through each key in the original dictionary
    For Each key In keys
        ' Add the key and value pairs in reverse order
        newDict.Add dict(key), key
    Next

    ' Sort the keys in descending order
    sortedKeys = newDict.Keys
    sortedKeys = BubbleSort(sortedKeys)

    ' Return the sorted keys
    SortDictionary = sortedKeys
End Function

' Bubble sort algorithm to sort the keys in descending order
Function BubbleSort(keys)
    ' Initialize the sorted flag
    sorted = False

    ' Loop until the list is sorted
    While Not sorted
        ' Set the sorted flag to true
        sorted = True

        ' Loop through each key in the list
        For i = 0 to UBound(keys)-1
            ' Compare the current key with the next key
            If keys(i) < keys(i+1) Then
                ' If the current key is smaller, swap it with the next key
                temp = keys(i)
                keys(i) = keys(i+1)
                keys(i+1) = temp

                ' Set the sorted flag to false
                sorted = False
            End If
        Next
    Wend

    ' Return the sorted keys
    BubbleSort = keys
End Function