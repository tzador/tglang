' This code snippet creates a dynamic array and sorts its elements in ascending order
Option Explicit ' enforce variable declarations

' define a function to sort the elements of an array in ascending order
Function SortArray(array, compareMethod)
  Dim i ' variable to track current position
  Dim temp ' variable to hold temporary value during sorting
  Dim swapped ' boolean variable to track if a swap occurred
  Dim lastIndex ' variable to hold index of last element in array
  lastIndex = UBound(array)

  ' loop through the array
  Do While lastIndex > 0
    selectedIndex = 0 ' initialize selected index to first element
    swapped = False ' initialize swapped indicator to false

    ' loop through remaining elements in the array
    For i = 1 To lastIndex
      ' compare current element with selected element
      If array(i) compareMethod array(selectedIndex) Then
        ' if current element is less, update selected index
        selectedIndex = i
      End If
    Next

    ' if selected index is not the last element, swap elements
    If selectedIndex <> lastIndex Then
      temp = array(selectedIndex)
      array(selectedIndex) = array(lastIndex)
      array(lastIndex) = temp
      swapped = True ' set swapped indicator to true
    End If

    ' update last index to exclude the already sorted element
    lastIndex = lastIndex - 1

    ' if no elements were swapped in the previous iteration, sorting is complete
    If Not swapped Then
      Exit Do
    End If
  Loop

  ' return the sorted array
  SortArray = array
End Function

' initialize the dynamic array
Dim myArray
ReDim myArray(5)
myArray(0) = 16
myArray(1) = 2
myArray(2) = 8
myArray(3) = 11
myArray(4) = 5
myArray(5) = 9

' call the function to sort the array in ascending order
sortedArray = SortArray(myArray, "<")

' print the sorted array
For i = 0 To UBound(sortedArray)
  ' use vbCrLf to add a new line between each element
  WScript.Echo sortedArray(i) & vbCrLf
Next