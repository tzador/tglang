REM ----------QUICKSORT ALGORITHM IN BASIC----------

'Function to partition array into 2 subarrays based on pivot value
DEF FN PARTITION (array, left, right)
    LET pivot = array[right] 'Assign last element in array as pivot
    LET i = left - 1 'Initialize index of smaller element
    FOR j = left TO right - 1 'Loop through array elements
        IF array[j] <= pivot THEN 'If current element is smaller than or equal to pivot
            LET i = i + 1 'Increment index of smaller element
            LET temp = array[i] 'Swap array elements
            array[i] = array[j]
            array[j] = temp
        END IF
    NEXT j
    LET temp = array[i + 1] 'Swap pivot with element at index i+1
    array[i + 1] = array[right]
    array[right] = temp
    FN = i + 1 'Return index of pivot
END DEF

'Function to perform quicksort on given array
DEF FN QUICKSORT (array, left, right)
    IF left < right THEN 'If there is more than one element in array
        LET pivot = FN PARTITION(array, left, right) 'Find pivot index
        FN QUICKSORT(array, left, pivot - 1) 'Recursively call quicksort on left subarray
        FN QUICKSORT(array, pivot + 1, right) 'Recursively call quicksort on right subarray
    END IF
END DEF

'Example usage:
DIM arr[10] 'Declare array of size 10
FOR i = 0 TO 9 'Enter elements in array
    INPUT arr[i]
NEXT i

FN QUICKSORT(arr, 0, 9) 'Call quicksort function on array

'Print sorted array
PRINT "Sorted Array:"
FOR i = 0 TO 9
    PRINT arr[i]
NEXT i

END