## This program performs a word count on a given text file
##
## AWK is a pattern scanning and processing language that can be used for manipulating data files
##
## The BEGIN statement is executed before the start of the input file processing
BEGIN {
    ## Print header for the word count table
    printf("\n\nWord Count\n==========\n\n")
    ## Initialize counter
    count = 0
    ## Initialize associative array to store word counts
    ## Word is the key, and the value is the count of occurrences
    ## There is no limit to the number of elements in an associative array
    ## By default, uninitialized values in an array are set to zero (0)
    ## The split() function is used to split the input line using whitespace as the delimiter
    ## The for loop iterates through the array and updates the count for each word
    ## The tolower() function converts all characters to lowercase to handle case sensitivity
    ## The ++ operator is used to increment the count for each word
    ## The END statement is executed after all the input has been processed
}
END {
    ## Print the word count table 
    for (word in countArr) {
        printf("%s\t%d\n", word, countArr[word])
    }
}
## The starting point for pattern-action statements 
## This pattern matches every line and executes the action block 
## The NR variable stores the current record number 
## The getline function reads a line of input and stores it into the $0 variable 
## The NF variable stores the number of fields in the input line 
## Use the NF variable to loop through each field in the current line 
## Increment the total count and update the word count for each unique word
{
    ## Store the current line into the inputArr array 
    inputArr[NR] = $0
    ## Loop through each field in the current line 
    for (i = 1; i <= NF; i++) {
        ## Convert the field to lowercase 
        word = tolower($i)
        ## Update the total count 
        total++
        ## Update the word count for the current word 
        countArr[word]++
    }
}
## After all the input is processed, print the results 
## Use the NF variable to loop through each field in the current line
END {
    ## Print the results 
    printf("\nTotal Words: %d\nUnique Words: %d\n\n", total, length(countArr))
    ## Print the input in the original format 
    printf("Input:\n======\n\n")
    for (i = 1; i <= NR; i++) {
        printf("%s\n", inputArr[i])
    }
}
## Execute the awk program using the -f option and provide the AWK file as input
## The input file is specified with the -f option, and the AWK program is specified with the -f option
## The input file can be specified after the AWK program if it is the last argument
## The awk program can also be provided inline using the -e option
## NOTE: This program assumes that the input file is in the same directory as the AWK file
## To specify a different input file, provide the full path or change the input file name in the script
## Example usage: awk -f word_count.awk input.txt
## Output will be printed to standard output