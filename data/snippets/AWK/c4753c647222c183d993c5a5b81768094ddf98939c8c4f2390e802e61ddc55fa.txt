#!/usr/bin/awk -f
# the first line of an AWK program is always a shebang, specifying the interpreter to use and any command-line options

BEGIN { # BEGIN block is executed before the main program starts
    OFS = "\t" # OFS (output field separator) is used to separate output fields, here it is set to tab
    while ( getline line < "input.txt" ) # initialize while loop, get lines from "input.txt"
    {
        split( line, words, " " ) # split the line into words using space as the delimiter
        for ( i=1; i<=NF; i++ ) # initialize for loop, iterate through each field (word) in the line
            arr[NR,i] = words[i] # store each word in a multidimensional array (row NR, column i)
    }
}
# so far, the program has read and stored the words from "input.txt" in a multidimensional array

{
    sum = 0 # initialize sum variable to 0
    for ( i=1; i<=NF; i++ ) # initialize for loop, iterate through each field (word) in the line
        sum += arr[NR,i] # add each word's value (ASCII code) to the sum
    average = sum/NF # calculate average by dividing sum by number of fields (words)
    
    if ( average > 97 ) # conditional statement, if average is greater than 97
        printf "Line %d contains high values", NR # print a message for the line number
    else if ( average < 50 ) # conditional statement, if average is less than 50
        printf "Line %d contains low values", NR # print a message for the line number
    else # if neither condition is met
        printf "Line %d contains medium values", NR # print a message for the line number
}
# this main program block will iterate through each line of the input and calculate the average value of the words in that line
# it will then print a corresponding message based on the average value
# the NR variable represents the line number

END { # END block is executed after the main program finishes
    print "Program finished." # print a message indicating the end of the program
}

# example input.txt:
# this is a test
# with some different values
# like 123 and $%^

# output:
# Line 1 contains medium values
# Line 2 contains low values
# Line 3 contains high values
# Program finished.