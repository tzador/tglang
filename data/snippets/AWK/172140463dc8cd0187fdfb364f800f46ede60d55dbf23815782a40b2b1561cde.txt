# This AWK code snippet takes in a file of CSV data and 
# converts the data into a Markdown table for easy visualization.
BEGIN {
    # Define field separator as comma and set output field separator to pipe
    FS = ","
    OFS = "|"
    # Set left and right borders of table as pipe
    left_border = "|"
    right_border = "|"
    # Set headers as first line of input file
    getline header < ARGV[1]
    split(header, columns, ",")
    # Print headers with pipes and divider for table structure
    for (i=1; i<=length(columns); i++) {
        # Set length of columns based on longest value
        if (length(columns[i]) > max_len) {
            max_len = length(columns[i])
        }
        # Print column header with left and right borders, centered and padded with spaces
        printf "%s %*s %s%s", left_border, (max_len+2), columns[i], right_border, (i == length(columns) ? "\n" : " | ")
        # Set divider for column headers
        if (i == length(columns)) {
            for (j=1; j<=max_len+2; j++) {
                dash_line = dash_line "-";
            }
            printf "%s%s%s\n", left_border, dash_line, right_border
            dash_line = ""
        }
    }
}
{
    # Set initial values for variables
    value_num = 1
    column_num = 1
    # Iterate through columns in current line of input
    for (i=1; i<=NF; i++) {
        # Get length of value
        curr_val_len = length($i)
        # Check if current value is longer than value in same column in previous line
        if (curr_val_len > value_lens[column_num]) {
            value_lens[column_num] = curr_val_len
        }
        # Add current value to corresponding array for later printing
        values[column_num][value_num] = $i
        # Increment value and column numbers
        value_num++
        column_num++
    }
}
END {
    # Iterate through columns and print values with proper formatting and structure
    for (i=1; i<=length(columns); i++) {
        # Print column header with left and right borders, centered and padded with spaces
        printf "%s %*s %s%s", left_border, (value_lens[i]+2), values[i][1], right_border, (i == length(columns) ? "\n" : " | ")
    }
    # Iterate through values and print with proper formatting and structure
    for (i=2; i<=length(values[1]); i++) {
        for (j=1; j<=length(columns); j++) {
            # Print left border, value with proper padding, right border, and divider if not last column
            printf "%s %*s %s%s", left_border, (value_lens[j]+2), values[j][i], right_border, (j == length(columns) ? "\n" : " | ")
        }
        # Print divider for each line of values
        if (i == length(values[1])) {
            printf "%s%s%s\n", left_border, dash_line, right_border
        }
    }
}