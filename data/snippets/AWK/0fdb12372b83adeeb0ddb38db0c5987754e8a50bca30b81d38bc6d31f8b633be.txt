# The following AWK script counts the number of occurrences of each word in a given text file
# and prints out the top ten most frequent words
#
# To run this code, use the command `awk -f count_words.awk text_file`
#
BEGIN {
    # initialize array to hold word count
    # array format: words[word] = count
    # where word is the key and count is the value
    # associative arrays are declared by using any string as the index
    # array elements are created when assigned a value
    # arrays can have multiple dimensions as well
    # see: https://www.gnu.org/software/gawk/manual/html_node/Arrays.html
    split("", words)
}

# only process lines that contain at least one word
# NF denotes the number of fields in a record, in this case, words in the line
NF > 0 {
    for (i = 1; i <= NF; i++) {
        # strip out punctuation and convert to lowercase
        # this uses the gsub function which replaces all occurrences of a string within a string
        # the original string is not modified, instead, the function returns the modified string
        # see: https://www.gnu.org/software/gawk/manual/html_node/The-gsub-Function.html
        word = tolower(gensub(/[[:punct:]]/, "", "g", $i))
        # check if word already exists in the array
        if (word in words) {
            # if yes, increment the count
            words[word]++
        }
        else {
            # if no, add it to the array with a count of 1
            words[word] = 1
        }
    }
}

# end reading the file
END {
    # to sort the array based on the values (count), we need to first get the keys (words)
    # this can be achieved using the for loop and the in keyword
    # see: https://www.gnu.org/software/gawk/manual/html_node/Scanning-All-Elements-of-an-Array.html
    for (key in words) {
        # create a new array to store words and counts
        # array format: index[count] = word
        # where count is the key and word is the value
        # this essentially inverts the original array
        # see: https://www.gnu.org/software/gawk/manual/html_node/Creating-Arrays.html#Creating-Arrays
        words_count[words[key]] = key
        # remove the original array elements to save memory
        delete words[key]
    }

    # finally, we can loop through the new array in descending order, starting from the highest count
    # we will stop at the top 10 most frequent words, which will be the first 10 elements in the array
    # this can be achieved using the delete keyword, which removes an element by its key
    # see: https://www.gnu.org/software/gawk/manual/html_node/Deleting-Array-Elements.html
    # see: https://www.gnu.org/software/gawk/manual/html_node/Manipulating-Scalar-Variables.html#Manipulating-Scalar-Variables
    # see: https://www.gnu.org/software/gawk/manual/html_node/Expressions.html#Expressions
    # see: https://www.gnu.org/software/gawk/manual/html_node/Using-Arrays-of-Qualifiers.html#Using-Arrays-of-Qualifiers
    # see: https://www.gnu.org/software/gawk/manual/html_node/Two_002ddimensional.html#Two_002ddimensional
    for (count = 1; count <= 10; count++) {
        # get the next highest count value using the in keyword
        # assign the corresponding word to a variable
        # remove the element from the array
        # then print the word and count in the desired format
        # note: the printf function uses format specifiers for clean and consistent output
        # see: https://www.gnu.org/software/gawk/manual/html_node/Printf_002dExamples.html
        current_count = words_count[count]
        current_word = words_count[current_count]
        delete words_count[current_count]
        printf("%d. %s - %d\n", count, current_word, current_count)
    }
}