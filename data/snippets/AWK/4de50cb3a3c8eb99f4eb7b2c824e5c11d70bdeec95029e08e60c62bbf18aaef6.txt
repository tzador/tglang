BEGIN {

  # This is the beginning of an AWK program, which sets up any initial conditions or variables needed for the program.
  # This section is only executed once at the start of the program.

  track_count = 0;
  # This variable keeps track of the number of tracks processed.

  sum_length = 0;
  # This variable will store the sum of track lengths.

  max_length = 0;
  # This variable stores the maximum length of a track.

  min_length = 0;
  # This variable stores the minimum length of a track.

  FS = "," # This sets the field separator for the input data, in this case it is a comma.

}

{
  #This is the main processing block, where the data is read and processed line by line.

  track_count++;
  # Increment the track count for each line of data processed.

  length = $2
  # This stores the length of the track in the 'length' variable. '$2' indicates the second field in the input data.

  sum_length += length;
  # Add the length of the current track to the sum.

  # Check if the current track length is greater than the current maximum length.
  if (length > max_length) {
    max_length = length;
  }

  # Check if the current track length is less than the current minimum length.
  if (min_length == 0 || length < min_length) {
    min_length = length;
  }

  # Print the track name and length in a specific format.
  printf("%-15s %-10s\n", $1, $2);
  # The '%-15s' prints the first field (track name) in a 15 character wide column, left-aligned.
  # The '%-10s' prints the second field (track length) in a 10 character wide column, left-aligned.

}

END {

  # This is the end of the AWK program, where any final calculations or output is done.
  
  average_length = sum_length/track_count;
  # Calculate the average track length by dividing the sum by the total number of tracks processed.

  # Print the results in a specific format.
  printf("Total tracks processed: %d\n", track_count);
  printf("Average track length: %.2f\n", average_length);
  printf("Maximum track length: %d\n", max_length);
  printf("Minimum track length: %d\n", min_length);

}