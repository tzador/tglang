# Set the field separator to ':'
FS = ":"
# Create an array to store the fields
# Each line in the input will be stored as an element in the array
# The field separator will be used to split each line into separate fields
linesArr = []

# Process the input line by line, storing each line into the array
# The 'NR' variable represents the current line number
# The 'FNR' variable represents the current line number within the current file 
# The 'NF' variable represents the number of fields in the current line
# The 'NR == FNR' condition ensures that code is only run for the first file
# This allows us to process a single input or multiple inputs as arguments
# Also includes an 'if' condition to check if the current line is empty
# If not empty, store the current line into the array
NR == FNR {
    if ($0 != "") {
        linesArr[NR] = $0
    }
}

# Loop through the array and perform some processing on the fields
# The 'length' function is used to get the total number of elements in the array
# The 'split' function is used to create a new array from a string, with a specified delimiter
# The 'substr' function is used to get a substring from a string, starting at a specified position and with a specified length
for (i = 1; i <= length(linesArr); i++) {
    # Split the current line into separate fields using the field separator
    split(linesArr[i], fieldsArray, FS)
    
    # Loop through the fieldsArray and perform some processing on each field
    # Includes an 'if' condition to check if the field is longer than 3 characters
    # If longer, use the 'substr' function to extract only the first 3 characters
    for (j = 1; j <= length(fieldsArray); j++) {
        if (length(fieldsArray[j]) > 3) {
            fieldsArray[j] = substr(fieldsArray[j], 1, 3)
        }
    }
    
    # Join the modified fields back together using the field separator
    # Replaces the original line in the array with the updated line
    linesArr[i] = fieldsArray[1] ":" fieldsArray[2] ":" fieldsArray[3]
}

# Print the processed output in a formatted table
# The 'printf' function is used to format and print the output
# The first string represents the format, followed by the values to be inserted
printf("%-10s %-10s %-10s \n", "FIELD 1", "FIELD 2", "FIELD 3")
printf("%-10s %-10s %-10s \n", "---------", "---------", "---------")

# Loop through the processed array and print each line in the formatted table
for (k = 1; k <= length(linesArr); k++) {
    printf("%-10s %-10s %-10s \n", fieldsArray[1], fieldsArray[2], fieldsArray[3])
}