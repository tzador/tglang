# This AWK code snippet creates a histogram from a list of numbers provided as the input
# Author: John Smith

# Function to calculate maximum value in array
function getMax(array) {
    # Initialize maximum value with first element of array
    max = array[1]
    # Loop through rest of array to find maximum
    for (i = 2; i <= length(array); i++) {
        if (array[i] > max) {
            max = array[i]
        }
    }
    # Return maximum value
    return max
}

# Function to calculate minimum value in array
function getMin(array) {
    # Initialize minimum value with first element of array
    min = array[1]
    # Loop through rest of array to find minimum
    for (i = 2; i <= length(array); i++) {
        if (array[i] < min) {
            min = array[i]
        }
    }
    # Return minimum value
    return min
}

# Function to calculate number of bins for histogram
function getNumBins(array) {
    # Calculate range of data
    range = getMax(array) - getMin(array)
    # Set default number of bins to 10
    num_bins = 10
    # If range is larger than 10, increase number of bins
    if (range > 10) {
        num_bins = range / 10
    }
    # Return number of bins
    return num_bins
}

# Main function
BEGIN {
    # Read input numbers from standard input
    while (getline < "-" > 0) {
        # Convert input to a number and put it in an array
        numbers[NR] = $1 + 0
    }

    # Sort numbers in ascending order
    asort(numbers)

    # Get number of bins for histogram
    num_bins = getNumBins(numbers)

    # Create a histogram with 10 bins
    # Set the width of each bin based on range of data
    # Calculate the number of stars to print for each bin based on frequency of data
    for (i = 1; i <= length(numbers); i++) {
        bin = int((numbers[i] - getMin(numbers)) / num_bins) + 1
        for (j = 1; j <= num_bins; j++) {
            if (j == bin) {
                hist[j] = hist[j] "*"  # Add a star to the bin if data falls within the range
            }
        }
    }

    # Print histogram
    for (i = 1; i <= num_bins; i++) {
        # Calculate width of each bin
        width = int((getMax(numbers) - getMin(numbers)) / num_bins)
        # Print the range of values for each bin
        if (i == 1) {
            printf("*%d-%d*\t|", getMin(numbers), getMin(numbers) + width)
        } else {
            printf(" %d-%d*\t|", getMin(numbers) + (width * (i - 1)), getMin(numbers) + (width * i))
        }
        # Print the number of stars for each bin
        printf("%s\n", hist[i])
    }

    # Free memory used by array
    delete numbers
}