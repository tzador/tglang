# This AWK program prints out the top 10 most frequent words in a given text file

# Declare global variables
BEGIN {
  IGNORECASE = 1                        # Ignores case sensitivity in words
  FS = "([.,!?\"'-]|\\s)+"              # Specifies field separators (punctuation and whitespace)
}

# Loop through each line of the text file
{
  for (i = 1; i <= NF; i++) {           # NF is a built-in variable that counts the number of fields in a line
    word = tolower($i)                  # Convert the current field to lowercase, assign to variable "word"
    if (word != "") {                   # Check if the field is not an empty string
      words[word]++                     # Increment the count of this word in the "words" array
    }
  }
}

# Sort the "words" array in descending order based on the count of each word
END {
  for (word in words) {                 # Loop through each word in the "words" array
    total = total + words[word]         # Calculate the total number of words in the text file
    arr_count++                         # Increment the size of the "words" array
  }

  PROCINFO["sorted_in"] = "@val_num_desc"   # Specify the sorting order for the "words" array
  # PROCINFO is a built-in array containing information about the AWK program

  printf("| Rank | Word       | Frequency | Percentage |\n")
  printf("|------|------------|-----------|------------|\n")

  # Loop through the top 10 most frequent words in the "words" array
  for (word in words) {
    if (rank <= 10) {                   # Checks that only the top 10 most frequent words are printed
      percentage = (words[word] / total) * 100  # Calculates the percentage of the current word's frequency
      printf("| %-4s | %-10s | %-9s | %-10s |\n", rank, word, words[word], percentage) # Prints the result in a formatted table
      rank++                            # Increments the rank for the next word
    } else {
      break                             # Break the loop after printing the top 10 words
    }
  }
}