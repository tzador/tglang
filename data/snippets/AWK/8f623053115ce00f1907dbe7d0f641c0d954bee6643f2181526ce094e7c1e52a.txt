# This program uses AWK to process DNA sequences and identify patterns

# Define a function called 'reverse_complement' that takes in a DNA sequence as a parameter
function reverse_complement(dna_seq) {

    # Use the 'gsub' function to replace any 'T' with 'A'
    gsub("T", "A", dna_seq)

    # Use the 'gsub' function to replace any 'G' with 'C'
    gsub("G", "C", dna_seq)

    # Use the 'gsub' function to replace any 'C' with 'G'
    gsub("C", "G", dna_seq)

    # Use the 'gsub' function to replace any 'A' with 'T'
    gsub("A", "T", dna_seq)

    # Use the 'reverse' function to reverse the DNA sequence
    reverse(dna_seq)

    # Return the processed DNA sequence as the output of the function
    return dna_seq
}

# Define a string variable 'dna_seq' containing a DNA sequence
dna_seq = "ATTTGCGAGCGATGCTAGTCG"

# Use the built-in 'length' function to get the length of the DNA sequence
# and assign it to a variable 'seq_length'
seq_length = length(dna_seq)

# Use the 'substr' function to extract a substring of length 5 starting
# from the 6th position in the DNA sequence
substring = substr(dna_seq, 6, 10)

# Print the extracted substring
print "Substring: " substring

# Use the previously defined 'reverse_complement' function to process
# the DNA sequence and assign the output to a new variable
reverse_complement_seq = reverse_complement(dna_seq)

# Print the processed DNA sequence
print "Reverse complement DNA sequence: " reverse_complement_seq

# Use the built-in 'split' function to split the DNA sequence into an array
# based on the specified delimiter
split(dna_seq, "AT")

# Loop through the array and print each element
for (i = 1; i <= seq_length; i++) {
    print "Element " i ": " array[i]
}

# Use the 'tolower' function to convert the DNA sequence to lowercase
lowercase_seq = tolower(dna_seq)

# Print the lowercase DNA sequence
print "Lowercase DNA sequence: " lowercase_seq