# This AWK code snippet calculates the average age of a group of people
# and categorizes them based on their age range.

# Begin by defining the appropriate field separators for input data.
BEGIN { FS = ","; OFS = ","}

# Declare an array to store the counts for each age range.
# The key for the array will be the age range and the value will be the count.
# This will allow us to easily keep track of the number of people in each range.
# Initialize the array to have a default value of 0.
# AWK arrays are associative, so we don't need to pre-define the size.
age_counts["Under 18"] = 0
age_counts["18-25"] = 0
age_counts["26-40"] = 0
age_counts["41-60"] = 0
age_counts["Over 60"] = 0

# Loop through each line of the input data.
{
    # Get the age column from the input data and convert it to an integer.
    age = int($4)
    # Add 1 to the count for the appropriate age range.
    if (age < 18) {
        age_counts["Under 18"]++
    } else if (age < 26) {
        age_counts["18-25"]++
    } else if (age < 41) {
        age_counts["26-40"]++
    } else if (age < 61) {
        age_counts["41-60"]++
    } else {
        age_counts["Over 60"]++
    }
}

# Calculate the total number of people.
# Use the built-in AWK variable NR, which counts the total number of records.
# Subtract 1 to exclude the header line.
total_people = NR-1

# Print the results.
# Use a for loop to iterate through the age range array and print the age range,
# the number of people in that range, and the percentage of people in that range.
# The printf function is used to format the output.
{
    for (age_range in age_counts) {
        # Calculate the percentage of people in the current age range.
        percentage = (age_counts[age_range] / total_people) * 100
        # Print the results in the following format:
        # Age Range: <age range> | Count: <number of people> | Percentage: <percentage>
        printf("Age Range: %s | Count: %d | Percentage: %.2f%\n", age_range, age_counts[age_range], percentage);
    }
}

# End of code snippet