# This code snippet uses AWK, a programming language commonly used for text processing and data extraction.

# First, we declare a function that will be used to manipulate the input data.
function process_data(input) {
    # Print the line number of the current input record, followed by a tab character.
    printf("%d\t",NR)
    # Loop through each field in the input record, starting from the second field.
    for (i = 2; i <= NF; i++) {
        # If the field contains the string "apple", replace it with "orange".
        if ($i == "apple") {
            $i = "orange"
        }
        # If the field contains a number, add 5 to it.
        # Note: AWK automatically treats any string as a number if possible.
        if ($i ~ /[0-9]+/) {
            $i += 5
        }
        # Print the current field, followed by a space.
        printf("%s ",$i)
    }
    # Print a new line character at the end.
    printf("\n")
}

# Now, we call the process_data function for each line in the input file.
# The input file is specified as a command line argument.
# NR stands for "number of records", so we can use it to print the line number.
# NF stands for "number of fields", so we can use it to loop through each field.
# The default separator for fields in AWK is whitespace (space, tab, or newline).
# If we want to use a different separator, we can specify it using the -F flag.
# In this case, we are using a comma as the separator.
awk -F, '{process_data($0)}' input_file.txt

# Sample input file (input_file.txt):
# apple,2,banana,3,carrot
# 1,2,3,4,5

# Sample output:
# 1	orange 7 banana 8 carrot
# 2 7 7 9 10