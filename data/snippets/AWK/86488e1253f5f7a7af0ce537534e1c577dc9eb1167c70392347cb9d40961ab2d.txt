# Using the 'gawk' implementation of AWK
BEGIN {
    # Declare an associative array to store names and ages
    # Format: names[index] = age
    # By default, arrays in AWK are indexed by string values
    # Prefill the array with some data
    names["John"] = 25
    names["Mary"] = 30
    names["Bob"] = 20

    # Print headers for the data
    print "Name\t\tAge"

    # Loop through the array and print out the data in a sorted manner
    # The array is sorted by index (string values in this case)
    for (name in names) {
        # Use the 'length' function to calculate the length of the name + extra tabs for formatting
        printf("%s\t\t%s\n", name, names[name])

        # Print message when age is below 25
        if (names[name] < 25) {
            print "This person is below 25 years old!"
        }

        # Update age by adding 1 year for each person
        # We can use the 'name' variable as the index for the array
        # since it contains the name of each person
        names[name]++
    }

    # Use the 'delete' keyword to remove an element from the array
    delete names["Bob"]

    # Print separator between the two outputs
    print "-------------------"

    # Print new headers for the updated data
    print "Name\t\tAge"

    # Loop through the array again to print the updated data
    for (name in names) {
        # Print the data in a formatted manner
        printf("%s\t\t%s\n", name, names[name])
    }

    # Use the 'NF' built-in variable to get the number of fields in each record (line)
    # We can use this to count the number of elements in the array
    print "There are " NF " elements in the array."
}