# This code snippet generates a Levenshtein distance matrix for a given set of strings
# Adapted from https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#AWK

# Function to calculate the minimum of three numbers
function min(x, y, z) {
    # Set initial min value to x
    min = x

    # Check if y is smaller than min
    if (y < min) {
        min = y
    }

    # Check if z is smaller than min
    if (z < min) {
        min = z
    }

    # Return the minimum value
    return min
}

# Function to calculate the Levenshtein distance between two strings
function levenshtein(s, t, len_s, len_t) {
    # Initialize a 2D array for the Levenshtein matrix
    # The matrix has (len_s+1) rows and (len_t+1) columns
    for (i = 0; i <= len_s; i++) {
        for (j = 0; j <= len_t; j++) {
            # Set the value of the first row and column to the corresponding index
            if (i == 0) {
                matrix[i, j] = j
            }
            else if (j == 0) {
                matrix[i, j] = i
            }
            else {
                # Calculate the minimum of the three possible operations:
                # - deletion (i-1, j)
                # - insertion (i, j-1)
                # - substitution (i-1, j-1)
                matrix[i, j] = min(matrix[i-1, j] + 1, matrix[i, j-1] + 1, matrix[i-1, j-1] + (s[i-1] != t[j-1]))
            }
        }
    }

    # Return the value in the bottom right corner of the matrix, which represents the Levenshtein distance
    return matrix[len_s, len_t]
}

# Example usage:
# Set the strings to compare
string1 = "kitten"
string2 = "sitting"

# Calculate the length of the strings
length1 = length(string1)
length2 = length(string2)

# Generate the Levenshtein distance matrix and print the result
print levenshtein(string1, string2, length1, length2)