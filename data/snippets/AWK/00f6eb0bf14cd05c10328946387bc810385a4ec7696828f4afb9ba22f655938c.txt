#!/usr/bin/awk -f
 
# This AWK script demonstrates the use of arrays and regular expressions to process a file
 
# Declare an array to store the line numbers of lines containing the word "hello"
BEGIN { 
  declare -A file_map # Initialize AWK associative array
  hello_line_numbers = "" # Initialize string to store line numbers
 
  FS = " " # Set field separator to space
}
 
# Loop through each line of the file, storing the line number
# if the line contains the word "hello"
{
  if($0 ~ /hello/){ # Check if line contains "hello" using regex match
    hello_line_numbers = hello_line_numbers "," NR # Append line number to string
  }
}
 
# After looping through entire file, print out the line numbers in a nicely formatted way
END {
  print "Line numbers of lines containing the word \"hello\":"
  split(hello_line_numbers, line_array, ",") # Split string into an array using "," as delimiter
  for (i = 2; i <= length(line_array); i++){ # Loop through each element of the array
    printf "\t%s\n", line_array[i] # Print out line number with a tab before it
  }
}
 
# Save the line numbers and contents of the file into an array for further processing
NR > 1 { # Skips first line of file
  file_map[NR, "line_number"] = NR # Store line number in format: [line_number, line_content]
  file_map[NR, "line_content"] = $0 # Store line content in format: [line_number, line_content]
}
 
# Loop through the array and print out the line number and contents in reverse order
END {
  print "Line numbers and contents of the file in reverse order:"
  for (i = NR; i >= 2; i--) { # Loop through array in reverse order, skipping first line
    printf "%s. %s\n", file_map[i, "line_number"], file_map[i, "line_content"] # Print line number and content
  }
}