# This AWK code snippet uses control structures, functions, and built-in variables to process a CSV file.
BEGIN { # "BEGIN" keyword indicates the beginning of the code, this block will be executed before reading the input file
  FS = "," # FS (Field Separator) variable is used to set the delimiter for input fields
  OUT_FILE = "output.csv" # a variable to store the name of the output file

  # array to store the headers of the CSV file
  headers[1] = "Name"
  headers[2] = "Age"
  headers[3] = "Gender"
  headers[4] = "Occupation"

  # function to check if the given field is empty
  function isEmpty(field) {
    if(field == "") {
      return 1 # if field is empty, return 1
    } else {
      return 0 # if field is not empty, return 0
    }
  }

  # function to check if the given field is valid (in this case, age should be between 0 and 120)
  function isValidAge(age) {
    if(age >= 0 && age <= 120) {
      return 1 # if age is valid, return 1
    } else {
      return 0 # if age is not valid, return 0
    }
  }
}

{ # this block will be executed for each line of the input file
  # initialize variables for each field
  name = $1
  age = $2
  gender = $3
  occupation = $4

  # skip the first line (headers)
  if(NR == 1) {
    next # "next" keyword is used to skip the rest of the code and read the next line
  }

  # check if any field is empty
  if(isEmpty(name) || isEmpty(age) || isEmpty(gender) || isEmpty(occupation)) {
    print "Error: Empty fields found in line " NR " of the input file." > "/dev/stderr" # print an error message to the standard error stream (/dev/stderr)
    next # skip the rest of the code and read the next line
  }

  # check if age is valid
  if(!isValidAge(age)) {
    print "Error: Invalid age found in line " NR " of the input file." > "/dev/stderr"
    next
  }

  # create a new array to store the processed fields
  processedFields[1] = name
  processedFields[2] = age
  processedFields[3] = (gender == "M") ? "Male" : "Female"
  processedFields[4] = tolower(occupation) # "tolower" function is used to convert occupation to lowercase

  # write the processed fields to the output CSV file
  if(NR == 2) { # if this is the second line, write the headers first
    print headers[1] FS headers[2] FS headers[3] FS headers[4] > OUT_FILE # "FS" (Field Separator) is used to separate the fields
  }
  print processedFields[1] FS processedFields[2] FS processedFields[3] FS processedFields[4] >> OUT_FILE # ">>" is used to append the output to the file

  # print a success message for each line processed
  print "Successfully processed line " NR " of the input file."
}

END { # "END" keyword indicates the end of the code, this block will be executed after reading the input file
  print "Processing completed! Check the output file at " OUT_FILE "."
}