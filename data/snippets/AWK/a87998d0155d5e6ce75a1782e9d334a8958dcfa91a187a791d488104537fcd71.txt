BEGIN {
    # This is the BEGIN block, which executes
    # before any input is read and processed

    # Here, we are setting the Input Field Separator (FS)
    # to comma, which means that each field in the input
    # will be separated by a comma
    FS = ","

    # Initializing a variable called total_num, which
    # will keep track of the total number of input records
    total_num = 0

    # Initializing an array called counts, which will
    # keep track of the count of each unique input record
    # The key of each element will be the unique record and
    # the value will be the count
    # Example: counts["apple"] = 5
    # This means that there were 5 occurrences of the record "apple"
    # in the input
    counts = {}

    # In AWK, "$0" refers to the entire input record
    # Using the built-in AWK function "NF", we can get the total
    # number of fields in the input record
    # NF stands for Number of Fields
    # Here, we are using an if-else statement to check if the input
    # record has more than 0 fields
    if (NF > 0) {
        # For each field in the input record, we are checking
        # if it already exists as a key in the counts array
        # If it does, we simply increment the value (count)
        # If it doesn't, we initialize the value to 1
        for (i = 1; i <= NF; i++) {
            if ($i in counts) {
                counts[$i]++
            } else {
                counts[$i] = 1
            }
        }

        # After looping through all the fields, we increment the
        # total_num variable by 1, which represents one input record
        total_num++
    }
}

# The main block, which is executed for each input record
{
    # Here, we are printing the input record itself
    # Using the built-in AWK variable "NR", we can get the
    # current record number being processed
    # We are simply printing this number before each record
    print NR ": " $0
}

# END block, which is executed after all input has been processed
END {
    # First, we are printing the total number of input records
    # by printing the value of the total_num variable
    print "Total number of input records: " total_num

    # Then, we are looping through the counts array
    # and printing each key-value pair
    # The "for-in" loop is used to iterate through the array
    # and the "printf" function is used to format the output
    # to have the key and value separated by a colon (:)
    for (record in counts) {
        printf "%s: %d\n", record, counts[record]
    }
}