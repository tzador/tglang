#!/bin/awk -f

BEGIN { # BEGIN is a special rule that is executed before processing the input
    threshold = 50; # setting a threshold value to be used later
    
    # creating an associative array to store the names and scores of students
    # each entry in the array will contain a score and will be indexed by student name
    # the array will be sorted in ascending order of scores
    # name is the index and score is the value
    # student array is declared as global so it can be accessed by all functions
    global student[NAME,SCORE];
    
    # function to add a student and score to the student array
    # takes two arguments, student name and score
    # if the student already exists in the array, the score is updated
    # if not, a new entry is added to the array
    function add_student(name, score) {
        if (name in student) {
            student[name] = score; # updating score for existing student
        }
        else {
            student[name] = score; # adding new student and score to array
        }
    }
    
    # function to sort the student array in ascending order by scores
    # uses bubble sort algorithm
    # does not return anything, the student array is sorted in place
    function sort_student() {
        n = asorti(student, sorted_names); # asorti function sorts the array and returns the number of elements
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n-i; j++) {
                if (student[sorted_names[j]] > student[sorted_names[j+1]]) {
                    temp = student[sorted_names[j]];
                    student[sorted_names[j]] = student[sorted_names[j+1]];
                    student[sorted_names[j+1]] = temp;
                }
            }
        }
    }
}

# MAIN body of the program, starts processing the input
{
    # first field is the student name and second field is the score
    # saving them to variables for easier processing
    student_name = $1;
    student_score = $2;
    
    # adding the student and score to the student array
    # note that the add_student function updates the score if the student already exists in the array
    # but since we are not checking for duplicates, it will just add a new entry for each input
    add_student(student_name, student_score);
}

# END is another special rule which is executed after processing the input
END {
    print "Top students above the threshold: "; # printing a heading for the output
    
    # sorting the student array in ascending order by scores
    sort_student();
    
    # loop through the student array and print the names of the top students
    for (name in student) {
        if (student[name] > threshold) {
            print "- " name; # - and space character to create a bullet point list in markdown
        }
    }
}