#@ This AWK code snippet uses regular expressions and command line arguments to read through a text file and output lines containing a pattern match.
#$ The pattern match is specified by the user as a command line argument.
#$ The syntax for running this code is `awk -f pattern_match.awk <pattern> input_file.txt`.
#$ The output will be all lines in the input file that contain the specified pattern.

#$ The BEGIN rule is called before any lines are read.
#$ This rule sets the pattern from the command line argument and initializes the line counter.
BEGIN{
    pattern = ARGV[1]
    ARGV[1] = ""
    line_counter = 0
}

#$ The BODY rule is called for each line in the input file.
#$ It checks if the line contains the specified pattern and if so, prints the line and increments the counter.
#$ The `~` operator is used for regular expression matching.
#$ `pattern ~ /<regex>/` will return true if the pattern matches the regular expression.
#$ In this case, we use `//` to enclose the pattern variable as a regular expression.
#$ The `print` function prints the entire line.
#$ The `NR` special variable holds the current line number.
#$ The `FNR` variable holds the current line number within the current input file.
#$ Thus, `NR == FNR` will only be true for the first input file.
#$ This allows us to skip the first input file in cases where multiple files are provided.
{
    if (pattern ~ /pattern/) {
        print "Match found at line", NR, "in input file"
        line_counter++
    }
}

#$ The END rule is called after all lines have been read.
#$ It prints the total number of matches found.
END{
    print "Total number of matches found:", line_counter
}