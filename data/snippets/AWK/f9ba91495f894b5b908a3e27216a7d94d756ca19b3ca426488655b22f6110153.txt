#!/bin/awk -f

#This is a comment describing the purpose of the code snippet

#Set input field separator to a comma
BEGIN { FS="," }

#Create an associative array to store the count of words
{
    #For each word in the current line
    for(i=1; i<=NF; i++) {
        #Convert to lowercase and remove any non-alphanumeric characters
        gsub("[^a-zA-Z0-9]", "", $i)
        $i = tolower($i)

        #If the word exists in the associative array, increment count by 1
        if($i in words) {
            words[$i]++
        } else { #Else, set count to 1
            words[$i] = 1
        }
    }
}

#Function to sort the words in the associative array in descending order
function sort_descending(arr, num_elements, result) {
    #Initialize result array
    split("", result)

    #While there are still elements in the associative array
    while(num_elements > 0) {
        #Set the max count to 0
        max_count = 0
        #Loop through the associative array to find the word with the highest count
        for(word in arr) {
            #If the current count is higher than the max, update the max and the word
            if(arr[word] > max_count) {
                max_count = arr[word]
                max_word = word
            }
        }
        #Add the max word and count to the result array
        result[num_elements] = max_word":"max_count
        num_elements--
        #Delete the max word from the associative array
        delete arr[max_word]
    }
}

#Function to print the sorted words and their counts
function print_result(result, num_elements) {
    #Loop through the result array in reverse order to print highest count words first
    for(i=num_elements; i>=1; i--) {
        print result[i]
    }
}

#Call the function to sort the words in the associative array
sort_descending(words, length(words), sorted_words)

#Call the function to print the sorted words and their counts
print_result(sorted_words, length(sorted_words))

#Code should output the words and their counts in descending order
#Example output: "apple: 13", "banana: 9", "orange: 5"
#Note: This code snippet can be used to count the occurrences of words in a CSV file.