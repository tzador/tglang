IDENTIFICATION DIVISION.                      //Start of program identification division
PROGRAM-ID. SORTING-PROGRAM.                   //Program name declaration
DATA DIVISION.                                 //Start of data division
WORKING-STORAGE SECTION.                       //Declaration of working storage section
77 ARRAY-SIZE PIC 99.                           //Variable to hold size of array
77 NUMERIC-ARRAY OCCURS 100 TIMES               //Declaring numeric array of size 100
    PIC 9(4).                                  //With 4 digits
77 SORT-ARRAY OCCURS 100 TIMES                  //Declaring sort array of size 100
    PIC X(20).                                 //With 20 characters
PROCEDURE DIVISION.                             //Start of procedure division
MAIN-PROCEDURE.                                 //Declaration of main procedure
    DISPLAY "Please enter the size of array:". //Prompting user for array size
    ACCEPT ARRAY-SIZE.                          //Storing array size in variable
    DISPLAY "Please enter the numbers:".        //Prompting user for numbers
    PERFORM VARYING I FROM 1 BY 1               //Looping through array size
        UNTIL I > ARRAY-SIZE
        ACCEPT NUMERIC-ARRAY (I)                //Storing numbers in array
    END-PERFORM.
    PERFORM VARYING I FROM 1 BY 1               //Outer loop for bubble sort
        UNTIL I > ARRAY-SIZE
        PERFORM VARYING J FROM 1 BY 1           //Inner loop for bubble sort
            UNTIL J > ARRAY-SIZE - I           
            IF NUMERIC-ARRAY (J) > NUMERIC-ARRAY (J+1) //If condition to check if number needs to be swapped
                MOVE SORT-ARRAY (J) TO TEMP     //Swapping numbers using temporary variable
                MOVE NUMERIC-ARRAY (J+1) TO SORT-ARRAY (J)
                MOVE TEMP TO NUMERIC-ARRAY (J+1)
            END-IF
        END-PERFORM.
    END-PERFORM.
    DISPLAY "Sorted array is:".                  //Displaying sorted array
    PERFORM VARYING I FROM 1 BY 1
        UNTIL I > ARRAY-SIZE
        DISPLAY SORT-ARRAY (I)
    END-PERFORM.
STOP RUN.                                       //End of program