IDENTIFICATION DIVISION.               // Start of identification division
PROGRAM-ID. GENERATOR.                  // Program name is 'Generator'

DATA DIVISION.                         // Start of data division
WORKING-STORAGE SECTION.               // Start of working storage section
01 INPUT-ARRAY OCCURS 0 TO 99 INDEXED BY I.
                                        // Declaring an array with index 'I' and size of 100
01 GENERATE-COUNTER USAGE IS COMP.     // Declaring a counter to keep track of generated numbers
01 GENERATED-NUMBER USAGE IS COMP.     // Declaring a variable to store the generated number

01 OUTPUT-ARRAY OCCURS 0 TO 99 INDEXED BY J.
                                        // Declaring an output array with index 'J' and size of 100
01 OUTPUT-INDEX PIC 9(2) VALUE 1.      // Declaring and initializing the output array index

PROCEDURE DIVISION.                    // Start of procedure division
MAIN-PROCEDURE.                        // Main procedure label
    PERFORM INITIALIZE-ARRAYS.         // Calls the initialization subroutine
    DISPLAY "Enter a number:" WITH NO ADVANCING.
                                        // Displays a message prompting the user to enter a number
    ACCEPT GENERATED-NUMBER.           // Accepts input from the user and stores it in the generated number variable
    PERFORM GENERATE-NUMBERS UNTIL GENERATE-COUNTER = 10.
                                        // Continues to generate numbers until the counter reaches 10
    DISPLAY "Generated Numbers:".
                                        // Displays a message for the generated numbers
    PERFORM DISPLAY-ARRAY.             // Calls the subroutine to display the generated numbers
    STOP RUN.                          // Stops the program execution

INITIALIZE-ARRAYS.                     // Initialization subroutine label
    SET I TO 0.                        // Resets the index of the input array
    PERFORM VARYING I FROM 0 BY 1 UNTIL I > 99.
                                        // Performs a loop to initialize the input array with random numbers
        COMPUTE INPUT-ARRAY(I) = FUNCTION RANDOM(99) + 1.
                                        // Generates a random number between 1 and 100 and stores it in the input array at index 'I'
    END-PERFORM.                       // End of loop
    SET GENERATE-COUNTER TO 0.          // Resets the counter for generated numbers
    SET J TO 0.                         // Resets the index for the output array
    PERFORM VARYING J FROM 0 BY 1 UNTIL J > 99.
                                        // Performs a loop to initialize the output array
        COMPUTE OUTPUT-ARRAY(J) = 0.
                                        // Sets each element of the output array to 0
    END-PERFORM.                       // End of loop
    EXIT.                               // Exit the subroutine and return to the main procedure

GENERATE-NUMBERS.                      // Generate numbers subroutine label
    SET GENERATE-COUNTER UP BY 1.       // Increments the counter by 1 for each generated number
    COMPUTE OUTPUT-ARRAY(OUTPUT-INDEX) = INPUT-ARRAY(GENERATE-COUNTER).
                                        // Stores the generated number from the input array to the output array using the output array index
    SET OUTPUT-INDEX UP BY 1.           // Increments the output array index by 1
    EXIT.                               // Exit the subroutine and return to the main procedure

DISPLAY-ARRAY.                         // Display array subroutine label
    SET J TO 0.                         // Resets the output array index
    DISPLAY "--------------------------------------".
                                        // Displays a line to separate the input and output arrays
    PERFORM VARYING J FROM 0 BY 1 UNTIL J > 99.
                                        // Performs a loop to display each element of the output array
        DISPLAY OUTPUT-ARRAY(J).
    END-PERFORM.                       // End of loop
    DISPLAY "--------------------------------------".
                                        // Displays a line to indicate the end of the output array
    EXIT.                               // Exit the subroutine and return to the main procedure