IDENTIFICATION DIVISION.                                  *----------------------------------------------------------------*
                                                           * Program Name: MergeSort                                             *
ENVIRONMENT DIVISION.                                      * Description: Program to perform MergeSort algorithm on an array    *
INPUT-OUTPUT SECTION.                                      * Input: Array of numbers                                            *
DATA DIVISION.                                             * Output: Sorted array                                               *
                                                           * Author: [Your Name]                                                *
WORKING-STORAGE SECTION.                                   *----------------------------------------------------------------*
01 ARRAY-SIZE PIC 9(2).                                    * Variable to store size of array                                    *
01 UNSORTED-ARRAY OCCURS 0 TO 10 TIMES DEPENDING ON ARRAY-  * Array to store the unsorted numbers                                *
   SIZE PIC 9(2).                                          *----------------------------------------------------------------*
01 LOW-INDEX PIC 9(2).                                      * Variable to store the low index of array                           *
01 HIGH-INDEX PIC 9(2).                                     * Variable to store the high index of array                          *
01 MID-INDEX PIC 9(2).                                      * Variable to store the mid index of array                           *
01 TEMP-ARRAY OCCURS 0 TO 10 TIMES DEPENDING ON ARRAY-SIZE.  * Temporary array used in sorting algorithm                          *
   01 TEMP-NUMBER PIC 9(2).                                 * Temporary variable to store a number during sorting                *----------------------------------------------------------------*
01 SORTED-ARRAY OCCURS 0 TO 10 TIMES DEPENDING ON ARRAY-SIZE.* Array to store the sorted numbers                                  *----------------------------------------------------------------*
PROCEDURE DIVISION.                                        * Main program logic                                                 *----------------------------------------------------------------*
                                                           *> Program Initialization                                            *----------------------------------------------------------------*
    DISPLAY "Enter the size of the array:"                  * Display message to user requesting input                           *
    ACCEPT ARRAY-SIZE                                       * Accept input for size of array                                     *
                                                           *                                                                   *----------------------------------------------------------------*
    PERFORM VARYING INDEX FROM 1 BY 1                         * Loop to accept numbers into unsorted array                         *
        UNTIL INDEX > ARRAY-SIZE                              * Loop until all numbers are entered                                 *
        DISPLAY "Enter number " INDEX ":"                    * Display message to user requesting input                           *
        ACCEPT UNSORTED-ARRAY(INDEX)                         * Accept input for current index of unsorted array                   *
    END-PERFORM                                             *----------------------------------------------------------------*
                                                           *> MergeSort Algorithm                                               *----------------------------------------------------------------*
    MOVE 1 TO LOW-INDEX                                      * Initialize low index to 1                                          *
    MOVE ARRAY-SIZE TO HIGH-INDEX                            * Initialize high index to size of array                             *
    PERFORM SORT-ARRAY                                       * Call SORT-ARRAY subprogram                                         *> Moving arrays
    MOVE TEMP-ARRAY TO SORTED-ARRAY                          * Move sorted array from temporary array to final sorted array       *> Printing sorted array
    DISPLAY "Sorted array:"                                 * Display message to user                                            *
    PERFORM VARYING INDEX FROM 1 BY 1                         * Loop to display numbers in sorted array                            *
        UNTIL INDEX > ARRAY-SIZE                              * Loop until all numbers are displayed                              *
        DISPLAY SORTED-ARRAY(INDEX)                          * Display current index of sorted array                              *
    END-PERFORM                                              *----------------------------------------------------------------*
                                                           *> Subprogram to perform MergeSort algorithm                        *----------------------------------------------------------------*
SORT-ARRAY.                                                * Subprogram to sort array using MergeSort algorithm                 *-------------------------------------------------------------------------*
    IF LOW-INDEX < HIGH-INDEX                                * Check if low index is less than high index                         *
    THEN                                                     * If true, divide array into two halves and sort each half separately*
        MOVE ((LOW-INDEX + HIGH-INDEX) / 2) TO MID-INDEX     * Calculate mid index of array                                       *
        CALL "SORT-ARRAY" USING LOW-INDEX, MID-INDEX         * Call SORT-ARRAY subprogram with lower half of array                *
        CALL "SORT-ARRAY" USING MID-INDEX+1, HIGH-INDEX      * Call SORT-ARRAY subprogram with upper half of array                *-------------------------------------------------------------------------*
    PERFORM SORT                                             * Call SORT subprogram to merge and sort halves of array             *-------------------------------------------------------------------------*
END SORT-ARRAY.                                            * End of SORT-ARRAY subprogram                                        *----------------------------------------------------------------*
                                                           *> SUBPROGRAM TO MERGE AND SORT TWO HALVES OF ARRAY                 *-------------------------------------------------------------------------*
SORT.                                                      * Subprogram to merge and sort two halves of array                   *-------------------------------------------------------------------------*
    IF LOW-INDEX < MID-INDEX                                 * Check if low index is less than mid index                          *
    AND MID-INDEX < HIGH-INDEX                                * Check if mid index is less than high index                         *
    AND UNSORTED-ARRAY(MID-INDEX) < UNSORTED-ARRAY(MID-                                                         * Check if number at mid index is less than number at high index     *
        MOVE UNSORTED-ARRAY(LOW-INDEX) TO TEMP-ARRAY(INDEX).   * Move number at low index to sorted array                           *
        ADD 1 TO LOW-INDEX                                    * Increase low index by 1 to move to next number                     *
    ELSE                                                     * If above conditions are not met, move number at high index to     *  *> sorted array
        MOVE UNSORTED-ARRAY(HIGH-INDEX) TO TEMP-ARRAY(INDEX).  * Move number at high index to sorted array                          *
        ADD 1 TO HIGH-INDEX                                   * Increase high index by 1 to move to next number                    *
    END-IF                                                    * End of IF statement                                               *
    ADD 1 TO INDEX.                                           * Increase index by 1 to move to next index in sorted array         *
END SORT.                                                   * End of SORT subprogram                                             *-------------------------------------------------------------------------*
END PROGRAM MergeSort.                                     * End of program                                                     *----------------------------------------------------------------*