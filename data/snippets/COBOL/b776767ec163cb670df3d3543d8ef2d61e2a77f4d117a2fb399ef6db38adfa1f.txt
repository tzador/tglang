identification division.
program-id. sorting-program.

environment division.
input-output section.
file-control.
    select sorting-file assign to "sorting_data.txt"
        organization is line sequential.

data division.
file section.
    fd sorting-file.
    01 input-data.
        02 input-nums pic 9(5).
    01 output-data.
        02 output-nums pic 9(5).

working-storage section.
    01 input-array.
        02 array-elems pic 9(5) occurs 100 times.
    01 output-array.
        02 array-elems pic 9(5) occurs 100 times.
    01 temp-num pic 9(5).
    01 index pic 99.
    01 counter pic 99.
    01 num-elems pic 99.

procedure division.
    open input sorting-file.
    read sorting-file.
        at end
            move 0 to num-elems
        not at end
            move input-nums to array-elems(num-elems)
            add 1 to num-elems
            read sorting-file into input-data.

    perform varying index from 1 by 1
        until index > num-elems
        perform varying counter from num-elems by -1
            until counter < index
            if array-elems(counter) < array-elems(counter - 1)
                move array-elems(counter - 1) to temp-num
                move array-elems(counter) to array-elems(counter - 1)
                move temp-num to array-elems(counter)
            end-if
        end-perform
    end-perform.

    perform varying index from 1 by 1
        until index > num-elems
        move array-elems(index) to output-nums
        write output-data from output-nums
        end-perform.

    close sorting-file.
    stop run.