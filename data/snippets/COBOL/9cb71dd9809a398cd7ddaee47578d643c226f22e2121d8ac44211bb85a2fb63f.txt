IDENTIFICATION DIVISION.                           /* IDENTIFICATION DIVISION statement, defines the name and purpose of the program */
                    

 PROGRAM-ID. LONG-COMPLEX.                          /* PROGRAM-ID statement, gives a unique name to the program */
                     
 AUTHOR. JOHN DOE.                                  /* AUTHOR statement, identifies the name of the programmer */

 DATA DIVISION.                                     /* DATA DIVISION statement, defines the variables used in the program */

 WORKING-STORAGE SECTION.                           /* WORKING-STORAGE SECTION, contains all the variables used in the program */

 01 INPUT-ARRAY.                                    /* 01 level data item, defines an array called INPUT-ARRAY */
    05 ARRAY-LENGTH      PIC S9(4) COMP.            /* 05 level data item, defines the length of the array as a signed 4-digit number */
    05 ARRAY-VALUES OCCURS 10 TIMES.                /* 05 level data item, defines the values to be stored in the array, OCCURS 10 TIMES indicates 10 elements in the array */
       10 NUM              PIC S9(4) COMP.          /* 10 level data item, defines each element of the array as a signed 4-digit number */

 01 SUM                PIC S9(8) COMP.              /* 01 level data item, defines a variable called SUM as a signed 8-digit number */
 01 I-INDEX            PIC S9(4) COMP.              /* 01 level data item, defines a variable called I-INDEX as a signed 4-digit number */
 01 J-INDEX            PIC S9(4) COMP.              /* 01 level data item, defines a variable called J-INDEX as a signed 4-digit number */

 PROCEDURE DIVISION.                                /* PROCEDURE DIVISION, where the main logic of the program is executed */

 PERFORM VARYING I-INDEX FROM 1 BY 1                 /* PERFORM statement, iterates through the values of I-INDEX from 1 to the length of the array */
          UNTIL I-INDEX > ARRAY-LENGTH
    SUM = SUM + ARRAY-VALUES(I-INDEX)                /* ADD statement, adds the value at current index of the array to the SUM variable */
 END-PERFORM.

 PERFORM VARYING I-INDEX FROM 1 BY 1                 /* PERFORM statement, iterates through the values of I-INDEX from 1 to the length of the array */
          UNTIL I-INDEX > ARRAY-LENGTH
    PERFORM VARYING J-INDEX FROM I-INDEX BY 1        /* PERFORM statement, iterates through the values of J-INDEX from current index of I-INDEX to the length of the array */
            UNTIL J-INDEX > ARRAY-LENGTH
       IF ARRAY-VALUES(I-INDEX) < ARRAY-VALUES(J-INDEX) /* IF statement, compares the values at current indices of the array */
          MOVE ARRAY-VALUES(J-INDEX) TO ARRAY-VALUES(I-INDEX) /* MOVE statement, swaps the values at the current indices */
       END-IF.
 END-PERFORM.

 DISPLAY "The sum of the array is " SUM.             /* DISPLAY statement, prints the final sum of the array */

 STOP RUN.                                           /* STOP RUN statement, ends the execution of the program */