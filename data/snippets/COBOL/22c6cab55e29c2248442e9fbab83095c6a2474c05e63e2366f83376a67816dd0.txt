IDENTIFICATION DIVISION.
       PROGRAM-ID. SORT_RING.
       DATA DIVISION.
       FILE SECTION.
       FD INPUT-FILE.
       01 SORTING-RECORD.
           05 NUM PIC 9(5).
           05 NEXT-REC PIC 9(5).
           05 SORT-ORDER PIC 9(5).
       WORKING-STORAGE SECTION.
       01 SORT-ARRAY OCCURS 999999 TIMES
               INDEXED BY IDX1.
           05 ARR-REC.
               10 NUM PIC 9(5).
               10 NEXT-REC PIC 9(5).
               10 SORT-ORDER PIC 9(5).
       PROCEDURE DIVISION.
       MAIN-LOGIC.
           OPEN INPUT INPUT-FILE
           PERFORM READ-PARA
           PERFORM SORT-PARA
           PERFORM WRITE-PARA
           WRITE 'Sorting complete!'
           PERFORM CLOSE-PARA
           STOP RUN.
       READ-PARA.
           PERFORM UNTIL EOF = 'YES'
               READ INPUT-FILE INTO SORTING-RECORD
                   AT END
                       MOVE 'YES' TO EOF
                   NOT AT END
                       MOVE SORTING-RECORD TO SORT-ARRAY(IDX1)
                       ADD 1 TO IDX1
               END-READ
           END-PERFORM.
       SORT-PARA.
           PERFORM VARYING I FROM 1 BY 1
               UNTIL I > IDX1
               PERFORM VARYING J FROM 1 BY 1
                   UNTIL J > IDX1-I
                   IF SORT-ARRAY(J).SORT-ORDER > SORT-ARRAY(J+1).SORT-ORDER
                       MOVE SORT-ARRAY(J+1) TO ARR-REC
                       MOVE SORT-ARRAY(J) TO SORT-ARRAY(J+1)
                       MOVE ARR-REC TO SORT-ARRAY(J)
               END-PERFORM
            END-PERFORM.
       WRITE-PARA.
           PERFORM VARYING I FROM 1 BY 1 UNTIL I > IDX1
               DISPLAY 'Record: ' SORT-ARRAY(I).NUM ' Next Record: ' SORT-ARRAY(I).NEXT-REC
           END-PERFORM.
       CLOSE-PARA.
           CLOSE INPUT-FILE.
       END PROGRAM SORT_RING.