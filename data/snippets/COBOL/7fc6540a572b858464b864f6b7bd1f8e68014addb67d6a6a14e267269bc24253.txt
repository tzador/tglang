IDENTIFICATION DIVISION.                  * Start of identification division
      PROGRAM-ID. ABCDEFG.                       * Name of program
      AUTHOR. JOHN SMITH.                        * Name of author
      ENVIRONMENT DIVISION.                      * Start of environment division
      INPUT-OUTPUT SECTION.                      * Specifies input and output files
      FILE-CONTROL.                              * Establishes file connections
          SELECT INPUT-FILE ASSIGN TO "input.txt".      * Input file declaration
          SELECT OUTPUT-FILE ASSIGN TO "output.txt".    * Output file declaration
          
      DATA DIVISION.                             * Start of data division
      FILE SECTION.                              * Declares file data
      FD INPUT-FILE                               * File description for input file
         RECORD CONTAINS 80 CHARACTERS            * Specifies record length of 80 characters 
         RECORDING MODE IS F.                     * Sequential file access mode
      01 INPUT-RECORD.                            * Data structure for input record
         05 FIELD1    PIC X(10).                  * Field 1, length of 10 characters
         05 FIELD2    PIC X(20).                  * Field 2, length of 20 characters
         05 FIELD3    PIC 9(3).                   * Field 3, numeric field with length of 3 digits
         05 FIELD4    PIC X(40).                  * Field 4, length of 40 characters
         
      FD OUTPUT-FILE                              * File description for output file
         RECORD CONTAINS 120 CHARACTERS           * Specifies record length of 120 characters
         RECORDING MODE IS F.                     * Sequential file access mode
      01 OUTPUT-RECORD.                           * Data structure for output record
         05 FIELD1    PIC X(20).                  * Field 1, length of 20 characters
         05 FIELD2    PIC X(20).                  * Field 2, length of 20 characters
         05 FIELD3    PIC 9(5)V99.                * Field 3, numeric field with 5 digits in front and 2 after decimal point
         05 FIELD4    PIC X(20) OCCURS 10 TIMES   * Field 4, array with 10 occurrences, each with length of 20 characters
         05 FIELD5    PIC X(30).                  * Field 5, length of 30 characters
         
      WORKING-STORAGE SECTION.                    * Declares working variables and constants
      01 WS-VAR1        PIC 9(3).                 * Working variable 1, numeric field with 3 digits
      01 WS-FLAG        PIC X.                    * Working variable 2, single character variable
      01 WS-CONSTANT    PIC X VALUE 'A'.           * Constant variable, set to value 'A' at compile time
      
      LOCAL-STORAGE SECTION.                      * Declares local variables and constantes
      01 LS-VAR1        PIC 9(5)V99.              * Local variable 1, numeric field with 5 digits in front and 2 after decimal point
      01 LS-FLAG        PIC X VALUE 'N'.           * Local variable 2, single character variable set to value 'N' at run time
      
      PROCEDURE DIVISION.                         * Start of procedure division
      000-MAIN.                                   
          OPEN INPUT INPUT-FILE                   * Opens input file for reading
          OPEN OUTPUT OUTPUT-FILE                 * Opens output file for writing
          
      100-READ-INPUT.                             * Reads input record
          READ INPUT-FILE INTO INPUT-RECORD       * Reads next record from input file
          AT END MOVE 'Y' TO WS-FLAG              * If end of file is reached, set flag to 'Y'
          NOT AT END MOVE 'N' TO WS-FLAG          * If not end of file, set flag to 'N'
          
      200-PROCESS-RECORD.                         * Processes input record and writes output record
          MOVE FIELD1 OF INPUT-RECORD TO WS-VAR1  * Moves value of field1 to working variable 1
          IF FIELD3 OF INPUT-RECORD > WS-VAR1     * Compares value of field3 to value in working variable 1
              MOVE 'Y' TO LS-FLAG                 * If condition is true, set flag to 'Y'
          ELSE
              MOVE 'N' TO LS-FLAG                 * If condition is false, set flag to 'N'
          END-IF.
          
          MOVE FIELD1 OF INPUT-RECORD TO FIELD1 OF OUTPUT-RECORD.    * Moves value of field1 to output record
          MOVE FIELD2 OF INPUT-RECORD TO FIELD2 OF OUTPUT-RECORD.    * Moves value of field2 to output record
          MOVE FIELD3 OF INPUT-RECORD TO FIELD3 OF OUTPUT-RECORD.    * Moves value of field3 to output record
          COMPUTE FIELD3 OF OUTPUT-RECORD = FIELD3 OF OUTPUT-RECORD * 2.     * Multiplies value of field3 by 2 and stores in output record
          
          PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10.               * Loops 10 times
              MOVE FIELD4 (I) OF INPUT-RECORD TO FIELD4 (I) OF OUTPUT-RECORD.    * Moves array element to output record
          END-PERFORM.
          
          MOVE WS-CONSTANT TO FIELD5 OF OUTPUT-RECORD.               * Moves constant value to output record
          
          WRITE OUTPUT-RECORD.                                      * Writes output record to output file
          IF WS-FLAG = 'N'                                          * Checks if continue reading input file
              GO TO 100-READ-INPUT.                                 * If not at end of file, reads next record
          ELSE
              CLOSE INPUT-FILE                                       * Closes input file
              CLOSE OUTPUT-FILE                                      * Closes output file
          END-IF.
          
      999-EXIT.
          STOP.                                                      * Ends program execution
      END PROGRAM ABCDEFG.                                            * End of program