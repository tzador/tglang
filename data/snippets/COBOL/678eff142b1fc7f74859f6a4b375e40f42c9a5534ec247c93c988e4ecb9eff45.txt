* Declaration section
       01  RECORD-LENGTH            PIC S9(4) COMP.
       01  RECORD-TYPE              PIC X(04).
       01  EMPLOYEE-RECORD.
           05  EMPLOYEE-ID          PIC X(05).
           05  EMPLOYEE-NAME        PIC X(20).
           05  EMPLOYEE-AGE         PIC 99.
           05  EMPLOYEE-DEPARTMENT  PIC X(10).
           05  EMPLOYEE-SALARY      PIC S9(6)V99.

* Working storage section
       01  REPORT-LINE               PIC X(80).
       01  EMPLOYEE-COUNT            PIC S9(4) COMP.
       01  TOTAL-SALARY              PIC S9(7)V99 COMP.
       01  AVG-SALARY                PIC S9(7)V99 COMP.

* Procedure division
       01  MAIN-PROCEDURE.
           PERFORM READ-FILE UNTIL END-OF-FILE  /* Read each line from the input file until the end is reached
           DISPLAY "Employee ID: " EMPLOYEE-ID    /* Display employee ID to the user
           PERFORM CALCULATE-SALARY              /* Calculate and display salary of the employee
           ADD 1 TO EMPLOYEE-COUNT                /* Increment employee count by 1
           ADD EMPLOYEE-SALARY TO TOTAL-SALARY    /* Add employee salary to total salary 
           PERFORM WRITE-LINE                    /* Write the current line to the output file
           MOVE TALLY TO REPORT-LINE              /* Move the sum of all previous salaries to report line
           DISPLAY REPORT-LINE                    /* Display the report line to the user 
           COMPUTE AVG-SALARY = TOTAL-SALARY / EMPLOYEE-COUNT /* Calculate and display average salary of all employees
           CLOSE INPUT-FILE
           CLOSE OUTPUT-FILE
           STOP RUN.  /* End the program

       READ-FILE.
           READ INPUT-FILE INTO EMPLOYEE-RECORD      /* Read a record from the input file into the employee record
           AT END                                   /* Check if end of file is reached
               SET END-OF-FILE TO TRUE               /* Set flag to true
           NOT AT END                               /* If not, continue with the program
               PERFORM VALIDATE-RECORD               /* Validate the record format and content
               IF RECORD-TYPE EQUALS "EMPL"          /* Check if record type is "EMPL"
                   PERFORM PROCESS-RECORD            /* Process the employee record
               END-IF.
          
       VALIDATE-RECORD.
           IF RECORD-LENGTH NOT EQUAL 50             /* Check if record length is equal to expected length
               DISPLAY "Invalid record length"       /* Display error message
               SET END-OF-FILE TO TRUE               /* Set flag to true to skip the record
           END-IF.

       PROCESS-RECORD.
           IF EMPLOYEE-AGE GREATER THAN 0            /* Check if employee age is valid
               PERFORM CALCULATE-SALARY              /* Calculate and display salary of the employee
               ADD 1 TO EMPLOYEE-COUNT               /* Increment employee count by 1
               ADD EMPLOYEE-SALARY TO TOTAL-SALARY    /* Add employee salary to total salary
               PERFORM WRITE-LINE                    /* Write the current line to the output file
           ELSE                                     /* If invalid age, skip the record
               SET END-OF-FILE TO TRUE
           END-IF.

       CALCULATE-SALARY.
           COMPUTE EMPLOYEE-SALARY = (EMPLOYEE-AGE * 1000) + (EMPLOYEE-AGE * 100) /* Calculate salary based on age
           MOVE EMPLOYEE-SALARY TO REPORT-LINE      /* Move calculated salary to report line
           DISPLAY REPORT-LINE                      /* Display the salary to the user

       WRITE-LINE.
           WRITE OUTPUT-RECORD FROM REPORT-LINE     /* Write the report line to the output file
           AT END                                   
               DISPLAY "Error writing to output file" /* Display error message if writing fails
               STOP RUN.