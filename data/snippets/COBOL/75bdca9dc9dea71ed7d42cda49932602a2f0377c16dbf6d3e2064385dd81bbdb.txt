IDENTIFICATION DIVISION. //start of COBOL code
   PROGRAM-ID. GROCERY-SALES-RPT. //program name
   AUTHOR. JESSICA SMITH. //author name

PROCEDURE DIVISION. //start of procedure division
   MAIN-LOGIC SECTION.

   PERFORM INITIALIZE-DATA-TABLES.
   PERFORM GET-SALES-FILES.
   PERFORM PROCESS-SALES-RECORDS //perform initial operations
       THRU FINALIZE-DATA-TABLES
       UNTIL COUNTER-C > NUM-OF-RECORDS //loop until counter is greater than number of records

   ACCEPT STORE-REPORT //accept input from user for store number

   PERFORM GENERATE-STORE-SALES-REPORT //generate sales report for selected store
       THRU DISPLAY-FINAL-REPORT //display final report
       UNTIL FINAL-REPORT-FLAG //loop until final report is displayed

   STOP RUN. //end of program

INITIALIZE-DATA-TABLES.
   PERFORM VARYING I FROM 1 BY 1
       UNTIL I > MAX-STORES
       PERFORM VARYING J FROM 1 BY 1
           UNTIL J > MAX-PRODUCTS
           MOVE ZEROS TO SALES-TABLE (I,J) //initialize sales table
           END-PERFORM
       END-PERFORM.

GET-SALES-FILES.
   OPEN INPUT SALES-DATA-FILE.
   OPEN OUTPUT SALES-REPORT-FILE.

PROCESS-SALES-RECORDS.
   READ SALES-DATA-FILE
       AT END MOVE 'YES' TO FINAL-REPORT-FLAG //end of file, set flag to display final report
   END-READ.

   IF SALES-DATA-RECORD (2,6) = STORE-REPORT //if store number matches input
       ADD SALES-DATA-RECORD (14,3) TO SALES-TABLE (COUNTER-C,PRODUCT-C) //add sales amount to table
       ADD SALES-DATA-RECORD (14,3) TO TOTAL-SALES (I) //add sales amount to total for specific store
       ADD 1 TO PRODUCT-C //increment product counter
   END-IF.

   ADD 1 TO COUNTER-C //increment counter
   IF SALES-DATA-RECORD (2,6) = 'ZZZZZZ' //end of store, reset product counter and add 1 to store counter
       ADD 1 TO STORE-COUNTER
       MOVE ZEROS TO PRODUCT-C
   END-IF.

FINALIZE-DATA-TABLES.
   COMPUTE TOTAL-STORE-SALES = TOTAL-SALES (I) * 0.08. //calculate total sales for store

GENERATE-STORE-SALES-REPORT.
   MOVE 'STORE: ' TO REPORT-LINE (1,2)
   MOVE STORE-REPORT TO REPORT-LINE (1,10)
   MOVE 'TOTAL SALES: ' TO REPORT-LINE (3,2)
   MOVE TOTAL-STORE-SALES TO REPORT-LINE (3,14).
   MOVE ALL '*' TO REPORT-LINE (5,1:20).
   MOVE 'PRODUCT' TO REPORT-LINE (6,2).
   MOVE 'SALES' TO REPORT-LINE (6,14).

   PERFORM VARYING J FROM 1 BY 1
       UNTIL J > MAX-PRODUCTS
       MOVE J TO REPORT-LINE (J+6,2)
       MOVE SALES-TABLE (STORE-COUNTER,J) TO REPORT-LINE (J+6, 14)
       END-PERFORM.

DISPLAY-FINAL-REPORT.
   PERFORM PRINT-REPORT-HEADINGS.
   PERFORM VARYING J FROM 1 BY 1
       UNTIL J > MAX-PRODUCTS
       MOVE REPORT-LINE (J,1:20) TO PRINT-LINE.
       WRITE PRINT-LINE TO SALES-REPORT-FILE
       END-PERFORM.

   MOVE ALL '*' TO PRINT-LINE (1:20).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.

   MOVE 'TOTAL SALES: ' TO PRINT-LINE (1,1).
   MOVE TOTAL-STORE-SALES TO PRINT-LINE (1,14).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.

   MOVE ALL '*' TO PRINT-LINE (1:20).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.

   MOVE ALL ' ' TO PRINT-LINE (1:20).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.

   IF FINAL-REPORT-FLAG = 'YES'
       MOVE ALL '*' TO PRINT-LINE (1:20).
       WRITE PRINT-LINE TO SALES-REPORT-FILE.
       CLOSE SALES-REPORT-FILE.
   END-IF.

PRINT-REPORT-HEADINGS.
   MOVE 'GROCERY STORES SALES REPORT' TO REPORT-HEADING.
   WRITE REPORT-HEADING TO SALES-REPORT-FILE.
   MOVE 'STORE NUMBER: ' TO PRINT-LINE (1,1).
   MOVE STORE-REPORT TO PRINT-LINE (1,15).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.
   MOVE 'PRODUCT' TO PRINT-LINE (1,2).
   MOVE 'SALES' TO PRINT-LINE (1,14).
   WRITE PRINT-LINE TO SALES-REPORT-FILE.