01 CLASS-A.                   | Define CLASS-A data structure
     05 STUDENT-ID PIC 9(8).    | Define STUDENT-ID field of 8 digits
     05 STUDENT-NAME.           | Define STUDENT-NAME field
        10 FIRST-NAME PIC X(10).| Define FIRST-NAME field of 10 characters
        10 LAST-NAME PIC X(10). | Define LAST-NAME field of 10 characters
     05 COURSE-INFO OCCURS 10 TIMES.
                                | Define OCCURS clause for repeating data
        10 COURSE-ID PIC X(5).  | Define COURSE-ID field of 5 characters
        10 COURSE-GRADE PIC 9.  | Define COURSE-GRADE field of single digit
                                | (assumes grades from 0 to 9)
        10 COURSE-NAME PIC X(20)| Define COURSE-NAME field of 20 characters

 01 REPORT-LINE.               | Define REPORT-LINE data structure
     05 HEADER.                 | Define HEADER section
        10 HEADING PIC X(20).   | Define HEADING field for header text
                                | (assumes 20 character length)
     05 DETAILS OCCURS 10 TIMES.| Define DETAILS section for repeating data
        10 COURSE-ID PIC X(5).  | Define COURSE-ID field of 5 characters
        10 COURSE-NAME PIC X(20)| Define COURSE-NAME field of 20 characters
        10 STUDENT-GRADE PIC 99.| Define STUDENT-GRADE field of two digits
                                | (assumes grades from 00 to 99)
                                | (code assumes each student has up to 10 courses)

 * Main program
 PROCEDURE DIVISION.
     MAIN.
         PERFORM READ-INPUT      | Call subprogram to read student data
         PERFORM GENERATE-REPORT | Call subprogram to generate report
         STOP RUN.

 * Subprogram to read student data
 READ-INPUT.
     OPEN INPUT CLASS-A         | Open input file containing student data
     READ CLASS-A               | Read first record
     AT END                     | Check if end of file is reached
         SET END-OF-FILE TO TRUE| Set flag to indicate end of file
     END-READ.
     CLOSE CLASS-A              | Close input file

 * Subprogram to generate report
 GENERATE-REPORT.
     PERFORM OPEN-OUTPUT        | Call subprogram to open output file
     MOVE 'Student Report' TO HEADING.
                                | Set header text
     PERFORM WRITE-HEADER       | Call subprogram to write header to file
     PERFORM WRITE-DETAILS      | Call subprogram to write details to file
     PERFORM CLOSE-OUTPUT       | Call subprogram to close output file

 * Subprogram to open output file
 OPEN-OUTPUT.
     OPEN OUTPUT REPORT-LINE    | Open output file for writing

 * Subprogram to write header to output file
 WRITE-HEADER.
     MOVE HEADING TO HEADER     | Move header text to data structure
     WRITE REPORT-LINE         | Write header to output file
     INVALID KEY               | Check for any errors in writing
         DISPLAY "Error writing header".
     END-WRITE.

 * Subprogram to write details to output file
 WRITE-DETAILS.
     PERFORM VARYING I FROM 1 BY 1
                               | Loop through each course in student data
     UNTIL I > 10
         IF COURSE-INFO(I) = SPACES
                               | If no course information, skip to next loop
             CONTINUE
         END-IF
         MOVE STUDENT-ID TO REPORT-LINE.STUDENT-ID
                               | Move student ID to output data structure
         MOVE COURSE-INFO(I).COURSE-ID TO REPORT-LINE.COURSE-ID
                               | Move course ID to output data structure
         MOVE COURSE-INFO(I).COURSE-NAME TO REPORT-LINE.COURSE-NAME
                               | Move course name to output data structure
         MOVE COURSE-INFO(I).COURSE-GRADE TO STUDENT-GRADE
                               | Move course grade to temporary variable
         IF STUDENT-GRADE > 90 | Check if grade is above 90
             MOVE 90 TO STUDENT-GRADE
                               | Set grade to 90 (highest possible)
         END-IF
         MOVE STUDENT-GRADE TO REPORT-LINE.STUDENT-GRADE
                               | Move final grade to output data structure
         WRITE REPORT-LINE      | Write line of details to output file
         INVALID KEY            | Check for any errors in writing
             DISPLAY "Error writing details".
         END-WRITE.
         ADD 1 TO I             | Increment loop counter
     END-PERFORM.

 * Subprogram to close output file
 CLOSE-OUTPUT.
     CLOSE REPORT-LINE         | Close output file