IDENTIFICATION DIVISION.                            * Defines the name of the program  
       PROGRAM-ID. EXAMPLE.                                * Program identifier  
       DATA DIVISION.                                       * Defines variables, constants and files
       WORKING-STORAGE SECTION.                             * Contains variables and constants needed for processing
       01 ARRAY-SIZE         PIC 99 VALUE 10.                * A variable to store the size of the array 
       01 ARRAY-INDEX        PIC 99 VALUE 0.                 * A counter to track the index of the array 
       01 TEST-ARRAY.                                        * An array to store test scores 
            05 SCORE         PIC 99 OCCURS ARRAY-SIZE TIMES. * Each element in the array is a 2-digit number 
       PROCEDURE DIVISION.                                   * Contains the main logic of the program 
       MAIN-LOGIC.                                           * Entry point of the program 
           PERFORM INITIALIZE-ARRAY.                         * Calls the subroutine to initialize the array 
           PERFORM PROCESS-ARRAY.                            * Calls the subroutine to process the array 
           DISPLAY 'Results:'                                * Prints the results 
           PERFORM PRINT-RESULTS.                            * Calls the subroutine to print the results 
           STOP RUN.                                          * Stops the program 
       INITIALIZE-ARRAY.                                     * Subroutine to initialize the array 
           PERFORM VARYING I FROM 1 BY 1                      * Loop to initialize each element in the array 
           UNTIL I > ARRAY-SIZE 
               MOVE I TO ARRAY-INDEX                         * Stores the index in the counter 
               MOVE FUNCTION RANDOM(100) TO SCORE(ARRAY-INDEX). * Generates a random number between 1 and 100 
           END-PERFORM. 
       PROCESS-ARRAY.                                        * Subroutine to process the array 
           PERFORM VARYING I FROM 1 BY 1                      * Loop to process each element in the array 
           UNTIL I > ARRAY-SIZE 
               IF SCORE(ARRAY-INDEX) > 90                    * Checks if the score is greater than 90 
                   ADD 1 TO HIGH-SCORE                       * Increments the high-score counter by 1 
               ELSE 
                   ADD 1 TO LOW-SCORE                        * Increments the low-score counter by 1 
               END-IF 
               ADD SCORE(ARRAY-INDEX) TO TOTAL-SCORE.         * Adds the current score to the total-score 
           END-PERFORM. 
       PRINT-RESULTS.                                        * Subroutine to print the results 
           COMPUTE AVERAGE-SCORE = TOTAL-SCORE / ARRAY-SIZE.  * Calculates the average score 
           DISPLAY 'High scores: ' HIGH-SCORE. 
           DISPLAY 'Low scores: ' LOW-SCORE. 
           DISPLAY 'Average score: ' AVERAGE-SCORE.