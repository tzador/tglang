IDENTIFICATION DIVISION.                                  // Identifies the program name and author
       PROGRAM-ID. LONG-COBOL-SNIPPET.                           // Name of the program
       ENVIRONMENT DIVISION.                                     // Contains setup information for compiler and runtime environment
       INPUT-OUTPUT SECTION.                                     // Used to define input/output devices used in the program
       FILE-CONTROL.                                             // Defines file names and descriptions
           SELECT INPUT-FILE ASSIGN TO 'INPUT.TXT'.              // Names input file as 'INPUT.TXT'
           SELECT OUTPUT-FILE ASSIGN TO 'OUTPUT.TXT'.            // Names output file as 'OUTPUT.TXT'

       DATA DIVISION.                                            // Defines all data in the program
       FILE SECTION.                                             // Contains data about files used in the program
       FD INPUT-FILE.                                            // Defines variables for input file
           01 INPUT-RECORD.                                      // Defines structure of input record
               05 INPUT-NAME        PIC X(20).                   // Defines variable for name, 20 characters in length
               05 INPUT-AGE         PIC 9(3).                    // Defines variable for age, 3 digits in length
               05 INPUT-GRADE-1     PIC 999.                     // Defines variable for 1st grade, 3 digits in length
               05 INPUT-GRADE-2     PIC 999.                     // Defines variable for 2nd grade, 3 digits in length
               05 INPUT-GRADE-3     PIC 999.                     // Defines variable for 3rd grade, 3 digits in length
       FD OUTPUT-FILE.                                           // Defines variables for output file
           01 OUTPUT-RECORD.                                      // Defines structure of output record
               05 OUTPUT-NAME       PIC X(20).                   // Defines variable for name, 20 characters in length
               05 OUTPUT-GRADE-AVG  PIC 999.                     // Defines variable for average grade, 3 digits in length
               05 OUTPUT-RESULT     PIC X.                       // Defines variable for pass/fail result, 1 character in length

       WORKING-STORAGE SECTION.                                  // Defines working variables used in the program
       01 STUDENT-COUNTER         PIC 99.                        // Defines variable to count number of students processed
       01 TOTAL-GRADES             PIC 999.                       // Defines variable to store total grades for each student
       01 GRADE-AVERAGE            PIC 999V99.                    // Defines variable to calculate and store grade average for each student

       PROCEDURE DIVISION.                                       // Contains the actual program logic
       MAIN-LOGIC.                                               // Labels the main section of code
           OPEN INPUT INPUT-FILE                                 // Opens input file for reading
           OPEN OUTPUT OUTPUT-FILE                               // Opens output file for writing
           PERFORM READ-AND-CALCULATE UNTIL EOF                   // Loops until the end of file is reached
           CLOSE INPUT-FILE                                      // Closes input file
           CLOSE OUTPUT-FILE                                     // Closes output file
           STOP RUN.                                              // Stops the program execution

       READ-AND-CALCULATE.                                       // Labels the read and calculate section
           READ INPUT-FILE INTO INPUT-RECORD                      // Reads record from input file into input record structure
           PERFORM CALCULATE-GRADE-AVERAGE                        // Performs calculations using input record
           WRITE OUTPUT-RECORD FROM OUTPUT-RECORD                 // Writes record to output file from output record structure

       CALCULATE-GRADE-AVERAGE.                                  // Labels the grade average calculation section
           COMPUTE TOTAL-GRADES = INPUT-GRADE-1 + INPUT-GRADE-2 + INPUT-GRADE-3.    // Adds all three grades for a student
           COMPUTE GRADE-AVERAGE = TOTAL-GRADES / 3.              // Calculates average by dividing total grades by 3
           IF GRADE-AVERAGE >= 70                                 // Checks if average is equal to or greater than 70
               MOVE 'P' TO OUTPUT-RESULT                         // Sets result to 'P' for pass
           ELSE                                                   // If average is less than 70
               MOVE 'F' TO OUTPUT-RESULT                         // Sets result to 'F' for fail
           END-IF.                                                // Ends the condition
           MOVE INPUT-NAME TO OUTPUT-NAME                         // Copies name from input record to output record
           MOVE GRADE-AVERAGE TO OUTPUT-GRADE-AVG                 // Copies grade average from calculation to output record