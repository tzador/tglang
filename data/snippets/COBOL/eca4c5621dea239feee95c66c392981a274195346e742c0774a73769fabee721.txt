IDENTIFICATION DIVISION.      * The IDENTIFICATION DIVISION is where we provide a name and brief description for our program. It is always the first division in a COBOL program.
      PROGRAM-ID. SAMPLE.
      ENVIRONMENT DIVISION.         * The ENVIRONMENT DIVISION is where we define the hardware and operating system environment in which our program will run.
      CONFIGURATION SECTION.
      SOURCE-COMPUTER. IBM-MAINFRAME.       * Specifies the computer system on which the program will be executed.
      OBJECT-COMPUTER. IBM-MAINFRAME.       * Specifies the target computer system on which the executable program will run.
      INPUT-OUTPUT SECTION.         * The INPUT-OUTPUT SECTION is where we define the files that our program will read from and write to.
      FILE-CONTROL.
      SELECT INPUT-FILE ASSIGN TO 'INPUT.TXT'.     * Defines the input file and assigns it to a file name.
      SELECT OUTPUT-FILE ASSIGN TO 'OUTPUT.TXT'.   * Defines the output file and assigns it to a file name.
      DATA DIVISION.         * The DATA DIVISION is where we define the data structures and variables used in our program.
      FILE SECTION.
      FD INPUT-FILE.
      01 INPUT-RECORD.
         05 INPUT-NAME         PIC X(30).      * Defines a variable named INPUT-NAME with a length of 30 characters.
         05 INPUT-AGE          PIC 99.         * Defines a variable named INPUT-AGE with a length of 2 digits.
         05 INPUT-SALARY       PIC 9(6).       * Defines a variable named INPUT-SALARY with a length of 6 digits.
      FD OUTPUT-FILE.
      01 OUTPUT-RECORD.
         05 OUTPUT-NAME        PIC X(30).
         05 OUTPUT-TAX-SALARY  PIC 9(6).
         05 OUTPUT-TAX-FREE    PIC 9(6).
      WORKING-STORAGE SECTION.       * The WORKING-STORAGE SECTION is used to define temporary variables and constants.
      01 TAX-RATE               PIC 9(2)V9(2) VALUE 0.15.     * Defines a constant named TAX-RATE with a decimal point and a value of 0.15.
      PROCEDURE DIVISION.       * The PROCEDURE DIVISION is where we write the logic for our program.
      0000-START.
          OPEN INPUT INPUT-FILE.        * Opens the input file for reading.
          OPEN OUTPUT OUTPUT-FILE.      * Opens the output file for writing.
          READ INPUT-FILE INTO INPUT-RECORD.   * Reads the first record from the input file.
      0001-PROCESS.
          IF INPUT-AGE < 18              * Checks if the person's age is less than 18.
              MOVE INPUT-SALARY TO OUTPUT-TAX-FREE.       * If so, the entire salary is tax-free.
          ELSE
              COMPUTE OUTPUT-TAX-SALARY = INPUT-SALARY * TAX-RATE.       * Computes the tax to be paid on the salary.
              COMPUTE OUTPUT-TAX-FREE = INPUT-SALARY - OUTPUT-TAX-SALARY.       * Computes the salary after deducting the tax.
          END-IF.
          MOVE INPUT-NAME TO OUTPUT-NAME.       * Moves the person's name to the output record.
          WRITE OUTPUT-RECORD.                  * Writes the output record to the output file.
          READ INPUT-FILE INTO INPUT-RECORD.    * Reads the next record from the input file.
          AT END                                 * Checks if the end of the file has been reached.
              GO TO 9999-END.                   * If so, goes to the end of the program.
          GO TO 0001-PROCESS.                   * If not, goes back to process the next record.
      9999-END.
          CLOSE INPUT-FILE.                     * Closes the input file.
          CLOSE OUTPUT-FILE.                    * Closes the output file.
          STOP RUN.                             * Stops the program execution.