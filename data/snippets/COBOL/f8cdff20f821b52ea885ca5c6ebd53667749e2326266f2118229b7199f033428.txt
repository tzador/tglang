IDENTIFICATION DIVISION.                      * This is the identification division of the COBOL program.
       PROGRAM-ID. SAMPLE.                            * The name of the program is SAMPLE.
       AUTHOR. JOHN DOE.                              * The author of the program is John Doe.
       DATE-WRITTEN. AUGUST 2021.                     * The date the program was written.
       DATE-COMPILED. AUGUST 2021.                    * The date the program was last compiled.

       ENVIRONMENT DIVISION.                          * This is the environment division of the program.
       INPUT-OUTPUT SECTION.                          * This section specifies the input and output files used by the program.
       FILE-CONTROL.                                  * Specifies the layout of the input and output files.
           SELECT INPUT-FILE ASSIGN TO 'INPUT.TXT'.   * Selects the input file and assigns it to the file 'INPUT.TXT'.
           SELECT OUTPUT-FILE ASSIGN TO 'OUTPUT.TXT'. * Selects the output file and assigns it to the file 'OUTPUT.TXT'.

       DATA DIVISION.                                 * This is the data division of the program.
       FILE SECTION.                                  * This section contains the description of the input and output files.
       FD INPUT-FILE.                                 * File descriptor for the input file.
       01 INPUT-RECORD.                               * Record layout for the input file.
           05 ID-NUMBER PIC X(10).                     * Field to store the ID number.
           05 NAME PIC X(20).                         * Field to store the name.
       FD OUTPUT-FILE.                                * File descriptor for the output file.
       01 OUTPUT-RECORD.                              * Record layout for the output file.
           05 ID-NUMBER PIC X(10).                     * Field to store the ID number.
           05 NAME PIC X(20).                         * Field to store the name.
           05 GRADE PIC 9(3).                         * Field to store the calculated grade.

       WORKING-STORAGE SECTION.                       * Contains variables used by the program.
       01 GRADE-TABLE.                                * Table used to calculate the grades.
           05 GRADE-KEY PIC 9(3) VALUE 80.            * Key value for A grade.
           05 GRADE-VALUE PIC X VALUE 'A'.            * Grade value for A.
           05 GRADE-KEY PIC 9(3) VALUE 70.            * Key value for B grade.
           05 GRADE-VALUE PIC X VALUE 'B'.            * Grade value for B.
           05 GRADE-KEY PIC 9(3) VALUE 60.            * Key value for C grade.
           05 GRADE-VALUE PIC X VALUE 'C'.            * Grade value for C.
           05 GRADE-KEY PIC 9(3) VALUE 50.            * Key value for D grade.
           05 GRADE-VALUE PIC X VALUE 'D'.            * Grade value for D.

       PROCEDURE DIVISION.                            * This is the main logic of the program.
       OPEN INPUT INPUT-FILE                         * Opens the input file for reading.
       OPEN OUTPUT OUTPUT-FILE                       * Opens the output file for writing.

       PERFORM UNTIL EOF=1                            * Loop until the end of file is reached.
        READ INPUT-FILE INTO INPUT-RECORD            * Read a record from the input file.
        IF ID-NUMBER IS NUMERIC                      * If the ID number is numeric.
            MULTIPLY ID-NUMBER BY 2                  * Multiply it by 2.
            COMPUTE GRADE = FUNCTION GRADE-VALUE(GRADE-TABLE, ID-NUMBER) * Calculate the grade based on the ID number.
            MOVE ID-NUMBER TO OUTPUT-RECORD.ID-NUMBER * Move the ID number to the output record.
            MOVE NAME TO OUTPUT-RECORD.NAME           * Move the name to the output record.
            MOVE GRADE TO OUTPUT-RECORD.GRADE         * Move the calculated grade to the output record.
            WRITE OUTPUT-RECORD                      * Write the output record to the output file.
            IF GRADE < 60                             * If the calculated grade is less than 60.
                ADD 1 TO FAIL-COUNT                   * Add 1 to the fail count.
            END-IF
        END-IF
      END-PERFORM.

       CLOSE INPUT-FILE                               * Close the input file.
       CLOSE OUTPUT-FILE                              * Close the output file.
       STOP                                           * Stop the program.

       GRADE-VALUE SECTION.                           * This section contains a function to calculate the grade.
       05 GCOUNT PIC S9(4) COMP VALUE 8.              * Number of entries in grade table.
       05 GINDEX PIC S9(4) COMP VALUE 1.              * Index for searching in table.
       PROCEDURE DIVISION USING TAB KEY.              * Function to find grade from table.
       MOVE KEY TO GRADE-KEY                          * Set key for search.
       SEARCH-TAB KEY IS GRADE-KEY                     * Find corresponding value.
        WHEN GRADE-KEY = GRADE-TABLE(GINDEX)           * If value is found.
            MOVE GRADE-TABLE(GINDEX+1) TO GRADE-VALUE * Move grade value to output.
       END-SEARCH.                                    

       END PROGRAM SAMPLE.                             * End of program.