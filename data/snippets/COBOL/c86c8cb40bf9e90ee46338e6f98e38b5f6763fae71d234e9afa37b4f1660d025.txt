IDENTIFICATION DIVISION.   * Annotation for beginning of program
       PROGRAM-ID. EXAMPLE.       * Name of program
       AUTHOR. JOHN SMITH.        * Author of program 
       ENVIRONMENT DIVISION.      * Describes the environment 
       INPUT-OUTPUT SECTION.      * Specifies input/output 
       FILE-CONTROL.              * Specifies input/output files 
           SELECT INPUT-FILE     * Input file
               ASSIGN TO 'FILE1.TXT'. 
       
           SELECT OUTPUT-FILE    * Output file 
               ASSIGN TO 'RESULTS.TXT'. 
       
       DATA DIVISION.             * Divides data in program 
       FILE SECTION.              * Describes file structure 
       
       FD INPUT-FILE.             * File description for input file 
       01 INPUT-RECORD.           * Data structure of input file 
           05  IDNUM             PIC X(10).   * Field 1, 10 characters 
           05  NAME              PIC X(20).   * Field 2, 20 characters 
       
       FD OUTPUT-FILE.            * File description for output file 
       01 OUTPUT-RECORD.          * Data structure of output file 
           05  IDNUM             PIC X(10).   * Field 1, 10 characters 
           05  NAME              PIC X(20).   * Field 2, 20 characters 
           05  GPA               PIC 9(3)V99.  * Field 3, 5 total digits with 2 decimal places 
           05  GRADE             PIC X(2).     * Field 4, 2 characters 
       
       WORKING-STORAGE SECTION.   * Defines variables and constants for use in program 
       01  STUDENT-COUNT    PIC 99.  * Variable to track number of students processed 
       01  TOTAL-GPA        PIC 9(3)V99. * Variable to calculate total GPA of all students 
       01  MAXIMUM-GPA      PIC 9(3)V99. * Variable to store highest GPA 
       01  MINIMUM-GPA      PIC 9(3)V99. * Variable to store lowest GPA 
       
       PROCEDURE DIVISION.              * Contains actual program logic 
       MAIN-LOOP.                       * Main loop to read and process input file 
           OPEN INPUT INPUT-FILE 
           OPEN OUTPUT OUTPUT-FILE 
       
           PERFORM READ-INPUT          * Loop until end of input file is reached 
           UNTIL INPUT-FILE-STATUS = 'END-OF-FILE' 
       
           PERFORM PROCESS-STUDENT    * Process data for each student 
           PERFORM WRITE-OUTPUT       * Write data to output file 
       
           PERFORM READ-INPUT         * Read and process next student 
       
           CLOSE INPUT-FILE 
           CLOSE OUTPUT-FILE 
       
           DISPLAY 'Total number of students processed: ' STUDENT-COUNT 
           DISPLAY 'Average GPA: ' TOTAL-GPA / STUDENT-COUNT 
           DISPLAY 'Highest GPA: ' MAXIMUM-GPA 
           DISPLAY 'Lowest GPA: ' MINIMUM-GPA 
       
       READ-INPUT.                    * Reads record from input file 
           READ INPUT-FILE 
               AT END 
                   MOVE 'END-OF-FILE' TO INPUT-FILE-STATUS. 
       
       PROCESS-STUDENT.              * Process input data for student 
           ADD 1 TO STUDENT-COUNT 
           COMPUTE TOTAL-GPA = TOTAL-GPA + GPA 
           IF GPA > MAXIMUM-GPA 
               MOVE GPA TO MAXIMUM-GPA 
           END-IF 
           IF GPA < MINIMUM-GPA 
               MOVE GPA TO MINIMUM-GPA 
           END-IF 
       
       WRITE-OUTPUT.                * Write processed data to output file 
           WRITE OUTPUT-RECORD. 
       
       END-PROGRAM.                * Annotation to end program