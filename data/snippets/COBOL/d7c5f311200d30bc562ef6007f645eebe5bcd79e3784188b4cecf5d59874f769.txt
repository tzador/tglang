IDENTIFICATION DIVISION.                           //Identifies the division as Identification
PROGRAM-ID. HELLO-WORLD.                            //Identifies the program name as "Hello World"
AUTHOR. YOUR-NAME.                                  //Identifies the author of the program
DATE-WRITTEN. 01/01/2021.                           //Identifies the date the program was written
DATE-COMPILED. 01/05/2021.                          //Identifies the date the program was last compiled
ENVIRONMENT DIVISION.                               //Starts the Environment division
INPUT-OUTPUT SECTION.                               //Starts the Input-Output section
FILE-CONTROL.                                       //Starts the File-Control section
SELECT IN-FILE ASSIGN TO "INPUT.TXT".                //Selects the input file and assigns it to the "INPUT.TXT" file
SELECT OUT-FILE ASSIGN TO "OUTPUT.TXT".              //Selects the output file and assigns it to the "OUTPUT.TXT" file
DATA DIVISION.                                      //Starts the Data division
FILE SECTION.                                       //Starts the File section
FD IN-FILE.                                         //Declares the input file as FD (File Description)
01 IN-REC.                                          //Declares the input record as 01 level (Highest level)
   05 IN-NAME       PIC X(10).                       //Declares the input field IN-NAME as Alphanumeric with length 10
   05 IN-AGE        PIC 9(02).                       //Declares the input field IN-AGE as Numeric with length 2
   05 IN-SALARY     PIC 9(06)V99.                    //Declares the input field IN-SALARY as Numeric with 2 decimal places
FD OUT-FILE.                                        //Declares the output file as FD (File Description)
01 OUT-REC.                                         //Declares the output record as 01 level (Highest level)
   05 OUT-NAME      PIC X(10).                       //Declares the output field OUT-NAME as Alphanumeric with length 10
   05 OUT-AGE       PIC 9(02).                       //Declares the output field OUT-AGE as Numeric with length 2
   05 OUT-SALARY    PIC 9(06)V99.                    //Declares the output field OUT-SALARY as Numeric with 2 decimal places
WORKING-STORAGE SECTION.                            //Starts the Working-Storage section
01 WS-NAME         PIC X(10) VALUE "JOHN".           //Declares and initializes the working storage variable WS-NAME
01 WS-AGE          PIC 9(02) VALUE 25.               //Declares and initializes the working storage variable WS-AGE
01 WS-SALARY       PIC 9(06)V99.                     //Declares the working storage variable WS-SALARY
                                                    //Note: It is not initialized and will be calculated later in the program
PROCEDURE DIVISION.                                 //Starts the Procedure division
MAIN-ROUTINE.                                       //Starts the main routine
    OPEN INPUT IN-FILE.                             //Opens the input file for reading
    OPEN OUTPUT OUT-FILE.                           //Opens the output file for writing
    PERFORM READ-FILE UNTIL END-OF-FILE.            //Performs the read loop until the end-of-file is reached
    CLOSE IN-FILE.                                  //Closes the input file
    CLOSE OUT-FILE.                                 //Closes the output file
    STOP RUN.                                       //Stops the program execution
READ-FILE.                                          //Starts the read loop
    READ IN-FILE INTO IN-REC.                       //Reads one record from the input file into the input record
    IF NOT END-OF-FILE                              //Checks if the end-of-file is reached
        PERFORM CALCULATE-SALARY.                   //If not, performs the calculate salary subroutine
        MOVE OUT-NAME TO WS-NAME.                   //Moves the output name to the working storage variable WS-NAME
        MOVE OUT-AGE TO WS-AGE.                     //Moves the output age to the working storage variable WS-AGE
        WRITE OUT-REC FROM WS-NAME.                 //Writes the output record using the working storage variables
    ELSE                                             //If end-of-file is reached, go to the end of the read loop
        GO TO END-READ.
    END-IF.
    GO TO READ-FILE.                                //Goes back to the beginning of the read loop
END-READ.                                           //Ends the read loop
CALCULATE-SALARY.                                   //Starts the calculate salary subroutine
    COMPUTE WS-SALARY = IN-AGE * 1000.               //Calculates the salary by multiplying age with 1000
    MOVE WS-SALARY TO OUT-SALARY.                    //Moves the calculated salary to the output salary
    DISPLAY "Calculated salary for " IN-NAME " is " OUT-SALARY.    //Displays a message showing the calculated salary