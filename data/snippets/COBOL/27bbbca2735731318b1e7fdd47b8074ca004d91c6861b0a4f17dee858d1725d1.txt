IDENTIFICATION DIVISION.                  * This division contains information about the program.
       PROGRAM-ID. MY-PROGRAM.                   * The name of the program.
       AUTHOR. JOHN DOE.                         * The name of the author.

       DATA DIVISION.                            * This division contains the data used in the program.
       WORKING-STORAGE SECTION.                  * This section contains variables declared in the program.
       01 student-name PIC X(20).                 * Variable that will hold the name of the student.
       01 student-age PIC 99.                     * Variable that will hold the age of the student.
       01 student-grade PIC 9(2).                 * Variable that will hold the grade of the student.
       01 student-id PIC X(10).                   * Variable that will hold the student ID.

       PROCEDURE DIVISION.                       * This division contains the actual code of the program.
       MAIN-PROCEDURE.                           * This is the main procedure that will run when the program is executed.

       DISPLAY "Enter student name:".            * Display prompt for user to input student name.
       ACCEPT student-name.                      * Accept user input and store in student-name variable.

       DISPLAY "Enter student age:".             * Display prompt for user to input student age.
       ACCEPT student-age.                       * Accept user input and store in student-age variable.

       IF student-age IS NOT NUMERIC              * Check if the inputted age is not a number.
           DISPLAY "Invalid age input.".         * Display error message.
           STOP.                                 * Stop the program.
       END-IF.

       IF student-age < 18                        * Check if the student's age is below 18.
           DISPLAY "Student below 18 not allowed.". * Display error message.
           STOP.                                 * Stop the program.
       END-IF.

       DISPLAY "Enter student grade:".            * Display prompt for user to input student grade.
       ACCEPT student-grade.                     * Accept user input and store in student-grade variable.

       IF student-grade IS NOT NUMERIC            * Check if the inputted grade is not a number.
           DISPLAY "Invalid grade input.".       * Display error message.
           STOP.                                 * Stop the program.
       END-IF.

       IF student-grade < 1 OR student-grade > 5   * Check if the student's grade is not within the range of 1-5.
           DISPLAY "Invalid grade input.".       * Display error message.
           STOP.                                 * Stop the program.
       END-IF.

       COMPUTE student-id = CONCATENATE student-age student-grade. * Create student ID by concatenating age and grade.
       DISPLAY "Student ID: " student-id.         * Display the generated student ID.

       STOP.                                      * Stop the program.
       END PROGRAM MY-PROGRAM.                    * End of the program.