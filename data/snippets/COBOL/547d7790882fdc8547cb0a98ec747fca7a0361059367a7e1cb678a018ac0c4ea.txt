IDENTIFICATION DIVISION.                       // start of IDENTIFICATION DIVISION
       PROGRAM-ID. MYPROGRAM.                          // programs unique identifier
       AUTHOR ID "John Doe".                           // name of the programmer
       DATE-WRITTEN. "2021-07-07".                     // date the program was written
       DATE-COMPILED.                                 
       DATA DIVISION.
       WORKING-STORAGE SECTION.                        // start of WORKING-STORAGE SECTION
       01 INPUT PARAMETERS.                            // defines a group level record for input parameters
          05 INPUT-NAME          PIC X(20).            // defines an alphabetic field of length 20 for name
          05 INPUT-AGE           PIC 99.              // defines a numeric field of length 2 for age
          05 INPUT-GENDER        PIC X.               // defines an alphabetic field of length 1 for gender
          05 INPUT-SALARY        PIC 99V99.           // defines a numeric field of length 4 (2 digits before decimal, 2 digits after)
       01 OUTPUT PARAMETERS.                           // defines a group level record for output parameters
          05 OUTPUT-MESSAGE     PIC X(50).            // defines an alphabetic field of length 50 for output message
       PROCEDURE DIVISION.
          PERFORM VALIDATE-INPUT PARAGRAPH             // start of PROCEDURE DIVISION and invokes a paragraph VALIDATE-INPUT
          IF INPUT-AGE < 18                             // checks if input age is less than 18
             COMPUTE OUTPUT-MESSAGE = "You are too young to work."  // assigns output message if condition is met
          IF INPUT-AGE > 60                             // checks if input age is greater than 60
             COMPUTE OUTPUT-MESSAGE = "You are too old to work."   // assigns output message if condition is met
          IF INPUT-SALARY < 1000                         // checks if input salary is less than 1000
             COMPUTE OUTPUT-MESSAGE = "Your salary is too low."   // assigns output message if condition is met
       VALIDATE-INPUT.                               // PARAGRAPH used for input validation
          IF INPUT-GENDER NOT = "M"                   // checks if input gender is not male
             OR INPUT-GENDER NOT = "F"                // OR not female
             COMPUTE OUTPUT-MESSAGE = "Invalid gender." // assigns output message if condition is met