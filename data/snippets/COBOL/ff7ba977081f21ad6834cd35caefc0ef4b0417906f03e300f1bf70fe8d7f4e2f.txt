IDENTIFICATION DIVISION.                            // Identifies division of the program
       PROGRAM-ID. MY-COBOL-PROGRAM.                       // Program identifier
       DATA DIVISION.                                      // Defines data section
       FILE SECTION.                                       // Defines files used in program
       FD SALES-FILE                                        // File descriptor for sales file
          LABEL RECORDS ARE STANDARD                       // Labels will be in standard format
             VALUE OF FILE-ID IS 'SALES.DAT'.               // Assigns file name
       01 SALES-RECORD.                                     // Record description for sales file
          02 CUSTOMER-ID       PIC X(5).                    // Customer ID field
          02 PRODUCT-ID        PIC X(5).                    // Product ID field
          02 SALE-AMOUNT       PIC S9(5)V99.                // Sale amount field
          02 SALE-DATE. 
             05 SALE-YEAR      PIC 9(4).           
             05 SALE-MONTH     PIC 9(2).           
             05 SALE-DAY       PIC 9(2).
         
       WORKING-STORAGE SECTION.                             // Defines working storage section
       01 TOTAL-SALES-COUNT     PIC S9(5) COMP VALUE 0.     // Total sales count variable
       01 MONTHLY-SALES-COUNT   PIC X(2) OCCURS 12 TIMES.   // Array of monthly sales counts
       01 HIGHEST-SALE-AMOUNT   PIC S9(5)V99 VALUE 0.       // Highest sale amount variable
       01 LOWEST-SALE-AMOUNT    PIC S9(5)V99 VALUE 999.99.  // Lowest sale amount variable
       
       PROCEDURE DIVISION.                                  // Starts procedure division
       000-MAIN-ROUTINE.                                    // Main routine label
           OPEN INPUT SALES-FILE.                           // Opens sales file for reading
           
       100-READ-LOOP.                                       // Read loop label
           READ SALES-FILE                                  // Read next line from sales file
              AT END                                         // At end of file condition
              GO TO 200-END-OF-FILE.                        // Go to end of file routine
           ADD 1 TO TOTAL-SALES-COUNT.                       // Increment total sales count
           IF SALE-YEAR = 2019                              // If sale is in year 2019
              ADD 1 TO MONTHLY-SALES-COUNT(SALE-MONTH).     // Increment monthly sales count
           IF SALE-AMOUNT > HIGHEST-SALE-AMOUNT              // If sale amount is higher than current highest
              MOVE SALE-AMOUNT TO HIGHEST-SALE-AMOUNT.      // Set new highest sale amount
           IF SALE-AMOUNT < LOWEST-SALE-AMOUNT               // If sale amount is lower than current lowest
              MOVE SALE-AMOUNT TO LOWEST-SALE-AMOUNT.       // Set new lowest sale amount
           GO TO 100-READ-LOOP.                             // Continue read loop
       
       200-END-OF-FILE.                                     // End of file routine label
           CLOSE SALES-FILE.                                // Close sales file
       300-DISPLAY-RESULTS.                                 // Display results label
           DISPLAY 'Total sales count: ' TOTAL-SALES-COUNT.  // Display total sales count
           PERFORM VARYING X FROM 1 BY 1                    // Loop through monthly sales counts
              UNTIL X > 12.                                 // Until all months have been processed
                 DISPLAY 'Sales for month ' X ': '          // Display monthly sales count
                    MONTHLY-SALES-COUNT(X).                 
           DISPLAY 'Highest sale amount: ' HIGHEST-SALE-AMOUNT. // Display highest sale amount
           DISPLAY 'Lowest sale amount: ' LOWEST-SALE-AMOUNT.   // Display lowest sale amount
           STOP RUN.