IDENTIFICATION DIVISION.                        // `IDENTIFICATION DIVISION` signifies the start of the program
PROGRAM-ID. COMPLEX-SNIPPET.                    // `PROGRAM-ID` declares the name of the program
*
AUTHOR. John Doe.                               // `AUTHOR` declares the name of the author
*
DATA DIVISION.                                  // `DATA DIVISION` is used to declare data elements
WORKING-STORAGE SECTION.                        // `WORKING-STORAGE SECTION` is used for declaring working storage variables
*
01  IN-STRING-1     PIC X(50).                   // `01` signifies the level number, `IN-STRING-1` is the name of the variable, `PIC X(50)` defines it as a string with a length of 50 characters
01  IN-STRING-2     PIC X(50).
01  OUT-STRING      PIC X(50).                   // `OUT-STRING` is the variable where the result will be stored
*
PROCEDURE DIVISION.                             // `PROCEDURE DIVISION` is used to write the actual code
COMPUTE LENGTH-1 = FUNCTION LENGTH(IN-STRING-1) // `COMPUTE` is used for arithmetic operations, `FUNCTION` is used to call built-in functions, `LENGTH` returns the length of the string
COMPUTE LENGTH-2 = FUNCTION LENGTH(IN-STRING-2)
IF LENGTH-1 < LENGTH-2                          // `IF` statement checks if the length of first string is less than the second string
    MOVE IN-STRING-2 TO OUT-STRING               // `MOVE` copies the value of one variable to another
ELSE                                            // `ELSE` statement used when if condition is not met
    MOVE IN-STRING-1 TO OUT-STRING
END-IF.                                         // `END-IF` signifies the end of the `IF` statement
*
STOP RUN.                                       // `STOP RUN` stops the execution of the program