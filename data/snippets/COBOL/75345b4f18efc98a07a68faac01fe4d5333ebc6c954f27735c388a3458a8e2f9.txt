IDENTIFICATION DIVISION.                 *Start of program
       PROGRAM-ID.  MYPROGRAM.                   *Program name
       ENVIRONMENT DIVISION.                     *Describes the environment     
       CONFIGURATION SECTION.                    *Adjusts compiler settings
       SOURCE-COMPUTER. COMPUTER1.               *Defines computer type
       OBJECT-COMPUTER. COMPUTER2.               *Defines object computer
       INPUT-OUTPUT SECTION.                     *Declares files
       FILE-CONTROL.                             *Defines file name
           SELECT INPUT-FILE ASSIGN TO DISK1.    *Selects input file from disk1
           SELECT OUTPUT-FILE ASSIGN TO DISK2.   *Selects output file from disk2
       DATA DIVISION.                            *Contains declarations and definitions
       FILE SECTION.                             *Declare files for data
       FD INPUT-FILE.                            *Declares input file
           01 INPUT-RECORD.                      *Defines input record
               05 INPUT-NAME     PIC X(20).      *Defines input name
               05 INPUT-AGE      PIC 99.         *Defines input age
               05 INPUT-SALARY   PIC 9(8)V99.    *Defines input salary
       FD OUTPUT-FILE.                           *Declares output file
           01 OUTPUT-RECORD.                     *Defines output record
               05 OUTPUT-NAME    PIC X(20).      *Defines output name
               05 OUTPUT-AGE     PIC 99.         *Defines output age
               05 OUTPUT-SALARY  PIC 9(8)V99.    *Defines output salary
       WORKING-STORAGE SECTION.                  *Contains temporary variables
           01 TEMP-STORAGE    PIC X(10).          *Defines temporary storage
           01 TOTAL-SALARY    PIC 9(8)V99.        *Defines total salary
       PROCEDURE DIVISION.                       *Contains actual code
       OPEN INPUT INPUT-FILE.                    *Opens input file
       OPEN OUTPUT OUTPUT-FILE.                  *Opens output file
       PERFORM UNTIL EOF(INPUT-FILE)             *Loops until end of input file
           READ INPUT-FILE                       *Reads input record
           AT END MOVE 'YES' TO EOF(INPUT-FILE)  *Sets end of file flag
           END-READ.
           IF OUTPUT-AGE > 60                    *Checks if age is above 60
           ADD INPUT-SALARY TO TOTAL-SALARY      *Adds input salary to total salary
           MOVE INPUT-NAME TO OUTPUT-NAME        *Moves input name to output name
           MOVE INPUT-AGE TO OUTPUT-AGE          *Moves input age to output age
           MOVE INPUT-SALARY TO OUTPUT-SALARY    *Moves input salary to output salary
           WRITE OUTPUT-RECORD                   *Writes output record
           END-IF.
       END-PERFORM.
       CLOSE INPUT-FILE.                         *Closes input file
       CLOSE OUTPUT-FILE.                        *Closes output file
       STOP RUN.                                 *End of program