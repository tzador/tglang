IDENTIFICATION DIVISION.                               * This is the identification division, where the program name is specified
PROGRAM-ID. MYCODE.                                     * This is the program name
DATA DIVISION.                                          * This is the data division, where variables and file descriptions are declared

01 STUDENT-RECORD.                                      * Declares record for storing student information
   05 STUDENT-NAME PIC X(20).                            * Subfield for student name, 20 characters long
   05 STUDENT-ID PIC 9(9).                               * Subfield for student ID, 9 digits long
   05 COURSE-CODE PIC X(5).                              * Subfield for course code, 5 characters long
   05 GRADE PIC X.                                       * Subfield for student grade, 1 character long

01 COURSE-TABLE.                                        * Declares table for storing course information
   05 COURSE-CODE-ENTRY OCCURS 10 TIMES.                 * Table with 10 entries for courses
      10 COURSE-NUM PIC 99.                              * Subfield for course number, 2 digits long
      10 COURSE-NAME PIC X(20).                          * Subfield for course name, 20 characters long
      10 COURSE-CREDITS PIC 9(2).                        * Subfield for course credits, 2 digits long

01 ERROR-MESSAGE.                                       * Declares error message for displaying errors
   05 ERROR-NUM PIC 9(2).                                * Subfield for error number, 2 digits long
   05 ERROR-TEXT PIC X(50).                              * Subfield for error text, 50 characters long

PROCEDURE DIVISION.                                     
BEGIN.                                                   * This is the beginning of the main program
   PERFORM INITIALIZE-STUDENT-RECORD.                    * Calls subroutine to initialize the student record
   PERFORM INITIALIZE-COURSE-TABLE.                      * Calls subroutine to initialize the course table
   PERFORM GET-STUDENT-INFO.                             * Calls subroutine to get student information input by user
   PERFORM SEARCH-COURSE-TABLE.                          * Calls subroutine to search for course in course table
   PERFORM CALCULATE-GRADE.                              * Calls subroutine to calculate student grade
   PERFORM DISPLAY-GRADE.                                * Calls subroutine to display student grade
   PERFORM CHECK-ERROR.                                  * Calls subroutine to check for errors
   PERFORM DISPLAY-ERROR-MESSAGE.                        * Calls subroutine to display error message
   STOP.                                                 * Ends the main program

INITIALIZE-STUDENT-RECORD.                               * Subroutine for initializing the student record
   MOVE SPACES TO STUDENT-RECORD.                        * Sets all fields in student record to spaces
   EXIT.

INITIALIZE-COURSE-TABLE.                                 * Subroutine for initializing the course table
   PERFORM VARYING COURSE-NUM FROM 1 BY 1                 * Loops through the course table entries
      UNTIL COURSE-NUM > 10                              
      MOVE SPACES TO COURSE-TABLE(COURSE-NUM).           * Sets all fields in course table entry to spaces
   END-PERFORM.
   EXIT.

GET-STUDENT-INFO.                                        * Subroutine for getting student information input by user
   DISPLAY "Enter student name: ".                       * Prompts user for student name
   ACCEPT STUDENT-NAME.                                  * Accepts input and stores in student name subfield
   DISPLAY "Enter student ID: ".                         * Prompts user for student ID
   ACCEPT STUDENT-ID.                                    * Accepts input and stores in student ID subfield
   DISPLAY "Enter course code: ".                        * Prompts user for course code
   ACCEPT COURSE-CODE.                                   * Accepts input and stores in course code subfield
   EXIT.

SEARCH-COURSE-TABLE.                                     * Subroutine for searching for course in course table
   PERFORM VARYING COURSE-NUM FROM 1 BY 1                 * Loops through the course table entries
      UNTIL COURSE-NUM > 10                              
      IF COURSE-TABLE(COURSE-NUM).COURSE-CODE = COURSE-CODE * Checks if the course code entered by user matches a course in the table
         MOVE COURSE-TABLE(COURSE-NUM) TO COURSE-CODE-ENTRY. * If match is found, moves the course information to separate entry
         EXIT.                                           
      END-IF.                                            
   END-PERFORM.
   EXIT.

CALCULATE-GRADE.                                         * Subroutine for calculating student grade
   IF COURSE-CODE-ENTRY.COURSE-NAME = "MATHEMATICS"       * Checks if the course is mathematics
      ADD 20 TO GRADE.                                   * If yes, adds 20 to the grade subfield
   END-IF.
   IF COURSE-CODE-ENTRY.COURSE-NAME = "SCIENCE"           * Checks if the course is science
      ADD 10 TO GRADE.                                   * If yes, adds 10 to the grade subfield
   END-IF.
   IF COURSE-CODE-ENTRY.COURSE-NAME = "HISTORY"           * Checks if the course is history
      ADD 15 TO GRADE.                                   * If yes, adds 15 to the grade subfield
   END-IF.
   EXIT.

DISPLAY-GRADE.                                           * Subroutine for displaying student grade
   DISPLAY "Student grade: " GRADE.                      * Displays student grade
   EXIT.

CHECK-ERROR.                                             * Subroutine for checking for errors
   IF STUDENT-RECORD.STUDENT-NAME = SPACES                * Checks if student name is still set to spaces
      MOVE "01" TO ERROR-NUM.                            * If yes, sets error number value to "01"
      MOVE "Invalid student name" TO ERROR-TEXT.         * Sets error text value to "Invalid student name"
   END-IF.
   IF STUDENT-RECORD.STUDENT-ID = SPACES                  * Checks if student ID is still set to spaces
      MOVE "02" TO ERROR-NUM.                            * If yes, sets error number value to "02"
      MOVE "Invalid student ID" TO ERROR-TEXT.           * Sets error text value to "Invalid student ID"
   END-IF.
   IF COURSE-CODE-ENTRY.COURSE-CODE = SPACES              * Checks if course code is still set to spaces
      MOVE "03" TO ERROR-NUM.                            * If yes, sets error number value to "03"
      MOVE "Invalid course code" TO ERROR-TEXT.          * Sets error text value to "Invalid course code"
   END-IF.
   EXIT.

DISPLAY-ERROR-MESSAGE.                                   * Subroutine for displaying error message
   IF ERROR-NUM = "01"                                   * Checks if error number is "01"
      DISPLAY ERROR-TEXT.                                * If yes, displays error text
   END-IF.
   IF ERROR-NUM = "02"                                   * Checks if error number is "02"
      DISPLAY ERROR-TEXT.                                * If yes, displays error text
   END-IF.
   IF ERROR-NUM = "03"                                   * Checks if error number is "03"
      DISPLAY ERROR-TEXT.                                * If yes, displays error text
   END-IF.
   EXIT.