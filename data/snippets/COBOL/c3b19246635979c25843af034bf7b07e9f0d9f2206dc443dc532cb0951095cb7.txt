IDENTIFICATION DIVISION.
    PROGRAM-ID. PRIME-NUMBERS.
    DATA DIVISION.
    WORKING-STORAGE SECTION.
    01 FLAG       PIC 9(1) VALUE 0.     *Flag to check if number is prime
    01 NUMBER     PIC 9(4).             *Input number
    01 COUNT      PIC 9(4) VALUE 2.     *Counter for loop
    01 REMAINDER  PIC 9(4).             *Remainder when dividing input number
    01 PRIMES     PIC 9(4) OCCURS 10.   *Array to store prime numbers
    01 PRIME-COUNT                        *Counter for prime numbers found
       PIC 9(4) VALUE 0.

    PROCEDURE DIVISION.
    MAIN-LOGIC.
        DISPLAY "Enter a number: ".
        ACCEPT NUMBER.                  *Get input number from user
        PERFORM INITIALIZE-PRIMES.      *Initialize array of prime numbers
        PERFORM CHECK-PRIME UNTIL        *Loop until all numbers up to input number are checked
            COUNT > NUMBER
        PERFORM DISPLAY-PRIMES.          *Show list of prime numbers found
        STOP RUN.

    INITIALIZE-PRIMES.
        SET PRIMES(1) TO 2.              *Initialize first prime number in array
        SET FLAG TO 0.                   *Reset prime flag
        PERFORM CHECK-PRIME.             *Check if current number is prime
        PERFORM VARYING COUNT FROM 3 BY 2 *Loop through odd numbers starting from 3
            UNTIL COUNT > NUMBER
            PERFORM CHECK-PRIME.

    CHECK-PRIME.
        SET FLAG TO 0.                   *Reset prime flag
        DIVIDE COUNT BY 2 GIVING 
            REMAINDER.                   *Check from 2 up to half of number if it divides evenly
        PERFORM VARYING X FROM 2 BY 1     *Loop through all numbers up to half of current number
            UNTIL X > REMAINDER
            IF REMAINDER = 0 THEN        *If current number divides evenly, it is not prime
                SET FLAG TO 1.           *Set flag to 1 to mark as not prime
                EXIT.                    *Exit loop
        IF FLAG = 0 THEN                 *If flag is still 0, current number is prime
            COMPUTE PRIME-COUNT = PRIME-COUNT + 1. *Increment prime count
            SET PRIMES(PRIME-COUNT) TO COUNT.      *Add current number to prime numbers array

    DISPLAY-PRIMES.
        DISPLAY "Prime numbers up to " NUMBER " are:".
        PERFORM VARYING X FROM 1 BY 1 *Loop through all prime numbers found
            UNTIL X > PRIME-COUNT
            DISPLAY PRIMES(X).        *Display prime number