IDENTIFICATION DIVISION.
PROGRAM-ID. SAMPLE.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 ARRAY-LENGTH PIC 99.     *>defines the length of the array
01 ERROR-CHECK PIC A(10).  *>used to check for any errors

01 NAMES.
 02 NAME-INPUT PIC X(20) OCCURS 10 TIMES. *>defines array of 10 names

01 COUNTRY-CODES.
 02 COUNTRY-INPUT PIC 99 OCCURS 10 TIMES. *>defines array of 10 country codes

01 MARKS-INPUT PIC 999 OCCURS 10 TIMES. *>defines array of 10 marks

01 TOTAL-MARKS PIC 999.               *>variable to store total of marks
01 MARKS-COUNTER PIC 9(1) VALUE 1. *>used for looping through the marks array

PROCEDURE DIVISION.
MAIN-LOGIC.
  MOVE ZERO TO TOTAL-MARKS. *>initializing total marks to 0

  PERFORM UNTIL MARKS-COUNTER > ARRAY-LENGTH *>iterating through the array
    DISPLAY "Enter name of student: ".
    ACCEPT NAME-INPUT(MARKS-COUNTER). *>accepting name input at current index

    DISPLAY "Enter country code: ".
    ACCEPT COUNTRY-INPUT(MARKS-COUNTER). *>accepting country code input at current index
    IF ERROR-CHECK = "ERROR" *>checking for any errors in input
      DISPLAY "Invalid country code entered, please try again."
      NEXT SENTENCE
    END-IF

    DISPLAY "Enter marks: ".
    ACCEPT MARKS-INPUT(MARKS-COUNTER).  *>accepting marks input at current index
    IF ERROR-CHECK = "ERROR" *>checking for any errors in input
      DISPLAY "Invalid marks entered, please try again."
      NEXT SENTENCE
    END-IF

    ADD MARKS-INPUT(MARKS-COUNTER) TO TOTAL-MARKS. *>calculating total marks
    ADD 1 TO MARKS-COUNTER. *>incrementing marks counter
  END-PERFORM.

  DISPLAY "Total marks: " TOTAL-MARKS. *>displaying total marks

STOP RUN.