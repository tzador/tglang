IDENTIFICATION DIVISION.                //Start of Identification division
PROGRAM-ID. GENERATE.                    //Program name
ENVIRONMENT DIVISION.                    //Start of Environment division
INPUT-OUTPUT SECTION.                    //Input-Output section
FILE-CONTROL.                            //Start of File control
    SELECT INPUT-FILE ASSIGN TO DISK.    //Declaring input file name
    SELECT OUTPUT-FILE ASSIGN TO DISK.   //Declaring output file name
DATA DIVISION.                           //Start of Data division
FILE SECTION.                            //File section
FD INPUT-FILE                            //File Descriptor for input file
    RECORD CONTAINS 80 CHARACTERS.       //Character count of each record
    01 RECORD-STRUCTURE.                 //Record structure name
       02 EMPLOYEE-ID PIC 9(5).          //Employee ID field
       02 EMPLOYEE-NAME PIC X(30).       //Employee name field
       02 EMPLOYEE-SALARY PIC 9(8).      //Employee salary field
FD OUTPUT-FILE                           //File Descriptor for output file
    RECORD CONTAINS 80 CHARACTERS.       //Character count of each record
    01 RECORD-STRUCTURE.                 //Record structure name
       02 EMPLOYEE-ID PIC 9(5).          //Employee ID field
       02 EMPLOYEE-NAME PIC X(30).       //Employee name field
       02 EMPLOYEE-SALARY PIC 9(8).      //Employee salary field
WORKING-STORAGE SECTION.                 //Working-storage section
77 EMPLOYEE-COUNT PIC 9(3) VALUE 0.      //Variable to store number of employees
77 TOTAL-SALARY PIC 9(9) VALUE 0.        //Variable to store total salary
01 EMPLOYEE-TABLE.                       //Employee table to store employee data
    02 EMPLOYEE-RECORD OCCURS 50 TIMES.  //50 occurrences of employee record
       03 EMPLOYEE-ID PIC 9(5).          //Employee ID field
       03 EMPLOYEE-NAME PIC X(30).       //Employee name field
       03 EMPLOYEE-SALARY PIC 9(8).      //Employee salary field
PROCEDURE DIVISION.                      //Start of Procedure division
MAIN-PARAGRAPH.                          //Main paragraph
    OPEN INPUT INPUT-FILE                //Open input file
    PERFORM UNTIL (EMPLOYEE-COUNT = 50)  //Loop until 50 employees are processed
       READ INPUT-FILE INTO RECORD-STRUCTURE. //Read record from input file
       ADD 1 TO EMPLOYEE-COUNT           //Increment employee count
       COMPUTE TOTAL-SALARY = TOTAL-SALARY + EMPLOYEE-SALARY //Add salary to total salary
       MOVE RECORD-STRUCTURE TO EMPLOYEE-TABLE(EMPLOYEE-COUNT) //Move record to employee table
    END-PERFORM.
    CLOSE INPUT-FILE.                    //Close input file
    SORT EMPLOYEE-TABLE ASCENDING ON EMPLOYEE-ID //Sort employee table by employee ID
    OPEN OUTPUT OUTPUT-FILE              //Open output file
    PERFORM VARYING EMPLOYEE-COUNT FROM 1 BY 1 //Loop through employee table
       WRITE EMPLOYEE-TABLE(EMPLOYEE-COUNT) //Write employee record to output file
       END-IF.
    END-PERFORM.
    CLOSE OUTPUT-FILE.                   //Close output file
STOP-RUN.                                //End of program.