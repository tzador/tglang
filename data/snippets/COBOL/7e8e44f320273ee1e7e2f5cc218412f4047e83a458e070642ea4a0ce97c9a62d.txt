IDENTIFICATION DIVISION.      //IDENTIFICATION DIVISION header
PROGRAM-ID. MY-COBOL-PROGRAM. //NAME of program
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT MY-FILE ASSIGN TO 'myfilename.dat' //FILE declaration, filename and type
    ORGANIZATION IS LINE SEQUENTIAL.         //FILE organization type
DATA DIVISION.
FILE SECTION.                  //FILE section header
FD MY-FILE.                    //FILE description
01 RECORD-1.                   //RECORD level name
    05 FIRST-NAME   PIC X(20). //FIELD level name and data type
    05 LAST-NAME    PIC X(20).
    05 AGE          PIC 99.    //PIC clauses specify data type and length
    05 DEPT         PIC 9(3).
    05 SALARY       PIC 9(5).V99.
WORKING-STORAGE SECTION.       //WORKING-STORAGE section header
01 WS-COUNTER    PIC 999.      //WORKING-STORAGE variable
01 WS-MESSAGE    PIC X(50).
PROCEDURE DIVISION.
MAIN-PROCEDURE.
    OPEN INPUT MY-FILE.        //OPEN FILE for reading
    PERFORM UNTIL WS-COUNTER = 50.  //PERFORM loop for 50 records
        READ MY-FILE INTO RECORD-1. //READ next record
        IF WS-MESSAGE = 'DONE'.     //IF condition
            DISPLAY 'No more records to process.' //DISPLAY message
            GO TO END-PROGRAM.     //GO TO end of program
        END-IF.
        IF AGE > 30 AND SALARY < 5000.    //IF condition with multiple clauses
            SUBTRACT 1 FROM DEPT.         //SUBTRACT 1 from DEPT value
        ELSE IF AGE < 25.                  //ELSE IF clause
            MULTIPLY SALARY BY 1.05.       //MULTIPLY SALARY by 1.05
        ELSE                               //ELSE clause
            DISPLAY 'Invalid age.'        //DISPLAY message
        END-IF.
        ADD 1 TO WS-COUNTER.               //ADD 1 to counter
    END-PERFORM.
END-PROGRAM.                              //END-PROGRAM label
CLOSE MY-FILE.                            //CLOSE FILE after processing
STOP RUN.                                 //STOP running program