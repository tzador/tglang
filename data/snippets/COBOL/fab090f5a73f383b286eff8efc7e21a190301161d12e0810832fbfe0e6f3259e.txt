IDENTIFICATION DIVISION.           * Divisions identify section of COBOL code
       PROGRAM-ID. SAMPLE-PROGRAM.        * Program name is 'SAMPLE-PROGRAM'
       AUTHOR. JOHN SMITH.                * Author's name is 'John Smith'
       DATE-WRITTEN. 01/01/2021.          * Date program was written
       DATE-COMPILED. 01/02/2021.         * Date program was compiled
       ENVIRONMENT DIVISION.              * Environment division specifies input/output devices and files
       INPUT-OUTPUT SECTION.              * Specifies files used in the program
       FILE-CONTROL.                      * File control section starts
           SELECT STUDENT-FILE            * File name is 'STUDENT-FILE'
               ASSIGN TO 'STUDENTS.DAT'   * File is assigned to 'STUDENTS.DAT'
               ORGANIZATION IS SEQUENTIAL * File organization is sequential
               FILE STATUS IS STUDENT-FILE-STATUS.  * File status is stored in 'STUDENT-FILE-STATUS'
       DATA DIVISION.                     * Data division specifies data types and variables
       FILE SECTION.
       FD STUDENT-FILE                    * File description for 'STUDENT-FILE'
           RECORD CONTAINS 80 CHARACTERS  * Record contains 80 characters
           DATA RECORD IS STUDENT-RECORD. * Data record name is 'STUDENT-RECORD'
       01 STUDENT-RECORD.                 * Record description for 'STUDENT-RECORD'
           05 STUDENT-ID PIC X(5).        * Field for student ID, 5 characters
           05 STUDENT-NAME PIC X(30).     * Field for student name, 30 characters
           05 STUDENT-AGE PIC 99.         * Field for student age, 2 characters
       WORKING-STORAGE SECTION.           * Working storage section stores temporary variables
       01 STUDENT-COUNT PIC 99 VALUE 0.    * Variable for counting number of students
       01 STUDENT-FILE-STATUS PIC XX.     * Status code for student file
       PROCEDURE DIVISION.                * Procedure division contains actual program logic
       MAIN-LOGIC.                        * Main logic section starts
           OPEN INPUT STUDENT-FILE.       * Open student file for input
           PERFORM READ-STUDENT-FILE UNTIL STUDENT-FILE-STATUS = '10'.  * Start loop until end of file reached
           CLOSE STUDENT-FILE.            * Close student file
           DISPLAY 'Number of students: ' STUDENT-COUNT.  * Display number of students found
       READ-STUDENT-FILE.                 * Read next record from student file
           READ STUDENT-FILE              * Read record from student file
               AT END                     * At end of file
                   SET STUDENT-FILE-STATUS TO '10'.  * Set status to 10 to exit loop
               NOT AT END                 * If not at end of file
                   ADD 1 TO STUDENT-COUNT.    * Increment student count
       END PROGRAM SAMPLE-PROGRAM.         * End of program 'SAMPLE-PROGRAM'