identification division.
program-id. calc-salary.
environment division.
configuration section.
source-computer. company-mainframe.
object-computer. department-computer.
special-names.
	months are month-abbreviations.
data division.
working-storage section.
01 employee-record.
	05 employee-id pic 9(6).
	05 employee-name pic x(20).
	05 employee-salary pic 9(8).
	05 employee-department pic x(10).
01 tax-table.
	05 tax-bracket occurs 5 times.
	10 minimum-salary pic 9(8).
	10 maximum-salary pic 9(8).
	10 tax-rate pic 9(3)v99.
procedure division.
begin.
	display "Enter employee ID:" with no advancing.
accept employee-id.
	display "Enter employee name:" with no advancing.
accept employee-name.
	display "Enter employee salary:" with no advancing.
accept employee-salary.

	perform varying tax-bracket-index from 1 by 1 until tax-bracket-index > 5
		if (employee-salary >= minimum-salary(tax-bracket-index) and employee-salary <= maximum-salary(tax-bracket-index))
			compute employee-tax = (employee-salary - minimum-salary(tax-bracket-index)) * tax-rate(tax-bracket-index)
			exit perform
	end-perform.
	
	display "Employee ID:" employee-id.
	display "Employee name:" employee-name.
	display "Employee salary:" employee-salary.
	display "Employee tax:" employee-tax.
end. 

Explanation:
This code snippet is a simple COBOL program that calculates an employee's salary after taxes. It first defines the employee record with fields for ID, name, salary, and department. Then, it defines a tax table with different tax brackets based on salary ranges. The procedure division starts with accepting inputs for the employee's ID, name, and salary. Using a perform loop, it then checks the employee's salary against the tax brackets in the tax table and calculates the appropriate tax rate. Finally, it displays the employee's information and calculated tax. This snippet showcases COBOL's traditional syntax and use of hierarchical data structures.