IDENTIFICATION DIVISION.                 # Identifies the division of the program

PROGRAM-ID. SAMPLE.                      # Program name is 'SAMPLE'

ENVIRONMENT DIVISION.                    # Defines the environment

INPUT-OUTPUT SECTION.                    # Defines input-output files and devices

FILE-CONTROL.                            # Defines the filenames used in the program

SELECT DATA-FILE ASSIGN TO DISK          # Defines a file named 'DATA-FILE' to be accessed from disk
ORGANIZATION IS INDEXED                   # Specifies the file organization as indexed
ACCESS MODE IS DYNAMIC                    # Specifies the access mode as dynamic (records can be added or deleted)
RECORD KEY IS DATA-KEY.                   # Defines the record key as 'DATA-KEY'

DATA DIVISION.                           # Defines the data used in the program

FILE SECTION.                            # Defines the data structure of files used

FD DATA-FILE.                            # File description for 'DATA-FILE'
01 DATA-RECORD.                          # Structure of each record in the file
   05 DATA-KEY PIC X(10).                 # Key field of data
   05 DATA-NAME PIC X(30).                # Name field of data
   05 DATA-AGE PIC 9(2).                  # Age field of data
   05 DATA-SALARY PIC 9(6)V99.            # Salary field of data

WORKING-STORAGE SECTION.                 # Defines working storage variables

01 DATA-TOTALS.                          # Structure to hold total values of data
   05 TOTAL-AGE PIC 9(3).                 # Total age of all data records
   05 TOTAL-SALARY PIC 9(9)V99.           # Total salary of all data records
01 RECORD-COUNT PIC 9(4).                 # Number of records in file
01 HIGH-SALARY PIC 9(6)V99.               # Highest salary in file

PROCEDURE DIVISION.                       # Contains the actual instructions for the program

MAIN-PROCEDURE.
   OPEN INPUT DATA-FILE                  # Opens the 'DATA-FILE' for reading
   READ DATA-FILE                        # Reads the first record in the file
   PERFORM UNTIL END-OF-FILE             # Loops until end of file is reached
      ADD 1 TO RECORD-COUNT              # Increases record count by 1
      ADD DATA-AGE TO TOTAL-AGE          # Adds data age to total age
      ADD DATA-SALARY TO TOTAL-SALARY    # Adds data salary to total salary
      IF DATA-SALARY > HIGH-SALARY       # Checks if current record has higher salary
         THEN MOVE DATA-SALARY TO HIGH-SALARY # If yes, moves that value to high-salary
      END-IF
      READ DATA-FILE                     # Reads the next record in the file
   END-PERFORM.

   CLOSE DATA-FILE                       # Closes the 'DATA-FILE' after reading

   DISPLAY "Total records: " RECORD-COUNT
   DISPLAY "Average age: " TOTAL-AGE / RECORD-COUNT
   DISPLAY "Average salary: " TOTAL-SALARY / RECORD-COUNT
   DISPLAY "Highest salary: " HIGH-SALARY

   STOP.