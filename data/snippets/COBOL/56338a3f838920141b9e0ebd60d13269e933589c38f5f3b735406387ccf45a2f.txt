PROGRAM-ID. EXAMPLE.              // Program name
    AUTHOR. JOHN DOE.             // Author name
    INSTALLATION. ABC INC.        // Installation name
    DATE-WRITTEN. 01/01/2020.     // Date the program was written
    DATE-COMPILED. 02/01/2020.    // Date the program was compiled
    SECURITY. UNCLASSIFIED.       // Security level of program
    DATE-CREATED. 03/01/2020.     // Date the program was created

    ENVIRONMENT DIVISION.         // Starts environment division
    INPUT-OUTPUT SECTION.         // Declares input and output sections
    FILE-CONTROL.                 // Declares file control
        SELECT INPUT-FILE         // Defines input file
            ASSIGN TO "file1.dat" // Assigns file name
        SELECT OUTPUT-FILE        // Defines output file
            ASSIGN TO "file2.dat" // Assigns file name

    DATA DIVISION.                // Starts data division
    FILE SECTION.                 // Declares files
    FD INPUT-FILE                 // Defines input file
        LABEL RECORDS ARE STANDARD
        RECORDING MODE IS F        // File organization in fixed length records
        RECORD CONTAINS 80 CHARACTERS.
    01 INPUT-RECORD                // Declares input record
        05 INPUT-FIELD1 PIC X(10). // First field of input record
        05 INPUT-FIELD2 PIC X(10). // Second field of input record
    FD OUTPUT-FILE                // Defines output file
        LABEL RECORDS ARE STANDARD
        RECORDING MODE IS F        // File organization in fixed length records
        RECORD CONTAINS 80 CHARACTERS.
    01 OUTPUT-RECORD               // Declares output record
        05 OUTPUT-FIELD1 PIC X(10).// First field of output record
        05 OUTPUT-FIELD2 PIC X(10).// Second field of output record

    WORKING-STORAGE SECTION.       // Declares working storage section
    01 WS-COUNTER PIC 9(3).        // Declares a counter variable
    01 WS-FLAG PIC X.              // Declares a flag variable

    PROCEDURE DIVISION.            // Starts procedure division
    000-START.                     // First program step
        OPEN INPUT INPUT-FILE     // Opens input file for reading
        OPEN OUTPUT OUTPUT-FILE   // Opens output file for writing
        SET WS-COUNTER TO 1       // Sets counter to 1
        SET WS-FLAG TO 'N'        // Sets flag to 'N'
        PERFORM 100-PROCESS-RECORD// Performs record processing
        CLOSE INPUT-FILE          // Closes input file
        CLOSE OUTPUT-FILE         // Closes output file
        STOP RUN.                 // Ends program execution

    100-PROCESS-RECORD.            // Performs record processing
        READ INPUT-FILE INTO INPUT-RECORD // Reads input record
        AT END                         // Checks for end of file
            SET WS-FLAG TO 'Y'          // Sets flag to 'Y'
            GO TO 200-END-PROCESS      // Jumps to end processing
        END-READ.                       // Ends input file reading
        IF INPUT-FIELD1 = "VALUE"       // Checks condition
            MOVE INPUT-FIELD2 TO OUTPUT-FIELD1 // Moves data to output field
            MOVE INPUT-FIELD1 TO OUTPUT-FIELD2 // Moves data to output field
            WRITE OUTPUT-RECORD        // Writes output record
        END-IF.
    200-END-PROCESS.             // Ends record processing
        IF WS-FLAG = 'Y'         // Checks flag
            DISPLAY "END OF FILE REACHED" // Displays message
        ELSE                      // Otherwise
            ADD 1 TO WS-COUNTER   // Adds 1 to counter
            PERFORM 100-PROCESS-RECORD // Continues record processing
        END-IF.