IDENTIFICATION DIVISION.                              //Division that identifies the program
 PROGRAM-ID. example.                                   //Program identifier
 ENVIRONMENT DIVISION.                                 //Division that defines the program's properties
 DATA DIVISION.                                        //Division that specifies data structures and records
 WORKING-STORAGE SECTION.                             //Section that declares variables and constants
 01 STUDENT-RECORD.                                   //Variable
    05 STUDENT-ID PIC X(8).                           //Sub-variable with length of 8 characters
    05 STUDENT-NAME PIC X(20).                       //Sub-variable with length of 20 characters
    05 TEST-SCORES.                                  //Sub-variable
        10 MATH-SCORE PIC 99.                       //Nested sub-variable with length of 2 digits
        10 SCIENCE-SCORE PIC 99.                    //Nested sub-variable with length of 2 digits
        10 ENGLISH-SCORE PIC 99.                    //Nested sub-variable with length of 2 digits
        10 HISTORY-SCORE PIC 99.                    //Nested sub-variable with length of 2 digits
 PROCEDURE DIVISION.                                 //Division that contains the program's instructions
     PERFORM ACCEPT-INPUT UNTIL STUDENT-ID = '99999999'.      //Performs action until condition is met
     DISPLAY 'STUDENT REPORT CARD'.                         //Displays message
     DISPLAY 'STUDENT ID: ' STUDENT-ID.                    //Displays message and variable
     DISPLAY 'STUDENT NAME: ' STUDENT-NAME.               //Displays message and variable
     DISPLAY 'TEST SCORES:'.                            //Displays message
     DISPLAY 'MATH: ' MATH-SCORE.                      //Displays message and variable
     DISPLAY 'SCIENCE: ' SCIENCE-SCORE.               //Displays message and variable
     DISPLAY 'ENGLISH: ' ENGLISH-SCORE.              //Displays message and variable
     DISPLAY 'HISTORY: ' HISTORY-SCORE.             //Displays message and variable
     IF MATH-SCORE >= 70 AND SCIENCE-SCORE >= 70 AND ENGLISH-SCORE >= 70 AND HISTORY-SCORE >= 70
            DISPLAY 'STATUS: PASS'.               //Displays message
        ELSE
            DISPLAY 'STATUS: FAIL'.             //Displays message
     END-IF.
     PERFORM DISPLAY-TOTAL UNTIL STUDENT-ID = '99999999'.       //Performs action until condition is met
     STOP RUN.                                                  //Ends program execution
 ACCEPT-INPUT.                                            //Paragraph that accepts input
    DISPLAY 'ENTER STUDENT ID (8 DIGITS): '.            //Displays message
    ACCEPT STUDENT-ID.                                //Accepts input and assigns to variable
    DISPLAY 'ENTER STUDENT NAME (20 CHARACTERS): '.  //Displays message
    ACCEPT STUDENT-NAME.                            //Accepts input and assigns to variable
    DISPLAY 'ENTER TEST SCORES: '.                  //Displays message
    ACCEPT TEST-SCORES.                            //Accepts input and assigns to variable
 DISPLAY-TOTAL.                                      //Paragraph that displays total score
    COMPUTE TOTAL-SCORE = MATH-SCORE + SCIENCE-SCORE + ENGLISH-SCORE + HISTORY-SCORE.  //Calculates total score
    DISPLAY 'TOTAL SCORE: ' TOTAL-SCORE.                                           //Displays message and variable
    IF TOTAL-SCORE >= 280
        DISPLAY 'GRADE: A+'.                 //Displays message
    ELSE IF TOTAL-SCORE >= 240 AND TOTAL-SCORE <= 279
        DISPLAY 'GRADE: A'.                 //Displays message
    ELSE IF TOTAL-SCORE >= 200 AND TOTAL-SCORE <= 239
        DISPLAY 'GRADE: B'.               //Displays message
    ELSE IF TOTAL-SCORE >= 160 AND TOTAL-SCORE <= 199
        DISPLAY 'GRADE: C'.              //Displays message
    ELSE IF TOTAL-SCORE >= 120 AND TOTAL-SCORE <= 159
        DISPLAY 'GRADE: D'.             //Displays message
    ELSE
        DISPLAY 'GRADE: F'.            //Displays message
    END-IF.