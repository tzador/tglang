IDENTIFICATION DIVISION.
PROGRAM-ID. Snippet.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 ARRAY.
   05 ELEM1 PIC 9(2) VALUE 10.
   05 ELEM2 PIC 9(2) VALUE 20.
   05 ELEM3 PIC 9(2) VALUE 30.
   05 ELEM4 PIC 9(2) VALUE 40.
   05 ELEM5 PIC 9(2) VALUE 50.
   
PROCEDURE DIVISION.
MAIN SECTION.
   INITIALIZE ARRAY.  *> Initialize the array to all zeroes
   
   IF ELEM1 > ELEM5     *> Check if ELEM1 is greater than ELEM5
       SET ELEM2 TO ELEM3  *> Set ELEM2 to the value of ELEM3
   END-IF
   
   PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5   *> Perform loop 5 times
       DISPLAY "Element " I " is " ARRAY(I)     *> Display the current element and its value
   END-PERFORM.
   
   MOVE 25 TO ELEM4    *> Move the value 25 to ELEM4
   
   DISPLAY "The sum of all elements is " FUNCTION SUM(ARRAY)    *> Display the sum of all elements
   DISPLAY "The maximum element is " FUNCTION MAX(ARRAY)    *> Display the maximum element
   DISPLAY "The minimum element is " FUNCTION MIN(ARRAY)    *> Display the minimum element
   
   STOP RUN.
   
FUNCTION SUM(ARRAY)  *> Function to calculate the sum of an array
   SET SUM TO 0       *> Initialize the sum to 0
   
   PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5   *> Perform loop 5 times
       ADD ARRAY(I) TO SUM     *> Add the current element to the sum
   END-PERFORM.
   
   RETURN SUM.        *> Return the sum
   
FUNCTION MAX(ARRAY)  *> Function to find the maximum element in an array
   SET MAX TO ARRAY(1)    *> Initialize the maximum to the first element
   
   PERFORM VARYING I FROM 2 BY 1 UNTIL I > 5   *> Perform loop 4 times (since we already checked the first element)
       IF ARRAY(I) > MAX     *> Check if the current element is greater than the maximum
           SET MAX TO ARRAY(I)    *> If it is, set the maximum to the current element
       END-IF
   END-PERFORM.
   
   RETURN MAX.        *> Return the maximum
   
FUNCTION MIN(ARRAY)  *> Function to find the minimum element in an array
   SET MIN TO ARRAY(1)    *> Initialize the minimum to the first element
   
   PERFORM VARYING I FROM 2 BY 1 UNTIL I > 5   *> Perform loop 4 times (since we already checked the first element)
       IF ARRAY(I) < MIN     *> Check if the current element is less than the minimum
           SET MIN TO ARRAY(I)    *> If it is, set the minimum to the current element
       END-IF
   END-PERFORM.
   
   RETURN MIN.        *> Return the minimum