IDENTIFICATION DIVISION.                             * start of program identification
 PROGRAM-ID. SAMPLE.                                  * declaration of program name
 ENVIRONMENT DIVISION.                               * start of environment division
 CONFIGURATION SECTION.                              * start of configuration section
 SOURCE-COMPUTER. IBM-370.                            * declaration of source computer
 OBJECT-COMPUTER. IBM-370.                            * declaration of object computer
 DATA DIVISION.                                       * start of data division
 FILE SECTION.                                        * start of file section
 FILE-CONTROL.                                        * start of file control section
     SELECT INPUT-FILE  ASSIGN TO "INPUT.TXT".         * declare and assign input file
     SELECT OUTPUT-FILE ASSIGN TO "OUTPUT.TXT".        * declare and assign output file
     SELECT TEMP-FILE   ASSIGN TO "TEMP.DAT".          * declare and assign temporary file
     SELECT ERROR-FILE  ASSIGN TO "ERROR.TXT".         * declare and assign error file
 DATA-RECORD.                                          * start of data record
     01 RECORD-LENGTH         PIC 9(05).               * sets length of record to 5 digits
     01 RECORD-TYPE           PIC X(02).               * allows for 2 different types of records
     01 RECORD-DATA.                                   * start of record data
        05 RECORD-FIELD-1    PIC X(10).                * first data field of record with 10 characters
        05 RECORD-FIELD-2    PIC 9(05).                * second data field of record with 5 digits
 WORKING-STORAGE SECTION.                             * start of working-storage section
     01 PROGRAM-VARIABLES.                             * declaration of program variables
        05 INPUT-COUNTER    PIC 9(03)   VALUE 0.       * counter to keep track of input records
        05 OUTPUT-COUNTER   PIC 9(03)   VALUE 0.       * counter to keep track of output records
        05 TEMP-COUNTER     PIC 9(03)   VALUE 0.       * counter to keep track of temporary records
        05 ERROR-COUNTER    PIC 9(03)   VALUE 0.       * counter to keep track of error records
     01 INPUT-RECORD        PIC X(20).                 * buffer for input record
     01 OUTPUT-RECORD       PIC X(20).                 * buffer for output record
     01 TEMP-RECORD         PIC X(20).                 * buffer for temporary record
     01 ERROR-RECORD        PIC X(20).                 * buffer for error record
 PROCEDURE DIVISION.                                   * start of procedure division
 MAIN-PROCEDURE.                                      * start of main procedure
     OPEN INPUT INPUT-FILE                            * open input file for reading
     OPEN OUTPUT OUTPUT-FILE                          * open output file for writing
     OPEN OUTPUT TEMP-FILE                            * open temporary file for writing
     OPEN OUTPUT ERROR-FILE                           * open error file for writing
     PERFORM READ-FILE UNTIL END-OF-FILE               * perform read loop until end of input file
     CLOSE INPUT-FILE                                 * close input file
     IF ERROR-COUNTER > 0                             * check if any errors occurred
         PERFORM PRINT-ERROR-MESSAGE                   * if so, print error message
     END-IF
     STOP RUN.                                         * end of program execution
 READ-FILE.                                           * read loop
     READ INPUT-FILE INTO INPUT-RECORD                 * read input record
     IF RECORD-LENGTH < 20                             * check if record length is less than 20
         PERFORM WRITE-TEMP                             * if so, write to temporary file
     ELSE                                              * if not, write to output file
         PERFORM WRITE-OUTPUT
     END-IF
 WRITE-TEMP.                                          * write to temporary file
     MOVE INPUT-RECORD TO TEMP-RECORD                  * move record to temporary buffer
     WRITE TEMP-RECORD                                 * write record to temporary file
     ADD 1 TO TEMP-COUNTER                             * increment temporary counter
 WRITE-OUTPUT.                                        * write to output file
     ADD 1 TO OUTPUT-COUNTER                           * increment output counter
     MOVE INPUT-RECORD TO OUTPUT-RECORD                * move record to output buffer
     WRITE OUTPUT-RECORD                               * write record to output file
 PRINT-ERROR-MESSAGE.                                 * print error message
     MOVE "ERROR: INVALID RECORD LENGTH" TO ERROR-RECORD  * set error message
     WRITE ERROR-RECORD                               * write error record to error file
     ADD 1 TO ERROR-COUNTER                            * increment error counter