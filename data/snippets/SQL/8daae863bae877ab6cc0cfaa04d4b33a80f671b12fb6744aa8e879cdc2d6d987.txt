CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    product VARCHAR(50) NOT NULL,
    price DECIMAL(8,2) NOT NULL,
    quantity INTEGER NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id)
        REFERENCES customers(customer_id)
            ON UPDATE CASCADE
            ON DELETE RESTRICT
);

/* 
This code snippet creates a table named 'orders' with 6 columns: 
- An 'order_id' column with the data type INTEGER and PRIMARY KEY constraint, meaning it will be a unique identifier for each row.
- A 'customer_id' column with the data type INTEGER, which will contain a reference to the customer who placed the order.
- A 'product' column with the data type VARCHAR(50), meaning it can contain up to 50 characters of string data, and it cannot be NULL.
- A 'price' column with the data type DECIMAL(8,2), which will store numerical values with 8 digits in total and 2 digits after the decimal point.
- A 'quantity' column with the data type INTEGER, which will store numerical values representing the quantity of the ordered product.
- An 'order_date' column with the data type DATETIME and the DEFAULT CURRENT_TIMESTAMP constraint, meaning it will automatically record the current date and time when a new row is inserted.
The last part of the code creates a FOREIGN KEY constraint on the 'customer_id' column, referencing the 'customer_id' column in the 'customers' table. This constraint specifies that if the referenced customer is updated, the change will be cascaded to the 'customer_id' column in the 'orders' table, and if the referenced customer is deleted, the action will be restricted, preventing the deletion of the corresponding orders in the 'orders' table.
*/