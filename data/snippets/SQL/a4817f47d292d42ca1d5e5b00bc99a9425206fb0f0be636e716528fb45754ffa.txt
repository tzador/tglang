CREATE TABLE IF NOT EXISTS customer (
  customer_id INT NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  address VARCHAR(100),
  city VARCHAR(50),
  state VARCHAR(50),
  country VARCHAR(50),
  PRIMARY KEY (customer_id)
);

-- This table stores information about customers, with an automatically incrementing customer id as the primary key.

CREATE TABLE IF NOT EXISTS transaction (
  transaction_id INT NOT NULL AUTO_INCREMENT,
  customer_id INT NOT NULL,
  product_name VARCHAR(100) NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  transaction_date DATE NOT NULL,
  PRIMARY KEY (transaction_id),
  CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE CASCADE
);

-- This table stores information about transactions, with an automatically incrementing transaction id as the primary key and a foreign key to the customer table.

CREATE PROCEDURE get_customer_transactions(IN cust_id INT)
BEGIN
  SELECT transaction_id, product_name, quantity, price
  FROM transaction
  WHERE customer_id = cust_id;
END;

-- This stored procedure retrieves transactions for a specific customer based on their customer id.

DELIMITER $$

CREATE TRIGGER update_customer_count AFTER INSERT ON transaction
FOR EACH ROW
BEGIN
  UPDATE customer
  SET num_transactions = num_transactions + 1
  WHERE customer_id = NEW.customer_id;
END$$

DELIMITER ;

-- This trigger updates the number of transactions for a customer after a new transaction is inserted into the transaction table.