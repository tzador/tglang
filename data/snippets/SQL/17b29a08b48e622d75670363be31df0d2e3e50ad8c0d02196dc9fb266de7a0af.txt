-- Create table for customer orders
CREATE TABLE customer_orders (
    order_id int PRIMARY KEY,
    customer_id int,
    order_date date,
    total_price float,
    status varchar(20)
);

-- Insert data into customer_orders table
INSERT INTO customer_orders (order_id, customer_id, order_date, total_price, status)
VALUES (1, 101, '2020-01-01', 100.00, 'Complete'),
    (2, 102, '2020-02-05', 200.00, 'Complete'),
    (3, 103, '2020-03-10', 150.00, 'Incomplete'),
    (4, 104, '2020-04-15', 175.00, 'Complete'),
    (5, 105, NULL, 50.00, 'Pending');

-- Create table for order items
CREATE TABLE order_items (
    order_id int,
    item_id int,
    quantity int,
    price float,
    FOREIGN KEY (order_id) REFERENCES customer_orders(order_id)
);

-- Insert data into order_items table
INSERT INTO order_items (order_id, item_id, quantity, price)
VALUES (1, 101, 2, 20.00),
    (1, 102, 1, 30.00),
    (2, 103, 3, 50.00),
    (2, 104, 2, 40.00),
    (3, 105, 1, 50.00),
    (4, 106, 2, 25.00),
    (4, 107, 1, 50.00),
    (4, 108, 3, 30.00),
    (5, 109, 2, 25.00);

-- Query to retrieve orders with a total price greater than $100
SELECT order_id, customer_id, order_date, total_price, status
FROM customer_orders
WHERE total_price > 100.00;

-- Query to calculate and update the total price of each order
UPDATE customer_orders
SET total_price = (SELECT SUM(quantity * price) FROM order_items WHERE customer_orders.order_id = order_items.order_id)
WHERE order_id IN (SELECT order_id FROM order_items);

-- Query to find the average total price of completed orders
SELECT AVG(total_price) AS average_price
FROM customer_orders
WHERE status = 'Complete';