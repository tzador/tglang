-- Create a temporary table to store customer data
CREATE TEMP TABLE customers (
  id SERIAL PRIMARY KEY, -- Unique ID for each customer
  name VARCHAR(50) NOT NULL, -- Customer's name
  email VARCHAR(50) UNIQUE, -- Customer's email (must be unique)
  address VARCHAR(100), -- Customer's address
  city VARCHAR(50) -- Customer's city
);

-- Insert data into the temporary table
INSERT INTO customers (name, email, address, city)
VALUES ('John Doe', 'jdoe@email.com', '123 Main St', 'New York'),
       ('Jane Smith', 'jsmith@hotmail.com', '456 Park Ave', 'Los Angeles'),
       ('Bob Johnson', NULL, '789 Broadway', 'Chicago');

-- Create a new table to store orders
CREATE TABLE orders (
  id SERIAL PRIMARY KEY, -- Unique ID for each order
  customer_id INT REFERENCES customers(id), -- ID of the customer who placed the order
  order_date DATE NOT NULL, -- Date the order was placed
  total_amount NUMERIC(10,2) NOT NULL, -- Total amount of the order
  status VARCHAR(20) NOT NULL -- Status of the order (e.g. pending, processing, shipped)
);

-- Insert data into the orders table
INSERT INTO orders (customer_id, order_date, total_amount, status)
VALUES (1, '2020-01-01', 100.00, 'pending'),
       (3, '2020-01-02', 50.00, 'processing'),
       (2, '2020-01-03', 200.00, 'shipped'),
       (1, '2020-01-05', 75.00, 'delivered'),
       (2, '2020-01-06', 150.00, 'shipped');

-- Create a view to display customer information for orders with a total amount over $100
CREATE VIEW high_spending_customers AS
SELECT c.name AS customer_name,
       c.email AS customer_email,
       o.order_date,
       o.total_amount
FROM customers c
INNER JOIN orders o ON c.id = o.customer_id
WHERE o.total_amount > 100.00;

-- Query the view to retrieve data on high spending customers
SELECT * FROM high_spending_customers;