-- Create a temporary table to store customer data
CREATE TEMPORARY TABLE IF NOT EXISTS Customer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20)
);

-- Insert data into the temporary table
INSERT INTO Customer (first_name, last_name, email, phone_number)
VALUES ('John', 'Smith', 'jsmith@example.com', '123-456-7890'),
       ('Jane', 'Doe', 'jdoe@example.com', '987-654-3210'),
       ('Bob', 'Johnson', 'bjohnson@example.com', '456-789-0123');

-- Create a table to store product data
CREATE TABLE IF NOT EXISTS Product (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    price DECIMAL(10,2),
    available_stock INT
);

-- Insert data into the product table
INSERT INTO Product (name, price, available_stock)
VALUES ('T-shirt', 19.99, 100),
       ('Jeans', 29.99, 75),
       ('Shoes', 49.99, 50);

-- Create a table to store orders and their associated customer and product information
CREATE TABLE IF NOT EXISTS Orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customer(id),
    FOREIGN KEY (product_id) REFERENCES Product(id)
);

-- Insert data into the orders table
INSERT INTO Orders (customer_id, product_id, quantity, order_date)
VALUES (1, 1, 2, '2021-08-01'),
       (2, 3, 1, '2021-08-05'),
       (3, 2, 3, '2021-08-07');

-- Display the total revenue generated from orders
SELECT SUM(p.price * o.quantity) AS total_revenue
FROM Orders o
INNER JOIN Product p ON o.product_id = p.id;