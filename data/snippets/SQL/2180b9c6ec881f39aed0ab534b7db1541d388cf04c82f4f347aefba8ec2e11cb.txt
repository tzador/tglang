-- Create a table to store customer information
CREATE TABLE customers (
  customer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  date_of_birth DATE,
  signup_date DATE NOT NULL,
  last_purchase_date DATE,
  active BOOLEAN NOT NULL
);

-- Insert data into the customers table
INSERT INTO customers (first_name, last_name, email, phone_number, date_of_birth, signup_date, last_purchase_date, active)
VALUES ('John', 'Smith', 'jsmith@example.com', '555-123-4567', '1980-01-01', '2020-01-01', '2021-03-12', TRUE),
       ('Jane', 'Doe', 'jdoe@example.com', '555-987-6543', '1985-05-15', '2020-02-15', '2021-04-20', TRUE),
       ('Michael', 'Johnson', 'mjohnson@example.com', '555-555-5555', '1990-10-10', '2020-03-20', '2021-03-12', FALSE),
       ('Sarah', 'Williams', 'swilliams@example.com', '555-111-2222', '1992-02-18', '2020-05-01', NULL, TRUE);

-- Add a column for customer loyalty level
ALTER TABLE customers
ADD COLUMN loyalty_level VARCHAR(20) DEFAULT 'Bronze';

-- Update loyalty level for active customers
UPDATE customers
SET loyalty_level = 'Silver'
WHERE active = TRUE;

-- Create a table to track customer purchases
CREATE TABLE purchases (
  purchase_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  customer_id INT NOT NULL,
  date_of_purchase DATE NOT NULL,
  product_name VARCHAR(100) NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert data into the purchases table
INSERT INTO purchases (customer_id, date_of_purchase, product_name, quantity, price)
VALUES (1, '2021-03-12', 'Shirt', 2, 25.99),
       (2, '2020-05-05', 'Pants', 1, 49.99),
       (2, '2020-03-01', 'Shoes', 1, 89.99),
       (3, '2021-02-10', 'Socks', 5, 9.99),
       (4, '2021-03-30', 'Dress', 1, 69.99);

-- Calculate total spent by each customer
SELECT c.first_name, c.last_name, SUM(p.quantity * p.price) AS total_spent
FROM customers c
INNER JOIN purchases p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

-- Find average time between purchases for each customer
SELECT c.first_name, c.last_name, AVG(DATEDIFF(p.date_of_purchase, c.last_purchase_date)) AS avg_time_between
FROM customers c
INNER JOIN purchases p ON c.customer_id = p.customer_id
WHERE c.active = TRUE
GROUP BY c.customer_id;