CREATE TABLE IF NOT EXISTS employees ( --Creates a new table called 'employees' if it does not already exist
  employee_id INT NOT NULL, --Defines a column called 'employee_id' as an integer that cannot be null
  first_name VARCHAR(20) DEFAULT 'John', --Defines a column called 'first_name' as a string with a maximum length of 20 characters with a default value of 'John'
  last_name VARCHAR(20) DEFAULT 'Doe', --Defines a column called 'last_name' as a string with a maximum length of 20 characters with a default value of 'Doe'
  job_title VARCHAR(30) NOT NULL, --Defines a column called 'job_title' as a string with a maximum length of 30 characters that cannot be null
  department VARCHAR(30) NOT NULL, --Defines a column called 'department' as a string with a maximum length of 30 characters that cannot be null
  salary DECIMAL(10,2) NOT NULL, --Defines a column called 'salary' as a decimal with a precision of 10 digits and a scale of 2 digits that cannot be null
  hire_date DATE DEFAULT GETDATE(), --Defines a column called 'hire_date' as a date with a default value of the current date and time
  PRIMARY KEY (employee_id) --Defines the 'employee_id' column as the primary key for the table
);

INSERT INTO employees (employee_id, first_name, last_name, job_title, department, salary, hire_date) --Inserts new data into the 'employees' table
VALUES (1, 'Jane', 'Smith', 'Project Manager', 'IT', 80000, '2020-01-01'), --Specifies the values to be inserted in each column for the first row
       (2, 'Bob', 'Johnson', 'Software Engineer', 'Engineering', 70000, '2019-06-15'), --Specifies the values to be inserted in each column for the second row
       (3, 'Lisa', 'Davis', 'Marketing Specialist', 'Marketing', 60000, '2018-12-10'); --Specifies the values to be inserted in each column for the third row

SELECT employee_id, first_name, last_name, job_title, department, salary --Retrieves data from the 'employees' table for specific columns
FROM employees --Specifies the table to retrieve data from
WHERE department = 'IT' AND salary > 75000 --Filters the results to only include employees from the IT department making more than 75000

ORDER BY last_name ASC, first_name ASC; --Sorts the results by last name in ascending order, and if there are multiple employees with the same last name, their first names will be sorted in ascending order as well