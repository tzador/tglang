# A function to calculate the factorial of a number
def factorial(n : Int32) : Int32
    # Base case
    if n == 0
        return 1
    
    # Recursive case
    return n * factorial(n - 1)
end

# A function to calculate the nth term in the Fibonacci sequence
def fibonacci(n : Int32) : Int32
    # Base cases
    if n == 0 || n == 1
        return n
    # Recursive case
    return fibonacci(n - 1) + fibonacci(n - 2)
end

# A function to calculate the sum of all numbers in a list
def sum_list(list : Array(Int32)) : Int32
    # Base case
    if list.size == 0
        return 0
    
    # Recursive case
    return list[0] + sum_list(list[1..-1])
end

# A function to determine if a number is prime
def is_prime(n : Int32) : Bool
    # Base case
    if n == 2
        return true
    
    # Check if number is divisible by any number less than its square root
    for i in 2..Math.sqrt(n).to_i
        if n % i == 0
            return false
        end
    end
    
    # If no factors found, number is prime
    return true
end

# A function to calculate the nth prime number
def nth_prime(n : Int32) : Int32
    # Base case
    if n == 1
        return 2
    
    # Keep track of number of primes found
    primes_found = 1
    num = 3

    # Loop until desired number of primes is found
    while primes_found < n
        if is_prime(num)
            primes_found += 1
        end
        num += 2
    end

    return num - 2  # subtract 2 since we started at 3
end

# A function to calculate the power of a number
def power(base : Int32, exponent : Int32) : Int32
    # Base case
    if exponent == 0
        return 1
    # Recursive case
    return base * power(base, exponent - 1)
end

# A function to calculate the factorial of a number using tail recursion
def factorial_tail(n : Int32) : Int32
    return factorial_tail_helper(n, 1)
end

# Helper function for tail recursion
def factorial_tail_helper(n : Int32, accumulator : Int32) : Int32
    if n == 0
        return accumulator
    return factorial_tail_helper(n - 1, accumulator * n)
end

# A function to calculate the nth Fibonacci number using tail recursion
def fibonacci_tail(n : Int32) : Int32
    return fibonacci_tail_helper(n, 0, 1)
end

# Helper function for tail recursion
def fibonacci_tail_helper(n : Int32, a : Int32, b : Int32) : Int32
    if n == 0
        return a
    return fibonacci_tail_helper(n - 1, b, a + b)
end

# A function to calculate the sum of all numbers in a list using tail recursion
def sum_list_tail(list : Array(Int32)) : Int32
    return sum_list_tail_helper(list, 0)
end

# Helper function for tail recursion
def sum_list_tail_helper(list : Array(Int32), accumulator : Int32) : Int32
    if list.size == 0
        return accumulator
    return sum_list_tail_helper(list[1..-1], accumulator + list[0])
end

# A function to generate the first n primes using tail recursion
def first_n_primes(n : Int32) : Array(Int32)
    return first_n_primes_helper(n, 2, [2])
end

# Helper function for tail recursion
def first_n_primes_helper(n : Int32, current : Int32, primes : Array(Int32)) : Array(Int32)
    if primes.size == n
        return primes
    if is_prime(current)
        primes << current
    return first_n_primes_helper(n, current + 1, primes)
end

# A function to calculate the power of a number using tail recursion
def power_tail(base : Int32, exponent : Int32) : Int32
    return power_tail_helper(base, exponent, 1)
end

# Helper function for tail recursion
def power_tail_helper(base : Int32, exponent : Int32, accumulator : Int32) : Int32
    if exponent == 0
        return accumulator
    return power_tail_helper(base, exponent - 1, accumulator * base)
end