# This code snippet generates a Perry Fractal using the 'fractal' library in CRYSTAL.

require "fractal"

# Set up the dimensions of the fractal
width = 100
height = 100
max_iterations = 1000
origin_x = -2.5
origin_y = -1.5
scale = 0.01

# Initialize the buffer with the dimensions
buffer = Fractal::Buffer.new(width, height)

# Define a function to calculate the fractal
def mandelbrot(x, y, max_iterations)
  z_re = 0.0
  z_im = 0.0
  c_re = x
  c_im = y

  # Iterate through the function
  max_iterations.times do |i|
    # Calculate the next value of z using the equation z = z ** 2 + c
    z_re_2 = z_re ** 2 - z_im ** 2
    z_im_2 = z_re * z_im * 2.0

    z_re = z_re_2 + c_re
    z_im = z_im_2 + c_im

    # Check if the magnitude of z is above 2
    magnitude = z_re ** 2 + z_im ** 2
    break if magnitude > 4.0
  end

  return max_iterations
end

# Loop through each pixel
buffer.each_pixel do |x, y|
  # Convert the pixel coordinates to complex numbers
  c_re = x * scale + origin_x
  c_im = y * scale + origin_y

  # Calculate the value of the pixel at this position
  value = mandelbrot(c_re, c_im, max_iterations)

  # Set the color of the pixel based on the value
  buffer.set_pixel(x, y, value, Fractal::RGBColor.new(value, value, value))
end

# Save the fractal as a bitmap image
buffer.to_bmp("perry_fractal.bmp")