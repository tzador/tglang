# This is a multi-line comment in Crystal.

# This is a module definition.
# Modules are used to group related code together.
module MyModule

  # This is a constant definition.
  # Constants are values that cannot be changed.
  MY_CONSTANT = "Hello World"

  # This is a class definition.
  # Classes are used to create objects with their own properties and methods.
  class MyClass
    # This is a class variable.
    # Class variables are accessible to all instances of the class.
    @@class_variable = "This is a class variable"

    # This is a instance variable.
    # Instance variables are unique to each instance of the class.
    @instance_variable = "This is an instance variable"

    # This is a constructor.
    # Constructors are executed when an object is created.
    def initialize
      # This is a local variable.
      # Local variables cannot be accessed outside the scope in which they were defined.
      local_variable = "This is a local variable"

      # This is a method call.
      # Methods are functions that perform specific tasks.
      my_method()
    end

    # This is a private method.
    # Private methods can only be called within the class in which they are defined.
    private def my_private_method
      puts "This is a private method"
    end

    # This is a public method.
    # Public methods can be called from anywhere.
    def my_public_method
      puts "This is a public method"
    end

    # This is a method definition.
    # Methods can take parameters that are used as inputs.
    def my_method(name : String)
      puts "Hello #{name}"
    end
  end
end

# This is a variable definition.
# Variables are used to store and manipulate data.
my_variable = "This is a variable"

# This is a conditional statement.
# Conditional statements allow for control flow in a program.
if my_variable == "This is a variable"
  # This is a string interpolation.
  # String interpolation allows for variables to be inserted into a string.
  puts "#{my_variable}, and so is this"
end

# This is a loop.
# Loops allow for repeated execution of code.
for i in 1..5
  puts i
end

# This is a function definition.
# Functions are blocks of code that can be called multiple times.
def my_function(num : Int32) : Int32
  return num * 2
end

# This is a function call.
# Functions can be called with arguments that match the parameters defined in the function definition.
my_function(5)

# This is an array definition.
# Arrays are a collection of items of the same data type.
my_array = [1, 2, 3, 4, 5]

# This is a hash definition.
# Hashes are key-value pairs used to store data.
my_hash = {"name" => "John", "age" => 30}

# This is an if-else statement.
# If-else statements allow for different code to be executed based on a condition.
if my_array.size > 3
  puts "There are more than 3 items in the array"
else
  puts "There are less than or equal to 3 items in the array"
end

# This is a case statement.
# Case statements allow for different code to be executed based on different values of a variable.
case my_hash["name"]
when "John"
  puts "The person's name is John"
when "Jane"
  puts "The person's name is Jane"
else
  puts "The person's name is not known"
end

# This is an error handling block.
# Error handling blocks allow for handling of errors that may occur in a program.
begin
  # This is code that may potentially generate an error.
  raise "An error has occurred"
rescue => error
  # This is code that will handle the error.
  puts "Error: #{error.message}"
end