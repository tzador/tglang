# This is a comment in CRYSTAL programming language.

# Declare a constant variable named 'PI' and assign the value 3.14159 to it.
PI = 3.14159;

# Define a class named 'Shape'
class Shape
  # Declare a class variable named 'sides' and assign the value 0 to it.
  @@sides = 0
  
  # Define a static method named 'get_sides' to get the number of sides of the shape.
  def self.get_sides
    # Return the value of class variable 'sides'.
    return @@sides
  end
  
  # Define a constructor that takes in the number of sides as parameter.
  def initialize(num_sides)
    # Assign the parameter value to the instance variable '@sides'.
    @sides = num_sides
    # Increment the class variable 'sides' by 1.
    @@sides += 1
  end
  
  # Define a method named 'get_area' to calculate the area of the shape.
  def get_area
    # Return a string with the calculated area value.
    return "The area of this shape is #{@sides * @sides}."
  end
end

# Inherit from the 'Shape' class and define a subclass named 'Circle'
class Circle < Shape
  # Define a constant variable named 'PI' and assign the value 3.14159 to it.
  PI = 3.14159
  
  # Define a constructor that takes in the radius of the circle as parameter.
  def initialize(radius)
    # Call the constructor of the superclass 'Shape' with the parameter value.
    super(0)
    # Assign the parameter value to the instance variable '@radius'.
    @radius = radius
  end
  
  # Override the 'get_area' method to calculate the area of a circle.
  def get_area
    # Return a string with the calculated area value, using the overridden 'PI' constant.
    return "The area of this circle is #{PI * @radius * @radius}."
  end
end

# Instantiate an object of class 'Shape' with 4 as the number of sides.
shape = Shape.new(4)
# Print the number of sides using the static method 'get_sides'.
puts "This shape has #{Shape.get_sides} sides."
# Call the 'get_area' method on the 'shape' object and print the returned string.
puts shape.get_area

# Instantiate an object of class 'Circle' with 5 as the radius.
circle = Circle.new(5)
# Print the number of sides using the static method 'get_sides'.
puts "This circle has #{Shape.get_sides} side."
# Call the 'get_area' method on the 'circle' object and print the returned string.
puts circle.get_area