# This is a complex sorting algorithm in CRYSTAL
# It uses a combination of quicksort, bubble sort, and insertion sort for optimal efficiency

# Define a function for quicksort
def quicksort(array, low, high)
  if low < high
    partitionIndex = partition(array, low, high)
    quicksort(array, low, partitionIndex - 1)
    quicksort(array, partitionIndex + 1, high)
  end 
end

# Define a function for partitioning the array
def partition(array, low, high)
  pivot = array[high] # Choose pivot to be the last element
  i = low - 1 # Index of smaller element
  for j in low..high-1
    if array[j] <= pivot
      i = i + 1 # Increment index of smaller element
      # Swap elements at indexes i and j
      temp = array[i]
      array[i] = array[j]
      array[j] = temp
    end
  end
  # Swap pivot (last element) with element at index i+1
  temp = array[i + 1]
  array[i + 1] = array[high]
  array[high] = temp
  return i + 1 # Return index of pivot
end

# Define a function for bubble sort
def bubblesort(array)
  n = array.size
  for i in 0..n-1
    for j in 0..n-i-1
      # If current element is greater than next element, swap them
      if array[j] > array[j + 1]
        temp = array[j]
        array[j] = array[j + 1]
        array[j + 1] = temp
      end
    end
  end 
end

# Define a function for insertion sort
def insertionsort(array)
  n = array.size
  for i in 1..n-1
    key = array[i]
    j = i - 1
    # Move elements of array[0..i-1], that are greater than key, to one position ahead of their current position
    while j >= 0 && array[j] > key
      array[j + 1] = array[j]
      j = j - 1
    end
    array[j + 1] = key # Insert key at correct position
  end
end

# Define function for combining quicksort, bubblesort, and insertionsort
def mergeSort(array, low, high, threshold)
  if high - low + 1 <= threshold # If number of elements in subarray is less than or equal to threshold, use insertion sort
    insertionsort(array[low..high])
  elsif low < high
    partitionIndex = partition(array, low, high)
    if partitionIndex < low + threshold # If partition size is less than threshold, use quicksort
      quicksort(array, low, partitionIndex - 1)
    else # Otherwise, use bubble sort
      bubblesort(array[low..partitionIndex-1])
    end
    if partitionIndex < high - threshold # If remaining partition size is less than threshold, use quicksort
      quicksort(array, partitionIndex + 1, high)
    else # Otherwise, use bubble sort
      bubblesort(array[partitionIndex+1..high]) 
    end
  end
end

# Create an array to sort
array = [5, 1, 4, 2, 8, 9, 3]

# Set threshold for choosing between quicksort and bubblesort
threshold = 3

# Sort the array using mergeSort function
mergeSort(array, 0, array.size - 1, threshold)

# Print the sorted array
puts "Sorted array: #{array}" # Output: Sorted array: [1, 2, 3, 4, 5, 8, 9]