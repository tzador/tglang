# This is a complex code snippet written in the CRYSTAL programming language.

require "json" # Importing the JSON library to handle JSON data.

module MyModule # Defining a module in CRYSTAL.

  class MyClass # Defining a class inside the module.

    @[FromString] # Annotation to specify that the method can take a JSON string as an argument.
    def initialize(@id : Int32, @name : String, @data : JSON::Any) # Defining an initialize method with arguments and type annotations.
      @id = id # Setting the values of the instance variables.
      @name = name
      @data = data
    end

    # Method to convert the object into a JSON string.
    def to_json # Defining a method without any arguments.
      { "id" => @id, "name" => @name, "data" => @data.to_s}.to_json # Using the to_json method provided by the JSON library to convert the data into a string before returning it.
    end

    # Method to print out the data in a formatted way.
    def print_data # Defining another method without any arguments.
      puts "ID: #{@id}"
      puts "Name: #{@name}"
      puts "Data: #{@data}"
    end
    
  end

  # Creating an instance of the MyClass class.
  my_object = MyModule::MyClass.new(123, "John", { "age": 25, "hobby": "programming" })

  puts my_object.to_json # Calling the to_json method to print out the data in JSON format.

  my_object.print_data # Calling the print_data method to print out the data in a formatted way.
end