# This is a complex function that sorts an array in ascending order using the quicksort algorithm.
# It takes in an array of integers and outputs a sorted array.
def quicksort(array : Array(Int32)) : Array(Int32)
  # Check if array is empty or only has one element, no need to sort if this is the case
  if array.empty? || array.size == 1
    return array
  end

  # Choose a pivot element from the middle of the array
  pivot = array[array.size / 2]

  # Use two pointers, one at beginning of the array and one at the end
  # Move the pointers towards the middle until they pass each other
  # Elements smaller than the pivot will be on the left side, larger on the right
  left = 0
  right = array.size - 1
  # Keep looping until the pointers have crossed
  until left > right
    # Find an element on the left side that is greater than or equal to the pivot
    left += 1 while array[left] < pivot
    # Find an element on the right side that is less than or equal to the pivot
    right -= 1 while array[right] > pivot
    # If the pointers have not crossed, swap the elements at the pointers
    if left <= right
      temp = array[left]
      array[left] = array[right]
      array[right] = temp
      # Move both pointers towards the middle to continue sorting
      left += 1
      right -= 1
    end
  end

  # Recursively call quicksort on the left and right subarrays
  # Then combine the sorted subarrays with the pivot in the middle
  return (quicksort(array[0...left]) + [pivot] + quicksort(array[left...array.size]))
end

# Example input and output
puts quicksort([5,2,6,8,3]) # Outputs [2,3,5,6,8]