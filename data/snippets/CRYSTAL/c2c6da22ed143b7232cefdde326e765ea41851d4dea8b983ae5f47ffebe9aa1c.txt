class Animal
  # Variables
  @[Animal] var name : String
  @[Animal] var species : String
  
  # Methods
  # Constructor method
  def initialize(name : String, species : String)
    @name = name
    @species = species
  end
  
  # Getter method
  def get_name
    @name
  end
  
  # Setter method
  def set_name(name : String)
    @name = name
  end
end

# Inheritance
class Dog < Animal
  # Variables
  @[Dog] var breed : String
  
  # Methods
  # Constructor method
  def initialize(name : String, breed : String)
    @name = name
    @breed = breed
  end
  
  # Overriding getter method
  def get_name
    "My name is #{@name}"
  end
  
  # Overriding setter method
  def set_name(name : String)
    @name = "🐶 #{@name} 🐶"
  end
  
  # Polymorphism
  # Method overloading
  def make_sound(sound : String)
    "Bark bark! " + sound
  end
  
  def make_sound
    puts "Bark bark!"
  end
  
  # Method overriding
  def eat(food : String)
    "Yum, I love #{food}!"
  end
  
  # Class method
  def self.class_method
    puts "I am a dog, I'm from the 'Dog' class!"
  end
  
  # Access control
  private # only accessible within the class
  def doggy_kisses
    "💋💋💋"
  end
  
  protected # accessible within the class and its subclasses
  def bark_volume
    10 # out of 10
  end
  
  public # accessible anywhere
  def fetch(toy : String)
    "I'm fetching #{toy}!"
  end
end

# Creating objects
dog1 = Dog.new("Fido", "Golden Retriever")
dog2 = Dog.new("Buddy", "Poodle")

# Calling methods
puts dog1.get_name #=> "My name is Fido"
puts dog2.get_name #=> "My name is Buddy"

dog1.set_name("Rex")
puts dog1.get_name #=> 🐶 Rex 🐶

puts dog1.make_sound("Woof") #=> "Bark bark! Woof"
dog1.make_sound #=> "Bark bark!"

dog1.eat("bones") #=> "Yum, I love bones!"

Dog.class_method #=> "I am a dog, I'm from the 'Dog' class!"

dog1.fetch("ball") #=> "I'm fetching ball!"

# Accessing private and protected methods
# dog1.doggy_kisses #=> ERROR - private method called
# dog1.bark_volume #=> ERROR - protected method called