# This code snippet demonstrates a function that calculates the nth Fibonacci number using recursion
#
# Inputs:
# - n: the index of the desired Fibonacci number to calculate
#
# Outputs:
# - result: the calculated Fibonacci number at index n
#
# Examples:
# - fibonacci(5) returns 5 (1, 1, 2, 3, 5)
# - fibonacci(10) returns 55 (1, 1, 2, 3, 5, 8, 13, 21, 34, 55)
#
# Note: This implementation has a time complexity of O(2^n)

# define a function called "fibonacci" with one parameter 'n'
def fibonacci(n)

  # if n is 0 or 1, return n
  # base cases for recursion
  if n == 0 || n == 1
    return n 
  end

  # use recursion to calculate Fibonacci number at index n-1 and n-2
  return fibonacci(n - 1) + fibonacci(n - 2)
  
end

# Call the function with input of 10 and assign the result to a variable "result"
result = fibonacci(10)

# Output the result to the console
puts result