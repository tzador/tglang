# This is a complex code snippet showcasing advanced data structures and control flow in CRYSTAL

# Define a constant array with integers and floats
MY_ARRAY = [1, 2.5, 3, 4.2, 5]

# Use a for loop to print the elements multiplied by 2
for element in MY_ARRAY
  puts "Element multiplied by 2: #{element*2}"
end

# Define a hash with strings as keys and arrays as values
MY_HASH = {"Names" => ["John", "Sarah", "Emily"], "Ages" => [23, 27, 19], "Profession" => ["Engineer", "Teacher", "Artist"]}

# Use a case statement to iterate through the hash and print appropriate messages based on the key
case
when "Names"
  puts "The names are: #{MY_HASH["Names"].join(", ")}"
when "Ages"
  puts "The ages are: #{MY_HASH["Ages"].join(", ")}"
when "Profession"
  puts "The professions are: #{MY_HASH["Profession"].join(", ")}"
end

# Create a method that takes in an array and returns the squared sum of its elements
def squared_sum(array)
  sum = 0
  array.each do |element|
    sum += element**2
  end
  return sum
end

# Call the method with an array as an argument and print the result
puts "The squared sum of [2, 4, 6] is: #{squared_sum([2, 4, 6])}"

# Use a while loop and break statement to iterate through the elements of the array and print only even numbers
i = 0
while i < MY_ARRAY.length
  if MY_ARRAY[i].even?
    puts "Even number: #{MY_ARRAY[i]}"
    break
  end
  i += 1
end

# Define a class named Person with attributes name and age
class Person
  # Use getter and setter methods to access and modify the attributes
  getter :name, :age
  setter :name, :age

  # Use a constructor to initialize the attributes
  def initialize(name, age)
    @name = name
    @age = age
  end

  # Define a method to print the person's name and age
  def print_info
    puts "Name: #{@name}"
    puts "Age: #{@age}"
  end
end

# Create new instances of the Person class and call methods on them
person1 = Person.new("Jane", 30)
person2 = Person.new("Alex", 25)
person1.print_info
person2.print_info

# Define a module for calculations
module Calculations
  # Define a method to calculate the square root of a number
  def self.square_root(number)
    return Math.sqrt(number)
  end

  # Define a method to calculate the factorial of a number
  def self.factorial(number)
    factorial = 1
    (1..number).each do |i|
      factorial *= i
    end
    return factorial
  end
end

# Use the methods from the Calculations module to calculate the square root and factorial of a number and print the results
puts "The square root of 25 is: #{Calculations.square_root(25)}"
puts "The factorial of 5 is: #{Calculations.factorial(5)}"

# Use a ternary operator to check if a number is even or odd and print the result
number = 4
(number.even?) ? (puts "#{number} is even") : (puts "#{number} is odd")