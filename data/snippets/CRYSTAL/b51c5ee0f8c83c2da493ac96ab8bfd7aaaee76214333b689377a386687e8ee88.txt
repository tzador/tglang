require "http/client" //Import the http client module

# Define a custom class named "User"
class User

  # Define a macro named "age_multiplier" with a parameter
  macro age_multiplier(factor : UInt32)
    # Implement the macro by multiplying the user's age by the given factor
    {{ age * factor }}
  end

  # Set up private variables for name, age, and address
  getter private var name : String
  getter private var age : UInt32
  getter private var address : String

  # Define a constructor method with parameters for name, age, and address
  def initialize(@name : String, @age : UInt32, @address : String)
  end

  # Define a method to return the user's name
  def get_name
    name
  end

  # Define a method to set the user's age
  def set_age(new_age : UInt32)
    # Check if the new age is higher than the current age
    if new_age > age
      # If so, use the age_multiplier macro to update the age
      @age = {% age_multiplier(new_age - age) %}
    else
      @age = new_age
    end
  end

end

# Create a new instance of the "User" class with a name, age, and address
user = User.new("John Doe", 25, "123 Main St.")

# Print the user's name
puts user.get_name  // Output: "John Doe"

# Set a new age for the user
user.set_age(30)  // Calls the age_multiplier macro to update the age to 150

# Print the user's age
puts user.age // Output: 150