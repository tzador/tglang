# A sample class for a university student
class Student

  # attributes of the class
  property name : String # name of the student
  property age : Int32 # age of the student
  property major : String # major of the student
  property gpa : Float64 # GPA of the student
  property credits : Int32 # number of credits the student has earned
  property graduation_year : Int32 # year the student is expected to graduate

  # constructor method with default values for attributes
  def initialize(@name = "John Doe", @age = 18, @major = "Undecided", @gpa = 0.0, @credits = 0, @graduation_year = Time.local.year + 4)
    # conditional statements to check for valid values
    if @age < 18
      raise "Student must be at least 18 years old"
    end
    if @gpa < 0 || @gpa > 4
      raise "GPA must be between 0.0 and 4.0"
    end
    if @credits < 0
      raise "Credits must be a positive number"
    end
  end

  # method to calculate the number of years until graduation
  def years_until_graduation
    @graduation_year - Time.local.year
  end

  # method to update student's major
  def change_major(new_major)
    @major = new_major
  end

  # method to add credits to student's total earned credits
  def add_credits(num_credits)
    @credits += num_credits
  end

  # method to calculate student's current academic standing
  def academic_standing
    if @gpa >= 3.5
      "Excellent"
    elsif @gpa >= 3.0
      "Good"
    elsif @gpa >= 2.5
      "Average"
    else
      "Below Average"
    end
  end
end

# example code to create a new student object with custom attributes
jane = Student.new(name: "Jane Smith", age: 20, major: "Computer Science", gpa: 3.5, credits: 60, graduation_year: 2022)

# example code to call methods on the student object
puts "#{jane.name} has #{jane.credits} credits and is currently in their #{jane.academic_standing} standing."