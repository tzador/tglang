# This is a program to perform a binary search on a sorted list of numbers
# Define a function to perform binary search
def binary_search(list, low, high, target)

  # Check if high pointer is greater than or equal to low pointer
  if(high >= low)
  
    # Calculate the mid index of the list
    mid = (low + high) / 2
    
    # Check if the mid element is equal to the target
    if(list[mid] == target)
    
      # If yes, return the mid index as the position of the target
      return mid
      
    # If the mid element is greater than the target
    elsif(list[mid] > target)
    
      # Recursive call to binary search function with new high index
      return binary_search(list, low, mid - 1, target)
      
    # If the mid element is smaller than the target
    else
    
      # Recursive call to binary search function with new low index
      return binary_search(list, mid + 1, high, target)
      
    # If the target is not found in the list, return -1
    else
      return -1
      
  # If the high pointer is smaller than the low pointer, the target is not in the list
  else
    return -1
    
# Driver code to test the binary search function
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
target = 6

# Call the binary search function and save the returned index in a variable
index = binary_search(numbers, 0, numbers.size - 1, target)

# Check if the returned index is not -1
if(index != -1)

  # If yes, print a success message with the index and target value
  puts "Found #{target} at position #{index + 1}."
  
else

  # If no, print a failure message
  puts "Target not found in the list."
  
end