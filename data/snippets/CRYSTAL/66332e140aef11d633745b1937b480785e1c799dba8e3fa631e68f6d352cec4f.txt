# This is a comment in CRYSTAL programming language

# Defining an abstract class named "Shape"
#
abstract class Shape
    # This is a property for storing the name of the shape
    # Type is String
    #
    property name : String

    # This is a property for storing the color of the shape
    # Type is String
    #
    property color : String

    # This is an abstract method for calculating the area of the shape
    # Parameters:
    # - self: the shape object
    # Return type is Float
    #
    abstract def area(self : self) : Float

    # This is an abstract method for calculating the perimeter of the shape
    # Parameters:
    # - self: the shape object
    # Return type is Float
    #
    abstract def perimeter(self : self) : Float
end

# Defining a concrete class named "Rectangle" that inherits from Shape
#
class Rectangle < Shape
    # This is a property for storing the length of the rectangle
    # Type is Float
    property length : Float

    # This is a property for storing the width of the rectangle
    # Type is Float
    property width : Float

    # This is the constructor method for creating instances of Rectangle class
    # Parameters:
    # - length: the length of the rectangle
    # - width: the width of the rectangle
    #
    def initialize(@length, @width)
        # Setting the name and color properties of the rectangle object
        @name = "Rectangle"
        @color = "Red"
    end

    # Implementing the area method for calculating the area of the rectangle
    #
    def area
        # Using basic arithmetic operations to calculate the area
        @length * @width
    end

    # Implementing the perimeter method for calculating the perimeter of the rectangle
    #
    def perimeter
        # Using basic arithmetic operations to calculate the perimeter
        2 * (@length + @width)
    end
end

# Creating a new instance of the Rectangle class named "my_rectangle"
#
my_rectangle = Rectangle.new(5.0, 3.0)

# Printing out the name and area of the rectangle
#
puts "Name: #{my_rectangle.name}"
puts "Area: #{my_rectangle.area}"