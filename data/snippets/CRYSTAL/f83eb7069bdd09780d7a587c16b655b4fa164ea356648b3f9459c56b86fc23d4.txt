class Box(T)
  @value : T
  def initialize(value : T)
    @value = value
  end

  **Returns the box's value**
  getter value
end

**A helper method to map an array to a new array based on a given function**
def map_array(arr : Array, func : Proc(T)) : Array
  result = [] of T
  for el in arr
    mapped_el = func.call(el)
    result << mapped_el
  end
  result
end

**A helper method to filter an array based on a given predicate function**
def filter_array(arr : Array, pred : Proc(T)) : Array
  result = [] of T
  for el in arr
    if pred.call(el)
      result << el
    end
  end
  result
end

**A helper method to reduce an array to a single value based on a given function**
def reduce_array(arr : Array, func : Proc(T, T)) : T
  result = arr.first

  for el in arr[1..-1]
    result = func.call(result, el)
  end
  result
end

# Example usage of the above helper methods

numbers = [1, 2, 3, 4, 5]

# Mapping the array to double each element
doubled_numbers = map_array(numbers, -> (num) { num * 2 })
puts doubled_numbers # [2, 4, 6, 8, 10]

# Filtering the array to only include even numbers
even_numbers = filter_array(numbers, -> (num) { num % 2 == 0 })
puts even_numbers # [2, 4]

# Reducing the array to its sum
sum = reduce_array(numbers, -> (sum, num) { sum + num })
puts sum # 15

# Creating a box with a string value
string_box = Box.new("Hello World")
puts string_box.value # "Hello World"

# Creating a box with a boolean value
bool_box = Box.new(true)
puts bool_box.value # true