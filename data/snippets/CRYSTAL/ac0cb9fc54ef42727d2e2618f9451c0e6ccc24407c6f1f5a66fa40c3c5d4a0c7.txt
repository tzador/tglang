abstract class Animal                     # Defines an abstract class "Animal"
  property name : String                  # Defines a property "name" as a String data type
  property is_hungry : Bool = true        # Defines a property "is_hungry" as a Bool data type with a default value of true
  
  abstract def speak                      # Defines an abstract method "speak" 
  
  def eat(food)                           # Defines a method "eat" that takes in a parameter "food"
    is_hungry = false                     # Changes the value of "is_hungry" to false
    puts "#{name} ate #{food}."           # Prints out a string with the "name" and "food" parameter
  end
  
  def sleep                              # Defines a method "sleep"
    puts "#{name} is sleeping."           # Prints out a string with the "name"
  end
end

class Dog < Animal                        # Defines a subclass "Dog" that inherits from the "Animal" class
  def initialize(name)                    # Defines an initialize method that takes in a parameter "name"
    @name = name                          # Assigns the "name" parameter to the "name" property
  end
  
  def speak                               # Defines the "speak" method
    puts "Woof!"                          # Prints out "Woof!"
  end
end

dog = Dog.new("Bailey")                    # Initializes a new instance of the "Dog" class with the name "Bailey"
dog.sleep                                  # Calls the "sleep" method, prints out "Bailey is sleeping."
dog.eat("bone")                            # Calls the "eat" method with a "bone" as the argument, prints out "Bailey ate bone."