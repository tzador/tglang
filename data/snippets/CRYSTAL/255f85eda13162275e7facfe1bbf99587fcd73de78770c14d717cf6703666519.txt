# This is a function that takes in an array of integers and a target value
# It uses a modified binary search to find the index of the target value in the array
# If the target value is not found, it returns -1
# @param nums [Array(Int32)] - the array of integers to search through
# @param target [Int32] - the value to search for in the array
# @returns [Int32] - the index of the target value in the array, or -1 if not found 
def binary_search(nums, target)
  left = 0  # the leftmost index of the array
  right = nums.size - 1  # the rightmost index of the array

  # loop until the left and right indices meet or overlap
  while left <= right
    mid = (left + right) / 2  # calculate the middle index

    # check if the target value is at the middle index
    if nums[mid] == target
      return mid  # return the index
    # check if the target value is less than the value at the middle index
    elsif target < nums[mid]
      right = mid - 1  # update the right index to the middle index - 1
    # check if the target value is greater than the value at the middle index
    else
      left = mid + 1  # update the left index to the middle index + 1
    end
  end

  # target value not found, return -1
  return -1
end

# Example usage
array = [1, 2, 3, 4, 5, 6]
target = 3
index = binary_search(array, target)  # returns 2
puts "Index of #{target} in #{array}: #{index}" # prints "Index of 3 in [1, 2, 3, 4, 5, 6]: 2"