# Module declaration
module Tree
  # Defining a class with multiple type parameters
  class Node(KeyType, ValueType)
    # Instance variables of the class
    @key : KeyType
    @value : ValueType
    @left_child : Node(KeyType, ValueType)?
    @right_child : Node(KeyType, ValueType)?
    
    # Default constructor
    def initialize(@key : KeyType, @value : ValueType)
      @left_child = nil
      @right_child = nil
    end
    
    # Method to add children to the node
    def add_children(left_child : Node, right_child : Node)
      @left_child = left_child
      @right_child = right_child
    end
    
    # Method to get the key of the node
    def get_key
      return @key
    end
    
    # Method to get the value of the node
    def get_value
      return @value
    end
    
    # Method to check if the node has a left child
    def has_left_child?
      return @left_child?
    end
    
    # Method to check if the node has a right child
    def has_right_child?
      return @right_child?
    end
    
    # Method to check if the node is a leaf node (has no children)
    def is_leaf?
      return !(@left_child? || @right_child?)
    end
  end
  
  # Defining a class to represent a binary tree
  class BinaryTree
    # Instance variable to store the root node
    @root : Node
    
    # Default constructor
    def initialize
      @root = nil
    end
    
    # Method to insert a node into the tree
    def insert(key : KeyType, value : ValueType)
      new_node = Node.new(key, value)
      
      # If the tree is empty, set the new node as the root
      if @root.nil?
        @root = new_node
      else
        # Get the current node
        current_node = @root
        
        # Loop until the new node is inserted
        loop do
          # If the new node's key is less than the current node's key,
          # check if the current node has a left child
          if key < current_node.get_key
            # If it doesn't, add the new node as the current node's left child
            if !current_node.has_left_child?
              current_node.add_children(new_node, nil)
              break
            # If it does, move to the left child and continue the loop
            else
              current_node = current_node.left_child
            end
          # If the new node's key is greater than the current node's key,
          # check if the current node has a right child
          elsif key > current_node.get_key
            # If it doesn't, add the new node as the current node's right child
            if !current_node.has_right_child?
              current_node.add_children(nil, new_node)
              break
            # If it does, move to the right child and continue the loop
            else
              current_node = current_node.right_child
            end
          # If the new node's key is equal to the current node's key, don't insert
          else
            break
          end 
        end
      end
    end
    
    # Method to search for a node with a given key
    def search(key : KeyType)
      # If the tree is empty, return nil
      if @root.nil?
        return nil
      else
        # Get the current node
        current_node = @root
        
        # Loop until the node with the given key is found
        loop do
          # If the key is equal to the current node's key, return the current node
          if key == current_node.get_key
            return current_node
          # If the key is less than the current node's key, move to the left child and continue the loop
          elsif key < current_node.get_key
            # If the current node has no left child, the key doesn't exist in the tree, return nil
            if !current_node.has_left_child?
              return nil
            # If it does, move to the left child and continue the loop
            else
              current_node = current_node.left_child
            end
          # If the key is greater than the current node's key, move to the right child and continue the loop
          else
            # If the current node has no right child, the key doesn't exist in the tree, return nil
            if !current_node.has_right_child?
              return nil
            # If it does, move to the right child and continue the loop
            else
              current_node = current_node.right_child
            end
          end
        end
      end
    end
    
    # Method to print the tree in order (left subtree, then root, then right subtree)
    def print_in_order(node = @root)
      # If the given node is not nil, print its left child first
      if !node.nil?
        print_in_order(node.left_child)
        # Print the root
        puts "#{node.get_key}: #{node.get_value}"
        # Print the right child
        print_in_order(node.right_child)
      end
    end
    
    # Method to print the tree in pre-order (root, then left subtree, then right subtree)
    def print_pre_order(node = @root)
      # If the given node is not nil, print the root first
      if !node.nil?
        # Print the root
        puts "#{node.get_key}: #{node.get_value}"
        # Print the left child
        print_pre_order(node.left_child)
        # Print the right child
        print_pre_order(node.right_child)
      end
    end
    
    # Method to print the tree in post-order (left subtree, then right subtree, then root)
    def print_post_order(node = @root)
      # If the given node is not nil, print its left child first
      if !node.nil?
        print_post_order(node.left_child)
        # Print the right child
        print_post_order(node.right_child)
        # Print the root
        puts "#{node.get_key}: #{node.get_value}"
      end
    end
  end
end

# Example usage

# Create a binary tree
tree = Tree::BinaryTree.new

# Insert some nodes with various keys and values into the tree
tree.insert(5, "apple")
tree.insert(3, "banana")
tree.insert(8, "orange")
tree.insert(1, "cherry")
tree.insert(4, "grape")
tree.insert(7, "peach")
tree.insert(9, "watermelon")

# Print the tree in order
puts "In order:"
tree.print_in_order

# Print the tree in pre-order
puts "\nPre order:"
tree.print_pre_order

# Print the tree in post-order
puts "\nPost order:"
tree.print_post_order

# Output:
# In order:
# 1: cherry
# 3: banana
# 4: grape
# 5: apple
# 7: peach
# 8: orange
# 9: watermelon

# Pre order:
# 5: apple
# 3: banana
# 1: cherry
# 4: grape
# 8: orange
# 7: peach
# 9: watermelon

# Post order:
# 1: cherry
# 4: grape
# 3: banana
# 7: peach
# 9: watermelon
# 8: orange
# 5: apple