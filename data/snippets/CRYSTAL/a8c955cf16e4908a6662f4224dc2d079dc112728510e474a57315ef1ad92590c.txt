# This is a simple class definition
class Animal
  # Define properties
  property name : String
  property species : String
  property age : Int32
  property sound : String
  property is_alive : Bool = true

  # Constructor
  def initialize(@name : String, @species : String, @age : Int32, @sound : String)
    @is_alive = true
  end

  # Define methods
  def make_sound
    puts "#{@name} makes a #{@sound} sound."
  end

  # Define a class method
  def self.all_species
    ["dog", "cat", "bird", "fish"]
  end
end

# Create an instance of the Animal class and call methods on it
my_dog = Animal.new("Spot", "dog", 5, "bark")
my_dog.make_sound()
my_dog.name = "Ruff"
puts my_dog.name  # Output: Ruff

# Use the class method to get all available species
puts Animal.all_species  # Output: ["dog", "cat", "bird", "fish"]

# Create a subclass of Animal
class Cat < Animal
  # Define additional properties
  property color : String
  property pattern : String

  # Constructor
  def initialize(@name : String, @age : Int32, @color : String, @pattern : String)
    super(@name, "cat", @age, "meow")
  end

  # Override make_sound method
  def make_sound
    puts "#{@name} the #{@color} cat makes a #{@sound} sound."
  end
end

# Create an instance of the Cat class and call methods on it
my_cat = Cat.new("Fluffy", 3, "orange", "striped")
my_cat.make_sound()  # Output: Fluffy the orange cat makes a meow sound.
my_cat.is_alive = false  # Set is_alive property to false
puts my_cat.is_alive  # Output: false