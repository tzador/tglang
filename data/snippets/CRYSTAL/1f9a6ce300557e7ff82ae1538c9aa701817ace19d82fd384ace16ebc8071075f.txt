# Define an abstract class named "Shape"
 
abstract class Shape
    # Define a class variable named "shapes" that is an empty array of Shapes
    @@shapes = [] of Shape
 
    # Define a class method named "add_shape" that takes in a parameter named "shape" and
    # adds it to the "shapes" array
    def self.add_shape(shape : Shape)
        @@shapes << shape
    end
 
    # Define an instance method named "initialize" that takes in two parameters, "color" and "area",
    # and sets them as instance variables
    def initialize(@color, @area)
    end
 
    # Define an instance method named "display_info" that prints out the color and area of the shape
    def display_info
        puts "#{@color} shape with an area of #{@area} units."
    end
 
    # Define an abstract instance method named "calculate_area"
    abstract def calculate_area : Float64
end
 
# Define a class named "Circle" that inherits from the "Shape" class
class Circle < Shape
    # Define a class instance variable named "PI" that is equal to 3.14159
    @PI = 3.14159
 
    # Define an instance method named "calculate_area" that calculates the area of a circle
    # using the formula "PI * r^2" where r is the radius
    def calculate_area
        @area = @PI * @radius**2
    end
end
 
# Define a class named "Rectangle" that inherits from the "Shape" class
class Rectangle < Shape
    # Define an instance method named "calculate_area" that calculates the area of a rectangle
    # using the formula "length * width"
    def calculate_area
        @area = @length * @width
    end
end
 
# Create a new instance of the "Circle" class and set the color to "blue" and the radius to 5
Circle.new("blue", 5).calculate_area
 
# Create a new instance of the "Rectangle" class and set the color to "red" and the length and width to 10
Rectangle.new("red", 10, 10).calculate_area
 
# Call the class method "add_shape" to add the two shapes to the "shapes" array
Shape.add_shape(Circle)
Shape.add_shape(Rectangle)
 
# Loop through the "shapes" array and call the instance method "display_info" for each shape
for shape in Shape.shapes
    shape.display_info
end