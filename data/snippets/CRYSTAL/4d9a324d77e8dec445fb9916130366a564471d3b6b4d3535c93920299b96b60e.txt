# This code snippet showcases the use of modules and classes in Crystal programming language

# Define a module named Math
module Math

  # Define a constant PI
  PI = 3.14159

  # Define a method to calculate the area of a circle
  # Takes in a radius as argument and returns the area as Float32
  def self.circle_area(radius)
    PI * radius * radius
  end
end

# Define a class named Shape
class Shape

  # Include the Math module to use its methods and constants
  include Math

  # Define a class variable
  @@count = 0

  # Define a constructor that takes in a name and a radius
  def initialize(name, radius)
    @name = name
    @radius = radius
    @@count += 1
  end

  # Define a getter method for the name attribute
  getter name

  # Define a setter method for the name attribute
  setter name=(new_name)

  # Define a getter method for the radius attribute
  getter radius

  # Define a setter method for the radius attribute
  setter radius=(new_radius)

  # Define a method to calculate the perimeter of a circle
  # Returns the perimeter as Float32
  def circle_perimeter
    2 * PI * @radius
  end

  # Define a method to get the total number of Shape objects created
  # Returns the value of the class variable @@count as Int32
  def self.get_count
    @@count
  end
end

# Create a new instance of Shape and set name to "Circle" and radius to 5
circle = Shape.new("Circle", 5)

# Call the circle_area method from the Math module on the circle instance
area = Math.circle_area(circle.radius)

# Print the area calculated
puts "The area of #{circle.name} with a radius of #{circle.radius} is #{area}."

# Call the circle_perimeter method on the circle instance
perimeter = circle.circle_perimeter

# Print the perimeter calculated
puts "The perimeter of #{circle.name} with a radius of #{circle.radius} is #{perimeter}."

# Call the get_count method on the Shape class
count = Shape.get_count

# Print the total number of Shape objects created
puts "There are #{count} Shape objects created."