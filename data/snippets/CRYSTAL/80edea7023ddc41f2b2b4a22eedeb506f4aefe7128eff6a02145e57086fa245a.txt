# This is an example of a complex code snippet in CRYSTAL
# It uses multiple functions to generate a list of prime numbers up to a given limit

# Helper function to check if a number is prime
def is_prime?(num)
  # Base cases
  return false if num < 2
  return true if num == 2 || num == 3
  return false if num % 2 == 0 || num % 3 == 0

  # Loop through potential divisors
  i = 5
  while i * i <= num
    return false if num % i == 0 || num % (i + 2) == 0
    i += 6
  end

  # If no divisors are found, number is prime
  return true
end

# Function to generate a list of prime numbers up to a given limit
def find_primes(limit)
  # Initialize empty list to store primes
  primes = []

  # Loop through numbers up to limit
  i = 2
  while i <= limit
    # Check if number is prime
    if is_prime?(i)
      # Add prime to list
      primes << i
    end
    i += 1
  end

  # Return list of primes
  return primes
end

# Call find_primes function with limit of 20
primes = find_primes(20)

# Print out list of primes
puts "Primes up to 20: #{primes.join(', ')}"