class Node
  @value : Int32
  @next : Node?
  
  # Initialize method
  def initialize(value : Int32)
    @value = value
  end

  # Getter method for 'next'
  def next
    @next
  end

  # Setter method for 'next'
  def next=(node : Node)
    @next = node
  end
end

class LinkedList
  @head : Node?
  @tail : Node?
  @size : Int32

  # Initialize method
  def initialize()
    @head = nil
    @tail = nil
    @size = 0
  end

  # Getter method for 'size'
  def size
    @size
  end

  # Method to add a node at the end of the list
  def add_end(value : Int32)
    # Create a new node
    new_node = Node.new(value)
    # Check if the list is empty
    if @head == nil
      # Set the new node as the head and tail of the list
      @head = new_node
      @tail = new_node
    else
      # Set the new node as the next node for the current tail
      @tail.next = new_node
      # Set the new node as the new tail
      @tail = new_node
    end
    # Increment the size of the list
    @size += 1
  end

  # Method to add a node at the beginning of the list
  def add_beginning(value : Int32)
    # Create a new node
    new_node = Node.new(value)
    # Check if the list is empty
    if @head == nil
      # Set the new node as the head and tail of the list
      @head = new_node
      @tail = new_node
    else
      # Set the new node as the next node for the current head
      new_node.next = @head
      # Set the new node as the new head
      @head = new_node
    end
    # Increment the size of the list
    @size += 1
  end

  # Method to remove a node from the end of the list
  def remove_end
    # Check if the list is empty
    if @size == 0
      return nil
    end
    # Check if there is only one element in the list
    if @size == 1
      # Set the head and tail to nil
      @head = nil
      @tail = nil
    else
      # Traverse the list to find the second to last node
      current = @head
      while current.next != @tail do
        current = current.next
      end
      # Set the tail to the second to last node
      @tail = current
      # Set the next node of the new tail to nil
      @tail.next = nil
    end
    # Decrement the size of the list
    @size -= 1
  end

  # Method to remove a node from the beginning of the list
  def remove_beginning
    # Check if the list is empty
    if @size == 0
      return nil
    end
    # Check if there is only one element in the list
    if @size == 1
      # Set the head and tail to nil
      @head = nil
      @tail = nil
    else
      # Set the next node of the current head as the new head
      @head = @head.next
    end
    # Decrement the size of the list
    @size -= 1
  end

  # Method to print the list
  def print_list
    # Check if the list is empty
    if @head == nil
      puts "List is empty."
      return
    end

    # Start at the head of the list
    current = @head
    # Loop through each node and print the value
    while current != nil do
      puts current.value
      current = current.next
    end
  end
end

# Create a new linked list
list = LinkedList.new
# Add nodes to the end of the list
list.add_end(5)
list.add_end(10)
# Print the list
list.print_list
# Output: 
# 5
# 10
# Add nodes to the beginning of the list
list.add_beginning(3)
list.add_beginning(1)
# Print the list
list.print_list
# Output:
# 1
# 3
# 5
# 10
# Remove nodes from the end of the list
list.remove_end
# Print the list
list.print_list
# Output:
# 1
# 3
# Remove nodes from the beginning of the list
list.remove_beginning
# Print the list
list.print_list
# Output:
# 3