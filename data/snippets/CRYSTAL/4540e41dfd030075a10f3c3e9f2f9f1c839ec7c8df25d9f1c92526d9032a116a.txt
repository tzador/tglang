# This is a comment in CRYSTAL

# Define a generic class with a type constraint
class Container(T)
  
  # Define a getter for the 'value' property
  getter value : T

  # Define a method to set the 'value' property, taking in a value of type T
  def initialize(input_value : T)
    @value = input_value
  end

  # Define a method to transform the 'value' property, taking in a block of code
  def transform(&block : T -> T)
    @value = yield(@value)
  end

  # Define a method to print the current value of 'value'
  def print_value
    puts "Current value: #{@value}"
  end

  # Define a method to check if the 'value' property is greater than a given limit
  def greater_than?(limit : T) : Bool
    @value > limit
  end

end

# Create an instance of Container with type String and assign the value "Crystal"
container = Container(String).new("Crystal")

# Call the print_value method
container.print_value # Output: Current value: Crystal

# Use the transform method to add "Programming Language" to the current value
container.transform do |value|
  value + " Programming Language"
end

# Call the print_value method again
container.print_value # Output: Current value: Crystal Programming Language

# Check if the value is greater than the limit of 5 characters
container.greater_than?(5) # Output: true