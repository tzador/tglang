require "json"

# Creates a class named `Person`
class Person
  # Attribute reader for `name` and `age` attributes
  @[AlwaysValidate]
  property name : String
  property age : Int32
end

# Creates a class named `Employee` that inherits from `Person`
class Employee < Person
  # Holds a hash of employee details
  @[AlwaysValidate]
  @@details : Hash(String, String) = {}

  # Initializes a new `Employee` object
  def initialize(@name : String, @age : Int32, employee_id : String)
    @employee_id = employee_id
    super(@name, @age)
  end

  # Uses the `json` module to serialize employee details to JSON format
  def serialize_details
    JSON.generate(@@details)
  end

  # Adds a new detail to the `@details` hash
  def add_detail(name : String, value : String)
    @@details[name] = value
  end

  # Retrieves a specific detail value from the `@details` hash
  def get_detail(name : String)
    @@details[name]
  end

  # Updates an existing detail value in the `@details` hash
  def update_detail(name : String, value : String)
    @@details[name] = value
  end

  # Deletes a specific detail from the `@details` hash
  def delete_detail(name : String)
    @@details.delete(name)
  end
end

# Creates a new `Employee` object named `John` with age 25 and employee ID J001
john = Employee.new("John", 25, "J001")

# Adds a new detail to the `@details` hash
john.add_detail("Position", "Manager")

# Updates an existing detail value in the `@details` hash
john.update_detail("Position", "Senior Manager")

# Retrieves the employee's age from the `@details` hash
john.get_detail("Age")

# Deletes the `position` detail from the `@details` hash
john.delete_detail("Position")

# Serializes the employee's details to JSON format
json_details = john.serialize_details