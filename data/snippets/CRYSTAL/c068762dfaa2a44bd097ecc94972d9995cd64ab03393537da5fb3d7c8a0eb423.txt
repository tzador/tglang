# `Locate Module` is used to find a specific module in the Crystal language.
# It takes in a module name as a `String` and returns the module if found. 
# A `ModuleNotFoundError` exception is raised if the module is not found.
def locate_module(module_name : String)
  found_module = Module.const_get(module_name) rescue ModuleNotFoundError
  return found_module
end

# `ModuleNotFoundError` is a custom error class, inherited from `StandardError` to handle errors related to finding a module.
class ModuleNotFoundError < StandardError
  def message
    "The specified module was not found."
  end
end

# In this example, we are trying to locate the `String` module in the Crystal language.
# `String` is a built-in module in Crystal that provides methods for working with strings.
located_module = locate_module("String")

# If the `located_module` is not an instance of `ModuleNotFoundError`, we know that the module was successfully found.
if located_module.instance_of?(ModuleNotFoundError)
  puts "The `String` module was not found."
else
  puts "The `String` module was successfully found."
end