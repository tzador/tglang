# Here we define a recursive function that takes in two integer arguments,
# and returns the smaller of the two.
def smaller(x : Int32, y : Int32) : Int32
  # First, we will check if x is equal to y.
  if x == y
    # If they are equal, we return x as the smaller value.
    return x
  # If x is smaller than y, we will return x as the result.
  elsif x < y
    return x
  # If y is smaller than x, we will return y as the result.
  else
    return y
  end
end

# Now we will define a method that takes in an array of integers and returns the smallest integer in the array.
def find_smallest(array : Array(Int32)) : Int32
  # If the array is empty, we will return an error message.
  if array.empty?
    puts "Error: Array is empty."
    exit
  end

  # If the array only has one element, we will return that element as the smallest value.
  if array.size == 1
    return array[0]
  end

  # Otherwise, we will split the array into two halves.
  left_half = array[0...array.size / 2]
  right_half = array[array.size / 2...array.size]

  # We will recursively call the find_smallest method on each half, and return the smaller value between the two.
  return smaller(find_smallest(left_half), find_smallest(right_half))
end

# Let's test our method with some sample arrays.
puts find_smallest([5, 1, 10, 2, 3]) # Output: 5
puts find_smallest([9, 8, 7, 6, 5, 4]) # Output: 4
puts find_smallest([10, 20, 30]) # Output: 10
puts find_smallest([]) # Output: Error: Array is empty.