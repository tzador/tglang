# This is a complex algorithm in CRYSTAL language.

# Define a Module for the algorithm
module MyAlgorithm

  # Define a Class for the algorithm
  class MyAlgorithm

    # Define a Constant for the algorithm
    INPUT_SIZE = 10

    # Define a Method for the algorithm
    # Takes in an array of input numbers and returns the sum
    def self.sum(input_numbers : Array(Int32)) : Int32

      # Initialize a local variable to hold the sum
      sum = 0

      # Loop through the input array
      input_numbers.each do |num|

        # Add the current number to the sum
        sum += num
      end

      # Return the sum
      sum
    end

    # Define a Run method for the algorithm
    # Takes in a starting number and runs the algorithm until it reaches 0
    def self.run(start_num : Int32) : Array(Int32)

      # Create an empty array to hold the output
      output = []

      # Loop while the starting number is greater than 0
      while start_num > 0
        # Add the starting number to the output array
        output << start_num

        # Use the sum method to calculate and update the starting number
        start_num = sum([start_num - 1, INPUT_SIZE])
      end

      # Return the output array
      output
    end
  end
end

# Call the run method from MyAlgorithm class with starting number of 5 and print the output
puts MyAlgorithm::MyAlgorithm.run(5)