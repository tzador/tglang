# This is a complex Crystal code snippet that uses macros and advanced type declarations

# Define a macro that takes in a type and creates a custom getter function for that type
macro create_getter(type)
  def getter(name : Symbol, obj : {{type}})
    obj.instance_variable_get(name)
  end
end

# Define a custom struct type that contains a string and an integer field
struct User
  name : String
  age : Int32
end

# Use the macro to create a custom getter function for the User type
create_getter(User)

# Create a new User instance
user = User.new("John", 25)

# Call the custom getter function to retrieve the name field
user.getter(:@name) # This will return "John"

# Create an array of User type instances
users = [] of User 

# Use a for loop to add multiple User instances to the array
for i in 0..9 
  # Use the macro to create a custom getter function for each User instance
  create_getter(users[i])
  
  # Set the name and age fields for each User instance
  users[i].name = "User #{i}"
  users[i].age = i + 10
end

# Use another for loop to print the name and age fields for each User instance
for user in users
  # Use the custom getter function to retrieve the name and age fields
  puts user.getter(:@name)
  puts user.getter(:@age)
end

# Output:
# User 0
# 10
# User 1
# 11
# User 2
# 12
# User 3
# 13
# User 4
# 14
# User 5
# 15
# User 6
# 16
# User 7
# 17
# User 8
# 18
# User 9
# 19