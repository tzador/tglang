class Hero
    # This class represents a hero character
    property name : String
    property hp : Int32
    property strength : Int32
    property speed : Int32
    property mana : Int32

    # Initializes the hero with the given name and base stats
    def initialize(name : String, hp : Int32, strength : Int32, speed : Int32, mana : Int32)
        @name = name
        @hp = hp
        @strength = strength
        @speed = speed
        @mana = mana
    end

    # Method to attack the enemy with a basic sword attack
    def sword_attack(enemy : Hero)
        # Calculates the damage done by the attack
        damage = (@strength * 2) - (enemy.strength / 2)

        # Reduces the enemy's hp by the calculated damage
        enemy.hp -= damage

        # Prints the attack message
        puts "#{@name} attacks #{enemy.name} with a sword for #{damage} damage!"
    end

    # Method to cast a spell using mana
    def cast_spell(enemy : Hero)
        # Checks if the hero has enough mana to cast the spell
        if @mana >= 10
            # Calculates the damage done by the spell
            damage = @mana * 2

            # Reduces the enemy's hp by the calculated damage
            enemy.hp -= damage

            # Reduces the hero's mana by 10
            @mana -= 10

            # Prints the spell casting message
            puts "#{@name} casts a spell on #{enemy.name} for #{damage} damage!"

        else
            # Prints an error message if the hero does not have enough mana
            puts "#{@name} does not have enough mana to cast a spell!"
        end
    end
end

# Creates a new hero with the name "Bob" and base stats
hero1 = Hero.new("Bob", 100, 50, 30, 100)

# Creates a new hero with the name "Alice" and base stats
hero2 = Hero.new("Alice", 80, 40, 50, 120)

# Calls the sword_attack method on hero1, passing in hero2 as the enemy
hero1.sword_attack(hero2)

# Prints the current hp of hero2
puts "Hero2's current hp: #{hero2.hp}"

# Calls the cast_spell method on hero2, passing in hero1 as the enemy
hero2.cast_spell(hero1)

# Prints the current mana of hero2
puts "Hero2's current mana: #{hero2.mana}"