# This is a sample CRYSTAL code snippet that implements a merge sort algorithm
# It takes in an array and returns a sorted array using the divide and conquer approach

# Define a method to perform the merge step of the algorithm
def merge(left, right : Array(Int)) : Array(Int)
  result = Array.new

  # Iterate through the left and right arrays, comparing and merging them
  while left.any? && right.any? do
    if left.first <= right.first
      result << left.shift # Shift removes the first element from the array
    else
      result << right.shift
    end
  end

  # If any elements still remain in the left array, add them to the result
  while left.any?
    result << left.shift
  end

  # If any elements still remain in the right array, add them to the result
  while right.any?
    result << right.shift
  end

  # Return the sorted array
  result
end

# Define a method to perform the divide step of the algorithm
def divide(array : Array(Int)) : Array(Int)
  # If the array only has one or zero elements, it is already sorted
  if array.size <= 1
    return array
  end

  # Otherwise, split the array in half and recursively call the divide method
  middle = array.size / 2
  left = divide(array[0, middle])
  right = divide(array[middle, array.size - middle])

  # Return the result of merging the two divided arrays
  merge(left, right)
end

# Example usage of the merge sort algorithm
array = [9, 2, 7, 4, 5, 1, 3, 8, 6, 0]
sorted_array = divide(array)
puts "Sorted Array: " + sorted_array.to_s # Output: Sorted Array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]