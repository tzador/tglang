# This code snippet implements a simple binary search algorithm
# using recursion.

# Define a method to perform a binary search recursively
def binary_search(array : Array(Int32), value : Int32, low : Int32, high : Int32) : Int32

  # Check if the lower bound is within the array's bounds
  if low <= high

    # Calculate the middle index
    mid = (high + low) / 2

    # Check if the value is equal to the value at the middle index
    if value == array[mid]

      # Return the index of the value
      return mid

    # Check if the value is less than the value at the middle index
    # If so, search the left half of the array
    elsif value < array[mid]

      # Make a recursive call to binary_search with updated high bound
      binary_search(array, value, low, mid - 1)

    # Check if the value is greater than the value at the middle index
    # If so, search the right half of the array
    else

      # Make a recursive call to binary_search with updated low bound
      binary_search(array, value, mid + 1, high)

    end

  # If the lower bound is greater than the upper bound,
  # the value cannot be found in the array
  else

    # Return an error message
    return "Value not found in given array"

  end

end

# Create an array of sorted integers to search
array = [1, 3, 5, 7, 9, 11, 13, 15]

# Call the binary_search method
result = binary_search(array, 7, 0, array.size - 1)

# Print the result
puts "The value 7 is at index #{result} in the given array"