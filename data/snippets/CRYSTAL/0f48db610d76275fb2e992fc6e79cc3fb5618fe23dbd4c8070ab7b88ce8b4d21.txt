# This is a complex function in CRYSTAL that calculates the nth Fibonacci number
# It uses memoization to improve performance
# Input: n - the position of the Fibonacci number to be calculated
# Output: the nth Fibonacci number

# Define an array to store already calculated Fibonacci numbers
memo = Array(Int64).new

# Create a method to calculate the Fibonacci number at position n
def fibonacci(n)
  # Check if the Fibonacci number at position n has already been calculated
  if memo[n] != nil
    return memo[n]
  end
  
  # Calculate the Fibonacci number at position n through recursion
  if n == 1 || n == 2
    # Base cases
    return 1
  else
    memo[n] = fibonacci(n-1) + fibonacci(n-2)
    return memo[n]
  end
end

# Call the Fibonacci function and print the result
puts fibonacci(10)  # Output: 55

# The code above generates the following sequence:
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55
# Each number is the sum of the previous two numbers in the sequence