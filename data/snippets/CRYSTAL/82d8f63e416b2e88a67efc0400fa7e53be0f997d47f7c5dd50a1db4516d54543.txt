# This is a code snippet in CRYSTAL
# It uses a complex algorithm to calculate the nth power of a number
def nth_power(n, num)
  # check for special cases
  return 1 if n == 0
  return num if n == 1

  # create an array to store powers, initialize with first two powers
  powers = [] of Int32
  powers[0] = 1
  powers[1] = num

  # loop through remaining powers
  (2..n).each do |i|
    # initialize power to 1
    power = 1

    # multiply previous power by num (using built-in multiplication operator *)
    power *= powers[i-1]

    # loop from 1 to num
    (1..num).each do
      # multiply power by num (using built-in multiplication operator *)
      power *= num
    end

    # add power to array
    powers[i] = power
  end

  # return the nth power
  return powers[n]
end

# Example usage
nth_power(5, 2) #=> 32
nth_power(10, 3) #=> 59049