# This code snippet generates a complex multidimensional array
#
# `my_array` is the main array that will store all the values
#
# `dimensions` is an array that will contain the number of dimensions for each nested array
#
# `current_position` is an array that will keep track of the current position while iterating through the dimensions of the nested arrays
#

my_array : Array
dimensions : Array(Int32)
current_position : Array(Int32)

# initialize `my_array` with a null value
my_array = Array.new(1) { nil }

# set the number of dimensions for each nested array
dimensions = [3, 4, 5]

# initialize `current_position` with `0` for each dimension
current_position = [0, 0, 0]

# loop through each dimension of `dimensions`
dimensions.each do |dimension|
  # loop through each index in the current dimension
  for i in 0...dimension

    # initialize an empty array to be a nested array in `my_array`
    nested_array = Array.new(dimension) { nil }

    # set the `current_position` value at the current dimension to be the current index
    current_position[dimensions.index(dimension)] = i

    # loop through the remaining dimensions
    for j in (dimensions.index(dimension) + 1)...dimensions.size
      # initialize an empty array to be a nested array in `nested_array`
      temp_array = Array.new(dimensions[j]) { nil }

      # set the `current_position` value at the current dimension to be the current index
      current_position[j] = i

      # insert the `temp_array` into the current `nested_array` at the corresponding `current_position`
      nested_array.insert(current_position[j], temp_array)
    end

    # insert the `nested_array` into the current `my_array` at the corresponding `current_position`
    my_array.insert(current_position[dimensions.index(dimension)], nested_array)
  end
end

# print `my_array` to see the final result
p my_array