# This is a complex function that returns the nth Fibonacci number
# INPUT: n - the index of the Fibonacci number to be returned
# OUTPUT: the nth Fibonacci number
def fibonacci(n)
  if n <= 2
    return 1
  else
    return fibonacci(n-1) + fibonacci(n-2)
  end
end

# This is a helper function to calculate the factorial of a number
# INPUT: num - the number to calculate the factorial of
# OUTPUT: the factorial of the input number
def factorial(num)
  if num <= 1
    return 1
  else
    return num * factorial(num-1)
  end
end

# This function generates the Pascal's triangle up to a given number of rows
# INPUT: rows - the number of rows to generate in the triangle
# OUTPUT: an array of arrays representing the Pascal's triangle
def generate_pascals_triangle(rows)
  triangle = []
  for i in 1..rows do
    row = []
    for j in 0..i-1 do
      if j == 0 || j == i-1
      row << 1
      else
      row << triangle[i-2][j-1] + triangle[i-2][j]
      end
    end
    triangle.push(row)
  end
  return triangle
end

# This is a complex class that represents a point in 3D space
class Point3D
  # The x-coordinate of the point
  property x : Int32
  # The y-coordinate of the point
  property y : Int32
  # The z-coordinate of the point
  property z : Int32

  # The constructor for the Point3D class
  # INPUT: x - the x-coordinate of the point
  #        y - the y-coordinate of the point
  #        z - the z-coordinate of the point
  # OUTPUT: an instance of the Point3D class
  def initialize(@x : Int32, @y : Int32, @z : Int32)
  end

  # This function returns the distance between two points in 3D space
  # INPUT: point - the other point in 3D space to calculate the distance to
  # OUTPUT: the distance between the two points
  def distance_to(point)
    return Math.sqrt((point.x - @x) ** 2 + (point.y - @y) ** 2 + (point.z - @z) ** 2)
  end

  # This function converts the point to a tuple
  # OUTPUT: a tuple representation of the point
  def to_tuple
    return {@x, @y, @z}
  end
end

# This is a complex function that generates a random password
# INPUT: length - the length of the password to be generated
# OUTPUT: a random password of the specified length
def generate_random_password(length)
  characters = ('a'..'z').to_a + (0..9).to_a - ['o', 'i']
  password = ""
  for i in 1..length do
    password << characters.sample.to_s
  end
  return password
end

# This is a complex block that sorts an array using the quicksort algorithm
# INPUT: array - the array to be sorted
# OUTPUT: the sorted array
def quicksort(array)
  if array.size <= 1
    return array
  end

  pivot = array.pop
  less = []
  more = []
  for i in 0..array.size-1 do
    if array[i] <= pivot
      less << array[i]
    else
      more << array[i]
    end
  end
  return quicksort(less) + [pivot] + quicksort(more)
end

# This is a complex function that converts a string to title case
# INPUT: str - the string to be converted
# OUTPUT: the title case version of the input string
def to_title_case(str)
  words = str.downcase.split
  title_case = words.each do |word|
    word.capitalize!
  end
  return title_case.join(" ")
end

# This is a complex function that checks if a string is a palindrome
# INPUT: str - the string to be checked
# OUTPUT: true if the string is a palindrome, false if it is not
def is_palindrome(str)
  return str == str.reverse
end