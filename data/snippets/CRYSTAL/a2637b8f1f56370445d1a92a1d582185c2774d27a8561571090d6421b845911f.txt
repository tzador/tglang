class Company
  
  # Schema definition
  schema id : Int32
  name : String
  employees : Array(Employee)

  # Initialize method
  def initialize(@id : Int32, @name : String, @employees : Array(Employee))
  end

  # Method to add new employee
  def add_employee(employee : Employee)
    @employees << employee
  end

  # Method to check if company has a specific employee
  def has_employee?(employee_name : String) : Bool
    return employees.any? { |employee| employee.name == employee_name }
  end

  # Method to calculate total salary of all employees
  def total_salary : Float64
    total = 0.0
    employees.each do |employee|
      total += employee.salary
    end
    return total
  end

end

class Employee
  
  # Schema definition
  schema id : Int32
  name : String
  salary : Float64

  # Initialize method
  def initialize(@id : Int32, @name : String, @salary : Float64)
  end

  # Method to calculate yearly bonus for employee
  def calculate_bonus : Float64
    return salary * 0.10
  end
end

# Create new company
company = Company.new(1, "ABC Corporation", [])
# Add new employees
company.add_employee(Employee.new(1, "John Smith", 50000.0))
company.add_employee(Employee.new(2, "Jane Doe", 60000.0))
company.add_employee(Employee.new(3, "Bob Johnson", 75000.0))

# Check if company has employee "John Smith"
company.has_employee?("John Smith") # returns true

# Calculate total salary of all employees
company.total_salary # returns 185000.0

# Calculate bonus for employee "Jane Doe"
employee = company.employees.select { |employee| employee.name == "Jane Doe"}[0] # returns employee with name "Jane Doe"
employee.calculate_bonus # returns 6000.0