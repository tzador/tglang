# This is a function that checks if a given number is prime
# and returns true if it is, otherwise returns false
# @param n [Int32] The number to check
# @return [Bool] Boolean value representing if the number is prime or not
def is_prime(n)
    # Check if the number is less than or equal to 1,
    # since we know these are not prime numbers
    if n <= 1
        # Return false since the number is not prime
        return false
    # Check if the number is equal to 2,
    # since we know this is the only even prime number
    elsif n == 2
        # Return true since 2 is a prime number
        return true
    # Check if the number is even,
    # since we know all even numbers (except 2) are not prime
    elsif n % 2 == 0
        # Return false since the number is even and not 2
        return false
    else
        # Create a loop to check all odd numbers from 3 up to the square root of n
        # We only need to check odd numbers since we already checked even numbers
        # and any prime factor larger than the square root of n would have a corresponding factor below the square root
        for i in 3..Math.sqrt(n).to_i step 2
            # Check if n is divisible by the current odd number (i)
            if n % i == 0
                # Return false since n is divisible and therefore not a prime number
                return false
            end
        end
        # If we reach this point, it means n is not divisible by any odd number less than or equal to its square root
        # Hence, we can conclude that n is a prime number and return true
        return true
    end
end