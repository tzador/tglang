# This is a complex code snippet in the programming language 'Crystal'
# It uses control structures and functions to create a recursive Fibonacci sequence

# Define a function that takes in a number as a parameter and returns the Fibonacci sequence up to that number
def fibonacci(num)

  # Use a conditional to check if number is less than or equal to 1, which is the base case for the recursion
  if num <= 1
    # Return the base case values of 0 and 1
    return [0, 1]
  else
    # If the number is greater than 1, use recursion to generate the Fibonacci sequence
    # Create an empty array to store the sequence values
    fib_sequence = []

    # Call the fibonacci function recursively, passing in the previous two numbers in the sequence
    # The first number will be the second element in the array and the second number will be the first element
    fib_sequence.unshift(fibonacci(num-1)[1])
    fib_sequence.unshift(fibonacci(num-1)[0])

    # Use a loop to continue adding numbers to the sequence until we reach the given number
    # The loop starts at 2 because the first two numbers in the sequence are already stored in the array
    for i in 2..num
      # To find the next number in the sequence, we add the previous two numbers together
      next_num = fib_sequence[i-1] + fib_sequence[i-2]
      # Add the next number to the end of the array
      fib_sequence << next_num
    end

    # Return the complete Fibonacci sequence as an array
    return fib_sequence
  end
end

# Call the fibonacci function with a value of 10 and print the result
p fibonacci(10)

# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]