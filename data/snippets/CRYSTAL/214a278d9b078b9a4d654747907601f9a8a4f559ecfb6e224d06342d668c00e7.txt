#Defining a class with a generic type T
class Node(T)
  #Initializing instance variables of type T
  @data : T
  @next : Node(T)

  #Creating a constructor to set initial values
  def initialize(data : T, next : Node(T)? = nil)
    @data = data
    @next = next
  end

  #Creating a method that returns the next node
  def get_next : Node(T)?
    return @next
  end

  #Creating a method that returns the data
  def get_data : T
    return @data
  end
end

#Creating a linked list using the Node class
class LinkedList(T)
  #Initializing instance variables
  @head : Node(T)?
  @size : Int32

  #Creating a constructor to set initial values
  def initialize(data : T? = nil)
    #If data is provided, create a new node with the data
    if data != nil
      @head = Node(T).new(data)
      @size = 1
    else
      @head = nil
      @size = 0
    end
  end

  #Creating a method to add a new node to the end of the linked list
  def add(data : T) : Void
    #If the list is empty, set the head to a new node with the data
    if @head == nil
      @head = Node(T).new(data)
      @size = 1
    #If the list is not empty, traverse to the end and add the new node
    else
      current = @head
      while current.get_next != nil
        current = current.get_next
      end
      current.next = Node(T).new(data)
      @size += 1
    end
  end

  #Creating a method to remove a node from the linked list
  def remove(data : T) : Void
    #If the list is empty, return
    if @head == nil
      return
    #If the head contains the same data as the node to be removed, set the head to the next node
    #and decrement the size
    elsif @head.get_data == data
      @head = @head.get_next
      @size -= 1
    #If the data is not in the head, traverse through the list to find the node with the data
    else
      current = @head
      while current.get_next != nil && current.get_next.get_data != data
        current = current.get_next
      end
      #If the data is found, set the next node to the one after the current node and decrement the size
      if current.get_next != nil
        current.next = current.get_next.get_next
        @size -= 1
      end
    end
  end

  #Creating a method to get the size of the linked list
  def size : Int32
    return @size
  end

  #Creating a method to print the linked list
  def print_list : Void
    #If the list is empty, return
    if @head == nil
      return
    #If the list is not empty, use a loop to traverse through the list and print the data
    else
      current = @head
      while current != nil
        puts "#{current.get_data} "
        current = current.get_next
      end
    end
  end

end

#Creating a new linked list of strings
list = LinkedList(String).new

#Adding nodes to the list
list.add("hello")
list.add("world")
list.add("!")

#Printing the size of the list
puts list.size #Output: 3

#Removing a node from the list
list.remove("world")

#Printing the list
list.print_list #Output: hello !