# A complex code snippet in CRYSTAL language
# This code uses a combination of control structures and built-in functions
# to create a complex algorithm for calculating factorial of a number.

# Define a function to calculate factorial recursively
def factorial(n)
  if n == 0
    return 1
  else
    return n * factorial(n-1)
  end
end

# Get user input for the number
print "Enter a number: "
input = gets.to_i

# Use a ternary operator to check if input is greater than 1
# If true, call the factorial function and store the result in a variable
# If false, set the result to 1
result = input > 1 ? factorial(input) : 1

# Print the result
puts "Factorial of #{input} is #{result}"

# Define a constant array with prime numbers
PRIMES = [2, 3, 5, 7, 11, 13]

# Use a loop to check if the result is a prime number
# If yes, print a message with the prime number
for prime in PRIMES do
  if result == prime
    puts "#{result} is a prime number!"
    break
  end
end

# Use the 'times' method to print a countdown from 10 to 1
10.times do |i|
  puts "#{10-i}..."
end

# Use the 'upto' method to print the first 5 even numbers starting from 2
2.upto(10) do |i|
  if i % 2 == 0
    puts i
  end
end