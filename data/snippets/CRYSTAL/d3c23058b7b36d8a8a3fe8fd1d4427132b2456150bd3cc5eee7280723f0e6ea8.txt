# This is a function that checks if a given number is prime or not
# It takes in a single argument, which is the number to be checked
def is_prime(number : Int) : Bool
    # Initialize a boolean variable to store the result
    prime : Bool = true
    # Loop through all numbers from 2 to the square root of the given number
    # Square root is used to reduce the number of iterations
    for i in 2 ... Math.sqrt(number).ceil do
        # Check if the given number is divisible by the current number in the loop
        if number % i == 0
            # If it is divisible, then the number is not prime
            prime = false
            # Exit the loop to avoid unnecessary iterations
            break
        end
    end
    # Return the boolean result
    prime
end

# This is a helper function to generate a list of prime numbers within a given range
# It takes in two arguments, start and end of the range
def generate_primes(start : Int, end : Int) : Array(Int)
    # Initialize an empty array to store the prime numbers
    primes : Array(Int) = [] of Int32
    # Loop through all numbers within the given range
    for i in start .. end
        # Check if the current number is prime by calling the is_prime function
        if is_prime(i)
            # If it is prime, add it to the array
            primes.push(i)
        end
    end
    # Return the array of prime numbers
    primes
end

# Print a list of prime numbers between 2-100 using the helper function
puts "Prime numbers between 2-100:"
# Call the generate_primes function with the given range as arguments
puts generate_primes(2, 100)