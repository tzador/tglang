# This is a complex code snippet in CRYSTAL language

# Initialize variables
var1 : Int32 = 5
var2 : Int32 = 10

# Define methods
def add(x : Int32, y : Int32) : Int32
  return x + y
end

def multiply(x : Int32, y : Int32) : Int32
  return x * y
end

# Call methods and store results in variables
result1 = add(var1, var2)
result2 = multiply(var1, var2)

# Print results
puts "The result of adding var1 and var2 is: #{result1}"
puts "The result of multiplying var1 and var2 is: #{result2}"

# If statement
if result1 > result2
  puts "#{result1} is greater than #{result2}"
elsif result1 < result2
  puts "#{result2} is greater than #{result1}"
else
  puts "The two results are equal"
end

# While loop
counter : Int32 = 0
while counter < 10 do
  puts "Counter is currently at #{counter}"
  counter += 1
end

# Array
fruits : Array(String) = ["apple", "orange", "banana"]

# For loop
for fruit in fruits do
  puts "I like #{fruit}s"
end

# String interpolation
name : String = "John"
puts "Hello #{name}, how are you?"

# Struct
struct Person
  name : String
  age : Int32
end

# Create instance of Person struct
person1 = Person.new("Sarah", 25)

# Print person's name and age
puts "The person's name is #{person1.name} and their age is #{person1.age}"

# Exception handling
begin
  # Divide by zero to generate an error
  5 / 0
rescue ex
  puts "An error occurred: #{ex.message}"
end

# Class
class Vehicle
  # Class variable
  @@num_vehicles : Int32 = 0

  # Constructor with instance variables
  def initialize(model : String, year : Int32)
    @model = model
    @year = year
    @@num_vehicles += 1
  end

  # Class method
  def self.num_vehicles
    @@num_vehicles
  end

  # Instance method
  def print_details
    puts "Model: #{@model}"
    puts "Year: #{@year}"
  end
end

# Inherit from the Vehicle class
class Car < Vehicle
  # Constructor with instance variable
  def initialize(model : String, year : Int32)
    @model = model
    @year = year
  end

  # Override print_details method
  def print_details
    puts "This is a car!"
    puts "Model: #{@model}"
    puts "Year: #{@year}"
    puts "Number of vehicles created: #{Vehicle.num_vehicles}"
  end
end

# Create instance of Car class
car = Car.new("Mustang", 2010)

# Call print_details method
car.print_details