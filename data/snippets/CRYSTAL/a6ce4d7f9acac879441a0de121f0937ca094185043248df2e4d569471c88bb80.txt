# This code snippet is a complex sorting algorithm in Crystal
# It takes in an array of integers and returns the sorted array in ascending order

class SortingAlgorithm

  # the sort function takes in an array of integers and returns the sorted array
  def sort(array : Array(Int)) : Array(Int)
    return quick_sort(array, 0, array.size - 1) # call the quick_sort function with starting and ending indexes
  end

  # the partition function arranges the array elements such that elements smaller than pivot are on the left and larger ones are on the right
  def partition(array : Array(Int), low : Int, high : Int) : Int
    pivot = array[high] # select the last element as pivot
    i = low - 1 # index of smaller element
    for j in low ... high
      if array[j] < pivot
        i += 1
        array[i], array[j] = array[j], array[i] # swap elements
      end
    end
    array[i + 1], array[high] = array[high], array[i + 1] # swap pivot to its correct position
    return i + 1
  end

  # the quick_sort function recursively calls partition function to sort the sub-arrays
  def quick_sort(array : Array(Int), low : Int, high : Int) : Array(Int)
    if low < high
      pi = partition(array, low, high) # find pivot index
      quick_sort(array, low, pi - 1) # sort elements before pivot
      quick_sort(array, pi + 1, high) # sort elements after pivot
    end
    return array
  end

end

# example usage
array = [15, 3, 8, 12, 1]
sorted_array = SortingAlgorithm.new.sort(array)
puts sorted_array # output: [1, 3, 8, 12, 15]