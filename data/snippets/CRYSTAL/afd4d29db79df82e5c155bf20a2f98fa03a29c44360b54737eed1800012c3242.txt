module MyModule
  # This is a comment

  # Define a class
  class MyCrystalClass
    # Set up properties
    property name : String = "John"
    property age : Int32 = 25

    # Define a method
    def get_info
      return "#{name} is #{age} years old."
    end

    # Define a macro
    macro add_method(name, num1, num2)
      # Convert arguments to crystal code
      method_body = "{|x, y| x + y}"
      # Define the method dynamically
      eval <<-CODE
        def #{name}
          return #{method_body}.call(#{num1}, #{num2})
        end
      CODE
    end

    # Call the macro to define a method
    # resulting in a method called "sum" that
    # returns the sum of two numbers
    add_method :sum, 5, 8

    # Define a generic method that
    # can take in any number of arguments
    def print_args(*args)
      # Iterate through the arguments and print them
      for arg in args
        puts arg
      end
    end
  end
end

# Create an instance of MyCrystalClass
my_class = MyModule::MyCrystalClass.new

# Call the get_info method and print the output
puts my_class.get_info #=> "John is 25 years old."

# Call the sum method and print the output
puts my_class.sum #=> 13

# Call the print_args method with multiple arguments
my_class.print_args("Hello", "there", 123) #=> "Hello" "there" 123