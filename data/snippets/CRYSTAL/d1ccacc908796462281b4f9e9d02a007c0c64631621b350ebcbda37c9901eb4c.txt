# This is a complex code snippet written in the CRYSTAL programming language.
# It uses multiple data structures and algorithmic techniques to solve a problem.
# Here, we are implementing bubble sort to sort an array of integers in ascending order.

# First, we define the bubble sort method
def bubble_sort(array : Array(Int32))
    # We define a variable to keep track of the last index to be sorted
    last_index : Int32 = array.size - 1
    # We loop through the array, starting from the first element
    for i in 0..last_index
        # We define a variable to keep track of whether any swaps have been made in the current iteration
        swapped : Bool = false
        # We loop through the unsorted part of the array
        for j in 0..(last_index - i)
            # If the current element is larger than the next element, we swap them
            if array[j] > array[j + 1]
                array[j], array[j + 1] = array[j + 1], array[j]
                # We set the swapped variable to true
                swapped = true
            end
        end
        # If no swaps were made in the current iteration, it means the array is already sorted and we can break out of the loop
        break if !swapped
    end
    # Finally, we return the sorted array
    array
end

# We define an array of integers to be sorted
integers = [5, 2, 8, 4, 1, 9]

# We call the bubble sort method on the array and store the sorted array in a variable
sorted_integers = bubble_sort(integers)

# We print the sorted array to the console
p sorted_integers # Output: [1, 2, 4, 5, 8, 9]