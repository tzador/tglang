# This is a code snippet in Crystal, a statically-typed compiled programming language.
struct User
  # Structs are used to create custom data types with their own properties and methods.
  
  property age : Int32
  # A property is a variable that describes the state of the struct.
  # In this case, the property 'age' is an integer with 32 bits.
  
  property name : String
  # Another property called 'name' is a string.
  
  property username : String?
  # The '?' makes the property optional, so it can be assigned null.
  
  def initialize(age : Int32, name : String, username : String?)
    @age = age
    @name = name
    @username = username
  end
  # This is an initialize method, which is used to initialize the properties
  # of the struct with the provided values passed in.
  
  def print_user_info
    puts "User Info:"
    puts "- Age: #{@age}"
    puts "- Name: #{@name}"
    puts "- Username: #{@username}"
  end
  # This is a method that prints out the values of the properties in a user-friendly way.
end

# Create a new instance of the User struct and initialize it with some values.
user = User.new(25, "John Doe", "johndoe123")
# We can also leave the last property as nil if we don't have a username for this user.
# In that case, the '?' at the end of 'String?' allows it to be assigned nil.
# user = User.new(25, "John Doe", nil)

# Call the print_user_info method on the user instance to see the output.
user.print_user_info

# Output: 
# User Info:
# - Age: 25
# - Name: John Doe
# - Username: johndoe123