# This is a complex code snippet written in CRYSTAL.
# It generates a random matrix and performs matrix multiplication on it.

# Define a constant SIZE for the dimensions of the matrix
SIZE = 5

# Define a function to generate a random matrix of given size
def generate_matrix(size)
  # Initialize an empty matrix
  matrix = Array(Array(Int32)).new(size, size)

  # Loop through each row and column to fill the matrix with random values
  for row in 0..size-1
    for col in 0..size-1
      # Generate a random value in the range of 1 to 10
      matrix[row][col] = rand(1..10)
    end
  end

  # Return the generated matrix
  matrix
end

# Define a function to perform matrix multiplication
def multiply_matrix(matrix1, matrix2)
  # Check if the dimensions of the two matrices are compatible for multiplication
  if matrix1.size != matrix2[0].size
    puts "Incompatible dimensions!"
    return
  end

  # Initialize an empty result matrix
  result = Array(Array(Int32)).new(matrix1.size, matrix2[0].size)

  # Loop through each row in matrix1 and column in matrix2
  for row in 0..matrix1.size-1
    for col in 0..matrix2[0].size-1
      # Initialize a sum variable to store the result of multiplication
      sum = 0

      # Loop through the elements in the current row of matrix1 and column of matrix2
      for i in 0..matrix1[0].size-1
        # Multiply the corresponding elements and add them to the sum
        sum += matrix1[row][i] * matrix2[i][col]
      end

      # Store the sum in the result matrix
      result[row][col] = sum
    end
  end

  # Return the result matrix
  result
end

# Generate two random matrices
matrix1 = generate_matrix(SIZE)
matrix2 = generate_matrix(SIZE)

# Perform matrix multiplication
result = multiply_matrix(matrix1, matrix2)

# Print the result
puts "Matrix 1:"
for row in matrix1
  puts row
end
puts "Matrix 2:"
for row in matrix2
  puts row
end
puts "Result:"
for row in result
  puts row
end