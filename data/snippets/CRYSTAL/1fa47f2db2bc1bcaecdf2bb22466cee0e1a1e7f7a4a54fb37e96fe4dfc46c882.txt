# Create a class Animal with properties name, type, and age
class Animal
  property name : String
  property type : String
  property age : Int32

  # Initialize the class with the given name, type, and age
  def initialize(@name, @type, @age)
  end

  # Define a method to print the details of the animal
  def print_details
    puts "Name: #{@name}"
    puts "Type: #{@type}"
    puts "Age: #{@age}"
  end
end

# Create an instance of Animal class with name "Max", type "Dog", and age 5
animal = Animal.new("Max", "Dog", 5)

# Call the print_details method to print the details of the animal
animal.print_details

# Create a subclass of Animal class called "WildAnimal" with property habitat
class WildAnimal < Animal
  property habitat : String

  # Initialize the class with the given name, type, age, and habitat
  def initialize(name, type, age, @habitat)
    super(name, type, age)
  end

  # Override the print_details method to include habitat information
  def print_details
    puts "Name: #{@name}"
    puts "Type: #{@type}"
    puts "Age: #{@age}"
    puts "Habitat: #{@habitat}"
  end
end

# Create an instance of WildAnimal class with name "Leo", type "Lion", age 10, and habitat "Savanna"
wild_animal = WildAnimal.new("Leo", "Lion", 10, "Savanna")

# Call the print_details method to print the details of the wild animal
wild_animal.print_details

# Create a module called "Helpers" with a method to calculate the average age of animals
module Helpers
  # Define a method to calculate the average age of animals
  def self.calculate_average_age(animal_array)
    ages = animal_array.map { |animal| animal.age }
    total = ages.inject(:+)
    average = total / animal_array.size

    return average
  end
end

# Create an array of Animal instances
animal_array = [Animal.new("Buddy", "Cat", 3), Animal.new("Rocky", "Horse", 7), Animal.new("Bella", "Rabbit", 4)]

# Call the calculate_average_age method from the Helpers module and print the result
puts Helpers.calculate_average_age(animal_array)