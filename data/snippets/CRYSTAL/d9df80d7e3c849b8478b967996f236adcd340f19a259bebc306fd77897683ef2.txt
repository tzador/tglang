# This code snippet generates a binary search tree and performs a search
# on the tree to find a specific value.

# Define a binary search tree class
class BinarySearchTree
  # Define a node struct
  struct Node
    # Specify the type for the node's value
    value : Int32
    
    # Reference to the left and right child nodes
    left_child : Node
    right_child : Node
  end
  
  # Reference to the root node
  root : Node
  
  # Method to insert a new value into the tree
  def insert(value : Int32)
    # Create a new node with the given value
    new_node = Node.new(value: value)
    
    # If the root is empty, set the new node as the root
    if root.nil?
      root = new_node
    else
      # Start from the root and traverse the tree to find the correct position
      current_node = root
      
      # Loop until we find the correct position
      while true
        # If the given value is less than the current node's value, go left
        if value < current_node.value
          # If there is no left child, set the new node as the left child
          if current_node.left_child.nil?
            current_node.left_child = new_node
            break
          else
            # If there is a left child, update the current node to the left child
            current_node = current_node.left_child
          end
        # If the given value is greater than the current node's value, go right
        else
          # If there is no right child, set the new node as the right child
          if current_node.right_child.nil?
            current_node.right_child = new_node
            break
          else
            # If there is a right child, update the current node to the right child
            current_node = current_node.right_child
          end
        end
      end
    end
  end
  
  # Method to perform a search on the tree for a specific value
  def search(value : Int32) : Bool
    # Start from the root and traverse the tree to find the value
    current_node = root
    
    # Loop until we find the value or reach the end of the tree
    while current_node && current_node.value != value
      # If the value is less than the current node's value, go left
      if value < current_node.value
        current_node = current_node.left_child
      # If the value is greater than the current node's value, go right
      else
        current_node = current_node.right_child
      end
    end
    
    # If the current node is not nil, we found the value
    if current_node != nil
      return true
    else
      # If the current node is nil, we reached the end of the tree, value not found
      return false
    end
  end
end

# Create an instance of the BinarySearchTree class
tree = BinarySearchTree.new

# Insert some values into the tree
tree.insert(5)
tree.insert(10)
tree.insert(3)
tree.insert(8)
tree.insert(2)
tree.insert(4)

# Search for the value 8 in the tree
result = tree.search(8)

# Print the result
puts result # Output: true