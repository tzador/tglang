# This is a complex and long code snippet in the CRYSTAL programming language.

# Define a class called 'Person' with attributes name, age, and gender.
class Person
  # Declare instance variables for name, age, and gender.
  @name : String
  @age : Int32
  @gender : String

  # Define a constructor that takes in parameters for name, age, and gender.
  def initialize(@name : String, @age : Int32, @gender : String)
    # Raise an error if age is a negative value.
    if @age < 0
      raise "Age cannot be negative."
    end
  end

  # Define a getter method for the name attribute.
  def name
    @name
  end

  # Define a setter method for the age attribute.
  def age=(new_age)
    # Raise an error if new age is a negative value.
    if new_age < 0
      raise "Age cannot be negative."
    end
    # Set the age instance variable to the new age value.
    @age = new_age
  end

  # Define a method that returns a string with the person's name, age, and gender.
  def info
    return "Name: #{@name}, Age: #{@age}, Gender: #{@gender}."
  end

  # Define a method that checks if the person is an adult (over 18 years old).
  def adult?
    return @age > 18
  end
end

# Create an instance of the Person class named 'john' with name 'John', age 25, and gender 'Male'.
john = Person.new("John", 25, "Male")

# Print out John's information using the info method.
puts john.info

# Set John's age to 16 using the age= method.
john.age = 16

# Check if John is an adult using the adult? method.
if john.adult?
  puts "John is an adult."
else
  puts "John is not an adult."
end

# Output:
# Name: John, Age: 25, Gender: Male.
# John is not an adult.

# Finally, we print out the code snippet using the backtick notation.