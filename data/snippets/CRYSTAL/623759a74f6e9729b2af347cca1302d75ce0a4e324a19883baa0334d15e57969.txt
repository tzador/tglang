# Define a class for a custom Stack data structure
class Stack
  # Define a Struct to store the data and a link to the next item
  Struct Element
    getter data, next
    setter data, next
    constructor(data, next)
      @data = data
      @next = next
    end
  end

  # Initialize an empty stack
  def initialize
    @size = 0
    @top = nil
  end

  # Add a new item to the top of the stack
  def push(value)
    # Create a new element with the given data and the current top as its next link
    element = Element.new(value, @top)
    # Set the new element as the top
    @top = element
    # Increase the size by one
    @size += 1
  end

  # Remove and return the top item from the stack
  def pop
    # Check if the stack is empty
    if @top.nil?
      puts "Stack is empty!"
    else
      # Get the data from the top element
      data = @top.data
      # Set the next element as the new top
      @top = @top.next
      # Decrease the size by one
      @size -= 1
      # Return the data
      data
    end
  end

  # Return the top item from the stack without removing it
  def peek
    # Check if the stack is empty
    if @top.nil?
      puts "Stack is empty!"
    else
      # Return the data from the top element
      @top.data
    end
  end

  # Check if the stack is empty
  def empty?
    @size == 0
  end

  # Return the size of the stack
  def size
    @size
  end
end

# Create a new instance of the Stack class
stack = Stack.new

# Push items onto the stack
stack.push("Hello")
stack.push("World")
stack.push("in")
stack.push("Crystal!")

# Print the size of the stack
puts "Size of stack: #{stack.size}"
# => "Size of stack: 4"

# Print the top item without removing it
puts "Top item: #{stack.peek}"
# => "Top item: Crystal!"

# Pop and print all items from the stack
until stack.empty?
  puts stack.pop
end
# Output:
# Crystal!
# in
# World
# Hello