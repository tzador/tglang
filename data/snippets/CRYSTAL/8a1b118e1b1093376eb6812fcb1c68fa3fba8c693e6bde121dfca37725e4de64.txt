# This is a snippet of code in CRYSTAL programming language
# It shows how to implement a binary search algorithm for searching an element in a sorted array
# First, we define a function for binary search
def binary_search(array, key)
    low = 0                     # initialize the low and high values of the array
    high = array.size - 1

    while low <= high           # run the binary search until low is less than or equal to high
        mid = (low + high) / 2  # calculate the mid-point of the array to divide it into two subarrays

        if array[mid] == key    # if the middle element is equal to the key, return its index
            return mid
        elsif array[mid] > key  # if the middle element is greater than the key, search in the left subarray
            high = mid - 1
        else                    # if the middle element is less than the key, search in the right subarray
            low = mid + 1
        end
    end

    return -1                   # if key is not found, return -1
end

# Now, we initialize an array and call the binary search function to find the index of a specific element
array = [1, 3, 5, 7, 9, 11, 13, 15]
key = 7
index = binary_search(array, key)

# Print the result
printf("Index of %d in the array is %d", key, index)