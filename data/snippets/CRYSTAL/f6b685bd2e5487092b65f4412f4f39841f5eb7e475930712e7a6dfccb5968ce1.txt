abstract class Musician
  # Represents a musician in a band
  @[init]
  def initialize(name : String, instrument : String)
    @name = name
    @instrument = instrument
  end

  # Plays a note on their instrument
  abstract def play(note : String)
end

class Guitarist < Musician
  # Represents a guitarist in a band
  @[init]
  def initialize(name : String)
    super(name, "guitar") # calls parent's initializer
  end

  # Plays a note on their guitar
  def play(note : String)
    puts "#{@name} is playing #{note} on guitar."
  end
end

class Drummer < Musician
  # Represents a drummer in a band
  @[init]
  def initialize(name : String)
    super(name, "drums") # calls parent's initializer
  end

  # Plays a beat on their drums
  def play(beat : String)
    puts "#{@name} is playing #{beat} on drums."
  end
end

class Band
  # Represents a band with multiple musicians
  @[init]
  def initialize(musicians : Array(Musician))
    @musicians = musicians
  end

  # Makes the band perform a song
  def perform(song : String)
    puts "The band is performing #{song}."

    # Each musician in the band plays a different part
    notes = ["B", "G", "D", "A"]
    beats = ["kick drum", "hi-hat", "snare drum"]

    @musicians.each do |musician|
      if musician.is_a?(Guitarist)
        # Guitarist plays the melody
        musician.play(notes.sample)

      elsif musician.is_a?(Drummer)
        # Drummer plays the beat
        musician.play(beats.sample)
      end
    end
  end
end

# Create a band with a guitarist and a drummer
band = Band.new([Guitarist.new("John"), Drummer.new("Sarah")])

# Make the band perform a song
band.perform("Wonderwall")