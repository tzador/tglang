class Person      # Defines a class named Person
  property name   # Defines a property named name
  property age    # Defines a property named age
 
  # Defines a constructor method for the Person class
  def initialize(@name : String, @age : Int32)
    if @age < 0 || @age > 150      # Checks if age provided is valid
      raise ArgumentError.new("Age must be between 0 and 150")
    end
  end
 
  # Defines a method that returns the name of the person
  def get_name
    return @name
  end
 
  # Defines a method that returns the current age of the person
  def get_age
    return @age
  end
 
  # Defines a method that takes in a number and increments the age by that number
  def celebrate_birthday(years : Int32)
    @age += years
  end
 
  # Defines a static method that takes in a person's info and creates a new person object
  def self.create(name : String, age : Int32)
    return Person.new(name, age)
  end
end

# Creates a new instance of the Person class with the name "John" and age 25
person = Person.new("John", 25)

# Calls the get_name method on the person instance and stores the return value in a variable
name = person.get_name()

# Calls the get_age method on the person instance and stores the return value in a variable
age = person.get_age()

# Prints out the person's name and age
puts "#{name} is #{age} years old"

# Calls the celebrate_birthday method on the person instance, passing in 1 as the argument
person.celebrate_birthday(1)

# Calls the get_age method again and stores the new age in the age variable
age = person.get_age()

# Prints out the updated age
puts "After celebrating birthday, #{name} is now #{age} years old"

# Creates a new person instance using the static create method
new_person = Person.create("Jane", 30)