# This is a complex code snippet in CRYSTAL language
# It includes multiple methods, variables, and control structures
# and is appropriately annotated in markdown

class Person
  @name : String
  @age : Int32

  # This is the constructor method in CRYSTAL
  # It takes in two arguments, name and age, and sets it to the corresponding instance variables
  def initialize(@name, @age)
  end

  # This method outputs the name of the person
  # As the output is a string, the return type is specified as String
  def name : String
    return @name
  end

  # This method outputs the age of the person
  # As the output is an integer, the return type is specified as Int32
  def age : Int32
    return @age
  end
end

# This is a control structure in CRYSTAL that instantiates a new Person object
# The arguments passed in are used to initialize the instance variables
person = Person.new("John", 25)

# This is a conditional statement that checks if the person is over 18 years old
# If the condition is met, the code within the if block is executed, otherwise the code within the else block is executed
if person.age > 18
  puts "#{person.name} is an adult"
else
  puts "#{person.name} is a minor"
end

# This is a loop that iterates from 1 to 10
# It uses the times method to execute the code within the block 10 times
# The loop prints out the current iteration number as well as the person's name
10.times do |i|
  puts "#{i+1}: #{person.name}"
end

# This is an array that contains 5 integers
numbers = [6, 12, 8, 5, 10]

# This is a method that takes in an array as an argument and calculates the average of its elements
# The return type is specified as Float as the average may contain decimals
def calculate_average(array : Array) : Float
  sum = 0

  # This is a loop that iterates through the array and adds each element to the sum variable
  for number in array
    sum += number
  end

  # The average is calculated by dividing the sum by the number of elements in the array
  average = sum / array.size

  # The average is returned at the end of the method
  return average
end

# This variable stores the average of the numbers array by calling the calculate_average method
average = calculate_average(numbers)

# This is a print statement that outputs the average calculated
# The average is formatted to have 2 decimal places using the format method
puts "The average of the numbers is #{average.format("2.2")}"