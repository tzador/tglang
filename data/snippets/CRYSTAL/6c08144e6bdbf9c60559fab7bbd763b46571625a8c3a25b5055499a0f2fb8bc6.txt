require "http/client"

# Declare a class called "APIWrapper"
class APIWrapper
  # Defines a getter for the API url
  getter url

  # Defines a getter and setter for the API key
  property key

  # Initializes a new instance of the APIWrapper class
  #
  # Arguments:
  #   - url (String): The base url of the API
  #   - key (String): The API key for authentication
  def initialize(@url, @key)
  end

  # Makes a GET request to the API
  #
  # Arguments:
  #   - path (String): The path to the API resource
  #   - params (Hash(String, String)): A hash of parameters to be passed in the request
  #
  # Returns:
  #   - response (HTTP::Client::Response): The response from the API
  def get(path, params)
    client = HTTP::Client.new(@url)
    client.headers["x-api-key"] = @key
    client.get(path, params)
  end

  # Makes a POST request to the API
  #
  # Arguments:
  #   - path (String): The path to the API resource
  #   - body (String): The body of the request as a JSON string
  #
  # Returns:
  #   - response (HTTP::Client::Response): The response from the API
  def post(path, body)
    client = HTTP::Client.new(@url)
    client.headers["x-api-key"] = @key
    client.post(path, body)
  end

  # Makes a PUT request to the API
  #
  # Arguments:
  #   - path (String): The path to the API resource
  #   - body (String): The body of the request as a JSON string
  #
  # Returns:
  #   - response (HTTP::Client::Response): The response from the API
  def put(path, body)
    client = HTTP::Client.new(@url)
    client.headers["x-api-key"] = @key
    client.put(path, body)
  end

  # Makes a DELETE request to the API
  #
  # Arguments:
  #   - path (String): The path to the API resource
  #
  # Returns:
  #   - response (HTTP::Client::Response): The response from the API
  def delete(path)
    client = HTTP::Client.new(@url)
    client.headers["x-api-key"] = @key
    client.delete(path)
  end
end