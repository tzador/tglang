# This is a class for creating a LinkedList data structure

class LinkedList
  # declaring instance variables
  @head : Node? # represents the starting node of the list
  @size : Int32 # represents the size of the list

  # nested class for creating a node
  class Node
    # declaring instance variables
    @data : String # represents the data stored in the node
    @next : Node? # represents the next node in the list

    # constructor for creating a node with data
    def initialize(data : String)
      @data = data
      @next = nil # assigning nil to the next node initially
    end
  end

  # constructor for LinkedList class
  def initialize
    @head = nil # assigning nil to the starting node initially
    @size = 0 # assigning 0 to the size of the list initially
  end

  # method for checking if the list is empty
  def empty? : Bool
    if @head == nil
      return true
    else
      return false
    end
  end

  # method for adding a node to the front of the list
  def insert_front : Void, data : String
    new_node = Node.new(data)
    if @head == nil
      @head = new_node # assigning the new node as head if list is empty
    else
      new_node.next = @head # making the new node point to the current head
      @head = new_node # assigning the new node as head
    end
    @size += 1 # incrementing the list size
  end

  # method for adding a node to the end of the list
  def insert_end : Void, data : String
    new_node = Node.new(data)
    if @head == nil
      @head = new_node # assigning the new node as head if list is empty
    else
      current = @head
      while current.next != nil # traversing through the list until the last node is reached
        current = current.next
      end
      current.next = new_node # making the last node point to the new node
    end
    @size += 1 # incrementing the list size
  end

  # method for removing a node from the front of the list
  def remove_front : Void
    if @head != nil
      @head = @head.next # making the node next to head as the new head
      @size -= 1 # decrementing the list size
    end
  end

  # method for removing a node from the end of the list
  def remove_end : Void
    if @head != nil
      current = @head
      prev = nil
      while current.next != nil # traversing through the list until the last node is reached
        prev = current
        current = current.next
      end
      prev.next = nil # making the second last node point to nil to remove the last node
      @size -= 1 # decrementing the list size
    end
  end

  # method for printing the list
  def print : Void
    current = @head
    while current != nil # traversing through the list until the end is reached
      puts current.data # printing the data of the current node
      current = current.next # moving to the next node
    end
  end
end