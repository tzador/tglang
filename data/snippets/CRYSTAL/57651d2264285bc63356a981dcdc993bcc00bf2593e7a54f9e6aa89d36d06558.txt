# This code snippet uses parallel processing to calculate the sum of the first 100 natural numbers
# Define the parallel function
parallel do
  # Define a variable to hold the sum
  sum = 0
  # Loop through the first 100 numbers
  (1..100).each do |n|
    # Add the number to the sum
    sum += n
  end
  # Output the result
  puts "The sum of the first 100 natural numbers is: #{sum}"
end

# This code snippet uses concurrency to print the alphabet in random order
# Import the concurrency module
require "concurrent"

# Define a thread pool with 10 threads
pool = Concurrent::FixedThreadPool.new(10)

# Create an array with the alphabet
alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o',
            'p','q','r','s','t','u','v','w','x','y','z']

# Shuffle the array
alphabet.shuffle!

# Loop through the shuffled alphabet
alphabet.each do |letter|
  # Define a thread to print the letter
  thread = Concurrent::Future.execute(executor: pool) do
    # Output the letter to the console
    puts letter
  end
end

# Shutdown the thread pool to avoid memory leaks
pool.shutdown