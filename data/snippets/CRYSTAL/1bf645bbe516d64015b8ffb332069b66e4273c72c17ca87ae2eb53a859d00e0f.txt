require "http/client"

@test_output = ""

# Class for making HTTP requests
class HttpRequest
  # Initialize with request parameters
  def initialize(url : String, method : String = "GET", headers : Hash(String, String) = {}, body : String = "")
    @url = url
    @method = method
    @headers = headers
    @body = body
  end

  # Method for sending the HTTP request
  # Returns HTTP::Client::Response
  def send_request
    client = HTTP::Client.new(@url)
    response = client.send(@method, @url, @headers, @body)

    # Update @test_output with response status
    # This is a comment in crystal
    @test_output += "Status: #{response.status_code} \n"

    # This is another comment
    # Update @test_output with response headers
    for header in response.headers do
      @test_output += "#{header.name}: #{header.value} \n"
    end

    # Update @test_output with response body
    @test_output += "Body: #{response.body.to_s} \n"

    return response
  end
end

# Make a GET request to a URL and store the response
response = HttpRequest.new("https://www.example.com", "GET").send_request

# Print the response status, headers, and body
puts @test_output

# Triple backticks are used to indicate the start and end of a code block in markdown
# This example is written in CRYSTAL and utilizes the HTTP::Client library to make a GET request and store the response. The response status, headers, and body are then printed to the console.