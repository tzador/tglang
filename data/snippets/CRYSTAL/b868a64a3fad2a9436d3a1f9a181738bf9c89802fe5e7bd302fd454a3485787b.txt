# This is a comment in CRYSTAL

# Define a base class, `Shape`
class Shape
  # Class variable that tracks the number of instantiated shapes
  @@count = 0

  # Initialize method takes in a name and increments @@count
  def initialize(name)
    @name = name
    @@count += 1
  end

  # Create a class method to print the total number of shapes instantiated
  def self.total_shapes
    puts "Total number of shapes created: #{@@count}"
  end

  # Create an abstract method to calculate the area
  abstract def calc_area
end

# Define a subclass, `Rectangle`, which inherits from `Shape` class
class Rectangle < Shape
  # Initialize method takes in length and width as parameters
  def initialize(length, width)
    # Call superclass's initialize method to add to @@count
    super("Rectangle")
    @length = length
    @width = width
  end

  # Override the abstract method of the superclass with actual calculation for rectangle
  def calc_area
    return @length * @width
  end
end

# Define a subclass, `Circle`, which inherits from `Shape` class
class Circle < Shape
  # Initialize method takes in the radius of the circle
  def initialize(radius)
    # Call superclass's initialize method to add to @@count
    super("Circle")
    @radius = radius
  end

  # Override the abstract method of the superclass with actual calculation for circle
  def calc_area
    return 3.14 * @radius * @radius
  end
end

# Create instances of the `Rectangle` and `Circle` classes
rectangle = Rectangle.new(5, 3)
rectangle.calc_area # Returns 15
circle = Circle.new(10)
circle.calc_area # Returns 314.0

# Call the `total_shapes` class method to print the total number of shapes created
Shape.total_shapes # Prints "Total number of shapes created: 2"