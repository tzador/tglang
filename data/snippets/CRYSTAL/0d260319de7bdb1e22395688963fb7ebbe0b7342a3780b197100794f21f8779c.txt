class Node(T)
  property value : T
  property next_node : Node(T)
  property previous_node : Node(T)
  property parent : Node(T)
  property children : Array(Node(T))
  property attributes : Hash(String, T)
  property is_root : Bool

  def initialize(value : T, parent : Node(T)? = nil)
    @value = value
    @parent = parent
    @children = [] of Node(T)
    @attributes = {} of String => T
    @is_root = parent.nil?

    if !@is_root
      @parent.add_child(self)
    end
  end

  def add_child(child_node : Node(T))
    @children << child_node
    child_node.parent = self
  end

  def add_attribute(key : String, value : T)
    @attributes[key] = value
  end

  def get_attribute(key : String) : T
    @attributes[key]
  end

  def remove_child(child_node : Node(T))
    @children.delete(child_node)
    child_node.parent = nil
  end

  def remove_attribute(key : String)
    @attributes.delete(key)
  end
end

# Example usage
# Create a node with value "Hello"
node = Node.new("Hello")

# Add attributes
node.add_attribute("greeting", "Hello")
node.add_attribute("language", "English")

# Add child nodes
node1 = Node.new("World", node)
node2 = Node.new("Universe", node)

# Remove a child node
node.remove_child(node2)

# Remove an attribute
node.remove_attribute("greeting")