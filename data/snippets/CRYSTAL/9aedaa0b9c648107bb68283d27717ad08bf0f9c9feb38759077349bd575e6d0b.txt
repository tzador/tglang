# This is a function that calculates the nth Fibonacci number
# Input: n - the index of the number to be calculated
# Output: the nth Fibonacci number
def fibonacci(n : Int32) : Int32
  if n == 0
    return 0
  elsif n == 1
    return 1
  else
    return fibonacci(n - 2) + fibonacci(n - 1)
  end
end

# This is a function that checks if a given number is prime
# Input: num - the number to be checked
# Output: true if the number is prime, false otherwise
def is_prime(num : Int32) : Bool
  if num < 2
    return false
  end
  (2..Math.sqrt(num).to_i).each do |i|
    if num % i == 0
      return false
    end
  end
  return true
end

# This is a function that generates a list of all prime Fibonacci numbers up to a given limit
# Input: limit - the upper limit of the prime Fibonacci numbers to be generated
# Output: an array of all prime Fibonacci numbers up to the given limit
def prime_fibonacci(limit : Int32) : Array(Int32)
  primes = [] of Int32
  (1...limit).each do |i|
    if is_prime(fibonacci(i))
      primes << fibonacci(i)
    end
  end
  return primes
end

# This is a function that prints all prime Fibonacci numbers up to a given limit in a formatted table
# Input: limit - the upper limit of the prime Fibonacci numbers to be printed
# Output: none
def print_prime_fibonacci(limit : Int32)
  primes = prime_fibonacci(limit)
  puts "Prime Fibonacci Numbers:"
  puts "| Index | Value |"
  primes.each_with_index do |num, index|
    puts "| #{index + 1} | #{num} |"
  end
end

# Here we call the function to print all prime Fibonacci numbers up to a limit of 20
puts print_prime_fibonacci(20)