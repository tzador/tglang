# Function to calculate prime numbers using the Sieve of Eratosthenes algorithm
# Takes in a limit to generate prime numbers up to that limit
def generate_primes(limit)
  # Create an array to store the numbers up to the limit
  numbers = Array(Int32).new(limit + 1, true)
  # Mark 0 and 1 as non-prime since they are not included in the algorithm
  numbers[0] = false
  numbers[1] = false

  # Loop through the array, starting at 2 (first prime number)
  2.upto(limit) do |i|
    # If the number at index i is marked as prime, continue
    if numbers[i]
      # Mark all multiples of i as non-prime
      (i*2).step(limit, i) do |j|
        numbers[j] = false
      end
    end
  end

  # Create an array to store the prime numbers
  primes = Array(Int32).new
  # Loop through the numbers array and add any numbers marked as true to the primes array
  numbers.each_with_index do |is_prime, index|
    primes << index if is_prime
  end

  # Return the array of prime numbers
  primes
end

# Call the function to generate prime numbers up to 100 and print the result
puts generate_primes(100)