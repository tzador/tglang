# create a generic class with type constraints and abstract methods
abstract class AbstractClass(T, S1 : String | Nil, S2 : String | Nil)
  # define abstract methods for child classes to implement
  abstract def initialize(@var1 : T, @var2 : T)
  abstract def method_one(param1 : S1, param2 : S2) : String

# define a child class that implements the abstract methods
class ChildClass < AbstractClass(Integer, "String1", Nil)
  # define init method that sets the values of var1 and var2
  def initialize(@var1 : Integer, @var2 : Integer)
  end
  # override the method_one method with a custom implementation
  def method_one(param1 : String, param2 : Nil) : String
    # perform some logic using the parameters and return a string
    if param1 == "String1"
      return "Method one was called with parameter: #{param1}"
    else
      return "Invalid parameter"
    end
  end
end

# create an instance of the child class
child = ChildClass.new(10, 20)
# call the method_one method with valid parameters
puts child.method_one("String1", Nil) # => Prints "Method one was called with parameter: String1"
# call the method_one method with invalid parameters
puts child.method_one("Invalid", Nil) # => Prints "Invalid parameter"