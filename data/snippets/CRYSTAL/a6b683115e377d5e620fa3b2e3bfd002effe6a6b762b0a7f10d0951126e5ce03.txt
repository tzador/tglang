# Example of a complex CRYSTAL code snippet with annotations

# Define a class called "Person" with a constructor that takes in a name, age, and gender
class Person(name : String, age : Int32, gender : String)
  # Initialize instance variables and set them to corresponding constructor parameters
  @name = name
  @age = age
  @gender = gender

  # Define a method called "welcome" that prints a personalized welcome message
  def welcome
    puts("Welcome to our platform, #{@name}! We are excited to have you as a member.")
  end
end

# Define three classes that inherit from the "Person" class
# Each of these classes have their own unique constructor parameters
class Student(name : String, age : Int32, gender : String, school : String, major : String) < Person
  # Initialize instance variables and set them to corresponding constructor parameters
  @name = name
  @age = age
  @gender = gender
  @school = school
  @major = major

  # Define a method called "info" that prints out the student's information
  def info
    puts("#{@name} is a #{@major} major at #{@school}.")
  end
end

class Employee(name : String, age : Int32, gender : String, company : String, position : String) < Person
  # Initialize instance variables and set them to corresponding constructor parameters
  @name = name
  @age = age
  @gender = gender
  @company = company
  @position = position

  # Define a method called "work" that prints a message about the employee's job
  def work
    puts("As a #{@position} at #{@company}, #{@name} plays a crucial role in our organization.")
  end
end

class Teacher(name : String, age : Int32, gender : String, subject : String, grade_level : String) < Person
  # Initialize instance variables and set them to corresponding constructor parameters
  @name = name
  @age = age
  @gender = gender
  @subject = subject
  @grade_level = grade_level

  # Define a method called "teach" that prints a message about the teacher's subject and grade level
  def teach
    puts("#{@name} teaches #{@subject} to #{@grade_level} students.")
  end
end

# Create instances of each of the three classes
# Each instance is initialized with unique values for its constructor parameters
# The values are "John", 25, "male" for the "Student" class
# "Jane", 35, "female" for the "Employee" class
# "Mr. Brown", 45, "male" for the "Teacher" class
john = Student.new("John", 25, "male", "University of XYZ", "Computer Science")
jane = Employee.new("Jane", 35, "female", "ABC Company", "Marketing Manager")
mr_brown = Teacher.new("Mr. Brown", 45, "male", "Mathematics", "High School")

# Call the "welcome" and "info" methods on the "john" instance
john.welcome # Output: Welcome to our platform, John! We are excited to have you as a member.
john.info # Output: John is a Computer Science major at University of XYZ.

# Call the "welcome" and "work" methods on the "jane" instance
jane.welcome # Output: Welcome to our platform, Jane! We are excited to have you as a member.
jane.work # Output: As a Marketing Manager at ABC Company, Jane plays a crucial role in our organization.

# Call the "welcome" and "teach" methods on the "mr_brown" instance
mr_brown.welcome # Output: Welcome to our platform, Mr. Brown! We are excited to have you as a member.
mr_brown.teach # Output: Mr. Brown teaches Mathematics to High School students.