# Define a class for a complex number
class ComplexNumber
  # Define getter and setter methods for the real and imaginary parts
  property real, imaginary

  # Define an initialize method for setting the real and imaginary parts
  def initialize(real : Int, imaginary : Int)
    # Set the real and imaginary parts using the getter and setter methods
    @real = real
    @imaginary = imaginary
  end

  # Define the methods for addition, subtraction, multiplication, and division
  def +(other : ComplexNumber) : ComplexNumber
    # Create a new complex number object with the real and imaginary parts added together
    result = ComplexNumber.new(@real + other.real, @imaginary + other.imaginary)
    # Return the result
    return result
  end

  def -(other : ComplexNumber) : ComplexNumber
    # Create a new complex number object with the real and imaginary parts subtracted
    result = ComplexNumber.new(@real - other.real, @imaginary - other.imaginary)
    # Return the result
    return result
  end

  def *(other : ComplexNumber) : ComplexNumber
    # Multiply the real and imaginary parts using the FOIL method
    result = ComplexNumber.new(@real * other.real - @imaginary * other.imaginary, @real * other.imaginary + @imaginary * other.real)
    # Return the result
    return result
  end

  def /(other : ComplexNumber) : ComplexNumber
    # Calculate the denominator using the real and imaginary parts of the other complex number
    denominator = other.real ** 2 + other.imaginary ** 2
    # Calculate the new real and imaginary parts using the division formula
    real_part = (@real * other.real + @imaginary * other.imaginary) / denominator
    imaginary_part = (@imaginary * other.real - @real * other.imaginary) / denominator
    # Create a new complex number object using the new real and imaginary parts
    result = ComplexNumber.new(real_part, imaginary_part)
    # Return the result
    return result
  end

  # Define a method for calculating the absolute value of a complex number
  def abs() : Float64
    # Calculate the absolute value using the Pythagorean Theorem
    return Math.sqrt(real ** 2 + imaginary ** 2)
  end

  # Define a method for printing the complex number in standard form
  def to_s()
    # Return the string representation of the complex number in standard form
    return "#{@real} + #{@imaginary}i"
  end
end

# Create two complex number objects
complex1 = ComplexNumber.new(3, 4)
complex2 = ComplexNumber.new(2, 6)

# Print the sum, difference, product, and quotient of the two complex numbers
puts "The sum is: #{complex1 + complex2}"
puts "The difference is: #{complex1 - complex2}"
puts "The product is: #{complex1 * complex2}"
puts "The quotient is: #{complex1 / complex2}"
# Print the absolute value of the first complex number
puts "The absolute value is: #{complex1.abs()}"
# Print the complex numbers in standard form
puts "The first complex number is: #{complex1.to_s()}"
puts "The second complex number is: #{complex2.to_s()}"