# This is a function that takes in an array of numbers and returns the sum of all the even numbers in the array.
# In CRYSTAL, we use the `def` keyword to define a function.
def sum_of_evens(numbers : Array(Int)) : Int
  # We use the `do` keyword to enter the function's body.
  do
    # We initialize a variable `sum` to store the total sum of even numbers.
    # In CRYSTAL, variables are initialized with the `var` keyword followed by the variable name.
    var sum : Int = 0
    # We iterate through the given array using the `each` iterator.
    # The `|num|` specifies a block parameter which we use to access each number in the array.
    # The `if` statement checks if the current number is even or not.
    # In CRYSTAL, the `if` statement also acts as an expression, returning a value based on the condition.
    # If the condition is true, it executes the code inside the `if` block.
    # Otherwise, it executes the code inside the `else` block.
    numbers.each do |num|
      if num % 2 == 0
        # If the current number is even, we add it to the `sum` variable.
        # In CRYSTAL, `+=` is the shorthand notation for incrementing a variable's value.
        sum += num
      else
        # If the current number is odd, we do nothing.
        # In CRYSTAL, we use the `next` keyword to skip the current iteration in a loop.
        next
      end
    end
    # Finally, we return the total sum of even numbers.
    # In CRYSTAL, the `return` keyword is optional, but it is good practice to use it.
    return sum
  # We use the `end` keyword to exit the function's body.
  end
# To call the function, we simply pass in an array of numbers as an argument.
# In CRYSTAL, we use square brackets `[]` to define an array literal.
sum_of_evens([1, 2, 3, 4, 5, 6]) # => 12