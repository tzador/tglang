# This is a complex code snippet in Crystal programming language. 
# It uses a lot of built-in functions and methods to perform various operations.

# Define a class
class Person
  # Initialize class variables
  getter id, name, age
  getter salary : Float32
  getter email : String?

  # Create a constructor with required parameters
  def initialize(@id : Int32, @name : String, @age : Int32, @salary : Float32, @email : String? = nil)
    # Use conditional statements to check for valid input
    if @id < 0
      raise ArgumentError.new("ID must be a positive integer")
    end
    if @age < 18
      raise ArgumentError.new("Age must be at least 18")
    end
    if @salary < 0
      raise ArgumentError.new("Salary cannot be negative")
    end

    # Set default values for class variables
    @id ||= 0 # If ID is not provided, set it to 0
    @email ||= ""

    # Call private method to format name
    @name = format_name(@name)

    # Use built-in function to convert salary to string with 2 decimal places
    @salary = @salary.to_s("2:.") + " USD"
  end

  # Define private method to format name
  private def format_name(name : String) : String
    # Split name into array of words
    words = name.split(" ")
    # Capitalize first letter of each word
    words.map! { |word| word.capitalize }
    # Join words back into string
    name = words.join(" ")
    # Return formatted name
    return name
  end

  # Define a method to calculate bonus based on salary
  def calculate_bonus : Float32
    # Use conditional statements to determine bonus amount
    if @salary < 50000
      return @salary * 0.1
    elsif @salary < 100000
      return @salary * 0.2
    else
      return @salary * 0.3
    end
  end

  # Define a method to print person's information
  def print_info
    puts "ID: #{@id}"
    puts "Name: #{@name}"
    puts "Age: #{@age}"
    puts "Salary: #{@salary}"
    if @email
      puts "Email: #{@email}"
    else
      puts "Email not provided"
    end
    puts "Bonus: #{calculate_bonus}"
  end
end

# Create instances of Person class
person1 = Person.new(1234, "john smith", 25, 60000, "john@example.com")
person2 = Person.new(5678, "jane doe", 30, 80000)

# Print information for each person
person1.print_info
person2.print_info

# Output
# ID: 1234
# Name: John Smith
# Age: 25
# Salary: 60000.0 USD
# Email: john@example.com
# Bonus: 6000.0 USD
# ID: 5678
# Name: Jane Doe
# Age: 30
# Salary: 80000.0 USD
# Email not provided
# Bonus: 16000.0 USD