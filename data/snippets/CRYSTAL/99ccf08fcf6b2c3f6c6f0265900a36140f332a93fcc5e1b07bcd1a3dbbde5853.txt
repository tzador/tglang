# This code snippet is a Fibonacci sequence calculator,
# using recursion and dynamic programming

Fibonacci = Hash.new do |hash, n|
  if n <= 1
    n
  else
    result = hash[n - 1] + hash[n - 2]
    hash[n] = result
    result
  end
end

def calculate_fibonacci(n)
  Fibonacci[n]
end

### Example usage:
calculate_fibonacci(10) # Output: 55

calculate_fibonacci(15) # Output: 610

calculate_fibonacci(30) # Output: 832040

# Explanation:
# The code starts by creating a hash called "Fibonacci" with a default value
# that is a block of code. This block of code first checks if the input "n"
# is less than or equal to 1, and if so, returns "n" as the value for the key.
# Otherwise, the block recursively calculates the Fibonacci sequence for "n-1"
# and "n-2", adds them together, and assigns the result to the key "n" in the hash.
# Then, the function "calculate_fibonacci" uses the hash to retrieve the
# Fibonacci number for the given input "n".
# The code snippet ends with some example usages and their expected outputs.