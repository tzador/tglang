# This is a complex Crystal code snippet that utilizes multiple data structures and control flow
# It calculates and returns the product of two matrices using loops and arrays
# Credit to Rosetta Code for the matrix multiplication algorithm

# Define two matrices as arrays of arrays
# Note: These matrices are hardcoded for simplicity, but can be dynamically generated or input by the user
matrix_a = [[1, 2, 3], [4, 5, 6]] # 2x3 matrix
matrix_b = [[7, 8], [9, 10], [11, 12]] # 3x2 matrix

# Define the result matrix as an empty array of arrays
result_matrix = Array(Array(Int32)).new

# Check if the number of columns in matrix A matches the number of rows in matrix B
# If they do not match, throw an error and exit the program
if matrix_a[0].size != matrix_b.size
  raise "Matrix dimensions do not match"
  exit
end

# Loop through rows of matrix A
for row_a in 0...matrix_a.size
  # Create a temporary array to store the current row of the result matrix
  temp = Array(Int32).new

  # Loop through columns of matrix B
  for col_b in 0...matrix_b[0].size
    # Set the initial value of the current element in the result matrix to 0
    temp << 0

    # Loop through columns of matrix A (or rows of matrix B)
    for col_a in 0...matrix_a[0].size
      # Perform the matrix multiplication algorithm and update the current element of the result matrix
      temp[col_b] += matrix_a[row_a][col_a] * matrix_b[col_a][col_b]
    end
  end

  # Add the current row to the result matrix
  result_matrix << temp
end

# Print the result matrix in a formatted way
# This can be modified to save the result matrix to a file or display it in a different format
for row in 0...result_matrix.size
  puts "| #{result_matrix[row].join(" | ")} |"
end