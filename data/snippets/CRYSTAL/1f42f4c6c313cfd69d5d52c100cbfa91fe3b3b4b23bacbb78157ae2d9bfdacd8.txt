// Declare a class with a generic type
class Tree(T, U)

  # Set instance variables
  property value : T
  property parent : Tree(T, U)?
  property children : Array(Tree(T, U))

  # Define a constructor that takes a parent and value
  def initialize(parent : Tree(T, U)?, value : T)
    @parent = parent
    @value = value
    # Initialize empty array of children
    @children = [] of Tree(T, U)
  end

  # Define methods for adding and removing children
  def add_child(child : Tree(T, U))
    # Set this tree as the child's parent
    child.parent = self
    # Push the child to the children array
    @children << child
  end

  def remove_child(child : Tree(T, U))
    # Remove the child from the children array
    @children.delete(child)
    # Set the child's parent to nil
    child.parent = nil
  end

  # Define a method for checking if a given value exists in the tree
  def has_value?(value : T) : Bool
    # Check if this tree's value is equal to the given value
    if @value == value
      return true
    else
      # Loop through all the children
      for child in @children
        # Check if any of the children have the given value
        if child.has_value?(value)
          return true
        end
      end
    end
    # If no child has the given value, return false
    return false
  end

end

# Create a tree with the type String for values and Int32 for parent values
tree = Tree(String, Int32).new(nil, "root")

# Add children to the tree
tree.add_child(Tree(String, Int32).new(tree, "child 1"))
tree.add_child(Tree(String, Int32).new(tree, "child 2"))

# Check if the tree has the value "child 1"
puts tree.has_value?("child 1") # true

# Check if the tree has the value "child 3"
puts tree.has_value?("child 3") # false

# Remove child 1 from the tree
tree.remove_child(tree.children[0])

# Check if the tree still has child 1
puts tree.has_value?("child 1") # false