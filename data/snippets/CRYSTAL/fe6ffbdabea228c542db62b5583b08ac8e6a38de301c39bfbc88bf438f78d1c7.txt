require "http/request"
require "json"

# Define a class named "HTTPRequest" that inherits from "Request" class
class HTTPRequest < Request
  # Define instance variables for URL, method, and body
  @url : String
  @method : String
  @body : JSON::Any

  # Initialize class to take in URL, method, and body as arguments
  def initialize(@url : String, @method : String, @body : JSON::Any)
    super(@url, @method)

    # If method is POST, serialize body into JSON string and set as body
    if @method == "POST"
      @body = @body.to_json
    end
  end

  # Create a method that executes the HTTP request
  def execute
    # Create a new HTTP::Client object
    client = HTTP::Client.new

    # Set request options, including URL, method, and body
    options = HTTP::RequestOptions.new(url: @url, method: @method, body: @body)

    # Send HTTP request with options and store response
    response = client.send(options)

    # Return response body as JSON object
    return JSON.parse(response.body)
  end
end

# Create an instance of HTTPRequest class with a URL, method, and body
request = HTTPRequest.new("https://www.example.com/api/v1/users", "POST", {"name": "John", "age": 25})

# Execute HTTP request and store response JSON object
response = request.execute

# Print response to console
puts response.to_s