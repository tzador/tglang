module ComplexNumbers

  ##
  # This class represents a complex number.
  #
  class ComplexNumber 
    @@pi = 3.14159                      # class variable stored using Class Var Assignment
    @@e = 2.71828                       # class variable stored using Class Var Assignment
    getter real, imaginary               # defining getters for instance variables
    property real, imaginary             # defining a property for attributes real and imaginary
    @[Compiler::Implicit]
    property absolute                    # defining implicit property for absolute value of complex number

    # creating initializer method for class that takes in params for real and imaginary parts
    def initialize(@real : Float64, @imaginary : Float64)
    end

    # defining a custom to_s method to output complex number as a string
    def to_s 
      "#{@real} + #{@@pi}i#{@imaginary}"   # using Class Var to show pi and instance vars for real and imaginary parts
    end

    # defining a method to add two complex numbers and return a new complex number
    def add(c2)
      self.real + c2.real, self.imaginary + c2.imaginary
    end

  end

  # creating an instance of ComplexNumber with given real and imaginary values
  num1 = ComplexNumber.new(5.2, 8.6)

  # creating another instance with different values 
  num2 = ComplexNumber.new(-3.7, 2.1)

  # calling the add method on num1 and passing in num2 as a parameter
  sum = num1.add(num2)

  # outputting the sum of the complex numbers using the to_s method
  puts "The sum is: #{sum}"

  # output: The sum is: 1.5 + 3.14159i + 10.7
end