class Animal
  # This is the superclass for all animals

  property name : String
  property age : Int32

  # Initialize the animal with a name and age
  def initialize(name : String, age : Int32)
    @name = name
    @age = age
  end

  # Make the animal make a noise
  def make_noise
    puts "#{@name} makes a noise"
  end

  # Make the animal sleep for given number of hours
  def sleep(hours : Int32)
    hours.times do
      puts "#{@name} is sleeping"
      occurrences = get_random_occurrences(10)
      occurrences.filter { |o| o.has?(:dream) }.for_each { |o| o.invoke() }
    end
  end

  private

  # Get a random selection of occurrences for sleeping
  def get_random_occurrences(num : Int32)
    occurrences = [] of Occurrence

    (0...num).each do |i|
      type = [:dream, :nightmare].sample
      if type == :dream
        duration = Random.rand(10) + 1
        occurrences << Occurrence.new(type, duration, "Dream #{i}")
      else
        duration = Random.rand(5) + 1
        occurrences << Occurrence.new(type, duration, "Nightmare #{i}")
      end
    end

    occurrences
  end
end

class Dog < Animal
  # This is a subclass for dogs, inheriting from the Animal class

  # Initialize the dog with a name and age, and breed
  def initialize(name : String, age : Int32, breed : String)
    super(name, age)
    @breed = breed
  end

  # Make the dog bark
  def bark
    puts "#{@name} the #{@breed} barks: Woof Woof!"
  end

  # Overriding the make_noise method from the superclass
  def make_noise
    puts "#{@name} the #{@breed} makes a bark noise"
  end
end

class Occurrence
  # This class represents an occurrence during sleep

  getter type : Symbol
  getter duration : Int32
  getter description : String

  # Initialize the occurrence with a type, duration and description
  def initialize(type : Symbol, duration : Int32, description : String)
    @type = type
    @duration = duration
    @description = description
  end

  # Invoke the occurrence by printing its description
  def invoke
    puts "#{@description} is happening for #{@duration}s"
  end
end

# Create an instance of Dog and call its methods
dog = Dog.new("Fido", 7, "Beagle")
dog.make_noise
dog.bark

# Create an instance of Occurrence and call its method
occurrence = Occurrence.new(:dream, 10, "Pizza party dream")
occurrence.invoke