# This is a function that calculates the n-th Fibonacci number using recursion
# @params n: Int - the index of the desired Fibonacci number
# @returns Int - the n-th Fibonacci number
def fibonacci(n)
  if n < 2
    return n
  else
    return fibonacci(n-1) + fibonacci(n-2)
  end
end

# This is a class for a binary tree data structure
class BinaryTree
  # @param value - the value of the root node
  # @param left - the left child node
  # @param right - the right child node
  def initialize(@value : Int, @left : BinaryTree = nil, @right : BinaryTree = nil)
  end

  # This is a method for printing out the tree in preorder traversal
  # @returns String - the tree in preorder traversal format
  def preorder
    # Base case if the node is nil
    if self == nil
      return ""
    end

    # Recursive call for the left child node
    left = @left != nil ? @left.preorder : ""

    # Recursive call for the right child node
    right = @right != nil ? @right.preorder : ""

    # Concatenate the left, right, and root values
    return "#{@value} #{left} #{right}"
  end
end

# Sample code to test the functions and classes
# Create a binary tree with root value of 5, left child of 3, and right child of 8
tree = BinaryTree.new(5, BinaryTree.new(3), BinaryTree.new(8))

# Calculate the 10th Fibonacci number
fibonacci_num = fibonacci(10)

# Print out the tree in preorder traversal format
puts tree.preorder

# Print out the 10th Fibonacci number
puts fibonacci_num