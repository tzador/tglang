# Declare an abstract class Vehicle
abstract class Vehicle
  # Declare abstract method `drive`
  abstract def drive
end

# Declare a class Car that inherits from Vehicle
class Car < Vehicle
  # Set instance variables `make` and `model`
  getter make : String
  getter model : String
  # Initialize class with `make` and `model` parameters
  def initialize(@make, @model)
  end

  # Implement `drive` method specific to Car
  def drive
    puts "Driving the #{@make} #{@model}"
  end
end

# Declare a class Bus that inherits from Vehicle
class Bus < Vehicle
  # Set instance variables `capacity` and `route`
  getter capacity : Int32
  getter route : String
  # Initialize class with `capacity` and `route` parameters
  def initialize(@capacity, @route)
  end

  # Implement `drive` method specific to Bus
  def drive
    puts "Driving the #{@capacity} person #{@route} bus"
  end
end

# Declare a method `start_journey` that takes in a Vehicle object
# and calls the `drive` method
def start_journey(vehicle)
  vehicle.drive
end

# Create an instance of Car and call `start_journey` method
start_journey(Car.new("Honda", "Civic"))

# Create an instance of Bus and call `start_journey` method
start_journey(Bus.new(50, "Downtown"))