# This snippet shows an example of a linked list data structure implementation in Crystal

class Node
  # A node in the linked list contains a value and a pointer to the next node
  property value : Int32
  property next : Node?
  
  # Constructor for creating a new node
  initialize(@value, @next = nil : Node?)
end

class LinkedList
  # A linked list contains a pointer to the head node and the tail node
  property head : Node?
  property tail : Node?
  
  # Constructor for creating a new linked list with an optional initial value
  def initialize(initial_value : Int32? = nil)
    if initial_value
      # Initialize the head and tail nodes with the initial value
      @head = Node.new(initial_value)
      @tail = @head
    end
  end
  
  # Method to append a new node at the end of the linked list
  def append(value : Int32)
    # Create a new node with the given value
    new_node = Node.new(value)
    
    # If the linked list is empty, set the new node as the head and tail
    if @head.nil?
      @head = new_node
      @tail = new_node
    else
      # Otherwise, set the next pointer of the tail node to the new node
      @tail.next = new_node
      # Update the tail pointer to the new node
      @tail = new_node
    end
  end
  
  # Method to prepend a new node at the beginning of the linked list
  def prepend(value : Int32)
    # Create a new node with the given value
    new_node = Node.new(value)
    
    # If the linked list is empty, set the new node as the head and tail
    if @head.nil?
      @head = new_node
      @tail = new_node
    else
      # Otherwise, set the next pointer of the new node to the head
      new_node.next = @head
      # Update the head pointer to the new node
      @head = new_node
    end
  end
  
  # Method to insert a new node at a specific index
  def insert_at(value : Int32, index : UInt32)
    # Create a new node with the given value
    new_node = Node.new(value)
    
    # If index is 0, set the new node as the head and update the next pointer to the previous head
    if index == 0
      new_node.next = @head
      @head = new_node
    else
      # Start from the head and traverse the linked list until the specified index is reached
      current_node = @head
      (index - 1).times do
        if current_node.nil?
          # If the index is out of bounds, raise an error
          raise IndexError.new("Index out of bounds")
        end
        # Move to the next node
        current_node = current_node.next
      end
      
      # If the current node is nil, the index is out of bounds
      if current_node.nil?
        raise IndexError.new("Index out of bounds")
      end
      
      # Set the new node's next pointer to the current node's next pointer
      new_node.next = current_node.next
      # Set the current node's next pointer to the new node
      current_node.next = new_node
      
      # If the new node is inserted at the end of the linked list, update the tail pointer
      if new_node.next.nil?
        @tail = new_node
      end
    end
  end
  
  # Method to remove the node at a specific index
  def remove_at(index : UInt32)
    # If the linked list is empty or the index is out of bounds, raise an error
    if @head.nil? || index >= self.size
      raise IndexError.new("Index out of bounds")
    end
    
    # If the index is 0, set the head to the next node and return the removed node's value
    if index == 0
      removed_value = @head.value
      @head = @head.next
    else
      # Start from the head and traverse the linked list until the specified index is reached
      current_node = @head
      (index - 1).times do
        if current_node.next.nil?
          # If the index is out of bounds, raise an error
          raise IndexError.new("Index out of bounds")
        end
        # Move to the next node
        current_node = current_node.next
      end
      
      # If the current node is nil or the next node is nil, the index is out of bounds
      if current_node.nil? || current_node.next.nil?
        raise IndexError.new("Index out of bounds")
      end
      
      # Remove the next node by setting its next pointer to the next next node
      removed_value = current_node.next.value
      current_node.next = current_node.next.next
      
      # If the removed node was the tail, update the tail pointer
      if current_node.next.nil?
        @tail = current_node
      end
    end
    
    # Return the removed value
    removed_value
  end
  
  # Method to get the size of the linked list by traversing it
  def size
    # If the linked list is empty, return 0
    if @head.nil?
      return 0
    end
    
    # Start from the head and traverse the linked list, counting each node
    size = 0
    current_node = @head
    until current_node.nil?
      size += 1
      current_node = current_node.next
    end
    
    size
  end
  
  # Method to check if the linked list contains a specific value
  def contains?(value : Int32)
    # If the linked list is empty, return false
    if @head.nil?
      return false
    end
    
    # Start from the head and traverse the linked list until the value is found
    current_node = @head
    until current_node.nil?
      if current_node.value == value
        return true
      else
        current_node = current_node.next
      end
    end
    
    # If the value is not found, return false
    false
  end
  
  # Method to print the linked list in a human-readable format
  def to_s
    # If the linked list is empty, return an empty string
    if @head.nil?
      return ""
    end
    
    # Start from the head and traverse the linked list, appending each value to a string
    current_node = @head
    values = []
    until current_node.nil?
      values << current_node.value.to_s
      current_node = current_node.next
    end
    
    # Join the values into a string separated by arrows
    values.join(" -> ")
  end
end

# Create a new linked list with the initial value of 5
list = LinkedList.new(5)

# Append new nodes with values 7, 9 and 11 to the linked list
list.append(7)
list.append(9)
list.append(11)

# Prepend a new node with value 3 to the linked list
list.prepend(3)

# Insert a new node with value 8 at index 3
list.insert_at(8, 3)

# Remove the node at index 1 (value 7)
list.remove_at(1)

# Print the size of the linked list
puts list.size

# Check if the linked list contains value 9
puts list.contains?(9)

# Print the linked list in a human-readable format
puts list.to_s

# Output: 3 -> 8 -> 9 -> 11