# This is a function that takes in two integer values and returns their sum
# `x` and `y` are the parameters for the function
# The function returns an integer value
def sum(x : Int32, y : Int32) : Int32
    return x + y
end

# This is a class named `Shape` that has two properties, `length` and `width`
# The class has a constructor method that initializes the properties
# The `area` method calculates the area of the shape
class Shape
    # The `@[Readonly]` annotation ensures that the property cannot be modified
    property length : Int32 @[Readonly]
    property width : Int32 @[Readonly]

    # The constructor `initialize` method sets the initial values for the properties
    def initialize(@length : Int32, @width : Int32)
    end

    # The `area` method calculates the area of the shape using the `length` and `width` properties
    def area
        return @length * @width
    end
end

# This is a loop that iterates through a range of numbers from 1 to 10
for i in 1..10
    # The `next` keyword skips to the next iteration if the condition is true
    next if i.even?

    # The `puts` method prints the value of `i`
    puts i
end

# This is an if-else statement that checks if a given number is prime or not
# The `prime_flag` variable is used to store the result
prime_flag = true

# The `check_prime` method takes in a number as a parameter
def check_prime(number : Int32)
    # If the given number is less than 2, it is not prime
    if number < 2
        prime_flag = false
    end

    # Otherwise, check if the number is divisible by any number from 2 to the square root of the number
    for i in 2..Math.sqrt(number)
        # If the number is divisible by `i`, it is not prime
        if number % i == 0
            prime_flag = false
            break
        end
    end
end

# This is a function that takes in a string and returns the reverse of the string
# `str` is the parameter for the function
# The function returns a string value
def reverse(str : String) : String
    # Initialize an empty string
    result = ""

    # Loop through the characters of the input string in reverse order
    for i in (str.size-1)..0
        # Append each character to the `result` string
        result << str[i]
    end

    return result
end