class Node
    property :value
    property :next_node

    def initialize(@value)
      @next_node = nil
    end
  end

  class LinkedList
    property :head
    property :tail

    def initialize()
      @head = nil
      @tail = nil
    end

    # Method to add a node at the end of the linked list
    def add_node(value)
      new_node = Node.new(value)

      # Check if the linked list is empty
      if @head == nil
        @head = new_node
        @tail = new_node
      else
        @tail.next_node = new_node
        @tail = new_node
      end
    end

    # Method to delete a node at a specific index
    def delete_node(index)
      # Check if the linked list is empty
      if @head == nil
        puts "LinkedList is empty"
      else
        # Loop through the linked list until the desired index is reached
        current_node = @head
        previous_node = nil
        i = 0
        while current_node != nil && i < index
          previous_node = current_node
          current_node = current_node.next_node
          i += 1
        end

        # Check if the desired index was found
        if i == index
          # Check if the node to be deleted is the head or tail
          if previous_node == nil
            @head = current_node.next_node
          elsif current_node == @tail
            previous_node.next_node = nil
            @tail = previous_node
          else
            previous_node.next_node = current_node.next_node
          end
        else
          puts "Node not found at index #{index}"
        end
      end
    end
  end