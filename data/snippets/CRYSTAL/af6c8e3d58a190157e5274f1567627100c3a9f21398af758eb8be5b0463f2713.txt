# This is a comment in Crystal programming language

# Defining a function with two parameters
def encrypt(input_string, key)

  # Creating an empty array to store the encrypted characters
  encrypted_chars = [] of String

  # Looping through each character in the input string
  input_string.each_char do |char|

    # Converting the character to its ASCII value and adding the key
    encrypted_char = (char.ord + key).chr

    # Appending the encrypted character to the array
    encrypted_chars << encrypted_char
  end

  # Converting the array to a string
  encrypted_string = encrypted_chars.join("")

  # Returning the encrypted string
  return encrypted_string
end

# Defining a function with two parameters
def decrypt(encrypted_string, key)

  # Creating an empty array to store the decrypted characters
  decrypted_chars = [] of String

  # Looping through each character in the encrypted string
  encrypted_string.each_char do |char|

    # Converting the character to its ASCII value and subtracting the key
    decrypted_char = (char.ord - key).chr

    # Appending the decrypted character to the array
    decrypted_chars << decrypted_char
  end

  # Converting the array to a string
  decrypted_string = decrypted_chars.join("")

  # Returning the decrypted string
  return decrypted_string
end

# Prompting the user to enter a string to be encrypted
puts "Enter a string to be encrypted: "

# Storing the user's input in a variable
input_string = gets.chomp

# Prompting the user to enter a key for encryption
puts "Enter a key for encryption: "

# Storing the user's input in a variable and converting it to an integer
key = gets.chomp.to_i

# Encrypting the input string with the given key and storing the result in a variable
encrypted_string = encrypt(input_string, key)

# Printing the encrypted string
puts "Encrypted string: #{encrypted_string}"
 
# Decrypting the encrypted string with the given key and storing the result in a variable
decrypted_string = decrypt(encrypted_string, key)

# Printing the decrypted string
puts "Decrypted string: #{decrypted_string}"