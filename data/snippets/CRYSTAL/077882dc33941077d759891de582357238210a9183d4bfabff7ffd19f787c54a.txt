# This is a complex code snippet in the CRYSTAL programming language
# It performs a sorting algorithm on an array of integers using a recursive approach
# The output will be the sorted array in ascending order
# Author: John Doe

# Define a method called 'recursive_sort' that takes in an array as its only argument
def recursive_sort(array)
  # Check if the array only has one element, if so, return the array as it is already sorted
  if array.size <= 1
    array
  else
    # Select a pivot value, in this case, we will choose the first element of the array
    pivot = array[0]

    # Select all elements in the array that are less than the pivot value and store them in a new array
    less = array[1..-1].select { |x| x <= pivot }
    # Select all elements in the array that are greater than the pivot value and store them in a new array
    greater = array[1..-1].select { |x| x > pivot }

    # Recursive call to sort the 'less' array
    sorted_less = recursive_sort(less)
    # Recursive call to sort the 'greater' array
    sorted_greater = recursive_sort(greater)

    # Combine the sorted 'less' array, pivot value, and sorted 'greater' array into a new array
    sorted_less + [pivot] + sorted_greater
  end
end

# Define an array of integers to be sorted
array_to_sort = [5, 2, 8, 1, 3, 9, 4, 7, 6]

# Call the 'recursive_sort' method passing in the array to be sorted
sorted_array = recursive_sort(array_to_sort)

# Print the sorted array to the console
puts "Sorted Array: #{sorted_array}"