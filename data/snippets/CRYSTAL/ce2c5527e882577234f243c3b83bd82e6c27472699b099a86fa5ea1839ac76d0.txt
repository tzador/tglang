# This code snippet uses a recursive algorithm to calculate the nth Fibonacci number
# in the most efficient way possible using memoization in Crystal programming language

# Define a Hash to store previously calculated Fibonacci numbers for faster access
fibonacci_numbers : Hash(Int32, Int32) = {}

# Create a recursive method that uses memoization to calculate nth Fibonacci number
def fib(n)
  if n < 2
    return n
  end

  # If number is already in the Hash, return its value
  if fibonacci_numbers[n]
    return fibonacci_numbers[n]
  else
    # Otherwise, calculate the number using recursion and store it in the Hash for future use
    fibonacci_numbers[n] = fib(n-1) + fib(n-2)
    return fibonacci_numbers[n]
  end
end

# Prompt user input for the desired nth Fibonacci number
puts "Enter the value of n : "
n = gets.to_i

# Call the fib method with user input and print the result
puts "The #{n}th Fibonacci number is : #{fib(n)}"