# This code snippet performs a binary search on a sorted array using recursion
# It returns the index of the target value or -1 if it is not found
# @param array [Array(Int32)] the sorted array to search
# @param target [Int32] the value to search for
# @param start_idx [Int32] the starting index of the array
# @param end_idx [Int32] the ending index of the array
# @return [Int32] the index of the target value or -1 if it is not found
def binary_search(array, target, start_idx, end_idx)
  # check for valid array
  if array.size < 1
    return -1
  end

  # check for valid target value
  if target < array[start_idx] || target > array[end_idx]
    return -1
  end

  # calculate midpoint of array
  midpoint = (start_idx + end_idx) / 2

  # check if target is equal to midpoint
  if target == array[midpoint]
    return midpoint
  end

  # check if target is less than midpoint
  # recursively call binary_search on left half
  if target < array[midpoint]
    return binary_search(array, target, start_idx, midpoint - 1)
  end

  # recursively call binary_search on right half
  return binary_search(array, target, midpoint + 1, end_idx)
end

# Example Usage:
#
# # declare an array and sort it
# array = [2, 5, 7, 10, 13, 24, 26, 29, 34]
#
# # search for target value
# target = 10
#
# # perform binary search and print result
# puts binary_search(array, target, 0, array.size - 1)