# This code snippet generates a fractal pattern using recursion in the CRYSTAL programming language

require "cairo" # importing the Cairo library for graphics

# define a function to draw the fractal pattern
def fractal_pattern(cr, x, y, size, angle, depth)
  if depth > 0
    new_size = size * 0.7071 # create a new size for each iteration
    cr.move_to(x + size * 0.5, y) # move to starting point of first line segment
    cr.line_to(x + size * 0.5 + new_size, y - new_size) # draw a line segment
    cr.line_to(x + size * 0.5 + new_size, y + new_size) # draw a second line segment
    cr.line_to(x + size * 0.5, y) # return to starting point
    cr.close_path # close the path
    cr.stroke # draw the path

    # recursively call function with new coordinates and size
    fractal_pattern(cr, x + size * 0.5 + new_size, y - new_size, new_size, angle, depth - 1)
    fractal_pattern(cr, x + size * 0.5 + new_size, y + new_size, new_size, angle, depth - 1)
  end
end

surface = Cairo::ImageSurface.new(Cairo::FORMAT_ARGB32, 1000, 1000) # create a new image surface
context = Cairo::Context.new(surface) # create a new cairo context with the image surface as the target

context.set_source_color(Cairo::Color::BLACK) # set drawing color to black
context.set_line_width(1) # set line width to 1 pixel

# call the fractal function with initial coordinates, size, angle and depth
fractal_pattern(context, 250, 250, 300, 45, 5)

surface.write_to_png("fractal.png") # save the image to a png file