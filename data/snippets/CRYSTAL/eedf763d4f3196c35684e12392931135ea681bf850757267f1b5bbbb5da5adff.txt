# This program generates a random hexadecimal color code and checks if it is a valid color
# rules for valid color in hex: # must start with a #, followed by 3 or 6 letters or numbers
# A valid color example: #ff0000

# require the random library to generate random numbers
require "random"

# create a Global Constant `VALID_LETTERS_NUMBERS`
VALID_LETTERS_NUMBERS = ['a','b','c','d','e','f','0','1','2','3','4','5','6','7','8','9']

# method to generate a random hexadecimal color code
def generate_color
  # initialize an empty string
  color = ""
  # append "#" to the string
  color << "#"

  # generate a random number, either 3 or 6
  length = Random::Int32.new_between(3, 6)

  # loop through the length of the color code
  for i in 0..length do
    # generate a random index for the VALID_LETTERS_NUMBERS array
    index = Random::Int32.new_between(0, VALID_LETTERS_NUMBERS.size-1)

    # append the random element from the array to the color string
    color << VALID_LETTERS_NUMBERS[index]
  end

  # return the generated color code
  color
end

# method to check if a given string is a valid hex color code
def valid_color?(color)
  # check if the string starts with a "#"
  if color[0] == "#"
    # check if the length of the string is either 4 or 7
    if color.length == 4 || color.length == 7
      # loop through the string (ignore the first character)
      for i in 1...color.length do
        # check if the character at the current index is in the VALID_LETTERS_NUMBERS array
        if !VALID_LETTERS_NUMBERS.include?(color[i])
          # if the character is not valid, return false
          return false
        end
      end
      # if all characters are valid, return true
      return true
    else
      # if the length is not 4 or 7, return false
      return false
    end
  else
    # if the string does not start with "#", return false
    return false
  end
end

# generate a random color code
color_code = generate_color

# print the generated color code
puts "Generated color code: #{color_code}"

# check if the generated color code is valid
if valid_color?(color_code)
  puts "The generated color code is valid."
else
  puts "The generated color code is not valid."
end