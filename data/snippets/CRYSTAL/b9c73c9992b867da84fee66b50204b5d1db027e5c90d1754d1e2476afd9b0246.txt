class User
  # creating a user class with attributes
  property name : String # name of user
  property age : Int32   # age of user
  property email : String # email of user
  
  # initializing user object with default values for name, age, and email
  def initialize(@name = "John Doe", @age = 25, @email = "john@doe.com")
  end
end

# creating a mixin module for methods related to roles
module Roles
  # method to set user's role
  def set_role(role)
    @role = role
  end
  
  # method to check if user has a specific role
  def has_role?(role)
    @role == role
  end
end

# creating a sub class of User called Moderator
class Moderator < User
  # including the Roles module for role-related methods
  include Roles
  
  # initializing moderator object with default user values plus the role
  def initialize(
    @name = "Jane Doe",
    @age = 30,
    @email = "jane@doe.com",
    @role = "moderator"
  )
  end
end

# creating an instance of the User class
user = User.new

# creating an instance of the Moderator class
moderator = Moderator.new

# calling the set_role method on the moderator instance to set its role
moderator.set_role("super moderator")

# printing out information about the moderator
puts "Name: #{moderator.name}"
puts "Age: #{moderator.age}"
puts "Email: #{moderator.email}"
puts "Role: #{moderator.role}"

# checking if the moderator has the "moderator" role
puts "Is moderator?: #{moderator.has_role?("moderator")}"
# checking if the moderator has the "super moderator" role
puts "Is super moderator?: #{moderator.has_role?("super moderator")}"