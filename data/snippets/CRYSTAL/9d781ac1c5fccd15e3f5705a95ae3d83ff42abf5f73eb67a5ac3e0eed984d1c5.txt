# This is a class for a doubly linked list
class DoublyLinkedList
  # This is a struct for each node in the list
  struct Node
    property value
    property prev : Node
    property next : Node
  end

  property head : Node # head node of the list
  property tail : Node # tail node of the list

  # Constructor for creating a new list with a given initial value
  def initialize(initial_value)
    @head = Node.new
    @tail = Node.new

    @head.value = initial_value
    @head.prev = nil # no previous node for the head
    @head.next = @tail # tail is the next node after head

    @tail.value = nil # no value for the tail
    @tail.prev = @head # head is the previous node before tail
    @tail.next = nil # no next node after tail
  end

  # Method for adding a new node to the end of the list
  def add_node(value)
    new_node = Node.new
    new_node.value = value
    new_node.prev = @tail # current tail becomes previous node for new node
    new_node.next = nil # no next node after new node

    @tail.next = new_node # new node becomes next node after tail
    @tail = new_node # new node becomes the new tail
  end

  # Method for removing a node from the list
  def remove_node(node)
    # If node to remove is the head node
    if node == @head
      # Update head to point to the next node
      @head = node.next
      # Set new head's previous node to nil
      @head.prev = nil
    # If node to remove is the tail node
    elsif node == @tail
      # Update tail to point to the previous node
      @tail = node.prev
      # Set new tail's next node to nil
      @tail.next = nil
    else
      # Update next node's previous node to point to previous node
      node.next.prev = node.prev
      # Update previous node's next node to point to next node
      node.prev.next = node.next
    end
  end
end