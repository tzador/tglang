class Node(T)
    property value : T
    property next : Node(T)

    def initialize(@value : T, @next : Node(T)? = nil)
    end

    # Return the string representation of the node
    def to_s
        "(#{value})"
    end
end

# A Linked List class implemented using Nodes
class LinkedList(T)
    property head : Node(T)?
    property tail : Node(T)?
    property size : Int32

    def initialize
        @head = nil
        @tail = nil
        @size = 0
    end

    # Add a new element to the end of the linked list
    def add(value : T)
        # Create the new node with the given value
        node = Node(T).new(value)

        # If the list is empty, make the new node the head and tail
        if head.nil?
            @head = node
            @tail = head
        # Otherwise, add the new node to the end and update the tail
        else
            tail.next = node
            @tail = node
        end

        # Increment the size of the list
        @size += 1
    end

    # Return the element at the given index
    def get(index : Int32) : T?
        # Check for invalid index
        if index < 0 || index > size - 1
            return nil
        end

        # Start at the head of the list
        current = head
        # Track the index of the current node
        current_index = 0

        # Loop through the list until the current node is the desired index
        while current_index < index
            current = current.next
            current_index += 1
        end

        # Return the value of the current node
        current.value
    end

    # Remove the node at the given index and return its value
    def remove(index : Int32) : T?
        # Check for invalid index
        if index < 0 || index > size - 1
            return nil
        end

        # If the index is 0, remove the head node
        if index == 0
            # Save the value of the head node to return later
            value = head.value

            # Move the head to the next node
            @head = head.next
            # Decrement the size of the list
            @size -= 1

            # Return the value of the removed node
            return value
        end

        # Otherwise, remove the node at the given index
        # Start at the head of the list
        current = head
        # Track the index of the current node
        current_index = 0

        # Loop through the list until the current node is the node before the desired index
        while current_index < index - 1
            current = current.next
            current_index += 1
        end

        # Save the value of the removed node to return later
        value = current.next.value

        # Update the next node to skip over the removed node
        current.next = current.next.next
        # Decrement the size of the list
        @size -= 1

        # Return the value of the removed node
        value
    end

    # Return a string representation of the linked list
    def to_s
        # Start at the head of the list
        current = head
        # Create an empty string to hold the values
        list_string = ""

        # Loop through the list, adding each element to the string
        while !current.nil?
            list_string += "(#{current.value}) "
            current = current.next
        end

        # Return the string
        return list_string
    end
end

# Create a new linked list and add some elements
list = LinkedList(Int32).new
list.add(10)
list.add(20)

# Print the list using the to_s method
puts list.to_s # Output: (10) (20)