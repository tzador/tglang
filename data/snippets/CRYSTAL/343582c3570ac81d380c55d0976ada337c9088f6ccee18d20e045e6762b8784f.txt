# This code snippet generates a recursive function in CRYSTAL

# Define the recursive function
# The function takes in an integer as input and returns a string
# The integer represents the number of times the function will be recursively called
def recursive_function(n : Int) : String
    # Check if the value of n is equal to 0
    if n == 0
        # If so, return a string indicating the base case of the recursion
        return "This is the base case of the recursion"

    # If n is not equal to 0, call the recursive function recursively, passing in n - 1 as the new input
    result = recursive_function(n - 1)

    # Append the value of n to the result, creating a string representing the current level of recursion
    result = "Recursive function called with n = #{n}. " + result

    # Return the updated result
    return result

# Call the recursive function with an initial value of 5
result = recursive_function(5)

# Print the result
puts result

# Output:
# Recursive function called with n = 1. Recursive function called with n = 2. Recursive function called with n = 3. Recursive function called with n = 4. Recursive function called with n = 5. This is the base case of the recursion