# This is a complex code snippet in CRYSTAL programming language
# It contains a function that prints a series of prime numbers
# starting from 2 up to a given limit

# Define a function called `generate_primes` with a parameter `limit`
def generate_primes(limit)
	# Initialize an empty array to store the prime numbers
	primes = Array(Int32).new
	
	# Initialize a variable `current_number` with a value of 2
	current_number = 2
	
	# Loop through numbers starting from 2 up to the given `limit`
	while current_number <= limit
		is_prime = true
		
		# Loop through the numbers in the `primes` array
		primes.each do |prime|
			# Check if the `current_number` is divisible by any of the prime numbers
			# If it is, then it is not a prime number
			if current_number % prime == 0
				is_prime = false
				break
			end
		end
		
		# If the `current_number` is still marked as prime
		# Add it to the `primes` array
		if is_prime
			primes << current_number
		end
		
		# Increment the `current_number` by 1
		current_number += 1
	end
	
	# Print the `primes` array as a list
	puts "Prime numbers up to #{limit}:"
	puts "["
	primes.each do |prime|
		puts "\t#{prime}"
	end
	puts "]"
end

# Call the `generate_primes` function with a limit of 20
generate_primes(20)