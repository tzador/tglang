# This is a sample program in CRYSTAL
# It performs a recursive sorting algorithm called quicksort

# Define a method called 'quicksort' that takes in a list of integers as a parameter
def quicksort(input_list : Array(Int32))

  # Check if the input list has more than one element
  # If not, return the list as it is
  if input_list.size < 2
    return input_list

  else
    # Select a pivot element, in this case, the first element of the list
    pivot = input_list[0]

    # Define two sub-arrays to hold elements greater than and less than the pivot element
    smaller_elements : Array(Int32) = []
    bigger_elements : Array(Int32) = []

    # Loop through the elements in the input list
    for element in input_list[1..input_list.size]
      # Check if the element is smaller than the pivot
      if element < pivot
        # Add the element to the smaller elements array
        smaller_elements << element

      else
        # Add the element to the bigger elements array
        bigger_elements << element
      end
    end

    # Sort the smaller elements array using the quicksort method recursively
    sorted_smaller_elements = quicksort(smaller_elements)

    # Add the pivot element in between the sorted smaller and bigger elements
    sorted_smaller_elements << pivot

    # Sort the bigger elements array using the quicksort method recursively
    sorted_bigger_elements = quicksort(bigger_elements)

    # Concatenate the sorted smaller and bigger elements to get the final sorted array
    sorted_list = sorted_smaller_elements + sorted_bigger_elements

    # Return the sorted list
    return sorted_list
  end
end

# Define an input list of unsorted integers
input_list : Array(Int32) = [9, 4, 1, 7, 2, 5, 8, 3, 6]

# Call the quicksort method on the input list and assign the sorted list to a variable
sorted_list = quicksort(input_list)

# Print the sorted list to the console
puts(sorted_list)

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]