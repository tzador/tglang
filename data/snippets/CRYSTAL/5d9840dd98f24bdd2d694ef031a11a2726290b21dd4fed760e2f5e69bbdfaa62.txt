# A class to represent a 3D point
class Point3D
  #instance variables for x,y,z coordinates
  @x : Float64
  @y : Float64 
  @z : Float64

  #Constructor
  def initialize(x,y,z)
    @x = x
    @y = y
    @z = z
  end

  #Getter method for x coordinate
  def x : Float64
    return @x
  end

  #Setter method for y coordinate
  def y=(value : Float64)
    @y = value
  end

  #Getter method for z coordinate
  def z : Float64
    return @z
  end
  
  #Method to calculate distance between two points
  def distance_to(other : Point3D) : Float64
    Math.sqrt((other.x - @x) ** 2 + (other.y - @y) ** 2 + (other.z - @z) ** 2)
  end

  #Method to move point in specified direction
  def move(direction : String, distance : Float64) : Point3D
    case direction
    when "left"
      @x -= distance
    when "right"
      @x += distance
    when "up"
      @y += distance
    when "down"
      @y -= distance
    when "forward"
      @z += distance
    when "backward"
      @z -= distance
    else
      puts "Invalid direction. Please enter 'left', 'right', 'up', 'down', 'forward', or 'backward'"
    end
    return self
  end
end

#Create two points and calculate distance between them
p1 = Point3D.new(1.0, 2.0, 3.0)
p2 = Point3D.new(4.0, 5.0, 6.0)
distance = p1.distance_to(p2)

#Print distance between points
puts "Distance between point p1 and p2 is: #{distance}"

#Move point p1
p1.move("left", 2.0).move("forward", 3.0).move("up", 1.0)

#Print new coordinates for point p1
puts "New coordinates for point p1 are: x = #{p1.x}, y = #{p1.y}, z = #{p1.z}"

Result: