# This code snippet contains multiple functions that perform different calculations using recursion

# Define a function that calculates the factorial of a given number using recursion
def factorial(n)
  if n <= 1
    return 1
  else
    return n * factorial(n - 1)
  end
end

# Define a function that calculates the Fibonacci sequence of a given number using recursion
def fibonacci(n)
  if n <= 1
    return n
  else
    return fibonacci(n - 1) + fibonacci(n - 2)
  end
end

# Define a function that calculates the sum of all numbers in a given array using recursion
def sum_array(arr)
  if arr.empty?
    return 0
  else
    return arr[0] + sum_array(arr[1..-1])
  end
end

# Define a function that returns the maximum value in a given array using recursion
def max_in_array(arr)
  if arr.length == 1
    return arr[0]
  else
    max = max_in_array(arr[1..-1])
    if arr[0] > max
      return arr[0]
    else
      return max
    end
  end
end

# Define a function that performs binary search on a given sorted array using recursion
def binary_search(arr, target, low = 0, high = arr.length - 1)
  if low > high
    return -1
  else
    mid = (low + high) / 2
    if arr[mid] == target
      return mid
    elsif arr[mid] > target
      return binary_search(arr, target, low, mid - 1)
    else
      return binary_search(arr, target, mid + 1, high)
    end
  end
end

# Define a function that calculates the power of a given base and exponent using recursion
def power(base, exponent)
  if exponent == 0
    return 1
  elsif exponent < 0
    return 1.0 / power(base, -exponent)
  else
    return base * power(base, exponent - 1)
  end
end

# Call the functions and print their outputs
puts "Factorial of 5: #{factorial(5)}"
puts "Fibonacci of 9: #{fibonacci(9)}"
puts "Sum of array [3, 7, 2, 9, 4]: #{sum_array([3, 7, 2, 9, 4])}"
puts "Max value in array [3, 7, 2, 9, 4]: #{max_in_array([3, 7, 2, 9, 4])}"
puts "Index of target 7 in array [1, 3, 5, 7, 9]: #{binary_search([1, 3, 5, 7, 9], 7)}"
puts "2 to the power of 5: #{power(2, 5)}"