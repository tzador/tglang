class Person
  # A class representing a person
  getter name : String
  getter age : Int32

  # Initializes a new instance of Person with the given name and age
  #
  # name - The person's name, as a String
  # age - The person's age, as an Int32
  def initialize(@name, @age)
    # Error handling if name and age are not present
    raise ArgumentError.new("Invalid name and/or age") unless name? && age?

    @is_adult = age >= 18
  end

  # Checks if the person's name is present
  #
  # Returns true if the name is present, false otherwise
  def name?
    !name.nil?
  end

  # Checks if the person's age is present
  #
  # Returns true if the age is present, false otherwise
  def age?
    !age.nil?
  end

  # Prints a greeting message for the person
  #
  # Returns the greeting message as a String
  def greet
    if is_adult?
      "Hello, my name is #{@name} and I am #{@age} years old."
    else
      "Hi, my name is #{@name} and I am #{@age} years old."
    end
  end

  private

  # Checks if the person is over 18 years old
  #
  # Returns true if the person is an adult, false otherwise
  def is_adult?
    @is_adult
  end
end

# Creates a new Person instance with the given name and age
#
# name - The person's name, as a String
# age - The person's age, as an Int32
bob = Person.new("Bob", 25)

# Prints a greeting message for the person
puts bob.greet #=> "Hello, my name is Bob and I am 25 years old."

# Creates a new Person instance with invalid name and age
jane = Person.new(nil, 15) #=> ArgumentError: Invalid name and/or age