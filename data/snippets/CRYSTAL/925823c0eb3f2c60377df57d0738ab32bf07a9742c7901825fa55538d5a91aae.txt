# This is a complex function that calculates the factorial of a number
# and returns an array of prime numbers using a recursive algorithm

require "prime" # Importing the Prime module for prime number calculations

def factorial(n : Int32) : Int32
  if n <= 1 # Base case: if the number is less than or equal to 1, return 1
    return 1
  else
    # Recursive case: multiply the number by the factorial of the previous number
    return n * factorial(n - 1)
  end
end

def prime_numbers(n : Int32) : Array(Int32)
  result = [] # Initializing an empty array to store the prime numbers
  if n <= 1
    return result # If the input number is less than or equal to 1, return the empty array
  else
    if n.is_prime? # Check if the number is prime using the is_prime? method in the Prime module
      result << n # If the number is prime, add it to the result array
    end
    # Recursively call the function with the previous number and append the results to the current result array
    result = result + prime_numbers(n - 1)
    return result
  end
end

# Main code
puts "Enter a number to calculate its factorial and find prime numbers: "
input = gets.to_i # Get input from user and convert it to an integer
fact = factorial(input) # Call the factorial function and store the result in a variable
prime = prime_numbers(fact) # Call the prime_numbers function and store the result in a variable
puts "Factorial of #{input} is #{fact}"
puts "Prime numbers in the range of 1 to #{fact} are: #{prime}"