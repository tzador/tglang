## The following code snippet is a function that sorts an array using the Quicksort algorithm.

require "spec"

# function definition

def quicksort(array : Array(Int32)) : Array(Int32)

  return array if array.size <= 1

  pivot = array.delete_at(array.size / 2)
  lower_array = Array(Int32).new
  higher_array = Array(Int32).new

  array.each do |num|
    if num <= pivot
      lower_array << num
    else
      higher_array << num
    end
  end

  # recursive calls to sort the smaller arrays
  lower_array = quicksort(lower_array)
  higher_array = quicksort(higher_array)

  return lower_array + [pivot] + higher_array
end

# example usage
array = [5, 2, 10, 3, 8, 1, 9]
sorted_array = quicksort(array) # returns [1, 2, 3, 5, 8, 9, 10]

# validation with RSpec
describe "quicksort" do
  it "sorts an array using the Quicksort algorithm" do
    bad_array = [5, 3, 10, 2, 4, 7, 1]
    good_array = [1, 2, 3, 4, 5, 7, 10]
    sorted_array = quicksort(bad_array)
    expect(sorted_array).to eq(good_array)
  end
end