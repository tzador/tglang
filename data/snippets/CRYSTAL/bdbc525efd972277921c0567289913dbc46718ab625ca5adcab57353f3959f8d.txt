# This is a complex code snippet in CRYSTAL language

class Complex
  # defining the attributes of the complex number
  property real : Float32
  property imaginary : Float32

  # initializing the values of the complex number
  def initialize(@real : Float32, @imaginary : Float32)
  end

  # defining addition operation for complex numbers
  # takes in another complex number and returns the sum
  def + (other : Complex) : Complex
    return Complex.new(self.real + other.real, self.imaginary + other.imaginary)
  end

  # defining subtraction operation for complex numbers
  # takes in another complex number and returns the difference
  def - (other : Complex) : Complex
    return Complex.new(self.real - other.real, self.imaginary - other.imaginary)
  end

  # defining multiplication operation for complex numbers
  # takes in another complex number and returns the product
  def * (other : Complex) : Complex
    return Complex.new(self.real * other.real - self.imaginary * other.imaginary, self.real * other.imaginary + self.imaginary * other.real)
  end

  # defining division operation for complex numbers
  # takes in another complex number and returns the quotient
  def / (other : Complex) : Complex
    divisor = (other.real * other.real) + (other.imaginary * other.imaginary)
    return Complex.new((self.real * other.real + self.imaginary * other.imaginary) / divisor, (self.imaginary * other.real - self.real * other.imaginary) / divisor)
  end

  # defining modular operation for complex numbers
  # takes in another complex number and returns the modulus
  def % (other : Complex) : Complex
    return Complex.new(self.real % other.real, self.imaginary % other.imaginary)
  end

  # defining absolute value operation for complex numbers
  # returns the absolute value of the complex number
  def abs : Float32
    return Float32.sqrt((self.real * self.real) + (self.imaginary * self.imaginary))
  end

  # defining conjugate operation for complex numbers
  # returns the conjugate of the complex number
  def conjugate : Complex
    return Complex.new(self.real, -self.imaginary)
  end
end

# creating two complex numbers
complex1 = Complex.new(2.5, 3.9)
complex2 = Complex.new(1.7, 2.2)

# performing operations on the two complex numbers
sum = complex1 + complex2
difference = complex1 - complex2
product = complex1 * complex2
quotient = complex1 / complex2

# printing the results
puts "The sum is #{sum.real} + #{sum.imaginary}i"
puts "The difference is #{difference.real} + #{difference.imaginary}i"
puts "The product is #{product.real} + #{product.imaginary}i"
puts "The quotient is #{quotient.real} + #{quotient.imaginary}i"