# This is a comment in CRYSTAL programming language
# Here we define a class called "Person"
class Person
  # In CRYSTAL, we use "getter" and "setter" methods to access and modify class variables
  getter name
  # These methods are automatically created for us when we use the "getter" and "setter" keywords
  # Here we define a variable "age" with a default value of 0
  # We also specify that it should be an integer
  getter(age) : Int32 = 0
  
  # This is a private variable, only accessible within the class
  # It is not automatically created for us, so we need to define a "getter" method for it
  @birthday : Date
  
  # This is a constructor method that takes in a name and age parameter
  # We also set the "birthday" variable to the current date
  initialize(@name : String, birthday : Date) : Nil
    @birthday = birthday
    puts "A new person named #{@name} has been created with a birthday of #{@birthday}"
  end
  
  # Here we define a method to calculate the person's age based on their birthday
  # Note that we use the "getter" method for "birthday" to access the private variable
  def age
    # We use the built-in "Age" module to do the calculation for us
    Age.between(@birthday, Date.new).years
  end
  
  # This is a class method, denoted by "self." before the method name
  # It can only be called on the class itself, not on individual instances of the class
  # Here we simply print out a message to the console
  def self.hello
    puts "Hello from the Person class!"
  end
  
  # This is a private method, denoted by "private" before the method name
  # It can only be called from within the class, not outside of it
  # Here we define a formatted string that includes the person's name and age
  private def bio
    "#{@name} is #{@age} years old."
  end
end

# Now we create a new instance of the Person class and pass in a name and birthday
# Note that the birthday is in the format of "YYYY-MM-DD"
person = Person.new("Jane", "1990-05-25")

# We can access and modify the name and age variables using the "getter" and "setter" methods
person.name = "Jane Smith"
person.age = 30

# We can also call the age method to calculate their current age
current_age = person.age

# We can call the class method on the Person class itself
Person.hello

# We can also call the private bio method within the class, but not outside of it
puts person.bio

# Output:
# "Jane Smith is 30 years old."