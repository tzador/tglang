# This code snippet uses the CRYSTAL language
# to create a complex linked list data structure

# First, define a class for the linked list nodes
class LinkedListNode
  property value
  property next_node

  # Initializes a new node with a given value
  def initialize(@value)
    @next_node = nil
  end
end

# Define a class for the linked list
class LinkedList
  property head
  property tail
  property size

  # Initializes an empty linked list
  def initialize
    @head = nil
    @tail = nil
    @size = 0
  end

  # Adds a new node to the end of the list
  def add(value)
    new_node = LinkedListNode.new(value)

    if @head.nil?
      @head = new_node
      @tail = new_node
    else
      @tail.next_node = new_node
      @tail = new_node
    end

    @size += 1
  end

  # Removes the first occurence of a given value in the list
  def remove(value)
    current_node = @head
    previous_node = nil

    while !current_node.nil? && current_node.value != value
      previous_node = current_node
      current_node = current_node.next_node
    end

    if current_node == @head
      @head = current_node.next_node
      @tail = nil if @head.nil?
      @size -= 1
    elsif !current_node.nil?
      previous_node.next_node = current_node.next_node
      @tail = previous_node if current_node.next_node.nil?
      @size -= 1
    end
  end

  # Inserts a new node with a given value at a specified index
  def insert_at(value, index)
    new_node = LinkedListNode.new(value)

    if index == 0
      new_node.next_node = @head
      @head = new_node
      @tail = new_node if @size == 0
    elsif index == @size
      @tail.next_node = new_node
      @tail = new_node
    else
      current_node = @head
      previous_node = nil

      index.times do
        previous_node = current_node
        current_node = current_node.next_node
      end

      previous_node.next_node = new_node
      new_node.next_node = current_node
    end

    @size += 1
  end
end

# Create a new linked list object
list = LinkedList.new

# Add nodes with values 10, 20, and 30 to the list
list.add(10)
list.add(20)
list.add(30)

# Remove the node with value 20 from the list
list.remove(20)

# Insert a new node with value 40 at index 1
list.insert_at(40, 1)

# Output the final state of the list
puts list.head   # <LinkedListNode:0x00007ffcb9840980 @value=10, @next_node=<LinkedListNode:0x00007ffcb98406a0 @value=40, @next_node=<LinkedListNode:0x00007ffcb9840460 @value=30, @next_node=nil>>>
puts list.tail   # <LinkedListNode:0x00007ffcb9840460 @value=30, @next_node=nil>
puts list.size   # 3