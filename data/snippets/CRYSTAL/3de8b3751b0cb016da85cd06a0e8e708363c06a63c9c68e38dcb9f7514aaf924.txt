# This function implements quick sort algorithm to sort a list of integers
def quick_sort(list, start, end)
  # If the list has only one element, return the list
  if start >= end
    return list
# Choose the pivot element as the first element in the list
  pivot = list[start]
# Initialize two variables to keep track of the indices of the smaller and larger elements
  smaller = start + 1
  larger = end
# While the smaller index is not equal to the larger index
  while smaller <= larger
# If the element at the smaller index is larger than the pivot element and the element at the larger index is smaller than the pivot element
    if list[smaller] > pivot && list[larger] < pivot
# Swap the two elements
      temp = list[smaller]
      list[smaller] = list[larger]
      list[larger] = temp
# Increment the smaller index and decrement the larger index
      smaller += 1
      larger -= 1
# If the element at the smaller index is smaller than the pivot element
    elsif list[smaller] < pivot
# Increment the smaller index
      smaller += 1
# If the element at the larger index is larger than the pivot element
    elsif list[larger] > pivot
# Decrement the larger element
      larger -= 1
    end
  end
# Swap the pivot element with the element at the larger index
  temp = list[larger]
  list[larger] = pivot
  list[start] = temp
# Perform quick sort on the left half of the list
  quick_sort(list, start, larger - 1)
# Perform quick sort on the right half of the list
  quick_sort(list, larger + 1, end)
end

# Example: Sorting a list of integers using quick sort
list = [14, 3, 25, 6, 17, 10]
# Call quick sort function
quick_sort(list, 0, list.size - 1)
# Output: [3, 6, 10, 14, 17, 25]