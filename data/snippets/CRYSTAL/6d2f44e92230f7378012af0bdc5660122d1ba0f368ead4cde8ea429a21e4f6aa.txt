class Player

  # This is a comment in Crystal
  property name : String

  # This is a another comment
  property level : Int32

  # Private keyword to make the property accessible only within the class
  private property health : Float64

  # Initializing the properties in the constructor
  def initialize(@name : String, @level : Int32, @health : Float64)
    puts "#{@name} has joined the game!"
  end

  # Method to simulate the player attacking another player
  def attack(target : Player)
    damage = rand(1...10) # Generating a random number between 1 and 10
    target.take_damage(damage)
  end

  # Method to simulate the player taking damage
  def take_damage(damage : Int32)
    if @health > 0
      @health -= damage
      puts "#{@name} took #{damage} damage!"
    else
      puts "#{@name} has been defeated!"
    end
  end

  # Method to check if the player is still alive
  def alive? : Bool
    @health > 0
  end
end

# Create two instances of the Player class
player1 = Player.new("Crystal", 10, 100.0)
player2 = Player.new("Garnet", 8, 100.0)

# Call the attack method on player1
player1.attack(player2)

# Print the current health of player2
puts "Current health of #{player2.name} is #{player2.health}"

# Check if player2 is still alive
if player2.alive?
  puts "#{player2.name} is still alive!"
else
  puts "#{player2.name} has been defeated!"
end