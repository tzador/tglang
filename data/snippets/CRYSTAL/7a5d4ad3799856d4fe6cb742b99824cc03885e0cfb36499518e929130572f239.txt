# This is a code snippet in CRYSTAL that generates a random password with a specified length

# Import the SecureRandom library for generating random numbers
require "securerandom"

# Function to generate a random password
# Takes in length as an argument and returns the password as a string
def generate_password(length)
    # Initialize an empty string to hold the password
    password = ""
    # Define an array of characters for the password
    characters = ['a'..'z', 'A'..'Z', '0'..'9'].map(&:to_a).flatten
    # Loop through the specified length and append a random character to the password string each iteration
    length.times { password << characters.sample }
    # Return the generated password
    return password
end

# Set the desired length of the password
password_length = 12

# Generate a random password of the specified length and store it in a variable
random_password = generate_password(password_length)

# Print the generated password
puts random_password