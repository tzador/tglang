# This code snippet creates a generic linked list class
class LinkedList(T)
  # Generic node class with a value and pointer to next node
  class Node(T)
    property value : T
    property next : Node(T) | Nil
    def initialize(@value, @next); end
  end

  # Properties for head and tail nodes of the linked list
  property head : Node(T) = nil
  property tail : Node(T) = nil

  # Add a value to the end of the linked list
  def add(value : T)
    # Create a new node with the value and set its next pointer to nil
    node = Node.new(value, nil)

    # If there is no head, set the new node as the head and tail
    if head.nil?
      @head = node
      @tail = node
    else
      # Otherwise, set the current tail's next pointer to the new node
      # and update the tail to the new node
      @tail.next = node
      @tail = node
    end
  end

  # Insert a value at a specific index in the linked list
  def insert(value : T, index : Int)
    # Create a new node with the value
    node = Node.new(value, nil)

    # If index is 0, set the new node as the head and point its next
    # to the previous head
    if index == 0
      node.next = @head
      @head = node
    else
      # Otherwise, traverse the linked list until reaching the
      # specified index or the end of the list
      current = @head
      i = 0
      loop do
        # If index is reached or the next node is nil,
        # insert the new node and break out of the loop
        if i == index || current.next.nil?
          node.next = current.next
          current.next = node
          break
        else
          # Otherwise, continue to the next node and increment index
          current = current.next
          i += 1
        end
      end
    end
  end

  # Remove the first occurrence of a value in the linked list
  def remove(value : T)
    # If the head is nil, the list is empty so return nil
    if head.nil?
      return nil
    end

    # If the head contains the value, set the head to the next node
    # and return the value
    if @head.value == value
      node = @head
      @head = @head.next
      return node.value
    end

    # Otherwise, traverse the linked list until reaching the
    # node with the value or the end of the list
    current = @head
    while current.next
      if current.next.value == value
        # If the next node contains the value, remove it from the list
        # and return the value
        node = current.next
        current.next = current.next.next
        return node.value
      else
        # Otherwise, continue to the next node
        current = current.next
      end
    end

    # If the value is not found, return nil
    return nil
  end
end

# Example usage:
# Create a linked list with integers
list = LinkedList(Int32).new
list.add(5)
list.add(10)
list.add(15)
list.insert(8, 1)
list.remove(10)
puts list.head.value # Output: 5