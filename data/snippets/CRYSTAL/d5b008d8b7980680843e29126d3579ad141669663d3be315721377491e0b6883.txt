# Declare a class with a type parameter
class Container(T)

  # Declare an instance variable with the given type parameter
  @[Type::params{T}]
  @value : T

  # Define a constructor that takes in a value and assigns it to the instance variable
  def initialize(@value : T)
    # Placeholder for any other initialization code
  end

  # Define a getter method to retrieve the value of the instance variable
  def value
    @value
  end

  # Define a setter method to change the value of the instance variable
  # Note: This method is marked with the 'mutating' keyword to indicate that it changes the object's state
  def value=(new_value : T)
    @value = new_value
  end

end

# Create an instance of the 'Container' class with a string as the type parameter
container = Container(String).new("Hello World")

# Call the getter method to retrieve the value and print it
puts container.value # Output: Hello World

# Call the setter method to change the value
container.value = "Goodbye World"

# Call the getter method again to confirm that the value has been changed
puts container.value # Output: Goodbye World