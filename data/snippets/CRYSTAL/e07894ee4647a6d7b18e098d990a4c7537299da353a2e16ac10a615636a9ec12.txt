# A complex algorithm for finding prime numbers

# Define a function to check if a number is prime
fun is_prime?(num : Int) : Bool
  if num < 2
    # Numbers less than 2 are not prime
    return false
  end

  # Loop through all numbers from 2 to the square root of the number
  for i in 2..Math.sqrt(num).floor
    # If the number is divisible by any of the numbers, it is not prime
    if num % i == 0
      return false
    end
  end
  
  # If the number is not divisible by any of the numbers, it is prime
  return true
end

# Define a function to generate a list of prime numbers
fun generate_primes(up_to : Int) : Array(Int)
  # Create an empty array to store prime numbers
  primes = [] of Int

  # Loop through all numbers from 2 up to the given number
  for num in 2..up_to
    # Check if the number is prime using our is_prime? function
    if is_prime?(num)
      # If it is prime, add it to the array
      primes << num
    end
  end

  # Return the array of prime numbers
  return primes
end

# Call the generate_primes function and print out the list of prime numbers up to 10000
puts "List of prime numbers up to 10000:"
puts generate_primes(10000)