# This is a complex code snippet in Crystal
# It performs a Fibonacci series calculation with recursion and memoization
# Define a memoized function 'fib' with paramater 'n' of type Int32
# Returns an Int32 value
def fib(n : Int32)
  # Return 0 if n is 0 or 1
  return n if n <= 1

  # Check if the calculated value has already been memoized
  memoized = (0..n).to_a # Create an array containing all values from 0 to n
  memoized[0] = 0        # Initialize the first two values of the memoized array
  memoized[1] = 1

  # If the value has not been memoized, recursively calculate it
  return memoized[n] if memoized[n]

  # Calculate the Fibonacci series recursively and memoize the result
  memoized[n] = fib(n-1) + fib(n-2)

  # Return the calculated value of fib(n)
  memoized[n]
end

# Define the input number
number = 10

# Print the values of the Fibonacci series up to the input number
for i in 0..number do
  puts "Fibonacci series for #{i} is: #{fib(i)}"
end