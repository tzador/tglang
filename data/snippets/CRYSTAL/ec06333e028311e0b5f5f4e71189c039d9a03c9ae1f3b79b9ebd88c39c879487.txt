POINTER(Int32).new(5) 

#=> Creates a new pointer to an Int32 with a value of 5.
#   This is just one way to use pointers in Crystal,
#   as they allow for direct memory manipulation and
#   can be used for implementing low-level features.

fibonacci_sequence = [0, 1] of Int32

loop do
  new_number = fibonacci_sequence.fib
  break if (new_number > 100)

  fibonacci_sequence << new_number
end

def fibonacci(n)
  return n if (n < 2)
  fibonacci(n - 1) + fibonacci(n - 2)
end

#=> Generates a Fibonacci sequence using recursion and adds
#   numbers to an array until the generated number is greater
#   than 100. The `fib` method is a custom method defined
#   on the `Array` class.

class Person
  property name : String
  property age : Int32
  property occupation : String

  def initialize(@name, @age, @occupation)
  end

  def description
    "Hi, my name is #{@name}, I am #{@age} years old and I am an #{@occupation}"
  end
end

#=> A class called Person with properties for name, age and occupation.
#   The `initialize` method sets the values of these properties.
#   The `description` method uses string interpolation to return
#   information about the person. This is an example of object-oriented
#   programming in Crystal.