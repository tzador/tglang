# This is a simple program in the Crystal programming language that generates an encrypted message

# Define encryption method that takes in a string and a numerical key
def encrypt(message, key)
    encrypted_message = ""
    message.each_char do |c|
        # Convert character to ASCII code
        char_code = c.ord
        # Shift ASCII code by key value
        encrypted_code = char_code + key
        # Convert encrypted ASCII code back to character
        encrypted_char = encrypted_code.chr
        # Add encrypted character to final message 
        encrypted_message += encrypted_char
    end
    
    # Return encrypted message
    return encrypted_message
end

# Define decryption method that takes in an encrypted message and numerical key
def decrypt(encrypted_message, key)
    decrypted_message = ""
    encrypted_message.each_char do |c|
        # Convert character to ASCII code
        char_code = c.ord
        # Shift ASCII code by key value
        decrypted_code = char_code - key
        # Convert decrypted ASCII code back to character
        decrypted_char = decrypted_code.chr
        # Add decrypted character to final message
        decrypted_message += decrypted_char
    end
    
    # Return decrypted message
    return decrypted_message
end

# Get user input for message and key
puts "Enter message to encrypt: "
message = gets.chomp
puts "Enter encryption key: "
key = gets.chomp.to_i

# Encrypt message and print result
encrypted_message = encrypt(message, key)
puts "Encrypted message: #{encrypted_message}"

# Decrypt message and print result
decrypted_message = decrypt(encrypted_message, key)
puts "Decrypted message: #{decrypted_message}"