# This code snippet generates a randomized binary search tree
class Node
  # Create getters and setters for left and right child nodes
  property left_child, right_child

  # Create constructor to set initial values and child nodes to nil
  def initialize(value)
    @value = value
    @left_child = nil
    @right_child = nil
  end
end

# Function to insert new nodes into the tree
def insert(node, value)
  # Check if the current node is nil and create a new Node if it is
  if node.nil?
    node = Node.new(value)
  # If the value is less than the current node, insert it into the left subtree
  elsif value < node.value
    node.left_child = insert(node.left_child, value)
  # If the value is greater than the current node, insert it into the right subtree
  else
    node.right_child = insert(node.right_child, value)
  end

  # Return the updated node
  node
end

# Function to generate a random binary search tree
def generate_tree(size)
  # Create an array to store the values and populate it with random integers
  values = Array.new(size) { rand(100) }

  # Create the root node with the first value in the array
  root = Node.new(values[0])

  # Insert the rest of the values into the tree
  for i in 1...size
    insert(root, values[i])
  end

  # Return the root of the generated tree
  root
end

# Main code
# Generate a random binary search tree with 10 nodes
tree = generate_tree(10)