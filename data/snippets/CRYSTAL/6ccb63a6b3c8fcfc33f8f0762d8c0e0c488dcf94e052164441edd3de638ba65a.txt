# This is a function that calculates the factorial of a given number
# It uses a recursive algorithm to do so
def factorial(number)
  # Base case: if the number is 0 or 1, return 1
  if number == 0 || number == 1
    return 1
  # If the number is greater than 1, call the function again with number-1 and multiply it with the original number
  else
    return number * factorial(number - 1)
  end
end

# This is a function that calculates the sum of squares of a given array
def sum_of_squares(arr)
  # Initialize a variable to store the sum
  sum = 0
  # Use a loop to iterate through the array
  for i in 0..arr.size-1
    # Square each element and add it to the sum variable
    sum += arr[i] * arr[i]
  end
  # Return the sum
  return sum
end

# This is a function that checks if a number is prime or not
def is_prime(number)
  # If the number is 1, its not a prime number
  if number == 1
    return false
  # If the number is 2 or 3, its a prime number
  elsif number == 2 || number == 3
    return true
  # If the number is divisible by 2 or 3, its not a prime number
  elsif number % 2 == 0 || number % 3 == 0
    return false
  # Otherwise, check if the number is divisible by any number from 5 to the square root of the number
  else
    # Get the square root of the number
    sqrt = Math.sqrt(number).to_i
    # Use a loop to check if the number is divisible by any number from 5 to the square root
    for i in 5..sqrt
      if number % i == 0
        return false
      end
    end
    # If the number is not divisible by any number from 5 to the square root, then its a prime number
    return true
  end
end

# Create an array with numbers from 1 to 10
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Print out the factorial of 5
puts "Factorial of 5: #{factorial(5)}"

# Print out the sum of squares of the numbers in the array
puts "Sum of squares: #{sum_of_squares(numbers)}"

# Check if the number 13 is a prime number
if is_prime(13)
  puts "13 is a prime number"
else
  puts "13 is not a prime number"
end