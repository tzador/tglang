# This is a code snippet written in the CRYSTAL programming language.
# It is a function that sorts an array of integers in ascending order using the bubble sort algorithm.

# Define the function that takes in a single argument, an array of integers.
def bubble_sort(input_arr)
  
  # Create a boolean variable to keep track of whether a swap has been made.
  # Set it to true initially.
  swap_made = true

  # Use a while loop to run the sorting algorithm until no swaps have been made in a single iteration.
  while swap_made do

    # Set the boolean variable to false at the beginning of each iteration.
    swap_made = false

    # Use a for loop to iterate through the array, starting at index 0.
    # Keep track of the current index using an integer variable.
    # Use ranges in CRYSTAL to specify the start and end of the loop.
    for i in 0...(input_arr.size-1)
      
      # Compare each element in the array with its adjacent element.
      # If the current element is greater than the next element, swap them.
      if input_arr[i] > input_arr[i+1]
        
        # Use multiple assignments in CRYSTAL to swap the elements.
        input_arr[i], input_arr[i+1] = input_arr[i+1], input_arr[i]

        # Set the boolean variable to true to indicate a swap has been made.
        swap_made = true
      end
    end
  end

  # After the loop has completed, return the sorted array.
  return input_arr
end

# Example usage of the function with an unsorted array.
example_arr = [3, 7, 2, 10, 5]
sorted_arr = bubble_sort(example_arr)

# Print the sorted array to the console.
# Output should be [2, 3, 5, 7, 10]
p sorted_arr