/**
  * This function calculates the factorial of a given number using recursion.
  * @param {number} num - The number whose factorial needs to be calculated.
  * @returns {number} - The factorial of the given number.
*/
function factorial(num) {
  if (num === 0) { // base case, factorial of 0 is 1
    return 1;
  } else {
    return num * factorial(num - 1); // recursive call to calculate factorial
  }
}

/**
  * This function checks if a given string is a palindrome using recursion.
  * @param {string} str - The string to be checked.
  * @returns {boolean} - True if the string is a palindrome, false if not.
*/
function isPalindrome(str) {
  if (str.length <= 1) { // base case, empty or single character string is a palindrome
    return true;
  } else {
    if (str[0] === str[str.length - 1]) { // check if first and last character match
      return isPalindrome(str.substr(1, str.length - 2)); // recursive call with substring
    } else {
      return false;
    }
  }
}

/**
  * This class represents a person with a name and age.
  * @class
*/
class Person {
  /**
    * Creates a new instance of Person class.
    * @param {string} name - The name of the person.
    * @param {number} age - The age of the person.
  */
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  /**
    * Returns the name of the person.
    * @returns {string} - The name of the person.
  */
  getName() {
    return this.name;
  }

  /**
    * Returns the age of the person.
    * @returns {number} - The age of the person.
  */
  getAge() {
    return this.age;
  }
}

/**
  * This function sorts an array of numbers in ascending order using recursion.
  * @param {number[]} arr - The array of numbers to be sorted.
  * @returns {number[]} - The sorted array.
*/
function recursiveSort(arr) {
  if (arr.length <= 1) { // base case, array with 0 or 1 element is already sorted
    return arr;
  } else {
    let pivot = arr[0]; // choose the first element as pivot
    let less = []; // create arrays to store elements less than, equal to, and greater than pivot
    let equal = [pivot];
    let greater = [];
    for (let i = 1; i < arr.length; i++) { // loop through elements after pivot
      if (arr[i] < pivot) { // divide elements into appropriate arrays
        less.push(arr[i]);
      } else if (arr[i] === pivot) {
        equal.push(arr[i]);
      } else {
        greater.push(arr[i]);
      }
    }
    return recursiveSort(less).concat(equal).concat(recursiveSort(greater)); // recursively sort less and greater arrays, then combine
  }
}