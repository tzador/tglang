// Function to calculate the nth Fibonacci number
function fibonacci(n){
  if(n === 0){
    return 0;
  } else if(n === 1){
    return 1;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}

// Function to find the factorial of a number
function factorial(n){
  if(n === 0 || n === 1){
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

// Function to check if a given number is prime
function isPrime(n){
  if(n === 2){
    return true;
  } else if(n > 2){
    for(let i = 2; i < n; i++){
      if(n % i === 0){
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
}

// Function to generate the first n terms of the Fibonacci series
function generateFibonacciSeries(n){
  let series = [];
  if(n === 0){
    series.push(0);
  } else if(n === 1){
    series.push(0);
    series.push(1);
  } else {
    series.push(0);
    series.push(1);
    for(let i = 2; i < n; i++){
      series.push(fibonacci(i));
    }
  }
  return series;
}

// Function to generate the first n terms of the factorial series
function generateFactorialSeries(n){
  let series = [];
  for(let i = 0; i < n; i++){
    series.push(factorial(i));
  }
  return series;
}

// Function to generate the prime numbers up to a given number
function generatePrimeSeries(limit){
  let series = [];
  for(let i = 2; i <= limit; i++){
    if(isPrime(i)){
      series.push(i);
    }
  }
  return series;
}

// Function to reverse a string
function reverseString(str){
  let reversed = "";
  for(let i = str.length - 1; i >= 0; i--){
    reversed += str[i];
  }
  return reversed;
}

// Function to check if a given string is a palindrome
function isPalindrome(str){
  let reversed = reverseString(str);
  if(reversed === str){
    return true;
  } else {
    return false;
  }
}

// Function to remove duplicates from an array
function removeDuplicates(arr){
  let uniqueArr = [];
  for(let i = 0; i < arr.length; i++){
    if(!uniqueArr.includes(arr[i])){
      uniqueArr.push(arr[i]);
    }
  }
  return uniqueArr;
}

// Function to sort an array in ascending order using bubble sort algorithm
function bubbleSort(arr){
  let sorted = false;
  while(!sorted){
    sorted = true;
    for(let i = 0; i < arr.length - 1; i++){
      if(arr[i] > arr[i + 1]){
        sorted = false;
        let temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
      }
    }
  }
  return arr;
}

// Function to convert a string to snake case
function toSnakeCase(str){
  let snakeCase = "";
  for(let i = 0; i < str.length; i++){
    if(str[i] === " "){
      snakeCase += "_";
    } else {
      snakeCase += str[i];
    }
  }
  return snakeCase;
}

// Function to convert a string to kebab case
function toKebabCase(str){
  let kebabCase = "";
  for(let i = 0; i < str.length; i++){
    if(str[i] === " "){
      kebabCase += "-";
    } else {
      kebabCase += str[i];
    }
  }
  return kebabCase;
}

// Function to replace a string with dashes where there is a space
function replaceSpacesWithDashes(str){
  let replaced = "";
  for(let i = 0; i < str.length; i++){
    if(str[i] === " "){
      replaced += "-";
    } else {
      replaced += str[i];
    }
  }
  return replaced;
}

// Function to calculate the sum of two matrices
function sumMatrices(m1, m2){
  let result = [];
  for(let i = 0; i < m1.length; i++){
    result.push([]);
    for(let j = 0; j < m1[i].length; j++){
      result[i][j] = m1[i][j] + m2[i][j];
    }
  }
  return result;
}

// Function to calculate the mean of an array
function calculateMean(arr){
  let sum = 0;
  for(let i = 0; i < arr.length; i++){
    sum += arr[i];
  }
  return sum / arr.length;
}

// Function to calculate the median of an array
function calculateMedian(arr){
  let sorted = bubbleSort(arr);
  if(sorted.length % 2 === 0){
    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(sorted.length / 2) - 1]) / 2;
  } else {
    return sorted[Math.floor(sorted.length / 2)];
  }
}

// Function to calculate the mode of an array
function calculateMode(arr){
  let frequency = {};
  for(let i = 0; i < arr.length; i++){
    if(!(arr[i] in frequency)){
      frequency[arr[i]] = 1;
    } else {
      frequency[arr[i]]++;
    }
  }
  let maxFrequency = 0;
  let mode;
  for(let key in frequency){
    if(frequency[key] > maxFrequency){
      maxFrequency = frequency[key];
      mode = key;
    }
  }
  return parseInt(mode);
}