const fibonacci = (num) => {
  // Function to return num-th Fibonacci number
  if (num < 2) {
    return num;
  } else {
    // Using recursion to calculate the Fibonacci number
    return fibonacci(num - 2) + fibonacci(num - 1);
  }
};

// Example input and output
console.log(fibonacci(5)); // Output: 5
console.log(fibonacci(8)); // Output: 21
console.log(fibonacci(13)); // Output: 233

// Using dynamic programming to optimize recursive function
const fibonacciDP = (num) => {
  // Initializing an array with first two Fibonacci numbers
  const memo = [0, 1];

  // Function to calculate Fibonacci number using memoization
  const fib = (n) => {
    if (memo[n] !== undefined) {
      return memo[n];
    }

    // Calculating Fibonacci number and storing it in memo array
    const result = fib(n - 1) + fib(n - 2);
    memo[n] = result;
    return result;
  };

  // Returning the num-th Fibonacci number
  return fib(num);
};

// Example input and output
console.log(fibonacciDP(5)); // Output: 5
console.log(fibonacciDP(8)); // Output: 21
console.log(fibonacciDP(13)); // Output: 233