// Function to find the factorial of a number
function factorial(num) {
    // Base case
    if (num === 0 || num === 1) {
        return 1;
    } else {
        // Recursive case
        return num * factorial(num - 1);
    }
}
// Function to print the first n numbers of the Fibonacci series
function fibonacci(n) {
    // Base cases
    if (n === 1) {
        return [0, 1];
    } else if (n === 2) {
        return [0, 1, 1];
    } else {
        // Declare an empty array to store the series
        let series = [0, 1, 1];
        // Loop through n-2 times to generate the series
        for (let i = 3; i <= n; i++) {
            // Calculate the next number in the series by adding the last two numbers
            let nextNum = series[i-1] + series[i-2];
            // Add the next number to the series array
            series.push(nextNum);
        }
        // Return the fully generated series
        return series;
    }
}
// Function to check if a number is prime
function isPrime(num) {
    // Base cases
    if (num === 2 || num === 3) {
        return true;
    } else if (num < 2 || num % 2 === 0 || num % 3 === 0) {
        return false;
    } else {
        // Loop through all numbers between 5 and the square root of the number
        for (let i = 5; i <= Math.sqrt(num); i++) {
            // Check if the number is divisible by any of the numbers in the range
            if (num % i === 0) {
                // If it is, then it is not prime
                return false;
            }
        }
        // If it survives the loop, then it is prime
        return true;
    }
}

// Example outputs:
factorial(5), returns 120
fibonacci(7), returns [0, 1, 1, 2, 3, 5, 8, 13]
isPrime(43), returns true