// This code snippet uses the Map data structure and higher order functions in JavaScript.

// Create a Map with some key-value pairs
const myMap = new Map([
  ["John", 25],
  ["Sarah", 30],
  ["Tom", 28],
  ["Rachel", 27]
]);

// Use the map() function to create a new map with all the values incremented by 2
const newMap = new Map(Array.from(myMap, ([key, value]) => [key, value + 2]));

// Output the new map
console.log(newMap); // Output: Map(4) { 'John' => 27, 'Sarah' => 32, 'Tom' => 30, 'Rachel' => 29 }

// Use the forEach() function to loop through each key-value pair in the new map
newMap.forEach((value, key) => {
  // If the value is greater than 30, delete the key-value pair
  if (value > 30) {
    newMap.delete(key);
  }
});

// Output the updated map
console.log(newMap); // Output: Map(3) { 'John' => 27, 'Tom' => 30, 'Rachel' => 29 }

// Use the reduce() function to calculate the sum of all the values in the updated map
const sum = Array.from(newMap.values()).reduce((total, currentValue) => {
  return total + currentValue;
}, 0);

// Output the sum
console.log(sum); // Output: 86

// Use the entries() function to create an iterator of the key-value pairs in the updated map
const mapIterator = newMap.entries();

// Use a for loop to iterate through the iterator and output each key-value pair
for (let pair of mapIterator) {
  console.log(`Key: ${pair[0]}, Value: ${pair[1]}`); // Output: Key: John, Value: 27
                                                    // Key: Tom, Value: 30
                                                    // Key: Rachel, Value: 29
}

// Use the clear() function to remove all key-value pairs from the updated map
newMap.clear();

// Output the updated map
console.log(newMap); // Output: Map(0) {}