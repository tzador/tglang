/**
 * This function creates and returns a new object with calculated property values based on the values of existing object properties.
 * The new object's property values will be the result of a function that is passed in as a parameter and takes in the original value as its argument.
 * An additional parameter, `thisArg`, can be passed in to change what `this` refers to within the function.
 * @param {Object} obj - The original object
 * @param {Function} fn - The function used to calculate the new property values
 * @param {*} [thisArg] - Optional value to refer to within the function as `this`
 * @returns {Object} - The new object with calculated property values
 */
function mapValues(obj, fn, thisArg) {
  return Object.entries(obj).reduce((acc, [key, value]) => {
    acc[key] = fn.call(thisArg, value);
    return acc;
  }, {});
}

// Example usage

const originalObject = {
  name: 'John',
  age: 30,
  occupation: 'Engineer'
}

const newObj = mapValues(originalObject, (value) => `${value} Doe`, 'Jane');

console.log(newObj); // { name: 'Jane Doe', age: '30 Doe', occupation: 'Engineer Doe'}
// Please note that `thisArg` is used to change the context within the function to refer to a different object.