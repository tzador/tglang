/**
 * Function that uses recursion to calculate the factorial of a given number
 * @param {number} num - the number to calculate factorial for
 * @returns {number} the factorial of the given number
 */
function factorial(num) {
  // base case
  if (num <= 1) {
    return 1;
  }
  // recursive call
  return num * factorial(num - 1);
}

// example call and output
console.log(factorial(5)); // output: 120
console.log(factorial(8)); // output: 40320

/**
 * Function that sorts an array of numbers using the bubble sort algorithm
 * @param {Array} arr - the array of numbers to be sorted
 * @returns {Array} the sorted array of numbers
 */
function bubbleSort(arr) {
  // loop through array length
  for (let i = 0; i < arr.length; i++) {
    // inner loop to compare elements
    for (let j = 0; j < arr.length - i - 1; j++) {
      // if element at current index is greater than next element, swap them
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

// example call and output
let unsortedArr = [6, 3, 8, 2, 5];
console.log(bubbleSort(unsortedArr)); // output: [2, 3, 5, 6, 8]

// example call and output
let anotherArr = [-10, 0, 2, -5, 3];
console.log(bubbleSort(anotherArr)); // output: [-10, -5, 0, 2, 3]