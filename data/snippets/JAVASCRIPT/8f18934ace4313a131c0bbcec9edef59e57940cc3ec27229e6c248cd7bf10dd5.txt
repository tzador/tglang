const readline = require('readline');
// This creates a constant variable called 'readline' and assigns it the 'require' method from the 'readline' module.

const rl = readline.createInterface({
	// This creates a variable called 'rl' and assigns it the 'createInterface' method from the 'readline' module.
  	input: process.stdin,
  	output: process.stdout,
  	// This defines the input and output streams for the Readline Interface.
  	terminal: false
  	// This sets the readline interface to non-terminal mode.
});

const fs = require('fs');
// This creates a constant variable called 'fs' and assigns it the 'require' method from the 'fs' module.

let keywordArr = [];
// This creates a variable called 'keywordArr' and initializes it with an empty array.

const writeToKeywordArr = (keyword) => {
	// This creates a constant variable called 'writeToKeywordArr' and assigns it an arrow function, which takes in a parameter 'keyword'.
	keywordArr.push(keyword);
	// This pushes the 'keyword' parameter to the 'keywordArr' array.
}

rl.on('line', (line) => {
	// This calls the 'on' method on the Readline Interface with an event type of 'line' and passes in an arrow function with a 'line' parameter.
  	writeToKeywordArr(line.trim());
  	// This calls the 'writeToKeywordArr' function, which trims the 'line' and adds it to the 'keywordArr'.
});

rl.on('close', () => {
	// This calls the 'on' method on the Readline Interface with an event type of 'line' and passes in an arrow function with no parameters.
	// This code block will be executed when the readline interface is closed.
	fs.writeFile('keywordArray.txt', keywordArr.toString(), (err) => {
		// This calls the 'writeFile' method from the 'fs' module and passes in three parameters: the file name to be created, the contents to be written (converted to a string), and an arrow function with an 'err' parameter.
  		if (err) throw err;
  		// This checks if there is an error and throws it if there is one.
  		console.log('Successfully wrote keyword array to file!');
  		// This logs a success message to the console if the file was successfully written.
	});
   	rl.close();
   	// This closes the readline interface.
});

// This code snippet creates a Readline Interface with the standard input and output streams, sets it to non-terminal mode, and listens for input from the user. Each input is trimmed and added to an array called 'keywordArr'. When the readline interface is closed, the 'keywordArr' array is written to a file using the 'writeFile' method from the 'fs' module. Once the file is written, the readline interface is closed.