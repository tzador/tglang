// This code snippet is a function that implements Quick Sort algorithm.
// Quick Sort is a divide and conquer sorting algorithm that sorts an array in ascending order.
function quickSort(arr, left, right) {

    // If the length of the array to be sorted is 0 or 1, return the array
    if (arr.length <= 1) return arr;

    // Set the left and right pointers for partitioning
    var pivot = arr[Math.floor((right+left)/2)],
        i = left,
        j = right;

    // Move the left pointer to the right until it reaches a value greater than the pivot
    // Move the right pointer to the left until it reaches a value smaller than the pivot
    while (i <= j) {
        while (arr[i] < pivot) i++;
        while (arr[j] > pivot) j--;
        if (i <= j) {
            // Swap values at the left and right pointers
            var temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;

            // Move the pointers closer to the middle
            i++;
            j--;
        }
    }

    // Recursively call the function on the subarrays until the entire array is sorted
    if (left < j) quickSort(arr, left, j);
    if (i < right) quickSort(arr, i, right);

    // Return the sorted array
    return arr;
}

// Example usage
var array = [5, 2, 8, 4, 1, 9, 3];
var sortedArray = quickSort(array, 0, array.length - 1);

// Output: [1, 2, 3, 4, 5, 8, 9]