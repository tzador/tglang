function mergeSort(array) {
  // check if the array is empty or only contains one element
  if (array.length < 2) {
    return array;
  }

  // find the middle index of the array
  const middle = Math.floor(array.length / 2);

  // divide the array into two halves
  const left = array.slice(0, middle);
  const right = array.slice(middle);

  // recursively call mergeSort on the two halves
  return merge(mergeSort(left), mergeSort(right));
}

// helper function to merge two sorted arrays into one sorted array
function merge(left, right) {
  // initialize an empty array to store the sorted elements
  let result = [];

  // while both left and right arrays still have elements
  while (left.length && right.length) {
    // compare the first elements of the two arrays
    if (left[0] < right[0]) {
      // if the first element of left array is smaller, add it to the result array
      result.push(left.shift());
    } else {
      // else, add the first element of right array to the result array
      result.push(right.shift());
    }
  }

  // concatenate the sorted result array with any remaining elements in left or right arrays
  return [...result, ...left, ...right];
}

// example usage
const array = [4, 2, 8, 1, 5, 3, 9, 7, 6];
const sortedArray = mergeSort(array);
console.log(sortedArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]