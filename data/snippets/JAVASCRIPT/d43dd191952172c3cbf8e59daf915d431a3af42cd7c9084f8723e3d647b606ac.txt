// This code snippet performs the quicksort algorithm on an array of numbers

// Define a function that takes in an array as a parameter
function quicksort(arr) {
  // Check if the array's length is 0 or 1, if so, return the array
  if (arr.length < 2) {
    return arr;
  } else {
    // Set a pivot variable to the middle index of the array
    const pivot = arr[Math.floor(arr.length / 2)];
    // Initialize two empty arrays, one for elements less than the pivot and one for elements greater than the pivot
    const less = [];
    const greater = [];
    // Loop through the array and place elements into the appropriate array based on their values compared to the pivot
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] < pivot) {
        less.push(arr[i]);
      } else if (arr[i] > pivot) {
        greater.push(arr[i]);
      }
    }
    // Use recursion to sort the two new arrays and concatenate them with the pivot in the middle
    return [...quicksort(less), pivot, ...quicksort(greater)]
  }
}

// Example array to test the quicksort algorithm
let arr = [9, 3, 5, 1, 8, 2, 7, 6, 4];

// Call the function and store the sorted array in a variable
let sortedArr = quicksort(arr);

// Print out the sorted array
console.log(sortedArr);

// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]