// Calculates the Fibonacci sequence up to a given number using recursion

// Function that takes in the number of terms in the sequence
const fibonacci = (num) => {
    // Empty array to store sequence
    const sequence = []; 
    // Recursion function that takes in the current index and previous two values
    const helper = (index, prev1, prev2) => {
        // Base case - check if index is equal to num
        if (index === num) {
            return;
        }
        // For the first two values, add them to the array
        if (index === 0) {
            sequence.push(0);
        } else if (index === 1) {
            sequence.push(1);
        // For subsequent values, add the sum of the previous two values to the array
        } else {
            sequence.push(prev1 + prev2);
        }
        // Recursive call, passing in the current index and the last two values in the sequence
        helper(index + 1, sequence[index], sequence[index - 1]);
    };
    // Call helper function with initial values
    helper(0, 0, 1);
    // Return the generated sequence
    return sequence;
}

// Example output for fibonacci(8):
// [0, 1, 1, 2, 3, 5, 8, 13]

// Call fibonacci function
fibonacci(8);