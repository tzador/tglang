// Function to perform binary search on a sorted array
function binarySearch(arr, target) {
  let start = 0;
  let end = arr.length - 1;

  // Loop until the start and end pointers meet
  while (start <= end) {
    let mid = Math.floor((start + end) / 2);

    // If target is found at the middle index, return it
    if (arr[mid] === target) {
      return mid;
    }

    // If target is smaller than the element at mid,
    // update end pointer to search in the left half of the array
    if (arr[mid] > target) {
      end = mid - 1;
    }

    // Otherwise, update start pointer to search in the right half of the array
    else {
      start = mid + 1;
    }
  }

  // If target is not found, return -1
  return -1;
}

// Example usage
let array = [1, 2, 3, 4, 5, 6, 7, 8, 9];
let target = 5;

let result = binarySearch(array, target); // Output: 4 (index of target in the array)