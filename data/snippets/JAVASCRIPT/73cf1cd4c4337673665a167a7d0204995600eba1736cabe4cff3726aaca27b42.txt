// This function checks if a number is prime
function isPrime(num) {
    if(num < 2) return false; // return false if number is less than 2
    for(var i = 2; i < num; i++) { // loop from 2 to number - 1
        if(num % i === 0) return false; // if number is divisible by i, return false
    }
    return true; // if loop completes without returning false, number is prime
}

// This function calculates the factorial of a number
function factorial(num) {
    if(num === 0) return 1; // return 1 if number is 0
    return num * factorial(num - 1); // recursively call function to calculate factorial
}

// This function reverses a string
function reverseString(str) {
    if(str.length === 0) return ""; // return empty string if string is empty
    return str.charAt(str.length - 1) + reverseString(str.substring(0, str.length - 1)); // recursively add the last character to the beginning of reversed string
}

// This function creates a random password with specified length
function generatePassword(length) {
    var password = ""; // start with an empty string
    var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; // list of characters to choose from
    for(var i = 0; i < length; i++) { // loop until specified length is reached
        var randomIndex = Math.floor(Math.random() * characters.length); // generate a random index from the list of characters
        password += characters.charAt(randomIndex); // add the character at that index to the password string
    }
    return password; // return the generated password
}

// This function sorts an array of numbers in ascending order using bubble sort algorithm
function bubbleSort(arr) {
    for(var i = 0; i < arr.length; i++) { // loop through the array
        for(var j = 0; j < (arr.length - i - 1); j++) { // loop through the array again, excluding the elements already sorted
            if(arr[j] > arr[j+1]) { // if the element at current index is greater than the next element
                var temp = arr[j]; // store the current element in a temporary variable
                arr[j] = arr[j+1]; // swap the current element with the next element
                arr[j+1] = temp; // update the next element with the temporary variable
            }
        }
    }
    return arr; // return the sorted array
}

// This function calculates the nth number in the fibonacci sequence
function fibonacci(num) {
    if(num < 0) return "Invalid input"; // return error message if input is negative
    if(num === 0 || num === 1) return num; // return the input itself if it is 0 or 1
    return fibonacci(num-1) + fibonacci(num-2); // recursively call the function to calculate the sum of the previous two numbers in the sequence
}

// This function returns true if two strings are anagrams (contain same characters in different order)
function isAnagram(str1, str2) {
    if(str1.length !== str2.length) return false; // return false if the two strings are of different lengths
    var sortedStr1 = str1.split('').sort().join(''); // split the first string into an array, sort the array, and join it back into a string
    var sortedStr2 = str2.split('').sort().join(''); // do the same for the second string
    return sortedStr1 === sortedStr2; // return true if the two sorted strings are equal
}

// This function returns the largest number in an array
function getMax(arr) {
    var max = arr[0]; // start by assuming the first element in the array as the maximum
    for(var i = 1; i < arr.length; i++) { // loop through the rest of the array
        if(arr[i] > max) { // if an element is greater than the current maximum
            max = arr[i]; // update the maximum
        }
    }
    return max; // return the maximum
}

// This function replaces all spaces in a string with a specified character
function replaceSpaces(str, char) {
    if(str.length === 0) return ""; // return empty string if string is empty
    if(str.length === 1) return str[0]; // return the character itself if string is a single character
    return str[0] + replaceSpaces(str.substring(1), char); // recursively replace spaces with specified character
}

// This function checks if a given year is a leap year
function isLeapYear(year) {
    if(year % 400 === 0) return true; // return true if year is divisible by 400 (century leap year)
    if(year % 100 === 0) return false; // return false if year is divisible by 100 (century non-leap year)
    if(year % 4 === 0) return true; // return true if year is divisible by 4 (common leap year)
    return false; // return false if none of the above conditions are met
}

// This function converts a string to title case
function toTitleCase(str) {
    var strArr = str.toLowerCase().split(' '); // convert string to lower case and split it into an array of words
    for(var i = 0; i < strArr.length; i++) { // loop through the array of words
        var word = strArr[i]; // store current word in variable
        strArr[i] = strArr[i].charAt(0).toUpperCase() + word.slice(1); // capitalize the first letter of the word and concatenate it with the rest of the word
    }
    return strArr.join(' '); // join the words back into a string with a space in between
}

// This function checks if a given string is a palindrome
function isPalindrome(str) {
    if(str.length <= 1) return true; // return true if string is empty or a single character
    if(str[0] !== str[str.length - 1]) return false; // if first and last character are not equal, return false
    return isPalindrome(str.substring(1, str.length - 1)); // recursively check if the substring without the first and last characters is a palindrome
}

// This function checks if a given word is a valid pangram (contains all letters of the alphabet)
function isPangram(str) {
    var alphabet = "abcdefghijklmnopqrstuvwxyz"; // list of all letters in the alphabet
    var lowerStr = str.toLowerCase(); // convert string to lower case
    for(var i = 0; i < alphabet.length; i++) { 
        if(lowerStr.indexOf(alphabet[i]) === -1) { // if any letter in the alphabet is not present in the string, return false
            return false;
        }
    }
    return true; // if loop completes without returning false, return true
}

// This function converts a string to camel case
function toCamelCase(str) {
    var strArr = str.toLowerCase().split(/-|_/); // convert string to lower case and split it by dash or underscore
    for(var i = 1; i < strArr.length; i++) { // loop through the array starting from the second word
        var word = strArr[i]; // store current word in variable
        strArr[i] = word.charAt(0).toUpperCase() + word.slice(1); // capitalize first letter of word and append it to the rest of the word
    }
    return strArr.join(''); // join the words back into a string without spaces
}

// This function checks if a given string is a valid email address
function isValidEmail(email) {
    var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // regular expression pattern for valid email addresses
    return emailRegex.test(email); // return true if email matches the pattern, otherwise return false
}

// This function calculates the greatest common divisor (GCD) of two numbers
function findGCD(num1, num2) {
    if(num2 === 0) return num1; // return the first number if the second number is 0 (base case)
    return findGCD(num2, num1 % num2); // recursively call function with the second number and the remainder of dividing first number by second number
}

// This function finds the index of a specified element in an array using binary search algorithm
function indexOf(arr, elem) {
    var low = 0; // initialize lower bound to index 0
    var high = arr.length - 1; // initialize upper bound to last index of array
    while(low <= high) { // loop until lower bound becomes greater than upper bound
        var mid = Math.floor((low + high) / 2); // calculate middle index
        if(arr[mid] === elem) return mid; // if element is found at middle index, return the index
        else if(elem < arr[mid]) high = mid - 1; // if element is less than middle element, update upper bound
        else low = mid + 1; // if element is greater than middle element, update lower bound
    }
    return -1; // return -1 if element is not found in array
}

// This function calculates the nth term in the geometric sequence with a common ratio
function geometricSequence(n, a, r) {
    if(n === 0) return a; // return first term of sequence if n is 0
    return r * geometricSequence(n - 1, a, r); // recursively call function to calculate nth term
}

// This function performs selection sort on an array of numbers in ascending order
function selectionSort(arr) {
    for(var i = 0; i < arr.length - 1; i++) { // loop through the array
        var minIndex = i; // initialize minimum index to current index
        for(var j = i + 1; j < arr.length; j++) { // loop through the rest of the array
            if(arr[j] < arr[minIndex]) minIndex = j; // if element at j is smaller than element at minimum index, update minimum index to j
        }
        if(minIndex !== i) { // if minimum index is updated, swap the elements at i and minimum index
            var temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }
    return arr; // return sorted array
}

// This function checks if a given number is a perfect square
function isPerfectSquare(num) {
    var sqrt = Math.sqrt(num); // calculate square root of number
    return sqrt === Math.floor(sqrt); // if square root is a whole number, return true, otherwise return false
}

// This function simulate a game of Rock-Paper-Scissors between a player and computer
function rockPaperScissors() {
    var options = ["rock", "paper", "scissors"]; // array of possible choices
    var playerChoice = prompt("Pick rock, paper, or scissors"); // prompt player to make a choice
    var computerChoice = options[Math.floor(Math.random() * options.length)]; // randomly select computer's choice from array
    alert("Computer chose " + computerChoice); // show computer's choice to player
    if(playerChoice.toLowerCase() === computerChoice) { // if player chooses the same as computer, it's a tie
        console.log("It's a tie!");
    } else if((playerChoice.toLowerCase() === "rock" && computerChoice === "scissors") || (playerChoice.toLowerCase() === "paper" && computerChoice === "rock") || (playerChoice.toLowerCase() === "scissors" && computerChoice === "paper")) { // player wins if their choice beats computer's choice
        console.log("You win!");
    } else { // otherwise, computer wins
        console.log("Computer wins!");
    }
}

// This function checks if a given number is happy (sum of squares of digits eventually results in 1)
function isHappy(num) {
    var sum = 0; // initialize sum to 0
    while(num > 0) { // continue calculating sum of squares of digits until num becomes 0
        sum += (num%10) * (num%10); // add square of last digit to sum
        num = Math.floor(num / 10); // remove last digit from number
    }
    if(sum < 10) { // if sum is a single digit number
        if(sum === 1 || sum === 7) return true; // return true if it is 1 or 7 (only happy numbers with single digit)
        else return false; // return false if it is not 1 or 7 (only unhappy numbers with single digit)
    } else { // if sum is not a single digit number
        return isHappy(sum); // recursively call function with new sum
    }
}

// This function checks if a given string has balanced parentheses
function isBalanced(str) {
    var stack = []; // initialize stack to store opening parentheses
    for(var i = 0; i < str.length; i++) { // loop through string characters
        if(str[i] === "(") { // if character is an opening parenthesis, push it to stack
            stack.push(str[i]);
        } else if(str[i] === ")") { // if character is a closing parenthesis
            if(stack.pop() !== "(") return false; // pop an element from stack, if it is not "(" (matching corresponding opening parenthesis), return false
        }
    }
    if(stack.length !== 0) return false; // if stack is not empty, return false (unbalanced parentheses)
    return true; // if loop completes without returning false, return true (balanced parentheses)
}