// This is a recursive function that implements quicksort algorithm to sort an unsorted array
// Quicksort is a divide-and-conquer algorithm that divides an array into smaller subarrays
// The subarrays are then sorted and combined to produce a sorted array

// Function for swapping two elements in an array
function swap(arr, i, j) {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

/**
 * This function chooses a pivot point and rearranges the array such that all elements
 * smaller than the pivot are placed before it, and all elements greater than the pivot
 * are placed after it. It then returns the index of the pivot.
 *
 * @param {Array} arr - The original unsorted array
 * @param {number} start - The starting index of the subarray to be sorted
 * @param {number} end - The ending index of the subarray to be sorted
 * @returns {number} - The index of the pivot
 */
function partition(arr, start, end) {
    // Choose the pivot as the last element in the subarray
    let pivot = arr[end];
    // Index of the smaller element
    let i = start - 1;

    // Loop through the subarray
    for (let j = start; j <= end - 1; j++) {
        // If the current element is smaller than or equal to the pivot,
        // Increment the index of the smaller element and swap it with the current element
        if (arr[j] <= pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    // Finally, swap the pivot with the element at i+1, so that the smaller
    // elements are all in the left and the larger elements are on the right
    swap(arr, i + 1, end);
    return i + 1;
}

/**
 * This function is the recursive function that implements quicksort
 *
 * @param {Array} arr - The original unsorted array
 * @param {number} start - The starting index of the subarray to be sorted
 * @param {number} end - The ending index of the subarray to be sorted
 */
function quicksort(arr, start, end) {
    // Base case: if start is greater than or equal to end, there's only one or zero elements left, which means they're sorted
    if (start >= end) {
        return;
    }
    // Select the pivot using partition function
    let pivot = partition(arr, start, end);
    // Recursively call quicksort on the two subarrays left and right of the pivot
    quicksort(arr, start, pivot - 1);
    quicksort(arr, pivot + 1, end);
}

// Example array to be sorted
let arr = [5, 3, 7, 2, 9, 1];
// Call quicksort function, passing the array, starting index and ending index
quicksort(arr, 0, arr.length - 1);
// Output the sorted array
console.log(arr); // Output: [1, 2, 3, 5, 7, 9]