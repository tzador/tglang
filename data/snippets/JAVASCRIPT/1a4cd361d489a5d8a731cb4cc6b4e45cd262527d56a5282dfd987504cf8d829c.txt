// Example function that sorts an array using quicksort algorithm
// This function takes in an array and returns the sorted array

function quicksort(array) {
  // Base case: if array has less than or equal to 1 element, return array
  if (array.length <= 1) {
    return array;
  }

  // Initialize pivot as the first element in the array
  const pivot = array[0];
  // Initialize left and right arrays
  const left = [];
  const right = [];

  // Iterate through the array starting from index 1
  for (let i = 1; i < array.length; i++) {
    // If current element is smaller than pivot, add it to the left array
    if (array[i] < pivot) {
      left.push(array[i]);
    } else { // If current element is larger than pivot, add it to the right array
      right.push(array[i]);
    }
  }

  // Sort the left and right arrays using recursion
  const sortedLeft = quicksort(left);
  const sortedRight = quicksort(right);

  // Concatenate the sorted left array, pivot, and sorted right array and return it
  return sortedLeft.concat(pivot).concat(sortedRight);
}

// Sample test case
const unsortedArray = [5, 2, 1, 7, 3, 4, 8];
console.log(quicksort(unsortedArray)); // Output: [1, 2, 3, 4, 5, 7, 8]