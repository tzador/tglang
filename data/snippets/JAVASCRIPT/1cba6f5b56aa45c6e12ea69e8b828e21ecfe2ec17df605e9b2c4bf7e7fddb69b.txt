//This code snippet shows an example of a recursive function to calculate Fibonacci sequence
//using dynamic programming

/*
  Dynamic programming is a technique for solving problems by breaking them
  down into smaller subproblems and storing the solutions of these subproblems
  in a table, allowing for efficient computation when solving the larger problem.
  In this case, we are using dynamic programming to store the previously calculated
  values of the Fibonacci sequence. This reduces the time complexity of our algorithm
  from O(2^n) to O(n).

  To understand recursive functions and dynamic programming, it is recommended to
  have some knowledge of basic programming concepts such as loops, arrays, and function
  calls.
*/

//Initializing an empty array to store previously calculated values
const memo = [];

//Recursive function to calculate the nth Fibonacci number,
//takes in the input n and our previously initialized array memo
function fibonacci(n, memo) {

  //Base case when input is either 0 or 1
  if (n === 0 || n === 1) {
    return n;
  }

  //Check if the value for the current input has already been calculated and stored in our memo array
  if (memo[n] !== undefined) {
    return memo[n];
  }

  //Recursive call to calculate the nth Fibonacci number by adding the values of the previous two numbers
  let result = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);

  //Storing the result in our memo array for future use
  memo[n] = result;

  //Returning the calculated result
  return result;
}

//Example usage, calling the fibonacci function with input 5
let output = fibonacci(5, memo);

//Output will be 5, the 5th Fibonacci number (0, 1, 1, 2, 3, 5...)
console.log(output);