function mergeSort(array) {
  // if the array has only one element, it's already sorted
  if (array.length === 1) return array;

  // divide the array into two subarrays
  const middleIndex = Math.ceil(array.length / 2);
  const subArray1 = array.slice(0, middleIndex);
  const subArray2 = array.slice(middleIndex);

  /* recursively calling mergeSort function on the two subarrays
   and merge the sorted subarrays back together */
  return merge(mergeSort(subArray1), mergeSort(subArray2));
}

/* merge function to combine sorted subarrays
  i and j are used as pointers to keep track of indices
  in the two subarrays */
function merge(array1, array2) {
  const mergedArray = [];
  let i = 0;
  let j = 0;

  // while both subarrays still have elements
  while (i < array1.length && j < array2.length) {
    /* compare the first elements of each subarray and
    push the smaller element into the mergedArray */
    if (array1[i] < array2[j]) {
      mergedArray.push(array1[i]);
      i++;
    } else {
      mergedArray.push(array2[j]);
      j++;
    }
  }

  // if subArray1 still has elements, push them into mergedArray
  while (i < array1.length) {
    mergedArray.push(array1[i]);
    i++;
  }

  // if subArray2 still has elements, push them into mergedArray
  while (j < array2.length) {
    mergedArray.push(array2[j]);
    j++;
  }

  // return the merged and sorted array
  return mergedArray;
}