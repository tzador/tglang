//This code snippet is a function called "mergeSort" that sorts an array of integers using the merge sort algorithm
//It uses recursion to split the array into smaller subarrays, sorts them, and then merges them back together in the correct order
//The function takes in an array "arr" as a parameter and returns the sorted array
function mergeSort(arr) {
    //check if array length is 1 or less, if so, return array as it is already sorted
    if (arr.length <= 1) return arr;
    
    //find middle index of array
    const middleIndex = Math.floor(arr.length / 2);
    
    //split array into two subarrays, from index 0 to the middle index, and from middle index to end
    const leftSubarray = arr.slice(0, middleIndex);
    const rightSubarray = arr.slice(middleIndex);
    
    //recursively call mergeSort on each subarray to continue splitting and sorting
    const sortedLeftSubarray = mergeSort(leftSubarray);
    const sortedRightSubarray = mergeSort(rightSubarray);
    
    //create a new empty array for the merged output
    const mergedArray = [];
    
    //create variables to track the current index of each subarray
    let leftIndex = 0;
    let rightIndex = 0;
    
    //loop through the subarrays and compare the values at the current indices, pushing the smaller value into the merged array
    while (leftIndex < sortedLeftSubarray.length && rightIndex < sortedRightSubarray.length) {
        if (sortedLeftSubarray[leftIndex] < sortedRightSubarray[rightIndex]) {
            mergedArray.push(sortedLeftSubarray[leftIndex]);
            leftIndex++;
        } else {
            mergedArray.push(sortedRightSubarray[rightIndex]);
            rightIndex++;
        }
    }
    
    //check if there are any remaining elements in the left subarray and push them into the merged array
    while (leftIndex < sortedLeftSubarray.length) {
        mergedArray.push(sortedLeftSubarray[leftIndex]);
        leftIndex++;
    }
    
    //check if there are any remaining elements in the right subarray and push them into the merged array
    while (rightIndex < sortedRightSubarray.length) {
        mergedArray.push(sortedRightSubarray[rightIndex]);
        rightIndex++;
    }
    
    //return the merged array as the sorted output
    return mergedArray;
}

//example usage:

//create an unsorted array
const arr = [6, 3, 9, 2, 1];
//call the mergeSort function and assign the sorted array to a variable
const sortedArr = mergeSort(arr);
//print the sorted array
console.log(sortedArr); //[1, 2, 3, 6, 9] (the array has been sorted in ascending order)