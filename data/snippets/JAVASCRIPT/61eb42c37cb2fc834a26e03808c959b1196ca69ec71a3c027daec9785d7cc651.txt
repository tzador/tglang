// This code snippet demonstrates how to create an object using the Object constructor

// Initialize an empty object
var obj = new Object();

// Set properties of the object using dot notation
obj.property1 = "value1";
obj.property2 = 2;

// Create a method within the object
obj.method = function() {
  console.log("This is a method within the object");
}

// Use the Object.defineProperty() method to define a new property
// The third parameter is an object with additional options
Object.defineProperty(obj, 'property3', {
  value: "value3",
  writable: false, // cannot be changed
  enumerable: false, // will not appear when looping through the object's properties
  configurable: true  // the property can be deleted
});

// Use the Object.defineProperties() method to define multiple properties at once
Object.defineProperties(obj, {
  prop1: { value: 1 },
  prop2: { value: "two" }
});

// Use the Object.create() method to create a new object with a specific prototype
// The prototype can also be assigned directly using the __proto__ property
var newObj = Object.create(obj);

// Use the instanceof operator to check if an object is an instance of a specific constructor
console.log(newObj instanceof Object); // returns true

// Use the Object.getPrototypeOf() method to get the prototype of an object
var prototype = Object.getPrototypeOf(newObj);

// Use the Object.setPrototypeOf() method to set the prototype of an object
Object.setPrototypeOf(newObj, {});

// Use the Object.freeze() method to make an object immutable (cannot be changed in any way)
Object.freeze(obj);

// Use the Object.isFrozen() method to check if an object is frozen
console.log(Object.isFrozen(obj)); // returns true

// Use the Object.seal() method to prevent new properties from being added to an object
// Existing properties can still be modified
Object.seal(obj);

// Use the Object.isSealed() method to check if an object is sealed
console.log(Object.isSealed(obj)); // returns true

// Use the Object.preventExtensions() method to prevent new properties from being added to an object
// Existing properties can still be modified
Object.preventExtensions(obj);

// Use the Object.isExtensible() method to check if an object is extensible
console.log(Object.isExtensible(obj)); // returns false

// Use the Object.getOwnPropertyNames() method to get an array of all the properties (including non-enumerable ones) of an object
var properties = Object.getOwnPropertyNames(obj);
console.log(properties); // returns ["property1", "property2", "property3", "method"]

// Use the Object.keys() method to get an array of all the enumerable properties of an object
var enumerable = Object.keys(obj);
console.log(enumerable); // returns ["property1", "property2", "method"]

// Use the Object.getOwnPropertyDescriptor() method to get the descriptor of a property
var descriptor = Object.getOwnPropertyDescriptor(obj, 'property1');
console.log(descriptor); // returns { value: "value1", writable: true, enumerable: true, configurable: true }

// Use the Object.getPrototypeOf() method to get the prototype of an object
var prototype = Object.getPrototypeOf(obj);
console.log(prototype); // returns {}

// Use the Object.getOwnPropertyDescriptors() method to get descriptors for all properties of an object
var descriptors = Object.getOwnPropertyDescriptors(obj);
console.log(descriptors); // returns { property1: { value: "value1", writable: true, enumerable: true, configurable: true }, property2: { value: 2, writable: true, enumerable: true, configurable: true }, property3: { value: "value3", writable: false, enumerable: false, configurable: true }, method: { value: [Function], writable: true, enumerable: true, configurable: true } }