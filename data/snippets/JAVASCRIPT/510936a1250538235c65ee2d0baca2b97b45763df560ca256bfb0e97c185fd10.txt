/**
* This function uses recursion to perform a binary search on a sorted array and returns the index of the target element, if found.
*
* @param {array} arr - The sorted array to be searched
* @param {number} target - The target element to be found
* @param {number} start - The starting index of the subarray to be searched
* @param {number} end - The ending index of the subarray to be searched
* @returns {number} - The index of the target element, if found. Otherwise, -1.
*/
function binarySearch(arr, target, start, end) {
  if (start > end) {
    return -1; // target element not found
  }

  let mid = Math.floor((start + end) / 2);

  if (arr[mid] === target) {
    return mid; // target element found
  } else if (arr[mid] < target) {
    return binarySearch(arr, target, mid + 1, end); // search right half of array
  } else {
    return binarySearch(arr, target, start, mid - 1); // search left half of array
  }
}

// Example usage:
let sortedArr = [2, 5, 7, 10, 13, 18, 22, 27, 35];
let index = binarySearch(sortedArr, 13, 0, sortedArr.length - 1);
console.log(index); // Output: 4