function mergeSort(array) {
  //check if array can still be divided
  if (array.length < 2) {
    return array;
  }
  //split the array into two halves
  const middle = Math.floor(array.length / 2);
  const left = array.slice(0, middle);
  const right = array.slice(middle);

  //use recursion to continue dividing until array is of length 1
  return merge(mergeSort(left), mergeSort(right));
}

function merge(left, right) {
  let result = [];

  //compare elements from left and right arrays and add to result in order
  while (left.length && right.length) {
    if (left[0] < right[0]) {
      result.push(left.shift());
    } else {
      result.push(right.shift());
    }
  }

  //add any remaining elements from left and right arrays to result
  return result.concat(left, right);
}

//example input array
let exampleArray = [6, 4, 2, 10, 8, 7, 9, 3, 1, 5];

//call mergeSort function on example input array
let sortedArray = mergeSort(exampleArray);

//print sorted array
console.log(sortedArray);