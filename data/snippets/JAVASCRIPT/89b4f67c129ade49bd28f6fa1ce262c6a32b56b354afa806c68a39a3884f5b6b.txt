// This function takes in an array and returns a sorted version of it using quicksort algorithm
function quicksort(array) {
   if (array.length < 2) return array; // base case: an array with 0 or 1 element is already sorted

   let pivot = array[0]; // select the first element as the pivot
   let lesser = []; 
   let greater = [];

   for (let i = 1; i < array.length; i++) {
     if (array[i] < pivot) lesser.push(array[i]); // add element to lesser array if it is lesser than the pivot
     else greater.push(array[i]); // add element to greater array if it is greater than or equal to the pivot
   }

   return [...quicksort(lesser), pivot, ...quicksort(greater)]; // recursively call quicksort on lesser and greater arrays and combine results with pivot in between
}

// Example usage:
let unsortedArray = [34, 5, 1, 12, 9, 64, 21]; // creates an unsorted array
let sortedArray = quicksort(unsortedArray); // sorts the array using quicksort function
console.log(sortedArray); // outputs [1, 5, 9, 12, 21, 34, 64]