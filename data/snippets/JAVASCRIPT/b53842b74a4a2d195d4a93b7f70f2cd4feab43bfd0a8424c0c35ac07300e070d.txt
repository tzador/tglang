function mergeSort(arr) {
  // recursive function to split and sort the array
  function splitSort(arr) {
    // base case, if array length is 1 or 0, it is already sorted
    if (arr.length < 2) {
      return arr;
    }
    // split the array into two halves
    const middle = Math.floor(arr.length / 2);
    const leftArr = arr.slice(0, middle);
    const rightArr = arr.slice(middle, arr.length);

    // recursively split and sort each half
    const sortedLeftArr = splitSort(leftArr);
    const sortedRightArr = splitSort(rightArr);

    // merge the sorted halves
    return merge(sortedLeftArr, sortedRightArr);
  }

  // merge the two sorted arrays into one
  function merge(leftArr, rightArr) {
    // initialize a result array and pointers for both arrays
    let resultArr = [];
    let leftPtr = 0;
    let rightPtr = 0;

    // compare elements from both arrays and add in sorted order to result array
    while (leftPtr < leftArr.length && rightPtr < rightArr.length) {
      if (leftArr[leftPtr] < rightArr[rightPtr]) {
        resultArr.push(leftArr[leftPtr]);
        leftPtr++;
      } else {
        resultArr.push(rightArr[rightPtr]);
        rightPtr++;
      }
    }

    // append remaining elements from both arrays
    return resultArr.concat(leftArr.slice(leftPtr)).concat(rightArr.slice(rightPtr));
  }

  // call the recursive function to split and sort the given array
  return splitSort(arr);
}

// example input
const arr = [5, 2, 8, 4, 10, 1, 7];

// call function to sort the input array
const sortedArr = mergeSort(arr);

// print the sorted array
console.log(sortedArr); // output: [1, 2, 4, 5, 7, 8, 10]