// This is a long and complex code snippet in JAVASCRIPT 
// that generates a random maze using recursive backtracking algorithm 

// initialize variables
let rows; 
let cols; 
let grid = []; 
let stack = []; 

// create function to build the grid
function buildGrid() { 
    for (let i = 0; i < rows; i++) { 
        grid[i] = []; 
        for (let j = 0; j < cols; j++) { 
            grid[i][j] = new Cell(i, j); // create a new cell object 
        } 
    } 
} 

// create function to generate the maze 
function generateMaze() { 
    let currentCell = grid[0][0]; // start at top left corner 
    currentCell.visited = true; // mark as visited 
    stack.push(currentCell); // add current cell to stack 

    while (stack.length > 0) { 
        let neighbors = []; 
        let x = currentCell.x; 
        let y = currentCell.y; 

        // find unvisited neighbors 
        if (x > 0 && !grid[x - 1][y].visited) { // left neighbor 
            neighbors.push(grid[x - 1][y]); 
        } 
        if (y < cols - 1 && !grid[x][y + 1].visited) { // bottom neighbor 
            neighbors.push(grid[x][y + 1]); 
        } 
        if (x < rows - 1 && !grid[x + 1][y].visited) { // right neighbor 
            neighbors.push(grid[x + 1][y]); 
        } 
        if (y > 0 && !grid[x][y - 1].visited) { // top neighbor 
            neighbors.push(grid[x][y - 1]); 
        } 

        // if there are unvisited neighbors 
        if (neighbors.length > 0) { 
            // choose a random neighbor 
            let next = neighbors[Math.floor(Math.random() * neighbors.length)]; 
            next.visited = true; // mark as visited 
            removeWalls(currentCell, next); // remove walls between current and next cell 
            stack.push(next); // add next cell to stack 
            currentCell = next; // update current cell 
        } else { 
            currentCell = stack.pop(); // backtrack to previous cell 
        } 
    } 
} 

// create function to remove walls between current and next cell 
function removeWalls(current, next) { 
    let x = current.x - next.x; 
    let y = current.y - next.y; 
    
    if (x === 1) { // right wall 
        current.walls.left = false; 
        next.walls.right = false; 
    } else if (x === -1) { // left wall 
        current.walls.right = false; 
        next.walls.left = false; 
    } 
    if (y === 1) { // bottom wall 
        current.walls.bottom = false; 
        next.walls.top = false; 
    } else if (y === -1) { // top wall 
        current.walls.top = false; 
        next.walls.bottom = false; 
    } 
} 

// create a function to draw the grid 
function drawGrid() { 
    // draw maze background 
    fill(255); // white color 
    rect(0, 0, width, height); // fill entire canvas 

    // draw grid lines 
    for (let i = 0; i < rows; i++) { 
        for (let j = 0; j < cols; j++) { 
            let cell = grid[i][j]; 
            cell.draw(); // draw cell 
            cell.highlight(); // highlight current cell 
        } 
    } 
} 

// create a class for cells 
class Cell { 
    constructor(x, y) { 
        this.x = x; 
        this.y = y; 
        this.visited = false; 
        this.walls = { 
            top: true, 
            right: true, 
            bottom: true, 
            left: true 
        }; // set all walls to true initially 
    } 

    draw() { 
        let x = this.x * cellSize; 
        let y = this.y * cellSize; 

        // draw walls 
        stroke(0); // black color 
        strokeWeight(3); 
        if (this.walls.top) line(x, y, x + cellSize, y); // top wall 
        if (this.walls.right) line(x + cellSize, y, x + cellSize, y + cellSize); // right wall 
        if (this.walls.bottom) line(x + cellSize, y + cellSize, x, y + cellSize); // bottom wall 
        if (this.walls.left) line(x, y + cellSize, x, y); // left wall 

    } 

    highlight() { 
        // highlight current cell 
        if (this === currentCell) { 
            noStroke(); 
            fill(255, 0, 255, 100); // semi-transparent purple color 
            rect(this.x * cellSize, this.y * cellSize, cellSize, cellSize); // fill current cell 
        } 
    } 
} 

// set canvas size and cell size 
let canvasSize = 500; // pixels 
let cellSize = 25; // pixels 
let numCells = Math.floor(canvasSize / cellSize); 
let currentCell; 

// set number of rows and columns 
rows = numCells; 
cols = numCells; 

// create canvas and set black background 
createCanvas(canvasSize, canvasSize); 
background(0); 

// build grid and generate maze 
buildGrid(); 
generateMaze(); 

// draw the grid and maze 
drawGrid();