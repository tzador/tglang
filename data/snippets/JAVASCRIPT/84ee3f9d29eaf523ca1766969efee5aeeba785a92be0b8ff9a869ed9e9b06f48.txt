// This function calculates the factorial of a given number using recursion
function factorial(num) {
  if (num === 1) return 1; // base case
  return num * factorial(num - 1); // recursive call
}

// This function takes in an array of numbers and returns the sum of all elements
function sumArray(arr) {
  if (arr.length === 0) return 0; // base case
  return arr[0] + sumArray(arr.slice(1)); // recursive call
}

// This function checks if a string is a palindrome using recursion
function isPalindrome(str) {
  if (str.length < 2) return true; // base case
  if (str[0] !== str[str.length - 1]) return false;
  return isPalindrome(str.slice(1, -1)); // recursive call
}

// This function removes duplicate values from an array using recursion
function removeDuplicates(arr) {
  if (arr.length < 2) return arr; // base case
  if (arr[0] === arr[1]) return removeDuplicates(arr.slice(1)); // ignore duplicate
  return [arr[0], ...removeDuplicates(arr.slice(1))]; // add unique element
}

// This function merges two sorted arrays using recursion
function mergeArrays(arr1, arr2) {
  if (arr1.length === 0) return arr2; // base case
  if (arr2.length === 0) return arr1; // base case
  if (arr1[0] < arr2[0]) {
    return [arr1[0], ...mergeArrays(arr1.slice(1), arr2)]; // add first element of arr1 and recursively merge the rest
  } else {
    return [arr2[0], ...mergeArrays(arr1, arr2.slice(1))]; // add first element of arr2 and recursively merge the rest
  }
}

// This function sorts an array using recursion and the mergeSort algorithm
function mergeSort(arr) {
  if (arr.length < 2) return arr; // base case
  const mid = Math.floor(arr.length / 2); // find mid index
  const left = arr.slice(0, mid); // split array into two halves
  const right = arr.slice(mid);
  return mergeArrays(mergeSort(left), mergeSort(right)); // recursively sort halves and merge them
}