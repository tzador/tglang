function mergeSort(arr) { //function to perform merge sort
  if (arr.length === 1) { //base case
    return arr;
  }
  
  const middle = Math.floor(arr.length / 2); //find middle index
  const left = arr.slice(0, middle); //divide array into left and right halves
  const right = arr.slice(middle);
  
  return merge(mergeSort(left), mergeSort(right)); //merge sorted halves
}

function merge(left, right) { //helper function to merge two arrays
  let result = [];
  let indexLeft = 0;
  let indexRight = 0;
  
  while (indexLeft < left.length && indexRight < right.length) { //while there are elements in both arrays
    if (left[indexLeft] < right[indexRight]) { //compare elements of left and right array
      result.push(left[indexLeft]); //add smaller element to result
      indexLeft++; //move to next element in left array
    } else {
      result.push(right[indexRight]);
      indexRight++;
    }
  }
  
  return result.concat(left.slice(indexLeft).concat(right.slice(indexRight))); //add remaining elements to result
}

const unsortedArray = [5, 2, 8, 3, 1, 9, 4, 6, 7]; //example unsorted array

console.log(mergeSort(unsortedArray)); //output: [1, 2, 3, 4, 5, 6, 7, 8, 9]