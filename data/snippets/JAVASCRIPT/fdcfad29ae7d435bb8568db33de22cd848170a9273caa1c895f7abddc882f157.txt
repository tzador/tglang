/* This code snippet demonstrates an object-oriented programming approach in JavaScript */

// Parent class for creating vehicles
class Vehicle {
  // Constructor function to initialize properties
  constructor(make, model, year) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.isRunning = false;
    this.isStopped = false;
  }

  // Method to turn on vehicle
  turnOn() {
    if (this.isRunning) {
      console.log("This vehicle is already on.");
    } else {
      this.isRunning = true;
      console.log(`The ${this.year} ${this.make} ${this.model} is now on.`);
    }
  }

  // Method to turn off vehicle
  turnOff() {
    if (this.isRunning) {
      this.isRunning = false;
      console.log(`The ${this.year} ${this.make} ${this.model} is now off.`);
    } else {
      console.log("This vehicle is already off.");
    }
  }

  // Method to drive vehicle
  drive() {
    if (this.isRunning) {
      console.log(`The ${this.year} ${this.make} ${this.model} is now driving.`);
    } else {
      console.log("You need to turn on the vehicle first.");
    }
  }

  // Method to stop vehicle
  stop() {
    if (this.isRunning && !this.isStopped) {
      this.isStopped = true;
      console.log(`The ${this.year} ${this.make} ${this.model} has now stopped.`);
    } else {
      console.log("This vehicle is already stopped.");
    }
  }
}

// Child class for creating cars, inheriting from Vehicle class
class Car extends Vehicle {
  // Constructor function to initialize properties
  constructor(make, model, year, color) {
    super(make, model, year);
    this.color = color;
  }

  // Method to honk horn
  honkHorn() {
    if (this.isRunning) {
      console.log(`The ${this.color} ${this.year} ${this.make} ${this.model} is honking its horn.`);
    } else {
      console.log("You need to turn on the car first.");
    }
  }
}

// Child class for creating motorcycles, inheriting from Vehicle class
class Motorcycle extends Vehicle {
  // Constructor function to initialize properties
  constructor(make, model, year, maxSpeed) {
    super(make, model, year);
    this.maxSpeed = maxSpeed;
  }

  // Method to rev engine
  revEngine() {
    if (this.isRunning) {
      console.log(`The ${this.year} ${this.make} ${this.model} is revving its engine.`);
    } else {
      console.log("You need to turn on the motorcycle first.");
    }
  }
}

// Create instances of Car and Motorcycle classes
let tesla = new Car("Tesla", "Model S", 2021, "black");
let harley = new Motorcycle("Harley-Davidson", "Iron 883", 2020, 100);

// Output:
// `The 2021 Tesla Model S is now on.`
tesla.turnOn();

// `The 2020 Harley-Davidson Iron 883 is now on.`
harley.turnOn();

// `The black 2021 Tesla Model S is honking its horn.`
tesla.honkHorn();

// `You need to turn on the motorcycle first.`
harley.revEngine();

// `The 2021 Tesla Model S is now driving.`
tesla.drive();

// `The black 2021 Tesla Model S has now stopped.`
tesla.stop();

// `The 2020 Harley-Davidson Iron 883 is now off.`
harley.turnOff();

// `This vehicle is already off.`
tesla.turnOff();