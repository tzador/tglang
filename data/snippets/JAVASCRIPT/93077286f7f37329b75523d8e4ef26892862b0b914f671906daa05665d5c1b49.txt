function mergeSort(array) {
  // Check if the array is empty or contains only one element
  if (array.length <= 1) {
    return array;
  }
  // Find the middle index of the array
  let middleIdx = Math.floor(array.length / 2);
  // Divide the array into two halves
  let leftArray = array.slice(0, middleIdx);
  let rightArray = array.slice(middleIdx);
  
  // Recursively call mergeSort on the left and right halves
  let sortedLeftArray = mergeSort(leftArray);
  let sortedRightArray = mergeSort(rightArray);
  
  // Merge the sorted left and right arrays
  return merge(sortedLeftArray, sortedRightArray);
}

function merge(leftArray, rightArray) {
  // Create an empty array to store the sorted elements
  let sortedArray = [];
  // Initialize the pointers for the left and right arrays
  let leftIdx = 0;
  let rightIdx = 0;

  // Loop until one of the pointers reaches the end of its array
  while (leftIdx < leftArray.length && rightIdx < rightArray.length) {
    // Compare the elements at the current pointers
    if (leftArray[leftIdx] < rightArray[rightIdx]) {
      // If the left element is smaller, push it into the sorted array
      sortedArray.push(leftArray[leftIdx]);
      // Update the left pointer
      leftIdx++;
    } else {
      // If the right element is smaller, push it into the sorted array
      sortedArray.push(rightArray[rightIdx]);
      // Update the right pointer
      rightIdx++;
    }
  }
  
  // Once one of the pointers reaches the end of its array,
  // push the remaining elements of the other array into the sorted array
  while (leftIdx < leftArray.length) {
    sortedArray.push(leftArray[leftIdx]);
    leftIdx++;
  }
  
  while (rightIdx < rightArray.length) {
    sortedArray.push(rightArray[rightIdx]);
    rightIdx++;
  }
  
  // Return the sorted array
  return sortedArray;
}

// Example usage
let array = [23, 45, 12, 67, 34, 90, 17];
let sortedArray = mergeSort(array);
console.log(sortedArray); // Output: [12, 17, 23, 34, 45, 67, 90]