// A function to calculate the factorial of a given number
// @param {number} num - The number whose factorial is to be calculated
// @returns {number} - The factorial of the given number
function factorial(num) {

    // If input is 0 or 1, return 1
    if (num === 0 || num === 1) {
        return 1;
    } 
    // Otherwise, use recursion to calculate factorial
    else {
        return num * factorial(num - 1);
    }
}

// A function to print the first n Fibonacci numbers in an array
// @param {number} n - The number of Fibonacci numbers to be printed
// @returns {array} - An array containing the first n Fibonacci numbers
function fibonacci(n) {

    // Define an empty array to store the Fibonacci numbers
    let fibArray = [];
    // Use a for loop to iterate through n numbers
    for (let i = 0; i < n; i++) {
        // If i is 0 or 1, add i to array
        if (i === 0 || i === 1) {
            fibArray.push(i);
        }
        // Otherwise, add the sum of previous two numbers to array
        else {
            fibArray.push(fibArray[i - 1] + fibArray[i - 2]);
        }
    }
    // Return the array containing the first n Fibonacci numbers
    return fibArray;
}

// A function to check if a given number is prime or not
// @param {number} num - The number to be checked
// @returns {boolean} - True if the number is prime, false otherwise
function checkPrime(num) {

    // If input is 1, return false
    if (num === 1) {
        return false;
    }
    // If input is 2, return true
    else if (num === 2) {
        return true;
    }
    // Otherwise, use a for loop to check if the number is divisible by any number less than it
    else {
        for (let i = 2; i < num; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    }
}

// A function to calculate the GCD of two given numbers
// @param {number} a - The first number
// @param {number} b - The second number
// @returns {number} - The GCD of the two given numbers
function calculateGCD(a, b) {

    // Use the Euclidean algorithm to calculate the GCD
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    // Return a, which will be the GCD of a and b
    return a;
}

// A function to convert a decimal number to binary
// @param {number} num - The decimal number to be converted
// @returns {string} - The binary representation of the given number
function decimalToBinary(num) {

    // Define an empty string to store the binary number
    let binaryString = "";
    // Use a while loop to divide the number by 2 and add the remainder to the string
    while (num > 0) {
        binaryString = (num % 2) + binaryString;
        num = Math.floor(num / 2);
    }
    // Return the binary string
    return binaryString;
}

// A function to sort an array of strings in alphabetical order
// @param {array} stringArray - The array of strings to be sorted
// @returns {array} - The sorted array of strings
function sortAlphabetically(stringArray) {

    // Use the bubble sort algorithm to sort the array
    for (let i = 0; i < stringArray.length; i++) {
        for (let j = 0; j < stringArray.length - i - 1; j++) {
            if (stringArray[j].localeCompare(stringArray[j + 1]) > 0) {
                // Use a destructuring assignment to swap the positions of the two elements
                [stringArray[j], stringArray[j + 1]] = [stringArray[j + 1], stringArray[j]];
            }
        }
    }
    // Return the sorted array
    return stringArray;
}