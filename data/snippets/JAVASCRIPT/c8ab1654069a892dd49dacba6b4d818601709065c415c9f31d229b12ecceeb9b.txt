function mergeSort(arr) {
  // divide and conquer algorithm for sorting an array
  if (arr.length <= 1) {
    return arr; // array is already sorted
  }

  const middle = Math.floor(arr.length / 2); // find middle index
  const left = arr.slice(0, middle); // divide array into two halves
  const right = arr.slice(middle);

  return merge(mergeSort(left), mergeSort(right)); // recursively sort each half and merge the results
}

function merge(left, right) {
  // function to merge two sorted arrays
  let result = []; // array to store merged result
  let leftIndex = 0;
  let rightIndex = 0;

  while (leftIndex < left.length && rightIndex < right.length) {
    // compare values at current indices and add the smaller value to the result array
    if (left[leftIndex] < right[rightIndex]) {
      result.push(left[leftIndex]);
      leftIndex++;
    } else {
      result.push(right[rightIndex]);
      rightIndex++;
    }
  }

  // add any remaining elements from left or right arrays to the result
  return [...result, ...left.slice(leftIndex), ...right.slice(rightIndex)];
}

const arr = [5, 3, 2, 1, 4];
console.log(`Unsorted array: ${arr}`); // Unsorted array: 5, 3, 2, 1, 4

const sortedArr = mergeSort(arr);
console.log(`Sorted array: ${sortedArr}`); // Sorted array: 1, 2, 3, 4, 5