// This function uses recursion to calculate the factorial of a given number
function factorial(n) {
    if (n < 0) { // if the number is negative, return an error
        return "Error: Input must be a positive integer";
    }
    else if (n === 0) { // if the number is 0, return 1
        return 1;
    }
    else { // otherwise, multiply the number by the factorial of the previous number
        return n * factorial(n-1);
    }
}

// This function implements the quick sort algorithm to sort an array in ascending order
function quickSort(arr) {
    if (arr.length <= 1) { // if the array only has 1 or 0 elements, it is already sorted
        return arr;
    }
    else {
        // set the pivot as the middle element of the array
        let pivot = arr[Math.floor(arr.length/2)];
        let lesser = []; // array to store elements smaller than the pivot
        let equal = []; // array to store elements equal to the pivot
        let greater = []; // array to store elements greater than the pivot
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] < pivot) { // if the element is smaller than the pivot, add it to the lesser array
                lesser.push(arr[i]);
            }
            else if (arr[i] === pivot) { // if the element is equal to the pivot, add it to the equal array
                equal.push(arr[i]);
            }
            else { // if the element is greater than the pivot, add it to the greater array
                greater.push(arr[i]);
            }
        }
        // recursively sort the lesser and greater arrays and concatenate them with the equal array
        return quickSort(lesser).concat(equal, quickSort(greater));
    }
}

// This function implements a binary search algorithm to find an element in a sorted array
function binarySearch(arr, target) {
    let low = 0; // starting index of the array
    let high = arr.length - 1; // ending index of the array
    while (low <= high) { // continue searching while low <= high
        let mid = Math.floor((low + high) / 2); // calculate midpoint
        if (arr[mid] === target) { // if the middle element is equal to the target, return its index
            return mid;
        }
        else if (arr[mid] < target) { // if the target is greater than the middle element, search in the right half of the array
            low = mid + 1;
        }
        else { // if the target is smaller than the middle element, search in the left half of the array
            high = mid - 1;
        }
    }
    return -1; // return -1 if the target is not found
}