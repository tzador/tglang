/*******************
 * DEMO FUNCTIONS
 *******************/

/**
 * @function getNumArr
 * @param {number} num - Starting number
 * @param {number} length - Number of elements
 * @param {number} increment - Increment value
 * @returns {array} - Array of numbers
 */
function getNumArr(num, length, increment) {
  let arr = [];
  for (let i = 0; i < length; i++) {
    arr.push(num + i * increment);
  }
  return arr;
}

/**
 * @function isPrime
 * @param {number} num - Number to check
 * @returns {boolean} - True if prime, false otherwise
 */
function isPrime(num) {
  if (num <= 1) {
    return false;
  }
  for (let i = 2; i * i <= num; i++) {
    if (num % i === 0) {
      return false;
    }
  }
  return true;
}

/**
 * @function filterPrimes
 * @param {array} arr - Array of numbers
 * @returns {array} - Array of prime numbers
 */
function filterPrimes(arr) {
  let primeArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (isPrime(arr[i])) {
      primeArr.push(arr[i]);
    }
  }
  return primeArr;
}

/**
 * @function demo
 * @param {number} num1 - First number for array
 * @param {number} num2 - Second number for array
 * @param {number} length - Number of elements in array
 * @param {number} increment - Increment value for array
 */
function demo(num1, num2, length, increment) {
  let arr1 = getNumArr(num1, length, increment);
  let arr2 = getNumArr(num2, length, increment);
  let primeArr1 = filterPrimes(arr1);
  let primeArr2 = filterPrimes(arr2);
  console.log(primeArr1);
  console.log(primeArr2);
}

// Demo call with 4, 7, 5, 2
demo(4, 7, 5, 2);
// Output: [7, 11, 13]
// Output: [7, 11, 13, 17, 19]