//This function takes in an array and sorts it using merge sort algorithm
function mergeSort(arr) {
  if (arr.length < 2) {
    //base case, if array has only 1 element return the array
    return arr;
  }
  const mid = Math.floor(arr.length / 2); //find middle index
  const left = arr.slice(0, mid); //divide the array into two halves
  const right = arr.slice(mid);
  return merge(mergeSort(left), mergeSort(right)); //recursive call to merge sorted halves
}

//This function merges two sorted arrays
function merge(left, right) {
  let resultArray = [],
    leftIndex = 0,
    rightIndex = 0;
  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] < right[rightIndex]) {
      //if left element is smaller, push it into result array
      resultArray.push(left[leftIndex]);
      leftIndex++; //increment left index
    } else {
      //if right element is smaller, push it into result array
      resultArray.push(right[rightIndex]);
      rightIndex++; //increment right index
    }
  }
  //concat any remaining elements from left and right arrays
  return resultArray
    .concat(left.slice(leftIndex))
    .concat(right.slice(rightIndex));
}

//Example invocation
const unsorted = [4, 7, 2, 9, 1, 5, 3, 8]; //unsorted array
console.log('Unsorted array: ', unsorted);
const sorted = mergeSort(unsorted); //call mergeSort function to sort the array
console.log('Sorted array: ', sorted); //print sorted array