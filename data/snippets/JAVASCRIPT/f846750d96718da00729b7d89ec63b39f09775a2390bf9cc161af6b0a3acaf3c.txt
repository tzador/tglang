function longestCommonSubsequence(str1, str2) {
  //initialize a matrix of size str1.length+1 by str2.length+1 with all 0s
  let matrix = new Array(str1.length + 1)
    .fill(0)
    .map(() => new Array(str2.length + 1).fill(0));

  //loop through the matrix
  for (let i = 1; i <= str1.length; i++) {
    for (let j = 1; j <= str2.length; j++) {
      //if str1[i-1] and str2[j-1] are equal, update the matrix value
      if (str1[i - 1] === str2[j - 1]) {
        matrix[i][j] = matrix[i - 1][j - 1] + 1;
      }
      //else, take the maximum value between the previous row and column
      else {
        matrix[i][j] = Math.max(matrix[i - 1][j], matrix[i][j - 1]);
      }
    }
  }

  //initialize a variable to store the LCS length
  let lcsLength = matrix[str1.length][str2.length];

  //initialize an array to store the LCS characters
  let lcsArr = new Array(lcsLength);

  //initialize pointers for str1 and str2
  let p1 = str1.length;
  let p2 = str2.length;

  //loop backwards through the matrix
  while (p1 > 0 && p2 > 0) {
    //if the characters are equal, add it to the array and update the pointers
    if (str1[p1 - 1] === str2[p2 - 1]) {
      lcsArr[lcsLength - 1] = str1[p1 - 1];
      lcsLength--;
      p1--;
      p2--;
    }
    //else, move to the cell with the larger value
    else if (matrix[p1 - 1][p2] > matrix[p1][p2 - 1]) {
      p1--;
    } else {
      p2--;
    }
  }

  //return the LCS as a string
  return lcsArr.join("");
}

//sample input
let str1 = "AGGTAB";
let str2 = "GXTXAY";

//output "GTAB" which is the longest common subsequence between str1 and str2
console.log(longestCommonSubsequence(str1, str2));