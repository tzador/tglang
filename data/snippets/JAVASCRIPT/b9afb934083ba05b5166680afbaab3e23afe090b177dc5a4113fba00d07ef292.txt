/*
This function calculates the factorial of a given number using recursion.
The base case is when the number is 0.
*/
function factorial(n) {
  // Base case
  if (n === 0) {
    return 1;
  }
  // Recursive case
  else {
    return n * factorial(n - 1);
  }
}

// Example usage
console.log(factorial(5)); // Output: 120
console.log(factorial(0)); // Output: 1
console.log(factorial(10)); // Output: 3628800

// This function returns the Fibonacci sequence up to a given number of terms using recursion.
// The base case is when the number of terms is 1 or 2.
function fibonacci(n) {
  // Base case
  if (n === 1 || n === 2) {
    return [0, 1];
  }
  // Recursive case
  else {
    // Recursive call to get previous sequence
    let prev_sequence = fibonacci(n - 1);
    // Calculates last two numbers in sequence
    let next_num = prev_sequence[prev_sequence.length - 1] + prev_sequence[prev_sequence.length - 2];
    // Appends next_num to sequence
    prev_sequence.push(next_num);
    return prev_sequence;
  }
}

// Example usage
console.log(fibonacci(5)); // Output: [0, 1, 1, 2, 3]
console.log(fibonacci(8)); // Output: [0, 1, 1, 2, 3, 5, 8, 13]

// This function checks if a given string is a palindrome using recursion.
// Base case is when the string is empty or has only one character.
function isPalindrome(str) {
  // Base case
  if (str.length <= 1) {
    return true;
  }
  // Recursive case
  else {
    // Checks if first and last characters are equal
    if (str[0] === str[str.length - 1]) {
      // Removes first and last characters and recursive call on remaining string
      return isPalindrome(str.slice(1, str.length - 1));
    }
    // If not equal, string is not a palindrome
    else {
      return false;
    }
  }
}

// Example usage
console.log(isPalindrome("racecar")); // Output: true
console.log(isPalindrome("hello")); // Output: false