// This code snippet generates a custom carousel using JavaScript

// Create variables for carousel elements
const carousel = document.querySelector('.carousel');
const slides = Array.from(carousel.children);
const nextButton = document.querySelector('.carousel__btn--right');
const prevButton = document.querySelector('.carousel__btn--left');
const carouselNav = document.querySelector('.carousel__nav');
let slidePosition = 0;
let slideWidth = slides[0].getBoundingClientRect().width;

// Set initial position of slides
slides.forEach((slide, index) => {
  slide.style.left = slideWidth * index + 'px';
});

// Move slide based on button click
nextButton.addEventListener('click', () => {
  const currentSlide = carousel.querySelector('.current-slide');
  const nextSlide = currentSlide.nextElementSibling;
  const nextIndex = slides.findIndex(slide => slide === nextSlide);

  // Update slide position
  slidePosition -= slideWidth;

  // Update active navigation dot
  const currentDot = carouselNav.querySelector('.current-slide');
  const nextDot = currentDot.nextElementSibling;
  const nextDotIndex = Array.from(carouselNav.children).findIndex(dot => dot === nextDot);

  // Move slides and update navigation dot
  moveToSlide(carousel, currentSlide, nextSlide, -slidePosition);
  updateNavigation(currentDot, nextDot, nextDotIndex);
});

// Move slide to the left
prevButton.addEventListener('click', () => {
  const currentSlide = carousel.querySelector('.current-slide');
  const prevSlide = currentSlide.previousElementSibling;
  const prevIndex = slides.findIndex(slide => slide === prevSlide);

  // Update slide position
  slidePosition += slideWidth;

  // Update active navigation dot
  const currentDot = carouselNav.querySelector('.current-slide');
  const prevDot = currentDot.previousElementSibling;
  const prevDotIndex = Array.from(carouselNav.children).findIndex(dot => dot === prevDot);

  // Move slides and update navigation dot
  moveToSlide(carousel, currentSlide, prevSlide, slidePosition);
  updateNavigation(currentDot, prevDot, prevDotIndex);
});

// Move slides to selected index
carouselNav.addEventListener('click', event => {
  const targetDot = event.target.closest('button');
  if (!targetDot) return; // If user clicks on an element that is not a navigation dot, exit the function

  const currentSlide = carousel.querySelector('.current-slide');
  const targetIndex = Array.from(carouselNav.children).findIndex(dot => dot === targetDot);
  const targetSlide = slides[targetIndex];

  // Update slide position
  slidePosition = -slideWidth * targetIndex;

  // Update active navigation dot
  updateNavigation(currentSlide, targetSlide, targetIndex);

  // Move slides
  moveToSlide(carousel, currentSlide, targetSlide, slidePosition);
});

// Move slides
const moveToSlide = (carousel, currentSlide, targetSlide, position) => {
  const currentPosition = -slideWidth * slidePosition;
  // Make slide invisible if it is not the current slide
  currentSlide.classList.remove('current-slide');
  // Make target slide visible
  targetSlide.classList.add('current-slide');
  // Slide the carousel to the new position
  carousel.style.transform = `translateX(${position}px)`;
};

// Update navigation dots
const updateNavigation = (currentDot, targetDot, targetIndex) => {
  // Change active navigation dot
  currentDot.classList.remove('current-slide');
  targetDot.classList.add('current-slide');
};