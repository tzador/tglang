//this function recursively calculates the nth fibonacci number
function fibonacci(n) {
  if (n === 1 || n === 2) { //base case
    return 1;
  } else {
    return fibonacci(n-1) + fibonacci(n-2); //recursive call for nth number
  }
}

//this function uses a loop to calculate the nth factorial number
function factorial(n) {
  let result = 1; //initialize result
  for(let i = 1; i <= n; i++) { //loop from 1 to n
    result *= i; //multiply result by current number
  }
  return result; //return final result
}

//this function checks if a number is prime or not
function isPrime(num) {
  if (num === 1) { //1 is not a prime number
    return false;
  } else if (num === 2) { //2 is a prime number
    return true;
  } else if (num % 2 === 0) { //even numbers are not prime
    return false;
  } else { //check for odd numbers
    for (let i = 3; i <= Math.sqrt(num); i+=2) { //loop through odd numbers up to square root of num
      if (num % i === 0) { //if num is divisible by current number
        return false; //not a prime number
      }
    }
    return true; //if no divisors found, num is prime
  }
}

//this function sorts an array using bubble sort algorithm
function bubbleSort(elements) {
  let length = elements.length; //get length of array
  for (let i = 0; i < length; i++) {
    for (let j = 0; j < (length - i - 1); j++) {
      if (elements[j] > elements[j+1]) { //if current element is greater than next element
        //swap elements
        let temp = elements[j];
        elements[j] = elements[j+1];
        elements[j+1] = temp;
      }
    }
  }
  return elements; //return sorted array
}