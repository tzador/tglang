// This code snippet is a function that uses recursion to calculate the factorial of a given number.
function factorial(n) {
  if (n === 0) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

// This code snippet is a recursive function that calculates the nth Fibonacci number.
function fibonacci(n) {
  if (n === 0 || n === 1) {
    return 1;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}

// This code snippet is a higher-order function that takes in a function as a parameter and returns the result of applying that function to all elements in an array.
function map(func, arr) {
  const result = [];
  for (let i = 0; i < arr.length; i++) {
    result.push(func(arr[i]));
  }
  return result;
}

// This code snippet creates an object that keeps track of the number of times a function has been called and the results of those calls.
function memoize(func) {
  const cache = {};

  return function(...args) {
    let key = JSON.stringify(args);
    if (cache[key]) {
      return cache[key];
    } else {
      let result = func(...args);
      cache[key] = result;
      return result;
    }
  };
}

// This code snippet creates an instance of a class with a constructor, some methods, and properties.
class Animal {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  eat(food) {
    console.log(`${this.name} is eating ${food}.`);
  }

  sleep() {
    console.log(`${this.name} is sleeping.`);
  }
}

// This code snippet implements a bubble sort algorithm to sort an array of numbers in ascending order.
function bubbleSort(arr) {
  let swapped;
  do {
    swapped = false;
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] > arr[i + 1]) {
        let temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
        swapped = true;
      }
    }
  } while (swapped);
  return arr;
}