// This code snippet shows how to implement a Linked List data structure using classes in JavaScript

// Define a Node class to represent each element in the Linked List
class Node {
  // Constructor function to initialize a new node
  constructor(data, next = null) {
    // The data property holds the value of the node
    this.data = data;
    // The next property points to the next node in the list. If there is no next node, it defaults to null
    this.next = next;
  }
}

// Define a Linked List class to handle operations on the list
class LinkedList {
  // Constructor function to initialize an empty list
  constructor() {
    // The head property points to the first node in the list. If the list is empty, it defaults to null
    this.head = null;
    // The size property holds the number of nodes in the list
    this.size = 0;
  }

  // Function to insert a new node at the beginning of the list
  insertFirst(data) {
    // Create a new node with the given data
    const newNode = new Node(data);
    // Set the next property of the new node to point to the current head of the list
    newNode.next = this.head;
    // Set the head property to point to the new node, making it the new first node in the list
    this.head = newNode;
    // Increase the size of the list by 1
    this.size++;
  }

  // Function to insert a new node at the end of the list
  insertLast(data) {
    // Create a new node with the given data
    const newNode = new Node(data);
    // If the list is empty, set the new node as the head node
    if (!this.head) {
      this.head = newNode;
    } else {
      // Start at the head node and traverse the list until reaching the last node
      let current = this.head;
      while (current.next) {
        current = current.next;
      }
      // Set the next property of the last node to point to the new node
      current.next = newNode;
    }
    // Increase the size of the list by 1
    this.size++;
  }

  // Function to insert a new node at a specific position in the list
  insertAt(data, index) {
    // Check if the given index is valid
    if (index < 0 || index > this.size) {
      console.log("Invalid index");
      return;
    }
    // If the given index is 0, use the insertFirst() function to insert the node at the beginning of the list
    if (index === 0) {
      this.insertFirst(data);
      return;
    }
    // Create a new node with the given data
    const newNode = new Node(data);
    // Keep track of the current and previous nodes while traversing the list
    let current = this.head;
    let previous;
    // Keep track of the current index
    let count = 0;
    // Traverse the list until reaching the desired index
    while (count < index) {
      previous = current;
      current = current.next;
      count++;
    }
    // Set the next property of the new node to point to the current node
    newNode.next = current;
    // Set the next property of the previous node to point to the new node
    previous.next = newNode;
    // Increase the size of the list by 1
    this.size++;
  }

  // Function to remove the first node in the list
  removeFirst() {
    // If the list is empty, there is nothing to remove
    if (!this.head) {
      return;
    }
    // Store a reference to the current head node
    const current = this.head;
    // Set the head property to point to the next node, effectively removing the first node from the list
    this.head = current.next;
    // Decrease the size of the list by 1
    this.size--;
  }

  // Function to remove the last node in the list
  removeLast() {
    // If the list is empty, there is nothing to remove
    if (!this.head) {
      return;
    }
    // If there is only one node in the list, use the removeFirst() function to remove it
    if (this.size === 1) {
      this.removeFirst();
      return;
    }
    // Keep track of the current and previous nodes while traversing the list
    let current = this.head;
    let previous;
    // Traverse the list until reaching the last node, keeping track of the previous node at each step
    while (current.next) {
      previous = current;
      current = current.next;
    }
    // Set the next property of the previous node to null, effectively removing the last node from the list
    previous.next = null;
    // Decrease the size of the list by 1
    this.size--;
  }

  // Function to remove a node at a specific position in the list
  removeAt(index) {
    // Check if the given index is valid
    if (index < 0 || index >= this.size) {
      console.log("Invalid index");
      return;
    }
    // If the given index is 0, use the removeFirst() function to remove the first node in the list
    if (index === 0) {
      this.removeFirst();
      return;
    }
    // If the given index is equal to the size of the list, use the removeLast() function to remove the last node
    if (index === this.size - 1) {
      this.removeLast();
      return;
    }
    // Keep track of the current and previous nodes while traversing the list
    let current = this.head;
    let previous;
    // Keep track of the current index
    let count = 0;
    // Traverse the list until reaching the desired index, keeping track of the previous node at each step
    while (count < index) {
      previous = current;
      current = current.next;
      count++;
    }
    // Set the next property of the previous node to point to the next node, effectively removing the current node from the list
    previous.next = current.next;
    // Decrease the size of the list by 1
    this.size--;
  }

  // Function to clear the list by setting the head node to null and the size to 0
  clear() {
    this.head = null;
    this.size = 0;
  }

  // Function to get the value of the node at a specific position in the list
  getAt(index) {
    // Check if the given index is valid
    if (index < 0 || index >= this.size) {
      console.log("Invalid index");
    } else {
      // Keep track of the current and previous nodes while traversing the list
      let current = this.head;
      let previous;
      // Keep track of the current index
      let count = 0;
      // Traverse the list until reaching the desired index, keeping track of the previous node at each step
      while (count < index) {
        previous = current;
        current = current.next;
        count++;
      }
      // Return the value of the node at the desired index
      return current.data;
    }
  }

  // Function to set the value of the node at a specific position in the list
  setAt(data, index) {
    // Check if the given index is valid
    if (index < 0 || index >= this.size) {
      console.log("Invalid index");
      return;
    }
    // Keep track of the current and previous nodes while traversing the list
    let current = this.head;
    let previous;
    // Keep track of the current index
    let count = 0;
    // Traverse the list until reaching the desired index, keeping track of the previous node at each step
    while (count < index) {
      previous = current;
      current = current.next;
      count++;
    }
    // Set the value of the node at the desired index to the given data
    current.data = data;
  }

  // Function to find the index of the first occurrence of a given value in the list
  indexOf(data) {
    // Keep track of the current index while traversing the list
    let index = 0;
    // Start at the head node
    let current = this.head;
    // Traverse the list until reaching the end or finding the desired value
    while (current) {
      // If the current node's data is equal to the given value, return the index
      if (current.data === data) {
        return index;
      }
      // Move to the next node and increase the index by 1
      current = current.next;
      index++;
    }
    // If the loop finishes without finding the value, return -1 to indicate it was not found
    return -1;
  }

  // Function to check if the list contains a given value
  contains(data) {
    // Use the indexOf() function to check if the given value exists in the list
    if (this.indexOf(data) !== -1) {
      console.log(`The list contains ${data}`);
    } else {
      console.log(`The list does not contain ${data}`);
    }
  }

  // Function to print the list in a readable format
  print() {
    // Store the head node in a variable
    let current = this.head;
    // Create a string to hold the elements of the list
    let listString = "";
    // Traverse the list until reaching the end, appending each element to the string
    while (current) {
      listString += `${current.data} -> `;
      current = current.next;
    }
    // Append "null" to indicate the end of the list
    listString += "null";
    // Print the string to the console
    console.log(listString);
  }
}

// Create a new Linked List
const list = new LinkedList();

// Insert nodes at various positions in the list
list.insertFirst(1);
list.insertLast(3);
list.insertAt(2, 1);

// Print the list to the console
list.print(); // Output: 1 -> 2 -> 3 -> null

// Remove the last node from the list
list.removeLast();

// Print the list to the console
list.print(); // Output: 1 -> 2 -> null

// Get the value at index 1
list.getAt(1); // Output: 2

// Set the value at index 0
list.setAt(5, 0);

// Print the list to the console
list.print(); // Output: 5 -> 2 -> null

// Find the index of a given value in the list
list.indexOf(5); // Output: 0

// Check if the list contains a given value
list.contains(3); // Output: The list does not contain 3