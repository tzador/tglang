/*
  A simple function that uses recursion to find the factorial of a given number
  Uses the concept of tail recursion to optimize space complexity

  @param {number} num - The number whose factorial needs to be found
  @returns {number} - The factorial of the given number
*/
function factorial(num) {
  /**
   * This inner function will be used for the recursion
   * Keeps track of current value of factorial as well as the current number being multiplied
   * @param {number} cur - Current value of the factorial
   * @param {number} index - The current number being multiplied
   * @param {number} end - The number whose factorial is to be found
   * @returns {number} - Returns the factorial of the given number
   */
  const recurse = (cur, index, end) => {
    if (index > end) {
      // Base case: If index exceeds the given number, return the current value of factorial
      return cur;
    } else {
      // Multiply the current factorial value with the current index and call the function recursively with updated values
      return recurse(cur * index, index + 1, end);
    }
  };

  // Call the recursive function with the initial values of 1 and 1, as 1 is the starting number for factorial
  return recurse(1, 1, num);
}

// Example call to the function
console.log(factorial(5)); // Output: 120 (5 * 4 * 3 * 2 * 1)