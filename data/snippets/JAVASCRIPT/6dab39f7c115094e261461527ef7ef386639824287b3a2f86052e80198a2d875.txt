/**
 * This function calculates and returns the nth fibonacci number using memoization
 * @param {number} n - the desired index of the fibonacci number
 * @returns {number} - the nth fibonacci number
 */
const fibonacci = (n) => {
  // create a cache object to store previously calculated fibonacci numbers
  const cache = {};
  /**
   * Inner helper function that recursively calculates the nth fibonacci number using memoization
   * @param {number} n - the current index of the fibonacci number being calculated
   * @returns {number} - the nth fibonacci number
   */
  const helper = (n) => {
    // base case: if n is 1 or 2, return n
    if (n === 1 || n === 2) {
      return n;
    }
    // if n has already been calculated and stored in cache, return the stored value
    if (cache[n]) {
      return cache[n];
    }
    // recursively calculate the nth fibonacci number by summing the previous two numbers
    // store the calculated value in cache
    cache[n] = helper(n-1) + helper(n-2);
    // return the nth fibonacci number
    return cache[n];
  }
  // call the helper function and return the final result
  return helper(n);
};

// example usage:
const result = fibonacci(8); // returns 21