// This code snippet implements a sorting algorithm known as quicksort in JavaScript
// The quicksort algorithm takes in an array of numbers and returns a sorted array
// This algorithm has a time complexity of O(nlogn) in the average case and O(n^2) in the worst case

/*
PARAMETERS:
- arr: an array of numbers to be sorted
- low: starting index of the array (0)
- high: ending index of the array (length - 1)
*/

const quicksort = (arr, low, high) => {
  // base case: if the length of the array is 0 or 1, then it is already sorted
  if (low >= high) {
    return arr;
  }

  // choose a pivot element, in this case, we will use the last element in the array
  let pivot = arr[high];
  // create two arrays to store numbers less than or equal to pivot and numbers greater than pivot
  let left = [], right = [];

  // loop through the array and add numbers to the appropriate array
  for (let i = low; i < high; i++) {
    if (arr[i] <= pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }

  // recursively call quicksort on both the left and right arrays
  return [...quicksort(left, 0, left.length - 1), pivot, ...quicksort(right, 0, right.length - 1)];
};

// sample input array
const arr = [5, 3, 8, 2, 9, 0, 1, 7, 4, 6];

// call quicksort function with starting index as 0 and ending index as length - 1
console.log(quicksort(arr, 0, arr.length - 1));
// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]