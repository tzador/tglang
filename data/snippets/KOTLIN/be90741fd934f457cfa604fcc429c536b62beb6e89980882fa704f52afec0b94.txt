class Person(val name: String, var age: Int) {
    // This is a class that represents a person with a name and age
    // `val` denotes read-only property, while `var` denotes mutable property
    // Properties are automatically recognized and initialized in the primary constructor
    
    // Initializing a nullable property with a default value of 'null'
    var occupation: String? = null
    
    // Declaring a private property with custom getter and setter
    private var _gender: String = "undisclosed"
        get() = field
        set(value) {
            if (value == "male" || value == "female") {
                field = value
            } else {
                println("Invalid gender input")
            }
        }
    
    // Initializing a private property with a backing field
    // Backing field can be accessed and modified directly within getter and setter methods
    private var _hobby: String = "n/a"
        get() = field
        set(value) {
            field = "My hobby is $value" // Using a string template to set the value of backing field
        }

    // Initializing a companion object, which is an object shared among all instances of the class
    companion object {
        val species = "Homo sapiens"
        
        // A function in a companion object can access private properties and methods of the class
        fun displayDetails(person: Person) {
           println("Name: ${person.name} | Age: ${person.age} | Gender: ${person._gender} | Occupation: ${person.occupation} | Hobby: ${person._hobby}")
        }
    }
    
    // Initialization code inside init block is executed when an instance of the class is created
    init {
        println("A new person has been created")
    }
    
    // Declaring a function inside the class
    fun introduce() {
        println("Hi, my name is $name and I am $age years old." +
                "I am currently working as a $occupation." +
                "My gender is $gender and my hobby is $hobby")
    }
}

// Creating an instance of the class with custom initialization
val tom = Person("Tom", 35).apply {
    occupation = "Software Developer"
    _hobby = "Playing guitar"
    _gender = "male"
}

// Calling the function and accessing the companion object's properties and methods
Person.displayDetails(tom)

// Output:
>> A new person has been created
>> Name: Tom | Age: 35 | Gender: male | Occupation: Software Developer | Hobby: My hobby is Playing guitar