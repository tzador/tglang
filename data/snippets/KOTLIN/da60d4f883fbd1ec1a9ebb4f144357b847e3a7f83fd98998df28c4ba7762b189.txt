/*
This is a complex code snippet that demonstrates the use of various features in Kotlin.
It creates a class and overrides some methods to implement a custom sorting algorithm.
*/
class CustomSort<T: Comparable<T>): Comparator<T> {

    /* 
    This function takes in two items of type T and compares them to determine their relative order.
    It uses the standard compareTo() function for comparison.
    Returns:
    - a negative integer if the first item is less than the second
    - a positive integer if the first item is greater than the second
    - 0 if the items are equal
    */
    override fun compare(first: T, second: T): Int {
        return first.compareTo(second)
    }

    /*
    This function takes in an array of items of type T and sorts them using an efficient merge sort algorithm.
    It splits the array into two halves, recursively sorts them, and then merges the two halves together.
    Parameters:
    - arr: an array of items to be sorted
    Returns:
    - a sorted array of items
    */
    fun mergeSort(arr: Array<T>): Array<T> {
        // base case: if the array has only one item, it is already sorted
        if (arr.size == 1) return arr

        // determine the middle index of the array
        val mid = arr.size / 2

        // create two arrays to hold the left and right halves of the original array
        val left = arr.copyOfRange(0, mid)
        val right = arr.copyOfRange(mid, arr.size)

        // recursively sort the left and right halves
        val sortedLeft = mergeSort(left)
        val sortedRight = mergeSort(right)

        // merge the sorted halves and return the final sorted array
        return merge(sortedLeft, sortedRight)
    }

    /*
    This function takes in two sorted arrays and merges them into one sorted array.
    It uses a temporary array to store the merged items and then copies them back into the original array.
    Parameters:
    - left: a sorted array of items
    - right: a sorted array of items
    Returns:
    - a merged and sorted array of items
    */
    fun merge(left: Array<T>, right: Array<T>): Array<T> {
        // create a temporary array to hold the merged items
        val temp = arrayOfNulls<Any>(left.size + right.size) as Array<T>

        // initialize variables to track the indices of the left, right, and temp arrays
        var leftIndex = 0
        var rightIndex = 0
        var tempIndex = 0

        // loop until either the left or right array is fully traversed
        while (leftIndex < left.size && rightIndex < right.size) {
            // if the item in the left array is smaller, add it to the temp array
            if (left[leftIndex] <= right[rightIndex]) {
                temp[tempIndex] = left[leftIndex]
                leftIndex++
            }
            // otherwise, add the item from the right array to the temp array
            else {
                temp[tempIndex] = right[rightIndex]
                rightIndex++
            }
            tempIndex++
        }

        // add any remaining items from the left array to the temp array
        while (leftIndex < left.size) {
            temp[tempIndex] = left[leftIndex]
            leftIndex++
            tempIndex++
        }

        // add any remaining items from the right array to the temp array
        while (rightIndex < right.size) {
            temp[tempIndex] = right[rightIndex]
            rightIndex++
            tempIndex++
        }

        // copy the sorted items back into the original array
        for (i in temp.indices) {
            left[i] = temp[i]
        }

        // return the merged array
        return left
    }
}