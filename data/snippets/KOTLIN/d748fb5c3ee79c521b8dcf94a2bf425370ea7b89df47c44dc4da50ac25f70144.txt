// This is a complex class in Kotlin
class Complex(val real: Double, val imag: Double) {

    // Custom getter to return the complex number as a string
    val complexAsString: String
        get() = "$real + ${imag}i"

    // Overloading the plus operator to add two complex numbers
    operator fun plus(other: Complex): Complex {
        val sumReal = this.real + other.real
        val sumImag = this.imag + other.imag
        return Complex(sumReal, sumImag)
    }

    // Overriding the toString() method to return the complex number as a string
    override fun toString(): String {
        return "( $real + ${imag}i )"
    }

    // Overriding the equals() method to compare two complex numbers
    override fun equals(other: Any?): Boolean {
        if (other == null) {
            return false
        }
        if (other is Complex) {
            if (this.real == other.real && this.imag == other.imag) {
                return true
            }
        }
        return false
    }

    // Companion object with a factory method to create complex numbers from polar coordinates
    companion object {
        fun fromPolar(r: Double, theta: Double): Complex {
            val real = r * Math.cos(theta)
            val imag = r * Math.sin(theta)
            return Complex(real, imag)
        }
    }
}

// Example of using the Complex class
fun main() {
    val complex1 = Complex(2.0, 3.0)
    val complex2 = Complex(4.0, 5.0)

    println("Complex 1: $complex1") // Output: Complex 1: ( 2.0 + 3.0i )
    println("Complex 2: $complex2") // Output: Complex 2: ( 4.0 + 5.0i )

    val sum = complex1 + complex2
    println("Sum: $sum") // Output: Sum: ( 6.0 + 8.0i )

    val complex3 = Complex.fromPolar(6.0, Math.PI / 3) // Creating a complex number from polar coordinates
    println("Complex 3: $complex3") // Output: Complex 3: ( 3.0 + 5.196152422706632i )

    println("Are complex 1 and complex 2 equal? ${complex1 == complex2}") // Output: Are complex 1 and complex 2 equal? false
}