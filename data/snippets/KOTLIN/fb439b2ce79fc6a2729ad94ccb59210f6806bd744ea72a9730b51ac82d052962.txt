// This is a function that takes in two parameters, x and y, and returns the sum of their squares
fun squareSum(x: Int, y: Int): Int {
    val xSquared = x * x
    val ySquared = y * y
    return xSquared + ySquared
}

// This is a function that calculates the nth Fibonacci number using recursion
fun fibonacci(n: Int): Int {
    if (n == 0 || n == 1) {
        return n
    } else {
        return fibonacci(n-1) + fibonacci(n-2)
    }
}

// This is a class representing a person with properties name, age, and occupation
class Person(val name: String, var age: Int, val occupation: String) {
    // This is a function that prints out a message introducing the person
    fun introduce() {
        println("Hi, my name is $name and I am $age years old. I work as a $occupation.")
    }
}

//This is a high-order function that takes in a list of numbers and a lambda expression to perform a calculation on each number
fun calculate(numbers: List<Int>, operation: (Int) -> Int): List<Int> {
    val result = mutableListOf<Int>()
    for (num in numbers) {
        result.add(operation(num))
    }
    return result
}

// An example of using the squareSum function
val result = squareSum(5, 7) // result will equal 74

// An example of using the fibonacci function
val fibNumber = fibonacci(10) // fibNumber will equal 55

// An example of using the Person class and its introduce function
val person = Person("Jane", 28, "software developer")
person.introduce() // prints out "Hi, my name is Jane and I am 28 years old. I work as a software developer."

// An example of using the calculate function with a lambda expression to calculate the squares of a list of numbers
val numbers = listOf(1, 2, 3, 4, 5)
val squares = calculate(numbers) { num: Int ->
    num * num
} // squares will be a list containing 1, 4, 9, 16, 25