// Function to find all permutations of a given string
fun findPermutations(str: String): List<String> {
    // Base case
    if (str.length == 1) {
        return listOf(str)
    }
    
    // Recursive call to find permutations of substring
    val subPerms = findPermutations(str.substring(1))
    
    val permutations = mutableListOf<String>()
    
    // Loop through sub-permutations
    for (subPerm in subPerms) {
        // Loop through each position of sub-permutation
        for (i in 0..subPerm.length) {
            // Insert first letter of original string at each position
            val newPerm = StringBuilder(subPerm).insert(i, str[0]).toString()
            // Add new permutation to list
            permutations += newPerm
        }
    }
    
    // Return list of permutations
    return permutations
}

// Input string
val str = "abc"

// Find all permutations of input string
val results = findPermutations(str)

// Print results
println(results) // Output: [abc, bac, bca, acb, cab, cba]