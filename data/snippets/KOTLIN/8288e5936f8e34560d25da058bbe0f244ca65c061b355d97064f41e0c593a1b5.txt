/**
 * A class representing a car.
 *
 * @param brand the brand of the car
 * @param model the model of the car
 * @param color the color of the car
 */
class Car(val brand: String, val model: String, val color: String) {

    // Declaring properties
    private var fuelLevel: Int = 100
    private var mileage: Int = 0
    private var isEngineOn: Boolean = false
    private var isLocked: Boolean = true

    /**
     * Starts the car's engine.
     *
     * @throws IllegalStateException if the car is already running
     */
    fun startEngine() {
        if (isEngineOn) {
            throw IllegalStateException("The engine is already running.")
        } else {
            isEngineOn = true
            println("The engine has been started.")
        }
    }

    /**
     * Stops the car's engine.
     *
     * @throws IllegalStateException if the car is not running
     */
    fun stopEngine() {
        if (!isEngineOn) {
            throw IllegalStateException("The engine is not running.")
        } else {
            isEngineOn = false
            println("The engine has been stopped.")
        }
    }

    /**
     * Drives the car for a specified distance and reduces the fuel level.
     *
     * @param distance the distance to drive in kilometers
     * @throws IllegalStateException if the car is not running
     * @throws IllegalArgumentException if the distance is negative or exceeds the remaining fuel level
     */
    fun drive(distance: Int) {
        if (!isEngineOn) {
            throw IllegalStateException("The engine is not running.")
        } else if (distance < 0) {
            throw IllegalArgumentException("Distance cannot be negative.")
        } else if (distance > fuelLevel) {
            throw IllegalArgumentException("Not enough fuel to drive this distance.")
        } else {
            mileage += distance
            fuelLevel -= distance
            println("The car has driven $distance kilometers. You now have $fuelLevel fuel level.")
        }
    }

    /**
     * Locks the car's doors.
     */
    fun lock() {
        if (isLocked) {
            println("The car is already locked.")
        } else {
            isLocked = true
            println("The car has been locked.")
        }
    }

    /**
     * Unlocks the car's doors.
     */
    fun unlock() {
        if (!isLocked) {
            println("The car is already unlocked.")
        } else {
            isLocked = false
            println("The car has been unlocked.")
        }
    }
}

// Creating an instance of the Car class
val car = Car("Toyota", "Rav4", "Blue")

// Starting the car's engine
car.startEngine()

// Driving the car for 50 kilometers
car.drive(50)

// Checking if the car is locked
if (car.isLocked) {
    println("The car is currently locked.")
}

// Unlocking the car
car.unlock()