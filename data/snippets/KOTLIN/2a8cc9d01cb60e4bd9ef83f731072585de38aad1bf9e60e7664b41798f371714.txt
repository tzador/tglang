// Example code for implementing a binary search tree in Kotlin
class TreeNode(val value: Int) {
    var left: TreeNode? = null
    var right: TreeNode? = null
}

class BinarySearchTree() {
    var root: TreeNode? = null

    fun insert(node: TreeNode, value: Int) {
        if (value < node.value) {
            if (node.left == null) {
                node.left = TreeNode(value)
            } else {
                insert(node.left!!, value)
            }
        } else {
            if (node.right == null) {
                node.right = TreeNode(value)
            } else {
                insert(node.right!!, value)
            }
        }
    }

    fun search(value: Int): TreeNode? {
        var current = root
        while (current != null) {
            if (current.value == value) return current
            current = if (value < current.value) current.left else current.right
        }
        return null
    }

    fun delete(value: Int) {
        root?.let { root = deleteNode(it, value) }
    }

    fun deleteNode(root: TreeNode, value: Int): TreeNode? {
        if (root == null) return root
        if (value < root.value) root.left = deleteNode(root.left!!, value)
        else if (value > root.value) root.right = deleteNode(root.right!!, value)
        else {
            if (root.left == null)
                return root.right
            else if (root.right == null)
                return root.left

            root.value = minValue(root.right!!)

            root.right = deleteNode(root.right!!, root.value)
        }
        return root
    }

    fun minValue(root: TreeNode): Int {
        var min = root.value
        var current = root
        while (current.left != null) {
            min = current.left!!.value
            current = current.left!!
        }
        return min
    }

    fun printInOrder(node: TreeNode?) {
        if (node != null) {
            printInOrder(node.left)
            print(node.value.toString() + " ")
            printInOrder(node.right)
        }
    }
}

fun main(args: Array<String>) {
    val bst = BinarySearchTree()
    bst.insert(bst.root!!, 10)
    bst.insert(bst.root!!, 5)
    bst.insert(bst.root!!, 2)
    bst.insert(bst.root!!, 7)
    bst.insert(bst.root!!, 12)

    bst.printInOrder(bst.root)
    println()

    println(bst.search(5)?.value)

    bst.delete(10)
    bst.printInOrder(bst.root)
    println()
}