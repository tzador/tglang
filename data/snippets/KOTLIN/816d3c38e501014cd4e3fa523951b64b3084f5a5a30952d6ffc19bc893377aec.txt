/**
* A class representing a bank account
* @property accountNumber The account number of the bank account
* @property balance The current balance of the bank account
*/
class BankAccount(private val accountNumber: Int, private var balance: Double) {
    
    /**
    * A method to deposit funds into the bank account
    * @param amount The amount to be deposited
    */
    fun deposit(amount: Double) {
        balance += amount
    }
    
    /**
    * A method to withdraw funds from the bank account
    * @param amount The amount to be withdrawn
    */
    fun withdraw(amount: Double) {
        if(amount < balance) {
            balance -= amount
        } else {
            throw InsufficientFundsException("Not enough funds in account")
        }
    }
    
    /**
    * A method to transfer funds from this bank account to another
    * @param recipient The recipient bank account
    * @param amount The amount to be transferred
    */
    fun transfer(recipient: BankAccount, amount: Double) {
        try {
            withdraw(amount)
            recipient.deposit(amount)
        } catch (e: InsufficientFundsException) {
            println("Transfer failed: ${e.message}")
        }
    }
}

// An exception class to handle insufficient funds errors
class InsufficientFundsException(message: String) : Exception(message)

fun main() {
    // Create two bank accounts
    val account1 = BankAccount(123456, 500.00)
    val account2 = BankAccount(654321, 1000.00)
    
    // Transfer $200 from account1 to account2
    account1.transfer(account2, 200.00)
    
    // Print the balances of both accounts
    println("Account1 balance: ${account1.balance}")
    println("Account2 balance: ${account2.balance}")
}