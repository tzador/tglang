// Class for creating a binary tree
class BinarySearchTree {
    // Node class for creating tree nodes
    inner class Node(var key: Int) {
        var left: Node? = null
        var right: Node? = null
        var parent: Node? = null
    }

    // Root node of the tree
    private var root: Node? = null

    // Function to insert a key into the tree
    fun insert(key: Int) {
        // If tree is empty, make the key as the root
        if (root == null) {
            root = Node(key)
            return
        }

        var currentNode = root
        var parent: Node? = null

        // Loop until we find the appropriate position to insert the key
        while (currentNode != null) {
            parent = currentNode

            // If key is less than the current node, move to the left child
            if (key < currentNode.key) {
                currentNode = currentNode.left
            }
            // If key is greater than the current node, move to the right child
            else {
                currentNode = currentNode.right
            }
        }

        // Create a new node with the given key
        val newNode = Node(key)

        // If the key is less than the parent node, make it the left child
        if (key < parent!!.key) {
            parent.left = newNode
        }
        // If the key is greater than the parent node, make it the right child
        else {
            parent.right = newNode
        }
    }

    // Function to search for a key in the tree
    fun search(key: Int): Boolean {
        var currentNode = root

        // Loop until we reach the end of the tree or find the key
        while (currentNode != null) {
            // If key is found, return true
            if (currentNode.key == key) {
                return true
            }
            // If key is less than the current node, move to the left child
            else if (key < currentNode.key) {
                currentNode = currentNode.left
            }
            // If key is greater than the current node, move to the right child
            else {
                currentNode = currentNode.right
            }
        }

        // If key is not found, return false
        return false
    }

    // Function to delete a key from the tree
    fun delete(key: Int) {
        var currentNode = root
        var parent: Node? = null
        var found = false

        // Loop until we reach the end of the tree or find the key
        while (currentNode != null) {
            // If key is found, set the found flag to true and break the loop
            if (currentNode.key == key) {
                found = true
                break
            }
            parent = currentNode

            // If key is less than the current node, move to the left child
            if (key < currentNode.key) {
                currentNode = currentNode.left
            }
            // If key is greater than the current node, move to the right child
            else {
                currentNode = currentNode.right
            }
        }

        // If key is not found, return without deleting
        if (!found) {
            return
        }

        // Case 1: Node to be deleted has no children i.e. it is a leaf node
        if (currentNode?.left == null && currentNode?.right == null) {
            // If the node to be deleted is the root node, set the root to null
            if (parent == null) {
                root = null
            }
            // If the node to be deleted is the left child of its parent, set the parent's left child to null
            else if (parent.left == currentNode) {
                parent.left = null
            }
            // If the node to be deleted is the right child of its parent, set the parent's right child to null
            else {
                parent.right = null
            }
        }
        // Case 2: Node to be deleted has one child, so replace it with its child
        else if (currentNode?.left == null) {
            // If the node to be deleted is the root node, set the root to its right child
            if (parent == null) {
                root = currentNode.right
            }
            // If the node to be deleted is the left child of its parent, set the parent's left child to its right child
            else if (parent.left == currentNode) {
                parent.left = currentNode.right
            }
            // If the node to be deleted is the right child of its parent, set the parent's right child to its right child
            else {
                parent.right = currentNode.right
            }
        } else if (currentNode?.right == null) {
            // If the node to be deleted is the root node, set the root to its left child
            if (parent == null) {
                root = currentNode.left
            }
            // If the node to be deleted is the left child of its parent, set the parent's left child to its left child
            else if (parent.left == currentNode) {
                parent.left = currentNode.left
            }
            // If the node to be deleted is the right child of its parent, set the parent's right child to its left child
            else {
                parent.right = currentNode.left
            }
        }
        // Case 3: Node to be deleted has two children
        else {
            // Find the minimum value in the right subtree of the node to be deleted
            var minRightNode = currentNode.right
            while (minRightNode?.left != null) {
                minRightNode = minRightNode?.left
            }

            // Store the value of the minimum node
            val minValue = minRightNode?.key

            // Delete the minimum node
            delete(minRightNode!!.key)

            // Replace the key of the node to be deleted with the minimum value
            currentNode.key = minValue!!
        }
    }

    // Function to print the tree in in-order traversal
    fun printInOrder(currentNode: Node?) {
        // If current node is null, return
        if (currentNode == null) {
            return
        }

        // Recursively call printInOrder on left subtree
        printInOrder(currentNode.left)

        // Print the key of the current node
        println(currentNode.key)

        // Recursively call printInOrder on right subtree
        printInOrder(currentNode.right)
    }
}

// Main function to create a binary search tree and perform operations on it
fun main() {
    val binarySearchTree = BinarySearchTree()

    // Insert keys into the tree
    binarySearchTree.insert(10)
    binarySearchTree.insert(5)
    binarySearchTree.insert(15)
    binarySearchTree.insert(3)
    binarySearchTree.insert(7)
    binarySearchTree.insert(12)
    binarySearchTree.insert(17)

    // Print the tree in in-order traversal
    binarySearchTree.printInOrder(binarySearchTree.root)

    // Search for a key in the tree
    println(binarySearchTree.search(10))
    println(binarySearchTree.search(20))

    // Delete a key from the tree
    binarySearchTree.delete(5)

    // Print the tree in in-order traversal
    binarySearchTree.printInOrder(binarySearchTree.root)
}