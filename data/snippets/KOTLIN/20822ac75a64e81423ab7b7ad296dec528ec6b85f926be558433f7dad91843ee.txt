/* This is a complex code snippet in Kotlin that utilizes higher-order functions and lambdas to create a custom sorting function. */

fun <T> List<T>.customSort(comparator: (firstItem: T, secondItem: T) -> Int): List<T> {
    val sortedList = this.toMutableList()
    for (i in sortedList.indices) { 
        var minIndex = i 
        for (j in i + 1 until sortedList.size) { 
            if (comparator(sortedList[j], sortedList[minIndex]) < 0) { 
                minIndex = j 
            } 
        } 
        if (minIndex != i) { 
            sortedList[i] = sortedList[minIndex].also { sortedList[minIndex] = sortedList[i] } 
        } 
    } 
    return sortedList 
}

val numbers = listOf(5, 2, 8, 1, 9, 4, 3, 7, 6)
val sortedNumbers = numbers.customSort { firstNum, secondNum -> firstNum.compareTo(secondNum) }
println(sortedNumbers)
// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]

val words = listOf("apple", "orange", "banana", "pineapple", "strawberry")
val sortedWords = words.customSort { firstWord, secondWord -> firstWord.length.compareTo(secondWord.length) }
println(sortedWords)
// Output: [apple, orange, banana, strawberry, pineapple]