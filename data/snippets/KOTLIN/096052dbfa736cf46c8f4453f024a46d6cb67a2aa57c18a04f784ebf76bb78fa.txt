fun binarySearch(list: List<Int>, key: Int, range: IntRange): Int? {
    /*
    Performs a binary search on a List of Integers to find the index of the given key.
    Returns the index of the key if found, else returns null.
     */

    // Initialize the start and end of the range to be searched
    var start = range.first
    var end = range.last
    
    // iterate until start is less than or equal to end
    while (start <= end) {
        // calculate the mid index by dividing start and end by 2
        val mid = (start + end) / 2

        // check if mid index value is equal to key
        if (list[mid] == key) {
            // return the mid index if found
            return mid
        } else if (list[mid] < key) {
            // if mid index value is less than key,
            // set start to mid + 1 to narrow down the search range to the right half
            start = mid + 1
        } else {
            // if mid index value is greater than key,
            // set end to mid - 1 to narrow down the search range to the left half
            end = mid - 1
        }
    }

    // return null if key is not found
    return null
}

// Example usage
val numbers = listOf(1, 2, 3, 4, 5)
val index = binarySearch(numbers, 3, 0..numbers.size-1) // returns 2 as 3 is at index 2 in the list