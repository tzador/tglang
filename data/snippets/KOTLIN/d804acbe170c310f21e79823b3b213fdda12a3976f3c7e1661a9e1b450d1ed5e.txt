// This code snippet demonstrates the use of higher-order functions and lambda expressions in Kotlin

// Define a higher-order function that takes in a list of integers and a function as parameters
fun operateOnList(numbers: List<Int>, operation: (Int) -> Int): List<Int> {
    // Create an empty list to store the results
    val results = mutableListOf<Int>()
    // Iterate through the list of numbers
    for (num in numbers) {
        // Apply the operation function to each number and add the result to the results list
        results.add(operation(num))
    }
    // Return the list of results
    return results
}

// Define a lambda expression for a simple addition operation
val add = { num: Int -> num + 2 }

// Define a lambda expression for a simple multiplication operation
val multiply = { num: Int -> num * 10 }

// Create a list of numbers to operate on
val numbers = listOf(1, 2, 3, 4, 5)

// Execute the higher-order function using the list of numbers and the add lambda expression
val addResults = operateOnList(numbers, add)

// Execute the higher-order function using the list of numbers and the multiply lambda expression
val multiplyResults = operateOnList(numbers, multiply)

// Print the results
println("Addition results: $addResults")
println("Multiplication results: $multiplyResults")

/* Output:
Addition results: [3, 4, 5, 6, 7]
Multiplication results: [10, 20, 30, 40, 50]
*/

// We can also pass in an anonymous function as a parameter
val subtractResults = operateOnList(numbers, fun(num: Int): Int {
    return num - 1
})

// Print the results
println("Subtraction results: $subtractResults")

/* Output:
Subtraction results: [0, 1, 2, 3, 4]
*/