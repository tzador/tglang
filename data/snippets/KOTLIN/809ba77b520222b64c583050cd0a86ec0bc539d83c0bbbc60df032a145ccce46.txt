// define a generic class `Matrix` with two type parameters `T` and `R`
class Matrix<T, R> {

    // define a private property `matrix` as a 2D array of type `T`
    private val matrix: Array<Array<T>>

    // define a public constructor that takes in a 2D array of type `T` as a parameter and assigns it to the `matrix` property
    constructor(matrix: Array<Array<T>>) {
        this.matrix = matrix
    }

    // define a public function `multiply` that takes in a `Matrix<R, T>` object and returns a new `Matrix<R, T>` object as a result
    fun multiply(other: Matrix<R, T>): Matrix<R, T> {

        // check if the number of columns in the first matrix is equal to the number of rows in the second matrix
        if (this.matrix[0].size != other.matrix.size) {
            throw IllegalArgumentException("Matrices cannot be multiplied")
        }

        // define a new 2D array of type `R` to store the result of the multiplication
        val resultArray = Array<R>(this.matrix.size) {
            Array<R>(other.matrix[0].size) { zeroValue() }
        }

        // multiply the matrices element-wise and store the result in the `resultArray`
        for (i in 0 until this.matrix.size) {
            for (j in 0 until other.matrix[0].size) {
                for (k in 0 until other.matrix.size) {
                    resultArray[i][j] += this.matrix[i][k] * other.matrix[k][j]
                }
            }
        }

        // return a new `Matrix<R, T>` object with the `resultArray` as the parameter to the constructor
        return Matrix(resultArray)
    }

    // define a private inline function `zeroValue` that returns the default value of type `R`
    private inline fun <reified R> zeroValue(): R =
        when (R::class) {
            Int::class -> 0 as R
            Double::class -> 0.0 as R
            else -> throw IllegalArgumentException("Type not supported")
        }
}

// create two `Matrix` objects of type `Int`
val firstMatrix = Matrix(arrayOf(arrayOf(1, 2, 3), arrayOf(4,5,6)))
val secondMatrix = Matrix(arrayOf(arrayOf(7, 8), arrayOf(9, 10), arrayOf(11, 12)))

// call the `multiply` function on the first `Matrix` object and pass in the second `Matrix` object as a parameter
val resultMatrix = firstMatrix.multiply(secondMatrix)

// print the result matrix
println(resultMatrix.matrix.contentDeepToString())