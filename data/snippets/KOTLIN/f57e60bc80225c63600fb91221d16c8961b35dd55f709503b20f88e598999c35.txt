class BinaryTree<T> {
    var root: Node<T>? = null
 
    fun insert(value: T) {
        root = insert(root, value)
    }
 
    private fun insert(node: Node<T>?, value: T): Node<T> {
        if (node == null) {
            return Node(value)
        }
 
        if (value < node.value) {
            node.left = insert(node.left, value)
        } else if (value > node.value) {
            node.right = insert(node.right, value)
        } else {
            // value already exists in tree
            return node
        }
 
        // update height of node
        node.height = 1 + max(height(node.left), height(node.right))
 
        // get balance factor
        val balance = getBalance(node)
 
        // left left case
        if (balance > 1 && value < node.left.value) {
            return rotateRight(node)
        }
 
        // right right case
        if (balance < -1 && value > node.right.value) {
            return rotateLeft(node)
        }
 
        // left right case
        if (balance > 1 && value > node.left.value) {
            node.left = rotateLeft(node.left)
            return rotateRight(node)
        }
 
        // right left case
        if (balance < -1 && value < node.right.value) {
            node.right = rotateRight(node.right)
            return rotateLeft(node)
        }
 
        return node
    }
 
    private fun height(node: Node<T>?): Int {
        if (node == null) {
            return 0
        }
 
        return node.height
    }
 
    private fun getBalance(node: Node<T>?): Int {
        if (node == null) {
            return 0
        }
 
        return height(node.left) - height(node.right)
    }
 
    private fun rotateRight(node: Node<T>): Node<T> {
        val left = node.left
        val right = left.right
 
        // rotate
        left.right = node
        node.left = right
 
        // update heights
        node.height = 1 + max(height(node.left), height(node.right))
        left.height = 1 + max(height(left.left), height(left.right))
 
        return left
    }
 
    private fun rotateLeft(node: Node<T>): Node<T> {
        val right = node.right
        val left = right.left
 
        // rotate
        right.left = node
        node.right = left
 
        // update heights
        node.height = 1 + max(height(node.left), height(node.right))
        right.height = 1 + max(height(right.left), height(right.right))
 
        return right
    }
 
    class Node<T>(val value: T) {
        var left: Node<T>? = null
        var right: Node<T>? = null
        var height: Int = 1
    }
}