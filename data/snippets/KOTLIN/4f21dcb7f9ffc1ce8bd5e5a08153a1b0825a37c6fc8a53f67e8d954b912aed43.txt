/**
 * This is a complex function in Kotlin that sorts a list of numbers in ascending order.
 * @param numbers a MutableList of numbers to be sorted
 * @return a sorted list of numbers
 */
fun sort(numbers: MutableList<Int>): List<Int>{
  // base case - if the list has 1 or 0 elements, return the list
  if(numbers.size <= 1){
    return numbers
  }

  // get the pivot element as the last element in the list
  val pivot = numbers.last()

  // create lists to hold the elements less than pivot and greater than pivot
  val less = mutableListOf<Int>()
  val greater = mutableListOf<Int>()

  // iterate through the list, comparing each element to the pivot
  for(i in 0 until numbers.size - 1){

    // if the element is less than pivot, add it to the less list
    if(numbers[i] < pivot){
      less.add(numbers[i])
    }
    // if the element is greater than pivot, add it to the greater list
    else{
      greater.add(numbers[i])
    }
  }

  // recursively call the function on the less and greater lists
  val sortedLess = sort(less)
  val sortedGreater = sort(greater)

  // return the concatenated sorted lists, with the pivot in the middle
  return sortedLess + pivot + sortedGreater
}

// example usage
val unsortedNumbers = mutableListOf(5, 2, 8, 1, 9)
val sortedNumbers = sort(unsortedNumbers)
println(sortedNumbers) // output: [1, 2, 5, 8, 9]