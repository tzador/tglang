// This is a function that calculates the factorial of a given number
fun factorial(num: Int): Int {
    // Base case, if the number is 0 or 1 then factorial is 1
    if (num == 0 || num == 1) {
        return 1
    }
    // Recursive case, calling the function again with num-1 and multiplying it with num
    return num * factorial(num - 1)
}

// This is a function that prints the fibonacci series up to a given number
fun fibonacci(num: Int): List<Int> {
    // Base case, if the number is 0 then return an empty list
    if (num == 0) {
        return emptyList()
    }
    // Another base case, if the number is 1 then return a list with just 1
    if (num == 1) {
        return listOf(1)
    }
    // Initializing the list with 1 and 1 as the first two numbers of the sequence
    val sequence = mutableListOf(1, 1)
    // Looping through from index 2 to num-1 (num-1 because we already have the first two numbers)
    for (i in 2 until num) {
        // Adding the sum of the previous two numbers to the list
        sequence.add(sequence[i-1] + sequence[i-2])
    }
    // Returning the final fibonacci sequence list
    return sequence
}

// Main function to call our factorial and fibonacci functions and print the results
fun main() {
    // Using readLine() to take input from the user
    println("Enter a number for factorial:")
    val factorialNum = readLine()?.toInt()
    // Checking if the user has entered a valid integer
    if(factorialNum !is Int) {
        println("Please enter a valid number")
    } else {
        // Calling the factorial function and printing the result
        println("Factorial of $factorialNum is ${factorial(factorialNum)}")
    }

    // Using readLine() to take input from the user
    println("Enter a number for fibonacci:")
    val fibonacciNum = readLine()?.toInt()
    // Checking if the user has entered a valid integer
    if(fibonacciNum !is Int) {
        println("Please enter a valid number")
    } else {
        // Calling the fibonacci function and printing the result
        println("Fibonacci series up to $fibonacciNum: ${fibonacci(fibonacciNum)}")
    }
}

// Output:
//Enter a number for factorial:
//5
//Factorial of 5 is 120
//Enter a number for fibonacci:
//8
//Fibonacci series up to 8: [1, 1, 2, 3, 5, 8, 13, 21]