// This is a function that takes in two Integers and returns the result of their multiplication
// It uses the "when" conditional expression to handle different cases

fun multiply(x: Int, y: Int): Int {
    return when {
        x == 0 -> 0 
        y == 0 -> 0
        x == 1 -> y
        y == 1 -> x
        else -> x * y
    }
}

// This is a recursive function that calculates the factorial of a given number
// It uses the "if" conditional expression to check for the base case

fun factorial(n: Int): Int {
    return if (n == 1 || n == 0) 1 else n * factorial(n-1)
}

// This is a higher-order function that takes in a list of Integers and
// applies a given function to each element of the list

fun operateOnList(list: List<Int>, operateFunction: (Int) -> Int): List<Int> {
    val resultList = mutableListOf<Int>()
    for (num in list) {
        resultList.add(operateFunction(num))
    }
    return resultList
}

// This is an example of using the "operateOnList" function with a lambda expression
// to calculate the square of each element in a given list

val numbers = listOf(1, 2, 3, 4, 5)
val squaredList = operateOnList(numbers) { num -> num * num }

// Output: [1, 4, 9, 16, 25]