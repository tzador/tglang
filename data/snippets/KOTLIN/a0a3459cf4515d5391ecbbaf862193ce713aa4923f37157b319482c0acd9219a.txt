class BinaryTree<T> {
    private var root: Node<T>? = null

    inner class Node<T> (var value: T) {
        var left: Node<T>? = null
        var right: Node<T>? = null
    }

    fun add(value: T) {
        root = addRecursive(root, value)
    }

    private fun addRecursive(current: Node<T>?, value: T): Node<T> {
        current?.let {
            when {
                value < it.value -> {
                    it.left = addRecursive(it.left, value)
                }
                value > it.value -> {
                    it.right = addRecursive(it.right, value)
                }
                else -> {
                    // Value already exists in tree, do not add duplicate
                }
            }
            return it
        }
        return Node(value)
    }

    fun search(value: T): Boolean {
        return searchRecursive(root, value)
    }

    private fun searchRecursive(current: Node<T>?, value: T): Boolean {
        current?.let {
            when {
                value < it.value -> {
                    return searchRecursive(it.left, value)
                }
                value > it.value -> {
                    return searchRecursive(it.right, value)
                }
                else -> {
                    // Value found in tree
                    return true
                }
            }
        }
        // Value not found in tree
        return false
    }

    fun delete(value: T) {
        root = deleteRecursive(root, value)
    }

    private fun deleteRecursive(current: Node<T>?, value: T): Node<T>? {
        current?.let {
            when {
                value < it.value -> {
                    it.left = deleteRecursive(it.left, value)
                }
                value > it.value -> {
                    it.right = deleteRecursive(it.right, value)
                }
                else -> {
                    if (it.left == null && it.right == null) {
                        // Leaf node, remove it from tree
                        return null
                    } else if (it.left == null) {
                        // Only right child, promote it to current node's position
                        return it.right
                    } else if (it.right == null) {
                        // Only left child, promote it to current node's position
                        return it.left
                    } else {
                        // Both children exist, replace current node with its in-order successor
                        val successor = findSmallestNode(it.right!!)
                        it.value = successor.value
                        it.right = deleteRecursive(it.right, successor.value)
                    }
                }
            }
            return it
        }
        // Value not found in tree, do nothing
        return current
    }

    private fun findSmallestNode(current: Node<T>): Node<T> {
        var smallestNode = current
        while (smallestNode.left != null) {
            smallestNode = smallestNode.left!!
        }
        return smallestNode
    }
}