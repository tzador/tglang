class BinaryTree { // creates a class for a binary tree data structure
    private var root: Node? = null // sets the root of the tree to null

    data class Node( // creates a nested data class for the nodes of the tree
        var value: Int, // each node will have an integer value
        var left: Node? = null, // each node may have a left child node, initially set to null
        var right: Node? = null // each node may have a right child node, initially set to null
    )

    // function to insert a new node into the tree
    fun insert(value: Int) { // takes in an integer value as parameter
        // if tree is empty, set the root to the new node with given value
        if (root == null) {
            root = Node(value)
        } else {
            // otherwise, recursively traverse the tree to find the appropriate spot to insert the new node
            insertHelper(root, value)
        }
    }

    // helper function for insert, recursively traverses the tree to find the correct spot for insertion
    private fun insertHelper(currentNode: Node?, value: Int) {
        // if the current node's value is greater than the given value, try to insert the new node to the left
        if (currentNode?.value!! > value) {
            // if the current node's left child is null, insert the new node as its left child
            if (currentNode.left == null) {
                currentNode.left = Node(value)
            } else {
                // otherwise, continue traversing the tree to find the correct spot for insertion
                insertHelper(currentNode.left, value)
            }
        } else {
            // if the current node's value is less than or equal to the given value,
            // try to insert the new node to the right
            if (currentNode.right == null) {
                currentNode.right = Node(value)
            } else {
                // otherwise, continue traversing the tree to find the correct spot for insertion
                insertHelper(currentNode.right, value)
            }
        }
    }

    // function to print out the tree in pre-order traversal
    fun printPreOrder() {
        // calls the helper function to recursively traverse and print out the tree
        printPreOrderHelper(root)
    }

    // helper function for printPreOrder, recursively traverses and prints out the tree
    private fun printPreOrderHelper(currentNode: Node?) {
        // if the current node is null (reached a leaf), return
        if (currentNode == null) {
            return
        }
        // prints out the current node's value
        print("${currentNode.value} ")
        // recursively calls printPreOrderHelper for the current node's left and right child nodes
        printPreOrderHelper(currentNode.left)
        printPreOrderHelper(currentNode.right)
    }
}

// example usage:
// creates a new binary tree
val tree = BinaryTree()
// inserts values into the tree
tree.insert(10)
tree.insert(5)
tree.insert(15)
tree.insert(8)
tree.insert(3)
tree.insert(12)
// prints out the tree in pre-order traversal
tree.printPreOrder()