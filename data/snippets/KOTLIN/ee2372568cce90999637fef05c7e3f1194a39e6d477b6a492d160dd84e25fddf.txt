/* This is a complex code snippet in KOTLIN
   It uses various coding techniques and contains multiple functions */
   
// This function uses recursion to calculate the factorial of a given number
fun factorial(num: Int): Int {
    if (num == 1) { // base case
        return 1
    } else {
        return num * factorial(num - 1) // recursive call
    }
}

// This function checks if a number is prime or not
fun isPrime(num: Int): Boolean {
    if (num == 2) { // 2 is the only even prime number
        return true
    } else if (num < 2 || num % 2 == 0) { // exclude even numbers and 0 and 1 from being prime
        return false
    }

    for (i in 3 until num step 2) { // loop through odd numbers starting from 3
        if (num % i == 0) { // check if number is divisible by any odd number
            return false
        }
    }
    return true
}

// This function calculates the Fibonacci sequence up to a given number
fun fibonacci(num: Int): List<Int> {
    var result = mutableListOf<Int>()
    var first = 0
    var second = 1
    for (i in 0 until num) {
        result.add(first) // add current number to result list
        val sum = first + second
        first = second
        second = sum
    }
    return result
}

// Example usage of functions
fun main() {
    println("The factorial of 5 is ${factorial(5)}") // output: The factorial of 5 is 120
    println("Is 13 a prime number? ${isPrime(13)}") // output: Is 13 a prime number? true
    println("The first 10 numbers in the Fibonacci sequence are ${fibonacci(10)}") // output: The first 10 numbers in the Fibonacci sequence are [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
}