class ShoppingCart(private val items: MutableMap<String, Int>) { // Creates a class named "ShoppingCart" with a private mutable map as parameter

    fun addItem(item: String, quantity: Int) { // Creates a function "addItem" that takes in parameters of type String and Int
        if (items.containsKey(item)) { // Checks if the item already exists in the map
            val currentQuantity = items.getValue(item) // Sets the current quantity of the item by getting the value from the map
            items[item] = currentQuantity + quantity // Updates the quantity of the item in the map
        } else {
            items[item] = quantity // Adds the new item and quantity to the map
        }
    }

    fun removeItem(item: String, quantity: Int) { // Creates a function "removeItem" that takes in parameters of type String and Int
        if (items.containsKey(item)) { // Checks if the item exists in the map
            val currentQuantity = items.getValue(item) // Sets the current quantity of the item by getting the value from the map
            if (currentQuantity <= quantity) { // Checks if the quantity to remove is greater than or equal to the current quantity
                items.remove(item) // Removes the item from the map
            } else {
                items[item] = currentQuantity - quantity // Updates the quantity of the item in the map
            }
        }
    }

    fun getTotal(): Double { // Creates a function "getTotal" that returns a value of type Double
        var total = 0.0 // Initializes a variable "total" with a starting value of 0.0
        for ((item, quantity) in items) { // Loops through the items in the map
            val itemPrice = getItemPrice(item) // Calls the function "getItemPrice" to get the price of the item
            val itemTotal = quantity * itemPrice // Calculates the total price of the item based on its quantity
            total += itemTotal // Adds the item total to the overall total
        }
        return total // Returns the total price of all items in the map
    }

    private fun getItemPrice(item: String): Double { // Creates a private function "getItemPrice" that takes in a parameter of type String and returns a value of type Double
        // Code to get the price of the item from a database or other source
        return 10.99 // Returns a hardcoded price for the item
    }
}

// Sample usage:

val shoppingCart = ShoppingCart(mutableMapOf("Apple" to 2, "Banana" to 3)) // Creates a new instance of the "ShoppingCart" class with 2 Apples and 3 Bananas in the cart

shoppingCart.addItem("Orange", 5) // Adds 5 Oranges to the cart

shoppingCart.removeItem("Apple", 1) // Removes 1 Apple from the cart

val total = shoppingCart.getTotal() // Gets the total price of all items in the cart

println("Total price of items in the cart: $$total") // Prints the total price to the console