// This code snippet creates a function called "mergeSort" to sort an array of integers using the merge sort algorithm.

// Declaring the function with an array of integers as the parameter.
fun mergeSort(numbers: Array<Int>): Array<Int> {
    // Checking if the array is empty or contains only one element.
    if (numbers.size <= 1) {
        return numbers
    }
    
    // Finding the middle index of the array.
    val middle = numbers.size / 2

    // Splitting the given array into two sub-arrays from the middle index.
    val leftArray = numbers.sliceArray(0 until middle)
    val rightArray = numbers.sliceArray(middle until numbers.size)

    // Using recursion, mergeSort function is called for the left and right sub-arrays to split them further.
    val sortedLeftArray = mergeSort(leftArray)
    val sortedRightArray = mergeSort(rightArray)

    // Merging the sorted sub-arrays and storing the result in a new array.
    return merge(sortedLeftArray, sortedRightArray)
}

// Function to merge two sorted arrays into a single sorted array.
fun merge(leftArray: Array<Int>, rightArray: Array<Int>): Array<Int> {
    // Declaring an empty result array.
    val result = emptyArray<Int>()

    // Pointers to keep track of elements in the two sub-arrays.
    var leftPointer = 0
    var rightPointer = 0

    // Looping until one of the sub-arrays is fully traversed.
    while (leftPointer < leftArray.size && rightPointer < rightArray.size) {
        // Comparing the elements in the two sub-arrays and adding the smaller one to the result array.
        if (leftArray[leftPointer] <= rightArray[rightPointer]) {
            result += leftArray[leftPointer]
            leftPointer++
        } else {
            result += rightArray[rightPointer]
            rightPointer++
        }
    }

    // Adding the remaining elements from the left sub-array to the result array.
    while (leftPointer < leftArray.size) {
        result += leftArray[leftPointer]
        leftPointer++
    }

    // Adding the remaining elements from the right sub-array to the result array.
    while (rightPointer < rightArray.size) {
        result += rightArray[rightPointer]
        rightPointer++
    }

    // Returning the merged sorted array.
    return result.toTypedArray()
}

// Example usage of the mergeSort function.
fun main() {
    // Unsorted array of integers.
    val numbers = arrayOf(5, 2, 9, 1, 8, 4, 6, 3, 7)

    println("Unsorted array: ${numbers.joinToString()}") // Output: Unsorted array: 5, 2, 9, 1, 8, 4, 6, 3, 7

    // Calling the mergeSort function to sort the array.
    val sortedNumbers = mergeSort(numbers)

    println("Sorted array: ${sortedNumbers.joinToString()}") // Output: Sorted array: 1, 2, 3, 4, 5, 6, 7, 8, 9
}