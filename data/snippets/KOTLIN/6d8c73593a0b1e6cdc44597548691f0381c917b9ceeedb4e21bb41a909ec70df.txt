data class Student ( // creates a data class with the name 'Student'
    val name: String, // creates a read-only property 'name' of type String
    val age: Int, // creates a read-only property 'age' of type Int
    val averageGrade: Double = 0.0, // creates a read-only property 'averageGrade' of type Double with a default value of 0.0
    var courses: List<String> = emptyList() // creates a mutable property 'courses' of type List<String> with an empty list as the default value
) {
    fun enroll(courseCode: String) { // creates a method 'enroll' that takes in a String parameter 'courseCode' and returns nothing
        courses += courseCode // adds the course code passed in as a parameter to the 'courses' property
    }
    
    fun changeName(newName: String) { // creates a method 'changeName' that takes in a String parameter 'newName' and returns nothing
        name = newName // assigns the value of the 'newName' parameter to the 'name' property
    }
    
    fun graduate() { // creates a method 'graduate' that returns nothing
        if (courses.size >= 10) { // checks if the size of the 'courses' list is greater than or equal to 10
            averageGrade += 1 // if true, increments the value of 'averageGrade' by 1
        }
    }
    
    companion object { // creates a companion object
        fun getInfo(student: Student): String { // creates a method inside the companion object that takes in a Student object as a parameter and returns a String
            return "Name: ${student.name}, Age: ${student.age}, Average Grade: ${student.averageGrade}, Courses: ${student.courses}" // returns a string with the values of the properties of the Student object passed in as a parameter
        }
    }
}