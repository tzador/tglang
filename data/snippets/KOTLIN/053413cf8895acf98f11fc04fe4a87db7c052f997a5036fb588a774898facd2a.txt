//This code snippet uses recursion and tail recursion to calculate the factorial of a number.
//It also includes error handling and an extension function for integer factorial calculation.

//Recursive function to calculate factorial
fun factorial(number: Int): Int {
    if (number == 0) return 1 //base case
    return number * factorial(number - 1) //recursive call
}

//Tail recursive function to calculate factorial
tailrec fun factorialTail(number: Int, result: Int = 1): Int {
    if (number == 0) return result //base case
    return factorialTail(number - 1, result * number) //tail recursive call
}

//Extension function for integer factorial calculation
fun Int.factorial() : Int {
    return factorial(this)
}

//Error handling for non-positive input
val input = -5 //change input value here
if (input < 0) {
    throw IllegalArgumentException("Factorial cannot be calculated for negative numbers!")
} else {
    val result = input.factorial()
    println("Factorial of $input is $result")
}

/* Output:
 * Factorial cannot be calculated for negative numbers!
*/