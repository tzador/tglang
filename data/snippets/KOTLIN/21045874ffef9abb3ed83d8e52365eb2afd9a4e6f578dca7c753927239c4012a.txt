// This is an example of a composite design pattern in Kotlin

// Interface for the component
interface Graphic {
    fun print()
}

// Implementations of the component
class Rectangle(private val width: Int, private val height: Int): Graphic {
    override fun print() {
        println("Drawing a rectangle with width: $width and height: $height")
    }
}

class Circle(private val radius: Int): Graphic {
    override fun print() {
        println("Drawing a circle with radius: $radius")
    }
}

// Composite class
class GraphicComposite: Graphic {
    private val graphics = ArrayList<Graphic>()

    fun addGraphic(graphic: Graphic) {
        graphics.add(graphic)
    }

    override fun print() {
        println("Drawing the composite graphic")
        for (graphic in graphics) {
            graphic.print()
        }
    }
}

fun main(args: Array<String>) {
    // Create individual components
    val rectangle = Rectangle(10, 5)
    val circle = Circle(3)

    // Create composite with added components
    val composite = GraphicComposite()
    composite.addGraphic(rectangle)
    composite.addGraphic(circle)

    // Print the composite graphic
    composite.print()
}