// Define a data class 'Person' with properties name, age, and occupation
data class Person(
    val name: String,
    var age: Int,
    var occupation: String
)

// Declare a list of 'Person' objects
val people = listOf(
    Person("John", 32, "Engineer"),
    Person("Alice", 28, "Doctor"),
    Person("Bob", 45, "Lawyer"),
    Person("Sara", 22, "Teacher"),
    Person("David", 29, "Programmer")
)

// Use a higher-order function to filter the list of people by occupation
val filteredPeople = people.filter { it.occupation == "Doctor" }

// Loop through the filtered list and print out the person's name and age
for (person in filteredPeople) {
    println("${person.name} is ${person.age} years old.")
}

// Define a class 'BankAccount' with properties owner, accountNumber, and balance
class BankAccount(
    val owner: String,
    val accountNumber: String,
    var balance: Double
) {
    // Method to deposit money into the account
    fun deposit(amount: Double) {
        balance += amount
        println("$amount deposited into account $accountNumber")
    }

    // Method to withdraw money from the account
    fun withdraw(amount: Double) {
        if (balance >= amount) {
            balance -= amount
            println("$amount withdrawn from account $accountNumber")
        } else {
            println("Not enough funds in account $accountNumber")
        }
    }
}

// Create an instance of 'BankAccount'
val account = BankAccount("John Smith", "123456789", 500.0)

// Use the deposit method to add 200 to the account balance
account.deposit(200.0)

// Use the withdraw method to subtract 100 from the account balance
account.withdraw(100.0)

// Print out the updated account balance
println("The new account balance is ${account.balance}")