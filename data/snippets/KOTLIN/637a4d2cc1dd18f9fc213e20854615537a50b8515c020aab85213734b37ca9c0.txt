class BinaryTree<E>(comparator: Comparator<E>) : AbstractCollection<E>(), Collection<E> {

    /**
     * Declaration of a private inner class Node,
     * which represents a node in the binary tree.
     */
    private inner class Node<E>(var value: E) {
        var parent: Node<E>? = null
        var left: Node<E>? = null
        var right: Node<E>? = null
    }

    /**
     * Declaration of root node and size variable.
     */
    private var root: Node<E>? = null
    override var size: Int = 0

    /**
     * Implementation of add function to add elements to the binary tree.
     * The function takes in an element of type E and returns a Boolean value.
     * If the element is successfully added, true is returned.
     * If the element is already present in the tree, false is returned.
     */
    override fun add(element: E): Boolean {
        // Check if tree is empty, if so, add new element as root node.
        if (root == null) {
            root = Node(element)
            size++
            return true
        }

        // Start at root node.
        var currentNode = root!!

        // Traverse the tree while element is not found.
        while (currentNode.value != element) {
            // If element is less than the current node's value, move to left child.
            if (comparator.compare(element, currentNode.value) < 0) {
                // If left child is null, add new node as left child.
                if (currentNode.left == null) {
                    currentNode.left = Node(element)
                    currentNode.left!!.parent = currentNode
                    size++
                    return true
                }
                // Otherwise, move to left child.
                else {
                    currentNode = currentNode.left!!
                }
            }
            // If element is greater than the current node's value, move to right child.
            else if (comparator.compare(element, currentNode.value) > 0) {
                // If right child is null, add new node as right child.
                if (currentNode.right == null) {
                    currentNode.right = Node(element)
                    currentNode.right!!.parent = currentNode
                    size++
                    return true
                }
                // Otherwise, move to right child.
                else {
                    currentNode = currentNode.right!!
                }
            }
            // If element is equal to current node's value, return false (element already exists).
            else {
                return false
            }
        }

        return false
    }

    /**
     * Implementation of contains function to check if the binary tree contains a certain element.
     * The function takes in an element of type E and returns a Boolean value.
     * If the element is present in the tree, true is returned.
     * Otherwise, false is returned.
     */
    override fun contains(element: E): Boolean {
        // Start at root node.
        var currentNode = root
        // Traverse the tree until element is found or tree is exhausted.
        while (currentNode != null) {
            // If element is less than current node's value, move to left child.
            if (comparator.compare(element, currentNode.value) < 0) {
                currentNode = currentNode.left
            }
            // If element is greater than current node's value, move to right child.
            else if (comparator.compare(element, currentNode.value) > 0) {
                currentNode = currentNode.right
            }
            // If element is equal to current node's value, return true.
            else {
                return true
            }
        }

        // Return false if element is not found.
        return false
    }

    /**
     * Implementation of toString function to print out the elements in the tree in order.
     * The function takes no parameters and returns a string representation of the tree.
     */
    override fun toString(): String {
        // If tree is empty, return empty string.
        if (root == null) {
            return ""
        }

        // Start at root node.
        var currentNode = root
        // Create a StringBuilder to store elements of the tree.
        val treeString = StringBuilder()

        // Use in order traversal to print out elements.
        fun inOrderTraversal(node: Node<E>?) {
            node ?: return
            inOrderTraversal(node.left)
            treeString.append("${node.value} ")
            inOrderTraversal(node.right)
        }

        // Call in order traversal function.
        inOrderTraversal(currentNode)

        return treeString.toString()
    }
}