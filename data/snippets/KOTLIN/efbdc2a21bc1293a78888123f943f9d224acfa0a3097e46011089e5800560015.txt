class Person(val name: String, var age: Int) {
    // Class with primary constructor and initialized properties
    companion object {
        fun isValidName(name: String): Boolean {
            // Nested method in companion object
            return name.isNotBlank() && name.length >= 2
        }
    }
    
    private val hobbies = mutableListOf<String>() // private property
    
    // Secondary constructor that takes in a list of hobbies
    constructor(name: String, age: Int, hobbies: List<String>) : this(name, age) {
        this.hobbies.addAll(hobbies)
    }
    
    // Method to add a new hobby
    fun addHobby(hobby: String) {
        if (!hobbies.contains(hobby)) {
            hobbies.add(hobby)
        }
    }
    
    // Method to remove a hobby
    fun removeHobby(hobby: String) {
        hobbies.remove(hobby)
    }
}

val john = Person("John", 25, listOf("Reading", "Gaming")) // Creating instance of Person
john.addHobby("Hiking") // Calling methods on instance
john.removeHobby("Gaming")

if (Person.isValidName(john.name)) { // Accessing nested method in companion object
    println("John's hobbies:") 
    for (hobby in john.hobbies) {
        println(hobby)
    }
}