//Kotlin code snippet for creating an abstract class
abstract class Animal(val name: String, var age: Int) { //creating an abstract class named Animal with two properties: name and age
    abstract fun makeSound() //an abstract function named makeSound, which must be implemented by all subclasses
    fun sleep() { //a non-abstract function named sleep
        println("$name is sleeping...") //printing the name of the animal and indicating that it is sleeping
    }
}

//Kotlin code snippet for creating a subclass of the abstract class Animal
class Dog(name: String, age: Int) : Animal(name, age) { //creating a subclass named Dog, which inherits from Animal and has two parameters: name and age
    override fun makeSound() { //implementing the makeSound function
        println("$name says woof!") //printing the name of the dog and indicating that it is making a woof sound
    }
}

//Kotlin code snippet for creating a subclass of the abstract class Animal
class Cat(name: String, age: Int) : Animal(name, age) { //creating a subclass named Cat, which inherits from Animal and has two parameters: name and age
    override fun makeSound() { //implementing the makeSound function
        println("$name says meow!") //printing the name of the cat and indicating that it is making a meow sound
    }
}

fun main() { //main function
    val dog = Dog("Max", 5) //creating an instance of Dog and passing in a name and age
    dog.makeSound() //calling the makeSound function for the dog instance, which will print "Max says woof!"
    dog.sleep() //calling the sleep function for the dog instance, which will print "Max is sleeping..."
    
    val cat = Cat("Luna", 3) //creating an instance of Cat and passing in a name and age
    cat.makeSound() //calling the makeSound function for the cat instance, which will print "Luna says meow!"
    cat.sleep() //calling the sleep function for the cat instance, which will print "Luna is sleeping..."
}