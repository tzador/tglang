class BinaryTree<T> (var root: TreeNode<T>?) {

    private var comparator: Comparator<T> ? = null

    constructor(rootValue: T) : this(TreeNode(rootValue, null, null)) {
    }

    fun add(nodeValue: T) {
        if (root == null) {
            root = TreeNode(nodeValue, null, null)
            return
        }

        addNode(nodeValue, root!!)
    }

    fun remove(nodeValue: T) {
        root = removeNode(nodeValue, root)
    }

    fun contains(nodeValue: T): Boolean {
        var currentNode = root
        while (currentNode != null) {
            if (currentNode.value == nodeValue) {
                return true
            }
            val comparison = comparator ?: throw NullPointerException("Comparator is null")
            currentNode = if (comparison.compare(nodeValue, currentNode.value) > 0) {
                currentNode.right
            } else {
                currentNode.left
            }
        }
        return false
    }


    private fun addNode(nodeValue: T, node: TreeNode<T>) {
        val comparison = comparator ?: throw NullPointerException("Comparator is null")
        if (comparison.compare(nodeValue, node.value) > 0) {
            if (node.right == null) {
                node.right = TreeNode(nodeValue, null, null)
            } else {
                addNode(nodeValue, node.right!!)
            }
        } else {
            if (node.left == null) {
                node.left = TreeNode(nodeValue, null, null)
            } else {
                addNode(nodeValue, node.left!!)
            }
        }
    }

    private fun removeNode(nodeValue: T, node: TreeNode<T>?): TreeNode<T>? {
        if (node == null) {
            return null
        }

        val comparison = comparator ?: throw NullPointerException("Comparator is null")
        when (comparison.compare(nodeValue, node.value)) {
            0 -> return removeCurrentNode(node)
            1 -> node.right = removeNode(nodeValue, node.right)
            -1 -> node.left = removeNode(nodeValue, node.left)
        }
        return node
    }

    private fun removeCurrentNode(node: TreeNode<T>): TreeNode<T>? {
        if (node.right == null && node.left == null) {
            return null
        }
        if (node.right == null) {
            return node.left
        }
        if (node.left == null) {
            return node.right
        }
        var currentNode = node.right

        while (currentNode?.left != null) {
            currentNode = currentNode.left
        }
        currentNode?.left = node.left
        return node.right
    }

    class TreeNode<T>(var value: T, var left: TreeNode<T>?, var right: TreeNode<T>?) {
        fun printTree() {
            var currentNode = this
            while (currentNode != null) {
                print("${currentNode.value} ")
                currentNode = currentNode.right
            }
        }
    }
}