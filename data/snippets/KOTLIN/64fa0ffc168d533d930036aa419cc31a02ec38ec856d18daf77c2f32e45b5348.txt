/**
* This is a complex code snippet written in Kotlin.
* It includes multiple functions and classes to demonstrate the various features of the language.
*/

// Creating a class named Person with properties name, age, and gender
class Person(var name: String, var age: Int, var gender: String) {

    // Creating a function to introduce the person
    fun introduce() {
        println("Hi! My name is $name, I am $age years old and I identify as $gender.")
    }

    // Creating a function to check if the person is an adult or not
    fun isAdult(): Boolean {
        return age >= 18
    }

    // Creating a companion object for the Person class
    companion object {
        // Static variable to hold the list of persons
        var personList = mutableListOf<Person>()

        // Function to add a person to the list
        fun addPerson(person: Person) {
            personList.add(person)
        }

        // Function to get the average age of all persons in the list
        fun getAverageAge(): Int {
            var totalAge = 0
            for (person in personList) {
                totalAge += person.age
            }
            return totalAge / personList.size
        }
    }
}

// Creating a function to find and print the oldest person in the list
fun printOldestPerson() {
    var oldestPerson: Person? = null
    for (person in Person.personList) {
        if (oldestPerson == null || person.age > oldestPerson.age) {
            oldestPerson = person
        }
    }
    println("The oldest person in the list is $oldestPerson.")
}

// Creating a person object with the name "John", age 23, and gender "Male"
val john = Person("John", 23, "Male")
// Calling the introduce function to print John's introduction
john.introduce()

// Adding John to the personList using the addPerson function
Person.addPerson(john)

// Creating another person object with the name "Mary", age 30, and gender "Female"
val mary = Person("Mary", 30, "Female")
// Adding Mary to the personList
Person.addPerson(mary)

// Calling the printOldestPerson function to print the oldest person in the list
printOldestPerson()

// Printing the average age of all persons in the list
println("The average age of all persons is ${Person.getAverageAge().toDouble()} years.")