// This code snippet demonstrates a function that calculates the factorial of a number using recursion

fun factorial(n: Int): Int {
    // Base case
    if (n == 0 || n == 1) {
        return 1
    }
    
    // Recursive case
    return n * factorial(n-1)
}

// Example usage
val factorialOfFive = factorial(5) // returns 120

// To include exception handling and input validation

fun safeFactorial(n: Int): Int {
    // Input validation
    if (n < 0) {
        throw IllegalArgumentException("Input cannot be negative")
    }
    
    // Base case
    if (n == 0 || n == 1) {
        return 1
    }
    
    // Recursive case
    return n * safeFactorial(n-1)
}

// Example usage
val factorialOfTen = safeFactorial(10) // returns 3628800

// To include tail recursion optimization

tailrec fun factorialTailRecursive(n: Int, accumulator: Int = 1): Int {
    // Input validation
    if (n < 0) {
        throw IllegalArgumentException("Input cannot be negative")
    }
    
    // Base case
    if (n == 0 || n == 1) {
        return accumulator
    }
    
    // Recursive case
    return factorialTailRecursive(n-1, accumulator * n)
}

// Example usage
val factorialOfTwenty = factorialTailRecursive(20) // returns 2432902008176640000