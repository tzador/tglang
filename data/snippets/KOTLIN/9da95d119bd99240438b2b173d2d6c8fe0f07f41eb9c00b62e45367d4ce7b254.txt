/**
 * This class represents a company and its employees.
 * @param name the name of the company
 */
class Company(private val name: String) {
    private var employees: MutableList<Employee> = mutableListOf()

    /**
     * Adds an employee to the company.
     * @param employee the employee to add
     */
    fun addEmployee(employee: Employee) {
        employees.add(employee)
    }

    /**
     * Removes an employee from the company.
     * @param employee the employee to remove
     */
    fun removeEmployee(employee: Employee) {
        employees.remove(employee)
    }

    /**
     * Returns the total salary budget for all employees in the company.
     * @return the total salary budget
     */
    fun getTotalSalaryBudget(): Double {
        var totalSalary = 0.0
        for (employee in employees) {
            totalSalary += employee.salary
        }
        return totalSalary
    }

    /**
     * Returns a list of employees in the company with a higher salary than the given threshold.
     * @param threshold the minimum salary threshold
     * @return a list of employees with a higher salary than the threshold
     */
    fun getEmployeesWithHighSalary(threshold: Double): List<Employee> {
        return employees.filter { it.salary > threshold }
    }
}

/**
 * This class represents an employee.
 * @param name the name of the employee
 * @param salary the salary of the employee
 */
class Employee(private val name: String, private val salary: Double) {

    /**
     * Increases the salary of the employee by the given percentage.
     * @param percentage the percentage to increase the salary by
     */
    fun increaseSalary(percentage: Double) {
        this.salary += this.salary * percentage / 100
    }
}

// Example usage:
// Create a company
val company = Company("Apple")

// Create employees
val employee1 = Employee("John Appleseed", 5000.0)
val employee2 = Employee("Jane Smith", 6000.0)
val employee3 = Employee("Bob Johnson", 8000.0)

// Add employees to the company
company.addEmployee(employee1)
company.addEmployee(employee2)
company.addEmployee(employee3)

// Increase salary of employee2 by 10%
employee2.increaseSalary(10.0)

// Get total salary budget of the company
val totalSalaryBudget = company.getTotalSalaryBudget()

// Get employees with salary higher than 7000
val employeesWithHighSalary = company.getEmployeesWithHighSalary(7000.0)