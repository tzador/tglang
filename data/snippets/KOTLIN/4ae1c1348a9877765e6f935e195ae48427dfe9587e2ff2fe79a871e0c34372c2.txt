// Kotlin code snippet for implementing a binary search tree

class BinarySearchTree<T : Comparable<T>> {
    // node class for storing data and left/right child nodes
    class Node(var value: T) {
        var left: Node? = null
        var right: Node? = null
    }

    // root node of tree
    var root: Node? = null

    // function to insert new node into tree
    fun insert(value: T) {
        // create new node with given value
        val newNode = Node(value)

        // if tree is empty, set new node as root
        if (root == null) {
            root = newNode
        } 
        else {
            // start at root
            var current = root
            var parent: Node? = null

            // loop until we find the correct position for the new node
            while (true) {
                // set parent node to current node
                parent = current

                // if new node value is less than current node value, go to left child
                if (value < current!!.value) {
                    current = parent?.left

                    // if left child is null, insert new node as left child of parent
                    if (current == null) {
                        parent?.left = newNode
                        return
                    }
                }
                // if new node value is greater than current node value, go to right child
                else if (value > current.value) {
                    current = parent?.right

                    // if right child is null, insert new tree as right child of parent
                    if (current == null) {
                        parent?.right = newNode
                        return
                    }
                }
                // if new node value is equal to current node value, do not insert and return
                else {
                    return
                }
            }
        }
    }
}