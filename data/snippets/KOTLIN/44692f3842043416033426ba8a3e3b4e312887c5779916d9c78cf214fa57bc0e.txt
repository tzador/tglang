/**
 * Function that calculates the factorial of a given number recursively.
 * @param number the number whose factorial is to be calculated
 * @return the factorial of the given number
 */
fun factorial(number: Int): Int {
    // base case
    if (number == 0 || number == 1) {
        return 1
    }
    
    // recursive case
    return number * factorial(number - 1)
}

/**
 * Function that calculates the sum of numbers in a given list recursively.
 * @param numbers the list of numbers to be summed
 * @return the sum of numbers in the given list
 */
fun sum(numbers: List<Int>): Int {
    // base case
    if (numbers.isEmpty()) {
        return 0
    }

    // recursive case
    return numbers[0] + sum(numbers.subList(1, numbers.size))
}

/**
 * Function that finds the nth Fibonacci number using recursion.
 * @param n the index of the Fibonacci number to be found
 * @return the nth Fibonacci number
 */
fun fibonacci(n: Int): Int {
    // base cases
    if (n == 0) {
        return 0
    }
    if (n == 1 || n == 2) {
        return 1
    }

    // recursive case
    return fibonacci(n - 1) + fibonacci(n - 2)
}

// main function
fun main() {
    val number = 5
    println("Factorial of $number is ${factorial(number)}")

    val numbers = listOf(1, 2, 3, 4, 5)
    println("Sum of numbers in $numbers is ${sum(numbers)}")

    val index = 8
    println("$index-th Fibonacci number is ${fibonacci(index)}")
}