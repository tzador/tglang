/**
 * This is a class for creating and modifying a binary search tree.
 * @param T the type of elements in the tree
 */
class BinarySearchTree<T : Comparable<T>> {
    
    /**
     * This is a nested class representing a node in the tree.
     * @property key the value of the node
     * @property left the left child of the node
     * @property right the right child of the node
     */
    class Node(var key: T) {
        var left: Node? = null
        var right: Node? = null
    }
    
    /**
     * This is the root node of the tree.
     */
    var root: Node? = null
    
    /**
     * This function adds a new node to the tree.
     * @param key the value of the new node
     */
    fun add(key: T) {
        root = addNode(key, root)
    }
    
    /**
     * This is a private helper function for adding a new node to the tree.
     * @param key the value of the new node
     * @param current the current node being evaluated
     * @return the updated current node with the new node added to the correct subtree
     */
    private fun addNode(key: T, current: Node?): Node {
        // if current node is empty, create a new node and assign it as the current node
        if (current == null) {
            return Node(key)
        }
        
        // if the new key is less than the current node's key, add it to the left subtree
        if (key < current.key) {
            current.left = addNode(key, current.left)
        }
        
        // if the new key is greater than the current node's key, add it to the right subtree
        if (key > current.key) {
            current.right = addNode(key, current.right)
        }
        
        // return the updated current node
        return current
    }
    
    /**
     * This function searches for a node with a given key in the tree.
     * @param key the value of the node to search for
     * @return true if the node is found, false if it is not found
     */
    fun search(key: T): Boolean {
        // start searching from the root node
        var current = root
        
        // traverse the tree until the current node is null
        while (current != null) {
            // if the key matches the current node's key, return true
            if (key == current.key) {
                return true
            }
            
            // if the key is less than current node's key, move to the left child
            if (key < current.key) {
                current = current.left
            } else { // if the key is greater than current node's key, move to the right child
                current = current.right
            }
        }
        
        // if the key is not found, return false
        return false
    }
    
    /**
     * This function deletes a node with a given key from the tree.
     * @param key the value of the node to be deleted
     * @return true if the node is deleted, false if it is not found
     */
    fun delete(key: T): Boolean {
        // start searching from the root node
        var current = root
        var parent: Node? = null
        
        // search for the node with the given key
        while (current != null && current.key != key) {
            parent = current
            if (key < current.key) {
                current = current.left
            } else {
                current = current.right
            }
        }
        
        // if the node is not found, return false
        if (current == null) {
            return false
        }
        // if the node has no children, simply delete it
        if (current.left == null && current.right == null) {
            if (current == root) {
                root = null
            } else if (parent?.left == current) {
                parent.left = null
            } else {
                parent?.right = null
            }
            return true
        }
        
        // if the node has only one child, replace it with its child
        if (current.left == null) {
            if (current == root) {
                root = current.right
            } else if (parent?.left == current) {
                parent.left = current.right
            } else {
                parent?.right = current.right
            }
            return true
        }
        if (current.right == null) {
            if (current == root) {
                root = current.left
            } else if (parent?.left == current) {
                parent.left = current.left
            } else {
                parent?.right = current.left
            }
            return true
        }
        
        // if the node has two children, find the successor and replace it with the node to be deleted
        // the successor is the minimum node in the right subtree
        val successor = findMin(current.right)
        current.key = successor.key
        
        // after replacing, delete the successor node
        delete(successor.key)
        
        return true
    }
    
    /**
     * This function finds the minimum node in a subtree.
     * @param node the root node of the subtree
     * @return the node with the minimum value in the subtree
     */
    private fun findMin(node: Node?): Node {
        var current = node
        var parent: Node? = null
        
        // traverse the left subtree until the leftmost node is found
        while (current?.left != null) {
            parent = current
            current = current.left
        }
        
        return current ?: throw IllegalStateException("Subtree is empty")
    }
    
    /**
     * This function performs an inorder traversal of the tree.
     * @param node the current node being evaluated
     * @param result the list of nodes in sorted order
     */
    private fun inorder(node: Node?, result: MutableList<T>) {
        if (node != null) {
            // inorder traversal: left subtree, current node, right subtree
            inorder(node.left, result)
            result.add(node.key)
            inorder(node.right, result)
        }
    }
    
    /**
     * This function returns a list of nodes in sorted order.
     * @return the list of nodes in sorted order
     */
    fun inorderTraversal(): List<T> {
        val result = mutableListOf<T>()
        inorder(root, result)
        return result
    }
}