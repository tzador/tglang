//This code snippet creates a generic class called "BinaryTree" which implements the "Comparable" interface
//and contains functions to insert and search for elements in a binary tree structure

class BinaryTree<T : Comparable<T>> {

    //internal class to represent the nodes in the binary tree
    private inner class Node(var value: T, var parent: Node? = null, var left: Node? = null, var right: Node? = null) : Comparable<Node> {

        //comparator function to compare two nodes based on their values
        override fun compareTo(other: Node): Int {
            return this.value.compareTo(other.value)
        }
    }

    //initializing the root node of the binary tree
    private var root: Node? = null

    //function to insert an element into the binary tree
    fun insert(value: T) {

        //if root node is empty, assign the inserted value as the root node
        if (root == null) {
            root = Node(value)
            return
        }

        //else, create a new node with the inserted value
        var newNode = Node(value)

        //starting from the root node, iterate through the tree to find the correct position for the new node
        var currentNode = root
        while (currentNode != null) {
            //if the inserted value is smaller than the value of the current node, move to the left subtree
            if (value < currentNode.value) {
                //if left subtree is empty, assign the new node as the left child of the current node
                if (currentNode.left == null) {
                    currentNode.left = newNode
                    newNode.parent = currentNode
                    return
                }
                //else, move to the left child and continue iteration
                else {
                    currentNode = currentNode.left
                }
            }
            //if the inserted value is larger than the value of the current node, move to the right subtree.
            else if (value > currentNode.value) {
                //if right subtree is empty, assign the new node as the right child of the current node
                if (currentNode.right == null) {
                    currentNode.right = newNode
                    newNode.parent = currentNode
                    return
                }
                //else, move to the right child and continue iteration
                else {
                    currentNode = currentNode.right
                }
            }
            //if the inserted value already exists in the tree, do not insert a duplicate value
            else {
                return
            }
        }
    }

    //function to search for an element in the binary tree
    fun search(value: T): Boolean {

        //if root node is empty, the tree is empty and the element cannot be found
        if (root == null) {
            return false
        }

        //starting from the root node, iterate through the tree to find the element.
        var currentNode = root
        while (currentNode != null) {
            //if the value of the current node is equal to the searched value, the element is found
            if (value == currentNode.value) {
                return true
            }
            //if the searched value is smaller than the value of the current node, move to the left subtree
            else if (value < currentNode.value) {
                currentNode = currentNode.left
            }
            //if the searched value is larger than the value of the current node, move to the right subtree
            else if (value > currentNode.value) {
                currentNode = currentNode.right
            }
        }
        //if the element is not found after traversing the tree, it does not exist in the tree
        return false
    }
}

//Example usage:

//create a new binary tree for strings
val tree = BinaryTree<String>()

//insert elements into the tree
tree.insert("kotlin")
tree.insert("java")
tree.insert("python")
tree.insert("c++")

//search for an existing element
tree.search("kotlin") //returns true

//search for a non-existing element
tree.search("javascript") //returns false