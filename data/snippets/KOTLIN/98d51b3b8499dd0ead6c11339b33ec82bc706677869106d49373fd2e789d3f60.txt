data class User(
    val name: String,
    val age: Int,
    val email: String,
    var isActive: Boolean
)

class UserManager {
    private val userList: MutableList<User> = mutableListOf()

    fun addUser(user: User) {
        userList.add(user)
    }

    fun removeUser(name: String) {
        val userToRemove = userList.find { it.name == name }
        userToRemove?.let {
            userList.remove(userToRemove)
        }
    }

    fun getUserByName(name: String): User? {
        return userList.find { it.name == name }
    }

    fun getUsersUnderAge(age: Int): List<User> {
        return userList.filter { it.age < age }
    }

    fun activateUser(name: String) {
        val userToActivate = userList.find { it.name == name }
        userToActivate?.let {
            userToActivate.isActive = true
        }
    }

    fun deactivateUser(name: String) {
        val userToDeactivate = userList.find { it.name == name }
        userToDeactivate?.let {
            userToDeactivate.isActive = false
        }
    }
}

fun main() {
    val user1 = User("John", 30, "john@gmail.com", true)
    val user2 = User("Mary", 25, "mary@gmail.com", true)
    val user3 = User("Bob", 40, "bob@gmail.com", false)

    val userManager = UserManager()
    userManager.addUser(user1)
    userManager.addUser(user2)
    userManager.addUser(user3)

    println(userManager.getUserByName("Mary"))
    // Output: User(name=Mary, age=25, email=mary@gmail.com, isActive=true)

    println(userManager.getUsersUnderAge(35))
    // Output: [User(name=Mary, age=25, email=mary@gmail.com, isActive=true)]

    userManager.deactivateUser("Bob")
    println(userManager.getUserByName("Bob"))
    // Output: User(name=Bob, age=40, email=bob@gmail.com, isActive=false)
}