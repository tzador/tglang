fun partitionHoare(array: IntArray, low: Int, high: Int): Int {
    val pivot = array[low + (high - low) / 2]
    var i = low
    var j = high
    while (true) {
        while (array[i] < pivot) i++
        while (array[j] > pivot) j--
        if (i >= j) return j
        val temp = array[i]
        array[i] = array[j]
        array[j] = temp
        i++
        j--
    }
}

fun quicksort(array: IntArray, low: Int = 0, high: Int = array.size - 1) {
    if (low < high) {
        val pivotIndex = partitionHoare(array, low, high)
        quicksort(array, low, pivotIndex)
        quicksort(array, pivotIndex + 1, high)
    }
}

fun main() {
    val array = intArrayOf(5, 3, 8, 1, 2, 9, 4, 7, 6)
    quicksort(array)
    println(array.contentToString())
}