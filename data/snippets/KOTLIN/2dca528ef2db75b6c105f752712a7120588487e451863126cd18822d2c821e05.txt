// Defining a function that calculates the factorial of a number
fun factorial(n: Int): Int {
    if (n == 0 || n == 1) { // Base cases
        return 1
    } else {
        var result = 1
        for (i in 2..n) {
            result *= i
        }
        return result
    }
}

// Implementation of a binary search algorithm on a sorted array
fun binarySearch(array: Array<Int>, target: Int): Int {
    var low = 0 // Starting index of the array
    var high = array.size - 1 // Ending index of the array
    while (low <= high) {
        val mid = (low + high) / 2 // Find the middle index
        if (array[mid] == target) { // If middle element is the target, return its index
            return mid
        } else if (target < array[mid]) { // If target is smaller, search the left half of the array
            high = mid - 1
        } else { // If target is larger, search the right half of the array
            low = mid + 1
        }
    }
    
    return -1 // If target is not found in the array, return -1
}

// Example usage of the functions
fun main() {
    val num = 5
    println("Factorial of $num = ${factorial(num)}") // Print the factorial of 5
    val array = arrayOf(1, 3, 5, 7, 9)
    val target = 7
    val result = binarySearch(array, target) // Search for 7 in the array
    if (result == -1) { // If target is not found, print an error message
        println("$target is not found in the array.")
    } else { // If target is found, print its index
        println("$target is found at index $result.")
    }
}