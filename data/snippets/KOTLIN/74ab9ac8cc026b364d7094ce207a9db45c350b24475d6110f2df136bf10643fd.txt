//This is a complex code snippet in KOTLIN

class Complex(val real: Double, val imaginary: Double) : Number(), Comparable<Complex> {

    val modulus = sqrt(real * real + imaginary * imaginary)

    val phase = atan2(imaginary, real)

    override fun compareTo(other: Complex) = modulus.compareTo(other.modulus)

    operator fun plus(other: Complex): Complex {
        return Complex(real + other.real, imaginary + other.imaginary)
    }

    operator fun times(other: Complex): Complex {
        return Complex(
                real * other.real - imaginary * other.imaginary,
                real * other.imaginary + imaginary * other.real)
    }

    operator fun unaryMinus() = Complex(-real, -imaginary)

    override fun toByte() = modulus.toByte()
    override fun toChar() = phase.toChar()
    override fun toShort() = real.toShort()
    override fun toInt() = imaginary.toInt()
    override fun toLong() = modulus.toLong()
    override fun toFloat() = phase.toFloat()
    override fun toDouble() = modulus.toDouble()

    override fun equals(other: Any?) = other is Complex
            && real == other.real
            && imaginary == other.imaginary

    override fun hashCode() = 31 * real.hashCode() + imaginary.hashCode()
}