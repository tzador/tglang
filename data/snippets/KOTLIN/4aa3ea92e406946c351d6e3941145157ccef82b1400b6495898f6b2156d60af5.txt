/**
 * A generic class that represents a binary tree
 * @param T The type of data stored in each node
 * @property data The data stored in the current node
 * @property left The left child node
 * @property right The right child node
 */
class BinaryTree<T>(var data: T, var left: BinaryTree<T>? = null, var right: BinaryTree<T>? = null) {

    /**
     * A function that performs an in-order traversal of the binary tree
     * @param node The root node of the binary tree
     */
    fun inorder(node: BinaryTree<T>?) {
        node?.let {
            inorder(node.left)
            println(node.data)
            inorder(node.right)
        }
    }

    /**
     * A function that performs a pre-order traversal of the binary tree
     * @param node The root node of the binary tree
     */
    fun preorder(node: BinaryTree<T>?) {
        node?.let {
            println(node.data)
            preorder(node.left)
            preorder(node.right)
        }
    }

    /**
     * A function that performs a post-order traversal of the binary tree
     * @param node The root node of the binary tree
     */
    fun postorder(node: BinaryTree<T>?) {
        node?.let {
            postorder(node.left)
            postorder(node.right)
            println(node.data)
        }
    }
}