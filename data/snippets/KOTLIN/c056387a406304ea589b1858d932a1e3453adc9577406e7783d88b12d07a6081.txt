// Define a generic class with two type parameters
class MyGenericClass<T, U>(private val t: T, private val u: U) {     
    // Define a function that returns a string based on the type of the parameters
    fun getTypeString(): String {         
        // Use the 'when' expression to perform different operations based on the type of the parameters        
        return when (t) {
            // If the first parameter is a String, return the length of the string
            is String -> "The length of the string is ${t.length}" 
            // If the first parameter is an Int, return the first parameter multiplied by the second parameter
            is Int -> "The product of the first and second parameter is ${t * u}"
            // If the first parameter is a Boolean, return the string "The first parameter is a boolean"
            is Boolean -> "The first parameter is a boolean"
            // If the first parameter is a List, return the size of the list
            is List<*> -> "The size of the list is ${t.size}"
            // If the type of the first parameter is not handled, return the string "Unknown type"
            else -> "Unknown type"
        }
    }     
}

fun main() {
    // Create an instance of MyGenericClass with a String and an Int as parameters
    val myClass = MyGenericClass("Hello", 5)
    
    // Call the getTypeString() function and print the output
    println(myClass.getTypeString()) // Output: The length of the string is 5
}

// Output: Annotated markdown code snippet: