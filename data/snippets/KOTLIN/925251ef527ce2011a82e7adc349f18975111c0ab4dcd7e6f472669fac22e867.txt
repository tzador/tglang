//Simple implementation of a Binary Search Tree in Kotlin

//Define a Node class to represent individual nodes in the tree
class Node(var value: Int) {
    var leftChild: Node? = null
    var rightChild: Node? = null
}

//Define a BST class to manage the tree
class BinarySearchTree {
    var root: Node? = null

    //Function to add a new node to the tree
    fun insert(value: Int) {
        //If tree is empty, create a root node
        if (root == null) {
            root = Node(value)
            return
        }

        //Otherwise, start at the root and traverse the tree to find the appropriate position for the new node
        var currentNode = root
        while (currentNode != null) {
            //If value is less than current node, go left
            if (value < currentNode.value) {
                //If left child is null, add new node as left child
                if (currentNode.leftChild == null) {
                    currentNode.leftChild = Node(value)
                    return
                }
                //Otherwise, move to left child and continue traversal
                else {
                    currentNode = currentNode.leftChild
                }
            }
            //If value is greater than or equal to current node, go right
            else {
                //If right child is null, add new node as right child
                if (currentNode.rightChild == null) {
                    currentNode.rightChild = Node(value)
                    return
                }
                //Otherwise, move to right child and continue traversal
                else {
                    currentNode = currentNode.rightChild
                }
            }
        }
    }

    //Function to search for a given value in the tree
    fun search(value: Int): Boolean {
        //Start at the root and traverse the tree until the value is found or all nodes have been visited
        var currentNode = root
        while (currentNode != null) {
            //If value is equal to current node, return true
            if (value == currentNode.value) {
                return true
            }
            //If value is less than current node, go left
            else if (value < currentNode.value) {
                currentNode = currentNode.leftChild
            }
            //If value is greater than current node, go right
            else {
                currentNode = currentNode.rightChild
            }
        }

        //If value is not found, return false
        return false
    }

    //Function to delete a node from the tree
    fun delete(value: Int) {
        //Find the node to be deleted and its parent in the tree
        var currentNode = root
        var parentNode: Node? = null
        while (currentNode != null) {
            //If value is equal to current node, we have found the node to be deleted
            if (value == currentNode.value) {
                break
            }
            //If value is less than current node, go left
            else if (value < currentNode.value) {
                parentNode = currentNode
                currentNode = currentNode.leftChild
            }
            //If value is greater than current node, go right
            else {
                parentNode = currentNode
                currentNode = currentNode.rightChild
            }
        }

        //If node is not found, return
        if (currentNode == null) {
            return
        }

        //If node to be deleted is a leaf node, simply remove it
        if (currentNode.leftChild == null && currentNode.rightChild == null) {
            //If it is the root node, set root to null
            if (currentNode == root) {
                root = null
            }
            //If it is a left child, set parent's left child to null
            else if (currentNode == parentNode?.leftChild) {
                parentNode.leftChild = null
            }
            //If it is a right child, set parent's right child to null
            else {
                parentNode!!.rightChild = null
            }
        }

        //If node to be deleted has one child, replace it with its child
        else if (currentNode.leftChild == null || currentNode.rightChild == null) {
            //If it is the root node, set root to its child
            if (currentNode == root) {
                root = currentNode.leftChild ?: currentNode.rightChild
            }
            //If it is a left child, set parent's left child to its child
            else if (currentNode == parentNode?.leftChild) {
                parentNode.leftChild = currentNode.leftChild ?: currentNode.rightChild
            }
            //If it is a right child, set parent's right child to its child
            else {
                parentNode!!.rightChild = currentNode.leftChild ?: currentNode.rightChild
            }
        }

        //If node to be deleted has two children, find the successor node and replace it with the deleted node
        else {
            //Find the successor node, which is the smallest node in the right subtree of the deleted node
            var successor: Node = currentNode.rightChild!!
            var successorParent: Node = currentNode
            while (successor.leftChild != null) {
                successorParent = successor
                successor = successor.leftChild!!
            }

            //Copy the value of the successor node to the deleted node
            currentNode.value = successor.value

            //If successor has a right child, set its parent's left child to the successor's right child
            if (successor.rightChild != null) {
                successorParent.leftChild = successor.rightChild
            }
            //Otherwise, set the successor's parent's left child to null
            else {
                successorParent.leftChild = null
            }
        }
    }

    //Function to print the tree in Preorder traversal
    fun printPreorder(node: Node?) {
        if (node != null) {
            print("${node.value} ") //Print current node
            printPreorder(node.leftChild) //Print left subtree
            printPreorder(node.rightChild) //Print right subtree
        }
    }

    //Function to print the tree in Inorder traversal
    fun printInorder(node: Node?) {
        if (node != null) {
            printInorder(node.leftChild) //Print left subtree
            print("${node.value} ") //Print current node
            printInorder(node.rightChild) //Print right subtree
        }
    }

    //Function to print the tree in Postorder traversal
    fun printPostorder(node: Node?) {
        if (node != null) {
            printPostorder(node.leftChild) //Print left subtree
            printPostorder(node.rightChild) //Print right subtree
            print("${node.value} ") //Print current node
        }
    }
}

//Example usage
fun main() {
    val tree = BinarySearchTree()
    
    //Insert nodes into the tree
    tree.insert(50)
    tree.insert(30)
    tree.insert(20)
    tree.insert(40)
    tree.insert(70)
    tree.insert(60)
    tree.insert(80)

    //Print the tree in Preorder, Inorder, and Postorder traversal
    print("Preorder: ")
    tree.printPreorder(tree.root)
    println()
    print("Inorder: ")
    tree.printInorder(tree.root)
    println()
    print("Postorder: ")
    tree.printPostorder(tree.root)
    println()

    //Search for a specific value in the tree
    val searchValue = 60
    if (tree.search(searchValue)) {
        println("Value $searchValue was found in the tree!")
    } else {
        println("Value $searchValue was not found in the tree.")
    }

    //Delete a node from the tree and print the new tree in Inorder traversal
    tree.delete(70)
    print("Inorder after deleting 70: ")
    tree.printInorder(tree.root)
}