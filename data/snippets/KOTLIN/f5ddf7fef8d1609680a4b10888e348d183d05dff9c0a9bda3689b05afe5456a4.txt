// This code snippet sorts an array of integers using the QuickSort algorithm

// Function to partition the array
fun partition(arr: IntArray, low: Int, high: Int): Int {
    
    // Get the pivot element (last element of the array)
    val pivot = arr[high]
    // Initialize the index of smaller element
    var i = low - 1
    
    // Loop through the array
    for (j in low until high) {
        
        // If current element is smaller than the pivot,
        // increment the index of smaller element
        if (arr[j] < pivot) {
            i++
            
            // Swap current element with the smaller element
            val temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
        }
    }
    
    // Swap the pivot element with the smaller element
    val temp = arr[i + 1]
    arr[i + 1] = arr[high]
    arr[high] = temp
    
    // Return the index of the pivot element
    return i + 1
}

// Function to implement QuickSort algorithm
fun quickSort(arr: IntArray, low: Int, high: Int) {
    if (low < high) {
        // Get the index of the pivot element
        val pivotIndex = partition(arr, low, high)
        
        // Recursively call QuickSort for the left and right subarrays
        quickSort(arr, low, pivotIndex - 1)
        quickSort(arr, pivotIndex + 1, high)
    }
}

fun main() {
    // Define an array of integers
    val arr = intArrayOf(13, 5, 8, 22, 3, 9, 4, 17, 11, 2)
    println("Unsorted array: ${arr.contentToString()}")
    
    // Call the QuickSort function
    quickSort(arr, 0, arr.size - 1)
    
    println("Sorted array: ${arr.contentToString()}")
}

// Output:
// Unsorted array: [13, 5, 8, 22, 3, 9, 4, 17, 11, 2]
// Sorted array: [2, 3, 4, 5, 8, 9, 11, 13, 17, 22]