/*
This code snippet generates a list of prime numbers within a specified range using the Sieve of Eratosthenes algorithm.
Input: starting and ending numbers of the range (inclusive)
Output: list of prime numbers within the specified range
*/

// function to generate list of prime numbers
fun generatePrimeList(start: Int, end: Int): List<Int> {

    // initialize a boolean array for each number within the range, with value true
    val primeArray = BooleanArray(end + 1) { true }

    // iterate from 2 (first prime number) to the square root of ending number
    for (i in 2..sqrt(end.toDouble()).toInt()) {

        // if current number is marked as prime (true)
        if (primeArray[i]) {

            // update multiples of current number to false
            for (j in i * i..end step i) {
                primeArray[j] = false
            }
        }
    }

    // create an empty list to store prime numbers
    val primeList = mutableListOf<Int>()

    // loop through the array and add all numbers marked as prime (true)
    for (i in start..end) {
        if (primeArray[i]) {
            primeList.add(i)
        }
    }

    // return the list of prime numbers within the specified range
    return primeList
} 

// sample function call to generate prime numbers between 1 and 100
println(generatePrimeList(1, 100))