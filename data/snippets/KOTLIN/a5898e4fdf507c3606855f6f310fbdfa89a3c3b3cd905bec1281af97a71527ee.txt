// Define a function that checks if a number is prime
fun isPrime(number: Int): Boolean {
    if (number <= 1) {
        return false // 1 and below are not considered primes
    }
    if (number == 2) {
        return true // 2 is the only even prime number
    }
    if (number % 2 == 0) {
        return false // all even numbers except 2 are not prime
    }
    var divisor = 3 // starting with 3, as all even numbers have already been checked
    while (divisor * divisor <= number) {
        if (number % divisor == 0) {
            return false // if a divisor divides evenly, number is not prime
        }
        divisor += 2 // only need to check odd divisors as even has already been checked
    }
    return true // if number has passed all checks, it is prime
}

// Generate a list of prime numbers up to a given maximum (inclusive)
fun generatePrimes(max: Int): List<Int> {
    val primes = mutableListOf<Int>() // initialise empty list to hold primes
    for (number in 2..max) {
        if (isPrime(number)) {
            primes.add(number) // add to list if isPrime returns true
        }
    }
    return primes
}

// Call the generatePrimes function and print the result
val primes = generatePrimes(100) // generates prime numbers up to 100
println(primes) // prints [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]