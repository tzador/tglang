class BinaryTree<T : Comparable<T>> {
    private var root: Node<T>? = null
    
    inner class Node<T>(value: T) {
        var data: T = value
        var left: Node<T>? = null
        var right: Node<T>? = null
        
        fun insert(value: T) {
            if (value < data) {
                if (left == null) {
                    left = Node(value)
                } else {
                    left?.insert(value)
                }
            } else if (value > data) {
                if (right == null) {
                    right = Node(value)
                } else {
                    right?.insert(value)
                }
            }
        }
    }
    
    fun insert(value: T) {
        if (root == null) {
            root = Node(value)
        } else {
            root?.insert(value)
        }
    }
    
    fun contains(value: T): Boolean {
        var current = root
        
        while (current != null) {
            if (current.data == value) {
                return true
            } else if (value < current.data) {
                current = current.left
            } else {
                current = current.right
            }
        }
        
        return false
    }
}