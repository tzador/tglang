// This code snippet uses a class, interfaces, functions, and loops to calculate the area of a circle.
class Circle(var radius: Double = 0.0) {
    companion object {
        // PI is a constant value in Kotlin
        const val PI: Double = 3.14159265359 
    }

    // Interface that defines the function to calculate the area of a circle
    interface Shape {
        fun calculateArea(): Double
    }

    // Function to calculate the area of a circle using the formula: area = PI * (radius * radius)
    fun calculateCircleArea(): Double {
        return PI * (radius * radius)
    }
}

// Here we create an instance of the Circle class with a given radius of 5.0
val circle = Circle(5.0)

// We use the Shape interface to call the calculateArea function on the circle
val area = circle.calculateArea()

println("The area of the circle is: $area")

// We can also use a for loop to calculate the areas of multiple circles
for (i in 1..10) {
    val newCircle = Circle(i.toDouble())
    val newArea = newCircle.calculateArea()

    println("The area of circle $i is: $newArea")
}