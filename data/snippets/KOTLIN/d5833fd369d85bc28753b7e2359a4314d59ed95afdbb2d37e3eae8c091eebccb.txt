/*
This is a multi-line comment in Kotlin.
*/

// This is a single-line comment

/** 
 * This is a documentation comment in Kotlin.
 * It can span multiple lines and is used to document code.
 */

// Declaring a class in Kotlin
class Person(val name: String, var age: Int) {

    // Declaring a property in Kotlin
    var occupation = "Unemployed"

    // Declaring a function in Kotlin
    fun greet() {
        println("Hello, my name is $name. I am $age years old and currently $occupation.")
    }
}

// Creating an instance of the Person class
val person = Person("John", 25)

// Calling the greet() function on the person instance
person.greet() // Output: Hello, my name is John. I am 25 years old and currently Unemployed.

// Using a conditional statement in Kotlin
if (person.age >= 18) {
    println("I am legally an adult.")
} else {
    println("I am still a minor.")
}

// Declaring a list in Kotlin
val fruits = listOf("apple", "banana", "orange")

// Using a loop to print each item in the list
for (fruit in fruits) {
    println("I love $fruit") 
}

// Declaring a higher-order function in Kotlin
fun doSomething(list: List<String>, action: (String) -> Unit) {
    for (item in list) {
        action(item)
    }
}

// Calling the higher-order function with an anonymous function as argument
doSomething(fruits) { fruit ->
    println("I have eaten a $fruit")
} // Output: I have eaten an apple, I have eaten a banana, I have eaten an orange

// Declaring a data class in Kotlin
data class Book(val title: String, val author: String, val year: Int)

// Creating a list of Book instances
val books = listOf(
    Book("To Kill a Mockingbird", "Harper Lee", 1960),
    Book("1984", "George Orwell", 1949),
    Book("The Great Gatsby", "F. Scott Fitzgerald", 1925)
)

// Using filter to find books published before 1950
val oldBooks = books.filter { book -> book.year < 1950 }

// Printing the titles of the old books
for (book in oldBooks) {
    println(book.title) // Output: To Kill a Mockingbird, The Great Gatsby
}

// Declaring an extension function in Kotlin
fun String.capitalizeFirstLetter(): String {
    return this.substring(0, 1).toUpperCase() + this.substring(1)
}

// Calling the extension function on a string
val name = "jane"
println(name.capitalizeFirstLetter()) // Output: Jane