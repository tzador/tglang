// This is an example of a function that takes in two parameters,
// an integer and a string, and returns a concatenated string
fun concatString(num: Int, str: String): String {
    // This is a variable declared and initialized inside the function
    var result = ""

    // This is a for loop that iterates through a range of numbers based on the input integer
    for (i in 1..num) {
        // This is concatenating the input string to the result variable
        result += str
    }

    // This is returning the final concatenated string
    return result
}

// This is an example of a when expression,
// which is similar to a switch statement in other languages
fun checkEvenOdd(num: Int): String {
    // This is checking if the input number is even or odd using the modulo operator
    return when (num % 2) {
        // These are the cases when the input number is even or odd
        0 -> "Even"
        else -> "Odd"
    }
}

// This is an example of higher-order function,
// which is a function that takes in another function as a parameter
fun higherOrderFunc(func: (Int) -> String) {
    // This is calling the given function passing in an integer
    val result = func(10)

    // This is printing out the result of the function call
    println(result)
}

// This is an example of a lambda expression,
// which is a special syntax for defining functions inline
val multiply: (Int, Int) -> Int = { num1, num2 -> num1 * num2 }

// This is a top-level variable declared outside of a function,
// similar to a global variable in other languages
val PI = 3.14

// This is an example of using the `isEmpty()` function,
// which checks if a string is empty or not
fun checkEmpty(str: String) {
    // This is using the `if` statement to check if the string is empty or not
    if (str.isEmpty()) {
        // This is printing out a message if the string is empty
        println("String is empty")
    } else {
        // This is printing out the string if it is not empty
        println(str)
    }
}

// This is an example of a try-catch block,
// used for handling potential errors or exceptions in code
fun divide(dividend: Int, divisor: Int) {
    try {
        // This is trying to divide the two numbers,
        // and if there is a potential error, it will be caught in the catch block
        val result = dividend / divisor

        // This is printing out the result if no error occurred
        println(result)
    } catch (e: ArithmeticException) {
        // This is catching the specific error that may occur if the divisor is 0
        // and printing out a message instead of crashing the program
        println("Cannot divide by 0")
    }
}

// This is an example of a data class,
// used for holding data and representing objects
data class Person(val name: String, val age: Int)

// This is an example of a singleton class,
// where only one instance of this class can exist
object MySingleton {
    // This is a function inside the singleton class
    fun printHello() {
        println("Hello")
    }

    // This is a variable inside the singleton class
    val num = 5
}

// This is an example of a class with a constructor,
// where the constructor takes in a name and age parameter
class Student(val name: String, var age: Int) {
    // This is an init block,
    // used for initializing properties or performing other actions on object creation
    init {
        // This is printing out a message with the student's name
        println("Student's name is $name")
    }

    // This is a function inside the Student class,
    // used for increasing the student's age by 1
    fun celebrateBirthday() {
        // This is incrementing the age by 1
        age++
    }
}

// This is an example of a main function,
// the entry point of a Kotlin program
fun main() {
    // This is a variable declared and initialized outside of a function
    val name = "John"

    // This is calling the `concatString` function passing in an integer and a string,
    // and storing the returned string in a variable
    val result = concatString(5, "Hello ")

    // This is printing out the result of the concatenated string
    println(result)

    // This is calling the `checkEvenOdd` function passing in an integer,
    // and storing the returned string in a variable
    val evenOrOdd = checkEvenOdd(10)

    // This is printing out the result of the even or odd check
    println(evenOrOdd)

    // This is calling the `higherOrderFunc` function passing in a lambda expression as a parameter
    higherOrderFunc { num -> "The number is $num" }

    // This is calling the `multiply` lambda expression passing in two integers,
    // and storing the returned result in a variable
    val multiplied = multiply(5, 10)

    // This is printing out the result of the multiplication
    println(multiplied)

    // This is printing out the value of `PI`
    println(PI)

    // This is calling the `checkEmpty` function passing in an empty string,
    // which will print out a message saying the string is empty
    checkEmpty("")

    // This is calling the `divide` function passing in two integers,
    // the second one being 0, which will catch an exception and print out a message instead
    divide(10, 0)

    // This is creating a new instance of the `Person` class,
    // passing in a name and age parameter
    val person = Person("Sarah", 25)

    // This is printing out the person's name and age using the `toString()` method
    println(person.toString())

    // This is calling the `printHello()` function inside the `MySingleton` class
    MySingleton.printHello()

    // This is creating a new instance of the `Student` class,
    // passing in a name and age parameter
    val student = Student("Mike", 21)

    // This is printing out the student's name
    println(student.name)

    // This is printing out the student's age before calling the `celebrateBirthday()` function
    println(student.age)

    // This is calling the `celebrateBirthday()` function,
    // which will increase the student's age by 1
    student.celebrateBirthday()

    // This is printing out the student's age after calling the function,
    // showing that it has increased by 1
    println(student.age)
}