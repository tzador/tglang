// A class representing a person with name and age properties
class Person(val name: String, var age: Int) {
  // A function to increase the age property by a given number
  fun increaseAge(by: Int): Unit {
    this.age += by // Using the 'this' keyword to refer to the age property of the current instance
  }
  
  // An inner class representing a hobby with a name and description properties
  inner class Hobby(val name: String, var description: String) {
    // A function to change the description property
    fun changeDescription(newDescription: String): Unit {
      this.description = newDescription // Using the 'this' keyword to refer to the description property of the current instance
    }
  }
}

// Creating an instance of the Person class with name "John" and age 25
val john = Person("John", 25)

// Creating an instance of the Hobby class inside the john instance
val johnHobby = john.Hobby("Gardening", "Spending time in the garden and growing plants")

// Calling the increaseAge function on the john instance, increasing his age by 5
john.increaseAge(5)

// Changing the description of John's hobby to "Growing vegetables in his backyard"
johnHobby.changeDescription("Growing vegetables in his backyard")

// Printing out the updated age and hobby description of John
println("John's age is now ${john.age} and his hobby is ${johnHobby.name}: ${johnHobby.description}")