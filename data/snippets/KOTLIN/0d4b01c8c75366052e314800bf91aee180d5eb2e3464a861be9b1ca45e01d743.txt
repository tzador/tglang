class BinaryTree<T : Comparable<T>> {
    class Node(value: T) {
        var value: T = value
        var left: Node? = null
        var right: Node? = null
    }

    var root: Node? = null

    fun insert(value: T) {
        // if empty tree, set root as new node
        if (root == null) {
            root = Node(value)
            return
        }

        // create a new node with given value
        var newNode: Node = Node(value)
        var current: Node? = root
        var parent: Node? = null

        while (true) {
            parent = current
            // if value is less than current node's value, go left
            if (value < current!!.value) {
                // set current as left child if left child is empty
                if (current.left == null) {
                    current.left = newNode
                    return
                }
                // move current to its left child
                current = current.left
            } else {
                // if value is greater than current node's value, go right
                // set current as right child if right child is empty
                if (current.right == null) {
                    current.right = newNode
                    return
                }
                // move current to its right child
                current = current.right
            }
        }
    }

    fun find(value: T): Boolean {
        var current: Node? = root

        while (current != null) {
            // if value is found, return true
            if (current.value == value) {
                return true
            } else if (value < current.value) {
                // if value is less than current node's value, go left
                current = current.left
            } else {
                // if value is greater than current node's value, go right
                current = current.right
            }
        }
        // if value is not found, return false
        return false
    }

    fun print() {
        printTree(root)
    }

    // prints the tree using pre-order traversal
    fun printTree(node: Node?) {
        if (node != null) {
            print("${node.value} ")
            printTree(node.left)
            printTree(node.right)
        }
    }
}

fun main(args: Array<String>) {
    val tree = BinaryTree<Int>()
    tree.insert(5)
    tree.insert(2)
    tree.insert(8)
    tree.insert(1)
    tree.insert(3)
    tree.insert(7)
    tree.insert(9)
    tree.print() // output: 5 2 1 3 8 7 9
    println()
    println(tree.find(3)) // output: true
    println(tree.find(6)) // output: false
}