// Define an Abstract Class
abstract class Animal(val name: String, var age: Int) {
    // Abstract method
    abstract fun makeSound()
    
    // Non-Abstract method
    fun eat(food: String) {
        println("$name is eating $food")
    }
    
    // Override toString method
    override fun toString(): String {
        return "Name: $name, Age: $age"
    }
}

// Define a Subclass
class Dog(name: String, age: Int, val breed: String) : Animal(name, age) {
    // Override makeSound method
    override fun makeSound() {
        println("$name is barking")
    }
    
    // Add a new method
    fun fetch(item: String) {
        println("$name is fetching $item")
    }
}

// Define a Subclass
class Cat(name: String, age: Int, val color: String) : Animal(name, age) {
    // Override makeSound method
    override fun makeSound() {
        println("$name is meowing")
    }
    
    // Add a new method
    fun scratch(item: String) {
        println("$name is scratching $item")
    }
}

// Create instances of the subclasses
val dog = Dog("Rex", 5, "Labrador Retriever")
val cat = Cat("Whiskers", 3, "Orange")

// Call methods on the instances
dog.makeSound() // Output: Rex is barking
dog.eat("bones") // Output: Rex is eating bones
dog.fetch("ball") // Output: Rex is fetching ball
println(dog.toString()) // Output: Name: Rex, Age: 5, Breed: Labrador Retriever
cat.makeSound() // Output: Whiskers is meowing
cat.eat("fish") // Output: Whiskers is eating fish
cat.scratch("couch") // Output: Whiskers is scratching couch
println(cat.toString()) // Output: Name: Whiskers, Age: 3, Color: Orange