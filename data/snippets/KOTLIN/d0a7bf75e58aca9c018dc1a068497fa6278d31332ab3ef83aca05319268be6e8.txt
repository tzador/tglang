// This is a variable that stores a list of integer values
val numbers: List<Int> = listOf(1, 2, 3, 4, 5)

// This is a function that takes in a list of integers and a lambda expression, and returns a new list
fun filterNumbers(list: List<Int>, predicate: (Int) -> Boolean): List<Int> {
    var filteredList = mutableListOf<Int>()
    for (number in list) {
        if (predicate(number)) {
            filteredList.add(number)
        }
    }
    return filteredList
}

// This is an example of calling the filterNumbers function and providing a predicate using a lambda expression
val evenNumbers = filterNumbers(numbers) { number ->
    number % 2 == 0 // checks if the number is even
}

// This is a class that represents a car
class Car(val model: String, var color: String) {

    // This is a function that changes the color of the car
    fun paintCar(newColor: String) {
        color = newColor
    }
}

// This is an instance of the Car class
val myCar = Car("Toyota", "blue")

// This is an example of calling the paintCar function on the instance of the Car class
myCar.paintCar("red")

// This is a print statement using string concatenation
println("My " + myCar.color + " " + myCar.model + " just got a fresh coat of paint!")

// This is a try-catch block for handling exceptions
try {
    // Code that could potentially throw an exception
    val result = 10 / 0
} catch (e: ArithmeticException) {
    // Code to handle the specific exception
    println("Oops, something went wrong. Error message: " + e.message)
}

// This is a higher-order function that takes in a function as a parameter
fun performOperation(x: Int, y: Int, operation: (Int, Int) -> Int): Int {
    return operation(x, y)
}

// This is an example of calling the performOperation function and passing in a lambda expression as the operation parameter
val sum = performOperation(4, 6) { x, y ->
    x + y // returns the sum of x and y
}

// This is a print statement using string interpolation
println("The sum of 4 and 6 is $sum.")