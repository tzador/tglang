<!-- This is a data class with a nested sealed class inside. -->
data class User(
    val name: String,
    val age: Int
) {
    /** This is a helper function that converts an integer to its corresponding Roman numeral. */
    val romanNumeral: String
        get() {
            var n = age
            val romanValues = mapOf(
                1000 to "M",
                900 to "CM",
                500 to "D",
                400 to "CD",
                100 to "C",
                90 to "XC",
                50 to "L",
                40 to "XL",
                10 to "X",
                9 to "IX",
                5 to "V",
                4 to "IV",
                1 to "I"
            )
            var result = ""
            for ((value, symbol) in romanValues) {
                while (n >= value) {
                    result += symbol
                    n -= value
                }
            }
            return result
        }

    /** This is a sealed class representing different types of User accounts. */
    sealed class Account {
        /** This is a data class representing a Standard account. */
        data class Standard(val balance: Double) : Account()
        
        /** This is an object singleton representing a Premium account. */
        object Premium : Account()
    }
}