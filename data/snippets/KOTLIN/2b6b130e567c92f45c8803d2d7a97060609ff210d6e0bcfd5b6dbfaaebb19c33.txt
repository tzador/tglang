// Defining an abstract class named "Shape"
abstract class Shape {
    // Properties of a shape class
    abstract val area: Double
    abstract val perimeter: Double
    
    // Method to calculate total sides
    abstract fun calculateSides(): Int
}

// Creating a Triangle class that inherits from Shape class
class Triangle(
    // Constructor parameters
    val sideA: Double,
    val sideB: Double,
    val sideC: Double
) : Shape() {
    // Overriding the properties of Shape class
    override val area: Double
        get() {
            val s = (sideA + sideB + sideC) / 2.0
            return kotlin.math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))
        }
    
    override val perimeter: Double
        get() {
            return sideA + sideB + sideC
        }
        
    // Overriding the method to calculate total sides
    override fun calculateSides(): Int {
        return 3
    }
}

// Creating a Circle class that inherits from Shape class
class Circle(
    // Constructor parameters
    val radius: Double
) : Shape() {
    // Overriding the properties of Shape class
    override val area: Double
        get() {
            return kotlin.math.PI * radius * radius
        }
    
    override val perimeter: Double
        get() {
            return 2 * kotlin.math.PI * radius
        }
    
    // Overriding the method to calculate total sides
    override fun calculateSides(): Int {
        return 0
    }
}

fun main() {
    // Creating a Triangle object and printing its properties
    val triangle = Triangle(3.0, 4.0, 5.0)
    println("Triangle area: ${triangle.area}")
    println("Triangle perimeter: ${triangle.perimeter}")
    println("Total sides: ${triangle.calculateSides()}")
    
    // Creating a Circle object and printing its properties
    val circle = Circle(5.0)
    println("Circle area: ${circle.area}")
    println("Circle perimeter: ${circle.perimeter}")
    println("Total sides: ${circle.calculateSides()}")
}