// Creating a generic class with multiple type parameters
class MyGenericClass<T, U> {
    // Initializing private properties for type T and U
    private val propertyT: T
    private val propertyU: U
    
    // Constructor that takes in parameters of type T and U
    constructor(t: T, u: U) {
        this.propertyT = t
        this.propertyU = u
    }
    
    // Function that returns a list of type T
    fun getListT(): List<T> {
        return listOf(this.propertyT)
    }
    
    // Function that returns a list of type U
    fun getListU(): List<U> {
        return listOf(this.propertyU)
    }
}

// Creating an instance of MyGenericClass with type parameters Int and String
val myInstance = MyGenericClass<Int, String>(123, "Hello World")

// Printing the list of type T from myInstance
println(myInstance.getListT())

// Printing the list of type U from myInstance
println(myInstance.getListU())