class Graph<V> (private var vertices: ArrayList<V>, private var edges: ArrayList<ArrayList<Int>>) {
   //Declare properties
   private var numVertices = 0
   private var numEdges = 0
   private var edgesArray = IntArray(0)
   
   //Initialize graph
   init {
       numVertices = vertices.size
       numEdges = edges.size
       for (i in 0 until numEdges) {
           edgesArray[i] = edges[i].size
       }
   }
   
   //Check if given vertex is in the graph
   fun hasVertex(vertex: V): Boolean {
       //Use built-in contains() function
       return vertices.contains(vertex)
   }
   
   //Check if there is an edge between given vertices
   fun hasEdge(fromVertex: V, toVertex: V): Boolean {
       //Get index of "from" vertex
       val fromIndex = vertices.indexOf(fromVertex)
       //Get index of "to" vertex
       val toIndex = vertices.indexOf(toVertex)
       
       //Check if both vertices exist in graph and if there is an edge between them
       if (fromIndex != -1 && toIndex != -1 && edges[fromIndex].contains(toIndex)) {
           return true
       }
       return false
   }
   
   //Add vertex to graph
   fun addVertex(vertex: V) {
       //Check if graph already contains vertex
       if (!hasVertex(vertex)) {
           //Add vertex to list
           vertices.add(vertex)
           //Update number of vertices
           numVertices += 1
           
           //Initialize new edge list for added vertex
           val newEdges = ArrayList<Int>()
           //Add 0 as default weight to new edge list for all existing vertices
           for (i in 0 until numVertices-1) {
               newEdges.add(0)
           }
           //Add new edge list to edges list
           edges.add(newEdges)
           //Update number of edges
           numEdges += 1
           
           //Add 0 as default weight for new vertex to all existing edge lists
           for (i in 0 until numVertices-1) {
               edges[i].add(0)
           }
           
           //Expand edges array size
           edgesArray = IntArray(numEdges)
           //Update edge list sizes in edges array
           for (i in 0 until numEdges) {
               edgesArray[i] = edges[i].size
           }
       }
   }
   
   //Add edge between two given vertices
   fun addEdge(fromVertex: V, toVertex: V, weight: Int) {
       //Get indexes of vertices
       val fromIndex = vertices.indexOf(fromVertex)
       val toIndex = vertices.indexOf(toVertex)
       
       //Check if both vertices exist in graph and if there is already an edge between them
       if (fromIndex != -1 && toIndex != -1 && !edges[fromIndex].contains(toIndex)) {
           //Update weight of edge in edge list
           edges[fromIndex][toIndex] = weight
       }
   }
}