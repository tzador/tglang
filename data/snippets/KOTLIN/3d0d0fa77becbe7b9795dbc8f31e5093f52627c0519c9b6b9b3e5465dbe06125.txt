//This code is defining a function with a generic type and annotations
fun <T> printList(list: List<T>) {
    //we use the forEach method to iterate through the list and print out the elements
    list.forEach { element ->
        //we use the `when` expression to check the type of the generic element
        when (element) {
            is String -> println("This is a String: $element")
            is Int -> println("This is an Int: $element")
            is Boolean -> println("This is a Boolean: $element")
            else -> println("Unknown type")
        }
    }
}

//Example of using the function with different types of lists
val stringList = listOf("Hello", "World", "Kotlin")
printList(stringList) //Output: This is a String: Hello
                      //        This is a String: World
                      //        This is a String: Kotlin

val intList = listOf(1, 2, 3)
printList(intList) //Output: This is an Int: 1
                   //        This is an Int: 2
                   //        This is an Int: 3

val mixedList = listOf("Hello", 2, true)
printList(mixedList) //Output: This is a String: Hello
                     //        This is an Int: 2
                     //        This is a Boolean: true
                     
//The code above showcases the use of generics and the `when` expression in Kotlin.
//The function `printList` takes in a list with a generic type `T`.
//Using a `forEach` loop, it iterates through each element in the list and uses the `when` expression to check its type.
//The output is then printed depending on the type of the element.
//This allows for flexible use of the function with different types of lists.