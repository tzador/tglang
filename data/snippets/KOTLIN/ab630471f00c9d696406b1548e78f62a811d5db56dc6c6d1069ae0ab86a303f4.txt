// Function to find the intersection of two arrays
fun intersect(firstArray: Array<Int>, secondArray: Array<Int>): Array<Int> {
    // Create a map to store the elements and their count from the first array
    val firstMap = mutableMapOf<Int,Int>()
    
    // Loop through the first array and update map with element and its count
    for (num in firstArray) {
        if (firstMap.containsKey(num)) {
            firstMap[num] = firstMap.getValue(num) + 1
        } else {
            firstMap[num] = 1
        }
    }
    
    // Create a list to store intersecting elements
    val intersectionList = mutableListOf<Int>()
    
    // Loop through the second array
    for (num in secondArray) {
        // If element exists in map, add it to the intersection list
        if (firstMap.containsKey(num)) {
            intersectionList.add(num)
            
            // Update the count in map by subtracting 1
            if (firstMap.getValue(num) > 1) {
                firstMap[num] = firstMap.getValue(num) - 1
            } else {
                firstMap.remove(num)
            }
        }
    }
    
    // Convert list to array and return
    return intersectionList.toTypedArray()
}

// Example usage
val array1 = arrayOf(1, 2, 2, 3, 4, 5, 6)
val array2 = arrayOf(2, 2, 4, 5)

val intersection = intersect(array1, array2)  // [2, 2, 4, 5]