// Annotated with documentation comments
/**
* This function takes in an integer and returns its factorial value.
* Time complexity: O(n)
* Space complexity: O(1)
*
* @param n an integer
* @return the factorial of n
*/
fun getFactorial(n: Int): Int {
  var factorial = 1
  // Looping from 1 to n and multiplying each number to get the factorial
  for (i in 1..n) {
    factorial *= i
  }
  return factorial
}

// Annotated with type annotations
/**
* This function takes in a string and an integer and returns a new string that repeats the original string n times
*
* @param string the string to be repeated
* @param n the number of times to repeat the string
* @return a new string that repeats the original string n times
*/
fun repeatString(string: String, n: Int): String {
  var repeatedString = ""
  // Looping n times and appending the original string to the repeatedString
  for (i in 1..n) {
    repeatedString += string
  }
  return repeatedString
}

// Annotated with generics
/**
* This function takes in a list of any type and returns the maximum value in the list
*
* @param list a list of generic type T
* @return the maximum value in the list
*/
fun <T : Comparable<T>> getMaxValue(list: List<T>): T? {
  // Check if the list is empty and return null if so
  if (list.isEmpty()) {
    return null
  }

  var maxValue = list[0]
  // Loop through the list and compare each element to the current max value
  for (element in list) {
    if (element > maxValue) {
      maxValue = element
    }
  }

  return maxValue
}