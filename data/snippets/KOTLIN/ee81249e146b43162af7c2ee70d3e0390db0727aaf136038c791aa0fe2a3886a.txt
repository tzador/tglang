// This is a function that sorts a list of integers in ascending order using the QuickSort algorithm
fun quickSort(list: List<Int>, start: Int, end: Int) {
    if (start >= end) return // base case

    // choose pivot element
    val pivot = list[(start + end) / 2]

    // partition the list based on pivot element
    var i = start
    var j = end
    while (i <= j) {
        while (list[i] < pivot) i++
        while (list[j] > pivot) j--
        if (i <= j) {
            // swap elements at i and j indices
            val temp = list[i]
            list[i] = list[j]
            list[j] = temp
            i++
            j--
        }
    }

    // recursively call quickSort on left and right sublists
    quickSort(list, start, j)
    quickSort(list, i, end)
}

// example usage
val list = listOf(5, 2, 8, 1, 9, 3)
quickSort(list, 0, list.size - 1)
println(list) // prints [1, 2, 3, 5, 8, 9]