/**
 * A class representing a bank account with various functionalities
 *
 * @param accountNumber The unique account number of the bank account
 * @param accountHolderName The name of the account holder
 * @param balance The current balance in the account
 * @property accountNumber The unique account number of the bank account
 * @property accountHolderName The name of the account holder
 * @property balance The current balance in the account
 */
class BankAccount(
    private var accountNumber: String,
    private var accountHolderName: String,
    private var balance: Double
) {

    /**
     * Deposits a given amount into the account
     *
     * @param amount The amount to be deposited
     */
    fun deposit(amount: Double) {
        balance += amount
        println("Deposit of \$$amount successful.")
    }

    /**
     * Withdraws a given amount from the account if sufficient balance is available
     *
     * @param amount The amount to be withdrawn
     */
    fun withdraw(amount: Double) {
        if (balance >= amount) {
            balance -= amount
            println("Withdrawal of \$$amount successful.")
        } else {
            println("Not enough balance.")
        }
    }

    /**
     * Returns the current balance in the account
     */
    fun getBalance(): Double {
        return balance
    }

    /**
     * Transfers a given amount from one bank account to another if sufficient balance is available
     *
     * @param amount The amount to be transferred
     * @param destination The bank account to which the amount is to be transferred
     */
    fun transfer(amount: Double, destination: BankAccount) {
        if (balance >= amount) {
            balance -= amount
            destination.deposit(amount)
            println("Transfer of \$$amount successful.")
        } else {
            println("Not enough balance.")
        }
    }

    /**
     * Updates the account holder's name
     *
     * @param newName The new name of the account holder
     */
    fun updateAccountHolderName(newName: String) {
        accountHolderName = newName
    }

    /**
     * Updates the account number
     *
     * @param newNumber The new account number to be assigned
     */
    fun updateAccountNumber(newNumber: String) {
        accountNumber = newNumber
    }
}

/**
 * A function that displays the account details
 *
 * @param account The bank account whose details are to be displayed
 */
fun displayAccountDetails(account: BankAccount) {
    println("Account Number: ${account.accountNumber}")
    println("Account Holder Name: ${account.accountHolderName}")
    println("Balance: \${${account.balance}}")
}

fun main() {
    val account1 = BankAccount("1234567890", "John Doe", 500.00)
    val account2 = BankAccount("0987654321", "Jane Smith", 1000.00)

    displayAccountDetails(account1)
    displayAccountDetails(account2)
    println()

    account1.deposit(100.00)
    account2.transfer(200.00, account1)
    displayAccountDetails(account1)
    displayAccountDetails(account2)
    println()

    account2.withdraw(300.00)
    account1.updateAccountHolderName("John Smith")
    account2.updateAccountNumber("1234567890")
    displayAccountDetails(account1)
    displayAccountDetails(account2)
}