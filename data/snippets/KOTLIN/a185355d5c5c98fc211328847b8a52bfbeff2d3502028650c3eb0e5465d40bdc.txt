// This code snippet shows a simple linked list implementation with a few methods

class Node<T>(var value: T, var next: Node<T>? = null)

class LinkedList<T> {
    private var head: Node<T>? = null
    private var size = 0

    fun size(): Int {
        return size
    }

    fun isEmpty(): Boolean {
        return size == 0
    }

    fun append(value: T) {
        if (isEmpty()) {
            head = Node(value)
        } else {
            var current = head
            while (current?.next != null) {
                current = current.next
            }
            current?.next = Node(value)
        }
        size++
    }

    fun insert(value: T, index: Int) {
        if (index < 0 || index > size) {
            throw IndexOutOfBoundsException()
        }
        if (isEmpty()) {
            head = Node(value)
        } else {
            var current = head
            for (i in 0 until index - 1) {
                current = current?.next
            }
            current?.next = Node(value, current?.next)
        }
        size++
    }

    fun remove(index: Int) {
        if (index < 0 || index >= size) {
            throw IndexOutOfBoundsException()
        }
        if (isEmpty()) {
            throw NoSuchElementException()
        } else if (index == 0) {
            head = head?.next
        } else {
            var current = head
            for (i in 0 until index - 1) {
                current = current?.next
            }
            current?.next = current?.next?.next
        }
        size--
    }

    fun printList() {
        var current = head
        while (current != null) {
            print(current.value.toString() + " ")
            current = current.next
        }
    }
}

fun main(args: Array<String>) {
    val list = LinkedList<String>()
    list.append("Hello")
    list.append(", ")
    list.append("World!")
    list.insert("Kotlin", 1)
    list.printList()
    // Output: Hello Kotlin, World!
}