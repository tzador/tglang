// This is a complex code snippet in Kotlin that implements the quicksort algorithm for sorting arrays.
/* The quicksort algorithm repeatedly divides a given array into two subarrays based on a chosen pivot element, 
reordering the elements around the pivot such that all the elements in the left subarray are smaller than the pivot, 
and all the elements in the right subarray are greater than or equal to the pivot. 
The process is then repeated recursively until the entire array is sorted.
*/

// Function that implements the quicksort algorithm
fun quicksort(array: IntArray, low: Int, high: Int) {
    if (low < high) {
        val pivot = array[high] // choosing the pivot element as the last element in the array
        var i = low - 1 // index of smaller element

        // loop through the array, moving all elements smaller than the pivot to the left subarray and larger elements to the right subarray
        for (j in low until high) {
            if (array[j] < pivot) {
                i++
                val temp = array[i]
                array[i] = array[j]
                array[j] = temp
            }
        }

        // place the pivot element in its correct position by swapping it with the first element in the right subarray
        val temp = array[i + 1]
        array[i + 1] = array[high]
        array[high] = temp

        // recursively sort the left and right subarrays
        quicksort(array, low, i) 
        quicksort(array, i + 2, high)
    }
}

// example array to sort
val array = intArrayOf(10, 7, 3, 8, 1, 4, 5)

// call quicksort function on the array, with the first index being 0 and the last index being the length of the array - 1
quicksort(array, 0, array.size - 1)

// print the sorted array
println("Sorted array: ${array.contentToString()}")