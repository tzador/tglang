/**
     * This class represents a binary tree Node.
     * @param value the value stored in the Node
     * @param leftChild the left child of the Node
     * @param rightChild the right child of the Node
     */
    class Node<T>(val value: T, var leftChild: Node<T>?, var rightChild: Node<T>?) {
        
        /**
         * This function inserts a new Node into the binary tree.
         * @param node the Node to be inserted
         * @return the Node that was inserted
         */
        fun insert(node: Node<T>): Node<T> {
            if (node.value < value) {
                // insert into left subtree
                if (leftChild == null) {
                    leftChild = node
                } else {
                    leftChild!!.insert(node)
                }
            } else {
                // insert into right subtree
                if (rightChild == null) {
                    rightChild = node
                } else {
                    rightChild!!.insert(node)
                }
            }
            return node
        }

        /**
         * This function checks if a given Node exists in the binary tree.
         * @param node the Node to be searched for
         * @return true if the Node exists, false if it doesn't
         */
        fun contains(node: Node<T>): Boolean {
            return when {
                node.value < value -> leftChild?.contains(node) ?: false
                node.value > value -> rightChild?.contains(node) ?: false
                else -> true
            }
        }

        /**
         * This function deletes a given Node in the binary tree.
         * @param node the Node to be deleted
         * @return the deleted Node or null if it doesn't exist
         */
        fun delete(node: Node<T>): Node<T>? {
            if (node.value < value) {
                // delete from left subtree
                leftChild?.let {
                    if (it.value == node.value) {
                        leftChild = null
                        return it
                    }
                }
                return leftChild?.delete(node)
            } else {
                // delete from right subtree
                rightChild?.let {
                    if (it.value == node.value) {
                        rightChild = null
                        return it
                    }
                }
                return rightChild?.delete(node)
            }
        }
    }

    // Example usage:
    
    // Initialize a binary tree with Node(5) as the root
    val root = Node(5, null, null)

    // Insert new Nodes
    root.insert(Node(3, null, null))
    root.insert(Node(7, null, null))
    root.insert(Node(2, null, null))
    root.insert(Node(1, null, null))
    root.insert(Node(6, null, null))

    // Check if Node(6) exists in the tree
    val exists = root.contains(Node(6)) // returns true

    // Delete Node(3) from the tree
    root.delete(Node(3)) // returns the deleted Node(3)