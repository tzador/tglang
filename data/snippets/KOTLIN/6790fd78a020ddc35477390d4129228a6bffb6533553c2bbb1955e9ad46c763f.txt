fun quicksort(list: Array<Int>, l: Int, r: Int) {
    if (l < r) { //Checking if left index is smaller than right index
        val pivot = list[r] //Setting the pivot as the last element
        var i = l - 1 //Setting the first index
        for (j in l until r) { //Iterating through the array
            if (list[j] < pivot) { //Comparing elements to pivot
                i++ //Increasing index
                val temp = list[i] //Swapping elements at indices
                list[i] = list[j]
                list[j] = temp
            }
        }
        val temp = list[i + 1] //Swapping pivot with element at i+1
        list[i + 1] = list[r]
        list[r] = temp
        quicksort(list, l, i) //Recursively calling quicksort on left subarray
        quicksort(list, i + 2, r) //Recursively calling quicksort on right subarray
    }
}

val array = arrayOf(5, 3, 7, 2, 8, 4) //Initializing input array
quicksort(array, 0, array.size - 1) //Calling quicksort on entire array
println("Sorted array: ${array.contentToString()}") //Printing sorted array