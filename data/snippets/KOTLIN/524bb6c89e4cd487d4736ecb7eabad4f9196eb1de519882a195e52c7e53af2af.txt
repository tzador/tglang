// Create a data class
data class Person (
   val name: String,
   val age: Int
)

// Create a sealed class as a parent
sealed class Transport {
   abstract val name: String
   abstract fun drive()

   class Car(override val name: String) : Transport() {
      override fun drive() {
         println("Driving $name")
      }
   }

   class Bus(override val name: String) : Transport() {
      override fun drive() {
         println("Driving $name")
      }
   }
}

// Create a generic function
fun <T: Transport> driveVehicle(vehicle: T) {
   vehicle.drive()
}

// Create a list of Person objects
val people = listOf(
   Person("John", 25),
   Person("Mary", 30),
   Person("Dave", 40)
)

// Create a list of different types of Transport
val transports = listOf(
   Transport.Car("Audi"),
   Transport.Bus("City Bus"),
   Transport.Car("Tesla")
)

// Use the generic function to drive all vehicles
for (transport in transports) {
   driveVehicle(transport)
}

// Use the filter function to filter out people under 30 years old
val filteredPeople = people.filter { it.age >= 30 }

// Print the filtered list of people
println(filteredPeople)

// Output:
// Driving Audi
// Driving City Bus
// Driving Tesla
// [Person(name=Mary, age=30), Person(name=Dave, age=40)]