// This code snippet demonstrates how to implement a binary search tree in Kotlin

// Define a data class that represents a node in the binary search tree
data class TreeNode(val value: Int, var leftChild: TreeNode? = null, var rightChild: TreeNode? = null)

// Define a class that represents the binary search tree
class BinarySearchTree {

    // Define a property for the root node of the tree
    private var root: TreeNode? = null

    // Define a method for inserting a new node into the tree
    fun insert(value: Int) {
        // Check if the root is null, if so, assign the new node as the root
        if (root == null) {
            root = TreeNode(value)
        } else {
            // Otherwise, call the recursive insert helper function passing in the root node
            insertRec(root!!, value)
        }
    }

    // Define a helper function for the insert method, that traverses the tree recursively
    private fun insertRec(currentNode: TreeNode, value: Int) {
        // Check if the value to be inserted is smaller than the current node's value
        if (value < currentNode.value) {
            // If so, check if the left child is null, if so, insert the new node as the left child
            if (currentNode.leftChild == null) {
                currentNode.leftChild = TreeNode(value)
            } else {
                // Otherwise, call insertRec again, passing in the left child as the current node
                insertRec(currentNode.leftChild!!, value)
            }
        } else {
            // Otherwise, check if the right child is null, if so, insert the new node as the right child
            if (currentNode.rightChild == null) {
                currentNode.rightChild = TreeNode(value)
            } else {
                // Otherwise, call insertRec again, passing in the right child as the current node
                insertRec(currentNode.rightChild!!, value)
            }
        }
    }

    // Define a method for searching for a specific value in the tree
    fun contains(value: Int): Boolean {
        // Call the recursive search helper function, passing in the root node
        return containsRec(root, value)
    }

    // Define a helper function for the search method, that traverses the tree recursively
    private fun containsRec(currentNode: TreeNode?, value: Int): Boolean {
        // Check if the current node is null, if so, return false as the value was not found
        if (currentNode == null) {
            return false
        }
        // Check if the current node's value is equal to the value we are searching for
        if (currentNode.value == value) {
            return true // Return true as the value was found
        } else if (value < currentNode.value) {
            // If the value is smaller than the current node's value, call containsRec again, passing in the left child
            return containsRec(currentNode.leftChild, value)
        } else {
            // Otherwise, call containsRec again, passing in the right child
            return containsRec(currentNode.rightChild, value)
        }
    }

    // Define a method for deleting a node from the tree
    fun delete(value: Int) {
        // Call the recursive delete helper function, passing in the root node
        deleteRec(root, value)
    }

    // Define a helper function for the delete method, that traverses the tree recursively
    private fun deleteRec(currentNode: TreeNode?, value: Int): TreeNode? {
        // Check if the current node is null, if so, return null as the value was not found
        if (currentNode == null) {
            return null
        }
        // Check if the current node's value is equal to the value we want to delete
        if (currentNode.value == value) {
            // If the node has no children, simply set the current node to null
            if (currentNode.leftChild == null && currentNode.rightChild == null) {
                return null
            } else if (currentNode.leftChild == null) {
                // If the node only has a right child, set the current node to be the right child
                return currentNode.rightChild
            } else if (currentNode.rightChild == null) {
                // If the node only has a left child, set the current node to be the left child
                return currentNode.leftChild
            } else {
                // If the node has both a left and right child, find the smallest value in the right subtree
                // and set it as the new value for the current node, then delete the node that had that value
                val smallestValue = findSmallestValue(currentNode.rightChild!!)
                currentNode.value = smallestValue
                currentNode.rightChild = deleteRec(currentNode.rightChild, smallestValue)
            }
            return currentNode
        } else if (value < currentNode.value) {
            // If the value is smaller than the current node's value, call deleteRec again, passing in the left child
            currentNode.leftChild = deleteRec(currentNode.leftChild, value)
        } else {
            // Otherwise, call deleteRec again, passing in the right child
            currentNode.rightChild = deleteRec(currentNode.rightChild, value)
        }
        return currentNode
    }

    // Define a helper function for finding the smallest value in a given subtree
    private fun findSmallestValue(subtreeRoot: TreeNode): Int {
        // If the subtree root has a left child, recursively call this function on that child
        return if (subtreeRoot.leftChild != null) {
            findSmallestValue(subtreeRoot.leftChild!!)
        } else {
            // Otherwise, the subtree root is the smallest value, so return its value
            subtreeRoot.value
        }
    }

    // Define a method for performing an in-order traversal of the tree and printing each value
    fun inOrderTraversal(currentNode: TreeNode?) {
        // Check if the current node is not null
        currentNode?.let {
            // If not null, recursively call this function on the left subtree
            inOrderTraversal(currentNode.leftChild)
            // Print the current node's value
            println(currentNode.value)
            // Recursively call this function on the right subtree
            inOrderTraversal(currentNode.rightChild)
        }
    }
}

// Create a new instance of the BinarySearchTree class
val bst = BinarySearchTree()

// Insert some values into the tree
bst.insert(5)
bst.insert(3)
bst.insert(7)
bst.insert(1)
bst.insert(2)
bst.insert(6)
bst.insert(9)

// Search for a value in the tree
println(bst.contains(3)) // Output: true

// Delete a node from the tree
bst.delete(5)

// In-order traversal of the tree, should now print: 1, 2, 3, 6, 7, 9
bst.inOrderTraversal(bst.root)