// Kotlin code snippet for a binary search algorithm
// Define an array of numbers
val numbers = intArrayOf(13, 24, 36, 47, 59, 62, 75, 81, 92, 105)
// Define variables for starting and ending positions
var start = 0
var end: Int = numbers.size - 1
// Calculate the middle position
val mid: Int = start + (end - start) / 2
// Define a function for binary search
fun binarySearch(number: Int, numArray: IntArray, start: Int, end: Int): Int {
    // Check if starting position is greater than ending position
    if (end >= start) {
        // Check if middle position is the desired number
        if (numArray[mid] == number)
            return mid
        // Check if the desired number is in the left half of the array
        if (numArray[mid] > number)
            return binarySearch(number, numArray, start, mid - 1)
        // Check if the desired number is in the right half of the array
        return binarySearch(number, numArray, mid + 1, end)
    }
    // If desired number is not found, return -1
    return -1
}
// Use the binary search function to find the index of the desired number
val index = binarySearch(81, numbers, start, end)
// Print the index of the desired number
println("Index of 81: " + index)
// If index is -1, desired number was not found
if (index == -1)
    println("81 not found in the array")
// Output: Index of 81: 7