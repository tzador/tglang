/**
 * The following code snippet shows an example of implementing a binary search tree in Kotlin.
 * It will insert, delete, and search for elements in the tree.
 */
class BinarySearchTree<T : Comparable<T>> {
    private var root: BinarySearchNode<T>? = null

    /**
     * Insert a new element into the binary search tree.
     * @param value the value to be inserted
     */
    fun insert(value: T) {
        if (root == null) {
            root = BinarySearchNode(value)
        } else {
            insertRecursive(root!!, value)
        }
    }

    // Recursive helper function for inserting a value into the binary search tree.
    private fun insertRecursive(node: BinarySearchNode<T>, value: T) {
        if (value < node.value) {
            if (node.left == null) {
                node.left = BinarySearchNode(value)
            } else {
                insertRecursive(node.left!!, value)
            }
        } else {
            if (node.right == null) {
                node.right = BinarySearchNode(value)
            } else {
                insertRecursive(node.right!!, value)
            }
        }
    }

    /**
     * Delete an element from the binary search tree.
     * @param value the value to be deleted
     */
    fun delete(value: T) {
        if (root == null) {
            return
        } else {
            root = deleteRecursive(root!!, value)
        }
    }

    // Recursive helper function for deleting a value from the binary search tree.
    private fun deleteRecursive(node: BinarySearchNode<T>, value: T): BinarySearchNode<T>? {
        if (value == node.value) {
            // node has no children
            if (node.left == null && node.right == null) {
                return null
            }

            // node has one child
            if (node.left == null) {
                return node.right
            } else if (node.right == null) {
                return node.left
            }

            // node has two children
            // find the smallest value in the right subtree to replace the deleted node
            val smallest = findSmallest(node.right!!)
            node.value = smallest
            // recursively delete the smallest value from the right subtree
            node.right = deleteRecursive(node.right!!, smallest)
        } else if (value < node.value) {
            node.left = deleteRecursive(node.left!!, value)
        } else {
            node.right = deleteRecursive(node.right!!, value)
        }
        return node
    }

    /**
     * Search for an element in the binary search tree.
     * @param value the value to search for
     * @return true if the value is found, false otherwise
     */
    fun search(value: T): Boolean {
        if (root == null) {
            return false
        } else {
            return searchRecursive(root!!, value)
        }
    }

    // Recursive helper function for searching a value in the binary search tree.
    private fun searchRecursive(node: BinarySearchNode<T>, value: T): Boolean {
        if (value == node.value) {
            return true
        } else if (value < node.value) {
            if (node.left == null) {
                return false
            } else {
                return searchRecursive(node.left!!, value)
            }
        } else {
            if (node.right == null) {
                return false
            } else {
                return searchRecursive(node.right!!, value)
            }
        }
    }

    // Helper function to find the smallest value in a subtree.
    private fun findSmallest(node: BinarySearchNode<T>): T {
        if (node.left == null) {
            return node.value
        } else {
            return findSmallest(node.left!!)
        }
    }
}

/**
 * Node class for the binary search tree.
 * @param value the value of the node
 * @property left the left child of the node
 * @property right the right child of the node
 */
class BinarySearchNode<T : Comparable<T>>(var value: T) {
    var left: BinarySearchNode<T>? = null
    var right: BinarySearchNode<T>? = null
}

// Example usage:
fun main() {
    // create a binary search tree of integer values
    val bst = BinarySearchTree<Int>()

    // insert elements
    bst.insert(8)
    bst.insert(3)
    bst.insert(10)
    bst.insert(1)
    bst.insert(6)
    bst.insert(4)
    bst.insert(7)

    // search for an element
    println(bst.search(4)) // output: true

    // delete an element
    bst.delete(4)
    println(bst.search(4)) // output: false
}