fun quicksort(lst: MutableList<Int>, low: Int, high: Int) { 
    if (low < high) { 
        val pivot = partition(lst, low, high) 
        quicksort(lst, low, pivot - 1) 
        quicksort(lst, pivot + 1, high) 
    } 
} 

fun partition(lst: MutableList<Int>, low: Int, high: Int) : Int { 
    val pivotValue = lst[high] 
    var i = low - 1 
    for (j in low until high) { 
        if (lst[j] < pivotValue) { 
            i++ 
            swap(lst, i, j) 
        } 
    } 
    swap(lst, i + 1, high) 
    return i + 1 
} 

fun swap(lst: MutableList<Int>, i: Int, j: Int) { 
    val temp = lst[i] 
    lst[i] = lst[j] 
    lst[j] = temp 
} 

// Example usage: 
val numbers = mutableListOf(5, 3, 8, 1, 9) 
quicksort(numbers, 0, numbers.size - 1) 
println(numbers) // Output: [1, 3, 5, 8, 9]