fun recursiveBinarySearch(arr: Array<Int>, target: Int, start: Int = 0, end: Int = arr.size - 1): Int {
    // check for base case
    if (end < start) return -1

    // find the middle element
    val mid = start + (end - start) / 2

    // if target is found, return index
    if (arr[mid] == target) return mid

    // if target is smaller than middle element, search left half of array
    if (arr[mid] > target) {
        return recursiveBinarySearch(arr, target, start, mid - 1)
    } else {
        // if target is larger than middle element, search right half of array
        return recursiveBinarySearch(arr, target, mid + 1, end)
    }
}

fun main() {
    val numbers = arrayOf(2, 5, 7, 9, 12, 15, 20, 22, 25)
    val target = 9
    val index = recursiveBinarySearch(numbers, target)

    if (index != -1) {
        println("Target $target found at index $index")
    } else {
        println("Target $target not found in array")
    }
}