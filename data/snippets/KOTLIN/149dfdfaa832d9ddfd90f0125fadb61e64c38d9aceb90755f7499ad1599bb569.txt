// This is a complex code snippet in Kotlin
class ComplexMath {
    // Function to calculate the square of a number
    fun square(num: Double): Double {
        // Square the number using Kotlin's pow() function
        return num.pow(2)
    }

    // Function to calculate the cube of a number
    fun cube(num: Double): Double {
        // Cube the number using Kotlin's pow() function
        return num.pow(3)
    }

    // Function to calculate the factorial of a number
    fun factorial(num: Long): Long {
        // Initialize the factorial variable to hold the result
        var factorial: Long = 1
        // Loop through each number starting from 1 up to the given number (inclusive)
        for (i in 1..num) {
            // Multiply the current value of factorial by the current number
            factorial *= i
        }
        // Return the factorial of the given number
        return factorial
    }

    // Function to calculate the nth root of a number
    fun nthRoot(num: Double, root: Double): Double {
        // Calculate the nth root using Kotlin's pow() function
        return num.pow(1/root)
    }

    // Function to calculate the logarithm of a number
    fun logarithm(num: Double, base: Double): Double {
        // Calculate the logarithm using Kotlin's log() function
        return ln(num) / ln(base)
    }
}

// Main function to run the code and test the ComplexMath class
fun main() {
    // Initialize a ComplexMath object
    val complexMath = ComplexMath()

    // Test the square function
    val squareResult = complexMath.square(5.0)
    // Output: 25.0 (annotated markdown code snippet)
    println(squareResult)

    // Test the cube function
    val cubeResult = complexMath.cube(3.0)
    // Output: 27.0 (annotated markdown code snippet)
    println(cubeResult)

    // Test the factorial function
    val factorialResult = complexMath.factorial(5)
    // Output: 120 (annotated markdown code snippet)
    println(factorialResult)

    // Test the nthRoot function
    val nthRootResult = complexMath.nthRoot(64.0, 3.0)
    // Output: 4.0 (annotated markdown code snippet)
    println(nthRootResult)

    // Test the logarithm function
    val logarithmResult = complexMath.logarithm(100.0, 10.0)
    // Output: 2.0 (annotated markdown code snippet)
    println(logarithmResult)
}