// This is a lambda expression that adds two numbers
val add = { x: Int, y: Int -> x + y }

// This is a higher order function that takes a lambda expression as a parameter
fun calculate(x: Int, y: Int, operation: (Int, Int) -> Int): Int {
    return operation(x, y)
}

// This is an anonymous function that checks if a number is even or not
val isEven = fun(num: Int): Boolean {
    return num % 2 == 0
}

// This is a recursive function that calculates the factorial of a number
fun factorial(num: Int): Int {
    return if (num == 0) {
        1
    } else {
        num * factorial(num - 1)
    }
}

// This is a data class that represents a person with properties for name, age, and occupation
data class Person(
    val name: String,
    var age: Int,
    var occupation: String
)

// This is an extension function on the Person class that increases the age by 1
fun Person.growOlder() {
    this.age += 1
}

// This is a lambda with receiver that transforms a string to uppercase
val toUpper: String.() -> String = {
    this.toUpperCase()
}

// This is a sealed class that represents different types of animals
sealed class Animal {
    data class Dog(val name: String) : Animal()
    data class Cat(val name: String) : Animal()
    data class Bird(val name: String) : Animal()
}

// This is a when expression that checks the type of animal and returns a sound they make
fun makeSound(animal: Animal): String {
    return when (animal) {
        is Animal.Dog -> "Woof!"
        is Animal.Cat -> "Meow!"
        is Animal.Bird -> "Tweet!"
    }
}

// This is a coroutine that prints out "Hello" every second for 10 times
suspend fun printHello() {
    repeat(10) {
        delay(1000)
        println("Hello")
    }
}

// This is a main function that calls all the defined functions and prints the output
fun main() {
    println(add(5, 10))
    println(calculate(5, 10, { x, y -> x * y }))
    println(isEven(4))
    println(factorial(5))
    val person = Person("John", 25, "Software Engineer")
    person.growOlder()
    println(person.age)
    println("Hello".toUpper())
    val dog = Animal.Dog("Buddy")
    println(makeSound(dog))
    println(makeSound(Animal.Cat("Whiskers")))
    println(makeSound(Animal.Bird("Tweetie")))
    runBlocking {
        printHello()
    }
}

// Output:
15
50
true
120
26
HELLO
Woof!
Meow!
Tweet!
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello