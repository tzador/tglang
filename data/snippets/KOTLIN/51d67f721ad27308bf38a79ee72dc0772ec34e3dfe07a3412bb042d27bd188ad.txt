// A complex code snippet in Kotlin

// Define a function to calculate the factorial of a number
fun factorial(n: Long): Long {
    // Base case: if n is 0 or 1, return 1
    if (n == 0L || n == 1L) {
        return 1L
    }
    // Recursive call to calculate the factorial of n-1
    return n * factorial(n - 1)
}

// Define a recursive function to calculate the fibonacci sequence
fun fibonacci(n: Int): Int {
    // Base case: if n is 0 or 1, return n
    if (n == 0 || n == 1) {
        return n
    }
    // Recursive call to calculate the sum of previous two numbers in the sequence
    return fibonacci(n - 1) + fibonacci(n - 2)
}

// Define a main function
fun main() {
    // Input a number from user
    println("Enter a number: ")
    val num: Int = readLine()!!.toInt()

    // Calculate and print the factorial of the input number
    println("Factorial of $num is ${factorial(num.toLong())}")

    // Calculate and print the fibonacci sequence up to the input number
    println("Fibonacci sequence up to $num:")
    for (i in 0..num) {
        print("${fibonacci(i)} ")
    }
}

// Output: