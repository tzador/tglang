// This is a function to find the shortest path between two nodes in a graph
fun findShortestPath(graph: Graph, start: Node, end: Node): List<Node> {
    // Initialize an empty queue to store nodes to be visited
    val queue: Queue<Node> = LinkedList()

    // Create a map to track the shortest distance from the start node to each node in the graph
    val shortestDistances = mutableMapOf<Node, Int>()

    // Add the start node to the queue and set its distance to 0
    queue.add(start)
    shortestDistances[start] = 0

    // Loop until all nodes have been visited or the end node is found
    while (!queue.isEmpty()) {
        // Get the current node from the queue
        val currentNode = queue.poll()

        // Check if the current node is the end node, if so, return the shortest path
        if (currentNode == end) {
            return reconstructPath(start, end, shortestDistances)
        }

        // Visit all the neighbors of the current node
        for (neighbor in graph.getNeighbors(currentNode)) {
            // Calculate the distance from the current node to the neighbor
            val distance = shortestDistances[currentNode]!! + graph.getWeight(currentNode, neighbor)

            // Check if the neighbor has not been visited before or if the new distance is smaller than the previously recorded one
            if (!shortestDistances.containsKey(neighbor) || distance < shortestDistances[neighbor]!!) {
                // Update the shortest distance for the neighbor
                shortestDistances[neighbor] = distance

                // Add the neighbor to the queue to be visited later
                queue.add(neighbor)
            }
        }
    }

    // If the end node was not found, return an empty list
    return emptyList()
}

// Function to reconstruct the shortest path from the start node to the end node
private fun reconstructPath(start: Node, end: Node, shortestDistances: Map<Node, Int>): List<Node> {
    // Initialize an empty path list
    val path = mutableListOf<Node>()

    // Starting from the end node, backtrack through the map of shortest distances to reconstruct the path
    var currentNode = end
    while (currentNode != start) {
        path.add(0, currentNode)
        currentNode = shortestDistances[currentNode]!!.parent
    }

    // Add the start node to the beginning of the path
    path.add(0, start)

    // Return the reconstructed path
    return path
}