//This code snippet demonstrates using a binary search algorithm in Kotlin to find an element in a sorted list.

//sortedList is the list in which we want to find the element.
//element is the element we are searching for in the list.

//initialize left and right pointers.
var left = 0 
var right = sortedList.lastIndex

//loop through the list while left pointer is less than or equal to right pointer.
while (left <= right) {
    //calculate the mid point.
    val mid = (left + right) / 2
    
    //if the element at mid point is equal to the element we are searching for, return the index.
    if (sortedList[mid] == element) {
        return mid
    }
    //if the element at mid point is greater than the element we are searching for, set right pointer to mid - 1.
    else if (sortedList[mid] > element) {
        right = mid - 1
    }
    //if the element at mid point is less than the element we are searching for, set left pointer to mid + 1.
    else {
        left = mid + 1
    }
}

//if element is not found, return -1.
return -1