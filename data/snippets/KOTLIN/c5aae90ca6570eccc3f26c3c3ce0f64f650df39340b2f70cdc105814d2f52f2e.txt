class BinaryTree<T>(private var value: T, private var left: BinaryTree<T>? = null, private var right: BinaryTree<T>? = null) {
    // Function to insert a new node in the tree
    fun insert(newValue: T) {
        // New node is inserted as a child node of the current node
        when {
            newValue < value -> {
                if (left == null) {
                    left = BinaryTree(newValue)
                } else {
                    left?.insert(newValue)
                }
            }
            newValue > value -> {
                if (right == null) {
                    right = BinaryTree(newValue)
                } else {
                    right?.insert(newValue)
                }
            }
            else -> {
                // Value already exists in the tree, no need to insert
                return
            }
        }
    }
 
    // Function to search for a specific value in the tree
    fun search(targetValue: T): BinaryTree<T>? {
        // Check if current node's value matches the target value
        return when {
            targetValue == value -> {
                this
            }
            targetValue < value -> {
                left?.search(targetValue)
            }
            else -> {
                right?.search(targetValue)
            }
        }
    }
}

fun main() {
    // Creating an empty binary tree
    val tree = BinaryTree<Int>(5)
    
    // Inserting new nodes
    tree.insert(3)
    tree.insert(7)
    tree.insert(1)
    tree.insert(4)
    tree.insert(6)
    tree.insert(9)
    
    // Searching for a specific value in the tree
    println(tree.search(4)?.value) // Output: 4
}