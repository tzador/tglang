fun mergeSort(list: List<Int>): List<Int> { //A recursive function that implements Merge Sort algorithm for sorting a list of integers
    if(list.size < 2) { //base case: if the list contains 1 or 0 elements, it is already sorted
        return list
    } else {
        val middle = list.size / 2 //find the middle index of the list
        val left = list.subList(0, middle) //create a sub list from index 0 to middle - 1
        val right = list.subList(middle, list.size) //create a sub list from middle index to end of the list
        //use recursion to further split the sub lists until they contain only 1 element (base case)
        val sortedLeft = mergeSort(left)
        val sortedRight = mergeSort(right)
        //call merge function to merge and sort the individual elements
        return merge(sortedLeft, sortedRight)
    }
}

fun merge(left: List<Int>, right: List<Int>): List<Int> { // A helper function that merges and sorts two list of integers
    var leftIndex = 0
    var rightIndex = 0
    val resultList = mutableListOf<Int>() //create an empty list to store the merged elements
    //loop through both lists and compare the elements to add to the resultList in sorted order
    while(leftIndex < left.size && rightIndex < right.size) {
        if (left[leftIndex] < right[rightIndex]) {
            resultList.add(left[leftIndex])
            leftIndex++
        } else {
            resultList.add(right[rightIndex])
            rightIndex++
        }
    }
    //add any remaining elements in either list to the end of the resultList
    if(leftIndex < left.size) {
        resultList.addAll(left.subList(leftIndex, left.size))
    } else if(rightIndex < right.size) {
        resultList.addAll(right.subList(rightIndex, right.size))
    }
    return resultList
}

//example usage:
val unsortedList = listOf(5, 3, 9, 2, 7, 1)
println("Unsorted list: $unsortedList")
val sortedList = mergeSort(unsortedList)
println("Sorted list: $sortedList")

//output:
//Unsorted list: [5, 3, 9, 2, 7, 1]
//Sorted list: [1, 2, 3, 5, 7, 9]