import java.util.HashMap

/*
This is a function that takes in an Integer as a parameter and returns a HashMap.
The HashMap contains the factors of the input Integer as keys and their corresponding prime factors as values.
*/
fun primeFactorization(n: Int): HashMap<Int, Int> {
    // Creating an empty HashMap to store the factors and prime factors
    val primeFactors = HashMap<Int, Int>()

    // Looping through all the possible factors of the input Integer
    for (i in 1..n) {
        // Checking if the current factor is a factor of the input Integer
        if (n % i == 0) {
            // Setting the current factor as the key in the HashMap
            primeFactors[i] = 0

            // Finding the prime factors of the current factor
            var temp = i
            var divisor = 2

            // Looping until the current factor is equal to 1
            while (temp != 1) {
                // If the current divisor is a factor of the current factor, increment the corresponding value in the HashMap
                if (temp % divisor == 0) {
                    primeFactors[i] = primeFactors[i]!! + 1
                    // Dividing the current factor by the divisor to get the next divisor
                    temp = temp / divisor
                } else {
                    // If the current divisor is not a factor, increment the divisor
                    divisor++
                }
            }
        }
    }

    // Returning the HashMap with the factors and their prime factors
    return primeFactors
}