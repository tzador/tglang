/**
* This is an example of a complex code snippet in KOTLIN.
* It sorts an array of integers using quicksort algorithm.
*
* Input:
* arr - an array of integers
*
* Output:
* Returns the sorted array in ascending order
*/
fun quicksort(arr: IntArray): IntArray {
    // Base case: if the array size is 0 or 1, it is already sorted
    if (arr.size <= 1) return arr

    // Get the pivot element, in this example it is the last element in the array
    val pivot = arr[arr.size - 1]

    // Create empty arrays for elements smaller and larger than pivot
    val smaller = ArrayList<Int>()
    val larger = ArrayList<Int>()

    // Loop through the array and add elements to smaller or larger arrays
    for (i in 0 until arr.size - 1) {
        if (arr[i] <= pivot) {
            smaller.add(arr[i])
        } else {
            larger.add(arr[i])
        }
    }

    // Sort smaller and larger arrays recursively
    val sortedSmaller = quicksort(smaller.toIntArray())
    val sortedLarger = quicksort(larger.toIntArray())

    // Combine the sorted smaller and larger arrays with the pivot element in between
    return sortedSmaller + pivot + sortedLarger
}

// Example input array
val arr = intArrayOf(6, 2, 8, 4, 1)

// Call quicksort function and print the sorted array
println(quicksort(arr)) // Output: [1, 2, 4, 6, 8]