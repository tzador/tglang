// Create a function that calculates the nth prime number
fun nthPrime(n: Int): Int {
    // Initialize a list to store prime numbers
    val primeList = mutableListOf(2)

    // Initialize a counter to keep track of the number of prime numbers found
    var count = 1

    // Initialize a variable to store the current number being checked
    var num = 3

    // Keep iterating until the desired nth prime number is found
    while (count < n) {
        // Assume num is prime
        var isPrime = true

        // Check if num is divisible by any of the prime numbers in the list
        for (prime in primeList) {
            // If num is divisible, it is not a prime number
            if (num % prime == 0) {
                isPrime = false
                break
            }
        }

        // If num is prime, add it to the prime list and increment the count
        if (isPrime) {
            primeList.add(num)
            count++
        }

        // Increment num by 2 to check the next odd number
        num += 2
    }

    // Return the nth prime number
    return primeList[n - 1]
}

// Call the function and print the output
println(nthPrime(10)) // Output: 29