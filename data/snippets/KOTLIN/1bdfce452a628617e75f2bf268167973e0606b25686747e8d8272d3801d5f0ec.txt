// This is a simple Kotlin code snippet that implements a binary search tree data structure
    // with insertion, deletion and search functions

    // Define the Binary Search Tree Node class that represents a single node in the tree
    class BSTNode<T: Comparable<T>>(var data: T) {
        var leftChild: BSTNode<T>? = null
        var rightChild: BSTNode<T>? = null
    }

    // Define the Binary Search Tree class
    class BST<T: Comparable<T>> {
        // The root of the tree
        var root: BSTNode<T>? = null

        // Function to insert a new node into the tree
        fun insert(data: T) {
            // Check if the tree is empty
            if (root == null) {
                // If it is, create a new root node with the given data
                root = BSTNode(data)
            } else {
                // If not, start at the root and loop until the appropriate position is found
                var currNode = root

                // Flag to keep track of whether the node has been inserted or not
                var inserted = false

                while (currNode != null && !inserted) {
                    // If the data is less than the current node's data, go to the left child
                    if (data < currNode.data) {
                        if (currNode.leftChild == null) {
                            // If the left child is null, insert the new node as the left child
                            currNode.leftChild = BSTNode(data)
                            inserted = true
                        } else {
                            // Otherwise, continue to the next node on the left
                            currNode = currNode.leftChild
                        }
                    } else {
                        // If the data is greater or equal to the current node's data
                        // go to the right child
                        if (currNode.rightChild == null) {
                            // If the right child is null, insert the new node as the right child
                            currNode.rightChild = BSTNode(data)
                            inserted = true
                        } else {
                            // Otherwise, continue to the next node on the right
                            currNode = currNode.rightChild
                        }
                    }
                }
            }
        }

        // Function to delete a node from the tree
        fun delete(data: T) {
            // Start at the root and find the node to delete
            var currNode = root
            var parentNode = root
            var found = false

            // Search for the node with the given data
            while (currNode != null && !found) {
                if (data < currNode.data) {
                    // If the data is less than the current node's data, go to the left child
                    parentNode = currNode
                    currNode = currNode.leftChild
                } else if (data > currNode.data) {
                    // If the data is greater than the current node's data, go to the right child
                    parentNode = currNode
                    currNode = currNode.rightChild
                } else {
                    // If the data is equal to the current node's data, the node is found
                    found = true
                }
            }

            // If the node is not found, exit the function
            if (currNode == null) {
                return
            }

            // If the node has no children
            if (currNode.leftChild == null && currNode.rightChild == null) {
                // If the node to delete is the root, set the root to null
                if (currNode == root) {
                    root = null
                } else {
                    // Otherwise, set the parent's appropriate child to null
                    if (currNode == parentNode?.leftChild) {
                        parentNode.leftChild = null
                    } else {
                        parentNode?.rightChild = null
                    }
                }
            }
            // If the node has only one child
            else if (currNode.leftChild == null || currNode.rightChild == null) {
                // If the node to delete is the root, set the root to its single child
                if (currNode == root) {
                    if (currNode.leftChild != null) {
                        root = currNode.leftChild
                    } else {
                        root = currNode.rightChild
                    }
                } else {
                    // Otherwise, update the parent's appropriate child to the node's single child
                    if (currNode == parentNode?.leftChild) {
                        if (currNode.leftChild != null) {
                            parentNode.leftChild = currNode.leftChild
                        } else {
                            parentNode.leftChild = currNode.rightChild
                        }
                    } else {
                        if (currNode.leftChild != null) {
                            parentNode?.rightChild = currNode.leftChild
                        } else {
                            parentNode?.rightChild = currNode.rightChild
                        }
                    }
                }
            }
            // If the node has two children
            else {
                // Find the largest node in the node's left subtree
                var largestNode = currNode.leftChild
                while (largestNode?.rightChild != null) {
                    largestNode = largestNode.rightChild
                }

                // Replace the current node's data with the largest node's data
                currNode.data = largestNode?.data!!

                // Delete the largest node from the left subtree
                if (currNode.leftChild == largestNode) {
                    currNode.leftChild = largestNode.leftChild
                } else {
                    var tempNode = largestNode
                    largestNode = largestNode.leftChild
                    tempNode.leftChild = null
                }

            }
        }

        // Function to search for a node in the tree and return true if found, false if not
        fun search(data: T): Boolean {
            // Start at the root and search for the node with the given data
            var currNode = root
            var found = false

            while (currNode != null && !found) {
                if (data < currNode.data) {
                    // If the data is less than the current node's data, go to the left child
                    currNode = currNode.leftChild
                } else if (data > currNode.data) {
                    // If the data is greater than the current node's data, go to the right child
                    currNode = currNode.rightChild
                } else {
                    // If the data is equal to the current node's data, the node is found
                    found = true
                }
            }

            // Return the result
            return found
        }
    }