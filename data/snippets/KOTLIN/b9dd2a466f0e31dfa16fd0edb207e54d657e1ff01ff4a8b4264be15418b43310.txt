// This is a complex code snippet in Kotlin that uses functional programming concepts and collections

// Function to find the average of the given list of numbers
fun findAverage(numbers: List<Double>): Double {
    // Using the map function to convert each number to its square
    val squaredNumbers = numbers.map { num -> num * num }

    // Using the reduce function to sum all the squared numbers
    val sum = squaredNumbers.reduce { acc, num -> acc + num }

    // Using the filter function to filter out all the even numbers
    val evenNumbers = numbers.filter { num -> num % 2 == 0 }

    // Using the fold function to multiply all the even numbers
    val multiplyResult = evenNumbers.fold(1.0) { acc, num -> acc * num }

    // Using the count function to get the number of odd numbers
    val oddNumbersCount = numbers.count { num -> num % 2 != 0 }

    // Calculating the average by dividing the sum of squared numbers with the number of odd numbers
    val average = sum / oddNumbersCount

    // Returning the average
    return average
}

// Sample list of numbers
val numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)

// Calling the findAverage function with the given list of numbers
val result = findAverage(numbers)

// Printing the result
println("The average is: $result")

// Output: 
/* 
The average is: 6.75 
*/