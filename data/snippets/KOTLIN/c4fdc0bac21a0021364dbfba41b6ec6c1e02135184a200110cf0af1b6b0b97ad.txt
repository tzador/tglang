//Sorting algorithm using quicksort in Kotlin
fun quicksort(nums: MutableList<Int>, low: Int, high: Int) {
    if (low < high) {
        val pivot = partition(nums, low, high)
        quicksort(nums, low, pivot - 1)
        quicksort(nums, pivot + 1, high)
    }
}

fun partition(nums: MutableList<Int>, low: Int, high: Int): Int {
    val pivot = nums[high]
    var i = low - 1
    for (j in low until high) {
        if (nums[j] < pivot) {
            i++
            swap(nums, i, j)
        }
    }
    swap(nums, i + 1, high)
    return i + 1
}

fun swap(nums: MutableList<Int>, i: Int, j: Int) {
    val temp = nums[i]
    nums[i] = nums[j]
    nums[j] = temp
}

fun main() {
    val nums = mutableListOf(6, 3, 9, 1, 4, 8, 5, 7, 2, 10)
    quicksort(nums, 0, nums.size - 1)
    println(nums) //prints: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
}