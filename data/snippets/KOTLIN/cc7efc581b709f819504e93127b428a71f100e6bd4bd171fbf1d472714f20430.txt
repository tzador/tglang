`
// This is a complex function that takes in an integer as a parameter
// and returns the Fibonacci sequence up to that number
fun fibonacci(num: Int): List<Int> {
    // declare an empty mutable list to store our result
    val sequence: MutableList<Int> = mutableListOf()

    // base case: when num is 0 or 1, just return the number
    if (num == 0 || num == 1) {
        sequence.add(num)
        return sequence
    }

    // create variables to keep track of previous two numbers in sequence
    var prevNum = 0
    var currentNum = 1

    // loop through and add numbers to the list using the Fibonacci formula
    for (i in 2..num) {
        val newNum = prevNum + currentNum
        sequence.add(newNum)
        // set currentNum as new previous number and newNum as new current number
        prevNum = currentNum
        currentNum = newNum
    }

    // return the final sequence
    return sequence
}
`

// example usage:
val result = fibonacci(8) // returns [0, 1, 1, 2, 3, 5, 8, 13]