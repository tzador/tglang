// Kotlin Class with Generic Type and Extension Function
class CustomList<T> {
    private var list: MutableList<T> = mutableListOf()

    fun add(item: T) {
        list.add(item)
    }

    fun size(): Int {
        return list.size
    }
}

// Extension function to filter items in list based on a predicate
fun <T> CustomList<T>.filter(predicate: (T) -> Boolean): CustomList<T> {
    val result = CustomList<T>()
    for (i in 0 until this.size()) {
        val item = this.get(i)
        if (predicate(item)) {
            result.add(item)
        }
    }
    return result
}

// Example Usage
val list = CustomList<String>()
list.add("apple")
list.add("banana")
list.add("carrot")
val filteredList = list.filter { it.startsWith("b") }
println(filteredList.size()) // Output: 1