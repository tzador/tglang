class BinaryTree<K:Comparable<K>,V>(private var root: Node<K,V>? = null) {
    
    private var keysInOrder = mutableListOf<K>()
    
    // Inserts a key-value pair into the binary tree
    fun insert(key: K, value: V) {
        root = insertRecursively(root, key, value)
    }
    
    // Helper function for insert method
    private fun insertRecursively(current: Node<K,V>?, key: K, value: V): Node<K,V> {
        if (current == null) {
            return Node(key, value)
        }
        when {
            key < current.key -> current.left = insertRecursively(current.left, key, value)
            key > current.key -> current.right = insertRecursively(current.right, key, value)
            else -> current.value = value
        }
        return current
    }
    
    // Returns the value associated with a given key
    fun get(key: K): V? {
        val node = search(root, key)
        return node?.value
    }
    
    // Helper function for get method
    private fun search(current: Node<K,V>?, key: K): Node<K,V>? {
        if (current == null || current.key == key) {
            return current
        }
        if (key < current.key) {
            return search(current.left, key)
        } else {
            return search(current.right, key)
        }
    }
    
    // Performs an in-order traversal of the binary tree
    fun inOrderTraversal() {
        keysInOrder.clear()
        traverseInOrder(root)
    }
    
    // Helper function for inOrderTraversal
    private fun traverseInOrder(node: Node<K,V>?) {
        if (node != null) {
            traverseInOrder(node.left)
            keysInOrder.add(node.key)
            traverseInOrder(node.right)
        }
    }
    
    // Prints the keys in order
    fun printKeysInOrder() {
        print(keysInOrder)
    }
    
    // Class representing a node in the binary tree
    private data class Node< K: Comparable<K>, V>(var key: K, var value: V) {
        var left: Node<K,V>? = null
        var right: Node<K,V>? = null
    }
}