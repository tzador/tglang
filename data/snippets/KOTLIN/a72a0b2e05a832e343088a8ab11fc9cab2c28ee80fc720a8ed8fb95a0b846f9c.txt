// Define a generic class called "LinkedList" with a type parameter
class LinkedList<T> {
    // Define a private inner class called "Node" that holds the data and a reference to the next node
    private inner class Node(var data: T, var next: Node?) {
        // Define a toString() method that returns the data in the node as a string
        override fun toString(): String {
            return data.toString()
        }
    }
    // Define private properties: "head" to hold the first node, "size" to hold the number of nodes in the list
    private var head: Node? = null
    private var size: Int = 0
    
    // Define a method called "add" that takes in data of type T and adds it to the end of the list
    fun add(data: T) {
        // Create a new node with the given data and set it as the head if the list is empty
        if (head == null) {
            head = Node(data, null)
        } else {
            // Otherwise, traverse the list to find the last node and add the new node to it
            var current = head
            while (current?.next != null) {
                current = current.next
            }
            current?.next = Node(data, null)
        }
        // Increase the size by 1
        size++
    }
    
    // Define a method called "print" that prints out all the data in the list
    fun print() {
        // Traverse the list and print out each node's data
        var current = head
        while (current != null) {
            print("${current.data} ")
            current = current.next
        }
    }
}
// Instantiate a LinkedList with type Int and add some numbers to the list
val intList = LinkedList<Int>()
intList.add(5)
intList.add(10)
intList.add(15)
// Call the "print" method to print out the list's contents
intList.print() // Output: 5 10 15