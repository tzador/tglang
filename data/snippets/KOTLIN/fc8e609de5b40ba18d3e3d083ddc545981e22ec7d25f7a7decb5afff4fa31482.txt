/**
 * This is an example abstract class in Kotlin
 */
abstract class Animal(val name: String) {

    /**
     * This is a method to get the animal's name
     * @return the animal's name
     */
    fun getName(): String {
        return this.name
    }

    /**
     * This is an abstract method to get the animal's sound
     * @return the animal's sound
     */
    abstract fun getSound(): String
}

/**
 * This is an example concrete class that extends the abstract class Animal
 * @param name the name of the animal
 * @param sound the sound the animal makes
 */
class Dog(name: String, private val sound: String) : Animal(name) {

    /**
     * This is a method to get the sound of the dog
     * @return the dog's sound
     */
    override fun getSound(): String {
        return this.sound
    }

    /**
     * This is a method to make the dog run
     */
    fun run() {
        println("${this.name} is running!")
    }
}

/**
 * This is the main function to test the code
 */
fun main() {
    // Creating an instance of the Dog class
    val dog = Dog("Buddy", "Woof")

    // Calling the getName method
    println("Dog's name: ${dog.getName()}")

    // Calling the getSound method
    println("Dog's sound: ${dog.getSound()}")

    // Calling the run method
    dog.run()
}