class BinaryTree<T : Comparable<T>> {

    private var root: Node<T>? = null

    inner class Node<T : Comparable<T>>(
        var value: T,
        var left: Node<T>? = null,
        var right: Node<T>? = null
    )

    fun insert(value: T) {
        root = insert(root, value)
    }

    private fun insert(node: Node<T>?, value: T): Node<T>? {
        if (node == null) return Node(value)
        when {
            value < node.value -> node.left = insert(node.left, value)
            value > node.value -> node.right = insert(node.right, value)
            else -> throw IllegalArgumentException("Value already exists in tree")
        }
        return node
    }

    fun remove(value: T) {
        root = remove(root, value)
    }

    private fun remove(node: Node<T>?, value: T): Node<T>? {
        if (node == null) return null
        when {
            value < node.value -> node.left = remove(node.left, value)
            value > node.value -> node.right = remove(node.right, value)
            else -> {
                when {
                    node.left == null -> return node.right
                    node.right == null -> return node.left
                    else -> {
                        val minValue = findMinValue(node.right)
                        node.value = minValue
                        node.right = remove(node.right, minValue)
                    }
                }
            }
        }
        return node
    }

    private fun findMinValue(node: Node<T>?): T {
        var currentNode = node
        var minValue = node?.value
        while (currentNode?.left != null) {
            minValue = currentNode.left!!.value
            currentNode = currentNode.left
        }
        return minValue!!
    }

    fun contains(value: T): Boolean {
        return contains(root, value)
    }

    private fun contains(node: Node<T>?, value: T): Boolean {
        if (node == null) return false
        if (value == node.value) return true
        return when {
            value < node.value -> contains(node.left, value)
            value > node.value -> contains(node.right, value)
            else -> false
        }
    }

    fun size(): Int {
        return size(root)
    }

    private fun size(node: Node<T>?): Int {
        if (node == null) return 0
        return size(node.left) + 1 + size(node.right)
    }
}