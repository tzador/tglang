/*
This code snippet demonstrates a complex sorting algorithm using recursion in Kotlin.
It takes in an array of numbers as input and sorts them in ascending order.
*/

// Recursive function to partition the array into subarrays
fun partition(arr: IntArray, low: Int, high: Int): Int {
    val pivot = arr[high]
    var i = low - 1

    for (j in low until high) {
        if (arr[j] < pivot) {
            i++

            // swap arr[i] and arr[j]
            val temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
        }
    }

    // swap arr[i+1] and arr[high]
    val temp = arr[i + 1]
    arr[i + 1] = arr[high]
    arr[high] = temp

    return i + 1
}

// Recursive function to perform quick sort
fun quickSort(arr: IntArray, low: Int, high: Int) {
    if (low < high) {
        // partition the array
        val pi = partition(arr, low, high)

        // recursively sort the left and right subarrays
        quickSort(arr, low, pi - 1)
        quickSort(arr, pi + 1, high)
    }
}

// Driver code
fun main() {
    // Input array of numbers
    val numbers = intArrayOf(5, 2, 8, 1, 9, 3, 7)

    // Sort the array using quick sort algorithm
    quickSort(numbers, 0, numbers.size - 1)

    // Print the sorted array
    println("Sorted array: ${numbers.contentToString()}")
}

/*
Sample output:
Sorted array: [1, 2, 3, 5, 7, 8, 9]
*/