/**
 * This is a complex code snippet in Kotlin that implements a sorting algorithm 
 * called QuickSort. It takes in an array of integers and recursively sorts them 
 * in ascending order using the QuickSort algorithm.
 */

// Function that partitions the array and returns the index of the pivot element
fun partition(arr: IntArray, low: Int, high: Int): Int {
    // Choosing the pivot element, in this case the last element in the array
    val pivot = arr[high]
    var i = low - 1

    // Looping through the array and swapping elements to ensure that all elements
    // smaller than the pivot are on the left and all elements bigger than the pivot
    // are on the right
    for(j in low until high) {
        if(arr[j] <= pivot) {
            i++

            // Swapping elements
            val temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
        }
    }

    // Placing the pivot element in its correct position
    val temp = arr[i+1]
    arr[i+1] = pivot
    arr[high] = temp

    // Returning the index of the pivot element
    return i+1
}

// Recursive function to perform QuickSort on the array
fun quickSort(arr: IntArray, low: Int, high: Int) {
    if(low < high) {
        // Finding the index of the pivot element
        val pivotIndex = partition(arr, low, high)

        // Recursively sorting the elements on either side of the pivot
        quickSort(arr, low, pivotIndex - 1)
        quickSort(arr, pivotIndex + 1, high)
    }
}

// Example array to be sorted
val arr = intArrayOf(5, 2, 7, 1, 4)

// Calling the quickSort function on the array
quickSort(arr, 0, arr.size - 1)

// Printing the sorted array
println("Sorted array: ${arr.contentToString()}") // Output: Sorted array: [1, 2, 4, 5, 7]