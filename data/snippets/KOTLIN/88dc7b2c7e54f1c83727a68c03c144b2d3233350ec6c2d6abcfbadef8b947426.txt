/**
 * This is a generic function that merges two lists of any type
 * and returns a combined list in sorted order.
 * It uses a merge sort algorithm to sort the merged list.
 * @param firstList the first list to merge
 * @param secondList the second list to merge
 * @return a sorted list of the merged elements from both lists
 */

fun <T : Comparable<T>> mergeLists(firstList: List<T>, secondList: List<T>): List<T> {

    //create a new list to store the merged elements
    val combinedList: MutableList<T> = mutableListOf()

    //initialize indexes for each list
    var firstIndex = 0
    var secondIndex = 0

    //merge elements until one list is exhausted
    while (firstIndex < firstList.size && secondIndex < secondList.size) {

        //compare current elements in both lists and add the smaller one to the combined list
        if (firstList[firstIndex] < secondList[secondIndex])
            combinedList.add(firstList[firstIndex++])
        else
            combinedList.add(secondList[secondIndex++])
    }

    //if elements are remaining in the first list, add them to the combined list
    while (firstIndex < firstList.size)
        combinedList.add(firstList[firstIndex++])

    //if elements are remaining in the second list, add them to the combined list
    while (secondIndex < secondList.size)
        combinedList.add(secondList[secondIndex++])

    //return the sorted combined list using merge sort algorithm
    return mergeSort(combinedList)
}

/**
 * This is a helper function that performs the merge sort algorithm
 * on a given list and returns the sorted list.
 * @param list the list to be sorted using merge sort
 * @return a sorted list
 */

fun <T : Comparable<T>> mergeSort(list: List<T>): List<T> {

    //if list has a size of 1 or less, return the list as it is already sorted
    if (list.size <= 1)
        return list

    //find the middle index of the list
    val middleIndex = list.size / 2

    //split the list into two sublists at the middle index
    val leftList = list.subList(0, middleIndex)
    val rightList = list.subList(middleIndex, list.size)

    //recursively call mergeSort function on both sublists
    val sortedLeftList = mergeSort(leftList)
    val sortedRightList = mergeSort(rightList)

    //return the merged list of the two sorted sublists
    return merge(sortedLeftList, sortedRightList)
}

/**
 * This is a helper function that merges two given sorted lists
 * and returns the merged list in sorted order.
 * @param leftList the left sublist to be merged
 * @param rightList the right sublist to be merged
 * @return a sorted list of the merged elements from both sublists
 */

fun <T : Comparable<T>> merge(leftList: List<T>, rightList: List<T>): List<T> {

    //initialize indexes for each sublist
    var leftIndex = 0
    var rightIndex = 0

    //create a new list to store the merged elements
    val mergedList: MutableList<T> = mutableListOf()

    //merge elements until one sublist is exhausted
    while (leftIndex < leftList.size && rightIndex < rightList.size) {

        //compare current elements in both sublists and add the smaller one to the merged list
        if (leftList[leftIndex] < rightList[rightIndex])
            mergedList.add(leftList[leftIndex++])
        else
            mergedList.add(rightList[rightIndex++])
    }

    //if elements are remaining in the left sublist, add them to the merged list
    while (leftIndex < leftList.size)
        mergedList.add(leftList[leftIndex++])

    //if elements are remaining in the right sublist, add them to the merged list
    while (rightIndex < rightList.size)
        mergedList.add(rightList[rightIndex++])

    //return the sorted merged list
    return mergedList
}

//example usage of the mergeLists function
val list1 = listOf(5, 3, 7, 2, 9)
val list2 = listOf(1, 4, 6, 8)
val combinedList = mergeLists(list1, list2)

//output: [1, 2, 3, 4, 5, 6, 7, 8, 9]