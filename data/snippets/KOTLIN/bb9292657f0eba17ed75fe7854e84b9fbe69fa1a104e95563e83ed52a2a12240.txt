import kotlin.math.pow

// Define a recursive function to calculate the nth Fibonacci number
fun calcFibonacci(n: Int): Long {
    // Base case
    if (n == 0 || n == 1) {
        return 1
    }

    // Recursive case
    return calcFibonacci(n - 1) + calcFibonacci(n - 2)
}

// Define a lambda expression to calculate the factorial of a given number
val factorial = { num: Int ->
    var result = 1L
    for (i in 1..num) {
        result *= i
    }
    result
}

// Define a data class to represent a user's personal information
data class User(
    val name: String,
    val age: Int,
    val email: String,
    val address: String
)

// Calculate the area of a circle using extension functions
fun Double.square(): Double = this.pow(2)
fun Double.areaOfCircle(): Double = Math.PI * this.square()

// Create an instance of the User class
val user = User(
    name = "John",
    age = 25,
    email = "john@example.com",
    address = "123 Main Street"
)

// Use Kotlin's when expression to check user's age and print corresponding message
when (user.age) {
    in 1..12 -> println("${user.name}, you are a child.")
    in 13..17 -> println("${user.name}, you are a teenager.")
    in 18..64 -> println("${user.name}, you are an adult.")
    else -> println("${user.name}, you are a senior citizen.")
}

// Print the nth Fibonacci number and factorial of 10 using the previously defined functions
println("The 10th Fibonacci number is: ${calcFibonacci(10)}")
println("The factorial of 10 is: ${factorial(10)}")

// Print the area of a circle with radius 5 using the extension functions
val radius = 5.0
println("The area of a circle with radius $radius is: ${radius.areaOfCircle()}")