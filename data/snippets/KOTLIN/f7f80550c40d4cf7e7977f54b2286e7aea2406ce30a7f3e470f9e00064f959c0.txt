/**
 * This function accepts two parameters and returns the sum of the two values
 * @param num1 first number to be added
 * @param num2 second number to be added
 * @return the sum of the two values
 */
fun addNumbers(num1: Int, num2: Int): Int {
    return num1 + num2
}

// Example usage:
val result = addNumbers(2, 3)
println(result) // Output: 5

// Infix notation
infix fun Int.sumTo(num: Int) = this + num
val sum = 5 sumTo 10 // Using infix notation
println(sum) // Output: 15

// Arrays and loops
val numbers = intArrayOf(1, 2, 3, 4, 5)
for (num in numbers) {
    println(num) // Output: 1, 2, 3, 4, 5
}

// Higher-order functions
fun calculate(operation: (Int, Int) -> Int) {
    val result = operation(10, 5)
    println(result) // Output: 15
}

calculate { num1, num2 -> num1 + num2 } // Passing a lambda expression to the function

// Null safety
var nullableString: String? = "Hello"
nullableString = null // Can assign null to a nullable variable
val length = nullableString?.length // Safe call operator returns null if the value is null
println(length) // Output: null

// Default parameters
fun multiply(num1: Int, num2: Int = 2) = num1 * num2 // num2 has a default value of 2
val product = multiply(3) // Passing only the first parameter
println(product) // Output: 6

// Object-oriented programming
class Student(
    val name: String,
    var age: Int,
    var major: String
) {
    fun introduce() {
        println("Hello, my name is $name. I am $age years old and my major is $major.")
    }
}

val student = Student("John", 20, "Computer Science")
student.introduce() // Output: Hello, my name is John. I am 20 years old and my major is Computer Science.