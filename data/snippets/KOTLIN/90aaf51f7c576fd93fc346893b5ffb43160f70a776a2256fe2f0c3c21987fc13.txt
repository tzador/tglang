// A complex function in Kotlin that calculates the n-th Fibonacci number
// using recursion and memoization

fun fib(n: Int, map: HashMap<Int, Int> = hashMapOf(0 to 0, 1 to 1)): Int {
  // check if n is already in map (memoization)
    if (map.containsKey(n)) {
        return map[n]
    }
    
    // otherwise, recursively calculate the n-th Fibonacci number
    val value = fib(n-1, map) + fib(n-2, map)
    map[n] = value // add n and its corresponding Fibonacci number to map (memoization)
    return value 
}

// Example usage of the function above
val n = 10 // the number whose Fibonacci number we want to calculate
val result = fib(n) // call the function to calculate the n-th Fibonacci number

println("The $n-th Fibonacci number is $result") // print the result: The 10-th Fibonacci number is 55