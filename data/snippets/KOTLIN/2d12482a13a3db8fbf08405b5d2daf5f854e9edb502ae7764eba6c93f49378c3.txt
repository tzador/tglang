//This code snippet creates a custom view that animates a circle in a circular path on a canvas

class CircleAnimationView(context: Context, attrs: AttributeSet) : View(context, attrs) {

    private val circlePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.FILL
        color = resources.getColor(R.color.colorPrimary)
    }

    private val circlePath = Path()
    private val circlePathMeasure = PathMeasure(circlePath, false)

    private var circleAnimationValue = 0f
    private var radius = 0f

    private val animator = ValueAnimator.ofFloat(0f, 1f).apply {
        duration = 3000
        interpolator = AccelerateDecelerateInterpolator()
        repeatCount = ValueAnimator.INFINITE
        addUpdateListener { animation ->
            circleAnimationValue = animation.animatedValue as Float
            invalidate()
        }
    }

    init {
        //get custom attributes from xml
        val typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleAnimationView)

        //initialize radius with custom attribute value
        radius = typedArray.getFloat(R.styleable.CircleAnimationView_circle_radius, 50f)

        //recycle the typed array
        typedArray.recycle()

        //start the animation
        animator.start()
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)

        //get center coordinates of the view
        val centerX = width / 2f
        val centerY = height / 2f

        //clear canvas
        canvas.drawColor(Color.WHITE)

        //reset the path
        circlePath.reset()

        //set the path using a circle formula
        val x = centerX + (radius * cos(circleAnimationValue * Math.PI * 2))
        val y = centerY + (radius * sin(circleAnimationValue * Math.PI * 2))
        circlePath.moveTo(x, y)
        circlePath.addCircle(x, y, 20f, Path.Direction.CW)

        //draw path
        canvas.drawPath(circlePath, circlePaint)
    }

    fun setRadius(newRadius: Float) {
        radius = newRadius
        invalidate()
    }

    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        animator.cancel()
    }
}