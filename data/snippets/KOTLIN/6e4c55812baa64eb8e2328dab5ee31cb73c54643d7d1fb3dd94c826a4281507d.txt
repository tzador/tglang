class Person(val name: String, val age: Int) { // Defines a class Person with two properties

    private var _address: String? = null // Defines a private property with null value

    val address: String // Defines a property with custom getter
        get() = _address ?: throw IllegalStateException("Address not set for $name")
        
    init { // Initializes the class properties
        validateAge() // Calls a helper method to validate age
        lastName = setLastName(name) // Calls a helper method and assigns the return value to lastName property
        println("$name, $age years old was created") // Prints a message
    }
    
    val firstName: String = name.split(" ")[0] // Defines a property with custom getter
    
    var lastName: String = "" // Defines a property with backing field
        private set // Disables setting the value of property outside of the class
    
    private fun validateAge() { // Defines a helper method
        require(age > 0) { "Age must be positive, but was $age" } // Throws an exception if age is negative
    }
    
    private fun setLastName(fullName: String): String { // Defines a helper method with return type String
        val lastName = fullName.split(" ").last() // Gets the last name from the full name
        println("Setting last name to $lastName for $name") // Prints a message
        return lastName // Returns the last name
    }
}