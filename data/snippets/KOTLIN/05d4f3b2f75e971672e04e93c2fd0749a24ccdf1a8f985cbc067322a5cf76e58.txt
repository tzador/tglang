​
class BinaryTree<T> { //creates a generic binary tree class
    var rootNode: BinaryNode<T>? = null //defines an optional root node
    
    //member function to insert a new node into the tree
    fun insert(value: T) { 
        if (rootNode == null) { //if tree is empty, new node becomes root
            rootNode = BinaryNode(value)
        } else { //else, insert into the correct position in the tree
            insertNode(rootNode, value)
        }
    }
    
    //helper function to recursively insert node into the tree
    private fun insertNode(currentNode: BinaryNode<T>?, value: T) { 
        if (currentNode == null) currentNode = BinaryNode(value) //if current node is empty, insert new node
        else { //if current node is not empty
            if (value < currentNode.value) { //if new value is less than current node value
                if (currentNode.left == null) currentNode.left = BinaryNode(value) //if left child is empty, insert new node
                else insertNode(currentNode.left, value) //otherwise, recursively call on left child
            } else { //if new value is greater than or equal to current node value
                if (currentNode.right == null) currentNode.right = BinaryNode(value) //if right child is empty, insert new node
                else insertNode(currentNode.right, value) //otherwise, recursively call on right child
            }
        }
    }
    
    //member function to search for a value in the tree
    fun search(value: T): Boolean { 
        if (rootNode == null) return false //if tree is empty, value does not exist
        else return searchNode(rootNode, value) //else, search recursively for the value
    }
    
    //helper function to recursively search for a value in the tree
    private fun searchNode(currentNode: BinaryNode<T>?, value: T): Boolean { 
        if (currentNode == null) return false //if current node is empty, value does not exist
        else if (value == currentNode.value) return true //if value matches current node value, value exists
        else if (value < currentNode.value) return searchNode(currentNode.left, value) //if value is less than current node value, search left subtree
        else return searchNode(currentNode.right, value) //otherwise, search right subtree
    }
}

//class for nodes in the binary tree
class BinaryNode<T>(var value: T) {
    var left: BinaryNode<T>? = null //optional left child node
    var right: BinaryNode<T>? = null //optional right child node
}
​