// This is a complex function that implements a binary search algorithm
fun binarySearch(array: Array<Int>, target: Int): Int {
    var low = 0 // initialize the lower bound
    var high = array.size - 1 // initialize the upper bound

    while (low <= high) { // loop until lower bound exceeds upper bound
        val mid = (low + high) / 2 // calculate the middle index
        val num = array[mid] // access the middle element in the array

        if (num < target) { // if the middle element is smaller than target
            low = mid + 1 // update lower bound to search in the upper half
        } else if (num > target) { // if the middle element is larger than target
            high = mid - 1 // update upper bound to search in the lower half
        } else { // if the middle element is equal to target
            return mid // return the index of the middle element
        }
    }

    return -1 // return -1 if target is not found in the array
}

// Usage of the function
val array = arrayOf(2, 4, 6, 8, 10) // create an array of integers
val target = 6 // set the target element to search for
val index = binarySearch(array, target) // call the binarySearch function
// index will now contain the index of the target element in the array