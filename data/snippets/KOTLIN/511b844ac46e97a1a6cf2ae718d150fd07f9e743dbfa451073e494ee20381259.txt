// This function finds the n-th fibonacci number using recursion
fun fibonacci(n: Int): Int {
    // base cases
    if (n == 1 || n == 2) {
        return 1
    }
    // recursive case
    else {
        return fibonacci(n - 1) + fibonacci(n - 2)
    }
}

// This function uses memoization to improve the efficiency of the fibonacci function
// by storing previously computed results in a map
fun fibonacciMemoized(n: Int, memo: MutableMap<Int, Int>): Int {
    // base cases
    if (n == 1 || n == 2) {
        return 1
    }
    // check if result has been stored in the map before
    if (memo.containsKey(n)) {
        return memo.get(n)!!
    }
    // recursive case
    else {
        // compute and store result in map
        val result = fibonacciMemoized(n - 1, memo) + fibonacciMemoized(n - 2, memo)
        memo.put(n, result)
        return result
    }
}

// Driver code to test both functions
fun main() {
    // use fibonacci function to find n-th fibonacci number
    val nthFibonacci = fibonacci(10)
    println("The 10th fibonacci number is: $nthFibonacci")

    // use fibonacciMemoized function to find n-th fibonacci number
    val memo = mutableMapOf<Int, Int>()
    val nthFibonacciMemoized = fibonacciMemoized(10, memo)
    println("The 10th fibonacci number using memoization is: $nthFibonacciMemoized")
}

// Output:
// The 10th fibonacci number is: 55
// The 10th fibonacci number using memoization is: 55