// A sample class representing a car 
class Car (val make: String, val model: String, var year: Int) {

  // A private property that can only be accessed within the class 
  private var mileage: Int = 0 
    
  // A method that prints out the car's make, model, and year
  fun printCarInfo() {
    println("This car is a $make $model from $year.")
  }
  
  // A method that updates the car's mileage and returns the new mileage
  // Annotating the function with @JvmName allows it to be called from Java code with the specified name
  @JvmName("setMileage") fun updateMileage(milesDriven: Int): Int {
    this.mileage += milesDriven
    println("The car's mileage is now ${this.mileage}.")
    return this.mileage
  }
  
  // A companion object with static methods to find the oldest and newest cars given an array of cars
  companion object {
    fun findOldestCar(cars: Array<Car>): Car {
      var oldestCar = cars[0]
      for (car in cars) {
        if (car.year < oldestCar.year) {
          oldestCar = car
        }
      }
      return oldestCar
    }
    
    fun findNewestCar(cars: Array<Car>): Car {
      var newestCar = cars[0]
      for (car in cars) {
        if (car.year > newestCar.year) {
          newestCar = car
        }
      }
      return newestCar
    }
  }
}

// A main function to create and manipulate objects of the Car class
fun main() {
  // Create an array of three cars
  val cars = arrayOf(Car("Toyota", "Corolla", 2010), 
                     Car("Honda", "Accord", 2012), 
                     Car("Ford", "Mustang", 2015))
                     
  // Call the printCarInfo method on the first car in the array
  cars[0].printCarInfo()
  
  // Update the mileage of the second car and print the new mileage
  val newMileage = cars[1].updateMileage(5000)
  
  // Use the companion object methods to find the oldest and newest cars in the array
  val oldestCar = Car.findOldestCar(cars)
  val newestCar = Car.findNewestCar(cars)
  
  // Print out the make, model, and year of the oldest and newest cars
  println("The oldest car is a ${oldestCar.make} ${oldestCar.model} from ${oldestCar.year}.")
  println("The newest car is a ${newestCar.make} ${newestCar.model} from ${newestCar.year}.")
}