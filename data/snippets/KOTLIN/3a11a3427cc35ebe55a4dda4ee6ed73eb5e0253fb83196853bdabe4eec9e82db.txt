/**
 * This is a class that represents a shopping cart
 * @param customerName name of the customer who owns the cart
 * @param cartContents items in the cart with their respective quantities
 * @constructor creates a new cart with the given customer name and cart contents
 */
class ShoppingCart(val customerName: String, val cartContents: Map<String, Int>) {

    /**
     * This function adds an item to the cart
     * @param item name of the item to be added
     * @param quantity number of items to be added
     * @return the updated cart with the added item
     */
    fun addItem(item: String, quantity: Int): ShoppingCart {
        // check if the cart already contains the item
        val newCartContents = if (cartContents.containsKey(item)) {
            // if yes, update the quantity of that item
            cartContents.plus(Pair(item, cartContents.getValue(item) + quantity))
        } else {
            // if no, add the item with the given quantity
            cartContents.plus(Pair(item, quantity))
        }

        // return a new cart instance with the updated contents
        return ShoppingCart(customerName, newCartContents)
    }

    /**
     * This function removes an item from the cart
     * @param item name of the item to be removed
     * @return the updated cart with the removed item
     */
    fun removeItem(item: String): ShoppingCart {
        // check if the cart contains the item
        val newCartContents = if (cartContents.containsKey(item)) {
            // if yes, remove the item from the cart
            cartContents.minus(item)
        } else {
            // if no, return the original cart
            cartContents
        }

        // return a new cart instance with the updated contents
        return ShoppingCart(customerName, newCartContents)
    }

    /**
     * This function sums up the total price of all items in the cart
     * @param prices a map of item names and their respective prices
     * @return the total price of all items in the cart
     */
    fun calculateTotalPrice(prices: Map<String, Double>): Double {
        var totalPrice = 0.0
        for ((item, quantity) in cartContents) {
            // check if the price map contains the item in the cart
            if (prices.containsKey(item)) {
                // add the price of that item multiplied by its quantity to the total price
                totalPrice += prices.getValue(item) * quantity
            }
        }

        // return the total price
        return totalPrice
    }
}

/**
 * Sample usage of the ShoppingCart class
 */
fun main(args: Array<String>) {
    val cart = ShoppingCart("John Doe", mapOf("apple" to 5, "orange" to 3, "banana" to 2))

    // output: ShoppingCart(customerName=John Doe, cartContents={apple=5, orange=3, banana=2})
    println("Initial cart: $cart")

    // add more items to the cart
    val updatedCart = cart.addItem("strawberry", 10)
            .addItem("apple", 3)
            .addItem("banana", 5)

    // output: ShoppingCart(customerName=John Doe, cartContents={apple=8, orange=3, banana=7, strawberry=10})
    println("Updated cart: $updatedCart")

    // remove an item from the cart
    val finalCart = updatedCart.removeItem("orange")

    // output: ShoppingCart(customerName=John Doe, cartContents={apple=8, banana=7, strawberry=10})
    println("Final cart: $finalCart")

    // calculate total price of all items in the cart
    val prices = mapOf("apple" to 1.50, "orange" to 2.00, "banana" to 0.75, "strawberry" to 3.50)
    val totalPrice = finalCart.calculateTotalPrice(prices)

    // output: Total price: $46.50
    println("Total price: $totalPrice")
}