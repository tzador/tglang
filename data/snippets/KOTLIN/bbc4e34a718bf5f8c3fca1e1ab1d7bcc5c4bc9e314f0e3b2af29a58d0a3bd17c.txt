val fruits: List<String> = listOf("apple", "orange", "banana")
val numbers: List<Int> = listOf(1, 2, 3, 4, 5)

// This function takes in two lists and returns the sum of their lengths
fun concatLists(list1: List<*>, list2: List<*>): Int {
    return list1.size + list2.size
}

// This function reverses the order of the elements in a list
fun reverseList(list: List<*>): List<*> {
    var reversedList = list.toMutableList()
    for (i in 0 until list.size / 2) {
        val temp = reversedList[i]
        reversedList[i] = reversedList[list.size - i - 1]
        reversedList[list.size - i - 1] = temp
    }
    return reversedList
}

// This function returns a list of only the even numbers
fun getEvenNumbers(list: List<Int>): List<Int> {
    var evenList = mutableListOf<Int>()
    for (num in list) {
        if (num % 2 == 0) {
            evenList.add(num)
        }
    }
    return evenList
}

// This function returns a list of numbers that are greater than the given input
fun getNumbersGreaterThan(input: Int, list: List<Int>): List<Int> {
    var greaterList = mutableListOf<Int>()
    for (num in list) {
        if (num > input) {
            greaterList.add(num)
        }
    }
    return greaterList
}

// Main function to test the above functions
fun main(args: Array<String>) {
    // Concatenating the two lists
    val combinedListSize = concatLists(fruits, numbers)
    println(combinedListSize) // Output: 8

    // Reversing the list of numbers
    val reversedNumbers = reverseList(numbers)
    println(reversedNumbers) // Output: [5, 4, 3, 2, 1]

    // Getting a list of only the even numbers
    val evenNumbers = getEvenNumbers(numbers)
    println(evenNumbers) // Output: [2, 4]

    // Getting a list of numbers that are greater than 2
    val greaterNumbers = getNumbersGreaterThan(2, numbers)
    println(greaterNumbers) // Output: [3, 4, 5]
}