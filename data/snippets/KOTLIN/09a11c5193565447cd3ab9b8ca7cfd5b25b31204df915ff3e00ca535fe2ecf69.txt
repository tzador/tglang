// Example class with a generic type
class Example<T> {
    // Property of generic type
    val prop: T
    // Init block that sets the property value
    init {
        // Assigns the default value of type T
        prop = defaultValue()
    }

    // Example function that takes in a generic type parameter and returns a different generic type
    fun <S> exampleFunc(input: T): S {
        // Do some operations on the input
        val output = performOperations(input)

        // Return the output as type S
        return output
    }

    // Helper function that returns the default value for type T
    private fun defaultValue(): T {
        // Default value of type T will vary depending on the specific type used
        return when (T::class) {
            String::class -> "" as T
            Int::class -> 0 as T
            Double::class -> 0.0 as T
            else -> throw IllegalArgumentException("Generic type not supported.")
        }
    }

    // Helper function that performs operations on the input and returns an output of type T
    private fun performOperations(input: T): T {
        // Performs some arbitrary operations on the input
        val output = input.toString() + " some text"

        // Returns the output as type T
        return output as T
    }
}

// Example usage of the class and its functions
fun main(args: Array<String>) {
    // Creates an instance of Example class with type String
    val exampleString = Example<String>()

    // Calls the exampleFunc with a string input
    val outputString = exampleString.exampleFunc<String>("Hello")

    // Print the output
    println(outputString)

    // Creates an instance of Example class with type Int
    val exampleInt = Example<Int>()

    // Calls the exampleFunc with an int input
    val outputInt = exampleInt.exampleFunc<Double>(5)

    // Print the output
    println(outputInt)
}