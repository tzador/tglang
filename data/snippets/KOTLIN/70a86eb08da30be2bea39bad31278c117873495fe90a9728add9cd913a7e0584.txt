// This is a complex function in Kotlin that generates a list of prime numbers within a given range
fun generatePrimeNumbers(start: Int, end: Int): MutableList<Int> {
    val primeList = mutableListOf<Int>() // creating an empty mutable list to store prime numbers
    for (i in start..end) { // loop through all numbers in the given range
        if (isPrime(i)) { // check if the number is prime
            primeList.add(i) // if it is prime, add it to the list
        }
    }
    return primeList // return the list of prime numbers
}

// function to check if a number is prime or not
fun isPrime(num: Int): Boolean {
    if (num <= 1) { // 1 is not considered a prime number
        return false
    } else if (num <= 3) { // 2 and 3 are prime numbers
        return true
    } else if (num % 2 == 0 || num % 3 == 0) { // numbers divisible by 2 or 3 are not prime
        return false
    } else {
        var i = 5
        while (i * i <= num) { // check if the number is divisible by any number less than its square root
            if (num % i == 0 || num % (i + 2) == 0) { // numbers divisible by 6k+1 or 6k-1 are not prime
                return false
            }
            i += 6 // increment i by 6 for optimized checking
        }
        return true // if the number passes all the conditions, it is a prime number
    }
}

// example usage of the generatePrimeNumbers function
val primeList = generatePrimeNumbers(1, 100)
println(primeList) // this will print [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], a list of all the prime numbers between 1 and 100