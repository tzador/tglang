/*
  This is a complex code snippet that calculates the maximum number of unique pairs from a list of integers.
  It utilizes a nested for loop to compare each item in the list to all other items and count the number of unique pairs.
  The output is the maximum number of unique pairs found. */

// Define a function that takes in a list of integers as a parameter
fun calculateMaxPairs(intList: List<Int>){

  // Initialize an empty set to store the unique pairs
  val uniquePairs = mutableSetOf<Pair<Int, Int>>()
  
  // Use a nested for loop to iterate through each element in the list
  for (i in intList.indices) {
    // Use another for loop to compare the current element to all other elements in the list
    for (j in i+1 until intList.size) {
      // Check if the current element is equal to any of the other elements
      if (intList[i] == intList[j]) {
        // If so, add the pair (i,j) to the set of unique pairs
        uniquePairs.add(Pair(i,j))
      }
    }
  }
  
  // Output the maximum number of unique pairs found
  println("The maximum number of unique pairs found is ${uniquePairs.size}")
}

// Sample list of integers
val intList = listOf(1,3,5,3,7,5,2)

// Call the calculateMaxPairs function with the sample list as the argument
calculateMaxPairs(intList)

/* 
  Output: 
  The maximum number of unique pairs found is 3
*/