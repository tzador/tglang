// This code snippet generates a binary search tree
class Node(val data: Int, var left: Node? = null, var right: Node? = null)

object BinaryTree {
    private var root: Node? = null

    // Function to insert a new node in the binary search tree
    fun insert(node: Node) {
        root?.let { insertNode(it, node) } ?: run { root = node }
    }

    // Recursive function to insert a new node in the binary search tree
    private fun insertNode(current: Node, newNode: Node) {
        if (newNode.data < current.data) {
            current.left?.let { insertNode(it, newNode) } ?: run { current.left = newNode }
        } else {
            current.right?.let { insertNode(it, newNode) } ?: run { current.right = newNode }
        }
    }

    // Function to search for a node in the binary search tree
    fun search(data: Int): Node? {
        root?.let { return searchNode(it, data) } ?: run { return null }
    }

    // Recursive function to search for a node in the binary search tree
    private fun searchNode(current: Node, data: Int): Node? {
        if (data == current.data) {
            return current
        } else if (data < current.data) {
            return current.left?.let { searchNode(it, data) }
        } else {
            return current.right?.let { searchNode(it, data) }
        }
    }

    // Function to delete a node from the binary search tree
    fun delete(data: Int) {
        root?.let { root = deleteNode(it, data) }
    }

    // Function to delete a node recursively from the binary search tree
    private fun deleteNode(root: Node, data: Int): Node? {
        if (root.data == data) {
            if (root.left == null && root.right == null) {
                // Node to be deleted has no children
                return null
            } else if (root.left == null) {
                // Node to be deleted has right child only
                return root.right
            } else if (root.right == null) {
                // Node to be deleted has left child only
                return root.left
            } else {
                // Node to be deleted has both left and right child
                var minValue = findMin(root.right)
                root.data = minValue
                root.right = deleteNode(root.right!!, minValue)
                return root
            }
        } else if (data < root.data) {
            // Node to be deleted is on the left subtree
            root.left = deleteNode(root.left!!, data)
        } else {
            // Node to be deleted is on the right subtree
            root.right = deleteNode(root.right!!, data)
        }
        return root
    }

    // Function to find the minimum value in a given subtree
    private fun findMin(root: Node): Int {
        var current = root
        while (current.left != null) {
            current = current.left!!
        }
        return current.data
    }
}

fun main() {
    // Create a new binary search tree
    val tree = BinaryTree

    // Insert nodes in the binary search tree
    tree.insert(Node(5))
    tree.insert(Node(3))
    tree.insert(Node(9))
    tree.insert(Node(1))
    tree.insert(Node(7))

    // Search for a node in the binary search tree
    val foundNode = tree.search(9)

    // Delete a node from the binary search tree
    tree.delete(1)
}