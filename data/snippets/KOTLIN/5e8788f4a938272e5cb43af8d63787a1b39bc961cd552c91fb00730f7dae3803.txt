/**
 * A BankAccount class that represents a user's bank account
 * @property accountNumber a string representing the user's account number
 * @property accountType a string representing the type of account (e.g. checking, savings)
 * @property balance a double representing the current balance of the account
 * @property transactions a list of Transaction objects containing all the transactions made on the account
 */
class BankAccount(
    val accountNumber: String,
    val accountType: String,
    var balance: Double = 0.0,
    val transactions: MutableList<Transaction> = mutableListOf()
) {
    /**
     * A function that allows the user to make a deposit to the account
     * @param amount a double representing the amount to be deposited
     */
    fun deposit(amount: Double) {
        balance += amount
        transactions.add(Transaction(amount, "Deposit"))
    }

    /**
     * A function that allows the user to make a withdrawal from the account
     * @param amount a double representing the amount to be withdrawn
     */
    fun withdraw(amount: Double) {
        if (balance >= amount) {
            balance -= amount
            transactions.add(Transaction(amount, "Withdrawal"))
        } else {
            println("Insufficient funds")
        }
    }

    /**
     * A function that prints out all the transactions made on the account
     */
    fun printTransactionHistory() {
        for (transaction in transactions) {
            println("${transaction.transactionType}: \$$${transaction.amount}")
        }
    }
}

/**
 * A Transaction class that represents a transaction made on a bank account
 * @property amount a double representing the amount of the transaction
 * @property transactionType a string representing the type of transaction (e.g. deposit, withdrawal)
 */
class Transaction(val amount: Double, val transactionType: String)