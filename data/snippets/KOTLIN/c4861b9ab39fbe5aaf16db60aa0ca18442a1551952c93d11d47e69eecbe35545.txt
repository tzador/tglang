//This code snippet generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm

fun sieveOfEratosthenes(limit: Int): List<Int> {
    //initialize a boolean array with indices representing numbers from 2 to the limit
    val prime = BooleanArray(limit - 1, { true })
    var primeList = mutableListOf<Int>()

    //loop through the array and set non-prime numbers to false
    for (i in 2..limit) {
        if (prime[i - 2]) {
            var j = 2
            while (i * j <= limit) {
                prime[i * j - 2] = false
                j++
            }
        }
    }

    //add all prime numbers to the list
    for (i in 2..limit) {
        if (prime[i - 2]) {
            primeList.add(i)
        }
    }

    return primeList
}

//Example usage and output:
//sieveOfEratosthenes(20) -> [2, 3, 5, 7, 11, 13, 17, 19]