// Data class representing a country with properties name, capital, and population
data class Country(val name: String, val capital: String, val population: Int)

// An extension function that checks if a country is in the EU (based on the list of EU countries)
fun Country.isInEU() : Boolean {
    val euCountries = listOf("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland")
    return this.name in euCountries
}

// A function that calculates the average population of a list of countries
fun getAveragePopulation(countries: List<Country>) : Double {
    var totalPopulation = 0
    for (country in countries) {
        totalPopulation += country.population
    }
    return (totalPopulation / countries.size).toDouble()
}

// Main function that creates a list of countries and calls the above functions
fun main() {
    // Creating a list of countries
    val countries = listOf(Country("United States", "Washington D.C.", 328200000), Country("Canada", "Ottawa", 37590000), Country("Mexico", "Mexico City", 126200000), Country("France", "Paris", 65270000), Country("Italy", "Rome", 60590000))
    
    // Checking if each country is in the EU and printing the result
    for (country in countries) {
        if (country.isInEU()) {
            println("${country.name} is in the EU")
        } else {
            println("${country.name} is not in the EU")
        }
    }
    
    // Calculating and printing the average population of the list of countries
    println("The average population of these countries is ${getAveragePopulation(countries)}")
}