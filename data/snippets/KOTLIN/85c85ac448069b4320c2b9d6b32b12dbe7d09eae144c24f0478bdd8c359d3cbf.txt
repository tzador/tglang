//This code snippet demonstrates the use of higher-order functions and lambda expressions in Kotlin
//Create a list of integers
val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

//Filter out even numbers from the list using higher-order function 'filter'
val evenNumbers = numbers.filter { it % 2 == 0 } 

//Using the map function to square each number in the list and store it in a new list
val squaredNumbers = numbers.map { it * it }

//Reduce the list of numbers to a single sum using 'fold' function
val sum = numbers.fold(0) { acc, number -> acc + number }

//Sorting the list using 'sortedByDescending' function
val descendingNumbers = numbers.sortedByDescending { it }

//Creating a higher-order function that takes in a lambda expression and returns a list of strings
fun transformList(list: List<Int>, transformation: (Int) -> String): List<String> {

    val result = mutableListOf<String>()
    //Using a for loop to perform the transformation on each element in the list
    for (num in list) {
        //Calling the lambda expression and adding the result to the new list
        result.add(transformation(num))
    }
    return result
}

//Calling the transformList function and passing in a lambda expression to convert the numbers to strings
val stringList = transformList(numbers) { it.toString() }

//Printing out the results for each operation
println("Even numbers: $evenNumbers") //Output: [2, 4, 6, 8, 10]
println("Squared numbers: $squaredNumbers") //Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
println("Sum of numbers: $sum") //Output: 55
println("Descending numbers: $descendingNumbers") //Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
println("List of strings: $stringList") //Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]