/**
 * Program to find the greatest common divisor of two numbers using Euclid's algorithm.
 */

// Function to calculate and return the greatest common divisor of two numbers.
fun findGCD(number1: Int, number2: Int): Int {
    // Check for base cases, where one of the numbers is 0 or they are equal.
    if (number1 == 0) return number2
    if (number2 == 0) return number1
    if (number1 == number2) return number1
    
    // Initialize variables for the larger and smaller number.
    var largerNumber = maxOf(number1, number2)
    var smallerNumber = minOf(number1, number2)
    
    // Use a loop to find the GCD.
    while (smallerNumber != 0) {
        // Find the remainder when the larger number is divided by the smaller number.
        val remainder = largerNumber % smallerNumber
        
        // Set the larger number to be the smaller number and the smaller number to be the remainder.
        largerNumber = smallerNumber
        smallerNumber = remainder
    }
    
    // Once the loop is finished, the larger number will be the GCD.
    return largerNumber
}

// Test the function with different sets of input.
println("GCD of 24 and 36 is ${findGCD(24,36)}") // Output: GCD of 24 and 36 is 12
println("GCD of 99 and 55 is ${findGCD(99,55)}") // Output: GCD of 99 and 55 is 11
println("GCD of 0 and 5 is ${findGCD(0,5)}") // Output: GCD of 0 and 5 is 5