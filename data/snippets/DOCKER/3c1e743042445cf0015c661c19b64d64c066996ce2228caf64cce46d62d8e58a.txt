# Create a new volume
docker volume create my_volume
# Run a container and mount the volume to a specific location
docker run -d --name new_container -v my_volume:/etc/data/new_data nginx 
# Copy a file from the host machine to the volume
docker cp /path/to/file.txt new_container:/etc/data/new_data/file.txt
# View the contents of the volume
docker run --rm -v my_volume:/etc/data busybox ls -l /etc/data
# Create a network
docker network create my_network
# Run a container and attach it to the network
docker run -d --name new_container --network my_network nginx 
# Link the new container to an existing container on the network
docker network connect my_network existing_container
# Set environment variables for a container
docker run -d --name new_container -e "DB_HOST=database" -e "DB_USER=username" -e "DB_PASSWORD=password" nginx
# Create a multi-stage Dockerfile and build it
FROM node:12 AS build-stage
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm build
FROM nginx:alpine
COPY --from=build-stage /app/build /usr/share/nginx/html
# Create a Docker image with a specific name and tag
docker build -t my_image:1.0 .
# Push the image to a remote repository
docker push my_image:1.0
# Run a container with a specific port mapping (80:8080)
docker run -d --name new_container -p 80:8080 nginx
# Run a container with a specific amount of memory and CPU shares (512mb of memory and 512 CPU shares)
docker run -d --name new_container -m 512M --cpu-shares 512 nginx