# Dockerfile for a Flask web application 

# Start from the official Python 3.7-slim image
# This will pull an image that has all the necessary dependencies for running a Python application
# This line starts the build process for this Dockerfile
FROM python:3.7-slim 

# Set a working directory inside the container
# This will be the directory that all our application files will be stored in
WORKDIR /app 

# Copy the Flask application code into the container
# The first argument is the file or directory we want to copy into the container
# The second argument is the directory inside the container where we want to copy the files
COPY app.py /app 

# Install any needed dependencies specified in requirements.txt
# This will be a file containing a list of dependencies needed for our application to run
# They will be installed using pip inside the container
COPY requirements.txt /app 
RUN pip install --trusted-host pypi.python.org --requirement requirements.txt 

# Make port 80 available to the world outside this container
# This tells Docker that our application will be listening on port 80
# When we run the container, we will need to map this to a port on our local machine
EXPOSE 80 

# Define our entrypoint command
# This will be the command that is run when our container starts
# In this case, we use the Flask development server to run our application on port 80
ENTRYPOINT ["python", "app.py"]