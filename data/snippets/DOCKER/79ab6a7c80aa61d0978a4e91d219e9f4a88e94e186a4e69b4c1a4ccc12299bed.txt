# Build a Docker image from a specific Dockerfile
docker build -t myimage:latest .  # The -t flag tags the image with a name and a tag
                                 # The . at the end specifies the path to the Dockerfile
                                 
# Run a container from the built image
docker run -d -p 8080:80 myimage:latest  # The -d flag runs the container in detached mode
                                         # The -p flag maps the container's port 80 to the host's port 8080
                                         
# Add a file from the host to the container
docker cp /path/to/file container_name:/path/to/destination  # The cp command copies a file from the host to the container
                                                            # /path/to/file specifies the path of the file on the host
                                                            # container_name is the name of the container to add the file to
                                                            # /path/to/destination specifies the path for the file to be copied to in the container
                                                            
# Install necessary packages in the container
docker exec -it container_name apt-get update && apt-get install -y package_name  # The exec command runs a specified command in a running container
                                                                                 # The -i flag keeps STDIN open and the -t flag allocates a pseudo-TTY
                                                                                 # apt-get update updates the package index and apt-get install installs a specific package
                                                                                 # package_name specifies the name of the package to be installed in the container
                                                                                 
# Create a volume to share data between containers
docker volume create myvolume  # The volume create command creates a named volume for sharing data between containers
                               # myvolume is the name of the volume to be created
                               
# Mount the volume to a container
docker run -v myvolume:/path/to/mount myimage:latest  # The -v flag specifies the volume to be mounted
                                                      # myvolume is the name of the volume created in the previous step
                                                      # /path/to/mount specifies the path where the volume will be mounted in the container
                                                      
# Set environment variables for a container
docker run -e VAR=value myimage:latest  # The -e flag sets an environment variable inside the container
                                        # VAR is the name of the variable and value is the value to be assigned to it
                                        
# Link containers to allow communication between them
docker run --link container1:alias1 --link container2:alias2 myimage:latest  # The --link flag links the specified container with a specified alias to the container
                                                                             # container1 is the name of the first container to be linked
                                                                             # alias1 is the alias assigned to the first container for communication
                                                                             # container2 is the name of the second container to be linked
                                                                             # alias2 is the alias assigned to the second container for communication
                                                                             # myimage is the name of the image to run the container from
                                                                             # latest is the tag of the image