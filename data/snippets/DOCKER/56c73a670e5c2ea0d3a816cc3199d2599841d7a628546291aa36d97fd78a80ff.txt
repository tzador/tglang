# Here we are creating a Dockerfile, which is a text document that contains all the commands needed to assemble an image. 

# We start with the 'FROM' command to specify the base image we want to use. In this case, we are using the official Python 3.8 image from Docker Hub.
FROM python:3.8

# We create a directory inside the container which will hold our application code. We use the 'WORKDIR' command to change the current working directory to this new directory.
WORKDIR /app

# We copy all the files from our current directory to the container's working directory.
COPY . /app

# Next, we use the 'RUN' command to execute any necessary commands inside the container. Here, we are using pip to install all the dependencies for our application.
RUN pip install -r requirements.txt

# We use the 'EXPOSE' command to inform Docker that our application will be listening on port 5000.
EXPOSE 5000

# Finally, we use the 'ENTRYPOINT' command to specify the command that will be executed when the container is launched. In this case, we are running the 'python' command with our 'app.py' file as an argument.
ENTRYPOINT ["python", "app.py"]

# We can now build our Docker image using the 'docker build' command.
# docker build -t myapp .

# We can then run our Docker container using the 'docker run' command, mapping port 5000 on the host to port 5000 in the container.
# docker run -p 5000:5000 myapp