# Creates a new network named my-network
docker network create my-network

# Creates a Docker container based on the image "nginx" with the name "my-container"
# with port 80 exposed and the container attached to the created network
# with a custom label and a specific restart policy
docker create --name my-container -p 80:80 --network my-network --label "environment=production" --restart=always nginx

# Runs the Docker container in detached mode, prints the container ID on exit,
# activates the REPL and mounts a volume named "data" from the host's "my-directory" to the container's "/usr/share/nginx/html"
docker run -d --rm --name my-container -p 80:80 --network my-network --mount type=bind,source=my-directory,target=/usr/share/nginx/html nginx

# Builds and tags a Docker image with the name "my-image" and the tag "latest"
docker build -t my-image:latest .

# Pulls an image from Docker Hub with the name "my-image" and the tag "latest"
docker pull my-image:latest

# Logs in to a Docker registry with the username "my-username" and the password "my-password"
# and sets the logged in user as the owner of the previously built image "my-image:latest"
docker login --username my-username --password my-password
docker push my-image:latest

# Stops and removes the container
docker stop my-container
docker rm my-container

# Stops and removes all containers, images, networks and volumes
# that are not associated with a container
docker system prune