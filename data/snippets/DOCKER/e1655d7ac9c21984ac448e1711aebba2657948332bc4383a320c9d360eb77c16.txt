FROM alpine:latest

# Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD commands
WORKDIR /app

# Copy the files from current directory to the working directory with the
# EXCLUDE (.dockerignore) option, if present.
COPY . .

# Store the version number of redis to a variable
ARG REDIS_VERSION=6.0.9

# Install the redis server with the specified version number
RUN apk add --no-cache redis=${REDIS_VERSION}

# Expose port 6379 from the container
EXPOSE 6379

# Start the redis server when the container is launched
CMD ["redis-server"]

# Define the default command to be run when starting the container
ENTRYPOINT ["python", "app.py"]

# Set environment variables for the container
ENV MYSQL_HOST=localhost \
    MYSQL_USER=admin \
    MYSQL_PASSWORD=test123 \
    MYSQL_DB=my_database

# Run commands inside the container as a non-root user
USER nonrootuser

# Define a volume mount to persist data at the specified path
VOLUME ["/app/data"]

# Set a healthcheck for the container
HEALTHCHECK --interval=30s --timeout=3s CMD redis-cli ping

# Add a label to the container
LABEL maintainer="John Doe <johndoe@example.com>"

# Specify the metadata of the image
# Use the format <key>=<value>, where the value can be a list separated by spaces.
# Examples:
LABEL version="1.0.0" \
      description="Docker image for a python web application" \
      vendor="Example Corp"

# Add a multi-line comment to the container
# This is a multiline
# COMMENT example
MAINTAINER Jane Smith <jane@example.com>

# Set the entrypoint to be used with CMD as parameters
ENTRYPOINT ["command-name"]

# Set the default arguments for the entrypoint
CMD ["default-argument-1", "default-argument-2"]

# Define a network for the container
NETWORK my_network

# Mount a directory from the host to the container at the specific path
VOLUME /host/directory:/container/directory

# Set a custom user and group ID for the container
USER 1001:1001

# Set custom labels for the volumes
LABEL VOLUME_DIR="/host/directory" \
      VOLUME_NAME="app_data"

# Expose a range of ports from the container
EXPOSE 3000-4000

# Specify the user who will run the container commands
USER appuser

# Set the working directory for the user
WORKDIR /home/appuser

# Execute a shell or command inside the container
RUN /bin/bash -c "echo 'Hello World!'"