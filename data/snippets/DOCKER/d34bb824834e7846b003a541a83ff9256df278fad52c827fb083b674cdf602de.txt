FROM ubuntu:18.04

# Sets the working directory for subsequent commands
WORKDIR /app

# Copies files from host machine to container's filesystem
ADD . /app

# Exposes port 8080 to the outside world
EXPOSE 8080

# Installs necessary packages and depedencies
RUN apt-get update && apt-get install -y \
  python3 \
  python3-dev \
  python3-pip \
  nginx

# Copies the nginx configuration file from host to container
COPY nginx.conf /etc/nginx/nginx.conf

# Installs Python dependencies from the requirements.txt file
RUN pip3 install -r requirements.txt

# Sets the environment variable for Flask app
ENV FLASK_APP app.py

# Runs the Flask application when the container is started
CMD ["sh", "-c", "flask run --host=0.0.0.0"]

# Sets the entrypoint for the container
ENTRYPOINT ["sh", "-c", "nginx && exec $0", ""] 

# Mounts a volume from the host machine to the container to persist data
VOLUME ["/data"]

# Sets a label for the container
LABEL version="1.0"

# Specifies the user to run commands within the container
USER root

# Sets the default command to be executed when the container is started
CMD ["sh"] 

# Defines an argument that can be passed in during build time
ARG username

# Prints out a message using the argument passed in during build time
RUN echo "Hello $username, welcome to the container!" 

# Sets a default value for the argument if not passed in during build time
ARG database_url="https://www.example.com"

# Prints out the value of the argument passed in during build time
RUN echo "Database URL: $database_url"

# Specifies the default directory where commands are executed within the container
WORKDIR /app/my_project

# Runs a shell command within the container
RUN sh -c "echo 'This is a complex command'"

# Copies files from a remote source to the container's filesystem using SSH
ADD . user@host:/app

# Removes unnecessary packages and files to optimize the container's size
RUN apt-get --purge remove -y \
  python3-dev \
  build-essential \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*