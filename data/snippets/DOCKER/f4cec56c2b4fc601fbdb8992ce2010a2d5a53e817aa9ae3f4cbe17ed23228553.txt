version: "3.8"    # specifies the version of Docker Compose used

services:         # defines the services to be built and run
  web:            # name of the service
    build:        # build instructions for the service
      context: .  # specifies the build context as the current directory
      dockerfile: Dockerfile  # specifies the Dockerfile to be used for building
    ports:        # specifies the ports to be exposed on the host
      - "8080:80" # maps the host port 8080 to the container port 80
    volumes:      # specifies the volumes to be mounted in the container
      - .:/app    # mounts the current directory as a volume in the container
    command: npm start  # specifies the command to be run when the container starts
    environment:        # specifies the environment variables to be set
      - NODE_ENV=development  # sets NODE_ENV variable to development mode
      - DB_HOST=database      # sets DB_HOST variable to the host name of the database container

  database:    # name of the database service
    image: mysql:latest   # specifies the image to use for the database
    environment:          # specifies the environment variables to be set
      - MYSQL_ROOT_PASSWORD=secret      # sets the root password for the database
      - MYSQL_DATABASE=users_db         # sets the name of the database to be created

  nginx:   # name of the nginx service
    image: nginx:latest   # specifies the image to use for nginx server
    ports:                # specifies the ports to be exposed on the host
      - "80:80"           # maps the host port 80 to the container port 80
      - "443:443"         # maps the host port 443 to the container port 443
    volumes:              # specifies the volumes to be mounted in the container
      - ./nginx.conf:/etc/nginx/nginx.conf  # mounts the nginx configuration file
      - /var/log/nginx:/var/log/nginx       # mounts the nginx log directory
    depends_on:           # specifies the dependencies for this service
      - web               # nginx server depends on the web service being running

  redis:    # name of the redis service
    image: redis:latest    # specifies the image to use for redis server
    ports:                 # specifies the ports to be exposed on the host
      - "6379:6379"        # maps the host port 6379 to the container port 6379
    volumes:               # specifies the volumes to be mounted in the container
      - /data:/data        # mounts the data directory as a volume in the container
    command: redis-server --appendonly yes  # specifies the command to be run when the container starts


networks:        # defines the networks to be used by the services
  default:       # default network
    driver: bridge # specifies the driver to be used for the network