# This is a Dockerfile that builds an image for a simple Flask web application

# Use the latest Python image as the base image
FROM python:latest

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Expose the port that the Flask app will be running on
EXPOSE 5000

# Define the command to run when the container is started
CMD ["python", "app.py"]

# Build the image using the Dockerfile in this directory
# The image will be tagged as "my-flask-app"
# The "." indicates the current working directory
# The "-t" flag allows us to tag our image
# The "--build-arg" flag allows us to pass in build-time variables
# The "version" build-time variable will allow us to specify different versions of our image
# The "build-arg" flag is only available in Docker version 17.05 or higher
# For earlier versions, use "ENV" to set build-time variables
# For example: ENV version=1.0.0
# For more information, see the official Docker documentation: https://docs.docker.com/engine/reference/commandline/build/
docker build -t my-flask-app . --build-arg version=1.0.0

# Run the container based on the image that was just built
# The "-d" flag runs the container in detached mode
# The "-p" flag maps the exposed port to the specified port on the host machine
# The "--name" flag allows us to assign a name to the container for easier management
# The "-e" flag allows us to pass in environment variables to the container
# The "FLASK_ENV" environment variable sets the Flask app to run in development mode
# For more information, see the official Docker documentation: https://docs.docker.com/engine/reference/commandline/run/
docker run -d -p 5000:5000 --name my-flask-container -e FLASK_ENV=development my-flask-app:1.0.0