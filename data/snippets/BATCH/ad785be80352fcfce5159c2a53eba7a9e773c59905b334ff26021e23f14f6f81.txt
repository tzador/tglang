:: This is a comment line
@echo off
:: This command turns off command echoing.

setlocal EnableDelayedExpansion
:: This command enables the use of delayed expansion in variables, allowing variables to be expanded at execution time.

set /a num1=5
set /a num2=2
set /a ans=%num1%+%num2%
:: The "set /a" command assigns a numerical value to a variable. In this case, we are assigning the values 5 and 2 to the variables num1 and num2, respectively. We then use the "set /a" command again to assign the sum of num1 and num2 to the variable ans.

echo The sum of %num1% and %num2% is %ans%.
:: The "echo" command outputs the given text. In this case, we are printing the sum of num1 and num2 by expanding the variables using the "%" symbol.

if "%num1%" gtr "%num2%" (
    :: This is a conditional statement. It checks if num1 is greater than num2.
    echo %num1% is greater than %num2%.
) else (
    :: If the condition is not met, this block of code will run.
    echo %num2% is greater than %num1%.
)

set /p name=Enter your name:
:: The "set /p" command prompts the user to enter a string value and assigns it to the variable name.

echo Hello, %name%. Welcome to my program!
:: This prints a personalized greeting using the value entered by the user.

for %%G in (1,2,3,4,5) do (
    :: This is a for loop that iterates through the numbers 1 to 5.
    set /a square=%%G * %%G
    :: This multiplies the current number by itself and stores the result in the variable square.
    echo The square of %%G is %square%.
    :: Prints the number and its square value.
)

choice /c YN /m "Do you want to continue?"
:: The "choice" command prompts the user to make a choice from the given options. Here, the user can choose between Y or N, and the chosen option is stored in the variable errorlevel.

if errorlevel 2 (
    :: If the user chooses N, this block of code will run.
    echo Thank you for using my program.
) else (
    :: If the user chooses Y or any other key, this block of code will run.
    echo Continuing to the next step...
)

for /l %%G in (1,1,10) do (
    :: This is another type of for loop that iterates through the numbers 1 to 10.
    echo %%G
    :: Prints the current number.
)

pause
:: This command pauses the execution of the program, allowing the user to see the output and preventing the window from closing immediately.