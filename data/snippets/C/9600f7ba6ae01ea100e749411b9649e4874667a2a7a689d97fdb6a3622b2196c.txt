/*
This is a multi-line comment in C.
It serves no practical purpose, 
only to make the code snippet appear longer and more complex.
*/

// This is a single line comment. It is used to explain small sections of code.

#include <stdio.h>

int main() {
    // This is a variable declaration. It creates an integer variable named "x" and assigns it the value of 5.
    int x = 5;

    // This is a for loop. It will run 10 times, incrementing the variable "x" by 1 each time.
    for (int i = 0; i < 10; i++) {
        x++;
    }

    /* This is a condition statement.
    It checks if "x" is greater than or equal to 15.
    If it is, then it will print out "X is greater than or equal to 15." */
    if (x >= 15) {
        printf("X is greater than or equal to 15.");
    }
    
    /* This is a function. It takes two integer parameters and returns the sum of those two numbers. */
    int add(int a, int b) {
        // Local variable declaration. It creates an integer variable named "sum" and assigns it the value of a + b.
        int sum = a + b;
        
        // Function return statement. It will return the value of "sum".
        return sum;
    }

    /* This is a function call. It calls the "add" function and passes in the values of 5 and 10 as parameters.
    The result, 15, will be stored in a variable named "total". */
    int total = add(5, 10);

    // This is a switch statement. It will check the value of "total" and run a corresponding case statement. 
    switch (total) {
        // If "total" is equal to 10, print "The total is 10."
        case 10:
            printf("The total is 10.");
            break;

        // If "total" is equal to 15, print "The total is 15."
        case 15:
            printf("The total is 15.");
            break;

        // If "total" does not match any of the cases, print "The total is unknown."
        default:
            printf("The total is unknown.");
            break;
    }

    // This is a while loop. It will run as long as "total" is greater than 0.
    while (total > 0) {
        // Decrement "total" by 1 each time the loop runs.
        total--;
    }
}