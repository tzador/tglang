/* This is a complex code snippet that takes in two arrays and performs matrix multiplication */
#include <stdio.h>
#include <stdlib.h>

/* Function to perform matrix multiplication */
void matrixMultiplication(int a[][3], int b[][2], int result[][2], int rows1, int cols1, int rows2, int cols2){

    /* Loop through rows of first matrix */
    for(int i = 0; i < rows1; i++) {
        /* Loop through columns of second matrix */
        for(int j = 0; j < cols2; j++) {
            /* Initialize sum variable for each element in result matrix */
            result[i][j] = 0;
            /* Perform dot product for each element based on row and column */
            for(int k = 0; k < rows2; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}

int main()
{
    /* Initialize first matrix */
    int matrix1[2][3] = {{1, 2, 3}, {4, 5, 6}};

    /* Initialize second matrix */
    int matrix2[3][2] = {{7, 8}, {9, 10}, {11, 12}};

    /* Initialize result matrix */
    int result[2][2];

    /* Get the number of rows and columns for first matrix */
    int rows1 = sizeof(matrix1) / sizeof(matrix1[0]);
    int cols1 = sizeof(matrix1[0]) / sizeof(matrix1[0][0]);

    /* Get the number of rows and columns for second matrix */
    int rows2 = sizeof(matrix2) / sizeof(matrix2[0]);
    int cols2 = sizeof(matrix2[0]) / sizeof(matrix2[0][0]);

    /* Perform matrix multiplication */
    matrixMultiplication(matrix1, matrix2, result, rows1, cols1, rows2, cols2);

    /* Print out the result matrix */
    printf("Result Matrix:\n");
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    return 0;
}