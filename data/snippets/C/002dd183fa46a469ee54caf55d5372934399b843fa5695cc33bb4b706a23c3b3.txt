/**
* This is a function to find the median of an array of integers.
* @param arr The array of integers.
* @param size The size of the array.
* @return The median value of the array.
*/
int findMedian(int arr[], int size) {
    // Sort the array using quicksort algorithm
    quicksort(arr, 0, size - 1);

    // If size of array is odd, return middle element
    if (size % 2 != 0) {
        return arr[size / 2];
    }
    // If size of array is even, return average of two middle elements
    else {
        int middle1 = arr[size / 2];
        int middle2 = arr[(size / 2) - 1];
        return (middle1 + middle2) / 2;
    }
}

/**
* This is a function to sort an array using quicksort algorithm.
* @param arr The array to be sorted.
* @param low The lower bound of the array.
* @param high The upper bound of the array.
*/
void quicksort(int arr[], int low, int high) {
    // Base case: If the array size is 1 or less, it is already sorted
    if (low >= high) {
        return;
    }

    // Choose pivot element
    int pivot = arr[high];

    // Partition the array and return pivot index
    int pivot_idx = partition(arr, low, high, pivot);

    // Recursively sort left and right subarrays
    quicksort(arr, low, pivot_idx - 1);
    quicksort(arr, pivot_idx + 1, high);
}

/**
* This is a function to partition an array around a pivot element.
* @param arr The array to be partitioned.
* @param low The lower bound of the array.
* @param high The upper bound of the array.
* @param pivot The pivot element.
* @return The index of the pivot element in the partitioned array.
*/
int partition(int arr[], int low, int high, int pivot) {
    // Initialize index of smaller element
    int i = (low - 1);

    // Loop through all elements in subarray
    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than pivot, swap it with current index
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap pivot element with current index
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    // Return the new index of the pivot element
    return (i + 1);
}