/* This code snippet solves the Knapsack problem using dynamic programming */

#include <stdio.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to find the maximum value that can be added to the knapsack
int knapsack(int weight[], int value[], int capacity, int n) {

    // Initializing a 2D array to store values for sub-problems
    int dp[n + 1][capacity + 1];

    // Loop for filling in the dp array
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= capacity; j++) {

            // Filling the first row and first column with 0
            if (i == 0 || j == 0) {
                dp[i][j] = 0;
            }

            // If weight of the current item is lower than knapsack capacity
            // Then we have two choices: either include it or exclude it
            else if (weight[i-1] <= j) {
                // Maximize value by including the item or not including it
                dp[i][j] = max(value[i-1] + dp[i-1][j-weight[i-1]], dp[i-1][j]);
            }

            // If weight of the current item is more than capacity
            // Then we cannot include it in the knapsack
            else {
                dp[i][j] = dp[i-1][j];
            }
        }
    }

    // The maximum value that can be added to the knapsack is stored at the bottom right cell
    return dp[n][capacity];
}

// Driver code
int main() {
    // Weight and value arrays representing the items
    int weight[] = {10, 20, 30};
    int value[] = {60, 100, 120};

    // Maximum capacity of the knapsack
    int capacity = 50;

    // Finding the maximum value that can be added to the knapsack
    int max_value = knapsack(weight, value, capacity, 3);

    // Displaying the result
    printf("The maximum value that can be added to the knapsack is: %d", max_value);

    return 0;
}