#include <stdio.h>

struct Node // creating a struct for a linked list node
{
    int data; // data stored in the node
    struct Node *next; // pointer to the next node
};

// function to insert a new node at the beginning of a linked list
void insertAtBeginning(struct Node **headRef, int data)
{
    // allocating memory for a new node
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    
    // assigning data to the new node
    newNode->data = data;
    
    // setting the next pointer of the new node to point to the current head
    newNode->next = *headRef;
    
    // setting the head to point to the new node
    *headRef = newNode;
}

// function to print the linked list
void printList(struct Node *head)
{
    // traversing the linked list
    while (head != NULL)
    {
        // printing the data in each node
        printf("%d ", head->data);
        
        // moving to the next node
        head = head->next;
    }
}

// main function
int main()
{
    // creating a linked list with three nodes
    struct Node *head = NULL;
    struct Node *second = NULL;
    struct Node *third = NULL;
    
    // allocating memory for the three nodes
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    
    // assigning data to the nodes and setting their next pointers
    head->data = 1;
    head->next = second;
    second->data = 2;
    second->next = third;
    third->data = 3;
    third->next = NULL;
    
    // printing the original linked list
    printf("Original Linked List: ");
    printList(head);
    printf("\n");

    // inserting a new node at the beginning of the linked list
    insertAtBeginning(&head, 4);

    // printing the updated linked list
    printf("Updated Linked List: ");
    printList(head);
    printf("\n");
    
    return 0;
}