// This code snippet performs a quicksort algorithm to sort an array of integers
#include <stdio.h>

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high) {
    // Choose the pivot element as the last element in the array
    int pivot = arr[high];
    // Initialize the index of smaller element
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            // Increment the index of smaller element
            i++;
            // Swap arr[i] and arr[j]
            swap(&arr[i], &arr[j]);
        }
    }
    // Swap arr[i+1] and arr[high]
    swap(&arr[i + 1], &arr[high]);
    // Return the pivot index
    return (i + 1);
}

// Function to implement quicksort algorithm
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        // Partition the array
        int pivotIndex = partition(arr, low, high);

        // Sort the left subarray
        quicksort(arr, low, pivotIndex - 1);
        // Sort the right subarray
        quicksort(arr, pivotIndex + 1, high);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Driver program to test the quicksort algorithm
int main() {
    int arr[] = {20, 10, 5, 15, 25, 30};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: \n");
    printArray(arr, size);

    // Sort the array using quicksort
    quicksort(arr, 0, size - 1);

    printf("Sorted array: \n");
    printArray(arr, size);

    return 0;
}