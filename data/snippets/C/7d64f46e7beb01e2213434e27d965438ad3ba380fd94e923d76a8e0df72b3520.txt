#include<stdio.h> // this header file contains various input/output methods
// defining a structure for a binary tree node
struct treeNode{
    int data; // data stored in the node
    struct treeNode *left; // pointer to the left child node
    struct treeNode *right; // pointer to the right child node
};

// function to insert a new node into the binary tree
struct treeNode* insert(struct treeNode *tree, int value){
    // if tree is empty, create a new node with given data and return its address
    if(tree == NULL){
        struct treeNode *newNode = (struct treeNode*)malloc(sizeof(struct treeNode));
        newNode->data = value;
        newNode->left = NULL;
        newNode->right = NULL;
        return newNode;
    }
    // if value is less than current node's data, insert it into the left subtree
    if(value < tree->data){
        tree->left = insert(tree->left, value);
    }
    // if value is greater than or equal to current node's data, insert it into the right subtree
    else{
        tree->right = insert(tree->right, value);
    }
    return tree;
}

// function to print the binary tree in preorder traversal
void preorder(struct treeNode *tree){
    // base case: if tree is empty, return
    if(tree == NULL){
        return;
    }
    // print current node's data
    printf("%d", tree->data);
    // recursively call preorder on left subtree
    preorder(tree->left);
    // recursively call preorder on right subtree
    preorder(tree->right);
}

int main(){
    // initializing root node
    struct treeNode *root = NULL;
    // inserting elements into the binary tree
    root = insert(root, 10);
    root = insert(root, 5);
    root = insert(root, 15);
    root = insert(root, 2);
    root = insert(root, 7);
    // printing the binary tree in preorder traversal
    printf("Binary tree in preorder traversal: \n");
    preorder(root);
    return 0;
}