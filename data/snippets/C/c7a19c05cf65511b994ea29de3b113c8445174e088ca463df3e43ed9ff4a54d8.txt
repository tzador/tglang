/*
This code snippet demonstrates finding the longest common subsequence
of two strings using dynamic programming.
*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

/*
The function lcs returns the length of the longest common subsequence
of two given strings
*/
int lcs(char* str1, char* str2, int len1, int len2){
    /*
    The 2D array lcs_array stores the lengths of longest common subsequences
    for substrings of str1 and str2
    */
    int lcs_array[len1+1][len2+1];
    
    /*
    Populate the first row and column of lcs_array, representing the
    base cases when either of the strings is empty
    */
    for(int i=0; i<=len1; i++){
        for(int j=0; j<=len2; j++){
            if(i == 0 || j == 0){
                lcs_array[i][j] = 0;
            }
        }
    }
    
    /*
    Fill the rest of the lcs_array using a bottom-up approach
    */
    for(int i=1; i<=len1; i++){
        for(int j=1; j<=len2; j++){
            if(str1[i-1] == str2[j-1]){
                lcs_array[i][j] = lcs_array[i-1][j-1] + 1;
            }
            else{
                lcs_array[i][j] = max(lcs_array[i-1][j], lcs_array[i][j-1]);
            }
        }
    }
    
    /*
    Return the last element of lcs_array, which represents the length of
    the longest common subsequence
    */
    return lcs_array[len1][len2];
}

int max(int a, int b){
    return (a > b)? a : b;
}

/*
Main function to demonstrate the usage of lcs function
*/
int main(){
    char str1[] = "programming";
    char str2[] = "language";
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    printf("The length of the longest common subsequence of %s and %s is %d", str1, str2, lcs(str1, str2, len1, len2)); 
    return 0;
}