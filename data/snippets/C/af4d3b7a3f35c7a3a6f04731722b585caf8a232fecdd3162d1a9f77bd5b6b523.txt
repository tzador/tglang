#include <stdio.h>
#include <stdlib.h>

// Function to swap two integers
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform QuickSort recursively 
void quickSort(int arr[], int low, int high) {
    // Base case 
    if (low >= high) {
        return;
    }

    // Choose pivot as the last element in the current partition 
    int pivot = arr[high];

    // Initialize pointers for comparing elements and
    // track the partition
    int i = low, j = low;
    int mid = low;

    while (j <= high) {
        // If element is smaller than pivot, swap with element at i and advance both pointers
        if (arr[j] < pivot) {
            swap(&arr[i], &arr[j]);
            i++;
        }
        // Increment j to track the next element
        j++;
    }

    // Place pivot in between smaller and larger elements by swapping with element at i
    swap(&arr[i], &arr[high]);

    // Divide the array into two and perform QuickSort recursively on the two subarrays
    quickSort(arr, low, i - 1);
    quickSort(arr, i + 1, high);
}

// Main function to test QuickSort
int main() {
    // Initialize an array with unsorted integers
    int arr[] = {40, 21, 30, 12, 25, 5};

    // Calculate the size of the array
    int n = sizeof(arr) / sizeof(arr[0]);

    // Print unsorted array
    printf("Unsorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Perform QuickSort on the array
    quickSort(arr, 0, n - 1);

    // Print sorted array
    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}