/*
This code snippet calculates the value of pi using the Monte Carlo method

The Monte Carlo method is a statistical approach to solving problems that involve random variables. It works by generating random points within a given area and determining the fraction of those points that fall within a specific region.

In this code snippet, we will use this method to approximate the value of pi by generating random points within a square with side length of 2 and determining the fraction of those points that fall within a circle with a radius of 1. The ratio of the points within the circle to the total number of points generated can be used to approximate the value of pi.

To improve accuracy, the number of points generated can be increased.

*/

#include <stdio.h>
#include <stdlib.h>

// Function to generate a random number between 0 and 1
double generate_random()
{
    return (double) rand() / RAND_MAX;
}

// Function to calculate the distance from a given point to the origin
double calculate_distance(double x, double y)
{
    return sqrt(pow(x, 2) + pow(y, 2));
}

int main()
{
    // Initialize variables to hold the total points and points within the circle
    int total_points = 1000;
    int points_within_circle = 0;

    // Generate random points and check if they fall within the circle
    for (int i = 0; i < total_points; i++)
    {
        // Generate random x and y coordinates within the square
        double x = generate_random() * 2 - 1;
        double y = generate_random() * 2 - 1;

        // Calculate the distance from the point to the origin
        double distance = calculate_distance(x, y);

        // If the distance is less than 1, the point falls within the circle
        if (distance <= 1)
        {
            points_within_circle++;
        }
    }

    // Calculate the value of pi using the ratio of points within the circle to total points
    double pi = (double) points_within_circle / total_points * 4;

    // Print the result
    printf("The value of pi is approximately: %lf\n", pi);

    return 0;
}