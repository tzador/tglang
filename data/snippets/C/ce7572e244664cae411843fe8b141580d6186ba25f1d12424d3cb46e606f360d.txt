#include<stdio.h>
#include<string.h>

// Define a function that takes in two integer arrays as parameters
// and returns a new array with the elements from both arrays but in reversed order
int* reverse_array(int arr1[], int arr2[], int size1, int size2){
    
    // Initialize a new array of size equal to the sum of the sizes of the two input arrays
    int* reversed_arr = (int*)malloc((size1 + size2) * sizeof(int));
    
    // Copy the elements from arr1 into the new array in reverse order
    for (int i = 0; i < size1; i++){
        reversed_arr[i] = arr1[size1 - i - 1];
    }
    
    // Copy the elements from arr2 into the new array after the elements from arr1
    for (int j = 0; j < size2; j++){
        reversed_arr[size1 + j] = arr2[size2 - j - 1];
    }
    
    // Return the new array
    return reversed_arr;
}

int main() {
    
    // Initialize two arrays with integer elements
    int array1[] = {1, 2, 3, 4, 5};
    int array2[] = {6, 7, 8, 9, 10};
    
    // Get the size of each array using the sizeof operator
    int size1 = sizeof(array1) / sizeof(int);
    int size2 = sizeof(array2) / sizeof(int);
    
    // Call the reverse_array function and pass in the two arrays and their sizes as parameters
    int* result = reverse_array(array1, array2, size1, size2);
    
    // Print out the elements of the new reversed array
    for (int k = 0; k < size1 + size2; k++){
        printf("%d ", result[k]);
    }
    
    // Free the memory allocated for the new array
    free(result);
    
    return 0;
}