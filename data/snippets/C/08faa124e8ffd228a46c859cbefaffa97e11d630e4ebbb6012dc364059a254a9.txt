#include <stdio.h>
#include <stdlib.h>

void swapping(int *x, int *y) // function to swap two integers{
    int temp = *x;
    *x = *y;
    *y = temp;
}

int partition(int arr[], int low, int high) // function to partition the array{
    int pivot = arr[high]; // select the last element as pivot
    int i = low - 1;
    
    for (int j = low; j < high; j++) // iterate through array
    {
        if (arr[j] < pivot) // if element is smaller than pivot, increment i and swap elements
        {
             i++;
             swapping(&arr[i], &arr[j]);
        }
    }
    
    swapping(&arr[i + 1], &arr[high]); // swap the pivot with the element at i+1
    return i + 1; // return the index of the pivot
}

void quickSort(int arr[], int low, int high) // function to perform quick sort
{
    if (low < high) // base case
    {
        int pivot = partition(arr, low, high); // partition the array around the pivot
        quickSort(arr, low, pivot - 1); // recursively call quicksort on the left subarray
        quickSort(arr, pivot + 1, high); // recursively call quicksort on the right subarray
    }
}

int main()
{
    int arr[] = { 7, 1, 5, 3, 8, 2, 6, 4 }; // sample array
    int n = sizeof(arr) / sizeof(arr[0]); // calculate size of array
    
    quickSort(arr, 0, n - 1); // call quicksort function
    
    printf("Sorted array: "); // print sorted array
    for (int i = 0; i < n; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    return 0;
}