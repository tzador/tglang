/* This program calculates the determinant of an n*n matrix using recursion */

// Function to calculate the determinant
int determinant(int matrix[n][n], int n) 
{ 
    int det = 0; 
  
    if (n == 1) // Base case 
        return matrix[0][0]; 
  
    int temp[n][n]; // To store cofactors 
  
    int sign = 1;  // To store sign multiplier 
  
    // Iterate for each element of first row 
    for (int f = 0; f < n; f++) 
    { 
        // Getting cofactor of matrix[0][f] 
        getCofactor(matrix, temp, 0, f, n); 
        det += sign * matrix[0][f] * determinant(temp, n - 1); 
  
        // Alternate sign multiplier 
        sign = -sign; 
    } 
  
    return det; 
} 
  
// Function to get cofactor of matrix[p][q] 
void getCofactor(int matrix[n][n], int temp[n][n], int p, int q, int n) 
{ 
    int i = 0, j = 0; 
  
    // Looping for each element of the matrix 
    for (int row = 0; row < n; row++) 
    { 
        for (int col = 0; col < n; col++) 
        { 
            if (row != p && col != q) 
            { 
                temp[i][j++] = matrix[row][col]; 
  
                // Row is filled, so increase row index and 
                // reset col index 
                if (j == n - 1) 
                { 
                    j = 0; 
                    i++; 
                } 
            } 
        } 
    } 
}