//This code snippet generates a matrix and applies Gaussian elimination to solve a system of linear equations

#include<stdio.h> 
  
// Function to print matrix 
void printMatrix(int n, int A[n][n])
{    
    int i,j;
    for (i = 0; i < n; i++) { 
        for (j = 0; j < n; j++) 
            printf("%d ", A[i][j]); 
        printf("\n"); 
    } 
} 
  
// Function to perform Gaussian elimination 
void gaussianElimination(int n, int A[n][n], int b[n])
{
    int i,j,k, factor;
    // Loop over all columns
    for (j = 0; j < n-1; j++) { 
        // Update all rows below current row
        for (i = j+1; i < n; i++) { 
            // Calculate factor for current row
            factor = A[i][j]/A[j][j]; 
  
            // Update all remaining elements in current row 
            for (k = j+1; k < n; k++) 
                A[i][k] -= factor * A[j][k]; 
  
            // Update b vector
            b[i] -= factor * b[j]; 
        } 
    }
    
    // Back substitution to solve for x vector
    int x[n]; //vector to store solution
    for (i = n-1; i >= 0; i--) { 
        x[i] = b[i]; 
        for (j = i+1; j < n; j++) { 
            x[i] -= A[i][j] * x[j]; 
        } 
        x[i] /= A[i][i]; 
    } 

    // Print solution
    printf("\nSolution vector:\n"); 
    for (i = 0; i < n; i++) 
        printf("%c = %d\n", 'x' + i, x[i]); 
} 
  
int main() 
{ 
    // Input size of matrix
    int n;
    printf("Enter size of matrix: "); 
    scanf("%d", &n);  

    // Input elements of matrix
    int A[n][n];
    printf("Enter elements of matrix:\n");
    int i,j;
    for (i = 0; i < n; i++) { 
        for (j = 0; j < n; j++) 
            scanf("%d", &A[i][j]); 
    } 

    // Input b vector
    int b[n];
    printf("Enter b vector:\n");
    for (i = 0; i < n; i++) 
        scanf("%d", &b[i]); 
  
    // Print initial matrix and b vector
    printf("\nInitial matrix and b vector:\n"); 
    printMatrix(n, A);
    printf("\n"); 
    for (i = 0; i < n; i++) 
        printf("%cx + ", b[i], 'x' + i); 

    // Apply Gaussian elimination 
    gaussianElimination(n, A, b);

    return 0; 
}