/* This is a code snippet in C that creates a linked list 
   with nodes containing strings. Each node has a pointer 
   to the next node and a string value \n*/

// Declare a struct for the node
typedef struct node {
    char* str; // String value
    struct node* next; // Pointer to next node
} node;

// A function to add a new node to the linked list
void addNode(node** head, char* str) {
    // Create a new node and assign the string value
    node* new_node = (node*) malloc(sizeof(node));
    new_node->str = str;
    new_node->next = NULL;
    
    // If list is empty, make the new node the head
    if (*head == NULL) {
        *head = new_node;
    } 
    else {
        // Traverse the list until the end and add the new node
        node* curr_node = *head;
        while (curr_node->next != NULL) {
            curr_node = curr_node->next;
        }
        curr_node->next = new_node;
    }
}

// A function to print the contents of the linked list
void printList(node* head) {
    node* curr_node = head;
    
    // Traverse the list and print each node's string
    while (curr_node != NULL) {
        printf("%s\n", curr_node->str);
        curr_node = curr_node->next;
    }
}

int main() {
    // Declare the head of the linked list
    node* head = NULL;
    
    // Add four nodes to the linked list
    addNode(&head, "Hello");
    addNode(&head, "this");
    addNode(&head, "is");
    addNode(&head, "a linked list.");
    
    // Print the contents of the linked list
    printList(head);
    
    return 0;
}

// Output:
// Hello
// this
// is
// a linked list.