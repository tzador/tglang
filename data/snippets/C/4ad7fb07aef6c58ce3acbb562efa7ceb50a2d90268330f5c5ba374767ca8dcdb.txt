// This program uses dynamic programming to find the longest common subsequence between two strings

#include <stdio.h>
#include <string.h>

// Function to find the maximum of two integers
int max(int a, int b){
    if(a > b){
        return a;
    }
    else{
        return b;
    }
}

// Function to find the length of the longest common subsequence
int findLCS(char* string1, char* string2, int m, int n){
    // Declare a 2D array to store the lengths of the common subsequences
    int LCS[m + 1][n + 1];

    // Loop through the strings, starting from the bottom right corner of the 2D array
    for(int i = 0; i <= m; i++){
        for(int j = 0; j <= n; j++){
            // If either string is empty, then there is no common subsequence, so set length to 0
            if(i == 0 || j == 0){
                LCS[i][j] = 0;
            }
            // If the characters in the strings match, add 1 to the length of the common subsequence
            else if(string1[i - 1] == string2[j - 1]){
                LCS[i][j] = LCS[i - 1][j - 1] + 1;
            }
            // If the characters in the strings don't match, take the maximum of the lengths of the previous common subsequences
            else{
                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1]);
            }
        }
    }

    // Return the length of the longest common subsequence
    return LCS[m][n];
}

// Main function
int main(){
    // Initialize two strings
    char string1[100], string2[100];

    // Get input from the user for the two strings
    printf("Enter String 1: ");
    scanf("%s", string1);
    printf("Enter String 2: ");
    scanf("%s", string2);

    // Get the length of the two strings
    int m = strlen(string1);
    int n = strlen(string2);

    // Call the function to find the length of the longest common subsequence
    int longest = findLCS(string1, string2, m, n);

    // Print the length of the longest common subsequence
    printf("The length of the longest common subsequence is: %d", longest);

    return 0;
}