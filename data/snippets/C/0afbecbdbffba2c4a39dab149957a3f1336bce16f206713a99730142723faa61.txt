/* This code snippet generates a linked list data structure */

#include <stdio.h> // include standard input/output library
#include <stdlib.h> // include standard library for memory allocation

struct node { // define structure for node in linked list
    int data; // integer data field
    struct node *next; // pointer to next node 
};

int main() { // main function
    struct node *head = NULL; // initialize head pointer to NULL
    struct node *current = NULL; // initialize current pointer to NULL
    struct node *new_node = NULL; // initialize new_node pointer to NULL
    
    // create 5 new nodes with different data
    for (int i = 1; i <= 5; i++) {
        new_node = (struct node*)malloc(sizeof(struct node)); // allocate memory for new node
        new_node->data = i; // assign data to new node
        new_node->next = NULL; // make new node point to NULL
        
        if (head == NULL) { 
            head = new_node; // make head point to first node
        } else {
            current = head; // make current point to head
            while (current->next != NULL) { 
                current = current->next; // traverse the list to find the last node
            }
            current->next = new_node; // make current node point to new node
        }
    }
    
    // print the linked list
    current = head; // make current point to head
    while (current != NULL) { // while current is not pointing to NULL
        printf("%d ", current->data); // print the data in current node
        current = current->next; // move current to next node
    }
    
    // free allocated memory
    current = head; // make current point to head
    while (current != NULL) { // while current is not pointing to NULL
        struct node *temp = current; // create temporary pointer to current node
        current = current->next; // move current to next node
        free(temp); // free memory allocated to current node
    }
    
    return 0; // exit main function
}