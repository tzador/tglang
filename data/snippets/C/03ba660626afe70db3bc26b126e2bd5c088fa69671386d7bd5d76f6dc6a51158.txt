/**
* Function that sorts an array of integers using quicksort algorithm
* @param int[] array - input array to be sorted
* @param int low - starting index of subarray to be sorted
* @param int high - ending index of subarray to be sorted
**/
void quicksort(int array[], int low, int high) {
    if (low < high) {
        // choose a pivot that divides the array
        int pivot = partition(array, low, high);

        // recursively call quicksort on subarrays
        quicksort(array, low, pivot - 1);
        quicksort(array, pivot + 1, high);
    }
}

/**
* Function that partitions an array and returns the index of the
* pivot element
* @param int[] array - input array to be partitioned
* @param int low - starting index of subarray to be partitioned
* @param int high - ending index of subarray to be partitioned
* @return int - index of the pivot element
**/
int partition(int array[], int low, int high) {
    // choose the rightmost element as the pivot
    int pivot = array[high];
    int i = low;

    // loop through the subarray
    for (int j = low; j < high; j++) {
        // if current element is less than pivot, swap it with element at i
        if (array[j] < pivot) {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;

            // increment i to mark the end of elements smaller than pivot
            i++;
        }
    }

    // swap the pivot element with the element at i
    int temp = array[i];
    array[i] = array[high];
    array[high] = temp;

    // return the index of the pivot element
    return i;
}