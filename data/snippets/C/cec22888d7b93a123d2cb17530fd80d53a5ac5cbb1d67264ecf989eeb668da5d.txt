// Function to create a binary tree from given array 
struct Node* createTree(int arr[], int start, int end)  
{  
    if (start > end) 
    {
        return NULL; 
    }
  
    // Find the middle element 
    int mid = (start + end) / 2; 
  
    // Create a new node with the middle element as the value 
    struct Node* root = newNode(arr[mid]); 
  
    // Recursively create left and right subtrees 
    root->left = createTree(arr, start, mid - 1); 
    root->right = createTree(arr, mid + 1, end); 
  
    return root; 
} 
  
// Function to traverse the tree in inorder and print the elements 
void inOrder(struct Node* root)  
{  
    if (root != NULL)  
    {  
        // Traverse the left subtree first 
        inOrder(root->left); 
  
        // Print the current node 
        printf("%d ", root->data); 
  
        // Traverse the right subtree 
        inOrder(root->right);  
    }  
} 

// Initialize the array with values
int arr[] = {1, 2, 3, 4, 5};

// Calculate the size of the array
int size = sizeof(arr) / sizeof(arr[0]);

// Create the binary tree from the array
struct Node* root = createTree(arr, 0, size - 1);

// Traverse the tree and print the inorder traversal
printf("Inorder traversal of the binary tree created is: ");
inOrder(root);