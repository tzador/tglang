/*
Description: This code snippet implements a quicksort algorithm in C.
*/

#include <stdio.h>

// Function to swap two elements
void swap(int *num1, int *num2) {
    int temp = *num1;
    *num1 = *num2;
    *num2 = temp;
}

// Function to partition the array into two subarrays
int partition(int arr[], int low, int high) {
    // Selecting the first element as the pivot
    int pivot = arr[low];
    int i = low + 1;
    
    // Iterating through the array
    for (int j = low + 1; j <= high; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            // Swap arr[i] and arr[j]
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    
    // Swap pivot with arr[i-1]
    swap(&arr[low], &arr[i - 1]);
    
    // Return the index of pivot element
    return (i - 1);
}

// Function to implement quicksort algorithm
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        // Partitioning the array
        int pivotIndex = partition(arr, low, high);
        
        // Sorting the left subarray
        quicksort(arr, low, pivotIndex - 1);
        
        // Sorting the right subarray
        quicksort(arr, pivotIndex + 1, high);
    }
}

int main() {
    
    // Initialize an array
    int arr[] = {5, 9, 3, 1, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Printing the original array
    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    
    // Calling quicksort function to sort the array
    quicksort(arr, 0, n - 1);
    
    // Printing the sorted array
    printf("\nSorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    
    return 0;
}