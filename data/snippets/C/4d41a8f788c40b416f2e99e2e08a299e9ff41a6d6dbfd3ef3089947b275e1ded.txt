/**
 * This program takes in a string and reverses it using a stack data structure
 **/

// Standard input/output library
#include <stdio.h>

// Standard library for dynamic memory allocation
#include <stdlib.h>

// Struct for stack node
typedef struct Node {
    char data;
    struct Node* next;
} Node;

// Function to check if stack is empty
int isEmpty(Node* top) {
    return top == NULL;
}

// Function to create a new stack node
Node* createNode(char data) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to push a new node onto the stack
void push(Node** top, char data) {
    Node* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
}

// Function to pop a node from the stack
void pop(Node** top) {
    if (isEmpty(*top)) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    Node* temp = *top;
    *top = (*top)->next;
    free(temp);
}

// Function to peek the top node of the stack
char peek(Node* top) {
    if (isEmpty(top)) {
        printf("Stack is empty\n");
        exit(EXIT_FAILURE);
    }
    return top->data;
}

// Function to print the stack in reverse order
void printReverse(Node* top) {
    if (isEmpty(top)) {
        printf("Stack is empty\n");
        exit(EXIT_FAILURE);
    }
    else {
        Node* temp = top;
        while (temp != NULL) {
            printf("%c", temp->data);
            temp = temp->next;
        }
    }
}

// Main function
int main() {
    // Input string to be reversed
    char str[100];
    printf("Enter a string: ");
    scanf("%[^\n]s", str);

    // Create an empty stack
    Node* top = NULL;

    // Push each character of the string onto the stack
    for (int i = 0; str[i] != '\0'; i++) {
        push(&top, str[i]);
    }

    // Pop all nodes and print the stack in reverse order
    printf("Reversed string: ");
    while (!isEmpty(top)) {
        printf("%c", peek(top));
        pop(&top);
    }
    printf("\n");

    return 0;
}