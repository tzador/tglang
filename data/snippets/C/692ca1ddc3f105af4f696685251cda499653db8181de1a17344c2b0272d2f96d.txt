// This code snippet demonstrates the implementation of a binary search algorithm in C

#include <stdio.h>

// Function to perform binary search on a sorted array
int binarySearch(int arr[], int size, int target){

    // Initializing variables to store the start and end indices of array
    int start = 0;
    int end = size - 1;
    
    // Loop through the array until start index is less than or equal to end index
    while(start <= end){

        // Calculate the mid index of the array
        int mid = (start + end) / 2;

        // If target element is equal to element at mid index, return the index
        if(arr[mid] == target)
            return mid;

        // If target element is less than element at mid index, update end index to mid - 1
        else if(arr[mid] > target)
            end = mid - 1;

        // If target element is greater than element at mid index, update start index to mid + 1
        else
            start = mid + 1;
    }

    // If target element is not found, return -1
    return -1;
}

// Driver code to test the binarySearch function
int main(){

    // Initializing an array with sorted elements
    int arr[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};

    // Calculating the size of the array
    int size = sizeof(arr) / sizeof(arr[0]);

    // Initializing target element
    int target = 16;

    // Calling the binarySearch function to find the index of target element in the array
    int index = binarySearch(arr, size, target);

    // If index is -1, element is not present in the array
    if(index == -1)
        printf("Element not found");

    // Else, element is present at index calculated by binary search function
    else
        printf("Element found at index %d", index);

    return 0;
}