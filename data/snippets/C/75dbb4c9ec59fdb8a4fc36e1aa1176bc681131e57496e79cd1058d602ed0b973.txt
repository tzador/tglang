// This code snippet implements a binary search algorithm in C
// It takes in an array of integers and returns the index of the target element, or -1 if not found
int binarySearch(int arr[], int target, int low, int high){ //Function to perform binary search
	if(low <= high){ //While low is less than or equal to high, the search continues
		int mid = (low + high) / 2; //Calculating the mid point of the array
		if(arr[mid] == target){ //If the target element is equal to the mid point element, return mid		
			return mid;
		}
		else if(arr[mid] < target){ //If the target element is greater than the mid point element, recursively call the function with a new mid and high value
			return binarySearch(arr, target, mid + 1, high);
		}
		else{ //If the target element is less than the mid point element, recursively call the function with a new low and mid value
			return binarySearch(arr, target, low, mid - 1);
		}
	}
	return -1; //If target element is not found, return -1
}
// Example usage
int main(){
	int arr[] = {1, 2, 3, 4, 5}; //Initializing an array of integers
	int target = 4; //Target element to search for
	int low = 0; //Lowest index of array
	int high = sizeof(arr)/sizeof(arr[0]) - 1; //Highest index of array
	int result = binarySearch(arr, target, low, high); //Calling the binary search function and storing the result
	printf("Target element is found at index %d", result); //Printing the result
	return 0;
}