/**
 * This program finds the shortest path between two points in a graph using Dijkstra's algorithm.
 */
#include <stdio.h>
#include <limits.h>
#define INF INT_MAX

// Function to find the vertex with the minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int dist[], int visited[], int V) 
{
    // Initialize minimum value and index
    int min = INF, min_index;

    // Loop through all vertices
    for (int i = 0; i < V; i++) 
        // If current vertex is not included in shortest path tree and has a lower distance value than current minimum value
        if (visited[i] == 0 && dist[i] <= min) 
            min = dist[i], min_index = i;

    return min_index;
}

// Function to print the shortest path from source to target
void printPath(int parent[], int j) 
{
    // Base case: If parent is -1, we have reached the source vertex
    if (parent[j] == -1)
        return;

    // Recursive call to print the parent of current vertex
    printPath(parent, parent[j]);

    // Print the current vertex
    printf("%d ", j);
}

// Function to print the distance and path from source to target using Dijkstra's algorithm
void dijkstra(int graph[][9], int src, int target, int V) 
{
    // Array to store distance values, initialized to infinity
    // Contains the distance of the shortest path from source vertex to every other vertex
    int dist[V];

    // Array to keep track of visited vertices, initialized to 0 (not visited)
    int visited[V];

    // Array to store the path, where parent[i] holds the parent of ith vertex in the shortest path from source vertex
    int parent[V];

    // Initialize all distances to INF, visited vertices to 0, and parent array to -1
    for (int i = 0; i < V; i++)
        dist[i] = INF, visited[i] = 0, parent[i] = -1;

    // Distance from source to itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) 
    {
        // Find the vertex with the minimum distance value from the set of vertices not yet included in shortest path tree
        int u = minDistance(dist, visited, V);

        // Mark the picked vertex as visited
        visited[u] = 1;

        // Update distance value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) 
            // Update dist[v] only if it has not been visited and there is an edge from u to v and the total distance through u is smaller than the current value of dist[v]
            if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) 
                dist[v] = dist[u] + graph[u][v], parent[v] = u;
    }

    // Print the distance from source to target
    printf("Distance from source to target: %d\n", dist[target]);

    // Print the shortest path from source to target
    printf("Shortest path from source to target: ");
    printPath(parent, target);
}

int main() 
{
    // Example graph with 9 vertices
    int V = 9;

    // Example graph represented as an adjacency matrix
    int graph[9][9] = {{0, 4, 0, 0, 0, 0, 0, 8, 0},
                     {4, 0, 8, 0, 0, 0, 0, 11, 0},
                     {0, 8, 0, 7, 0, 4, 0, 0, 2},
                     {0, 0, 7, 0, 9, 14, 0, 0, 0},
                     {0, 0, 0, 9, 0, 10, 0, 0, 0},
                     {0, 0, 4, 14, 10, 0, 2, 0, 0},
                     {0, 0, 0, 0, 0, 2, 0, 1, 6},
                     {8, 11, 0, 0, 0, 0, 1, 0, 7},
                     {0, 0, 2, 0, 0, 0, 6, 7, 0}};

    // Source and target vertices for testing the algorithm
    int src = 0, target = 4;

    // Call the Dijkstra's algorithm function and print the results
    dijkstra(graph, src, target, V);

    return 0;
}