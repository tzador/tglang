//This is a function that calculates the nth Fibonacci number using recursion
int fibonacci(int n) {
    if(n == 0 || n == 1){ //base case: if n is 0 or 1, return n
        return n;
    }
    else{ //recursive case: find the sum of the previous two Fibonacci numbers
        return fibonacci(n-1) + fibonacci(n-2);
    }
}

//This is a function that calculates the factorial of a given number using a for loop
int factorial(int n) {
    int result = 1; //initialize result variable as 1
    for(int i = 1; i <= n; i++){ //loop from 1 to n
        result *= i; //multiply result by i at each iteration
    }
    return result;
}

/*This is a function that converts a decimal number to binary 
and returns the binary number as a string*/
char* decToBin(int n) {
    int binaryArr[128]; //initialize array to store binary digits
    int i = 0; //counter variable

    while(n > 0){ //loop until n is 0
        binaryArr[i] = n % 2; //store binary digit in array
        n /= 2; //divide n by 2
        i++; //increment counter
    }

    char* binaryStr = malloc(i * sizeof(char)); //allocate memory for binary string
    int j = 0; //counter variable

    /*loop through binary array backwards and 
    convert each binary digit to character*/
    for(i = i-1; i >= 0; i--){ 
        binaryStr[j] = (char)(binaryArr[i] + '0'); //convert binary digit to character
        j++; //increment counter
    }

    return binaryStr;
}