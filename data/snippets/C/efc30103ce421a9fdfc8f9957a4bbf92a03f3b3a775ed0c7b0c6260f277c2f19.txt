#include <stdio.h>

// This is a function declaration - returns the sum of two integers
int sum(int num1, int num2)
{
    return num1 + num2;
}

// This is a conditional statement - checks if two numbers are equal
if(num1 == num2)
{
    printf("The numbers are equal");
}

// This is a loop - prints numbers from 1 to 10
for(int i = 1; i <= 10; i++)
{
    printf("%d\n", i);
}

// This is a structure - stores information about a person
struct Person
{
    char name[50];
    int age;
    float height;
};

// This is an enum - holds a list of languages
enum Languages {
    English,
    Spanish,
    French,
    Mandarin
};

// This is a multi-dimensional array - stores a grid of values
int grid[3][3] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// This is a pointer - points to the address of a variable
int* ptr = &num1;

// This is a switch statement - prints the day of the week based on a number
switch(number)
{
    case 1:
        printf("Monday");
        break;
    case 2:
        printf("Tuesday");
        break;
    case 3:
        printf("Wednesday");
        break;
    case 4:
        printf("Thursday");
        break;
    case 5:
        printf("Friday");
        break;
    case 6:
        printf("Saturday");
        break;
    case 7:
        printf("Sunday");
        break;
    default:
        printf("Invalid number");
}

// This is a function call - prints the result of the sum function
int result = sum(5, 10);
printf("The sum is %d", result);

// This is a header file inclusion - includes the standard input/output library
#include <stdio.h>

// This is a macro - defines the value of pi
#define PI 3.14159

// This is a typedef - creates a new data type
typedef struct {
    char name[50];
    int age;
} Person;

// This is a union - stores different types of data in the same memory space
union Data {
    int num;
    float decimal;
    char letter;
};

// This is a function pointer - points to a function that returns an int and takes in two ints as parameters
int (*func_ptr)(int, int);

// This is a dangling pointer - points to a variable that no longer exists
int* dangling_ptr = NULL;

// This is a recursive function - calculates the factorial of a number
int factorial(int n)
{
    if (n == 0) {
        return 1;
    }
    else {
        return n * factorial(n-1);
    }
}

// This is a binary search algorithm - searches for a number in a sorted array
int binary_search(int arr[], int l, int r, int x)
{
    if (r >= l) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binary_search(arr, l, mid - 1, x);
        return binary_search(arr, mid + 1, r, x);
    }
    return -1;
}