/*
This code snippet is a multithreaded program that calculates the factorial of a given number using dynamic programming.
Dynamic programming is a technique where you break down a bigger problem into smaller subproblems and cache their solutions to use later on.

The program uses two threads to calculate the factorial of a given number, using a shared memory array to store the results of previously calculated factorials.
*/

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

// Define maximum number of threads to be used
#define MAX_THREADS 2

// Function to calculate the factorial of a given number using dynamic programming
// Takes in the number to calculate factorial of and the shared memory array to store previously calculated factorials
void* factorial(void *arg)
{
    // Convert the argument to integer type
    int number = *((int*)arg);

    // Declare a shared memory array to store the factorial results
    int* factorial_array = (int*)malloc(sizeof(int) * (number + 1));

    // Set the first two elements of the array to be 1 and 1 (factorial of 0 and 1)
    factorial_array[0] = 1;
    factorial_array[1] = 1;

    // Loop through the remaining elements in the array to calculate their factorial
    for (int i = 2; i <= number; i++) {
        // Calculate the factorial of each number by accessing already calculated results
        factorial_array[i] = factorial_array[i - 1] * i;
    }

    // Print the result of the factorial
    printf("Factorial of %d is %d \n", number, factorial_array[number]);

    // Exit the thread
    pthread_exit(NULL);
}

int main()
{
    // Declare a thread array to store the thread ids
    pthread_t threads[MAX_THREADS];

    // Declare the number to calculate factorial of
    int number = 10;

    // Create two threads to calculate the factorial of the given number
    for (int i = 0; i < MAX_THREADS; i++) {
        // Create the thread and pass in the number and shared memory array as arguments
        pthread_create(&threads[i], NULL, factorial, (void*)&number);
    }

    // Wait for the threads to finish execution
    for (int i = 0; i < MAX_THREADS; i++) {
        // Join the threads to the main thread
        pthread_join(threads[i], NULL);
    }

    // Exit the main thread
    pthread_exit(NULL);

    return 0;
}