/*
This code snippet illustrates how to implement a binary search algorithm in C.
The algorithm takes in a sorted array and a search key as inputs, and returns the index of the key if found, or -1 if not found.
*/

#include <stdio.h>

//function to implement binary search
int binarySearch(int arr[], int l, int r, int key) {
    
    //repeat until left index is less than or equal to right index
    while (l <= r) {
        
        //find middle element
        int mid = l + (r - l) / 2;
        
        //check if middle element is equal to key
        if (arr[mid] == key) {
            //key found, return index
            return mid;
        }
        
        //if key is larger than middle element, search in right subarray
        if (key > arr[mid]) {
            l = mid + 1;
        }
        //if key is smaller than middle element, search in left subarray
        else {
            r = mid - 1;
        }
    }
    
    //key not found, return -1
    return -1;
}

//main function to test binary search
int main(void) {
    //create a sorted array with test values
    int arr[] = {2, 5, 8, 13, 21};
    
    //get size of array
    int n = sizeof(arr) / sizeof(arr[0]);
    
    //search key
    int key = 21;
    
    //call binary search function
    int result = binarySearch(arr, 0, n - 1, key);
    
    //print result
    printf("Key %d is found at index %d", key, result);
    
    return 0;
}