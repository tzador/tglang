//This code snippet uses dynamic programming to solve the knapsack problem
#include <stdio.h>

//Function to get maximum of two integers
int max(int a, int b) {
    return (a>b) ? a : b;
}

//Function to solve the knapsack problem using dynamic programming approach
int knapsack_dp(int W, int wt[], int val[], int n) {
    //Creating a 2D array to store solutions for subproblems
    int i, w;
    int K[n + 1][W + 1];

    //Bottom-up approach to fill the array
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            //Base cases for empty knapsack or zero weight
            if (i == 0 || w == 0)
                K[i][w] = 0;
            //Checking if current item can be included in knapsack
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
            //If item cannot be included, value remains same as previous row
            else
                K[i][w] = K[i - 1][w];
        }
    }

    //Returning the maximum value that can be achieved in the knapsack
    return K[n][W];
}

//Sample inputs
int main() {
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);

    printf("Maximum value that can be achieved in the knapsack: %d\n", knapsack_dp(W, wt, val, n));

    return 0;
}