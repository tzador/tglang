/*
This is a complex code snippet in the C programming language.
It includes multiple functions, loops, and conditional statements.

First, we define a function called `factorial` that takes in an integer `num` as a parameter.
This function will calculate and return the factorial of `num` using a recursive algorithm.

Next, we define a function called `power` that takes in two integers `base` and `exponent` as parameters.
This function will calculate and return `base` raised to the power of `exponent` using a recursive algorithm.

Then, we initialize an integer variable `n` and prompt the user to input a number.
If the user enters a negative number, we display an error message.
Otherwise, we call the `factorial` and `power` functions and store the results in variables `fact` and `pow`.

Using a for loop, we print out a table of values for `i` from 1 to `n` with the corresponding values
of `i!` and `2^i`.

Finally, we print a message thanking the user for using our program.

*/

#include <stdio.h>  // Standard input/output library

// Define the `factorial` function
int factorial(int num) {
    if (num == 0) { // Base case: 0! = 1
        return 1;
    } else { // Recursive case: n! = n * (n-1)!
        return num * factorial(num - 1);
    }
}

// Define the `power` function
int power(int base, int exponent) {
    if (exponent == 0) { // Base case: any number raised to 0 is 1
        return 1; 
    } else if (exponent == 1) { // Base case: any number raised to 1 is itself
        return base;
    } else { // Recursive case: base^exp = base * base^(exp-1)
        return base * power(base, exponent - 1);
    }
}

int main() {
    int n; // Initialize variable for user input
    printf("Enter a number: ");
    scanf("%d", &n); // Prompt user to enter a number and store it in `n`
    
    // Check if `n` is negative
    if (n < 0) {
        printf("Error: Factorial and power functions are not defined for negative numbers.");
    } else { // `n` is a non-negative number
        // Call `factorial` and `power` functions to calculate values
        int fact = factorial(n);
        int pow = power(2, n);
        
        // Print table of values for `i` from 1 to `n` and corresponding values for `i!` and `2^i`
        printf(" n | n! | 2^n \n");
        printf("---|----|------\n");
        for (int i = 1; i <= n; i++) {
            printf("%2d |%4d|%7d\n", i, factorial(i), power(2, i));
        }
    }
    
    // Thank user for using our program
    printf("Thank you for using our program!");
    
    return 0;
}

// Output:
// Enter a number: 8
// n | n! | 2^n
//---|----|------
// 1 |   1|     2
// 2 |   2|     4
// 3 |   6|     8
// 4 |  24|    16
// 5 | 120|    32
// 6 | 720|    64
// 7 |5040|   128
// 8 |40320|   256
// Thank you for using our program!