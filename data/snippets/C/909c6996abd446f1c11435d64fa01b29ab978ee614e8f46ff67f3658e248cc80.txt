/**
 * @file main.c
 *
 * @brief This is a complex code snippet in C language that contains 
 * multiple data structures and algorithms.
 */

// Library includes
#include <stdio.h>
#include <stdlib.h>

/**
 * @brief Definition of a linked list node.
 * 
 * @param val Value stored in the node
 * @param next Pointer to the next node in the linked list
 */
typedef struct Node {
    int val;
    struct Node *next;
} Node;

/**
 * @brief Function to insert a new node at the head of the linked list.
 * 
 * @param head Pointer to the head of the linked list
 * @param val Value to be inserted into the new node
 */
void insertNode(Node **head, int val) {
    // Allocate memory for the new node
    Node *newNode = malloc(sizeof(Node));
    // Check for memory allocation errors
    if (newNode == NULL) {
        printf("Memory allocation error.");
        exit(1);
    }
    // Set the value of the new node
    newNode->val = val;
    // Set the next pointer of the new node to the current head
    newNode->next = *head;
    // Set the head to the new node
    *head = newNode;
}

/**
 * @brief Function to reverse a linked list.
 * 
 * @param head Pointer to the head of the linked list
 */
void reverseList(Node **head) {
    // Initialize three pointers - prev, current and next
    Node *prev = NULL;
    Node *current = *head;
    Node *next = NULL;

    // Loop until the end of the list
    while (current != NULL) {
        // Adjust the next pointer to current's next node
        next = current->next;
        // Set current's next node to point to prev
        current->next = prev;
        // Move to the next node
        prev = current;
        current = next;
    }
    // Set the head to the last node 
    *head = prev;
}

/**
 * @brief Function to print the contents of a linked list.
 * 
 * @param head Pointer to the head of the linked list
 */
void printList(Node *head) {
    // Loop through the list and print the values
    while (head != NULL) {
        printf("%d -> ", head->val);
        head = head->next;
    }
    printf("NULL\n");
}

// Main function to test the code
int main() {
    // Create a linked list with some initial values
    Node *head = NULL;
    insertNode(&head, 1);
    insertNode(&head, 2);
    insertNode(&head, 3);
    insertNode(&head, 4);
    insertNode(&head, 5);

    // Print the original linked list
    printf("Original List: ");
    printList(head);

    // Reverse the list
    reverseList(&head);

    // Print the reversed list
    printf("Reversed List: ");
    printList(head);

    return 0;
}