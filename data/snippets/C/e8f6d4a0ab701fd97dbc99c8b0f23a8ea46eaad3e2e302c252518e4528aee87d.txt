// This program calculates the k-th order statistic
#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array and return the pivot index
// using the Hoare's partition scheme
int partition(int arr[], int low, int high)
{
    // Pick the last element as the pivot
    int pivot = arr[high];

    // Initialize the partition index
    int i = low - 1;

    // Traverse the subarray arr[low..high]
    // If arr[j] is less than the pivot, swap arr[i] with arr[j]
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    // Finally, move the pivot element to its correct position
    swap(&arr[i + 1], &arr[high]);

    // Return the pivot index
    return i + 1;
}

// Function to return the k-th order statistic
int quickSelect(int arr[], int low, int high, int k)
{
    // Base condition
    if (low == high) {
        return arr[low];
    }

    // Rearrange the elements across pivot
    int pivot = partition(arr, low, high);

    // If k is same as the pivot index
    if (k == pivot) {
        return arr[k];
    }
    // If k is less than the pivot index
    else if (k < pivot) {
        return quickSelect(arr, low, pivot - 1, k);
    }
    // If k is more than the pivot index
    else {
        return quickSelect(arr, pivot + 1, high, k);
    }
}

// Main Function
int main()
{
    int arr[] = { 7, 10, 4, 3, 20, 15 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;

    printf("Original Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    // Calculates the k-th order statistic
    int order_statistic = quickSelect(arr, 0, n - 1, k - 1);
    printf("\n\n%d-th order statistic is %d", k, order_statistic);

    return 0;
}