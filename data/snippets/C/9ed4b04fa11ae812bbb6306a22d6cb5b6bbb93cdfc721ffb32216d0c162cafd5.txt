// This code snippet sorts an array of integers using bubble sort
// Time complexity: O(n^2)
// Space complexity: O(1)

#include <stdio.h>

// Function to perform bubble sort
void bubbleSort(int arr[], int n) {
    
    // Loop through the array
    for(int i=0; i < n-1; i++) {
        
        // Compare each element to its adjacent element 
        for(int j=0; j < n-i-1; j++) {
        
            // swap elements if first element is greater than second
            if(arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// Function to print the sorted array
void printArray(int arr[], int n) {
    
    // Loop through the array 
    for(int i=0; i < n; i++) {
        
        // Print each element 
        printf("%d ", arr[i]);
    }
    
    // Add a new line after printing all elements
    printf("\n");
}

// Driver function
int main() {
    // Create an array with unsorted integers
    int arr[] = {5, 8, 2, 10, 3};
    
    // Calculate the length of the array
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Print the unsorted array
    printf("Unsorted array: ");
    printArray(arr, n);
    
    // Sort the array using bubble sort
    bubbleSort(arr, n);
    
    // Print the sorted array
    printf("Sorted array: ");
    printArray(arr, n);
    
    return 0;
}

// Output:
// Unsorted array: 5 8 2 10 3 
// Sorted array: 2 3 5 8 10