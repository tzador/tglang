// This snippet uses pointers and arrays to search for a target value in a list

#include <stdio.h>
#include <stdlib.h>

int *search(int *arr, int size, int target); // function declaration

int main() {
    int size, target;
    
    // get input from user for size of array and target value
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    printf("Enter the target value: ");
    scanf("%d", &target);
    
    // dynamically allocate memory for the array
    int *arr = (int*)malloc(size * sizeof(int));
    
    // get input from user for array values
    printf("Enter the array values: ");
    for(int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    
    // call search function and store result
    int *result = search(arr, size, target);
    
    // check if result is NULL, indicating target value not found
    if(result == NULL) {
        printf("Target value not found in the array.");
    }
    else {
        // calculate position of target value in array
        int position = result - arr + 1;
        printf("Target value found at position %d in the array.", position);
    }

    free(arr); // free dynamically allocated memory
    
    return 0;
}

/*
    Function to search for target value in an integer array using pointers
    Parameters:
        arr - pointer to the first element of the array
        size - size of the array
        target - target value to be searched for
    Return:
        pointer to the target value in the array, or NULL if not found
*/
int *search(int *arr, int size, int target) {
    // loop through array elements
    for(int i = 0; i < size; i++) {
        // if current element equals target value, return pointer to that element
        if(arr[i] == target) {
            return &arr[i];
        }
    }
    
    // if target value not found, return NULL
    return NULL;
}