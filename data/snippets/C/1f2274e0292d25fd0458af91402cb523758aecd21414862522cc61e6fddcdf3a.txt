#include <stdio.h>

// A function to merge two sorted arrays.
// Parameters:
// int array1[]: The first sorted array.
// int array2[]: The second sorted array.
// int n1: The size of the first array.
// int n2: The size of the second array.
void merge(int array1[], int array2[], int n1, int n2) {

    // Create a temporary array to store the merged result.
    int temp[n1 + n2];

    // Initialize variables for iterating through the arrays.
    int i = 0, j = 0, k = 0;

    // While both arrays still have elements to compare,
    // compare the elements and add the smaller one to the temporary array.
    while (i < n1 && j < n2) {
        if (array1[i] < array2[j]) {
            temp[k++] = array1[i++];
        } else {
            temp[k++] = array2[j++];
        }
    }

    // Add any remaining elements from the first array.
    while (i < n1) {
        temp[k++] = array1[i++];
    }

    // Add any remaining elements from the second array.
    while (j < n2) {
        temp[k++] = array2[j++];
    }

    // Copy the merged elements back into the original arrays.
    for (i = 0; i < n1; i++) {
        array1[i] = temp[i];
    }
    for (j = 0; j < n2; j++) {
        array2[j] = temp[n1 + j];
    }
}

// A function to sort an array using merge sort.
// Parameters:
// int array[]: The array to be sorted.
// int n: The size of the array.
void merge_sort(int array[], int n) {

    // Base case: if array has only one element, it is already sorted.
    if (n < 2) {
        return;
    }

    // Calculate the middle index of the array.
    int mid = n / 2;

    // Create two new temporary arrays to store the left and right halves of the array.
    int left[mid], right[n - mid];

    // Copy the elements into the new arrays.
    for (int i = 0; i < mid; i++) {
        left[i] = array[i];
    }
    for (int i = mid; i < n; i++) {
        right[i - mid] = array[i];
    }

    // Recursively sort the left and right halves of the array.
    merge_sort(left, mid);
    merge_sort(right, n - mid);

    // Merge the sorted left and right halves.
    merge(left, right, mid, n - mid);

    // Copy the sorted elements back into the original array.
    for (int i = 0; i < n; i++) {
        array[i] = left[i];
    }
}

// The main function to test the merge sort algorithm.
// Feel free to change the values in the array.
int main() {
    // An example sorted array.
    int array[] = {1, 3, 5, 7, 9, 2, 4, 6, 8, 10};

    // Calculate the size of the array.
    int n = sizeof(array) / sizeof(array[0]);

    // Call the merge_sort function to sort the array.
    merge_sort(array, n);

    // Print the sorted array.
    for (int i = 0; i < n; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    return 0;
}