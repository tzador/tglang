//This program calculates the value of pi using the Monte Carlo method

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUM_POINTS 10000000
#define NUM_THREADS 4

//Struct to hold x and y coordinates of a point
typedef struct
{
    double x;
    double y;
} Point;

//Function to generate a random double between 0 and 1
double random_double()
{
    return (double)rand() / RAND_MAX;
}

//Function to generate an array of random points
Point* generate_points(int num_points)
{
    //Allocate memory for array
    Point* points = (Point*) malloc(num_points * sizeof(Point));

    //Generate random x and y coordinates and assign to array
    for (int i = 0; i < num_points; i++)
    {
        points[i].x = random_double();
        points[i].y = random_double();
    }

    return points;
}

//Function to calculate pi using Monte Carlo method
double calculate_pi(Point* points, int num_points)
{
    //Count the number of points within the unit circle
    int inside_circle = 0;

    //Loop through all the points and check if they are inside the unit circle
    for(int i=0; i<num_points; i++)
    {
        //Calculate the distance from the origin
        double distance = points[i].x * points[i].x + points[i].y * points[i].y;

        //If the distance is less than 1, the point is inside the unit circle
        if(distance < 1)
        {
            inside_circle++;
        }
    }

    //Calculate the value of pi
    double pi = 4 * (double)inside_circle / num_points;

    return pi;
}

//Main function
int main()
{
    //Set the seed for the random number generator based on current time
    srand(time(0));

    //Generate array of points
    Point* points = generate_points(NUM_POINTS);

    //Calculate the value of pi using Monte Carlo method
    double pi = calculate_pi(points, NUM_POINTS);

    //Print the calculated value of pi
    printf("The value of pi is: %f\n", pi);

    //Free the memory allocated for the points array
    free(points);

    return 0;
}