//This code snippet demonstrates a complex sorting algorithm
#include <stdio.h>

//Function prototype for quicksort
void quickSort(int arr[], int low, int high);

//Function to partition the array
int partition(int arr[], int low, int high);

//Function to swap two elements in an array
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

//Main function
int main() {
    //Initialize array
    int arr[] = {14, 9, 4, 25, 3, 10, 56, 72, 0, -5};

    //Size of array
    int size = sizeof(arr)/sizeof(arr[0]);

    //Sort the array using quicksort
    quickSort(arr, 0, size-1);

    //Print sorted array
    printf("Sorted array: ");
    for (int i=0; i<size; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

//Function to perform quicksort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        //Partition the array and obtain the pivot index
        int pivotIdx = partition(arr, low, high);

        //Recursively call quicksort on the left and right partitions of the array
        quickSort(arr, low, pivotIdx-1);
        quickSort(arr, pivotIdx+1, high);
    }
}

//Function to partition the array around a pivot element
int partition(int arr[], int low, int high) {
    //Choose a pivot element (here we choose the last element)
    int pivot = arr[high];

    //Index of smaller element
    int i = low-1;

    //Loop through all elements from low to high-1
    for (int j=low; j<=high-1; j++) {
        //If the current element is smaller than the pivot, increment i and swap elements at i and j
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    //Place the pivot in the correct position by swapping it with the element at i+1
    swap(&arr[i+1], &arr[high]);

    //Return the pivot index
    return i+1;
}