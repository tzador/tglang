// Define a structure for a graph node
typedef struct Node {
   int key;
   struct Node* next;
} Node;

// Define a function to create a new node with given key value
Node* createNode(int key) {
   Node* newNode = (Node*)malloc(sizeof(Node)); // Allocate memory for new node
   newNode->key = key; // Set key value
   newNode->next = NULL; // Set next pointer to NULL
   return newNode; // Return the new node
}

// Define a function to add a new node at the beginning of the linked list
void addNode(Node** head, int key) {
   // Create a new node with the given key
   Node* newNode = createNode(key);
   // Set the new node's next pointer to the current head of the list
   newNode->next = *head;
   // Set the head to the new node
   *head = newNode;
}

// Define a function to print the list of nodes
void printList(Node* head) {
   Node* curr = head; // Initialize current node to head of the list
   printf("List of nodes: ");
   while (curr != NULL) { // Loop through all nodes until the end is reached
      printf("%d ", curr->key); // Print the key value of the current node
      curr = curr->next; // Move to the next node
   }
   printf("\n");
}

// Define a main function to test the above functions
int main() {
   // Create an empty linked list
   Node* head = NULL;
   // Add three nodes to the list
   addNode(&head, 1);
   addNode(&head, 2);
   addNode(&head, 3);
   // Print the list of nodes
   printList(head);
   return 0;
}