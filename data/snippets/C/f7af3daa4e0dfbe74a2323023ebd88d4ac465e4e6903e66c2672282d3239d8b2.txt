/* Function to merge two subarrays of arr[] */
/* First subarray is arr[l..m] */
/* Second subarray is arr[m+1..r] */
/* Set up auxiliary arrays */
int i, j, k;
int n1 = m - l + 1;
int n2 =  r - m;

/* Copy data to temporary arrays */
int* L = malloc(n1 * sizeof(int));
int* R = malloc(n2 * sizeof(int));
for (i = 0; i < n1; i++)
	L[i] = arr[l + i];
for (j = 0; j < n2; j++)
	R[j] = arr[m + 1+ j];

/* Merge the temporary arrays back into arr[l..r] */
i = 0; /* Initial index of first subarray */
j = 0; /* Initial index of second subarray */
k = l; /* Initial index of merged subarray */
while (i < n1 && j < n2)
{
	if (L[i] <= R[j])
	{
		arr[k] = L[i];
		i++;
	}
	else
	{
		arr[k] = R[j];
		j++;
	}
	k++;
}

/* Copy the remaining elements of L[], if there are any */
while (i < n1)
{
	arr[k] = L[i];
	i++;
	k++;
}

/* Copy the remaining elements of R[], if there are any */
while (j < n2)
{
	arr[k] = R[j];
	j++;
	k++;
}

/* Free up the memory of the temporary arrays */
free(L);
free(R);