// This code snippet creates a binary search tree data structure

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* left;
    struct node* right;
};

// Function to create a new node
struct node* createNode(int value)
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node in a BST
struct node* insertNode(struct node* root, int value)
{
    if (root == NULL)
    {
        return createNode(value);
    }
    if (value < root->data)
    {
        root->left = insertNode(root->left, value);
    }
    else
    {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to search for a value in a BST
int search(struct node* root, int value)
{
    if (root == NULL)
    {
        return 0; // returns 0 if tree is empty
    }
    if (root->data == value)
    {
        return 1; // returns 1 if value is found
    }
    else if (value < root->data)
    {
        return search(root->left, value);
    }
    else
    {
        return search(root->right, value);
    }
}

/* Main function to test the code */
int main()
{
    // Creating an empty BST
    struct node* root = NULL;
    
    // Inserting nodes into the BST
    root = insertNode(root, 5);
    root = insertNode(root, 3);
    root = insertNode(root, 7);
    root = insertNode(root, 1);
    root = insertNode(root, 4);
    root = insertNode(root, 6);
    root = insertNode(root, 9);
    
    // Searching for a value in the BST
    if (search(root, 7))
    {
        printf("Value 7 is present in the BST");
    }
    else
    {
        printf("Value 7 is not present in the BST");
    }
    
    return 0;
}