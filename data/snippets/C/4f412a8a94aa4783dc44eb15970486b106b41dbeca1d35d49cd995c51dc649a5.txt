#include <stdio.h>
#include <stdlib.h>

// This code snippet is a program that performs matrix multiplication

// Function to take input for matrices
void inputMatrix(int r, int c, int matrix[][c])
{
    printf("Enter the elements of the matrix: \n");
    for(int i = 0; i < r; i++)
    {
        for(int j = 0; j < c; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Function to perform multiplication of two matrices
void multiplyMatrix(int m1_rows, int m1_cols, int m2_rows, int m2_cols, int m1[][m1_cols], int m2[][m2_cols], int result[][m2_cols])
{
    // Check if the number of columns in first matrix is equal to number of rows in second matrix
    if(m1_cols != m2_rows)
    {
        printf("Error: Number of columns in first matrix should be equal to number of rows in second matrix.");
        exit(0);
    }

    // Multiply the two matrices
    for(int i = 0 ; i < m1_rows ; i++)
    {
        for(int j = 0 ; j < m2_cols ; j++)
        {
            result[i][j] = 0;
            for(int k = 0 ; k < m1_cols ; k++)
            {
                result[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }
}

// Function to display the result of multiplication
void displayResult(int m1_rows, int m2_cols, int result[][m2_cols])
{
    printf("Result of multiplication: \n");
    for(int i = 0 ; i < m1_rows ; i++)
    {
        for(int j = 0 ; j < m2_cols ; j++)
        {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    // Define the dimensions of first matrix
    int m1_rows = 3, m1_cols = 3;

    // Define the dimensions of second matrix
    int m2_rows = 3, m2_cols = 3;

    // Declare the two matrices
    int m1[m1_rows][m1_cols], m2[m2_rows][m2_cols];

    // Take input for the first matrix
    printf("Enter the first matrix: \n");
    inputMatrix(m1_rows, m1_cols, m1);

    // Take input for the second matrix
    printf("Enter the second matrix: \n");
    inputMatrix(m2_rows, m2_cols, m2);

    // Declare the result matrix
    int result[m1_rows][m2_cols];

    // Multiply the two matrices
    multiplyMatrix(m1_rows, m1_cols, m2_rows, m2_cols, m1, m2, result);

    // Display the result of multiplication
    displayResult(m1_rows, m2_cols, result);

    return 0;
}