#include <stdio.h>
#include <stdlib.h>

// Function to merge two subarrays
// of arr[]. The first subarray is arr[l..m]
// and the second subarray is arr[m+1..r]
void merge(int arr[], int l, int m, int r)
{
    // calculate sizes of two subarrays to be merged
    int n1 = m - l + 1;
    int n2 = r - m;

    // create temporary arrays
    int L[n1], R[n2];

    // copy data to temporary arrays
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // merge the temporary arrays back into arr[l..r]

    // initial indexes of first and second subarrays
    int i = 0;
    int j = 0;

    // initial index of merged subarray
    int k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// l is for left index and r is right index of the sub-array of arr to be sorted
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        // same as (l+r)/2, but avoids overflow for large l and h
        int m = l + (r - l) / 2;

        // sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // merge the sorted halves
        merge(arr, l, m, r);
    }
}

// driver function to test the mergeSort function
int main()
{
    int arr[] = { 14, 5, 89, 23, 10, 1, 47, 100, 32, 8};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    // call merge sort function
    mergeSort(arr, 0, arr_size - 1);

    // print sorted array
    printf("Sorted array: \n");
    for (int i = 0; i < arr_size; i++) {
        printf("%d ", arr[i]);
    }
}