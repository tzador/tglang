/* This is a complex function that calculates the area of a triangle using Heron's formula */
double triangleArea(double a, double b, double c)
{
    // Calculate half of the perimeter
    double s = (a + b + c) / 2;
    
    // Calculate the area using Heron's formula
    double area = sqrt(s * (s - a) * (s - b) * (s - c));
    
    return area;
}

/* This is a complicated loop that prints out all prime numbers between a given range */
void printPrimeNumbers(int start, int end)
{
    int i, j, flag;
    
    // Loop through the range, checking each number for primality
    for (i = start; i <= end; i++)
    {
        // Assume the number is prime
        flag = 1;
        
        // Check if the number has any factors besides 1 and itself
        for (j = 2; j <= i / 2; j++)
        {
            if (i % j == 0)
            {
                // The number is not prime, change the flag
                flag = 0;
                break;
            }
        }
        
        // If the flag is still 1, the number is prime, so print it out
        if (flag == 1)
        {
            printf("%d\n", i);
        }
    }
}

/* This is a struct that represents a student, with their name and age */
typedef struct Student{
    char name[50];
    int age;
} Student;

/* This function creates a new student with the given name and age */
Student createStudent(char *name, int age)
{
    // Create a Student struct
    Student s;
    
    // Set the name and age of the student
    strcpy(s.name, name);
    s.age = age;
    
    return s;
}

/* This is a recursive function that calculates the factorial of a number */
int factorial(int n)
{
    // Base case: if n is 0 or 1, the factorial is 1
    if (n == 0 || n == 1)
    {
        return 1;
    }
    
    // Otherwise, return n multiplied by the factorial of n-1
    return n * factorial(n-1);
}