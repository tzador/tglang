/* This program demonstrates sorting algorithms in C */

#include <stdio.h>

// Function to swap two elements
void swap(int* first, int* second){
    int temp = *first;
    *first = *second;
    *second = temp;
}

// Function to implement bubble sort algorithm
void bubbleSort(int arr[], int size){
    int i, j;
    for (i = 0; i < size-1; i++){
        for (j = 0; j < size-i-1; j++){
            if (arr[j] > arr[j+1]){
                swap(&arr[j], &arr[j+1]);
            }
        }
    }
}

// Function to implement selection sort algorithm
void selectionSort(int arr[], int size){
    int i, j, min_idx;
    for (i = 0; i < size-1; i++){
        min_idx = i;
        for (j = i+1; j < size; j++){
            if (arr[j] < arr[min_idx]){
                min_idx = j;
            }
        }
        swap(&arr[min_idx], &arr[i]);
    }
}

// Function to implement insertion sort algorithm
void insertionSort(int arr[], int size){
    int i, key, j;
    for (i = 1; i < size; i++){
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

// Function to print the array
void printArray(int arr[], int size){
    int i;
    for (i = 0; i < size; i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(){
    int arr1[] = {6, 3, 1, 8, 4, 9}; // unsorted array
    int arr2[] = {18, 2, 7, 16, 10, 5}; // unsorted array
    int arr3[] = {11, 12, 14, 13, 15}; // unsorted array
    int size1 = sizeof(arr1) / sizeof(arr1[0]); // calculating size of array1
    int size2 = sizeof(arr2) / sizeof(arr2[0]); // calculating size of array2
    int size3 = sizeof(arr3) / sizeof(arr3[0]); // calculating size of array3

    printf("Before sorting:\n");
    printArray(arr1, size1); // printing array 1 before sorting
    printArray(arr2, size2); // printing array 2 before sorting
    printArray(arr3, size3); // printing array 3 before sorting

    bubbleSort(arr1, size1); // performing bubble sort on array 1
    selectionSort(arr2, size2); // performing selection sort on array 2
    insertionSort(arr3, size3); // performing insertion sort on array 3

    printf("After sorting:\n");
    printArray(arr1, size1); // printing array 1 after sorting
    printArray(arr2, size2); // printing array 2 after sorting
    printArray(arr3, size3); // printing array 3 after sorting

    return 0;
}