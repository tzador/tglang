/*This is a snippet of C code that implements a binary search algorithm*/

/*Function to implement binary search*/
int binarySearch(int arr[], int low, int high, int key)
{
    /*Iterate while low is less than or equal to high*/
    while (low <= high)
    {
        /*Calculate the middle index*/
        int mid = low + (high - low) / 2;
        
        /*If the key is present at the middle element, return its index*/
        if (arr[mid] == key)
            return mid;
        
        /*If the key is greater than the middle element, ignore the left half of the array*/
        if (arr[mid] < key)
            low = mid + 1;
        
        /*If the key is less than the middle element, ignore the right half of the array*/
        else
            high = mid - 1;
    }
    
    /*If the key is not present in the array, return -1*/
    return -1;
}

/*Driver code to test the binary search function*/
int main()
{
    /*Initialize the sorted array*/
    int arr[] = {2, 5, 8, 11, 13, 17, 19, 24, 28, 31};
    
    /*Calculate the size of the array*/
    int size = sizeof(arr) / sizeof(arr[0]);
    
    /*Set the key to search for*/
    int key = 17;
    
    /*Call the binarySearch function and store the result*/
    int result = binarySearch(arr, 0, size - 1, key);
    
    /*Check if the key was found*/
    if (result == -1)
        printf("Element not present in array");
    else
        printf("Element found at index %d", result);
        
    return 0;
}