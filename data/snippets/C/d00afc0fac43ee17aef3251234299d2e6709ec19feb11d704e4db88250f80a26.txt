//This code snippet creates a linked list and performs various operations on it
#include<stdio.h>
#include<stdlib.h>

//Linked list structure
typedef struct Node {
	int data;
	struct Node* next;
} Node;

//Function to print the contents of a linked list
void printList(Node* head) {
	while (head != NULL) {
		printf("%d ", head->data);
		head = head->next;
	}
}

//Function to insert a node at the beginning of a linked list
void insertAtBeginning(Node** head, int newData) {
	Node* new = (Node*)malloc(sizeof(Node));
	new->data = newData;
	new->next = *head;
	*head = new;
}

//Function to insert a node at the end of a linked list
void insertAtEnd(Node** head, int newData) {
	Node* new = (Node*)malloc(sizeof(Node));
	new->data = newData;
	new->next = NULL;
	if (*head == NULL) {
		*head = new;
		return;
	}
	Node* current = *head;
	while (current->next != NULL) {
		current = current->next;
	}
	current->next = new;
}

//Function to insert a node at a specific position in a linked list
void insertAtPosition(Node** head, int position, int newData) {
	if (position == 0) {
		insertAtBeginning(head, newData);
	}
	else {
		Node* new = (Node*)malloc(sizeof(Node));
		new->data = newData;
		Node* current = *head;
		for (int i = 0; i < position - 1; i++) {
			current = current->next;
		}
		new->next = current->next;
		current->next = new;
	}
}

//Function to delete a node at the beginning of a linked list
void deleteAtBeginning(Node** head) {
	if (*head == NULL) {
		printf("List is empty.");
	}
	else {
		Node* temp = *head;
		*head = (*head)->next;
		free(temp);
	}
}

//Function to delete a node at the end of a linked list
void deleteAtEnd(Node** head) {
	if (*head == NULL) {
		printf("List is empty.");
	}
	else {
		Node* temp = *head;
		Node* prev = NULL;
		while (temp->next != NULL) {
			prev = temp;
			temp = temp->next;
		}
		prev->next = NULL;
		free(temp);
	}
}

//Function to delete a node at a specific position in a linked list
void deleteAtPosition(Node** head, int position) {
	if (*head == NULL) {
		printf("List is empty.");
	}
	else if (position == 0) {
		deleteAtBeginning(head);
	}
	else {
		Node* temp = *head;
		Node* prev = NULL;
		for (int i = 0; i < position; i++) {
			prev = temp;
			temp = temp->next;
		}
		prev->next = temp->next;
		free(temp);
	}
}

int main() {
	//Create an empty linked list
	Node* head = NULL;

	//Insert nodes at various positions
	insertAtBeginning(&head, 5);
	insertAtEnd(&head, 10);
	insertAtPosition(&head, 1, 7);

	//Print the contents of the linked list
	printList(head);

	//Delete nodes at various positions
	deleteAtBeginning(&head);
	deleteAtEnd(&head);
	deleteAtPosition(&head, 0);

	//Print the contents of the linked list
	printList(head);

	return 0;
}