// This code snippet initializes a matrix and performs matrix multiplication

// Define the size of the matrices
#define ROWS 3
#define COLS 3

// Declare the matrices as global variables
int matrix_A[ROWS][COLS];
int matrix_B[ROWS][COLS];
int matrix_C[ROWS][COLS];

// Function to initialize the matrices
void init_matrix()
{
    // Loop through each element of the matrices
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            // Generate a random integer for each element between 0 and 9
            matrix_A[i][j] = rand() % 10;
            matrix_B[i][j] = rand() % 10;
            // Initialize the result matrix to 0
            matrix_C[i][j] = 0;
        }
    }
}

// Function to perform matrix multiplication
void matrix_multiplication()
{
    // Loop through each row of matrix A
    for (int i = 0; i < ROWS; i++) {
        // Loop through each column of matrix B
        for (int j = 0; j < COLS; j++) {
            // Loop through each element in the row of A and column of B
            for (int k = 0; k < COLS; k++) {
                // Perform multiplication and accumulate the result in the corresponding element in matrix C
                matrix_C[i][j] += matrix_A[i][k] * matrix_B[k][j];
            }
        }
    }
}

int main()
{
    // Initialize the matrices
    init_matrix();
    
    // Perform matrix multiplication
    matrix_multiplication();
    
    // Print the result matrix in a formatted output
    printf("Result matrix: \n");
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d ", matrix_C[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}