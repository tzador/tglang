/*
This is a multi-line comment in C
It is used to provide explanations and documentation
*/

// This is a single-line comment in C, it is used for short comments and to disable code

// In this code snippet, we will be creating a linked list data structure and implementing some basic functions

// First, we create a struct for our nodes which will hold a data variable and a pointer to the next node
typedef struct Node {
    int data; // can be changed to accommodate any data type
    struct Node *next; // pointer to the next node
} Node;

// Next, we create a struct for our linked list which will hold a pointer to the first node and the size of the list
typedef struct LinkedList {
    Node *head; // pointer to the first node
    int size; // size of the list
} LinkedList;

// Function to add a node to the beginning of the linked list
void addFirst(LinkedList *list, int data) {
    // Create a new node
    Node *newNode = malloc(sizeof(Node));
    newNode->data = data; // set the data of the node to the given data
    newNode->next = list->head; // set the next pointer of the node to the current head of the list
    list->head = newNode; // set the head of the list to point to the new node
    list->size++; // increment the size of the list
}

// Function to add a node to the end of the linked list
void addLast(LinkedList *list, int data) {
    // Create a new node
    Node *newNode = malloc(sizeof(Node));
    newNode->data = data; // set the data of the node to the given data
    newNode->next = NULL; // set the next pointer of the node to null since it will be the last node
    if (list->head == NULL) { // if the list is empty, set the head of the list to point to the new node
        list->head = newNode;
    } else {
        // Traverse the list until the last node and set its next pointer to the new node
        Node *current = list->head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
    list->size++; // increment the size of the list
}

// Function to insert a node at a specific position in the linked list
void insert(LinkedList *list, int data, int position) {
    // Create a new node
    Node *newNode = malloc(sizeof(Node));
    newNode->data = data; // set the data of the node to the given data
    if (position == 0) { // if the position is 0, insert the node at the beginning of the list
        addFirst(list, data);
    } else if (position >= list->size) { // if the position is greater than or equal to the size of the list, insert the node at the end of the list
        addLast(list, data);
    } else {
        // Otherwise, traverse the list until the position and insert the node in between the previous and current nodes
        Node *current = list->head;
        int i = 0;
        while (i < position - 1) {
            current = current->next;
            i++;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
    list->size++; // increment the size of the list
}

// Function to remove the first node of the linked list and return its data
int removeFirst(LinkedList *list) {
    if (list->head == NULL) { // if the list is empty, return -1
        return -1;
    }
    // Store the data of the first node and set the head of the list to point to the next node
    int data = list->head->data;
    Node *temp = list->head;
    list->head = temp->next;
    free(temp); // free the memory of the first node
    list->size--; // decrement the size of the list
    return data; // return the data
}

// Function to remove the last node of the linked list and return its data
int removeLast(LinkedList *list) {
    if (list->head == NULL) { // if the list is empty, return -1
        return -1;
    }
    if (list->head->next == NULL) { // if the list has only one node, remove it and return its data
        int data = list->head->data;
        free(list->head);
        list->head = NULL;
        list->size--;
        return data;
    }
    // Otherwise, traverse the list until the second last node and remove the last node
    Node *current = list->head;
    while (current->next->next != NULL) {
        current = current->next;
    }
    int data = current->next->data;
    free(current->next);
    current->next = NULL;
    list->size--;
    return data;
}

// Function to remove a node at a specific position in the linked list and return its data
int removeAt(LinkedList *list, int position) {
    if (list->head == NULL || position >= list->size) { // if the list is empty or the position is greater than or equal to the size of the list, return -1
        return -1;
    }
    if (position == 0) { // if the position is 0, remove the first node and return its data
        return removeFirst(list);
    } else if (position == list->size - 1) { // if the position is equal to the last index, remove the last node and return its data
        return removeLast(list);
    } else {
        // Otherwise, traverse the list until the position and remove the node in between the previous and current nodes
        Node *current = list->head;
        int i = 0;
        while (i < position - 1) {
            current = current->next;
            i++;
        }
        int data = current->next->data;
        Node *temp = current->next;
        current->next = temp->next;
        free(temp);
        list->size--;
        return data;
    }
}

// Function to print the linked list
void printList(LinkedList *list) {
    // Traverse the list and print the data of each node
    Node *current = list->head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Main function to test the above functions
int main() {
    // Initialize a linked list
    LinkedList list;
    list.head = NULL;
    list.size = 0;

    // Add some nodes to the list
    addFirst(&list, 3);
    addFirst(&list, 2);
    addFirst(&list, 1);
    addLast(&list, 4);
    insert(&list, 6, 4);
    insert(&list, 5, 4);

    // Print the list
    printList(&list); // Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL

    // Remove some nodes from the list and print their data
    int data1 = removeFirst(&list);
    printf("Removed: %d\n", data1); // Output: Removed: 1
    int data2 = removeLast(&list);
    printf("Removed: %d\n", data2); // Output: Removed: 6
    int data3 = removeAt(&list, 2);
    printf("Removed: %d\n", data3); // Output: Removed: 3

    // Print the updated list
    printList(&list); // Output: 2 -> 4 -> 5 -> NULL

    return 0;
}