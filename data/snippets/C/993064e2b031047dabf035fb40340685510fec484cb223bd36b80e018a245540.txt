#include<stdio.h>
#include<stdlib.h>

// This function implements the Euclidean algorithm to find the
// greatest common divisor of two numbers
int gcd(int num1, int num2) {

    // base cases
    if (num1 == 0)
        return num2;
    if (num2 == 0)
        return num1;

    // recursive call
    return gcd(num2, num1 % num2);
}

// This function calculates the inverse modulo using the Extended Euclidean algorithm
int mod_inverse(int num, int mod) {
    int temp, temp1, temp2, temp3;
    int q, t1, t2, t3;

    temp1 = 0;
    temp2 = 1;
    t1 = 1;
    t2 = 0;

    while (mod != 0) {
        q = num / mod;
        temp3 = mod;
        mod = num % mod;
        num = temp3;

        temp = temp1;
        temp1 = t1 - q * temp1;
        t1 = temp;

        temp = temp2;
        temp2 = t2 - q * temp2;
        t2 = temp;
    }

    if (t1 <= 0)
        t1 += temp2;

    return t1;
}

// Driver code to test the functions
int main() {

    int num1, num2, mod;

    printf("Enter the first number: ");
    scanf("%d" ,&num1);
    printf("Enter the second number: ");
    scanf("%d" ,&num2);
    printf("Enter the modulo: ");
    scanf("%d" ,&mod);

    // calculate greatest common divisor
    int gcd_result = gcd(num1, num2);

    // calculate inverse modulo
    int mod_inverse_result = mod_inverse(num2, mod);

    // print results
    printf("Greatest common divisor of %d and %d: %d\n", num1, num2, gcd_result);
    printf("Inverse modulo of %d modulo %d: %d\n", num2, mod, mod_inverse_result);

    return 0;
}