// Function to find the minimum spanning tree of a given graph
// Using Kruskal's algorithm

#include <stdio.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find algorithm
struct Subset {
    int parent, rank;
};

// Function to create a new graph with a given number of vertices and edges
void createGraph(int V, int E) {
    // Allocate memory for graph structure
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;

    // Allocate memory for edges
    graph->edges = (struct Edge*)malloc(E * sizeof(struct Edge));
}

// Function to find the parent of a given subset in union-find algorithm
int find(struct Subset subsets[], int i) {
    // Return the parent if the subset is the parent itself
    if (subsets[i].parent == i)
        return i;
    
    // Find recursively the parent of the subset and update the parent of i to the parent of the parent
    subsets[i].parent = find(subsets, subsets[i].parent);

    return subsets[i].parent;
}

// Function to perform union of two subsets in union-find algorithm
void Union(struct Subset subsets[], int x, int y) {
    // Find the parents of the two subsets
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    // Attach the smaller rank tree under the root of the higher rank tree (the higher rank tree becomes the parent)
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    
    // If the ranks are equal, choose one as root and increase its rank by 1
    else {
        subsets[xroot].parent = yroot;
        subsets[yroot].rank++;
    }
}

// Function to sort the edges in ascending order based on their weights using bubble sort algorithm
void sortEdges(struct Graph* graph) {
    for (int i = 0; i < graph->E - 1; i++) {
        for (int j = 0; j < graph->E - i - 1; j++) {
            if (graph->edges[j].weight > graph->edges[j + 1].weight) {
                // Swap the edges
                struct Edge temp = graph->edges[j];
                graph->edges[j] = graph->edges[j + 1];
                graph->edges[j + 1] = temp;
            }
        }
    }
}

// Function to find the minimum spanning tree using Kruskal's algorithm
void kruskalMST(struct Graph* graph) {
    // Allocate memory for the output MST
    struct Edge* MST = (struct Edge*)malloc(graph->V * sizeof(struct Edge));

    // Sort the edges in ascending order based on their weights
    sortEdges(graph);

    // Allocate memory for subsets for union-find algorithm
    struct Subset* subsets = (struct Subset*)malloc(graph->V * sizeof(struct Subset));

    // Initialize subsets with each subset having only one element and rank 0
    for (int i = 0; i < graph->V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    int e = 0; // Keep track of edges added in MST

    // Loop until V-1 edges are added to the MST
    for (int i = 0; i < graph->E && e < graph->V - 1; i++) {
        // Find the parents of the two vertices of the current edge
        int x = find(subsets, graph->edges[i].src);
        int y = find(subsets, graph->edges[i].dest);

        // If the parents are not equal, there is no cycle, so include the edge in MST and update the parents using union
        if (x != y) {
            MST[e] = graph->edges[i];
            e++;
            Union(subsets, x, y);
        }
    }

    // Print the resulting MST
    printf("Minimum Spanning Tree using Kruskal's algorithm:\n");
    for (int i = 0; i < e; i++) {
        printf("%d -- %d, weight: %d\n", MST[i].src, MST[i].dest, MST[i].weight);
    }
}

// Driver function
int main()
{
    // Number of vertices and edges in the graph
    int V = 4, E = 5;

    // Create the graph
    createGraph(V, E);

    // Add edges to the graph
    graph->edges[0].src = 0;
    graph->edges[0].dest = 1;
    graph->edges[0].weight = 10;

    graph->edges[1].src = 0;
    graph->edges[1].dest = 2;
    graph->edges[1].weight = 6;

    graph->edges[2].src = 0;
    graph->edges[2].dest = 3;
    graph->edges[2].weight = 5;

    graph->edges[3].src = 1;
    graph->edges[3].dest = 3;
    graph->edges[3].weight = 15;

    graph->edges[4].src = 2;
    graph->edges[4].dest = 3;
    graph->edges[4].weight = 4;

    // Find the minimum spanning tree using Kruskal's algorithm
    kruskalMST(graph);

    return 0;
}
``