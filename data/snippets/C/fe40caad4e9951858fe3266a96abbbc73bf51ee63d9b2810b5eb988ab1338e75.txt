/*
  This program simulates a simple database management system.

  Data structure:
  - 'student' struct contains student information such as name, ID, age, and GPA
  - 'node' struct contains a pointer to the next node and the student struct
  - 'head' pointer pointing to the first node in the linked list

  Functions used:
  - 'addStudent' function adds a new node to the linked list with the inputted student info
  - 'searchStudent' function searches for a student with the inputted ID
  - 'editStudent' function edits a student's information based on the inputted ID
  - 'deleteStudent' function deletes a student from the linked list based on the inputted ID
*/

// includes necessary libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// defines the maximum length for student name
#define MAX_NAME_LEN 50

// defines the student struct
typedef struct {
  char name[MAX_NAME_LEN];
  int ID;
  int age;
  float GPA;
} student;

// defines the node struct
typedef struct node {
  student *info;
  struct node *next;
} node;

// initializes the head pointer
node *head = NULL;

// function to add a student to the linked list
void addStudent(char name[], int ID, int age, float GPA) {
  // dynamically allocates memory for the new node
  node *newNode = (node *)malloc(sizeof(node));

  // checks if memory allocation was successful
  if (newNode == NULL) {
    printf("Error in memory allocation.");
    return;
  }

  // dynamically allocates memory for the student struct
  student *newStudent = (student *)malloc(sizeof(student));

  // checks if memory allocation was successful
  if (newStudent == NULL) {
    printf("Error in memory allocation.");
    return;
  }

  // copies the inputted student info to the new student struct
  strcpy(newStudent->name, name);
  newStudent->ID = ID;
  newStudent->age = age;
  newStudent->GPA = GPA;

  // assigns the new student struct to the new node
  newNode->info = newStudent;

  // checks if the linked list is empty
  if (head == NULL) {
    // sets the new node as the head
    head = newNode;
    // sets the next pointer of the new node to NULL
    newNode->next = NULL;
  } else {
    // checks if the new node's ID is smaller than the head's ID
    if (newNode->info->ID < head->info->ID) {
      // sets the new node as the head
      newNode->next = head;
      head = newNode;
    } else {
      // initializes current and previous pointers
      node *current = head;
      node *prev = NULL;
      // loops through the linked list until the appropriate spot is found or until the end of the linked list is reached
      while (current != NULL && current->info->ID <= newNode->info->ID) {
        // sets the previous pointer to the current pointer
        prev = current;
        // sets the current pointer to the next pointer
        current = current->next;
      }
      // checks if the current pointer is NULL, indicating the end of the linked list
      if (current == NULL) {
        // sets the next pointer of the previous node to the new node
        prev->next = newNode;
        // sets the next pointer of the new node to NULL
        newNode->next = NULL;
      } else {
        // inserts the new node in the appropriate spot
        newNode->next = current;
        prev->next = newNode;
      }
    }
  }

  // prints a success message
  printf("Student added successfully.\n");
}

// function to search for a student in the linked list
void searchStudent(int ID) {
  // checks if the linked list is empty
  if (head == NULL) {
    printf("There are no students in the linked list.\n");
    return;
  } else {
    // initializes a current pointer
    node *current = head;
    // loops through the linked list until the appropriate student is found or until the end of the linked list is reached
    while (current != NULL && current->info->ID != ID) {
      // sets the current pointer to the next pointer
      current = current->next;
    }
    // checks if the current pointer is NULL, indicating the end of the linked list
    if (current == NULL) {
      printf("Student with ID %d does not exist.\n", ID);
    } else {
      // prints the student's information
      printf("Student name: %s\n", current->info->name);
      printf("Student ID: %d\n", current->info->ID);
      printf("Student age: %d\n", current->info->age);
      printf("Student GPA: %.2f\n", current->info->GPA);
    }
  }
}

// function to edit a student's information in the linked list
void editStudent(int ID, char name[], int age, float GPA) {
  // checks if the linked list is empty
  if (head == NULL) {
    printf("There are no students in the linked list.\n");
    return;
  } else {
    // initializes a current pointer
    node *current = head;
    // loops through the linked list until the appropriate student is found or until the end of the linked list is reached
    while (current != NULL && current->info->ID != ID) {
      // sets the current pointer to the next pointer
      current = current->next;
    }
    // checks if the current pointer is NULL, indicating the end of the linked list
    if (current == NULL) {
      printf("Student with ID %d does not exist.\n", ID);
    } else {
      // copies the inputted student info to the current student struct
      strcpy(current->info->name, name);
      current->info->age = age;
      current->info->GPA = GPA;
      // prints a success message
      printf("Student information updated successfully.\n");
    }
  }
}

// function to delete a student from the linked list
void deleteStudent(int ID) {
  // checks if the linked list is empty
  if (head == NULL) {
    printf("There are no students in the linked list.\n");
    return;
  } else {
    // initializes current and previous pointers
    node *current = head;
    node *prev = NULL;
    // loops through the linked list until the appropriate student is found or until the end of the linked list is reached
    while (current != NULL && current->info->ID != ID) {
      // sets the previous pointer to the current pointer
      prev = current;
      // sets the current pointer to the next pointer
      current = current->next;
    }
    // checks if the current pointer is NULL, indicating the end of the linked list
    if (current == NULL) {
      printf("Student with ID %d does not exist.\n", ID);
      return;
    } else {
      // checks if the current pointer is the head pointer, indicating the first node in the linked list
      if (current == head) {
        // sets the head pointer to the next pointer
        head = head->next;
      } else {
        // sets the next pointer of the previous node to the next pointer of the current node
        prev->next = current->next;
      }
      // prints a success message
      printf("Student deleted successfully.\n");
      // frees the memory allocated for the student struct and the node
      free(current->info);
      free(current);
    }
  }
}

// main function
int main() {
  // adds three students to the linked list
  addStudent("John", 1234, 21, 3.4);
  addStudent("Jane", 2468, 19, 3.7);
  addStudent("Mark", 1357, 20, 3.9);
  // searches for a student with ID 2468
  searchStudent(2468);
  // edits Jane's information
  editStudent(2468, "Jane Doe", 19, 3.8);
  // deletes Mark from the linked list
  deleteStudent(1357);
  // searches for a student with ID 1357
  searchStudent(1357);

  // returns 0 to indicate successful program execution
  return 0;
}