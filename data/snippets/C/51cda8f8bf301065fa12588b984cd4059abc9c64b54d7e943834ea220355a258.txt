#include<stdio.h>

// Function to merge two arrays
void merge(int arr[], int start, int mid, int end) 
{ 
    // calculate the size of the subarrays
    int size1 = mid - start + 1; 
    int size2 = end - mid; 

    // create temporary arrays
    int temp1[size1], temp2[size2]; 

    // copy data to temporary arrays
    for (int i = 0; i < size1; i++) 
        temp1[i] = arr[start + i]; 
    for (int j = 0; j < size2; j++) 
        temp2[j] = arr[mid + 1 + j]; 

    // merge the temporary arrays back into arr
    int i = 0; // initial index of first subarray 
    int j = 0; // initial index of second subarray 
    int k = start; // initial index of merged subarray 

    // compare and merge the elements in the temporary arrays
    while (i < size1 && j < size2) { 
        if (temp1[i] <= temp2[j]) { 
            arr[k] = temp1[i]; 
            i++; 
        } 
        else { 
            arr[k] = temp2[j]; 
            j++; 
        } 
        k++; 
    } 

    // copy remaining elements of temp1 if any
    while (i < size1) { 
        arr[k] = temp1[i]; 
        i++; 
        k++; 
    } 

    // copy remaining elements of temp2 if any
    while (j < size2) { 
        arr[k] = temp2[j]; 
        j++; 
        k++; 
    } 
} 

// Function to perform mergesort on an array
void mergeSort(int arr[], int start, int end) 
{ 
    if (start < end) { 
        // find the middle point
        int mid = start + (end - start) / 2; 

        // recursively sort the first half and the second half of the array
        mergeSort(arr, start, mid); 
        mergeSort(arr, mid + 1, end); 

        // merge the two sorted halves
        merge(arr, start, mid, end); 
    } 
} 

int main() 
{ 
    int arr[] = { 19, 13, 2, 45, 31, 66, 23 }; 
    int size = sizeof(arr) / sizeof(arr[0]); 

    printf("Original array:\n"); 
    for (int i = 0; i < size; i++) 
        printf("%d ", arr[i]); 

    // call mergeSort function to sort the array
    mergeSort(arr, 0, size - 1); 

    printf("\nSorted array:\n"); 
    for (int i = 0; i < size; i++) 
        printf("%d ", arr[i]); 

    return 0; 
}