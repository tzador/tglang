#include <stdio.h>

// Function to merge two sorted arrays
void merge(int arr[], int l, int m, int r) {
    //Size of left and right sub-arrays
    int n1 = m - l + 1;
    int n2 = r - m;
    // Create temp arrays
    int L[n1], R[n2];
    // Copy data to temp arrays
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];
    // Merge the temp arrays
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    // Copy remaining elements of L (if any)
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    // Copy remaining elements of R (if any)
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function to perform mergesort on array
void mergesort(int arr[], int l, int r) {
    if (l < r) {
        // Find midpoint of array
        int m = l + (r - l) / 2;
        // Sort left and right sub-arrays
        mergesort(arr, l, m);
        mergesort(arr, m + 1, r);
        // Merge sorted sub-arrays
        merge(arr, l, m, r);
    }
}

// Driver code to test mergesort
int main() {
    int arr[] = {5, 4, 3, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Array before sorting:\n");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");
    // Call mergesort function
    mergesort(arr, 0, n - 1);
    printf("Array after sorting:\n");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");
    return 0;
}