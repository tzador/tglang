// This code uses dynamic programming to find the longest common subsequence of two string inputs

// Function to find the maximum of two integers
int max(int a, int b) 
{ 
    return (a > b) ? a : b; 
} 

// Function to find the longest common subsequence of two strings
int longest_common_subsequence(char* string1, char* string2, int m, int n) 
{ 
    // Creating a 2D array to store the results of subproblems 
    int array[m + 1][n + 1]; 

    // Filling the array in bottom-up manner 
    for (int i = 0; i <= m; i++) 
    { 
        for (int j = 0; j <= n; j++) 
        { 
            // If either string is empty, there is no common subsequence so set value to 0
            if (i == 0 || j == 0) 
                array[i][j] = 0; 

            // If characters in both strings match, increase subsequence length by 1 
            else if (string1[i - 1] == string2[j - 1]) 
                array[i][j] = array[i - 1][j - 1] + 1; 

            // If characters don't match, take maximum of value above or to the left
            else
                array[i][j] = max(array[i - 1][j], array[i][j - 1]); 
        } 
    } 

    // Storing the longest common subsequence in a separate array to be returned
    int lcs_length = array[m][n]; 
    char lcs[lcs_length + 1]; 
    lcs[lcs_length] = '\0'; 

    // Tracing back through the array to fill in the longest common subsequence 
    int i = m, j = n; 
    while (i > 0 && j > 0) 
    { 
        // If characters match, add character to subsequence and move diagonally up and left 
        if (string1[i - 1] == string2[j - 1]) 
        { 
            lcs[lcs_length - 1] = string1[i - 1]; 
            i--; 
            j--; 
            lcs_length--; 
        } 

        // If characters don't match, check values above and to the left and move to the larger one
        else if (array[i - 1][j] > array[i][j - 1]) 
            i--; 
        else
            j--; 
    } 

    // Printing the longest common subsequence
    printf("Longest common subsequence: %s", lcs);

    // Returning the length of the longest common subsequence
    return array[m][n]; 
} 

// Driver code to test above function
int main() 
{ 
    char string1[] = "programming"; 
    char string2[] = "languages"; 
    int m = strlen(string1); 
    int n = strlen(string2); 
    printf("Length of longest common subsequence: %d\n", longest_common_subsequence(string1, string2, m, n)); 
    return 0; 
}