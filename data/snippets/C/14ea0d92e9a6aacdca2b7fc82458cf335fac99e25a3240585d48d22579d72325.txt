// This is a program to implement a generic binary search tree
#include<stdio.h> // standard input/output library

// a structure to define each node in the binary tree
struct Node {
    int data; // data of the node
    struct Node* left; // pointer to the left child
    struct Node* right; // pointer to the right child
};

// function to create a new node
struct Node* createNode(int value) {
    // allocate memory for the new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
    newNode->data = value; // set the data of the new node
    newNode->left = NULL; // set the left child as NULL
    newNode->right = NULL; // set the right child as NULL

    return newNode; // return the newly created node
}

// function to insert a new node into the tree
struct Node* insertNode(struct Node* root, int value) {
    // if the root is NULL, create a new node and make it the root
    if(root == NULL) {
        return createNode(value);
    }
    // if the value is less than the data of the root, insert it in the left subtree
    else if(value < root->data) {
        root->left = insertNode(root->left, value);
    }
    // if the value is greater than the data of the root, insert it in the right subtree
    else if(value > root->data) {
        root->right = insertNode(root->right, value);
    }

    return root; // return the updated root node
}

// function to search for a value in the tree
struct Node* search(struct Node* root, int value) {
    // if the root is NULL or the value is found at the root, return the root
    if(root == NULL || root->data == value) {
        return root;
    }
    // if the value is less than the data of the root, search in the left subtree
    else if(value < root->data) {
        return search(root->left, value);
    }
    // if the value is greater than the data of the root, search in the right subtree
    else if(value > root->data) {
        return search(root->right, value);
    }
}

// function to print the tree in order (left-root-right)
void inorderTraversal(struct Node* root) {
    if(root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// main function to test the binary search tree
int main() {
    // create the root node with value 8
    struct Node* root = createNode(8);
    // insert nodes with values 6, 11, 4, 7, 9 into the tree
    insertNode(root, 6);
    insertNode(root, 11);
    insertNode(root, 4);
    insertNode(root, 7);
    insertNode(root, 9);

    // search for value 7 in the tree
    struct Node* result = search(root, 7);
    // print the node with value 7 if found, or "Not found" if not found
    if(result != NULL) {
        printf("Node with value 7 found in the tree.\n");
    }
    else {
        printf("Node with value 7 not found in the tree.\n");
    }

    // print the tree in order
    printf("Inorder traversal of the tree: ");
    inorderTraversal(root);
    printf("\n");
    return 0;
}