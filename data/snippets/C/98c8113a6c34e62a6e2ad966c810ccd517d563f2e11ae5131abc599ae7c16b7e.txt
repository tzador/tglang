// This is a complex sorting algorithm called QuickSort
// It takes in an array of integers and sorts them in ascending order

// Function to swap two elements in an array
void swap(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

// Function to partition the array for sorting
int partition(int arr[], int low, int high) {
  int pivot = arr[high]; // select last element as pivot
  int i = (low - 1); // set index of smaller element
  for (int j = low; j <= high - 1; j++) {
    // if current element is smaller than or equal to pivot
    if (arr[j] <= pivot) {
      i++; // increment index of smaller element
      swap(&arr[i], &arr[j]); // swap arr[i] and arr[j]
    }
  }
  swap(&arr[i + 1], &arr[high]); // swap pivot and element at index i+1
  return (i + 1); // return partition index
}

// Function to implement QuickSort
void quickSort(int arr[], int low, int high) {
  if (low < high) {
    int pi = partition(arr, low, high); // partition the array
    quickSort(arr, low, pi - 1); // sort left subarray
    quickSort(arr, pi + 1, high); // sort right subarray
  }
}

// Driver code to test QuickSort function
int main() {
  int arr[] = { 10, 7, 8, 9, 1, 5 };
  int n = sizeof(arr) / sizeof(arr[0]); // calculate size of array
  quickSort(arr, 0, n - 1); // call QuickSort function
  printf("Sorted array:");
  for (int i = 0; i < n; i++) {
    printf("%d ", arr[i]); // print sorted array
  }
  return 0;
}