/* This code snippet demonstrates the implementation of a binary search tree in C */

// Node struct to store data and pointers to left and right child nodes
struct Node
{
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node and initialize its data and child pointers
struct Node* createNode(int data)
{
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a new node in a binary search tree
struct Node* insertNode(struct Node* root, int data)
{
    // If tree is empty, create a new node as root
    if (root == NULL)
        return createNode(data);

    // Otherwise, traverse the tree to find the correct position to insert the new node
    if (data < root->data)
        root->left = insertNode(root->left, data);
    else if (data > root->data)
        root->right = insertNode(root->right, data);

    return root;
}

// Function to search for a specific value in a binary search tree
bool search(struct Node* root, int data)
{
    // If tree is empty or the value is found at root, return true
    if (root == NULL || root->data == data)
        return true;

    // If value is less than root's data, search in left subtree
    if (data < root->data)
        return search(root->left, data);

    // If value is greater than root's data, search in right subtree
    else
        return search(root->right, data);
}

// Function to print the tree in preorder traversal
void preorder(struct Node* root)
{
    if (root != NULL)
    {
        // Print the current node's data
        printf("%d ", root->data);

        // Traverse the left subtree
        preorder(root->left);

        // Traverse the right subtree
        preorder(root->right);
    }
}

// Main function to test the implementation
int main()
{
    // Create an empty binary search tree
    struct Node* root = NULL;

    // Insert nodes in the tree
    root = insertNode(root, 12);
    root = insertNode(root, 5);
    root = insertNode(root, 15);
    root = insertNode(root, 3);
    root = insertNode(root, 7);
    root = insertNode(root, 13);
    root = insertNode(root, 17);

    // Print the tree in preorder traversal
    printf("Preorder traversal of binary search tree: ");
    preorder(root);

    // Search for a specific value in the tree
    int searchData = 13;
    if (search(root, searchData))
        printf("\n%d is found in the tree.", searchData);
    else
        printf("\n%d is not found in the tree.", searchData);

    return 0;
}