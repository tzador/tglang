/*
This is a function that uses dynamic programming to find the longest common subsequence of two strings
It takes in two strings s1 and s2 and returns the length of the longest common subsequence
*/
int longest_common_subsequence(char *s1, char *s2) {

    //initialize variables
    int len1 = strlen(s1);
    int len2 = strlen(s2);

    //create a 2D array to store the results of subproblems
    int dp[len1 + 1][len2 + 1];

    //loop through the strings to fill up the array
    for (int i = 0; i <= len1; i++) {
        for (int j = 0; j <= len2; j++) {

            //base case: if either string is empty, subsequence length is 0
            if (i == 0 || j == 0) {
                dp[i][j] = 0;
            }

            //if characters match, add 1 to the previous result
            else if (s1[i-1] == s2[j-1]) {
                dp[i][j] = dp[i-1][j-1] + 1;
            }

            //if characters don't match, take the maximum of the previous results
            else {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }

    //the last element in the array will hold the length of the longest common subsequence
    return dp[len1][len2];
}