// This code snippet generates a pseudorandom binary tree

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Struct for node of the binary tree
typedef struct Node
{
    int key;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
// Input: integer key
// Returns: pointer to created node
Node* createNode(int key)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a new node in the tree
// Input: pointer to root node, integer key
// Returns: void
void insertNode(Node** root, int key)
{
    Node* current = *root;
    Node* parent = NULL;
    // Traverse the tree to find the position to insert the new node
    while(current != NULL)
    {
        parent = current;
        if(key < current->key)
            current = current->left;
        else
            current = current->right;
    }
    // Create the new node and insert it at the appropriate position
    Node* newNode = createNode(key);
    if(parent == NULL)
        *root = newNode;
    else if(key < parent->key)
        parent->left = newNode;
    else
        parent->right = newNode;
}

// Function to generate a pseudorandom binary tree
// Input: integer array, size of array
// Returns: pointer to root node of the generated tree
Node* generateTree(int arr[], int n)
{
    // Seed the random number generator
    srand(time(0));
    
    // Insert the first element of the array as the root node
    Node* root = createNode(arr[0]);
    
    // Insert the remaining elements in the array into the tree
    for(int i = 1; i < n; i++)
    {
        // Generate a random number to determine the position in the tree to insert the new node
        int randNum = rand() % 2 + 1;
        
        if(randNum == 1)
            insertNode(&root, arr[i]); // Insert the new node as left child
        else
            insertNode(&root, arr[i]); // Insert the new node as right child
    }
    return root;
}

int main()
{
    int arr[] = {5, 3, 2, 7, 6, 9, 1}; // Array used to generate tree
    
    // Generate the pseudorandom binary tree
    Node* tree = generateTree(arr, 7);

    return 0;
}