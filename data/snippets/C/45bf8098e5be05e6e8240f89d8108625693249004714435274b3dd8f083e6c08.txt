/*
    This is a complex code snippet in the C programming language.
    It uses a variety of data structures and algorithms to perform multiple tasks.
*/

// Include necessary libraries
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Define a custom data type named 'Employee' to store information about employees */
typedef struct Employee {
    char name[50];
    int age;
    char department[50];
    float salary;
    struct Employee *next; // pointer to next employee
} Employee;

/* Declare variables */
Employee *head = NULL; // pointer to head of employee list
Employee *tail = NULL; // pointer to tail of employee list

// Function to add a new employee to the list
void addEmployee(char name[], int age, char department[], float salary) {
    // Dynamically allocate memory for the new employee
    Employee *newEmployee = (Employee*) malloc(sizeof(Employee));
    
    /* Fill in employee information */
    strcpy(newEmployee->name, name);
    newEmployee->age = age;
    strcpy(newEmployee->department, department);
    newEmployee->salary = salary;
    newEmployee->next = NULL; // new employee is currently the last one in the list
    
    // Check if list is empty
    if (head == NULL) {
        // Make the new employee the head and tail of the list
        head = newEmployee;
        tail = newEmployee;
    } else {
        // Add the new employee to the end of the list and update tail
        tail->next = newEmployee;
        tail = newEmployee;
    }
}

// Function to print all employees in the list
void printEmployees() {
    // Create a temporary pointer to traverse the list
    Employee *current = head;
    
    // Loop through the list
    while (current != NULL) {
        // Print employee information in a user-friendly format
        printf("Name: %s \n", current->name);
        printf("Age: %d \n", current->age);
        printf("Department: %s \n", current->department);
        printf("Salary: $%.2f \n", current->salary);
        
        // Move to the next employee in the list
        current = current->next;
    }
}

// Function to delete an employee from the list
void deleteEmployee(char name[]) {
    // Create two temporary pointers to traverse the list
    Employee *current = head;
    Employee *previous = NULL;
    
    // Loop through the list
    while (current != NULL) {
        // Check if current employee is the one to be deleted
        if (strcmp(current->name, name) == 0) {
            // Check if it is the only employee in the list
            if (current == head && current == tail) {
                // Free the memory allocated for the single employee
                free(current);
                
                // Update head and tail of the list to NULL
                head = NULL;
                tail = NULL;
                return;
            }
            
            // Check if current employee is the head of the list
            if (current == head) {
                // Update head to point to the next employee in the list
                head = current->next;
                // Free the memory allocated for the current employee
                free(current);
                return;
            }
            
            // Check if current employee is the tail of the list
            if (current == tail) {
                // Update tail to point to the previous employee in the list
                tail = previous;
                // Free the memory allocated for the current employee
                free(current);
                return;
            }
            
            // If none of the above conditions are met, it means current employee is in the middle of the list
            // Update the pointer of the previous employee to point to the next employee in the list
            previous->next = current->next;
            // Free the memory allocated for the current employee
            free(current);
            return;
        }
        
        // Move to the next employee in the list
        previous = current;
        current = current->next;
    }
    
    // If no matching employee is found, print error message
    printf("Employee \"%s\" does not exist in the list. \n", name);
}

// Main function
int main() {
    // Add employees to the list
    addEmployee("John Smith", 28, "Marketing", 5000.50);
    addEmployee("Sarah Thompson", 35, "Human Resources", 7000.00);
    addEmployee("Matt Davis", 40, "IT", 8000.00);
    addEmployee("Emily Wilson", 25, "Sales", 6000.75);
    
    // Print all employees in the list
    printf("Employees in the company: \n");
    printEmployees();
    printf("\n");
    
    // Delete an employee from the list
    deleteEmployee("John Smith");
    
    // Print updated employee list
    printf("Updated list of employees: \n");
    printEmployees();
    
    return 0;
}