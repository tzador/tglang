/*
* This is a complex code snippet written in C
* It performs matrix multiplication with
* two given matrices of size mxn and nxp respectively
*/
#include <stdio.h>
#include <stdlib.h>

// Function to perform matrix multiplication
// Takes in three parameters: two matrices "A" and "B" and their sizes "m", "n", and "p"
void matrixMultiplication(int **A, int **B, int m, int n, int p) {
    // Create a result matrix of size mxp
    int **result = (int **)malloc(m * sizeof(int *));
    for(int i = 0; i < m; i++) {
        result[i] = (int *)malloc(p * sizeof(int));
    }

    // Traverse through the rows of matrix "A"
    for(int i = 0; i < m; i++) {
        // Traverse through the columns of matrix "B"
        for(int j = 0; j < p; j++) {
            // Initialize the element at position (i,j) of result matrix to 0
            result[i][j] = 0;
            // Traverse through the columns of matrix "A" and rows of matrix "B"
            for(int k = 0; i < n; k++) {
                // Update the element at position (i,j) of result matrix
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    // Print the result matrix
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < p; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
}

// Driver code
int main() {
    // Declare and initialize the matrices
    int m = 3, n = 2, p = 4;
    int **A = (int **)malloc(m * sizeof(int *));
    int **B = (int **)malloc(n * sizeof(int *));

    // Populate matrix "A"
    for(int i = 0; i < m; i++) {
        A[i] = (int *)malloc(n * sizeof(int));
        for(int j = 0; j < n; j++) {
            A[i][j] = j + 1;
        }
    }

    // Populate matrix "B"
    for(int i = 0; i < n; i++) {
        B[i] = (int *)malloc(p * sizeof(int));
        for(int j = 0; j < p; j++) {
            B[i][j] = j + 1;
        }
    }

    // Call the matrix multiplication function
    matrixMultiplication(A, B, m, n, p);

    // Free the dynamically allocated memory
    for(int i = 0; i < m; i++) {
        free(A[i]);
        free(B[i]);
        free(result[i]);
    }
    free(A);
    free(B);
    free(result);

    return 0;
}