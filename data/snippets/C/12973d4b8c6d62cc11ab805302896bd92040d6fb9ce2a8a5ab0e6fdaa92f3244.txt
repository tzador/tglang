// This code snippet implements a binary search algorithm in C

// Function to perform the binary search
// Parameters:
// arr - sorted array to search in
// l - starting index of the array
// r - ending index of the array
// x - element to be searched for
int binarySearch(int arr[], int l, int r, int x) 
{ 
    // Loop until l is less than or equal to r
    while (l <= r) 
    { 
        // Determine mid index
        int mid = l + (r - l) / 2; 
  
        // If element is present at mid index, return mid
        if (arr[mid] == x) 
            return mid; 
  
        // If element is less than element at mid index, search in left half 
        if (arr[mid] > x) 
            r = mid - 1; 
  
        // Else, search in right half 
        else
            l = mid + 1; 
    } 
  
    // If element is not present in array, return -1 
    return -1; 
} 
  
// Code to test above function 
int main() 
{ 
    // Initialize sorted array 
    int arr[] = { 2, 5, 7, 10, 12, 15 }; 
    
    // Determine size of array
    int n = sizeof(arr) / sizeof(arr[0]); 
    
    // Element to be searched
    int x = 12; 
    
    // Call binarySearch function
    int result = binarySearch(arr, 0, n - 1, x); 
    
    // If element is found, print index
    if (result == -1) 
        printf("Element is not present in array"); 
    else
        printf("Element is present at index %d", result); 
    
    return 0; 
}