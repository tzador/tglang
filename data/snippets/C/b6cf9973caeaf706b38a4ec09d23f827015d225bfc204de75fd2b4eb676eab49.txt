/**
 * This is a complex function that takes in an array of integers
 * and applies a sorting algorithm to it in ascending order.
 * It uses a combination of selection sort and bubble sort for efficiency.
 *
 * @param arr The input array to be sorted
 * @param size The size of the array
 */
void sortArray(int arr[], int size) {
    // Selection sort to sort the first half of the array
    for (int i = 0; i < size / 2; i++) {

        // Find the smallest element in the unsorted subarray
        int minIndex = i;
        for (int j = i + 1; j < size / 2; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap the smallest element with the first element in the unsorted subarray
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }

    // Bubble sort to sort the second half of the array
    for (int i = size / 2; i < size; i++) {

        // Flag to check if any swaps were made in the current pass
        int flag = 0;

        // Loop through the unsorted subarray and swap adjacent elements if they are in the wrong order
        for (int j = size - 1; j > i; j--) {
            if (arr[j] < arr[j - 1]) {
                int temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;

                // Set the flag to 1 to indicate that a swap was made
                flag = 1;
            }
        }

        // If no swaps were made in the current pass, the array is already sorted
        if (flag == 0) {
            break;
        }
    }
}