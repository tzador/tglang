// This is a function that calculates the greatest common divisor of two numbers
// It uses recursion to find the GCD
// Input: two integers
// Output: GCD of the two numbers (integer)

int GCD(int num1, int num2) {
    if(num1 == num2) { // base case when both numbers are equal
        return num1;
    } else if(num1 == 0) { // if one of the numbers is 0, the other number is the GCD
        return num2;
    } else if(num2 == 0) { // same as above
        return num1;
    } else if(num1 % 2 == 0 && num2 % 2 == 0) { // if both numbers are even, divide both by 2 and call GCD with the result
        return (2 * GCD(num1/2, num2/2));
    } else if(num1 % 2 == 0 && num2 % 2 == 1) { // if one number is even and the other is odd, divide the even number by 2 and call GCD with the new numbers
        return GCD(num1/2, num2);
    } else if(num1 % 2 == 1 && num2 % 2 == 0) { // same as above but with swapped numbers
        return GCD(num2/2, num1);
    } else if(num1 % 2 == 1 && num2 % 2 == 1) { // if both numbers are odd, subtract the smaller one from the larger one and call GCD with the result and the smaller number
        if(num1 > num2) {
            return GCD(num1-num2, num2);
        } else {
            return GCD(num2-num1, num1);
        }
    }
}