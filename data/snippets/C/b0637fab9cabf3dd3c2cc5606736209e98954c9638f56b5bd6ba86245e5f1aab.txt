/**
 * This code snippet demonstrates an example of a linked list implementation in C.
 *
 * Linked lists are data structures that consist of nodes connected to each other by pointers.
 * Each node contains data and a pointer to the next node in the list.
 *
 * In this example, we will create a linked list of integers and perform basic operations on it.
 */

#include <stdio.h>
#include <stdlib.h>

// structure for a node in the linked list
struct node {
    int data;           // data stored in the node
    struct node* next;  // pointer to the next node in the list
};

// function to print the linked list
void printList(struct node* head) {
    struct node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);  // print data of current node
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    // create an empty linked list
    struct node* head = NULL;

    // create nodes to store data
    struct node* node1 = (struct node*)malloc(sizeof(struct node));
    struct node* node2 = (struct node*)malloc(sizeof(struct node));
    struct node* node3 = (struct node*)malloc(sizeof(struct node));

    // assign values to nodes and link them together
    node1->data = 1;  // first node contains value 1
    node1->next = node2;  // first node points to second node
    node2->data = 2;  // second node contains value 2
    node2->next = node3;  // second node points to third node
    node3->data = 3;  // third node contains value 3
    node3->next = NULL;  // third node doesn't point to any other node

    // assign head of linked list to first node
    head = node1;

    // print the linked list
    printf("Initial linked list: ");
    printList(head);

    // insert a new node at the beginning of the list
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = 4;  // new node contains value 4
    newNode->next = head;  // new node points to current head
    head = newNode;  // assign new node as the new head

    // print the updated linked list
    printf("Linked list after inserting a new node: ");
    printList(head);

    // insert a new node at the end of the list
    struct node* lastNode = (struct node*)malloc(sizeof(struct node));
    lastNode->data = 5;  // new node contains value 5
    lastNode->next = NULL;  // new node doesn't point to any other node
    struct node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = lastNode;  // make the last node point to the new node

    // print the updated linked list
    printf("Linked list after inserting another new node: ");
    printList(head);

    // delete the first node of the list
    temp = head;
    head = head->next;  // move head to the second node
    free(temp);  // free the memory allocated for the first node

    // print the updated linked list
    printf("Linked list after deleting the first node: ");
    printList(head);

    // delete the last node of the list
    temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);  // free the memory allocated for the last node
    temp->next = NULL;  // make the second last node the new last node

    // print the updated linked list
    printf("Linked list after deleting the last node: ");
    printList(head);

    return 0;
}