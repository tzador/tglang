// This is a complex code snippet in ACTIONSCRIPT
// It creates a class called "Vector" with multiple methods and properties

// Define the class "Vector"
class Vector {
    // Properties
    private var _x:Number;
    private var _y:Number;
    
    /**
     * Constructor function for Vector class
     * @param x The x-coordinate of the vector
     * @param y The y-coordinate of the vector
     */
    public function Vector(x:Number, y:Number) {
        _x = x;
        _y = y;
    }
    
    /**
     * Get the magnitude of the vector
     * @return The magnitude of the vector
     */
    public function get magnitude():Number {
        return Math.sqrt(_x * _x + _y * _y);
    }
    
    /**
     * Get the angle of the vector in radians
     * @return The angle of the vector
     */
    public function get angle():Number {
        return Math.atan2(_y, _x);
    }
    
    /**
     * Add another vector to this vector
     * @param v The vector to add
     * @return A new vector with the sum of the two vectors
     */
    public function add(v:Vector):Vector {
        return new Vector(_x + v._x, _y + v._y);
    }
    
    /**
     * Subtract another vector from this vector
     * @param v The vector to subtract
     * @return A new vector with the difference of the two vectors
     */
    public function subtract(v:Vector):Vector {
        return new Vector(_x - v._x, _y - v._y);
    }
    
    /**
     * Scalar multiplication with this vector
     * @param s The scalar value to multiply with
     * @return A new vector with its components multiplied by the scalar value
     */
    public function multiply(s:Number):Vector {
        return new Vector(_x * s, _y * s);
    }
    
    /**
     * Calculate the dot product of this vector with another vector
     * @param v The other vector
     * @return The dot product of the two vectors
     */
    public function dot(v:Vector):Number {
        return _x * v._x + _y * v._y;
    }
}