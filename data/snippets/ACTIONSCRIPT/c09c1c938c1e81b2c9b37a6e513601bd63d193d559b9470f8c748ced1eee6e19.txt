// Creating a class called Person that extends the EventDispatcher class
class Person extends EventDispatcher {
    
    // Declaring private properties
    private var name:String;
    private var age:int;
    
    // Constructor function with name and age parameters
    public function Person(name:String, age:int) {
        
        // Assigning the parameters to the private properties
        this.name = name;
        this.age = age;
        
        // Adding an event listener to listen for a change in age
        this.addEventListener(Event.CHANGE, handleAgeChange);
    }
    
    // Method to handle a change in age
    private function handleAgeChange(event:Event):void {
        
        // Check if the new age is lower than the current age
        if(event.newAge < this.age) {
            
            // Dispatch a custom event called "AgeDecreased"
            this.dispatchEvent(new Event("AgeDecreased"));
        }
    }
    
    // Getter method to retrieve the person's name
    public function getName():String {
        return this.name;
    }
    
    // Setter method to set the person's age
    public function setAge(age:int):void {
        this.age = age;
        
        // Dispatch the "CHANGE" event
        this.dispatchEvent(new Event("CHANGE"));
    }
}

// Creating an instance of the Person class
var john:Person = new Person("John", 25);

// Adding an event listener to listen for "AgeDecreased" event
john.addEventListener("AgeDecreased", handleAgeDecreased);

// Method to handle the "AgeDecreased" event
private function handleAgeDecreased(event:Event):void {
    // Print a message to the console indicating the decrease in age
    trace("Age decreased!");
}

// Calling the setAge method to decrease the person's age
john.setAge(20);