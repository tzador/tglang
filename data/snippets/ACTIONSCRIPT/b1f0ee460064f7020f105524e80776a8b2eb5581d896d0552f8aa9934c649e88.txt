// This code snippet generates a random maze using binary tree algorithm

// Define a class for the maze
class Maze {

    // Create variables for storing the size of the maze
    var rowCount: Int;
    var columnCount: Int;

    // Initialize a 2D array to store cells
    var cells: Array<Array<Cell>>;

    // Create a constructor to initialize the maze
    function Maze(rowCount: Int, columnCount: Int) {
        this.rowCount = rowCount;
        this.columnCount = columnCount;
        generateMaze();
    }

    // Function to generate the maze
    function generateMaze() {

        // Loop through each row
        for (var i = 0; i < rowCount; i++) {

            // Initialize an array for the current row
            cells[i] = [];
            
            // Loop through each column
            for (var j = 0; j < columnCount; j++) {

                // Create a new cell object and add it to the current row
                var cell: Cell = new Cell(i, j);
                cells[i][j] = cell;

                // If the current cell is not in the first row
                if (i > 0) {
                    // Get the cell above the current cell
                    var aboveCell: Cell = cells[i - 1][j];

                    // Add a bottom wall to the current cell and a top wall to the cell above
                    cell.addWall("bottom");
                    aboveCell.addWall("top");
                }

                // If the current cell is not in the first column
                if (j > 0) {
                    // Get the cell to the left of the current cell
                    var leftCell: Cell = cells[i][j - 1];

                    // Add a right wall to the current cell and a left wall to the cell to the left
                    cell.addWall("right");
                    leftCell.addWall("left");
                }

                // Randomly choose if the current cell will have a right wall or a bottom wall
                // This uses the binary tree algorithm
                if (Random.value < 0.5) {
                    cell.removeWall("right");
                } else {
                    cell.removeWall("bottom");
                }
            }
        }
    }

    // Function to get the cell at a given row and column
    function getCell(row: Int, column: Int): Cell {
        return cells[row][column];
    }
}

// Define a class for each cell in the maze
class Cell {

    // Variables to store the row and column of the cell
    var row: Int;
    var column: Int;

    // Boolean variables to store whether the cell has walls in each direction
    var topWall: Bool = true;
    var rightWall: Bool = true;
    var bottomWall: Bool = true;
    var leftWall: Bool = true;

    // Constructor to initialize the cell with a given row and column
    function Cell(row: Int, column: Int) {
        this.row = row;
        this.column = column;
    }

    // Function to add a wall to the cell in a given direction
    function addWall(direction: String) {
        switch (direction) {
            case "top":
                topWall = true;
                break;
            case "right":
                rightWall = true;
                break;
            case "bottom":
                bottomWall = true;
                break;
            case "left":
                leftWall = true;
                break;
        }
    }

    // Function to remove a wall from the cell in a given direction
    function removeWall(direction: String) {
        switch (direction) {
            case "top":
                topWall = false;
                break;
            case "right":
                rightWall = false;
                break;
            case "bottom":
                bottomWall = false;
                break;
            case "left":
                leftWall = false;
                break;
        }
    }
}

// Create a new maze object with 10 rows and 10 columns
var maze: Maze = new Maze(10, 10);

// Get the cell at row 0, column 0 and print the walls
trace("Cell at (0, 0) has walls: " + maze.getCell(0, 0).topWall + ", " + maze.getCell(0, 0).rightWall + ", " + maze.getCell(0, 0).bottomWall + ", " + maze.getCell(0, 0).leftWall);