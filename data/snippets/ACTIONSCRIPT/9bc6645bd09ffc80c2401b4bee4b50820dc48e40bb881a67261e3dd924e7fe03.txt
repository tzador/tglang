// Define an abstract class called "Vehicle"
// with a constructor that takes in the parameters "brand" and "color"
// and assigns them to the class variables "brand" and "color" respectively
// This class cannot be instantiated directly, only extended by other classes
class Vehicle
{
    protected var brand:String;
    protected var color:String;
    
    public function Vehicle(brand:String, color:String)
    {
        this.brand = brand;
        this.color = color;
    }
}

// Define a class called "Car" that extends the abstract class "Vehicle"
// with a constructor that takes in the same parameters as the base constructor
// and calls the base constructor to assign the values to the class variables
class Car extends Vehicle
{
    private var model:String;

    // Constructor calls the base constructor with the parameters passed in
    public function Car(brand:String, color:String, model:String)
    {
        super(brand, color);
        this.model = model;
    }

    // Method to get the full make and model of the car
    public function getMakeAndModel():String
    {
        return brand + " " + model;
    }
}

// Instantiate a new "Car" object with the brand "Ford", color "Blue", and model "Mustang"
var myCar:Car = new Car("Ford", "Blue", "Mustang");

// Call the "getMakeAndModel" method on the car object
// and store the returned string in a variable
var carMakeAndModel:String = myCar.getMakeAndModel();

// Print out the make and model of the car
trace(carMakeAndModel); // Output: Ford Mustang