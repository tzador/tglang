// This code snippet demonstrates a complex sorting algorithm in ActionScript
// The algorithm uses a divide and conquer approach to sort an array of numbers
// Note: the code assumes the array is filled with integers

// Function that implements the sorting algorithm
function sortArray(array:Array):Array
{
    // Checks if the array is empty or has only one element
    if(array.length <= 1)
    {
        return array; // If true, return the array as it is already sorted
    }

    // Finding the middle index of the array for splitting
    var middleIndex:int = array.length / 2;

    // Creating sub-arrays by splitting the original array
    var leftArray:Array = array.slice(0, middleIndex); // First half of the original array
    var rightArray:Array = array.slice(middleIndex); // Second half of the original array

    // Recursively calling the function to split and merge the sub-arrays
    leftArray = sortArray(leftArray); // Sorting the first half
    rightArray = sortArray(rightArray); // Sorting the second half

    // Merging the sorted sub-arrays
    return mergeArrays(leftArray, rightArray);
}

// Function to merge two sorted arrays into one sorted array
function mergeArrays(left:Array, right:Array):Array
{
    // Variables to keep track of the indexes in each array
    var leftIndex:int = 0;
    var rightIndex:int = 0;

    // Array to store the merged result
    var sortedArray:Array = [];

    // Loop to compare and merge the two sub-arrays
    while(leftIndex < left.length && rightIndex < right.length)
    {
        if(left[leftIndex] < right[rightIndex])
        {
            // If the element in left array is smaller, add it to the sorted array
            sortedArray.push(left[leftIndex]);
            leftIndex++; // Move to the next element in left array
        }
        else
        {
            // If the element in right array is smaller, add it to the sorted array
            sortedArray.push(right[rightIndex]);
            rightIndex++; // Move to the next element in right array
        }
    }

    // Adding the remaining elements from left array (if any) to the sorted array
    while(leftIndex < left.length)
    {
        sortedArray.push(left[leftIndex]);
        leftIndex++;
    }

    // Adding the remaining elements from right array (if any) to the sorted array
    while(rightIndex < right.length)
    {
        sortedArray.push(right[rightIndex]);
        rightIndex++;
    }

    // Return the sorted array
    return sortedArray;
}

// Example code to test the sorting function
var unsortedArray:Array = [3, 6, 2, 9, 1, 8, 5];
var sortedArray:Array = sortArray(unsortedArray);
trace("Unsorted Array: " + unsortedArray); // Output: [3, 6, 2, 9, 1, 8, 5]
trace("Sorted Array: " + sortedArray); // Output: [1, 2, 3, 5, 6, 8, 9]