function binarySearch(list:Array, item:Number):Number {
    // This function implements the binary search algorithm to find the index of a specified item in a sorted list.
    let low:Number = 0; // Initializing the lower bound of the search range to 0.
    let high:Number = list.length - 1; // Initializing the upper bound of the search range to the list length - 1.

    while (low <= high) { // While the lower bound is less than or equal to the upper bound.
        let mid:Number = Math.floor((low + high) / 2); // Calculate the middle index by finding the average of the lower and upper bounds.

        if (list[mid] == item) { // If the item is found at the middle index, return the index.
            return mid;
        } else if (list[mid] < item) { // If the item being searched for is greater than the middle item, search in the upper half of the list.
            low = mid + 1; // Update the lower bound to be one index higher than the middle index.
        } else { // If the item being searched for is less than the middle item, search in the lower half of the list.
            high = mid - 1; // Update the upper bound to be one index lower than the middle index.
        }
    }

    return -1; // If the item is not found, return -1.
}

// Example usage:
let sortedList:Array = [1, 3, 5, 7, 9, 12, 14, 18, 20, 23, 26];
let index:Number = binarySearch(sortedList, 9); // index = 4