/**
 * This function sorts an array using the QuickSort algorithm.
 * @param arr: The array to be sorted.
 * @param lo: The lowest index of the array.
 * @param hi: The highest index of the array.
 */
private function quickSort(arr:Array, lo:int, hi:int):void {
    // Check if there are elements to be sorted.
    if (lo < hi) {
        // Select the pivot element, in this case, the middle element.
        var pivot:int = arr[int((lo + hi) / 2)];
        // Initialize variables for partitioning.
        var i:int = lo;
        var j:int = hi;
        // Loop until the indices converge.
        while (i <= j) {
            // Look for an element that needs to be swapped in the left side.
            while (arr[i] < pivot) {
                i++;
            }
            // Look for an element that needs to be swapped in the right side.
            while (arr[j] > pivot) {
                j--;
            }
            // Swap the elements at i and j if needed.
            if (i <= j) {
                var temp:int = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }
        // Recursively call the function for sub-arrays before and after the pivot.
        if (lo < j) {
            quickSort(arr, lo, j);
        }
        if (i < hi) {
            quickSort(arr, i, hi);
        }
    }
}