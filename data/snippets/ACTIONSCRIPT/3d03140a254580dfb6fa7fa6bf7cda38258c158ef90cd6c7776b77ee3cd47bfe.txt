/**
* This class implements a custom Stack data structure using a linked list
* Supports operations such as push, pop, peek, and isEmpty
*/
class Stack {
    // private properties
    private var head:Node; // pointer to the top of the stack
    private var tail:Node; // pointer to the bottom of the stack
    private var length:int; // number of elements in the stack
    
    /**
    * Constructor function
    * Initializes an empty stack
    */
    public function Stack() 
    {
        head = null;
        tail = null;
        length = 0;
    }
    
    /**
    * Pushes a new element onto the top of the stack
    * @param data the data to be added to the stack
    */
    public function push(data:*) 
    {
        // create a new node with the given data
        var newNode:Node = new Node(data);
        
        // check if the stack is empty
        if (isEmpty()) {
            // if empty, set the new node as both head and tail
            head = newNode;
            tail = newNode;
        } else {
            // if not empty, set the new node's next to the current head and update head
            newNode.next = head;
            head = newNode;
        }
        
        // increase the length by 1
        length++;
    }
    
    /**
    * Removes and returns the element at the top of the stack
    * @return the element at the top of the stack, or null if the stack is empty
    */
    public function pop():* 
    {
        // check if the stack is empty
        if (isEmpty()) {
            // if empty, return null
            return null;
        } else {
            // if not empty, store the data of current head and update head to the next node
            var data:* = head.data;
            head = head.next;
            
            // decrease the length by 1
            length--;
            
            // return the stored data
            return data;
        }
    }
    
    /**
    * Returns the element at the top of the stack without removing it
    * @return the element at the top of the stack, or null if the stack is empty
    */
    public function peek():* 
    {
        // check if the stack is empty
        if (isEmpty()) {
            // if empty, return null
            return null;
        } else {
            // if not empty, return the data of current head
            return head.data;
        }
    }
    
    /**
    * Checks if the stack is empty
    * @return true if the stack is empty, false if it contains elements
    */
    public function isEmpty():Boolean 
    {
        // return true if the length is 0, false otherwise
        return length == 0;
    }
    
    /**
    * Returns the number of elements in the stack
    */
    public function size():int
    {
        return length;
    }
}

/**
* A node class to be used in the Stack data structure
* Contains data of type *, and a pointer to the next node
*/
class Node {
    private var _data:*; // the data stored in the node
    private var _next:Node; // pointer to the next node
    
    /**
    * Constructor function
    * Initializes a new node with the given data
    */
    public function Node(data:*) 
    {
        _data = data;
        _next = null;
    }
    
    // getter and setter methods for data and next
    public function get data():* { return _data; }
    public function set data(value:*):void { _data = value; }
    public function get next():Node { return _next; }
    public function set next(value:Node):void { _next = value; }
}

// example usage of the Stack data structure
var stack:Stack = new Stack();
stack.push("Hello");
stack.push("World");
stack.push(123);
trace(stack.pop()); // outputs 123
trace(stack.peek()); // outputs "World"
trace(stack.isEmpty()); // outputs false
trace(stack.size()); // outputs 2