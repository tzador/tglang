// A complex code snippet in ActionScript
// This code snippet creates a class for a virtual pet game

package com.example.petgame {
	
	// Import statements
	import flash.display.MovieClip;
	import flash.events.Event;
	
	// Class declaration
	public class PetGame extends MovieClip {
		
		// Variables
		private var petName:String;
		private var happiness:Number = 100;
		private var hunger:Number = 0;
		private var mood:String = "happy";
		private var pet:MovieClip;
		
		// Constructor function
		public function PetGame(name:String) {
			// Set name of pet
			this.petName = name;
			
			// Create a new pet movie clip
			this.pet = new MovieClip();
			
			// Add event listeners for pet actions
			this.pet.addEventListener(Event.ENTER_FRAME, updatePetState);
			this.pet.addEventListener(MouseEvent.CLICK, petClicked);
			this.stage.addEventListener(KeyboardEvent.KEY_DOWN, feedPet);
		}
		
		// Function to update pet's state every frame
		private function updatePetState(event:Event):void {
			// Update pet's happiness and hunger levels
			this.happiness -= 0.5;
			this.hunger += 0.5;
			
			// Change pet's mood based on happiness level
			if (this.happiness < 50) {
				this.mood = "sad";
			} else if (this.happiness > 70) {
				this.mood = "excited";
			} else {
				this.mood = "happy";
			}
		}
		
		// Function to handle when pet is clicked
		private function petClicked(event:MouseEvent):void {
			// Increase pet's happiness
			this.happiness += 10;
		}
		
		// Function to feed pet when key is pressed
		private function feedPet(event:KeyboardEvent):void {
			// Check if key pressed is "f"
			if (event.keyCode == Keyboard.F) {
				// Decrease pet's hunger level
				this.hunger -= 10;
			}
		}
		
		// Function to check if pet needs attention
		public function checkPetNeeds():String {
			// Check pet's happiness level
			if (this.happiness < 50) {
				// Return a message based on pet's mood
				if (this.mood == "sad") {
					return "Your pet is feeling sad. Play with it to cheer it up!";
				} else if (this.mood == "excited") {
					return "Your pet is feeling excited. Be careful, it might get into trouble!";
				} else {
					return "Your pet is feeling happy. Keep up the good work!";
				}
			} else {
				// Check pet's hunger level
				if (this.hunger > 80) {
					return "Your pet is feeling very hungry. Make sure to feed it soon!";
				} else {
					return "Your pet is doing great. Keep taking care of it!";
				}
			}
		}
		
		// Function to clean up pet game
		public function cleanup():void {
			// Remove event listeners
			this.pet.removeEventListener(Event.ENTER_FRAME, updatePetState);
			this.pet.removeEventListener(MouseEvent.CLICK, petClicked);
			this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, feedPet);
			
			// Remove pet movie clip from stage
			this.removeChild(this.pet);
			
			// Set pet variable to null
			this.pet = null;
			
			// Clear variables
			this.petName = null;
			this.happiness = 0;
			this.hunger = 0;
			this.mood = null;
		}
	}
}