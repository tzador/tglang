/** Initialize variables for mouse position*/
var mouseX:Number;
var mouseY:Number;

/** Initialize circle and square shapes */
var circle:Shape = new Shape();
var square:Shape = new Shape();

/** Add event listeners for mouse movement and click */
stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
stage.addEventListener(MouseEvent.CLICK, mouseClickHandler);

/** Event handler for mouse movement */
function mouseMoveHandler(event:MouseEvent):void {
	/** Set position of circle and square based on mouse position */
	circle.x = mouseX;
	circle.y = mouseY;
	square.x = mouseX;
	square.y = mouseY;
	
	/** Create a new gradient fill for circle shape */
	var circleFill:GradientFill = new GradientFill();
	circleFill.colors = [0xFF0000, 0xFFFF00];
	circleFill.alphas = [1, 1];
	circleFill.ratios = [0, 255];
	circleFill.matrix.createGradientBox(50, 50, 0, -25, -25);
	
	/** Create a new gradient fill for square shape */
	var squareFill:GradientFill = new GradientFill();
	squareFill.colors = [0xFF0000, 0x00FF00, 0x0000FF];
	squareFill.alphas = [1, 1, 1];
	squareFill.ratios = [0, 0.5, 1];
	squareFill.matrix.createGradientBox(50, 50, 0, -25, -25);
	
	/** Apply gradient fill to circle and square shapes */
	circle.graphics.clear();
	circle.graphics.beginGradientFill(GradientType.RADIAL, circleFill.colors, circleFill.alphas, circleFill.ratios, circleFill.matrix);
	circle.graphics.drawCircle(0, 0, 25);
	
	square.graphics.clear();
	square.graphics.beginGradientFill(GradientType.LINEAR, squareFill.colors, squareFill.alphas, squareFill.ratios, squareFill.matrix);
	square.graphics.drawRect(0, 0, 50, 50);
}

/** Event handler for mouse click */
function mouseClickHandler(event:MouseEvent):void {
	/** Rotate the square shape 45 degrees on click */
	TweenLite.to(square, 1, {rotation: 45, ease: Strong.easeInOut});
		
	/** Scale the circle shape to double its size on click */
	TweenLite.to(circle, 1, {scaleX: 2, scaleY: 2, ease: Strong.easeInOut});
}