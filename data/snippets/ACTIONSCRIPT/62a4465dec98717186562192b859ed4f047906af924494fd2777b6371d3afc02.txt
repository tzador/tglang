// This code snippet creates a class for a custom button with properties and methods

// Define the class
public class CustomButton extends Sprite {

    // Class properties
    private var _label:String; // Stores the text for the button label
    private var _width:int; // Stores the button's width
    private var _height:int; // Stores the button's height
    private var _enabled:Boolean; // Stores the button's enabled state

    // Constructor function
    public function CustomButton(label:String, width:int, height:int) {
        // Set the label, width, and height properties based on the given values
        _label = label;
        _width = width;
        _height = height;

        // Set the initial enabled state to true
        _enabled = true;

        // Create the button graphics
        this.graphics.lineStyle(2, 0x000000); // Sets the line style for the button border
        this.graphics.beginFill(0xFFFFFF); // Sets the fill color for the button background
        this.graphics.drawRect(0, 0, _width, _height); // Draws a rectangle with the given dimensions
        this.graphics.endFill(); // Ends the fill

        // Create the label text
        var labelTextField:TextField = new TextField(); // Creates a new TextField object
        labelTextField.text = _label; // Sets the text to the given label
        labelTextField.width = _width; // Sets the width to match the button's width
        labelTextField.height = _height; // Sets the height to match the button's height
        labelTextField.x = 0; // Places the textfield at the top left corner of the button
        labelTextField.y = 0;
        labelTextField.selectable = false; // Disables highlighting and selection of text
        labelTextField.autoSize = TextFieldAutoSize.CENTER; // Aligns the text to the center of the textfield
        this.addChild(labelTextField); // Adds the textfield to the button

        // Add event listeners for mouse interactions
        this.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver); // Calls function when mouse moves over the button
        this.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut); // Calls function when mouse moves away from the button
        this.addEventListener(MouseEvent.CLICK, handleMouseClick); // Calls function when button is clicked
    }

    // Getter and setter methods for the enabled property
    public function set enabled(value:Boolean):void {
        _enabled = value;
    }

    public function get enabled():Boolean {
        return _enabled;
    }

    // Function to handle mouse over event
    private function handleMouseOver(event:MouseEvent):void {
        if (_enabled) { // Checks if the button is enabled
            this.alpha = 0.7; // Changes the transparency of the button
            this.scaleX = this.scaleY = 1.05; // Increases the size of the button slightly
        }
    }

    // Function to handle mouse out event
    private function handleMouseOut(event:MouseEvent):void {
        if (_enabled) { // Checks if the button is enabled
            this.alpha = 1; // Restores the button's transparency
            this.scaleX = this.scaleY = 1; // Resets the button's size
        }
    }

    // Function to handle mouse click event
    private function handleMouseClick(event:MouseEvent):void {
        if (_enabled) { // Checks if the button is enabled
            trace("Button clicked!"); // Outputs a message to the console
        }
    }
}