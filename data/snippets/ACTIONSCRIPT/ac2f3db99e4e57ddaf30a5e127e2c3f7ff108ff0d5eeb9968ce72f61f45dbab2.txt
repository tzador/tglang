/*
    This code snippet generates a random maze using the Recursive Backtracking algorithm.
    It takes in two parameters, the dimensions of the maze.
    The output is an ActionScript array that represents the maze.
*/

// Define the main function to create the maze
function createMaze(width:uint, height:uint):Array {
    
    // Create an empty maze array with the given dimensions
    var maze:Array = new Array(width);
    for (var i:uint = 0; i < width; i++) {
        maze[i] = new Array(height);
    }
    
    // Set all cells to be walls
    for (var x:uint = 0; x < width; x++) {
        for (var y:uint = 0; y < height; y++) {
            maze[x][y] = "W";
        }
    }
    
    // Choose a random starting cell and mark it as visited
    var startX:uint = Math.floor(Math.random() * width);
    var startY:uint = Math.floor(Math.random() * height);
    maze[startX][startY] = "V";
    
    // Call the recursive function to generate the maze
    generateMaze(startX, startY, maze);
    
    // Change the starting and ending cells to be entrances/exits to the maze
    maze[startX][startY] = "S"; // Start cell
    maze[width-1][height-1] = "E"; // End cell
    
    return maze; // Return the generated maze
}

// Recursive function to generate the maze
function generateMaze(currentX:uint, currentY:uint, maze:Array):void {
    
    // Create an array of directions
    var directions:Array = ["N", "S", "E", "W"]; // North, South, East, West
    
    // Shuffle the array to randomly choose a direction
    directions = directions.sort(function() { return 0.5 - Math.random() });
    
    // Loop through each direction
    for (var i:uint = 0; i < directions.length; i++) {
        // Get the new coordinates based on the chosen direction
        var newX:uint = currentX;
        var newY:uint = currentY;
        
        if (directions[i] == "N") newY -= 2; // Move two cells up
        else if (directions[i] == "S") newY += 2; // Move two cells down
        else if (directions[i] == "E") newX += 2; // Move two cells to the right
        else if (directions[i] == "W") newX -= 2; // Move two cells to the left
        
        // Check if the new coordinates are within the maze and are unvisited cells
        if (newX > 0 && newY > 0 && newX < maze.length-1 && newY < maze[0].length-1 && maze[newX][newY] == "W") {
            // Mark the cell as visited and remove the wall between the current cell and the new cell
            maze[newX][newY] = "V";
            maze[newX + (currentX - newX)/2][newY + (currentY - newY)/2] = "V"; // Remove the wall between the cells
            
            // Call the function recursively with the new coordinates
            generateMaze(newX, newY, maze);
        }
    }
}

// Call the createMaze function to generate a 20 by 20 maze
var maze:Array = createMaze(20, 20);

// Print the maze array
trace(maze);