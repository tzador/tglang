/**
 * This is a class that represents a tree data structure
 * It contains functions for inserting, removing, and searching nodes in the tree
 */
public class Tree {
    // private variables to store the root node and size of the tree
    private var root:Node;
    private var size:int;
    
    /**
     * Default constructor for the Tree class
     * It initializes the root node as null and size as 0
     */
    public function Tree() {
        root = null;
        size = 0;
    }
    
    /**
     * Function to insert a new node in the tree
     * @param value The value to be inserted in the new node
     */
    public function insert(value:int):void {
        //create a new node with the given value
        var newNode:Node = new Node(value);
        
        //check if the tree is empty
        if (root == null) {
            //if empty, set the new node as the root node
            root = newNode;
        } else {
            //otherwise, find the appropriate position for the new node in the tree
            //and insert it in the correct place
            var currentNode:Node = root;
            while (currentNode) {
                //if the value is less than the current node, go left
                if (value < currentNode.value) {
                    //if no left child, insert the new node as the left child
                    if (currentNode.left == null) {
                        currentNode.left = newNode;
                        break;
                    //if there is a left child, move to that child and continue looping
                    } else {
                        currentNode = currentNode.left;
                    } 
                } else {
                    //if the value is greater than or equal to the current node, go right
                    //if no right child, insert the new node as the right child
                    if (currentNode.right == null) {
                        currentNode.right = newNode;
                        break;
                    //if there is a right child, move to that child and continue looping
                    } else {
                        currentNode = currentNode.right;
                    }
                }
            }
        }
        //increase the size of the tree
        size++;
    }
    
    /**
     * Function to remove a node from the tree
     * @param value The value of the node to be removed
     * @return Boolean indicating if the removal was successful or not
     */
    public function remove(value:int):Boolean {
        //check if the tree is empty
        if (root == null) {
            return false;
        }
        //start at the root node
        var currentNode:Node = root;
        //variable to keep track of the parent node
        var parentNode:Node = null;
        //boolean to track if the node to be removed is the left child
        var isLeftChild:Boolean = false;
        
        // loop until the current node is equal to the value or until we reach the end of the tree
        while (currentNode.value != value) {
            //keep track of the parent node
            parentNode = currentNode;
            //if value is less than current node, go left
            if (value < currentNode.value) {
                //if no left child, node to be removed doesn't exist in the tree 
                if (currentNode.left == null) {
                    return false;
                //if left child, move to that child 
                } else {
                    currentNode = currentNode.left;
                    isLeftChild = true;
                }
            //if value is greater than current node, go right
            } else {
                //if no right child, node to be removed doesn't exist in the tree
                if (currentNode.right == null) {
                    return false;
                //if right child, move to that child
                } else {
                    currentNode = currentNode.right;
                    isLeftChild = false;
                }
            }
        }
        //if we reach this point, we have found the node to be removed
        
        //case 1: node to be removed has no children
        if (currentNode.left == null && currentNode.right == null) {
            //if it is the root node, set the root to null
            if (currentNode == root) {
                root = null;
            } else if (isLeftChild) {
                //if it is the left child of the parent, set the left child of the parent to null
                parentNode.left = null;
            } else {
                //otherwise, set the right child of the parent to null
                parentNode.right = null;
            }
        //case 2: node to be removed has one child on the left
        } else if (currentNode.right == null) {
            //if it is the root node, set the root to its left child
            if (currentNode = root) {
                root = currentNode.left;
            } else if (isLeftChild) {
                //if it is the left child of the parent, set the left child of the parent to the left child of the node to be removed
                //this effectively removes the node from the tree
                parentNode.left = currentNode.left;
            } else {
                //otherwise, set the right child of the parent to the left child of the node to be removed
                parentNode.right = currentNode.left;
            }
        //case 3: node to be removed has one child on the right
        } else if (currentNode.left == null) {
            //if it is the root node, set the root to its right child
            if (currentNode == root) {
                root = currentNode.right;
            } else if (isLeftChild) {
                //if it is the left child of the parent, set the left child of the parent to the right child of the node to be removed
                //this effectively removes the node from the tree
                parentNode.left = currentNode.right;
            } else {
                //otherwise, set the right child of the parent to the right child of the node to be removed
                parentNode.right = currentNode.right;
            }
        //case 4: node to be removed has two children
        } else {
            //find the minimum value in the right subtree of the node to be removed
            var successorNode:Node = getSuccessor(currentNode);
            //set the value of the node to be removed to the value of the successsor
            currentNode.value = successorNode.value;
            //remove the successor node from the tree
            remove(successorNode.value);
        }
        //decrease the size of the tree and return true
        size--;
        return true;
    }
    
    /**
     * Recursive function to find the minimum value in a subtree
     * @param node The root node of the subtree
     * @return Node The node with the minimum value in the subtree
     */
    private function getMinNode(node:Node):Node {
        //if left child is null, then the root node is the minimum value
        if (node.left == null) {
            return node;
        } else {
            //otherwise, recursively call the function on the left child 
            return getMinNode(node.left);
        }
    }
    
    /**
     * Function to find the successor node of a given node
     * @param node The node whose successor is to be found
     * @return Node The successor node of the given node
     */
    private function getSuccessor(node:Node):Node {
        //find the minimum value in the right subtree of the node
        var successorNode:Node = getMinNode(node.right);
        //return the successor
        return successorNode;
    }
    
    /**
     * Function to search for a particular value in the tree
     * @param value The value to be searched for
     * @return Boolean indicating if the value was found or not
     */
    public function search(value:int):Boolean {
        //start at the root node
        var currentNode:Node = root;
        //loop until we reach the end of the tree or find the value
        while (currentNode) {
            //if value is equal to the current node's value, we have found the value
            if (value == currentNode.value) {
                return true;
            //if value is less than the current node's value, go left
            } else if (value < currentNode.value) {
                currentNode = currentNode.left;
            //if value is greater than the current node's value, go right
            } else {
                currentNode = currentNode.right;
            }
        }
        //if we reach the end of the tree, the value doesn't exist in the tree
        return false;
    }
    
    /**
     * Function to get the size of the tree
     * @return int The number of nodes in the tree
     */
    public function size():int {
        return size;
    }
}

/**
 * This is a class that represents a node in the tree
 * It contains variables to store the value, and references to the left and right child nodes
 */
public class Node {
    //variable to store the value of the node
    public var value:int;
    //references to the left and right child nodes
    public var left:Node;
    public var right:Node;
    
    /**
     * Default constructor for the Node class
     * @param value The value to be stored in the node
     */
    public function Node(value:int) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

//example usage:
//initialize a new tree
var tree:Tree = new Tree();

//insert some values into the tree
tree.insert(8);
tree.insert(3);
tree.insert(10);
tree.insert(1);
tree.insert(6);
tree.insert(4);

//remove a value from the tree
tree.remove(8);

//search for a value in the tree
trace(tree.search(6)); //prints true

//get the size of the tree
trace(tree.size()); //prints 5