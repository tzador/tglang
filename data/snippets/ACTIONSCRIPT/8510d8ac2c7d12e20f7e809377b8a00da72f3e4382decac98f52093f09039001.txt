/**
 * Represents a customizable button with various states and animations.
 */
public class CustomButton extends MovieClip {
    private var _label:TextField;
    // private properties
    private var _upStateGraphic:DisplayObject;
    private var _overStateGraphic:DisplayObject;
    private var _downStateGraphic:DisplayObject;
    private var _disabledStateGraphic:DisplayObject;
    private var _currentState:String;
    private var _isDisabled:Boolean;
    // constructor
    public function CustomButton(upStateGraphic:DisplayObject, overStateGraphic:DisplayObject, downStateGraphic:DisplayObject, disabledStateGraphic:DisplayObject) {
        _upStateGraphic = upStateGraphic;
        _overStateGraphic = overStateGraphic;
        _downStateGraphic = downStateGraphic;
        _disabledStateGraphic = disabledStateGraphic;
        _currentState = "up";
        _isDisabled = false;
        // set up label
        _label = new TextField();
        _label.autoSize = TextFieldAutoSize.CENTER;
        _label.selectable = false;
        _label.defaultTextFormat = new TextFormat("Arial", 12, 0x000000, true);
        _label.text = "Button";
        // add event listeners
        addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);
        addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);
        addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
        addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
    }

    /**
     * Handles the mouse over event, changes the button state to "over" and updates the graphics.
     */
    private function handleMouseOver(event:MouseEvent):void {
        if (!_isDisabled) {
            _currentState = "over";
            updateGraphics();
        }
    }

    /**
     * Handles the mouse out event, changes the button state to "up" and updates the graphics.
     */
    private function handleMouseOut(event:MouseEvent):void {
        if (!_isDisabled) {
            _currentState = "up";
            updateGraphics();
        }
    }

    /**
     * Handles the mouse down event, changes the button state to "down" and updates the graphics.
     */
    private function handleMouseDown(event:MouseEvent):void {
        if (!_isDisabled) {
            _currentState = "down";
            updateGraphics();
        }
    }

    /**
     * Handles the mouse up event, changes the button state to "over" and updates the graphics.
     */
    private function handleMouseUp(event:MouseEvent):void {
        if (!_isDisabled) {
            _currentState = "over";
            updateGraphics();
        }
    }

    /**
     * Updates the graphics based on the current button state.
     */
    private function updateGraphics():void {
        switch (_currentState) {
            case "up":
                this.gotoAndStop("up");
                this.addChild(_upStateGraphic);
                break;
            case "over":
                this.gotoAndStop("over");
                this.addChild(_overStateGraphic);
                break;
            case "down":
                this.gotoAndStop("down");
                this.addChild(_downStateGraphic);
                break;
            default:
                break;
        }
    }

    /**
     * Changes the label text of the button.
     */
    public function set label(value:String):void {
        _label.text = value;
    }

    /**
     * Disables the button and changes the state to "disabled".
     */
    public function disable():void {
        _isDisabled = true;
        this.gotoAndStop("disabled"); 
        this.addChild(_disabledStateGraphic);
    }

    /**
     * Enables the button and changes the state to "up".
     */
    public function enable():void {
        _isDisabled = false;
        _currentState = "up";
        updateGraphics();
    }
}