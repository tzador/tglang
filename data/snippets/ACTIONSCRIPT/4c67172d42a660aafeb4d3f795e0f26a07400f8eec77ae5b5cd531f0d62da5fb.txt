// This code snippet creates a class called 'Car' with multiple properties and methods

class Car {
  // Properties
  public var make:String; // holds the car make
  public var model:String; // holds the car model
  public var year:int; // holds the year the car was made
  public var color:String; // holds the color of the car
  public var fuelTankCapacity:int; // holds the fuel tank capacity in liters
  private var currentFuelLevel:int; // holds the current fuel level in liters

  // Constructor function
  public function Car(make:String, model:String, year:int, color:String, fuelTankCapacity:int) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.color = color;
    this.fuelTankCapacity = fuelTankCapacity;
    this.currentFuelLevel = fuelTankCapacity; // set initial current fuel level to full tank capacity
  }

  // Methods
  // drive function takes in distance in kilometers and calculates remaining fuel level
  public function drive(distance:int):void {
    // calculate fuel consumption based on average fuel consumption of the car (10 km per liter)
    var fuelConsumed:int = distance / 10;
    // check if there is enough fuel to cover the distance
    if (fuelConsumed > this.currentFuelLevel) {
      // if not enough fuel, output error message
      trace("Not enough fuel to cover this distance!");
    } else {
      // if enough fuel, subtract consumed fuel from current fuel level
      this.currentFuelLevel -= fuelConsumed;
      trace("Successfully drove " + distance + " kilometers. Current fuel level: " + this.currentFuelLevel + " liters");
    }
  }

  // refill function takes in amount of fuel to be added, updates current fuel level
  public function refill(fuelToAdd:int):void {
    // check if fuel tank will overflow with additional fuel
    if (this.currentFuelLevel + fuelToAdd > this.fuelTankCapacity) {
      // if fuel tank will overflow, update current fuel level to full tank capacity
      this.currentFuelLevel = this.fuelTankCapacity;
      trace("Fuel tank is now full. Current fuel level: " + this.currentFuelLevel + " liters");
    } else {
      // if fuel tank will not overflow, update current fuel level with added fuel
      this.currentFuelLevel += fuelToAdd;
      trace("Successfully added " + fuelToAdd + " liters of fuel. Current fuel level: " + this.currentFuelLevel + " liters");
    }
  }

  // turnOn function starts the car's engine
  public function turnOn():void {
    trace("Engine started. Let's go for a drive!");
  }

  // turnOff function stops the car's engine
  public function turnOff():void {
    // check if engine is already off
    if (this.currentFuelLevel == 0) {
      // if engine is already off, output error message
      trace("Engine is already off. No need to turn it off again.");
    } else {
      // if engine is on, turn off and output success message
      this.currentFuelLevel = 0;
      trace("Engine turned off. See you next time!");
    }
  }
}

// Creating an instance of the Car class with specific properties
var myCar:Car = new Car("Toyota", "Camry", 2015, "Black", 50);

// Sample function calls and their output
myCar.drive(250); // Successfully drove 250 kilometers. Current fuel level: 25 liters
myCar.refill(20); // Successfully added 20 liters of fuel. Current fuel level: 45 liters
myCar.turnOn(); // Engine started. Let's go for a drive!
myCar.turnOff(); // Engine turned off. See you next time!