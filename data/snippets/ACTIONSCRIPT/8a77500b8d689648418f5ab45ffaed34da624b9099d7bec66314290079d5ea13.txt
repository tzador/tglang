/*
This code snippet generates a random maze and solves it using a depth-first search algorithm.
*/

//variables to hold number of rows and columns in the maze
var rows:int = getRandomInt(5, 10);
var columns:int = getRandomInt(5, 10);

//array to represent the maze
var maze:Array = [];

//function to generate the maze
function generateMaze():void {
    //loop through rows and columns to create cells
    for (var i:int = 0; i < rows; i++) {
        for (var j:int = 0; j < columns; j++) {
            //create cell object with coordinates, walls and visited flag
            var cell:Object = {x: i, y: j, top: true, right: true, bottom: true, left: true, visited: false};
            //push cell into the maze array
            maze.push(cell);
        }
    }
}

//function to get a random integer within a specified range
function getRandomInt(min:int, max:int):int {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

//function to get the index of a cell in the maze array given its coordinates
function getIndex(x:int, y:int):int {
    return x * columns + y;
}

//stack data structure to keep track of visited cells while solving the maze
var stack:Array = [];

//function to solve the maze using depth-first search algorithm
function solveMaze():void {
    //start at the top left cell
    var currentCell:Object = maze[getIndex(0, 0)];
    //mark cell as visited
    currentCell.visited = true;
    //push cell into the stack
    stack.push(currentCell);

    //while there are still unvisited cells
    while (stack.length > 0) {
        //get current cell from top of stack
        currentCell = stack[stack.length - 1];
        //if cell is at the bottom right corner, the maze is solved
        if (currentCell.x === rows - 1 && currentCell.y === columns - 1) {
            break;
        }
        //get available neighbors of current cell
        var neighbors:Array = [];
        if (currentCell.x - 1 >= 0 && maze[getIndex(currentCell.x - 1, currentCell.y)].visited === false) {
            neighbors.push(maze[getIndex(currentCell.x - 1, currentCell.y)]);
        }
        if (currentCell.y + 1 < columns && maze[getIndex(currentCell.x, currentCell.y + 1)].visited === false) {
            neighbors.push(maze[getIndex(currentCell.x, currentCell.y + 1)]);
        }
        if (currentCell.x + 1 < rows && maze[getIndex(currentCell.x + 1, currentCell.y)].visited === false) {
            neighbors.push(maze[getIndex(currentCell.x + 1, currentCell.y)]);
        }
        if (currentCell.y - 1 >= 0 && maze[getIndex(currentCell.x, currentCell.y - 1)].visited === false) {
            neighbors.push(maze[getIndex(currentCell.x, currentCell.y - 1)]);
        }
        //if there are available neighbors, randomly select one and remove the wall between it and the current cell
        if (neighbors.length > 0) {
            //randomly select a neighbor
            var nextCell:Object = neighbors[getRandomInt(0, neighbors.length - 1)];
            //remove walls between current cell and selected neighbor
            if (nextCell.x === currentCell.x - 1) {
                currentCell.top = false;
                nextCell.bottom = false;
            } else if (nextCell.y === currentCell.y + 1) {
                currentCell.right = false;
                nextCell.left = false;
            } else if (nextCell.x === currentCell.x + 1) {
                currentCell.bottom = false;
                nextCell.top = false;
            } else if (nextCell.y === currentCell.y - 1) {
                currentCell.left = false;
                nextCell.right = false;
            }
            //mark neighbor as visited and push it into the stack
            nextCell.visited = true;
            stack.push(nextCell);
        } else {
            //if there are no available neighbors, pop current cell from the stack
            stack.pop();
        }
    }
}

//call functions to generate and solve the maze
generateMaze();
solveMaze();

//function to display the maze in the output
function displayMaze():void {
    //loop through rows and columns
    for (var i:int = 0; i < rows; i++) {
        for (var j:int = 0; j < columns; j++) {
            //get current cell from maze array
            var cell:Object = maze[getIndex(i, j)];
            //display walls if they exist
            if (cell.top === true) {
                //display top wall
                trace(" _ ");
            }
            if (cell.left === true) {
                //display left wall
                trace("|");
            }
            if (cell.bottom === true) {
                //display bottom wall
                trace("_");
            }
            if (cell.right === true) {
                //display right wall and closing pipe
                trace("|");
            } else {
                //display closing pipe
                trace(" ");
            }
        }
        //line break after each row
        trace("\n");
    }
}

//display the solved maze in the output
displayMaze();