function factorial(n:int):int {
    if (n == 0) {
        return 1; // if n is 0, return 1
    } else {
        return n * factorial(n - 1); // recursively call the factorial function with n - 1 as the argument and multiply it with n
    }
}

/* calculate the factorial of 5 and store the result in a variable */
var result:int = factorial(5);

// print the result to the console
trace(result); // output: 120 (5*4*3*2*1 = 120)

// create a class named "Circle" that extends the "Shape" class
public class Circle extends Shape {

    // define private variable "radius" of type int
    private var radius:int;

    // define constructor for the Circle class
    public function Circle(x:int, y:int, radius:int) {
        super(x, y); // call the constructor of the super class "Shape" with the provided x and y coordinates
        this.radius = radius; // initialize the private "radius" variable with the provided radius value
    }

    // define a method to calculate the circumference of the circle
    public function getCircumference():Number {
        return 2 * Math.PI * radius; // use the formula 2*pi*r to calculate the circumference and return the result
    }

    // override the draw method from the super class "Shape"
    override public function draw():void {
        // draw a circle using the graphics object of the Shape class
        this.graphics.lineStyle(2, 0xFF0000); // set the line style to a red color and thickness of 2 pixels
        this.graphics.drawCircle(x, y, radius); // draw a circle at the provided x and y coordinates with the given radius
    }
}

// create a new instance of the Circle class with x and y coordinates of 100 and a radius of 50
var circle:Circle = new Circle(100, 100, 50);

// call the draw method to draw the circle on the screen
circle.draw();