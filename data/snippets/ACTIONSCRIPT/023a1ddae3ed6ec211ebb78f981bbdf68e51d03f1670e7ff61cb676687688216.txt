/**
 * This class represents a deck of cards.
 */
class Deck {
    // Array to hold the cards in the deck
    private var cards:Array;
    // Constructor to initialize the deck with a given number of cards
    /**
     * Constructor for Deck class.
     * @param numCards - The number of cards to initialize the deck with.
     */
    function Deck(numCards:int) {
        // Initialize the array to hold the cards
        cards = new Array();
        // Loop through the given number of cards
        for (var i:int = 0; i < numCards; i++) {
            // Use modulus to determine the card suit and rank
            var suit:String = i % 4 == 0 ? "Hearts" : i % 4 == 1 ? "Diamonds" : i % 4 == 2 ? "Clubs" : "Spades";
            var rank:String = i % 13 == 0 ? "Ace" : i % 13 == 10 ? "Jack" : i % 13 == 11 ? "Queen" : i % 13 == 12 ? "King" : String(i % 13 + 1);
            // Create a new card instance with the determined suit and rank
            var card:Card = new Card(suit, rank);
            // Add the card to the deck
            cards.push(card);
        }
    }
    
    /**
     * Function to shuffle the deck of cards.
     */
    function shuffle() {
        // Empty array to hold shuffled cards
        var shuffledCards:Array = new Array();
        // Generate a random index for each card and add it to the shuffled array
        while(cards.length > 0) {
            var randomIndex:int = Math.floor(Math.random() * cards.length);
            shuffledCards.push(cards[randomIndex]);
            // Remove the card from the original array
            cards.splice(randomIndex, 1);
        }
        // Set the shuffled array as the new deck of cards
        cards = shuffledCards;
    }
    
    /**
     * Function to deal a card from the deck.
     * @return The card that was dealt.
     */
    function deal():Card {
        // Check if there are any cards left in the deck
        if (cards.length == 0) {
            throw new Error("No more cards in deck.");
        }
        // Remove and return the top card in the deck
        return cards.pop();
    }
}
/**
 * This class represents a playing card.
 */
class Card {
    // Private variables to hold the suit and rank of the card
    private var suit:String;
    private var rank:String;
    
    // Constructor to initialize the card with a given suit and rank
    /**
     * Constructor for Card class.
     * @param suit - The suit of the card.
     * @param rank - The rank of the card.
     */
    function Card(suit:String, rank:String) {
        // Set the suit and rank of the card
        this.suit = suit;
        this.rank = rank;
    }
    
    /**
     * Function to get the suit of the card.
     * @return The suit of the card.
     */
    function getSuit():String {
        return this.suit;
    }
    
    /**
     * Function to get the rank of the card.
     * @return The rank of the card.
     */
    function getRank():String {
        return this.rank;
    }
    
    /**
     * Function to get the full string representation of the card.
     * @return The full string representation of the card.
     */
    function toString():String {
        return this.rank + " of " + this.suit;
    }
}

// Example usage:

// Create a deck with 52 cards
var deck:Deck = new Deck(52);

// Shuffle the deck
deck.shuffle();

// Deal 5 cards and print them out
for (var i:int = 0; i < 5; i++) {
    var card:Card = deck.deal();
    trace(card.toString());
}