/**
 * Function to calculate the factorial of a number recursively
 * @param num The number whose factorial is to be calculated
 * @return The factorial of the input number
 */
function calculateFactorial(num:int):int {
    if (num <= 1) {
        return 1; //base case
    } else {
        return num * calculateFactorial(num - 1); //recursive call
    }
}

/**
 * Function to calculate the nth Fibonacci number iteratively
 * @param num The value of n
 * @return The nth Fibonacci number
 */
function calculateFibonacci(num:int):int {
    var firstNum:int = 0; //initialize first element of Fibonacci sequence
    var secondNum:int = 1; //initialize second element of Fibonacci sequence
    var temp:int; //used to store temporary value during calculation
    for (var i:int = 2; i <= num; i++) {
        temp = firstNum + secondNum; //calculate next element in sequence
        firstNum = secondNum; //update first element
        secondNum = temp; //update second element
    }
    return secondNum; //return the nth Fibonacci number
}

//Example calls to functions
var factorial:int = calculateFactorial(5); //calculate the factorial of 5 (should be 120)
var fibonacci:int = calculateFibonacci(7); //calculate the 7th Fibonacci number (should be 13)