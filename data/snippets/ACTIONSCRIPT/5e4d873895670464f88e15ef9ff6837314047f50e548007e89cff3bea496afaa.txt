<!--
Annotated ACTIONSCRIPT code snippet
This code snippet is used to generate a random maze using the depth-first search algorithm
-->

// create maze array with random values to act as starting point
var mazeArray:Array = [];
for (var i:uint = 0; i < 10; i++) {
    mazeArray[i] = [];
    for (var j:uint = 0; j < 10; j++) {
        mazeArray[i][j] = Math.round(Math.random());
    }
}

// initialize stack to keep track of visited cells
var stack:Array = [];

// randomly select a starting cell and set it as the current cell
var currentCell:Array = [Math.round(Math.random() * 9), Math.round(Math.random() * 9)];

// add starting cell to stack
stack.push(currentCell);

// while there are cells in the stack to visit
while (stack.length > 0) {
    // get the current cell from the stack
    currentCell = stack[stack.length-1];

    // get the adjacent unvisited cells
    var unvisitedCells:Array = [];
    // check cell to the left
    if (currentCell[0] > 0 && mazeArray[currentCell[0]-1][currentCell[1]] === 0) {
        unvisitedCells.push([currentCell[0]-1, currentCell[1]]);
    }
    // check cell to the right
    if (currentCell[0] < 9 && mazeArray[currentCell[0]+1][currentCell[1]] === 0) {
        unvisitedCells.push([currentCell[0]+1, currentCell[1]]);
    }
    // check cell above
    if (currentCell[1] > 0 && mazeArray[currentCell[0]][currentCell[1]-1] === 0) {
        unvisitedCells.push([currentCell[0], currentCell[1]-1]);
    }
    // check cell below
    if (currentCell[1] < 9 && mazeArray[currentCell[0]][currentCell[1]+1] === 0) {
        unvisitedCells.push([currentCell[0], currentCell[1]+1]);
    }

    // if there are no unvisited cells adjacent
    if (unvisitedCells.length === 0) {
        // pop the current cell from the stack
        stack.pop();
    } else {
        // randomly select an unvisited cell
        var randomCellIndex:uint = Math.floor(Math.random() * unvisitedCells.length);
        var randomCell:Array = unvisitedCells[randomCellIndex];

        // remove the wall between the current cell and the selected cell
        if (randomCell[0] === currentCell[0] && randomCell[1] < currentCell[1]) { // selected cell is above
            mazeArray[currentCell[0]][currentCell[1]-1] = 1; // remove bottom wall of current cell
        } else if (randomCell[0] === currentCell[0] && randomCell[1] > currentCell[1]) { // selected cell is below
            mazeArray[currentCell[0]][currentCell[1]] = 1; // remove bottom wall of selected cell
        } else if (randomCell[0] < currentCell[0] && randomCell[1] === currentCell[1]) { // selected cell is to the left
            mazeArray[currentCell[0]-1][currentCell[1]] = 1; // remove right wall of current cell
        } else if (randomCell[0] > currentCell[0] && randomCell[1] === currentCell[1]) { // selected cell is to the right
            mazeArray[currentCell[0]][currentCell[1]] = 1; // remove right wall of selected cell
        }

        // set the selected cell as the current cell
        currentCell = randomCell;

        // add the selected cell to the stack
        stack.push(currentCell);
    }
}

// print the maze array
for (var k:uint = 0; k < 10; k++) {
    trace(mazeArray[k].join(" "));
}