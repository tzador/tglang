/**
* Function to sort an array using quicksort algorithm
* @param array:Array The array to be sorted
* @param left:Integer The starting index of the array
* @param right:Integer The ending index of the array
* @return void
*/
function quicksort(array:Array, left:Integer, right:Integer):void {
  if (left < right) { // check if left index is less than right
    var pivot:Integer = partition(array, left, right); // call partition function to find the pivot index
    quicksort(array, left, pivot - 1); // recursively call quicksort on left subarray
    quicksort(array, pivot + 1, right); // recursively call quicksort on right subarray
  }
}

/**
* Function to partition the array and find the pivot index
* @param array:Array The array to be partitioned
* @param left:Integer The starting index of the array
* @param right:Integer The ending index of the array
* @return Integer The pivot index
*/
function partition(array:Array, left:Integer, right:Integer):Integer {
  var pivotElement:* = array[right]; // choose the rightmost element as the pivot
  var i:Integer = left - 1; // initialize index i to be one less than the left index
  for (var j:Integer = left; j < right; j++) { // loop through the subarray from left to right
    if (array[j] <= pivotElement) { // if element at j is less than or equal to the pivot
      i++; // increment i
      swap(array, i, j); // swap elements at i and j indices
    }
  }
  swap(array, i + 1, right); // swap pivot element with the element at index i + 1
  return i + 1; // return the pivot index
}

/**
* Function to swap elements in an array
* @param array:Array The array in which elements are to be swapped
* @param index1:Integer Index of the first element
* @param index2:Integer Index of the second element
* @return void
*/
function swap(array:Array, index1:Integer, index2:Integer):void {
  var temp:* = array[index1]; // store element at index1 in a temporary variable
  array[index1] = array[index2]; // replace element at index1 with element at index2
  array[index2] = temp; // replace element at index2 with the temporary variable
}

// Example usage of the quicksort function
var numbers:Array = [5, 2, 8, 1, 9, 3, 4, 7, 6]; // initialize an unsorted array
quicksort(numbers, 0, numbers.length - 1); // call quicksort function on the array
trace(numbers); // output the sorted array using trace function, expected output: 1, 2 , 3, 4, 5, 6, 7, 8, 9