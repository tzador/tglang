// This code snippet generates a random maze using a recursive backtracking algorithm

// Define the maze size and create a new 2D array to store the maze cells
var size:int = 10;
var maze:Array = new Array(size);
for (var i:int = 0; i < size; i++) {
    maze[i] = new Array(size);
}

// Create the start and end points for the maze
var start:Point = new Point(0, 0);
var end:Point = new Point(size - 1, size - 1);

// Function to generate the maze using recursive backtracking algorithm
function generateMaze(maze:Array, cell:Point) {
    // Mark the current cell as visited
    maze[cell.x][cell.y] = true;

    // Create a random list of directions to travel in
    var directions:Array = ["right", "left", "up", "down"];
    for (var i:int = 0; i < directions.length; i++) {
        var randomIndex:int = Math.floor(Math.random() * directions.length);
        var temp:String = directions[i];
        directions[i] = directions[randomIndex];
        directions[randomIndex] = temp;
    }

    // Loop through the random direction list
    for (i = 0; i < directions.length; i++) {
        var newX:int = cell.x;
        var newY:int = cell.y;

        // Move in the chosen direction
        switch (directions[i]) {
            case "right":
                newX++;
                break;
            case "left":
                newX--;
                break;
            case "up":
                newY--;
                break;
            case "down":
                newY++;
                break;
            default:
                break;
        }

        // Check if the new cell is within the bounds of the maze
        if (newX < size && newX >= 0 && newY < size && newY >= 0) {
            // Check if the new cell has already been visited
            if (maze[newX][newY] == undefined) {
                // Mark the current cell and the new cell as connected
                maze[cell.x][cell.y] = true;
                maze[newX][newY] = true;

                // Recursively call the function for the new cell
                generateMaze(maze, new Point(newX, newY));
            }
        }
    }
}

// Generate the maze starting from the defined start point
generateMaze(maze, start);

// Print the maze
for (var row:int = 0; row < size; row++) {
    var rowString:String = "";
    for (var col:int = 0; col < size; col++) {
        // Print a "#" for visited cells and a " " for unvisited cells
        if (maze[row][col] == true) {
            rowString += "#";
        } else {
            rowString += " ";
        }
    }
    trace(rowString);
}