/**
 * This class defines a custom button component that animates when clicked.
 */
package components{
    import flash.display.Sprite;
    import flash.display.Shape;
    
    // Define button states enum
    public class ButtonState{
        public static const UP:String = "up";
        public static const DOWN:String = "down";
        public static const OVER:String = "over";
        public static const DISABLED:String = "disabled";
    }
    
    // Define custom button component
    public class CustomButton extends Sprite{
        
        // Define properties
        private var _width:Number;
        private var _height:Number;
        private var _label:String;
        private var _color:uint;
        
        // Define child elements
        private var _background:Shape;
        private var _labelField:TextField;
        
        // Constructor
        public function CustomButton(width:Number, height:Number, label:String, color:uint) {
            _width = width;
            _height = height;
            _label = label;
            _color = color;
            
            // Create background shape
            _background = new Shape();
            _background.graphics.beginFill(_color);
            _background.graphics.drawRect(0, 0, _width, _height);
            _background.graphics.endFill();
            addChild(_background);
            
            // Create label field
            _labelField = new TextField();
            _labelField.defaultTextFormat = new TextFormat("Arial", 16, 0xffffff, true);
            _labelField.autoSize = TextFieldAutoSize.CENTER;
            _labelField.text = _label;
            _labelField.x = (_width - _labelField.width) / 2;
            _labelField.y = (_height - _labelField.height) / 2;
            addChild(_labelField);
            
            // Set initial button state
            setState(ButtonState.UP);
            
            // Add event listeners
            addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
            addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
            addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
            addEventListener(MouseEvent.CLICK, onClick);
        }
        
        // Private functions to handle button states
        private function setState(state:String):void {
            switch(state) {
                case ButtonState.UP:
                    _background.alpha = 1;
                    _labelField.textColor = 0xffffff;
                    break;
                
                case ButtonState.DOWN:
                    _background.alpha = 0.8;
                    _labelField.textColor = 0xcccccc;
                    break;
                
                case ButtonState.OVER:
                    _background.alpha = 0.9;
                    _labelField.textColor = 0xcccccc;
                    break;
                
                case ButtonState.DISABLED:
                    _background.alpha = 0.5;
                    _labelField.textColor = 0x999999;
                    break;
            }
        }
        
        // Event listeners to handle button interactions
        private function onMouseDown(event:MouseEvent):void {
            setState(ButtonState.DOWN);
        }
        
        private function onMouseUp(event:MouseEvent):void {
            setState(ButtonState.UP);
        }
        
        private function onMouseOver(event:MouseEvent):void {
            setState(ButtonState.OVER);
        }
        
        private function onMouseOut(event:MouseEvent):void {
            setState(ButtonState.UP);
        }
        
        private function onClick(event:MouseEvent):void {
            trace("Button clicked!");
        }
    }
}