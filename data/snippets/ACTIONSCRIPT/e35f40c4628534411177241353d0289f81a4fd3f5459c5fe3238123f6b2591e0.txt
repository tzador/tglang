/* This is a complex code snippet written in actionscript for creating a custom button */

package com.example.button {
	
	// Import necessary classes
	import flash.display.Sprite;		// This class provides the basic drawing capabilities for a display object
	import flash.text.TextField;		// This class is used for displaying text on the button
	import flash.text.TextFormat;		// This class is used to format the appearance of the text
	
	// Define the Button class which extends the Sprite class
	public class Button extends Sprite {
		
		// Private variables
		private var _label:String; 									// The label or text for the button
		private var _width:Number;									// The width of the button
		private var _height:Number;									// The height of the button
		private var _isActive:Boolean = false;						// A boolean value to check if the button is currently active or not
		private var _textFormat:TextFormat = new TextFormat();		// Create a new TextFormat object for formatting the text
		
		// Constructor function to initialize the button 
		public function Button(label:String, width:Number, height:Number) {
			_label = label;			// Set the label for the button
			_width = width;			// Set the width of the button
			_height = height;		// Set the height of the button
			init();					// Call the init function to set up the button
		}
		
		// Private function to set up the button
		private function init():void {
			// Create a new text field to display the label
			var textField:TextField = new TextField();
			textField.autoSize = "left";								// Set the text field to automatically adjust its width to fit the text
			textField.text = _label;									// Set the text of the text field
			textField.setTextFormat(_textFormat);						// Apply the text format to the text field
			addChild(textField);										// Add the text field to the button
			textField.x = (_width - textField.width)/2;					// Position the text field in the center of the button
			textField.y = (_height - textField.height)/2;
			
			graphics.beginFill(0xCCCCCC);								// Set the fill color for the button
			graphics.drawRoundRect(0, 0, _width, _height, 10, 10);		// Draw a rounded rectangle to be the background of the button
			graphics.endFill();											// End the fill for the button
			buttonMode = true;											// Enable the button mode to handle mouse events
			
			// Add event listeners for mouse events
			addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);
			addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);
			addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
			addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
		}
		
		// Private functions to handle different mouse events
		private function handleMouseOver(event:MouseEvent):void {
			graphics.clear();
			graphics.beginFill(0xEEEEEE);								// Change the fill color when the mouse is over the button
			graphics.drawRoundRect(0, 0, _width, _height, 10, 10);
		}
		
		private function handleMouseOut(event:MouseEvent):void {
			graphics.clear();
			graphics.beginFill(0xCCCCCC);								// Change the fill color back to the original when the mouse is no longer over the button
			graphics.drawRoundRect(0, 0, _width, _height, 10, 10);
		}
		
		private function handleMouseDown(event:MouseEvent):void {
			graphics.clear();
			graphics.beginFill(0x6666CC);								// Change the fill color when the mouse is clicked on the button
			graphics.drawRoundRect(0, 0, _width, _height, 10, 10);
		}
		
		private function handleMouseUp(event:MouseEvent):void {
			graphics.clear();
			graphics.beginFill(0xEEEEEE);
			graphics.drawRoundRect(0, 0, _width, _height, 10, 10);		// Change the fill color back to the original when the mouse is released from the button
		}
		
		// Public function to activate the button
		public function activate():void {
			_isActive = true;											// Set the isActive variable to true
			this.addEventListener(MouseEvent.CLICK, handleClick);		// Add a click event listener to the button
		}
		
		// Private function to handle the click event
		private function handleClick(event:MouseEvent):void {
			trace("Button is active and was clicked!");					// Print out a message to the console when the button is clicked and active
		}
		
		// Getters and Setters for the private variables
		public function get label():String {
			return _label;
		}
		
		public function set label(value:String):void {
			_label = value;
		}
		
		public function get width():Number {
			return _width;
		}
		
		public function set width(value:Number):void {
			_width = value;
		}
		
		public function get height():Number {
			return _height;
		}
		
		public function set height(value:Number):void {
			_height = value;
		}
	}
}