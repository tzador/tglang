/** * The following class represents a Node in a doubly linked list.
* It contains a value, a reference to the next node, and a reference to the previous node.
*/
class Node {
    private var value; // declaring private variable to store value
    private var next:Node; // declaring private variable to store reference to next node
    private var previous:Node; // declaring private variable to store reference to previous node

    /**
     * The constructor for creating a new Node object.
     * @param val the value to be stored in the Node
     * @param nxt the next Node in the list
     * @param prev the previous Node in the list
     */
    public function Node(val, nxt:Node, prev:Node) {
        value = val;
        next = nxt;
        previous = prev;
    }

    /**
     * Returns the value stored in the Node.
     * @return the value stored in the Node
     */
    public function getValue() {
        return value;
    }

    /**
     * Sets the value in the Node to the given value.
     * @param val the value to be set
     */
    public function setValue(val) {
        value = val;
    }

    /**
     * Returns a reference to the next Node in the list.
     * @return a reference to the next Node
     */
    public function getNext() {
        return next;
    }

    /**
     * Sets the next Node in the list to the given Node.
     * @param nxt the Node to be set as next
     */
    public function setNext(nxt:Node) {
        next = nxt;
    }

    /**
     * Returns a reference to the previous Node in the list.
     * @return a reference to the previous Node
     */
    public function getPrevious() {
        return previous;
    }

    /**
     * Sets the previous Node in the list to the given Node.
     * @param prev the Node to be set as previous
     */
    public function setPrevious(prev:Node) {
        previous = prev;
    }
}