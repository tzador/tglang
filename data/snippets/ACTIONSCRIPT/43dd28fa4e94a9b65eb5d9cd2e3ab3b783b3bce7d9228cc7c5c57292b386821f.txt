/**
* This is a class that represents a mathematical vector
*
* @constructor
* @param {Number} x - The x coordinate of the vector
* @param {Number} y - The y coordinate of the vector
* @param {Number} z - The z coordinate of the vector
**/
package com.example.math {
	// Import necessary classes
	import com.example.geometry.Point3D;
	
	/**
	* Vectors are mathematical objects with both magnitude and direction.
	*
	* @class Vector3D
	* @constructor
	* @param {Number} x - The x coordinate of the vector
	* @param {Number} y - The y coordinate of the vector
	* @param {Number} z - The z coordinate of the vector
	**/
	public class Vector3D {
		// Private properties
		private var _x:Number;
		private var _y:Number;
		private var _z:Number;
		
		// Constructor
		public function Vector3D(x:Number = 0, y:Number = 0, z:Number = 0) {
			_x = x;
			_y = y;
			_z = z;
		}
		
		// Getters and setters
		/**
		* The x coordinate of the vector
		*
		* @property x
		* @type {Number}
		**/
		public function get x():Number {
			return _x;
		}
		
		public function set x(value:Number):void {
			_x = value;
		}
		
		/**
		* The y coordinate of the vector
		*
		* @property y
		* @type {Number}
		**/
		public function get y():Number {
			return _y;
		}
		
		public function set y(value:Number):void {
			_y = value;
		}
		
		/**
		* The z coordinate of the vector
		*
		* @property z
		* @type {Number}
		**/
		public function get z():Number {
			return _z;
		}
		
		public function set z(value:Number):void {
			_z = value;
		}
		
		/**
		* Returns the length of the vector
		*
		* @method length
		* @return {Number} The length of the vector
		**/
		public function length():Number {
			return Math.sqrt(_x * _x + _y * _y + _z * _z);
		}
		
		/**
		* Adds another vector to this vector
		*
		* @method add
		* @param {Vector3D} vector - The vector to add
		**/
		public function add(vector:Vector3D):void {
			_x += vector.x;
			_y += vector.y;
			_z += vector.z;
		}
		
		/**
		* Subtracts another vector from this vector
		*
		* @method subtract
		* @param {Vector3D} vector - The vector to subtract
		**/
		public function subtract(vector:Vector3D):void {
			_x -= vector.x;
			_y -= vector.y;
			_z -= vector.z;
		}
		
		/**
		* Multiplies this vector by a scalar value
		*
		* @method multiply
		* @param {Number} scalar - The value to multiply the vector by
		**/
		public function multiply(scalar:Number):void {
			_x *= scalar;
			_y *= scalar;
			_z *= scalar;
		}
		
		/**
		* Calculates the dot product of this vector with another vector
		*
		* @method dotProduct
		* @param {Vector3D} vector - The other vector to calculate the dot product with
		* @return {Number} The resulting dot product
		**/
		public function dotProduct(vector:Vector3D):Number {
			return (_x * vector.x + _y * vector.y + _z * vector.z);
		}
		
		/**
		* Calculates the cross product of this vector with another vector
		*
		* @method crossProduct
		* @param {Vector3D} vector - The other vector to calculate the cross product with
		* @return {Vector3D} The resulting cross product vector
		**/
		public function crossProduct(vector:Vector3D):Vector3D {
			var newX:Number = _y * vector.z - _z * vector.y;
			var newY:Number = _z * vector.x - _x * vector.z;
			var newZ:Number = _x * vector.y - _y * vector.x;
			return new Vector3D(newX, newY, newZ);
		}
		
		/**
		* Calculates the angle between this vector and another vector in degrees
		*
		* @method angleBetween
		* @param {Vector3D} vector - The other vector to calculate the angle between
		* @return {Number} The resulting angle in degrees
		**/
		public function angleBetween(vector:Vector3D):Number {
			var thisLength:Number = this.length();
			var vectorLength:Number = vector.length();
			if (thisLength == 0 || vectorLength == 0) {
				return 0;
			}
			return Math.acos(this.dotProduct(vector) / (thisLength * vectorLength)) * 180 / Math.PI;
		}
		
		/**
		* Converts the vector to a Point3D
		*
		* @method toPoint3D
		* @return {Point3D} A Point3D object representing the same position as the vector
		**/
		public function toPoint3D():Point3D {
			return new Point3D(_x, _y, _z);
		}
	}
}