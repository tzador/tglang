// ActionScript code snippet that generates a random maze with a given number of rows and columns.

/* Define a class for the maze object */
class Maze {
    // Properties
    private var rows:int;
    private var columns:int;
    private var cells:Array;
    
    // Constructor method
    public function Maze(rows:int, columns:int) {
        // Check for valid input
        if(rows <= 0 || columns <= 0) {
            throw new Error("Invalid input for maze dimensions!");
        }
        
        // Set the rows and columns
        this.rows = rows;
        this.columns = columns;
        
        // Initialize the cells array
        this.cells = new Array();
        
        // Call the method to generate the maze
        generateMaze();
    }
    
    // Method to generate the maze
    private function generateMaze():void {
        // Loop through each row and column
        for(var i:int = 0; i < this.rows; i++) {
            for(var j:int = 0; j < this.columns; j++) {
                // Create a new cell object
                var cell:Cell = new Cell(i, j);
                
                // Add the cell to the cells array
                this.cells.push(cell);
            }
        }
        
        // Set the start and end cells
        var startCell:Cell = this.cells[0];
        var endCell:Cell = this.cells[this.cells.length - 1];
        
        // Modify the walls of the start and end cells
        startCell.walls.topWall = false;
        endCell.walls.bottomWall = false;
        
        // Call the recursive method to generate the rest of the maze
        generateRecursive(startCell);
    }
    
    /* Helper method to generate the rest of the maze recursively */
    private function generateRecursive(currentCell:Cell):void {
        // Mark the current cell as visited
        currentCell.visited = true;
        
        // Get all the neighboring cells of the current cell
        var neighbors:Array = getNeighbors(currentCell);
        
        // Loop through each neighbor
        for(var i:int = 0; i < neighbors.length; i++) {
            var neighbor:Cell = neighbors[i];
            
            // Check if the neighbor has not been visited
            if(!neighbor.visited) {
                // Remove the wall between the current cell and the neighbor
                removeWall(currentCell, neighbor);
                
                // Call the recursive method with the neighbor
                generateRecursive(neighbor);
            }
        }
    }
    
    /* Helper method to get all the neighboring cells */
    private function getNeighbors(currentCell:Cell):Array {
        // Array to store the neighboring cells
        var neighbors:Array = new Array();
        
        // Get the row and column of the current cell
        var row:int = currentCell.row;
        var column:int = currentCell.column;
        
        // Check if the row and column are within the bounds of the maze
        if(row > 0) {
            // Add the cell above to the neighbors array
            neighbors.push(this.cells[(row-1)*this.columns + column]);
        }
        if(row < this.rows - 1) {
            // Add the cell below to the neighbors array
            neighbors.push(this.cells[(row+1)*this.columns + column]);
        }
        if(column > 0) {
            // Add the cell to the left to the neighbors array
            neighbors.push(this.cells[row*this.columns + (column-1)]);
        }
        if(column < this.columns - 1) {
            // Add the cell to the right to the neighbors array
            neighbors.push(this.cells[row*this.columns + (column+1)]);
        }
        
        // Return the array of neighboring cells
        return neighbors;
    }
    
    /* Helper method to remove the wall between two cells */
    private function removeWall(currentCell:Cell, neighbor:Cell):void {
        // Get the row and column of the current cell
        var cRow:int = currentCell.row;
        var cColumn:int = currentCell.column;
        
        // Get the row and column of the neighbor cell
        var nRow:int = neighbor.row;
        var nColumn:int = neighbor.column;
        
        // Check for the relative position of the two cells
        if(cRow == nRow && cColumn == nColumn - 1) {
            // Remove the left wall of the neighbor cell
            neighbor.walls.leftWall = false;
            // Remove the right wall of the current cell
            currentCell.walls.rightWall = false;
        }
        else if(cRow == nRow && cColumn == nColumn + 1) {
            // Remove the right wall of the neighbor cell
            neighbor.walls.rightWall = false;
            // Remove the left wall of the current cell
            currentCell.walls.leftWall = false;
        }
        else if(cRow == nRow - 1 && cColumn == nColumn) {
            // Remove the top wall of the neighbor cell
            neighbor.walls.topWall = false;
            // Remove the bottom wall of the current cell
            currentCell.walls.bottomWall = false;
        }
        else if(cRow == nRow + 1 && cColumn == nColumn) {
            // Remove the bottom wall of the neighbor cell
            neighbor.walls.bottomWall = false;
            // Remove the top wall of the current cell
            currentCell.walls.topWall = false;
        }
    }
}

/* Define a class for the cell object */
class Cell {
    // Properties
    public var row:int;
    public var column:int;
    public var visited:Boolean = false;
    public var walls:Object = {topWall: true, rightWall: true, bottomWall: true, leftWall: true};
    
    // Constructor method
    public function Cell(row:int, column:int) {
        // Set the row and column
        this.row = row;
        this.column = column;
    }
}

/* Create a new maze object with 10 rows and 10 columns */
var maze:Maze = new Maze(10, 10);