// This function calculates the area of a circle with the given radius
function calculateCircleArea(radius: Number): Number {
    // Initiate the variable to store the area
    var area: Number = 0;
    // Check if the radius is a positive value
    if (radius > 0) {
        // Calculate the area using the formula A = Ï€*r^2
        area = Math.PI * (radius * radius);
    }
    // Return the area value
    return area;
}

// This function checks if the given string is a palindrome
function isPalindrome(str: String): Boolean {
    // Convert the string to lowercase and remove all non-alphanumeric characters
    var lowercaseStr: String = str.toLowerCase().replace(/[^a-z0-9]/g, "");
    // Reverse the string by splitting it into an array, reversing the array, and joining it back into a string
    var reverseStr: String = lowercaseStr.split("").reverse().join("");
    // Check if the original string and the reversed string are the same
    if (lowercaseStr == reverseStr) {
        // If they are the same, return true
        return true;
    } else {
        // If not, return false
        return false;
    }
}

// This function generates a random password with the given length
function generateRandomPassword(length: Number): String {
    // Initiate an empty string to store the password
    var password: String = "";
    // Define a string containing all possible characters for the password
    var allChars: String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+";
    // Loop through the length of the password and add a random character from the allChars string to the password string
    for (var i: Number = 0; i < length; i++) {
        // Use the random number function to generate a random index for the allChars string
        var randomIndex: Number = Math.floor(Math.random() * allChars.length);
        // Add the character at the random index to the password string
        password += allChars.charAt(randomIndex);
    }
    // Return the generated password
    return password;
}