// This function sets up a physics world in a game
function setupPhysicsWorld(game:Game):void 
{
  // Create a physical world with a downward gravity of 9.8
  var world:World = new World(new Vec2(0, 9.8));

  // Set the default physics material for objects in the world
  var defaultMaterial:Material = new Material(0.5, 0.5, 0.5);  

  // Add a static platform to the world that is 400 pixels wide and 50 pixels tall
  var platformBody:Body = world.createBody(new BodyType(StaticBody))
  var platformShape:Polygon = new Polygon(Polygon.box(400, 50))
  platformBody.shapes.add(platformShape)
  platformBody.setTransform(new Vec2(200, 400))

  // Create a dynamic player character with a circle shape and a mass of 1
  var playerBody:Body = world.createBody(new BodyType(DynamicBody))
  var playerShape:Circle = new Circle(30)
  playerBody.shapes.add(playerShape)
  playerBody.setMass(1)

  // Set collision categories for the player character and platform
  var playerCategory:InteractionFilter = new InteractionFilter(1, ~1, ~0)
  playerBody.setFilter(playerCategory)
  var platformCategory:InteractionFilter = new InteractionFilter(1, ~0, ~1)
  platformBody.setFilter(platformCategory)

  // Add a collision handler to detect when the player lands on the platform
  world.addCollisionHandler(1, 1, onPlayerLanded)

  // Update the physics world every frame using the game's deltaTime
  game.addEventListener(Event.ENTER_FRAME, function (e:Event):void 
  {
    world.step(e.time);
  });

  // Helper function to handle player landing on platform
  function onPlayerLanded(event:InteractionCallback):void 
  {
    trace("Player landed on platform!");
  }
}