// Define an interface for a calculator
interface ICalculator {
    // Property to store current total
    public var total:Number;

    // Method to clear the current total
    function clear():void;

    // Method to add a number to the current total
    function add(number:Number):void;

    // Method to subtract a number from the current total
    function subtract(number:Number):void;

    // Method to multiply the current total by a number
    function multiply(number:Number):void;

    // Method to divide the current total by a number
    function divide(number:Number):void;
}

// Create a class for a basic calculator that implements the ICalculator interface
class BasicCalculator implements ICalculator {
    // Store the current total as a private property
    private var total:Number;

    // Constructor function to set the initial total to 0
    public function BasicCalculator() {
        this.total = 0;
    }

    // Implementation of the clear method
    public function clear():void {
        this.total = 0;
    }

    // Implementation of the add method
    public function add(number:Number):void {
        this.total += number;
    }

    // Implementation of the subtract method
    public function subtract(number:Number):void {
        this.total -= number;
    }

    // Implementation of the multiply method
    public function multiply(number:Number):void {
        this.total *= number;
    }

    // Implementation of the divide method
    public function divide(number:Number):void {
        this.total /= number;
    }
}

// Create an instance of the BasicCalculator class
var myCalculator:BasicCalculator = new BasicCalculator();

// Perform calculations using the calculator methods
myCalculator.add(5); // total = 5
myCalculator.multiply(2); // total = 10
myCalculator.divide(2); // total = 5

// Print the current total to the console
trace(myCalculator.total); // Output: 5