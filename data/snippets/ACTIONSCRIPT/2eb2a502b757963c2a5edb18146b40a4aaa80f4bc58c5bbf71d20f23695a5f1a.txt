/* This class defines a custom Button component with various properties and methods */
public class CustomButton extends Button{
    private var _label:String; // private property to store button label
    private var _width:int; // private property to store button width
    private var _height:int; // private property to store button height

    /**
     * Constructor function to create a new CustomButton object
     * @param label the label text to be displayed on the button
     * @param width the width of the button in pixels
     * @param height the height of the button in pixels
     */
    public function CustomButton(label:String, width:int, height:int){
        super(); // call super class constructor
        _label = label; // set button label
        _width = width; // set button width
        _height = height; // set button height
        this.mouseChildren = false; // disable mouseChildren for better performance
        this.addEventListener(MouseEvent.CLICK, onClick); // add click event listener to the button
        this.drawButton(); // call drawButton method to draw the button
    }

    /**
     * Method to draw the button with the given label, width, and height
     */
    private function drawButton():void{
        // create a shape object to use as the background of the button
        var bg:Shape = new Shape();
        bg.graphics.beginFill(0xCCCCCC);
        bg.graphics.drawRect(0, 0, _width, _height);
        bg.graphics.endFill();
        this.addChild(bg); // add the shape object to the button

        // create a text field to display the button label
        var labelField:TextField = new TextField();
        labelField.text = _label;
        labelField.autoSize = TextFieldAutoSize.CENTER;
        labelField.x = (_width / 2) - (labelField.width / 2);
        labelField.y = (_height / 2) - (labelField.height / 2);
        labelField.selectable = false;
        this.addChild(labelField); // add the text field to the button
    }

    /**
     * Event handler for the click event
     * @param event the MouseEvent object
     */
    private function onClick(event:MouseEvent):void{
        // perform some action when the button is clicked
        trace("Button clicked!");
    }
}