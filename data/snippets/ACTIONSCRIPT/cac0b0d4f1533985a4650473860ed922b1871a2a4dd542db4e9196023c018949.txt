// This code snippet generates a random maze using Prim's algorithm

// Define variables for grid size, cell size, and total width and height
var gridSize: int = 25;
var cellSize: int = 20;
var width: int = gridSize * cellSize;
var height: int = gridSize * cellSize;

// Create an empty grid to store cells
var grid: Array = [];

// Create a function to generate a grid with cells
function generateGrid(): void {
    // Loop through each row and column of the grid
    for (var i: int = 0; i < gridSize; i++) {
        for (var j: int = 0; j < gridSize; j++) {
            // Create a new cell object with properties for its coordinates and walls
            var cell: Object = {
                x: i,
                y: j,
                topWall: true,
                bottomWall: true,
                leftWall: true,
                rightWall: true
            };
            // Add the new cell object to the grid
            grid.push(cell);
        }
    }
}

// Call the generateGrid() function to create the grid
generateGrid();

// Create a function to remove walls between two cells
function removeWall(cellA: Object, cellB: Object): void {
    // Calculate the difference between the x and y coordinates of the two cells
    var dx: int = cellA.x - cellB.x;
    var dy: int = cellA.y - cellB.y;
    // If the difference is 1, remove the appropriate walls to connect the cells
    if (dx == 1) {
        cellA.leftWall = false;
        cellB.rightWall = false;
    } else if (dx == -1) {
        cellA.rightWall = false;
        cellB.leftWall = false;
    } else if (dy == 1) {
        cellA.topWall = false;
        cellB.bottomWall = false;
    } else if (dy == -1) {
        cellA.bottomWall = false;
        cellB.topWall = false;
    }
}

// Create a function to get neighboring cells of a given cell
function getNeighbors(cell: Object): Array {
    // Create an empty array to store neighboring cells
    var neighbors: Array = [];
    // Get the coordinates of the given cell
    var x: int = cell.x;
    var y: int = cell.y;
    // Find the four neighboring cells by adjusting the coordinates
    var neighborAbove: Object = grid[(y - 1) * gridSize + x];
    var neighborBelow: Object = grid[(y + 1) * gridSize + x];
    var neighborLeft: Object = grid[y * gridSize + (x - 1)];
    var neighborRight: Object = grid[y * gridSize + (x + 1)];
    // Push the found neighbors to the array if they exist
    if (neighborAbove != null) {
        neighbors.push(neighborAbove);
    }
    if (neighborBelow != null) {
        neighbors.push(neighborBelow);
    }
    if (neighborLeft != null) {
        neighbors.push(neighborLeft);
    }
    if (neighborRight != null) {
        neighbors.push(neighborRight);
    }
    // Return the array of neighbors
    return neighbors;
}

// Create a function to shuffle an array
function shuffle(array: Array): void {
    // Loop through the array
    for (var i: int = 0; i < array.length; i++) {
        // Generate a random index to swap with the current index
        var randomIndex: int = Math.floor(Math.random() * array.length);
        // Swap the current index with the random index
        var temp: Object = array[randomIndex];
        array[randomIndex] = array[i];
        array[i] = temp;
    }
}

// Create a function to generate a maze using Prim's algorithm
function generateMaze(): void {
    // Create a stack to store visited cells
    var stack: Array = [];
    // Create a variable to store the current cell and set it to the first cell in the grid
    var currentCell: Object = grid[0];
    // Set the current cell as visited
    currentCell.visited = true;
    // Push the current cell to the stack
    stack.push(currentCell);
    // Loop while there are unvisited cells in the grid
    while (stack.length > 0) {
        // Get a random neighboring cell of the current cell
        var neighbors: Array = getNeighbors(currentCell);
        var randomNeighbor: Object = neighbors[Math.floor(Math.random() * neighbors.length)];
        // If the random neighbor has not been visited
        if (!randomNeighbor.visited) {
            // Push it to the stack and remove the wall between the two cells
            stack.push(randomNeighbor);
            removeWall(currentCell, randomNeighbor);
            // Set the random neighbor as visited and make it the current cell
            randomNeighbor.visited = true;
            currentCell = randomNeighbor;
        } else {
            // If the neighbor has already been visited, remove it from the neighbors array
            var index: int = neighbors.indexOf(randomNeighbor);
            neighbors.splice(index, 1);
        }
        // Shuffle the remaining neighbors for random selection in the next iteration
        shuffle(neighbors);
    }
}

// Call the generateMaze() function to generate the maze
generateMaze();

// Create a function to draw the maze
function drawMaze(): void {
    // Loop through each cell in the grid
    for (var i: int = 0; i < grid.length; i++) {
        // Get the current cell's coordinates and walls
        var cell: Object = grid[i];
        var x: int = cell.x;
        var y: int = cell.y;
        var topWall: Boolean = cell.topWall;
        var bottomWall: Boolean = cell.bottomWall;
        var leftWall: Boolean = cell.leftWall;
        var rightWall: Boolean = cell.rightWall;

        // Calculate the coordinates for drawing each individual line
        var topLeftX: int = x * cellSize;
        var topLeftY: int = y * cellSize;
        var topRightX: int = (x + 1) * cellSize;
        var topRightY: int = y * cellSize;
        var bottomLeftX: int = x * cellSize;
        var bottomLeftY: int = (y + 1) * cellSize;
        var bottomRightX: int = (x + 1) * cellSize;
        var bottomRightY: int = (y + 1) * cellSize;

        // Draw the top wall if it exists
        if (topWall) {
            graphics.moveTo(topLeftX, topLeftY);
            graphics.lineTo(topRightX, topRightY);
        }
        // Draw the bottom wall if it exists
        if (bottomWall) {
            graphics.moveTo(bottomLeftX, bottomLeftY);
            graphics.lineTo(bottomRightX, bottomRightY);
        }
        // Draw the left wall if it exists
        if (leftWall) {
            graphics.moveTo(topLeftX, topLeftY);
            graphics.lineTo(bottomLeftX, bottomLeftY);
        }
        // Draw the right wall if it exists
        if (rightWall) {
            graphics.moveTo(topRightX, topRightY);
            graphics.lineTo(bottomRightX, bottomRightY);
        }
    }
}

// Call the drawMaze() function to draw the maze
drawMaze();