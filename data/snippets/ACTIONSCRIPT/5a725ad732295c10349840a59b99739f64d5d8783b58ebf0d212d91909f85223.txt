// This code snippet is a class that implements a binary search tree data structure.

// Define a class named BinarySearchTree
public class BinarySearchTree {
    
// Define a private variable to store the root node of the tree
    private var root:Node;
    
// Define a constructor function to initialize the root node as null
    function BinarySearchTree() {
        this.root = null;
    }
    
// Define a function to insert a new node into the tree
    public function insert(key:int, value:Object):void {
        var newNode:Node = new Node(key, value);
        
        if(this.root == null) {
            this.root = newNode;
        } else {
            var current:Node = this.root;
            
            while(true) {
                if(key < current.key) {
                    if(current.left == null) {
                        current.left = newNode;
                        break;
                    } else {
                        current = current.left;
                    }
                } else if(key > current.key) {
                    if(current.right == null) {
                        current.right = newNode;
                        break;
                    } else {
                        current = current.right;
                    }
                } else {
                    current.value = newNode.value;
                    break;
                }
            }
        }
    }
    
// Define a function to search for a node with a specific key
    public function search(key:int):Object {
        var current:Node = this.root;
        
        while(current != null) {
            if(key < current.key) {
                current = current.left;
            } else if(key > current.key) {
                current = current.right;
            } else {
                return current.value;
            }
        }
        
        return null;
    }
    
// Define a function to delete a node with a specific key
    public function delete(key:int):void {
        this.root = deleteNode(this.root, key);
    }
    
// Define a helper function to delete the node with the given key and return the updated root node
    private function deleteNode(current:Node, key:int):Node {
        if(current == null) {
            return null;
        } else if(key < current.key) {
            current.left = deleteNode(current.left, key);
        } else if(key > current.key) {
            current.right = deleteNode(current.right, key);
        } else {
            // Case 1: No children
            if(current.left == null && current.right == null) {
                current = null;
            } else if(current.right == null) {
                // Case 2: One child (left)
                current = current.left;
            } else if(current.left == null) {
                // Case 2: One child (right)
                current = current.right;
            } else {
                // Case 3: Two children
                // Find the minimum node in the right subtree
                var temp:Node = findMinNode(current.right);
                // Set the current node's key and value to the minimum node's key and value
                current.key = temp.key;
                current.value = temp.value;
                // Delete the minimum node from the right subtree
                current.right = deleteNode(current.right, temp.key);
            }
        }
        
        return current;
    }
    
// Define a helper function to find the minimum node in a subtree
    private function findMinNode(current:Node):Node {
        while(current.left != null) {
            current = current.left;
        }
        
        return current;
    }
}

// Define a class named Node to represent a single node in the tree
public class Node {
    
// Define public variables for key and value
    public var key:int;
    public var value:Object;
    
// Define public variables for left and right child nodes
    public var left:Node;
    public var right:Node;
    
// Define a constructor function to initialize the key, value, left and right nodes
    function Node(key:int, value:Object) {
        this.key = key;
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

// Sample usage of the BinarySearchTree class
var binarySearchTree:BinarySearchTree = new BinarySearchTree();
binarySearchTree.insert(5, "apple");
binarySearchTree.insert(2, "banana");
binarySearchTree.insert(7, "orange");
var fruit:String = binarySearchTree.search(2);
binarySearchTree.delete(7);