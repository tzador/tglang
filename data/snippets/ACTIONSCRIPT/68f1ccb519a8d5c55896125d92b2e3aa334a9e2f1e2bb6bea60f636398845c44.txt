// This code snippet is a class declaration for a custom button component in ActionScript

// Class declaration with the name "CustomButton" and a public access modifier 
public class CustomButton {
    
    // Declare instance variables with private access modifier
    private var _label:String;
    private var _color:uint;
    private var _disabled:Boolean;
    
    // Constructor function with three parameters
    // Sets the initial values for the instance variables
    public function CustomButton(label:String, color:uint, disabled:Boolean) {
        _label = label;
        _color = color;
        _disabled = disabled;
    }
    
    // Getters and setters for the instance variables
    public function get label():String {
        return _label;
    }
    
    public function set label(value:String):void {
        _label = value;
    }
    
    public function get color():uint {
        return _color;
    }
    
    public function set color(value:uint):void {
        _color = value;
    }
    
    public function get disabled():Boolean {
        return _disabled;
    }
    
    public function set disabled(value:Boolean):void {
        _disabled = value;
    }
    
    // Function for drawing the button with the specified label and color
    public function drawButton():void {
        if (!_disabled) {
            // Create a new Shape object to act as the button background
            var buttonBackground:Shape = new Shape();
            // Set the fill color to the specified color
            buttonBackground.graphics.beginFill(_color);
            // Draw a rectangle with rounded corners as the button background
            buttonBackground.graphics.drawRoundRect(0, 0, 100, 40, 10, 10);
            // Add the button background to the display list
            addChild(buttonBackground);
            
            // Create a new TextField object to display the label
            var labelField:TextField = new TextField();
            // Set the text value to the specified label
            labelField.text = _label;
            // Set the font size and color
            labelField.defaultTextFormat = new TextFormat("Arial", 16, 0xFFFFFF);
            // Set the text to be centered within the button
            labelField.autoSize = TextFieldAutoSize.CENTER;
            // Position the label within the button background
            labelField.x = (buttonBackground.width - labelField.width)/2;
            labelField.y = (buttonBackground.height - labelField.height)/2;
            // Add the label to the display list
            addChild(labelField);
            
            // Add event listeners for mouse interactions
            addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
            addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
            addEventListener(MouseEvent.CLICK, onClick);
        }
    }
    
    // Function for when the mouse hovers over the button
    private function onMouseOver(event:MouseEvent):void {
        // Change the button's color to a lighter shade
        _color = _color + (0x111111);
        // Re-draw the button
        drawButton();
    }
    
    // Function for when the mouse leaves the button
    private function onMouseOut(event:MouseEvent):void {
        // Change the button's color back to its original value
        _color = _color - (0x111111);
        // Re-draw the button
        drawButton();
    }
    
    // Function for when the button is clicked
    private function onClick(event:MouseEvent):void {
        // Display an alert with the button's label
        Alert.show("You clicked the button: " + _label);
    }
}