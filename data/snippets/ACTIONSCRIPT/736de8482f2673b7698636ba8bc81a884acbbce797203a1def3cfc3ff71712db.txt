package com.example.app {

    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.geom.Point;
    import flash.text.TextField;

    /**
    * A Class representing a draggable sprite
    * Extends the Sprite class from the Flash display package
    */
    public class DraggableSprite extends Sprite {

        // Private properties
        private var _name:String; // A variable to store the name of the sprite
        private var _position:Point; // A variable to store the position of the sprite

        // Constructor function
        public function DraggableSprite(name:String, xPos:Number, yPos:Number) {
            this.name = name; // Set the name of the sprite
            this.x = xPos; // Set the x position of the sprite
            this.y = yPos; // Set the y position of the sprite
            this.buttonMode = true; // Set the button mode to true for mouse interaction

            // Add event listeners for mouse events
            this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
            this.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
            this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
        }

        /**
        * Handler function for the MOUSE_DOWN event
        * Sets the starting position of the sprite and adds it to the stage
        */
        private function onMouseDown(event:MouseEvent):void {
            this.startDrag(); // Start the dragging motion
            _position = new Point(this.x, this.y); // Store the starting position
            this.parent.addChild(this); // Add the sprite on top of any others on the stage
        }

        /**
        * Handler function for the MOUSE_UP event
        * Stops the dragging motion and checks for collision
        */
        private function onMouseUp(event:MouseEvent):void {
            this.stopDrag(); // Stop the dragging motion
            checkCollision(); // Check for collision with other objects
        }

        /**
        * Handler function for the MOUSE_MOVE event
        * Updates the position of the sprite while it is being dragged
        */
        private function onMouseMove(event:MouseEvent):void {
            _position = new Point(this.x, this.y); // Update the position
        }

        /**
        * Function to check for collision with other sprites
        * Uses hitTestObject method to compare the bounding boxes of objects
        */
        private function checkCollision():void {
            // Loop through all the children on the stage
            for (var i:int = 0; i < this.parent.numChildren; i++) {
                // Check if the current child is a DraggableSprite object
                if (this.parent.getChildAt(i) is DraggableSprite) {
                    var child:DraggableSprite = this.parent.getChildAt(i) as DraggableSprite;
                    // Check for collision only if it is not the same sprite
                    if (child != this && this.hitTestObject(child)) {
                        // If collision occurs, swap the positions of the sprites
                        var tempPos:Point = child._position;
                        child._position = _position;
                        _position = tempPos;
                        child.x = _position.x;
                        child.y = _position.y;
                    }
                }
            }
        }

        // Getter function for the name property
        public function get name():String {
            return _name;
        }

        // Setter function for the name property
        public function set name(newName:String):void {
            _name = newName;
        }
    }
}