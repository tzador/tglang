/**
 * This class represents a basic button component in ActionScript
 * It inherits from the DisplayObjectContainer class and implements the InteractiveObject interface
 * This allows for user interaction with the button, such as clicking and hovering
 */
class Button extends DisplayObjectContainer implements InteractiveObject {
    
    // Private instance variables
    
    private var _label:TextField; // stores the text label of the button
    private var _background:Shape; // stores the background shape of the button
    
    /**
     * Constructor function for the Button class
     * Sets up the initial properties of the button
     */
    public function Button() {
        super(); // calls the constructor of the superclass
        
        // Set default values for instance variables
        _label = new TextField();
        _background = new Shape();
        
        // Add event listeners for user interaction
        addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
        addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
        addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
        addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
    }
    
    /**
     * Function for setting the label text and style of the button
     * @param {String} text - the text to be displayed on the button
     * @param {Number} size - the font size for the button label
     * @param {String} color - the text color for the button label
     */
    public function setLabel(text:String, size:Number, color:String):void {
        _label.text = text; // set the label text
        _label.setTextFormat(new TextFormat("Arial", size, color)); // set the text format
        _label.autoSize = TextFieldAutoSize.CENTER; // center the label text
        
        // Add the label to the button
        addChild(_label);
        
        // Reposition the label to the center of the button
        _label.x = (_background.width / 2) - (_label.width / 2);
        _label.y = (_background.height / 2) - (_label.height / 2);
    }
    
    /**
     * Function for setting the background color and size of the button
     * @param {Number} width - the width of the button
     * @param {Number} height - the height of the button
     * @param {Number} color - the background color of the button
     */
    public function setBackground(width:Number, height:Number, color:Number):void {
        _background.graphics.beginFill(color); // set the fill color
        _background.graphics.drawRect(0, 0, width, height); // create a rectangle at (0,0) with specified width,height
        _background.graphics.endFill(); // end the fill
        
        // Add the background to the button
        addChild(_background);
    }
    
    /**
     * Private function for handling the mouse down event
     * Changes the button color to indicate it has been clicked
     */
    private function onMouseDown(event:MouseEvent):void {
        _background.transform.colorTransform = new ColorTransform(0.8, 0.8, 0.8, 1, 0, 0, 0, 0); // apply a slight gray tint to the button
    }
    
    /**
     * Private function for handling the mouse up event
     * Changes the button color back to normal
     */
    private function onMouseUp(event:MouseEvent):void {
        _background.transform.colorTransform = new ColorTransform(); // revert back to no color transform
    }
    
    /**
     * Private function for handling the mouse over event
     * Changes the button color to indicate it is being hovered over
     */
    private function onMouseOver(event:MouseEvent):void {
        _background.transform.colorTransform = new ColorTransform(1.2, 1.2, 1.2, 1, 0, 0, 0, 0); // apply a slight white tint to the button
    }
    
    /**
     * Private function for handling the mouse out event
     * Changes the button color back to normal
     */
    private function onMouseOut(event:MouseEvent):void {
        _background.transform.colorTransform = new ColorTransform(); // revert back to no color transform
    }
}