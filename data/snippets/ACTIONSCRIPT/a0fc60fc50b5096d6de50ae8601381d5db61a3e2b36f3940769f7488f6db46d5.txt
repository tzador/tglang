/* This is a complex class that creates a dynamic form with various input fields and validation functions.
It also contains a function that sends the user's input data to a web service. */

// Import the necessary classes
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.net.URLLoader;
import flash.net.URLRequest;
import flash.net.URLVariables;
import flash.display.Sprite;
import flash.text.TextField;
import flash.display.Loader;
import flash.events.MouseEvent;

// Create a class named "DynamicForm"
public class DynamicForm extends Sprite {

  // Declare private variables for input fields and validation functions
	private var _firstName:TextField;
	private var _lastName:TextField;
	private var _email:TextField;
	private var _password:TextField;
	private var _confirmPassword:TextField;
	private var _address:TextField;
	private var _city:TextField;
	private var _state:TextField;
	private var _zipCode:TextField;
	private var _phone:TextField;
	private var _submitButton:Sprite;
	private var _errorMessages:Array;
  
	function DynamicForm() {
		init();
	}
	
	// Function to initialize the form
	private function init():void {
    // Create text fields for input fields and labels
		_firstName = createTextField("First Name:");
		_lastName = createTextField("Last Name:");
		_email = createTextField("Email:");
		_password = createTextField("Password:");
		_confirmPassword = createTextField("Confirm Password:");
		_address = createTextField("Address:");
		_city = createTextField("City:");
		_state = createTextField("State:");
		_zipCode = createTextField("Zip Code:");
		_phone = createTextField("Phone:");
		
		// Create submit button
		_submitButton = createButton();
		_submitButton.addEventListener(MouseEvent.CLICK, submitForm);
		
		// Add all input fields and labels to the stage
		addChild(_firstName);
		addChild(_lastName);
		addChild(_email);
		addChild(_password);
		addChild(_confirmPassword);
		addChild(_address);
		addChild(_city);
		addChild(_state);
		addChild(_zipCode);
		addChild(_phone);
		addChild(_submitButton);
	}
	
	// Function to create a text field with a label
	private function createTextField(label:String):TextField {
		var tf:TextField = new TextField();
		tf.text = label;
		tf.width = 200;
		tf.border = true;
		tf.background = true;
		tf.tabIndex = 0;
		return tf;
	}
	
	// Function to create a submit button
	private function createButton():Sprite {
		var button:Sprite = new Sprite();
		button.graphics.beginFill(0x000000);
		button.graphics.drawRect(0, 0, 100, 50);
		button.graphics.endFill();
		var label:TextField = new TextField();
		label.text = "Submit";
		label.width = 100;
		label.height = 50;
		label.textColor = 0xFFFFFF; // White text color
		button.addChild(label);
		return button;
	}
	
	// Function to validate form input
	private function validateForm():Boolean {
		// Initialize error message array
		_errorMessages = [];
		
		// Check if all fields are filled out
		if(_firstName.text == "" || _lastName.text == "" || _email.text == "" || _password.text == "" || _confirmPassword.text == "" || _address.text == "" || _city.text == "" || _state.text == "" || _zipCode.text == "" || _phone.text == "") {
			_errorMessages.push("Please fill out all fields.");
		}
		
		// Check if email is valid
		if(!validateEmail(_email.text)) {
			_errorMessages.push("Invalid email.");
		}
		
		// Check if passwords match
		if(_password.text != _confirmPassword.text) {
			_errorMessages.push("Passwords do not match.");
		}
		
		// Check if phone number is valid
		if(!validatePhone(_phone.text)) {
			_errorMessages.push("Invalid phone number.");
		}
		
		// If any errors exist, throw an error and halt form submission
		if(_errorMessages.length > 0) {
			throw new IllegalOperationError(_errorMessages.join("\n")); // Display all error messages separated by a new line
			return false;
		}
		
		return true; // If no errors, return true
	}
	
	// Function to validate email
	private function validateEmail(email:String):Boolean {
		// Check if email contains an "@" symbol
		if(email.indexOf("@") < 0) {
			return false;
		}
		
		// Split email by "@"
		var emailParts:Array = email.split("@");
		
		// Check if there are more than 2 parts
		if(emailParts.length != 2) {
			return false;
		}
		
		// Check if the second part (domain) contains a "."
		if(emailParts[1].indexOf(".") < 0) {
			return false;
		}
		
		return true;
	}
	
	// Function to validate phone number
	private function validatePhone(phone:String):Boolean {
		// Check if phone number is 10 digits
		if(phone.length != 10) {
			return false;
		}
		
		// Check if all characters are numbers
		if(isNaN(Number(phone))) {
			return false;
		}
		
		return true;
	}
	
	// Function to submit form data to a web service
	private function submitForm(event:Event):void {
		if(validateForm()) { // Validate form before sending data
			// Create new URLRequest with the web service URL
			var request:URLRequest = new URLRequest("http://www.example.com/api/submit_form");
			
			// Create new URLVariables with form data
			var variables:URLVariables = new URLVariables();
			variables.first_name = _firstName.text;
			variables.last_name = _lastName.text;
			variables.email = _email.text;
			variables.password = _password.text;
			variables.address = _address.text;
			variables.city = _city.text;
			variables.state = _state.text;
			variables.zip_code = _zipCode.text;
			variables.phone = _phone.text;
			
			// Add variables to the request
			request.data = variables;
			
			// Create new URLLoader to send the request
			var loader:URLLoader = new URLLoader();
			loader.load(request);
			
			// Success message
			trace("Form submitted successfully!");
		}
	}
}