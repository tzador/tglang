// This code snippet generates a random maze using Prim's Algorithm
var grid: Array<Array<Number>> // declare grid variable as an Array of Arrays of Numbers
var walls: Array<Array<Number>> // declare walls variable as an Array of Arrays of Numbers (representing wall positions)
var m,n: int // declare m and n variables as integers (maze dimensions)
function initializeGrid(): void { // function to initialize the grid and walls variables
    grid = new Array<Array<Number>>(m) // initialize grid as an Array of size m
    walls = new Array<Array<Number>>(m+1) // initialize walls as an Array of size m+1
    for (var i:int = 0; i < m; i++) { // loop through grid rows
        grid[i] = new Array<Number>(n) // initialize each row as an Array of size n
        for (var j:int = 0; j < n; j++) { // loop through grid columns
            grid[i][j] = 1 // set each cell as a wall (using number 1 to represent walls)
        }
    }
    for (i = 0; i < m+1; i++) { // loop through wall rows
        walls[i] = new Array<Number>(n+1)  // initialize each row as an Array of size n+1
        for (j = 0; j < n+1; j++) { // loop through wall columns
            walls[i][j] = 1 // set each wall position as a wall (using number 1 to represent walls)
        }
    }
}

function generateMaze(): Array<Array<Number>> { // function to generate the maze 
    initializeGrid() // initialize the grid and walls variables
    var current: Array<int> // declare current variable as an Array of integers to keep track of current cell
    var visited: Array<Array<Boolean>> // declare visited variable as an Array of Arrays of Booleans to track visited cells
    current = [0, 0] // set current cell to top left corner
    visited = new Array<Array<Boolean>>(m) // initialize visited as an Array of size m
    for (var i:int = 0; i < m; i++) { // loop through visited rows
        visited[i] = new Array<Boolean>(n) // initialize each row as an Array of size n
        for (var j:int = 0; j < n; j++) { // loop through visited columns
            visited[i][j] = false // mark each cell as unvisited
        }
    }
    visited[0][0] = true // mark top left corner as visited
    var wallsToExpand: Array<Array<int>> // declare wallsToExpand variable as an Array of Arrays of integers 
    wallsToExpand = new Array<Array<int>> // initialize wallsToExpand
    for (i = 0; i < m; i++) { // loop through border wall positions (top and left walls)
        wallsToExpand.push([i,0]) // add wall position to wallsToExpand
        wallsToExpand.push([0,i])
    }
    while (wallsToExpand.length > 0) { // while there are walls to expand
        var randomWall: int = Math.floor(Math.random() * wallsToExpand.length) // generate a random integer within the range of wallsToExpand
        var wallToCheck: Array<int> = wallsToExpand[randomWall] // get the wall position to check
        if (wallToCheck[0] == 0) { // if it's a top wall
            var cellAbove: Array<int> = [current[0]-1, current[1]] // get cell above current cell
            if (!visited[cellAbove[0]][cellAbove[1]]) { // if cell above is not visited
                grid[wallToCheck[0]][wallToCheck[1]] = 0 // break wall in grid
                visited[cellAbove[0]][cellAbove[1]] = true // mark cell as visited
                wallsToExpand.push(cellAbove) // add cell to wallsToExpand
            }
        } else if (wallToCheck[0] == m) { // if it's a bottom wall
            var cellBelow: Array<int> = [current[0]+1, current[1]] // get cell below current cell
            if (!visited[cellBelow[0]][cellBelow[1]]) { // if cell below is not visited
                grid[wallToCheck[0]][wallToCheck[1]] = 0 // break wall in grid
                visited[cellBelow[0]][cellBelow[1]] = true // mark cell as visited
                wallsToExpand.push(cellBelow) // add cell to wallsToExpand
            }
        } else if (wallToCheck[1] == 0) { // if it's a left wall
            var cellLeft: Array<int> = [current[0], current[1]-1] // get cell left of current cell
            if (!visited[cellLeft[0]][cellLeft[1]]) { // if cell left is not visited
                grid[wallToCheck[0]][wallToCheck[1]] = 0 // break wall in grid
                visited[cellLeft[0]][cellLeft[1]] = true // mark cell as visited
                wallsToExpand.push(cellLeft) // add cell to wallsToExpand
            }
        } else if (wallToCheck[1] == n) { // if it's a right wall
            var cellRight: Array<int> = [current[0], current[1]+1] // get cell right of current cell
            if (!visited[cellRight[0]][cellRight[1]]) { // if cell right is not visited
                grid[wallToCheck[0]][wallToCheck[1]] = 0 // break wall in grid
                visited[cellRight[0]][cellRight[1]] = true // mark cell as visited
                wallsToExpand.push(cellRight) // add cell to wallsToExpand
            }
        }
        wallsToExpand.splice(randomWall, 1) // remove wall from wallsToExpand
    }
    return grid // return generated maze grid
}

function printMaze(): void { // function to print the maze to the console
    for (var i:int = 0; i < m; i++) { // for each row
        var row:String = "" // initialize row variable
        for (var j:int = 0; j < n; j++) { // for each column
            if (grid[i][j] == 1) { // if cell is a wall
                row += "[W]" // add "[W]" to row
            } else { // if cell is a pathway
                row += "[ ]" // add "[ ]" to row
            }
        }
        trace(row) // print row to console
    }
}

m = 10 // set maze width to 10
n = 10 // set maze height to 10
generateMaze() // call generateMaze function to generate the maze
printMaze() // print the generated maze to the console