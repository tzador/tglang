/** 
 * This is a class that represents a user. 
 */ 
class User 
{ 
    /** 
     * Private variables to hold user data 
     */ 
    private var name:String; 
    private var age:int; 
 
    /** 
     * Constructor function that sets the name and age 
     * @param name A string representing the user's name 
     * @param age An integer representing the user's age 
     */ 
    public function User(name:String, age:int) 
    { 
        this.name = name; 
        this.age = age; 
    } 
 
    /** 
     * Function to get the user's name 
     * @return A string representing the user's name 
     */ 
    public function getName():String 
    { 
        return this.name; 
    } 
 
    /** 
     * Function to set the user's name 
     * @param name A string representing the user's name 
     */ 
    public function setName(name:String):void 
    { 
        this.name = name; 
    } 
 
    /** 
     * Function to get the user's age 
     * @return An integer representing the user's age 
     */ 
    public function getAge():int 
    { 
        return this.age; 
    } 
 
    /** 
     * Function to set the user's age 
     * @param age An integer representing the user's age 
     */ 
    public function setAge(age:int):void 
    { 
        this.age = age; 
    } 
}

/** 
 * This is a class that represents a shopping cart. 
 */ 
class ShoppingCart 
{ 
    /** 
     * Private variables to hold cart items and total price 
     */ 
    private var items:Vector.<String> = new Vector.<String>(); 
    private var totalPrice:int = 0; 
 
    /** 
     * Function to add an item to the shopping cart 
     * @param item A string representing the item to be added 
     */ 
    public function addItem(item:String):void 
    { 
        // Add item to cart 
        items.push(item); 
 
        // Calculate price of item and add to total 
        var price:int = this.calculatePrice(item); 
        totalPrice += price; 
    } 
 
    /** 
     * Function to remove an item from the shopping cart 
     * @param item A string representing the item to be removed 
     */ 
    public function removeItem(item:String):void 
    { 
        // Loop through items in cart 
        for (var i:int = 0; i < items.length; i++) 
        { 
            // If item matches, remove it from cart and update total price 
            if (items[i] == item) 
            { 
                items.splice(i, 1); 
                var price:int = this.calculatePrice(item); 
                totalPrice -= price; 
                break; 
            } 
        } 
    } 
 
    /** 
     * Function to get the cart items 
     * @return A vector containing the cart items 
     */ 
    public function getItems():Vector.<String> 
    { 
        return this.items; 
    } 
 
    /** 
     * Function to get the total price of items in the shopping cart 
     * @return An integer representing the total price 
     */ 
    public function getTotalPrice():int 
    { 
        return this.totalPrice; 
    } 
 
    /** 
     * Helper function to calculate the price of an item 
     * @param item A string representing the item to calculate the price for 
     * @return An integer representing the price of the item 
     */ 
    private function calculatePrice(item:String):int 
    { 
        // Set default price to 10 
        var price:int = 10; 
 
        // Loop through item characters 
        for (var i:int = 0; i < item.length; i++) 
        { 
            // Add ASCII value of character to price 
            price += item.charCodeAt(i); 
        } 
 
        return price; 
    } 
}

// Create a new user 
var user:User = new User("John", 25); 
 
// Create a new shopping cart 
var cart:ShoppingCart = new ShoppingCart(); 
 
// Add items to cart 
cart.addItem("Apple"); 
cart.addItem("Banana"); 
cart.addItem("Orange"); 
 
// Display items 
trace("Cart items: " + cart.getItems()); 
 
// Display total price 
trace("Total price: " + cart.getTotalPrice()); 
 
// Remove item from cart 
cart.removeItem("Banana"); 
 
// Display updated items 
trace("Cart items: " + cart.getItems()); 
 
// Display updated total price 
trace("Total price: " + cart.getTotalPrice());