/* This code snippet creates a class for a 2D vector with functions to perform vector operations */
// Class for 2D Vector
class Vector2D {
    /* Defining variables for vector components */
    private var _x:Number;
    private var _y:Number;
    
    /* Constructor function to initialize values of vector components */
    public function Vector2D(x:Number, y:Number) {
        this._x = x;
        this._y = y;
    }
    
    /* Function to get the vector's magnitude (length) */
    public function get magnitude():Number {
        /* Using Pythagorean theorem to calculate magnitude */
        return Math.sqrt((this._x * this._x) + (this._y * this._y));
    }
    
    /* Function to get the vector's angle in degrees */
    public function get angle():Number {
        /* Using inverse tangent function to calculate angle */
        return Math.atan2(this._y, this._x) * 180 / Math.PI;
    }
    
    /* Function to add another vector to this vector */
    public function add(vector:Vector2D):void {
        this._x += vector.x;
        this._y += vector.y;
    }
    
    /* Function to subtract another vector from this vector */
    public function subtract(vector:Vector2D):void {
        this._x -= vector.x;
        this._y -= vector.y;
    }
    
    /* Function to calculate the dot product of two vectors */
    public function dotProduct(vector:Vector2D):Number {
        return this._x * vector.x + this._y * vector.y;
    }
    
    /* Function to rotate the vector by an angle (in degrees) */
    public function rotate(angle:Number):void {
        /* Converting angle to radians for use in trigonometric functions */
        var rad:Number = angle * Math.PI / 180;
        /* Applying rotation transformation using trigonometric functions */
        var newX:Number = this._x * Math.cos(rad) - this._y * Math.sin(rad);
        var newY:Number = this._x * Math.sin(rad) + this._y * Math.cos(rad);
        /* Updating vector components with rotated values */
        this._x = newX;
        this._y = newY;
    }
    
    /* Function to scale the vector by a factor */
    public function scale(factor:Number):void {
        this._x *= factor;
        this._y *= factor;
    }
    
    /* Function to normalize the vector (make its magnitude 1 while maintaining direction) */
    public function normalize():void {
        /* Calculating current magnitude */
        var currentMagnitude:Number = this.magnitude;
        /* Dividing vector components by current magnitude to get normalized values */
        this._x /= currentMagnitude;
        this._y /= currentMagnitude;
    }
    
    /* Function to copy the values of another vector */
    public function copy(vector:Vector2D):void {
        this._x = vector.x;
        this._y = vector.y;
    }
}