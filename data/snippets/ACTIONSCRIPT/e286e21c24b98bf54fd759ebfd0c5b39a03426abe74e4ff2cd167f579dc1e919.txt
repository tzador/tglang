// This code snippet demonstrates a complex sorting algorithm in ActionScript

// Define a class called Sorter
class Sorter {

  // Define a private static function to perform the sorting
  private static function sort(arr:Array, size:int):void {

    // Define variables for the left and right subarrays
    var left:Array = new Array();
    var right:Array = new Array();
    var equal:Array = new Array();
    
    // Base case: If array size is less than or equal to 1, return the original array
    if (size <= 1) {
      return arr;
    }
    
    // Define a pivot element (in this case, the first element of the array)
    var pivot:Object = arr[0];
    
    // Loop through the array and separate values into left, right, or equal arrays based on their relation to the pivot
    for each (var element:Object in arr) {
      if (element < pivot) {
        left.push(element);
      } else if (element > pivot) {
        right.push(element);
      } else {
        equal.push(element);
      }
    }
    
    // Recursively call the sort function on the left and right subarrays, and then combine them with the equal array
    return sort(left, left.length).concat(equal, sort(right, right.length));
  }
  
  // Define a public static function to call the private sorting function on an array and return the sorted array
  public static function sortArray(arr:Array):Array {
    return sort(arr, arr.length);
  }
}

// Example usage:
var unsorted:Array = [4, 2, 7, 1, 5];
var sorted:Array = Sorter.sortArray(unsorted);
trace(sorted); // Outputs [1, 2, 4, 5, 7]