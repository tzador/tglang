//This code snippet creates a class for a messaging application
//with the ability to send and receive messages

//Create a class called 'MessagingApp'
class MessagingApp {
    //Initialize variables for user's name, list of messages, and current message index
    private var _userName:String;
    private var _messages:Array;
    private var _currentMessageIndex:int;
    
    //Constructor for the class
    public function MessagingApp(userName:String) {
        //Set the user's name and initialize the array of messages and current message index
        _userName = userName;
        _messages = [];
        _currentMessageIndex = 0;
    }
    
    //Function to add a new message to the array
    public function addMessage(newMessage:String):void {
        //Check if the message is not empty
        if (newMessage != "") {
            //Add the message to the array and increase the current message index
            _messages.push(newMessage);
            _currentMessageIndex++;
        }
    }
    
    //Function to view the current message
    public function viewCurrentMessage():String {
        //Check if the array of messages is not empty
        if (_messages.length > 0) {
            //Return the current message
            return _messages[_currentMessageIndex];
        //If array is empty, return an error message
        } else {
            return "No messages found";
        }
    }
    
    //Function to view the previous message
    public function viewPreviousMessage():String {
        //Check if the current message index is not the first index (index 0)
        if (_currentMessageIndex > 0) {
            //Decrease the current message index and return the previous message
            _currentMessageIndex--;
            return _messages[_currentMessageIndex];
        //If current message index is 0, return an error message
        } else {
            return "No previous messages";
        }
    }
    
    //Function to view the next message
    public function viewNextMessage():String {
        //Check if the current message index is not the last index (index of last message in array)
        if (_currentMessageIndex < _messages.length - 1) {
            //Increase the current message index and return the next message
            _currentMessageIndex++;
            return _messages[_currentMessageIndex];
        //If current message index is the last index, return an error message
        } else {
            return "No next messages";
        }
    }
    
    //Function to delete the current message
    public function deleteCurrentMessage():void {
        //Remove the message at the current message index from the array
        _messages.splice(_currentMessageIndex, 1);
        //If the current message index is now the index of the last message, decrease the index by 1
        if (_currentMessageIndex == _messages.length) {
            _currentMessageIndex--;
        }
    }
}