/**
Create a class named "Rectangle" that inherits from the "Shape" class.
*/
public class Rectangle extends Shape {
    //declare private properties for the width and height of the rectangle
    private var _width:Number;
    private var _height:Number;
    
    /**
    Create a constructor function that accepts two parameters, width and height, and assigns them to the private properties.
    */
    public function Rectangle(width:Number, height:Number)
    {
        this._width = width;
        this._height = height;
    }
    
    /**
    Create a public method to calculate the area of the rectangle.
    */
    public function calculateArea():Number
    {
        //multiply the private properties _width and _height to get the area
        var area:Number = this._width * this._height;
        
        //return the calculated area
        return area;
    }
    
    /**
    Create a public method to calculate the perimeter of the rectangle.
    */
    public function calculatePerimeter():Number
    {
        //calculate the perimeter using the formula 2 * (_width + _height)
        var perimeter:Number = 2 * (this._width + this._height);
        
        //return the calculated perimeter
        return perimeter;
    }
    
    /**
    Create a getter function to access the private property _width.
    */
    public function get width():Number
    {
        //return the value of _width
        return this._width;
    }
    
    /**
    Create a setter function to set the value of _width.
    */
    public function set width(value:Number):void
    {
        //set the value of _width to the passed in value
        this._width = value;
    }
    
    /**
    Create a getter function to access the private property _height.
    */
    public function get height():Number
    {
        //return the value of _height
        return this._height;
    }
    
    /**
    Create a setter function to set the value of _height.
    */
    public function set height(value:Number):void
    {
        //set the value of _height to the passed in value
        this._height = value;
    }
    
    /**
    Create a method override for the inherited draw() method from the Shape class.
    */
    override public function draw():void 
    {
        //call the draw() method from the parent class
        super.draw();
        
        //draw a rectangle using the private properties and the graphics property from the parent class
        this.graphics.drawRect(0, 0, this._width, this._height);
    }
}