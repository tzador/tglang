/*** Function: mergeSort 
* Description: Sorts an input array using the merge sort algorithm. 
* Parameters: 
* - array: An array of numbers to be sorted in ascending order. 
* Returns: 
* - sortedArray: An array of numbers in ascending order. 
***/ 
function mergeSort(array:Array):Array 
{ 
    /* If array is empty or has only one element, it is already sorted. 
    So we return the array. */ 
    if (array.length <= 1) return array; 

    /* We calculate the middle index of the array and split the array into two 
    arrays, one from the start to the middle index and the other from the 
    middle index to the end. */ 
    var middleIndex:int = array.length / 2; 
    var leftArray:Array = array.slice(0, middleIndex); 
    var rightArray:Array = array.slice(middleIndex); 

    /* We use recursion to keep dividing the arrays until we reach arrays with 
    only one element. This is when we start merging the arrays back together. */ 
    leftArray = mergeSort(leftArray); 
    rightArray = mergeSort(rightArray); 

    /* We use a temporary array to store the sorted elements from the two 
    divided arrays. */ 
    var sortedArray:Array = []; 

    /* We use two pointers to keep track of the current indices of the left and 
    right arrays. */ 
    var leftIndex:int = 0; 
    var rightIndex:int = 0; 

    /* We compare the first element of each array and add the smaller element 
    to the sorted array. */ 
    while (leftIndex < leftArray.length && rightIndex < rightArray.length) 
    { 
        if (leftArray[leftIndex] <= rightArray[rightIndex]) 
        { 
            // Add the smaller element to the sorted array 
            sortedArray.push(leftArray[leftIndex]); 
            leftIndex++; 
        } 
        else 
        { 
            // Add the smaller element to the sorted array 
            sortedArray.push(rightArray[rightIndex]); 
            rightIndex++; 
        } 
    } 

    /* We add any remaining elements from the left array to the sorted array. 
    This is done when the right array has no more elements left to compare. */ 
    while (leftIndex < leftArray.length) 
    { 
        sortedArray.push(leftArray[leftIndex]); 
        leftIndex++; 
    } 

    /* We add any remaining elements from the right array to the sorted array. 
    This is done when the left array has no more elements left to compare. */ 
    while (rightIndex < rightArray.length) 
    { 
        sortedArray.push(rightArray[rightIndex]); 
        rightIndex++; 
    } 

    return sortedArray; 
}