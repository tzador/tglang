/*
This code snippet is a basic implementation of a linked list in ActionScript
It includes methods for adding, removing, and searching for nodes, as well as printing the list in order.
*/

// Node class
class Node {
  // node data
  var data;
  // reference to next node
  var next:Node;

  // constructor to initialize node data
  function Node(data) {
    this.data = data;
    this.next = null;
  }
}

// LinkedList class
class LinkedList {
  // reference to head node
  var head:Node;

  // add node to end of list
  function add(data) {
    // create new node with data
    var newNode:Node = new Node(data);

    // if list is empty, make this node the head
    if (this.head == null) {
      this.head = newNode;
    } else {
      // otherwise, traverse to end of list and add node
      var current:Node = this.head;
      while (current.next != null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  // remove node from list
  function remove(data) {
    // if list is empty, do nothing
    if (this.head == null) {
      return;
    } else if (this.head.data == data) {
      // if head node contains data, remove it and update head reference
      this.head = this.head.next;
    } else {
      // otherwise, traverse list to find node with matching data
      var current:Node = this.head;
      var previous:Node = null;
      while (current != null) {
        if (current.data == data) break;
        previous = current;
        current = current.next;
      }
      // if node is found, remove it by updating references
      if (current != null) previous.next = current.next;
    }
  }

  // search for node with matching data
  function contains(data) {
    // if list is empty, return false
    if (this.head == null) {
      return false
    } else {
      // otherwise, traverse list to find node with matching data
      var current:Node = this.head;
      while (current != null) {
        // if data is found, return true
        if (current.data == data) return true;
        current = current.next;
      }
      // data not found, return false
      return false;
    }
  }

  // print data of all nodes in list in order
  function print() {
    // if list is empty, do nothing
    if (this.head == null) {
      return;
    } else {
      // otherwise, traverse list and print data of each node
      var current:Node = this.head;
      while (current != null) {
        trace(current.data);
        current = current.next;
      }
    }
  }
}

// example usage
var list:LinkedList = new LinkedList();
list.add(1);
list.add(2);
list.add(3);
list.add(4);
list.print(); // output: 1, 2, 3, 4
list.remove(2);
list.remove(4);
list.print(); // output: 1, 3