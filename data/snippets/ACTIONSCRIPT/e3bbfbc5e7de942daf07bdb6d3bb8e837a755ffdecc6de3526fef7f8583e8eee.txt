/** 
* Actionscript code for creating a custom class in Adobe Flash
* This class contains a constructor and several methods to calculate geometry formulas
*/

package com.example.utils {
	
	// import flash library for displaying error messages
	import flash.errors.IllegalOperationError;
	
	// Create a new class called GeometryUtil
	public class GeometryUtil {
		
		// Declare class variables
		private var width:Number;
		private var height:Number;
		
		// Constructor function
		public function GeometryUtil(width:Number, height:Number){
			// Set class variables to passed in values
			this.width = width;
			this.height = height;
		}
		
		// Calculate the area of a rectangle
		public function calculateArea():Number{
			// Check if width and height are both valid numbers
			if(isNaN(width) || isNaN(height)){
				throw new ArgumentError("Invalid width or height value");
			}
			// Calculate area by multiplying width and height
			return width * height;
		}
		
		// Calculate the perimeter of a rectangle
		public function calculatePerimeter():Number{
			// Check if width and height are both valid numbers
			if(isNaN(width) || isNaN(height)){
				throw new ArgumentError("Invalid width or height value");
			}
			// Calculate perimeter by summing all sides
			return (2 * width) + (2 * height);
		}
		
		// Calculate the area of a circle
		public function calculateCircleArea(radius:Number):Number{
			// Check if radius is a valid number
			if(isNaN(radius)){
				throw new ArgumentError("Invalid radius value");
			}
			// Calculate area using PI constant
			return Math.PI * (radius * radius);
		}
		
		// Calculate the circumference of a circle
		public function calculateCircleCircumference(radius:Number):Number{
			// Check if radius is a valid number
			if(isNaN(radius)){
				throw new ArgumentError("Invalid radius value");
			}
			// Calculate circumference using PI constant
			return 2 * Math.PI * radius;
		}
		
		// Calculate the slope of a line
		public function calculateSlope(x1:Number, y1:Number, x2:Number, y2:Number):Number{
			// Check if all coordinates are valid numbers
			if(isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2)){
				throw new ArgumentError("Invalid coordinates");
			}
			// Check if the two points are the same
			if(x1 == x2 && y1 == y2){
				throw new IllegalOperationError("Infinite slope");
			}
			// Calculate slope using slope formula
			return (y2 - y1) / (x2 - x1);
		}
	}
}