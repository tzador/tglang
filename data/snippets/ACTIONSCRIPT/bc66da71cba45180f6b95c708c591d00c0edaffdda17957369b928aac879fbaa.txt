/* This is a complex code snippet in ACTIONSCRIPT that creates a class for a spaceship object */
class Spaceship {
    // private properties
    private var xPos:Number; // stores the x position of the spaceship
    private var yPos:Number; // stores the y position of the spaceship
    private var velocity:Number; // stores the velocity of the spaceship
    private var fuel:Number; // stores the amount of fuel remaining

    // public properties
    public var isFlying:Boolean; // stores whether the spaceship is flying or not
    public var engineOn:Boolean; // stores whether the spaceship's engine is on or not

    // constructor function
    function Spaceship(initXPos:Number, initYPos:Number, initVelocity:Number, initFuel:Number) {
        // assign initial values to properties
        xPos = initXPos;
        yPos = initYPos;
        velocity = initVelocity;
        fuel = initFuel;

        // set initial states of public properties
        isFlying = false;
        engineOn = false;
    }

    // public methods
    public function takeOff():Void {
        // check if there is enough fuel to take off
        if (fuel < 10) {
            // if not, print error message
            trace("Not enough fuel to take off");
        } else {
            // if enough fuel, set isFlying to true
            isFlying = true;

            // reduce fuel by 10 units
            fuel -= 10;
        }
    }

    public function land():Void {
        // check if the spaceship is already on the ground
        if (!isFlying) {
            // if not flying, print error message
            trace("Spaceship is not flying");
        } else {
            // if flying, set isFlying to false
            isFlying = false;

            // turn off engine
            engineOn = false;
        }
    }

    public function move():Void {
        // check if spaceship is flying
        if (isFlying) {
            // increase xPos by velocity
            xPos += velocity;
        }
    }

    public function turnOnEngine():Void {
        // check if there is enough fuel to turn on engine
        if (fuel < 5) {
            // if not, print error message
            trace("Not enough fuel for engine");
        } else {
            // if enough fuel, set engineOn to true
            engineOn = true;

            // reduce fuel by 5 units
            fuel -= 5;
        }
    }

    // getter and setter methods
    // getter method for xPos
    public function get x():Number {
        // return xPos
        return xPos;
    }

    // setter method for xPos
    public function set x(newXPos:Number):Void {
        // assign new value to xPos
        xPos = newXPos;
    }

    // getter method for yPos
    public function get y():Number {
        // return yPos
        return yPos;
    }

    // setter method for yPos
    public function set y(newYPos:Number):Void {
        // assign new value to yPos
        yPos = newYPos;
    }

    // getter method for velocity
    public function get v():Number {
        // return velocity
        return velocity;
    }

    //setter method for velocity
    public function set v(newVelocity:Number):Void {
        //assign new value to velocity
        velocity = newVelocity;
    }

    //getter method for fuel
    public function get f():Number {
        //return fuel
        return fuel;
    }

    //setter method for fuel
    public function set f(newFuel:Number):Void {
        //assign new value to fuel
        fuel = newFuel;
    }
}

// create an instance of the Spaceship class
var mySpaceship:Spaceship = new Spaceship(100, 200, 30, 100);

// take off the spaceship
mySpaceship.takeOff();

// move the spaceship
mySpaceship.move();

// turn on the engine
mySpaceship.turnOnEngine();

/*

TRACE OUTPUT:
Not enough fuel for engine

SPACESHIP PROPERTIES:
xPos = 130
yPos = 200
velocity = 30
fuel = 85
isFlying = true
engineOn = true

*/