/**
 * A constructor function for the `Shape` class.
 * 
 * @param {Number} x The X coordinate of the `Shape` on the stage.
 * @param {Number} y The Y coordinate of the `Shape` on the stage.
 */
public function Shape(x:Number, y:Number) {
    // set the maximum width of the `Shape`
    this.x = x;
    // set the maximum height of the `Shape`
    this.y = y;
    // randomly generate a color for the `Shape` using the `randomColor` function
    this.color = randomColor();
}

/**
 * A method to draw the `Shape` on the stage.
 * 
 * @param {Number} width The width of the `Shape`.
 * @param {Number} height The height of the `Shape`.
 * @param {Color} color The color of the `Shape`.
 */
public function drawShape(width:Number, height:Number, color:Color) {
    // set the line style for the `Shape` to be a solid line with thickness of 2
    this.graphics.lineStyle(2, '0x000000');
    // begin filling the `Shape` with the color specified
    this.graphics.beginFill(color);
    // draw a rectangle with the specified width and height
    this.graphics.drawRect(0, 0, width, height);
    // end filling the `Shape`
    this.graphics.endFill();
    // add the `Shape` to the stage
    this.stage.addChild(this);
}

/**
 * A function to randomly generate a color for the `Shape`.
 * 
 * @returns {Color} A randomly generated color for the `Shape`.
 */
private function randomColor():Color {
    // generate a random red value
    var red:Number = Math.floor(Math.random() * 256);
    // generate a random green value
    var green:Number = Math.floor(Math.random() * 256);
    // generate a random blue value
    var blue:Number = Math.floor(Math.random() * 256);
    // combine the red, green, and blue values to create a color
    var color:Color = red << 16 | green << 8 | blue;
    return color;
}

// create a new `Shape` object with the constructor function
var shape:Shape = new Shape(100, 100);
// draw the `Shape` on the stage with a width of 50, height of 50, and random color
shape.drawShape(50, 50, shape.color);