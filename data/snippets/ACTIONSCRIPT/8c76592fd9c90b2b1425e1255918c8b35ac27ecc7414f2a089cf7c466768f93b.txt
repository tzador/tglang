// Define a function that calculates the nth Fibonacci number
function fibonacci(n:int):int {
    if (n == 0 || n == 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

// Define a class for a dynamic data structure: Queue
public class Queue {
    // Define a private variable to store the queue elements
    private var queueElements:Array = new Array();

    // Define a public function to add an element to the end of the queue
    public function enqueue(element:Object):void {
        queueElements.push(element);
    }

    // Define a public function to remove and return the first element of the queue
    public function dequeue():Object {
        if (isEmpty()) {
            return null;
        } else {
            return queueElements.shift();
        }
    }

    // Define a public function to check if the queue is empty
    public function isEmpty():Boolean {
        return (queueElements.length == 0);
    }

    // Define a public function to print the queue elements
    public function printQueue():void {
        for (var i:int = 0; i < queueElements.length; i++) {
            trace("Element " + i + ": " + queueElements[i]);
        }
    }
}

// Create a new instance of the Queue class
var queue:Queue = new Queue();

// Use the enqueue function to add elements to the queue
queue.enqueue(5);
queue.enqueue("Hello");
queue.enqueue(true);
queue.enqueue(3.14);

// Print the queue elements
queue.printQueue(); // Output: "Element 0: 5", "Element 1: Hello", "Element 2: true", "Element 3: 3.14"

// Use the dequeue function to remove and return the first element of the queue 
var firstElement:Object = queue.dequeue();

// Print the first element of the queue
trace("First Element: " + firstElement); // Output: "First Element: 5"