// This code snippet is a function that performs
// a binary search on a sorted array of integers.

// The function takes in an array and the element to search for
function binarySearch(arr:Array, target:int):int {

	  // Initialize variables for start and end indices
	  var start:int = 0;
	  var end:int = arr.length - 1;

	  // Loop while start index is smaller than or equal to end index
	  while (start <= end) {

	    // Calculate middle index
	    var middle:int = (start + end) / 2;

	    // If middle element is equal to target, return middle index
	    if (arr[middle] == target) {
	      return middle;
	    }

	    // If middle element is larger than target,
	    // update end index to search in left half of array
	    else if (arr[middle] > target) {
	      end = middle - 1;
	    }

	    // If middle element is smaller than target,
	    // update start index to search in right half of array
	    else {
	      start = middle + 1;
	    }
	  }

	  // If target is not found, return -1
	  return -1;
	}

	// Example array and target element
	var array:Array = [2, 5, 8, 11, 14, 17, 20];
	var target:int = 11;

	// Call binarySearch function and print result
	trace("Target element is at index: " + binarySearch(array, target)); // Output: Target element is at index: 3