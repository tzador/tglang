/* Function to calculate the nth Fibonacci number using recursion */
public function fibonacci(n:Number):Number {
 if (n < 1) return 0; // Base case
 else if (n == 1) return 1; // Base case
 else return fibonacci(n-1) + fibonacci(n-2); // Recursive case
}

/* Function to calculate the factorial of a given number using recursion */
public function factorial(n:Number):Number {
 if (n <= 1) return 1; // Base case
 else return n * factorial(n-1); // Recursive case
}

// Main function
public function main():Void {
 var n:Number = 10; // Input value
 trace("Fibonacci series up to " + n + "th term:");
 for (var i:Number = 0; i <= n; i++) {
  // Call fibonacci function for each term and print the result
  trace(fibonacci(i));
 }
 trace("Factorial of " + n + " is " + factorial(n));
}

/* Output:
Fibonacci series up to 10th term:
0
1
1
2
3
5
8
13
21
34
55
Factorial of 10 is 3628800
*/