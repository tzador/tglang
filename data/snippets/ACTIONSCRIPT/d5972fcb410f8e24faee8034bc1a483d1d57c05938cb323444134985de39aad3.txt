// Defining a function that calculates the nth Fibonacci number
function fibonacci(n:int):int {
    // Creating memoization table to optimize recursion
    var fibTable:Vector.<int> = new Vector.<int>();
    // Adding first two values of Fibonacci sequence to table
    fibTable.push(0);
    fibTable.push(1);
    // Creating recursive helper function
    function helper(m:int):int {
        // Checking if value has already been calculated and stored in table
        if (m < fibTable.length) {
            return fibTable[m];
        }
        // If not, calculate value recursively
        else {
            // Calculating the sum of the previous two values in Fibonacci sequence
            var result:int = helper(m-1) + helper(m-2);
            // Storing the calculated value in the table for future use
            fibTable.push(result);
            // Returning the calculated value
            return result;
        }
    }
    // Calling the recursive helper function
    return helper(n);
}

// Example usage: Calculating the 7th Fibonacci number
var seventhFibonacci:int = fibonacci(7);