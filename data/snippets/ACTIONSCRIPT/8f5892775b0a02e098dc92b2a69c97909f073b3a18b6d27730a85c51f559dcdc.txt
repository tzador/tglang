// This is a class comment

package com.example {

    import flash.display.Sprite;
    import flash.events.MouseEvent;
    
    /**
    * This is a complex class that displays a circle and allows user interaction
    * @param {Number} x - the x-coordinate of the circle's center
    * @param {Number} y - the y-coordinate of the circle's center
    * @param {Number} radius - the radius of the circle
    */
    
    public class Circle extends Sprite {
        
        // private properties
        private var _xPos:Number;
        private var _yPos:Number;
        private var _radius:Number;
        private var _circle:Sprite;
        
        /**
        * Constructor function that sets the initial position and radius of the circle
        * @param {Number} x - the x-coordinate of the circle's center
        * @param {Number} y - the y-coordinate of the circle's center
        * @param {Number} radius - the radius of the circle
        */
        public function Circle(x:Number, y:Number, radius:Number) {
            _xPos = x;
            _yPos = y;
            _radius = radius;
            _circle = new Sprite();
        }
        
        /**
        * Function that draws the circle using the specified coordinates and radius
        */
        public function drawCircle():void {
            _circle.graphics.beginFill(0xFF0000); // set fill color to red
            _circle.graphics.drawCircle(_xPos, _yPos, _radius); // draw the circle using specified coordinates and radius
            _circle.graphics.endFill(); // stop drawing
            addChild(_circle); // add the circle to the stage
        }
        
        /**
        * Function that adds event listeners for mouse interactions with the circle
        */
        public function addListeners():void {
            _circle.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown); // add event listener for mouse down event
            _circle.addEventListener(MouseEvent.MOUSE_UP, onMouseUp); // add event listener for mouse up event
        }
        
        /**
        * Event handler for when the circle is clicked down
        * @param {MouseEvent} event - the mouse event
        */
        private function onMouseDown(event:MouseEvent):void {
            // code for when the circle is clicked down
        }
        
        /**
        * Event handler for when the circle is released after being clicked down
        * @param {MouseEvent} event - the mouse event
        */
        private function onMouseUp(event:MouseEvent):void {
            // code for when the circle is released after being clicked down
        }
        
    }
}