/**
 * This is a class that represents a player character.
 */
class PlayerCharacter {

    // Properties
    private var name:String; // The character's name
    private var level:int;   // The character's level
    private var health:int;  // The character's health

    // Constructor
    public function PlayerCharacter(name:String, level:int, health:int) {
        this.name = name;
        this.level = level;
        this.health = health;
    }

    // Methods

    /**
     * This method updates the character's level and health based on the experience gained.
     * @param experience The amount of experience gained
     */
    public function gainExperience(experience:int):void {
        // Update level based on experience
        this.level += (experience / 100);

        // Update health based on level
        this.health += (level * 10);
    }

    /**
     * This method allows the character to attack an enemy.
     * @param enemy The enemy being attacked
     * @return The amount of damage dealt
     */
    public function attack(enemy:Enemy):int {
        var damage:int = 0;

        // Randomized attack damage based on level
        damage = (Math.random() * (this.level * 10)) + 1;

        // Calculate additional damage if enemy is weak against character's class
        if (enemy.weakness == "Warrior" && this.getClass() == "Warrior") {
            damage += 10;
        }

        // Calculate additional damage if character is using a powerful weapon
        if (this.weapon == "Legendary Sword") {
            damage += 50;
        }

        // Subtract enemy's health based on damage dealt
        enemy.health -= damage;

        // Return damage dealt
        return damage;
    }

    /**
     * This method checks if the character is able to use a specific item.
     * @param item The item to be checked
     * @return Whether or not the character is able to use the item
     */
    public function canUseItem(item:Item):Boolean {
        // Check if character's level is equal or greater than item's required level
        if (this.level >= item.requiredLevel) {
            // Check if character's class is able to use the item
            if (item.classRestriction == "All" || item.classRestriction == this.getClass()) {
                return true;
            }
        }

        return false;
    }

    /**
     * This method equips the character with a new weapon.
     * @param weaponName The name of the weapon to be equipped
     */
    public function equipWeapon(weaponName:String):void {
        // Set the character's weapon to the specified weapon name
        this.weapon = weaponName;

        // Update damage based on weapon's stats
        this.damage += (level * 5);
    }

    /**
     * This method changes the character's class.
     * @param newClass The new class to be changed to
     */
    public function changeClass(newClass:String):void {
        // Update class
        this.class = newClass;

        // Update stats based on new class
        if (this.class == "Warrior") {
            this.maxHealth = (100 + (level * 10));
            this.attackBonus = 10;
        } else if (this.class == "Mage") {
            this.maxHealth = (50 + (level * 5));
            this.attackBonus = 15;
            this.magicBonus = 20;
        } else if (this.class == "Ranger") {
            this.maxHealth = (75 + (level * 7));
            this.attackBonus = 5;
            this.rangedBonus = 25;
        }
    }
}