/**
 * The following function uses recursion to calculate the factorial of a given number.
 * @param num The input number whose factorial is to be calculated
 * @return The factorial of the given number
 */
function factorial(num:int):int {
    if (num == 0) { // base case
        return 1;
    } else { // recursive case
        return num * factorial(num-1); // calling the factorial function again with one less number
    }
}

/**
 * The following function checks if the given number is a prime number using recursion.
 * @param num The input number to be checked
 * @param divisor The divisor to be used in checking if the number is prime
 * @return True if the number is prime, False otherwise
 */
function isPrime(num:int, divisor:int = 2):Boolean {
    if (num < 2 || (num > 2 && num % divisor == 0)) { // not a prime number
        return false;
    } else if (divisor > Math.sqrt(num)) { // reached the end of possible divisors, number is prime
        return true;
    } else { // recursive case
        return isPrime(num, divisor+1); // checking the next possible divisor
    }
}

/**
 * The following function sorts an array of numbers in ascending order using recursion.
 * @param arr The input array to be sorted
 * @return The sorted array
 */
function recursiveSort(arr:Array):Array {
    if (arr.length <= 1) { // base case, array is already sorted
        return arr;
    } else { // recursive case
        var pivot:int = arr[0];
        var smaller:Array = [];
        var larger:Array = [];

        // dividing the array into smaller and larger subarrays based on the pivot
        for each (var num:int in arr) {
            if (num < pivot) {
                smaller.push(num);
            } else if (num > pivot) {
                larger.push(num);
            }
        }

        // combining the sorted smaller and larger subarrays with the pivot in the middle
        return recursiveSort(smaller).concat(pivot, recursiveSort(larger));
    }
}

// Example usage of the above functions
trace(factorial(5)); // output: 120
trace(isPrime(17)); // output: true
trace(recursiveSort([5, 2, 8, 3, 1, 7])); // output: [1, 2, 3, 5, 7, 8]