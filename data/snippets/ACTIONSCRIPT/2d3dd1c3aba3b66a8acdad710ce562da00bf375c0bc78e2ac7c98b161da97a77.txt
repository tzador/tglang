/**
* function that calculates the nth Fibonacci number recursively
* @param n the index of the desired Fibonacci number
* @returns the nth Fibonacci number
*/
function fibonacci(n:int):int {
    if (n <= 0) { // if n is 0 or less, return 0
        return 0;
    } else if (n == 1) { // if n is 1, return 1
        return 1;
    } else { // otherwise, recursively call fibonacci function with n-1 and n-2 and add the results
        return fibonacci(n-1) + fibonacci(n-2);
    }
}

// initialize an array for storing the first 20 Fibonacci numbers
var fibonacciArray:Array = new Array();

// loop through the first 20 numbers and calculate the Fibonacci number for each index
for (var i:int = 0; i < 20; i++) {
    fibonacciArray.push(fibonacci(i)); // add the calculated Fibonacci number to the array
}

// print the contents of the array to the console
trace("The first 20 Fibonacci numbers are:");
for (var j:int = 0; j < 20; j++) {
    trace(fibonacciArray[j]);
}

// output:
// The first 20 Fibonacci numbers are:
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181