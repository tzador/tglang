// This code snippet is used to create a simple particle system in ActionScript.

// Define variables to store the particles and their properties
var particles:Array = [];
var particleCount:int = 100;
var particleSize:int = 5;
var particleSpeed:Number = 1;
var particleDecay:Number = 0.98;
var particleFriction:Number = 0.95;

// Main function to initialize the particle system
function createParticles() {
  // Loop through the particle count
  for(var i:int = 0; i < particleCount; i++) {
    // Create a new particle object
    var particle:Object = new Object();
    
    // Set random starting positions
    particle.x = Math.random() * stage.stageWidth;
    particle.y = Math.random() * stage.stageHeight;
    
    // Set random velocities
    particle.vx = Math.random() * particleSpeed - (particleSpeed * 0.5);
    particle.vy = Math.random() * particleSpeed - (particleSpeed * 0.5);
    
    // Add the particle to the particles array
    particles.push(particle);
    
    // Create a new movie clip for the particle
    var particleMovieClip:MovieClip = new MovieClip();
    
    // Draw a circle for the particle
    particleMovieClip.graphics.beginFill(0xFF0000);
    particleMovieClip.graphics.drawCircle(0, 0, particleSize);
    particleMovieClip.graphics.endFill();
    
    // Add the particle movie clip to the stage
    stage.addChild(particleMovieClip);
  }
}

// Function to update the particles' positions
function updateParticles() {
  // Loop through the particles array
  for(var i:int = 0; i < particles.length; i++) {
    // Get the current particle
    var particle:Object = particles[i];
    
    // Update the particle's position based on velocity
    particle.x += particle.vx;
    particle.y += particle.vy;
    
    // Apply friction to the particle's velocity
    particle.vx *= particleFriction;
    particle.vy *= particleFriction;
    
    // Apply decay to the particle's size
    particleSize *= particleDecay;
    
    // Update the particle movie clip's position
    particleMovieClip.x = particle.x;
    particleMovieClip.y = particle.y;
    
    // Update the particle movie clip's size
    particleMovieClip.scaleX = particleSize;
    particleMovieClip.scaleY = particleSize;
  }
}

// Function to remove particles when they go off stage
function removeParticles() {
  // Loop through the particles array in reverse order
  for(var i:int = particles.length - 1; i >= 0; i--) {
    // Get the current particle
    var particle:Object = particles[i];
    
    // Check if the particle is off stage
    if(particle.x < 0 || particle.x > stage.stageWidth ||
       particle.y < 0 || particle.y > stage.stageHeight)
    {
      // Remove the particle from the stage and the array
      stage.removeChild(particleMovieClip);
      particles.splice(i, 1);
    }
  }
}

// Function to constantly update the particle system
function loop() {
  // Call the update functions
  updateParticles();
  removeParticles();
  
  // Set the loop to continuously run at 30 frames per second
  setTimeout(loop, 1000/30);
}

// Call the function to create the particles
createParticles();

// Start the loop
loop();