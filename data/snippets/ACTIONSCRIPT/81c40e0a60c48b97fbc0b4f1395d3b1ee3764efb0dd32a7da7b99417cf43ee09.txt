// This code snippet uses ActionScript to create a particle system with customizable options

// Create a class for the particle system
class ParticleSystem {

	// Define the variables for the particle system
	private var particleList:Array;
	private var maxParticles:Number;
	private var emissionRate:Number;
	private var particleLifetime:Number;
	private var particleSize:Number;
	private var particleVelocity:Number;

	// Create a constructor function to initialize the variables
	public function ParticleSystem() {
		particleList = new Array();
		maxParticles = 100; // default value for maximum number of particles
		emissionRate = 10; // default value for particles emitted per frame
		particleLifetime = 2; // default value for particle lifetime in seconds
		particleSize = 5; // default value for particle size in pixels
		particleVelocity = 10; // default value for particle velocity
	}

	// Create a function to update the particle system
	public function update():Void {

		// Loop through the particles in the particleList
		for (var i:Number = 0; i < particleList.length; i++) {
			var particle:Object = particleList[i];

			// Update particle position based on its velocity
			particle.x += particle.velocityX;
			particle.y += particle.velocityY;

			// Update particle lifetime and remove it if it's expired
			particle.lifetime -= 1;

			if (particle.lifetime <= 0) {
				particleList.splice(i, 1);
				i--;
			}
		}

		// Emit new particles based on the emission rate
		for (var j:Number = 0; j < emissionRate; j++) {

			// Create a new particle object with random position and velocity
			var newParticle:Object = {
				x: Math.random() * 500,
				y: Math.random() * 500,
				velocityX: (Math.random() * 2 - 1) * particleVelocity,
				velocityY: (Math.random() * 2 - 1) * particleVelocity,
				lifetime: particleLifetime
			};

			// Add the new particle to the particleList
			particleList.push(newParticle);

			// Stop creating new particles if the maximum number has been reached
			if (particleList.length >= maxParticles) {
				break;
			}
		}
	}

	// Create a function to draw the particles
	public function draw():Void {

		// Loop through the particles in the particleList
		for (var i:Number = 0; i < particleList.length; i++) {
			var particle:Object = particleList[i];

			// Draw the particle as a circle with the given size
			drawCircle(particle.x, particle.y, particleSize);
		}
	}

	// Helper function to draw a circle
	private function drawCircle(x:Number, y:Number, size:Number):Void {
		// Code to draw a circle using the given position and size
	}
}

// Create an instance of the ParticleSystem class
var particleSystem:ParticleSystem = new ParticleSystem();

// Add the particle system to the stage
this.addChild(particleSystem);

// Call the update and draw functions in an onEnterFrame event
onEnterFrame = function():Void {
	particleSystem.update();
	particleSystem.draw();
}