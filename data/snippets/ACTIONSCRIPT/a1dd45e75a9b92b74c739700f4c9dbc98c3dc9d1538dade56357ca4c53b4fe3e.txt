function flattenArray(arr:Array):Array { //This function takes in an array as input and returns a flattened version of the array
  var flattenedArr:Array = new Array(); //Create an empty array to store the flattened version of the input array
  for (var i:int = 0; i < arr.length; i++) { //Loop through the input array
    if (arr[i] is Array) { //Check if the current element is an array
      flattenedArr = flattenedArr.concat(flattenArray(arr[i])); //If it is an array, recursively call the function to flatten it and append it to the flattenedArr
    } else { //If the current element is not an array
      flattenedArr.push(arr[i]); //Push it into the flattenedArr
    }
  }
  return flattenedArr; //Return the flattened array
}

var nestedArr:Array = [1, [2, [3, 4], 5], 6]; //Create a nested array to test the function
var flattenedArr:Array = flattenArray(nestedArr); //Call the flattenArray function on the nested array
trace(flattenedArr); //Output: [1, 2, 3, 4, 5, 6] //Trace the flattened array to confirm the output