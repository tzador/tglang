[
  "!",
  "!=",
  "\"cmake\", \"--build\", \".\"",
  "\"cmake\", \"--install\", \".\"",
  "\"cmake\", \"-G\", \"Ninja\"",
  "\"ctest\"",
  "\"ctest\", \"--build-and-test\"",
  "\"make\", \"-j2\"",
  "\"make\", \"clean\"",
  "\"make\", \"install\"",
  "\"make\", \"package\"",
  "\"make\", \"run_tests\"",
  "#",
  "#include",
  "${CMAKE_CURRENT_LIST_DIR}",
  "${CMAKE_CURRENT_SOURCE_DIR}",
  "${CMAKE_CXX_COMPILER}",
  "${}",
  "%",
  "&",
  "&&",
  "()",
  "*",
  "*/",
  "+",
  "++",
  "-",
  "--",
  "->",
  ".",
  "/",
  "/*",
  "//",
  ":",
  "<",
  "<=",
  "=",
  "==",
  ">",
  ">=",
  "?",
  "ADD_CUSTOM_COMMAND",
  "ADD_DEFINITIONS",
  "ADD_EXECUTABLE",
  "ADD_LIBRARY",
  "ADD_SUBDIRECTORY",
  "ADD_SUBDIRECTORY(",
  "AND",
  "AUX_SOURCE_DIRECTORY",
  "AUX_SOURCE_DIRECTORY(",
  "BUILD",
  "CHECK_CXX_SOURCE_COMPILES",
  "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",
  "CMAKE_BINARY_DIR",
  "CMAKE_BUILD_RPATH",
  "CMAKE_BUILD_TYPE",
  "CMAKE_COMMAND",
  "CMAKE_CUDA_COMPILER",
  "CMAKE_CURRENT_BINARY_DIR",
  "CMAKE_CURRENT_BINARY_PATH",
  "CMAKE_CURRENT_LIST_DIR",
  "CMAKE_CURRENT_SOURCE_DIR",
  "CMAKE_CURRENT_SOURCE_PATH",
  "CMAKE_CXX_COMPILER",
  "CMAKE_CXX_COMPILER_ID",
  "CMAKE_CXX_FLAGS",
  "CMAKE_CXX_STANDARD",
  "CMAKE_CXX_STANDARD_REQUIRED",
  "CMAKE_C_COMPILER",
  "CMAKE_C_COMPILER_ID",
  "CMAKE_C_FLAGS",
  "CMAKE_EXPORT_COMPILE_COMMANDS",
  "CMAKE_FIND_ROOT_PATH",
  "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",
  "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
  "CMAKE_GENERATOR",
  "CMAKE_INCLUDE_CURRENT_DIR",
  "CMAKE_INCLUDE_PATH",
  "CMAKE_INSTALL_DEPS",
  "CMAKE_INSTALL_DIR",
  "CMAKE_INSTALL_FULL_BINDIR",
  "CMAKE_INSTALL_FULL_INCLUDEDIR",
  "CMAKE_INSTALL_FULL_LIBDIR",
  "CMAKE_INSTALL_PREFIX",
  "CMAKE_INSTALL_RPATH",
  "CMAKE_IS_SOURCE",
  "CMAKE_LIBRARY_OUTPUT_DIRECTORY",
  "CMAKE_LIBRARY_PATH",
  "CMAKE_MINIMUM_REQUIRED",
  "CMAKE_MODULE_LINKER_FLAGS",
  "CMAKE_MODULE_PATH",
  "CMAKE_OBJECT_PATH",
  "CMAKE_OBJECT_PREFIX",
  "CMAKE_PREFIX_PATH",
  "CMAKE_PROJECT_INCLUDE",
  "CMAKE_RUNTIME_OUTPUT_DIRECTORY",
  "CMAKE_SCRIPT_MODE_FILE",
  "CMAKE_SIZEOF_VOID_P",
  "CMAKE_SOURCE_DIR",
  "CMAKE_STATIC_LIBRARY_PREFIX",
  "CMAKE_SYSTEM",
  "CMAKE_SYSTEM_INCLUDE_PATH",
  "CMAKE_SYSTEM_LIBRARY_PATH",
  "CMAKE_SYSTEM_NAME",
  "CMAKE_SYSTEM_PROCESSOR",
  "CMAKE_SYSTEM_VERSION",
  "CMAKE_VERBOSE_MAKEFILE",
  "CMAKE_VERSION",
  "CMakeLists.txt",
  "COMMAND",
  "COMMAND_EXPAND_LISTS",
  "CONFIG",
  "CONFIGURE_FILE",
  "CUDA_INCLUDE_DIRECTORIES",
  "CUDA_LIBRARIES",
  "ELSE",
  "ENABLE_LANGUAGE",
  "ENDFOREACH",
  "ENDFUNCTION",
  "ENDIF",
  "ENDMACRO",
  "ENDWHILE",
  "EXECUTABLE_OUTPUT_PATH",
  "EXECUTE_PROCESS",
  "EXEC_PROGRAM",
  "EXISTS",
  "EXPORT_LIBRARY_DEPENDENCIES",
  "EXPORT_LIBRARY_TARGETS",
  "FIND",
  "FIND_PACKAGE",
  "FIND_PACKAGE_HANDLE_STANDARD_ARGS",
  "FIND_PACKAGE_HANDLE_STANDARD_ARGS_WITH_DEFAULTS",
  "FIND_PATH",
  "FIND_PROGRAM",
  "FOREACH",
  "FUNCTION",
  "GET",
  "GET_PROPERTY",
  "IF",
  "INCLUDE",
  "INCLUDE_DIRECTORIES",
  "INSTALL",
  "INSTALL(",
  "INSTALL_DIRECTORY",
  "INSTALL_TARGETS",
  "IS_DIRECTORY",
  "LANGUAGE",
  "LIBRARY_OUTPUT_PATH",
  "LINK_DIRECTORIES",
  "LINK_LIBRARIES",
  "LIST",
  "MACRO",
  "MATCHES",
  "MESSAGE",
  "MESSAGE(",
  "NOT",
  "OPTION",
  "OR",
  "PROJECT",
  "PROJECT(",
  "PROJECT_BINARY_DIR",
  "PROJECT_SOURCE_DIR",
  "QT5_WRAP_CPP",
  "REQUIRED",
  "SET",
  "SOURCE_GROUP",
  "STRING",
  "TARGET_COMPILE_DEFINITIONS",
  "TARGET_COMPILE_FEATURES",
  "TARGET_COMPILE_OPTIONS",
  "TARGET_INCLUDE_DIRECTORIES",
  "TARGET_LINK_LIBRARIES",
  "TARGET_PRECOMPILE_HEADERS",
  "TRY_COMPILE",
  "TRY_RUN",
  "UNSET",
  "VERSION",
  "WHILE",
  "WORKING_DIRECTORY",
  "[LANGUAGE]",
  "[]",
  "^",
  "add_compile_option",
  "add_compile_options",
  "add_compile_options(",
  "add_custom_command",
  "add_custom_command(",
  "add_custom_command(TARGET",
  "add_custom_target",
  "add_custom_target(",
  "add_custom_target(${NAME} ALL DEPENDS ${NAME}-annotated)",
  "add_custom_target(run DEPENDS ${PROJECT_NAME}",
  "add_definitions",
  "add_definitions(",
  "add_dependencies",
  "add_executable",
  "add_executable(",
  "add_executable(${PROJECT_NAME}",
  "add_library",
  "add_library(",
  "add_library(${NAME})",
  "add_library(${PROJECT_NAME}",
  "add_link_options",
  "add_subdirectory",
  "add_subdirectory(",
  "add_test",
  "and",
  "aux_source_directory",
  "break",
  "bundle",
  "cache",
  "case",
  "catch",
  "class",
  "cmake",
  "cmake --build",
  "cmake --configure",
  "cmake --help-command",
  "cmake --install",
  "cmake --system-information",
  "cmake --target",
  "cmake --version",
  "cmake_add_custom_command",
  "cmake_add_custom_target",
  "cmake_add_link_options",
  "cmake_binary_dir",
  "cmake_dependent_option",
  "cmake_host_system_information",
  "cmake_host_system_name",
  "cmake_install_prefix",
  "cmake_language",
  "cmake_link_directories",
  "cmake_minimum_required",
  "cmake_minimum_required(",
  "cmake_minimum_required(VERSION",
  "cmake_minimum_required(VERSION)",
  "cmake_minimum_version",
  "cmake_parse_arguments",
  "cmake_parse_arguments(",
  "cmake_path",
  "cmake_policy",
  "cmake_policy(",
  "cmake_policy(GET",
  "cmake_policy(SET",
  "cmake_policy(VERSION",
  "cmake_print_variables",
  "cmake_simple_find_package",
  "cmake_slow_find_package",
  "cmake_source_group",
  "cmake_test",
  "cmake_trace",
  "cmake_variable_get",
  "cmake_version",
  "cmake_warning",
  "cmakelists.txt",
  "compute",
  "config",
  "configure_file",
  "const",
  "continue",
  "create_test_sourcelist",
  "ctest",
  "custom_command",
  "default",
  "dependencies",
  "directory",
  "echo",
  "else",
  "else(",
  "else()",
  "elseif",
  "elseif(",
  "elseif(NOT DEFINED",
  "elseif(NOT DEFINED CMAKE_BUILD_TYPE",
  "elseif(NOT TARGET",
  "elseif(TARGET",
  "enable_language",
  "enable_language(",
  "enable_testing",
  "endforeach",
  "endforeach(",
  "endfunction",
  "endif",
  "endif(",
  "endif()",
  "endif(NOT DEFINED",
  "endif(NOT TARGET",
  "endif(TARGET",
  "endmacro",
  "endwhile",
  "enum",
  "exclude_from_all",
  "exec_program",
  "executables",
  "execute_process",
  "export",
  "false",
  "file",
  "file(GLOB",
  "file(GLOB_RECURSE",
  "file(MAKE_DIRECTORY",
  "file_directory_name",
  "find_file",
  "find_library",
  "find_package",
  "find_package(",
  "find_package(${NAME})",
  "find_package(Qt5 COMPONENTS",
  "find_package(Threads)",
  "find_path",
  "find_program",
  "foreach",
  "foreach(",
  "foreach_file",
  "function",
  "get_cmake_property",
  "get_cmake_property(",
  "get_directory_property",
  "get_directory_property(",
  "get_filename_component",
  "get_property",
  "get_property(",
  "get_target_property",
  "glob",
  "gtest_add_tests",
  "if",
  "if(",
  "if(${ARG} MATCHES \"^([A-Za-z0-9\\_]+)$\")",
  "if(${ARG} MATCHES \"^([A-Za-z0-9\\_]+):([A-Za-z0-9\\_]+)$\")",
  "if(${ARG} MATCHES \"^([A-Za-z0-9\\_]+):([A-Za-z0-9\\_]+):([A-Za-z0-9\\_]+)$\")",
  "if(${ARG} MATCHES \"^([A-Za-z0-9\\_]+)=([A-Za-z0-9\\_\\.]+)$\")",
  "if(${NAME} AND NOT ${NAME} STREQUAL \"NOBUILD\")",
  "if(APPLE)",
  "if(CMAKE_BUILD_TYPE MATCHES check)",
  "if(CMAKE_BUILD_TYPE MATCHES profile)",
  "if(CMAKE_COMPILER_IS_GNUCC AND CMAKE_BUILD_TYPE)",
  "if(CMAKE_COMPILER_IS_GNUCC)",
  "if(CMAKE_COMPILER_IS_GNUXX AND CMAKE_BUILD_TYPE)",
  "if(CMAKE_COMPILER_IS_GNUXX)",
  "if(CMAKE_CONFIGURATION_TYPES)",
  "if(CMAKE_GENERATOR STREQUAL Xcode)",
  "if(DEFINED $ENV{VAR_NAME})",
  "if(DEFINED ${NAME}_INCLUDE_DIR)",
  "if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/lib)",
  "if(HAVE_TF_PROTO_ZERO_COPY_KEYWORD)",
  "if(MSVC)",
  "if(NOT",
  "if(NOT CMAKE_MATCH_1)",
  "if(NOT DEFINED",
  "if(NOT DEFINED $ENV{VAR_NAME})",
  "if(NOT DEFINED ${NAME}_BIN_DIR)",
  "if(NOT DEFINED ${NAME}_INCLUDE_DIRS)",
  "if(NOT DEFINED ${NAME}_LIB_DIR)",
  "if(NOT DEFINED ${VAR})",
  "if(NOT TARGET",
  "if(NOT USING_XCODE)",
  "if(QT_VERSION VERSION_LESS",
  "if(TARGET",
  "if(UNIX AND NOT APPLE)",
  "if(WIN32 AND NOT CYGWIN)",
  "if_defined",
  "if_file_exists",
  "include",
  "include(ExternalProject)",
  "include(Find${NAME})",
  "include_directories",
  "include_directories(",
  "include_directories(${NAME})",
  "include_directories(${Qt5Core_INCLUDE_DIRS})",
  "include_external_msproject",
  "include_regular_expression",
  "install",
  "install(",
  "install(DIRECTORY",
  "install(TARGETS",
  "install_cmake_privileges",
  "install_files",
  "link_directories",
  "link_directories(",
  "link_libraries",
  "list",
  "list(APPEND",
  "macro",
  "macro(",
  "make",
  "math",
  "message",
  "message_files",
  "message_vars",
  "namespace",
  "not",
  "object_libraries",
  "off",
  "on",
  "operator",
  "option",
  "option(",
  "or",
  "output_required_files",
  "print",
  "private",
  "project",
  "project(",
  "protected",
  "public",
  "return",
  "separate_arguments",
  "set",
  "set(",
  "set(${NAME}_BIN_DIR",
  "set(${NAME}_BIN_DIRS",
  "set(${NAME}_DIR",
  "set(${NAME}_INCLUDE_DIR",
  "set(${NAME}_INCLUDE_DIRS",
  "set(${NAME}_LIB_DIR",
  "set(${NAME}_LIB_DIRS",
  "set(${NAME}_SOURCE_DIR",
  "set(CMAKE_",
  "set(CMAKE_AUTOMOC ON",
  "set(CMAKE_AUTORCC ON",
  "set(CMAKE_AUTOUIC ON",
  "set(CMAKE_BUILD_TYPE",
  "set(CMAKE_BUILD_TYPE)",
  "set(CMAKE_CXX_FLAGS",
  "set(CMAKE_CXX_FLAGS_DEBUG",
  "set(CMAKE_CXX_FLAGS_RELEASE",
  "set(CMAKE_CXX_STANDARD",
  "set(CMAKE_CXX_STANDARD_REQUIRED",
  "set(CMAKE_INCLUDE_CURRENT_DIR",
  "set(CMAKE_MODULE_PATH",
  "set(PROJECT_SOURCES",
  "set_directory_properties",
  "set_directory_properties(",
  "set_ifdef",
  "set_ifndef",
  "set_properties",
  "set_property",
  "set_property(",
  "set_source_files_properties",
  "set_source_files_properties(",
  "set_target_properties",
  "set_target_properties(",
  "set_tests_properties",
  "size",
  "source_group",
  "sources",
  "static",
  "string",
  "string(",
  "struct",
  "switch",
  "target",
  "target_compile_definitions",
  "target_compile_definitions(",
  "target_compile_features",
  "target_compile_features(",
  "target_compile_options",
  "target_compile_options(",
  "target_include_directories",
  "target_include_directories(",
  "target_include_directories(${NAME})",
  "target_link_directories",
  "target_link_directories(",
  "target_link_libraries",
  "target_link_libraries(",
  "target_link_libraries(${PROJECT_NAME}",
  "target_link_options",
  "target_link_options(",
  "target_precompile_headers(",
  "target_sources",
  "target_sources(",
  "throw",
  "true",
  "try",
  "try_compile",
  "try_run",
  "typedef",
  "union",
  "unset",
  "using",
  "variable_watch",
  "while",
  "while(",
  "while(NOT",
  "|",
  "||"
]