[
  "!=",
  "\"",
  "#",
  "#!",
  "#(",
  "#()",
  "#?[",
  "#_",
  "#{}",
  "$",
  "%",
  "&",
  "'",
  "(",
  "(:keys",
  "(:require",
  "(and",
  "(apply",
  "(assoc",
  "(comment",
  "(cond",
  "(def",
  "(defmacro",
  "(defn",
  "(defn-",
  "(defnano",
  "(defprotocol",
  "(defstruct",
  "(do",
  "(doseq",
  "(fn",
  "(for",
  "(hash-map",
  "(if",
  "(let",
  "(letfn",
  "(lift",
  "(not",
  "(or",
  "(proxy",
  "(seq",
  "(when",
  "(when-first",
  "(when-let",
  "(when-not",
  ")",
  "*",
  "+",
  "-",
  "->",
  "->>",
  ".",
  "..",
  "..>",
  "..>>",
  ".filter",
  ".first",
  ".format",
  ".group-by",
  ".indexOf",
  ".last",
  ".length",
  ".main",
  ".map",
  ".println",
  ".reduce",
  ".sort",
  "/",
  ":",
  "::",
  ":arglist",
  ":as",
  ":import",
  ":keys",
  ":post",
  ":pre",
  ":strs",
  ":syms",
  ":use",
  ";",
  ";;",
  "<",
  "<<",
  "<=",
  "=",
  "==",
  ">",
  ">=",
  ">>",
  "Boolean/TRUE",
  "Integer/parseInt",
  "List",
  "Math/PI",
  "String",
  "Thread",
  "[",
  "[]",
  "]",
  "_",
  "and",
  "apply",
  "are",
  "array",
  "as",
  "as->",
  "assert",
  "assoc",
  "assoc!",
  "assoc-in",
  "atom",
  "binding",
  "boolean",
  "byte",
  "case",
  "cast",
  "catch",
  "char",
  "clojure",
  "coll?",
  "comment",
  "comp",
  "concat",
  "cond",
  "cond->",
  "cond->>",
  "condp",
  "conj",
  "conj!",
  "cons",
  "contains?",
  "count",
  "dec",
  "declare",
  "def",
  "definline",
  "defmacro",
  "defmethod",
  "defmixin",
  "defmulti",
  "defn",
  "defn-",
  "defnano",
  "defonce",
  "defproject",
  "defprotocol",
  "defrecord",
  "defstruct",
  "deftest",
  "deftype",
  "deref",
  "dissoc",
  "do",
  "doall",
  "dorun",
  "doseq",
  "doto",
  "double",
  "drop",
  "drop-while",
  "else",
  "empty",
  "empty?",
  "eval",
  "even?",
  "every",
  "extend-type",
  "false",
  "false?",
  "filter",
  "finally",
  "first",
  "float",
  "fn",
  "fn*",
  "fn-",
  "fn?",
  "for",
  "format",
  "frequencies",
  "func",
  "gen-class",
  "gensym",
  "get",
  "hash-map",
  "hash-set",
  "identity",
  "if",
  "if-",
  "if-let",
  "if-not",
  "import",
  "in-ns",
  "inc",
  "int",
  "integer",
  "into",
  "is",
  "iterate",
  "juxt",
  "keep",
  "keyword",
  "keyword?",
  "lambda",
  "last",
  "lazy",
  "lazy-cat",
  "lazy-seq",
  "let",
  "letfn",
  "lift",
  "list",
  "lojure",
  "long",
  "loop",
  "loop*",
  "loop-recur",
  "loop/recur",
  "macro",
  "map",
  "map-entry",
  "map-indexed",
  "mapcat",
  "mapv",
  "match",
  "merge",
  "mod",
  "modulo",
  "namespace",
  "neg",
  "neg?",
  "new",
  "next",
  "nil",
  "nil?",
  "not",
  "not=",
  "ns",
  "nth",
  "nthnext",
  "null",
  "null?",
  "odd?",
  "or",
  "partial",
  "partition",
  "pmatch",
  "pop",
  "pos?",
  "pr",
  "pred?",
  "prime?",
  "print",
  "println",
  "proxy",
  "quasiquote",
  "queue",
  "quot",
  "quote",
  "quote-like",
  "range",
  "read",
  "read-line",
  "recur",
  "recur*",
  "recur-loop",
  "recurring",
  "reduce",
  "reduce-kv",
  "reify",
  "rem",
  "replace",
  "require",
  "resolve",
  "rest",
  "result",
  "reverse",
  "second",
  "seq",
  "seq?",
  "seque",
  "set",
  "set!",
  "some",
  "some->",
  "some?",
  "sort",
  "sorted-map",
  "static",
  "str",
  "string",
  "string?",
  "subseq",
  "subvec",
  "swap!",
  "symbol",
  "take",
  "take-while",
  "testing",
  "thread-first",
  "thread-last",
  "throw",
  "true",
  "true?",
  "try",
  "type",
  "unquote",
  "until",
  "update",
  "use",
  "using",
  "var",
  "vec",
  "vector",
  "when",
  "when-first",
  "when-let",
  "when-not",
  "when-ns",
  "when-some",
  "when-unset",
  "while",
  "with",
  "with-open",
  "with-precision",
  "write",
  "zero?",
  "zipmap",
  "{",
  "|>",
  "}"
]