[
  "\"",
  "\"hello\"",
  "#",
  "#!",
  "#!/bin/sh",
  "#%app",
  "#%basis",
  "#%datum",
  "#%kernel",
  "#%module",
  "#%require",
  "#%top",
  "#'(",
  "#'()",
  "#(",
  "#/bin/sh",
  "#:lib",
  "#:reader",
  "#;",
  "#;#",
  "#\\",
  "#\\newline",
  "#\\null",
  "#\\space",
  "#f",
  "#f32vector",
  "#fnil",
  "#lang",
  "#lang r6rs",
  "#lang r7rs",
  "#lang r7rs-small",
  "#lang\\*",
  "#next",
  "#nil",
  "#t",
  "#t64vector",
  "#|",
  "%",
  "'",
  "(",
  "(#!r6rs",
  "(#!r7rs",
  "(#!r7rs-small)",
  "(add1",
  "(and",
  "(apply",
  "(car",
  "(cdr",
  "(cond",
  "(cons",
  "(display",
  "(eq?",
  "(equal?",
  "(if",
  "(lambda",
  "(let",
  "(list",
  "(map",
  "(newline",
  "(not",
  "(or",
  "(reduce",
  "(select",
  "(setq",
  "(sub1",
  "(zero?",
  ")",
  "*",
  "+",
  ",",
  "-",
  "-123",
  "->",
  ".",
  "/",
  "/*",
  "//",
  "3.1415",
  ":=",
  ":bar",
  ":foo",
  ";",
  ";;",
  "<",
  "<=",
  "=",
  "==",
  "=>",
  ">",
  ">=",
  "[",
  "\\",
  "]",
  "`(",
  "abs",
  "alist",
  "and",
  "andmap",
  "append",
  "apply",
  "assert",
  "assoc",
  "atom?",
  "begin",
  "begin0",
  "boolean?",
  "box",
  "cadr",
  "call-with-current-continuation",
  "call-with-input-file",
  "call-with-output-file",
  "call-with-values",
  "call/cc",
  "call/cc?",
  "car",
  "car-cdr",
  "case",
  "case-lambda",
  "catch",
  "cdr",
  "ceiling",
  "char?",
  "class",
  "comment",
  "cond",
  "cond-expand",
  "conde",
  "cons",
  "cons-stream",
  "cos",
  "count",
  "current-thread",
  "def",
  "define",
  "define-class",
  "define-datatype",
  "define-library",
  "define-macro",
  "define-record",
  "define-record-type",
  "define-structure",
  "define-syntax",
  "define-values",
  "defmacro",
  "defun",
  "delay",
  "deref",
  "display",
  "displayln",
  "do",
  "dynamic-wind",
  "else",
  "empty?",
  "eof-object",
  "eq?",
  "equal?",
  "equivalent?",
  "eqv?",
  "error",
  "eval",
  "even?",
  "except",
  "exit",
  "export",
  "expt",
  "false",
  "filter",
  "first",
  "floor",
  "fluid-let",
  "fold",
  "fold-lambda",
  "foldl",
  "foldr",
  "for-each",
  "force",
  "format",
  "fourth",
  "free-identifier=?",
  "func",
  "funcall",
  "function",
  "fxplus",
  "global-environment",
  "guard",
  "hash-table",
  "if",
  "import",
  "include",
  "inherit",
  "integer?",
  "iota",
  "isEmpty",
  "isList",
  "isNumber",
  "isPair",
  "isProcedure",
  "isString",
  "isSymbol",
  "isVector",
  "lambda",
  "lambda*",
  "lambda-body",
  "lambda-case",
  "lambda-list",
  "lambda-list-keywords",
  "lambda-parameters",
  "length",
  "let",
  "let*",
  "let*-values",
  "let-macro",
  "let-syntax",
  "let-values",
  "let/cc",
  "let/ec",
  "let/esc",
  "letrec",
  "letrec-syntax",
  "letrec-values",
  "list",
  "list->vector",
  "list-head",
  "list-ref",
  "list-tail",
  "list?",
  "load",
  "log",
  "loop",
  "macro?",
  "make-channel",
  "make-record-type-descriptor",
  "make-string",
  "make-vector",
  "map",
  "mapcar",
  "maplist",
  "match",
  "math",
  "max",
  "member",
  "memq",
  "min",
  "mod",
  "modulo",
  "named let",
  "new",
  "newline",
  "nil",
  "not",
  "not=",
  "nreverse",
  "null",
  "null?",
  "number?",
  "object-name",
  "or",
  "or=",
  "ormap",
  "pair",
  "pair?",
  "parameterize",
  "parse",
  "port",
  "print",
  "println",
  "procedure",
  "procedure?",
  "provide",
  "quasiquote",
  "quasiquote-syntax",
  "quote",
  "quote-syntax",
  "raise",
  "read",
  "real?",
  "record-constructor",
  "recur",
  "recursive",
  "reduce",
  "ref",
  "require",
  "rest",
  "reverse",
  "second",
  "select",
  "set!",
  "set-car!",
  "set-cdr!",
  "sin",
  "sleep",
  "sqrt",
  "start",
  "stream-car",
  "stream-cdr",
  "string",
  "string->list",
  "string->symbol",
  "string-append",
  "string-ci=?",
  "string-downcase",
  "string-length",
  "string-ref",
  "string-upcase",
  "string=?",
  "string?",
  "struct",
  "substring",
  "symbol->string",
  "symbol?",
  "syntax",
  "syntax-case",
  "syntax-error",
  "syntax-rule",
  "syntax-rules",
  "tan",
  "third",
  "time",
  "true",
  "unbox",
  "unless",
  "unquote",
  "unquote-splicing",
  "use",
  "vector",
  "vector->list",
  "vector-map",
  "vector-ref",
  "vector-set!",
  "vector?",
  "when",
  "with-continuation-mark",
  "with-exception-handler",
  "with-handlers",
  "with-input-from-file",
  "with-output-to-file",
  "with-syntax",
  "write",
  "yield",
  "zero?",
  "{",
  "|#",
  "}"
]